BOOL nw_protocol_http2_transport_remove_input_handler(nw_protocol *a1, nw_protocol *a2)
{
  char *handle;
  _QWORD *output_handler_context;
  uint64_t v6;
  NSObject *v7;
  NSObject *v8;
  _BOOL8 result;
  uint64_t v10;
  const char *v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  int v17;
  char *v18;
  nw_protocol *v19;
  char *v20;
  NSObject *v21;
  os_log_type_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  id v27;
  void *v28;
  char *v29;
  _BOOL4 v30;
  const char *v31;
  int64_t int64;
  int64_t *v33;
  NSObject *v34;
  uint64_t v35;
  const char *v36;
  NSObject *v37;
  os_log_type_t v38;
  uint32_t v39;
  uint64_t v40;
  dispatch_time_t v41;
  uint64_t v42;
  NSObject *v43;
  NSObject *v44;
  os_log_type_t v45;
  char *v46;
  NSObject *v47;
  os_log_type_t v48;
  const char *v49;
  NSObject *v50;
  char *backtrace_string;
  _BOOL4 v52;
  const char *v53;
  _BOOL4 v54;
  _BOOL4 v55;
  char *v56;
  _BOOL4 v57;
  NSObject *v58;
  NSObject *v59;
  NSObject *v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD v63[6];
  _QWORD v64[5];
  char v65;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v68;
  __int16 v69;
  nw_protocol *v70;
  __int16 v71;
  _BYTE v72[18];
  uint64_t v73;

  v73 = *MEMORY[0x1E0C80C00];
  if (gLogDatapath)
  {
    v43 = __nwlog_obj();
    if (os_log_type_enabled(v43, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446466;
      v68 = "nw_protocol_http2_transport_remove_input_handler";
      v69 = 2048;
      v70 = a2;
      _os_log_impl(&dword_182FBE000, v43, OS_LOG_TYPE_DEBUG, "%{public}s called with input_protocol %p", buf, 0x16u);
    }
  }
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v68 = "nw_protocol_http2_transport_remove_input_handler";
    v20 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v65 = 0;
    if (!__nwlog_fault(v20, &type, &v65))
      goto LABEL_62;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v44 = __nwlog_obj();
      v45 = type;
      if (!os_log_type_enabled(v44, type))
        goto LABEL_62;
      *(_DWORD *)buf = 136446210;
      v68 = "nw_protocol_http2_transport_remove_input_handler";
      v23 = "%{public}s called with null protocol";
      goto LABEL_128;
    }
    if (!v65)
    {
      v44 = __nwlog_obj();
      v45 = type;
      if (!os_log_type_enabled(v44, type))
        goto LABEL_62;
      *(_DWORD *)buf = 136446210;
      v68 = "nw_protocol_http2_transport_remove_input_handler";
      v23 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_128;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v44 = __nwlog_obj();
    v45 = type;
    v52 = os_log_type_enabled(v44, type);
    if (!backtrace_string)
    {
      if (!v52)
        goto LABEL_62;
      *(_DWORD *)buf = 136446210;
      v68 = "nw_protocol_http2_transport_remove_input_handler";
      v23 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_128;
    }
    if (!v52)
      goto LABEL_104;
    *(_DWORD *)buf = 136446466;
    v68 = "nw_protocol_http2_transport_remove_input_handler";
    v69 = 2082;
    v70 = (nw_protocol *)backtrace_string;
    v53 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
    goto LABEL_103;
  }
  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v68 = "nw_protocol_http2_transport_remove_input_handler";
    v20 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v65 = 0;
    if (!__nwlog_fault(v20, &type, &v65))
      goto LABEL_62;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v44 = __nwlog_obj();
      v45 = type;
      if (!os_log_type_enabled(v44, type))
        goto LABEL_62;
      *(_DWORD *)buf = 136446210;
      v68 = "nw_protocol_http2_transport_remove_input_handler";
      v23 = "%{public}s called with null http2_transport";
      goto LABEL_128;
    }
    if (!v65)
    {
      v44 = __nwlog_obj();
      v45 = type;
      if (!os_log_type_enabled(v44, type))
        goto LABEL_62;
      *(_DWORD *)buf = 136446210;
      v68 = "nw_protocol_http2_transport_remove_input_handler";
      v23 = "%{public}s called with null http2_transport, backtrace limit exceeded";
      goto LABEL_128;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v44 = __nwlog_obj();
    v45 = type;
    v54 = os_log_type_enabled(v44, type);
    if (!backtrace_string)
    {
      if (!v54)
        goto LABEL_62;
      *(_DWORD *)buf = 136446210;
      v68 = "nw_protocol_http2_transport_remove_input_handler";
      v23 = "%{public}s called with null http2_transport, no backtrace";
      goto LABEL_128;
    }
    if (!v54)
      goto LABEL_104;
    *(_DWORD *)buf = 136446466;
    v68 = "nw_protocol_http2_transport_remove_input_handler";
    v69 = 2082;
    v70 = (nw_protocol *)backtrace_string;
    v53 = "%{public}s called with null http2_transport, dumping backtrace:%{public}s";
LABEL_103:
    _os_log_impl(&dword_182FBE000, v44, v45, v53, buf, 0x16u);
    goto LABEL_104;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v68 = "nw_protocol_http2_transport_remove_input_handler";
    v20 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v65 = 0;
    if (!__nwlog_fault(v20, &type, &v65))
      goto LABEL_62;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v44 = __nwlog_obj();
      v45 = type;
      if (!os_log_type_enabled(v44, type))
        goto LABEL_62;
      *(_DWORD *)buf = 136446210;
      v68 = "nw_protocol_http2_transport_remove_input_handler";
      v23 = "%{public}s called with null input_protocol";
      goto LABEL_128;
    }
    if (v65)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v44 = __nwlog_obj();
      v45 = type;
      v55 = os_log_type_enabled(v44, type);
      if (backtrace_string)
      {
        if (v55)
        {
          *(_DWORD *)buf = 136446466;
          v68 = "nw_protocol_http2_transport_remove_input_handler";
          v69 = 2082;
          v70 = (nw_protocol *)backtrace_string;
          v53 = "%{public}s called with null input_protocol, dumping backtrace:%{public}s";
          goto LABEL_103;
        }
LABEL_104:
        free(backtrace_string);
        goto LABEL_62;
      }
      if (!v55)
        goto LABEL_62;
      *(_DWORD *)buf = 136446210;
      v68 = "nw_protocol_http2_transport_remove_input_handler";
      v23 = "%{public}s called with null input_protocol, no backtrace";
    }
    else
    {
      v44 = __nwlog_obj();
      v45 = type;
      if (!os_log_type_enabled(v44, type))
        goto LABEL_62;
      *(_DWORD *)buf = 136446210;
      v68 = "nw_protocol_http2_transport_remove_input_handler";
      v23 = "%{public}s called with null input_protocol, backtrace limit exceeded";
    }
LABEL_128:
    v37 = v44;
    v38 = v45;
    v39 = 12;
    goto LABEL_61;
  }
  if (!*((_QWORD *)handle + 14))
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v68 = "nw_http2_transport_remove_input_handler";
    v46 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v65 = 0;
    if (!__nwlog_fault(v46, &type, &v65))
      goto LABEL_132;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v47 = __nwlog_obj();
      v48 = type;
      if (!os_log_type_enabled(v47, type))
        goto LABEL_132;
      *(_DWORD *)buf = 136446210;
      v68 = "nw_http2_transport_remove_input_handler";
      v49 = "%{public}s called with null table";
    }
    else if (v65)
    {
      v56 = (char *)__nw_create_backtrace_string();
      v47 = __nwlog_obj();
      v48 = type;
      v57 = os_log_type_enabled(v47, type);
      if (v56)
      {
        if (v57)
        {
          *(_DWORD *)buf = 136446466;
          v68 = "nw_http2_transport_remove_input_handler";
          v69 = 2082;
          v70 = (nw_protocol *)v56;
          _os_log_impl(&dword_182FBE000, v47, v48, "%{public}s called with null table, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v56);
        goto LABEL_132;
      }
      if (!v57)
      {
LABEL_132:
        if (v46)
          free(v46);
        goto LABEL_14;
      }
      *(_DWORD *)buf = 136446210;
      v68 = "nw_http2_transport_remove_input_handler";
      v49 = "%{public}s called with null table, no backtrace";
    }
    else
    {
      v47 = __nwlog_obj();
      v48 = type;
      if (!os_log_type_enabled(v47, type))
        goto LABEL_132;
      *(_DWORD *)buf = 136446210;
      v68 = "nw_http2_transport_remove_input_handler";
      v49 = "%{public}s called with null table, backtrace limit exceeded";
    }
    _os_log_impl(&dword_182FBE000, v47, v48, v49, buf, 0xCu);
    goto LABEL_132;
  }
  if (gLogDatapath)
  {
    v50 = __nwlog_obj();
    if (os_log_type_enabled(v50, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446466;
      v68 = "nw_http2_transport_remove_input_handler";
      v69 = 2082;
      v70 = (nw_protocol *)(handle + 205);
      _os_log_impl(&dword_182FBE000, v50, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s called", buf, 0x16u);
    }
  }
  output_handler_context = a2->output_handler_context;
  if (output_handler_context)
  {
    v6 = output_handler_context[4];
    if (v6)
    {
      if ((*(_BYTE *)(v6 + 36) & 1) != 0 || *(_DWORD *)(v6 + 32) != -1)
      {
        nw_http2_transport_stream_close((uint64_t)handle, v6);
LABEL_21:
        if (!nw_http2_transport_remove_from_protocol_table((uint64_t)handle, (uint64_t)a2))
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v15 = gLogObj;
          if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446722;
            v68 = "nw_http2_transport_remove_input_handler";
            v69 = 2082;
            v70 = (nw_protocol *)(handle + 205);
            v71 = 2048;
            *(_QWORD *)v72 = a2;
            _os_log_impl(&dword_182FBE000, v15, OS_LOG_TYPE_ERROR, "%{public}s %{public}s unable to remove protocol %p from protocol table", buf, 0x20u);
          }
        }
        if (a2->output_handler == a1)
          nw_protocol_set_output_handler((uint64_t)a2, 0);
        if (v6)
        {
          nw_http2_transport_release_frame_array((nw_frame_array_s *)v6);
          nw_http2_transport_release_frame_array((nw_frame_array_s *)(v6 + 16));
          free((void *)v6);
        }
        v16 = *((_QWORD *)handle + 14);
        if (v16)
        {
          v17 = *(_DWORD *)(v16 + 40);
          if (v17)
          {
            if (gLogDatapath)
            {
              v58 = __nwlog_obj();
              if (os_log_type_enabled(v58, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 136446722;
                v68 = "nw_protocol_http2_transport_remove_input_handler";
                v69 = 2082;
                v70 = (nw_protocol *)(handle + 205);
                v71 = 1024;
                *(_DWORD *)v72 = v17;
                _os_log_impl(&dword_182FBE000, v58, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s not destroying, still have %u input handlers", buf, 0x1Cu);
              }
            }
            if (a1->default_input_handler == a2)
            {
              v18 = (char *)*((_QWORD *)handle + 14);
              v63[0] = MEMORY[0x1E0C809B0];
              v63[1] = 0x40000000;
              v63[2] = ___ZL48nw_protocol_http2_transport_remove_input_handlerP11nw_protocolS0_b_block_invoke_32;
              v63[3] = &__block_descriptor_tmp_33_38085;
              v63[4] = a1;
              v63[5] = handle;
              nw_hash_table_apply(v18, (uint64_t)v63);
            }
            return 1;
          }
          if (gLogDatapath)
          {
            v59 = __nwlog_obj();
            if (os_log_type_enabled(v59, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136446466;
              v68 = "nw_protocol_http2_transport_remove_input_handler";
              v69 = 2082;
              v70 = (nw_protocol *)(handle + 205);
              _os_log_impl(&dword_182FBE000, v59, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s no more input handlers, scheduling destroy", buf, 0x16u);
            }
          }
          nw_protocol_set_input_handler((uint64_t)a1, 0);
          v25 = *((_QWORD *)handle + 9);
          if (v25)
            nw_queue_cancel_source(v25, v24);
          v26 = nw_parameters_copy_context(*((void **)handle + 11));
          v64[0] = MEMORY[0x1E0C809B0];
          v64[1] = 0x40000000;
          v64[2] = ___ZL48nw_protocol_http2_transport_remove_input_handlerP11nw_protocolS0_b_block_invoke;
          v64[3] = &__block_descriptor_tmp_31_38079;
          v64[4] = a1;
          *((_QWORD *)handle + 9) = nw_queue_context_create_source(v26, 2, 3, 0, v64, 0);
          if (v26)
            os_release(v26);
          v27 = nw_parameters_copy_protocol_value(*((void **)handle + 11), (uint64_t)handle, "tunnelTeardownDelay");
          if (v27)
          {
            v28 = v27;
            *((_QWORD *)handle + 8) = xpc_uint64_get_value(v27);
            if (gLogDatapath)
            {
              v60 = __nwlog_obj();
              if (os_log_type_enabled(v60, OS_LOG_TYPE_DEBUG))
              {
                v61 = *((_QWORD *)handle + 8);
                *(_DWORD *)buf = 136446722;
                v68 = "nw_protocol_http2_transport_remove_input_handler";
                v69 = 2082;
                v70 = (nw_protocol *)(handle + 205);
                v71 = 2048;
                *(_QWORD *)v72 = v61;
                _os_log_impl(&dword_182FBE000, v60, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s destroy timeout set to %lld milliseconds via first stream parameters", buf, 0x20u);
              }
            }
            xpc_release(v28);
            goto LABEL_68;
          }
          v31 = (const char *)nw_setting_http2_transport_teardown_delay;
          networkd_settings_init();
          if (sCachedSettings)
          {
            pthread_mutex_lock(&sSettingsMutex);
            if (sCachedSettings)
            {
              int64 = xpc_dictionary_get_int64((xpc_object_t)sCachedSettings, v31);
              pthread_mutex_unlock(&sSettingsMutex);
              v33 = (int64_t *)(handle + 64);
              if (int64)
              {
                *v33 = int64;
                if (!gLogDatapath)
                  goto LABEL_68;
                v34 = __nwlog_obj();
                if (!os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
                  goto LABEL_68;
                v35 = *((_QWORD *)handle + 8);
                *(_DWORD *)buf = 136446722;
                v68 = "nw_protocol_http2_transport_remove_input_handler";
                v69 = 2082;
                v70 = (nw_protocol *)(handle + 205);
                v71 = 2048;
                *(_QWORD *)v72 = v35;
                v36 = "%{public}s %{public}s destroy timeout set to %lld milliseconds via the defaults write";
LABEL_138:
                _os_log_impl(&dword_182FBE000, v34, OS_LOG_TYPE_DEBUG, v36, buf, 0x20u);
LABEL_68:
                v40 = *((_QWORD *)handle + 9);
                v41 = dispatch_time(0x8000000000000000, 1000000 * *((_QWORD *)handle + 8));
                nw_queue_set_timer_values(v40, v41, 0xFFFFFFFFFFFFFFFFLL, 1000 * *((_QWORD *)handle + 8));
                nw_queue_activate_source(*((_QWORD *)handle + 9), v42);
                return 1;
              }
LABEL_67:
              *v33 = 10000;
              if (!gLogDatapath)
                goto LABEL_68;
              v34 = __nwlog_obj();
              if (!os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
                goto LABEL_68;
              v62 = *((_QWORD *)handle + 8);
              *(_DWORD *)buf = 136446722;
              v68 = "nw_protocol_http2_transport_remove_input_handler";
              v69 = 2082;
              v70 = (nw_protocol *)(handle + 205);
              v71 = 2048;
              *(_QWORD *)v72 = v62;
              v36 = "%{public}s %{public}s destroy timeout set to %lld milliseconds by default";
              goto LABEL_138;
            }
            pthread_mutex_unlock(&sSettingsMutex);
          }
          v33 = (int64_t *)(handle + 64);
          goto LABEL_67;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v19 = (nw_protocol *)(handle + 205);
        *(_DWORD *)buf = 136446722;
        v68 = "nw_protocol_http2_transport_remove_input_handler";
        v69 = 2082;
        v70 = (nw_protocol *)(handle + 205);
        v71 = 2048;
        *(_QWORD *)v72 = a2;
        v20 = (char *)_os_log_send_and_compose_impl();
        type = OS_LOG_TYPE_ERROR;
        v65 = 0;
        if (!__nwlog_fault(v20, &type, &v65))
          goto LABEL_62;
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v21 = gLogObj;
          v22 = type;
          if (os_log_type_enabled((os_log_t)gLogObj, type))
          {
            *(_DWORD *)buf = 136446722;
            v68 = "nw_protocol_http2_transport_remove_input_handler";
            v69 = 2082;
            v70 = v19;
            v71 = 2048;
            *(_QWORD *)v72 = a2;
            v23 = "%{public}s %{public}s http2_transport_streams_protocol NULL when removing input handler %p";
LABEL_60:
            v37 = v21;
            v38 = v22;
            v39 = 32;
LABEL_61:
            _os_log_impl(&dword_182FBE000, v37, v38, v23, buf, v39);
          }
        }
        else if (v65)
        {
          v29 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v21 = gLogObj;
          v22 = type;
          v30 = os_log_type_enabled((os_log_t)gLogObj, type);
          if (v29)
          {
            if (v30)
            {
              *(_DWORD *)buf = 136446978;
              v68 = "nw_protocol_http2_transport_remove_input_handler";
              v69 = 2082;
              v70 = v19;
              v71 = 2048;
              *(_QWORD *)v72 = a2;
              *(_WORD *)&v72[8] = 2082;
              *(_QWORD *)&v72[10] = v29;
              _os_log_impl(&dword_182FBE000, v21, v22, "%{public}s %{public}s http2_transport_streams_protocol NULL when removing input handler %p, dumping backtrace:%{public}s", buf, 0x2Au);
            }
            free(v29);
            goto LABEL_62;
          }
          if (v30)
          {
            *(_DWORD *)buf = 136446722;
            v68 = "nw_protocol_http2_transport_remove_input_handler";
            v69 = 2082;
            v70 = v19;
            v71 = 2048;
            *(_QWORD *)v72 = a2;
            v23 = "%{public}s %{public}s http2_transport_streams_protocol NULL when removing input handler %p, no backtrace";
            goto LABEL_60;
          }
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v21 = gLogObj;
          v22 = type;
          if (os_log_type_enabled((os_log_t)gLogObj, type))
          {
            *(_DWORD *)buf = 136446722;
            v68 = "nw_protocol_http2_transport_remove_input_handler";
            v69 = 2082;
            v70 = v19;
            v71 = 2048;
            *(_QWORD *)v72 = a2;
            v23 = "%{public}s %{public}s http2_transport_streams_protocol NULL when removing input handler %p, backtrace limit exceeded";
            goto LABEL_60;
          }
        }
LABEL_62:
        if (v20)
          free(v20);
        return 0;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v14 = gLogObj;
      if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEFAULT))
        goto LABEL_21;
      *(_DWORD *)buf = 136446466;
      v68 = "nw_http2_transport_remove_input_handler";
      v69 = 2082;
      v70 = (nw_protocol *)(handle + 205);
      v11 = "%{public}s %{public}s not closing already closed stream";
      v12 = v14;
      v13 = OS_LOG_TYPE_DEFAULT;
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v10 = gLogObj;
      if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
        goto LABEL_21;
      *(_DWORD *)buf = 136446466;
      v68 = "nw_http2_transport_remove_input_handler";
      v69 = 2082;
      v70 = (nw_protocol *)(handle + 205);
      v11 = "%{public}s %{public}s stream not found as extra";
      v12 = v10;
      v13 = OS_LOG_TYPE_ERROR;
    }
    _os_log_impl(&dword_182FBE000, v12, v13, v11, buf, 0x16u);
    goto LABEL_21;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v7 = gLogObj;
  if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446722;
    v68 = "nw_http2_transport_remove_input_handler";
    v69 = 2082;
    v70 = (nw_protocol *)(handle + 205);
    v71 = 2048;
    *(_QWORD *)v72 = a2;
    _os_log_impl(&dword_182FBE000, v7, OS_LOG_TYPE_ERROR, "%{public}s %{public}s output handler context doesn't exist on protocol %p", buf, 0x20u);
  }
LABEL_14:
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v8 = gLogObj;
  result = os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
  if (result)
  {
    *(_DWORD *)buf = 136446978;
    v68 = "nw_protocol_http2_transport_remove_input_handler";
    v69 = 2082;
    v70 = (nw_protocol *)(handle + 205);
    v71 = 1042;
    *(_DWORD *)v72 = 16;
    *(_WORD *)&v72[4] = 2098;
    *(_QWORD *)&v72[6] = a2;
    _os_log_impl(&dword_182FBE000, v8, OS_LOG_TYPE_ERROR, "%{public}s %{public}s http2_transport does not have input handler registered for %{public,uuid_t}.16P", buf, 0x26u);
    return 0;
  }
  return result;
}

BOOL nw_protocol_http2_replace_input_handler(nw_protocol *a1, nw_protocol *a2, nw_protocol *a3)
{
  _QWORD *handle;
  _QWORD *output_handler_context;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 node;
  uint64_t v11;
  _BOOL8 result;
  const char *v13;
  uint8_t *v14;
  NSObject *v15;
  uint32_t v16;
  _BOOL8 v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  _BOOL8 v21;
  uint64_t v22;
  int v23;
  char *v24;
  NSObject *v25;
  os_log_type_t v26;
  const char *v27;
  NSObject *v28;
  char *backtrace_string;
  _BOOL4 v30;
  const char *v31;
  _BOOL4 v32;
  _BOOL4 v33;
  _BOOL4 v34;
  NSObject *v35;
  uint64_t v36;
  int v37;
  char v38;
  uint8_t buf[4];
  const char *v40;
  __int16 v41;
  char *v42;
  __int16 v43;
  int v44;
  __int16 v45;
  nw_protocol *v46;
  uint8_t v47[32];
  _QWORD v48[2];

  v48[1] = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)v47 = 136446210;
    *(_QWORD *)&v47[4] = "nw_protocol_http2_replace_input_handler";
    v24 = (char *)_os_log_send_and_compose_impl();
    buf[0] = 16;
    v38 = 0;
    if (!__nwlog_fault(v24, buf, &v38))
      goto LABEL_86;
    if (buf[0] == 17)
    {
      v25 = __nwlog_obj();
      v26 = buf[0];
      if (!os_log_type_enabled(v25, (os_log_type_t)buf[0]))
        goto LABEL_86;
      *(_DWORD *)v47 = 136446210;
      *(_QWORD *)&v47[4] = "nw_protocol_http2_replace_input_handler";
      v27 = "%{public}s called with null protocol";
      goto LABEL_85;
    }
    if (!v38)
    {
      v25 = __nwlog_obj();
      v26 = buf[0];
      if (!os_log_type_enabled(v25, (os_log_type_t)buf[0]))
        goto LABEL_86;
      *(_DWORD *)v47 = 136446210;
      *(_QWORD *)&v47[4] = "nw_protocol_http2_replace_input_handler";
      v27 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_85;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v25 = __nwlog_obj();
    v26 = buf[0];
    v30 = os_log_type_enabled(v25, (os_log_type_t)buf[0]);
    if (!backtrace_string)
    {
      if (!v30)
        goto LABEL_86;
      *(_DWORD *)v47 = 136446210;
      *(_QWORD *)&v47[4] = "nw_protocol_http2_replace_input_handler";
      v27 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_85;
    }
    if (!v30)
      goto LABEL_66;
    *(_DWORD *)v47 = 136446466;
    *(_QWORD *)&v47[4] = "nw_protocol_http2_replace_input_handler";
    *(_WORD *)&v47[12] = 2082;
    *(_QWORD *)&v47[14] = backtrace_string;
    v31 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_65:
    _os_log_impl(&dword_182FBE000, v25, v26, v31, v47, 0x16u);
    goto LABEL_66;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)v47 = 136446210;
    *(_QWORD *)&v47[4] = "nw_protocol_http2_replace_input_handler";
    v24 = (char *)_os_log_send_and_compose_impl();
    buf[0] = 16;
    v38 = 0;
    if (!__nwlog_fault(v24, buf, &v38))
      goto LABEL_86;
    if (buf[0] == 17)
    {
      v25 = __nwlog_obj();
      v26 = buf[0];
      if (!os_log_type_enabled(v25, (os_log_type_t)buf[0]))
        goto LABEL_86;
      *(_DWORD *)v47 = 136446210;
      *(_QWORD *)&v47[4] = "nw_protocol_http2_replace_input_handler";
      v27 = "%{public}s called with null http2_transport";
      goto LABEL_85;
    }
    if (!v38)
    {
      v25 = __nwlog_obj();
      v26 = buf[0];
      if (!os_log_type_enabled(v25, (os_log_type_t)buf[0]))
        goto LABEL_86;
      *(_DWORD *)v47 = 136446210;
      *(_QWORD *)&v47[4] = "nw_protocol_http2_replace_input_handler";
      v27 = "%{public}s called with null http2_transport, backtrace limit exceeded";
      goto LABEL_85;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v25 = __nwlog_obj();
    v26 = buf[0];
    v32 = os_log_type_enabled(v25, (os_log_type_t)buf[0]);
    if (!backtrace_string)
    {
      if (!v32)
        goto LABEL_86;
      *(_DWORD *)v47 = 136446210;
      *(_QWORD *)&v47[4] = "nw_protocol_http2_replace_input_handler";
      v27 = "%{public}s called with null http2_transport, no backtrace";
      goto LABEL_85;
    }
    if (!v32)
      goto LABEL_66;
    *(_DWORD *)v47 = 136446466;
    *(_QWORD *)&v47[4] = "nw_protocol_http2_replace_input_handler";
    *(_WORD *)&v47[12] = 2082;
    *(_QWORD *)&v47[14] = backtrace_string;
    v31 = "%{public}s called with null http2_transport, dumping backtrace:%{public}s";
    goto LABEL_65;
  }
  if (gLogDatapath)
  {
    v28 = __nwlog_obj();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)v47 = 136446466;
      *(_QWORD *)&v47[4] = "nw_protocol_http2_replace_input_handler";
      *(_WORD *)&v47[12] = 2082;
      *(_QWORD *)&v47[14] = (char *)handle + 205;
      _os_log_impl(&dword_182FBE000, v28, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s called", v47, 0x16u);
    }
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)v47 = 136446210;
    *(_QWORD *)&v47[4] = "nw_protocol_http2_replace_input_handler";
    v24 = (char *)_os_log_send_and_compose_impl();
    buf[0] = 16;
    v38 = 0;
    if (!__nwlog_fault(v24, buf, &v38))
      goto LABEL_86;
    if (buf[0] == 17)
    {
      v25 = __nwlog_obj();
      v26 = buf[0];
      if (!os_log_type_enabled(v25, (os_log_type_t)buf[0]))
        goto LABEL_86;
      *(_DWORD *)v47 = 136446210;
      *(_QWORD *)&v47[4] = "nw_protocol_http2_replace_input_handler";
      v27 = "%{public}s called with null old_input_protocol";
      goto LABEL_85;
    }
    if (!v38)
    {
      v25 = __nwlog_obj();
      v26 = buf[0];
      if (!os_log_type_enabled(v25, (os_log_type_t)buf[0]))
        goto LABEL_86;
      *(_DWORD *)v47 = 136446210;
      *(_QWORD *)&v47[4] = "nw_protocol_http2_replace_input_handler";
      v27 = "%{public}s called with null old_input_protocol, backtrace limit exceeded";
      goto LABEL_85;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v25 = __nwlog_obj();
    v26 = buf[0];
    v33 = os_log_type_enabled(v25, (os_log_type_t)buf[0]);
    if (!backtrace_string)
    {
      if (!v33)
        goto LABEL_86;
      *(_DWORD *)v47 = 136446210;
      *(_QWORD *)&v47[4] = "nw_protocol_http2_replace_input_handler";
      v27 = "%{public}s called with null old_input_protocol, no backtrace";
      goto LABEL_85;
    }
    if (!v33)
      goto LABEL_66;
    *(_DWORD *)v47 = 136446466;
    *(_QWORD *)&v47[4] = "nw_protocol_http2_replace_input_handler";
    *(_WORD *)&v47[12] = 2082;
    *(_QWORD *)&v47[14] = backtrace_string;
    v31 = "%{public}s called with null old_input_protocol, dumping backtrace:%{public}s";
    goto LABEL_65;
  }
  if (!a3)
  {
    __nwlog_obj();
    *(_DWORD *)v47 = 136446210;
    *(_QWORD *)&v47[4] = "nw_protocol_http2_replace_input_handler";
    v24 = (char *)_os_log_send_and_compose_impl();
    buf[0] = 16;
    v38 = 0;
    if (!__nwlog_fault(v24, buf, &v38))
      goto LABEL_86;
    if (buf[0] == 17)
    {
      v25 = __nwlog_obj();
      v26 = buf[0];
      if (!os_log_type_enabled(v25, (os_log_type_t)buf[0]))
        goto LABEL_86;
      *(_DWORD *)v47 = 136446210;
      *(_QWORD *)&v47[4] = "nw_protocol_http2_replace_input_handler";
      v27 = "%{public}s called with null new_input_protocol";
      goto LABEL_85;
    }
    if (!v38)
    {
      v25 = __nwlog_obj();
      v26 = buf[0];
      if (!os_log_type_enabled(v25, (os_log_type_t)buf[0]))
        goto LABEL_86;
      *(_DWORD *)v47 = 136446210;
      *(_QWORD *)&v47[4] = "nw_protocol_http2_replace_input_handler";
      v27 = "%{public}s called with null new_input_protocol, backtrace limit exceeded";
      goto LABEL_85;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v25 = __nwlog_obj();
    v26 = buf[0];
    v34 = os_log_type_enabled(v25, (os_log_type_t)buf[0]);
    if (backtrace_string)
    {
      if (v34)
      {
        *(_DWORD *)v47 = 136446466;
        *(_QWORD *)&v47[4] = "nw_protocol_http2_replace_input_handler";
        *(_WORD *)&v47[12] = 2082;
        *(_QWORD *)&v47[14] = backtrace_string;
        v31 = "%{public}s called with null new_input_protocol, dumping backtrace:%{public}s";
        goto LABEL_65;
      }
LABEL_66:
      free(backtrace_string);
      goto LABEL_86;
    }
    if (!v34)
      goto LABEL_86;
    *(_DWORD *)v47 = 136446210;
    *(_QWORD *)&v47[4] = "nw_protocol_http2_replace_input_handler";
    v27 = "%{public}s called with null new_input_protocol, no backtrace";
LABEL_85:
    _os_log_impl(&dword_182FBE000, v25, v26, v27, v47, 0xCu);
LABEL_86:
    if (v24)
      free(v24);
    return 0;
  }
  output_handler_context = a2->output_handler_context;
  if (!output_handler_context)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v11 = gLogObj;
    result = os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    *(_DWORD *)v47 = 136446466;
    *(_QWORD *)&v47[4] = "nw_protocol_http2_replace_input_handler";
    *(_WORD *)&v47[12] = 2082;
    *(_QWORD *)&v47[14] = (char *)handle + 205;
    v13 = "%{public}s %{public}s Failed to find old node";
    v14 = v47;
    v15 = v11;
    v16 = 22;
LABEL_28:
    _os_log_impl(&dword_182FBE000, v15, OS_LOG_TYPE_ERROR, v13, v14, v16);
    return 0;
  }
  v8 = output_handler_context[4];
  v48[0] = 0;
  memset(v47, 0, sizeof(v47));
  nw_http2_transport_copy_stream(v8, (uint64_t)v47);
  nw_hash_table_remove_node(handle[14], (uint64_t)output_handler_context);
  v9 = handle[15];
  if (v9)
  {
    node = nw_hash_table_get_node(v9, (uint64_t)v48, 4);
    if (node)
      nw_hash_table_remove_node(handle[15], node);
  }
  else
  {
    node = 0;
  }
  v38 = 0;
  v17 = nw_hash_table_add_object(handle[14], (uint64_t)a3, &v38);
  if (!v38)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v20 = gLogObj;
    result = os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    *(_DWORD *)buf = 136446978;
    v40 = "nw_protocol_http2_replace_input_handler";
    v41 = 2082;
    v42 = (char *)handle + 205;
    v43 = 1042;
    v44 = 16;
    v45 = 2098;
    v46 = a3;
    v13 = "%{public}s %{public}s HTTP/2 already has input handler registered for %{public,uuid_t}.16P";
    v14 = buf;
    v15 = v20;
    v16 = 38;
    goto LABEL_28;
  }
  v18 = (void *)v17;
  v19 = *(_QWORD *)nw_hash_node_get_extra(v17);
  nw_http2_transport_copy_stream((uint64_t)v47, v19);
  a3->output_handler_context = v18;
  if (!a3->output_handler)
    nw_protocol_set_output_handler((uint64_t)a3, (uint64_t)a1);
  if (a1->default_input_handler != a2)
  {
    if (!node)
      goto LABEL_24;
    goto LABEL_22;
  }
  nw_protocol_set_input_handler((uint64_t)a1, (uint64_t)a3);
  *(_OWORD *)handle = *(_OWORD *)a3->flow_id;
  if (node)
  {
LABEL_22:
    v21 = nw_hash_table_add_object(handle[15], v19, &v38);
    if (v38)
    {
      *(_QWORD *)nw_hash_node_get_extra(v21) = a3;
      goto LABEL_24;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v22 = gLogObj;
    result = os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    v23 = *(_DWORD *)(v19 + 32);
    *(_DWORD *)buf = 136446722;
    v40 = "nw_protocol_http2_replace_input_handler";
    v41 = 2082;
    v42 = (char *)handle + 205;
    v43 = 1024;
    v44 = v23;
    v13 = "%{public}s %{public}s HTTP/2 already has stream id registered for %d";
    v14 = buf;
    v15 = v22;
    v16 = 28;
    goto LABEL_28;
  }
LABEL_24:
  if (gLogDatapath)
  {
    v35 = __nwlog_obj();
    if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
    {
      v37 = nw_hash_table_count(handle[14], v36);
      *(_DWORD *)buf = 136446722;
      v40 = "nw_protocol_http2_replace_input_handler";
      v41 = 2082;
      v42 = (char *)handle + 205;
      v43 = 1024;
      v44 = v37;
      _os_log_impl(&dword_182FBE000, v35, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s replaced input handler, have %u input handlers", buf, 0x1Cu);
    }
  }
  return 1;
}

void nw_protocol_http2_transport_output_available(nw_protocol *a1, nw_protocol *a2)
{
  char *handle;
  NSObject *v3;
  NSObject *v4;
  char *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  const char *v9;
  NSObject *v10;
  NSObject *v11;
  NSObject *v12;
  char *v13;
  _BOOL4 v14;
  char *backtrace_string;
  _BOOL4 v16;
  char v17;
  _BYTE buf[24];
  void *v19;
  char *v20;
  uint8_t v21[4];
  const char *v22;
  __int16 v23;
  char *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    handle = (char *)a1->handle;
    if (handle)
    {
      if (gLogDatapath)
      {
        v10 = __nwlog_obj();
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_protocol_http2_transport_output_available";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = handle + 205;
          _os_log_impl(&dword_182FBE000, v10, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s called", buf, 0x16u);
        }
      }
      if (nghttp2_session_want_write())
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v3 = gLogObj;
        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_protocol_http2_transport_output_available";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = handle + 205;
          _os_log_impl(&dword_182FBE000, v3, OS_LOG_TYPE_INFO, "%{public}s %{public}s session send wanted by nghttp2 library", buf, 0x16u);
        }
        nw_http2_transport_session_send((uint64_t)handle);
        if (!gLogDatapath)
          goto LABEL_11;
        v4 = __nwlog_obj();
        if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_protocol_http2_transport_output_available";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = handle + 205;
          _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s called session send for nghttp2 session", buf, 0x16u);
        }
      }
      if (gLogDatapath)
      {
        v11 = __nwlog_obj();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)v21 = 136446466;
          v22 = "nw_http2_transport_drain_output_frames";
          v23 = 2082;
          v24 = handle + 205;
          _os_log_impl(&dword_182FBE000, v11, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s called", v21, 0x16u);
        }
        if (gLogDatapath)
        {
          v12 = __nwlog_obj();
          if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)v21 = 136446466;
            v22 = "nw_http2_transport_drain_output_frames";
            v23 = 2082;
            v24 = handle + 205;
            _os_log_impl(&dword_182FBE000, v12, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s draining output frames", v21, 0x16u);
          }
        }
      }
LABEL_11:
      v5 = (char *)*((_QWORD *)handle + 14);
      *(_QWORD *)buf = MEMORY[0x1E0C809B0];
      *(_QWORD *)&buf[8] = 0x40000000;
      *(_QWORD *)&buf[16] = ___ZL38nw_http2_transport_drain_output_framesP27nw_protocol_http2_transport_block_invoke;
      v19 = &__block_descriptor_tmp_35_37997;
      v20 = handle;
      nw_hash_table_apply(v5, (uint64_t)buf);
      return;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_http2_transport_output_available";
    v6 = (char *)_os_log_send_and_compose_impl();
    v21[0] = 16;
    v17 = 0;
    if (__nwlog_fault(v6, v21, &v17))
    {
      if (v21[0] == 17)
      {
        v7 = __nwlog_obj();
        v8 = v21[0];
        if (!os_log_type_enabled(v7, (os_log_type_t)v21[0]))
          goto LABEL_48;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_http2_transport_output_available";
        v9 = "%{public}s called with null http2_transport";
        goto LABEL_47;
      }
      if (!v17)
      {
        v7 = __nwlog_obj();
        v8 = v21[0];
        if (!os_log_type_enabled(v7, (os_log_type_t)v21[0]))
          goto LABEL_48;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_http2_transport_output_available";
        v9 = "%{public}s called with null http2_transport, backtrace limit exceeded";
        goto LABEL_47;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v7 = __nwlog_obj();
      v8 = v21[0];
      v16 = os_log_type_enabled(v7, (os_log_type_t)v21[0]);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_protocol_http2_transport_output_available";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null http2_transport, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        if (v6)
          goto LABEL_49;
        return;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_http2_transport_output_available";
        v9 = "%{public}s called with null http2_transport, no backtrace";
LABEL_47:
        _os_log_impl(&dword_182FBE000, v7, v8, v9, buf, 0xCu);
      }
    }
  }
  else
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_http2_transport_output_available";
    v6 = (char *)_os_log_send_and_compose_impl();
    v21[0] = 16;
    v17 = 0;
    if (!__nwlog_fault(v6, v21, &v17))
      goto LABEL_48;
    if (v21[0] == 17)
    {
      v7 = __nwlog_obj();
      v8 = v21[0];
      if (!os_log_type_enabled(v7, (os_log_type_t)v21[0]))
        goto LABEL_48;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http2_transport_output_available";
      v9 = "%{public}s called with null protocol";
      goto LABEL_47;
    }
    if (!v17)
    {
      v7 = __nwlog_obj();
      v8 = v21[0];
      if (!os_log_type_enabled(v7, (os_log_type_t)v21[0]))
        goto LABEL_48;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http2_transport_output_available";
      v9 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_47;
    }
    v13 = (char *)__nw_create_backtrace_string();
    v7 = __nwlog_obj();
    v8 = v21[0];
    v14 = os_log_type_enabled(v7, (os_log_type_t)v21[0]);
    if (!v13)
    {
      if (!v14)
        goto LABEL_48;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http2_transport_output_available";
      v9 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_47;
    }
    if (v14)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_protocol_http2_transport_output_available";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v13;
      _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v13);
  }
LABEL_48:
  if (v6)
LABEL_49:
    free(v6);
}

uint64_t nw_protocol_http2_transport_get_parameters(nw_protocol *a1)
{
  _QWORD *handle;
  char *v3;
  NSObject *v4;
  os_log_type_t v5;
  const char *v6;
  char *backtrace_string;
  _BOOL4 v8;
  const char *v9;
  _BOOL4 v10;
  char v11;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    handle = a1->handle;
    if (handle)
      return handle[11];
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v14 = "nw_protocol_http2_transport_get_parameters";
    v3 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v11 = 0;
    if (!__nwlog_fault(v3, &type, &v11))
      goto LABEL_32;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_protocol_http2_transport_get_parameters";
        v6 = "%{public}s called with null http2_transport";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (!v11)
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_protocol_http2_transport_get_parameters";
        v6 = "%{public}s called with null http2_transport, backtrace limit exceeded";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v4 = __nwlog_obj();
    v5 = type;
    v10 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_protocol_http2_transport_get_parameters";
        v6 = "%{public}s called with null http2_transport, no backtrace";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (v10)
    {
      *(_DWORD *)buf = 136446466;
      v14 = "nw_protocol_http2_transport_get_parameters";
      v15 = 2082;
      v16 = backtrace_string;
      v9 = "%{public}s called with null http2_transport, dumping backtrace:%{public}s";
      goto LABEL_21;
    }
    goto LABEL_22;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v14 = "nw_protocol_http2_transport_get_parameters";
  v3 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v11 = 0;
  if (!__nwlog_fault(v3, &type, &v11))
    goto LABEL_32;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v11)
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_protocol_http2_transport_get_parameters";
        v6 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v4 = __nwlog_obj();
    v5 = type;
    v8 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (v8)
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_protocol_http2_transport_get_parameters";
        v6 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (v8)
    {
      *(_DWORD *)buf = 136446466;
      v14 = "nw_protocol_http2_transport_get_parameters";
      v15 = 2082;
      v16 = backtrace_string;
      v9 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_21:
      _os_log_impl(&dword_182FBE000, v4, v5, v9, buf, 0x16u);
    }
LABEL_22:
    free(backtrace_string);
    goto LABEL_32;
  }
  v4 = __nwlog_obj();
  v5 = type;
  if (os_log_type_enabled(v4, type))
  {
    *(_DWORD *)buf = 136446210;
    v14 = "nw_protocol_http2_transport_get_parameters";
    v6 = "%{public}s called with null protocol";
LABEL_31:
    _os_log_impl(&dword_182FBE000, v4, v5, v6, buf, 0xCu);
  }
LABEL_32:
  if (v3)
    free(v3);
  return 0;
}

BOOL nw_protocol_http2_transport_add_listen_handler(nw_protocol *a1, nw_listen_protocol *a2)
{
  char *handle;
  char *v4;
  NSObject *v5;
  os_log_type_t v6;
  const char *v7;
  NSObject *v9;
  NSObject *v10;
  const char *v11;
  char *backtrace_string;
  _BOOL4 v13;
  char v14;
  NSObject *v15;
  char *v16;
  NSObject *v17;
  _BOOL8 result;
  NSObject *v19;
  char *v20;
  NSObject *v21;
  os_log_type_t v22;
  const char *v23;
  char *v24;
  _BOOL4 v25;
  const char *v26;
  _BOOL4 v27;
  NSObject *v28;
  NSObject *v29;
  NSObject *v30;
  char v31;
  _BYTE buf[24];
  char *v33;
  char *v34;
  os_log_type_t type[4];
  const char *v36;
  __int16 v37;
  char *v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    handle = (char *)a1->handle;
    if (handle)
    {
      if (*((_QWORD *)handle + 13))
      {
        if ((handle[204] & 0x40) == 0)
        {
LABEL_37:
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v17 = gLogObj;
          result = os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
          if (result)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_protocol_http2_transport_add_listen_handler";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = handle + 205;
            _os_log_impl(&dword_182FBE000, v17, OS_LOG_TYPE_ERROR, "%{public}s %{public}s already have a listen handler, ignoring add", buf, 0x16u);
            return 0;
          }
          return result;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_protocol_http2_transport_add_listen_handler";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = handle + 205;
        v4 = (char *)_os_log_send_and_compose_impl();
        type[0] = OS_LOG_TYPE_ERROR;
        v31 = 0;
        if (__nwlog_fault(v4, type, &v31))
        {
          if (type[0] == OS_LOG_TYPE_FAULT)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v5 = gLogObj;
            v6 = type[0];
            if (!os_log_type_enabled((os_log_t)gLogObj, type[0]))
              goto LABEL_35;
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_protocol_http2_transport_add_listen_handler";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = handle + 205;
            v7 = "%{public}s %{public}s cannot have listen handler and be waiting for listen handler at the same time";
            goto LABEL_34;
          }
          if (!v31)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v5 = gLogObj;
            v6 = type[0];
            if (!os_log_type_enabled((os_log_t)gLogObj, type[0]))
              goto LABEL_35;
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_protocol_http2_transport_add_listen_handler";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = handle + 205;
            v7 = "%{public}s %{public}s cannot have listen handler and be waiting for listen handler at the same time, ba"
                 "cktrace limit exceeded";
            goto LABEL_34;
          }
          backtrace_string = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v5 = gLogObj;
          v6 = type[0];
          v13 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
          if (backtrace_string)
          {
            if (v13)
            {
              *(_DWORD *)buf = 136446722;
              *(_QWORD *)&buf[4] = "nw_protocol_http2_transport_add_listen_handler";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = handle + 205;
              *(_WORD *)&buf[22] = 2082;
              v33 = backtrace_string;
              _os_log_impl(&dword_182FBE000, v5, v6, "%{public}s %{public}s cannot have listen handler and be waiting for listen handler at the same time, dumping backtrace:%{public}s", buf, 0x20u);
            }
            free(backtrace_string);
            goto LABEL_35;
          }
          if (v13)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_protocol_http2_transport_add_listen_handler";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = handle + 205;
            v7 = "%{public}s %{public}s cannot have listen handler and be waiting for listen handler at the same time, no backtrace";
LABEL_34:
            _os_log_impl(&dword_182FBE000, v5, v6, v7, buf, 0x16u);
          }
        }
LABEL_35:
        if (v4)
          free(v4);
        goto LABEL_37;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v9 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_protocol_http2_transport_add_listen_handler";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = handle + 205;
        _os_log_impl(&dword_182FBE000, v9, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s added protocol listen handler", buf, 0x16u);
      }
      *((_QWORD *)handle + 13) = a2;
      a2->protocol_handler = a1;
      if ((handle[204] & 0x40) == 0)
        return 1;
      if (gLogDatapath)
      {
        v28 = __nwlog_obj();
        if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_protocol_http2_transport_add_listen_handler";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = handle + 205;
          _os_log_impl(&dword_182FBE000, v28, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s waiting for listen handler, resuming processing of connected", buf, 0x16u);
        }
        if (gLogDatapath)
        {
          v29 = __nwlog_obj();
          if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)type = 136446466;
            v36 = "nw_protocol_http2_transport_process_connected";
            v37 = 2082;
            v38 = handle + 205;
            _os_log_impl(&dword_182FBE000, v29, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s called", (uint8_t *)type, 0x16u);
          }
        }
      }
      if ((handle[204] & 0x10) != 0)
      {
        if (!*((_QWORD *)handle + 13))
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v19 = gLogObj;
          if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)type = 136446466;
            v36 = "nw_protocol_http2_transport_process_connected";
            v37 = 2082;
            v38 = handle + 205;
            _os_log_impl(&dword_182FBE000, v19, OS_LOG_TYPE_INFO, "%{public}s %{public}s no listen handler on server, deferring processing of input and connected state until listen handler is present", (uint8_t *)type, 0x16u);
          }
          handle[204] |= 0x40u;
          return 1;
        }
        if (!gLogDatapath)
          goto LABEL_24;
        v10 = __nwlog_obj();
        if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
          goto LABEL_24;
        *(_DWORD *)type = 136446466;
        v36 = "nw_protocol_http2_transport_process_connected";
        v37 = 2082;
        v38 = handle + 205;
        v11 = "%{public}s %{public}s listen handler present, processing input without waiting";
      }
      else
      {
        if (!gLogDatapath || (v10 = __nwlog_obj(), !os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG)))
        {
LABEL_24:
          v14 = handle[204];
          handle[204] = v14 & 0xBF;
          if ((v14 & 6) != 0)
          {
            if (gLogDatapath)
            {
              v15 = __nwlog_obj();
              if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)type = 136446466;
                v36 = "nw_protocol_http2_transport_process_connected";
                v37 = 2082;
                v38 = handle + 205;
                _os_log_impl(&dword_182FBE000, v15, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s tunnel already connected or closed, ignoring connected event", (uint8_t *)type, 0x16u);
              }
            }
          }
          else
          {
            nw_http2_transport_send_settings((uint64_t)handle);
            handle[204] |= 2u;
            if (gLogDatapath)
            {
              v30 = __nwlog_obj();
              if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)type = 136446466;
                v36 = "nw_protocol_http2_transport_process_connected";
                v37 = 2082;
                v38 = handle + 205;
                _os_log_impl(&dword_182FBE000, v30, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s http2 tunnel is now connected", (uint8_t *)type, 0x16u);
              }
            }
            nw_protocol_http2_transport_process_input((uint64_t)handle);
            v16 = (char *)*((_QWORD *)handle + 14);
            *(_QWORD *)buf = MEMORY[0x1E0C809B0];
            *(_QWORD *)&buf[8] = 0x40000000;
            *(_QWORD *)&buf[16] = ___ZL45nw_protocol_http2_transport_process_connectedP27nw_protocol_http2_transport_block_invoke;
            v33 = (char *)&__block_descriptor_tmp_20_37773;
            v34 = handle;
            nw_hash_table_apply(v16, (uint64_t)buf);
          }
          return 1;
        }
        *(_DWORD *)type = 136446466;
        v36 = "nw_protocol_http2_transport_process_connected";
        v37 = 2082;
        v38 = handle + 205;
        v11 = "%{public}s %{public}s not server, processing input without waiting";
      }
      _os_log_impl(&dword_182FBE000, v10, OS_LOG_TYPE_DEBUG, v11, (uint8_t *)type, 0x16u);
      goto LABEL_24;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_http2_transport_add_listen_handler";
    v20 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    v31 = 0;
    if (!__nwlog_fault(v20, type, &v31))
      goto LABEL_76;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      v21 = __nwlog_obj();
      v22 = type[0];
      if (os_log_type_enabled(v21, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_http2_transport_add_listen_handler";
        v23 = "%{public}s called with null http2_transport";
        goto LABEL_75;
      }
      goto LABEL_76;
    }
    if (!v31)
    {
      v21 = __nwlog_obj();
      v22 = type[0];
      if (os_log_type_enabled(v21, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_http2_transport_add_listen_handler";
        v23 = "%{public}s called with null http2_transport, backtrace limit exceeded";
        goto LABEL_75;
      }
      goto LABEL_76;
    }
    v24 = (char *)__nw_create_backtrace_string();
    v21 = __nwlog_obj();
    v22 = type[0];
    v27 = os_log_type_enabled(v21, type[0]);
    if (!v24)
    {
      if (v27)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_http2_transport_add_listen_handler";
        v23 = "%{public}s called with null http2_transport, no backtrace";
        goto LABEL_75;
      }
      goto LABEL_76;
    }
    if (v27)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_protocol_http2_transport_add_listen_handler";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v24;
      v26 = "%{public}s called with null http2_transport, dumping backtrace:%{public}s";
      goto LABEL_60;
    }
    goto LABEL_61;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_protocol_http2_transport_add_listen_handler";
  v20 = (char *)_os_log_send_and_compose_impl();
  type[0] = OS_LOG_TYPE_ERROR;
  v31 = 0;
  if (!__nwlog_fault(v20, type, &v31))
    goto LABEL_76;
  if (type[0] != OS_LOG_TYPE_FAULT)
  {
    if (!v31)
    {
      v21 = __nwlog_obj();
      v22 = type[0];
      if (os_log_type_enabled(v21, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_http2_transport_add_listen_handler";
        v23 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_75;
      }
      goto LABEL_76;
    }
    v24 = (char *)__nw_create_backtrace_string();
    v21 = __nwlog_obj();
    v22 = type[0];
    v25 = os_log_type_enabled(v21, type[0]);
    if (!v24)
    {
      if (v25)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_http2_transport_add_listen_handler";
        v23 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_75;
      }
      goto LABEL_76;
    }
    if (v25)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_protocol_http2_transport_add_listen_handler";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v24;
      v26 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_60:
      _os_log_impl(&dword_182FBE000, v21, v22, v26, buf, 0x16u);
    }
LABEL_61:
    free(v24);
    goto LABEL_76;
  }
  v21 = __nwlog_obj();
  v22 = type[0];
  if (os_log_type_enabled(v21, type[0]))
  {
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_http2_transport_add_listen_handler";
    v23 = "%{public}s called with null protocol";
LABEL_75:
    _os_log_impl(&dword_182FBE000, v21, v22, v23, buf, 0xCu);
  }
LABEL_76:
  if (v20)
    free(v20);
  return 0;
}

uint64_t nw_protocol_http2_transport_remove_listen_handler(nw_protocol *a1, nw_listen_protocol *a2)
{
  _QWORD *handle;
  NSObject *v3;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  const char *v8;
  char *backtrace_string;
  _BOOL4 v10;
  const char *v11;
  _BOOL4 v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    handle = a1->handle;
    if (handle)
    {
      if ((nw_listen_protocol *)handle[13] == a2)
      {
        handle[13] = 0;
        a2->protocol_handler = 0;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v3 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446466;
        v16 = "nw_protocol_http2_transport_remove_listen_handler";
        v17 = 2082;
        v18 = (char *)handle + 205;
        _os_log_impl(&dword_182FBE000, v3, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s removed protocol listen handler", buf, 0x16u);
      }
      return 1;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v16 = "nw_protocol_http2_transport_remove_listen_handler";
    v5 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v13 = 0;
    if (!__nwlog_fault(v5, &type, &v13))
      goto LABEL_36;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v6 = __nwlog_obj();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_http2_transport_remove_listen_handler";
        v8 = "%{public}s called with null http2_transport";
        goto LABEL_35;
      }
      goto LABEL_36;
    }
    if (!v13)
    {
      v6 = __nwlog_obj();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_http2_transport_remove_listen_handler";
        v8 = "%{public}s called with null http2_transport, backtrace limit exceeded";
        goto LABEL_35;
      }
      goto LABEL_36;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v6 = __nwlog_obj();
    v7 = type;
    v12 = os_log_type_enabled(v6, type);
    if (!backtrace_string)
    {
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_http2_transport_remove_listen_handler";
        v8 = "%{public}s called with null http2_transport, no backtrace";
        goto LABEL_35;
      }
      goto LABEL_36;
    }
    if (v12)
    {
      *(_DWORD *)buf = 136446466;
      v16 = "nw_protocol_http2_transport_remove_listen_handler";
      v17 = 2082;
      v18 = backtrace_string;
      v11 = "%{public}s called with null http2_transport, dumping backtrace:%{public}s";
      goto LABEL_25;
    }
    goto LABEL_26;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_protocol_http2_transport_remove_listen_handler";
  v5 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (!__nwlog_fault(v5, &type, &v13))
    goto LABEL_36;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v13)
    {
      v6 = __nwlog_obj();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_http2_transport_remove_listen_handler";
        v8 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_35;
      }
      goto LABEL_36;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v6 = __nwlog_obj();
    v7 = type;
    v10 = os_log_type_enabled(v6, type);
    if (!backtrace_string)
    {
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_http2_transport_remove_listen_handler";
        v8 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_35;
      }
      goto LABEL_36;
    }
    if (v10)
    {
      *(_DWORD *)buf = 136446466;
      v16 = "nw_protocol_http2_transport_remove_listen_handler";
      v17 = 2082;
      v18 = backtrace_string;
      v11 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_25:
      _os_log_impl(&dword_182FBE000, v6, v7, v11, buf, 0x16u);
    }
LABEL_26:
    free(backtrace_string);
    goto LABEL_36;
  }
  v6 = __nwlog_obj();
  v7 = type;
  if (os_log_type_enabled(v6, type))
  {
    *(_DWORD *)buf = 136446210;
    v16 = "nw_protocol_http2_transport_remove_listen_handler";
    v8 = "%{public}s called with null protocol";
LABEL_35:
    _os_log_impl(&dword_182FBE000, v6, v7, v8, buf, 0xCu);
  }
LABEL_36:
  if (v5)
    free(v5);
  return 0;
}

uint64_t nw_protocol_http2_transport_get_remote_endpoint(nw_protocol *a1)
{
  _QWORD *handle;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(nw_protocol *);
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  const char *v9;
  char *backtrace_string;
  _BOOL4 v11;
  const char *v12;
  _BOOL4 v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    handle = a1->handle;
    if (handle)
    {
      v2 = handle[6];
      if (v2 && (v3 = *(_QWORD *)(v2 + 24)) != 0 && (v4 = *(uint64_t (**)(nw_protocol *))(v3 + 136)) != 0)
        return v4(a1->default_input_handler);
      else
        return handle[12];
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v17 = "nw_protocol_http2_transport_get_remote_endpoint";
    v6 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v14 = 0;
    if (!__nwlog_fault(v6, &type, &v14))
      goto LABEL_35;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v7 = __nwlog_obj();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_protocol_http2_transport_get_remote_endpoint";
        v9 = "%{public}s called with null http2_transport";
        goto LABEL_34;
      }
      goto LABEL_35;
    }
    if (!v14)
    {
      v7 = __nwlog_obj();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_protocol_http2_transport_get_remote_endpoint";
        v9 = "%{public}s called with null http2_transport, backtrace limit exceeded";
        goto LABEL_34;
      }
      goto LABEL_35;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v7 = __nwlog_obj();
    v8 = type;
    v13 = os_log_type_enabled(v7, type);
    if (!backtrace_string)
    {
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_protocol_http2_transport_get_remote_endpoint";
        v9 = "%{public}s called with null http2_transport, no backtrace";
        goto LABEL_34;
      }
      goto LABEL_35;
    }
    if (v13)
    {
      *(_DWORD *)buf = 136446466;
      v17 = "nw_protocol_http2_transport_get_remote_endpoint";
      v18 = 2082;
      v19 = backtrace_string;
      v12 = "%{public}s called with null http2_transport, dumping backtrace:%{public}s";
      goto LABEL_24;
    }
    goto LABEL_25;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_protocol_http2_transport_get_remote_endpoint";
  v6 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (!__nwlog_fault(v6, &type, &v14))
    goto LABEL_35;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v14)
    {
      v7 = __nwlog_obj();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_protocol_http2_transport_get_remote_endpoint";
        v9 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_34;
      }
      goto LABEL_35;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v7 = __nwlog_obj();
    v8 = type;
    v11 = os_log_type_enabled(v7, type);
    if (!backtrace_string)
    {
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_protocol_http2_transport_get_remote_endpoint";
        v9 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_34;
      }
      goto LABEL_35;
    }
    if (v11)
    {
      *(_DWORD *)buf = 136446466;
      v17 = "nw_protocol_http2_transport_get_remote_endpoint";
      v18 = 2082;
      v19 = backtrace_string;
      v12 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_24:
      _os_log_impl(&dword_182FBE000, v7, v8, v12, buf, 0x16u);
    }
LABEL_25:
    free(backtrace_string);
    goto LABEL_35;
  }
  v7 = __nwlog_obj();
  v8 = type;
  if (os_log_type_enabled(v7, type))
  {
    *(_DWORD *)buf = 136446210;
    v17 = "nw_protocol_http2_transport_get_remote_endpoint";
    v9 = "%{public}s called with null protocol";
LABEL_34:
    _os_log_impl(&dword_182FBE000, v7, v8, v9, buf, 0xCu);
  }
LABEL_35:
  if (v6)
    free(v6);
  return 0;
}

void nw_protocol_http2_transport_error(nw_protocol *a1, nw_protocol *a2, int a3)
{
  char *handle;
  char *v5;
  NSObject *v6;
  const char *v7;
  NSObject *v8;
  os_log_type_t v9;
  uint32_t v10;
  uint64_t v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  const char *v15;
  char *backtrace_string;
  _BOOL4 v17;
  char *v18;
  _BOOL4 v19;
  const char *v20;
  _BOOL4 v21;
  _QWORD v22[5];
  int v23;
  char v24;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v27;
  __int16 v28;
  char *v29;
  __int16 v30;
  int v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v27 = "nw_protocol_http2_transport_error";
    v12 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v24 = 0;
    if (!__nwlog_fault(v12, &type, &v24))
      goto LABEL_55;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v13 = __nwlog_obj();
      v14 = type;
      if (!os_log_type_enabled(v13, type))
        goto LABEL_55;
      *(_DWORD *)buf = 136446210;
      v27 = "nw_protocol_http2_transport_error";
      v15 = "%{public}s called with null protocol";
    }
    else if (v24)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v13 = __nwlog_obj();
      v14 = type;
      v17 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          v27 = "nw_protocol_http2_transport_error";
          v28 = 2082;
          v29 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_55:
        if (!v12)
          return;
        goto LABEL_56;
      }
      if (!v17)
        goto LABEL_55;
      *(_DWORD *)buf = 136446210;
      v27 = "nw_protocol_http2_transport_error";
      v15 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      v13 = __nwlog_obj();
      v14 = type;
      if (!os_log_type_enabled(v13, type))
        goto LABEL_55;
      *(_DWORD *)buf = 136446210;
      v27 = "nw_protocol_http2_transport_error";
      v15 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    goto LABEL_54;
  }
  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v27 = "nw_protocol_http2_transport_error";
    v12 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v24 = 0;
    if (!__nwlog_fault(v12, &type, &v24))
      goto LABEL_55;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v24)
      {
        v13 = __nwlog_obj();
        v14 = type;
        if (!os_log_type_enabled(v13, type))
          goto LABEL_55;
        *(_DWORD *)buf = 136446210;
        v27 = "nw_protocol_http2_transport_error";
        v15 = "%{public}s called with null http2_transport, backtrace limit exceeded";
        goto LABEL_54;
      }
      v18 = (char *)__nw_create_backtrace_string();
      v13 = __nwlog_obj();
      v14 = type;
      v19 = os_log_type_enabled(v13, type);
      if (!v18)
      {
        if (!v19)
          goto LABEL_55;
        *(_DWORD *)buf = 136446210;
        v27 = "nw_protocol_http2_transport_error";
        v15 = "%{public}s called with null http2_transport, no backtrace";
        goto LABEL_54;
      }
      if (v19)
      {
        *(_DWORD *)buf = 136446466;
        v27 = "nw_protocol_http2_transport_error";
        v28 = 2082;
        v29 = v18;
        v20 = "%{public}s called with null http2_transport, dumping backtrace:%{public}s";
LABEL_39:
        _os_log_impl(&dword_182FBE000, v13, v14, v20, buf, 0x16u);
      }
LABEL_40:
      free(v18);
      if (!v12)
        return;
LABEL_56:
      free(v12);
      return;
    }
    v13 = __nwlog_obj();
    v14 = type;
    if (!os_log_type_enabled(v13, type))
      goto LABEL_55;
    *(_DWORD *)buf = 136446210;
    v27 = "nw_protocol_http2_transport_error";
    v15 = "%{public}s called with null http2_transport";
LABEL_54:
    _os_log_impl(&dword_182FBE000, v13, v14, v15, buf, 0xCu);
    goto LABEL_55;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v27 = "nw_protocol_http2_transport_error";
    v12 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v24 = 0;
    if (!__nwlog_fault(v12, &type, &v24))
      goto LABEL_55;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v13 = __nwlog_obj();
      v14 = type;
      if (!os_log_type_enabled(v13, type))
        goto LABEL_55;
      *(_DWORD *)buf = 136446210;
      v27 = "nw_protocol_http2_transport_error";
      v15 = "%{public}s called with null other_protocol";
      goto LABEL_54;
    }
    if (!v24)
    {
      v13 = __nwlog_obj();
      v14 = type;
      if (!os_log_type_enabled(v13, type))
        goto LABEL_55;
      *(_DWORD *)buf = 136446210;
      v27 = "nw_protocol_http2_transport_error";
      v15 = "%{public}s called with null other_protocol, backtrace limit exceeded";
      goto LABEL_54;
    }
    v18 = (char *)__nw_create_backtrace_string();
    v13 = __nwlog_obj();
    v14 = type;
    v21 = os_log_type_enabled(v13, type);
    if (!v18)
    {
      if (!v21)
        goto LABEL_55;
      *(_DWORD *)buf = 136446210;
      v27 = "nw_protocol_http2_transport_error";
      v15 = "%{public}s called with null other_protocol, no backtrace";
      goto LABEL_54;
    }
    if (v21)
    {
      *(_DWORD *)buf = 136446466;
      v27 = "nw_protocol_http2_transport_error";
      v28 = 2082;
      v29 = v18;
      v20 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
      goto LABEL_39;
    }
    goto LABEL_40;
  }
  if (a3)
  {
    v5 = (char *)*((_QWORD *)handle + 14);
    if (v5)
    {
      v22[0] = MEMORY[0x1E0C809B0];
      v22[1] = 0x40000000;
      v22[2] = ___ZL33nw_protocol_http2_transport_errorP11nw_protocolS0_i_block_invoke;
      v22[3] = &__block_descriptor_tmp_42_37721;
      v22[4] = handle;
      v23 = a3;
      nw_hash_table_apply(v5, (uint64_t)v22);
      return;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v11 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v27 = "nw_protocol_http2_transport_error";
      v28 = 2082;
      v29 = handle + 205;
      v30 = 1024;
      v31 = a3;
      v7 = "%{public}s %{public}s cannot pass error %d up the stack, protocol table is NULL";
      v8 = v11;
      v9 = OS_LOG_TYPE_ERROR;
      v10 = 28;
      goto LABEL_12;
    }
  }
  else if (gLogDatapath)
  {
    v6 = __nwlog_obj();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446466;
      v27 = "nw_protocol_http2_transport_error";
      v28 = 2082;
      v29 = handle + 205;
      v7 = "%{public}s %{public}s suppressing error 0";
      v8 = v6;
      v9 = OS_LOG_TYPE_DEBUG;
      v10 = 22;
LABEL_12:
      _os_log_impl(&dword_182FBE000, v8, v9, v7, buf, v10);
    }
  }
}

void nw_protocol_http2_transport_notify(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  char *v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  const char *v14;
  NSObject *v15;
  char *backtrace_string;
  _BOOL4 v17;
  char *v18;
  _BOOL4 v19;
  const char *v20;
  _BOOL4 v21;
  _BOOL4 v22;
  _QWORD v23[8];
  int v24;
  char v25;
  os_log_type_t v26;
  uint8_t buf[4];
  const char *v28;
  __int16 v29;
  char *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v28 = "nw_protocol_http2_transport_notify";
    v11 = (char *)_os_log_send_and_compose_impl();
    v26 = OS_LOG_TYPE_ERROR;
    v25 = 0;
    if (!__nwlog_fault(v11, &v26, &v25))
      goto LABEL_63;
    if (v26 == OS_LOG_TYPE_FAULT)
    {
      v12 = __nwlog_obj();
      v13 = v26;
      if (!os_log_type_enabled(v12, v26))
        goto LABEL_63;
      *(_DWORD *)buf = 136446210;
      v28 = "nw_protocol_http2_transport_notify";
      v14 = "%{public}s called with null protocol";
    }
    else if (v25)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v12 = __nwlog_obj();
      v13 = v26;
      v17 = os_log_type_enabled(v12, v26);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          v28 = "nw_protocol_http2_transport_notify";
          v29 = 2082;
          v30 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v12, v13, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_63:
        if (!v11)
          return;
        goto LABEL_64;
      }
      if (!v17)
        goto LABEL_63;
      *(_DWORD *)buf = 136446210;
      v28 = "nw_protocol_http2_transport_notify";
      v14 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      v12 = __nwlog_obj();
      v13 = v26;
      if (!os_log_type_enabled(v12, v26))
        goto LABEL_63;
      *(_DWORD *)buf = 136446210;
      v28 = "nw_protocol_http2_transport_notify";
      v14 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    goto LABEL_62;
  }
  v5 = *(_QWORD *)(a1 + 40);
  if (!v5)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v28 = "nw_protocol_http2_transport_notify";
    v11 = (char *)_os_log_send_and_compose_impl();
    v26 = OS_LOG_TYPE_ERROR;
    v25 = 0;
    if (!__nwlog_fault(v11, &v26, &v25))
      goto LABEL_63;
    if (v26 != OS_LOG_TYPE_FAULT)
    {
      if (!v25)
      {
        v12 = __nwlog_obj();
        v13 = v26;
        if (!os_log_type_enabled(v12, v26))
          goto LABEL_63;
        *(_DWORD *)buf = 136446210;
        v28 = "nw_protocol_http2_transport_notify";
        v14 = "%{public}s called with null http2_transport, backtrace limit exceeded";
        goto LABEL_62;
      }
      v18 = (char *)__nw_create_backtrace_string();
      v12 = __nwlog_obj();
      v13 = v26;
      v19 = os_log_type_enabled(v12, v26);
      if (!v18)
      {
        if (!v19)
          goto LABEL_63;
        *(_DWORD *)buf = 136446210;
        v28 = "nw_protocol_http2_transport_notify";
        v14 = "%{public}s called with null http2_transport, no backtrace";
        goto LABEL_62;
      }
      if (!v19)
        goto LABEL_44;
      *(_DWORD *)buf = 136446466;
      v28 = "nw_protocol_http2_transport_notify";
      v29 = 2082;
      v30 = v18;
      v20 = "%{public}s called with null http2_transport, dumping backtrace:%{public}s";
      goto LABEL_43;
    }
    v12 = __nwlog_obj();
    v13 = v26;
    if (!os_log_type_enabled(v12, v26))
      goto LABEL_63;
    *(_DWORD *)buf = 136446210;
    v28 = "nw_protocol_http2_transport_notify";
    v14 = "%{public}s called with null http2_transport";
LABEL_62:
    _os_log_impl(&dword_182FBE000, v12, v13, v14, buf, 0xCu);
    goto LABEL_63;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v28 = "nw_protocol_http2_transport_notify";
    v11 = (char *)_os_log_send_and_compose_impl();
    v26 = OS_LOG_TYPE_ERROR;
    v25 = 0;
    if (!__nwlog_fault(v11, &v26, &v25))
      goto LABEL_63;
    if (v26 == OS_LOG_TYPE_FAULT)
    {
      v12 = __nwlog_obj();
      v13 = v26;
      if (!os_log_type_enabled(v12, v26))
        goto LABEL_63;
      *(_DWORD *)buf = 136446210;
      v28 = "nw_protocol_http2_transport_notify";
      v14 = "%{public}s called with null other_protocol";
      goto LABEL_62;
    }
    if (!v25)
    {
      v12 = __nwlog_obj();
      v13 = v26;
      if (!os_log_type_enabled(v12, v26))
        goto LABEL_63;
      *(_DWORD *)buf = 136446210;
      v28 = "nw_protocol_http2_transport_notify";
      v14 = "%{public}s called with null other_protocol, backtrace limit exceeded";
      goto LABEL_62;
    }
    v18 = (char *)__nw_create_backtrace_string();
    v12 = __nwlog_obj();
    v13 = v26;
    v21 = os_log_type_enabled(v12, v26);
    if (!v18)
    {
      if (!v21)
        goto LABEL_63;
      *(_DWORD *)buf = 136446210;
      v28 = "nw_protocol_http2_transport_notify";
      v14 = "%{public}s called with null other_protocol, no backtrace";
      goto LABEL_62;
    }
    if (!v21)
      goto LABEL_44;
    *(_DWORD *)buf = 136446466;
    v28 = "nw_protocol_http2_transport_notify";
    v29 = 2082;
    v30 = v18;
    v20 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
LABEL_43:
    _os_log_impl(&dword_182FBE000, v12, v13, v20, buf, 0x16u);
    goto LABEL_44;
  }
  if (!*(_QWORD *)(v5 + 112))
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v28 = "nw_protocol_http2_transport_notify";
    v11 = (char *)_os_log_send_and_compose_impl();
    v26 = OS_LOG_TYPE_ERROR;
    v25 = 0;
    if (!__nwlog_fault(v11, &v26, &v25))
      goto LABEL_63;
    if (v26 == OS_LOG_TYPE_FAULT)
    {
      v12 = __nwlog_obj();
      v13 = v26;
      if (!os_log_type_enabled(v12, v26))
        goto LABEL_63;
      *(_DWORD *)buf = 136446210;
      v28 = "nw_protocol_http2_transport_notify";
      v14 = "%{public}s called with null http2_transport->http2_transport_streams_protocol";
      goto LABEL_62;
    }
    if (!v25)
    {
      v12 = __nwlog_obj();
      v13 = v26;
      if (!os_log_type_enabled(v12, v26))
        goto LABEL_63;
      *(_DWORD *)buf = 136446210;
      v28 = "nw_protocol_http2_transport_notify";
      v14 = "%{public}s called with null http2_transport->http2_transport_streams_protocol, backtrace limit exceeded";
      goto LABEL_62;
    }
    v18 = (char *)__nw_create_backtrace_string();
    v12 = __nwlog_obj();
    v13 = v26;
    v22 = os_log_type_enabled(v12, v26);
    if (!v18)
    {
      if (!v22)
        goto LABEL_63;
      *(_DWORD *)buf = 136446210;
      v28 = "nw_protocol_http2_transport_notify";
      v14 = "%{public}s called with null http2_transport->http2_transport_streams_protocol, no backtrace";
      goto LABEL_62;
    }
    if (v22)
    {
      *(_DWORD *)buf = 136446466;
      v28 = "nw_protocol_http2_transport_notify";
      v29 = 2082;
      v30 = v18;
      v20 = "%{public}s called with null http2_transport->http2_transport_streams_protocol, dumping backtrace:%{public}s";
      goto LABEL_43;
    }
LABEL_44:
    free(v18);
    if (!v11)
      return;
LABEL_64:
    free(v11);
    return;
  }
  if (gLogDatapath)
  {
    v15 = __nwlog_obj();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446466;
      v28 = "nw_protocol_http2_transport_notify";
      v29 = 2082;
      v30 = (char *)(v5 + 205);
      _os_log_impl(&dword_182FBE000, v15, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s called", buf, 0x16u);
    }
  }
  v10 = *(char **)(v5 + 112);
  v23[0] = MEMORY[0x1E0C809B0];
  v23[1] = 0x40000000;
  v23[2] = ___ZL34nw_protocol_http2_transport_notifyP11nw_protocolS0_31nw_protocol_notification_type_tPvm_block_invoke;
  v23[3] = &__block_descriptor_tmp_43_37692;
  v23[4] = v5;
  v23[5] = a2;
  v24 = a3;
  v23[6] = a4;
  v23[7] = a5;
  nw_hash_table_apply(v10, (uint64_t)v23);
}

BOOL nw_protocol_http2_transport_create(const nw_protocol_identifier *a1, nw_endpoint *a2, nw_parameters *a3)
{
  _BYTE *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  char v9;
  uint64_t v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  char *backtrace_string;
  _BOOL4 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint32_t v27;
  _BOOL8 result;
  uint64_t v29;
  char *v30;
  _BOOL4 v31;
  _BOOL4 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  NSObject *v37;
  void *v38;
  NSObject *v39;
  os_log_type_t v40;
  const char *v41;
  char *v42;
  _BOOL4 v43;
  char v44;
  os_log_type_t type[15];
  os_log_type_t v46;
  void *memptr;
  uint8_t buf[4];
  const char *v49;
  __int16 v50;
  uint64_t v51;
  __int16 v52;
  uint64_t v53;
  __int16 v54;
  char *v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  if (gLogDatapath)
  {
    v36 = __nwlog_obj();
    if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446210;
      v49 = "nw_protocol_http2_transport_create";
      _os_log_impl(&dword_182FBE000, v36, OS_LOG_TYPE_DEBUG, "%{public}s called", buf, 0xCu);
    }
  }
  memptr = 0;
  if (!malloc_type_posix_memalign(&memptr, 8uLL, 0x128uLL, 0x68FF3B34uLL))
  {
    v4 = memptr;
    if (memptr)
    {
LABEL_4:
      *((_QWORD *)v4 + 36) = 0;
      *((_OWORD *)v4 + 16) = 0u;
      *((_OWORD *)v4 + 17) = 0u;
      *((_OWORD *)v4 + 14) = 0u;
      *((_OWORD *)v4 + 15) = 0u;
      *((_OWORD *)v4 + 12) = 0u;
      *((_OWORD *)v4 + 13) = 0u;
      *((_OWORD *)v4 + 6) = 0u;
      *((_OWORD *)v4 + 7) = 0u;
      *((_OWORD *)v4 + 4) = 0u;
      *((_OWORD *)v4 + 5) = 0u;
      *((_OWORD *)v4 + 11) = 0u;
      v5 = v4 + 176;
      *((_OWORD *)v4 + 10) = 0u;
      v6 = v4 + 160;
      *((_OWORD *)v4 + 9) = 0u;
      v7 = v4 + 144;
      *((_OWORD *)v4 + 8) = 0u;
      v8 = v4 + 128;
      *((_OWORD *)v4 + 2) = 0u;
      *((_OWORD *)v4 + 3) = 0u;
      *(_OWORD *)v4 = 0u;
      *((_OWORD *)v4 + 1) = 0u;
      *((_QWORD *)v4 + 2) = &g_http2_transport_protocol_identifier;
      *((_QWORD *)v4 + 3) = &g_http2_transport_protocol_callbacks;
      *((_QWORD *)v4 + 5) = v4;
      *((_QWORD *)v4 + 8) = -1;
      if (nw_parameters_get_server_mode(a3))
        v9 = 16;
      else
        v9 = 0;
      v4[204] = v4[204] & 0xEF | v9;
      *v8 = 0;
      *((_QWORD *)v4 + 17) = v8;
      *v7 = 0;
      *((_QWORD *)v4 + 19) = v7;
      *v6 = 0;
      *((_QWORD *)v4 + 21) = v6;
      *v5 = 0;
      *((_QWORD *)v4 + 23) = v5;
      *((_QWORD *)v4 + 24) = 0;
      memptr = 0;
      if (nghttp2_session_callbacks_new())
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v10 = nghttp2_strerror();
        *(_DWORD *)buf = 136446466;
        v49 = "nw_protocol_http2_transport_create";
        v50 = 2082;
        v51 = v10;
        v11 = (char *)_os_log_send_and_compose_impl();
        type[0] = OS_LOG_TYPE_ERROR;
        v46 = OS_LOG_TYPE_DEFAULT;
        if (!__nwlog_fault(v11, type, &v46))
          goto LABEL_31;
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v12 = gLogObj;
          v13 = type[0];
          if (!os_log_type_enabled((os_log_t)gLogObj, type[0]))
            goto LABEL_31;
          v14 = nghttp2_strerror();
          *(_DWORD *)buf = 136446466;
          v49 = "nw_protocol_http2_transport_create";
          v50 = 2082;
          v51 = v14;
          v15 = "%{public}s nghttp2_session_callbacks_new: %{public}s failed";
LABEL_29:
          v25 = v12;
          v26 = v13;
          v27 = 22;
LABEL_30:
          _os_log_impl(&dword_182FBE000, v25, v26, v15, buf, v27);
          goto LABEL_31;
        }
        if (v46 == OS_LOG_TYPE_DEFAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v12 = gLogObj;
          v13 = type[0];
          if (!os_log_type_enabled((os_log_t)gLogObj, type[0]))
            goto LABEL_31;
          v23 = nghttp2_strerror();
          *(_DWORD *)buf = 136446466;
          v49 = "nw_protocol_http2_transport_create";
          v50 = 2082;
          v51 = v23;
          v15 = "%{public}s nghttp2_session_callbacks_new: %{public}s failed, backtrace limit exceeded";
          goto LABEL_29;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v12 = gLogObj;
        v13 = type[0];
        v21 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
        if (!backtrace_string)
        {
          if (!v21)
            goto LABEL_31;
          v24 = nghttp2_strerror();
          *(_DWORD *)buf = 136446466;
          v49 = "nw_protocol_http2_transport_create";
          v50 = 2082;
          v51 = v24;
          v15 = "%{public}s nghttp2_session_callbacks_new: %{public}s failed, no backtrace";
          goto LABEL_29;
        }
        if (v21)
        {
          v22 = nghttp2_strerror();
          *(_DWORD *)buf = 136446722;
          v49 = "nw_protocol_http2_transport_create";
          v50 = 2082;
          v51 = v22;
          v52 = 2082;
          v53 = (uint64_t)backtrace_string;
          _os_log_impl(&dword_182FBE000, v12, v13, "%{public}s nghttp2_session_callbacks_new: %{public}s failed, dumping backtrace:%{public}s", buf, 0x20u);
        }
        free(backtrace_string);
LABEL_31:
        if (!v11)
        {
LABEL_33:
          free(v4);
          return 0;
        }
LABEL_32:
        free(v11);
        goto LABEL_33;
      }
      nghttp2_session_callbacks_set_before_frame_send_callback();
      nghttp2_session_callbacks_set_on_header_callback();
      nghttp2_session_callbacks_set_on_begin_headers_callback();
      nghttp2_session_callbacks_set_on_frame_recv_callback();
      nghttp2_session_callbacks_set_on_data_chunk_recv_callback();
      nghttp2_session_callbacks_set_on_stream_close_callback();
      nghttp2_session_callbacks_set_on_frame_send_callback();
      nghttp2_session_callbacks_set_send_callback();
      nghttp2_session_callbacks_set_send_data_callback();
      nghttp2_session_callbacks_set_on_frame_not_send_callback();
      nghttp2_session_callbacks_set_on_invalid_frame_recv_callback();
      nghttp2_session_callbacks_set_error_callback2();
      nghttp2_set_debug_vprintf_callback();
      *(_QWORD *)type = 0;
      nghttp2_option_new();
      nghttp2_option_set_no_auto_window_update();
      nghttp2_option_set_peer_max_concurrent_streams();
      nghttp2_option_set_no_http_messaging();
      nghttp2_option_set_no_http_semantics();
      nghttp2_option_set_no_closed_streams();
      if ((v4[204] & 0x10) != 0)
      {
        if ((nghttp2_session_server_new2() & 0x80000000) != 0)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v29 = nghttp2_strerror();
          *(_DWORD *)buf = 136446722;
          v49 = "nw_protocol_http2_transport_create";
          v50 = 2082;
          v51 = (uint64_t)(v4 + 205);
          v52 = 2082;
          v53 = v29;
          v11 = (char *)_os_log_send_and_compose_impl();
          v46 = OS_LOG_TYPE_ERROR;
          v44 = 0;
          if (!__nwlog_fault(v11, &v46, &v44))
            goto LABEL_31;
          if (v46 == OS_LOG_TYPE_FAULT)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v17 = gLogObj;
            v18 = v46;
            if (!os_log_type_enabled((os_log_t)gLogObj, v46))
              goto LABEL_31;
            goto LABEL_17;
          }
          if (v44)
          {
            v30 = (char *)__nw_create_backtrace_string();
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v17 = gLogObj;
            v18 = v46;
            v32 = os_log_type_enabled((os_log_t)gLogObj, v46);
            if (v30)
            {
              if (!v32)
                goto LABEL_48;
              goto LABEL_47;
            }
            if (!v32)
              goto LABEL_31;
LABEL_57:
            v35 = nghttp2_strerror();
            *(_DWORD *)buf = 136446722;
            v49 = "nw_protocol_http2_transport_create";
            v50 = 2082;
            v51 = (uint64_t)(v4 + 205);
            v52 = 2082;
            v53 = v35;
            v15 = "%{public}s %{public}s nghttp2_session_server_new2 failed: %{public}s, no backtrace";
            goto LABEL_58;
          }
          v17 = __nwlog_obj();
          v18 = v46;
          if (!os_log_type_enabled(v17, v46))
            goto LABEL_31;
LABEL_51:
          v34 = nghttp2_strerror();
          *(_DWORD *)buf = 136446722;
          v49 = "nw_protocol_http2_transport_create";
          v50 = 2082;
          v51 = (uint64_t)(v4 + 205);
          v52 = 2082;
          v53 = v34;
          v15 = "%{public}s %{public}s nghttp2_session_server_new2 failed: %{public}s, backtrace limit exceeded";
          goto LABEL_58;
        }
      }
      else if ((nghttp2_session_client_new2() & 0x80000000) != 0)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v16 = nghttp2_strerror();
        *(_DWORD *)buf = 136446722;
        v49 = "nw_protocol_http2_transport_create";
        v50 = 2082;
        v51 = (uint64_t)(v4 + 205);
        v52 = 2082;
        v53 = v16;
        v11 = (char *)_os_log_send_and_compose_impl();
        v46 = OS_LOG_TYPE_ERROR;
        v44 = 0;
        if (!__nwlog_fault(v11, &v46, &v44))
          goto LABEL_31;
        if (v46 == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v17 = gLogObj;
          v18 = v46;
          if (!os_log_type_enabled((os_log_t)gLogObj, v46))
            goto LABEL_31;
LABEL_17:
          v19 = nghttp2_strerror();
          *(_DWORD *)buf = 136446722;
          v49 = "nw_protocol_http2_transport_create";
          v50 = 2082;
          v51 = (uint64_t)(v4 + 205);
          v52 = 2082;
          v53 = v19;
          v15 = "%{public}s %{public}s nghttp2_session_server_new2 failed: %{public}s";
LABEL_58:
          v25 = v17;
          v26 = v18;
          v27 = 32;
          goto LABEL_30;
        }
        if (v44)
        {
          v30 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v17 = gLogObj;
          v18 = v46;
          v31 = os_log_type_enabled((os_log_t)gLogObj, v46);
          if (v30)
          {
            if (!v31)
              goto LABEL_48;
LABEL_47:
            v33 = nghttp2_strerror();
            *(_DWORD *)buf = 136446978;
            v49 = "nw_protocol_http2_transport_create";
            v50 = 2082;
            v51 = (uint64_t)(v4 + 205);
            v52 = 2082;
            v53 = v33;
            v54 = 2082;
            v55 = v30;
            _os_log_impl(&dword_182FBE000, v17, v18, "%{public}s %{public}s nghttp2_session_server_new2 failed: %{public}s, dumping backtrace:%{public}s", buf, 0x2Au);
LABEL_48:
            free(v30);
            if (!v11)
              goto LABEL_33;
            goto LABEL_32;
          }
          if (!v31)
            goto LABEL_31;
          goto LABEL_57;
        }
        v17 = __nwlog_obj();
        v18 = v46;
        if (!os_log_type_enabled(v17, v46))
          goto LABEL_31;
        goto LABEL_51;
      }
      MEMORY[0x186DB4334](memptr);
      MEMORY[0x186DB42C8](*(_QWORD *)type);
      return (BOOL)v4;
    }
  }
  v37 = __nwlog_obj();
  os_log_type_enabled(v37, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  v49 = "strict_memalign";
  v50 = 2048;
  v51 = 8;
  v52 = 2048;
  v53 = 296;
  v38 = (void *)_os_log_send_and_compose_impl();
  result = __nwlog_abort((uint64_t)v38);
  if (!result)
  {
    free(v38);
    v4 = memptr;
    if (memptr)
      goto LABEL_4;
    __nwlog_obj();
    *(_DWORD *)buf = 136446466;
    v49 = "nw_protocol_http2_transport_create";
    v50 = 2048;
    v51 = 296;
    v4 = (_BYTE *)_os_log_send_and_compose_impl();
    LOBYTE(memptr) = 16;
    type[0] = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v4, &memptr, type))
    {
      if (memptr == 17)
      {
        v39 = __nwlog_obj();
        v40 = memptr;
        if (!os_log_type_enabled(v39, (os_log_type_t)memptr))
          goto LABEL_77;
        *(_DWORD *)buf = 136446466;
        v49 = "nw_protocol_http2_transport_create";
        v50 = 2048;
        v51 = 296;
        v41 = "%{public}s calloc(%zu) failed";
LABEL_76:
        _os_log_impl(&dword_182FBE000, v39, v40, v41, buf, 0x16u);
        goto LABEL_77;
      }
      if (type[0] == OS_LOG_TYPE_DEFAULT)
      {
        v39 = __nwlog_obj();
        v40 = memptr;
        if (!os_log_type_enabled(v39, (os_log_type_t)memptr))
          goto LABEL_77;
        *(_DWORD *)buf = 136446466;
        v49 = "nw_protocol_http2_transport_create";
        v50 = 2048;
        v51 = 296;
        v41 = "%{public}s calloc(%zu) failed, backtrace limit exceeded";
        goto LABEL_76;
      }
      v42 = (char *)__nw_create_backtrace_string();
      v39 = __nwlog_obj();
      v40 = memptr;
      v43 = os_log_type_enabled(v39, (os_log_type_t)memptr);
      if (!v42)
      {
        if (!v43)
          goto LABEL_77;
        *(_DWORD *)buf = 136446466;
        v49 = "nw_protocol_http2_transport_create";
        v50 = 2048;
        v51 = 296;
        v41 = "%{public}s calloc(%zu) failed, no backtrace";
        goto LABEL_76;
      }
      if (v43)
      {
        *(_DWORD *)buf = 136446722;
        v49 = "nw_protocol_http2_transport_create";
        v50 = 2048;
        v51 = 296;
        v52 = 2082;
        v53 = (uint64_t)v42;
        _os_log_impl(&dword_182FBE000, v39, v40, "%{public}s calloc(%zu) failed, dumping backtrace:%{public}s", buf, 0x20u);
      }
      free(v42);
    }
LABEL_77:
    if (!v4)
      return 0;
    goto LABEL_33;
  }
  __break(1u);
  return result;
}

BOOL nw_protocol_http2_transport_accept(nw_protocol *a1, nw_endpoint *a2, nw_parameters *a3)
{
  _BYTE *handle;
  _BOOL8 result;
  NSObject *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  const char *v9;
  NSObject *v10;
  char *backtrace_string;
  _BOOL4 v12;
  char *v13;
  _BOOL4 v14;
  char v15;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v18 = "nw_protocol_http2_transport_accept";
    v6 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v15 = 0;
    if (!__nwlog_fault(v6, &type, &v15))
      goto LABEL_40;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v7 = __nwlog_obj();
      v8 = type;
      if (!os_log_type_enabled(v7, type))
        goto LABEL_40;
      *(_DWORD *)buf = 136446210;
      v18 = "nw_protocol_http2_transport_accept";
      v9 = "%{public}s called with null protocol";
      goto LABEL_39;
    }
    if (!v15)
    {
      v7 = __nwlog_obj();
      v8 = type;
      if (!os_log_type_enabled(v7, type))
        goto LABEL_40;
      *(_DWORD *)buf = 136446210;
      v18 = "nw_protocol_http2_transport_accept";
      v9 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_39;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v7 = __nwlog_obj();
    v8 = type;
    v12 = os_log_type_enabled(v7, type);
    if (!backtrace_string)
    {
      if (!v12)
        goto LABEL_40;
      *(_DWORD *)buf = 136446210;
      v18 = "nw_protocol_http2_transport_accept";
      v9 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_39;
    }
    if (v12)
    {
      *(_DWORD *)buf = 136446466;
      v18 = "nw_protocol_http2_transport_accept";
      v19 = 2082;
      v20 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(backtrace_string);
LABEL_40:
    if (!v6)
      return 0;
LABEL_41:
    free(v6);
    return 0;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v18 = "nw_protocol_http2_transport_accept";
    v6 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v15 = 0;
    if (!__nwlog_fault(v6, &type, &v15))
      goto LABEL_40;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v7 = __nwlog_obj();
      v8 = type;
      if (!os_log_type_enabled(v7, type))
        goto LABEL_40;
      *(_DWORD *)buf = 136446210;
      v18 = "nw_protocol_http2_transport_accept";
      v9 = "%{public}s called with null http2_transport";
      goto LABEL_39;
    }
    if (!v15)
    {
      v7 = __nwlog_obj();
      v8 = type;
      if (!os_log_type_enabled(v7, type))
        goto LABEL_40;
      *(_DWORD *)buf = 136446210;
      v18 = "nw_protocol_http2_transport_accept";
      v9 = "%{public}s called with null http2_transport, backtrace limit exceeded";
      goto LABEL_39;
    }
    v13 = (char *)__nw_create_backtrace_string();
    v7 = __nwlog_obj();
    v8 = type;
    v14 = os_log_type_enabled(v7, type);
    if (v13)
    {
      if (v14)
      {
        *(_DWORD *)buf = 136446466;
        v18 = "nw_protocol_http2_transport_accept";
        v19 = 2082;
        v20 = v13;
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null http2_transport, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v13);
      if (!v6)
        return 0;
      goto LABEL_41;
    }
    if (v14)
    {
      *(_DWORD *)buf = 136446210;
      v18 = "nw_protocol_http2_transport_accept";
      v9 = "%{public}s called with null http2_transport, no backtrace";
LABEL_39:
      _os_log_impl(&dword_182FBE000, v7, v8, v9, buf, 0xCu);
      goto LABEL_40;
    }
    goto LABEL_40;
  }
  if (gLogDatapath)
  {
    v10 = __nwlog_obj();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446466;
      v18 = "nw_protocol_http2_transport_accept";
      v19 = 2082;
      v20 = handle + 205;
      _os_log_impl(&dword_182FBE000, v10, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s called", buf, 0x16u);
    }
  }
  if ((handle[204] & 4) == 0)
    return 1;
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v5 = gLogObj;
  result = os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO);
  if (result)
  {
    *(_DWORD *)buf = 136446466;
    v18 = "nw_protocol_http2_transport_accept";
    v19 = 2082;
    v20 = handle + 205;
    _os_log_impl(&dword_182FBE000, v5, OS_LOG_TYPE_INFO, "%{public}s %{public}s cannot accept new streams after the tunnel is closed", buf, 0x16u);
    return 0;
  }
  return result;
}

uint64_t before_frame_send_callback(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t stream_from_id;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  const char *v13;
  char *backtrace_string;
  _BOOL4 v15;
  const char *v16;
  NSObject *v17;
  os_log_type_t v18;
  uint32_t v19;
  NSObject *v20;
  NSObject *v21;
  os_log_type_t v22;
  uint32_t v23;
  NSObject *v24;
  int v25;
  uint64_t v26;
  NSObject *v27;
  NSObject *v28;
  os_log_type_t v29;
  _BOOL4 v30;
  os_log_type_t type[8];
  char v32;
  uint8_t buf[4];
  const char *v34;
  __int16 v35;
  _BYTE v36[18];
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  if (gLogDatapath)
  {
    v24 = __nwlog_obj();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
    {
      v25 = *((_DWORD *)a2 + 2);
      v26 = *a2;
      *(_DWORD *)buf = 136446722;
      v34 = "before_frame_send_callback";
      v35 = 1024;
      *(_DWORD *)v36 = v25;
      *(_WORD *)&v36[4] = 2048;
      *(_QWORD *)&v36[6] = v26;
      _os_log_impl(&dword_182FBE000, v24, OS_LOG_TYPE_DEBUG, "%{public}s called for frame on stream %d, length (no header) %zu", buf, 0x1Cu);
    }
  }
  v5 = *((_DWORD *)a2 + 2);
  if (v5)
  {
    if (*((_BYTE *)a2 + 12) != 1 || *((_DWORD *)a2 + 14) > 1u)
      return 0;
    if (a3)
    {
      if (*(_QWORD *)(a3 + 120))
      {
        *(_QWORD *)type = 0;
        stream_from_id = nw_http2_transport_get_stream_from_id(a3, v5, type);
        if (stream_from_id)
        {
          v7 = stream_from_id;
          if ((*(_BYTE *)(stream_from_id + 36) & 1) != 0)
            return 0;
          if (*(_QWORD *)type)
          {
            nw_http2_transport_stream_connected(a3, stream_from_id, *(uint64_t *)type);
            return 0;
          }
          v20 = __nwlog_obj();
          if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446722;
            v34 = "before_frame_send_callback";
            v35 = 2082;
            *(_QWORD *)v36 = a3 + 205;
            *(_WORD *)&v36[8] = 2048;
            *(_QWORD *)&v36[10] = v7;
            _os_log_impl(&dword_182FBE000, v20, OS_LOG_TYPE_ERROR, "%{public}s %{public}s stream (%p) did not have protocol extra", buf, 0x20u);
          }
        }
        return 4294966775;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v9 = a3 + 205;
      *(_DWORD *)buf = 136446466;
      v34 = "before_frame_send_callback";
      v35 = 2082;
      *(_QWORD *)v36 = a3 + 205;
      v10 = (char *)_os_log_send_and_compose_impl();
      type[0] = OS_LOG_TYPE_ERROR;
      v32 = 0;
      if (!__nwlog_fault(v10, type, &v32))
        goto LABEL_33;
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v11 = gLogObj;
        v12 = type[0];
        if (os_log_type_enabled((os_log_t)gLogObj, type[0]))
        {
          *(_DWORD *)buf = 136446466;
          v34 = "before_frame_send_callback";
          v35 = 2082;
          *(_QWORD *)v36 = v9;
          v13 = "%{public}s %{public}s id based hash table has not yet been created, failing connection";
LABEL_31:
          v21 = v11;
          v22 = v12;
          v23 = 22;
LABEL_32:
          _os_log_impl(&dword_182FBE000, v21, v22, v13, buf, v23);
          goto LABEL_33;
        }
        goto LABEL_33;
      }
      if (!v32)
      {
        v11 = __nwlog_obj();
        v12 = type[0];
        if (os_log_type_enabled(v11, type[0]))
        {
          *(_DWORD *)buf = 136446466;
          v34 = "before_frame_send_callback";
          v35 = 2082;
          *(_QWORD *)v36 = v9;
          v13 = "%{public}s %{public}s id based hash table has not yet been created, failing connection, backtrace limit exceeded";
          goto LABEL_31;
        }
LABEL_33:
        if (v10)
          free(v10);
        return 4294966394;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v11 = __nwlog_obj();
      v12 = type[0];
      v15 = os_log_type_enabled(v11, type[0]);
      if (!backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          v34 = "before_frame_send_callback";
          v35 = 2082;
          *(_QWORD *)v36 = v9;
          v13 = "%{public}s %{public}s id based hash table has not yet been created, failing connection, no backtrace";
          goto LABEL_31;
        }
        goto LABEL_33;
      }
      if (!v15)
      {
LABEL_23:
        free(backtrace_string);
        goto LABEL_33;
      }
      *(_DWORD *)buf = 136446722;
      v34 = "before_frame_send_callback";
      v35 = 2082;
      *(_QWORD *)v36 = v9;
      *(_WORD *)&v36[8] = 2082;
      *(_QWORD *)&v36[10] = backtrace_string;
      v16 = "%{public}s %{public}s id based hash table has not yet been created, failing connection, dumping backtrace:%{public}s";
      v17 = v11;
      v18 = v12;
      v19 = 32;
LABEL_22:
      _os_log_impl(&dword_182FBE000, v17, v18, v16, buf, v19);
      goto LABEL_23;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v34 = "before_frame_send_callback";
    v10 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    v32 = 0;
    if (!__nwlog_fault(v10, type, &v32))
      goto LABEL_33;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      v28 = __nwlog_obj();
      v29 = type[0];
      if (!os_log_type_enabled(v28, type[0]))
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v34 = "before_frame_send_callback";
      v13 = "%{public}s nghttp2 user data is NULL, not http2_transport";
    }
    else if (v32)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v28 = __nwlog_obj();
      v29 = type[0];
      v30 = os_log_type_enabled(v28, type[0]);
      if (backtrace_string)
      {
        if (!v30)
          goto LABEL_23;
        *(_DWORD *)buf = 136446466;
        v34 = "before_frame_send_callback";
        v35 = 2082;
        *(_QWORD *)v36 = backtrace_string;
        v16 = "%{public}s nghttp2 user data is NULL, not http2_transport, dumping backtrace:%{public}s";
        v17 = v28;
        v18 = v29;
        v19 = 22;
        goto LABEL_22;
      }
      if (!v30)
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v34 = "before_frame_send_callback";
      v13 = "%{public}s nghttp2 user data is NULL, not http2_transport, no backtrace";
    }
    else
    {
      v28 = __nwlog_obj();
      v29 = type[0];
      if (!os_log_type_enabled(v28, type[0]))
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v34 = "before_frame_send_callback";
      v13 = "%{public}s nghttp2 user data is NULL, not http2_transport, backtrace limit exceeded";
    }
    v21 = v28;
    v22 = v29;
    v23 = 12;
    goto LABEL_32;
  }
  if (!gLogDatapath)
    return 0;
  v27 = __nwlog_obj();
  result = os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG);
  if ((_DWORD)result)
  {
    *(_DWORD *)buf = 136446210;
    v34 = "before_frame_send_callback";
    _os_log_impl(&dword_182FBE000, v27, OS_LOG_TYPE_DEBUG, "%{public}s ignoring frame on stream 0", buf, 0xCu);
    return 0;
  }
  return result;
}

{
  int v5;
  unsigned int v6;
  uint64_t stream_from_id;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t result;
  int v13;
  const char *v14;
  NSObject *v15;
  os_log_type_t v16;
  int v17;
  const char *v18;
  int v19;
  int v20;
  char *v21;
  NSObject *v22;
  os_log_type_t v23;
  int v24;
  int v25;
  const char *v26;
  char *v27;
  _BOOL4 v28;
  int v29;
  char *backtrace_string;
  _BOOL4 v31;
  int v32;
  int v33;
  int v34;
  NSObject *v35;
  int v36;
  int v37;
  int v38;
  char *v39;
  int v40;
  int v41;
  int v42;
  int v43;
  NSObject *v44;
  int v45;
  uint64_t v46;
  NSObject *v47;
  const char *v48;
  NSObject *v49;
  os_log_type_t v50;
  const char *v51;
  char *v52;
  _BOOL4 v53;
  NSObject *v54;
  int v55;
  int v56;
  NSObject *v57;
  int v58;
  int v59;
  char v60;
  os_log_type_t type[8];
  os_log_type_t v62;
  uint8_t buf[4];
  const char *v64;
  __int16 v65;
  _BYTE v66[18];
  __int16 v67;
  int v68;
  __int16 v69;
  _QWORD v70[3];

  v70[2] = *MEMORY[0x1E0C80C00];
  if (gLogDatapath)
  {
    v44 = __nwlog_obj();
    if (os_log_type_enabled(v44, OS_LOG_TYPE_DEBUG))
    {
      v45 = *((_DWORD *)a2 + 2);
      v46 = *a2;
      *(_DWORD *)buf = 136446722;
      v64 = "before_frame_send_callback";
      v65 = 1024;
      *(_DWORD *)v66 = v45;
      *(_WORD *)&v66[4] = 2048;
      *(_QWORD *)&v66[6] = v46;
      _os_log_impl(&dword_182FBE000, v44, OS_LOG_TYPE_DEBUG, "%{public}s called for frame on stream %d, length (no header) %zu", buf, 0x1Cu);
    }
  }
  v5 = *((_DWORD *)a2 + 2);
  if (v5)
  {
    if (*((_BYTE *)a2 + 12) != 1)
      return 0;
    v6 = *((_DWORD *)a2 + 14);
    if (v6 > 3 || v6 == 2)
      return 0;
    if (a3)
    {
      if (*(_QWORD *)(a3 + 160))
      {
        *(_QWORD *)type = 0;
        stream_from_id = nw_http2_get_stream_from_id(a3, v5, type);
        if (stream_from_id)
        {
          v9 = stream_from_id;
          if (((*(unsigned __int16 *)(stream_from_id + 188) | (*(unsigned __int8 *)(stream_from_id + 190) << 16)) & 0x80000) == 0
            && gLogDatapath)
          {
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v54 = gconnectionLogObj;
            if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
            {
              v56 = *(_DWORD *)(v9 + 176);
              v55 = *(_DWORD *)(v9 + 180);
              *(_DWORD *)buf = 136447490;
              v64 = "before_frame_send_callback";
              v65 = 2082;
              *(_QWORD *)v66 = v9 + 191;
              *(_WORD *)&v66[8] = 2080;
              *(_QWORD *)&v66[10] = " ";
              v67 = 1024;
              v68 = v55;
              v69 = 1024;
              LODWORD(v70[0]) = v56;
              WORD2(v70[0]) = 1024;
              *(_DWORD *)((char *)v70 + 6) = v56;
              _os_log_impl(&dword_182FBE000, v54, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%d> outgoing headers for stream %d", buf, 0x32u);
            }
          }
          nw_http_connection_metadata_increment_outbound_message_count(*(void **)(a3 + 256));
          if ((*(_WORD *)(v9 + 188) & 0x2002) != 0)
            return 0;
          if (((*(unsigned __int16 *)(v9 + 188) | (*(unsigned __int8 *)(v9 + 190) << 16)) & 0x80000) == 0
            && gLogDatapath)
          {
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v57 = gconnectionLogObj;
            if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
            {
              v59 = *(_DWORD *)(v9 + 176);
              v58 = *(_DWORD *)(v9 + 180);
              *(_DWORD *)buf = 136447234;
              v64 = "before_frame_send_callback";
              v65 = 2082;
              *(_QWORD *)v66 = v9 + 191;
              *(_WORD *)&v66[8] = 2080;
              *(_QWORD *)&v66[10] = " ";
              v67 = 1024;
              v68 = v58;
              v69 = 1024;
              LODWORD(v70[0]) = v59;
              _os_log_impl(&dword_182FBE000, v57, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%d> stream is now open, sending body", buf, 0x2Cu);
            }
          }
          v10 = *(unsigned __int16 *)(v9 + 188);
          v11 = *(unsigned __int8 *)(v9 + 190);
          *(_WORD *)(v9 + 188) = v10 | 2;
          if (*(_QWORD *)type)
          {
            while ((nw_http2_drain_next_frame_for_stream(a3, *(uint64_t *)type, v9, 0) & 1) != 0)
              ;
            return 0;
          }
          if (((v10 | (v11 << 16)) & 0x80000) == 0)
          {
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v35 = gconnectionLogObj;
            if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
            {
              v37 = *(_DWORD *)(v9 + 176);
              v36 = *(_DWORD *)(v9 + 180);
              *(_DWORD *)buf = 136447490;
              v64 = "before_frame_send_callback";
              v65 = 2082;
              *(_QWORD *)v66 = v9 + 191;
              *(_WORD *)&v66[8] = 2080;
              *(_QWORD *)&v66[10] = " ";
              v67 = 1024;
              v68 = v36;
              v69 = 1024;
              LODWORD(v70[0]) = v37;
              WORD2(v70[0]) = 2048;
              *(_QWORD *)((char *)v70 + 6) = v9;
              _os_log_impl(&dword_182FBE000, v35, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u:s%d> stream (%p) did not have protocol extra", buf, 0x36u);
            }
          }
          return 4294966775;
        }
        if (*(__int16 *)(a3 + 376) < 0)
          return 4294966775;
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v19 = *(_DWORD *)(a3 + 368);
        v20 = *((_DWORD *)a2 + 2);
        *(_DWORD *)buf = 136447234;
        v64 = "before_frame_send_callback";
        v65 = 2082;
        *(_QWORD *)v66 = a3 + 378;
        *(_WORD *)&v66[8] = 2080;
        *(_QWORD *)&v66[10] = " ";
        v67 = 1024;
        v68 = v19;
        v69 = 1024;
        LODWORD(v70[0]) = v20;
        v21 = (char *)_os_log_send_and_compose_impl();
        v62 = OS_LOG_TYPE_ERROR;
        v60 = 0;
        if (__nwlog_fault(v21, &v62, &v60))
        {
          if (v62 == OS_LOG_TYPE_FAULT)
          {
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v22 = gconnectionLogObj;
            v23 = v62;
            if (!os_log_type_enabled((os_log_t)gconnectionLogObj, v62))
              goto LABEL_77;
            v24 = *(_DWORD *)(a3 + 368);
            v25 = *((_DWORD *)a2 + 2);
            *(_DWORD *)buf = 136447234;
            v64 = "before_frame_send_callback";
            v65 = 2082;
            *(_QWORD *)v66 = a3 + 378;
            *(_WORD *)&v66[8] = 2080;
            *(_QWORD *)&v66[10] = " ";
            v67 = 1024;
            v68 = v24;
            v69 = 1024;
            LODWORD(v70[0]) = v25;
            v26 = "%{public}s %{public}s%s<i%u> failed to find stream %d";
            goto LABEL_76;
          }
          if (!v60)
          {
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v22 = gconnectionLogObj;
            v23 = v62;
            if (!os_log_type_enabled((os_log_t)gconnectionLogObj, v62))
              goto LABEL_77;
            v40 = *(_DWORD *)(a3 + 368);
            v41 = *((_DWORD *)a2 + 2);
            *(_DWORD *)buf = 136447234;
            v64 = "before_frame_send_callback";
            v65 = 2082;
            *(_QWORD *)v66 = a3 + 378;
            *(_WORD *)&v66[8] = 2080;
            *(_QWORD *)&v66[10] = " ";
            v67 = 1024;
            v68 = v40;
            v69 = 1024;
            LODWORD(v70[0]) = v41;
            v26 = "%{public}s %{public}s%s<i%u> failed to find stream %d, backtrace limit exceeded";
            goto LABEL_76;
          }
          backtrace_string = (char *)__nw_create_backtrace_string();
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v22 = gconnectionLogObj;
          v23 = v62;
          v31 = os_log_type_enabled((os_log_t)gconnectionLogObj, v62);
          if (backtrace_string)
          {
            if (v31)
            {
              v32 = *(_DWORD *)(a3 + 368);
              v33 = *((_DWORD *)a2 + 2);
              *(_DWORD *)buf = 136447490;
              v64 = "before_frame_send_callback";
              v65 = 2082;
              *(_QWORD *)v66 = a3 + 378;
              *(_WORD *)&v66[8] = 2080;
              *(_QWORD *)&v66[10] = " ";
              v67 = 1024;
              v68 = v32;
              v69 = 1024;
              LODWORD(v70[0]) = v33;
              WORD2(v70[0]) = 2082;
              *(_QWORD *)((char *)v70 + 6) = backtrace_string;
              _os_log_impl(&dword_182FBE000, v22, v23, "%{public}s %{public}s%s<i%u> failed to find stream %d, dumping backtrace:%{public}s", buf, 0x36u);
            }
            free(backtrace_string);
            goto LABEL_77;
          }
          if (v31)
          {
            v42 = *(_DWORD *)(a3 + 368);
            v43 = *((_DWORD *)a2 + 2);
            *(_DWORD *)buf = 136447234;
            v64 = "before_frame_send_callback";
            v65 = 2082;
            *(_QWORD *)v66 = a3 + 378;
            *(_WORD *)&v66[8] = 2080;
            *(_QWORD *)&v66[10] = " ";
            v67 = 1024;
            v68 = v42;
            v69 = 1024;
            LODWORD(v70[0]) = v43;
            v26 = "%{public}s %{public}s%s<i%u> failed to find stream %d, no backtrace";
LABEL_76:
            _os_log_impl(&dword_182FBE000, v22, v23, v26, buf, 0x2Cu);
          }
        }
LABEL_77:
        if (v21)
          free(v21);
        return 4294966775;
      }
      if (*(__int16 *)(a3 + 376) < 0)
        return 4294966394;
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v13 = *(_DWORD *)(a3 + 368);
      *(_DWORD *)buf = 136446978;
      v64 = "before_frame_send_callback";
      v65 = 2082;
      *(_QWORD *)v66 = a3 + 378;
      *(_WORD *)&v66[8] = 2080;
      *(_QWORD *)&v66[10] = " ";
      v67 = 1024;
      v68 = v13;
      v14 = (const char *)_os_log_send_and_compose_impl();
      type[0] = OS_LOG_TYPE_ERROR;
      v62 = OS_LOG_TYPE_DEFAULT;
      if (__nwlog_fault(v14, type, &v62))
      {
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v15 = gconnectionLogObj;
          v16 = type[0];
          if (os_log_type_enabled((os_log_t)gconnectionLogObj, type[0]))
          {
            v17 = *(_DWORD *)(a3 + 368);
            *(_DWORD *)buf = 136446978;
            v64 = "before_frame_send_callback";
            v65 = 2082;
            *(_QWORD *)v66 = a3 + 378;
            *(_WORD *)&v66[8] = 2080;
            *(_QWORD *)&v66[10] = " ";
            v67 = 1024;
            v68 = v17;
            v18 = "%{public}s %{public}s%s<i%u> id based hash table has not yet been created, failing connection";
LABEL_65:
            _os_log_impl(&dword_182FBE000, v15, v16, v18, buf, 0x26u);
          }
        }
        else if (v62)
        {
          v27 = (char *)__nw_create_backtrace_string();
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v15 = gconnectionLogObj;
          v16 = type[0];
          v28 = os_log_type_enabled((os_log_t)gconnectionLogObj, type[0]);
          if (!v27)
          {
            if (!v28)
              goto LABEL_66;
            v38 = *(_DWORD *)(a3 + 368);
            *(_DWORD *)buf = 136446978;
            v64 = "before_frame_send_callback";
            v65 = 2082;
            *(_QWORD *)v66 = a3 + 378;
            *(_WORD *)&v66[8] = 2080;
            *(_QWORD *)&v66[10] = " ";
            v67 = 1024;
            v68 = v38;
            v18 = "%{public}s %{public}s%s<i%u> id based hash table has not yet been created, failing connection, no backtrace";
            goto LABEL_65;
          }
          if (v28)
          {
            v29 = *(_DWORD *)(a3 + 368);
            *(_DWORD *)buf = 136447234;
            v64 = "before_frame_send_callback";
            v65 = 2082;
            *(_QWORD *)v66 = a3 + 378;
            *(_WORD *)&v66[8] = 2080;
            *(_QWORD *)&v66[10] = " ";
            v67 = 1024;
            v68 = v29;
            v69 = 2082;
            v70[0] = v27;
            _os_log_impl(&dword_182FBE000, v15, v16, "%{public}s %{public}s%s<i%u> id based hash table has not yet been created, failing connection, dumping backtrace:%{public}s", buf, 0x30u);
          }
          free(v27);
        }
        else
        {
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v15 = gconnectionLogObj;
          v16 = type[0];
          if (os_log_type_enabled((os_log_t)gconnectionLogObj, type[0]))
          {
            v34 = *(_DWORD *)(a3 + 368);
            *(_DWORD *)buf = 136446978;
            v64 = "before_frame_send_callback";
            v65 = 2082;
            *(_QWORD *)v66 = a3 + 378;
            *(_WORD *)&v66[8] = 2080;
            *(_QWORD *)&v66[10] = " ";
            v67 = 1024;
            v68 = v34;
            v18 = "%{public}s %{public}s%s<i%u> id based hash table has not yet been created, failing connection, backtra"
                  "ce limit exceeded";
            goto LABEL_65;
          }
        }
      }
LABEL_66:
      if (v14)
      {
        v39 = (char *)v14;
LABEL_68:
        free(v39);
      }
      return 4294966394;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v64 = "before_frame_send_callback";
    v48 = (const char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    v62 = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v48, type, &v62))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        v49 = __nwlog_obj();
        v50 = type[0];
        if (os_log_type_enabled(v49, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          v64 = "before_frame_send_callback";
          v51 = "%{public}s nghttp2 user data is NULL, not http2";
LABEL_105:
          _os_log_impl(&dword_182FBE000, v49, v50, v51, buf, 0xCu);
        }
      }
      else if (v62)
      {
        v52 = (char *)__nw_create_backtrace_string();
        v49 = __nwlog_obj();
        v50 = type[0];
        v53 = os_log_type_enabled(v49, type[0]);
        if (v52)
        {
          if (v53)
          {
            *(_DWORD *)buf = 136446466;
            v64 = "before_frame_send_callback";
            v65 = 2082;
            *(_QWORD *)v66 = v52;
            _os_log_impl(&dword_182FBE000, v49, v50, "%{public}s nghttp2 user data is NULL, not http2, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v52);
          goto LABEL_106;
        }
        if (v53)
        {
          *(_DWORD *)buf = 136446210;
          v64 = "before_frame_send_callback";
          v51 = "%{public}s nghttp2 user data is NULL, not http2, no backtrace";
          goto LABEL_105;
        }
      }
      else
      {
        v49 = __nwlog_obj();
        v50 = type[0];
        if (os_log_type_enabled(v49, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          v64 = "before_frame_send_callback";
          v51 = "%{public}s nghttp2 user data is NULL, not http2, backtrace limit exceeded";
          goto LABEL_105;
        }
      }
    }
LABEL_106:
    if (!v48)
      return 4294966394;
    v39 = (char *)v48;
    goto LABEL_68;
  }
  if (!gLogDatapath)
    return 0;
  v47 = __nwlog_obj();
  result = os_log_type_enabled(v47, OS_LOG_TYPE_DEBUG);
  if ((_DWORD)result)
  {
    *(_DWORD *)buf = 136446210;
    v64 = "before_frame_send_callback";
    _os_log_impl(&dword_182FBE000, v47, OS_LOG_TYPE_DEBUG, "%{public}s ignoring frame on stream 0", buf, 0xCu);
    return 0;
  }
  return result;
}

uint64_t on_header_callback(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v12;
  uint64_t stream_from_id;
  uint64_t result;
  uint64_t v15;
  const char *v16;
  NSObject *v17;
  uint32_t v18;
  NSObject *v19;
  uint64_t v20;
  int v21;
  NSObject *v22;
  char *v23;
  NSObject *v24;
  os_log_type_t v25;
  const char *v26;
  char *backtrace_string;
  _BOOL4 v28;
  uint64_t v29;
  NSObject *v30;
  int v31;
  char v32;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v35;
  __int16 v36;
  char *v37;
  __int16 v38;
  _BYTE v39[14];
  __int16 v40;
  uint64_t v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  if (gLogDatapath)
  {
    v22 = __nwlog_obj();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446722;
      v35 = "on_header_callback";
      v36 = 2082;
      v37 = a3;
      v38 = 2082;
      *(_QWORD *)v39 = a5;
      _os_log_impl(&dword_182FBE000, v22, OS_LOG_TYPE_DEBUG, "%{public}s called name %{public}s value %{public}s", buf, 0x20u);
    }
  }
  if (!a8)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v35 = "on_header_callback";
    v23 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v32 = 0;
    if (!__nwlog_fault(v23, &type, &v32))
      goto LABEL_35;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v24 = __nwlog_obj();
      v25 = type;
      if (!os_log_type_enabled(v24, type))
        goto LABEL_35;
      *(_DWORD *)buf = 136446210;
      v35 = "on_header_callback";
      v26 = "%{public}s nghttp2 user data is NULL, not http2_transport";
    }
    else if (v32)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v24 = __nwlog_obj();
      v25 = type;
      v28 = os_log_type_enabled(v24, type);
      if (backtrace_string)
      {
        if (v28)
        {
          *(_DWORD *)buf = 136446466;
          v35 = "on_header_callback";
          v36 = 2082;
          v37 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v24, v25, "%{public}s nghttp2 user data is NULL, not http2_transport, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_35;
      }
      if (!v28)
      {
LABEL_35:
        if (v23)
          free(v23);
        return 4294966394;
      }
      *(_DWORD *)buf = 136446210;
      v35 = "on_header_callback";
      v26 = "%{public}s nghttp2 user data is NULL, not http2_transport, no backtrace";
    }
    else
    {
      v24 = __nwlog_obj();
      v25 = type;
      if (!os_log_type_enabled(v24, type))
        goto LABEL_35;
      *(_DWORD *)buf = 136446210;
      v35 = "on_header_callback";
      v26 = "%{public}s nghttp2 user data is NULL, not http2_transport, backtrace limit exceeded";
    }
    _os_log_impl(&dword_182FBE000, v24, v25, v26, buf, 0xCu);
    goto LABEL_35;
  }
  v12 = *(unsigned __int8 *)(a2 + 12);
  if (v12 == 5)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v15 = gLogObj;
    if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      return 4294966775;
    *(_DWORD *)buf = 136446466;
    v35 = "on_header_callback";
    v36 = 2082;
    v37 = (char *)(a8 + 205);
    v16 = "%{public}s %{public}s push promise frames currently not supported";
    v17 = v15;
    v18 = 22;
LABEL_16:
    _os_log_impl(&dword_182FBE000, v17, OS_LOG_TYPE_ERROR, v16, buf, v18);
    return 4294966775;
  }
  if (v12 != 1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v19 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      v35 = "on_header_callback";
      v36 = 2082;
      v37 = (char *)(a8 + 205);
      _os_log_impl(&dword_182FBE000, v19, OS_LOG_TYPE_ERROR, "%{public}s %{public}s returning callback failure with unknown error", buf, 0x16u);
    }
    return 4294966394;
  }
  if (*(_DWORD *)(a2 + 56) != 1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v20 = gLogObj;
    if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      return 4294966775;
    v21 = *(_DWORD *)(a2 + 8);
    *(_DWORD *)buf = 136446722;
    v35 = "on_header_callback";
    v36 = 2082;
    v37 = (char *)(a8 + 205);
    v38 = 1024;
    *(_DWORD *)v39 = v21;
    v16 = "%{public}s %{public}s ERROR: Got headers for stream %d, a stream that doesn't exist.";
    v17 = v20;
    v18 = 28;
    goto LABEL_16;
  }
  stream_from_id = nw_http2_transport_get_stream_from_id(a8, *(_DWORD *)(a2 + 8), 0);
  if (!stream_from_id)
    return 4294966775;
  if (!gLogDatapath)
    return 0;
  v29 = stream_from_id;
  v30 = __nwlog_obj();
  result = os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG);
  if ((_DWORD)result)
  {
    v31 = *(_DWORD *)(v29 + 32);
    *(_DWORD *)buf = 136447234;
    v35 = "on_header_callback";
    v36 = 2082;
    v37 = (char *)(a8 + 205);
    v38 = 1024;
    *(_DWORD *)v39 = v31;
    *(_WORD *)&v39[4] = 2082;
    *(_QWORD *)&v39[6] = a3;
    v40 = 2082;
    v41 = a5;
    _os_log_impl(&dword_182FBE000, v30, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s received header response on stream %d: name: %{public}s value: %{public}s", buf, 0x30u);
    return 0;
  }
  return result;
}

uint64_t on_begin_headers_callback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  NSObject *v6;
  int v7;
  uint64_t stream_node_from_id;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  int v13;
  uint64_t result;
  uint64_t v15;
  const char *v16;
  NSObject *v17;
  uint32_t v18;
  NSObject *v19;
  int v20;
  _DWORD *v21;
  void *v22;
  id v23;
  _BOOL8 v24;
  uint64_t v25;
  xpc_object_t v26;
  os_log_type_t *v27;
  void *v28;
  _QWORD **v29;
  _QWORD *v30;
  char v31;
  NSObject *v32;
  uint64_t v33;
  int v34;
  const char *v35;
  NSObject *v36;
  os_log_type_t v37;
  int v38;
  const char *v39;
  uint64_t v40;
  int v41;
  char *v42;
  _BOOL4 v43;
  int v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  int v48;
  char *v49;
  _BOOL4 v50;
  const char *v51;
  uint64_t v52;
  NSObject *v53;
  int v54;
  NSObject *v55;
  os_log_type_t v56;
  uint32_t v57;
  _BOOL4 v58;
  char *v59;
  char *v60;
  NSObject *v61;
  os_log_type_t v62;
  const char *v63;
  NSObject *v64;
  char *backtrace_string;
  _BOOL4 v66;
  NSObject *v67;
  NSObject *v68;
  NSObject *v69;
  void *v70;
  uint64_t v71;
  char *v72;
  NSObject *v73;
  os_log_type_t v74;
  const char *v75;
  char *v76;
  _BOOL4 v77;
  NSObject *v78;
  NSObject *v79;
  NSObject *v80;
  uint64_t v81;
  NSObject *v82;
  NSObject *v83;
  _QWORD v84[5];
  _QWORD v85[5];
  _QWORD v86[5];
  os_log_type_t type[8];
  os_log_type_t *v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  uint8_t buf[4];
  const char *v93;
  __int16 v94;
  uint64_t v95;
  __int16 v96;
  _BYTE v97[18];
  uint64_t v98;

  v98 = *MEMORY[0x1E0C80C00];
  if (!a3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v93 = "on_begin_headers_callback";
    v60 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    v91 = 0;
    if (!__nwlog_fault(v60, type, &v91))
      goto LABEL_128;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      v61 = __nwlog_obj();
      v62 = type[0];
      if (!os_log_type_enabled(v61, type[0]))
        goto LABEL_128;
      *(_DWORD *)buf = 136446210;
      v93 = "on_begin_headers_callback";
      v63 = "%{public}s nghttp2 user data is NULL, not http2_transport";
    }
    else if (v91)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v61 = __nwlog_obj();
      v62 = type[0];
      v66 = os_log_type_enabled(v61, type[0]);
      if (backtrace_string)
      {
        if (v66)
        {
          *(_DWORD *)buf = 136446466;
          v93 = "on_begin_headers_callback";
          v94 = 2082;
          v95 = (uint64_t)backtrace_string;
          _os_log_impl(&dword_182FBE000, v61, v62, "%{public}s nghttp2 user data is NULL, not http2_transport, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_128;
      }
      if (!v66)
      {
LABEL_128:
        if (v60)
          free(v60);
        return 4294966394;
      }
      *(_DWORD *)buf = 136446210;
      v93 = "on_begin_headers_callback";
      v63 = "%{public}s nghttp2 user data is NULL, not http2_transport, no backtrace";
    }
    else
    {
      v61 = __nwlog_obj();
      v62 = type[0];
      if (!os_log_type_enabled(v61, type[0]))
        goto LABEL_128;
      *(_DWORD *)buf = 136446210;
      v93 = "on_begin_headers_callback";
      v63 = "%{public}s nghttp2 user data is NULL, not http2_transport, backtrace limit exceeded";
    }
    _os_log_impl(&dword_182FBE000, v61, v62, v63, buf, 0xCu);
    goto LABEL_128;
  }
  if (gLogDatapath)
  {
    v64 = __nwlog_obj();
    if (os_log_type_enabled(v64, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446466;
      v93 = "on_begin_headers_callback";
      v94 = 2082;
      v95 = a3 + 205;
      _os_log_impl(&dword_182FBE000, v64, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s called", buf, 0x16u);
    }
  }
  v5 = *(unsigned __int8 *)(a2 + 12);
  if (v5 == 5)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v15 = gLogObj;
    if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      return 4294966775;
    *(_DWORD *)buf = 136446466;
    v93 = "on_begin_headers_callback";
    v94 = 2082;
    v95 = a3 + 205;
    v16 = "%{public}s %{public}s push promise frames currently not supported";
    v17 = v15;
    v18 = 22;
    goto LABEL_20;
  }
  if (v5 != 1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v19 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      v93 = "on_begin_headers_callback";
      v94 = 2082;
      v95 = a3 + 205;
      _os_log_impl(&dword_182FBE000, v19, OS_LOG_TYPE_ERROR, "%{public}s %{public}s returning callback failure with unknown error", buf, 0x16u);
    }
    return 4294966394;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v6 = gLogObj;
  if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
  {
    v7 = *(_DWORD *)(a2 + 8);
    *(_DWORD *)buf = 136446722;
    v93 = "on_begin_headers_callback";
    v94 = 2082;
    v95 = a3 + 205;
    v96 = 1024;
    *(_DWORD *)v97 = v7;
    _os_log_impl(&dword_182FBE000, v6, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s got header frame on stream %d", buf, 0x1Cu);
  }
  stream_node_from_id = nw_http2_transport_get_stream_node_from_id(a3, *(_DWORD *)(a2 + 8));
  if (!stream_node_from_id)
  {
    if (*(_QWORD *)(a3 + 104))
    {
      if (!*(_QWORD *)(a3 + 96))
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v45 = a3 + 205;
        *(_DWORD *)buf = 136446466;
        v93 = "on_begin_headers_callback";
        v94 = 2082;
        v95 = a3 + 205;
        v35 = (const char *)_os_log_send_and_compose_impl();
        type[0] = OS_LOG_TYPE_ERROR;
        v91 = 0;
        if (!__nwlog_fault(v35, type, &v91))
          goto LABEL_107;
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          v46 = __nwlog_obj();
          v47 = type[0];
          if (!os_log_type_enabled(v46, type[0]))
            goto LABEL_107;
          *(_DWORD *)buf = 136446466;
          v93 = "on_begin_headers_callback";
          v94 = 2082;
          v95 = v45;
          v39 = "%{public}s %{public}s http2_transport has no remote endpoint when new stream is being opened";
LABEL_105:
          v55 = v46;
          v56 = v47;
          v57 = 22;
          goto LABEL_106;
        }
        if (!v91)
        {
          v46 = __nwlog_obj();
          v47 = type[0];
          if (!os_log_type_enabled(v46, type[0]))
            goto LABEL_107;
          *(_DWORD *)buf = 136446466;
          v93 = "on_begin_headers_callback";
          v94 = 2082;
          v95 = v45;
          v39 = "%{public}s %{public}s http2_transport has no remote endpoint when new stream is being opened, backtrace limit exceeded";
          goto LABEL_105;
        }
        v49 = (char *)__nw_create_backtrace_string();
        v46 = __nwlog_obj();
        v47 = type[0];
        v50 = os_log_type_enabled(v46, type[0]);
        if (!v49)
        {
          if (!v50)
            goto LABEL_107;
          *(_DWORD *)buf = 136446466;
          v93 = "on_begin_headers_callback";
          v94 = 2082;
          v95 = v45;
          v39 = "%{public}s %{public}s http2_transport has no remote endpoint when new stream is being opened, no backtrace";
          goto LABEL_105;
        }
        if (v50)
        {
          *(_DWORD *)buf = 136446722;
          v93 = "on_begin_headers_callback";
          v94 = 2082;
          v95 = v45;
          v96 = 2082;
          *(_QWORD *)v97 = v49;
          v51 = "%{public}s %{public}s http2_transport has no remote endpoint when new stream is being opened, dumping ba"
                "cktrace:%{public}s";
LABEL_95:
          _os_log_impl(&dword_182FBE000, v46, v47, v51, buf, 0x20u);
        }
LABEL_96:
        free(v49);
        goto LABEL_107;
      }
      v20 = *(_DWORD *)(a2 + 8);
      if (gLogDatapath)
      {
        v68 = __nwlog_obj();
        if (os_log_type_enabled(v68, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136446466;
          v93 = "on_begin_headers_callback";
          v94 = 2082;
          v95 = a3 + 205;
          _os_log_impl(&dword_182FBE000, v68, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s detected new stream initiated from remote side of the connection, allocating new stream", buf, 0x16u);
        }
      }
      v21 = malloc_type_calloc(1uLL, 0x28uLL, 0xEAFB8F1AuLL);
      if (v21)
      {
        v22 = *(void **)(a3 + 88);
        if (v22)
          goto LABEL_29;
      }
      else
      {
        v69 = __nwlog_obj();
        os_log_type_enabled(v69, OS_LOG_TYPE_ERROR);
        *(_DWORD *)buf = 136446722;
        v93 = "strict_calloc";
        v94 = 2048;
        v95 = 1;
        v96 = 2048;
        *(_QWORD *)v97 = 40;
        v70 = (void *)_os_log_send_and_compose_impl();
        result = __nwlog_abort((uint64_t)v70);
        if ((_DWORD)result)
        {
          __break(1u);
          return result;
        }
        free(v70);
        v22 = *(void **)(a3 + 88);
        if (v22)
        {
LABEL_29:
          v23 = v22;
          v24 = -[NWConcrete_nw_parameters initWithParameters:stripConnected:shallowCopy:]((id *)[NWConcrete_nw_parameters alloc], v23, 0, 0);

          nw_http2_transport_stream_init((uint64_t)v21);
          v21[8] = v20;
          *((_BYTE *)v21 + 36) |= 8u;
          if (v20 > *(_DWORD *)(a3 + 200) && (*(_BYTE *)(a3 + 204) & 1) == 0)
            *(_DWORD *)(a3 + 200) = v20;
          if (!nw_http2_transport_add_to_id_table(a3, (uint64_t)v21, 0))
          {
            v53 = __nwlog_obj();
            if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136446466;
              v93 = "on_begin_headers_callback";
              v94 = 2082;
              v95 = a3 + 205;
              _os_log_impl(&dword_182FBE000, v53, OS_LOG_TYPE_ERROR, "%{public}s %{public}s failed to add new stream to the id based hash table", buf, 0x16u);
            }
            free(v21);
            if (v24)
              os_release((void *)v24);
            return 4294966775;
          }
          nw_parameters_set_server_mode((void *)v24, 1);
          *(_QWORD *)type = 0;
          v88 = type;
          v89 = 0x2000000000;
          v90 = 0;
          if (nw_protocol_http2_transport_identifier::onceToken != -1)
            dispatch_once(&nw_protocol_http2_transport_identifier::onceToken, &__block_literal_global_36847);
          v25 = MEMORY[0x1E0C809B0];
          v86[0] = MEMORY[0x1E0C809B0];
          v86[1] = 0x40000000;
          v86[2] = ___ZL25on_begin_headers_callbackP15nghttp2_sessionPK13nghttp2_framePv_block_invoke;
          v86[3] = &unk_1E14A0EC0;
          v86[4] = type;
          nw_protocol_parameters_iterate_stack((void *)v24, 4, &g_http2_transport_protocol_identifier, v86);
          if (!*((_QWORD *)v88 + 3))
          {
            if (nw_protocol_http2_transport_identifier::onceToken != -1)
              dispatch_once(&nw_protocol_http2_transport_identifier::onceToken, &__block_literal_global_36847);
            v85[0] = v25;
            v85[1] = 0x40000000;
            v85[2] = ___ZL25on_begin_headers_callbackP15nghttp2_sessionPK13nghttp2_framePv_block_invoke_2;
            v85[3] = &unk_1E14A0EE8;
            v85[4] = type;
            nw_protocol_parameters_iterate_stack((void *)v24, 3, &g_http2_transport_protocol_identifier, v85);
            if (!*((_QWORD *)v88 + 3))
            {
              if (nw_protocol_http2_transport_identifier::onceToken != -1)
                dispatch_once(&nw_protocol_http2_transport_identifier::onceToken, &__block_literal_global_36847);
              v84[0] = v25;
              v84[1] = 0x40000000;
              v84[2] = ___ZL25on_begin_headers_callbackP15nghttp2_sessionPK13nghttp2_framePv_block_invoke_3;
              v84[3] = &unk_1E14A0F10;
              v84[4] = type;
              nw_protocol_parameters_iterate_stack((void *)v24, 2, &g_http2_transport_protocol_identifier, v84);
            }
          }
          v26 = xpc_int64_create(v20);
          nw_parameters_set_protocol_value(*((void **)v88 + 3), "incomingStreamId", v26);
          if (v26)
            xpc_release(v26);
          if (gLogDatapath)
          {
            v80 = __nwlog_obj();
            if (os_log_type_enabled(v80, OS_LOG_TYPE_DEBUG))
            {
              v81 = *((_QWORD *)v88 + 3);
              *(_DWORD *)buf = 136446978;
              v93 = "on_begin_headers_callback";
              v94 = 2082;
              v95 = a3 + 205;
              v96 = 2048;
              *(_QWORD *)v97 = v24;
              *(_WORD *)&v97[8] = 2048;
              *(_QWORD *)&v97[10] = v81;
              _os_log_impl(&dword_182FBE000, v80, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s using parameters %p, protocol parameters %p on new incoming stream", buf, 0x2Au);
            }
          }
          v27 = v88;
          v28 = (void *)*((_QWORD *)v88 + 3);
          if (v28)
          {
            os_release(v28);
            v27 = v88;
            *((_QWORD *)v88 + 3) = 0;
          }
          *((_QWORD *)v27 + 3) = 0;
          v29 = *(_QWORD ***)(a3 + 104);
          if (v29 && (v30 = *v29) != 0 && *v30)
          {
            if (gLogDatapath)
            {
              v82 = __nwlog_obj();
              if (os_log_type_enabled(v82, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 136446722;
                v93 = "on_begin_headers_callback";
                v94 = 2082;
                v95 = a3 + 205;
                v96 = 1024;
                *(_DWORD *)v97 = v20;
                _os_log_impl(&dword_182FBE000, v82, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s calling listen handler for new stream %d", buf, 0x1Cu);
              }
            }
            v31 = (***(uint64_t (****)(_QWORD, _QWORD, _BOOL8))(a3 + 104))(*(_QWORD *)(a3 + 104), *(_QWORD *)(a3 + 96), v24);
            if (gLogDatapath)
            {
              v83 = __nwlog_obj();
              if (os_log_type_enabled(v83, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 136446722;
                v93 = "on_begin_headers_callback";
                v94 = 2082;
                v95 = a3 + 205;
                v96 = 1024;
                *(_DWORD *)v97 = v20;
                _os_log_impl(&dword_182FBE000, v83, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s called into listen handler for new stream %d", buf, 0x1Cu);
              }
            }
            if ((v31 & 1) == 0)
            {
              v32 = __nwlog_obj();
              if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136446722;
                v93 = "on_begin_headers_callback";
                v94 = 2082;
                v95 = a3 + 205;
                v96 = 1024;
                *(_DWORD *)v97 = v20;
                _os_log_impl(&dword_182FBE000, v32, OS_LOG_TYPE_ERROR, "%{public}s %{public}s listen handler didn't accept the new flow for stream id %d", buf, 0x1Cu);
              }
              nw_http2_transport_stream_close(a3, (uint64_t)v21);
            }
            if (!v24)
              goto LABEL_58;
          }
          else
          {
            v67 = __nwlog_obj();
            if (os_log_type_enabled(v67, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136446466;
              v93 = "on_begin_headers_callback";
              v94 = 2082;
              v95 = a3 + 205;
              _os_log_impl(&dword_182FBE000, v67, OS_LOG_TYPE_ERROR, "%{public}s %{public}s listen handler has no new_flow callback, ignoring incoming flow", buf, 0x16u);
            }
            nw_http2_transport_stream_close(a3, (uint64_t)v21);
            if (!v24)
              goto LABEL_58;
          }
          os_release((void *)v24);
LABEL_58:
          _Block_object_dispose(type, 8);
          return 0;
        }
      }
      __nwlog_obj();
      v71 = a3 + 205;
      *(_DWORD *)buf = 136446466;
      v93 = "on_begin_headers_callback";
      v94 = 2082;
      v95 = a3 + 205;
      v72 = (char *)_os_log_send_and_compose_impl();
      type[0] = OS_LOG_TYPE_ERROR;
      v91 = 0;
      if (__nwlog_fault(v72, type, &v91))
      {
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          v73 = __nwlog_obj();
          v74 = type[0];
          if (os_log_type_enabled(v73, type[0]))
          {
            *(_DWORD *)buf = 136446466;
            v93 = "on_begin_headers_callback";
            v94 = 2082;
            v95 = v71;
            v75 = "%{public}s %{public}s http2_transport->parameters is NULL when opening responder stream";
LABEL_151:
            _os_log_impl(&dword_182FBE000, v73, v74, v75, buf, 0x16u);
          }
        }
        else if (v91)
        {
          v76 = (char *)__nw_create_backtrace_string();
          v73 = __nwlog_obj();
          v74 = type[0];
          v77 = os_log_type_enabled(v73, type[0]);
          if (v76)
          {
            if (v77)
            {
              *(_DWORD *)buf = 136446722;
              v93 = "on_begin_headers_callback";
              v94 = 2082;
              v95 = v71;
              v96 = 2082;
              *(_QWORD *)v97 = v76;
              _os_log_impl(&dword_182FBE000, v73, v74, "%{public}s %{public}s http2_transport->parameters is NULL when opening responder stream, dumping backtrace:%{public}s", buf, 0x20u);
            }
            free(v76);
            goto LABEL_152;
          }
          if (v77)
          {
            *(_DWORD *)buf = 136446466;
            v93 = "on_begin_headers_callback";
            v94 = 2082;
            v95 = v71;
            v75 = "%{public}s %{public}s http2_transport->parameters is NULL when opening responder stream, no backtrace";
            goto LABEL_151;
          }
        }
        else
        {
          v73 = __nwlog_obj();
          v74 = type[0];
          if (os_log_type_enabled(v73, type[0]))
          {
            *(_DWORD *)buf = 136446466;
            v93 = "on_begin_headers_callback";
            v94 = 2082;
            v95 = v71;
            v75 = "%{public}s %{public}s http2_transport->parameters is NULL when opening responder stream, backtrace limit exceeded";
            goto LABEL_151;
          }
        }
      }
LABEL_152:
      if (v72)
        free(v72);
      if (!v21)
        return 4294966775;
      v59 = (char *)v21;
      goto LABEL_109;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v40 = gLogObj;
    if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      return 4294966775;
    v41 = *(_DWORD *)(a2 + 8);
    *(_DWORD *)buf = 136446722;
    v93 = "on_begin_headers_callback";
    v94 = 2082;
    v95 = a3 + 205;
    v96 = 1024;
    *(_DWORD *)v97 = v41;
    v16 = "%{public}s %{public}s http2_transport has no listen handler when new stream (%d) is being opened, closing";
    v17 = v40;
    v18 = 28;
LABEL_20:
    _os_log_impl(&dword_182FBE000, v17, OS_LOG_TYPE_ERROR, v16, buf, v18);
    return 4294966775;
  }
  v9 = stream_node_from_id;
  v10 = *(_QWORD *)(stream_node_from_id + 16);
  if (!v10)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v33 = a3 + 205;
    v34 = *(_DWORD *)(a2 + 8);
    *(_DWORD *)buf = 136446722;
    v93 = "on_begin_headers_callback";
    v94 = 2082;
    v95 = a3 + 205;
    v96 = 1024;
    *(_DWORD *)v97 = v34;
    v35 = (const char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    v91 = 0;
    if (!__nwlog_fault(v35, type, &v91))
      goto LABEL_107;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v36 = gLogObj;
      v37 = type[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, type[0]))
        goto LABEL_107;
      v38 = *(_DWORD *)(a2 + 8);
      *(_DWORD *)buf = 136446722;
      v93 = "on_begin_headers_callback";
      v94 = 2082;
      v95 = v33;
      v96 = 1024;
      *(_DWORD *)v97 = v38;
      v39 = "%{public}s %{public}s could not get stream (%d) from node";
    }
    else if (v91)
    {
      v42 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v36 = gLogObj;
      v37 = type[0];
      v43 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
      if (v42)
      {
        if (v43)
        {
          v44 = *(_DWORD *)(a2 + 8);
          *(_DWORD *)buf = 136446978;
          v93 = "on_begin_headers_callback";
          v94 = 2082;
          v95 = v33;
          v96 = 1024;
          *(_DWORD *)v97 = v44;
          *(_WORD *)&v97[4] = 2082;
          *(_QWORD *)&v97[6] = v42;
          _os_log_impl(&dword_182FBE000, v36, v37, "%{public}s %{public}s could not get stream (%d) from node, dumping backtrace:%{public}s", buf, 0x26u);
        }
        free(v42);
LABEL_107:
        if (v35)
        {
          v59 = (char *)v35;
LABEL_109:
          free(v59);
        }
        return 4294966775;
      }
      if (!v43)
        goto LABEL_107;
      v54 = *(_DWORD *)(a2 + 8);
      *(_DWORD *)buf = 136446722;
      v93 = "on_begin_headers_callback";
      v94 = 2082;
      v95 = v33;
      v96 = 1024;
      *(_DWORD *)v97 = v54;
      v39 = "%{public}s %{public}s could not get stream (%d) from node, no backtrace";
    }
    else
    {
      v36 = __nwlog_obj();
      v37 = type[0];
      if (!os_log_type_enabled(v36, type[0]))
        goto LABEL_107;
      v48 = *(_DWORD *)(a2 + 8);
      *(_DWORD *)buf = 136446722;
      v93 = "on_begin_headers_callback";
      v94 = 2082;
      v95 = v33;
      v96 = 1024;
      *(_DWORD *)v97 = v48;
      v39 = "%{public}s %{public}s could not get stream (%d) from node, backtrace limit exceeded";
    }
    v55 = v36;
    v56 = v37;
    v57 = 28;
LABEL_106:
    _os_log_impl(&dword_182FBE000, v55, v56, v39, buf, v57);
    goto LABEL_107;
  }
  if (*(_DWORD *)(v10 + 32) != 1 || (~*(unsigned __int8 *)(v10 + 36) & 0xA) != 0)
    return 0;
  if (gLogDatapath)
  {
    v78 = __nwlog_obj();
    if (os_log_type_enabled(v78, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446466;
      v93 = "on_begin_headers_callback";
      v94 = 2082;
      v95 = a3 + 205;
      _os_log_impl(&dword_182FBE000, v78, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s calling connect for initial responder stream upon receipt of headers from remote client", buf, 0x16u);
    }
  }
  v11 = *(_QWORD *)(v9 + 32);
  if (!v11)
  {
    __nwlog_obj();
    v52 = a3 + 205;
    *(_DWORD *)buf = 136446466;
    v93 = "on_begin_headers_callback";
    v94 = 2082;
    v95 = a3 + 205;
    v35 = (const char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    v91 = 0;
    if (!__nwlog_fault(v35, type, &v91))
      goto LABEL_107;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      v46 = __nwlog_obj();
      v47 = type[0];
      if (!os_log_type_enabled(v46, type[0]))
        goto LABEL_107;
      *(_DWORD *)buf = 136446466;
      v93 = "on_begin_headers_callback";
      v94 = 2082;
      v95 = v52;
      v39 = "%{public}s %{public}s no input handler yet attached to initial responder stream, closing stream 1";
      goto LABEL_105;
    }
    if (!v91)
    {
      v46 = __nwlog_obj();
      v47 = type[0];
      if (!os_log_type_enabled(v46, type[0]))
        goto LABEL_107;
      *(_DWORD *)buf = 136446466;
      v93 = "on_begin_headers_callback";
      v94 = 2082;
      v95 = v52;
      v39 = "%{public}s %{public}s no input handler yet attached to initial responder stream, closing stream 1, backtrace limit exceeded";
      goto LABEL_105;
    }
    v49 = (char *)__nw_create_backtrace_string();
    v46 = __nwlog_obj();
    v47 = type[0];
    v58 = os_log_type_enabled(v46, type[0]);
    if (!v49)
    {
      if (!v58)
        goto LABEL_107;
      *(_DWORD *)buf = 136446466;
      v93 = "on_begin_headers_callback";
      v94 = 2082;
      v95 = v52;
      v39 = "%{public}s %{public}s no input handler yet attached to initial responder stream, closing stream 1, no backtrace";
      goto LABEL_105;
    }
    if (v58)
    {
      *(_DWORD *)buf = 136446722;
      v93 = "on_begin_headers_callback";
      v94 = 2082;
      v95 = v52;
      v96 = 2082;
      *(_QWORD *)v97 = v49;
      v51 = "%{public}s %{public}s no input handler yet attached to initial responder stream, closing stream 1, dumping b"
            "acktrace:%{public}s";
      goto LABEL_95;
    }
    goto LABEL_96;
  }
  if (!nw_http2_transport_stream_connect(a3, v10, v11))
  {
    v12 = __nwlog_obj();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      v13 = *(_DWORD *)(v10 + 32);
      *(_DWORD *)buf = 136446978;
      v93 = "on_begin_headers_callback";
      v94 = 2082;
      v95 = a3 + 205;
      v96 = 1024;
      *(_DWORD *)v97 = v13;
      *(_WORD *)&v97[4] = 2048;
      *(_QWORD *)&v97[6] = v10;
      _os_log_impl(&dword_182FBE000, v12, OS_LOG_TYPE_ERROR, "%{public}s %{public}s nw_http2_transport_stream_connect failed for stream id %d (%p)", buf, 0x26u);
    }
  }
  if (!gLogDatapath)
    return 0;
  v79 = __nwlog_obj();
  result = os_log_type_enabled(v79, OS_LOG_TYPE_DEBUG);
  if ((_DWORD)result)
  {
    *(_DWORD *)buf = 136446466;
    v93 = "on_begin_headers_callback";
    v94 = 2082;
    v95 = a3 + 205;
    _os_log_impl(&dword_182FBE000, v79, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s connected initial responder stream", buf, 0x16u);
    return 0;
  }
  return result;
}

{
  int v5;
  uint64_t stream_node_from_id;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  int v10;
  const char *v11;
  NSObject *v12;
  uint32_t v13;
  NSObject *v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  void *v19;
  id v20;
  _BOOL8 v21;
  int v22;
  int v23;
  unsigned int v24;
  _QWORD **v25;
  _QWORD *v26;
  char v27;
  NSObject *v28;
  int v29;
  int v30;
  int v31;
  int v32;
  const char *v33;
  NSObject *v34;
  os_log_type_t v35;
  int v36;
  int v37;
  const char *v38;
  uint64_t v39;
  int v40;
  int v41;
  char *v42;
  _BOOL4 v43;
  int v44;
  int v45;
  int v46;
  NSObject *v47;
  os_log_type_t v48;
  int v49;
  const char *v50;
  int v51;
  char *v52;
  NSObject *v53;
  os_log_type_t v54;
  int v55;
  const char *v56;
  int v57;
  int v58;
  char *v59;
  _BOOL4 v60;
  int v61;
  NSObject *v62;
  int v63;
  int v64;
  int v65;
  int v66;
  void *v67;
  char *v68;
  _BOOL4 v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  char *v75;
  NSObject *v76;
  os_log_type_t v77;
  const char *v78;
  NSObject *v79;
  int v80;
  char *backtrace_string;
  _BOOL4 v82;
  NSObject *v83;
  int v84;
  int v85;
  NSObject *v86;
  int v87;
  int v88;
  NSObject *v89;
  void *v90;
  NSObject *v91;
  int v92;
  NSObject *v93;
  int v94;
  int v95;
  NSObject *v96;
  int v97;
  int v98;
  char v99;
  NSObject *v100;
  _BOOL4 v101;
  int v102;
  int v103;
  char v104;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v107;
  __int16 v108;
  uint64_t v109;
  __int16 v110;
  uint64_t v111;
  __int16 v112;
  int v113;
  __int16 v114;
  _QWORD v115[3];

  v115[2] = *MEMORY[0x1E0C80C00];
  if (!a3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v107 = "on_begin_headers_callback";
    v75 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v104 = 0;
    if (!__nwlog_fault(v75, &type, &v104))
      goto LABEL_164;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v76 = __nwlog_obj();
      v77 = type;
      if (!os_log_type_enabled(v76, type))
        goto LABEL_164;
      *(_DWORD *)buf = 136446210;
      v107 = "on_begin_headers_callback";
      v78 = "%{public}s nghttp2 user data is NULL, not http2";
    }
    else if (v104)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v76 = __nwlog_obj();
      v77 = type;
      v82 = os_log_type_enabled(v76, type);
      if (backtrace_string)
      {
        if (v82)
        {
          *(_DWORD *)buf = 136446466;
          v107 = "on_begin_headers_callback";
          v108 = 2082;
          v109 = (uint64_t)backtrace_string;
          _os_log_impl(&dword_182FBE000, v76, v77, "%{public}s nghttp2 user data is NULL, not http2, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_164;
      }
      if (!v82)
      {
LABEL_164:
        if (v75)
          free(v75);
        return 4294966394;
      }
      *(_DWORD *)buf = 136446210;
      v107 = "on_begin_headers_callback";
      v78 = "%{public}s nghttp2 user data is NULL, not http2, no backtrace";
    }
    else
    {
      v76 = __nwlog_obj();
      v77 = type;
      if (!os_log_type_enabled(v76, type))
        goto LABEL_164;
      *(_DWORD *)buf = 136446210;
      v107 = "on_begin_headers_callback";
      v78 = "%{public}s nghttp2 user data is NULL, not http2, backtrace limit exceeded";
    }
    _os_log_impl(&dword_182FBE000, v76, v77, v78, buf, 0xCu);
    goto LABEL_164;
  }
  if ((*(__int16 *)(a3 + 376) & 0x80000000) == 0 && gLogDatapath)
  {
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v79 = gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
    {
      v80 = *(_DWORD *)(a3 + 368);
      *(_DWORD *)buf = 136446978;
      v107 = "on_begin_headers_callback";
      v108 = 2082;
      v109 = a3 + 378;
      v110 = 2080;
      v111 = (uint64_t)" ";
      v112 = 1024;
      v113 = v80;
      _os_log_impl(&dword_182FBE000, v79, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> called", buf, 0x26u);
    }
  }
  v5 = *(unsigned __int8 *)(a2 + 12);
  if (v5 == 5)
  {
    if (*(__int16 *)(a3 + 376) < 0)
      return 4294966775;
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v9 = gconnectionLogObj;
    if (!os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
      return 4294966775;
    v10 = *(_DWORD *)(a3 + 368);
    *(_DWORD *)buf = 136446978;
    v107 = "on_begin_headers_callback";
    v108 = 2082;
    v109 = a3 + 378;
    v110 = 2080;
    v111 = (uint64_t)" ";
    v112 = 1024;
    v113 = v10;
    v11 = "%{public}s %{public}s%s<i%u> push promise frames currently not supported";
    v12 = v9;
    v13 = 38;
LABEL_16:
    _os_log_impl(&dword_182FBE000, v12, OS_LOG_TYPE_ERROR, v11, buf, v13);
    return 4294966775;
  }
  if (v5 != 1)
  {
    if ((*(__int16 *)(a3 + 376) & 0x80000000) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v14 = gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
      {
        v15 = *(_DWORD *)(a3 + 368);
        *(_DWORD *)buf = 136446978;
        v107 = "on_begin_headers_callback";
        v108 = 2082;
        v109 = a3 + 378;
        v110 = 2080;
        v111 = (uint64_t)" ";
        v112 = 1024;
        v113 = v15;
        _os_log_impl(&dword_182FBE000, v14, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u> returning callback failure with unknown error", buf, 0x26u);
      }
    }
    return 4294966394;
  }
  if ((*(__int16 *)(a3 + 376) & 0x80000000) == 0 && gLogDatapath)
  {
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v83 = gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
    {
      v84 = *(_DWORD *)(a3 + 368);
      v85 = *(_DWORD *)(a2 + 8);
      *(_DWORD *)buf = 136447234;
      v107 = "on_begin_headers_callback";
      v108 = 2082;
      v109 = a3 + 378;
      v110 = 2080;
      v111 = (uint64_t)" ";
      v112 = 1024;
      v113 = v84;
      v114 = 1024;
      LODWORD(v115[0]) = v85;
      _os_log_impl(&dword_182FBE000, v83, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> got header frame on stream %d", buf, 0x2Cu);
    }
  }
  stream_node_from_id = nw_http2_get_stream_node_from_id(a3, *(_DWORD *)(a2 + 8));
  if (stream_node_from_id)
  {
    v7 = stream_node_from_id;
    nw_http_connection_metadata_increment_inbound_message_count(*(void **)(a3 + 256));
    if (*(_QWORD *)(v7 + 16))
      return 0;
    if (*(__int16 *)(a3 + 376) < 0)
      return 4294966775;
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v31 = *(_DWORD *)(a3 + 368);
    v32 = *(_DWORD *)(a2 + 8);
    *(_DWORD *)buf = 136447234;
    v107 = "on_begin_headers_callback";
    v108 = 2082;
    v109 = a3 + 378;
    v110 = 2080;
    v111 = (uint64_t)" ";
    v112 = 1024;
    v113 = v31;
    v114 = 1024;
    LODWORD(v115[0]) = v32;
    v33 = (const char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v104 = 0;
    if (__nwlog_fault(v33, &type, &v104))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v34 = gconnectionLogObj;
        v35 = type;
        if (os_log_type_enabled((os_log_t)gconnectionLogObj, type))
        {
          v36 = *(_DWORD *)(a3 + 368);
          v37 = *(_DWORD *)(a2 + 8);
          *(_DWORD *)buf = 136447234;
          v107 = "on_begin_headers_callback";
          v108 = 2082;
          v109 = a3 + 378;
          v110 = 2080;
          v111 = (uint64_t)" ";
          v112 = 1024;
          v113 = v36;
          v114 = 1024;
          LODWORD(v115[0]) = v37;
          v38 = "%{public}s %{public}s%s<i%u> could not get stream (%d) from node";
LABEL_110:
          _os_log_impl(&dword_182FBE000, v34, v35, v38, buf, 0x2Cu);
        }
      }
      else if (v104)
      {
        v42 = (char *)__nw_create_backtrace_string();
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v34 = gconnectionLogObj;
        v35 = type;
        v43 = os_log_type_enabled((os_log_t)gconnectionLogObj, type);
        if (!v42)
        {
          if (!v43)
            goto LABEL_111;
          v65 = *(_DWORD *)(a3 + 368);
          v66 = *(_DWORD *)(a2 + 8);
          *(_DWORD *)buf = 136447234;
          v107 = "on_begin_headers_callback";
          v108 = 2082;
          v109 = a3 + 378;
          v110 = 2080;
          v111 = (uint64_t)" ";
          v112 = 1024;
          v113 = v65;
          v114 = 1024;
          LODWORD(v115[0]) = v66;
          v38 = "%{public}s %{public}s%s<i%u> could not get stream (%d) from node, no backtrace";
          goto LABEL_110;
        }
        if (v43)
        {
          v44 = *(_DWORD *)(a3 + 368);
          v45 = *(_DWORD *)(a2 + 8);
          *(_DWORD *)buf = 136447490;
          v107 = "on_begin_headers_callback";
          v108 = 2082;
          v109 = a3 + 378;
          v110 = 2080;
          v111 = (uint64_t)" ";
          v112 = 1024;
          v113 = v44;
          v114 = 1024;
          LODWORD(v115[0]) = v45;
          WORD2(v115[0]) = 2082;
          *(_QWORD *)((char *)v115 + 6) = v42;
          _os_log_impl(&dword_182FBE000, v34, v35, "%{public}s %{public}s%s<i%u> could not get stream (%d) from node, dumping backtrace:%{public}s", buf, 0x36u);
        }
        free(v42);
      }
      else
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v34 = gconnectionLogObj;
        v35 = type;
        if (os_log_type_enabled((os_log_t)gconnectionLogObj, type))
        {
          v57 = *(_DWORD *)(a3 + 368);
          v58 = *(_DWORD *)(a2 + 8);
          *(_DWORD *)buf = 136447234;
          v107 = "on_begin_headers_callback";
          v108 = 2082;
          v109 = a3 + 378;
          v110 = 2080;
          v111 = (uint64_t)" ";
          v112 = 1024;
          v113 = v57;
          v114 = 1024;
          LODWORD(v115[0]) = v58;
          v38 = "%{public}s %{public}s%s<i%u> could not get stream (%d) from node, backtrace limit exceeded";
          goto LABEL_110;
        }
      }
    }
LABEL_111:
    if (v33)
    {
      v67 = (void *)v33;
LABEL_140:
      free(v67);
    }
    return 4294966775;
  }
  if (!*(_QWORD *)(a3 + 144))
  {
    if (*(__int16 *)(a3 + 376) < 0)
      return 4294966775;
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v39 = gconnectionLogObj;
    if (!os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
      return 4294966775;
    v40 = *(_DWORD *)(a3 + 368);
    v41 = *(_DWORD *)(a2 + 8);
    *(_DWORD *)buf = 136447234;
    v107 = "on_begin_headers_callback";
    v108 = 2082;
    v109 = a3 + 378;
    v110 = 2080;
    v111 = (uint64_t)" ";
    v112 = 1024;
    v113 = v40;
    v114 = 1024;
    LODWORD(v115[0]) = v41;
    v11 = "%{public}s %{public}s%s<i%u> http2 has no listen handler when new stream (%d) is being opened, closing";
    v12 = v39;
    v13 = 44;
    goto LABEL_16;
  }
  v16 = *(__int16 *)(a3 + 376);
  if (!*(_QWORD *)(a3 + 112))
  {
    if (v16 < 0)
      return 4294966775;
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v46 = *(_DWORD *)(a3 + 368);
    *(_DWORD *)buf = 136446978;
    v107 = "on_begin_headers_callback";
    v108 = 2082;
    v109 = a3 + 378;
    v110 = 2080;
    v111 = (uint64_t)" ";
    v112 = 1024;
    v113 = v46;
    v18 = _os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v104 = 0;
    if (!__nwlog_fault((const char *)v18, &type, &v104))
      goto LABEL_127;
    if (type == OS_LOG_TYPE_FAULT)
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v47 = gconnectionLogObj;
      v48 = type;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, type))
      {
        v49 = *(_DWORD *)(a3 + 368);
        *(_DWORD *)buf = 136446978;
        v107 = "on_begin_headers_callback";
        v108 = 2082;
        v109 = a3 + 378;
        v110 = 2080;
        v111 = (uint64_t)" ";
        v112 = 1024;
        v113 = v49;
        v50 = "%{public}s %{public}s%s<i%u> http2 has no remote endpoint when new stream is being opened";
LABEL_126:
        _os_log_impl(&dword_182FBE000, v47, v48, v50, buf, 0x26u);
      }
    }
    else if (v104)
    {
      v59 = (char *)__nw_create_backtrace_string();
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v47 = gconnectionLogObj;
      v48 = type;
      v60 = os_log_type_enabled((os_log_t)gconnectionLogObj, type);
      if (!v59)
      {
        if (!v60)
          goto LABEL_127;
        v72 = *(_DWORD *)(a3 + 368);
        *(_DWORD *)buf = 136446978;
        v107 = "on_begin_headers_callback";
        v108 = 2082;
        v109 = a3 + 378;
        v110 = 2080;
        v111 = (uint64_t)" ";
        v112 = 1024;
        v113 = v72;
        v50 = "%{public}s %{public}s%s<i%u> http2 has no remote endpoint when new stream is being opened, no backtrace";
        goto LABEL_126;
      }
      if (v60)
      {
        v61 = *(_DWORD *)(a3 + 368);
        *(_DWORD *)buf = 136447234;
        v107 = "on_begin_headers_callback";
        v108 = 2082;
        v109 = a3 + 378;
        v110 = 2080;
        v111 = (uint64_t)" ";
        v112 = 1024;
        v113 = v61;
        v114 = 2082;
        v115[0] = v59;
        _os_log_impl(&dword_182FBE000, v47, v48, "%{public}s %{public}s%s<i%u> http2 has no remote endpoint when new stream is being opened, dumping backtrace:%{public}s", buf, 0x30u);
      }
      free(v59);
    }
    else
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v47 = gconnectionLogObj;
      v48 = type;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, type))
      {
        v71 = *(_DWORD *)(a3 + 368);
        *(_DWORD *)buf = 136446978;
        v107 = "on_begin_headers_callback";
        v108 = 2082;
        v109 = a3 + 378;
        v110 = 2080;
        v111 = (uint64_t)" ";
        v112 = 1024;
        v113 = v71;
        v50 = "%{public}s %{public}s%s<i%u> http2 has no remote endpoint when new stream is being opened, backtrace limit exceeded";
        goto LABEL_126;
      }
    }
LABEL_127:
    if (!v18)
      return 4294966775;
    goto LABEL_139;
  }
  v17 = *(_DWORD *)(a2 + 8);
  if ((v16 & 0x80000000) == 0 && gLogDatapath)
  {
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v91 = gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
    {
      v92 = *(_DWORD *)(a3 + 368);
      *(_DWORD *)buf = 136446978;
      v107 = "on_begin_headers_callback";
      v108 = 2082;
      v109 = a3 + 378;
      v110 = 2080;
      v111 = (uint64_t)" ";
      v112 = 1024;
      v113 = v92;
      _os_log_impl(&dword_182FBE000, v91, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> detected new stream initiated from remote side of the connection, allocating new stream", buf, 0x26u);
    }
  }
  v18 = (uint64_t)malloc_type_calloc(1uLL, 0x118uLL, 0xEAFB8F1AuLL);
  if (!v18)
  {
    v89 = __nwlog_obj();
    os_log_type_enabled(v89, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446722;
    v107 = "strict_calloc";
    v108 = 2048;
    v109 = 1;
    v110 = 2048;
    v111 = 280;
    v90 = (void *)_os_log_send_and_compose_impl();
    result = __nwlog_abort((uint64_t)v90);
    if ((_DWORD)result)
    {
      __break(1u);
      return result;
    }
    free(v90);
  }
  *(_QWORD *)(v18 + 272) = 0;
  *(_OWORD *)(v18 + 240) = 0u;
  *(_OWORD *)(v18 + 256) = 0u;
  *(_OWORD *)(v18 + 208) = 0u;
  *(_OWORD *)(v18 + 224) = 0u;
  *(_OWORD *)(v18 + 176) = 0u;
  *(_OWORD *)(v18 + 192) = 0u;
  *(_OWORD *)(v18 + 144) = 0u;
  *(_OWORD *)(v18 + 160) = 0u;
  *(_OWORD *)(v18 + 112) = 0u;
  *(_OWORD *)(v18 + 128) = 0u;
  *(_OWORD *)(v18 + 80) = 0u;
  *(_OWORD *)(v18 + 96) = 0u;
  *(_OWORD *)(v18 + 48) = 0u;
  *(_OWORD *)(v18 + 64) = 0u;
  *(_OWORD *)(v18 + 16) = 0u;
  *(_OWORD *)(v18 + 32) = 0u;
  *(_OWORD *)v18 = 0u;
  v19 = *(void **)(a3 + 104);
  if (!v19)
  {
    if (*(__int16 *)(a3 + 376) < 0)
    {
LABEL_138:
      std::destroy_at[abi:nn180100]<http2_stream,0>(v18);
LABEL_139:
      v67 = (void *)v18;
      goto LABEL_140;
    }
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v51 = *(_DWORD *)(a3 + 368);
    *(_DWORD *)buf = 136446978;
    v107 = "on_begin_headers_callback";
    v108 = 2082;
    v109 = a3 + 378;
    v110 = 2080;
    v111 = (uint64_t)" ";
    v112 = 1024;
    v113 = v51;
    v52 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v104 = 0;
    if (__nwlog_fault(v52, &type, &v104))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v53 = gconnectionLogObj;
        v54 = type;
        if (!os_log_type_enabled((os_log_t)gconnectionLogObj, type))
          goto LABEL_136;
        v55 = *(_DWORD *)(a3 + 368);
        *(_DWORD *)buf = 136446978;
        v107 = "on_begin_headers_callback";
        v108 = 2082;
        v109 = a3 + 378;
        v110 = 2080;
        v111 = (uint64_t)" ";
        v112 = 1024;
        v113 = v55;
        v56 = "%{public}s %{public}s%s<i%u> http2->parameters is NULL when opening responder stream";
        goto LABEL_135;
      }
      if (!v104)
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v53 = gconnectionLogObj;
        v54 = type;
        if (!os_log_type_enabled((os_log_t)gconnectionLogObj, type))
          goto LABEL_136;
        v73 = *(_DWORD *)(a3 + 368);
        *(_DWORD *)buf = 136446978;
        v107 = "on_begin_headers_callback";
        v108 = 2082;
        v109 = a3 + 378;
        v110 = 2080;
        v111 = (uint64_t)" ";
        v112 = 1024;
        v113 = v73;
        v56 = "%{public}s %{public}s%s<i%u> http2->parameters is NULL when opening responder stream, backtrace limit exceeded";
        goto LABEL_135;
      }
      v68 = (char *)__nw_create_backtrace_string();
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v53 = gconnectionLogObj;
      v54 = type;
      v69 = os_log_type_enabled((os_log_t)gconnectionLogObj, type);
      if (v68)
      {
        if (v69)
        {
          v70 = *(_DWORD *)(a3 + 368);
          *(_DWORD *)buf = 136447234;
          v107 = "on_begin_headers_callback";
          v108 = 2082;
          v109 = a3 + 378;
          v110 = 2080;
          v111 = (uint64_t)" ";
          v112 = 1024;
          v113 = v70;
          v114 = 2082;
          v115[0] = v68;
          _os_log_impl(&dword_182FBE000, v53, v54, "%{public}s %{public}s%s<i%u> http2->parameters is NULL when opening responder stream, dumping backtrace:%{public}s", buf, 0x30u);
        }
        free(v68);
        goto LABEL_136;
      }
      if (v69)
      {
        v74 = *(_DWORD *)(a3 + 368);
        *(_DWORD *)buf = 136446978;
        v107 = "on_begin_headers_callback";
        v108 = 2082;
        v109 = a3 + 378;
        v110 = 2080;
        v111 = (uint64_t)" ";
        v112 = 1024;
        v113 = v74;
        v56 = "%{public}s %{public}s%s<i%u> http2->parameters is NULL when opening responder stream, no backtrace";
LABEL_135:
        _os_log_impl(&dword_182FBE000, v53, v54, v56, buf, 0x26u);
      }
    }
LABEL_136:
    if (v52)
      free(v52);
    goto LABEL_138;
  }
  v20 = v19;
  v21 = -[NWConcrete_nw_parameters initWithParameters:stripConnected:shallowCopy:]((id *)[NWConcrete_nw_parameters alloc], v20, 0, 0);

  nw_http2_stream_init(v18);
  v22 = *(unsigned __int16 *)(v18 + 188);
  *(_BYTE *)(v18 + 88) = (*(_WORD *)(a3 + 376) & 0x80) != 0;
  *(_DWORD *)(v18 + 176) = v17;
  v23 = v22 | (*(unsigned __int8 *)(v18 + 190) << 16) | 0x80;
  *(_WORD *)(v18 + 188) = v22 | 0x80;
  v24 = (16 * *(unsigned __int16 *)(a3 + 376)) & 0x80000 | v23 & 0xFFF7FFFF;
  *(_WORD *)(v18 + 188) = v23;
  *(_BYTE *)(v18 + 190) = BYTE2(v24);
  *(_DWORD *)(v18 + 180) = *(_DWORD *)(a3 + 368);
  if (v17 > *(_DWORD *)(a3 + 364) && (*(_WORD *)(a3 + 376) & 1) == 0)
    *(_DWORD *)(a3 + 364) = v17;
  if (!nw_http2_add_to_id_table(a3, v18, 0))
  {
    if (((*(unsigned __int16 *)(v18 + 188) | (*(unsigned __int8 *)(v18 + 190) << 16)) & 0x80000) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v62 = gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
      {
        v64 = *(_DWORD *)(v18 + 176);
        v63 = *(_DWORD *)(v18 + 180);
        *(_DWORD *)buf = 136447234;
        v107 = "on_begin_headers_callback";
        v108 = 2082;
        v109 = v18 + 191;
        v110 = 2080;
        v111 = (uint64_t)" ";
        v112 = 1024;
        v113 = v63;
        v114 = 1024;
        LODWORD(v115[0]) = v64;
        _os_log_impl(&dword_182FBE000, v62, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u:s%d> failed to add new stream to the id based hash table", buf, 0x2Cu);
      }
    }
    std::destroy_at[abi:nn180100]<http2_stream,0>(v18);
    free((void *)v18);
    if (v21)
      os_release((void *)v21);
    return 4294966775;
  }
  nw_parameters_set_server_mode((void *)v21, 1);
  if (((*(unsigned __int16 *)(v18 + 188) | (*(unsigned __int8 *)(v18 + 190) << 16)) & 0x80000) == 0 && gLogDatapath)
  {
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v93 = gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
    {
      v95 = *(_DWORD *)(v18 + 176);
      v94 = *(_DWORD *)(v18 + 180);
      *(_DWORD *)buf = 136447490;
      v107 = "on_begin_headers_callback";
      v108 = 2082;
      v109 = v18 + 191;
      v110 = 2080;
      v111 = (uint64_t)" ";
      v112 = 1024;
      v113 = v94;
      v114 = 1024;
      LODWORD(v115[0]) = v95;
      WORD2(v115[0]) = 2048;
      *(_QWORD *)((char *)v115 + 6) = v21;
      _os_log_impl(&dword_182FBE000, v93, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%d> using parameters %p on new incoming stream", buf, 0x36u);
    }
  }
  v25 = *(_QWORD ***)(a3 + 144);
  if (v25 && (v26 = *v25) != 0 && *v26)
  {
    if (((*(unsigned __int16 *)(v18 + 188) | (*(unsigned __int8 *)(v18 + 190) << 16)) & 0x80000) == 0 && gLogDatapath)
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v96 = gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
      {
        v98 = *(_DWORD *)(v18 + 176);
        v97 = *(_DWORD *)(v18 + 180);
        *(_DWORD *)buf = 136447490;
        v107 = "on_begin_headers_callback";
        v108 = 2082;
        v109 = v18 + 191;
        v110 = 2080;
        v111 = (uint64_t)" ";
        v112 = 1024;
        v113 = v97;
        v114 = 1024;
        LODWORD(v115[0]) = v98;
        WORD2(v115[0]) = 1024;
        *(_DWORD *)((char *)v115 + 6) = v17;
        _os_log_impl(&dword_182FBE000, v96, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%d> calling listen handler for new stream %d", buf, 0x32u);
      }
    }
    *(_DWORD *)(a3 + 360) = v17;
    v27 = (***(uint64_t (****)(_QWORD, _QWORD, _BOOL8))(a3 + 144))(*(_QWORD *)(a3 + 144), *(_QWORD *)(a3 + 112), v21);
    *(_DWORD *)(a3 + 360) = -1;
    if (((*(unsigned __int16 *)(v18 + 188) | (*(unsigned __int8 *)(v18 + 190) << 16)) & 0x80000) == 0 && gLogDatapath)
    {
      v99 = v27;
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v100 = gconnectionLogObj;
      v101 = os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG);
      v27 = v99;
      if (v101)
      {
        v103 = *(_DWORD *)(v18 + 176);
        v102 = *(_DWORD *)(v18 + 180);
        *(_DWORD *)buf = 136447490;
        v107 = "on_begin_headers_callback";
        v108 = 2082;
        v109 = v18 + 191;
        v110 = 2080;
        v111 = (uint64_t)" ";
        v112 = 1024;
        v113 = v102;
        v114 = 1024;
        LODWORD(v115[0]) = v103;
        WORD2(v115[0]) = 1024;
        *(_DWORD *)((char *)v115 + 6) = v17;
        _os_log_impl(&dword_182FBE000, v100, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%d> called into listen handler for new stream %d", buf, 0x32u);
        v27 = v99;
      }
    }
    if ((v27 & 1) == 0)
    {
      if (((*(unsigned __int16 *)(v18 + 188) | (*(unsigned __int8 *)(v18 + 190) << 16)) & 0x80000) == 0)
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v28 = gconnectionLogObj;
        if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
        {
          v30 = *(_DWORD *)(v18 + 176);
          v29 = *(_DWORD *)(v18 + 180);
          *(_DWORD *)buf = 136447490;
          v107 = "on_begin_headers_callback";
          v108 = 2082;
          v109 = v18 + 191;
          v110 = 2080;
          v111 = (uint64_t)" ";
          v112 = 1024;
          v113 = v29;
          v114 = 1024;
          LODWORD(v115[0]) = v30;
          WORD2(v115[0]) = 1024;
          *(_DWORD *)((char *)v115 + 6) = v17;
          _os_log_impl(&dword_182FBE000, v28, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u:s%d> listen handler didn't accept the new flow for stream id %d", buf, 0x32u);
        }
      }
      nw_http2_stream_close(a3, v18);
    }
    if (!v21)
      return 0;
  }
  else
  {
    if (((*(unsigned __int16 *)(v18 + 188) | (*(unsigned __int8 *)(v18 + 190) << 16)) & 0x80000) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v86 = gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
      {
        v88 = *(_DWORD *)(v18 + 176);
        v87 = *(_DWORD *)(v18 + 180);
        *(_DWORD *)buf = 136447234;
        v107 = "on_begin_headers_callback";
        v108 = 2082;
        v109 = v18 + 191;
        v110 = 2080;
        v111 = (uint64_t)" ";
        v112 = 1024;
        v113 = v87;
        v114 = 1024;
        LODWORD(v115[0]) = v88;
        _os_log_impl(&dword_182FBE000, v86, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u:s%d> listen handler has no new_flow callback, ignoring incoming flow", buf, 0x2Cu);
      }
    }
    nw_http2_stream_close(a3, v18);
    if (!v21)
      return 0;
  }
  os_release((void *)v21);
  return 0;
}

void sub_1836FF91C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t on_stream_close_callback(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t stream_node_from_id;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  const char *v14;
  NSObject *v15;
  uint64_t result;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  NSObject *v20;
  int v21;
  NSObject *v22;
  char *v23;
  _BOOL4 v24;
  char *backtrace_string;
  _BOOL4 v26;
  const char *v27;
  NSObject *v28;
  os_log_type_t v29;
  uint32_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint32_t v33;
  NSObject *v34;
  NSObject *v35;
  os_log_type_t v36;
  _BOOL4 v37;
  NSObject *v38;
  int v39;
  char v40;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v43;
  __int16 v44;
  char *v45;
  __int16 v46;
  char *v47;
  __int16 v48;
  char *v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  if (gLogDatapath)
  {
    v34 = __nwlog_obj();
    if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446466;
      v43 = "on_stream_close_callback";
      v44 = 1024;
      LODWORD(v45) = a2;
      _os_log_impl(&dword_182FBE000, v34, OS_LOG_TYPE_DEBUG, "%{public}s called for stream %d", buf, 0x12u);
    }
  }
  if (!a4)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v43 = "on_stream_close_callback";
    v11 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v40 = 0;
    if (!__nwlog_fault(v11, &type, &v40))
      goto LABEL_50;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v35 = __nwlog_obj();
      v36 = type;
      if (!os_log_type_enabled(v35, type))
        goto LABEL_50;
      *(_DWORD *)buf = 136446210;
      v43 = "on_stream_close_callback";
      v14 = "%{public}s nghttp2 user data is NULL, not http2_transport";
    }
    else if (v40)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v35 = __nwlog_obj();
      v36 = type;
      v37 = os_log_type_enabled(v35, type);
      if (backtrace_string)
      {
        if (!v37)
          goto LABEL_38;
        *(_DWORD *)buf = 136446466;
        v43 = "on_stream_close_callback";
        v44 = 2082;
        v45 = backtrace_string;
        v27 = "%{public}s nghttp2 user data is NULL, not http2_transport, dumping backtrace:%{public}s";
        v28 = v35;
        v29 = v36;
        v30 = 22;
        goto LABEL_37;
      }
      if (!v37)
        goto LABEL_50;
      *(_DWORD *)buf = 136446210;
      v43 = "on_stream_close_callback";
      v14 = "%{public}s nghttp2 user data is NULL, not http2_transport, no backtrace";
    }
    else
    {
      v35 = __nwlog_obj();
      v36 = type;
      if (!os_log_type_enabled(v35, type))
        goto LABEL_50;
      *(_DWORD *)buf = 136446210;
      v43 = "on_stream_close_callback";
      v14 = "%{public}s nghttp2 user data is NULL, not http2_transport, backtrace limit exceeded";
    }
    v31 = v35;
    v32 = v36;
    v33 = 12;
    goto LABEL_49;
  }
  stream_node_from_id = nw_http2_transport_get_stream_node_from_id(a4, a2);
  if (!stream_node_from_id)
  {
    if (gLogDatapath)
    {
      v15 = __nwlog_obj();
      result = os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG);
      if (!(_DWORD)result)
        return result;
      *(_DWORD *)buf = 136446466;
      v43 = "on_stream_close_callback";
      v44 = 2082;
      v45 = (char *)(a4 + 205);
      _os_log_impl(&dword_182FBE000, v15, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s called for stream that is not in id based table, ignoring", buf, 0x16u);
    }
    return 0;
  }
  v7 = (char *)stream_node_from_id;
  v8 = *(_QWORD *)(stream_node_from_id + 16);
  if (!v8)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v17 = a4 + 205;
    *(_DWORD *)buf = 136446722;
    v43 = "on_stream_close_callback";
    v44 = 2082;
    v45 = (char *)(a4 + 205);
    v46 = 2048;
    v47 = v7;
    v11 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v40 = 0;
    if (!__nwlog_fault(v11, &type, &v40))
      goto LABEL_50;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v18 = gLogObj;
      v19 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_50;
      *(_DWORD *)buf = 136446722;
      v43 = "on_stream_close_callback";
      v44 = 2082;
      v45 = (char *)v17;
      v46 = 2048;
      v47 = v7;
      v14 = "%{public}s %{public}s no stream found in id hash node %p";
    }
    else if (v40)
    {
      v23 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v18 = gLogObj;
      v19 = type;
      v24 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (v23)
      {
        if (v24)
        {
          *(_DWORD *)buf = 136446978;
          v43 = "on_stream_close_callback";
          v44 = 2082;
          v45 = (char *)v17;
          v46 = 2048;
          v47 = v7;
          v48 = 2082;
          v49 = v23;
          _os_log_impl(&dword_182FBE000, v18, v19, "%{public}s %{public}s no stream found in id hash node %p, dumping backtrace:%{public}s", buf, 0x2Au);
        }
        free(v23);
        goto LABEL_50;
      }
      if (!v24)
        goto LABEL_50;
      *(_DWORD *)buf = 136446722;
      v43 = "on_stream_close_callback";
      v44 = 2082;
      v45 = (char *)v17;
      v46 = 2048;
      v47 = v7;
      v14 = "%{public}s %{public}s no stream found in id hash node %p, no backtrace";
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v18 = gLogObj;
      v19 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_50;
      *(_DWORD *)buf = 136446722;
      v43 = "on_stream_close_callback";
      v44 = 2082;
      v45 = (char *)v17;
      v46 = 2048;
      v47 = v7;
      v14 = "%{public}s %{public}s no stream found in id hash node %p, backtrace limit exceeded";
    }
    v31 = v18;
    v32 = v19;
    v33 = 32;
LABEL_49:
    _os_log_impl(&dword_182FBE000, v31, v32, v14, buf, v33);
    goto LABEL_50;
  }
  v9 = *(_QWORD *)(stream_node_from_id + 32);
  if (!v9)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v20 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
    {
      v21 = *(_DWORD *)(v8 + 32);
      *(_DWORD *)buf = 136446722;
      v43 = "on_stream_close_callback";
      v44 = 2082;
      v45 = (char *)(a4 + 205);
      v46 = 1024;
      LODWORD(v47) = v21;
      _os_log_impl(&dword_182FBE000, v20, OS_LOG_TYPE_INFO, "%{public}s %{public}s closing stream %d that has no input handler", buf, 0x1Cu);
    }
    goto LABEL_20;
  }
  if (*(_QWORD *)(v9 + 24))
  {
LABEL_20:
    if ((*(_BYTE *)(v8 + 36) & 1) != 0)
    {
      if (gLogDatapath)
      {
        v38 = __nwlog_obj();
        if (os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG))
        {
          v39 = *(_DWORD *)(v8 + 32);
          *(_DWORD *)buf = 136446722;
          v43 = "on_stream_close_callback";
          v44 = 2082;
          v45 = (char *)(a4 + 205);
          v46 = 1024;
          LODWORD(v47) = v39;
          _os_log_impl(&dword_182FBE000, v38, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s closing stream %d", buf, 0x1Cu);
        }
      }
      *(_BYTE *)(v8 + 36) &= ~1u;
      nw_http2_transport_stream_close(a4, v8);
    }
    else if (gLogDatapath)
    {
      v22 = __nwlog_obj();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446466;
        v43 = "on_stream_close_callback";
        v44 = 2082;
        v45 = (char *)(a4 + 205);
        _os_log_impl(&dword_182FBE000, v22, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s not closing already closed stream", buf, 0x16u);
      }
    }
    nw_http2_transport_protocol_close(a4, v9);
    return 0;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v10 = a4 + 205;
  *(_DWORD *)buf = 136446466;
  v43 = "on_stream_close_callback";
  v44 = 2082;
  v45 = (char *)(a4 + 205);
  v11 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v40 = 0;
  if (!__nwlog_fault(v11, &type, &v40))
    goto LABEL_50;
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v12 = gLogObj;
    v13 = type;
    if (os_log_type_enabled((os_log_t)gLogObj, type))
    {
      *(_DWORD *)buf = 136446466;
      v43 = "on_stream_close_callback";
      v44 = 2082;
      v45 = (char *)v10;
      v14 = "%{public}s %{public}s protocol has null callbacks";
LABEL_48:
      v31 = v12;
      v32 = v13;
      v33 = 22;
      goto LABEL_49;
    }
    goto LABEL_50;
  }
  if (v40)
  {
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v12 = gLogObj;
    v13 = type;
    v26 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (v26)
      {
        *(_DWORD *)buf = 136446466;
        v43 = "on_stream_close_callback";
        v44 = 2082;
        v45 = (char *)v10;
        v14 = "%{public}s %{public}s protocol has null callbacks, no backtrace";
        goto LABEL_48;
      }
      goto LABEL_50;
    }
    if (!v26)
    {
LABEL_38:
      free(backtrace_string);
      goto LABEL_50;
    }
    *(_DWORD *)buf = 136446722;
    v43 = "on_stream_close_callback";
    v44 = 2082;
    v45 = (char *)v10;
    v46 = 2082;
    v47 = backtrace_string;
    v27 = "%{public}s %{public}s protocol has null callbacks, dumping backtrace:%{public}s";
    v28 = v12;
    v29 = v13;
    v30 = 32;
LABEL_37:
    _os_log_impl(&dword_182FBE000, v28, v29, v27, buf, v30);
    goto LABEL_38;
  }
  v12 = __nwlog_obj();
  v13 = type;
  if (os_log_type_enabled(v12, type))
  {
    *(_DWORD *)buf = 136446466;
    v43 = "on_stream_close_callback";
    v44 = 2082;
    v45 = (char *)v10;
    v14 = "%{public}s %{public}s protocol has null callbacks, backtrace limit exceeded";
    goto LABEL_48;
  }
LABEL_50:
  if (v11)
    free(v11);
  return 4294966394;
}

{
  uint64_t stream_from_id;
  uint64_t v7;
  int v8;
  int v9;
  const char *v10;
  NSObject *v11;
  os_log_type_t v12;
  int v13;
  int v14;
  const char *v15;
  NSObject *v16;
  uint64_t result;
  int v18;
  NSObject *v19;
  int v20;
  int v21;
  int v22;
  NSObject *v23;
  int v24;
  int v25;
  NSObject *v26;
  int v27;
  uint64_t v28;
  char *v29;
  _BOOL4 v30;
  int v31;
  int v32;
  uint64_t v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  char *v40;
  NSObject *v41;
  const char *v42;
  NSObject *v43;
  os_log_type_t v44;
  const char *v45;
  char *backtrace_string;
  _BOOL4 v47;
  NSObject *v48;
  int v49;
  int v50;
  char v51;
  os_log_type_t v52[8];
  os_log_type_t type;
  uint8_t buf[4];
  const char *v55;
  __int16 v56;
  char *v57;
  __int16 v58;
  const char *v59;
  __int16 v60;
  int v61;
  __int16 v62;
  _BYTE v63[18];
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  if (gLogDatapath)
  {
    v41 = __nwlog_obj();
    if (os_log_type_enabled(v41, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446466;
      v55 = "on_stream_close_callback";
      v56 = 1024;
      LODWORD(v57) = a2;
      _os_log_impl(&dword_182FBE000, v41, OS_LOG_TYPE_DEBUG, "%{public}s called for stream %d", buf, 0x12u);
    }
  }
  if (!a4)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v55 = "on_stream_close_callback";
    v42 = (const char *)_os_log_send_and_compose_impl();
    v52[0] = OS_LOG_TYPE_ERROR;
    type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v42, v52, &type))
    {
      if (v52[0] == OS_LOG_TYPE_FAULT)
      {
        v43 = __nwlog_obj();
        v44 = v52[0];
        if (os_log_type_enabled(v43, v52[0]))
        {
          *(_DWORD *)buf = 136446210;
          v55 = "on_stream_close_callback";
          v45 = "%{public}s nghttp2 user data is NULL, not http2";
LABEL_87:
          _os_log_impl(&dword_182FBE000, v43, v44, v45, buf, 0xCu);
        }
      }
      else if (type)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        v43 = __nwlog_obj();
        v44 = v52[0];
        v47 = os_log_type_enabled(v43, v52[0]);
        if (backtrace_string)
        {
          if (v47)
          {
            *(_DWORD *)buf = 136446466;
            v55 = "on_stream_close_callback";
            v56 = 2082;
            v57 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v43, v44, "%{public}s nghttp2 user data is NULL, not http2, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(backtrace_string);
          goto LABEL_88;
        }
        if (v47)
        {
          *(_DWORD *)buf = 136446210;
          v55 = "on_stream_close_callback";
          v45 = "%{public}s nghttp2 user data is NULL, not http2, no backtrace";
          goto LABEL_87;
        }
      }
      else
      {
        v43 = __nwlog_obj();
        v44 = v52[0];
        if (os_log_type_enabled(v43, v52[0]))
        {
          *(_DWORD *)buf = 136446210;
          v55 = "on_stream_close_callback";
          v45 = "%{public}s nghttp2 user data is NULL, not http2, backtrace limit exceeded";
          goto LABEL_87;
        }
      }
    }
LABEL_88:
    if (!v42)
      return 4294966394;
    v40 = (char *)v42;
    goto LABEL_66;
  }
  *(_QWORD *)v52 = 0;
  stream_from_id = nw_http2_get_stream_from_id(a4, a2, v52);
  if (stream_from_id)
  {
    v7 = stream_from_id;
    if (*(_QWORD *)v52)
    {
      if (!*(_QWORD *)(*(_QWORD *)v52 + 24))
      {
        if (((*(unsigned __int16 *)(stream_from_id + 188) | (*(unsigned __int8 *)(stream_from_id + 190) << 16)) & 0x80000) != 0)
          return 4294966394;
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v9 = *(_DWORD *)(v7 + 176);
        v8 = *(_DWORD *)(v7 + 180);
        *(_DWORD *)buf = 136447234;
        v55 = "on_stream_close_callback";
        v56 = 2082;
        v57 = (char *)(v7 + 191);
        v58 = 2080;
        v59 = " ";
        v60 = 1024;
        v61 = v8;
        v62 = 1024;
        *(_DWORD *)v63 = v9;
        v10 = (const char *)_os_log_send_and_compose_impl();
        type = OS_LOG_TYPE_ERROR;
        v51 = 0;
        if (__nwlog_fault(v10, &type, &v51))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v11 = gconnectionLogObj;
            v12 = type;
            if (os_log_type_enabled((os_log_t)gconnectionLogObj, type))
            {
              v14 = *(_DWORD *)(v7 + 176);
              v13 = *(_DWORD *)(v7 + 180);
              *(_DWORD *)buf = 136447234;
              v55 = "on_stream_close_callback";
              v56 = 2082;
              v57 = (char *)(v7 + 191);
              v58 = 2080;
              v59 = " ";
              v60 = 1024;
              v61 = v13;
              v62 = 1024;
              *(_DWORD *)v63 = v14;
              v15 = "%{public}s %{public}s%s<i%u:s%d> protocol has null callbacks";
LABEL_63:
              _os_log_impl(&dword_182FBE000, v11, v12, v15, buf, 0x2Cu);
            }
          }
          else if (v51)
          {
            v29 = (char *)__nw_create_backtrace_string();
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v11 = gconnectionLogObj;
            v12 = type;
            v30 = os_log_type_enabled((os_log_t)gconnectionLogObj, type);
            if (!v29)
            {
              if (!v30)
                goto LABEL_64;
              v39 = *(_DWORD *)(v7 + 176);
              v38 = *(_DWORD *)(v7 + 180);
              *(_DWORD *)buf = 136447234;
              v55 = "on_stream_close_callback";
              v56 = 2082;
              v57 = (char *)(v7 + 191);
              v58 = 2080;
              v59 = " ";
              v60 = 1024;
              v61 = v38;
              v62 = 1024;
              *(_DWORD *)v63 = v39;
              v15 = "%{public}s %{public}s%s<i%u:s%d> protocol has null callbacks, no backtrace";
              goto LABEL_63;
            }
            if (v30)
            {
              v32 = *(_DWORD *)(v7 + 176);
              v31 = *(_DWORD *)(v7 + 180);
              *(_DWORD *)buf = 136447490;
              v55 = "on_stream_close_callback";
              v56 = 2082;
              v57 = (char *)(v7 + 191);
              v58 = 2080;
              v59 = " ";
              v60 = 1024;
              v61 = v31;
              v62 = 1024;
              *(_DWORD *)v63 = v32;
              *(_WORD *)&v63[4] = 2082;
              *(_QWORD *)&v63[6] = v29;
              _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s %{public}s%s<i%u:s%d> protocol has null callbacks, dumping backtrace:%{public}s", buf, 0x36u);
            }
            free(v29);
          }
          else
          {
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v11 = gconnectionLogObj;
            v12 = type;
            if (os_log_type_enabled((os_log_t)gconnectionLogObj, type))
            {
              v37 = *(_DWORD *)(v7 + 176);
              v36 = *(_DWORD *)(v7 + 180);
              *(_DWORD *)buf = 136447234;
              v55 = "on_stream_close_callback";
              v56 = 2082;
              v57 = (char *)(v7 + 191);
              v58 = 2080;
              v59 = " ";
              v60 = 1024;
              v61 = v36;
              v62 = 1024;
              *(_DWORD *)v63 = v37;
              v15 = "%{public}s %{public}s%s<i%u:s%d> protocol has null callbacks, backtrace limit exceeded";
              goto LABEL_63;
            }
          }
        }
LABEL_64:
        if (v10)
        {
          v40 = (char *)v10;
LABEL_66:
          free(v40);
        }
        return 4294966394;
      }
    }
    else if (((*(unsigned __int16 *)(stream_from_id + 188) | (*(unsigned __int8 *)(stream_from_id + 190) << 16)) & 0x80000) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v19 = gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_INFO))
      {
        v21 = *(_DWORD *)(v7 + 176);
        v20 = *(_DWORD *)(v7 + 180);
        *(_DWORD *)buf = 136447490;
        v55 = "on_stream_close_callback";
        v56 = 2082;
        v57 = (char *)(v7 + 191);
        v58 = 2080;
        v59 = " ";
        v60 = 1024;
        v61 = v20;
        v62 = 1024;
        *(_DWORD *)v63 = v21;
        *(_WORD *)&v63[4] = 1024;
        *(_DWORD *)&v63[6] = v21;
        _os_log_impl(&dword_182FBE000, v19, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s<i%u:s%d> closing stream %d that has no input handler", buf, 0x32u);
      }
    }
    if (*(_BYTE *)(v7 + 72) && *(_QWORD *)(v7 + 64) != *(_QWORD *)(v7 + 80))
    {
      if ((*(__int16 *)(a4 + 376) & 0x80000000) == 0)
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v26 = gconnectionLogObj;
        if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
        {
          v27 = *(_DWORD *)(a4 + 368);
          if (*(_BYTE *)(v7 + 72))
            v28 = *(_QWORD *)(v7 + 64);
          else
            v28 = -1;
          v33 = *(_QWORD *)(v7 + 80);
          *(_DWORD *)buf = 136447490;
          v55 = "on_stream_close_callback";
          v56 = 2082;
          v57 = (char *)(a4 + 378);
          v58 = 2080;
          v59 = " ";
          v60 = 1024;
          v61 = v27;
          v62 = 2048;
          *(_QWORD *)v63 = v28;
          *(_WORD *)&v63[8] = 2048;
          *(_QWORD *)&v63[10] = v33;
          _os_log_impl(&dword_182FBE000, v26, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u> Content length header %llu does not equal body size %llu", buf, 0x3Au);
        }
      }
      v34 = *(unsigned __int16 *)(v7 + 188);
      v35 = v34 | (*(unsigned __int8 *)(v7 + 190) << 16);
      if ((v34 & 0x40) == 0)
      {
        *(_BYTE *)(v7 + 190) = BYTE2(v35);
        *(_WORD *)(v7 + 188) = v35 | 0x40;
        nw_protocol_error(*(_QWORD **)v52, a4);
        nw_protocol_disconnected(*(_QWORD **)v52, a4);
      }
    }
    else
    {
      v22 = (*(unsigned __int8 *)(v7 + 190) >> 3) & 1;
      if (!gLogDatapath)
        LOBYTE(v22) = 1;
      if ((*(_WORD *)(v7 + 188) & 1) != 0)
      {
        if ((v22 & 1) == 0)
        {
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v48 = gconnectionLogObj;
          if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
          {
            v50 = *(_DWORD *)(v7 + 176);
            v49 = *(_DWORD *)(v7 + 180);
            *(_DWORD *)buf = 136447490;
            v55 = "on_stream_close_callback";
            v56 = 2082;
            v57 = (char *)(v7 + 191);
            v58 = 2080;
            v59 = " ";
            v60 = 1024;
            v61 = v49;
            v62 = 1024;
            *(_DWORD *)v63 = v50;
            *(_WORD *)&v63[4] = 1024;
            *(_DWORD *)&v63[6] = v50;
            _os_log_impl(&dword_182FBE000, v48, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%d> closing stream %d", buf, 0x32u);
          }
        }
        *(_WORD *)(v7 + 188) &= ~1u;
        nw_http2_stream_close(a4, v7);
      }
      else if ((v22 & 1) == 0)
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v23 = gconnectionLogObj;
        if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
        {
          v25 = *(_DWORD *)(v7 + 176);
          v24 = *(_DWORD *)(v7 + 180);
          *(_DWORD *)buf = 136447234;
          v55 = "on_stream_close_callback";
          v56 = 2082;
          v57 = (char *)(v7 + 191);
          v58 = 2080;
          v59 = " ";
          v60 = 1024;
          v61 = v24;
          v62 = 1024;
          *(_DWORD *)v63 = v25;
          _os_log_impl(&dword_182FBE000, v23, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%d> not closing already closed stream", buf, 0x2Cu);
        }
      }
      nw_http2_protocol_close(a4, v7, *(uint64_t *)v52);
    }
    return 0;
  }
  if (*(__int16 *)(a4 + 376) < 0)
    return 0;
  if (__nwlog_connection_log::onceToken != -1)
    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
  v16 = gconnectionLogObj;
  result = os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_INFO);
  if ((_DWORD)result)
  {
    v18 = *(_DWORD *)(a4 + 368);
    *(_DWORD *)buf = 136447234;
    v55 = "on_stream_close_callback";
    v56 = 2082;
    v57 = (char *)(a4 + 378);
    v58 = 2080;
    v59 = " ";
    v60 = 1024;
    v61 = v18;
    v62 = 1024;
    *(_DWORD *)v63 = a2;
    _os_log_impl(&dword_182FBE000, v16, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s<i%u> did not find stream %d", buf, 0x2Cu);
    return 0;
  }
  return result;
}

uint64_t send_callback(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5)
{
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(_QWORD, uint64_t, uint64_t, char *, uint64_t, _QWORD *);
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  void (*v16)(uint64_t, _QWORD *);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  char *v22;
  NSObject *v23;
  os_log_type_t v24;
  const char *v25;
  char *backtrace_string;
  _BOOL4 v27;
  const char *v28;
  NSObject *v29;
  os_log_type_t v30;
  uint32_t v31;
  NSObject *v32;
  os_log_type_t v33;
  NSObject *v34;
  NSObject *v35;
  const char *v36;
  char *v37;
  NSObject *v38;
  os_log_type_t v39;
  const char *v40;
  const char *v41;
  _BOOL4 v42;
  NSObject *v43;
  int v44;
  char *v45;
  _BOOL4 v46;
  const char *v47;
  NSObject *v48;
  os_log_type_t v49;
  uint32_t v50;
  const char *v51;
  const char *v52;
  char v53;
  _QWORD v54[2];
  uint64_t (*v55)(uint64_t, uint64_t);
  void *v56;
  _QWORD *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  os_log_type_t v63;
  _QWORD v64[2];
  _QWORD v65[2];
  os_log_type_t type[4];
  const char *v67;
  __int16 v68;
  const char *v69;
  __int16 v70;
  char *v71;
  _QWORD buf[3];
  char *v73;
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  if (!a5)
  {
    __nwlog_obj();
    LODWORD(buf[0]) = 136446210;
    *(_QWORD *)((char *)buf + 4) = "send_callback";
    v22 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v65[0]) = 0;
    if (!__nwlog_fault(v22, type, v65))
      goto LABEL_75;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      v32 = __nwlog_obj();
      v33 = type[0];
      if (!os_log_type_enabled(v32, type[0]))
        goto LABEL_75;
      LODWORD(buf[0]) = 136446210;
      *(_QWORD *)((char *)buf + 4) = "send_callback";
      v25 = "%{public}s nghttp2 user data is NULL, not http2_transport";
    }
    else if (LOBYTE(v65[0]))
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v32 = __nwlog_obj();
      v33 = type[0];
      v42 = os_log_type_enabled(v32, type[0]);
      if (backtrace_string)
      {
        if (v42)
        {
          LODWORD(buf[0]) = 136446466;
          *(_QWORD *)((char *)buf + 4) = "send_callback";
          WORD2(buf[1]) = 2082;
          *(_QWORD *)((char *)&buf[1] + 6) = backtrace_string;
          v28 = "%{public}s nghttp2 user data is NULL, not http2_transport, dumping backtrace:%{public}s";
          v29 = v32;
          v30 = v33;
          v31 = 22;
          goto LABEL_51;
        }
LABEL_52:
        free(backtrace_string);
        goto LABEL_75;
      }
      if (!v42)
        goto LABEL_75;
      LODWORD(buf[0]) = 136446210;
      *(_QWORD *)((char *)buf + 4) = "send_callback";
      v25 = "%{public}s nghttp2 user data is NULL, not http2_transport, no backtrace";
    }
    else
    {
      v32 = __nwlog_obj();
      v33 = type[0];
      if (!os_log_type_enabled(v32, type[0]))
        goto LABEL_75;
      LODWORD(buf[0]) = 136446210;
      *(_QWORD *)((char *)buf + 4) = "send_callback";
      v25 = "%{public}s nghttp2 user data is NULL, not http2_transport, backtrace limit exceeded";
    }
    v48 = v32;
    v49 = v33;
    v50 = 12;
    goto LABEL_74;
  }
  v8 = &unk_1ECD84000;
  if (gLogDatapath)
  {
    v34 = __nwlog_obj();
    if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(buf[0]) = 136446466;
      *(_QWORD *)((char *)buf + 4) = "send_callback";
      WORD2(buf[1]) = 2082;
      *(_QWORD *)((char *)&buf[1] + 6) = a5 + 205;
      _os_log_impl(&dword_182FBE000, v34, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s called", (uint8_t *)buf, 0x16u);
    }
    if (gLogDatapath)
    {
      v35 = __nwlog_obj();
      if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(buf[0]) = 136446722;
        *(_QWORD *)((char *)buf + 4) = "send_callback";
        WORD2(buf[1]) = 2082;
        *(_QWORD *)((char *)&buf[1] + 6) = a5 + 205;
        HIWORD(buf[2]) = 2048;
        v73 = a3;
        _os_log_impl(&dword_182FBE000, v35, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s asked to write %lu bytes by nghttp2", (uint8_t *)buf, 0x20u);
      }
    }
  }
  v65[0] = 0;
  v65[1] = v65;
  v64[0] = 0;
  v64[1] = v64;
  v9 = *(_QWORD *)(a5 + 32);
  if (v9)
  {
    v10 = *(_QWORD *)(v9 + 24);
    if (v10)
    {
      v11 = *(unsigned int (**)(_QWORD, uint64_t, uint64_t, char *, uint64_t, _QWORD *))(v10 + 88);
      if (v11)
      {
        if (!v11(*(_QWORD *)(a5 + 32), a5, 1, a3, 0xFFFFFFFFLL, v65))
          return -504;
        v12 = v65[0];
        if (!v65[0])
          return -504;
        buf[0] = 0;
        buf[1] = buf;
        LODWORD(v73) = 0;
        buf[2] = 0x2000000000;
        v54[0] = MEMORY[0x1E0C809B0];
        v54[1] = 0x40000000;
        v55 = ___ZL13send_callbackP15nghttp2_sessionPKhmiPv_block_invoke;
        v56 = &unk_1E14A0F38;
        v57 = buf;
        v58 = a3;
        v59 = a2;
        v60 = a5;
        v61 = v65;
        v62 = v64;
        do
        {
          if (!v12)
            break;
          v13 = *(_QWORD *)(v12 + 32);
          v14 = ((uint64_t (*)(_QWORD *))v55)(v54);
          v12 = v13;
        }
        while ((v14 & 1) != 0);
        v15 = *(_QWORD *)(v9 + 24);
        if (v15)
        {
          v16 = *(void (**)(uint64_t, _QWORD *))(v15 + 96);
          if (v16)
          {
            v16(v9, v64);
LABEL_14:
            v17 = v65[0];
            if (v65[0])
            {
              do
              {
                v18 = *(_QWORD *)(v17 + 32);
                nw_frame_finalize(v17);
                v17 = v18;
              }
              while (v18);
            }
            if (v8[1345])
            {
              v43 = __nwlog_obj();
              if (os_log_type_enabled(v43, OS_LOG_TYPE_DEBUG))
              {
                v44 = *(_DWORD *)(buf[1] + 24);
                *(_DWORD *)type = 136446722;
                v67 = "send_callback";
                v68 = 2082;
                v69 = (const char *)(a5 + 205);
                v70 = 1024;
                LODWORD(v71) = v44;
                _os_log_impl(&dword_182FBE000, v43, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s wrote %u bytes", (uint8_t *)type, 0x1Cu);
              }
            }
            v19 = *(unsigned int *)(buf[1] + 24);
            _Block_object_dispose(buf, 8);
            return v19;
          }
        }
        __nwlog_obj();
        v36 = *(const char **)(v9 + 16);
        if (!v36)
          v36 = "invalid";
        *(_DWORD *)type = 136446466;
        v67 = "send_callback";
        v68 = 2082;
        v69 = v36;
        v37 = (char *)_os_log_send_and_compose_impl();
        v63 = OS_LOG_TYPE_ERROR;
        v53 = 0;
        if (__nwlog_fault(v37, &v63, &v53))
        {
          if (v63 == OS_LOG_TYPE_FAULT)
          {
            v38 = __nwlog_obj();
            v39 = v63;
            if (!os_log_type_enabled(v38, v63))
              goto LABEL_83;
            v40 = *(const char **)(v9 + 16);
            if (!v40)
              v40 = "invalid";
            *(_DWORD *)type = 136446466;
            v67 = "send_callback";
            v68 = 2082;
            v69 = v40;
            v41 = "%{public}s protocol %{public}s has invalid finalize_output_frames callback";
            goto LABEL_82;
          }
          if (!v53)
          {
            v38 = __nwlog_obj();
            v39 = v63;
            if (!os_log_type_enabled(v38, v63))
              goto LABEL_83;
            v51 = *(const char **)(v9 + 16);
            if (!v51)
              v51 = "invalid";
            *(_DWORD *)type = 136446466;
            v67 = "send_callback";
            v68 = 2082;
            v69 = v51;
            v41 = "%{public}s protocol %{public}s has invalid finalize_output_frames callback, backtrace limit exceeded";
            goto LABEL_82;
          }
          v45 = (char *)__nw_create_backtrace_string();
          v38 = __nwlog_obj();
          v39 = v63;
          v46 = os_log_type_enabled(v38, v63);
          if (v45)
          {
            if (v46)
            {
              v47 = *(const char **)(v9 + 16);
              if (!v47)
                v47 = "invalid";
              *(_DWORD *)type = 136446722;
              v67 = "send_callback";
              v68 = 2082;
              v69 = v47;
              v70 = 2082;
              v71 = v45;
              _os_log_impl(&dword_182FBE000, v38, v39, "%{public}s protocol %{public}s has invalid finalize_output_frames callback, dumping backtrace:%{public}s", (uint8_t *)type, 0x20u);
            }
            free(v45);
            v8 = (_BYTE *)&unk_1ECD84000;
            goto LABEL_83;
          }
          v8 = (_BYTE *)&unk_1ECD84000;
          if (v46)
          {
            v52 = *(const char **)(v9 + 16);
            if (!v52)
              v52 = "invalid";
            *(_DWORD *)type = 136446466;
            v67 = "send_callback";
            v68 = 2082;
            v69 = v52;
            v41 = "%{public}s protocol %{public}s has invalid finalize_output_frames callback, no backtrace";
LABEL_82:
            _os_log_impl(&dword_182FBE000, v38, v39, v41, (uint8_t *)type, 0x16u);
          }
        }
LABEL_83:
        if (v37)
          free(v37);
        goto LABEL_14;
      }
    }
  }
  __nwlog_obj();
  v21 = a5 + 205;
  LODWORD(buf[0]) = 136446466;
  *(_QWORD *)((char *)buf + 4) = "send_callback";
  WORD2(buf[1]) = 2082;
  *(_QWORD *)((char *)&buf[1] + 6) = a5 + 205;
  v22 = (char *)_os_log_send_and_compose_impl();
  type[0] = OS_LOG_TYPE_ERROR;
  v63 = OS_LOG_TYPE_DEFAULT;
  if (!__nwlog_fault(v22, type, &v63))
    goto LABEL_75;
  if (type[0] == OS_LOG_TYPE_FAULT)
  {
    v23 = __nwlog_obj();
    v24 = type[0];
    if (os_log_type_enabled(v23, type[0]))
    {
      LODWORD(buf[0]) = 136446466;
      *(_QWORD *)((char *)buf + 4) = "send_callback";
      WORD2(buf[1]) = 2082;
      *(_QWORD *)((char *)&buf[1] + 6) = v21;
      v25 = "%{public}s %{public}s output handler has no get_output_frames callback";
LABEL_64:
      v48 = v23;
      v49 = v24;
      v50 = 22;
LABEL_74:
      _os_log_impl(&dword_182FBE000, v48, v49, v25, (uint8_t *)buf, v50);
      goto LABEL_75;
    }
    goto LABEL_75;
  }
  if (v63)
  {
    backtrace_string = (char *)__nw_create_backtrace_string();
    v23 = __nwlog_obj();
    v24 = type[0];
    v27 = os_log_type_enabled(v23, type[0]);
    if (!backtrace_string)
    {
      if (v27)
      {
        LODWORD(buf[0]) = 136446466;
        *(_QWORD *)((char *)buf + 4) = "send_callback";
        WORD2(buf[1]) = 2082;
        *(_QWORD *)((char *)&buf[1] + 6) = v21;
        v25 = "%{public}s %{public}s output handler has no get_output_frames callback, no backtrace";
        goto LABEL_64;
      }
      goto LABEL_75;
    }
    if (v27)
    {
      LODWORD(buf[0]) = 136446722;
      *(_QWORD *)((char *)buf + 4) = "send_callback";
      WORD2(buf[1]) = 2082;
      *(_QWORD *)((char *)&buf[1] + 6) = v21;
      HIWORD(buf[2]) = 2082;
      v73 = backtrace_string;
      v28 = "%{public}s %{public}s output handler has no get_output_frames callback, dumping backtrace:%{public}s";
      v29 = v23;
      v30 = v24;
      v31 = 32;
LABEL_51:
      _os_log_impl(&dword_182FBE000, v29, v30, v28, (uint8_t *)buf, v31);
      goto LABEL_52;
    }
    goto LABEL_52;
  }
  v23 = __nwlog_obj();
  v24 = type[0];
  if (os_log_type_enabled(v23, type[0]))
  {
    LODWORD(buf[0]) = 136446466;
    *(_QWORD *)((char *)buf + 4) = "send_callback";
    WORD2(buf[1]) = 2082;
    *(_QWORD *)((char *)&buf[1] + 6) = v21;
    v25 = "%{public}s %{public}s output handler has no get_output_frames callback, backtrace limit exceeded";
    goto LABEL_64;
  }
LABEL_75:
  if (v22)
    free(v22);
  return -902;
}

uint64_t on_frame_not_send_callback(uint64_t a1, uint64_t *a2, int a3, uint64_t a4)
{
  uint64_t v7;
  _BOOL4 v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  const char *v13;
  NSObject *v14;
  uint32_t v15;
  char *v17;
  NSObject *v18;
  os_log_type_t v19;
  const char *v20;
  char *backtrace_string;
  _BOOL4 v22;
  char v23;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  char *v28;
  __int16 v29;
  int v30;
  __int16 v31;
  uint64_t v32;
  __int16 v33;
  int v34;
  __int16 v35;
  int v36;
  __int16 v37;
  uint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  if (a4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v7 = gLogObj;
    v8 = os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
    if (a2)
    {
      if (v8)
      {
        v9 = nghttp2_strerror();
        v10 = *((unsigned __int8 *)a2 + 12);
        v11 = *((_DWORD *)a2 + 2);
        v12 = *a2;
        *(_DWORD *)buf = 136447746;
        v26 = "on_frame_not_send_callback";
        v27 = 2082;
        v28 = (char *)(a4 + 205);
        v29 = 1024;
        v30 = a3;
        v31 = 2080;
        v32 = v9;
        v33 = 1024;
        v34 = v10;
        v35 = 1024;
        v36 = v11;
        v37 = 2048;
        v38 = v12;
        v13 = "%{public}s %{public}s called with error %d (%s) for frame type %u on stream %d length (no header) %zu";
        v14 = v7;
        v15 = 60;
LABEL_7:
        _os_log_impl(&dword_182FBE000, v14, OS_LOG_TYPE_ERROR, v13, buf, v15);
      }
    }
    else if (v8)
    {
      *(_DWORD *)buf = 136446722;
      v26 = "on_frame_not_send_callback";
      v27 = 2082;
      v28 = (char *)(a4 + 205);
      v29 = 1024;
      v30 = a3;
      v13 = "%{public}s %{public}s called with error %d";
      v14 = v7;
      v15 = 28;
      goto LABEL_7;
    }
    *(_BYTE *)(a4 + 204) |= 8u;
    return 4294966394;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v26 = "on_frame_not_send_callback";
  v17 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v23 = 0;
  if (__nwlog_fault(v17, &type, &v23))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v18 = __nwlog_obj();
      v19 = type;
      if (!os_log_type_enabled(v18, type))
        goto LABEL_24;
      *(_DWORD *)buf = 136446210;
      v26 = "on_frame_not_send_callback";
      v20 = "%{public}s nghttp2 user data is NULL, not http2_transport";
      goto LABEL_23;
    }
    if (!v23)
    {
      v18 = __nwlog_obj();
      v19 = type;
      if (!os_log_type_enabled(v18, type))
        goto LABEL_24;
      *(_DWORD *)buf = 136446210;
      v26 = "on_frame_not_send_callback";
      v20 = "%{public}s nghttp2 user data is NULL, not http2_transport, backtrace limit exceeded";
      goto LABEL_23;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v18 = __nwlog_obj();
    v19 = type;
    v22 = os_log_type_enabled(v18, type);
    if (backtrace_string)
    {
      if (v22)
      {
        *(_DWORD *)buf = 136446466;
        v26 = "on_frame_not_send_callback";
        v27 = 2082;
        v28 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v18, v19, "%{public}s nghttp2 user data is NULL, not http2_transport, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_24;
    }
    if (v22)
    {
      *(_DWORD *)buf = 136446210;
      v26 = "on_frame_not_send_callback";
      v20 = "%{public}s nghttp2 user data is NULL, not http2_transport, no backtrace";
LABEL_23:
      _os_log_impl(&dword_182FBE000, v18, v19, v20, buf, 0xCu);
    }
  }
LABEL_24:
  if (v17)
    free(v17);
  return 4294966394;
}

{
  int v7;
  NSObject *v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  _QWORD *v16;
  int v17;
  uint64_t v18;
  int v19;
  const char *v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  int v24;
  int v25;
  NSObject *v26;
  int v27;
  int v28;
  char *v29;
  NSObject *v30;
  os_log_type_t v31;
  const char *v32;
  char *backtrace_string;
  _BOOL4 v34;
  os_log_type_t type[15];
  char v36;
  uint8_t buf[4];
  const char *v38;
  __int16 v39;
  char *v40;
  __int16 v41;
  const char *v42;
  __int16 v43;
  int v44;
  __int16 v45;
  int v46;
  __int16 v47;
  uint64_t v48;
  __int16 v49;
  int v50;
  __int16 v51;
  int v52;
  __int16 v53;
  uint64_t v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  if (!a4)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v38 = "on_frame_not_send_callback";
    v29 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    v36 = 0;
    if (!__nwlog_fault(v29, type, &v36))
      goto LABEL_46;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      v30 = __nwlog_obj();
      v31 = type[0];
      if (!os_log_type_enabled(v30, type[0]))
        goto LABEL_46;
      *(_DWORD *)buf = 136446210;
      v38 = "on_frame_not_send_callback";
      v32 = "%{public}s nghttp2 user data is NULL, not http2";
    }
    else if (v36)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v30 = __nwlog_obj();
      v31 = type[0];
      v34 = os_log_type_enabled(v30, type[0]);
      if (backtrace_string)
      {
        if (v34)
        {
          *(_DWORD *)buf = 136446466;
          v38 = "on_frame_not_send_callback";
          v39 = 2082;
          v40 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v30, v31, "%{public}s nghttp2 user data is NULL, not http2, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_46;
      }
      if (!v34)
      {
LABEL_46:
        if (v29)
          free(v29);
        return 4294966394;
      }
      *(_DWORD *)buf = 136446210;
      v38 = "on_frame_not_send_callback";
      v32 = "%{public}s nghttp2 user data is NULL, not http2, no backtrace";
    }
    else
    {
      v30 = __nwlog_obj();
      v31 = type[0];
      if (!os_log_type_enabled(v30, type[0]))
        goto LABEL_46;
      *(_DWORD *)buf = 136446210;
      v38 = "on_frame_not_send_callback";
      v32 = "%{public}s nghttp2 user data is NULL, not http2, backtrace limit exceeded";
    }
    _os_log_impl(&dword_182FBE000, v30, v31, v32, buf, 0xCu);
    goto LABEL_46;
  }
  v7 = *(__int16 *)(a4 + 376);
  if (a2)
  {
    if ((v7 & 0x80000000) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v8 = gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
      {
        v9 = *(_DWORD *)(a4 + 368);
        v10 = nghttp2_strerror();
        v11 = *((unsigned __int8 *)a2 + 12);
        v12 = *((_DWORD *)a2 + 2);
        v13 = *a2;
        *(_DWORD *)buf = 136448258;
        v38 = "on_frame_not_send_callback";
        v39 = 2082;
        v40 = (char *)(a4 + 378);
        v41 = 2080;
        v42 = " ";
        v43 = 1024;
        v44 = v9;
        v45 = 1024;
        v46 = a3;
        v47 = 2080;
        v48 = v10;
        v49 = 1024;
        v50 = v11;
        v51 = 1024;
        v52 = v12;
        v53 = 2048;
        v54 = v13;
        _os_log_impl(&dword_182FBE000, v8, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u> called with error %d (%s) for frame type %u on stream %d length (no header) %zu", buf, 0x4Cu);
      }
    }
    *(_QWORD *)type = 0;
    result = nw_http2_get_stream_from_id(a4, *((_DWORD *)a2 + 2), type);
    if (result)
    {
      v15 = result;
      v16 = *(_QWORD **)type;
      v17 = *(unsigned __int16 *)(v15 + 188) | (*(unsigned __int8 *)(v15 + 190) << 16);
      if (*(_QWORD *)type)
      {
        if ((*(_WORD *)(v15 + 188) & 0x40) == 0)
        {
          *(_BYTE *)(v15 + 190) = BYTE2(v17);
          *(_WORD *)(v15 + 188) = v17 | 0x40;
          nw_protocol_error(v16, a4);
          nw_protocol_disconnected(*(_QWORD **)type, a4);
        }
        return 0;
      }
      if ((v17 & 0x80000) == 0)
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v26 = gconnectionLogObj;
        if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
        {
          v28 = *(_DWORD *)(v15 + 176);
          v27 = *(_DWORD *)(v15 + 180);
          *(_DWORD *)buf = 136447746;
          v38 = "on_frame_not_send_callback";
          v39 = 2082;
          v40 = (char *)(v15 + 191);
          v41 = 2080;
          v42 = " ";
          v43 = 1024;
          v44 = v27;
          v45 = 1024;
          v46 = v28;
          v47 = 2048;
          v48 = v15;
          v49 = 1024;
          v50 = v28;
          _os_log_impl(&dword_182FBE000, v26, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u:s%d> stream (%pm %d) did not have protocol extra", buf, 0x3Cu);
        }
      }
      return 4294966394;
    }
    if ((*(__int16 *)(a4 + 376) & 0x80000000) == 0 && gLogDatapath)
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v23 = gconnectionLogObj;
      result = os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG);
      if ((_DWORD)result)
      {
        v24 = *(_DWORD *)(a4 + 368);
        v25 = *((_DWORD *)a2 + 2);
        *(_DWORD *)buf = 136447234;
        v38 = "on_frame_not_send_callback";
        v39 = 2082;
        v40 = (char *)(a4 + 378);
        v41 = 2080;
        v42 = " ";
        v43 = 1024;
        v44 = v24;
        v45 = 1024;
        v46 = v25;
        v20 = "%{public}s %{public}s%s<i%u> failed to find stream %d";
        v21 = v23;
        v22 = OS_LOG_TYPE_DEBUG;
        goto LABEL_17;
      }
    }
  }
  else
  {
    if (v7 < 0)
      return 0;
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v18 = gconnectionLogObj;
    result = os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR);
    if ((_DWORD)result)
    {
      v19 = *(_DWORD *)(a4 + 368);
      *(_DWORD *)buf = 136447234;
      v38 = "on_frame_not_send_callback";
      v39 = 2082;
      v40 = (char *)(a4 + 378);
      v41 = 2080;
      v42 = " ";
      v43 = 1024;
      v44 = v19;
      v45 = 1024;
      v46 = a3;
      v20 = "%{public}s %{public}s%s<i%u> called with error %d";
      v21 = v18;
      v22 = OS_LOG_TYPE_ERROR;
LABEL_17:
      _os_log_impl(&dword_182FBE000, v21, v22, v20, buf, 0x2Cu);
      return 0;
    }
  }
  return result;
}

uint64_t on_invalid_frame_recv_callback(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  int v6;
  uint64_t stream_from_id;
  NSObject *v8;
  uint64_t result;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  const char *v13;
  NSObject *v15;
  NSObject *v16;
  char *backtrace_string;
  _BOOL4 v18;
  NSObject *v19;
  char v20;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v23;
  __int16 v24;
  char *v25;
  __int16 v26;
  int v27;
  __int16 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if (!a4)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v23 = "on_invalid_frame_recv_callback";
    v10 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v20 = 0;
    if (!__nwlog_fault(v10, &type, &v20))
      goto LABEL_36;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v11 = __nwlog_obj();
      v12 = type;
      if (!os_log_type_enabled(v11, type))
        goto LABEL_36;
      *(_DWORD *)buf = 136446210;
      v23 = "on_invalid_frame_recv_callback";
      v13 = "%{public}s nghttp2 user data is NULL, not http2_transport";
    }
    else if (v20)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v11 = __nwlog_obj();
      v12 = type;
      v18 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446466;
          v23 = "on_invalid_frame_recv_callback";
          v24 = 2082;
          v25 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s nghttp2 user data is NULL, not http2_transport, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_36;
      }
      if (!v18)
      {
LABEL_36:
        if (v10)
          free(v10);
        return 4294966394;
      }
      *(_DWORD *)buf = 136446210;
      v23 = "on_invalid_frame_recv_callback";
      v13 = "%{public}s nghttp2 user data is NULL, not http2_transport, no backtrace";
    }
    else
    {
      v11 = __nwlog_obj();
      v12 = type;
      if (!os_log_type_enabled(v11, type))
        goto LABEL_36;
      *(_DWORD *)buf = 136446210;
      v23 = "on_invalid_frame_recv_callback";
      v13 = "%{public}s nghttp2 user data is NULL, not http2_transport, backtrace limit exceeded";
    }
    _os_log_impl(&dword_182FBE000, v11, v12, v13, buf, 0xCu);
    goto LABEL_36;
  }
  if (gLogDatapath)
  {
    v15 = __nwlog_obj();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446978;
      v23 = "on_invalid_frame_recv_callback";
      v24 = 2082;
      v25 = (char *)(a4 + 205);
      v26 = 1024;
      v27 = a3;
      v28 = 2080;
      v29 = nghttp2_strerror();
      _os_log_impl(&dword_182FBE000, v15, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s called with error %d (%s)", buf, 0x26u);
    }
  }
  if (!a2)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v8 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      v23 = "on_invalid_frame_recv_callback";
      v24 = 2082;
      v25 = (char *)(a4 + 205);
      _os_log_impl(&dword_182FBE000, v8, OS_LOG_TYPE_INFO, "%{public}s %{public}s no frame, closing", buf, 0x16u);
    }
    goto LABEL_10;
  }
  v6 = *(_DWORD *)(a2 + 8);
  if (gLogDatapath)
  {
    v16 = __nwlog_obj();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446722;
      v23 = "on_invalid_frame_recv_callback";
      v24 = 2082;
      v25 = (char *)(a4 + 205);
      v26 = 1024;
      v27 = v6;
      _os_log_impl(&dword_182FBE000, v16, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s error on stream %d", buf, 0x1Cu);
    }
  }
  if (v6 == -1)
  {
    nw_http2_transport_connection_close(a4);
    return 0;
  }
  stream_from_id = nw_http2_transport_get_stream_from_id(a4, v6, 0);
  if (stream_from_id)
  {
    nw_http2_transport_stream_close(a4, stream_from_id);
LABEL_10:
    *(_BYTE *)(a4 + 204) |= 8u;
    return 4294966394;
  }
  if (!gLogDatapath)
    return 0;
  v19 = __nwlog_obj();
  result = os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG);
  if ((_DWORD)result)
  {
    *(_DWORD *)buf = 136446722;
    v23 = "on_invalid_frame_recv_callback";
    v24 = 2082;
    v25 = (char *)(a4 + 205);
    v26 = 1024;
    v27 = v6;
    _os_log_impl(&dword_182FBE000, v19, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s No stream found for id %d, ignoring", buf, 0x1Cu);
    return 0;
  }
  return result;
}

{
  int v6;
  uint64_t stream_from_id;
  uint64_t v8;
  NSObject *v9;
  int v10;
  uint64_t result;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  const char *v15;
  NSObject *v17;
  int v18;
  uint64_t v19;
  int v20;
  const char *v21;
  NSObject *v22;
  uint32_t v23;
  uint64_t v24;
  int v25;
  int v26;
  char *backtrace_string;
  _BOOL4 v28;
  NSObject *v29;
  int v30;
  char v31;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v34;
  __int16 v35;
  char *v36;
  __int16 v37;
  const char *v38;
  __int16 v39;
  int v40;
  __int16 v41;
  int v42;
  __int16 v43;
  uint64_t v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  if (!a4)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v34 = "on_invalid_frame_recv_callback";
    v12 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v31 = 0;
    if (!__nwlog_fault(v12, &type, &v31))
      goto LABEL_55;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v13 = __nwlog_obj();
      v14 = type;
      if (!os_log_type_enabled(v13, type))
        goto LABEL_55;
      *(_DWORD *)buf = 136446210;
      v34 = "on_invalid_frame_recv_callback";
      v15 = "%{public}s nghttp2 user data is NULL, not http2";
    }
    else if (v31)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v13 = __nwlog_obj();
      v14 = type;
      v28 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v28)
        {
          *(_DWORD *)buf = 136446466;
          v34 = "on_invalid_frame_recv_callback";
          v35 = 2082;
          v36 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s nghttp2 user data is NULL, not http2, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_55;
      }
      if (!v28)
      {
LABEL_55:
        if (v12)
          free(v12);
        return 4294966394;
      }
      *(_DWORD *)buf = 136446210;
      v34 = "on_invalid_frame_recv_callback";
      v15 = "%{public}s nghttp2 user data is NULL, not http2, no backtrace";
    }
    else
    {
      v13 = __nwlog_obj();
      v14 = type;
      if (!os_log_type_enabled(v13, type))
        goto LABEL_55;
      *(_DWORD *)buf = 136446210;
      v34 = "on_invalid_frame_recv_callback";
      v15 = "%{public}s nghttp2 user data is NULL, not http2, backtrace limit exceeded";
    }
    _os_log_impl(&dword_182FBE000, v13, v14, v15, buf, 0xCu);
    goto LABEL_55;
  }
  if ((*(__int16 *)(a4 + 376) & 0x80000000) == 0 && gLogDatapath)
  {
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v17 = gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
    {
      v18 = *(_DWORD *)(a4 + 368);
      *(_DWORD *)buf = 136447490;
      v34 = "on_invalid_frame_recv_callback";
      v35 = 2082;
      v36 = (char *)(a4 + 378);
      v37 = 2080;
      v38 = " ";
      v39 = 1024;
      v40 = v18;
      v41 = 1024;
      v42 = a3;
      v43 = 2080;
      v44 = nghttp2_strerror();
      _os_log_impl(&dword_182FBE000, v17, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> called with error %d (%s)", buf, 0x36u);
    }
  }
  if (!a2)
  {
    if ((*(__int16 *)(a4 + 376) & 0x80000000) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v9 = gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_INFO))
      {
        v10 = *(_DWORD *)(a4 + 368);
        *(_DWORD *)buf = 136446978;
        v34 = "on_invalid_frame_recv_callback";
        v35 = 2082;
        v36 = (char *)(a4 + 378);
        v37 = 2080;
        v38 = " ";
        v39 = 1024;
        v40 = v10;
        _os_log_impl(&dword_182FBE000, v9, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s<i%u> no frame, closing", buf, 0x26u);
      }
    }
    goto LABEL_16;
  }
  v6 = *(_DWORD *)(a2 + 8);
  stream_from_id = nw_http2_get_stream_from_id(a4, v6, 0);
  v8 = stream_from_id;
  if (stream_from_id)
  {
    if (((*(unsigned __int16 *)(stream_from_id + 188) | (*(unsigned __int8 *)(stream_from_id + 190) << 16)) & 0x80000) == 0
      && gLogDatapath)
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v24 = gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
      {
        v26 = *(_DWORD *)(v8 + 176);
        v25 = *(_DWORD *)(v8 + 180);
        *(_DWORD *)buf = 136447490;
        v34 = "on_invalid_frame_recv_callback";
        v35 = 2082;
        v36 = (char *)(v8 + 191);
        v37 = 2080;
        v38 = " ";
        v39 = 1024;
        v40 = v25;
        v41 = 1024;
        v42 = v26;
        v43 = 1024;
        LODWORD(v44) = v6;
        v21 = "%{public}s %{public}s%s<i%u:s%d> error on stream %d";
        v22 = v24;
        v23 = 50;
        goto LABEL_40;
      }
    }
  }
  else if ((*(__int16 *)(a4 + 376) & 0x80000000) == 0 && gLogDatapath)
  {
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v19 = gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
    {
      v20 = *(_DWORD *)(a4 + 368);
      *(_DWORD *)buf = 136447234;
      v34 = "on_invalid_frame_recv_callback";
      v35 = 2082;
      v36 = (char *)(a4 + 378);
      v37 = 2080;
      v38 = " ";
      v39 = 1024;
      v40 = v20;
      v41 = 1024;
      v42 = v6;
      v21 = "%{public}s %{public}s%s<i%u> error on stream %d";
      v22 = v19;
      v23 = 44;
LABEL_40:
      _os_log_impl(&dword_182FBE000, v22, OS_LOG_TYPE_DEBUG, v21, buf, v23);
    }
  }
  if (v6 == -1)
  {
    nw_http2_connection_close(a4);
    return 0;
  }
  else
  {
    if (v8)
    {
      nw_http2_stream_close(a4, v8);
LABEL_16:
      *(_WORD *)(a4 + 376) |= 0x10u;
      return 4294966394;
    }
    result = 0;
    if ((*(__int16 *)(a4 + 376) & 0x80000000) == 0 && gLogDatapath)
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v29 = gconnectionLogObj;
      result = os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG);
      if ((_DWORD)result)
      {
        v30 = *(_DWORD *)(a4 + 368);
        *(_DWORD *)buf = 136447234;
        v34 = "on_invalid_frame_recv_callback";
        v35 = 2082;
        v36 = (char *)(a4 + 378);
        v37 = 2080;
        v38 = " ";
        v39 = 1024;
        v40 = v30;
        v41 = 1024;
        v42 = v6;
        _os_log_impl(&dword_182FBE000, v29, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> No stream found for id %d, ignoring", buf, 0x2Cu);
        return 0;
      }
    }
  }
  return result;
}

uint64_t error_callback(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  NSObject *v8;
  NSObject *v9;
  uint64_t result;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  const char *v14;
  char *backtrace_string;
  _BOOL4 v16;
  char v17;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v20;
  __int16 v21;
  _BYTE v22[14];
  __int16 v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v8 = gLogObj;
  if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446722;
    v20 = "error_callback";
    v21 = 1024;
    *(_DWORD *)v22 = a2;
    *(_WORD *)&v22[4] = 2080;
    *(_QWORD *)&v22[6] = a3;
    _os_log_impl(&dword_182FBE000, v8, OS_LOG_TYPE_ERROR, "%{public}s called with error %d, message %s", buf, 0x1Cu);
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v9 = gLogObj;
  if (a5)
  {
    result = os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
    if ((_DWORD)result)
    {
      *(_DWORD *)buf = 136446978;
      v20 = "error_callback";
      v21 = 2082;
      *(_QWORD *)v22 = a5 + 205;
      *(_WORD *)&v22[8] = 1024;
      *(_DWORD *)&v22[10] = a2;
      v23 = 2080;
      v24 = a3;
      _os_log_impl(&dword_182FBE000, v9, OS_LOG_TYPE_ERROR, "%{public}s %{public}s error (%d: %s)", buf, 0x26u);
      return 0;
    }
    return result;
  }
  *(_DWORD *)buf = 136446210;
  v20 = "error_callback";
  v11 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v17 = 0;
  if (__nwlog_fault(v11, &type, &v17))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v12 = __nwlog_obj();
      v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v20 = "error_callback";
        v14 = "%{public}s nghttp2 user data is NULL, not http2_transport";
LABEL_20:
        _os_log_impl(&dword_182FBE000, v12, v13, v14, buf, 0xCu);
      }
    }
    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v12 = __nwlog_obj();
      v13 = type;
      v16 = os_log_type_enabled(v12, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          v20 = "error_callback";
          v21 = 2082;
          *(_QWORD *)v22 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v12, v13, "%{public}s nghttp2 user data is NULL, not http2_transport, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_21;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        v20 = "error_callback";
        v14 = "%{public}s nghttp2 user data is NULL, not http2_transport, no backtrace";
        goto LABEL_20;
      }
    }
    else
    {
      v12 = __nwlog_obj();
      v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v20 = "error_callback";
        v14 = "%{public}s nghttp2 user data is NULL, not http2_transport, backtrace limit exceeded";
        goto LABEL_20;
      }
    }
  }
LABEL_21:
  if (v11)
    free(v11);
  return 4294966394;
}

{
  NSObject *v8;
  NSObject *v9;
  uint64_t result;
  int v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  const char *v15;
  char *backtrace_string;
  _BOOL4 v17;
  char v18;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v21;
  __int16 v22;
  _BYTE v23[18];
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;
  __int16 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v8 = gLogObj;
  if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446722;
    v21 = "error_callback";
    v22 = 1024;
    *(_DWORD *)v23 = a2;
    *(_WORD *)&v23[4] = 2080;
    *(_QWORD *)&v23[6] = a3;
    _os_log_impl(&dword_182FBE000, v8, OS_LOG_TYPE_ERROR, "%{public}s called with error %d, message %s", buf, 0x1Cu);
  }
  if (!a5)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v21 = "error_callback";
    v12 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v18 = 0;
    if (__nwlog_fault(v12, &type, &v18))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v13 = __nwlog_obj();
        v14 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)buf = 136446210;
          v21 = "error_callback";
          v15 = "%{public}s nghttp2 user data is NULL, not http2";
LABEL_24:
          _os_log_impl(&dword_182FBE000, v13, v14, v15, buf, 0xCu);
        }
      }
      else if (v18)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        v13 = __nwlog_obj();
        v14 = type;
        v17 = os_log_type_enabled(v13, type);
        if (backtrace_string)
        {
          if (v17)
          {
            *(_DWORD *)buf = 136446466;
            v21 = "error_callback";
            v22 = 2082;
            *(_QWORD *)v23 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s nghttp2 user data is NULL, not http2, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(backtrace_string);
          goto LABEL_25;
        }
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          v21 = "error_callback";
          v15 = "%{public}s nghttp2 user data is NULL, not http2, no backtrace";
          goto LABEL_24;
        }
      }
      else
      {
        v13 = __nwlog_obj();
        v14 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)buf = 136446210;
          v21 = "error_callback";
          v15 = "%{public}s nghttp2 user data is NULL, not http2, backtrace limit exceeded";
          goto LABEL_24;
        }
      }
    }
LABEL_25:
    if (v12)
      free(v12);
    return 4294966394;
  }
  if (*(__int16 *)(a5 + 376) < 0)
    return 0;
  if (__nwlog_connection_log::onceToken != -1)
    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
  v9 = gconnectionLogObj;
  result = os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR);
  if ((_DWORD)result)
  {
    v11 = *(_DWORD *)(a5 + 368);
    *(_DWORD *)buf = 136447490;
    v21 = "error_callback";
    v22 = 2082;
    *(_QWORD *)v23 = a5 + 378;
    *(_WORD *)&v23[8] = 2080;
    *(_QWORD *)&v23[10] = " ";
    v24 = 1024;
    v25 = v11;
    v26 = 1024;
    v27 = a2;
    v28 = 2080;
    v29 = a3;
    _os_log_impl(&dword_182FBE000, v9, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u> error (%d: %s)", buf, 0x36u);
    return 0;
  }
  return result;
}

void nghttp2_debug_logging_callback(const char *a1, va_list a2)
{
  char *v2;
  NSObject *v3;
  char *v4;
  uint8_t buf[4];
  const char *v6;
  __int16 v7;
  char *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v4 = 0;
  vasprintf(&v4, a1, a2);
  v2 = v4;
  if (v4)
  {
    if (!gLogDatapath)
      goto LABEL_3;
    v3 = __nwlog_obj();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446466;
      v6 = "nghttp2_debug_logging_callback";
      v7 = 2082;
      v8 = v4;
      _os_log_impl(&dword_182FBE000, v3, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s", buf, 0x16u);
    }
    v2 = v4;
    if (v4)
LABEL_3:
      free(v2);
  }
}

void nw_http2_transport_connection_close(uint64_t a1)
{
  char v2;
  char *v3;
  uint64_t v4;
  NSObject *v5;
  NSObject *v6;
  const char *v7;
  int v8;
  void *v9;
  NSObject *v10;
  os_log_type_t v11;
  const char *v12;
  uint64_t v13;
  char *v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  const char *v18;
  char *v19;
  _BOOL4 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  NSObject *v27;
  os_log_type_t v28;
  const char *v29;
  char *v30;
  _BOOL4 v31;
  NSObject *v32;
  os_log_type_t v33;
  uint32_t v34;
  NSObject *v35;
  const char *v36;
  NSObject *v37;
  os_log_type_t v38;
  NSObject *v39;
  uint64_t v40;
  char *backtrace_string;
  _BOOL4 v42;
  NSObject *v43;
  uint64_t v44;
  char *v45;
  _BOOL4 v46;
  char *v47;
  _BOOL4 v48;
  _QWORD v49[5];
  _QWORD v50[5];
  char v51;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v54;
  __int16 v55;
  uint64_t v56;
  __int16 v57;
  _BYTE v58[20];
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  if (gLogDatapath)
  {
    v35 = __nwlog_obj();
    if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
    {
      v36 = "";
      if (a1)
        v36 = (const char *)(a1 + 205);
      *(_DWORD *)buf = 136446466;
      v54 = "nw_http2_transport_connection_close";
      v55 = 2082;
      v56 = (uint64_t)v36;
      _os_log_impl(&dword_182FBE000, v35, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s called", buf, 0x16u);
    }
  }
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v54 = "nw_http2_transport_connection_close";
    v26 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v51 = 0;
    if (!__nwlog_fault(v26, &type, &v51))
      goto LABEL_62;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v37 = __nwlog_obj();
      v38 = type;
      if (!os_log_type_enabled(v37, type))
        goto LABEL_62;
      *(_DWORD *)buf = 136446210;
      v54 = "nw_http2_transport_connection_close";
      v29 = "%{public}s called with null http2_transport";
    }
    else if (v51)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v37 = __nwlog_obj();
      v38 = type;
      v42 = os_log_type_enabled(v37, type);
      if (backtrace_string)
      {
        if (v42)
        {
          *(_DWORD *)buf = 136446466;
          v54 = "nw_http2_transport_connection_close";
          v55 = 2082;
          v56 = (uint64_t)backtrace_string;
          _os_log_impl(&dword_182FBE000, v37, v38, "%{public}s called with null http2_transport, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_62;
      }
      if (!v42)
        goto LABEL_62;
      *(_DWORD *)buf = 136446210;
      v54 = "nw_http2_transport_connection_close";
      v29 = "%{public}s called with null http2_transport, no backtrace";
    }
    else
    {
      v37 = __nwlog_obj();
      v38 = type;
      if (!os_log_type_enabled(v37, type))
        goto LABEL_62;
      *(_DWORD *)buf = 136446210;
      v54 = "nw_http2_transport_connection_close";
      v29 = "%{public}s called with null http2_transport, backtrace limit exceeded";
    }
    v32 = v37;
    v33 = v38;
    v34 = 12;
    goto LABEL_61;
  }
  v2 = *(_BYTE *)(a1 + 204);
  *(_BYTE *)(a1 + 204) = v2 & 0xF9 | 4;
  v3 = *(char **)(a1 + 120);
  v4 = MEMORY[0x1E0C809B0];
  if (v3)
  {
    v50[0] = MEMORY[0x1E0C809B0];
    v50[1] = 0x40000000;
    v50[2] = ___ZL35nw_http2_transport_connection_closeP27nw_protocol_http2_transport_block_invoke;
    v50[3] = &__block_descriptor_tmp_17_36976;
    v50[4] = a1;
    nw_hash_table_apply(v3, (uint64_t)v50);
  }
  else
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v5 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      v54 = "nw_http2_transport_connection_close";
      v55 = 2082;
      v56 = a1 + 205;
      _os_log_impl(&dword_182FBE000, v5, OS_LOG_TYPE_ERROR, "%{public}s %{public}s id table is NULL, cannot close streams", buf, 0x16u);
    }
  }
  if ((v2 & 2) == 0)
  {
    if (gLogDatapath)
    {
      v6 = __nwlog_obj();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446466;
        v54 = "nw_http2_transport_connection_close";
        v55 = 2082;
        v56 = a1 + 205;
        v7 = "%{public}s %{public}s not sending GOAWAY since tunnel was not connected";
LABEL_23:
        _os_log_impl(&dword_182FBE000, v6, OS_LOG_TYPE_DEBUG, v7, buf, 0x16u);
        goto LABEL_44;
      }
    }
    goto LABEL_44;
  }
  if (gLogDatapath)
  {
    v39 = __nwlog_obj();
    if (os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG))
    {
      v40 = nghttp2_http2_strerror();
      *(_DWORD *)buf = 136446978;
      v54 = "nw_http2_transport_send_goaway";
      v55 = 2082;
      v56 = a1 + 205;
      v57 = 1024;
      *(_DWORD *)v58 = 0;
      *(_WORD *)&v58[4] = 2082;
      *(_QWORD *)&v58[6] = v40;
      _os_log_impl(&dword_182FBE000, v39, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s called with error %u (%{public}s)", buf, 0x26u);
    }
  }
  if ((*(_BYTE *)(a1 + 204) & 1) == 0)
  {
    v8 = *(_DWORD *)(a1 + 200);
    if (!v8)
      goto LABEL_25;
    if ((*(_BYTE *)(a1 + 204) & 0x10) != 0)
    {
      if ((v8 & 1) != 0)
        goto LABEL_25;
      __nwlog_obj();
      *(_DWORD *)buf = 136446722;
      v54 = "nw_http2_transport_send_goaway";
      v55 = 2082;
      v56 = a1 + 205;
      v57 = 1024;
      *(_DWORD *)v58 = v8;
      v9 = (void *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      v51 = 0;
      if (__nwlog_fault((const char *)v9, &type, &v51))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          v10 = __nwlog_obj();
          v11 = type;
          if (!os_log_type_enabled(v10, type))
            goto LABEL_111;
          *(_DWORD *)buf = 136446722;
          v54 = "nw_http2_transport_send_goaway";
          v55 = 2082;
          v56 = a1 + 205;
          v57 = 1024;
          *(_DWORD *)v58 = v8;
          v12 = "%{public}s %{public}s Last stream value %d is even, but we are the server";
          goto LABEL_110;
        }
        if (!v51)
        {
          v10 = __nwlog_obj();
          v11 = type;
          if (!os_log_type_enabled(v10, type))
            goto LABEL_111;
          *(_DWORD *)buf = 136446722;
          v54 = "nw_http2_transport_send_goaway";
          v55 = 2082;
          v56 = a1 + 205;
          v57 = 1024;
          *(_DWORD *)v58 = v8;
          v12 = "%{public}s %{public}s Last stream value %d is even, but we are the server, backtrace limit exceeded";
          goto LABEL_110;
        }
        v47 = (char *)__nw_create_backtrace_string();
        v10 = __nwlog_obj();
        v11 = type;
        v48 = os_log_type_enabled(v10, type);
        if (v47)
        {
          if (v48)
          {
            *(_DWORD *)buf = 136446978;
            v54 = "nw_http2_transport_send_goaway";
            v55 = 2082;
            v56 = a1 + 205;
            v57 = 1024;
            *(_DWORD *)v58 = v8;
            *(_WORD *)&v58[4] = 2082;
            *(_QWORD *)&v58[6] = v47;
            _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s %{public}s Last stream value %d is even, but we are the server, dumping backtrace:%{public}s", buf, 0x26u);
          }
          free(v47);
          if (!v9)
          {
LABEL_25:
            *(_BYTE *)(a1 + 204) |= 1u;
            if (!nghttp2_submit_goaway())
            {
LABEL_42:
              if (gLogDatapath)
              {
                v43 = __nwlog_obj();
                if (os_log_type_enabled(v43, OS_LOG_TYPE_DEBUG))
                {
                  v44 = nghttp2_http2_strerror();
                  *(_DWORD *)buf = 136447234;
                  v54 = "nw_http2_transport_send_goaway";
                  v55 = 2082;
                  v56 = a1 + 205;
                  v57 = 1024;
                  *(_DWORD *)v58 = v8;
                  *(_WORD *)&v58[4] = 1024;
                  *(_DWORD *)&v58[6] = 0;
                  *(_WORD *)&v58[10] = 2082;
                  *(_QWORD *)&v58[12] = v44;
                  _os_log_impl(&dword_182FBE000, v43, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s submitted GOAWAY frame with last_stream %d and error %u (%{public}s)", buf, 0x2Cu);
                }
              }
              nw_http2_transport_session_send(a1);
              goto LABEL_44;
            }
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v13 = nghttp2_strerror();
            *(_DWORD *)buf = 136446466;
            v54 = "nw_http2_transport_send_goaway";
            v55 = 2082;
            v56 = v13;
            v14 = (char *)_os_log_send_and_compose_impl();
            type = OS_LOG_TYPE_ERROR;
            v51 = 0;
            if (__nwlog_fault(v14, &type, &v51))
            {
              if (type == OS_LOG_TYPE_FAULT)
              {
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                v15 = gLogObj;
                v16 = type;
                if (!os_log_type_enabled((os_log_t)gLogObj, type))
                  goto LABEL_40;
                v17 = nghttp2_strerror();
                *(_DWORD *)buf = 136446466;
                v54 = "nw_http2_transport_send_goaway";
                v55 = 2082;
                v56 = v17;
                v18 = "%{public}s nghttp2_submit_goaway: %{public}s failed";
                goto LABEL_39;
              }
              if (!v51)
              {
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                v15 = gLogObj;
                v16 = type;
                if (!os_log_type_enabled((os_log_t)gLogObj, type))
                  goto LABEL_40;
                v22 = nghttp2_strerror();
                *(_DWORD *)buf = 136446466;
                v54 = "nw_http2_transport_send_goaway";
                v55 = 2082;
                v56 = v22;
                v18 = "%{public}s nghttp2_submit_goaway: %{public}s failed, backtrace limit exceeded";
                goto LABEL_39;
              }
              v19 = (char *)__nw_create_backtrace_string();
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v15 = gLogObj;
              v16 = type;
              v20 = os_log_type_enabled((os_log_t)gLogObj, type);
              if (v19)
              {
                if (v20)
                {
                  v21 = nghttp2_strerror();
                  *(_DWORD *)buf = 136446722;
                  v54 = "nw_http2_transport_send_goaway";
                  v55 = 2082;
                  v56 = v21;
                  v57 = 2082;
                  *(_QWORD *)v58 = v19;
                  _os_log_impl(&dword_182FBE000, v15, v16, "%{public}s nghttp2_submit_goaway: %{public}s failed, dumping backtrace:%{public}s", buf, 0x20u);
                }
                free(v19);
                goto LABEL_40;
              }
              if (v20)
              {
                v23 = nghttp2_strerror();
                *(_DWORD *)buf = 136446466;
                v54 = "nw_http2_transport_send_goaway";
                v55 = 2082;
                v56 = v23;
                v18 = "%{public}s nghttp2_submit_goaway: %{public}s failed, no backtrace";
LABEL_39:
                _os_log_impl(&dword_182FBE000, v15, v16, v18, buf, 0x16u);
              }
            }
LABEL_40:
            if (v14)
              free(v14);
            goto LABEL_42;
          }
LABEL_112:
          free(v9);
          goto LABEL_25;
        }
        if (v48)
        {
          *(_DWORD *)buf = 136446722;
          v54 = "nw_http2_transport_send_goaway";
          v55 = 2082;
          v56 = a1 + 205;
          v57 = 1024;
          *(_DWORD *)v58 = v8;
          v12 = "%{public}s %{public}s Last stream value %d is even, but we are the server, no backtrace";
LABEL_110:
          _os_log_impl(&dword_182FBE000, v10, v11, v12, buf, 0x1Cu);
        }
      }
    }
    else
    {
      if ((v8 & 1) == 0)
        goto LABEL_25;
      __nwlog_obj();
      *(_DWORD *)buf = 136446722;
      v54 = "nw_http2_transport_send_goaway";
      v55 = 2082;
      v56 = a1 + 205;
      v57 = 1024;
      *(_DWORD *)v58 = v8;
      v9 = (void *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      v51 = 0;
      if (__nwlog_fault((const char *)v9, &type, &v51))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          v10 = __nwlog_obj();
          v11 = type;
          if (!os_log_type_enabled(v10, type))
            goto LABEL_111;
          *(_DWORD *)buf = 136446722;
          v54 = "nw_http2_transport_send_goaway";
          v55 = 2082;
          v56 = a1 + 205;
          v57 = 1024;
          *(_DWORD *)v58 = v8;
          v12 = "%{public}s %{public}s Last stream value %d is odd, but we are the client";
          goto LABEL_110;
        }
        if (!v51)
        {
          v10 = __nwlog_obj();
          v11 = type;
          if (!os_log_type_enabled(v10, type))
            goto LABEL_111;
          *(_DWORD *)buf = 136446722;
          v54 = "nw_http2_transport_send_goaway";
          v55 = 2082;
          v56 = a1 + 205;
          v57 = 1024;
          *(_DWORD *)v58 = v8;
          v12 = "%{public}s %{public}s Last stream value %d is odd, but we are the client, backtrace limit exceeded";
          goto LABEL_110;
        }
        v45 = (char *)__nw_create_backtrace_string();
        v10 = __nwlog_obj();
        v11 = type;
        v46 = os_log_type_enabled(v10, type);
        if (!v45)
        {
          if (!v46)
            goto LABEL_111;
          *(_DWORD *)buf = 136446722;
          v54 = "nw_http2_transport_send_goaway";
          v55 = 2082;
          v56 = a1 + 205;
          v57 = 1024;
          *(_DWORD *)v58 = v8;
          v12 = "%{public}s %{public}s Last stream value %d is odd, but we are the client, no backtrace";
          goto LABEL_110;
        }
        if (v46)
        {
          *(_DWORD *)buf = 136446978;
          v54 = "nw_http2_transport_send_goaway";
          v55 = 2082;
          v56 = a1 + 205;
          v57 = 1024;
          *(_DWORD *)v58 = v8;
          *(_WORD *)&v58[4] = 2082;
          *(_QWORD *)&v58[6] = v45;
          _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s %{public}s Last stream value %d is odd, but we are the client, dumping backtrace:%{public}s", buf, 0x26u);
        }
        free(v45);
      }
    }
LABEL_111:
    if (!v9)
      goto LABEL_25;
    goto LABEL_112;
  }
  if (gLogDatapath)
  {
    v6 = __nwlog_obj();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446466;
      v54 = "nw_http2_transport_send_goaway";
      v55 = 2082;
      v56 = a1 + 205;
      v7 = "%{public}s %{public}s already sent goaway, skipping";
      goto LABEL_23;
    }
  }
LABEL_44:
  v24 = *(char **)(a1 + 112);
  if (v24)
  {
    v49[0] = v4;
    v49[1] = 0x40000000;
    v49[2] = ___ZL35nw_http2_transport_connection_closeP27nw_protocol_http2_transport_block_invoke_18;
    v49[3] = &__block_descriptor_tmp_19_37001;
    v49[4] = a1;
    nw_hash_table_apply(v24, (uint64_t)v49);
    return;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v25 = a1 + 205;
  *(_DWORD *)buf = 136446466;
  v54 = "nw_http2_transport_connection_close";
  v55 = 2082;
  v56 = a1 + 205;
  v26 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v51 = 0;
  if (!__nwlog_fault(v26, &type, &v51))
  {
LABEL_62:
    if (!v26)
      return;
    goto LABEL_63;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v27 = gLogObj;
    v28 = type;
    if (!os_log_type_enabled((os_log_t)gLogObj, type))
      goto LABEL_62;
    *(_DWORD *)buf = 136446466;
    v54 = "nw_http2_transport_connection_close";
    v55 = 2082;
    v56 = v25;
    v29 = "%{public}s %{public}s protocol table is NULL, cannot notify input handlers";
LABEL_60:
    v32 = v27;
    v33 = v28;
    v34 = 22;
LABEL_61:
    _os_log_impl(&dword_182FBE000, v32, v33, v29, buf, v34);
    goto LABEL_62;
  }
  if (!v51)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v27 = gLogObj;
    v28 = type;
    if (!os_log_type_enabled((os_log_t)gLogObj, type))
      goto LABEL_62;
    *(_DWORD *)buf = 136446466;
    v54 = "nw_http2_transport_connection_close";
    v55 = 2082;
    v56 = v25;
    v29 = "%{public}s %{public}s protocol table is NULL, cannot notify input handlers, backtrace limit exceeded";
    goto LABEL_60;
  }
  v30 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v27 = gLogObj;
  v28 = type;
  v31 = os_log_type_enabled((os_log_t)gLogObj, type);
  if (!v30)
  {
    if (!v31)
      goto LABEL_62;
    *(_DWORD *)buf = 136446466;
    v54 = "nw_http2_transport_connection_close";
    v55 = 2082;
    v56 = v25;
    v29 = "%{public}s %{public}s protocol table is NULL, cannot notify input handlers, no backtrace";
    goto LABEL_60;
  }
  if (v31)
  {
    *(_DWORD *)buf = 136446722;
    v54 = "nw_http2_transport_connection_close";
    v55 = 2082;
    v56 = v25;
    v57 = 2082;
    *(_QWORD *)v58 = v30;
    _os_log_impl(&dword_182FBE000, v27, v28, "%{public}s %{public}s protocol table is NULL, cannot notify input handlers, dumping backtrace:%{public}s", buf, 0x20u);
  }
  free(v30);
  if (v26)
LABEL_63:
    free(v26);
}

void nw_http2_transport_stream_close(uint64_t a1, uint64_t a2)
{
  int *v4;
  char v5;
  NSObject *v6;
  NSObject *v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  const char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint32_t v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  _BOOL8 node;
  NSObject *v21;
  int v22;
  const char *v23;
  uint64_t v24;
  int v25;
  const char *v26;
  NSObject *v27;
  os_log_type_t v28;
  uint64_t v29;
  int v30;
  int v31;
  char *v32;
  NSObject *v33;
  os_log_type_t v34;
  int v35;
  const char *v36;
  char *v37;
  _BOOL4 v38;
  int v39;
  int v40;
  int v41;
  int v42;
  NSObject *v43;
  const char *v44;
  char *v45;
  NSObject *v46;
  os_log_type_t v47;
  const char *v48;
  NSObject *v49;
  int v50;
  NSObject *v51;
  int v52;
  char *backtrace_string;
  _BOOL4 v54;
  NSObject *v55;
  int v56;
  char *v57;
  _BOOL4 v58;
  NSObject *v59;
  char v60;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v63;
  __int16 v64;
  void *v65;
  __int16 v66;
  int v67;
  __int16 v68;
  uint64_t v69;
  uint64_t v70;

  v70 = *MEMORY[0x1E0C80C00];
  if (gLogDatapath)
  {
    v43 = __nwlog_obj();
    if (os_log_type_enabled(v43, OS_LOG_TYPE_DEBUG))
    {
      v44 = "";
      if (a1)
        v44 = (const char *)(a1 + 205);
      *(_DWORD *)buf = 136446466;
      v63 = "nw_http2_transport_stream_close";
      v64 = 2082;
      v65 = (void *)v44;
      _os_log_impl(&dword_182FBE000, v43, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s called", buf, 0x16u);
    }
  }
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v63 = "nw_http2_transport_stream_close";
    v45 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v60 = 0;
    if (!__nwlog_fault(v45, &type, &v60))
      goto LABEL_100;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v46 = __nwlog_obj();
      v47 = type;
      if (!os_log_type_enabled(v46, type))
        goto LABEL_100;
      *(_DWORD *)buf = 136446210;
      v63 = "nw_http2_transport_stream_close";
      v48 = "%{public}s called with null http2_transport";
      goto LABEL_99;
    }
    if (!v60)
    {
      v46 = __nwlog_obj();
      v47 = type;
      if (!os_log_type_enabled(v46, type))
        goto LABEL_100;
      *(_DWORD *)buf = 136446210;
      v63 = "nw_http2_transport_stream_close";
      v48 = "%{public}s called with null http2_transport, backtrace limit exceeded";
      goto LABEL_99;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v46 = __nwlog_obj();
    v47 = type;
    v54 = os_log_type_enabled(v46, type);
    if (!backtrace_string)
    {
      if (!v54)
        goto LABEL_100;
      *(_DWORD *)buf = 136446210;
      v63 = "nw_http2_transport_stream_close";
      v48 = "%{public}s called with null http2_transport, no backtrace";
      goto LABEL_99;
    }
    if (v54)
    {
      *(_DWORD *)buf = 136446466;
      v63 = "nw_http2_transport_stream_close";
      v64 = 2082;
      v65 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v46, v47, "%{public}s called with null http2_transport, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(backtrace_string);
LABEL_100:
    if (!v45)
      return;
    goto LABEL_101;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v63 = "nw_http2_transport_stream_close";
    v45 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v60 = 0;
    if (!__nwlog_fault(v45, &type, &v60))
      goto LABEL_100;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v46 = __nwlog_obj();
      v47 = type;
      if (!os_log_type_enabled(v46, type))
        goto LABEL_100;
      *(_DWORD *)buf = 136446210;
      v63 = "nw_http2_transport_stream_close";
      v48 = "%{public}s called with null stream";
      goto LABEL_99;
    }
    if (!v60)
    {
      v46 = __nwlog_obj();
      v47 = type;
      if (!os_log_type_enabled(v46, type))
        goto LABEL_100;
      *(_DWORD *)buf = 136446210;
      v63 = "nw_http2_transport_stream_close";
      v48 = "%{public}s called with null stream, backtrace limit exceeded";
      goto LABEL_99;
    }
    v57 = (char *)__nw_create_backtrace_string();
    v46 = __nwlog_obj();
    v47 = type;
    v58 = os_log_type_enabled(v46, type);
    if (v57)
    {
      if (v58)
      {
        *(_DWORD *)buf = 136446466;
        v63 = "nw_http2_transport_stream_close";
        v64 = 2082;
        v65 = v57;
        _os_log_impl(&dword_182FBE000, v46, v47, "%{public}s called with null stream, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v57);
      if (!v45)
        return;
LABEL_101:
      free(v45);
      return;
    }
    if (v58)
    {
      *(_DWORD *)buf = 136446210;
      v63 = "nw_http2_transport_stream_close";
      v48 = "%{public}s called with null stream, no backtrace";
LABEL_99:
      _os_log_impl(&dword_182FBE000, v46, v47, v48, buf, 0xCu);
      goto LABEL_100;
    }
    goto LABEL_100;
  }
  if ((*(_BYTE *)(a2 + 36) & 1) == 0)
  {
    if (gLogDatapath)
    {
      v55 = __nwlog_obj();
      if (os_log_type_enabled(v55, OS_LOG_TYPE_DEBUG))
      {
        v56 = *(_DWORD *)(a2 + 32);
        *(_DWORD *)buf = 136446722;
        v63 = "nw_http2_transport_stream_close";
        v64 = 2082;
        v65 = (void *)(a1 + 205);
        v66 = 1024;
        v67 = v56;
        _os_log_impl(&dword_182FBE000, v55, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s closing stream %d that is already closed", buf, 0x1Cu);
      }
    }
  }
  v4 = (int *)(a2 + 32);
  v5 = *(_BYTE *)(a2 + 36);
  if (*(_DWORD *)(a2 + 32) != -1)
  {
    if ((*(_BYTE *)(a2 + 36) & 1) == 0)
    {
      if (!gLogDatapath)
        goto LABEL_27;
      v6 = __nwlog_obj();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446466;
        v63 = "nw_http2_transport_stream_close";
        v64 = 2082;
        v65 = (void *)(a1 + 205);
        _os_log_impl(&dword_182FBE000, v6, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s not sending RST_STREAM, since we are already closed from nghttp2's perspective", buf, 0x16u);
      }
LABEL_26:
      if (gLogDatapath)
      {
        v49 = __nwlog_obj();
        if (os_log_type_enabled(v49, OS_LOG_TYPE_DEBUG))
        {
          v50 = *(_DWORD *)(a2 + 32);
          *(_DWORD *)buf = 136446978;
          v63 = "nw_http2_transport_remove_from_id_table";
          v64 = 2082;
          v65 = (void *)(a1 + 205);
          v66 = 1024;
          v67 = v50;
          v68 = 2048;
          v69 = a2;
          _os_log_impl(&dword_182FBE000, v49, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s called for stream %d (%p)", buf, 0x26u);
        }
      }
LABEL_27:
      v19 = *(_QWORD *)(a1 + 120);
      if (v19)
      {
        node = nw_hash_table_get_node(v19, a2 + 32, 4);
        if (node)
        {
          if (nw_hash_table_remove_node(*(_QWORD *)(a1 + 120), node))
          {
            if (!gLogDatapath)
            {
LABEL_58:
              *v4 = -1;
              return;
            }
            v21 = __nwlog_obj();
            if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
            {
LABEL_57:
              if (gLogDatapath)
              {
                v51 = __nwlog_obj();
                if (os_log_type_enabled(v51, OS_LOG_TYPE_DEBUG))
                {
                  v52 = *v4;
                  *(_DWORD *)buf = 136446722;
                  v63 = "nw_http2_transport_stream_close";
                  v64 = 2082;
                  v65 = (void *)(a1 + 205);
                  v66 = 1024;
                  v67 = v52;
                  _os_log_impl(&dword_182FBE000, v51, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s removed stream %d from id based table", buf, 0x1Cu);
                }
              }
              goto LABEL_58;
            }
            v22 = *v4;
            *(_DWORD *)buf = 136446722;
            v63 = "nw_http2_transport_remove_from_id_table";
            v64 = 2082;
            v65 = (void *)(a1 + 205);
            v66 = 1024;
            v67 = v22;
            v23 = "%{public}s %{public}s removed stream %d from id based table";
LABEL_56:
            _os_log_impl(&dword_182FBE000, v21, OS_LOG_TYPE_DEBUG, v23, buf, 0x1Cu);
            goto LABEL_57;
          }
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v31 = *v4;
          *(_DWORD *)buf = 136446722;
          v63 = "nw_http2_transport_remove_from_id_table";
          v64 = 2082;
          v65 = (void *)(a1 + 205);
          v66 = 1024;
          v67 = v31;
          v32 = (char *)_os_log_send_and_compose_impl();
          type = OS_LOG_TYPE_ERROR;
          v60 = 0;
          if (!__nwlog_fault(v32, &type, &v60))
            goto LABEL_52;
          if (type == OS_LOG_TYPE_FAULT)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v33 = gLogObj;
            v34 = type;
            if (!os_log_type_enabled((os_log_t)gLogObj, type))
              goto LABEL_52;
            v35 = *v4;
            *(_DWORD *)buf = 136446722;
            v63 = "nw_http2_transport_remove_from_id_table";
            v64 = 2082;
            v65 = (void *)(a1 + 205);
            v66 = 1024;
            v67 = v35;
            v36 = "%{public}s %{public}s failed to remove id node for stream %d from table";
          }
          else if (v60)
          {
            v37 = (char *)__nw_create_backtrace_string();
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v33 = gLogObj;
            v34 = type;
            v38 = os_log_type_enabled((os_log_t)gLogObj, type);
            if (v37)
            {
              if (v38)
              {
                v39 = *v4;
                *(_DWORD *)buf = 136446978;
                v63 = "nw_http2_transport_remove_from_id_table";
                v64 = 2082;
                v65 = (void *)(a1 + 205);
                v66 = 1024;
                v67 = v39;
                v68 = 2082;
                v69 = (uint64_t)v37;
                _os_log_impl(&dword_182FBE000, v33, v34, "%{public}s %{public}s failed to remove id node for stream %d from table, dumping backtrace:%{public}s", buf, 0x26u);
              }
              free(v37);
              goto LABEL_52;
            }
            if (!v38)
            {
LABEL_52:
              if (v32)
                free(v32);
              goto LABEL_54;
            }
            v41 = *v4;
            *(_DWORD *)buf = 136446722;
            v63 = "nw_http2_transport_remove_from_id_table";
            v64 = 2082;
            v65 = (void *)(a1 + 205);
            v66 = 1024;
            v67 = v41;
            v36 = "%{public}s %{public}s failed to remove id node for stream %d from table, no backtrace";
          }
          else
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v33 = gLogObj;
            v34 = type;
            if (!os_log_type_enabled((os_log_t)gLogObj, type))
              goto LABEL_52;
            v40 = *v4;
            *(_DWORD *)buf = 136446722;
            v63 = "nw_http2_transport_remove_from_id_table";
            v64 = 2082;
            v65 = (void *)(a1 + 205);
            v66 = 1024;
            v67 = v40;
            v36 = "%{public}s %{public}s failed to remove id node for stream %d from table, backtrace limit exceeded";
          }
          _os_log_impl(&dword_182FBE000, v33, v34, v36, buf, 0x1Cu);
          goto LABEL_52;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v29 = gLogObj;
        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
        {
          v30 = *v4;
          *(_DWORD *)buf = 136446722;
          v63 = "nw_http2_transport_remove_from_id_table";
          v64 = 2082;
          v65 = (void *)(a1 + 205);
          v66 = 1024;
          v67 = v30;
          v26 = "%{public}s %{public}s stream %d is not present in id based table, will not remove";
          v27 = v29;
          v28 = OS_LOG_TYPE_INFO;
          goto LABEL_37;
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v24 = gLogObj;
        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
        {
          v25 = *v4;
          *(_DWORD *)buf = 136446722;
          v63 = "nw_http2_transport_remove_from_id_table";
          v64 = 2082;
          v65 = (void *)(a1 + 205);
          v66 = 1024;
          v67 = v25;
          v26 = "%{public}s %{public}s id based table is NULL, cannot remove stream %d";
          v27 = v24;
          v28 = OS_LOG_TYPE_ERROR;
LABEL_37:
          _os_log_impl(&dword_182FBE000, v27, v28, v26, buf, 0x1Cu);
        }
      }
LABEL_54:
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v21 = gLogObj;
      if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
        goto LABEL_57;
      v42 = *v4;
      *(_DWORD *)buf = 136446722;
      v63 = "nw_http2_transport_stream_close";
      v64 = 2082;
      v65 = (void *)(a1 + 205);
      v66 = 1024;
      v67 = v42;
      v23 = "%{public}s %{public}s did not remove stream %d from id table";
      goto LABEL_56;
    }
    *(_BYTE *)(a2 + 36) = v5 & 0xFE;
    if (gLogDatapath)
    {
      v59 = __nwlog_obj();
      if (os_log_type_enabled(v59, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446466;
        v63 = "nw_http2_transport_stream_send_rst_stream";
        v64 = 2082;
        v65 = (void *)(a1 + 205);
        _os_log_impl(&dword_182FBE000, v59, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s called", buf, 0x16u);
      }
    }
    if (*v4 == -1)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v16 = gLogObj;
      if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
        goto LABEL_25;
      v17 = *v4;
      *(_DWORD *)buf = 136446722;
      v63 = "nw_http2_transport_stream_send_rst_stream";
      v64 = 2082;
      v65 = (void *)(a1 + 205);
      v66 = 1024;
      v67 = v17;
      v12 = "%{public}s %{public}s cannot send RST_STREAM for stream with invalid stream id %d";
      v13 = v16;
      v14 = OS_LOG_TYPE_ERROR;
    }
    else
    {
      v8 = nghttp2_submit_rst_stream();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v9 = gLogObj;
      if (v8)
      {
        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
        {
          v10 = *v4;
          v11 = nghttp2_strerror();
          *(_DWORD *)buf = 136446978;
          v63 = "nw_http2_transport_stream_send_rst_stream";
          v64 = 2082;
          v65 = (void *)(a1 + 205);
          v66 = 1024;
          v67 = v10;
          v68 = 2082;
          v69 = v11;
          v12 = "%{public}s %{public}s Failed to submit RST_STREAM on stream %d: %{public}s";
          v13 = v9;
          v14 = OS_LOG_TYPE_ERROR;
          v15 = 38;
LABEL_24:
          _os_log_impl(&dword_182FBE000, v13, v14, v12, buf, v15);
        }
LABEL_25:
        nw_http2_transport_session_send(a1);
        goto LABEL_26;
      }
      if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
        goto LABEL_25;
      v18 = *v4;
      *(_DWORD *)buf = 136446722;
      v63 = "nw_http2_transport_stream_send_rst_stream";
      v64 = 2082;
      v65 = (void *)(a1 + 205);
      v66 = 1024;
      v67 = v18;
      v12 = "%{public}s %{public}s Submitted RST_STREAM on stream %d";
      v13 = v9;
      v14 = OS_LOG_TYPE_INFO;
    }
    v15 = 28;
    goto LABEL_24;
  }
  *(_BYTE *)(a2 + 36) = v5 & 0xFE;
  *(_DWORD *)(a2 + 32) = -1;
  if (gLogDatapath)
  {
    v7 = __nwlog_obj();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446466;
      v63 = "nw_http2_transport_stream_close";
      v64 = 2082;
      v65 = (void *)(a1 + 205);
      _os_log_impl(&dword_182FBE000, v7, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s stream id is -1, skipping rst_stream and removal from id based table", buf, 0x16u);
    }
  }
}

uint64_t ___ZL35nw_http2_transport_connection_closeP27nw_protocol_http2_transport_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t object;
  uint64_t v5;
  uint64_t v6;
  int v7;
  NSObject *v8;
  uint64_t v9;
  BOOL v10;
  const char *v11;
  const char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint32_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  NSObject *v20;
  uint64_t v21;
  const char *v22;
  int v23;
  NSObject *v24;
  uint64_t v25;
  const char *v26;
  int v27;
  const char *v28;
  __int16 v29;
  const char *v30;
  __int16 v31;
  _QWORD v32[3];

  v32[2] = *MEMORY[0x1E0C80C00];
  object = nw_hash_node_get_object(a2);
  if (object)
  {
    v5 = object;
    v6 = *(_QWORD *)nw_hash_node_get_extra(a2);
    v7 = *(_DWORD *)(v5 + 32);
    if (gLogDatapath)
    {
      v20 = __nwlog_obj();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
      {
        v21 = *(_QWORD *)(a1 + 32);
        v22 = (const char *)(v21 + 205);
        v10 = v21 == 0;
        v23 = *(_DWORD *)(v5 + 32);
        if (v10)
          v22 = "";
        v27 = 136446722;
        v28 = "nw_http2_transport_connection_close_block_invoke";
        v29 = 2082;
        v30 = v22;
        v31 = 1024;
        LODWORD(v32[0]) = v23;
        _os_log_impl(&dword_182FBE000, v20, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s closing stream %d", (uint8_t *)&v27, 0x1Cu);
      }
    }
    nw_http2_transport_stream_close(*(_QWORD *)(a1 + 32), v5);
    if (v6)
    {
      if (gLogDatapath)
      {
        v8 = __nwlog_obj();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
        {
          v9 = *(_QWORD *)(a1 + 32);
          v10 = v9 == 0;
          v27 = 136446978;
          v11 = (const char *)(v9 + 205);
          v28 = "nw_http2_transport_connection_close_block_invoke";
          if (v10)
            v11 = "";
          v29 = 2082;
          v30 = v11;
          v31 = 1024;
          LODWORD(v32[0]) = v7;
          WORD2(v32[0]) = 2048;
          *(_QWORD *)((char *)v32 + 6) = v5;
          v12 = "%{public}s %{public}s deferring release of stream %d (%p), has associated input handler";
          v13 = v8;
          v14 = OS_LOG_TYPE_DEBUG;
          v15 = 38;
          goto LABEL_14;
        }
      }
    }
    else
    {
      if (gLogDatapath)
      {
        v24 = __nwlog_obj();
        if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
        {
          v25 = *(_QWORD *)(a1 + 32);
          v10 = v25 == 0;
          v27 = 136446978;
          v26 = (const char *)(v25 + 205);
          v28 = "nw_http2_transport_connection_close_block_invoke";
          if (v10)
            v26 = "";
          v29 = 2082;
          v30 = v26;
          v31 = 1024;
          LODWORD(v32[0]) = v7;
          WORD2(v32[0]) = 2048;
          *(_QWORD *)((char *)v32 + 6) = v5;
          _os_log_impl(&dword_182FBE000, v24, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s destroying stream %d (%p) immediately, no associated input handler", (uint8_t *)&v27, 0x26u);
        }
      }
      nw_http2_transport_release_frame_array((nw_frame_array_s *)v5);
      nw_http2_transport_release_frame_array((nw_frame_array_s *)(v5 + 16));
      free((void *)v5);
    }
  }
  else
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v16 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      v17 = *(_QWORD *)(a1 + 32);
      v27 = 136446722;
      v28 = "nw_http2_transport_connection_close_block_invoke";
      if (v17)
        v18 = (const char *)(v17 + 205);
      else
        v18 = "";
      v29 = 2082;
      v30 = v18;
      v31 = 2048;
      v32[0] = a2;
      v12 = "%{public}s %{public}s stream in node %p in id table is NULL, skipping rst stream";
      v13 = v16;
      v14 = OS_LOG_TYPE_ERROR;
      v15 = 32;
LABEL_14:
      _os_log_impl(&dword_182FBE000, v13, v14, v12, (uint8_t *)&v27, v15);
    }
  }
  return 1;
}

uint64_t ___ZL35nw_http2_transport_connection_closeP27nw_protocol_http2_transport_block_invoke_18(uint64_t a1, uint64_t a2)
{
  uint64_t object;
  NSObject *v5;
  uint64_t v6;
  const char *v7;
  int v9;
  const char *v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  object = nw_hash_node_get_object(a2);
  if (object)
  {
    nw_http2_transport_protocol_close(*(_QWORD *)(a1 + 32), object);
  }
  else
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v5 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      v6 = *(_QWORD *)(a1 + 32);
      v9 = 136446722;
      v10 = "nw_http2_transport_connection_close_block_invoke";
      if (v6)
        v7 = (const char *)(v6 + 205);
      else
        v7 = "";
      v11 = 2082;
      v12 = v7;
      v13 = 2048;
      v14 = a2;
      _os_log_impl(&dword_182FBE000, v5, OS_LOG_TYPE_ERROR, "%{public}s %{public}s input protocol in node %p in protocol table is NULL, skipping", (uint8_t *)&v9, 0x20u);
    }
  }
  return 1;
}

void nw_http2_transport_protocol_close(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  void (*v6)(uint64_t, uint64_t);
  NSObject *v7;
  const char *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  const char *v12;
  NSObject *v13;
  char *backtrace_string;
  _BOOL4 v15;
  char *v16;
  _BOOL4 v17;
  char v18;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v21;
  __int16 v22;
  void *v23;
  __int16 v24;
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if (gLogDatapath)
  {
    v7 = __nwlog_obj();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      v8 = "";
      if (a1)
        v8 = (const char *)(a1 + 205);
      *(_DWORD *)buf = 136446466;
      v21 = "nw_http2_transport_protocol_close";
      v22 = 2082;
      v23 = (void *)v8;
      _os_log_impl(&dword_182FBE000, v7, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s called", buf, 0x16u);
    }
  }
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v21 = "nw_http2_transport_protocol_close";
    v9 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v18 = 0;
    if (!__nwlog_fault(v9, &type, &v18))
      goto LABEL_45;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v10 = __nwlog_obj();
      v11 = type;
      if (!os_log_type_enabled(v10, type))
        goto LABEL_45;
      *(_DWORD *)buf = 136446210;
      v21 = "nw_http2_transport_protocol_close";
      v12 = "%{public}s called with null http2_transport";
    }
    else if (v18)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v10 = __nwlog_obj();
      v11 = type;
      v15 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          v21 = "nw_http2_transport_protocol_close";
          v22 = 2082;
          v23 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null http2_transport, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_45:
        if (!v9)
          return;
LABEL_46:
        free(v9);
        return;
      }
      if (!v15)
        goto LABEL_45;
      *(_DWORD *)buf = 136446210;
      v21 = "nw_http2_transport_protocol_close";
      v12 = "%{public}s called with null http2_transport, no backtrace";
    }
    else
    {
      v10 = __nwlog_obj();
      v11 = type;
      if (!os_log_type_enabled(v10, type))
        goto LABEL_45;
      *(_DWORD *)buf = 136446210;
      v21 = "nw_http2_transport_protocol_close";
      v12 = "%{public}s called with null http2_transport, backtrace limit exceeded";
    }
LABEL_44:
    _os_log_impl(&dword_182FBE000, v10, v11, v12, buf, 0xCu);
    goto LABEL_45;
  }
  if (a2)
  {
    v4 = *(_QWORD *)(a2 + 24);
    if (v4)
    {
      v5 = *(void (**)(uint64_t, uint64_t))(v4 + 184);
      if (!v5 || (v5(a2, a1), (v4 = *(_QWORD *)(a2 + 24)) != 0))
      {
        v6 = *(void (**)(uint64_t, uint64_t))(v4 + 48);
        if (v6)
          v6(a2, a1);
      }
    }
    if (gLogDatapath)
    {
      v13 = __nwlog_obj();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446722;
        v21 = "nw_http2_transport_protocol_close";
        v22 = 2082;
        v23 = (void *)(a1 + 205);
        v24 = 2048;
        v25 = a2;
        _os_log_impl(&dword_182FBE000, v13, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s sent input_finished and disconnected to protocol %p", buf, 0x20u);
      }
    }
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v21 = "nw_http2_transport_protocol_close";
  v9 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v18 = 0;
  if (!__nwlog_fault(v9, &type, &v18))
    goto LABEL_45;
  if (type == OS_LOG_TYPE_FAULT)
  {
    v10 = __nwlog_obj();
    v11 = type;
    if (!os_log_type_enabled(v10, type))
      goto LABEL_45;
    *(_DWORD *)buf = 136446210;
    v21 = "nw_http2_transport_protocol_close";
    v12 = "%{public}s called with null input_protocol";
    goto LABEL_44;
  }
  if (!v18)
  {
    v10 = __nwlog_obj();
    v11 = type;
    if (!os_log_type_enabled(v10, type))
      goto LABEL_45;
    *(_DWORD *)buf = 136446210;
    v21 = "nw_http2_transport_protocol_close";
    v12 = "%{public}s called with null input_protocol, backtrace limit exceeded";
    goto LABEL_44;
  }
  v16 = (char *)__nw_create_backtrace_string();
  v10 = __nwlog_obj();
  v11 = type;
  v17 = os_log_type_enabled(v10, type);
  if (!v16)
  {
    if (!v17)
      goto LABEL_45;
    *(_DWORD *)buf = 136446210;
    v21 = "nw_http2_transport_protocol_close";
    v12 = "%{public}s called with null input_protocol, no backtrace";
    goto LABEL_44;
  }
  if (v17)
  {
    *(_DWORD *)buf = 136446466;
    v21 = "nw_http2_transport_protocol_close";
    v22 = 2082;
    v23 = v16;
    _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null input_protocol, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v16);
  if (v9)
    goto LABEL_46;
}

void nw_http2_transport_release_frame_array(nw_frame_array_s *a1)
{
  NSObject *v2;
  nw_frame *tqh_first;
  uint64_t v4;
  nw_frame **v5;
  void *buffer;
  int v7;
  const char *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (gLogDatapath)
  {
    v2 = __nwlog_obj();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    {
      v7 = 136446210;
      v8 = "nw_http2_transport_release_frame_array";
      _os_log_impl(&dword_182FBE000, v2, OS_LOG_TYPE_DEBUG, "%{public}s called", (uint8_t *)&v7, 0xCu);
    }
  }
  while (1)
  {
    tqh_first = a1->tqh_first;
    if (!a1->tqh_first)
      break;
    v4 = *((_QWORD *)tqh_first + 2);
    v5 = (nw_frame **)*((_QWORD *)tqh_first + 3);
    if (v4)
    {
      *(_QWORD *)(v4 + 24) = v5;
      v5 = (nw_frame **)*((_QWORD *)tqh_first + 3);
    }
    else
    {
      a1->tqh_last = v5;
    }
    *v5 = (nw_frame *)v4;
    *((_QWORD *)tqh_first + 2) = 0;
    *((_QWORD *)tqh_first + 3) = 0;
    buffer = (void *)nw_frame_get_buffer((uint64_t)tqh_first, 0);
    if (buffer)
      free(buffer);
    nw_frame_reset((uint64_t)tqh_first, 0, 0, 0, 0);
    os_release(tqh_first);
  }
}

uint64_t ___ZL13send_callbackP15nghttp2_sessionPKhmiPv_block_invoke(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  NSObject *v16;
  uint64_t v17;
  const char *v18;
  unsigned int v19;
  uint8_t buf[4];
  const char *v21;
  __int16 v22;
  const char *v23;
  __int16 v24;
  int v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v19 = 0;
  v4 = (void *)nw_frame_unclaimed_bytes(a2, &v19);
  v5 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  v6 = *(_DWORD *)(a1 + 40) - v5;
  if (v6 >= v19)
    v7 = v19;
  else
    v7 = v6;
  memcpy(v4, (const void *)(*(_QWORD *)(a1 + 48) + v5), v7);
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) += v7;
  nw_frame_claim(a2, v8, v7, 0);
  nw_frame_collapse(a2);
  nw_frame_unclaim(a2, v9, v7, 0);
  v11 = *(_QWORD *)(a2 + 32);
  v12 = *(_QWORD **)(a2 + 40);
  v10 = (_QWORD *)(a2 + 32);
  if (v11)
  {
    *(_QWORD *)(v11 + 40) = v12;
    v12 = *(_QWORD **)(a2 + 40);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) = v12;
  }
  *v12 = v11;
  *v10 = 0;
  *(_QWORD *)(a2 + 40) = 0;
  v13 = *(_QWORD *)(a1 + 72);
  v14 = *(uint64_t **)(v13 + 8);
  *(_QWORD *)(a2 + 40) = v14;
  *v14 = a2;
  *(_QWORD *)(v13 + 8) = v10;
  if (gLogDatapath)
  {
    v16 = __nwlog_obj();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
    {
      v17 = *(_QWORD *)(a1 + 56);
      *(_DWORD *)buf = 136446722;
      v21 = "send_callback_block_invoke";
      if (v17)
        v18 = (const char *)(v17 + 205);
      else
        v18 = "";
      v22 = 2082;
      v23 = v18;
      v24 = 1024;
      v25 = v7;
      _os_log_impl(&dword_182FBE000, v16, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s copied %u bytes into output frame", buf, 0x1Cu);
    }
  }
  return 1;
}

uint64_t nw_http2_transport_drain_next_frame_for_stream(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v8;
  _BOOL8 v9;
  int v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  NSObject *v17;
  const char *v18;
  char *v19;
  NSObject *v20;
  os_log_type_t v21;
  const char *v22;
  NSObject *v23;
  int v24;
  NSObject *v25;
  int v26;
  char *backtrace_string;
  _BOOL4 v28;
  const char *v29;
  _BOOL4 v30;
  const char *v31;
  char *v32;
  NSObject *v33;
  os_log_type_t v34;
  const char *v35;
  const char *v36;
  NSObject *v37;
  NSObject *v38;
  int v39;
  int v40;
  NSObject *v41;
  int v42;
  char *v43;
  _BOOL4 v44;
  const char *v45;
  const char *v46;
  NSObject *v47;
  const char *v48;
  char v49;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v52;
  __int16 v53;
  void *v54;
  __int16 v55;
  _BYTE v56[10];
  int v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  if (gLogDatapath)
  {
    v17 = __nwlog_obj();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
    {
      v18 = "";
      if (a1)
        v18 = (const char *)(a1 + 205);
      *(_DWORD *)buf = 136446466;
      v52 = "nw_http2_transport_drain_next_frame_for_stream";
      v53 = 2082;
      v54 = (void *)v18;
      _os_log_impl(&dword_182FBE000, v17, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s called", buf, 0x16u);
    }
  }
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v52 = "nw_http2_transport_drain_next_frame_for_stream";
    v19 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v49 = 0;
    if (!__nwlog_fault(v19, &type, &v49))
      goto LABEL_89;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v49)
      {
        v20 = __nwlog_obj();
        v21 = type;
        if (!os_log_type_enabled(v20, type))
          goto LABEL_89;
        *(_DWORD *)buf = 136446210;
        v52 = "nw_http2_transport_drain_next_frame_for_stream";
        v22 = "%{public}s called with null http2_transport, backtrace limit exceeded";
        goto LABEL_88;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v20 = __nwlog_obj();
      v21 = type;
      v28 = os_log_type_enabled(v20, type);
      if (!backtrace_string)
      {
        if (!v28)
          goto LABEL_89;
        *(_DWORD *)buf = 136446210;
        v52 = "nw_http2_transport_drain_next_frame_for_stream";
        v22 = "%{public}s called with null http2_transport, no backtrace";
        goto LABEL_88;
      }
      if (v28)
      {
        *(_DWORD *)buf = 136446466;
        v52 = "nw_http2_transport_drain_next_frame_for_stream";
        v53 = 2082;
        v54 = backtrace_string;
        v29 = "%{public}s called with null http2_transport, dumping backtrace:%{public}s";
LABEL_55:
        _os_log_impl(&dword_182FBE000, v20, v21, v29, buf, 0x16u);
      }
LABEL_56:
      free(backtrace_string);
      goto LABEL_89;
    }
    v20 = __nwlog_obj();
    v21 = type;
    if (!os_log_type_enabled(v20, type))
      goto LABEL_89;
    *(_DWORD *)buf = 136446210;
    v52 = "nw_http2_transport_drain_next_frame_for_stream";
    v22 = "%{public}s called with null http2_transport";
LABEL_88:
    _os_log_impl(&dword_182FBE000, v20, v21, v22, buf, 0xCu);
LABEL_89:
    if (v19)
      free(v19);
    return 0;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v52 = "nw_http2_transport_drain_next_frame_for_stream";
    v19 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v49 = 0;
    if (!__nwlog_fault(v19, &type, &v49))
      goto LABEL_89;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v20 = __nwlog_obj();
      v21 = type;
      if (!os_log_type_enabled(v20, type))
        goto LABEL_89;
      *(_DWORD *)buf = 136446210;
      v52 = "nw_http2_transport_drain_next_frame_for_stream";
      v22 = "%{public}s called with null input_handler";
      goto LABEL_88;
    }
    if (!v49)
    {
      v20 = __nwlog_obj();
      v21 = type;
      if (!os_log_type_enabled(v20, type))
        goto LABEL_89;
      *(_DWORD *)buf = 136446210;
      v52 = "nw_http2_transport_drain_next_frame_for_stream";
      v22 = "%{public}s called with null input_handler, backtrace limit exceeded";
      goto LABEL_88;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v20 = __nwlog_obj();
    v21 = type;
    v30 = os_log_type_enabled(v20, type);
    if (backtrace_string)
    {
      if (v30)
      {
        *(_DWORD *)buf = 136446466;
        v52 = "nw_http2_transport_drain_next_frame_for_stream";
        v53 = 2082;
        v54 = backtrace_string;
        v29 = "%{public}s called with null input_handler, dumping backtrace:%{public}s";
        goto LABEL_55;
      }
      goto LABEL_56;
    }
    if (!v30)
      goto LABEL_89;
    *(_DWORD *)buf = 136446210;
    v52 = "nw_http2_transport_drain_next_frame_for_stream";
    v22 = "%{public}s called with null input_handler, no backtrace";
    goto LABEL_88;
  }
  v8 = *(_QWORD *)(a3 + 16);
  if (!v8)
  {
    if (gLogDatapath)
    {
      v37 = __nwlog_obj();
      if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446466;
        v52 = "nw_http2_transport_drain_next_frame_for_stream";
        v53 = 2082;
        v54 = (void *)(a1 + 205);
        _os_log_impl(&dword_182FBE000, v37, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s no next frame to drain", buf, 0x16u);
        return 0;
      }
    }
    return 0;
  }
  if (gLogDatapath)
  {
    v23 = __nwlog_obj();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
    {
      v24 = *(_DWORD *)(v8 + 52);
      if (v24)
        v24 -= *(_DWORD *)(v8 + 56) + *(_DWORD *)(v8 + 60);
      *(_DWORD *)buf = 136446722;
      v52 = "nw_http2_transport_drain_next_frame_for_stream";
      v53 = 2082;
      v54 = (void *)(a1 + 205);
      v55 = 1024;
      *(_DWORD *)v56 = v24;
      _os_log_impl(&dword_182FBE000, v23, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s draining output frame of %u bytes", buf, 0x1Cu);
    }
  }
  v9 = nw_http2_transport_submit_data(a1, v8);
  v10 = gLogDatapath;
  if (v9)
  {
    if (gLogDatapath)
    {
      v38 = __nwlog_obj();
      if (os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG))
      {
        v39 = *(_DWORD *)(v8 + 52);
        if (v39)
          v39 -= *(_DWORD *)(v8 + 56) + *(_DWORD *)(v8 + 60);
        v40 = *(_DWORD *)(a3 + 32);
        *(_DWORD *)buf = 136446978;
        v52 = "nw_http2_transport_drain_next_frame_for_stream";
        v53 = 2082;
        v54 = (void *)(a1 + 205);
        v55 = 1024;
        *(_DWORD *)v56 = v39;
        *(_WORD *)&v56[4] = 1024;
        *(_DWORD *)&v56[6] = v40;
        _os_log_impl(&dword_182FBE000, v38, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s drained %u output bytes for stream %d", buf, 0x22u);
      }
    }
    v11 = *(_QWORD *)(v8 + 16);
    v12 = *(_QWORD **)(v8 + 24);
    if (v11)
    {
      *(_QWORD *)(v11 + 24) = v12;
      v12 = *(_QWORD **)(v8 + 24);
    }
    else
    {
      *(_QWORD *)(a3 + 24) = v12;
    }
    *v12 = v11;
    *(_QWORD *)(v8 + 16) = 0;
    *(_QWORD *)(v8 + 24) = 0;
    v10 = gLogDatapath;
  }
  if (v10)
  {
    v25 = __nwlog_obj();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 0;
      nw_frame_array_get_frame_count((uint64_t *)(a3 + 16), 0, buf);
      v26 = *(_DWORD *)buf;
      *(_DWORD *)buf = 136446722;
      v52 = "nw_http2_transport_drain_next_frame_for_stream";
      v53 = 2082;
      v54 = (void *)(a1 + 205);
      v55 = 1024;
      *(_DWORD *)v56 = v26;
      _os_log_impl(&dword_182FBE000, v25, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s stream now has %u bytes pending", buf, 0x1Cu);
    }
  }
  if (a4)
    nw_http2_transport_session_send(a1);
  v13 = *(_QWORD *)(a3 + 16);
  if (!v9)
  {
LABEL_23:
    if (v13)
      return v9;
    goto LABEL_24;
  }
  if (v13)
    return 1;
  if ((*(_BYTE *)(a3 + 36) & 4) != 0)
  {
    if (gLogDatapath)
    {
      v47 = __nwlog_obj();
      if (os_log_type_enabled(v47, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446466;
        v52 = "nw_http2_transport_drain_next_frame_for_stream";
        v53 = 2082;
        v54 = (void *)(a1 + 205);
        _os_log_impl(&dword_182FBE000, v47, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s sending deferred end stream", buf, 0x16u);
      }
    }
    nw_http2_transport_send_end_stream(a1, a3);
    v13 = *(_QWORD *)(a3 + 16);
    goto LABEL_23;
  }
LABEL_24:
  if (gLogDatapath)
  {
    v41 = __nwlog_obj();
    if (os_log_type_enabled(v41, OS_LOG_TYPE_DEBUG))
    {
      v42 = *(_DWORD *)(a3 + 32);
      *(_DWORD *)buf = 136446978;
      v52 = "nw_http2_transport_drain_next_frame_for_stream";
      v53 = 2082;
      v54 = (void *)(a1 + 205);
      v55 = 2048;
      *(_QWORD *)v56 = a2;
      *(_WORD *)&v56[8] = 1024;
      v57 = v42;
      _os_log_impl(&dword_182FBE000, v41, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s delivering output available to protocol %p for stream %d", buf, 0x26u);
    }
  }
  v14 = *(_QWORD *)(a2 + 24);
  if (v14)
  {
    v15 = *(void (**)(uint64_t, uint64_t))(v14 + 72);
    if (v15)
    {
      v15(a2, a1);
      return v9;
    }
  }
  __nwlog_obj();
  v31 = *(const char **)(a2 + 16);
  if (!v31)
    v31 = "invalid";
  *(_DWORD *)buf = 136446466;
  v52 = "nw_http2_transport_drain_next_frame_for_stream";
  v53 = 2082;
  v54 = (void *)v31;
  v32 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v49 = 0;
  if (!__nwlog_fault(v32, &type, &v49))
    goto LABEL_102;
  if (type == OS_LOG_TYPE_FAULT)
  {
    v33 = __nwlog_obj();
    v34 = type;
    if (!os_log_type_enabled(v33, type))
      goto LABEL_102;
    v35 = *(const char **)(a2 + 16);
    if (!v35)
      v35 = "invalid";
    *(_DWORD *)buf = 136446466;
    v52 = "nw_http2_transport_drain_next_frame_for_stream";
    v53 = 2082;
    v54 = (void *)v35;
    v36 = "%{public}s protocol %{public}s has invalid output_available callback";
    goto LABEL_101;
  }
  if (!v49)
  {
    v33 = __nwlog_obj();
    v34 = type;
    if (!os_log_type_enabled(v33, type))
      goto LABEL_102;
    v46 = *(const char **)(a2 + 16);
    if (!v46)
      v46 = "invalid";
    *(_DWORD *)buf = 136446466;
    v52 = "nw_http2_transport_drain_next_frame_for_stream";
    v53 = 2082;
    v54 = (void *)v46;
    v36 = "%{public}s protocol %{public}s has invalid output_available callback, backtrace limit exceeded";
    goto LABEL_101;
  }
  v43 = (char *)__nw_create_backtrace_string();
  v33 = __nwlog_obj();
  v34 = type;
  v44 = os_log_type_enabled(v33, type);
  if (v43)
  {
    if (v44)
    {
      v45 = *(const char **)(a2 + 16);
      if (!v45)
        v45 = "invalid";
      *(_DWORD *)buf = 136446722;
      v52 = "nw_http2_transport_drain_next_frame_for_stream";
      v53 = 2082;
      v54 = (void *)v45;
      v55 = 2082;
      *(_QWORD *)v56 = v43;
      _os_log_impl(&dword_182FBE000, v33, v34, "%{public}s protocol %{public}s has invalid output_available callback, dumping backtrace:%{public}s", buf, 0x20u);
    }
    free(v43);
    goto LABEL_102;
  }
  if (v44)
  {
    v48 = *(const char **)(a2 + 16);
    if (!v48)
      v48 = "invalid";
    *(_DWORD *)buf = 136446466;
    v52 = "nw_http2_transport_drain_next_frame_for_stream";
    v53 = 2082;
    v54 = (void *)v48;
    v36 = "%{public}s protocol %{public}s has invalid output_available callback, no backtrace";
LABEL_101:
    _os_log_impl(&dword_182FBE000, v33, v34, v36, buf, 0x16u);
  }
LABEL_102:
  if (v32)
    free(v32);
  return v9;
}

void nw_http2_transport_send_end_stream(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  int v5;
  NSObject *v6;
  int v7;
  NSObject *v8;
  const char *v9;
  NSObject *v10;
  uint32_t v11;
  uint64_t v12;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  const char *v17;
  char *backtrace_string;
  _BOOL4 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  NSObject *v24;
  int v25;
  NSObject *v26;
  int v27;
  char v28;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v31;
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  char *v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  if (gLogDatapath)
  {
    v23 = __nwlog_obj();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446466;
      v31 = "nw_http2_transport_send_end_stream";
      v32 = 2082;
      v33 = a1 + 205;
      _os_log_impl(&dword_182FBE000, v23, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s called", buf, 0x16u);
    }
  }
  if ((*(_BYTE *)(a2 + 36) & 1) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v4 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      v31 = "nw_http2_transport_send_end_stream";
      v32 = 2082;
      v33 = a1 + 205;
      _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_ERROR, "%{public}s %{public}s ERROR: Cannot send end stream on a closed stream", buf, 0x16u);
    }
    return;
  }
  if (*(_QWORD *)(a2 + 16))
  {
    if (!gLogDatapath)
      goto LABEL_7;
    v24 = __nwlog_obj();
    if (!os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
      goto LABEL_7;
    *(_DWORD *)buf = 0;
    nw_frame_array_get_frame_count((uint64_t *)(a2 + 16), 0, buf);
    v25 = *(_DWORD *)buf;
    *(_DWORD *)buf = 136446722;
    v31 = "nw_http2_transport_send_end_stream";
    v32 = 2082;
    v33 = a1 + 205;
    v34 = 1024;
    LODWORD(v35) = v25;
    v9 = "%{public}s %{public}s deferring end stream until all pending bytes (%u) are sent";
    v10 = v24;
    v11 = 28;
LABEL_38:
    _os_log_impl(&dword_182FBE000, v10, OS_LOG_TYPE_DEBUG, v9, buf, v11);
LABEL_7:
    *(_BYTE *)(a2 + 36) |= 4u;
    return;
  }
  if (gLogDatapath)
  {
    v26 = __nwlog_obj();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
    {
      v27 = *(_DWORD *)(a2 + 32);
      *(_DWORD *)buf = 136446722;
      v31 = "nw_http2_transport_send_end_stream";
      v32 = 2082;
      v33 = a1 + 205;
      v34 = 1024;
      LODWORD(v35) = v27;
      _os_log_impl(&dword_182FBE000, v26, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s writing end stream on stream %d", buf, 0x1Cu);
    }
  }
  v5 = nghttp2_submit_data();
  if ((v5 & 0x80000000) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v6 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
    {
      v7 = *(_DWORD *)(a2 + 32);
      *(_DWORD *)buf = 136446722;
      v31 = "nw_http2_transport_send_end_stream";
      v32 = 2082;
      v33 = a1 + 205;
      v34 = 1024;
      LODWORD(v35) = v7;
      _os_log_impl(&dword_182FBE000, v6, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s submitted end stream for stream %d", buf, 0x1Cu);
    }
    *(_BYTE *)(a2 + 36) &= ~4u;
    nw_http2_transport_session_send(a1);
    return;
  }
  if (v5 == -529)
  {
    if (!gLogDatapath)
      goto LABEL_7;
    v8 = __nwlog_obj();
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      goto LABEL_7;
    *(_DWORD *)buf = 136446466;
    v31 = "nw_http2_transport_send_end_stream";
    v32 = 2082;
    v33 = a1 + 205;
    v9 = "%{public}s %{public}s continuing (or starting) to defer end stream until all pending bytes are sent";
    v10 = v8;
    v11 = 22;
    goto LABEL_38;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v12 = nghttp2_strerror();
  *(_DWORD *)buf = 136446466;
  v31 = "nw_http2_transport_send_end_stream";
  v32 = 2082;
  v33 = v12;
  v13 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v28 = 0;
  if (__nwlog_fault(v13, &type, &v28))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v14 = gLogObj;
      v15 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_32;
      v16 = nghttp2_strerror();
      *(_DWORD *)buf = 136446466;
      v31 = "nw_http2_transport_send_end_stream";
      v32 = 2082;
      v33 = v16;
      v17 = "%{public}s nghttp2_submit_data: %{public}s failed";
      goto LABEL_31;
    }
    if (!v28)
    {
      v14 = __nwlog_obj();
      v15 = type;
      if (!os_log_type_enabled(v14, type))
        goto LABEL_32;
      v21 = nghttp2_strerror();
      *(_DWORD *)buf = 136446466;
      v31 = "nw_http2_transport_send_end_stream";
      v32 = 2082;
      v33 = v21;
      v17 = "%{public}s nghttp2_submit_data: %{public}s failed, backtrace limit exceeded";
      goto LABEL_31;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v14 = __nwlog_obj();
    v15 = type;
    v19 = os_log_type_enabled(v14, type);
    if (backtrace_string)
    {
      if (v19)
      {
        v20 = nghttp2_strerror();
        *(_DWORD *)buf = 136446722;
        v31 = "nw_http2_transport_send_end_stream";
        v32 = 2082;
        v33 = v20;
        v34 = 2082;
        v35 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v14, v15, "%{public}s nghttp2_submit_data: %{public}s failed, dumping backtrace:%{public}s", buf, 0x20u);
      }
      free(backtrace_string);
      goto LABEL_32;
    }
    if (v19)
    {
      v22 = nghttp2_strerror();
      *(_DWORD *)buf = 136446466;
      v31 = "nw_http2_transport_send_end_stream";
      v32 = 2082;
      v33 = v22;
      v17 = "%{public}s nghttp2_submit_data: %{public}s failed, no backtrace";
LABEL_31:
      _os_log_impl(&dword_182FBE000, v14, v15, v17, buf, 0x16u);
    }
  }
LABEL_32:
  if (v13)
    free(v13);
}

uint64_t nw_http2_transport_empty_frame_data_source_callback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  const char *v9;
  char *backtrace_string;
  _BOOL4 v11;
  char v12;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (a5)
  {
    *a5 = 1;
    return 0;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v15 = "nw_http2_transport_empty_frame_data_source_callback";
  v6 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v12 = 0;
  if (__nwlog_fault(v6, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v7 = __nwlog_obj();
      v8 = type;
      if (!os_log_type_enabled(v7, type))
        goto LABEL_18;
      *(_DWORD *)buf = 136446210;
      v15 = "nw_http2_transport_empty_frame_data_source_callback";
      v9 = "%{public}s called with null data_flags";
      goto LABEL_17;
    }
    if (!v12)
    {
      v7 = __nwlog_obj();
      v8 = type;
      if (!os_log_type_enabled(v7, type))
        goto LABEL_18;
      *(_DWORD *)buf = 136446210;
      v15 = "nw_http2_transport_empty_frame_data_source_callback";
      v9 = "%{public}s called with null data_flags, backtrace limit exceeded";
      goto LABEL_17;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v7 = __nwlog_obj();
    v8 = type;
    v11 = os_log_type_enabled(v7, type);
    if (backtrace_string)
    {
      if (v11)
      {
        *(_DWORD *)buf = 136446466;
        v15 = "nw_http2_transport_empty_frame_data_source_callback";
        v16 = 2082;
        v17 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null data_flags, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_18;
    }
    if (v11)
    {
      *(_DWORD *)buf = 136446210;
      v15 = "nw_http2_transport_empty_frame_data_source_callback";
      v9 = "%{public}s called with null data_flags, no backtrace";
LABEL_17:
      _os_log_impl(&dword_182FBE000, v7, v8, v9, buf, 0xCu);
    }
  }
LABEL_18:
  if (v6)
    free(v6);
  return 0;
}

uint64_t nw_http2_transport_get_protocol_from_stream_id(uint64_t a1, int a2)
{
  uint64_t stream_from_id;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int v8;
  const char *v9;
  NSObject *v10;
  uint64_t v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t v14;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  int v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (a2 <= 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v11 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v16 = "nw_http2_transport_get_protocol_from_stream_id";
      v17 = 2082;
      v18 = a1 + 205;
      v19 = 1024;
      v20 = a2;
      v9 = "%{public}s %{public}s requested stream id (%d) is not valid, returning NULL protocol";
      v10 = v11;
      v12 = OS_LOG_TYPE_ERROR;
LABEL_11:
      _os_log_impl(&dword_182FBE000, v10, v12, v9, buf, 0x1Cu);
    }
  }
  else
  {
    v14 = 0;
    stream_from_id = nw_http2_transport_get_stream_from_id(a1, a2, &v14);
    if (stream_from_id)
    {
      v5 = stream_from_id;
      result = v14;
      if (v14)
        return result;
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v7 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
      {
        v8 = *(_DWORD *)(v5 + 32);
        *(_DWORD *)buf = 136446722;
        v16 = "nw_http2_transport_get_protocol_from_stream_id";
        v17 = 2082;
        v18 = a1 + 205;
        v19 = 1024;
        v20 = v8;
        v9 = "%{public}s %{public}s no input handler attached to stream %d";
        v10 = v7;
LABEL_10:
        v12 = OS_LOG_TYPE_INFO;
        goto LABEL_11;
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v13 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136446722;
        v16 = "nw_http2_transport_get_protocol_from_stream_id";
        v17 = 2082;
        v18 = a1 + 205;
        v19 = 1024;
        v20 = a2;
        v9 = "%{public}s %{public}s could not find stream for stream %d";
        v10 = v13;
        goto LABEL_10;
      }
    }
  }
  return 0;
}

void nw_http2_transport_stream_init(uint64_t a1)
{
  char *v1;
  NSObject *v2;
  os_log_type_t v3;
  const char *v4;
  char *backtrace_string;
  _BOOL4 v6;
  char v7;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v10;
  __int16 v11;
  char *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = a1;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = a1 + 16;
    *(_DWORD *)(a1 + 32) = -1;
    *(_BYTE *)(a1 + 36) &= 0xF0u;
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v10 = "nw_http2_transport_stream_init";
  v1 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v7 = 0;
  if (__nwlog_fault(v1, &type, &v7))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v2 = __nwlog_obj();
      v3 = type;
      if (!os_log_type_enabled(v2, type))
        goto LABEL_18;
      *(_DWORD *)buf = 136446210;
      v10 = "nw_http2_transport_stream_init";
      v4 = "%{public}s called with null stream";
      goto LABEL_17;
    }
    if (!v7)
    {
      v2 = __nwlog_obj();
      v3 = type;
      if (!os_log_type_enabled(v2, type))
        goto LABEL_18;
      *(_DWORD *)buf = 136446210;
      v10 = "nw_http2_transport_stream_init";
      v4 = "%{public}s called with null stream, backtrace limit exceeded";
      goto LABEL_17;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v2 = __nwlog_obj();
    v3 = type;
    v6 = os_log_type_enabled(v2, type);
    if (backtrace_string)
    {
      if (v6)
      {
        *(_DWORD *)buf = 136446466;
        v10 = "nw_http2_transport_stream_init";
        v11 = 2082;
        v12 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v2, v3, "%{public}s called with null stream, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_18;
    }
    if (v6)
    {
      *(_DWORD *)buf = 136446210;
      v10 = "nw_http2_transport_stream_init";
      v4 = "%{public}s called with null stream, no backtrace";
LABEL_17:
      _os_log_impl(&dword_182FBE000, v2, v3, v4, buf, 0xCu);
    }
  }
LABEL_18:
  if (v1)
    free(v1);
}

uint64_t nw_http2_transport_add_to_id_table(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t internal;
  _BOOL8 v7;
  uint64_t v8;
  char *v9;
  int v10;
  const char *v11;
  NSObject *v12;
  os_log_type_t v13;
  int v14;
  const char *v15;
  char *v16;
  _BOOL4 v17;
  int v18;
  const char *v19;
  NSObject *v20;
  os_log_type_t v21;
  const char *v22;
  char *backtrace_string;
  _BOOL4 v24;
  const char *v25;
  int v26;
  int v27;
  char *v28;
  NSObject *v30;
  int v31;
  NSObject *v32;
  int v33;
  _BOOL4 v34;
  NSObject *v35;
  char v36;
  os_log_type_t type;
  os_log_type_t v38;
  uint8_t buf[4];
  const char *v40;
  __int16 v41;
  char *v42;
  __int16 v43;
  _BYTE v44[18];
  __int16 v45;
  uint64_t v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v40 = "nw_http2_transport_add_to_id_table";
    v19 = (const char *)_os_log_send_and_compose_impl();
    v38 = OS_LOG_TYPE_ERROR;
    type = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v19, &v38, &type))
      goto LABEL_42;
    if (v38 == OS_LOG_TYPE_FAULT)
    {
      v20 = __nwlog_obj();
      v21 = v38;
      if (!os_log_type_enabled(v20, v38))
        goto LABEL_42;
      *(_DWORD *)buf = 136446210;
      v40 = "nw_http2_transport_add_to_id_table";
      v22 = "%{public}s called with null stream";
    }
    else if (type)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v20 = __nwlog_obj();
      v21 = v38;
      v34 = os_log_type_enabled(v20, v38);
      if (backtrace_string)
      {
        if (!v34)
          goto LABEL_29;
        *(_DWORD *)buf = 136446466;
        v40 = "nw_http2_transport_add_to_id_table";
        v41 = 2082;
        v42 = backtrace_string;
        v25 = "%{public}s called with null stream, dumping backtrace:%{public}s";
        goto LABEL_28;
      }
      if (!v34)
      {
LABEL_42:
        if (v19)
        {
          v28 = (char *)v19;
          goto LABEL_44;
        }
        return 0;
      }
      *(_DWORD *)buf = 136446210;
      v40 = "nw_http2_transport_add_to_id_table";
      v22 = "%{public}s called with null stream, no backtrace";
    }
    else
    {
      v20 = __nwlog_obj();
      v21 = v38;
      if (!os_log_type_enabled(v20, v38))
        goto LABEL_42;
      *(_DWORD *)buf = 136446210;
      v40 = "nw_http2_transport_add_to_id_table";
      v22 = "%{public}s called with null stream, backtrace limit exceeded";
    }
LABEL_41:
    _os_log_impl(&dword_182FBE000, v20, v21, v22, buf, 0xCu);
    goto LABEL_42;
  }
  if (gLogDatapath)
  {
    v30 = __nwlog_obj();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
    {
      v31 = *(_DWORD *)(a2 + 32);
      *(_DWORD *)buf = 136446978;
      v40 = "nw_http2_transport_add_to_id_table";
      v41 = 2082;
      v42 = (char *)(a1 + 205);
      v43 = 1024;
      *(_DWORD *)v44 = v31;
      *(_WORD *)&v44[4] = 2048;
      *(_QWORD *)&v44[6] = a2;
      _os_log_impl(&dword_182FBE000, v30, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s called for stream %d (%p)", buf, 0x26u);
    }
  }
  v38 = OS_LOG_TYPE_DEFAULT;
  internal = *(_QWORD *)(a1 + 120);
  if (!internal)
  {
    internal = nw_hash_table_create_internal(0x11u, 8, (const void *(*)(const void *, unsigned int *))stream_get_key, (unsigned int (*)(const void *, unsigned int))stream_key_hash, (BOOL (*)(const void *, const void *, unsigned int))stream_matches_key, 0);
    if (internal)
    {
      *(_DWORD *)(internal + 48) &= ~2u;
      *(_QWORD *)(a1 + 120) = internal;
      goto LABEL_6;
    }
    *(_QWORD *)(a1 + 120) = 0;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446210;
    v40 = "nw_http2_transport_add_to_id_table";
    v19 = (const char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v36 = 0;
    if (__nwlog_fault(v19, &type, &v36))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v20 = gLogObj;
        v21 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type))
          goto LABEL_42;
        *(_DWORD *)buf = 136446210;
        v40 = "nw_http2_transport_add_to_id_table";
        v22 = "%{public}s nw_hash_table_create_no_lock failed";
        goto LABEL_41;
      }
      if (!v36)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v20 = gLogObj;
        v21 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type))
          goto LABEL_42;
        *(_DWORD *)buf = 136446210;
        v40 = "nw_http2_transport_add_to_id_table";
        v22 = "%{public}s nw_hash_table_create_no_lock failed, backtrace limit exceeded";
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v20 = gLogObj;
      v21 = type;
      v24 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (!backtrace_string)
      {
        if (!v24)
          goto LABEL_42;
        *(_DWORD *)buf = 136446210;
        v40 = "nw_http2_transport_add_to_id_table";
        v22 = "%{public}s nw_hash_table_create_no_lock failed, no backtrace";
        goto LABEL_41;
      }
      if (!v24)
      {
LABEL_29:
        free(backtrace_string);
        goto LABEL_42;
      }
      *(_DWORD *)buf = 136446466;
      v40 = "nw_http2_transport_add_to_id_table";
      v41 = 2082;
      v42 = backtrace_string;
      v25 = "%{public}s nw_hash_table_create_no_lock failed, dumping backtrace:%{public}s";
LABEL_28:
      _os_log_impl(&dword_182FBE000, v20, v21, v25, buf, 0x16u);
      goto LABEL_29;
    }
    goto LABEL_42;
  }
LABEL_6:
  v7 = nw_hash_table_add_object(internal, a2, (char *)&v38);
  if (v38 == OS_LOG_TYPE_DEFAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v9 = (char *)(a1 + 205);
    v10 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)buf = 136446722;
    v40 = "nw_http2_transport_add_to_id_table";
    v41 = 2082;
    v42 = (char *)(a1 + 205);
    v43 = 1024;
    *(_DWORD *)v44 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v36 = 0;
    if (!__nwlog_fault(v11, &type, &v36))
      goto LABEL_35;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v12 = gLogObj;
      v13 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_35;
      v14 = *(_DWORD *)(a2 + 32);
      *(_DWORD *)buf = 136446722;
      v40 = "nw_http2_transport_add_to_id_table";
      v41 = 2082;
      v42 = v9;
      v43 = 1024;
      *(_DWORD *)v44 = v14;
      v15 = "%{public}s %{public}s http2_transport already has stream id registered for %d";
    }
    else if (v36)
    {
      v16 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v12 = gLogObj;
      v13 = type;
      v17 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (v16)
      {
        if (v17)
        {
          v18 = *(_DWORD *)(a2 + 32);
          *(_DWORD *)buf = 136446978;
          v40 = "nw_http2_transport_add_to_id_table";
          v41 = 2082;
          v42 = v9;
          v43 = 1024;
          *(_DWORD *)v44 = v18;
          *(_WORD *)&v44[4] = 2082;
          *(_QWORD *)&v44[6] = v16;
          _os_log_impl(&dword_182FBE000, v12, v13, "%{public}s %{public}s http2_transport already has stream id registered for %d, dumping backtrace:%{public}s", buf, 0x26u);
        }
        free(v16);
LABEL_35:
        if (v11)
        {
          v28 = (char *)v11;
LABEL_44:
          free(v28);
          return 0;
        }
        return 0;
      }
      if (!v17)
        goto LABEL_35;
      v27 = *(_DWORD *)(a2 + 32);
      *(_DWORD *)buf = 136446722;
      v40 = "nw_http2_transport_add_to_id_table";
      v41 = 2082;
      v42 = v9;
      v43 = 1024;
      *(_DWORD *)v44 = v27;
      v15 = "%{public}s %{public}s http2_transport already has stream id registered for %d, no backtrace";
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v12 = gLogObj;
      v13 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_35;
      v26 = *(_DWORD *)(a2 + 32);
      *(_DWORD *)buf = 136446722;
      v40 = "nw_http2_transport_add_to_id_table";
      v41 = 2082;
      v42 = v9;
      v43 = 1024;
      *(_DWORD *)v44 = v26;
      v15 = "%{public}s %{public}s http2_transport already has stream id registered for %d, backtrace limit exceeded";
    }
    _os_log_impl(&dword_182FBE000, v12, v13, v15, buf, 0x1Cu);
    goto LABEL_35;
  }
  v8 = v7;
  if (gLogDatapath)
  {
    v32 = __nwlog_obj();
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
    {
      v33 = *(_DWORD *)(a2 + 32);
      *(_DWORD *)buf = 136446722;
      v40 = "nw_http2_transport_add_to_id_table";
      v41 = 2082;
      v42 = (char *)(a1 + 205);
      v43 = 1024;
      *(_DWORD *)v44 = v33;
      _os_log_impl(&dword_182FBE000, v32, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s added stream %d to stream id hash table", buf, 0x1Cu);
    }
  }
  if (a3)
  {
    if (gLogDatapath)
    {
      v35 = __nwlog_obj();
      if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136447234;
        v40 = "nw_http2_transport_add_to_id_table";
        v41 = 2082;
        v42 = (char *)(a1 + 205);
        v43 = 2048;
        *(_QWORD *)v44 = a2;
        *(_WORD *)&v44[8] = 2048;
        *(_QWORD *)&v44[10] = v8;
        v45 = 2048;
        v46 = a3;
        _os_log_impl(&dword_182FBE000, v35, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s connecting stream %p node %p with protocol %p", buf, 0x34u);
      }
    }
    *(_QWORD *)nw_hash_node_get_extra(v8) = a3;
  }
  return v8;
}

uint64_t ___ZL25on_begin_headers_callbackP15nghttp2_sessionPK13nghttp2_framePv_block_invoke(uint64_t a1, int a2, void *object)
{
  void *v4;

  if (object)
    v4 = os_retain(object);
  else
    v4 = 0;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v4;
  return 0;
}

uint64_t ___ZL25on_begin_headers_callbackP15nghttp2_sessionPK13nghttp2_framePv_block_invoke_2(uint64_t a1, int a2, void *object)
{
  void *v4;

  if (object)
    v4 = os_retain(object);
  else
    v4 = 0;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v4;
  return 0;
}

uint64_t ___ZL25on_begin_headers_callbackP15nghttp2_sessionPK13nghttp2_framePv_block_invoke_3(uint64_t a1, int a2, void *object)
{
  void *v4;

  if (object)
    v4 = os_retain(object);
  else
    v4 = 0;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v4;
  return 0;
}

BOOL nw_http2_transport_stream_connect(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  uint64_t v7;
  int v8;
  NSObject *v9;
  const char *v10;
  int v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  char *v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  const char *v19;
  char *v20;
  _BOOL4 v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  char *v25;
  _BOOL4 v26;
  const char *v27;
  uint64_t v28;
  _BOOL4 v29;
  NSObject *v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  _BOOL8 result;
  NSObject *v35;
  int v36;
  char *v37;
  NSObject *v38;
  os_log_type_t v39;
  const char *v40;
  NSObject *v41;
  int v42;
  const char *v43;
  char *v44;
  NSObject *v45;
  os_log_type_t v46;
  const char *v47;
  const char *v48;
  NSObject *v49;
  int v50;
  char *backtrace_string;
  _BOOL4 v52;
  char *v53;
  _BOOL4 v54;
  const char *v55;
  NSObject *v56;
  int v57;
  const char *v58;
  const char *v59;
  char v60;
  os_log_type_t type;
  os_log_type_t v62[8];
  uint8_t buf[4];
  const char *v64;
  __int16 v65;
  uint64_t v66;
  __int16 v67;
  _BYTE v68[14];
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v64 = "nw_http2_transport_stream_connect";
    v37 = (char *)_os_log_send_and_compose_impl();
    v62[0] = OS_LOG_TYPE_ERROR;
    type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v37, v62, &type))
    {
      if (v62[0] == OS_LOG_TYPE_FAULT)
      {
        v38 = __nwlog_obj();
        v39 = v62[0];
        if (os_log_type_enabled(v38, v62[0]))
        {
          *(_DWORD *)buf = 136446210;
          v64 = "nw_http2_transport_stream_connect";
          v40 = "%{public}s called with null http2_transport";
LABEL_111:
          _os_log_impl(&dword_182FBE000, v38, v39, v40, buf, 0xCu);
        }
      }
      else if (type)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        v38 = __nwlog_obj();
        v39 = v62[0];
        v52 = os_log_type_enabled(v38, v62[0]);
        if (backtrace_string)
        {
          if (v52)
          {
            *(_DWORD *)buf = 136446466;
            v64 = "nw_http2_transport_stream_connect";
            v65 = 2082;
            v66 = (uint64_t)backtrace_string;
            _os_log_impl(&dword_182FBE000, v38, v39, "%{public}s called with null http2_transport, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(backtrace_string);
          goto LABEL_112;
        }
        if (v52)
        {
          *(_DWORD *)buf = 136446210;
          v64 = "nw_http2_transport_stream_connect";
          v40 = "%{public}s called with null http2_transport, no backtrace";
          goto LABEL_111;
        }
      }
      else
      {
        v38 = __nwlog_obj();
        v39 = v62[0];
        if (os_log_type_enabled(v38, v62[0]))
        {
          *(_DWORD *)buf = 136446210;
          v64 = "nw_http2_transport_stream_connect";
          v40 = "%{public}s called with null http2_transport, backtrace limit exceeded";
          goto LABEL_111;
        }
      }
    }
LABEL_112:
    if (v37)
      free(v37);
    return 0;
  }
  if (gLogDatapath)
  {
    v41 = __nwlog_obj();
    if (os_log_type_enabled(v41, OS_LOG_TYPE_DEBUG))
    {
      v42 = *(_DWORD *)(a2 + 32);
      *(_DWORD *)buf = 136446978;
      v64 = "nw_http2_transport_stream_connect";
      v65 = 2082;
      v66 = a1 + 205;
      v67 = 1024;
      *(_DWORD *)v68 = v42;
      *(_WORD *)&v68[4] = 2048;
      *(_QWORD *)&v68[6] = a2;
      _os_log_impl(&dword_182FBE000, v41, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s called for stream %d (%p)", buf, 0x26u);
    }
  }
  if ((*(_BYTE *)(a2 + 36) & 1) != 0)
  {
    if (gLogDatapath)
    {
      v49 = __nwlog_obj();
      if (os_log_type_enabled(v49, OS_LOG_TYPE_DEBUG))
      {
        v50 = *(_DWORD *)(a2 + 32);
        *(_DWORD *)buf = 136446722;
        v64 = "nw_http2_transport_stream_connect";
        v65 = 2082;
        v66 = a1 + 205;
        v67 = 1024;
        *(_DWORD *)v68 = v50;
        _os_log_impl(&dword_182FBE000, v49, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s stream %d is already connected", buf, 0x1Cu);
      }
    }
    v12 = *(_QWORD *)(a3 + 24);
    if (v12)
    {
      v13 = *(void (**)(uint64_t, uint64_t))(v12 + 40);
      if (v13)
      {
        v13(a3, a1);
        return 1;
      }
    }
    __nwlog_obj();
    v43 = *(const char **)(a3 + 16);
    if (!v43)
      v43 = "invalid";
    *(_DWORD *)buf = 136446466;
    v64 = "nw_http2_transport_stream_connect";
    v65 = 2082;
    v66 = (uint64_t)v43;
    v44 = (char *)_os_log_send_and_compose_impl();
    v62[0] = OS_LOG_TYPE_ERROR;
    type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v44, v62, &type))
    {
      if (v62[0] == OS_LOG_TYPE_FAULT)
      {
        v45 = __nwlog_obj();
        v46 = v62[0];
        if (!os_log_type_enabled(v45, v62[0]))
          goto LABEL_120;
        v47 = *(const char **)(a3 + 16);
        if (!v47)
          v47 = "invalid";
        *(_DWORD *)buf = 136446466;
        v64 = "nw_http2_transport_stream_connect";
        v65 = 2082;
        v66 = (uint64_t)v47;
        v48 = "%{public}s protocol %{public}s has invalid connected callback";
        goto LABEL_119;
      }
      if (type == OS_LOG_TYPE_DEFAULT)
      {
        v45 = __nwlog_obj();
        v46 = v62[0];
        if (!os_log_type_enabled(v45, v62[0]))
          goto LABEL_120;
        v58 = *(const char **)(a3 + 16);
        if (!v58)
          v58 = "invalid";
        *(_DWORD *)buf = 136446466;
        v64 = "nw_http2_transport_stream_connect";
        v65 = 2082;
        v66 = (uint64_t)v58;
        v48 = "%{public}s protocol %{public}s has invalid connected callback, backtrace limit exceeded";
        goto LABEL_119;
      }
      v53 = (char *)__nw_create_backtrace_string();
      v45 = __nwlog_obj();
      v46 = v62[0];
      v54 = os_log_type_enabled(v45, v62[0]);
      if (v53)
      {
        if (v54)
        {
          v55 = *(const char **)(a3 + 16);
          if (!v55)
            v55 = "invalid";
          *(_DWORD *)buf = 136446722;
          v64 = "nw_http2_transport_stream_connect";
          v65 = 2082;
          v66 = (uint64_t)v55;
          v67 = 2082;
          *(_QWORD *)v68 = v53;
          _os_log_impl(&dword_182FBE000, v45, v46, "%{public}s protocol %{public}s has invalid connected callback, dumping backtrace:%{public}s", buf, 0x20u);
        }
        free(v53);
        goto LABEL_120;
      }
      if (v54)
      {
        v59 = *(const char **)(a3 + 16);
        if (!v59)
          v59 = "invalid";
        *(_DWORD *)buf = 136446466;
        v64 = "nw_http2_transport_stream_connect";
        v65 = 2082;
        v66 = (uint64_t)v59;
        v48 = "%{public}s protocol %{public}s has invalid connected callback, no backtrace";
LABEL_119:
        _os_log_impl(&dword_182FBE000, v45, v46, v48, buf, 0x16u);
      }
    }
LABEL_120:
    if (v44)
      free(v44);
    return 1;
  }
  *(_QWORD *)v62 = a2;
  v6 = nghttp2_submit_headers();
  if (v6 < 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v14 = nghttp2_strerror();
    *(_DWORD *)buf = 136446466;
    v64 = "nw_http2_transport_send_headers";
    v65 = 2082;
    v66 = v14;
    v15 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v60 = 0;
    if (!__nwlog_fault(v15, &type, &v60))
      goto LABEL_65;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v16 = gLogObj;
      v17 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_65;
      v18 = nghttp2_strerror();
      *(_DWORD *)buf = 136446466;
      v64 = "nw_http2_transport_send_headers";
      v65 = 2082;
      v66 = v18;
      v19 = "%{public}s nghttp2_submit_headers: %{public}s failed";
    }
    else if (v60)
    {
      v20 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v16 = gLogObj;
      v17 = type;
      v21 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (v20)
      {
        if (v21)
        {
          v22 = nghttp2_strerror();
          *(_DWORD *)buf = 136446722;
          v64 = "nw_http2_transport_send_headers";
          v65 = 2082;
          v66 = v22;
          v67 = 2082;
          *(_QWORD *)v68 = v20;
          _os_log_impl(&dword_182FBE000, v16, v17, "%{public}s nghttp2_submit_headers: %{public}s failed, dumping backtrace:%{public}s", buf, 0x20u);
        }
        free(v20);
        goto LABEL_65;
      }
      if (!v21)
        goto LABEL_65;
      v31 = nghttp2_strerror();
      *(_DWORD *)buf = 136446466;
      v64 = "nw_http2_transport_send_headers";
      v65 = 2082;
      v66 = v31;
      v19 = "%{public}s nghttp2_submit_headers: %{public}s failed, no backtrace";
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v16 = gLogObj;
      v17 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_65;
      v28 = nghttp2_strerror();
      *(_DWORD *)buf = 136446466;
      v64 = "nw_http2_transport_send_headers";
      v65 = 2082;
      v66 = v28;
      v19 = "%{public}s nghttp2_submit_headers: %{public}s failed, backtrace limit exceeded";
    }
    v32 = v16;
    v33 = v17;
LABEL_64:
    _os_log_impl(&dword_182FBE000, v32, v33, v19, buf, 0x16u);
    goto LABEL_65;
  }
  v7 = *(_QWORD *)v62;
  v8 = *(_DWORD *)(*(_QWORD *)v62 + 32);
  if (v8 == -1)
  {
    if ((*(_BYTE *)(*(_QWORD *)v62 + 36) & 8) != 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      *(_DWORD *)buf = 136446466;
      v64 = "nw_http2_transport_send_headers";
      v65 = 2082;
      v66 = a1 + 205;
      v15 = (char *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      v60 = 0;
      if (!__nwlog_fault(v15, &type, &v60))
        goto LABEL_65;
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v23 = gLogObj;
        v24 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type))
          goto LABEL_65;
        *(_DWORD *)buf = 136446466;
        v64 = "nw_http2_transport_send_headers";
        v65 = 2082;
        v66 = a1 + 205;
        v19 = "%{public}s %{public}s Responder stream cannot have id of -1 after opening";
        goto LABEL_63;
      }
      if (!v60)
      {
        v23 = __nwlog_obj();
        v24 = type;
        if (!os_log_type_enabled(v23, type))
          goto LABEL_65;
        *(_DWORD *)buf = 136446466;
        v64 = "nw_http2_transport_send_headers";
        v65 = 2082;
        v66 = a1 + 205;
        v19 = "%{public}s %{public}s Responder stream cannot have id of -1 after opening, backtrace limit exceeded";
        goto LABEL_63;
      }
      v25 = (char *)__nw_create_backtrace_string();
      v23 = __nwlog_obj();
      v24 = type;
      v29 = os_log_type_enabled(v23, type);
      if (!v25)
      {
        if (!v29)
          goto LABEL_65;
        *(_DWORD *)buf = 136446466;
        v64 = "nw_http2_transport_send_headers";
        v65 = 2082;
        v66 = a1 + 205;
        v19 = "%{public}s %{public}s Responder stream cannot have id of -1 after opening, no backtrace";
        goto LABEL_63;
      }
      if (v29)
      {
        *(_DWORD *)buf = 136446722;
        v64 = "nw_http2_transport_send_headers";
        v65 = 2082;
        v66 = a1 + 205;
        v67 = 2082;
        *(_QWORD *)v68 = v25;
        v27 = "%{public}s %{public}s Responder stream cannot have id of -1 after opening, dumping backtrace:%{public}s";
        goto LABEL_46;
      }
LABEL_47:
      free(v25);
      if (!v15)
        goto LABEL_67;
      goto LABEL_66;
    }
    *(_DWORD *)(*(_QWORD *)v62 + 32) = v6;
    if (!nw_http2_transport_add_to_id_table(a1, v7, a3))
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v30 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        v64 = "nw_http2_transport_send_headers";
        v65 = 2082;
        v66 = a1 + 205;
        _os_log_impl(&dword_182FBE000, v30, OS_LOG_TYPE_ERROR, "%{public}s %{public}s Failed to add new stream to the id based hash table", buf, 0x16u);
      }
      *(_DWORD *)(*(_QWORD *)v62 + 32) = -1;
      goto LABEL_67;
    }
    v8 = *(_DWORD *)(*(_QWORD *)v62 + 32);
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v9 = gLogObj;
  if (v8 > 0)
  {
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
    {
      v10 = "server";
      v11 = *(_DWORD *)(*(_QWORD *)v62 + 32);
      if ((*(_BYTE *)(a1 + 204) & 0x10) == 0)
        v10 = "client";
      *(_DWORD *)buf = 136446978;
      v64 = "nw_http2_transport_send_headers";
      v65 = 2082;
      v66 = a1 + 205;
      v67 = 2082;
      *(_QWORD *)v68 = v10;
      *(_WORD *)&v68[8] = 1024;
      *(_DWORD *)&v68[10] = v11;
      _os_log_impl(&dword_182FBE000, v9, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s %{public}s submitted headers for stream %d", buf, 0x26u);
    }
    nw_http2_transport_session_send(a1);
    goto LABEL_67;
  }
  *(_DWORD *)buf = 136446466;
  v64 = "nw_http2_transport_send_headers";
  v65 = 2082;
  v66 = a1 + 205;
  v15 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v60 = 0;
  if (__nwlog_fault(v15, &type, &v60))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v23 = gLogObj;
      v24 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_65;
      *(_DWORD *)buf = 136446466;
      v64 = "nw_http2_transport_send_headers";
      v65 = 2082;
      v66 = a1 + 205;
      v19 = "%{public}s %{public}s Stream has invalid id";
LABEL_63:
      v32 = v23;
      v33 = v24;
      goto LABEL_64;
    }
    if (!v60)
    {
      v23 = __nwlog_obj();
      v24 = type;
      if (!os_log_type_enabled(v23, type))
        goto LABEL_65;
      *(_DWORD *)buf = 136446466;
      v64 = "nw_http2_transport_send_headers";
      v65 = 2082;
      v66 = a1 + 205;
      v19 = "%{public}s %{public}s Stream has invalid id, backtrace limit exceeded";
      goto LABEL_63;
    }
    v25 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v23 = gLogObj;
    v24 = type;
    v26 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!v25)
    {
      if (!v26)
        goto LABEL_65;
      *(_DWORD *)buf = 136446466;
      v64 = "nw_http2_transport_send_headers";
      v65 = 2082;
      v66 = a1 + 205;
      v19 = "%{public}s %{public}s Stream has invalid id, no backtrace";
      goto LABEL_63;
    }
    if (v26)
    {
      *(_DWORD *)buf = 136446722;
      v64 = "nw_http2_transport_send_headers";
      v65 = 2082;
      v66 = a1 + 205;
      v67 = 2082;
      *(_QWORD *)v68 = v25;
      v27 = "%{public}s %{public}s Stream has invalid id, dumping backtrace:%{public}s";
LABEL_46:
      _os_log_impl(&dword_182FBE000, v23, v24, v27, buf, 0x20u);
      goto LABEL_47;
    }
    goto LABEL_47;
  }
LABEL_65:
  if (v15)
LABEL_66:
    free(v15);
LABEL_67:
  if ((*(_DWORD *)(a2 + 32) & 0x80000000) == 0)
  {
    *(_BYTE *)(a2 + 36) &= ~2u;
    if (gLogDatapath)
    {
      v56 = __nwlog_obj();
      if (os_log_type_enabled(v56, OS_LOG_TYPE_DEBUG))
      {
        v57 = *(_DWORD *)(a2 + 32);
        *(_DWORD *)buf = 136446722;
        v64 = "nw_http2_transport_stream_connect";
        v65 = 2082;
        v66 = a1 + 205;
        v67 = 1024;
        *(_DWORD *)v68 = v57;
        _os_log_impl(&dword_182FBE000, v56, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s connect complete for stream %d", buf, 0x1Cu);
      }
    }
    return 1;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v35 = gLogObj;
  result = os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
  if (result)
  {
    v36 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)buf = 136446978;
    v64 = "nw_http2_transport_stream_connect";
    v65 = 2082;
    v66 = a1 + 205;
    v67 = 2048;
    *(_QWORD *)v68 = a2;
    *(_WORD *)&v68[8] = 1024;
    *(_DWORD *)&v68[10] = v36;
    _os_log_impl(&dword_182FBE000, v35, OS_LOG_TYPE_ERROR, "%{public}s %{public}s failed to open stream %p (id still %d)", buf, 0x26u);
    return 0;
  }
  return result;
}

uint64_t stream_get_key(const void *a1, unsigned int *a2)
{
  *a2 = 4;
  return (uint64_t)a1 + 32;
}

void nw_http2_transport_stream_connected(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  const char *v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  const char *v14;
  const char *v15;
  const char *v16;
  char *v17;
  NSObject *v18;
  os_log_type_t v19;
  const char *v20;
  const char *v21;
  NSObject *v22;
  int v23;
  NSObject *v24;
  int v25;
  char *backtrace_string;
  _BOOL4 v27;
  const char *v28;
  NSObject *v29;
  int v30;
  char *v31;
  _BOOL4 v32;
  const char *v33;
  const char *v34;
  const char *v35;
  const char *v36;
  const char *v37;
  char v38;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v41;
  __int16 v42;
  const char *v43;
  __int16 v44;
  _QWORD v45[3];

  v45[2] = *MEMORY[0x1E0C80C00];
  if (gLogDatapath)
  {
    v22 = __nwlog_obj();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
    {
      v23 = *(_DWORD *)(a2 + 32);
      *(_DWORD *)buf = 136446978;
      v41 = "nw_http2_transport_stream_connected";
      v42 = 2082;
      v43 = (const char *)(a1 + 205);
      v44 = 1024;
      LODWORD(v45[0]) = v23;
      WORD2(v45[0]) = 2048;
      *(_QWORD *)((char *)v45 + 6) = a2;
      _os_log_impl(&dword_182FBE000, v22, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s called for stream %d (%p)", buf, 0x26u);
    }
  }
  *(_BYTE *)(a2 + 36) |= 1u;
  v6 = *(_QWORD *)(a3 + 24);
  if (v6)
  {
    v7 = *(void (**)(uint64_t, uint64_t))(v6 + 40);
    if (v7)
    {
      v7(a3, a1);
      goto LABEL_5;
    }
  }
  __nwlog_obj();
  v10 = *(const char **)(a3 + 16);
  if (!v10)
    v10 = "invalid";
  *(_DWORD *)buf = 136446466;
  v41 = "nw_http2_transport_stream_connected";
  v42 = 2082;
  v43 = v10;
  v11 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v38 = 0;
  if (__nwlog_fault(v11, &type, &v38))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v12 = __nwlog_obj();
      v13 = type;
      if (!os_log_type_enabled(v12, type))
        goto LABEL_57;
      v14 = *(const char **)(a3 + 16);
      if (!v14)
        v14 = "invalid";
      *(_DWORD *)buf = 136446466;
      v41 = "nw_http2_transport_stream_connected";
      v42 = 2082;
      v43 = v14;
      v15 = "%{public}s protocol %{public}s has invalid connected callback";
      goto LABEL_56;
    }
    if (!v38)
    {
      v12 = __nwlog_obj();
      v13 = type;
      if (!os_log_type_enabled(v12, type))
        goto LABEL_57;
      v34 = *(const char **)(a3 + 16);
      if (!v34)
        v34 = "invalid";
      *(_DWORD *)buf = 136446466;
      v41 = "nw_http2_transport_stream_connected";
      v42 = 2082;
      v43 = v34;
      v15 = "%{public}s protocol %{public}s has invalid connected callback, backtrace limit exceeded";
      goto LABEL_56;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v12 = __nwlog_obj();
    v13 = type;
    v27 = os_log_type_enabled(v12, type);
    if (backtrace_string)
    {
      if (v27)
      {
        v28 = *(const char **)(a3 + 16);
        if (!v28)
          v28 = "invalid";
        *(_DWORD *)buf = 136446722;
        v41 = "nw_http2_transport_stream_connected";
        v42 = 2082;
        v43 = v28;
        v44 = 2082;
        v45[0] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v12, v13, "%{public}s protocol %{public}s has invalid connected callback, dumping backtrace:%{public}s", buf, 0x20u);
      }
      free(backtrace_string);
      goto LABEL_57;
    }
    if (v27)
    {
      v35 = *(const char **)(a3 + 16);
      if (!v35)
        v35 = "invalid";
      *(_DWORD *)buf = 136446466;
      v41 = "nw_http2_transport_stream_connected";
      v42 = 2082;
      v43 = v35;
      v15 = "%{public}s protocol %{public}s has invalid connected callback, no backtrace";
LABEL_56:
      _os_log_impl(&dword_182FBE000, v12, v13, v15, buf, 0x16u);
    }
  }
LABEL_57:
  if (v11)
    free(v11);
LABEL_5:
  if (gLogDatapath)
  {
    v24 = __nwlog_obj();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
    {
      v25 = *(_DWORD *)(a2 + 32);
      *(_DWORD *)buf = 136446978;
      v41 = "nw_http2_transport_stream_connected";
      v42 = 2082;
      v43 = (const char *)(a1 + 205);
      v44 = 1024;
      LODWORD(v45[0]) = v25;
      WORD2(v45[0]) = 2048;
      *(_QWORD *)((char *)v45 + 6) = a3;
      _os_log_impl(&dword_182FBE000, v24, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s stream %d (protocol %p) connected", buf, 0x26u);
    }
  }
  if (*(_QWORD *)a2)
  {
    if (gLogDatapath)
    {
      v29 = __nwlog_obj();
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
      {
        v30 = *(_DWORD *)(a2 + 32);
        *(_DWORD *)buf = 136446722;
        v41 = "nw_http2_transport_stream_connected";
        v42 = 2082;
        v43 = (const char *)(a1 + 205);
        v44 = 1024;
        LODWORD(v45[0]) = v30;
        _os_log_impl(&dword_182FBE000, v29, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s calling input_available with input_frames pending for stream %d", buf, 0x1Cu);
      }
    }
    v8 = *(_QWORD *)(a3 + 24);
    if (v8)
    {
      v9 = *(void (**)(uint64_t, uint64_t))(v8 + 64);
      if (v9)
      {
        v9(a3, a1);
        goto LABEL_11;
      }
    }
    __nwlog_obj();
    v16 = *(const char **)(a3 + 16);
    if (!v16)
      v16 = "invalid";
    *(_DWORD *)buf = 136446466;
    v41 = "nw_http2_transport_stream_connected";
    v42 = 2082;
    v43 = v16;
    v17 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v38 = 0;
    if (!__nwlog_fault(v17, &type, &v38))
      goto LABEL_68;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v18 = __nwlog_obj();
      v19 = type;
      if (!os_log_type_enabled(v18, type))
        goto LABEL_68;
      v20 = *(const char **)(a3 + 16);
      if (!v20)
        v20 = "invalid";
      *(_DWORD *)buf = 136446466;
      v41 = "nw_http2_transport_stream_connected";
      v42 = 2082;
      v43 = v20;
      v21 = "%{public}s protocol %{public}s has invalid input_available callback";
    }
    else if (v38)
    {
      v31 = (char *)__nw_create_backtrace_string();
      v18 = __nwlog_obj();
      v19 = type;
      v32 = os_log_type_enabled(v18, type);
      if (v31)
      {
        if (v32)
        {
          v33 = *(const char **)(a3 + 16);
          if (!v33)
            v33 = "invalid";
          *(_DWORD *)buf = 136446722;
          v41 = "nw_http2_transport_stream_connected";
          v42 = 2082;
          v43 = v33;
          v44 = 2082;
          v45[0] = v31;
          _os_log_impl(&dword_182FBE000, v18, v19, "%{public}s protocol %{public}s has invalid input_available callback, dumping backtrace:%{public}s", buf, 0x20u);
        }
        free(v31);
        goto LABEL_68;
      }
      if (!v32)
      {
LABEL_68:
        if (v17)
          free(v17);
        goto LABEL_11;
      }
      v37 = *(const char **)(a3 + 16);
      if (!v37)
        v37 = "invalid";
      *(_DWORD *)buf = 136446466;
      v41 = "nw_http2_transport_stream_connected";
      v42 = 2082;
      v43 = v37;
      v21 = "%{public}s protocol %{public}s has invalid input_available callback, no backtrace";
    }
    else
    {
      v18 = __nwlog_obj();
      v19 = type;
      if (!os_log_type_enabled(v18, type))
        goto LABEL_68;
      v36 = *(const char **)(a3 + 16);
      if (!v36)
        v36 = "invalid";
      *(_DWORD *)buf = 136446466;
      v41 = "nw_http2_transport_stream_connected";
      v42 = 2082;
      v43 = v36;
      v21 = "%{public}s protocol %{public}s has invalid input_available callback, backtrace limit exceeded";
    }
    _os_log_impl(&dword_182FBE000, v18, v19, v21, buf, 0x16u);
    goto LABEL_68;
  }
LABEL_11:
  nw_http2_transport_session_send(a1);
}

uint64_t ___ZL34nw_protocol_http2_transport_notifyP11nw_protocolS0_31nw_protocol_notification_type_tPvm_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v7;
  const char *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  const char *v13;
  const char *v14;
  char *v15;
  _BOOL4 v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  const char *v22;
  NSObject *v23;
  os_log_type_t v24;
  uint32_t v25;
  NSObject *v27;
  uint64_t v28;
  const char *v29;
  NSObject *v30;
  os_log_type_t v31;
  char *backtrace_string;
  _BOOL4 v33;
  char v34;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v37;
  __int16 v38;
  void *v39;
  __int16 v40;
  uint64_t v41;
  __int16 v42;
  char *v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v37 = "nw_protocol_http2_transport_notify_block_invoke";
    v9 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v34 = 0;
    if (__nwlog_fault(v9, &type, &v34))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v30 = __nwlog_obj();
        v31 = type;
        if (os_log_type_enabled(v30, type))
        {
          *(_DWORD *)buf = 136446210;
          v37 = "nw_protocol_http2_transport_notify_block_invoke";
          v14 = "%{public}s called with null node";
LABEL_58:
          v23 = v30;
          v24 = v31;
          v25 = 12;
          goto LABEL_36;
        }
      }
      else if (v34)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        v30 = __nwlog_obj();
        v31 = type;
        v33 = os_log_type_enabled(v30, type);
        if (backtrace_string)
        {
          if (v33)
          {
            *(_DWORD *)buf = 136446466;
            v37 = "nw_protocol_http2_transport_notify_block_invoke";
            v38 = 2082;
            v39 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v30, v31, "%{public}s called with null node, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(backtrace_string);
        }
        else if (v33)
        {
          *(_DWORD *)buf = 136446210;
          v37 = "nw_protocol_http2_transport_notify_block_invoke";
          v14 = "%{public}s called with null node, no backtrace";
          goto LABEL_58;
        }
      }
      else
      {
        v30 = __nwlog_obj();
        v31 = type;
        if (os_log_type_enabled(v30, type))
        {
          *(_DWORD *)buf = 136446210;
          v37 = "nw_protocol_http2_transport_notify_block_invoke";
          v14 = "%{public}s called with null node, backtrace limit exceeded";
          goto LABEL_58;
        }
      }
    }
LABEL_37:
    if (!v9)
      return 1;
LABEL_38:
    free(v9);
    return 1;
  }
  v4 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 24);
    if (v5 && (v6 = *(void (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))(v5 + 160)) != 0)
    {
      v6(v4, *(_QWORD *)(a1 + 40), *(unsigned int *)(a1 + 64), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
    }
    else
    {
      v27 = __nwlog_obj();
      if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
      {
        v28 = *(_QWORD *)(a1 + 32);
        *(_DWORD *)buf = 136446722;
        v37 = "nw_protocol_http2_transport_notify_block_invoke";
        if (v28)
          v29 = (const char *)(v28 + 205);
        else
          v29 = "";
        v38 = 2082;
        v39 = (void *)v29;
        v40 = 2048;
        v41 = v4;
        _os_log_impl(&dword_182FBE000, v27, OS_LOG_TYPE_INFO, "%{public}s %{public}s notify callback not set on input handler %p, skipping notify", buf, 0x20u);
      }
    }
    return 1;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v7 = *(_QWORD *)(a1 + 32);
  if (v7)
    v8 = (const char *)(v7 + 205);
  else
    v8 = "";
  *(_DWORD *)buf = 136446722;
  v37 = "nw_protocol_http2_transport_notify_block_invoke";
  v38 = 2082;
  v39 = (void *)v8;
  v40 = 2048;
  v41 = a2;
  v9 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v34 = 0;
  if (!__nwlog_fault(v9, &type, &v34))
    goto LABEL_37;
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v10 = gLogObj;
    v11 = type;
    if (!os_log_type_enabled((os_log_t)gLogObj, type))
      goto LABEL_37;
    v12 = *(_QWORD *)(a1 + 32);
    if (v12)
      v13 = (const char *)(v12 + 205);
    else
      v13 = "";
    *(_DWORD *)buf = 136446722;
    v37 = "nw_protocol_http2_transport_notify_block_invoke";
    v38 = 2082;
    v39 = (void *)v13;
    v40 = 2048;
    v41 = a2;
    v14 = "%{public}s %{public}s no object for hash node %p, skipping notify";
LABEL_35:
    v23 = v10;
    v24 = v11;
    v25 = 32;
LABEL_36:
    _os_log_impl(&dword_182FBE000, v23, v24, v14, buf, v25);
    goto LABEL_37;
  }
  if (!v34)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v10 = gLogObj;
    v11 = type;
    if (!os_log_type_enabled((os_log_t)gLogObj, type))
      goto LABEL_37;
    v19 = *(_QWORD *)(a1 + 32);
    if (v19)
      v20 = (const char *)(v19 + 205);
    else
      v20 = "";
    *(_DWORD *)buf = 136446722;
    v37 = "nw_protocol_http2_transport_notify_block_invoke";
    v38 = 2082;
    v39 = (void *)v20;
    v40 = 2048;
    v41 = a2;
    v14 = "%{public}s %{public}s no object for hash node %p, skipping notify, backtrace limit exceeded";
    goto LABEL_35;
  }
  v15 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v10 = gLogObj;
  v11 = type;
  v16 = os_log_type_enabled((os_log_t)gLogObj, type);
  if (!v15)
  {
    if (!v16)
      goto LABEL_37;
    v21 = *(_QWORD *)(a1 + 32);
    if (v21)
      v22 = (const char *)(v21 + 205);
    else
      v22 = "";
    *(_DWORD *)buf = 136446722;
    v37 = "nw_protocol_http2_transport_notify_block_invoke";
    v38 = 2082;
    v39 = (void *)v22;
    v40 = 2048;
    v41 = a2;
    v14 = "%{public}s %{public}s no object for hash node %p, skipping notify, no backtrace";
    goto LABEL_35;
  }
  if (v16)
  {
    v17 = *(_QWORD *)(a1 + 32);
    if (v17)
      v18 = (const char *)(v17 + 205);
    else
      v18 = "";
    *(_DWORD *)buf = 136446978;
    v37 = "nw_protocol_http2_transport_notify_block_invoke";
    v38 = 2082;
    v39 = (void *)v18;
    v40 = 2048;
    v41 = a2;
    v42 = 2082;
    v43 = v15;
    _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s %{public}s no object for hash node %p, skipping notify, dumping backtrace:%{public}s", buf, 0x2Au);
  }
  free(v15);
  if (v9)
    goto LABEL_38;
  return 1;
}

uint64_t ___ZL33nw_protocol_http2_transport_errorP11nw_protocolS0_i_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t object;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  const char *v13;
  const char *v14;
  char *backtrace_string;
  _BOOL4 v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  const char *v22;
  NSObject *v24;
  uint64_t v25;
  const char *v26;
  BOOL v27;
  int v28;
  NSObject *v29;
  uint64_t v30;
  const char *v31;
  int v32;
  char v33;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v36;
  __int16 v37;
  const char *v38;
  __int16 v39;
  _BYTE v40[18];
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  object = nw_hash_node_get_object(a2);
  if (object)
  {
    v5 = object;
    v6 = *(_QWORD *)(object + 24);
    if (v6 && *(_QWORD *)(v6 + 56))
    {
      if (gLogDatapath)
      {
        v29 = __nwlog_obj();
        if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
        {
          v30 = *(_QWORD *)(a1 + 32);
          v31 = (const char *)(v30 + 205);
          v27 = v30 == 0;
          v32 = *(_DWORD *)(a1 + 40);
          if (v27)
            v31 = "";
          *(_DWORD *)buf = 136446978;
          v36 = "nw_protocol_http2_transport_error_block_invoke";
          v37 = 2082;
          v38 = v31;
          v39 = 1024;
          *(_DWORD *)v40 = v32;
          *(_WORD *)&v40[4] = 2048;
          *(_QWORD *)&v40[6] = v5;
          _os_log_impl(&dword_182FBE000, v29, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s passing error %d to input protocol %p", buf, 0x26u);
        }
      }
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v5 + 24) + 56))(v5, *(_QWORD *)(a1 + 32), *(unsigned int *)(a1 + 40));
    }
    else
    {
      v24 = __nwlog_obj();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      {
        v25 = *(_QWORD *)(a1 + 32);
        v26 = (const char *)(v25 + 205);
        v27 = v25 == 0;
        v28 = *(_DWORD *)(a1 + 40);
        if (v27)
          v26 = "";
        *(_DWORD *)buf = 136446978;
        v36 = "nw_protocol_http2_transport_error_block_invoke";
        v37 = 2082;
        v38 = v26;
        v39 = 2048;
        *(_QWORD *)v40 = v5;
        *(_WORD *)&v40[8] = 1024;
        *(_DWORD *)&v40[10] = v28;
        _os_log_impl(&dword_182FBE000, v24, OS_LOG_TYPE_ERROR, "%{public}s %{public}s callbacks on protocol %p not set, cannot pass error %d", buf, 0x26u);
      }
    }
    return 1;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v7 = *(_QWORD *)(a1 + 32);
  if (v7)
    v8 = (const char *)(v7 + 205);
  else
    v8 = "";
  *(_DWORD *)buf = 136446722;
  v36 = "nw_protocol_http2_transport_error_block_invoke";
  v37 = 2082;
  v38 = v8;
  v39 = 2048;
  *(_QWORD *)v40 = a2;
  v9 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v33 = 0;
  if (__nwlog_fault(v9, &type, &v33))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v10 = gLogObj;
      v11 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_35;
      v12 = *(_QWORD *)(a1 + 32);
      if (v12)
        v13 = (const char *)(v12 + 205);
      else
        v13 = "";
      *(_DWORD *)buf = 136446722;
      v36 = "nw_protocol_http2_transport_error_block_invoke";
      v37 = 2082;
      v38 = v13;
      v39 = 2048;
      *(_QWORD *)v40 = a2;
      v14 = "%{public}s %{public}s node %p did not contain protocol";
      goto LABEL_34;
    }
    if (!v33)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v10 = gLogObj;
      v11 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_35;
      v19 = *(_QWORD *)(a1 + 32);
      if (v19)
        v20 = (const char *)(v19 + 205);
      else
        v20 = "";
      *(_DWORD *)buf = 136446722;
      v36 = "nw_protocol_http2_transport_error_block_invoke";
      v37 = 2082;
      v38 = v20;
      v39 = 2048;
      *(_QWORD *)v40 = a2;
      v14 = "%{public}s %{public}s node %p did not contain protocol, backtrace limit exceeded";
      goto LABEL_34;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v10 = gLogObj;
    v11 = type;
    v16 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (backtrace_string)
    {
      if (v16)
      {
        v17 = *(_QWORD *)(a1 + 32);
        if (v17)
          v18 = (const char *)(v17 + 205);
        else
          v18 = "";
        *(_DWORD *)buf = 136446978;
        v36 = "nw_protocol_http2_transport_error_block_invoke";
        v37 = 2082;
        v38 = v18;
        v39 = 2048;
        *(_QWORD *)v40 = a2;
        *(_WORD *)&v40[8] = 2082;
        *(_QWORD *)&v40[10] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s %{public}s node %p did not contain protocol, dumping backtrace:%{public}s", buf, 0x2Au);
      }
      free(backtrace_string);
      goto LABEL_35;
    }
    if (v16)
    {
      v21 = *(_QWORD *)(a1 + 32);
      if (v21)
        v22 = (const char *)(v21 + 205);
      else
        v22 = "";
      *(_DWORD *)buf = 136446722;
      v36 = "nw_protocol_http2_transport_error_block_invoke";
      v37 = 2082;
      v38 = v22;
      v39 = 2048;
      *(_QWORD *)v40 = a2;
      v14 = "%{public}s %{public}s node %p did not contain protocol, no backtrace";
LABEL_34:
      _os_log_impl(&dword_182FBE000, v10, v11, v14, buf, 0x20u);
    }
  }
LABEL_35:
  if (v9)
    free(v9);
  return 1;
}

void nw_http2_transport_send_settings(uint64_t a1)
{
  id v2;
  void *v3;
  int value;
  id v5;
  void *v6;
  int v7;
  uint64_t v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  const char *v13;
  char *backtrace_string;
  _BOOL4 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  const char *v24;
  char *v25;
  _BOOL4 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  NSObject *v31;
  NSObject *v32;
  char v33;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v36;
  __int16 v37;
  uint64_t v38;
  __int16 v39;
  char *v40;
  uint64_t v41;
  int v42;
  int v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  if (gLogDatapath)
  {
    v30 = __nwlog_obj();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446466;
      v36 = "nw_http2_transport_send_settings";
      v37 = 2082;
      v38 = a1 + 205;
      _os_log_impl(&dword_182FBE000, v30, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s called", buf, 0x16u);
    }
  }
  v2 = nw_parameters_copy_protocol_value(*(void **)(a1 + 88), a1, "streamReceiveWindow");
  if (v2)
  {
    v3 = v2;
    value = xpc_uint64_get_value(v2);
    xpc_release(v3);
  }
  else
  {
    value = 0xFFFF;
  }
  v5 = nw_parameters_copy_protocol_value(*(void **)(a1 + 88), a1, "connectionReceiveWindow");
  if (v5)
  {
    v6 = v5;
    v7 = xpc_uint64_get_value(v5);
    xpc_release(v6);
  }
  else
  {
    v7 = 0xFFFF;
  }
  v41 = 0x6400000003;
  v42 = 4;
  v43 = value;
  if (nghttp2_submit_settings())
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v8 = nghttp2_strerror();
    *(_DWORD *)buf = 136446466;
    v36 = "nw_http2_transport_send_settings";
    v37 = 2082;
    v38 = v8;
    v9 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v33 = 0;
    if (!__nwlog_fault(v9, &type, &v33))
      goto LABEL_23;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v10 = gLogObj;
      v11 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_23;
      v12 = nghttp2_strerror();
      *(_DWORD *)buf = 136446466;
      v36 = "nw_http2_transport_send_settings";
      v37 = 2082;
      v38 = v12;
      v13 = "%{public}s nghttp2_submit_settings: %{public}s failed";
    }
    else if (v33)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v10 = gLogObj;
      v11 = type;
      v15 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (backtrace_string)
      {
        if (v15)
        {
          v16 = nghttp2_strerror();
          *(_DWORD *)buf = 136446722;
          v36 = "nw_http2_transport_send_settings";
          v37 = 2082;
          v38 = v16;
          v39 = 2082;
          v40 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s nghttp2_submit_settings: %{public}s failed, dumping backtrace:%{public}s", buf, 0x20u);
        }
        free(backtrace_string);
        goto LABEL_23;
      }
      if (!v15)
      {
LABEL_23:
        if (v9)
          free(v9);
        goto LABEL_25;
      }
      v18 = nghttp2_strerror();
      *(_DWORD *)buf = 136446466;
      v36 = "nw_http2_transport_send_settings";
      v37 = 2082;
      v38 = v18;
      v13 = "%{public}s nghttp2_submit_settings: %{public}s failed, no backtrace";
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v10 = gLogObj;
      v11 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_23;
      v17 = nghttp2_strerror();
      *(_DWORD *)buf = 136446466;
      v36 = "nw_http2_transport_send_settings";
      v37 = 2082;
      v38 = v17;
      v13 = "%{public}s nghttp2_submit_settings: %{public}s failed, backtrace limit exceeded";
    }
    _os_log_impl(&dword_182FBE000, v10, v11, v13, buf, 0x16u);
    goto LABEL_23;
  }
LABEL_25:
  if (v7 == 0xFFFF || !nghttp2_session_set_local_window_size())
    goto LABEL_43;
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v19 = nghttp2_strerror();
  *(_DWORD *)buf = 136446466;
  v36 = "nw_http2_transport_send_settings";
  v37 = 2082;
  v38 = v19;
  v20 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v33 = 0;
  if (__nwlog_fault(v20, &type, &v33))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v21 = gLogObj;
      v22 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_41;
      v23 = nghttp2_strerror();
      *(_DWORD *)buf = 136446466;
      v36 = "nw_http2_transport_send_settings";
      v37 = 2082;
      v38 = v23;
      v24 = "%{public}s nghttp2_session_set_local_window_size: %{public}s failed";
      goto LABEL_40;
    }
    if (!v33)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v21 = gLogObj;
      v22 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_41;
      v28 = nghttp2_strerror();
      *(_DWORD *)buf = 136446466;
      v36 = "nw_http2_transport_send_settings";
      v37 = 2082;
      v38 = v28;
      v24 = "%{public}s nghttp2_session_set_local_window_size: %{public}s failed, backtrace limit exceeded";
      goto LABEL_40;
    }
    v25 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v21 = gLogObj;
    v22 = type;
    v26 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (v25)
    {
      if (v26)
      {
        v27 = nghttp2_strerror();
        *(_DWORD *)buf = 136446722;
        v36 = "nw_http2_transport_send_settings";
        v37 = 2082;
        v38 = v27;
        v39 = 2082;
        v40 = v25;
        _os_log_impl(&dword_182FBE000, v21, v22, "%{public}s nghttp2_session_set_local_window_size: %{public}s failed, dumping backtrace:%{public}s", buf, 0x20u);
      }
      free(v25);
      goto LABEL_41;
    }
    if (v26)
    {
      v29 = nghttp2_strerror();
      *(_DWORD *)buf = 136446466;
      v36 = "nw_http2_transport_send_settings";
      v37 = 2082;
      v38 = v29;
      v24 = "%{public}s nghttp2_session_set_local_window_size: %{public}s failed, no backtrace";
LABEL_40:
      _os_log_impl(&dword_182FBE000, v21, v22, v24, buf, 0x16u);
    }
  }
LABEL_41:
  if (v20)
    free(v20);
LABEL_43:
  if (gLogDatapath)
  {
    v31 = __nwlog_obj();
    if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446466;
      v36 = "nw_http2_transport_send_settings";
      v37 = 2082;
      v38 = a1 + 205;
      _os_log_impl(&dword_182FBE000, v31, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s submitted settings to nghttp2", buf, 0x16u);
    }
  }
  nw_http2_transport_session_send(a1);
  if (gLogDatapath)
  {
    v32 = __nwlog_obj();
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446466;
      v36 = "nw_http2_transport_send_settings";
      v37 = 2082;
      v38 = a1 + 205;
      _os_log_impl(&dword_182FBE000, v32, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s nghttp2_session_send complete with settings", buf, 0x16u);
    }
  }
}

uint64_t ___ZL45nw_protocol_http2_transport_process_connectedP27nw_protocol_http2_transport_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  const char *v7;
  const char *v8;
  NSObject *v9;
  os_log_type_t v10;
  uint32_t v11;
  uint64_t v12;
  const char *v13;
  char *v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  const char *v18;
  const char *v19;
  char *backtrace_string;
  _BOOL4 v21;
  uint64_t v22;
  const char *v23;
  uint64_t object;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  BOOL v28;
  int v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  const char *v37;
  char *v39;
  _BOOL4 v40;
  uint64_t v41;
  const char *v42;
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  const char *v46;
  NSObject *v47;
  uint64_t v48;
  const char *v49;
  int v50;
  NSObject *v51;
  uint64_t v52;
  const char *v53;
  int v54;
  char v55;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v58;
  __int16 v59;
  const char *v60;
  __int16 v61;
  _BYTE v62[18];
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)nw_hash_node_get_extra(a2);
  if (!v4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v12 = *(_QWORD *)(a1 + 32);
    if (v12)
      v13 = (const char *)(v12 + 205);
    else
      v13 = "";
    *(_DWORD *)buf = 136446722;
    v58 = "nw_protocol_http2_transport_process_connected_block_invoke";
    v59 = 2082;
    v60 = v13;
    v61 = 2048;
    *(_QWORD *)v62 = a2;
    v14 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v55 = 0;
    if (__nwlog_fault(v14, &type, &v55))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v15 = gLogObj;
        v16 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type))
          goto LABEL_59;
        v17 = *(_QWORD *)(a1 + 32);
        if (v17)
          v18 = (const char *)(v17 + 205);
        else
          v18 = "";
        *(_DWORD *)buf = 136446722;
        v58 = "nw_protocol_http2_transport_process_connected_block_invoke";
        v59 = 2082;
        v60 = v18;
        v61 = 2048;
        *(_QWORD *)v62 = a2;
        v19 = "%{public}s %{public}s protocol hash node %p didn't have stream extra";
        goto LABEL_58;
      }
      if (!v55)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v15 = gLogObj;
        v16 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type))
          goto LABEL_59;
        v30 = *(_QWORD *)(a1 + 32);
        if (v30)
          v31 = (const char *)(v30 + 205);
        else
          v31 = "";
        *(_DWORD *)buf = 136446722;
        v58 = "nw_protocol_http2_transport_process_connected_block_invoke";
        v59 = 2082;
        v60 = v31;
        v61 = 2048;
        *(_QWORD *)v62 = a2;
        v19 = "%{public}s %{public}s protocol hash node %p didn't have stream extra, backtrace limit exceeded";
        goto LABEL_58;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v15 = gLogObj;
      v16 = type;
      v21 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (!backtrace_string)
      {
        if (!v21)
          goto LABEL_59;
        v36 = *(_QWORD *)(a1 + 32);
        if (v36)
          v37 = (const char *)(v36 + 205);
        else
          v37 = "";
        *(_DWORD *)buf = 136446722;
        v58 = "nw_protocol_http2_transport_process_connected_block_invoke";
        v59 = 2082;
        v60 = v37;
        v61 = 2048;
        *(_QWORD *)v62 = a2;
        v19 = "%{public}s %{public}s protocol hash node %p didn't have stream extra, no backtrace";
        goto LABEL_58;
      }
      if (v21)
      {
        v22 = *(_QWORD *)(a1 + 32);
        if (v22)
          v23 = (const char *)(v22 + 205);
        else
          v23 = "";
        *(_DWORD *)buf = 136446978;
        v58 = "nw_protocol_http2_transport_process_connected_block_invoke";
        v59 = 2082;
        v60 = v23;
        v61 = 2048;
        *(_QWORD *)v62 = a2;
        *(_WORD *)&v62[8] = 2082;
        *(_QWORD *)&v62[10] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v15, v16, "%{public}s %{public}s protocol hash node %p didn't have stream extra, dumping backtrace:%{public}s", buf, 0x2Au);
      }
      free(backtrace_string);
    }
    goto LABEL_59;
  }
  if (gLogDatapath)
  {
    v47 = __nwlog_obj();
    if (os_log_type_enabled(v47, OS_LOG_TYPE_DEBUG))
    {
      v48 = *(_QWORD *)(a1 + 32);
      v49 = (const char *)(v48 + 205);
      v28 = v48 == 0;
      v50 = *(_DWORD *)(v4 + 32);
      if (v28)
        v49 = "";
      *(_DWORD *)buf = 136446722;
      v58 = "nw_protocol_http2_transport_process_connected_block_invoke";
      v59 = 2082;
      v60 = v49;
      v61 = 1024;
      *(_DWORD *)v62 = v50;
      _os_log_impl(&dword_182FBE000, v47, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s checking existing stream %d to see if waiting_for_connect", buf, 0x1Cu);
    }
  }
  if ((*(_BYTE *)(v4 + 36) & 2) == 0)
    return 1;
  if ((*(_BYTE *)(v4 + 36) & 8) != 0 && *(_DWORD *)(v4 + 32) == 1)
  {
    if (gLogDatapath)
    {
      v5 = __nwlog_obj();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
      {
        v6 = *(_QWORD *)(a1 + 32);
        if (v6)
          v7 = (const char *)(v6 + 205);
        else
          v7 = "";
        *(_DWORD *)buf = 136446466;
        v58 = "nw_protocol_http2_transport_process_connected_block_invoke";
        v59 = 2082;
        v60 = v7;
        v8 = "%{public}s %{public}s deferring stream connect for initial responder stream";
        v9 = v5;
        v10 = OS_LOG_TYPE_DEBUG;
        v11 = 22;
LABEL_37:
        _os_log_impl(&dword_182FBE000, v9, v10, v8, buf, v11);
        return 1;
      }
    }
    return 1;
  }
  if (gLogDatapath)
  {
    v51 = __nwlog_obj();
    if (os_log_type_enabled(v51, OS_LOG_TYPE_DEBUG))
    {
      v52 = *(_QWORD *)(a1 + 32);
      v53 = (const char *)(v52 + 205);
      v28 = v52 == 0;
      v54 = *(_DWORD *)(v4 + 32);
      if (v28)
        v53 = "";
      *(_DWORD *)buf = 136446722;
      v58 = "nw_protocol_http2_transport_process_connected_block_invoke";
      v59 = 2082;
      v60 = v53;
      v61 = 1024;
      *(_DWORD *)v62 = v54;
      _os_log_impl(&dword_182FBE000, v51, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s calling connect on waiting stream %d", buf, 0x1Cu);
    }
  }
  object = nw_hash_node_get_object(a2);
  if (!object)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v32 = *(_QWORD *)(a1 + 32);
    if (v32)
      v33 = (const char *)(v32 + 205);
    else
      v33 = "";
    *(_DWORD *)buf = 136446722;
    v58 = "nw_protocol_http2_transport_process_connected_block_invoke";
    v59 = 2082;
    v60 = v33;
    v61 = 2048;
    *(_QWORD *)v62 = a2;
    v14 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v55 = 0;
    if (__nwlog_fault(v14, &type, &v55))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v15 = gLogObj;
        v16 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type))
          goto LABEL_59;
        v34 = *(_QWORD *)(a1 + 32);
        if (v34)
          v35 = (const char *)(v34 + 205);
        else
          v35 = "";
        *(_DWORD *)buf = 136446722;
        v58 = "nw_protocol_http2_transport_process_connected_block_invoke";
        v59 = 2082;
        v60 = v35;
        v61 = 2048;
        *(_QWORD *)v62 = a2;
        v19 = "%{public}s %{public}s protocol hash node %p didn't have object";
        goto LABEL_58;
      }
      if (v55)
      {
        v39 = (char *)__nw_create_backtrace_string();
        v15 = __nwlog_obj();
        v16 = type;
        v40 = os_log_type_enabled(v15, type);
        if (v39)
        {
          if (v40)
          {
            v41 = *(_QWORD *)(a1 + 32);
            if (v41)
              v42 = (const char *)(v41 + 205);
            else
              v42 = "";
            *(_DWORD *)buf = 136446978;
            v58 = "nw_protocol_http2_transport_process_connected_block_invoke";
            v59 = 2082;
            v60 = v42;
            v61 = 2048;
            *(_QWORD *)v62 = a2;
            *(_WORD *)&v62[8] = 2082;
            *(_QWORD *)&v62[10] = v39;
            _os_log_impl(&dword_182FBE000, v15, v16, "%{public}s %{public}s protocol hash node %p didn't have object, dumping backtrace:%{public}s", buf, 0x2Au);
          }
          free(v39);
          if (!v14)
            return 1;
LABEL_60:
          free(v14);
          return 1;
        }
        if (v40)
        {
          v45 = *(_QWORD *)(a1 + 32);
          if (v45)
            v46 = (const char *)(v45 + 205);
          else
            v46 = "";
          *(_DWORD *)buf = 136446722;
          v58 = "nw_protocol_http2_transport_process_connected_block_invoke";
          v59 = 2082;
          v60 = v46;
          v61 = 2048;
          *(_QWORD *)v62 = a2;
          v19 = "%{public}s %{public}s protocol hash node %p didn't have object, no backtrace";
LABEL_58:
          _os_log_impl(&dword_182FBE000, v15, v16, v19, buf, 0x20u);
        }
      }
      else
      {
        v15 = __nwlog_obj();
        v16 = type;
        if (os_log_type_enabled(v15, type))
        {
          v43 = *(_QWORD *)(a1 + 32);
          if (v43)
            v44 = (const char *)(v43 + 205);
          else
            v44 = "";
          *(_DWORD *)buf = 136446722;
          v58 = "nw_protocol_http2_transport_process_connected_block_invoke";
          v59 = 2082;
          v60 = v44;
          v61 = 2048;
          *(_QWORD *)v62 = a2;
          v19 = "%{public}s %{public}s protocol hash node %p didn't have object, backtrace limit exceeded";
          goto LABEL_58;
        }
      }
    }
LABEL_59:
    if (!v14)
      return 1;
    goto LABEL_60;
  }
  if (!nw_http2_transport_stream_connect(*(_QWORD *)(a1 + 32), v4, object))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v25 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      v26 = *(_QWORD *)(a1 + 32);
      v27 = (const char *)(v26 + 205);
      v28 = v26 == 0;
      v29 = *(_DWORD *)(v4 + 32);
      if (v28)
        v27 = "";
      *(_DWORD *)buf = 136446978;
      v58 = "nw_protocol_http2_transport_process_connected_block_invoke";
      v59 = 2082;
      v60 = v27;
      v61 = 1024;
      *(_DWORD *)v62 = v29;
      *(_WORD *)&v62[4] = 2048;
      *(_QWORD *)&v62[6] = v4;
      v8 = "%{public}s %{public}s nw_http2_transport_stream_connect failed for stream id %d (%p)";
      v9 = v25;
      v10 = OS_LOG_TYPE_ERROR;
      v11 = 38;
      goto LABEL_37;
    }
  }
  return 1;
}

uint64_t ___ZL41nw_protocol_http2_transport_process_inputP27nw_protocol_http2_transport_block_invoke_23(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t object;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, _QWORD);
  const char *v10;
  NSObject *v11;
  uint64_t v12;
  const char *v13;
  BOOL v14;
  int v15;
  char *v16;
  NSObject *v17;
  os_log_type_t v18;
  const char *v19;
  const char *v20;
  char *backtrace_string;
  _BOOL4 v22;
  const char *v23;
  const char *v24;
  const char *v25;
  char v26;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v29;
  __int16 v30;
  const char *v31;
  __int16 v32;
  char *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)nw_hash_node_get_extra(a2);
  object = nw_hash_node_get_object(a2);
  if ((*(_BYTE *)(v4 + 36) & 1) == 0 || !*(_QWORD *)v4)
    return 1;
  v6 = object;
  if (gLogDatapath)
  {
    v11 = __nwlog_obj();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      v12 = *(_QWORD *)(a1 + 32);
      v13 = (const char *)(v12 + 205);
      v14 = v12 == 0;
      v15 = *(_DWORD *)(v4 + 32);
      if (v14)
        v13 = "";
      *(_DWORD *)buf = 136446722;
      v29 = "nw_protocol_http2_transport_process_input_block_invoke";
      v30 = 2082;
      v31 = v13;
      v32 = 1024;
      LODWORD(v33) = v15;
      _os_log_impl(&dword_182FBE000, v11, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s calling input_available on stream %d", buf, 0x1Cu);
    }
  }
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 24);
    if (v7)
    {
      v8 = *(void (**)(uint64_t, _QWORD))(v7 + 64);
      if (v8)
      {
        v8(v6, *(_QWORD *)(a1 + 32));
        return 1;
      }
    }
    __nwlog_obj();
    v10 = *(const char **)(v6 + 16);
    if (!v10)
      v10 = "invalid";
  }
  else
  {
    __nwlog_obj();
    v10 = "invalid";
  }
  *(_DWORD *)buf = 136446466;
  v29 = "nw_protocol_http2_transport_process_input_block_invoke";
  v30 = 2082;
  v31 = v10;
  v16 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v26 = 0;
  if (__nwlog_fault(v16, &type, &v26))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v17 = __nwlog_obj();
      v18 = type;
      if (!os_log_type_enabled(v17, type))
        goto LABEL_43;
      v19 = "invalid";
      if (v6 && *(_QWORD *)(v6 + 16))
        v19 = *(const char **)(v6 + 16);
      *(_DWORD *)buf = 136446466;
      v29 = "nw_protocol_http2_transport_process_input_block_invoke";
      v30 = 2082;
      v31 = v19;
      v20 = "%{public}s protocol %{public}s has invalid input_available callback";
      goto LABEL_42;
    }
    if (!v26)
    {
      v17 = __nwlog_obj();
      v18 = type;
      if (!os_log_type_enabled(v17, type))
        goto LABEL_43;
      v24 = "invalid";
      if (v6 && *(_QWORD *)(v6 + 16))
        v24 = *(const char **)(v6 + 16);
      *(_DWORD *)buf = 136446466;
      v29 = "nw_protocol_http2_transport_process_input_block_invoke";
      v30 = 2082;
      v31 = v24;
      v20 = "%{public}s protocol %{public}s has invalid input_available callback, backtrace limit exceeded";
      goto LABEL_42;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v17 = __nwlog_obj();
    v18 = type;
    v22 = os_log_type_enabled(v17, type);
    if (backtrace_string)
    {
      if (v22)
      {
        v23 = "invalid";
        if (v6 && *(_QWORD *)(v6 + 16))
          v23 = *(const char **)(v6 + 16);
        *(_DWORD *)buf = 136446722;
        v29 = "nw_protocol_http2_transport_process_input_block_invoke";
        v30 = 2082;
        v31 = v23;
        v32 = 2082;
        v33 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v17, v18, "%{public}s protocol %{public}s has invalid input_available callback, dumping backtrace:%{public}s", buf, 0x20u);
      }
      free(backtrace_string);
      goto LABEL_43;
    }
    if (v22)
    {
      v25 = "invalid";
      if (v6 && *(_QWORD *)(v6 + 16))
        v25 = *(const char **)(v6 + 16);
      *(_DWORD *)buf = 136446466;
      v29 = "nw_protocol_http2_transport_process_input_block_invoke";
      v30 = 2082;
      v31 = v25;
      v20 = "%{public}s protocol %{public}s has invalid input_available callback, no backtrace";
LABEL_42:
      _os_log_impl(&dword_182FBE000, v17, v18, v20, buf, 0x16u);
    }
  }
LABEL_43:
  if (v16)
    free(v16);
  return 1;
}

__n128 __Block_byref_object_copy__37957(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  return result;
}

uint64_t ___ZL44nw_protocol_http2_transport_get_input_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke_37(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(a2 + 32);
  v3 = *(_QWORD **)(a2 + 40);
  if (v2)
  {
    *(_QWORD *)(v2 + 40) = v3;
    v3 = *(_QWORD **)(a2 + 40);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) = v3;
  }
  *v3 = v2;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  return 1;
}

uint64_t ___ZL38nw_http2_transport_drain_output_framesP27nw_protocol_http2_transport_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t object;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  const char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  int v17;
  const char *v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  object = nw_hash_node_get_object(a2);
  if (!object)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v7 = gLogObj;
    if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      return 1;
    v8 = *(_QWORD *)(a1 + 32);
    v17 = 136446722;
    v18 = "nw_http2_transport_drain_output_frames_block_invoke";
    if (v8)
      v9 = (const char *)(v8 + 205);
    else
      v9 = "";
    v19 = 2082;
    v20 = v9;
    v21 = 2048;
    v22 = a2;
    v10 = "%{public}s %{public}s input protocol in node %p in protocol table is NULL, skipping";
    v11 = v7;
    v12 = OS_LOG_TYPE_ERROR;
LABEL_16:
    _os_log_impl(&dword_182FBE000, v11, v12, v10, (uint8_t *)&v17, 0x20u);
    return 1;
  }
  v5 = object;
  v6 = *(_QWORD *)nw_hash_node_get_extra(a2);
  if (!v6)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v13 = gLogObj;
    if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
      return 1;
    v14 = *(_QWORD *)(a1 + 32);
    v17 = 136446722;
    v18 = "nw_http2_transport_drain_output_frames_block_invoke";
    if (v14)
      v15 = (const char *)(v14 + 205);
    else
      v15 = "";
    v19 = 2082;
    v20 = v15;
    v21 = 2048;
    v22 = v5;
    v10 = "%{public}s %{public}s stream not found for input protocol %p, not draining output frames";
    v11 = v13;
    v12 = OS_LOG_TYPE_INFO;
    goto LABEL_16;
  }
  if (nw_http2_transport_drain_next_frame_for_stream(*(_QWORD *)(a1 + 32), v5, v6, 1))
  {
    while ((nw_http2_transport_drain_next_frame_for_stream(*(_QWORD *)(a1 + 32), v5, v6, 1) & 1) != 0)
      ;
  }
  return 1;
}

void nw_http2_transport_copy_stream(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unsigned int v4;
  unsigned int v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  const char *v9;
  char *backtrace_string;
  _BOOL4 v11;
  char *v12;
  _BOOL4 v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v17 = "nw_http2_transport_copy_stream";
    v6 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v14 = 0;
    if (!__nwlog_fault(v6, &type, &v14))
      goto LABEL_37;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v7 = __nwlog_obj();
      v8 = type;
      if (!os_log_type_enabled(v7, type))
        goto LABEL_37;
      *(_DWORD *)buf = 136446210;
      v17 = "nw_http2_transport_copy_stream";
      v9 = "%{public}s called with null old_stream";
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v7 = __nwlog_obj();
      v8 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_http2_transport_copy_stream";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null old_stream, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_37:
        if (!v6)
          return;
LABEL_38:
        free(v6);
        return;
      }
      if (!v11)
        goto LABEL_37;
      *(_DWORD *)buf = 136446210;
      v17 = "nw_http2_transport_copy_stream";
      v9 = "%{public}s called with null old_stream, no backtrace";
    }
    else
    {
      v7 = __nwlog_obj();
      v8 = type;
      if (!os_log_type_enabled(v7, type))
        goto LABEL_37;
      *(_DWORD *)buf = 136446210;
      v17 = "nw_http2_transport_copy_stream";
      v9 = "%{public}s called with null old_stream, backtrace limit exceeded";
    }
LABEL_36:
    _os_log_impl(&dword_182FBE000, v7, v8, v9, buf, 0xCu);
    goto LABEL_37;
  }
  if (a2)
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = a2;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)a2 = *(_QWORD *)a1;
      *(_QWORD *)(*(_QWORD *)a1 + 24) = a2;
      *(_QWORD *)(a2 + 8) = *(_QWORD *)(a1 + 8);
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = a1;
    }
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = a2 + 16;
    v2 = *(_QWORD *)(a1 + 16);
    if (v2)
    {
      *(_QWORD *)(a2 + 16) = v2;
      *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24) = a2 + 16;
      *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
      *(_QWORD *)(a1 + 16) = 0;
      *(_QWORD *)(a1 + 24) = a1 + 16;
    }
    *(_DWORD *)(a2 + 32) = *(_DWORD *)(a1 + 32);
    v3 = *(_BYTE *)(a2 + 36) & 0xFE | *(_BYTE *)(a1 + 36) & 1;
    *(_BYTE *)(a2 + 36) = v3;
    v4 = v3 & 0xFFFFFFFD | (2 * ((*(unsigned __int8 *)(a1 + 36) >> 1) & 1));
    *(_BYTE *)(a2 + 36) = v4;
    v5 = v4 & 0xFFFFFFFB | (4 * ((*(unsigned __int8 *)(a1 + 36) >> 2) & 1));
    *(_BYTE *)(a2 + 36) = v5;
    *(_BYTE *)(a2 + 36) = v5 & 0xF7 | *(_BYTE *)(a1 + 36) & 8;
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_http2_transport_copy_stream";
  v6 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (!__nwlog_fault(v6, &type, &v14))
    goto LABEL_37;
  if (type == OS_LOG_TYPE_FAULT)
  {
    v7 = __nwlog_obj();
    v8 = type;
    if (!os_log_type_enabled(v7, type))
      goto LABEL_37;
    *(_DWORD *)buf = 136446210;
    v17 = "nw_http2_transport_copy_stream";
    v9 = "%{public}s called with null new_stream";
    goto LABEL_36;
  }
  if (!v14)
  {
    v7 = __nwlog_obj();
    v8 = type;
    if (!os_log_type_enabled(v7, type))
      goto LABEL_37;
    *(_DWORD *)buf = 136446210;
    v17 = "nw_http2_transport_copy_stream";
    v9 = "%{public}s called with null new_stream, backtrace limit exceeded";
    goto LABEL_36;
  }
  v12 = (char *)__nw_create_backtrace_string();
  v7 = __nwlog_obj();
  v8 = type;
  v13 = os_log_type_enabled(v7, type);
  if (!v12)
  {
    if (!v13)
      goto LABEL_37;
    *(_DWORD *)buf = 136446210;
    v17 = "nw_http2_transport_copy_stream";
    v9 = "%{public}s called with null new_stream, no backtrace";
    goto LABEL_36;
  }
  if (v13)
  {
    *(_DWORD *)buf = 136446466;
    v17 = "nw_http2_transport_copy_stream";
    v18 = 2082;
    v19 = v12;
    _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null new_stream, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v12);
  if (v6)
    goto LABEL_38;
}

BOOL nw_http2_transport_remove_from_protocol_table(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 node;
  _BOOL8 result;
  NSObject *v7;
  const char *v8;
  uint64_t v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  const char *v13;
  char *backtrace_string;
  _BOOL4 v15;
  NSObject *v16;
  NSObject *v17;
  char v18;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  char *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if (gLogDatapath)
  {
    v16 = __nwlog_obj();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446722;
      v21 = "nw_http2_transport_remove_from_protocol_table";
      v22 = 2082;
      v23 = a1 + 205;
      v24 = 2048;
      v25 = a2;
      _os_log_impl(&dword_182FBE000, v16, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s called for input handler %p", buf, 0x20u);
    }
  }
  v4 = *(_QWORD *)(a1 + 112);
  if (!v4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v7 = gLogObj;
    result = os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    *(_DWORD *)buf = 136446722;
    v21 = "nw_http2_transport_remove_from_protocol_table";
    v22 = 2082;
    v23 = a1 + 205;
    v24 = 2048;
    v25 = a2;
    v8 = "%{public}s %{public}s protocol based table is NULL, cannot remove protocol %p";
LABEL_11:
    _os_log_impl(&dword_182FBE000, v7, OS_LOG_TYPE_ERROR, v8, buf, 0x20u);
    return 0;
  }
  node = nw_hash_table_get_node(v4, a2, 16);
  if (!node)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v7 = gLogObj;
    result = os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    *(_DWORD *)buf = 136446722;
    v21 = "nw_http2_transport_remove_from_protocol_table";
    v22 = 2082;
    v23 = a1 + 205;
    v24 = 2048;
    v25 = a2;
    v8 = "%{public}s %{public}s protocol %p is not present in id based table, cannot remove";
    goto LABEL_11;
  }
  if (!nw_hash_table_remove_node(*(_QWORD *)(a1 + 112), node))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v9 = a1 + 205;
    *(_DWORD *)buf = 136446722;
    v21 = "nw_http2_transport_remove_from_protocol_table";
    v22 = 2082;
    v23 = a1 + 205;
    v24 = 2048;
    v25 = a2;
    v10 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v18 = 0;
    if (!__nwlog_fault(v10, &type, &v18))
      goto LABEL_26;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v11 = gLogObj;
      v12 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_26;
      *(_DWORD *)buf = 136446722;
      v21 = "nw_http2_transport_remove_from_protocol_table";
      v22 = 2082;
      v23 = v9;
      v24 = 2048;
      v25 = a2;
      v13 = "%{public}s %{public}s failed to remove protocol node for protocol %p from table";
    }
    else if (v18)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v11 = gLogObj;
      v12 = type;
      v15 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446978;
          v21 = "nw_http2_transport_remove_from_protocol_table";
          v22 = 2082;
          v23 = v9;
          v24 = 2048;
          v25 = a2;
          v26 = 2082;
          v27 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s %{public}s failed to remove protocol node for protocol %p from table, dumping backtrace:%{public}s", buf, 0x2Au);
        }
        free(backtrace_string);
        goto LABEL_26;
      }
      if (!v15)
      {
LABEL_26:
        if (v10)
          free(v10);
        return 0;
      }
      *(_DWORD *)buf = 136446722;
      v21 = "nw_http2_transport_remove_from_protocol_table";
      v22 = 2082;
      v23 = v9;
      v24 = 2048;
      v25 = a2;
      v13 = "%{public}s %{public}s failed to remove protocol node for protocol %p from table, no backtrace";
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v11 = gLogObj;
      v12 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_26;
      *(_DWORD *)buf = 136446722;
      v21 = "nw_http2_transport_remove_from_protocol_table";
      v22 = 2082;
      v23 = v9;
      v24 = 2048;
      v25 = a2;
      v13 = "%{public}s %{public}s failed to remove protocol node for protocol %p from table, backtrace limit exceeded";
    }
    _os_log_impl(&dword_182FBE000, v11, v12, v13, buf, 0x20u);
    goto LABEL_26;
  }
  *(_QWORD *)(a2 + 56) = 0;
  if (gLogDatapath)
  {
    v17 = __nwlog_obj();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446722;
      v21 = "nw_http2_transport_remove_from_protocol_table";
      v22 = 2082;
      v23 = a1 + 205;
      v24 = 2048;
      v25 = a2;
      _os_log_impl(&dword_182FBE000, v17, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s removed protocol %p from protocol based table", buf, 0x20u);
    }
  }
  return 1;
}

void ___ZL48nw_protocol_http2_transport_remove_input_handlerP11nw_protocolS0_b_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  os_unfair_lock_s *v8;
  os_unfair_lock_s *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  os_log_type_t v19;
  const char *v20;
  char *backtrace_string;
  _BOOL4 v22;
  const char *v23;
  NSObject *v24;
  os_log_type_t v25;
  uint32_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint32_t v29;
  NSObject *v30;
  os_log_type_t v31;
  NSObject *v32;
  uint64_t v33;
  const char *v34;
  const char *v35;
  char *v36;
  NSObject *v37;
  os_log_type_t v38;
  uint64_t v39;
  const char *v40;
  const char *v41;
  const char *v42;
  _BOOL4 v43;
  _BOOL4 v44;
  char *v45;
  _BOOL4 v46;
  uint64_t v47;
  const char *v48;
  const char *v49;
  const char *v50;
  char *v51;
  NSObject *v52;
  os_log_type_t v53;
  const char *v54;
  const char *v55;
  NSObject *v56;
  char *v57;
  _BOOL4 v58;
  const char *v59;
  uint64_t v60;
  const char *v61;
  const char *v62;
  uint64_t v63;
  const char *v64;
  const char *v65;
  const char *v66;
  const char *v67;
  char v68;
  os_log_type_t v69;
  os_log_type_t type[4];
  const char *v71;
  __int16 v72;
  const char *v73;
  __int16 v74;
  char *v75;
  _BYTE buf[24];
  char *v77;
  uint64_t v78;
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  if (!v2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_http2_transport_destroy";
    v3 = _os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    v69 = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault((const char *)v3, type, &v69))
      goto LABEL_45;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      v30 = __nwlog_obj();
      v31 = type[0];
      if (os_log_type_enabled(v30, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_http2_transport_destroy";
        v20 = "%{public}s called with null protocol";
LABEL_109:
        v27 = v30;
        v28 = v31;
        v29 = 12;
        goto LABEL_44;
      }
LABEL_45:
      if (!v3)
        return;
      goto LABEL_46;
    }
    if (v69 == OS_LOG_TYPE_DEFAULT)
    {
      v30 = __nwlog_obj();
      v31 = type[0];
      if (os_log_type_enabled(v30, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_http2_transport_destroy";
        v20 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_109;
      }
      goto LABEL_45;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v30 = __nwlog_obj();
    v31 = type[0];
    v43 = os_log_type_enabled(v30, type[0]);
    if (!backtrace_string)
    {
      if (v43)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_http2_transport_destroy";
        v20 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_109;
      }
      goto LABEL_45;
    }
    if (!v43)
      goto LABEL_37;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "nw_protocol_http2_transport_destroy";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = backtrace_string;
    v23 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_76:
    v24 = v30;
    v25 = v31;
    v26 = 22;
    goto LABEL_36;
  }
  v3 = *(_QWORD *)(v2 + 40);
  if (!v3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_http2_transport_destroy";
    v3 = _os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    v69 = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault((const char *)v3, type, &v69))
      goto LABEL_45;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      v30 = __nwlog_obj();
      v31 = type[0];
      if (os_log_type_enabled(v30, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_http2_transport_destroy";
        v20 = "%{public}s called with null http2_transport";
        goto LABEL_109;
      }
      goto LABEL_45;
    }
    if (v69 == OS_LOG_TYPE_DEFAULT)
    {
      v30 = __nwlog_obj();
      v31 = type[0];
      if (os_log_type_enabled(v30, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_http2_transport_destroy";
        v20 = "%{public}s called with null http2_transport, backtrace limit exceeded";
        goto LABEL_109;
      }
      goto LABEL_45;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v30 = __nwlog_obj();
    v31 = type[0];
    v44 = os_log_type_enabled(v30, type[0]);
    if (!backtrace_string)
    {
      if (v44)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_http2_transport_destroy";
        v20 = "%{public}s called with null http2_transport, no backtrace";
        goto LABEL_109;
      }
      goto LABEL_45;
    }
    if (!v44)
      goto LABEL_37;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "nw_protocol_http2_transport_destroy";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = backtrace_string;
    v23 = "%{public}s called with null http2_transport, dumping backtrace:%{public}s";
    goto LABEL_76;
  }
  if (gLogDatapath)
  {
    v32 = __nwlog_obj();
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_protocol_http2_transport_destroy";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v3 + 205;
      _os_log_impl(&dword_182FBE000, v32, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s called", buf, 0x16u);
    }
  }
  v4 = *(_QWORD *)(v3 + 72);
  if (v4)
  {
    nw_queue_cancel_source(v4, a2);
    *(_QWORD *)(v3 + 72) = 0;
  }
  v5 = *(_QWORD *)(v3 + 112);
  if (!v5)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v17 = v3 + 205;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "nw_protocol_http2_transport_destroy";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v3 + 205;
    v3 = _os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    v69 = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault((const char *)v3, type, &v69))
      goto LABEL_45;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v18 = gLogObj;
      v19 = type[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, type[0]))
        goto LABEL_45;
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_protocol_http2_transport_destroy";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v17;
      v20 = "%{public}s %{public}s http2_transport_streams_protocol NULL when destroying";
LABEL_43:
      v27 = v18;
      v28 = v19;
      v29 = 22;
LABEL_44:
      _os_log_impl(&dword_182FBE000, v27, v28, v20, buf, v29);
      goto LABEL_45;
    }
    if (v69 == OS_LOG_TYPE_DEFAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v18 = gLogObj;
      v19 = type[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, type[0]))
        goto LABEL_45;
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_protocol_http2_transport_destroy";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v17;
      v20 = "%{public}s %{public}s http2_transport_streams_protocol NULL when destroying, backtrace limit exceeded";
      goto LABEL_43;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v18 = gLogObj;
    v19 = type[0];
    v22 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
    if (!backtrace_string)
    {
      if (!v22)
        goto LABEL_45;
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_protocol_http2_transport_destroy";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v17;
      v20 = "%{public}s %{public}s http2_transport_streams_protocol NULL when destroying, no backtrace";
      goto LABEL_43;
    }
    if (v22)
    {
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = "nw_protocol_http2_transport_destroy";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v17;
      *(_WORD *)&buf[22] = 2082;
      v77 = backtrace_string;
      v23 = "%{public}s %{public}s http2_transport_streams_protocol NULL when destroying, dumping backtrace:%{public}s";
      v24 = v18;
      v25 = v19;
      v26 = 32;
LABEL_36:
      _os_log_impl(&dword_182FBE000, v24, v25, v23, buf, v26);
    }
LABEL_37:
    free(backtrace_string);
    if (!v3)
      return;
    goto LABEL_46;
  }
  if (*(_DWORD *)(v5 + 40))
    return;
  nw_protocol_set_input_handler(v2, 0);
  if (gLogDatapath)
  {
    v56 = __nwlog_obj();
    if (os_log_type_enabled(v56, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_protocol_http2_transport_destroy";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v3 + 205;
      _os_log_impl(&dword_182FBE000, v56, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s no more input handlers, destroying", buf, 0x16u);
    }
  }
  v7 = *(char **)(v3 + 120);
  if (v7)
  {
    *(_QWORD *)buf = MEMORY[0x1E0C809B0];
    *(_QWORD *)&buf[8] = 0x40000000;
    *(_QWORD *)&buf[16] = ___ZL35nw_protocol_http2_transport_destroyP11nw_protocol_block_invoke;
    v77 = (char *)&__block_descriptor_tmp_34_38104;
    v78 = v3;
    nw_hash_table_apply(v7, (uint64_t)buf);
    v8 = *(os_unfair_lock_s **)(v3 + 120);
    if (v8)
    {
      _nw_hash_table_release(v8, v6);
      *(_QWORD *)(v3 + 120) = 0;
    }
  }
  v9 = *(os_unfair_lock_s **)(v3 + 112);
  if (v9)
  {
    _nw_hash_table_release(v9, v6);
    *(_QWORD *)(v3 + 112) = 0;
  }
  v10 = *(_QWORD *)(v2 + 32);
  if (v10)
  {
    v11 = *(_QWORD *)(v10 + 24);
    if (v11)
    {
      v12 = *(void (**)(void))(v11 + 8);
      if (v12)
      {
        v12();
        goto LABEL_18;
      }
    }
  }
  __nwlog_obj();
  v33 = *(_QWORD *)(v2 + 32);
  v34 = "invalid";
  if (v33)
  {
    v35 = *(const char **)(v33 + 16);
    if (v35)
      v34 = v35;
  }
  *(_DWORD *)type = 136446466;
  v71 = "nw_protocol_http2_transport_destroy";
  v72 = 2082;
  v73 = v34;
  v36 = (char *)_os_log_send_and_compose_impl();
  v69 = OS_LOG_TYPE_ERROR;
  v68 = 0;
  if (__nwlog_fault(v36, &v69, &v68))
  {
    if (v69 == OS_LOG_TYPE_FAULT)
    {
      v37 = __nwlog_obj();
      v38 = v69;
      if (!os_log_type_enabled(v37, v69))
        goto LABEL_116;
      v39 = *(_QWORD *)(v2 + 32);
      v40 = "invalid";
      if (v39)
      {
        v41 = *(const char **)(v39 + 16);
        if (v41)
          v40 = v41;
      }
      *(_DWORD *)type = 136446466;
      v71 = "nw_protocol_http2_transport_destroy";
      v72 = 2082;
      v73 = v40;
      v42 = "%{public}s protocol %{public}s has invalid remove_input_handler callback";
      goto LABEL_115;
    }
    if (!v68)
    {
      v37 = __nwlog_obj();
      v38 = v69;
      if (!os_log_type_enabled(v37, v69))
        goto LABEL_116;
      v60 = *(_QWORD *)(v2 + 32);
      v61 = "invalid";
      if (v60)
      {
        v62 = *(const char **)(v60 + 16);
        if (v62)
          v61 = v62;
      }
      *(_DWORD *)type = 136446466;
      v71 = "nw_protocol_http2_transport_destroy";
      v72 = 2082;
      v73 = v61;
      v42 = "%{public}s protocol %{public}s has invalid remove_input_handler callback, backtrace limit exceeded";
      goto LABEL_115;
    }
    v45 = (char *)__nw_create_backtrace_string();
    v37 = __nwlog_obj();
    v38 = v69;
    v46 = os_log_type_enabled(v37, v69);
    if (v45)
    {
      if (v46)
      {
        v47 = *(_QWORD *)(v2 + 32);
        v48 = "invalid";
        if (v47)
        {
          v49 = *(const char **)(v47 + 16);
          if (v49)
            v48 = v49;
        }
        *(_DWORD *)type = 136446722;
        v71 = "nw_protocol_http2_transport_destroy";
        v72 = 2082;
        v73 = v48;
        v74 = 2082;
        v75 = v45;
        _os_log_impl(&dword_182FBE000, v37, v38, "%{public}s protocol %{public}s has invalid remove_input_handler callback, dumping backtrace:%{public}s", (uint8_t *)type, 0x20u);
      }
      free(v45);
      goto LABEL_116;
    }
    if (v46)
    {
      v63 = *(_QWORD *)(v2 + 32);
      v64 = "invalid";
      if (v63)
      {
        v65 = *(const char **)(v63 + 16);
        if (v65)
          v64 = v65;
      }
      *(_DWORD *)type = 136446466;
      v71 = "nw_protocol_http2_transport_destroy";
      v72 = 2082;
      v73 = v64;
      v42 = "%{public}s protocol %{public}s has invalid remove_input_handler callback, no backtrace";
LABEL_115:
      _os_log_impl(&dword_182FBE000, v37, v38, v42, (uint8_t *)type, 0x16u);
    }
  }
LABEL_116:
  if (v36)
    free(v36);
LABEL_18:
  nw_protocol_remove_instance(v2);
  v13 = *(_QWORD *)(v3 + 104);
  if (v13)
  {
    if (*(_QWORD *)v13)
    {
      v14 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 8);
      if (v14)
      {
        v14(v13, v2);
LABEL_22:
        *(_QWORD *)(v3 + 104) = 0;
        goto LABEL_23;
      }
    }
    __nwlog_obj();
    v50 = *(const char **)(v3 + 104);
    *(_DWORD *)type = 136446466;
    v71 = "nw_protocol_http2_transport_destroy";
    v72 = 2048;
    v73 = v50;
    v51 = (char *)_os_log_send_and_compose_impl();
    v69 = OS_LOG_TYPE_ERROR;
    v68 = 0;
    if (__nwlog_fault(v51, &v69, &v68))
    {
      if (v69 == OS_LOG_TYPE_FAULT)
      {
        v52 = __nwlog_obj();
        v53 = v69;
        if (!os_log_type_enabled(v52, v69))
          goto LABEL_123;
        v54 = *(const char **)(v3 + 104);
        *(_DWORD *)type = 136446466;
        v71 = "nw_protocol_http2_transport_destroy";
        v72 = 2048;
        v73 = v54;
        v55 = "%{public}s listen protocol (%p) has invalid disconnected callback";
        goto LABEL_122;
      }
      if (!v68)
      {
        v52 = __nwlog_obj();
        v53 = v69;
        if (!os_log_type_enabled(v52, v69))
          goto LABEL_123;
        v66 = *(const char **)(v3 + 104);
        *(_DWORD *)type = 136446466;
        v71 = "nw_protocol_http2_transport_destroy";
        v72 = 2048;
        v73 = v66;
        v55 = "%{public}s listen protocol (%p) has invalid disconnected callback, backtrace limit exceeded";
        goto LABEL_122;
      }
      v57 = (char *)__nw_create_backtrace_string();
      v52 = __nwlog_obj();
      v53 = v69;
      v58 = os_log_type_enabled(v52, v69);
      if (v57)
      {
        if (v58)
        {
          v59 = *(const char **)(v3 + 104);
          *(_DWORD *)type = 136446722;
          v71 = "nw_protocol_http2_transport_destroy";
          v72 = 2048;
          v73 = v59;
          v74 = 2082;
          v75 = v57;
          _os_log_impl(&dword_182FBE000, v52, v53, "%{public}s listen protocol (%p) has invalid disconnected callback, dumping backtrace:%{public}s", (uint8_t *)type, 0x20u);
        }
        free(v57);
        goto LABEL_123;
      }
      if (v58)
      {
        v67 = *(const char **)(v3 + 104);
        *(_DWORD *)type = 136446466;
        v71 = "nw_protocol_http2_transport_destroy";
        v72 = 2048;
        v73 = v67;
        v55 = "%{public}s listen protocol (%p) has invalid disconnected callback, no backtrace";
LABEL_122:
        _os_log_impl(&dword_182FBE000, v52, v53, v55, (uint8_t *)type, 0x16u);
      }
    }
LABEL_123:
    if (v51)
      free(v51);
    goto LABEL_22;
  }
LABEL_23:
  nw_http2_transport_release_frame_array((nw_frame_array_s *)(v3 + 144));
  nw_http2_transport_release_frame_array((nw_frame_array_s *)(v3 + 128));
  nw_http2_transport_release_frame_array((nw_frame_array_s *)(v3 + 160));
  nw_http2_transport_release_frame_array((nw_frame_array_s *)(v3 + 176));
  *(_QWORD *)(v3 + 192) = 0;
  v15 = *(void **)(v3 + 88);
  if (v15)
  {
    os_release(v15);
    *(_QWORD *)(v3 + 88) = 0;
  }
  v16 = *(void **)(v3 + 96);
  if (v16)
  {
    os_release(v16);
    *(_QWORD *)(v3 + 96) = 0;
  }
  nghttp2_session_del();
LABEL_46:
  free((void *)v3);
}

uint64_t ___ZL48nw_protocol_http2_transport_remove_input_handlerP11nw_protocolS0_b_block_invoke_32(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t object;
  NSObject *v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  int v10;
  const char *v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 32);
  object = nw_hash_node_get_object(a2);
  nw_protocol_set_input_handler(v3, object);
  *(_OWORD *)*(_QWORD *)(a1 + 40) = *(_OWORD *)*(_QWORD *)(*(_QWORD *)(a1 + 32) + 48);
  if (gLogDatapath)
  {
    v6 = __nwlog_obj();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      v7 = *(_QWORD *)(a1 + 40);
      if (v7)
        v8 = (const char *)(v7 + 205);
      else
        v8 = "";
      v9 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 48);
      v10 = 136446722;
      v11 = "nw_protocol_http2_transport_remove_input_handler_block_invoke";
      v12 = 2082;
      v13 = v8;
      v14 = 2048;
      v15 = v9;
      _os_log_impl(&dword_182FBE000, v6, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s reset default input handler to %p", (uint8_t *)&v10, 0x20u);
    }
  }
  return 0;
}

uint64_t ___ZL35nw_protocol_http2_transport_destroyP11nw_protocol_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t object;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  const char *v8;
  BOOL v9;
  int v10;
  uint64_t v11;
  const char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  const char *v16;
  const char *v17;
  char *backtrace_string;
  _BOOL4 v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  const char *v25;
  NSObject *v27;
  uint64_t v28;
  const char *v29;
  char v30;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v33;
  __int16 v34;
  const char *v35;
  __int16 v36;
  uint64_t v37;
  __int16 v38;
  char *v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  object = nw_hash_node_get_object(a2);
  if (object)
  {
    v5 = object;
    if ((*(_BYTE *)(object + 36) & 1) == 0 || *(_DWORD *)(object + 32) == -1)
    {
      if (gLogDatapath)
      {
        v27 = __nwlog_obj();
        if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
        {
          v28 = *(_QWORD *)(a1 + 32);
          if (v28)
            v29 = (const char *)(v28 + 205);
          else
            v29 = "";
          *(_DWORD *)buf = 136446466;
          v33 = "nw_protocol_http2_transport_destroy_block_invoke";
          v34 = 2082;
          v35 = v29;
          _os_log_impl(&dword_182FBE000, v27, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s not closing already closed or invalid stream when destroying", buf, 0x16u);
        }
      }
      *(_BYTE *)(v5 + 36) &= ~1u;
      *(_DWORD *)(v5 + 32) = -1;
      nw_hash_table_remove_node(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 120), a2);
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v6 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
      {
        v7 = *(_QWORD *)(a1 + 32);
        v8 = (const char *)(v7 + 205);
        v9 = v7 == 0;
        v10 = *(_DWORD *)(v5 + 32);
        if (v9)
          v8 = "";
        *(_DWORD *)buf = 136446722;
        v33 = "nw_protocol_http2_transport_destroy_block_invoke";
        v34 = 2082;
        v35 = v8;
        v36 = 1024;
        LODWORD(v37) = v10;
        _os_log_impl(&dword_182FBE000, v6, OS_LOG_TYPE_INFO, "%{public}s %{public}s closing stream %d during destroy, did not have an active input_handler", buf, 0x1Cu);
      }
      nw_http2_transport_stream_close(*(_QWORD *)(a1 + 32), v5);
    }
    nw_http2_transport_release_frame_array((nw_frame_array_s *)v5);
    nw_http2_transport_release_frame_array((nw_frame_array_s *)(v5 + 16));
    goto LABEL_43;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v11 = *(_QWORD *)(a1 + 32);
  if (v11)
    v12 = (const char *)(v11 + 205);
  else
    v12 = "";
  *(_DWORD *)buf = 136446722;
  v33 = "nw_protocol_http2_transport_destroy_block_invoke";
  v34 = 2082;
  v35 = v12;
  v36 = 2048;
  v37 = a2;
  v5 = _os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v30 = 0;
  if (!__nwlog_fault((const char *)v5, &type, &v30))
    goto LABEL_42;
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v13 = gLogObj;
    v14 = type;
    if (!os_log_type_enabled((os_log_t)gLogObj, type))
      goto LABEL_42;
    v15 = *(_QWORD *)(a1 + 32);
    if (v15)
      v16 = (const char *)(v15 + 205);
    else
      v16 = "";
    *(_DWORD *)buf = 136446722;
    v33 = "nw_protocol_http2_transport_destroy_block_invoke";
    v34 = 2082;
    v35 = v16;
    v36 = 2048;
    v37 = a2;
    v17 = "%{public}s %{public}s hash node %p didn't have a stream as extra";
    goto LABEL_41;
  }
  if (!v30)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v13 = gLogObj;
    v14 = type;
    if (!os_log_type_enabled((os_log_t)gLogObj, type))
      goto LABEL_42;
    v22 = *(_QWORD *)(a1 + 32);
    if (v22)
      v23 = (const char *)(v22 + 205);
    else
      v23 = "";
    *(_DWORD *)buf = 136446722;
    v33 = "nw_protocol_http2_transport_destroy_block_invoke";
    v34 = 2082;
    v35 = v23;
    v36 = 2048;
    v37 = a2;
    v17 = "%{public}s %{public}s hash node %p didn't have a stream as extra, backtrace limit exceeded";
    goto LABEL_41;
  }
  backtrace_string = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v13 = gLogObj;
  v14 = type;
  v19 = os_log_type_enabled((os_log_t)gLogObj, type);
  if (backtrace_string)
  {
    if (v19)
    {
      v20 = *(_QWORD *)(a1 + 32);
      if (v20)
        v21 = (const char *)(v20 + 205);
      else
        v21 = "";
      *(_DWORD *)buf = 136446978;
      v33 = "nw_protocol_http2_transport_destroy_block_invoke";
      v34 = 2082;
      v35 = v21;
      v36 = 2048;
      v37 = a2;
      v38 = 2082;
      v39 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s %{public}s hash node %p didn't have a stream as extra, dumping backtrace:%{public}s", buf, 0x2Au);
    }
    free(backtrace_string);
    if (v5)
      goto LABEL_43;
    return 1;
  }
  if (v19)
  {
    v24 = *(_QWORD *)(a1 + 32);
    if (v24)
      v25 = (const char *)(v24 + 205);
    else
      v25 = "";
    *(_DWORD *)buf = 136446722;
    v33 = "nw_protocol_http2_transport_destroy_block_invoke";
    v34 = 2082;
    v35 = v25;
    v36 = 2048;
    v37 = a2;
    v17 = "%{public}s %{public}s hash node %p didn't have a stream as extra, no backtrace";
LABEL_41:
    _os_log_impl(&dword_182FBE000, v13, v14, v17, buf, 0x20u);
  }
LABEL_42:
  if (v5)
LABEL_43:
    free((void *)v5);
  return 1;
}

uint64_t ___ZL42nw_protocol_http2_transport_input_finishedP11nw_protocolS0__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t object;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  BOOL v10;
  int v11;
  const char *v12;
  NSObject *v13;
  uint32_t v14;
  uint64_t v15;
  const char *v16;
  const char *v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  const char *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  void (*v27)(uint64_t, _QWORD);
  const char *v28;
  const char *v29;
  NSObject *v30;
  os_log_type_t v31;
  const char *v32;
  const char *v33;
  uint64_t v34;
  char *backtrace_string;
  _BOOL4 v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  const char *v40;
  uint64_t v41;
  const char *v42;
  char *v43;
  char *v45;
  _BOOL4 v46;
  const char *v47;
  const char *v48;
  const char *v49;
  char *v50;
  _BOOL4 v51;
  const char *v52;
  const char *v53;
  const char *v54;
  const char *v55;
  const char *v56;
  char v57;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v60;
  __int16 v61;
  const char *v62;
  __int16 v63;
  uint64_t v64;
  __int16 v65;
  char *v66;
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  object = nw_hash_node_get_object(a2);
  if (!object)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v15 = *(_QWORD *)(a1 + 32);
    if (v15)
      v16 = (const char *)(v15 + 205);
    else
      v16 = "";
    *(_DWORD *)buf = 136446722;
    v60 = "nw_protocol_http2_transport_input_finished_block_invoke";
    v61 = 2082;
    v62 = v16;
    v63 = 2048;
    v64 = a2;
    v17 = (const char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v57 = 0;
    if (__nwlog_fault(v17, &type, &v57))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v18 = gLogObj;
        v19 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type))
          goto LABEL_56;
        v20 = *(_QWORD *)(a1 + 32);
        if (v20)
          v21 = (const char *)(v20 + 205);
        else
          v21 = "";
        *(_DWORD *)buf = 136446722;
        v60 = "nw_protocol_http2_transport_input_finished_block_invoke";
        v61 = 2082;
        v62 = v21;
        v63 = 2048;
        v64 = a2;
        v22 = "%{public}s %{public}s no object for hash node %p, skipping input_finished";
LABEL_55:
        _os_log_impl(&dword_182FBE000, v18, v19, v22, buf, 0x20u);
        goto LABEL_56;
      }
      if (!v57)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v18 = gLogObj;
        v19 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type))
          goto LABEL_56;
        v39 = *(_QWORD *)(a1 + 32);
        if (v39)
          v40 = (const char *)(v39 + 205);
        else
          v40 = "";
        *(_DWORD *)buf = 136446722;
        v60 = "nw_protocol_http2_transport_input_finished_block_invoke";
        v61 = 2082;
        v62 = v40;
        v63 = 2048;
        v64 = a2;
        v22 = "%{public}s %{public}s no object for hash node %p, skipping input_finished, backtrace limit exceeded";
        goto LABEL_55;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v18 = gLogObj;
      v19 = type;
      v36 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (!backtrace_string)
      {
        if (!v36)
          goto LABEL_56;
        v41 = *(_QWORD *)(a1 + 32);
        if (v41)
          v42 = (const char *)(v41 + 205);
        else
          v42 = "";
        *(_DWORD *)buf = 136446722;
        v60 = "nw_protocol_http2_transport_input_finished_block_invoke";
        v61 = 2082;
        v62 = v42;
        v63 = 2048;
        v64 = a2;
        v22 = "%{public}s %{public}s no object for hash node %p, skipping input_finished, no backtrace";
        goto LABEL_55;
      }
      if (v36)
      {
        v37 = *(_QWORD *)(a1 + 32);
        if (v37)
          v38 = (const char *)(v37 + 205);
        else
          v38 = "";
        *(_DWORD *)buf = 136446978;
        v60 = "nw_protocol_http2_transport_input_finished_block_invoke";
        v61 = 2082;
        v62 = v38;
        v63 = 2048;
        v64 = a2;
        v65 = 2082;
        v66 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v18, v19, "%{public}s %{public}s no object for hash node %p, skipping input_finished, dumping backtrace:%{public}s", buf, 0x2Au);
      }
      free(backtrace_string);
    }
LABEL_56:
    if (v17)
    {
      v43 = (char *)v17;
LABEL_58:
      free(v43);
      return 1;
    }
    return 1;
  }
  v5 = object;
  v6 = *(_QWORD *)nw_hash_node_get_extra(a2);
  if (v6)
  {
    if ((*(_BYTE *)(v6 + 36) & 1) != 0)
    {
      v34 = *(_QWORD *)(v5 + 24);
      if (!v34 || (v27 = *(void (**)(uint64_t, _QWORD))(v34 + 184)) == 0)
      {
        __nwlog_obj();
        v48 = *(const char **)(v5 + 16);
        if (!v48)
          v48 = "invalid";
        *(_DWORD *)buf = 136446466;
        v60 = "nw_protocol_http2_transport_input_finished_block_invoke";
        v61 = 2082;
        v62 = v48;
        v29 = (const char *)_os_log_send_and_compose_impl();
        type = OS_LOG_TYPE_ERROR;
        v57 = 0;
        if (__nwlog_fault(v29, &type, &v57))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            v30 = __nwlog_obj();
            v31 = type;
            if (!os_log_type_enabled(v30, type))
              goto LABEL_100;
            v49 = *(const char **)(v5 + 16);
            if (!v49)
              v49 = "invalid";
            *(_DWORD *)buf = 136446466;
            v60 = "nw_protocol_http2_transport_input_finished_block_invoke";
            v61 = 2082;
            v62 = v49;
            v33 = "%{public}s protocol %{public}s has invalid input_finished callback";
            goto LABEL_99;
          }
          if (!v57)
          {
            v30 = __nwlog_obj();
            v31 = type;
            if (!os_log_type_enabled(v30, type))
              goto LABEL_100;
            v55 = *(const char **)(v5 + 16);
            if (!v55)
              v55 = "invalid";
            *(_DWORD *)buf = 136446466;
            v60 = "nw_protocol_http2_transport_input_finished_block_invoke";
            v61 = 2082;
            v62 = v55;
            v33 = "%{public}s protocol %{public}s has invalid input_finished callback, backtrace limit exceeded";
            goto LABEL_99;
          }
          v50 = (char *)__nw_create_backtrace_string();
          v30 = __nwlog_obj();
          v31 = type;
          v51 = os_log_type_enabled(v30, type);
          if (!v50)
          {
            if (!v51)
              goto LABEL_100;
            v56 = *(const char **)(v5 + 16);
            if (!v56)
              v56 = "invalid";
            *(_DWORD *)buf = 136446466;
            v60 = "nw_protocol_http2_transport_input_finished_block_invoke";
            v61 = 2082;
            v62 = v56;
            v33 = "%{public}s protocol %{public}s has invalid input_finished callback, no backtrace";
            goto LABEL_99;
          }
          if (v51)
          {
            v52 = *(const char **)(v5 + 16);
            if (!v52)
              v52 = "invalid";
            *(_DWORD *)buf = 136446722;
            v60 = "nw_protocol_http2_transport_input_finished_block_invoke";
            v61 = 2082;
            v62 = v52;
            v63 = 2082;
            v64 = (uint64_t)v50;
            _os_log_impl(&dword_182FBE000, v30, v31, "%{public}s protocol %{public}s has invalid input_finished callback, dumping backtrace:%{public}s", buf, 0x20u);
          }
          free(v50);
        }
LABEL_100:
        if (!v29)
          return 1;
        goto LABEL_101;
      }
LABEL_36:
      v27(v5, *(_QWORD *)(a1 + 32));
      return 1;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v7 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
    {
      v8 = *(_QWORD *)(a1 + 32);
      v9 = (const char *)(v8 + 205);
      v10 = v8 == 0;
      v11 = *(_DWORD *)(v6 + 32);
      if (v10)
        v9 = "";
      *(_DWORD *)buf = 136446722;
      v60 = "nw_protocol_http2_transport_input_finished_block_invoke";
      v61 = 2082;
      v62 = v9;
      v63 = 1024;
      LODWORD(v64) = v11;
      v12 = "%{public}s %{public}s stream %d not open, masking input_finished with disconnected";
      v13 = v7;
      v14 = 28;
      goto LABEL_23;
    }
  }
  else
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v23 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
    {
      v24 = *(_QWORD *)(a1 + 32);
      if (v24)
        v25 = (const char *)(v24 + 205);
      else
        v25 = "";
      *(_DWORD *)buf = 136446466;
      v60 = "nw_protocol_http2_transport_input_finished_block_invoke";
      v61 = 2082;
      v62 = v25;
      v12 = "%{public}s %{public}s input protocol has no stream, masking input_finished with disconnected";
      v13 = v23;
      v14 = 22;
LABEL_23:
      _os_log_impl(&dword_182FBE000, v13, OS_LOG_TYPE_INFO, v12, buf, v14);
    }
  }
  v26 = *(_QWORD *)(v5 + 24);
  if (v26)
  {
    v27 = *(void (**)(uint64_t, _QWORD))(v26 + 48);
    if (v27)
      goto LABEL_36;
  }
  __nwlog_obj();
  v28 = *(const char **)(v5 + 16);
  if (!v28)
    v28 = "invalid";
  *(_DWORD *)buf = 136446466;
  v60 = "nw_protocol_http2_transport_input_finished_block_invoke";
  v61 = 2082;
  v62 = v28;
  v29 = (const char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v57 = 0;
  if (!__nwlog_fault(v29, &type, &v57))
    goto LABEL_100;
  if (type == OS_LOG_TYPE_FAULT)
  {
    v30 = __nwlog_obj();
    v31 = type;
    if (!os_log_type_enabled(v30, type))
      goto LABEL_100;
    v32 = *(const char **)(v5 + 16);
    if (!v32)
      v32 = "invalid";
    *(_DWORD *)buf = 136446466;
    v60 = "nw_protocol_http2_transport_input_finished_block_invoke";
    v61 = 2082;
    v62 = v32;
    v33 = "%{public}s protocol %{public}s has invalid disconnected callback";
LABEL_99:
    _os_log_impl(&dword_182FBE000, v30, v31, v33, buf, 0x16u);
    goto LABEL_100;
  }
  if (!v57)
  {
    v30 = __nwlog_obj();
    v31 = type;
    if (!os_log_type_enabled(v30, type))
      goto LABEL_100;
    v53 = *(const char **)(v5 + 16);
    if (!v53)
      v53 = "invalid";
    *(_DWORD *)buf = 136446466;
    v60 = "nw_protocol_http2_transport_input_finished_block_invoke";
    v61 = 2082;
    v62 = v53;
    v33 = "%{public}s protocol %{public}s has invalid disconnected callback, backtrace limit exceeded";
    goto LABEL_99;
  }
  v45 = (char *)__nw_create_backtrace_string();
  v30 = __nwlog_obj();
  v31 = type;
  v46 = os_log_type_enabled(v30, type);
  if (!v45)
  {
    if (!v46)
      goto LABEL_100;
    v54 = *(const char **)(v5 + 16);
    if (!v54)
      v54 = "invalid";
    *(_DWORD *)buf = 136446466;
    v60 = "nw_protocol_http2_transport_input_finished_block_invoke";
    v61 = 2082;
    v62 = v54;
    v33 = "%{public}s protocol %{public}s has invalid disconnected callback, no backtrace";
    goto LABEL_99;
  }
  if (v46)
  {
    v47 = *(const char **)(v5 + 16);
    if (!v47)
      v47 = "invalid";
    *(_DWORD *)buf = 136446722;
    v60 = "nw_protocol_http2_transport_input_finished_block_invoke";
    v61 = 2082;
    v62 = v47;
    v63 = 2082;
    v64 = (uint64_t)v45;
    _os_log_impl(&dword_182FBE000, v30, v31, "%{public}s protocol %{public}s has invalid disconnected callback, dumping backtrace:%{public}s", buf, 0x20u);
  }
  free(v45);
  if (v29)
  {
LABEL_101:
    v43 = (char *)v29;
    goto LABEL_58;
  }
  return 1;
}

void nw_protocol_http2_transport_parameters_set_stream_receive_window_size(void *a1, uint64_t value)
{
  xpc_object_t v3;
  char *v4;
  NSObject *v5;
  os_log_type_t v6;
  const char *v7;
  char *backtrace_string;
  _BOOL4 v9;
  char v10;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v3 = xpc_uint64_create(value);
    nw_parameters_set_protocol_value(a1, "streamReceiveWindow", v3);
    if (v3)
      xpc_release(v3);
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v13 = "nw_protocol_http2_transport_parameters_set_stream_receive_window_size";
  v4 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v10 = 0;
  if (__nwlog_fault(v4, &type, &v10))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v5 = __nwlog_obj();
      v6 = type;
      if (!os_log_type_enabled(v5, type))
        goto LABEL_18;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_protocol_http2_transport_parameters_set_stream_receive_window_size";
      v7 = "%{public}s called with null protocol_parameters";
      goto LABEL_17;
    }
    if (!v10)
    {
      v5 = __nwlog_obj();
      v6 = type;
      if (!os_log_type_enabled(v5, type))
        goto LABEL_18;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_protocol_http2_transport_parameters_set_stream_receive_window_size";
      v7 = "%{public}s called with null protocol_parameters, backtrace limit exceeded";
      goto LABEL_17;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v5 = __nwlog_obj();
    v6 = type;
    v9 = os_log_type_enabled(v5, type);
    if (backtrace_string)
    {
      if (v9)
      {
        *(_DWORD *)buf = 136446466;
        v13 = "nw_protocol_http2_transport_parameters_set_stream_receive_window_size";
        v14 = 2082;
        v15 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v5, v6, "%{public}s called with null protocol_parameters, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_18;
    }
    if (v9)
    {
      *(_DWORD *)buf = 136446210;
      v13 = "nw_protocol_http2_transport_parameters_set_stream_receive_window_size";
      v7 = "%{public}s called with null protocol_parameters, no backtrace";
LABEL_17:
      _os_log_impl(&dword_182FBE000, v5, v6, v7, buf, 0xCu);
    }
  }
LABEL_18:
  if (v4)
    free(v4);
}

void nw_protocol_http2_transport_parameters_set_connection_receive_window_size(void *a1, uint64_t value)
{
  xpc_object_t v3;
  char *v4;
  NSObject *v5;
  os_log_type_t v6;
  const char *v7;
  char *backtrace_string;
  _BOOL4 v9;
  char v10;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v3 = xpc_uint64_create(value);
    nw_parameters_set_protocol_value(a1, "connectionReceiveWindow", v3);
    if (v3)
      xpc_release(v3);
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v13 = "nw_protocol_http2_transport_parameters_set_connection_receive_window_size";
  v4 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v10 = 0;
  if (__nwlog_fault(v4, &type, &v10))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v5 = __nwlog_obj();
      v6 = type;
      if (!os_log_type_enabled(v5, type))
        goto LABEL_18;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_protocol_http2_transport_parameters_set_connection_receive_window_size";
      v7 = "%{public}s called with null protocol_parameters";
      goto LABEL_17;
    }
    if (!v10)
    {
      v5 = __nwlog_obj();
      v6 = type;
      if (!os_log_type_enabled(v5, type))
        goto LABEL_18;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_protocol_http2_transport_parameters_set_connection_receive_window_size";
      v7 = "%{public}s called with null protocol_parameters, backtrace limit exceeded";
      goto LABEL_17;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v5 = __nwlog_obj();
    v6 = type;
    v9 = os_log_type_enabled(v5, type);
    if (backtrace_string)
    {
      if (v9)
      {
        *(_DWORD *)buf = 136446466;
        v13 = "nw_protocol_http2_transport_parameters_set_connection_receive_window_size";
        v14 = 2082;
        v15 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v5, v6, "%{public}s called with null protocol_parameters, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_18;
    }
    if (v9)
    {
      *(_DWORD *)buf = 136446210;
      v13 = "nw_protocol_http2_transport_parameters_set_connection_receive_window_size";
      v7 = "%{public}s called with null protocol_parameters, no backtrace";
LABEL_17:
      _os_log_impl(&dword_182FBE000, v5, v6, v7, buf, 0xCu);
    }
  }
LABEL_18:
  if (v4)
    free(v4);
}

void nw_protocol_http2_transport_parameters_set_tunnel_teardown_delay(void *a1, uint64_t value)
{
  xpc_object_t v3;
  char *v4;
  NSObject *v5;
  os_log_type_t v6;
  const char *v7;
  char *backtrace_string;
  _BOOL4 v9;
  char v10;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v3 = xpc_uint64_create(value);
    nw_parameters_set_protocol_value(a1, "tunnelTeardownDelay", v3);
    if (v3)
      xpc_release(v3);
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v13 = "nw_protocol_http2_transport_parameters_set_tunnel_teardown_delay";
  v4 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v10 = 0;
  if (__nwlog_fault(v4, &type, &v10))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v5 = __nwlog_obj();
      v6 = type;
      if (!os_log_type_enabled(v5, type))
        goto LABEL_18;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_protocol_http2_transport_parameters_set_tunnel_teardown_delay";
      v7 = "%{public}s called with null protocol_parameters";
      goto LABEL_17;
    }
    if (!v10)
    {
      v5 = __nwlog_obj();
      v6 = type;
      if (!os_log_type_enabled(v5, type))
        goto LABEL_18;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_protocol_http2_transport_parameters_set_tunnel_teardown_delay";
      v7 = "%{public}s called with null protocol_parameters, backtrace limit exceeded";
      goto LABEL_17;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v5 = __nwlog_obj();
    v6 = type;
    v9 = os_log_type_enabled(v5, type);
    if (backtrace_string)
    {
      if (v9)
      {
        *(_DWORD *)buf = 136446466;
        v13 = "nw_protocol_http2_transport_parameters_set_tunnel_teardown_delay";
        v14 = 2082;
        v15 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v5, v6, "%{public}s called with null protocol_parameters, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_18;
    }
    if (v9)
    {
      *(_DWORD *)buf = 136446210;
      v13 = "nw_protocol_http2_transport_parameters_set_tunnel_teardown_delay";
      v7 = "%{public}s called with null protocol_parameters, no backtrace";
LABEL_17:
      _os_log_impl(&dword_182FBE000, v5, v6, v7, buf, 0xCu);
    }
  }
LABEL_18:
  if (v4)
    free(v4);
}

void sub_18370C680(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_18370C8B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

NWConcrete_nw_proxy_config *nw_proxy_config_copy(void *a1)
{
  char *v1;
  NWConcrete_nw_proxy_config *v2;
  NWConcrete_nw_proxy_config *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  OS_nw_array *resolved_endpoints;
  OS_nw_dictionary *v8;
  OS_nw_dictionary *stacks;
  uint64_t v10;
  int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  char v24;
  void *v25;
  _QWORD *v26;
  const char *v27;
  const char *password;
  NWConcrete_nw_proxy_config *v29;
  id v30;
  char *v31;
  NSObject *v32;
  os_log_type_t v33;
  char *backtrace_string;
  os_log_type_t v35;
  _BOOL4 v36;
  os_log_type_t v37;
  void *v39;
  char *v40;
  NSObject *v41;
  os_log_type_t v42;
  char *v43;
  os_log_type_t v44;
  _BOOL4 v45;
  os_log_type_t v46;
  _QWORD v47[4];
  NWConcrete_nw_proxy_config *v48;
  char v49;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v52;
  __int16 v53;
  char *v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = objc_alloc_init(NWConcrete_nw_proxy_config);
    v3 = v2;
    if (v2)
    {
      *(_OWORD *)v2->identifier = *(_OWORD *)(v1 + 56);
      *(_OWORD *)v2->fallback_agent_uuid = *(_OWORD *)(v1 + 72);
      objc_storeStrong((id *)&v2->fallback_config, *((id *)v1 + 11));
      objc_storeStrong((id *)&v3->endpoint, *((id *)v1 + 5));
      v4 = *((_QWORD *)v1 + 6);
      if (v4)
      {
        v5 = nw_array_create();
        if (v5 != v4)
        {
          v6 = v5;
          std::vector<nw_object_wrapper_t>::__assign_with_size[abi:nn180100]<nw_object_wrapper_t*,nw_object_wrapper_t*>(v5 + 16, *(void ***)(v4 + 16), *(void ***)(v4 + 24), (uint64_t)(*(_QWORD *)(v4 + 24) - *(_QWORD *)(v4 + 16)) >> 3);
          v4 = v6;
        }
        resolved_endpoints = v3->resolved_endpoints;
        v3->resolved_endpoints = (OS_nw_array *)v4;

      }
      if (*((_QWORD *)v1 + 1))
      {
        v8 = (OS_nw_dictionary *)nw_dictionary_create();
        stacks = v3->stacks;
        v3->stacks = v8;

        v10 = *((_QWORD *)v1 + 1);
        v47[0] = MEMORY[0x1E0C809B0];
        v47[1] = 3221225472;
        v47[2] = __nw_proxy_config_copy_block_invoke;
        v47[3] = &unk_1E14A8D48;
        v48 = v3;
        nw_dictionary_apply(v10, (uint64_t)v47);

      }
      objc_storeStrong((id *)&v3->proxied_transports, *((id *)v1 + 2));
      objc_storeStrong((id *)&v3->required_protocols, *((id *)v1 + 3));
      objc_storeStrong((id *)&v3->remove_protocols, *((id *)v1 + 4));
      v11 = *((unsigned __int8 *)v3 + 171);
      *(_QWORD *)&v3->mode = *((_QWORD *)v1 + 19);
      v3->config_epoch = *((_WORD *)v1 + 84);
      v12 = *((_BYTE *)v3 + 170) & 0xFE | v1[170] & 1;
      *((_BYTE *)v3 + 170) = v12;
      v13 = v12 & 0xFFFFFFFD | (2 * ((v1[170] >> 1) & 1));
      *((_BYTE *)v3 + 170) = v13;
      v14 = v13 & 0xFFFFFFFB | (4 * ((v1[170] >> 2) & 1));
      *((_BYTE *)v3 + 170) = v14;
      v15 = v11 & 0xFFFFFFDF | (32 * ((v1[171] >> 5) & 1));
      *((_BYTE *)v3 + 171) = v15;
      v16 = v14 & 0xFFFFFFEF | (16 * ((v1[170] >> 4) & 1));
      *((_BYTE *)v3 + 170) = v16;
      v17 = v16 & 0xFFFFFFDF | (32 * ((v1[170] >> 5) & 1));
      *((_BYTE *)v3 + 170) = v17;
      v18 = v17 & 0xFFFFFFF7 | (8 * ((v1[170] >> 3) & 1));
      *((_BYTE *)v3 + 170) = v18;
      v19 = v18 & 0xFFFFFFBF | (((v1[170] >> 6) & 1) << 6);
      *((_BYTE *)v3 + 170) = v19;
      *((_BYTE *)v3 + 170) = v1[170] & 0x80 | v19 & 0x7F;
      v3->multipath_service = *((_DWORD *)v1 + 40);
      v20 = v15 & 0xFFFFFFFD | (2 * ((v1[171] >> 1) & 1));
      *((_BYTE *)v3 + 171) = v20;
      v21 = v20 & 0xFFFFFFFE | v1[171] & 1;
      *((_BYTE *)v3 + 171) = v21;
      v22 = v21 & 0xFFFFFFFB | (4 * ((v1[171] >> 2) & 1));
      *((_BYTE *)v3 + 171) = v22;
      v23 = v22 & 0xFFFFFFF7 | (8 * ((v1[171] >> 3) & 1));
      *((_BYTE *)v3 + 171) = v23;
      *((_BYTE *)v3 + 171) = v23 & 0xEF | v1[171] & 0x10;
      objc_storeStrong((id *)&v3->match_domains, *((id *)v1 + 15));
      objc_storeStrong((id *)&v3->excluded_domains, *((id *)v1 + 16));
      objc_storeStrong((id *)&v3->preferred_domains, *((id *)v1 + 17));
      objc_storeStrong((id *)&v3->alternate_agents, *((id *)v1 + 18));
      objc_storeStrong((id *)&v3->pac_script, *((id *)v1 + 14));
      v24 = *((_BYTE *)v3 + 171) & 0xBF | (((v1[171] & 0x40) != 0) << 6);
      *((_BYTE *)v3 + 171) = v24;
      *((_BYTE *)v3 + 171) = v1[171] & 0x80 | v24 & 0x7F;
      *((_BYTE *)v3 + 172) = *((_BYTE *)v3 + 172) & 0xFD | v1[172] & 2;
      v25 = (void *)*((_QWORD *)v1 + 13);
      if (v25)
      {
        v26 = v25;
        v27 = (const char *)v26[2];

        password = (const char *)nw_authentication_credential_get_password(*((void **)v1 + 13));
        nw_proxy_config_set_username_and_password(&v3->super, v27, password);
      }
      v29 = v3;
      goto LABEL_31;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v30 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v52 = "nw_proxy_config_copy";
    v31 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v49 = 0;
    if (__nwlog_fault(v31, &type, &v49))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v32 = (id)gLogObj;
        v33 = type;
        if (os_log_type_enabled(v32, type))
        {
          *(_DWORD *)buf = 136446210;
          v52 = "nw_proxy_config_copy";
          _os_log_impl(&dword_182FBE000, v32, v33, "%{public}s [nw_proxy_config init] failed", buf, 0xCu);
        }
      }
      else if (v49)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v32 = (id)gLogObj;
        v35 = type;
        v36 = os_log_type_enabled(v32, type);
        if (backtrace_string)
        {
          if (v36)
          {
            *(_DWORD *)buf = 136446466;
            v52 = "nw_proxy_config_copy";
            v53 = 2082;
            v54 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v32, v35, "%{public}s [nw_proxy_config init] failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          if (!v31)
            goto LABEL_31;
          goto LABEL_30;
        }
        if (v36)
        {
          *(_DWORD *)buf = 136446210;
          v52 = "nw_proxy_config_copy";
          _os_log_impl(&dword_182FBE000, v32, v35, "%{public}s [nw_proxy_config init] failed, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v32 = (id)gLogObj;
        v37 = type;
        if (os_log_type_enabled(v32, type))
        {
          *(_DWORD *)buf = 136446210;
          v52 = "nw_proxy_config_copy";
          _os_log_impl(&dword_182FBE000, v32, v37, "%{public}s [nw_proxy_config init] failed, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
    if (!v31)
    {
LABEL_31:

      goto LABEL_32;
    }
LABEL_30:
    free(v31);
    goto LABEL_31;
  }
  __nwlog_obj();
  v39 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v52 = "nw_proxy_config_copy";
  v40 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v49 = 0;
  if (__nwlog_fault(v40, &type, &v49))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v41 = objc_claimAutoreleasedReturnValue();
      v42 = type;
      if (os_log_type_enabled(v41, type))
      {
        *(_DWORD *)buf = 136446210;
        v52 = "nw_proxy_config_copy";
        _os_log_impl(&dword_182FBE000, v41, v42, "%{public}s called with null existing_config", buf, 0xCu);
      }
    }
    else if (v49)
    {
      v43 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v41 = objc_claimAutoreleasedReturnValue();
      v44 = type;
      v45 = os_log_type_enabled(v41, type);
      if (v43)
      {
        if (v45)
        {
          *(_DWORD *)buf = 136446466;
          v52 = "nw_proxy_config_copy";
          v53 = 2082;
          v54 = v43;
          _os_log_impl(&dword_182FBE000, v41, v44, "%{public}s called with null existing_config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v43);
        goto LABEL_49;
      }
      if (v45)
      {
        *(_DWORD *)buf = 136446210;
        v52 = "nw_proxy_config_copy";
        _os_log_impl(&dword_182FBE000, v41, v44, "%{public}s called with null existing_config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v41 = objc_claimAutoreleasedReturnValue();
      v46 = type;
      if (os_log_type_enabled(v41, type))
      {
        *(_DWORD *)buf = 136446210;
        v52 = "nw_proxy_config_copy";
        _os_log_impl(&dword_182FBE000, v41, v46, "%{public}s called with null existing_config, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_49:
  if (v40)
    free(v40);
  v3 = 0;
LABEL_32:

  return v3;
}

void sub_18370D068(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t __nw_proxy_config_copy_block_invoke(uint64_t a1, const char *a2, void *a3)
{
  NWConcrete_nw_protocol_stack *v5;

  v5 = nw_protocol_stack_copy(a3);
  nw_dictionary_set_value(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), a2, v5);

  return 1;
}

void nw_proxy_config_set_username_and_password(nw_proxy_config_t proxy_config, const char *username, const char *password)
{
  nw_proxy_config_t v5;
  objc_class *v6;
  Class isa;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  void *v12;
  os_log_type_t v13;
  char *backtrace_string;
  os_log_type_t v15;
  _BOOL4 v16;
  char *v17;
  os_log_type_t v18;
  _BOOL4 v19;
  os_log_type_t v20;
  os_log_type_t v21;
  char v22;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v25;
  __int16 v26;
  char *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v5 = proxy_config;
  if (!v5)
  {
    __nwlog_obj();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v25 = "nw_proxy_config_set_username_and_password";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (!__nwlog_fault(v9, &type, &v22))
      goto LABEL_39;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_proxy_config_set_username_and_password";
        _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v22)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      v16 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          v25 = "nw_proxy_config_set_username_and_password";
          v26 = 2082;
          v27 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_39:
        if (!v9)
          goto LABEL_5;
LABEL_40:
        free(v9);
        goto LABEL_5;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_proxy_config_set_username_and_password";
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v20 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_proxy_config_set_username_and_password";
        _os_log_impl(&dword_182FBE000, v10, v20, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_38:

    goto LABEL_39;
  }
  if (username)
  {
    v6 = (objc_class *)-[NWConcrete_nw_authentication_credential initWithType:]([NWConcrete_nw_authentication_credential alloc], 1);
    isa = v5[13].isa;
    v5[13].isa = v6;

    nw_authentication_credential_set_username(v5[13].isa, username);
    if (password)
      nw_authentication_credential_set_password(v5[13].isa, password);
    goto LABEL_5;
  }
  __nwlog_obj();
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v25 = "nw_proxy_config_set_username_and_password";
  v9 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v22 = 0;
  if (!__nwlog_fault(v9, &type, &v22))
    goto LABEL_39;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v10 = objc_claimAutoreleasedReturnValue();
    v13 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      v25 = "nw_proxy_config_set_username_and_password";
      _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null username", buf, 0xCu);
    }
    goto LABEL_38;
  }
  if (!v22)
  {
    __nwlog_obj();
    v10 = objc_claimAutoreleasedReturnValue();
    v21 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      v25 = "nw_proxy_config_set_username_and_password";
      _os_log_impl(&dword_182FBE000, v10, v21, "%{public}s called with null username, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_38;
  }
  v17 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v10 = objc_claimAutoreleasedReturnValue();
  v18 = type;
  v19 = os_log_type_enabled(v10, type);
  if (!v17)
  {
    if (v19)
    {
      *(_DWORD *)buf = 136446210;
      v25 = "nw_proxy_config_set_username_and_password";
      _os_log_impl(&dword_182FBE000, v10, v18, "%{public}s called with null username, no backtrace", buf, 0xCu);
    }
    goto LABEL_38;
  }
  if (v19)
  {
    *(_DWORD *)buf = 136446466;
    v25 = "nw_proxy_config_set_username_and_password";
    v26 = 2082;
    v27 = v17;
    _os_log_impl(&dword_182FBE000, v10, v18, "%{public}s called with null username, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v17);
  if (v9)
    goto LABEL_40;
LABEL_5:

}

void sub_18370D5B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

NWConcrete_nw_proxy_config *nw_proxy_config_create_merged(void *a1, void *a2)
{
  _DWORD *v3;
  _DWORD *v4;
  id v5;
  NWConcrete_nw_proxy_config *v6;
  char v7;
  char v8;
  char v9;
  char v10;
  uint64_t stacks;
  void *v13;
  char *v14;
  NSObject *v15;
  os_log_type_t v16;
  void *v17;
  os_log_type_t v18;
  char *backtrace_string;
  os_log_type_t v20;
  _BOOL4 v21;
  os_log_type_t v22;
  _BOOL4 v23;
  os_log_type_t v24;
  os_log_type_t v25;
  _QWORD v26[4];
  id v27;
  char v28;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v31;
  __int16 v32;
  char *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (v3[38] == 1)
  {
    if (v4[38] == 1)
    {
      v6 = nw_proxy_config_copy(v3);
      objc_storeStrong((id *)&v6->endpoint, *((id *)v5 + 5));
      v7 = *((_BYTE *)v6 + 171) & 0x7F;
      *((_BYTE *)v6 + 171) = v7;
      if ((*((_BYTE *)v5 + 170) & 1) != 0)
      {
        *((_BYTE *)v6 + 170) |= 1u;
        if ((*((_BYTE *)v5 + 170) & 2) == 0)
        {
LABEL_5:
          if ((*((_BYTE *)v5 + 171) & 0x20) == 0)
          {
LABEL_7:
            v6->multipath_service = *((_DWORD *)v5 + 40);
            v8 = v7 & 0xFD | *((_BYTE *)v5 + 171) & 2;
            *((_BYTE *)v6 + 171) = v8;
            v9 = v8 & 0x7E | *((_BYTE *)v5 + 171) & 1;
            *((_BYTE *)v6 + 171) = v9;
            v10 = v9 & 0xFB | *((_BYTE *)v5 + 171) & 4;
            *((_BYTE *)v6 + 171) = v10;
            *((_BYTE *)v6 + 171) = v10 & 0xF7 | *((_BYTE *)v5 + 171) & 8;
            stacks = (uint64_t)v6->stacks;
            v26[0] = MEMORY[0x1E0C809B0];
            v26[1] = 3221225472;
            v26[2] = __nw_proxy_config_create_merged_block_invoke;
            v26[3] = &unk_1E14A8D48;
            v27 = v5;
            nw_dictionary_apply(stacks, (uint64_t)v26);

            goto LABEL_8;
          }
LABEL_6:
          v7 |= 0x20u;
          *((_BYTE *)v6 + 171) = v7;
          goto LABEL_7;
        }
      }
      else if ((*((_BYTE *)v5 + 170) & 2) == 0)
      {
        goto LABEL_5;
      }
      *((_BYTE *)v6 + 170) |= 2u;
      if ((*((_BYTE *)v5 + 171) & 0x20) == 0)
        goto LABEL_7;
      goto LABEL_6;
    }
    __nwlog_obj();
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v31 = "nw_proxy_config_create_merged";
    v14 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v28 = 0;
    if (__nwlog_fault(v14, &type, &v28))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v15 = objc_claimAutoreleasedReturnValue();
        v18 = type;
        if (os_log_type_enabled(v15, type))
        {
          *(_DWORD *)buf = 136446210;
          v31 = "nw_proxy_config_create_merged";
          _os_log_impl(&dword_182FBE000, v15, v18, "%{public}s called with null (lower_config->mode == nw_proxy_mode_protocol)", buf, 0xCu);
        }
LABEL_43:

        goto LABEL_44;
      }
      if (!v28)
      {
        __nwlog_obj();
        v15 = objc_claimAutoreleasedReturnValue();
        v25 = type;
        if (os_log_type_enabled(v15, type))
        {
          *(_DWORD *)buf = 136446210;
          v31 = "nw_proxy_config_create_merged";
          _os_log_impl(&dword_182FBE000, v15, v25, "%{public}s called with null (lower_config->mode == nw_proxy_mode_protocol), backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_43;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v15 = objc_claimAutoreleasedReturnValue();
      v22 = type;
      v23 = os_log_type_enabled(v15, type);
      if (!backtrace_string)
      {
        if (v23)
        {
          *(_DWORD *)buf = 136446210;
          v31 = "nw_proxy_config_create_merged";
          _os_log_impl(&dword_182FBE000, v15, v22, "%{public}s called with null (lower_config->mode == nw_proxy_mode_protocol), no backtrace", buf, 0xCu);
        }
        goto LABEL_43;
      }
      if (v23)
      {
        *(_DWORD *)buf = 136446466;
        v31 = "nw_proxy_config_create_merged";
        v32 = 2082;
        v33 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v15, v22, "%{public}s called with null (lower_config->mode == nw_proxy_mode_protocol), dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_31;
    }
  }
  else
  {
    __nwlog_obj();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v31 = "nw_proxy_config_create_merged";
    v14 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v28 = 0;
    if (__nwlog_fault(v14, &type, &v28))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v15 = objc_claimAutoreleasedReturnValue();
        v16 = type;
        if (os_log_type_enabled(v15, type))
        {
          *(_DWORD *)buf = 136446210;
          v31 = "nw_proxy_config_create_merged";
          _os_log_impl(&dword_182FBE000, v15, v16, "%{public}s called with null (config->mode == nw_proxy_mode_protocol)", buf, 0xCu);
        }
        goto LABEL_43;
      }
      if (!v28)
      {
        __nwlog_obj();
        v15 = objc_claimAutoreleasedReturnValue();
        v24 = type;
        if (os_log_type_enabled(v15, type))
        {
          *(_DWORD *)buf = 136446210;
          v31 = "nw_proxy_config_create_merged";
          _os_log_impl(&dword_182FBE000, v15, v24, "%{public}s called with null (config->mode == nw_proxy_mode_protocol), backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_43;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v15 = objc_claimAutoreleasedReturnValue();
      v20 = type;
      v21 = os_log_type_enabled(v15, type);
      if (!backtrace_string)
      {
        if (v21)
        {
          *(_DWORD *)buf = 136446210;
          v31 = "nw_proxy_config_create_merged";
          _os_log_impl(&dword_182FBE000, v15, v20, "%{public}s called with null (config->mode == nw_proxy_mode_protocol), no backtrace", buf, 0xCu);
        }
        goto LABEL_43;
      }
      if (v21)
      {
        *(_DWORD *)buf = 136446466;
        v31 = "nw_proxy_config_create_merged";
        v32 = 2082;
        v33 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v15, v20, "%{public}s called with null (config->mode == nw_proxy_mode_protocol), dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_31:

      free(backtrace_string);
    }
  }
LABEL_44:
  if (v14)
    free(v14);
  v6 = 0;
LABEL_8:

  return v6;
}

void sub_18370DB88(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t __nw_proxy_config_create_merged_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  NSObject *v4;
  nw_protocol_options_t v5;
  nw_protocol_options_t v6;
  id *v7;
  id v8;
  NSObject *v9;
  uint64_t v10;
  void *v11;
  id v12;
  int v13;
  _BOOL8 v14;
  void *v15;
  const char *hostname;
  size_t v17;
  uint16_t port;
  NSObject *v19;
  id *v20;
  NSObject *v21;
  _QWORD v23[4];
  NSObject *v24;
  _QWORD *v25;
  _QWORD v26[7];
  uint16_t v27;
  _QWORD v28[5];
  id v29;
  _QWORD iterate_block[5];
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t, uint64_t);
  void (*v35)(uint64_t);
  id v36;
  int v37;

  v4 = a3;
  v5 = nw_protocol_stack_copy_transport_protocol(v4);
  v6 = v5;
  if (v5)
  {
    v7 = v5;
    v8 = v7[1];

  }
  else
  {
    if (nw_protocol_setup_tcp_definition(void)::onceToken != -1)
      dispatch_once(&nw_protocol_setup_tcp_definition(void)::onceToken, &__block_literal_global_62963);
    v8 = (id)g_tcp_definition;
  }
  v37 = 0;
  v9 = nw_proxy_config_copy_protocol_stack(*(void **)(a1 + 32), v8, &v37);
  if (v9)
  {
    v31 = 0;
    v32 = &v31;
    v33 = 0x3032000000;
    v34 = __Block_byref_object_copy__38532;
    v35 = __Block_byref_object_dispose__38533;
    v10 = MEMORY[0x1E0C809B0];
    v36 = 0;
    iterate_block[0] = MEMORY[0x1E0C809B0];
    iterate_block[1] = 3221225472;
    iterate_block[2] = __nw_proxy_config_create_merged_block_invoke_20;
    iterate_block[3] = &unk_1E14A0FD8;
    iterate_block[4] = &v31;
    nw_protocol_stack_iterate_application_protocols(v4, iterate_block);
    v28[0] = 0;
    v28[1] = v28;
    v28[2] = 0x3032000000;
    v28[3] = __Block_byref_object_copy__38532;
    v28[4] = __Block_byref_object_dispose__38533;
    v29 = 0;
    v11 = (void *)v32[5];
    if (v11)
    {
      v12 = v11;
      v13 = objc_msgSend(v12, "type");

      if (v13 == 4)
      {
        v14 = nw_endpoint_copy_host_port_endpoint_for_url((void *)v32[5]);
        v15 = (void *)v32[5];
        v32[5] = v14;

      }
      if (nw_endpoint_get_type((nw_endpoint_t)v32[5]) == nw_endpoint_type_host)
      {
        hostname = nw_endpoint_get_hostname((nw_endpoint_t)v32[5]);
        v17 = strlen(hostname);
        port = nw_endpoint_get_port((nw_endpoint_t)v32[5]);
        v26[0] = v10;
        v26[1] = 3221225472;
        v26[2] = __nw_proxy_config_create_merged_block_invoke_2;
        v26[3] = &unk_1E14A1028;
        v27 = port;
        v26[5] = v17;
        v26[6] = hostname;
        v26[4] = v28;
        nw_protocol_stack_iterate_application_protocols(v9, v26);
      }
    }
    if (v6 && v37 == 3)
      nw_protocol_stack_append_application_protocol(v4, v6);
    v23[0] = v10;
    v23[1] = 3221225472;
    v23[2] = __nw_proxy_config_create_merged_block_invoke_4;
    v23[3] = &unk_1E14A1050;
    v25 = v28;
    v19 = v4;
    v24 = v19;
    nw_protocol_stack_iterate_application_protocols(v9, v23);
    v20 = v9;
    v21 = v20[3];

    nw_protocol_stack_set_transport_protocol(v19, v21);
    _Block_object_dispose(v28, 8);

    _Block_object_dispose(&v31, 8);
  }

  return 1;
}

void sub_18370DE64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,id a28)
{
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  uint64_t v32;

  _Block_object_dispose(&a23, 8);

  _Block_object_dispose((const void *)(v32 - 136), 8);
  _Unwind_Resume(a1);
}

void *nw_proxy_config_copy_protocol_stack(void *a1, void *a2, _DWORD *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  _BOOL4 is_equal_unsafe;
  id v10;
  char *identifier;
  char *v12;
  const char *v13;
  void *v14;
  void *v15;
  char *v16;
  NSObject *v17;
  os_log_type_t v18;
  void *v19;
  char *v20;
  NSObject *v21;
  os_log_type_t v22;
  void *v23;
  os_log_type_t v24;
  void *v25;
  os_log_type_t v26;
  char *backtrace_string;
  os_log_type_t v28;
  _BOOL4 v29;
  char *v30;
  os_log_type_t v31;
  _BOOL4 v32;
  os_log_type_t v33;
  _BOOL4 v34;
  os_log_type_t v35;
  _BOOL4 v36;
  os_log_type_t v37;
  os_log_type_t v38;
  os_log_type_t v39;
  os_log_type_t v40;
  char v42;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v45;
  __int16 v46;
  char *v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = v6;
  if (!v5)
  {
    __nwlog_obj();
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v45 = "nw_proxy_config_copy_protocol_stack";
    v16 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v42 = 0;
    if (!__nwlog_fault(v16, &type, &v42))
      goto LABEL_83;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v17 = objc_claimAutoreleasedReturnValue();
      v18 = type;
      if (os_log_type_enabled(v17, type))
      {
        *(_DWORD *)buf = 136446210;
        v45 = "nw_proxy_config_copy_protocol_stack";
        _os_log_impl(&dword_182FBE000, v17, v18, "%{public}s called with null config", buf, 0xCu);
      }
      goto LABEL_82;
    }
    if (!v42)
    {
      __nwlog_obj();
      v17 = objc_claimAutoreleasedReturnValue();
      v37 = type;
      if (os_log_type_enabled(v17, type))
      {
        *(_DWORD *)buf = 136446210;
        v45 = "nw_proxy_config_copy_protocol_stack";
        _os_log_impl(&dword_182FBE000, v17, v37, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_82;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v17 = objc_claimAutoreleasedReturnValue();
    v28 = type;
    v29 = os_log_type_enabled(v17, type);
    if (!backtrace_string)
    {
      if (v29)
      {
        *(_DWORD *)buf = 136446210;
        v45 = "nw_proxy_config_copy_protocol_stack";
        _os_log_impl(&dword_182FBE000, v17, v28, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
      goto LABEL_82;
    }
    if (v29)
    {
      *(_DWORD *)buf = 136446466;
      v45 = "nw_proxy_config_copy_protocol_stack";
      v46 = 2082;
      v47 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v17, v28, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_55;
  }
  if (!v6)
  {
    __nwlog_obj();
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v45 = "nw_proxy_config_copy_protocol_stack";
    v20 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v42 = 0;
    if (__nwlog_fault(v20, &type, &v42))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v21 = objc_claimAutoreleasedReturnValue();
        v22 = type;
        if (os_log_type_enabled(v21, type))
        {
          *(_DWORD *)buf = 136446210;
          v45 = "nw_proxy_config_copy_protocol_stack";
          _os_log_impl(&dword_182FBE000, v21, v22, "%{public}s called with null transport_protocol", buf, 0xCu);
        }
      }
      else if (v42)
      {
        v30 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v21 = objc_claimAutoreleasedReturnValue();
        v31 = type;
        v32 = os_log_type_enabled(v21, type);
        if (v30)
        {
          if (v32)
          {
            *(_DWORD *)buf = 136446466;
            v45 = "nw_proxy_config_copy_protocol_stack";
            v46 = 2082;
            v47 = v30;
            _os_log_impl(&dword_182FBE000, v21, v31, "%{public}s called with null transport_protocol, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v30);
          goto LABEL_71;
        }
        if (v32)
        {
          *(_DWORD *)buf = 136446210;
          v45 = "nw_proxy_config_copy_protocol_stack";
          _os_log_impl(&dword_182FBE000, v21, v31, "%{public}s called with null transport_protocol, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v21 = objc_claimAutoreleasedReturnValue();
        v38 = type;
        if (os_log_type_enabled(v21, type))
        {
          *(_DWORD *)buf = 136446210;
          v45 = "nw_proxy_config_copy_protocol_stack";
          _os_log_impl(&dword_182FBE000, v21, v38, "%{public}s called with null transport_protocol, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_71:
    if (v20)
      free(v20);
    v7 = 0;
    goto LABEL_85;
  }
  if (!a3)
  {
    __nwlog_obj();
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v45 = "nw_proxy_config_copy_protocol_stack";
    v16 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v42 = 0;
    if (!__nwlog_fault(v16, &type, &v42))
      goto LABEL_83;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v17 = objc_claimAutoreleasedReturnValue();
      v24 = type;
      if (os_log_type_enabled(v17, type))
      {
        *(_DWORD *)buf = 136446210;
        v45 = "nw_proxy_config_copy_protocol_stack";
        _os_log_impl(&dword_182FBE000, v17, v24, "%{public}s called with null proxy_protocol_level", buf, 0xCu);
      }
      goto LABEL_82;
    }
    if (!v42)
    {
      __nwlog_obj();
      v17 = objc_claimAutoreleasedReturnValue();
      v39 = type;
      if (os_log_type_enabled(v17, type))
      {
        *(_DWORD *)buf = 136446210;
        v45 = "nw_proxy_config_copy_protocol_stack";
        _os_log_impl(&dword_182FBE000, v17, v39, "%{public}s called with null proxy_protocol_level, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_82;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v17 = objc_claimAutoreleasedReturnValue();
    v33 = type;
    v34 = os_log_type_enabled(v17, type);
    if (!backtrace_string)
    {
      if (v34)
      {
        *(_DWORD *)buf = 136446210;
        v45 = "nw_proxy_config_copy_protocol_stack";
        _os_log_impl(&dword_182FBE000, v17, v33, "%{public}s called with null proxy_protocol_level, no backtrace", buf, 0xCu);
      }
      goto LABEL_82;
    }
    if (v34)
    {
      *(_DWORD *)buf = 136446466;
      v45 = "nw_proxy_config_copy_protocol_stack";
      v46 = 2082;
      v47 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v17, v33, "%{public}s called with null proxy_protocol_level, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_55;
  }
  if (!*((_QWORD *)v5 + 1))
  {
LABEL_85:
    v14 = 0;
    goto LABEL_86;
  }
  if (nw_protocol_copy_quic_connection_definition::onceToken != -1)
    dispatch_once(&nw_protocol_copy_quic_connection_definition::onceToken, &__block_literal_global_54912);
  v8 = (id)nw_protocol_copy_quic_connection_definition::quic_definition;
  is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v7, (uint64_t)v8);

  if (is_equal_unsafe)
  {
    if (nw_protocol_copy_quic_stream_definition::onceToken != -1)
      dispatch_once(&nw_protocol_copy_quic_stream_definition::onceToken, &__block_literal_global_12_55083);
    v10 = (id)nw_protocol_copy_quic_stream_definition::quic_definition;

    v7 = v10;
  }
  identifier = nw_protocol_definition_get_identifier(v7);
  if (!identifier)
  {
    __nwlog_obj();
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v45 = "nw_proxy_config_copy_protocol_stack";
    v16 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v42 = 0;
    if (!__nwlog_fault(v16, &type, &v42))
      goto LABEL_83;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v17 = objc_claimAutoreleasedReturnValue();
      v26 = type;
      if (os_log_type_enabled(v17, type))
      {
        *(_DWORD *)buf = 136446210;
        v45 = "nw_proxy_config_copy_protocol_stack";
        _os_log_impl(&dword_182FBE000, v17, v26, "%{public}s called with null transport_identifier", buf, 0xCu);
      }
LABEL_82:

LABEL_83:
      if (v16)
        free(v16);
      goto LABEL_85;
    }
    if (!v42)
    {
      __nwlog_obj();
      v17 = objc_claimAutoreleasedReturnValue();
      v40 = type;
      if (os_log_type_enabled(v17, type))
      {
        *(_DWORD *)buf = 136446210;
        v45 = "nw_proxy_config_copy_protocol_stack";
        _os_log_impl(&dword_182FBE000, v17, v40, "%{public}s called with null transport_identifier, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_82;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v17 = objc_claimAutoreleasedReturnValue();
    v35 = type;
    v36 = os_log_type_enabled(v17, type);
    if (!backtrace_string)
    {
      if (v36)
      {
        *(_DWORD *)buf = 136446210;
        v45 = "nw_proxy_config_copy_protocol_stack";
        _os_log_impl(&dword_182FBE000, v17, v35, "%{public}s called with null transport_identifier, no backtrace", buf, 0xCu);
      }
      goto LABEL_82;
    }
    if (v36)
    {
      *(_DWORD *)buf = 136446466;
      v45 = "nw_proxy_config_copy_protocol_stack";
      v46 = 2082;
      v47 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v17, v35, "%{public}s called with null transport_identifier, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_55:

    free(backtrace_string);
    goto LABEL_83;
  }
  v12 = identifier;
  buf[0] = 0;
  *a3 = nw_proxy_config_should_proxy_transport_at_level((NWConcrete_nw_proxy_config *)v5, identifier, (BOOL *)buf);
  if (buf[0])
    v13 = "proxy-wildcard";
  else
    v13 = v12;
  v14 = nw_dictionary_copy_value(*((_QWORD *)v5 + 1), (uint64_t)v13);
LABEL_86:

  return v14;
}

void sub_18370E86C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__38532(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__38533(uint64_t a1)
{

}

void __nw_proxy_config_create_merged_block_invoke_20(uint64_t a1, void *a2)
{
  id v3;
  id v4;

  v4 = a2;
  v3 = nw_protocol_options_copy_proxy_endpoint(v4);
  if (v3)
  {
    if (!nw_protocol_options_proxy_endpoint_should_override_stack(v4))
      nw_protocol_options_set_proxy_endpoint(v4, v3, 1);
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), v3);
  }

}

void __nw_proxy_config_create_merged_block_invoke_2(uint64_t a1, void *a2)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[7];
  __int16 v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  char v12;

  v4 = a2;
  v9 = 0;
  v10 = &v9;
  v11 = 0x2020000000;
  v12 = 0;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __nw_proxy_config_create_merged_block_invoke_3;
  v7[3] = &unk_1E14A1000;
  v8 = *(_WORD *)(a1 + 56);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 48);
  v7[4] = &v9;
  v7[5] = v5;
  v7[6] = v6;
  nw_protocol_options_enumerate_proxy_next_hops(v4, v7);
  if (*((_BYTE *)v10 + 24))
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
  _Block_object_dispose(&v9, 8);

}

void __nw_proxy_config_create_merged_block_invoke_4(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;
  NWConcrete_nw_protocol_options *v6;
  id v7;
  id v8;

  v3 = a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v5 = *(id *)(v4 + 40);
  if (v5)
  {
    if (v5 != v3)
      goto LABEL_7;
    *(_QWORD *)(v4 + 40) = 0;
    v7 = v3;

    v3 = v7;
  }
  v8 = v3;
  v6 = nw_protocol_options_copy(v3);
  if (nw_protocol_options_is_masque(v6))
  {
    nw_masque_options_set_forced_protocol(v6, 0);
    nw_masque_options_set_target_endpoint(v6, 0);
  }
  nw_protocol_stack_append_application_protocol(*(void **)(a1 + 32), v6);

  v3 = v8;
LABEL_7:

}

void sub_18370EA78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void __nw_proxy_config_create_merged_block_invoke_3(uint64_t a1, void *a2)
{
  NSObject *v3;
  NSObject *v4;
  nw_endpoint_type_t type;
  int v6;
  int port;
  const char *hostname;
  size_t v9;
  unint64_t v10;
  int v11;
  int v12;
  NSObject *endpoint;

  v3 = a2;
  v4 = v3;
  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    endpoint = v3;
    type = nw_endpoint_get_type(v3);
    v4 = endpoint;
    if (type == nw_endpoint_type_host)
    {
      v6 = *(unsigned __int16 *)(a1 + 56);
      port = nw_endpoint_get_port(endpoint);
      v4 = endpoint;
      if (v6 == port)
      {
        hostname = nw_endpoint_get_hostname(endpoint);
        v9 = strlen(hostname);
        v10 = *(_QWORD *)(a1 + 40);
        v4 = endpoint;
        if (v9 > v10)
        {
          v11 = strcmp(&hostname[v9 - v10], *(const char **)(a1 + 48));
          v4 = endpoint;
          if (!v11)
            goto LABEL_8;
        }
        if (v9 == v10)
        {
          v12 = strcmp(hostname, *(const char **)(a1 + 48));
          v4 = endpoint;
          if (!v12)
LABEL_8:
            *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
        }
      }
    }
  }

}

void sub_18370EB70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t nw_proxy_config_should_proxy_transport_at_level(NWConcrete_nw_proxy_config *a1, const char *a2, BOOL *a3)
{
  NWConcrete_nw_proxy_config *v5;
  xpc_object_t *p_isa;
  OS_xpc_object *proxied_transports;
  uint64_t uint64;
  uint64_t v9;
  void *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  void *v15;
  os_log_type_t v16;
  char *backtrace_string;
  os_log_type_t v18;
  _BOOL4 v19;
  os_log_type_t v20;
  _BOOL4 v21;
  os_log_type_t v22;
  os_log_type_t v23;
  char v24;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v27;
  __int16 v28;
  char *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  p_isa = (xpc_object_t *)&v5->super.isa;
  if (v5)
  {
    if (a2)
    {
      proxied_transports = v5->proxied_transports;
      if (!proxied_transports)
        goto LABEL_11;
      uint64 = xpc_dictionary_get_uint64(proxied_transports, a2);
      if (!(_DWORD)uint64)
      {
        if (nw_proxy_config_default_transport(void)::onceToken[0] != -1)
          dispatch_once(nw_proxy_config_default_transport(void)::onceToken, &__block_literal_global_219);
        if (!strcmp(a2, (const char *)nw_proxy_config_default_transport(void)::default_transport_string))
          goto LABEL_11;
        v9 = xpc_dictionary_get_uint64(p_isa[2], "proxy-wildcard");
        uint64 = v9;
        if (a3)
          *a3 = 1;
        if (!(_DWORD)v9)
LABEL_11:
          uint64 = 4;
      }
      goto LABEL_12;
    }
    __nwlog_obj();
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v27 = "nw_proxy_config_should_proxy_transport_at_level";
    v12 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v24 = 0;
    if (__nwlog_fault(v12, &type, &v24))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v13 = objc_claimAutoreleasedReturnValue();
        v16 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)buf = 136446210;
          v27 = "nw_proxy_config_should_proxy_transport_at_level";
          _os_log_impl(&dword_182FBE000, v13, v16, "%{public}s called with null protocol_name", buf, 0xCu);
        }
LABEL_44:

        goto LABEL_45;
      }
      if (!v24)
      {
        __nwlog_obj();
        v13 = objc_claimAutoreleasedReturnValue();
        v23 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)buf = 136446210;
          v27 = "nw_proxy_config_should_proxy_transport_at_level";
          _os_log_impl(&dword_182FBE000, v13, v23, "%{public}s called with null protocol_name, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_44;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v20 = type;
      v21 = os_log_type_enabled(v13, type);
      if (!backtrace_string)
      {
        if (v21)
        {
          *(_DWORD *)buf = 136446210;
          v27 = "nw_proxy_config_should_proxy_transport_at_level";
          _os_log_impl(&dword_182FBE000, v13, v20, "%{public}s called with null protocol_name, no backtrace", buf, 0xCu);
        }
        goto LABEL_44;
      }
      if (v21)
      {
        *(_DWORD *)buf = 136446466;
        v27 = "nw_proxy_config_should_proxy_transport_at_level";
        v28 = 2082;
        v29 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v13, v20, "%{public}s called with null protocol_name, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_32;
    }
  }
  else
  {
    __nwlog_obj();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v27 = "nw_proxy_config_should_proxy_transport_at_level";
    v12 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v24 = 0;
    if (__nwlog_fault(v12, &type, &v24))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v13 = objc_claimAutoreleasedReturnValue();
        v14 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)buf = 136446210;
          v27 = "nw_proxy_config_should_proxy_transport_at_level";
          _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s called with null config", buf, 0xCu);
        }
        goto LABEL_44;
      }
      if (!v24)
      {
        __nwlog_obj();
        v13 = objc_claimAutoreleasedReturnValue();
        v22 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)buf = 136446210;
          v27 = "nw_proxy_config_should_proxy_transport_at_level";
          _os_log_impl(&dword_182FBE000, v13, v22, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_44;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v18 = type;
      v19 = os_log_type_enabled(v13, type);
      if (!backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446210;
          v27 = "nw_proxy_config_should_proxy_transport_at_level";
          _os_log_impl(&dword_182FBE000, v13, v18, "%{public}s called with null config, no backtrace", buf, 0xCu);
        }
        goto LABEL_44;
      }
      if (v19)
      {
        *(_DWORD *)buf = 136446466;
        v27 = "nw_proxy_config_should_proxy_transport_at_level";
        v28 = 2082;
        v29 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v13, v18, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_32:

      free(backtrace_string);
    }
  }
LABEL_45:
  if (v12)
    free(v12);
  uint64 = 0;
LABEL_12:

  return uint64;
}

void sub_18370F0A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZL33nw_proxy_config_default_transportv_block_invoke()
{
  id v0;

  if (nw_protocol_setup_tcp_definition(void)::onceToken != -1)
    dispatch_once(&nw_protocol_setup_tcp_definition(void)::onceToken, &__block_literal_global_62963);
  v0 = (id)g_tcp_definition;
  nw_proxy_config_default_transport(void)::default_transport_string = (uint64_t)nw_protocol_definition_get_identifier(v0);

}

uint64_t __nw_proxy_config_is_equal_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  void *v6;
  uint64_t is_equal;

  v5 = a3;
  v6 = nw_dictionary_copy_value(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), a2);
  is_equal = nw_protocol_stack_is_equal(v5, v6, 0);
  if ((is_equal & 1) == 0)
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;

  return is_equal;
}

void sub_18370F18C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t __nw_proxy_config_is_equal_block_invoke_2(uint64_t a1, unint64_t a2, void *a3)
{
  id v5;
  void *v6;
  uint64_t is_equal;

  v5 = a3;
  nw_array_get_object_at_index(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 48), a2);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  is_equal = nw_endpoint_is_equal(v5, v6, 0);
  if ((is_equal & 1) == 0)
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;

  return is_equal;
}

void sub_18370F21C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t __nw_proxy_config_get_hash_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;

  v4 = a3;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) ^= nw_protocol_stack_get_hash(v4);

  return 1;
}

void sub_18370F274(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t nw_proxy_config_get_mode(void *a1)
{
  unsigned int *v1;
  void *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = v1[38];
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_proxy_config_get_mode";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_proxy_config_get_mode";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_proxy_config_get_mode";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_proxy_config_get_mode";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_proxy_config_get_mode";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_proxy_config_get_type(void *a1)
{
  unsigned int *v1;
  void *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = 1;
    switch(v1[38])
    {
      case 1u:
        v3 = v1[39];
        break;
      case 2u:
        v3 = 1002;
        break;
      case 3u:
        v3 = 1001;
        break;
      case 4u:
        goto LABEL_7;
      default:
        goto LABEL_3;
    }
    goto LABEL_7;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_proxy_config_get_type";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_proxy_config_get_type";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_proxy_config_get_type";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_24;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_proxy_config_get_type";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_proxy_config_get_type";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_24:
  if (v6)
    free(v6);
LABEL_3:
  v3 = 0;
LABEL_7:

  return v3;
}

void nw_proxy_config_set_type(void *a1, int a2)
{
  id v3;
  void *v4;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    *((_DWORD *)v3 + 39) = a2;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_proxy_config_set_type";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_proxy_config_set_type";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_proxy_config_set_type";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_proxy_config_set_type";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_proxy_config_set_type";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
LABEL_3:

}

NWConcrete_nw_proxy_config *nw_proxy_config_create(void *a1, void *a2)
{
  id v4;
  id v5;
  void *v6;
  NWConcrete_nw_proxy_config *v7;
  NWConcrete_nw_proxy_config *v8;
  OS_nw_dictionary *v9;
  OS_nw_dictionary *stacks;
  NWConcrete_nw_protocol_stack *v11;
  uint64_t v12;
  NWConcrete_nw_proxy_config *v13;
  id v14;
  char *v15;
  NSObject *v16;
  os_log_type_t v17;
  char *v18;
  os_log_type_t v19;
  _BOOL4 v20;
  os_log_type_t v21;
  void *v23;
  char *v24;
  NSObject *v25;
  os_log_type_t v26;
  void *v27;
  os_log_type_t v28;
  char *backtrace_string;
  os_log_type_t v30;
  _BOOL4 v31;
  char *v32;
  os_log_type_t v33;
  _BOOL4 v34;
  os_log_type_t v35;
  os_log_type_t v36;
  char v37;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v40;
  __int16 v41;
  char *v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v4 = a1;
  v5 = a2;
  v6 = v5;
  if (!v4)
  {
    __nwlog_obj();
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v40 = "nw_proxy_config_create";
    v24 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v37 = 0;
    if (!__nwlog_fault(v24, &type, &v37))
      goto LABEL_61;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v25 = objc_claimAutoreleasedReturnValue();
      v26 = type;
      if (os_log_type_enabled(v25, type))
      {
        *(_DWORD *)buf = 136446210;
        v40 = "nw_proxy_config_create";
        _os_log_impl(&dword_182FBE000, v25, v26, "%{public}s called with null proxy_endpoint", buf, 0xCu);
      }
    }
    else if (v37)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v25 = objc_claimAutoreleasedReturnValue();
      v30 = type;
      v31 = os_log_type_enabled(v25, type);
      if (backtrace_string)
      {
        if (v31)
        {
          *(_DWORD *)buf = 136446466;
          v40 = "nw_proxy_config_create";
          v41 = 2082;
          v42 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v25, v30, "%{public}s called with null proxy_endpoint, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        if (!v24)
          goto LABEL_63;
        goto LABEL_62;
      }
      if (v31)
      {
        *(_DWORD *)buf = 136446210;
        v40 = "nw_proxy_config_create";
        _os_log_impl(&dword_182FBE000, v25, v30, "%{public}s called with null proxy_endpoint, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v25 = objc_claimAutoreleasedReturnValue();
      v35 = type;
      if (os_log_type_enabled(v25, type))
      {
        *(_DWORD *)buf = 136446210;
        v40 = "nw_proxy_config_create";
        _os_log_impl(&dword_182FBE000, v25, v35, "%{public}s called with null proxy_endpoint, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_60;
  }
  if (!v5)
  {
    __nwlog_obj();
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v40 = "nw_proxy_config_create";
    v24 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v37 = 0;
    if (!__nwlog_fault(v24, &type, &v37))
      goto LABEL_61;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v25 = objc_claimAutoreleasedReturnValue();
      v28 = type;
      if (os_log_type_enabled(v25, type))
      {
        *(_DWORD *)buf = 136446210;
        v40 = "nw_proxy_config_create";
        _os_log_impl(&dword_182FBE000, v25, v28, "%{public}s called with null proxy_options", buf, 0xCu);
      }
    }
    else if (v37)
    {
      v32 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v25 = objc_claimAutoreleasedReturnValue();
      v33 = type;
      v34 = os_log_type_enabled(v25, type);
      if (v32)
      {
        if (v34)
        {
          *(_DWORD *)buf = 136446466;
          v40 = "nw_proxy_config_create";
          v41 = 2082;
          v42 = v32;
          _os_log_impl(&dword_182FBE000, v25, v33, "%{public}s called with null proxy_options, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v32);
LABEL_61:
        if (!v24)
        {
LABEL_63:
          v8 = 0;
          goto LABEL_27;
        }
LABEL_62:
        free(v24);
        goto LABEL_63;
      }
      if (v34)
      {
        *(_DWORD *)buf = 136446210;
        v40 = "nw_proxy_config_create";
        _os_log_impl(&dword_182FBE000, v25, v33, "%{public}s called with null proxy_options, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v25 = objc_claimAutoreleasedReturnValue();
      v36 = type;
      if (os_log_type_enabled(v25, type))
      {
        *(_DWORD *)buf = 136446210;
        v40 = "nw_proxy_config_create";
        _os_log_impl(&dword_182FBE000, v25, v36, "%{public}s called with null proxy_options, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_60:

    goto LABEL_61;
  }
  v7 = objc_alloc_init(NWConcrete_nw_proxy_config);
  v8 = v7;
  if (v7)
  {
    v7->mode = 1;
    objc_storeStrong((id *)&v7->endpoint, a1);
    v9 = (OS_nw_dictionary *)nw_dictionary_create();
    stacks = v8->stacks;
    v8->stacks = v9;

    v11 = objc_alloc_init(NWConcrete_nw_protocol_stack);
    nw_protocol_stack_append_application_protocol(v11, v6);
    v12 = (uint64_t)v8->stacks;
    if (nw_proxy_config_default_transport(void)::onceToken[0] != -1)
      dispatch_once(nw_proxy_config_default_transport(void)::onceToken, &__block_literal_global_219);
    nw_dictionary_set_value(v12, (const char *)nw_proxy_config_default_transport(void)::default_transport_string, v11);
    v13 = v8;

    goto LABEL_26;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v14 = (id)gLogObj;
  *(_DWORD *)buf = 136446210;
  v40 = "nw_proxy_config_create";
  v15 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v37 = 0;
  if (__nwlog_fault(v15, &type, &v37))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v16 = (id)gLogObj;
      v17 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)buf = 136446210;
        v40 = "nw_proxy_config_create";
        _os_log_impl(&dword_182FBE000, v16, v17, "%{public}s [nw_proxy_config init] failed", buf, 0xCu);
      }
    }
    else if (v37)
    {
      v18 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v16 = (id)gLogObj;
      v19 = type;
      v20 = os_log_type_enabled(v16, type);
      if (v18)
      {
        if (v20)
        {
          *(_DWORD *)buf = 136446466;
          v40 = "nw_proxy_config_create";
          v41 = 2082;
          v42 = v18;
          _os_log_impl(&dword_182FBE000, v16, v19, "%{public}s [nw_proxy_config init] failed, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v18);
        if (!v15)
          goto LABEL_26;
        goto LABEL_25;
      }
      if (v20)
      {
        *(_DWORD *)buf = 136446210;
        v40 = "nw_proxy_config_create";
        _os_log_impl(&dword_182FBE000, v16, v19, "%{public}s [nw_proxy_config init] failed, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v16 = (id)gLogObj;
      v21 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)buf = 136446210;
        v40 = "nw_proxy_config_create";
        _os_log_impl(&dword_182FBE000, v16, v21, "%{public}s [nw_proxy_config init] failed, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
  if (v15)
LABEL_25:
    free(v15);
LABEL_26:

LABEL_27:
  return v8;
}

void sub_183710220(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

NWConcrete_nw_proxy_config *nw_proxy_config_create_with_stack(void *a1, void *a2)
{
  id v4;
  id v5;
  void *v6;
  NWConcrete_nw_proxy_config *v7;
  NWConcrete_nw_proxy_config *v8;
  OS_nw_dictionary *v9;
  OS_nw_dictionary *stacks;
  uint64_t v11;
  NWConcrete_nw_proxy_config *v12;
  id v13;
  char *v14;
  NSObject *v15;
  os_log_type_t v16;
  char *backtrace_string;
  os_log_type_t v18;
  _BOOL4 v19;
  os_log_type_t v20;
  void *v22;
  char *v23;
  NSObject *v24;
  os_log_type_t v25;
  void *v26;
  os_log_type_t v27;
  char *v28;
  os_log_type_t v29;
  _BOOL4 v30;
  os_log_type_t v31;
  _BOOL4 v32;
  os_log_type_t v33;
  os_log_type_t v34;
  char v35;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v38;
  __int16 v39;
  char *v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v4 = a1;
  v5 = a2;
  v6 = v5;
  if (v4)
  {
    if (v5)
    {
      v7 = objc_alloc_init(NWConcrete_nw_proxy_config);
      v8 = v7;
      if (v7)
      {
        v7->mode = 1;
        objc_storeStrong((id *)&v7->endpoint, a1);
        v9 = (OS_nw_dictionary *)nw_dictionary_create();
        stacks = v8->stacks;
        v8->stacks = v9;

        v11 = (uint64_t)v8->stacks;
        if (nw_proxy_config_default_transport(void)::onceToken[0] != -1)
          dispatch_once(nw_proxy_config_default_transport(void)::onceToken, &__block_literal_global_219);
        nw_dictionary_set_value(v11, (const char *)nw_proxy_config_default_transport(void)::default_transport_string, v6);
        v12 = v8;
        goto LABEL_26;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v13 = (id)gLogObj;
      *(_DWORD *)buf = 136446210;
      v38 = "nw_proxy_config_create_with_stack";
      v14 = (char *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v35 = 0;
      if (__nwlog_fault(v14, &type, &v35))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v15 = (id)gLogObj;
          v16 = type;
          if (os_log_type_enabled(v15, type))
          {
            *(_DWORD *)buf = 136446210;
            v38 = "nw_proxy_config_create_with_stack";
            _os_log_impl(&dword_182FBE000, v15, v16, "%{public}s [nw_proxy_config init] failed", buf, 0xCu);
          }
        }
        else if (v35)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v15 = (id)gLogObj;
          v18 = type;
          v19 = os_log_type_enabled(v15, type);
          if (backtrace_string)
          {
            if (v19)
            {
              *(_DWORD *)buf = 136446466;
              v38 = "nw_proxy_config_create_with_stack";
              v39 = 2082;
              v40 = backtrace_string;
              _os_log_impl(&dword_182FBE000, v15, v18, "%{public}s [nw_proxy_config init] failed, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(backtrace_string);
            if (!v14)
              goto LABEL_26;
            goto LABEL_25;
          }
          if (v19)
          {
            *(_DWORD *)buf = 136446210;
            v38 = "nw_proxy_config_create_with_stack";
            _os_log_impl(&dword_182FBE000, v15, v18, "%{public}s [nw_proxy_config init] failed, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v15 = (id)gLogObj;
          v20 = type;
          if (os_log_type_enabled(v15, type))
          {
            *(_DWORD *)buf = 136446210;
            v38 = "nw_proxy_config_create_with_stack";
            _os_log_impl(&dword_182FBE000, v15, v20, "%{public}s [nw_proxy_config init] failed, backtrace limit exceeded", buf, 0xCu);
          }
        }

      }
      if (!v14)
      {
LABEL_26:

        goto LABEL_27;
      }
LABEL_25:
      free(v14);
      goto LABEL_26;
    }
    __nwlog_obj();
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v38 = "nw_proxy_config_create_with_stack";
    v23 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v35 = 0;
    if (__nwlog_fault(v23, &type, &v35))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v24 = objc_claimAutoreleasedReturnValue();
        v27 = type;
        if (os_log_type_enabled(v24, type))
        {
          *(_DWORD *)buf = 136446210;
          v38 = "nw_proxy_config_create_with_stack";
          _os_log_impl(&dword_182FBE000, v24, v27, "%{public}s called with null stack", buf, 0xCu);
        }
LABEL_59:

        goto LABEL_60;
      }
      if (!v35)
      {
        __nwlog_obj();
        v24 = objc_claimAutoreleasedReturnValue();
        v34 = type;
        if (os_log_type_enabled(v24, type))
        {
          *(_DWORD *)buf = 136446210;
          v38 = "nw_proxy_config_create_with_stack";
          _os_log_impl(&dword_182FBE000, v24, v34, "%{public}s called with null stack, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_59;
      }
      v28 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v24 = objc_claimAutoreleasedReturnValue();
      v31 = type;
      v32 = os_log_type_enabled(v24, type);
      if (!v28)
      {
        if (v32)
        {
          *(_DWORD *)buf = 136446210;
          v38 = "nw_proxy_config_create_with_stack";
          _os_log_impl(&dword_182FBE000, v24, v31, "%{public}s called with null stack, no backtrace", buf, 0xCu);
        }
        goto LABEL_59;
      }
      if (v32)
      {
        *(_DWORD *)buf = 136446466;
        v38 = "nw_proxy_config_create_with_stack";
        v39 = 2082;
        v40 = v28;
        _os_log_impl(&dword_182FBE000, v24, v31, "%{public}s called with null stack, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_47;
    }
  }
  else
  {
    __nwlog_obj();
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v38 = "nw_proxy_config_create_with_stack";
    v23 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v35 = 0;
    if (__nwlog_fault(v23, &type, &v35))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v24 = objc_claimAutoreleasedReturnValue();
        v25 = type;
        if (os_log_type_enabled(v24, type))
        {
          *(_DWORD *)buf = 136446210;
          v38 = "nw_proxy_config_create_with_stack";
          _os_log_impl(&dword_182FBE000, v24, v25, "%{public}s called with null proxy_endpoint", buf, 0xCu);
        }
        goto LABEL_59;
      }
      if (!v35)
      {
        __nwlog_obj();
        v24 = objc_claimAutoreleasedReturnValue();
        v33 = type;
        if (os_log_type_enabled(v24, type))
        {
          *(_DWORD *)buf = 136446210;
          v38 = "nw_proxy_config_create_with_stack";
          _os_log_impl(&dword_182FBE000, v24, v33, "%{public}s called with null proxy_endpoint, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_59;
      }
      v28 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v24 = objc_claimAutoreleasedReturnValue();
      v29 = type;
      v30 = os_log_type_enabled(v24, type);
      if (!v28)
      {
        if (v30)
        {
          *(_DWORD *)buf = 136446210;
          v38 = "nw_proxy_config_create_with_stack";
          _os_log_impl(&dword_182FBE000, v24, v29, "%{public}s called with null proxy_endpoint, no backtrace", buf, 0xCu);
        }
        goto LABEL_59;
      }
      if (v30)
      {
        *(_DWORD *)buf = 136446466;
        v38 = "nw_proxy_config_create_with_stack";
        v39 = 2082;
        v40 = v28;
        _os_log_impl(&dword_182FBE000, v24, v29, "%{public}s called with null proxy_endpoint, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_47:

      free(v28);
    }
  }
LABEL_60:
  if (v23)
    free(v23);
  v8 = 0;
LABEL_27:

  return v8;
}

void sub_1837109D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

NWConcrete_nw_proxy_config *nw_proxy_config_create_direct()
{
  NWConcrete_nw_proxy_config *v0;
  NWConcrete_nw_proxy_config *v1;
  NWConcrete_nw_proxy_config *v2;
  id v3;
  char *v4;
  NSObject *v5;
  os_log_type_t v6;
  char *backtrace_string;
  os_log_type_t v9;
  _BOOL4 v10;
  os_log_type_t v11;
  char v12;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v0 = objc_alloc_init(NWConcrete_nw_proxy_config);
  v1 = v0;
  if (v0)
  {
    v0->mode = 4;
    v2 = v0;
    goto LABEL_10;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v3 = (id)gLogObj;
  *(_DWORD *)buf = 136446210;
  v15 = "nw_proxy_config_create_direct";
  v4 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v12 = 0;
  if (!__nwlog_fault(v4, &type, &v12))
    goto LABEL_8;
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v5 = (id)gLogObj;
    v6 = type;
    if (os_log_type_enabled(v5, type))
    {
      *(_DWORD *)buf = 136446210;
      v15 = "nw_proxy_config_create_direct";
      _os_log_impl(&dword_182FBE000, v5, v6, "%{public}s [nw_proxy_config init] failed", buf, 0xCu);
    }
LABEL_7:

LABEL_8:
    if (!v4)
      goto LABEL_10;
LABEL_9:
    free(v4);
    goto LABEL_10;
  }
  if (!v12)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v5 = (id)gLogObj;
    v11 = type;
    if (os_log_type_enabled(v5, type))
    {
      *(_DWORD *)buf = 136446210;
      v15 = "nw_proxy_config_create_direct";
      _os_log_impl(&dword_182FBE000, v5, v11, "%{public}s [nw_proxy_config init] failed, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_7;
  }
  backtrace_string = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v5 = (id)gLogObj;
  v9 = type;
  v10 = os_log_type_enabled(v5, type);
  if (!backtrace_string)
  {
    if (v10)
    {
      *(_DWORD *)buf = 136446210;
      v15 = "nw_proxy_config_create_direct";
      _os_log_impl(&dword_182FBE000, v5, v9, "%{public}s [nw_proxy_config init] failed, no backtrace", buf, 0xCu);
    }
    goto LABEL_7;
  }
  if (v10)
  {
    *(_DWORD *)buf = 136446466;
    v15 = "nw_proxy_config_create_direct";
    v16 = 2082;
    v17 = backtrace_string;
    _os_log_impl(&dword_182FBE000, v5, v9, "%{public}s [nw_proxy_config init] failed, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(backtrace_string);
  if (v4)
    goto LABEL_9;
LABEL_10:

  return v1;
}

NWConcrete_nw_proxy_config *nw_proxy_config_create_pac_url(void *a1)
{
  id v2;
  void *v3;
  id v4;
  int v5;
  NWConcrete_nw_proxy_config *v6;
  NWConcrete_nw_proxy_config *v7;
  NWConcrete_nw_proxy_config *v8;
  id v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  char *backtrace_string;
  os_log_type_t v14;
  _BOOL4 v15;
  os_log_type_t v16;
  void *v18;
  char *v19;
  NSObject *v20;
  os_log_type_t v21;
  void *v22;
  os_log_type_t v23;
  char *v24;
  os_log_type_t v25;
  _BOOL4 v26;
  os_log_type_t v27;
  _BOOL4 v28;
  os_log_type_t v29;
  os_log_type_t v30;
  char v31;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v34;
  __int16 v35;
  char *v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v2 = a1;
  v3 = v2;
  if (v2)
  {
    v4 = v2;
    v5 = objc_msgSend(v4, "type");

    if (v5 == 4)
    {
      v6 = objc_alloc_init(NWConcrete_nw_proxy_config);
      v7 = v6;
      if (v6)
      {
        v6->mode = 2;
        objc_storeStrong((id *)&v6->endpoint, a1);
        v8 = v7;
LABEL_24:

        goto LABEL_25;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v9 = (id)gLogObj;
      *(_DWORD *)buf = 136446210;
      v34 = "nw_proxy_config_create_pac_url";
      v10 = (char *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v31 = 0;
      if (__nwlog_fault(v10, &type, &v31))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v11 = (id)gLogObj;
          v12 = type;
          if (os_log_type_enabled(v11, type))
          {
            *(_DWORD *)buf = 136446210;
            v34 = "nw_proxy_config_create_pac_url";
            _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s [nw_proxy_config init] failed", buf, 0xCu);
          }
        }
        else if (v31)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v11 = (id)gLogObj;
          v14 = type;
          v15 = os_log_type_enabled(v11, type);
          if (backtrace_string)
          {
            if (v15)
            {
              *(_DWORD *)buf = 136446466;
              v34 = "nw_proxy_config_create_pac_url";
              v35 = 2082;
              v36 = backtrace_string;
              _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s [nw_proxy_config init] failed, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(backtrace_string);
            if (!v10)
              goto LABEL_24;
            goto LABEL_23;
          }
          if (v15)
          {
            *(_DWORD *)buf = 136446210;
            v34 = "nw_proxy_config_create_pac_url";
            _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s [nw_proxy_config init] failed, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v11 = (id)gLogObj;
          v16 = type;
          if (os_log_type_enabled(v11, type))
          {
            *(_DWORD *)buf = 136446210;
            v34 = "nw_proxy_config_create_pac_url";
            _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s [nw_proxy_config init] failed, backtrace limit exceeded", buf, 0xCu);
          }
        }

      }
      if (!v10)
        goto LABEL_24;
LABEL_23:
      free(v10);
      goto LABEL_24;
    }
    __nwlog_obj();
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v34 = "nw_proxy_config_create_pac_url";
    v19 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v31 = 0;
    if (__nwlog_fault(v19, &type, &v31))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v20 = objc_claimAutoreleasedReturnValue();
        v23 = type;
        if (os_log_type_enabled(v20, type))
        {
          *(_DWORD *)buf = 136446210;
          v34 = "nw_proxy_config_create_pac_url";
          _os_log_impl(&dword_182FBE000, v20, v23, "%{public}s called with null (nw_endpoint_get_type(pac_url) == nw_endpoint_type_url)", buf, 0xCu);
        }
LABEL_57:

        goto LABEL_58;
      }
      if (!v31)
      {
        __nwlog_obj();
        v20 = objc_claimAutoreleasedReturnValue();
        v30 = type;
        if (os_log_type_enabled(v20, type))
        {
          *(_DWORD *)buf = 136446210;
          v34 = "nw_proxy_config_create_pac_url";
          _os_log_impl(&dword_182FBE000, v20, v30, "%{public}s called with null (nw_endpoint_get_type(pac_url) == nw_endpoint_type_url), backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_57;
      }
      v24 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v20 = objc_claimAutoreleasedReturnValue();
      v27 = type;
      v28 = os_log_type_enabled(v20, type);
      if (!v24)
      {
        if (v28)
        {
          *(_DWORD *)buf = 136446210;
          v34 = "nw_proxy_config_create_pac_url";
          _os_log_impl(&dword_182FBE000, v20, v27, "%{public}s called with null (nw_endpoint_get_type(pac_url) == nw_endpoint_type_url), no backtrace", buf, 0xCu);
        }
        goto LABEL_57;
      }
      if (v28)
      {
        *(_DWORD *)buf = 136446466;
        v34 = "nw_proxy_config_create_pac_url";
        v35 = 2082;
        v36 = v24;
        _os_log_impl(&dword_182FBE000, v20, v27, "%{public}s called with null (nw_endpoint_get_type(pac_url) == nw_endpoint_type_url), dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_45;
    }
  }
  else
  {
    __nwlog_obj();
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v34 = "nw_proxy_config_create_pac_url";
    v19 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v31 = 0;
    if (__nwlog_fault(v19, &type, &v31))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v20 = objc_claimAutoreleasedReturnValue();
        v21 = type;
        if (os_log_type_enabled(v20, type))
        {
          *(_DWORD *)buf = 136446210;
          v34 = "nw_proxy_config_create_pac_url";
          _os_log_impl(&dword_182FBE000, v20, v21, "%{public}s called with null pac_url", buf, 0xCu);
        }
        goto LABEL_57;
      }
      if (!v31)
      {
        __nwlog_obj();
        v20 = objc_claimAutoreleasedReturnValue();
        v29 = type;
        if (os_log_type_enabled(v20, type))
        {
          *(_DWORD *)buf = 136446210;
          v34 = "nw_proxy_config_create_pac_url";
          _os_log_impl(&dword_182FBE000, v20, v29, "%{public}s called with null pac_url, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_57;
      }
      v24 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v20 = objc_claimAutoreleasedReturnValue();
      v25 = type;
      v26 = os_log_type_enabled(v20, type);
      if (!v24)
      {
        if (v26)
        {
          *(_DWORD *)buf = 136446210;
          v34 = "nw_proxy_config_create_pac_url";
          _os_log_impl(&dword_182FBE000, v20, v25, "%{public}s called with null pac_url, no backtrace", buf, 0xCu);
        }
        goto LABEL_57;
      }
      if (v26)
      {
        *(_DWORD *)buf = 136446466;
        v34 = "nw_proxy_config_create_pac_url";
        v35 = 2082;
        v36 = v24;
        _os_log_impl(&dword_182FBE000, v20, v25, "%{public}s called with null pac_url, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_45:

      free(v24);
    }
  }
LABEL_58:
  if (v19)
    free(v19);
  v7 = 0;
LABEL_25:

  return v7;
}

void sub_18371141C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

NWConcrete_nw_proxy_config *nw_proxy_config_create_pac_script(const char *a1)
{
  NWConcrete_nw_proxy_config *v2;
  NWConcrete_nw_proxy_config *v3;
  OS_xpc_object *v4;
  OS_xpc_object *pac_script;
  NWConcrete_nw_proxy_config *v6;
  id v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  char *backtrace_string;
  os_log_type_t v13;
  _BOOL4 v14;
  os_log_type_t v15;
  void *v16;
  char *v17;
  NSObject *v18;
  os_log_type_t v19;
  char *v20;
  os_log_type_t v21;
  _BOOL4 v22;
  os_log_type_t v23;
  char v24;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v27;
  __int16 v28;
  char *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v2 = objc_alloc_init(NWConcrete_nw_proxy_config);
    v3 = v2;
    if (v2)
    {
      v2->mode = 3;
      v4 = (OS_xpc_object *)xpc_string_create(a1);
      pac_script = v3->pac_script;
      v3->pac_script = v4;

      v6 = v3;
LABEL_11:

      return v3;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v7 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v27 = "nw_proxy_config_create_pac_script";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v24 = 0;
    if (__nwlog_fault(v8, &type, &v24))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v9 = (id)gLogObj;
        v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          v27 = "nw_proxy_config_create_pac_script";
          _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s [nw_proxy_config init] failed", buf, 0xCu);
        }
      }
      else if (v24)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v9 = (id)gLogObj;
        v13 = type;
        v14 = os_log_type_enabled(v9, type);
        if (backtrace_string)
        {
          if (v14)
          {
            *(_DWORD *)buf = 136446466;
            v27 = "nw_proxy_config_create_pac_script";
            v28 = 2082;
            v29 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v9, v13, "%{public}s [nw_proxy_config init] failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          if (!v8)
            goto LABEL_11;
          goto LABEL_10;
        }
        if (v14)
        {
          *(_DWORD *)buf = 136446210;
          v27 = "nw_proxy_config_create_pac_script";
          _os_log_impl(&dword_182FBE000, v9, v13, "%{public}s [nw_proxy_config init] failed, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v9 = (id)gLogObj;
        v15 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          v27 = "nw_proxy_config_create_pac_script";
          _os_log_impl(&dword_182FBE000, v9, v15, "%{public}s [nw_proxy_config init] failed, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
    if (!v8)
      goto LABEL_11;
LABEL_10:
    free(v8);
    goto LABEL_11;
  }
  __nwlog_obj();
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v27 = "nw_proxy_config_create_pac_script";
  v17 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v24 = 0;
  if (__nwlog_fault(v17, &type, &v24))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v18 = objc_claimAutoreleasedReturnValue();
      v19 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_proxy_config_create_pac_script";
        _os_log_impl(&dword_182FBE000, v18, v19, "%{public}s called with null pac_script", buf, 0xCu);
      }
    }
    else if (v24)
    {
      v20 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v18 = objc_claimAutoreleasedReturnValue();
      v21 = type;
      v22 = os_log_type_enabled(v18, type);
      if (v20)
      {
        if (v22)
        {
          *(_DWORD *)buf = 136446466;
          v27 = "nw_proxy_config_create_pac_script";
          v28 = 2082;
          v29 = v20;
          _os_log_impl(&dword_182FBE000, v18, v21, "%{public}s called with null pac_script, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v20);
        goto LABEL_41;
      }
      if (v22)
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_proxy_config_create_pac_script";
        _os_log_impl(&dword_182FBE000, v18, v21, "%{public}s called with null pac_script, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v18 = objc_claimAutoreleasedReturnValue();
      v23 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_proxy_config_create_pac_script";
        _os_log_impl(&dword_182FBE000, v18, v23, "%{public}s called with null pac_script, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_41:
  if (v17)
    free(v17);
  return 0;
}

void sub_183711958(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id nw_proxy_config_copy_endpoint(void *a1)
{
  id *v1;
  id *v2;
  id v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = v1[5];
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_proxy_config_copy_endpoint";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_proxy_config_copy_endpoint";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_proxy_config_copy_endpoint";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_proxy_config_copy_endpoint";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_proxy_config_copy_endpoint";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

void nw_proxy_config_enumerate_endpoints(void *a1, void *a2)
{
  _QWORD *v3;
  void (**v4)(_QWORD);
  void (**v5)(_QWORD);
  uint64_t v6;
  uint64_t v7;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  void *v12;
  os_log_type_t v13;
  char *backtrace_string;
  os_log_type_t v15;
  _BOOL4 v16;
  char *v17;
  os_log_type_t v18;
  _BOOL4 v19;
  os_log_type_t v20;
  os_log_type_t v21;
  _QWORD v22[4];
  void (**v23)(_QWORD);
  _BYTE *v24;
  char v25;
  os_log_type_t type;
  _BYTE buf[24];
  char v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_proxy_config_enumerate_endpoints";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v25 = 0;
    if (!__nwlog_fault(v9, &type, &v25))
      goto LABEL_44;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_proxy_config_enumerate_endpoints";
        _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v25)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      v16 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_proxy_config_enumerate_endpoints";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_44:
        if (!v9)
          goto LABEL_10;
LABEL_45:
        free(v9);
        goto LABEL_10;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_proxy_config_enumerate_endpoints";
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v20 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_proxy_config_enumerate_endpoints";
        _os_log_impl(&dword_182FBE000, v10, v20, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_43:

    goto LABEL_44;
  }
  if (v4)
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x2020000000;
    v28 = 0;
    v6 = v3[1];
    if (v6 && nw_dictionary_get_count(v6))
    {
      v7 = v3[1];
      v22[0] = MEMORY[0x1E0C809B0];
      v22[1] = 3221225472;
      v22[2] = __nw_proxy_config_enumerate_endpoints_block_invoke;
      v22[3] = &unk_1E14A10C8;
      v23 = v5;
      v24 = buf;
      nw_dictionary_apply(v7, (uint64_t)v22);

    }
    if (!*(_BYTE *)(*(_QWORD *)&buf[8] + 24) && v3[5])
      v5[2](v5);
    _Block_object_dispose(buf, 8);
    goto LABEL_10;
  }
  __nwlog_obj();
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_proxy_config_enumerate_endpoints";
  v9 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v25 = 0;
  if (!__nwlog_fault(v9, &type, &v25))
    goto LABEL_44;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v10 = objc_claimAutoreleasedReturnValue();
    v13 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_proxy_config_enumerate_endpoints";
      _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null enumerator", buf, 0xCu);
    }
    goto LABEL_43;
  }
  if (!v25)
  {
    __nwlog_obj();
    v10 = objc_claimAutoreleasedReturnValue();
    v21 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_proxy_config_enumerate_endpoints";
      _os_log_impl(&dword_182FBE000, v10, v21, "%{public}s called with null enumerator, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_43;
  }
  v17 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v10 = objc_claimAutoreleasedReturnValue();
  v18 = type;
  v19 = os_log_type_enabled(v10, type);
  if (!v17)
  {
    if (v19)
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_proxy_config_enumerate_endpoints";
      _os_log_impl(&dword_182FBE000, v10, v18, "%{public}s called with null enumerator, no backtrace", buf, 0xCu);
    }
    goto LABEL_43;
  }
  if (v19)
  {
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "nw_proxy_config_enumerate_endpoints";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v17;
    _os_log_impl(&dword_182FBE000, v10, v18, "%{public}s called with null enumerator, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v17);
  if (v9)
    goto LABEL_45;
LABEL_10:

}

void sub_183712154(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  void *v13;
  void *v14;
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

uint64_t __nw_proxy_config_enumerate_endpoints_block_invoke(uint64_t a1, uint64_t a2, NSObject *a3)
{
  id v5;
  uint64_t v6;
  _QWORD v8[4];
  id v9;
  uint64_t v10;

  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = __nw_proxy_config_enumerate_endpoints_block_invoke_2;
  v8[3] = &unk_1E14A10A0;
  v5 = *(id *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 40);
  v9 = v5;
  v10 = v6;
  nw_protocol_stack_iterate_application_protocols(a3, v8);

  return 0;
}

void __nw_proxy_config_enumerate_endpoints_block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  id v4;

  v3 = nw_protocol_options_copy_proxy_endpoint(a2);
  if (v3)
  {
    v4 = v3;
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
    v3 = v4;
  }

}

void sub_183712250(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void nw_proxy_config_add_resolved_endpoint(void *a1, void *a2)
{
  _QWORD *v3;
  id v4;
  void *v5;
  uint64_t v6;
  _BOOL8 v7;
  void *v8;
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  void *v13;
  os_log_type_t v14;
  char *backtrace_string;
  os_log_type_t v16;
  _BOOL4 v17;
  char *v18;
  os_log_type_t v19;
  _BOOL4 v20;
  os_log_type_t v21;
  os_log_type_t v22;
  char v23;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  char *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v26 = "nw_proxy_config_add_resolved_endpoint";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (!__nwlog_fault(v10, &type, &v23))
      goto LABEL_40;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_proxy_config_add_resolved_endpoint";
        _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      v17 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          v26 = "nw_proxy_config_add_resolved_endpoint";
          v27 = 2082;
          v28 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_40:
        if (!v10)
          goto LABEL_6;
LABEL_41:
        free(v10);
        goto LABEL_6;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_proxy_config_add_resolved_endpoint";
        _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v21 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_proxy_config_add_resolved_endpoint";
        _os_log_impl(&dword_182FBE000, v11, v21, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_39:

    goto LABEL_40;
  }
  if (v4)
  {
    v6 = v3[6];
    if (!v6)
    {
      v7 = nw_array_create();
      v8 = (void *)v3[6];
      v3[6] = v7;

      v6 = v3[6];
    }
    nw_array_append(v6, v5);
    goto LABEL_6;
  }
  __nwlog_obj();
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v26 = "nw_proxy_config_add_resolved_endpoint";
  v10 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v23 = 0;
  if (!__nwlog_fault(v10, &type, &v23))
    goto LABEL_40;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v11 = objc_claimAutoreleasedReturnValue();
    v14 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_proxy_config_add_resolved_endpoint";
      _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s called with null resolved_endpoint", buf, 0xCu);
    }
    goto LABEL_39;
  }
  if (!v23)
  {
    __nwlog_obj();
    v11 = objc_claimAutoreleasedReturnValue();
    v22 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_proxy_config_add_resolved_endpoint";
      _os_log_impl(&dword_182FBE000, v11, v22, "%{public}s called with null resolved_endpoint, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_39;
  }
  v18 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v11 = objc_claimAutoreleasedReturnValue();
  v19 = type;
  v20 = os_log_type_enabled(v11, type);
  if (!v18)
  {
    if (v20)
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_proxy_config_add_resolved_endpoint";
      _os_log_impl(&dword_182FBE000, v11, v19, "%{public}s called with null resolved_endpoint, no backtrace", buf, 0xCu);
    }
    goto LABEL_39;
  }
  if (v20)
  {
    *(_DWORD *)buf = 136446466;
    v26 = "nw_proxy_config_add_resolved_endpoint";
    v27 = 2082;
    v28 = v18;
    _os_log_impl(&dword_182FBE000, v11, v19, "%{public}s called with null resolved_endpoint, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v18);
  if (v10)
    goto LABEL_41;
LABEL_6:

}

void nw_proxy_config_enumerate_resolved_endpoints(void *a1, void *a2)
{
  _QWORD *v3;
  id v4;
  void *v5;
  unsigned __int8 *v6;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  void *v11;
  os_log_type_t v12;
  char *backtrace_string;
  os_log_type_t v14;
  _BOOL4 v15;
  char *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  os_log_type_t v19;
  os_log_type_t v20;
  _QWORD v21[4];
  id v22;
  char v23;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  char *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v26 = "nw_proxy_config_enumerate_resolved_endpoints";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (!__nwlog_fault(v8, &type, &v23))
      goto LABEL_39;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_proxy_config_enumerate_resolved_endpoints";
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      v15 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          v26 = "nw_proxy_config_enumerate_resolved_endpoints";
          v27 = 2082;
          v28 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_39:
        if (!v8)
          goto LABEL_5;
LABEL_40:
        free(v8);
        goto LABEL_5;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_proxy_config_enumerate_resolved_endpoints";
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v19 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_proxy_config_enumerate_resolved_endpoints";
        _os_log_impl(&dword_182FBE000, v9, v19, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_38:

    goto LABEL_39;
  }
  if (v4)
  {
    v6 = (unsigned __int8 *)v3[6];
    if (v6)
    {
      v21[0] = MEMORY[0x1E0C809B0];
      v21[1] = 3221225472;
      v21[2] = __nw_proxy_config_enumerate_resolved_endpoints_block_invoke;
      v21[3] = &unk_1E14AC278;
      v22 = v4;
      nw_array_apply(v6, (uint64_t)v21);

    }
    goto LABEL_5;
  }
  __nwlog_obj();
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v26 = "nw_proxy_config_enumerate_resolved_endpoints";
  v8 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v23 = 0;
  if (!__nwlog_fault(v8, &type, &v23))
    goto LABEL_39;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v9 = objc_claimAutoreleasedReturnValue();
    v12 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_proxy_config_enumerate_resolved_endpoints";
      _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null enumerator", buf, 0xCu);
    }
    goto LABEL_38;
  }
  if (!v23)
  {
    __nwlog_obj();
    v9 = objc_claimAutoreleasedReturnValue();
    v20 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_proxy_config_enumerate_resolved_endpoints";
      _os_log_impl(&dword_182FBE000, v9, v20, "%{public}s called with null enumerator, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_38;
  }
  v16 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v9 = objc_claimAutoreleasedReturnValue();
  v17 = type;
  v18 = os_log_type_enabled(v9, type);
  if (!v16)
  {
    if (v18)
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_proxy_config_enumerate_resolved_endpoints";
      _os_log_impl(&dword_182FBE000, v9, v17, "%{public}s called with null enumerator, no backtrace", buf, 0xCu);
    }
    goto LABEL_38;
  }
  if (v18)
  {
    *(_DWORD *)buf = 136446466;
    v26 = "nw_proxy_config_enumerate_resolved_endpoints";
    v27 = 2082;
    v28 = v16;
    _os_log_impl(&dword_182FBE000, v9, v17, "%{public}s called with null enumerator, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v16);
  if (v8)
    goto LABEL_40;
LABEL_5:

}

uint64_t __nw_proxy_config_enumerate_resolved_endpoints_block_invoke(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  return 1;
}

void nw_proxy_config_add_match_domain(nw_proxy_config_t config, const char *match_domain)
{
  nw_proxy_config_t v3;
  _QWORD *p_isa;
  Class isa;
  xpc_object_t v6;
  void *v7;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  void *v12;
  os_log_type_t v13;
  char *backtrace_string;
  os_log_type_t v15;
  _BOOL4 v16;
  char *v17;
  os_log_type_t v18;
  _BOOL4 v19;
  os_log_type_t v20;
  os_log_type_t v21;
  char v22;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v25;
  __int16 v26;
  char *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v3 = config;
  p_isa = &v3->isa;
  if (!v3)
  {
    __nwlog_obj();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v25 = "nw_proxy_config_add_match_domain";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (!__nwlog_fault(v9, &type, &v22))
      goto LABEL_40;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_proxy_config_add_match_domain";
        _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v22)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      v16 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          v25 = "nw_proxy_config_add_match_domain";
          v26 = 2082;
          v27 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_40:
        if (!v9)
          goto LABEL_6;
LABEL_41:
        free(v9);
        goto LABEL_6;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_proxy_config_add_match_domain";
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v20 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_proxy_config_add_match_domain";
        _os_log_impl(&dword_182FBE000, v10, v20, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_39:

    goto LABEL_40;
  }
  if (match_domain)
  {
    isa = v3[15].isa;
    if (!isa)
    {
      v6 = xpc_array_create(0, 0);
      v7 = (void *)p_isa[15];
      p_isa[15] = v6;

      isa = (Class)p_isa[15];
    }
    xpc_array_set_string(isa, 0xFFFFFFFFFFFFFFFFLL, match_domain);
    goto LABEL_6;
  }
  __nwlog_obj();
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v25 = "nw_proxy_config_add_match_domain";
  v9 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v22 = 0;
  if (!__nwlog_fault(v9, &type, &v22))
    goto LABEL_40;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v10 = objc_claimAutoreleasedReturnValue();
    v13 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      v25 = "nw_proxy_config_add_match_domain";
      _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null match_domain", buf, 0xCu);
    }
    goto LABEL_39;
  }
  if (!v22)
  {
    __nwlog_obj();
    v10 = objc_claimAutoreleasedReturnValue();
    v21 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      v25 = "nw_proxy_config_add_match_domain";
      _os_log_impl(&dword_182FBE000, v10, v21, "%{public}s called with null match_domain, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_39;
  }
  v17 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v10 = objc_claimAutoreleasedReturnValue();
  v18 = type;
  v19 = os_log_type_enabled(v10, type);
  if (!v17)
  {
    if (v19)
    {
      *(_DWORD *)buf = 136446210;
      v25 = "nw_proxy_config_add_match_domain";
      _os_log_impl(&dword_182FBE000, v10, v18, "%{public}s called with null match_domain, no backtrace", buf, 0xCu);
    }
    goto LABEL_39;
  }
  if (v19)
  {
    *(_DWORD *)buf = 136446466;
    v25 = "nw_proxy_config_add_match_domain";
    v26 = 2082;
    v27 = v17;
    _os_log_impl(&dword_182FBE000, v10, v18, "%{public}s called with null match_domain, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v17);
  if (v9)
    goto LABEL_41;
LABEL_6:

}

void sub_183713120(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_proxy_config_clear_match_domains(nw_proxy_config_t config)
{
  nw_proxy_config_t v1;
  nw_proxy_config_t v2;
  Class isa;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  char *backtrace_string;
  os_log_type_t v9;
  _BOOL4 v10;
  os_log_type_t v11;
  char v12;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v1 = config;
  v2 = v1;
  if (v1)
  {
    isa = v1[15].isa;
    v1[15].isa = 0;

    goto LABEL_3;
  }
  __nwlog_obj();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v15 = "nw_proxy_config_clear_match_domains";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v12 = 0;
  if (__nwlog_fault(v5, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_proxy_config_clear_match_domains";
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v12)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          v15 = "nw_proxy_config_clear_match_domains";
          v16 = 2082;
          v17 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_proxy_config_clear_match_domains";
        _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_proxy_config_clear_match_domains";
        _os_log_impl(&dword_182FBE000, v6, v11, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v5)
    free(v5);
LABEL_3:

}

void nw_proxy_config_enumerate_match_domains(nw_proxy_config_t config, nw_proxy_domain_enumerator_t enumerator)
{
  nw_proxy_config_t v3;
  nw_proxy_domain_enumerator_t v4;
  void *v5;
  Class isa;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  void *v11;
  os_log_type_t v12;
  char *backtrace_string;
  os_log_type_t v14;
  _BOOL4 v15;
  char *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  os_log_type_t v19;
  os_log_type_t v20;
  _QWORD applier[4];
  id v22;
  char v23;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  char *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v3 = config;
  v4 = enumerator;
  v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v26 = "nw_proxy_config_enumerate_match_domains";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (!__nwlog_fault(v8, &type, &v23))
      goto LABEL_39;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_proxy_config_enumerate_match_domains";
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      v15 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          v26 = "nw_proxy_config_enumerate_match_domains";
          v27 = 2082;
          v28 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_39:
        if (!v8)
          goto LABEL_5;
LABEL_40:
        free(v8);
        goto LABEL_5;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_proxy_config_enumerate_match_domains";
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v19 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_proxy_config_enumerate_match_domains";
        _os_log_impl(&dword_182FBE000, v9, v19, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_38:

    goto LABEL_39;
  }
  if (v4)
  {
    isa = v3[15].isa;
    if (isa)
    {
      applier[0] = MEMORY[0x1E0C809B0];
      applier[1] = 3221225472;
      applier[2] = __nw_proxy_config_enumerate_match_domains_block_invoke;
      applier[3] = &unk_1E14A4E60;
      v22 = v4;
      xpc_array_apply(isa, applier);

    }
    goto LABEL_5;
  }
  __nwlog_obj();
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v26 = "nw_proxy_config_enumerate_match_domains";
  v8 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v23 = 0;
  if (!__nwlog_fault(v8, &type, &v23))
    goto LABEL_39;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v9 = objc_claimAutoreleasedReturnValue();
    v12 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_proxy_config_enumerate_match_domains";
      _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null enumerator", buf, 0xCu);
    }
    goto LABEL_38;
  }
  if (!v23)
  {
    __nwlog_obj();
    v9 = objc_claimAutoreleasedReturnValue();
    v20 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_proxy_config_enumerate_match_domains";
      _os_log_impl(&dword_182FBE000, v9, v20, "%{public}s called with null enumerator, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_38;
  }
  v16 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v9 = objc_claimAutoreleasedReturnValue();
  v17 = type;
  v18 = os_log_type_enabled(v9, type);
  if (!v16)
  {
    if (v18)
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_proxy_config_enumerate_match_domains";
      _os_log_impl(&dword_182FBE000, v9, v17, "%{public}s called with null enumerator, no backtrace", buf, 0xCu);
    }
    goto LABEL_38;
  }
  if (v18)
  {
    *(_DWORD *)buf = 136446466;
    v26 = "nw_proxy_config_enumerate_match_domains";
    v27 = 2082;
    v28 = v16;
    _os_log_impl(&dword_182FBE000, v9, v17, "%{public}s called with null enumerator, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v16);
  if (v8)
    goto LABEL_40;
LABEL_5:

}

void sub_1837138C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

uint64_t __nw_proxy_config_enumerate_match_domains_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  uint64_t v5;
  const char *string_ptr;

  v4 = a3;
  if (object_getClass(v4) == (Class)MEMORY[0x1E0C81390])
  {
    v5 = *(_QWORD *)(a1 + 32);
    string_ptr = xpc_string_get_string_ptr(v4);
    (*(void (**)(uint64_t, const char *))(v5 + 16))(v5, string_ptr);
  }

  return 1;
}

void sub_18371393C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_proxy_config_add_excluded_domain(nw_proxy_config_t config, const char *excluded_domain)
{
  nw_proxy_config_t v3;
  _QWORD *p_isa;
  Class isa;
  xpc_object_t v6;
  void *v7;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  void *v12;
  os_log_type_t v13;
  char *backtrace_string;
  os_log_type_t v15;
  _BOOL4 v16;
  char *v17;
  os_log_type_t v18;
  _BOOL4 v19;
  os_log_type_t v20;
  os_log_type_t v21;
  char v22;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v25;
  __int16 v26;
  char *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v3 = config;
  p_isa = &v3->isa;
  if (!v3)
  {
    __nwlog_obj();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v25 = "nw_proxy_config_add_excluded_domain";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (!__nwlog_fault(v9, &type, &v22))
      goto LABEL_40;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_proxy_config_add_excluded_domain";
        _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v22)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      v16 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          v25 = "nw_proxy_config_add_excluded_domain";
          v26 = 2082;
          v27 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_40:
        if (!v9)
          goto LABEL_6;
LABEL_41:
        free(v9);
        goto LABEL_6;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_proxy_config_add_excluded_domain";
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v20 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_proxy_config_add_excluded_domain";
        _os_log_impl(&dword_182FBE000, v10, v20, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_39:

    goto LABEL_40;
  }
  if (excluded_domain)
  {
    isa = v3[16].isa;
    if (!isa)
    {
      v6 = xpc_array_create(0, 0);
      v7 = (void *)p_isa[16];
      p_isa[16] = v6;

      isa = (Class)p_isa[16];
    }
    xpc_array_set_string(isa, 0xFFFFFFFFFFFFFFFFLL, excluded_domain);
    goto LABEL_6;
  }
  __nwlog_obj();
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v25 = "nw_proxy_config_add_excluded_domain";
  v9 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v22 = 0;
  if (!__nwlog_fault(v9, &type, &v22))
    goto LABEL_40;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v10 = objc_claimAutoreleasedReturnValue();
    v13 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      v25 = "nw_proxy_config_add_excluded_domain";
      _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null excluded_domain", buf, 0xCu);
    }
    goto LABEL_39;
  }
  if (!v22)
  {
    __nwlog_obj();
    v10 = objc_claimAutoreleasedReturnValue();
    v21 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      v25 = "nw_proxy_config_add_excluded_domain";
      _os_log_impl(&dword_182FBE000, v10, v21, "%{public}s called with null excluded_domain, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_39;
  }
  v17 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v10 = objc_claimAutoreleasedReturnValue();
  v18 = type;
  v19 = os_log_type_enabled(v10, type);
  if (!v17)
  {
    if (v19)
    {
      *(_DWORD *)buf = 136446210;
      v25 = "nw_proxy_config_add_excluded_domain";
      _os_log_impl(&dword_182FBE000, v10, v18, "%{public}s called with null excluded_domain, no backtrace", buf, 0xCu);
    }
    goto LABEL_39;
  }
  if (v19)
  {
    *(_DWORD *)buf = 136446466;
    v25 = "nw_proxy_config_add_excluded_domain";
    v26 = 2082;
    v27 = v17;
    _os_log_impl(&dword_182FBE000, v10, v18, "%{public}s called with null excluded_domain, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v17);
  if (v9)
    goto LABEL_41;
LABEL_6:

}

void sub_183713E18(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_proxy_config_clear_excluded_domains(nw_proxy_config_t config)
{
  nw_proxy_config_t v1;
  nw_proxy_config_t v2;
  Class isa;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  char *backtrace_string;
  os_log_type_t v9;
  _BOOL4 v10;
  os_log_type_t v11;
  char v12;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v1 = config;
  v2 = v1;
  if (v1)
  {
    isa = v1[16].isa;
    v1[16].isa = 0;

    goto LABEL_3;
  }
  __nwlog_obj();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v15 = "nw_proxy_config_clear_excluded_domains";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v12 = 0;
  if (__nwlog_fault(v5, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_proxy_config_clear_excluded_domains";
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v12)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          v15 = "nw_proxy_config_clear_excluded_domains";
          v16 = 2082;
          v17 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_proxy_config_clear_excluded_domains";
        _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_proxy_config_clear_excluded_domains";
        _os_log_impl(&dword_182FBE000, v6, v11, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v5)
    free(v5);
LABEL_3:

}

void nw_proxy_config_enumerate_excluded_domains(nw_proxy_config_t config, nw_proxy_domain_enumerator_t enumerator)
{
  nw_proxy_config_t v3;
  nw_proxy_domain_enumerator_t v4;
  void *v5;
  Class isa;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  void *v11;
  os_log_type_t v12;
  char *backtrace_string;
  os_log_type_t v14;
  _BOOL4 v15;
  char *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  os_log_type_t v19;
  os_log_type_t v20;
  _QWORD applier[4];
  id v22;
  char v23;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  char *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v3 = config;
  v4 = enumerator;
  v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v26 = "nw_proxy_config_enumerate_excluded_domains";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (!__nwlog_fault(v8, &type, &v23))
      goto LABEL_39;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_proxy_config_enumerate_excluded_domains";
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      v15 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          v26 = "nw_proxy_config_enumerate_excluded_domains";
          v27 = 2082;
          v28 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_39:
        if (!v8)
          goto LABEL_5;
LABEL_40:
        free(v8);
        goto LABEL_5;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_proxy_config_enumerate_excluded_domains";
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v19 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_proxy_config_enumerate_excluded_domains";
        _os_log_impl(&dword_182FBE000, v9, v19, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_38:

    goto LABEL_39;
  }
  if (v4)
  {
    isa = v3[16].isa;
    if (isa)
    {
      applier[0] = MEMORY[0x1E0C809B0];
      applier[1] = 3221225472;
      applier[2] = __nw_proxy_config_enumerate_excluded_domains_block_invoke;
      applier[3] = &unk_1E14A4E60;
      v22 = v4;
      xpc_array_apply(isa, applier);

    }
    goto LABEL_5;
  }
  __nwlog_obj();
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v26 = "nw_proxy_config_enumerate_excluded_domains";
  v8 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v23 = 0;
  if (!__nwlog_fault(v8, &type, &v23))
    goto LABEL_39;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v9 = objc_claimAutoreleasedReturnValue();
    v12 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_proxy_config_enumerate_excluded_domains";
      _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null enumerator", buf, 0xCu);
    }
    goto LABEL_38;
  }
  if (!v23)
  {
    __nwlog_obj();
    v9 = objc_claimAutoreleasedReturnValue();
    v20 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_proxy_config_enumerate_excluded_domains";
      _os_log_impl(&dword_182FBE000, v9, v20, "%{public}s called with null enumerator, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_38;
  }
  v16 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v9 = objc_claimAutoreleasedReturnValue();
  v17 = type;
  v18 = os_log_type_enabled(v9, type);
  if (!v16)
  {
    if (v18)
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_proxy_config_enumerate_excluded_domains";
      _os_log_impl(&dword_182FBE000, v9, v17, "%{public}s called with null enumerator, no backtrace", buf, 0xCu);
    }
    goto LABEL_38;
  }
  if (v18)
  {
    *(_DWORD *)buf = 136446466;
    v26 = "nw_proxy_config_enumerate_excluded_domains";
    v27 = 2082;
    v28 = v16;
    _os_log_impl(&dword_182FBE000, v9, v17, "%{public}s called with null enumerator, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v16);
  if (v8)
    goto LABEL_40;
LABEL_5:

}

void sub_1837145B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

uint64_t __nw_proxy_config_enumerate_excluded_domains_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  uint64_t v5;
  const char *string_ptr;

  v4 = a3;
  if (object_getClass(v4) == (Class)MEMORY[0x1E0C81390])
  {
    v5 = *(_QWORD *)(a1 + 32);
    string_ptr = xpc_string_get_string_ptr(v4);
    (*(void (**)(uint64_t, const char *))(v5 + 16))(v5, string_ptr);
  }

  return 1;
}

void sub_183714634(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_proxy_config_add_preferred_domain(void *a1, const char *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  xpc_object_t v6;
  void *v7;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  void *v12;
  os_log_type_t v13;
  char *backtrace_string;
  os_log_type_t v15;
  _BOOL4 v16;
  char *v17;
  os_log_type_t v18;
  _BOOL4 v19;
  os_log_type_t v20;
  os_log_type_t v21;
  char v22;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v25;
  __int16 v26;
  char *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v25 = "nw_proxy_config_add_preferred_domain";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (!__nwlog_fault(v9, &type, &v22))
      goto LABEL_40;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_proxy_config_add_preferred_domain";
        _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v22)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      v16 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          v25 = "nw_proxy_config_add_preferred_domain";
          v26 = 2082;
          v27 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_40:
        if (!v9)
          goto LABEL_6;
LABEL_41:
        free(v9);
        goto LABEL_6;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_proxy_config_add_preferred_domain";
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v20 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_proxy_config_add_preferred_domain";
        _os_log_impl(&dword_182FBE000, v10, v20, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_39:

    goto LABEL_40;
  }
  if (a2)
  {
    v5 = (void *)v3[17];
    if (!v5)
    {
      v6 = xpc_array_create(0, 0);
      v7 = (void *)v4[17];
      v4[17] = v6;

      v5 = (void *)v4[17];
    }
    xpc_array_set_string(v5, 0xFFFFFFFFFFFFFFFFLL, a2);
    goto LABEL_6;
  }
  __nwlog_obj();
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v25 = "nw_proxy_config_add_preferred_domain";
  v9 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v22 = 0;
  if (!__nwlog_fault(v9, &type, &v22))
    goto LABEL_40;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v10 = objc_claimAutoreleasedReturnValue();
    v13 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      v25 = "nw_proxy_config_add_preferred_domain";
      _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null preferred_domain", buf, 0xCu);
    }
    goto LABEL_39;
  }
  if (!v22)
  {
    __nwlog_obj();
    v10 = objc_claimAutoreleasedReturnValue();
    v21 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      v25 = "nw_proxy_config_add_preferred_domain";
      _os_log_impl(&dword_182FBE000, v10, v21, "%{public}s called with null preferred_domain, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_39;
  }
  v17 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v10 = objc_claimAutoreleasedReturnValue();
  v18 = type;
  v19 = os_log_type_enabled(v10, type);
  if (!v17)
  {
    if (v19)
    {
      *(_DWORD *)buf = 136446210;
      v25 = "nw_proxy_config_add_preferred_domain";
      _os_log_impl(&dword_182FBE000, v10, v18, "%{public}s called with null preferred_domain, no backtrace", buf, 0xCu);
    }
    goto LABEL_39;
  }
  if (v19)
  {
    *(_DWORD *)buf = 136446466;
    v25 = "nw_proxy_config_add_preferred_domain";
    v26 = 2082;
    v27 = v17;
    _os_log_impl(&dword_182FBE000, v10, v18, "%{public}s called with null preferred_domain, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v17);
  if (v9)
    goto LABEL_41;
LABEL_6:

}

void sub_183714B10(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_proxy_config_clear_preferred_domains(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  char *backtrace_string;
  os_log_type_t v9;
  _BOOL4 v10;
  os_log_type_t v11;
  char v12;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = (void *)*((_QWORD *)v1 + 17);
    *((_QWORD *)v1 + 17) = 0;

    goto LABEL_3;
  }
  __nwlog_obj();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v15 = "nw_proxy_config_clear_preferred_domains";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v12 = 0;
  if (__nwlog_fault(v5, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_proxy_config_clear_preferred_domains";
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v12)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          v15 = "nw_proxy_config_clear_preferred_domains";
          v16 = 2082;
          v17 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_proxy_config_clear_preferred_domains";
        _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_proxy_config_clear_preferred_domains";
        _os_log_impl(&dword_182FBE000, v6, v11, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v5)
    free(v5);
LABEL_3:

}

void nw_proxy_config_enumerate_preferred_domains(void *a1, void *a2)
{
  _QWORD *v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  void *v11;
  os_log_type_t v12;
  char *backtrace_string;
  os_log_type_t v14;
  _BOOL4 v15;
  char *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  os_log_type_t v19;
  os_log_type_t v20;
  _QWORD applier[4];
  id v22;
  char v23;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  char *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v26 = "nw_proxy_config_enumerate_preferred_domains";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (!__nwlog_fault(v8, &type, &v23))
      goto LABEL_39;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_proxy_config_enumerate_preferred_domains";
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      v15 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          v26 = "nw_proxy_config_enumerate_preferred_domains";
          v27 = 2082;
          v28 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_39:
        if (!v8)
          goto LABEL_5;
LABEL_40:
        free(v8);
        goto LABEL_5;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_proxy_config_enumerate_preferred_domains";
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v19 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_proxy_config_enumerate_preferred_domains";
        _os_log_impl(&dword_182FBE000, v9, v19, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_38:

    goto LABEL_39;
  }
  if (v4)
  {
    v6 = (void *)v3[17];
    if (v6)
    {
      applier[0] = MEMORY[0x1E0C809B0];
      applier[1] = 3221225472;
      applier[2] = __nw_proxy_config_enumerate_preferred_domains_block_invoke;
      applier[3] = &unk_1E14A4E60;
      v22 = v4;
      xpc_array_apply(v6, applier);

    }
    goto LABEL_5;
  }
  __nwlog_obj();
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v26 = "nw_proxy_config_enumerate_preferred_domains";
  v8 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v23 = 0;
  if (!__nwlog_fault(v8, &type, &v23))
    goto LABEL_39;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v9 = objc_claimAutoreleasedReturnValue();
    v12 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_proxy_config_enumerate_preferred_domains";
      _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null enumerator", buf, 0xCu);
    }
    goto LABEL_38;
  }
  if (!v23)
  {
    __nwlog_obj();
    v9 = objc_claimAutoreleasedReturnValue();
    v20 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_proxy_config_enumerate_preferred_domains";
      _os_log_impl(&dword_182FBE000, v9, v20, "%{public}s called with null enumerator, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_38;
  }
  v16 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v9 = objc_claimAutoreleasedReturnValue();
  v17 = type;
  v18 = os_log_type_enabled(v9, type);
  if (!v16)
  {
    if (v18)
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_proxy_config_enumerate_preferred_domains";
      _os_log_impl(&dword_182FBE000, v9, v17, "%{public}s called with null enumerator, no backtrace", buf, 0xCu);
    }
    goto LABEL_38;
  }
  if (v18)
  {
    *(_DWORD *)buf = 136446466;
    v26 = "nw_proxy_config_enumerate_preferred_domains";
    v27 = 2082;
    v28 = v16;
    _os_log_impl(&dword_182FBE000, v9, v17, "%{public}s called with null enumerator, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v16);
  if (v8)
    goto LABEL_40;
LABEL_5:

}

void sub_1837152B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

uint64_t __nw_proxy_config_enumerate_preferred_domains_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  uint64_t v5;
  const char *string_ptr;

  v4 = a3;
  if (object_getClass(v4) == (Class)MEMORY[0x1E0C81390])
  {
    v5 = *(_QWORD *)(a1 + 32);
    string_ptr = xpc_string_get_string_ptr(v4);
    (*(void (**)(uint64_t, const char *))(v5 + 16))(v5, string_ptr);
  }

  return 1;
}

void sub_18371532C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_proxy_config_add_alternate_agent(void *a1, const unsigned __int8 *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  xpc_object_t v6;
  void *v7;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  char *backtrace_string;
  os_log_type_t v13;
  _BOOL4 v14;
  os_log_type_t v15;
  char v16;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    v5 = (void *)v3[18];
    if (!v5)
    {
      v6 = xpc_array_create(0, 0);
      v7 = (void *)v4[18];
      v4[18] = v6;

      v5 = (void *)v4[18];
    }
    xpc_array_set_uuid(v5, 0xFFFFFFFFFFFFFFFFLL, a2);
    goto LABEL_5;
  }
  __nwlog_obj();
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v19 = "nw_proxy_config_add_alternate_agent";
  v9 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v16 = 0;
  if (__nwlog_fault(v9, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_proxy_config_add_alternate_agent";
        _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      v14 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          v19 = "nw_proxy_config_add_alternate_agent";
          v20 = 2082;
          v21 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_proxy_config_add_alternate_agent";
        _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_proxy_config_add_alternate_agent";
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_22:
  if (v9)
    free(v9);
LABEL_5:

}

void sub_1837155F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_proxy_config_clear_alternate_agents(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  char *backtrace_string;
  os_log_type_t v9;
  _BOOL4 v10;
  os_log_type_t v11;
  char v12;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = (void *)*((_QWORD *)v1 + 18);
    *((_QWORD *)v1 + 18) = 0;

    goto LABEL_3;
  }
  __nwlog_obj();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v15 = "nw_proxy_config_clear_alternate_agents";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v12 = 0;
  if (__nwlog_fault(v5, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_proxy_config_clear_alternate_agents";
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v12)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          v15 = "nw_proxy_config_clear_alternate_agents";
          v16 = 2082;
          v17 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_proxy_config_clear_alternate_agents";
        _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_proxy_config_clear_alternate_agents";
        _os_log_impl(&dword_182FBE000, v6, v11, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v5)
    free(v5);
LABEL_3:

}

void nw_proxy_config_enumerate_alternate_agents(void *a1, void *a2)
{
  _QWORD *v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  void *v11;
  os_log_type_t v12;
  char *backtrace_string;
  os_log_type_t v14;
  _BOOL4 v15;
  char *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  os_log_type_t v19;
  os_log_type_t v20;
  _QWORD applier[4];
  id v22;
  char v23;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  char *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v26 = "nw_proxy_config_enumerate_alternate_agents";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (!__nwlog_fault(v8, &type, &v23))
      goto LABEL_39;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_proxy_config_enumerate_alternate_agents";
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      v15 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          v26 = "nw_proxy_config_enumerate_alternate_agents";
          v27 = 2082;
          v28 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_39:
        if (!v8)
          goto LABEL_5;
LABEL_40:
        free(v8);
        goto LABEL_5;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_proxy_config_enumerate_alternate_agents";
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v19 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_proxy_config_enumerate_alternate_agents";
        _os_log_impl(&dword_182FBE000, v9, v19, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_38:

    goto LABEL_39;
  }
  if (v4)
  {
    v6 = (void *)v3[18];
    if (v6)
    {
      applier[0] = MEMORY[0x1E0C809B0];
      applier[1] = 3221225472;
      applier[2] = __nw_proxy_config_enumerate_alternate_agents_block_invoke;
      applier[3] = &unk_1E14A4E60;
      v22 = v4;
      xpc_array_apply(v6, applier);

    }
    goto LABEL_5;
  }
  __nwlog_obj();
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v26 = "nw_proxy_config_enumerate_alternate_agents";
  v8 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v23 = 0;
  if (!__nwlog_fault(v8, &type, &v23))
    goto LABEL_39;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v9 = objc_claimAutoreleasedReturnValue();
    v12 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_proxy_config_enumerate_alternate_agents";
      _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null enumerator", buf, 0xCu);
    }
    goto LABEL_38;
  }
  if (!v23)
  {
    __nwlog_obj();
    v9 = objc_claimAutoreleasedReturnValue();
    v20 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_proxy_config_enumerate_alternate_agents";
      _os_log_impl(&dword_182FBE000, v9, v20, "%{public}s called with null enumerator, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_38;
  }
  v16 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v9 = objc_claimAutoreleasedReturnValue();
  v17 = type;
  v18 = os_log_type_enabled(v9, type);
  if (!v16)
  {
    if (v18)
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_proxy_config_enumerate_alternate_agents";
      _os_log_impl(&dword_182FBE000, v9, v17, "%{public}s called with null enumerator, no backtrace", buf, 0xCu);
    }
    goto LABEL_38;
  }
  if (v18)
  {
    *(_DWORD *)buf = 136446466;
    v26 = "nw_proxy_config_enumerate_alternate_agents";
    v27 = 2082;
    v28 = v16;
    _os_log_impl(&dword_182FBE000, v9, v17, "%{public}s called with null enumerator, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v16);
  if (v8)
    goto LABEL_40;
LABEL_5:

}

void sub_183715D94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

uint64_t __nw_proxy_config_enumerate_alternate_agents_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  uint64_t v5;
  const uint8_t *bytes;

  v4 = a3;
  if (object_getClass(v4) == (Class)MEMORY[0x1E0C813A0])
  {
    v5 = *(_QWORD *)(a1 + 32);
    bytes = xpc_uuid_get_bytes(v4);
    (*(void (**)(uint64_t, const uint8_t *))(v5 + 16))(v5, bytes);
  }

  return 1;
}

void sub_183715E10(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL nw_proxy_config_has_alternate_agents(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  _BOOL8 v4;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v17 = "nw_proxy_config_has_alternate_agents";
    v6 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v14 = 0;
    if (__nwlog_fault(v6, &type, &v14))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v7 = objc_claimAutoreleasedReturnValue();
        v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          v17 = "nw_proxy_config_has_alternate_agents";
          _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null config", buf, 0xCu);
        }
      }
      else if (v14)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v7 = objc_claimAutoreleasedReturnValue();
        v10 = type;
        v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446466;
            v17 = "nw_proxy_config_has_alternate_agents";
            v18 = 2082;
            v19 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_20;
        }
        if (v11)
        {
          *(_DWORD *)buf = 136446210;
          v17 = "nw_proxy_config_has_alternate_agents";
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null config, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v7 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          v17 = "nw_proxy_config_has_alternate_agents";
          _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_20:
    if (v6)
      free(v6);
    goto LABEL_22;
  }
  v3 = (void *)*((_QWORD *)v1 + 18);
  if (!v3)
  {
LABEL_22:
    v4 = 0;
    goto LABEL_23;
  }
  v4 = xpc_array_get_count(v3) != 0;
LABEL_23:

  return v4;
}

void sub_1837160C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_proxy_config_set_alternate_protocol_stack(void *a1, void *a2, void *a3, unsigned int a4)
{
  _QWORD *v7;
  id v8;
  id v9;
  void *v10;
  uint64_t v11;
  char *v12;
  const char *v13;
  void *v14;
  void *v15;
  xpc_object_t v16;
  void *v17;
  void *v18;
  char *v19;
  NSObject *v20;
  os_log_type_t v21;
  void *v22;
  os_log_type_t v23;
  char *backtrace_string;
  os_log_type_t v25;
  _BOOL4 v26;
  char *v27;
  os_log_type_t v28;
  _BOOL4 v29;
  void *v30;
  char *v31;
  NSObject *v32;
  os_log_type_t v33;
  os_log_type_t v34;
  os_log_type_t v35;
  char *v36;
  os_log_type_t v37;
  _BOOL4 v38;
  os_log_type_t v39;
  char v40;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v43;
  __int16 v44;
  char *v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v7 = a1;
  v8 = a2;
  v9 = a3;
  v10 = v9;
  if (!v7)
  {
    __nwlog_obj();
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v43 = "nw_proxy_config_set_alternate_protocol_stack";
    v19 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v40 = 0;
    if (!__nwlog_fault(v19, &type, &v40))
      goto LABEL_59;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v20 = objc_claimAutoreleasedReturnValue();
      v21 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        v43 = "nw_proxy_config_set_alternate_protocol_stack";
        _os_log_impl(&dword_182FBE000, v20, v21, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v40)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v20 = objc_claimAutoreleasedReturnValue();
      v25 = type;
      v26 = os_log_type_enabled(v20, type);
      if (backtrace_string)
      {
        if (v26)
        {
          *(_DWORD *)buf = 136446466;
          v43 = "nw_proxy_config_set_alternate_protocol_stack";
          v44 = 2082;
          v45 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v20, v25, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_59:
        if (!v19)
          goto LABEL_15;
LABEL_60:
        free(v19);
        goto LABEL_15;
      }
      if (v26)
      {
        *(_DWORD *)buf = 136446210;
        v43 = "nw_proxy_config_set_alternate_protocol_stack";
        _os_log_impl(&dword_182FBE000, v20, v25, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v20 = objc_claimAutoreleasedReturnValue();
      v34 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        v43 = "nw_proxy_config_set_alternate_protocol_stack";
        _os_log_impl(&dword_182FBE000, v20, v34, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_58:

    goto LABEL_59;
  }
  v11 = v7[1];
  if (v11)
  {
    if (v9)
    {
      v12 = (char *)v9;
      v13 = v12 + 8;

      v11 = v7[1];
      if (v8)
        goto LABEL_11;
    }
    else
    {
      v13 = "proxy-wildcard";
      if (v8)
        goto LABEL_11;
    }
    if (nw_proxy_config_default_transport(void)::onceToken[0] != -1)
      dispatch_once(nw_proxy_config_default_transport(void)::onceToken, &__block_literal_global_219);
    v14 = nw_dictionary_copy_value(v11, nw_proxy_config_default_transport(void)::default_transport_string);
    if (v14)
    {
      v8 = v14;
      v11 = v7[1];
LABEL_11:
      nw_dictionary_set_value(v11, v13, v8);
      if (a4 - 2 <= 2)
      {
        v15 = (void *)v7[2];
        if (!v15)
        {
          v16 = xpc_dictionary_create(0, 0, 0);
          v17 = (void *)v7[2];
          v7[2] = v16;

          v15 = (void *)v7[2];
        }
        xpc_dictionary_set_uint64(v15, v13, a4);
      }
      goto LABEL_15;
    }
    __nwlog_obj();
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v43 = "nw_proxy_config_set_alternate_protocol_stack";
    v31 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v40 = 0;
    if (!__nwlog_fault(v31, &type, &v40))
      goto LABEL_67;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v32 = objc_claimAutoreleasedReturnValue();
      v33 = type;
      if (os_log_type_enabled(v32, type))
      {
        *(_DWORD *)buf = 136446210;
        v43 = "nw_proxy_config_set_alternate_protocol_stack";
        _os_log_impl(&dword_182FBE000, v32, v33, "%{public}s called with null stack", buf, 0xCu);
      }
    }
    else if (v40)
    {
      v36 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v32 = objc_claimAutoreleasedReturnValue();
      v37 = type;
      v38 = os_log_type_enabled(v32, type);
      if (v36)
      {
        if (v38)
        {
          *(_DWORD *)buf = 136446466;
          v43 = "nw_proxy_config_set_alternate_protocol_stack";
          v44 = 2082;
          v45 = v36;
          _os_log_impl(&dword_182FBE000, v32, v37, "%{public}s called with null stack, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v36);
        goto LABEL_67;
      }
      if (v38)
      {
        *(_DWORD *)buf = 136446210;
        v43 = "nw_proxy_config_set_alternate_protocol_stack";
        _os_log_impl(&dword_182FBE000, v32, v37, "%{public}s called with null stack, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v32 = objc_claimAutoreleasedReturnValue();
      v39 = type;
      if (os_log_type_enabled(v32, type))
      {
        *(_DWORD *)buf = 136446210;
        v43 = "nw_proxy_config_set_alternate_protocol_stack";
        _os_log_impl(&dword_182FBE000, v32, v39, "%{public}s called with null stack, backtrace limit exceeded", buf, 0xCu);
      }
    }

LABEL_67:
    if (v31)
      free(v31);
    v8 = 0;
    goto LABEL_15;
  }
  __nwlog_obj();
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v43 = "nw_proxy_config_set_alternate_protocol_stack";
  v19 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v40 = 0;
  if (!__nwlog_fault(v19, &type, &v40))
    goto LABEL_59;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v20 = objc_claimAutoreleasedReturnValue();
    v23 = type;
    if (os_log_type_enabled(v20, type))
    {
      *(_DWORD *)buf = 136446210;
      v43 = "nw_proxy_config_set_alternate_protocol_stack";
      _os_log_impl(&dword_182FBE000, v20, v23, "%{public}s called with null config->stacks", buf, 0xCu);
    }
    goto LABEL_58;
  }
  if (!v40)
  {
    __nwlog_obj();
    v20 = objc_claimAutoreleasedReturnValue();
    v35 = type;
    if (os_log_type_enabled(v20, type))
    {
      *(_DWORD *)buf = 136446210;
      v43 = "nw_proxy_config_set_alternate_protocol_stack";
      _os_log_impl(&dword_182FBE000, v20, v35, "%{public}s called with null config->stacks, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_58;
  }
  v27 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v20 = objc_claimAutoreleasedReturnValue();
  v28 = type;
  v29 = os_log_type_enabled(v20, type);
  if (!v27)
  {
    if (v29)
    {
      *(_DWORD *)buf = 136446210;
      v43 = "nw_proxy_config_set_alternate_protocol_stack";
      _os_log_impl(&dword_182FBE000, v20, v28, "%{public}s called with null config->stacks, no backtrace", buf, 0xCu);
    }
    goto LABEL_58;
  }
  if (v29)
  {
    *(_DWORD *)buf = 136446466;
    v43 = "nw_proxy_config_set_alternate_protocol_stack";
    v44 = 2082;
    v45 = v27;
    _os_log_impl(&dword_182FBE000, v20, v28, "%{public}s called with null config->stacks, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v27);
  if (v19)
    goto LABEL_60;
LABEL_15:

}

void sub_183716860(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void nw_proxy_config_set_listener_protocol_stack(void *a1, void *a2, void *a3, unsigned int a4)
{
  uint64_t *v7;
  id v8;
  id v9;
  void *v10;
  char *v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  xpc_object_t v15;
  void *v16;
  char *v17;
  void *v18;
  const char *v19;
  NSObject *v20;
  os_log_type_t v21;
  void *v22;
  os_log_type_t v23;
  void *v24;
  os_log_type_t v25;
  char *backtrace_string;
  os_log_type_t v27;
  _BOOL4 v28;
  char *v29;
  os_log_type_t v30;
  _BOOL4 v31;
  os_log_type_t v32;
  _BOOL4 v33;
  os_log_type_t v34;
  os_log_type_t v35;
  os_log_type_t v36;
  char v37;
  os_log_type_t type;
  _BYTE key[12];
  __int16 v40;
  char *v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v7 = a1;
  v8 = a2;
  v9 = a3;
  v10 = v9;
  if (!v7)
  {
    __nwlog_obj();
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)key = 136446210;
    *(_QWORD *)&key[4] = "nw_proxy_config_set_listener_protocol_stack";
    v19 = (const char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v37 = 0;
    if (!__nwlog_fault(v19, &type, &v37))
      goto LABEL_64;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v20 = objc_claimAutoreleasedReturnValue();
      v21 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)key = 136446210;
        *(_QWORD *)&key[4] = "nw_proxy_config_set_listener_protocol_stack";
        _os_log_impl(&dword_182FBE000, v20, v21, "%{public}s called with null config", key, 0xCu);
      }
    }
    else if (v37)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v20 = objc_claimAutoreleasedReturnValue();
      v27 = type;
      v28 = os_log_type_enabled(v20, type);
      if (backtrace_string)
      {
        if (v28)
        {
          *(_DWORD *)key = 136446466;
          *(_QWORD *)&key[4] = "nw_proxy_config_set_listener_protocol_stack";
          v40 = 2082;
          v41 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v20, v27, "%{public}s called with null config, dumping backtrace:%{public}s", key, 0x16u);
        }

        free(backtrace_string);
LABEL_64:
        if (!v19)
          goto LABEL_14;
        goto LABEL_65;
      }
      if (v28)
      {
        *(_DWORD *)key = 136446210;
        *(_QWORD *)&key[4] = "nw_proxy_config_set_listener_protocol_stack";
        _os_log_impl(&dword_182FBE000, v20, v27, "%{public}s called with null config, no backtrace", key, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v20 = objc_claimAutoreleasedReturnValue();
      v34 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)key = 136446210;
        *(_QWORD *)&key[4] = "nw_proxy_config_set_listener_protocol_stack";
        _os_log_impl(&dword_182FBE000, v20, v34, "%{public}s called with null config, backtrace limit exceeded", key, 0xCu);
      }
    }
LABEL_63:

    goto LABEL_64;
  }
  if (!v9)
  {
    __nwlog_obj();
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)key = 136446210;
    *(_QWORD *)&key[4] = "nw_proxy_config_set_listener_protocol_stack";
    v19 = (const char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v37 = 0;
    if (!__nwlog_fault(v19, &type, &v37))
      goto LABEL_64;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v20 = objc_claimAutoreleasedReturnValue();
      v23 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)key = 136446210;
        *(_QWORD *)&key[4] = "nw_proxy_config_set_listener_protocol_stack";
        _os_log_impl(&dword_182FBE000, v20, v23, "%{public}s called with null transport_protocol", key, 0xCu);
      }
      goto LABEL_63;
    }
    if (!v37)
    {
      __nwlog_obj();
      v20 = objc_claimAutoreleasedReturnValue();
      v35 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)key = 136446210;
        *(_QWORD *)&key[4] = "nw_proxy_config_set_listener_protocol_stack";
        _os_log_impl(&dword_182FBE000, v20, v35, "%{public}s called with null transport_protocol, backtrace limit exceeded", key, 0xCu);
      }
      goto LABEL_63;
    }
    v29 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v20 = objc_claimAutoreleasedReturnValue();
    v30 = type;
    v31 = os_log_type_enabled(v20, type);
    if (!v29)
    {
      if (v31)
      {
        *(_DWORD *)key = 136446210;
        *(_QWORD *)&key[4] = "nw_proxy_config_set_listener_protocol_stack";
        _os_log_impl(&dword_182FBE000, v20, v30, "%{public}s called with null transport_protocol, no backtrace", key, 0xCu);
      }
      goto LABEL_63;
    }
    if (v31)
    {
      *(_DWORD *)key = 136446466;
      *(_QWORD *)&key[4] = "nw_proxy_config_set_listener_protocol_stack";
      v40 = 2082;
      v41 = v29;
      _os_log_impl(&dword_182FBE000, v20, v30, "%{public}s called with null transport_protocol, dumping backtrace:%{public}s", key, 0x16u);
    }
    goto LABEL_44;
  }
  if (!v7[1])
  {
    __nwlog_obj();
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)key = 136446210;
    *(_QWORD *)&key[4] = "nw_proxy_config_set_listener_protocol_stack";
    v19 = (const char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v37 = 0;
    if (!__nwlog_fault(v19, &type, &v37))
      goto LABEL_64;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v20 = objc_claimAutoreleasedReturnValue();
      v25 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)key = 136446210;
        *(_QWORD *)&key[4] = "nw_proxy_config_set_listener_protocol_stack";
        _os_log_impl(&dword_182FBE000, v20, v25, "%{public}s called with null config->stacks", key, 0xCu);
      }
      goto LABEL_63;
    }
    if (!v37)
    {
      __nwlog_obj();
      v20 = objc_claimAutoreleasedReturnValue();
      v36 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)key = 136446210;
        *(_QWORD *)&key[4] = "nw_proxy_config_set_listener_protocol_stack";
        _os_log_impl(&dword_182FBE000, v20, v36, "%{public}s called with null config->stacks, backtrace limit exceeded", key, 0xCu);
      }
      goto LABEL_63;
    }
    v29 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v20 = objc_claimAutoreleasedReturnValue();
    v32 = type;
    v33 = os_log_type_enabled(v20, type);
    if (!v29)
    {
      if (v33)
      {
        *(_DWORD *)key = 136446210;
        *(_QWORD *)&key[4] = "nw_proxy_config_set_listener_protocol_stack";
        _os_log_impl(&dword_182FBE000, v20, v32, "%{public}s called with null config->stacks, no backtrace", key, 0xCu);
      }
      goto LABEL_63;
    }
    if (v33)
    {
      *(_DWORD *)key = 136446466;
      *(_QWORD *)&key[4] = "nw_proxy_config_set_listener_protocol_stack";
      v40 = 2082;
      v41 = v29;
      _os_log_impl(&dword_182FBE000, v20, v32, "%{public}s called with null config->stacks, dumping backtrace:%{public}s", key, 0x16u);
    }
LABEL_44:

    free(v29);
    if (!v19)
      goto LABEL_14;
LABEL_65:
    v17 = (char *)v19;
LABEL_13:
    free(v17);
    goto LABEL_14;
  }
  v11 = (char *)v9;
  v12 = v11 + 8;

  *(_QWORD *)key = 0;
  asprintf((char **)key, "%s%s", "LISTEN-", v12);
  if (v8)
    goto LABEL_8;
  v13 = v7[1];
  if (nw_proxy_config_default_transport(void)::onceToken[0] != -1)
    dispatch_once(nw_proxy_config_default_transport(void)::onceToken, &__block_literal_global_219);
  v8 = nw_dictionary_copy_value(v13, nw_proxy_config_default_transport(void)::default_transport_string);
  if (v8)
  {
LABEL_8:
    nw_dictionary_set_value(v7[1], *(const char **)key, v8);
    if (a4 - 2 <= 2)
    {
      v14 = (void *)v7[2];
      if (!v14)
      {
        v15 = xpc_dictionary_create(0, 0, 0);
        v16 = (void *)v7[2];
        v7[2] = (uint64_t)v15;

        v14 = (void *)v7[2];
      }
      xpc_dictionary_set_uint64(v14, *(const char **)key, a4);
    }
  }
  v17 = *(char **)key;
  if (*(_QWORD *)key)
    goto LABEL_13;
LABEL_14:

}

void sub_18371701C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void nw_proxy_config_set_fallback_proxy_agent(void *a1, _OWORD *a2)
{
  char *v3;
  void *v4;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  void *v9;
  os_log_type_t v10;
  char *backtrace_string;
  os_log_type_t v12;
  _BOOL4 v13;
  char *v14;
  os_log_type_t v15;
  _BOOL4 v16;
  os_log_type_t v17;
  os_log_type_t v18;
  char v19;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  char *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v22 = "nw_proxy_config_set_fallback_proxy_agent";
    v6 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v19 = 0;
    if (!__nwlog_fault(v6, &type, &v19))
      goto LABEL_38;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_proxy_config_set_fallback_proxy_agent";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      v13 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          v22 = "nw_proxy_config_set_fallback_proxy_agent";
          v23 = 2082;
          v24 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v6)
          goto LABEL_4;
LABEL_39:
        free(v6);
        goto LABEL_4;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_proxy_config_set_fallback_proxy_agent";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_proxy_config_set_fallback_proxy_agent";
        _os_log_impl(&dword_182FBE000, v7, v17, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_37:

    goto LABEL_38;
  }
  if (a2)
  {
    *(_OWORD *)(v3 + 72) = *a2;
    goto LABEL_4;
  }
  __nwlog_obj();
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v22 = "nw_proxy_config_set_fallback_proxy_agent";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v19 = 0;
  if (!__nwlog_fault(v6, &type, &v19))
    goto LABEL_38;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v7 = objc_claimAutoreleasedReturnValue();
    v10 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446210;
      v22 = "nw_proxy_config_set_fallback_proxy_agent";
      _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null fallback_proxy_agent_uuid", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (!v19)
  {
    __nwlog_obj();
    v7 = objc_claimAutoreleasedReturnValue();
    v18 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446210;
      v22 = "nw_proxy_config_set_fallback_proxy_agent";
      _os_log_impl(&dword_182FBE000, v7, v18, "%{public}s called with null fallback_proxy_agent_uuid, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_37;
  }
  v14 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v7 = objc_claimAutoreleasedReturnValue();
  v15 = type;
  v16 = os_log_type_enabled(v7, type);
  if (!v14)
  {
    if (v16)
    {
      *(_DWORD *)buf = 136446210;
      v22 = "nw_proxy_config_set_fallback_proxy_agent";
      _os_log_impl(&dword_182FBE000, v7, v15, "%{public}s called with null fallback_proxy_agent_uuid, no backtrace", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (v16)
  {
    *(_DWORD *)buf = 136446466;
    v22 = "nw_proxy_config_set_fallback_proxy_agent";
    v23 = 2082;
    v24 = v14;
    _os_log_impl(&dword_182FBE000, v7, v15, "%{public}s called with null fallback_proxy_agent_uuid, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v14);
  if (v6)
    goto LABEL_39;
LABEL_4:

}

void nw_proxy_config_copy_fallback_proxy_agent(void *a1, _OWORD *a2)
{
  char *v3;
  void *v4;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  void *v9;
  os_log_type_t v10;
  char *backtrace_string;
  os_log_type_t v12;
  _BOOL4 v13;
  char *v14;
  os_log_type_t v15;
  _BOOL4 v16;
  os_log_type_t v17;
  os_log_type_t v18;
  char v19;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  char *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v22 = "nw_proxy_config_copy_fallback_proxy_agent";
    v6 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v19 = 0;
    if (!__nwlog_fault(v6, &type, &v19))
      goto LABEL_38;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_proxy_config_copy_fallback_proxy_agent";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      v13 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          v22 = "nw_proxy_config_copy_fallback_proxy_agent";
          v23 = 2082;
          v24 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v6)
          goto LABEL_4;
LABEL_39:
        free(v6);
        goto LABEL_4;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_proxy_config_copy_fallback_proxy_agent";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_proxy_config_copy_fallback_proxy_agent";
        _os_log_impl(&dword_182FBE000, v7, v17, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_37:

    goto LABEL_38;
  }
  if (a2)
  {
    *a2 = *(_OWORD *)(v3 + 72);
    goto LABEL_4;
  }
  __nwlog_obj();
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v22 = "nw_proxy_config_copy_fallback_proxy_agent";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v19 = 0;
  if (!__nwlog_fault(v6, &type, &v19))
    goto LABEL_38;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v7 = objc_claimAutoreleasedReturnValue();
    v10 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446210;
      v22 = "nw_proxy_config_copy_fallback_proxy_agent";
      _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null out_fallback_proxy_agent_uuid", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (!v19)
  {
    __nwlog_obj();
    v7 = objc_claimAutoreleasedReturnValue();
    v18 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446210;
      v22 = "nw_proxy_config_copy_fallback_proxy_agent";
      _os_log_impl(&dword_182FBE000, v7, v18, "%{public}s called with null out_fallback_proxy_agent_uuid, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_37;
  }
  v14 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v7 = objc_claimAutoreleasedReturnValue();
  v15 = type;
  v16 = os_log_type_enabled(v7, type);
  if (!v14)
  {
    if (v16)
    {
      *(_DWORD *)buf = 136446210;
      v22 = "nw_proxy_config_copy_fallback_proxy_agent";
      _os_log_impl(&dword_182FBE000, v7, v15, "%{public}s called with null out_fallback_proxy_agent_uuid, no backtrace", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (v16)
  {
    *(_DWORD *)buf = 136446466;
    v22 = "nw_proxy_config_copy_fallback_proxy_agent";
    v23 = 2082;
    v24 = v14;
    _os_log_impl(&dword_182FBE000, v7, v15, "%{public}s called with null out_fallback_proxy_agent_uuid, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v14);
  if (v6)
    goto LABEL_39;
LABEL_4:

}

BOOL nw_proxy_config_has_fallback_proxy_agent(void *a1)
{
  const unsigned __int8 *v1;
  unsigned __int8 *v2;
  _BOOL8 v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (unsigned __int8 *)v1;
  if (v1)
  {
    v3 = uuid_is_null(v1 + 72) == 0;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_proxy_config_has_fallback_proxy_agent";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_proxy_config_has_fallback_proxy_agent";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_proxy_config_has_fallback_proxy_agent";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_proxy_config_has_fallback_proxy_agent";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_proxy_config_has_fallback_proxy_agent";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

void sub_183717C28(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_proxy_config_set_fallback_proxy_config(void *a1, void *a2)
{
  id *v3;
  id v4;
  void *v5;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  void *v10;
  os_log_type_t v11;
  char *backtrace_string;
  os_log_type_t v13;
  _BOOL4 v14;
  char *v15;
  os_log_type_t v16;
  _BOOL4 v17;
  os_log_type_t v18;
  os_log_type_t v19;
  char v20;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v23;
  __int16 v24;
  char *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v23 = "nw_proxy_config_set_fallback_proxy_config";
    v7 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v20 = 0;
    if (!__nwlog_fault(v7, &type, &v20))
      goto LABEL_38;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_proxy_config_set_fallback_proxy_config";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v20)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      v14 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          v23 = "nw_proxy_config_set_fallback_proxy_config";
          v24 = 2082;
          v25 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v7)
          goto LABEL_4;
LABEL_39:
        free(v7);
        goto LABEL_4;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_proxy_config_set_fallback_proxy_config";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v18 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_proxy_config_set_fallback_proxy_config";
        _os_log_impl(&dword_182FBE000, v8, v18, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_37:

    goto LABEL_38;
  }
  if (v4)
  {
    objc_storeStrong(v3 + 11, a2);
    goto LABEL_4;
  }
  __nwlog_obj();
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v23 = "nw_proxy_config_set_fallback_proxy_config";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v20 = 0;
  if (!__nwlog_fault(v7, &type, &v20))
    goto LABEL_38;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v8 = objc_claimAutoreleasedReturnValue();
    v11 = type;
    if (os_log_type_enabled(v8, type))
    {
      *(_DWORD *)buf = 136446210;
      v23 = "nw_proxy_config_set_fallback_proxy_config";
      _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null fallback_proxy_config", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (!v20)
  {
    __nwlog_obj();
    v8 = objc_claimAutoreleasedReturnValue();
    v19 = type;
    if (os_log_type_enabled(v8, type))
    {
      *(_DWORD *)buf = 136446210;
      v23 = "nw_proxy_config_set_fallback_proxy_config";
      _os_log_impl(&dword_182FBE000, v8, v19, "%{public}s called with null fallback_proxy_config, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_37;
  }
  v15 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v8 = objc_claimAutoreleasedReturnValue();
  v16 = type;
  v17 = os_log_type_enabled(v8, type);
  if (!v15)
  {
    if (v17)
    {
      *(_DWORD *)buf = 136446210;
      v23 = "nw_proxy_config_set_fallback_proxy_config";
      _os_log_impl(&dword_182FBE000, v8, v16, "%{public}s called with null fallback_proxy_config, no backtrace", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (v17)
  {
    *(_DWORD *)buf = 136446466;
    v23 = "nw_proxy_config_set_fallback_proxy_config";
    v24 = 2082;
    v25 = v15;
    _os_log_impl(&dword_182FBE000, v8, v16, "%{public}s called with null fallback_proxy_config, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v15);
  if (v7)
    goto LABEL_39;
LABEL_4:

}

id nw_proxy_config_copy_fallback_proxy_config(void *a1)
{
  id *v1;
  id *v2;
  id v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = v1[11];
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_proxy_config_copy_fallback_proxy_config";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_proxy_config_copy_fallback_proxy_config";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_proxy_config_copy_fallback_proxy_config";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_proxy_config_copy_fallback_proxy_config";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_proxy_config_copy_fallback_proxy_config";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

BOOL nw_proxy_config_has_fallback_proxy_config(void *a1)
{
  id v1;
  void *v2;
  _BOOL8 v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = *((_QWORD *)v1 + 11) != 0;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_proxy_config_has_fallback_proxy_config";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_proxy_config_has_fallback_proxy_config";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_proxy_config_has_fallback_proxy_config";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_proxy_config_has_fallback_proxy_config";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_proxy_config_has_fallback_proxy_config";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

BOOL __nw_proxy_config_supports_listeners_block_invoke(uint64_t a1, const char *a2)
{
  int v3;

  v3 = strncmp("LISTEN-", a2, 7uLL);
  if (!v3)
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
  return v3 != 0;
}

id *nw_proxy_config_copy_parameters_to_proxy(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  nw_parameters_t v3;
  nw_parameters_t v4;
  id *v5;
  id v6;
  uint64_t v7;
  NSObject *v8;
  id *v9;
  id v10;
  NSObject *v11;
  Class isa;
  objc_class *v13;
  id *v14;
  objc_class *v15;
  id *v16;
  void *v17;
  char *v18;
  NSObject *v19;
  os_log_type_t v20;
  void *v21;
  char *v22;
  NSObject *v23;
  os_log_type_t v24;
  void *v25;
  char *v26;
  NSObject *v27;
  os_log_type_t v28;
  void *v29;
  char *v30;
  NSObject *v31;
  os_log_type_t v32;
  char *backtrace_string;
  os_log_type_t v34;
  _BOOL4 v35;
  char *v36;
  os_log_type_t v37;
  _BOOL4 v38;
  char *v39;
  os_log_type_t v40;
  _BOOL4 v41;
  char *v42;
  os_log_type_t v43;
  _BOOL4 v44;
  os_log_type_t v45;
  os_log_type_t v47;
  os_log_type_t v48;
  os_log_type_t v49;
  _QWORD iterate_block[4];
  _QWORD *v51;
  id *v52;
  id v53;
  char v54;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v57;
  __int16 v58;
  char *v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v57 = "nw_proxy_config_copy_parameters_to_proxy";
    v18 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v54 = 0;
    if (__nwlog_fault(v18, &type, &v54))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v19 = objc_claimAutoreleasedReturnValue();
        v20 = type;
        if (os_log_type_enabled(v19, type))
        {
          *(_DWORD *)buf = 136446210;
          v57 = "nw_proxy_config_copy_parameters_to_proxy";
          _os_log_impl(&dword_182FBE000, v19, v20, "%{public}s called with null config", buf, 0xCu);
        }
      }
      else if (v54)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v19 = objc_claimAutoreleasedReturnValue();
        v34 = type;
        v35 = os_log_type_enabled(v19, type);
        if (backtrace_string)
        {
          if (v35)
          {
            *(_DWORD *)buf = 136446466;
            v57 = "nw_proxy_config_copy_parameters_to_proxy";
            v58 = 2082;
            v59 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v19, v34, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_60;
        }
        if (v35)
        {
          *(_DWORD *)buf = 136446210;
          v57 = "nw_proxy_config_copy_parameters_to_proxy";
          _os_log_impl(&dword_182FBE000, v19, v34, "%{public}s called with null config, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v19 = objc_claimAutoreleasedReturnValue();
        v45 = type;
        if (os_log_type_enabled(v19, type))
        {
          *(_DWORD *)buf = 136446210;
          v57 = "nw_proxy_config_copy_parameters_to_proxy";
          _os_log_impl(&dword_182FBE000, v19, v45, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_60:
    if (v18)
      free(v18);
    goto LABEL_62;
  }
  if (!v1[1])
  {
LABEL_62:
    v16 = 0;
    goto LABEL_63;
  }
  v3 = nw_parameters_create();
  v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v57 = "nw_proxy_config_copy_parameters_to_proxy";
    v22 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v54 = 0;
    if (__nwlog_fault(v22, &type, &v54))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v23 = objc_claimAutoreleasedReturnValue();
        v24 = type;
        if (os_log_type_enabled(v23, type))
        {
          *(_DWORD *)buf = 136446210;
          v57 = "nw_proxy_config_copy_parameters_to_proxy";
          _os_log_impl(&dword_182FBE000, v23, v24, "%{public}s called with null parameters", buf, 0xCu);
        }
      }
      else if (v54)
      {
        v36 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v23 = objc_claimAutoreleasedReturnValue();
        v37 = type;
        v38 = os_log_type_enabled(v23, type);
        if (v36)
        {
          if (v38)
          {
            *(_DWORD *)buf = 136446466;
            v57 = "nw_proxy_config_copy_parameters_to_proxy";
            v58 = 2082;
            v59 = v36;
            _os_log_impl(&dword_182FBE000, v23, v37, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v36);
          goto LABEL_76;
        }
        if (v38)
        {
          *(_DWORD *)buf = 136446210;
          v57 = "nw_proxy_config_copy_parameters_to_proxy";
          _os_log_impl(&dword_182FBE000, v23, v37, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v23 = objc_claimAutoreleasedReturnValue();
        v47 = type;
        if (os_log_type_enabled(v23, type))
        {
          *(_DWORD *)buf = 136446210;
          v57 = "nw_proxy_config_copy_parameters_to_proxy";
          _os_log_impl(&dword_182FBE000, v23, v47, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_76:
    if (v22)
      free(v22);
    v16 = 0;
    goto LABEL_13;
  }
  v5 = v3;
  v6 = v5[19];

  if (!v6)
  {
    __nwlog_obj();
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v57 = "nw_proxy_config_copy_parameters_to_proxy";
    v26 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v54 = 0;
    if (__nwlog_fault(v26, &type, &v54))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v27 = objc_claimAutoreleasedReturnValue();
        v28 = type;
        if (os_log_type_enabled(v27, type))
        {
          *(_DWORD *)buf = 136446210;
          v57 = "nw_proxy_config_copy_parameters_to_proxy";
          _os_log_impl(&dword_182FBE000, v27, v28, "%{public}s called with null new_stack", buf, 0xCu);
        }
      }
      else if (v54)
      {
        v39 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v27 = objc_claimAutoreleasedReturnValue();
        v40 = type;
        v41 = os_log_type_enabled(v27, type);
        if (v39)
        {
          if (v41)
          {
            *(_DWORD *)buf = 136446466;
            v57 = "nw_proxy_config_copy_parameters_to_proxy";
            v58 = 2082;
            v59 = v39;
            _os_log_impl(&dword_182FBE000, v27, v40, "%{public}s called with null new_stack, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v39);
          goto LABEL_82;
        }
        if (v41)
        {
          *(_DWORD *)buf = 136446210;
          v57 = "nw_proxy_config_copy_parameters_to_proxy";
          _os_log_impl(&dword_182FBE000, v27, v40, "%{public}s called with null new_stack, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v27 = objc_claimAutoreleasedReturnValue();
        v48 = type;
        if (os_log_type_enabled(v27, type))
        {
          *(_DWORD *)buf = 136446210;
          v57 = "nw_proxy_config_copy_parameters_to_proxy";
          _os_log_impl(&dword_182FBE000, v27, v48, "%{public}s called with null new_stack, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_82:
    if (v26)
      free(v26);
    v16 = 0;
    goto LABEL_12;
  }
  v7 = v2[1];
  if (nw_proxy_config_default_transport(void)::onceToken[0] != -1)
    dispatch_once(nw_proxy_config_default_transport(void)::onceToken, &__block_literal_global_219);
  v8 = nw_dictionary_copy_value(v7, nw_proxy_config_default_transport(void)::default_transport_string);
  if (!v8)
  {
    __nwlog_obj();
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v57 = "nw_proxy_config_copy_parameters_to_proxy";
    v30 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v54 = 0;
    if (__nwlog_fault(v30, &type, &v54))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v31 = objc_claimAutoreleasedReturnValue();
        v32 = type;
        if (os_log_type_enabled(v31, type))
        {
          *(_DWORD *)buf = 136446210;
          v57 = "nw_proxy_config_copy_parameters_to_proxy";
          _os_log_impl(&dword_182FBE000, v31, v32, "%{public}s called with null proxy_stack", buf, 0xCu);
        }
      }
      else if (v54)
      {
        v42 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v31 = objc_claimAutoreleasedReturnValue();
        v43 = type;
        v44 = os_log_type_enabled(v31, type);
        if (v42)
        {
          if (v44)
          {
            *(_DWORD *)buf = 136446466;
            v57 = "nw_proxy_config_copy_parameters_to_proxy";
            v58 = 2082;
            v59 = v42;
            _os_log_impl(&dword_182FBE000, v31, v43, "%{public}s called with null proxy_stack, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v42);
          goto LABEL_88;
        }
        if (v44)
        {
          *(_DWORD *)buf = 136446210;
          v57 = "nw_proxy_config_copy_parameters_to_proxy";
          _os_log_impl(&dword_182FBE000, v31, v43, "%{public}s called with null proxy_stack, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v31 = objc_claimAutoreleasedReturnValue();
        v49 = type;
        if (os_log_type_enabled(v31, type))
        {
          *(_DWORD *)buf = 136446210;
          v57 = "nw_proxy_config_copy_parameters_to_proxy";
          _os_log_impl(&dword_182FBE000, v31, v49, "%{public}s called with null proxy_stack, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_88:
    if (v30)
      free(v30);
    v16 = 0;
    goto LABEL_11;
  }
  iterate_block[0] = MEMORY[0x1E0C809B0];
  iterate_block[1] = 3221225472;
  iterate_block[2] = __nw_proxy_config_copy_parameters_to_proxy_block_invoke;
  iterate_block[3] = &unk_1E14A10F0;
  v51 = v2;
  v9 = v5;
  v52 = v9;
  v10 = v6;
  v53 = v10;
  nw_protocol_stack_iterate_application_protocols(v8, iterate_block);
  v11 = v8;
  isa = v11[3].isa;
  v13 = isa;

  if (v13)
  {
    v14 = (id *)v10;
    v15 = v13;
    objc_storeStrong(v14 + 3, isa);

  }
  v16 = v9;

LABEL_11:
LABEL_12:

LABEL_13:
LABEL_63:

  return v16;
}

void sub_183719060(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void __nw_proxy_config_copy_parameters_to_proxy_block_invoke(uint64_t a1, void *a2)
{
  NWConcrete_nw_protocol_options *options_from_serializable;
  NWConcrete_nw_protocol_options *v4;
  NSObject *v5;
  NWConcrete_nw_protocol_options *v6;
  NWConcrete_nw_protocol_options *v7;

  v6 = a2;
  if (nw_protocol_options_is_serializable_tls(v6))
  {
    options_from_serializable = nw_tls_create_options_from_serializable(v6, *(_QWORD *)(a1 + 32) + 56, 0);

    v4 = options_from_serializable;
  }
  else
  {
    v4 = v6;
  }
  v7 = v4;
  if (nw_protocol_options_is_tls(v4)
    && nw_parameters_get_should_trust_invalid_certificates(*(void **)(a1 + 40)))
  {
    v5 = v7;
    sec_protocol_options_set_peer_authentication_required(v5, 0);

  }
  nw_protocol_stack_append_application_protocol(*(void **)(a1 + 48), v7);

}

void sub_183719114(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id nw_proxy_config_copy_authentication_credential(void *a1)
{
  id *v1;
  id *v2;
  id v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = v1[13];
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_proxy_config_copy_authentication_credential";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_proxy_config_copy_authentication_credential";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_proxy_config_copy_authentication_credential";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_proxy_config_copy_authentication_credential";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_proxy_config_copy_authentication_credential";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_proxy_config_get_multipath_service(void *a1)
{
  unsigned int *v1;
  void *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = v1[40];
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_proxy_config_get_multipath_service";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_proxy_config_get_multipath_service";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_proxy_config_get_multipath_service";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_proxy_config_get_multipath_service";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_proxy_config_get_multipath_service";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

void nw_proxy_config_set_multipath_service(void *a1, int a2)
{
  id v3;
  void *v4;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    *((_DWORD *)v3 + 40) = a2;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_proxy_config_set_multipath_service";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_proxy_config_set_multipath_service";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_proxy_config_set_multipath_service";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_proxy_config_set_multipath_service";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_proxy_config_set_multipath_service";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
LABEL_3:

}

uint64_t nw_proxy_config_get_force_multipath(void *a1)
{
  unsigned __int8 *v1;
  void *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = (v1[171] >> 1) & 1;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_proxy_config_get_force_multipath";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_proxy_config_get_force_multipath";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_proxy_config_get_force_multipath";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_proxy_config_get_force_multipath";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_proxy_config_get_force_multipath";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

void nw_proxy_config_set_force_multipath(void *a1, int a2)
{
  id v3;
  void *v4;
  char v5;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    if (a2)
      v5 = 2;
    else
      v5 = 0;
    *((_BYTE *)v3 + 171) = *((_BYTE *)v3 + 171) & 0xFD | v5;
    goto LABEL_6;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_proxy_config_set_force_multipath";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_proxy_config_set_force_multipath";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_proxy_config_set_force_multipath";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_proxy_config_set_force_multipath";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_proxy_config_set_force_multipath";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_23:
  if (v7)
    free(v7);
LABEL_6:

}

uint64_t nw_proxy_config_get_apply_tfo(void *a1)
{
  unsigned __int8 *v1;
  void *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = (v1[171] >> 2) & 1;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_proxy_config_get_apply_tfo";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_proxy_config_get_apply_tfo";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_proxy_config_get_apply_tfo";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_proxy_config_get_apply_tfo";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_proxy_config_get_apply_tfo";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

void nw_proxy_config_set_apply_tfo(void *a1, int a2)
{
  id v3;
  void *v4;
  char v5;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    if (a2)
      v5 = 4;
    else
      v5 = 0;
    *((_BYTE *)v3 + 171) = *((_BYTE *)v3 + 171) & 0xFB | v5;
    goto LABEL_6;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_proxy_config_set_apply_tfo";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_proxy_config_set_apply_tfo";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_proxy_config_set_apply_tfo";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_proxy_config_set_apply_tfo";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_proxy_config_set_apply_tfo";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_23:
  if (v7)
    free(v7);
LABEL_6:

}

uint64_t nw_proxy_config_get_force_tfo(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = *((_BYTE *)v1 + 171) & 1;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_proxy_config_get_force_tfo";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_proxy_config_get_force_tfo";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_proxy_config_get_force_tfo";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_proxy_config_get_force_tfo";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_proxy_config_get_force_tfo";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

void nw_proxy_config_set_force_tfo(void *a1, char a2)
{
  id v3;
  void *v4;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    *((_BYTE *)v3 + 171) = *((_BYTE *)v3 + 171) & 0xFE | a2;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_proxy_config_set_force_tfo";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_proxy_config_set_force_tfo";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_proxy_config_set_force_tfo";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_proxy_config_set_force_tfo";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_proxy_config_set_force_tfo";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
LABEL_3:

}

uint64_t nw_proxy_config_get_disable_tfo_cookie(void *a1)
{
  unsigned __int8 *v1;
  void *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = (v1[171] >> 3) & 1;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_proxy_config_get_disable_tfo_cookie";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_proxy_config_get_disable_tfo_cookie";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_proxy_config_get_disable_tfo_cookie";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_proxy_config_get_disable_tfo_cookie";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_proxy_config_get_disable_tfo_cookie";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

void nw_proxy_config_set_disable_tfo_cookie(void *a1, int a2)
{
  id v3;
  void *v4;
  char v5;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    if (a2)
      v5 = 8;
    else
      v5 = 0;
    *((_BYTE *)v3 + 171) = *((_BYTE *)v3 + 171) & 0xF7 | v5;
    goto LABEL_6;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_proxy_config_set_disable_tfo_cookie";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_proxy_config_set_disable_tfo_cookie";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_proxy_config_set_disable_tfo_cookie";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_proxy_config_set_disable_tfo_cookie";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_proxy_config_set_disable_tfo_cookie";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_23:
  if (v7)
    free(v7);
LABEL_6:

}

id nw_proxy_config_copy_pac_script(void *a1)
{
  id *v1;
  id *v2;
  id v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  void *v9;
  os_log_type_t v10;
  char *backtrace_string;
  os_log_type_t v12;
  _BOOL4 v13;
  os_log_type_t v14;
  _BOOL4 v15;
  os_log_type_t v16;
  os_log_type_t v17;
  char v18;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v21;
  __int16 v22;
  char *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    if (*((_DWORD *)v1 + 38) == 3)
    {
      v3 = v1[14];
      goto LABEL_4;
    }
    __nwlog_obj();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v21 = "nw_proxy_config_copy_pac_script";
    v6 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v18 = 0;
    if (__nwlog_fault(v6, &type, &v18))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v7 = objc_claimAutoreleasedReturnValue();
        v10 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          v21 = "nw_proxy_config_copy_pac_script";
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null (config->mode == nw_proxy_mode_pac_script)", buf, 0xCu);
        }
LABEL_36:

        goto LABEL_37;
      }
      if (!v18)
      {
        __nwlog_obj();
        v7 = objc_claimAutoreleasedReturnValue();
        v17 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          v21 = "nw_proxy_config_copy_pac_script";
          _os_log_impl(&dword_182FBE000, v7, v17, "%{public}s called with null (config->mode == nw_proxy_mode_pac_script), backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      v15 = os_log_type_enabled(v7, type);
      if (!backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446210;
          v21 = "nw_proxy_config_copy_pac_script";
          _os_log_impl(&dword_182FBE000, v7, v14, "%{public}s called with null (config->mode == nw_proxy_mode_pac_script), no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446466;
        v21 = "nw_proxy_config_copy_pac_script";
        v22 = 2082;
        v23 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v7, v14, "%{public}s called with null (config->mode == nw_proxy_mode_pac_script), dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_24;
    }
  }
  else
  {
    __nwlog_obj();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v21 = "nw_proxy_config_copy_pac_script";
    v6 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v18 = 0;
    if (__nwlog_fault(v6, &type, &v18))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v7 = objc_claimAutoreleasedReturnValue();
        v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          v21 = "nw_proxy_config_copy_pac_script";
          _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null config", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (!v18)
      {
        __nwlog_obj();
        v7 = objc_claimAutoreleasedReturnValue();
        v16 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          v21 = "nw_proxy_config_copy_pac_script";
          _os_log_impl(&dword_182FBE000, v7, v16, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      v13 = os_log_type_enabled(v7, type);
      if (!backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446210;
          v21 = "nw_proxy_config_copy_pac_script";
          _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null config, no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446466;
        v21 = "nw_proxy_config_copy_pac_script";
        v22 = 2082;
        v23 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_24:

      free(backtrace_string);
    }
  }
LABEL_37:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_4:

  return v3;
}

id nw_proxy_configs_create_with_schema_array(void *a1)
{
  id v1;
  void *v2;
  _BOOL8 v3;
  id v4;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  void *v10;
  os_log_type_t v11;
  char *backtrace_string;
  os_log_type_t v13;
  _BOOL4 v14;
  os_log_type_t v15;
  _BOOL4 v16;
  os_log_type_t v17;
  os_log_type_t v18;
  _QWORD applier[4];
  id v20;
  char v21;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v24;
  __int16 v25;
  char *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    if (object_getClass(v1) == (Class)MEMORY[0x1E0C812C8])
    {
      v3 = nw_array_create();
      applier[0] = MEMORY[0x1E0C809B0];
      applier[1] = 3221225472;
      applier[2] = __nw_proxy_configs_create_with_schema_array_block_invoke;
      applier[3] = &unk_1E14AC908;
      v4 = (id)v3;
      v20 = v4;
      xpc_array_apply(v2, applier);

      goto LABEL_4;
    }
    __nwlog_obj();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v24 = "nw_proxy_configs_create_with_schema_array";
    v7 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v21 = 0;
    if (__nwlog_fault(v7, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v8 = objc_claimAutoreleasedReturnValue();
        v11 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          v24 = "nw_proxy_configs_create_with_schema_array";
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null (xpc_get_type(array) == (&_xpc_type_array))", buf, 0xCu);
        }
LABEL_36:

        goto LABEL_37;
      }
      if (!v21)
      {
        __nwlog_obj();
        v8 = objc_claimAutoreleasedReturnValue();
        v18 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          v24 = "nw_proxy_configs_create_with_schema_array";
          _os_log_impl(&dword_182FBE000, v8, v18, "%{public}s called with null (xpc_get_type(array) == (&_xpc_type_array)), backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      v16 = os_log_type_enabled(v8, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          v24 = "nw_proxy_configs_create_with_schema_array";
          _os_log_impl(&dword_182FBE000, v8, v15, "%{public}s called with null (xpc_get_type(array) == (&_xpc_type_array)), no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446466;
        v24 = "nw_proxy_configs_create_with_schema_array";
        v25 = 2082;
        v26 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v8, v15, "%{public}s called with null (xpc_get_type(array) == (&_xpc_type_array)), dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_24;
    }
  }
  else
  {
    __nwlog_obj();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v24 = "nw_proxy_configs_create_with_schema_array";
    v7 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v21 = 0;
    if (__nwlog_fault(v7, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v8 = objc_claimAutoreleasedReturnValue();
        v9 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          v24 = "nw_proxy_configs_create_with_schema_array";
          _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null array", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (!v21)
      {
        __nwlog_obj();
        v8 = objc_claimAutoreleasedReturnValue();
        v17 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          v24 = "nw_proxy_configs_create_with_schema_array";
          _os_log_impl(&dword_182FBE000, v8, v17, "%{public}s called with null array, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      v14 = os_log_type_enabled(v8, type);
      if (!backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446210;
          v24 = "nw_proxy_configs_create_with_schema_array";
          _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null array, no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446466;
        v24 = "nw_proxy_configs_create_with_schema_array";
        v25 = 2082;
        v26 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null array, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_24:

      free(backtrace_string);
    }
  }
LABEL_37:
  if (v7)
    free(v7);
  v4 = 0;
LABEL_4:

  return v4;
}

void sub_18371B790(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

uint64_t __nw_proxy_configs_create_with_schema_array_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  void *v5;
  const char *string;
  const char *v7;
  NWConcrete_nw_proxy_config *pac_script;
  NWConcrete_nw_proxy_config *pac_url;
  nw_endpoint_t url;
  const char *v11;
  _BOOL8 int64;
  _BOOL8 host_with_numeric_port;
  id v14;
  NWConcrete_nw_protocol_options *options;
  NWConcrete_nw_proxy_config *v16;
  const char *v17;
  _BOOL8 v18;
  unsigned __int16 v19;
  NWConcrete_nw_protocol_stack *v20;
  id v21;
  NWConcrete_nw_protocol_options *v22;
  void *v23;
  NWConcrete_nw_protocol_options *v24;
  int v25;
  _BOOL8 v26;
  NWConcrete_nw_proxy_config *v27;
  const char *v28;
  OS_nw_authentication_credential *v29;
  OS_nw_authentication_credential *credential;
  const char *v31;
  const char *v32;
  _BOOL8 v33;
  const char *v34;
  void *v35;
  const char *string_ptr;
  NSObject *v37;
  NSObject *v38;
  nw_protocol_options_t v39;
  NWConcrete_nw_proxy_config *v40;
  void *v41;
  nw_protocol_options_t v42;
  NWConcrete_nw_protocol_options *v43;
  NWConcrete_nw_proxy_config *v44;
  NWConcrete_nw_protocol_stack *v45;
  void *v46;
  NWConcrete_nw_protocol_options *v47;
  nw_protocol_options_t v48;
  nw_protocol_definition_t v49;
  NSObject *v50;
  NSObject *v51;
  nw_protocol_options_t v52;
  nw_protocol_definition_t v53;
  char *v54;
  const char *v55;
  OS_nw_authentication_credential *v56;
  OS_nw_authentication_credential *v57;
  const char *v58;
  void *v59;
  uint64_t v60;
  void *v62;
  char *v63;
  NSObject *v64;
  os_log_type_t v65;
  void *v66;
  os_log_type_t v67;
  char *backtrace_string;
  os_log_type_t v69;
  _BOOL4 v70;
  char *v71;
  os_log_type_t v72;
  _BOOL4 v73;
  os_log_type_t v74;
  os_log_type_t v75;
  NWConcrete_nw_protocol_options *v76;
  _QWORD applier[4];
  id v78;
  id v79;
  char v80;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v83;
  __int16 v84;
  char *v85;
  uint64_t v86;

  v86 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = v4;
  if (!v4)
  {
    __nwlog_obj();
    v62 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v83 = "nw_proxy_configs_create_with_schema_array_block_invoke";
    v63 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v80 = 0;
    if (!__nwlog_fault(v63, &type, &v80))
      goto LABEL_122;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v64 = objc_claimAutoreleasedReturnValue();
      v65 = type;
      if (os_log_type_enabled(v64, type))
      {
        *(_DWORD *)buf = 136446210;
        v83 = "nw_proxy_configs_create_with_schema_array_block_invoke";
        _os_log_impl(&dword_182FBE000, v64, v65, "%{public}s called with null dictionary", buf, 0xCu);
      }
    }
    else if (v80)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v64 = objc_claimAutoreleasedReturnValue();
      v69 = type;
      v70 = os_log_type_enabled(v64, type);
      if (backtrace_string)
      {
        if (v70)
        {
          *(_DWORD *)buf = 136446466;
          v83 = "nw_proxy_configs_create_with_schema_array_block_invoke";
          v84 = 2082;
          v85 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v64, v69, "%{public}s called with null dictionary, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        if (!v63)
          goto LABEL_87;
        goto LABEL_123;
      }
      if (v70)
      {
        *(_DWORD *)buf = 136446210;
        v83 = "nw_proxy_configs_create_with_schema_array_block_invoke";
        _os_log_impl(&dword_182FBE000, v64, v69, "%{public}s called with null dictionary, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v64 = objc_claimAutoreleasedReturnValue();
      v74 = type;
      if (os_log_type_enabled(v64, type))
      {
        *(_DWORD *)buf = 136446210;
        v83 = "nw_proxy_configs_create_with_schema_array_block_invoke";
        _os_log_impl(&dword_182FBE000, v64, v74, "%{public}s called with null dictionary, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_121;
  }
  if (object_getClass(v4) != (Class)MEMORY[0x1E0C812F8])
  {
    __nwlog_obj();
    v66 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v83 = "nw_proxy_configs_create_with_schema_array_block_invoke";
    v63 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v80 = 0;
    if (!__nwlog_fault(v63, &type, &v80))
      goto LABEL_122;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v64 = objc_claimAutoreleasedReturnValue();
      v67 = type;
      if (os_log_type_enabled(v64, type))
      {
        *(_DWORD *)buf = 136446210;
        v83 = "nw_proxy_configs_create_with_schema_array_block_invoke";
        _os_log_impl(&dword_182FBE000, v64, v67, "%{public}s called with null (xpc_get_type(dictionary) == (&_xpc_type_dictionary))", buf, 0xCu);
      }
    }
    else if (v80)
    {
      v71 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v64 = objc_claimAutoreleasedReturnValue();
      v72 = type;
      v73 = os_log_type_enabled(v64, type);
      if (v71)
      {
        if (v73)
        {
          *(_DWORD *)buf = 136446466;
          v83 = "nw_proxy_configs_create_with_schema_array_block_invoke";
          v84 = 2082;
          v85 = v71;
          _os_log_impl(&dword_182FBE000, v64, v72, "%{public}s called with null (xpc_get_type(dictionary) == (&_xpc_type_dictionary)), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v71);
LABEL_122:
        if (!v63)
          goto LABEL_87;
LABEL_123:
        free(v63);
        goto LABEL_87;
      }
      if (v73)
      {
        *(_DWORD *)buf = 136446210;
        v83 = "nw_proxy_configs_create_with_schema_array_block_invoke";
        _os_log_impl(&dword_182FBE000, v64, v72, "%{public}s called with null (xpc_get_type(dictionary) == (&_xpc_type_dictionary)), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v64 = objc_claimAutoreleasedReturnValue();
      v75 = type;
      if (os_log_type_enabled(v64, type))
      {
        *(_DWORD *)buf = 136446210;
        v83 = "nw_proxy_configs_create_with_schema_array_block_invoke";
        _os_log_impl(&dword_182FBE000, v64, v75, "%{public}s called with null (xpc_get_type(dictionary) == (&_xpc_type_dictionary)), backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_121:

    goto LABEL_122;
  }
  if (nw_proxy_config_get_int64(v5, (uint64_t)CFSTR("ProxyAutoConfigEnable"), 1))
  {
    string = nw_proxy_config_get_string(v5);
    v7 = nw_proxy_config_get_string(v5);
    if (string)
    {
      pac_script = nw_proxy_config_create_pac_script(string);
      pac_url = pac_script;
      if (pac_script)
      {
        nw_proxy_config_apply_common_keys(pac_script, v5, 0);
LABEL_10:
        nw_array_append(*(_QWORD *)(a1 + 32), pac_url);

        goto LABEL_11;
      }
      goto LABEL_87;
    }
    if (v7)
    {
      url = nw_endpoint_create_url(v7);
      pac_url = nw_proxy_config_create_pac_url(url);

      if (pac_url)
      {
        nw_proxy_config_apply_common_keys(pac_url, v5, 0);
        goto LABEL_10;
      }
LABEL_87:
      v60 = 0;
      goto LABEL_88;
    }
  }
LABEL_11:
  if (nw_proxy_config_get_int64(v5, (uint64_t)CFSTR("HTTPEnable"), 1))
  {
    v11 = nw_proxy_config_get_string(v5);
    int64 = nw_proxy_config_get_int64(v5, (uint64_t)CFSTR("HTTPPort"), 80);
    if (v11)
    {
      if (int64)
      {
        host_with_numeric_port = nw_endpoint_create_host_with_numeric_port(v11, int64);
        if (nw_proxy_copy_http_connect_definition::onceToken != -1)
          dispatch_once(&nw_proxy_copy_http_connect_definition::onceToken, &__block_literal_global_92);
        v14 = (id)nw_proxy_copy_http_connect_definition::proxy_definition;
        options = nw_proxy_create_options(v14);
        v16 = nw_proxy_config_create((void *)host_with_numeric_port, options);

        if (!v16)
          goto LABEL_87;
        v16->type = 2001;
        nw_proxy_config_apply_common_keys(v16, v5, 1);
        nw_array_append(*(_QWORD *)(a1 + 32), v16);

      }
    }
  }
  if (nw_proxy_config_get_int64(v5, (uint64_t)CFSTR("HTTPSEnable"), 1))
  {
    v17 = nw_proxy_config_get_string(v5);
    v18 = nw_proxy_config_get_int64(v5, (uint64_t)CFSTR("HTTPSPort"), 443);
    if (v17)
    {
      v19 = v18;
      if (v18)
      {
        v20 = objc_alloc_init(NWConcrete_nw_protocol_stack);
        if (nw_proxy_copy_http_connect_definition::onceToken != -1)
          dispatch_once(&nw_proxy_copy_http_connect_definition::onceToken, &__block_literal_global_92);
        v21 = (id)nw_proxy_copy_http_connect_definition::proxy_definition;
        v22 = nw_proxy_create_options(v21);
        nw_protocol_stack_append_application_protocol(v20, v22);

        if (nw_proxy_config_get_int64(v5, (uint64_t)CFSTR("HTTPSOverTLSEnable"), 0))
        {
          v23 = (void *)nw_protocol_boringssl_copy_definition();
          v24 = nw_protocol_create_options(v23);

          nw_protocol_stack_append_application_protocol(v20, v24);
          v25 = 4002;
        }
        else
        {
          v25 = 4001;
        }
        v26 = nw_endpoint_create_host_with_numeric_port(v17, v19);
        v27 = nw_proxy_config_create_with_stack((void *)v26, v20);

        if (!v27)
          goto LABEL_86;
        v27->type = v25;
        nw_proxy_config_apply_common_keys(v27, v5, 1);
        if (nw_proxy_config_get_int64(v5, (uint64_t)CFSTR("HTTPSTransparentEnable"), 0)
          || nw_proxy_config_get_int64(v5, (uint64_t)CFSTR("HTTPSOverTLSEnable"), 0))
        {
          *((_BYTE *)v27 + 171) |= 0x10u;
        }
        v28 = nw_proxy_config_get_string(v5);
        if (v28 || (v28 = nw_proxy_config_get_string(v5)) != 0 || (v28 = nw_proxy_config_get_string(v5)) != 0)
        {
          v29 = (OS_nw_authentication_credential *)-[NWConcrete_nw_authentication_credential initWithType:]([NWConcrete_nw_authentication_credential alloc], 1);
          credential = v27->credential;
          v27->credential = v29;

          nw_authentication_credential_set_username(v27->credential, v28);
          v31 = nw_proxy_config_get_string(v5);
          if (v31 || (v31 = nw_proxy_config_get_string(v5)) != 0 || (v31 = nw_proxy_config_get_string(v5)) != 0)
            nw_authentication_credential_set_password(v27->credential, v31);
        }
        nw_array_append(*(_QWORD *)(a1 + 32), v27);

      }
    }
  }
  if (nw_proxy_config_get_int64(v5, (uint64_t)CFSTR("SOCKSEnable"), 1))
  {
    v32 = nw_proxy_config_get_string(v5);
    v33 = nw_proxy_config_get_int64(v5, (uint64_t)CFSTR("SOCKSPort"), 0);
    if (v32)
    {
      if (v33)
      {
        v20 = (NWConcrete_nw_protocol_stack *)nw_endpoint_create_host_with_numeric_port(v32, v33);
        v34 = nw_proxy_config_get_string(v5);
        if (!v34)
          goto LABEL_45;
        v35 = (void *)_CFXPCCreateXPCObjectFromCFObject();
        string_ptr = xpc_string_get_string_ptr(v35);
        if (!strcmp(v34, string_ptr))
        {
          if (nw_protocol_socksv4_copy_definition::onceToken != -1)
            dispatch_once(&nw_protocol_socksv4_copy_definition::onceToken, &__block_literal_global_44100);
          if (nw_protocol_socksv4_copy_definition::definition)
            v38 = os_retain((void *)nw_protocol_socksv4_copy_definition::definition);
          else
            v38 = 0;
          v42 = nw_framer_create_options(v38);
          v40 = nw_proxy_config_create(v20, v42);

          if (v40)
          {
            v40->type = 3001;
LABEL_72:

            goto LABEL_73;
          }
        }
        else
        {
          if (strcmp(v34, "shoes"))
          {

LABEL_45:
            if (nw_protocol_socksv5_copy_definition::onceToken != -1)
              dispatch_once(&nw_protocol_socksv5_copy_definition::onceToken, &__block_literal_global_83487);
            if (nw_protocol_socksv5_copy_definition::definition)
              v37 = os_retain((void *)nw_protocol_socksv5_copy_definition::definition);
            else
              v37 = 0;
            v39 = nw_framer_create_options(v37);
            v40 = nw_proxy_config_create(v20, v39);

            if (v40)
            {
              v40->type = 3002;
LABEL_73:
              nw_proxy_config_apply_common_keys(v40, v5, 1);
              *((_BYTE *)v40 + 170) |= 8u;
              v55 = nw_proxy_config_get_string(v5);
              if (v55 || (v55 = nw_proxy_config_get_string(v5)) != 0)
              {
                v56 = (OS_nw_authentication_credential *)-[NWConcrete_nw_authentication_credential initWithType:]([NWConcrete_nw_authentication_credential alloc], 1);
                v57 = v40->credential;
                v40->credential = v56;

                nw_authentication_credential_set_username(v40->credential, v55);
                v58 = nw_proxy_config_get_string(v5);
                if (v58 || (v58 = nw_proxy_config_get_string(v5)) != 0)
                  nw_authentication_credential_set_password(v40->credential, v58);
              }
              nw_array_append(*(_QWORD *)(a1 + 32), v40);

              goto LABEL_79;
            }
            goto LABEL_86;
          }
          if (nw_protocol_shoes_get_definition(void)::onceToken != -1)
            dispatch_once(&nw_protocol_shoes_get_definition(void)::onceToken, &__block_literal_global_30);
          if (nw_protocol_shoes_get_definition(void)::proxy_definition)
            v41 = os_retain((void *)nw_protocol_shoes_get_definition(void)::proxy_definition);
          else
            v41 = 0;
          v43 = nw_protocol_create_options(v41);

          v44 = nw_proxy_config_create(v20, v43);
          v40 = v44;
          if (v44)
          {
            v44->type = 3003;
            *((_BYTE *)v44 + 170) |= 0x10u;
            *((_BYTE *)v44 + 172) |= 2u;
            v76 = v43;
            v45 = objc_alloc_init(NWConcrete_nw_protocol_stack);
            v46 = nw_protocol_shoes_copy_definition();
            v47 = nw_protocol_create_options(v46);

            if (nw_proxy_config_get_int64(v5, (uint64_t)CFSTR("SHOESUDPAssociate"), 0) >= 1
              && _os_feature_enabled_impl())
            {
              nw_protocol_shoes_parameters_set_udp_associate_supported(v47);
              v48 = nw_udp_create_options();
              v49 = nw_protocol_copy_quic_definition();
              nw_proxy_config_set_alternate_protocol_stack(v40, v45, v49, 3u);
              v50 = v48;
            }
            else
            {
              v51 = nw_shoes_copy_udp_framer_definition();
              v52 = nw_framer_create_options(v51);
              nw_protocol_stack_append_application_protocol(v45, v52);

              v50 = nw_tcp_create_options();
              nw_tcp_options_set_no_delay(v50, 1);
              v49 = v51;
            }

            nw_protocol_shoes_parameters_set_udp(v47);
            nw_protocol_stack_append_application_protocol(v45, v47);
            nw_protocol_stack_set_transport_protocol(&v45->super, v50);
            v53 = nw_protocol_copy_udp_definition();
            nw_proxy_config_set_alternate_protocol_stack(v40, v45, v53, 4u);

            v54 = (char *)nw_proxy_config_get_string(v5);
            if (v54)
            {
              nw_protocol_shoes_parameters_set_fixed_bundle_id(v76, v54);
              *((_BYTE *)v40 + 170) |= 0x40u;
            }

            goto LABEL_72;
          }

        }
LABEL_86:

        goto LABEL_87;
      }
    }
  }
LABEL_79:
  if (nw_proxy_config_get_int64(v5, (uint64_t)CFSTR("TransportConverterEnable"), 0))
  {
    nw_proxy_config_get_array(v5);
    v59 = (void *)objc_claimAutoreleasedReturnValue();
    if (v59)
    {
      applier[0] = MEMORY[0x1E0C809B0];
      applier[1] = 3221225472;
      applier[2] = __nw_proxy_configs_create_with_schema_array_block_invoke_90;
      applier[3] = &unk_1E14A8E10;
      v78 = v5;
      v79 = *(id *)(a1 + 32);
      xpc_array_apply(v59, applier);

    }
  }
  v60 = 1;
LABEL_88:

  return v60;
}

void sub_18371C518(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

BOOL nw_proxy_config_get_int64(void *a1, uint64_t a2, _BOOL8 a3)
{
  id v4;
  void *v5;
  void *v6;
  const char *string_ptr;
  void *v8;
  void *v9;
  id v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  char *backtrace_string;
  os_log_type_t v15;
  _BOOL4 v16;
  uint64_t value;
  os_log_type_t v18;
  void *v20;
  os_log_type_t v21;
  char *v22;
  os_log_type_t v23;
  _BOOL4 v24;
  os_log_type_t v25;
  char v26;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v29;
  __int16 v30;
  char *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v4 = a1;
  v5 = (void *)_CFXPCCreateXPCObjectFromCFObject();
  v6 = v5;
  if (!v5)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v10 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v29 = "nw_proxy_config_get_int64";
    v11 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v26 = 0;
    if (!__nwlog_fault(v11, &type, &v26))
      goto LABEL_29;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v12 = (id)gLogObj;
      v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_proxy_config_get_int64";
        _os_log_impl(&dword_182FBE000, v12, v13, "%{public}s _CFXPCCreateXPCObjectFromCFObject failed", buf, 0xCu);
      }
    }
    else if (v26)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v12 = (id)gLogObj;
      v15 = type;
      v16 = os_log_type_enabled(v12, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          v29 = "nw_proxy_config_get_int64";
          v30 = 2082;
          v31 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v12, v15, "%{public}s _CFXPCCreateXPCObjectFromCFObject failed, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        if (!v11)
          goto LABEL_31;
        goto LABEL_30;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_proxy_config_get_int64";
        _os_log_impl(&dword_182FBE000, v12, v15, "%{public}s _CFXPCCreateXPCObjectFromCFObject failed, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v12 = (id)gLogObj;
      v18 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_proxy_config_get_int64";
        _os_log_impl(&dword_182FBE000, v12, v18, "%{public}s _CFXPCCreateXPCObjectFromCFObject failed, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_28;
  }
  string_ptr = xpc_string_get_string_ptr(v5);
  if (!string_ptr)
  {
    __nwlog_obj();
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v29 = "nw_proxy_config_get_int64";
    v11 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v26 = 0;
    if (__nwlog_fault(v11, &type, &v26))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v12 = objc_claimAutoreleasedReturnValue();
        v21 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          v29 = "nw_proxy_config_get_int64";
          _os_log_impl(&dword_182FBE000, v12, v21, "%{public}s called with null key_string", buf, 0xCu);
        }
LABEL_28:

        goto LABEL_29;
      }
      if (!v26)
      {
        __nwlog_obj();
        v12 = objc_claimAutoreleasedReturnValue();
        v25 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          v29 = "nw_proxy_config_get_int64";
          _os_log_impl(&dword_182FBE000, v12, v25, "%{public}s called with null key_string, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_28;
      }
      v22 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v23 = type;
      v24 = os_log_type_enabled(v12, type);
      if (!v22)
      {
        if (v24)
        {
          *(_DWORD *)buf = 136446210;
          v29 = "nw_proxy_config_get_int64";
          _os_log_impl(&dword_182FBE000, v12, v23, "%{public}s called with null key_string, no backtrace", buf, 0xCu);
        }
        goto LABEL_28;
      }
      if (v24)
      {
        *(_DWORD *)buf = 136446466;
        v29 = "nw_proxy_config_get_int64";
        v30 = 2082;
        v31 = v22;
        _os_log_impl(&dword_182FBE000, v12, v23, "%{public}s called with null key_string, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(v22);
    }
LABEL_29:
    if (!v11)
    {
LABEL_31:
      a3 = 0;
      goto LABEL_32;
    }
LABEL_30:
    free(v11);
    goto LABEL_31;
  }
  xpc_dictionary_get_value(v4, string_ptr);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = v8;
  if (v8)
  {
    if (object_getClass(v8) == (Class)MEMORY[0x1E0C81328])
    {
      value = xpc_int64_get_value(v9);
    }
    else
    {
      if (object_getClass(v9) != (Class)MEMORY[0x1E0C81398])
      {
        if (object_getClass(v9) == (Class)MEMORY[0x1E0C812D0])
          a3 = xpc_BOOL_get_value(v9);
        goto LABEL_22;
      }
      value = xpc_uint64_get_value(v9);
    }
    a3 = value;
  }
LABEL_22:

LABEL_32:
  return a3;
}

void sub_18371CC58(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

const char *nw_proxy_config_get_string(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  const char *string_ptr;
  const char *string;
  id v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  void *v15;
  os_log_type_t v16;
  char *v17;
  os_log_type_t v18;
  _BOOL4 v19;
  os_log_type_t v20;
  char v21;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v24;
  __int16 v25;
  char *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (void *)_CFXPCCreateXPCObjectFromCFObject();
  v3 = v2;
  if (!v2)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v6 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v24 = "nw_proxy_config_get_string";
    v7 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v21 = 0;
    if (!__nwlog_fault(v7, &type, &v21))
      goto LABEL_21;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v8 = (id)gLogObj;
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v24 = "nw_proxy_config_get_string";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s _CFXPCCreateXPCObjectFromCFObject failed", buf, 0xCu);
      }
    }
    else if (v21)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v8 = (id)gLogObj;
      v11 = type;
      v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          v24 = "nw_proxy_config_get_string";
          v25 = 2082;
          v26 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s _CFXPCCreateXPCObjectFromCFObject failed, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        if (!v7)
          goto LABEL_23;
        goto LABEL_22;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v24 = "nw_proxy_config_get_string";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s _CFXPCCreateXPCObjectFromCFObject failed, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v8 = (id)gLogObj;
      v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v24 = "nw_proxy_config_get_string";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s _CFXPCCreateXPCObjectFromCFObject failed, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_20;
  }
  string_ptr = xpc_string_get_string_ptr(v2);
  if (!string_ptr)
  {
    __nwlog_obj();
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v24 = "nw_proxy_config_get_string";
    v7 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v21 = 0;
    if (__nwlog_fault(v7, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v8 = objc_claimAutoreleasedReturnValue();
        v16 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          v24 = "nw_proxy_config_get_string";
          _os_log_impl(&dword_182FBE000, v8, v16, "%{public}s called with null key_string", buf, 0xCu);
        }
LABEL_20:

        goto LABEL_21;
      }
      if (!v21)
      {
        __nwlog_obj();
        v8 = objc_claimAutoreleasedReturnValue();
        v20 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          v24 = "nw_proxy_config_get_string";
          _os_log_impl(&dword_182FBE000, v8, v20, "%{public}s called with null key_string, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_20;
      }
      v17 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v18 = type;
      v19 = os_log_type_enabled(v8, type);
      if (!v17)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446210;
          v24 = "nw_proxy_config_get_string";
          _os_log_impl(&dword_182FBE000, v8, v18, "%{public}s called with null key_string, no backtrace", buf, 0xCu);
        }
        goto LABEL_20;
      }
      if (v19)
      {
        *(_DWORD *)buf = 136446466;
        v24 = "nw_proxy_config_get_string";
        v25 = 2082;
        v26 = v17;
        _os_log_impl(&dword_182FBE000, v8, v18, "%{public}s called with null key_string, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(v17);
    }
LABEL_21:
    if (!v7)
    {
LABEL_23:
      string = 0;
      goto LABEL_24;
    }
LABEL_22:
    free(v7);
    goto LABEL_23;
  }
  string = xpc_dictionary_get_string(v1, string_ptr);
LABEL_24:

  return string;
}

void sub_18371D1A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_proxy_config_apply_common_keys(void *a1, void *a2, int a3)
{
  unsigned __int8 *v5;
  id v6;
  void *v7;
  const char *string;
  uint64_t v9;
  void *v10;
  void *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  char *backtrace_string;
  os_log_type_t v16;
  _BOOL4 v17;
  os_log_type_t v18;
  char v19;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  char *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = v6;
  if (v6)
  {
    string = xpc_dictionary_get_string(v6, "Identifier");
    if (string)
      uuid_parse(string, v5 + 56);
    nw_proxy_config_get_array(v7);
    v9 = objc_claimAutoreleasedReturnValue();
    v10 = (void *)*((_QWORD *)v5 + 16);
    *((_QWORD *)v5 + 16) = v9;

    v5[170] = v5[170] & 0xF7 | (8 * !nw_proxy_config_get_int64(v7, (uint64_t)CFSTR("FallBackAllowed"), a3 != 1));
    v5[170] = v5[170] & 0x7F | (nw_proxy_config_get_int64(v7, (uint64_t)CFSTR("ExcludeSimpleHostnames"), 0) << 7);
    goto LABEL_5;
  }
  __nwlog_obj();
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v22 = "nw_proxy_config_apply_common_keys";
  v12 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v19 = 0;
  if (__nwlog_fault(v12, &type, &v19))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_proxy_config_apply_common_keys";
        _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s called with null dictionary", buf, 0xCu);
      }
    }
    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      v17 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          v22 = "nw_proxy_config_apply_common_keys";
          v23 = 2082;
          v24 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v13, v16, "%{public}s called with null dictionary, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_proxy_config_apply_common_keys";
        _os_log_impl(&dword_182FBE000, v13, v16, "%{public}s called with null dictionary, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v18 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_proxy_config_apply_common_keys";
        _os_log_impl(&dword_182FBE000, v13, v18, "%{public}s called with null dictionary, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_22:
  if (v12)
    free(v12);
LABEL_5:

}

void sub_18371D4EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id nw_proxy_config_get_array(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  const char *string_ptr;
  void *v5;
  void *v6;
  id v7;
  id v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  char *backtrace_string;
  os_log_type_t v13;
  _BOOL4 v14;
  os_log_type_t v15;
  void *v17;
  os_log_type_t v18;
  char *v19;
  os_log_type_t v20;
  _BOOL4 v21;
  os_log_type_t v22;
  char v23;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  char *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (void *)_CFXPCCreateXPCObjectFromCFObject();
  v3 = v2;
  if (!v2)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v8 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v26 = "nw_proxy_config_get_array";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (!__nwlog_fault(v9, &type, &v23))
      goto LABEL_25;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v10 = (id)gLogObj;
      v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_proxy_config_get_array";
        _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s _CFXPCCreateXPCObjectFromCFObject failed", buf, 0xCu);
      }
    }
    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v10 = (id)gLogObj;
      v13 = type;
      v14 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          v26 = "nw_proxy_config_get_array";
          v27 = 2082;
          v28 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s _CFXPCCreateXPCObjectFromCFObject failed, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        if (!v9)
          goto LABEL_27;
        goto LABEL_26;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_proxy_config_get_array";
        _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s _CFXPCCreateXPCObjectFromCFObject failed, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v10 = (id)gLogObj;
      v15 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_proxy_config_get_array";
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s _CFXPCCreateXPCObjectFromCFObject failed, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_24;
  }
  string_ptr = xpc_string_get_string_ptr(v2);
  if (!string_ptr)
  {
    __nwlog_obj();
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v26 = "nw_proxy_config_get_array";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (__nwlog_fault(v9, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v18 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          v26 = "nw_proxy_config_get_array";
          _os_log_impl(&dword_182FBE000, v10, v18, "%{public}s called with null key_string", buf, 0xCu);
        }
LABEL_24:

        goto LABEL_25;
      }
      if (!v23)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v22 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          v26 = "nw_proxy_config_get_array";
          _os_log_impl(&dword_182FBE000, v10, v22, "%{public}s called with null key_string, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_24;
      }
      v19 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v20 = type;
      v21 = os_log_type_enabled(v10, type);
      if (!v19)
      {
        if (v21)
        {
          *(_DWORD *)buf = 136446210;
          v26 = "nw_proxy_config_get_array";
          _os_log_impl(&dword_182FBE000, v10, v20, "%{public}s called with null key_string, no backtrace", buf, 0xCu);
        }
        goto LABEL_24;
      }
      if (v21)
      {
        *(_DWORD *)buf = 136446466;
        v26 = "nw_proxy_config_get_array";
        v27 = 2082;
        v28 = v19;
        _os_log_impl(&dword_182FBE000, v10, v20, "%{public}s called with null key_string, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(v19);
    }
LABEL_25:
    if (!v9)
    {
LABEL_27:
      v7 = 0;
      goto LABEL_28;
    }
LABEL_26:
    free(v9);
    goto LABEL_27;
  }
  xpc_dictionary_get_value(v1, string_ptr);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v5;
  if (v5 && object_getClass(v5) == (Class)MEMORY[0x1E0C812C8])
    v7 = v6;
  else
    v7 = 0;

LABEL_28:
  return v7;
}

void sub_18371DA4C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

BOOL __nw_proxy_configs_create_with_schema_array_block_invoke_90(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  const char *string_ptr;
  NSObject *v6;
  _BOOL8 v7;
  nw_protocol_options_t options;
  unsigned __int16 int64;
  _BOOL8 host_with_numeric_port;
  NWConcrete_nw_proxy_config *v11;

  v4 = a3;
  string_ptr = xpc_string_get_string_ptr(v4);
  if (string_ptr)
  {
    if (nw_protocol_tcpconverter_copy_definition::onceToken != -1)
      dispatch_once(&nw_protocol_tcpconverter_copy_definition::onceToken, &__block_literal_global_48367);
    if (nw_protocol_tcpconverter_copy_definition::definition)
      v6 = os_retain((void *)nw_protocol_tcpconverter_copy_definition::definition);
    else
      v6 = 0;
    options = nw_framer_create_options(v6);

    int64 = nw_proxy_config_get_int64(*(void **)(a1 + 32), (uint64_t)CFSTR("TransportConverterPort"), 0);
    host_with_numeric_port = nw_endpoint_create_host_with_numeric_port(string_ptr, int64);
    v11 = nw_proxy_config_create((void *)host_with_numeric_port, options);

    v7 = v11 != 0;
    if (v11)
    {
      v11->type = 3005;
      nw_proxy_config_apply_common_keys(v11, *(void **)(a1 + 32), 1);
      *((_BYTE *)v11 + 170) |= 0x68u;
      if (!nw_proxy_config_get_int64(*(void **)(a1 + 32), (uint64_t)CFSTR("TransportConverterFallBackAllowed"), 0))
        *((_BYTE *)v11 + 171) |= 3u;
      *((_BYTE *)v11 + 171) = *((_BYTE *)v11 + 171) & 0xFB | (4
                                                            * nw_proxy_config_get_int64(*(void **)(a1 + 32), (uint64_t)CFSTR("TransportConverterTFOMode"), 0));
      *((_BYTE *)v11 + 171) = *((_BYTE *)v11 + 171) & 0xF7 | (8
                                                            * (nw_proxy_config_get_int64(*(void **)(a1 + 32), (uint64_t)CFSTR("TransportConverterTFOMode"), 0) == 2));
      v11->multipath_service = nw_proxy_config_get_int64(*(void **)(a1 + 32), (uint64_t)CFSTR("TransportConverterMultipathServiceType"), 0);
      nw_array_append(*(_QWORD *)(a1 + 40), v11);
    }

  }
  else
  {
    v7 = 0;
  }

  return v7;
}

void sub_18371DC34(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void nw_proxy_config_set_is_privacy_proxy(void *a1, char a2, int a3)
{
  id v5;
  void *v6;
  char v7;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  char *backtrace_string;
  os_log_type_t v13;
  _BOOL4 v14;
  os_log_type_t v15;
  char v16;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = v5;
  if (v5)
  {
    if (a3)
      v7 = 2;
    else
      v7 = 0;
    *((_BYTE *)v5 + 170) = v7 | a2 | *((_BYTE *)v5 + 170) & 0xFC;
    goto LABEL_6;
  }
  __nwlog_obj();
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v19 = "nw_proxy_config_set_is_privacy_proxy";
  v9 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v16 = 0;
  if (__nwlog_fault(v9, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_proxy_config_set_is_privacy_proxy";
        _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      v14 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          v19 = "nw_proxy_config_set_is_privacy_proxy";
          v20 = 2082;
          v21 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_proxy_config_set_is_privacy_proxy";
        _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_proxy_config_set_is_privacy_proxy";
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_23:
  if (v9)
    free(v9);
LABEL_6:

}

uint64_t nw_proxy_config_is_privacy_proxy(void *a1, BOOL *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  char *backtrace_string;
  os_log_type_t v12;
  _BOOL4 v13;
  os_log_type_t v14;
  char v15;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    if (a2)
      *a2 = (*((_BYTE *)v3 + 170) & 2) != 0;
    v5 = *((_BYTE *)v3 + 170) & 1;
    goto LABEL_5;
  }
  __nwlog_obj();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v18 = "nw_proxy_config_is_privacy_proxy";
  v8 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_proxy_config_is_privacy_proxy";
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          v18 = "nw_proxy_config_is_privacy_proxy";
          v19 = 2082;
          v20 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_proxy_config_is_privacy_proxy";
        _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_proxy_config_is_privacy_proxy";
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_22:
  if (v8)
    free(v8);
  v5 = 0;
LABEL_5:

  return v5;
}

uint64_t nw_proxy_config_get_ignore_privacy_stance(void *a1)
{
  unsigned __int8 *v1;
  void *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = (v1[170] >> 2) & 1;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_proxy_config_get_ignore_privacy_stance";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_proxy_config_get_ignore_privacy_stance";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_proxy_config_get_ignore_privacy_stance";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_proxy_config_get_ignore_privacy_stance";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_proxy_config_get_ignore_privacy_stance";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

void nw_proxy_config_set_ignore_privacy_stance(void *a1, int a2)
{
  id v3;
  void *v4;
  char v5;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    if (a2)
      v5 = 4;
    else
      v5 = 0;
    *((_BYTE *)v3 + 170) = *((_BYTE *)v3 + 170) & 0xFB | v5;
    goto LABEL_6;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_proxy_config_set_ignore_privacy_stance";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_proxy_config_set_ignore_privacy_stance";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_proxy_config_set_ignore_privacy_stance";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_proxy_config_set_ignore_privacy_stance";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_proxy_config_set_ignore_privacy_stance";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_23:
  if (v7)
    free(v7);
LABEL_6:

}

void nw_proxy_config_set_use_over_privacy_proxy(void *a1, int a2)
{
  id v3;
  void *v4;
  char v5;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    if (a2)
      v5 = 0x80;
    else
      v5 = 0;
    *((_BYTE *)v3 + 171) = v5 & 0x80 | *((_BYTE *)v3 + 171) & 0x7F;
    goto LABEL_6;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_proxy_config_set_use_over_privacy_proxy";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_proxy_config_set_use_over_privacy_proxy";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_proxy_config_set_use_over_privacy_proxy";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_proxy_config_set_use_over_privacy_proxy";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_proxy_config_set_use_over_privacy_proxy";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_23:
  if (v7)
    free(v7);
LABEL_6:

}

BOOL nw_proxy_config_use_over_privacy_proxy(void *a1)
{
  char *v1;
  void *v2;
  _BOOL8 v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = v1[171] < 0;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_proxy_config_use_over_privacy_proxy";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_proxy_config_use_over_privacy_proxy";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_proxy_config_use_over_privacy_proxy";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_proxy_config_use_over_privacy_proxy";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_proxy_config_use_over_privacy_proxy";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

void nw_proxy_config_set_prohibit_direct(void *a1, int a2)
{
  id v3;
  void *v4;
  char v5;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    if (a2)
      v5 = 8;
    else
      v5 = 0;
    *((_BYTE *)v3 + 170) = *((_BYTE *)v3 + 170) & 0xF7 | v5;
    goto LABEL_6;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_proxy_config_set_prohibit_direct";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_proxy_config_set_prohibit_direct";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_proxy_config_set_prohibit_direct";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_proxy_config_set_prohibit_direct";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_proxy_config_set_prohibit_direct";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_23:
  if (v7)
    free(v7);
LABEL_6:

}

uint64_t nw_proxy_config_prohibits_direct(void *a1)
{
  unsigned __int8 *v1;
  void *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = (v1[170] >> 3) & 1;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_proxy_config_prohibits_direct";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_proxy_config_prohibits_direct";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_proxy_config_prohibits_direct";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_proxy_config_prohibits_direct";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_proxy_config_prohibits_direct";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_proxy_config_use_fast_fallback(void *a1)
{
  unsigned __int8 *v1;
  void *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = (v1[171] >> 6) & 1;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_proxy_config_use_fast_fallback";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_proxy_config_use_fast_fallback";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_proxy_config_use_fast_fallback";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_proxy_config_use_fast_fallback";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_proxy_config_use_fast_fallback";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

void nw_proxy_config_set_use_fast_fallback(void *a1, int a2)
{
  id v3;
  void *v4;
  char v5;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    if (a2)
      v5 = 64;
    else
      v5 = 0;
    *((_BYTE *)v3 + 171) = *((_BYTE *)v3 + 171) & 0xBF | v5;
    goto LABEL_6;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_proxy_config_set_use_fast_fallback";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_proxy_config_set_use_fast_fallback";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_proxy_config_set_use_fast_fallback";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_proxy_config_set_use_fast_fallback";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_proxy_config_set_use_fast_fallback";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_23:
  if (v7)
    free(v7);
LABEL_6:

}

void nw_proxy_config_add_required_protocol(void *a1, void *a2)
{
  xpc_object_t *v3;
  id v4;
  void *v5;
  xpc_object_t v6;
  xpc_object_t v7;
  char *v8;
  const char *v9;
  void *v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  void *v14;
  os_log_type_t v15;
  char *backtrace_string;
  os_log_type_t v17;
  _BOOL4 v18;
  char *v19;
  os_log_type_t v20;
  _BOOL4 v21;
  os_log_type_t v22;
  os_log_type_t v23;
  char v24;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v27;
  __int16 v28;
  char *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v27 = "nw_proxy_config_add_required_protocol";
    v11 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v24 = 0;
    if (!__nwlog_fault(v11, &type, &v24))
      goto LABEL_40;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_proxy_config_add_required_protocol";
        _os_log_impl(&dword_182FBE000, v12, v13, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v24)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      v18 = os_log_type_enabled(v12, type);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446466;
          v27 = "nw_proxy_config_add_required_protocol";
          v28 = 2082;
          v29 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v12, v17, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_40:
        if (!v11)
          goto LABEL_6;
LABEL_41:
        free(v11);
        goto LABEL_6;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_proxy_config_add_required_protocol";
        _os_log_impl(&dword_182FBE000, v12, v17, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v22 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_proxy_config_add_required_protocol";
        _os_log_impl(&dword_182FBE000, v12, v22, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_39:

    goto LABEL_40;
  }
  if (v4)
  {
    if (!v3[3])
    {
      v6 = xpc_array_create(0, 0);
      v7 = v3[3];
      v3[3] = v6;

    }
    v8 = v5;
    v9 = v8 + 8;

    xpc_array_set_string(v3[3], 0xFFFFFFFFFFFFFFFFLL, v9);
    goto LABEL_6;
  }
  __nwlog_obj();
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v27 = "nw_proxy_config_add_required_protocol";
  v11 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v24 = 0;
  if (!__nwlog_fault(v11, &type, &v24))
    goto LABEL_40;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v12 = objc_claimAutoreleasedReturnValue();
    v15 = type;
    if (os_log_type_enabled(v12, type))
    {
      *(_DWORD *)buf = 136446210;
      v27 = "nw_proxy_config_add_required_protocol";
      _os_log_impl(&dword_182FBE000, v12, v15, "%{public}s called with null protocol", buf, 0xCu);
    }
    goto LABEL_39;
  }
  if (!v24)
  {
    __nwlog_obj();
    v12 = objc_claimAutoreleasedReturnValue();
    v23 = type;
    if (os_log_type_enabled(v12, type))
    {
      *(_DWORD *)buf = 136446210;
      v27 = "nw_proxy_config_add_required_protocol";
      _os_log_impl(&dword_182FBE000, v12, v23, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_39;
  }
  v19 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v12 = objc_claimAutoreleasedReturnValue();
  v20 = type;
  v21 = os_log_type_enabled(v12, type);
  if (!v19)
  {
    if (v21)
    {
      *(_DWORD *)buf = 136446210;
      v27 = "nw_proxy_config_add_required_protocol";
      _os_log_impl(&dword_182FBE000, v12, v20, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
    }
    goto LABEL_39;
  }
  if (v21)
  {
    *(_DWORD *)buf = 136446466;
    v27 = "nw_proxy_config_add_required_protocol";
    v28 = 2082;
    v29 = v19;
    _os_log_impl(&dword_182FBE000, v12, v20, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v19);
  if (v11)
    goto LABEL_41;
LABEL_6:

}

void sub_18371FBB8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

BOOL nw_proxy_config_stack_requires_http_protocols(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  id v3;
  char *identifier;
  void *v5;
  _BOOL8 v6;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  char *backtrace_string;
  os_log_type_t v12;
  _BOOL4 v13;
  os_log_type_t v14;
  _QWORD applier[6];
  char v17;
  os_log_type_t type;
  _BYTE buf[24];
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_proxy_config_stack_requires_http_protocols";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v17 = 0;
    if (__nwlog_fault(v8, &type, &v17))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_proxy_config_stack_requires_http_protocols";
          _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null config", buf, 0xCu);
        }
      }
      else if (v17)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        v13 = os_log_type_enabled(v9, type);
        if (backtrace_string)
        {
          if (v13)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_proxy_config_stack_requires_http_protocols";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = backtrace_string;
            _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_22;
        }
        if (v13)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_proxy_config_stack_requires_http_protocols";
          _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null config, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v14 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_proxy_config_stack_requires_http_protocols";
          _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_22:
    if (v8)
      free(v8);
    goto LABEL_24;
  }
  if (!v1[3])
  {
LABEL_24:
    v6 = 0;
    goto LABEL_25;
  }
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = buf;
  *(_QWORD *)&buf[16] = 0x2020000000;
  v20 = 0;
  if (nw_protocol_copy_http_messaging_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_messaging_definition_onceToken, &__block_literal_global_57_72293);
  v3 = (id)nw_protocol_copy_http_messaging_definition_definition;
  identifier = nw_protocol_definition_get_identifier(v3);
  v5 = (void *)v2[3];
  applier[0] = MEMORY[0x1E0C809B0];
  applier[1] = 3221225472;
  applier[2] = __nw_proxy_config_stack_requires_http_protocols_block_invoke;
  applier[3] = &unk_1E14A91F0;
  applier[4] = buf;
  applier[5] = identifier;
  xpc_array_apply(v5, applier);
  v6 = *(_BYTE *)(*(_QWORD *)&buf[8] + 24) != 0;

  _Block_object_dispose(buf, 8);
LABEL_25:

  return v6;
}

void sub_18371FF20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  void *v13;
  void *v14;
  va_list va;

  va_start(va, a13);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL __nw_proxy_config_stack_requires_http_protocols_block_invoke(uint64_t a1, int a2, xpc_object_t xstring)
{
  const char *v4;
  const char *string_ptr;
  int v6;

  v4 = *(const char **)(a1 + 40);
  string_ptr = xpc_string_get_string_ptr(xstring);
  v6 = strcmp(v4, string_ptr);
  if (!v6)
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
  return v6 != 0;
}

void nw_proxy_config_add_protocol_to_remove(void *a1, void *a2)
{
  xpc_object_t *v3;
  id v4;
  void *v5;
  xpc_object_t v6;
  xpc_object_t v7;
  char *v8;
  const char *v9;
  void *v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  void *v14;
  os_log_type_t v15;
  char *backtrace_string;
  os_log_type_t v17;
  _BOOL4 v18;
  char *v19;
  os_log_type_t v20;
  _BOOL4 v21;
  os_log_type_t v22;
  os_log_type_t v23;
  char v24;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v27;
  __int16 v28;
  char *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v27 = "nw_proxy_config_add_protocol_to_remove";
    v11 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v24 = 0;
    if (!__nwlog_fault(v11, &type, &v24))
      goto LABEL_40;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_proxy_config_add_protocol_to_remove";
        _os_log_impl(&dword_182FBE000, v12, v13, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v24)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      v18 = os_log_type_enabled(v12, type);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446466;
          v27 = "nw_proxy_config_add_protocol_to_remove";
          v28 = 2082;
          v29 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v12, v17, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_40:
        if (!v11)
          goto LABEL_6;
LABEL_41:
        free(v11);
        goto LABEL_6;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_proxy_config_add_protocol_to_remove";
        _os_log_impl(&dword_182FBE000, v12, v17, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v22 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_proxy_config_add_protocol_to_remove";
        _os_log_impl(&dword_182FBE000, v12, v22, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_39:

    goto LABEL_40;
  }
  if (v4)
  {
    if (!v3[4])
    {
      v6 = xpc_array_create(0, 0);
      v7 = v3[4];
      v3[4] = v6;

    }
    v8 = v5;
    v9 = v8 + 8;

    xpc_array_set_string(v3[4], 0xFFFFFFFFFFFFFFFFLL, v9);
    goto LABEL_6;
  }
  __nwlog_obj();
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v27 = "nw_proxy_config_add_protocol_to_remove";
  v11 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v24 = 0;
  if (!__nwlog_fault(v11, &type, &v24))
    goto LABEL_40;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v12 = objc_claimAutoreleasedReturnValue();
    v15 = type;
    if (os_log_type_enabled(v12, type))
    {
      *(_DWORD *)buf = 136446210;
      v27 = "nw_proxy_config_add_protocol_to_remove";
      _os_log_impl(&dword_182FBE000, v12, v15, "%{public}s called with null protocol", buf, 0xCu);
    }
    goto LABEL_39;
  }
  if (!v24)
  {
    __nwlog_obj();
    v12 = objc_claimAutoreleasedReturnValue();
    v23 = type;
    if (os_log_type_enabled(v12, type))
    {
      *(_DWORD *)buf = 136446210;
      v27 = "nw_proxy_config_add_protocol_to_remove";
      _os_log_impl(&dword_182FBE000, v12, v23, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_39;
  }
  v19 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v12 = objc_claimAutoreleasedReturnValue();
  v20 = type;
  v21 = os_log_type_enabled(v12, type);
  if (!v19)
  {
    if (v21)
    {
      *(_DWORD *)buf = 136446210;
      v27 = "nw_proxy_config_add_protocol_to_remove";
      _os_log_impl(&dword_182FBE000, v12, v20, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
    }
    goto LABEL_39;
  }
  if (v21)
  {
    *(_DWORD *)buf = 136446466;
    v27 = "nw_proxy_config_add_protocol_to_remove";
    v28 = 2082;
    v29 = v19;
    _os_log_impl(&dword_182FBE000, v12, v20, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v19);
  if (v11)
    goto LABEL_41;
LABEL_6:

}

void sub_18372047C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void nw_proxy_config_remove_protocols_from_stack(void *a1, void *a2)
{
  _QWORD *v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  void *v11;
  os_log_type_t v12;
  char *backtrace_string;
  os_log_type_t v14;
  _BOOL4 v15;
  char *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  os_log_type_t v19;
  os_log_type_t v20;
  _QWORD applier[4];
  id v22;
  char v23;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  char *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v26 = "nw_proxy_config_remove_protocols_from_stack";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (!__nwlog_fault(v8, &type, &v23))
      goto LABEL_39;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_proxy_config_remove_protocols_from_stack";
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      v15 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          v26 = "nw_proxy_config_remove_protocols_from_stack";
          v27 = 2082;
          v28 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_39:
        if (!v8)
          goto LABEL_5;
LABEL_40:
        free(v8);
        goto LABEL_5;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_proxy_config_remove_protocols_from_stack";
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v19 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_proxy_config_remove_protocols_from_stack";
        _os_log_impl(&dword_182FBE000, v9, v19, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_38:

    goto LABEL_39;
  }
  if (v4)
  {
    v6 = (void *)v3[4];
    if (v6)
    {
      applier[0] = MEMORY[0x1E0C809B0];
      applier[1] = 3221225472;
      applier[2] = __nw_proxy_config_remove_protocols_from_stack_block_invoke;
      applier[3] = &unk_1E14AC908;
      v22 = v4;
      xpc_array_apply(v6, applier);

    }
    goto LABEL_5;
  }
  __nwlog_obj();
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v26 = "nw_proxy_config_remove_protocols_from_stack";
  v8 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v23 = 0;
  if (!__nwlog_fault(v8, &type, &v23))
    goto LABEL_39;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v9 = objc_claimAutoreleasedReturnValue();
    v12 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_proxy_config_remove_protocols_from_stack";
      _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null stack", buf, 0xCu);
    }
    goto LABEL_38;
  }
  if (!v23)
  {
    __nwlog_obj();
    v9 = objc_claimAutoreleasedReturnValue();
    v20 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_proxy_config_remove_protocols_from_stack";
      _os_log_impl(&dword_182FBE000, v9, v20, "%{public}s called with null stack, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_38;
  }
  v16 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v9 = objc_claimAutoreleasedReturnValue();
  v17 = type;
  v18 = os_log_type_enabled(v9, type);
  if (!v16)
  {
    if (v18)
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_proxy_config_remove_protocols_from_stack";
      _os_log_impl(&dword_182FBE000, v9, v17, "%{public}s called with null stack, no backtrace", buf, 0xCu);
    }
    goto LABEL_38;
  }
  if (v18)
  {
    *(_DWORD *)buf = 136446466;
    v26 = "nw_proxy_config_remove_protocols_from_stack";
    v27 = 2082;
    v28 = v16;
    _os_log_impl(&dword_182FBE000, v9, v17, "%{public}s called with null stack, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v16);
  if (v8)
    goto LABEL_40;
LABEL_5:

}

void sub_183720994(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

uint64_t __nw_proxy_config_remove_protocols_from_stack_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  const char *string_ptr;
  NSObject *v6;
  void *v7;
  _QWORD v9[6];
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t);
  void (*v14)(uint64_t);
  id v15;

  v4 = a3;
  string_ptr = xpc_string_get_string_ptr(v4);
  if (*string_ptr)
  {
    v10 = 0;
    v11 = &v10;
    v12 = 0x3032000000;
    v13 = __Block_byref_object_copy__38532;
    v14 = __Block_byref_object_dispose__38533;
    v15 = 0;
    v6 = *(NSObject **)(a1 + 32);
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 3221225472;
    v9[2] = __nw_proxy_config_remove_protocols_from_stack_block_invoke_2;
    v9[3] = &unk_1E14A1118;
    v9[4] = &v10;
    v9[5] = string_ptr;
    nw_protocol_stack_iterate_application_protocols(v6, v9);
    v7 = (void *)v11[5];
    if (v7)
      nw_protocol_stack_remove_protocol(*(void **)(a1 + 32), v7);
    _Block_object_dispose(&v10, 8);

  }
  return 1;
}

void sub_183720A88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  void *v20;

  _Block_object_dispose(&a15, 8);

  _Unwind_Resume(a1);
}

void __nw_proxy_config_remove_protocols_from_stack_block_invoke_2(uint64_t a1, void *a2)
{
  nw_protocol_definition_t v3;
  char *identifier;
  uint64_t v5;
  id *v6;
  uint64_t v7;
  NSObject *v8;

  v8 = a2;
  v3 = nw_protocol_options_copy_definition(v8);
  identifier = nw_protocol_definition_get_identifier(v3);
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v7 = *(_QWORD *)(v5 + 40);
  v6 = (id *)(v5 + 40);
  if (!v7 && !strcmp(identifier, *(const char **)(a1 + 40)))
    objc_storeStrong(v6, v3);

}

BOOL nw_proxy_config_supports_connection(void *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id *v10;
  int v11;
  _BOOL8 v12;
  id *v13;
  NSObject *v14;
  id v15;
  char v16;
  void *v17;
  int v18;
  nw_protocol_options_t v19;
  nw_protocol_options_t v20;
  id *v21;
  id v22;
  id v23;
  _BOOL4 is_equal_unsafe;
  id v25;
  char *identifier;
  const char *v27;
  void *v28;
  id *v29;
  NSObject *v30;
  NSObject *v31;
  NSObject *v32;
  int v33;
  char *hostname;
  NSObject *v35;
  unsigned int *v36;
  size_t v37;
  const sockaddr *address;
  size_t v39;
  const sockaddr *v40;
  size_t v41;
  const sockaddr *v42;
  size_t v43;
  const sockaddr *v44;
  int address_family;
  void *v46;
  void *v47;
  void *v48;
  char *v49;
  NSObject *v50;
  os_log_type_t v51;
  void *v52;
  os_log_type_t v53;
  void *v54;
  os_log_type_t v55;
  char *backtrace_string;
  os_log_type_t v57;
  _BOOL4 v58;
  os_log_type_t v59;
  _BOOL4 v60;
  os_log_type_t v61;
  _BOOL4 v62;
  os_log_type_t v63;
  os_log_type_t v64;
  os_log_type_t v65;
  _BOOL4 is_quic_stream;
  id *v68;
  _QWORD v69[4];
  NSObject *v70;
  os_log_type_t *v71;
  os_log_type_t type[8];
  os_log_type_t *v73;
  uint64_t v74;
  char v75;
  _QWORD v76[4];
  NSObject *v77;
  _BYTE *v78;
  _QWORD applier[6];
  char v80;
  _BYTE buf[24];
  char v82;
  uint64_t v83;

  v83 = *MEMORY[0x1E0C80C00];
  v7 = a1;
  v8 = a2;
  v9 = a3;
  v10 = a4;
  if (!v7)
  {
    __nwlog_obj();
    v48 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_proxy_config_supports_connection";
    v49 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    v80 = 0;
    if (!__nwlog_fault(v49, type, &v80))
      goto LABEL_124;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v50 = objc_claimAutoreleasedReturnValue();
      v51 = type[0];
      if (os_log_type_enabled(v50, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_proxy_config_supports_connection";
        _os_log_impl(&dword_182FBE000, v50, v51, "%{public}s called with null config", buf, 0xCu);
      }
      goto LABEL_123;
    }
    if (!v80)
    {
      __nwlog_obj();
      v50 = objc_claimAutoreleasedReturnValue();
      v63 = type[0];
      if (os_log_type_enabled(v50, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_proxy_config_supports_connection";
        _os_log_impl(&dword_182FBE000, v50, v63, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_123;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v50 = objc_claimAutoreleasedReturnValue();
    v57 = type[0];
    v58 = os_log_type_enabled(v50, type[0]);
    if (!backtrace_string)
    {
      if (v58)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_proxy_config_supports_connection";
        _os_log_impl(&dword_182FBE000, v50, v57, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
      goto LABEL_123;
    }
    if (v58)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_proxy_config_supports_connection";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = backtrace_string;
      _os_log_impl(&dword_182FBE000, v50, v57, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_105;
  }
  if (!v8)
  {
    __nwlog_obj();
    v52 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_proxy_config_supports_connection";
    v49 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    v80 = 0;
    if (!__nwlog_fault(v49, type, &v80))
      goto LABEL_124;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v50 = objc_claimAutoreleasedReturnValue();
      v53 = type[0];
      if (os_log_type_enabled(v50, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_proxy_config_supports_connection";
        _os_log_impl(&dword_182FBE000, v50, v53, "%{public}s called with null endpoint", buf, 0xCu);
      }
      goto LABEL_123;
    }
    if (!v80)
    {
      __nwlog_obj();
      v50 = objc_claimAutoreleasedReturnValue();
      v64 = type[0];
      if (os_log_type_enabled(v50, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_proxy_config_supports_connection";
        _os_log_impl(&dword_182FBE000, v50, v64, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_123;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v50 = objc_claimAutoreleasedReturnValue();
    v59 = type[0];
    v60 = os_log_type_enabled(v50, type[0]);
    if (!backtrace_string)
    {
      if (v60)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_proxy_config_supports_connection";
        _os_log_impl(&dword_182FBE000, v50, v59, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
      goto LABEL_123;
    }
    if (v60)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_proxy_config_supports_connection";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = backtrace_string;
      _os_log_impl(&dword_182FBE000, v50, v59, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_105;
  }
  if (!v9)
  {
    __nwlog_obj();
    v54 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_proxy_config_supports_connection";
    v49 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    v80 = 0;
    if (!__nwlog_fault(v49, type, &v80))
      goto LABEL_124;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v50 = objc_claimAutoreleasedReturnValue();
      v55 = type[0];
      if (os_log_type_enabled(v50, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_proxy_config_supports_connection";
        _os_log_impl(&dword_182FBE000, v50, v55, "%{public}s called with null parameters", buf, 0xCu);
      }
LABEL_123:

LABEL_124:
      if (v49)
        free(v49);
      goto LABEL_126;
    }
    if (!v80)
    {
      __nwlog_obj();
      v50 = objc_claimAutoreleasedReturnValue();
      v65 = type[0];
      if (os_log_type_enabled(v50, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_proxy_config_supports_connection";
        _os_log_impl(&dword_182FBE000, v50, v65, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_123;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v50 = objc_claimAutoreleasedReturnValue();
    v61 = type[0];
    v62 = os_log_type_enabled(v50, type[0]);
    if (!backtrace_string)
    {
      if (v62)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_proxy_config_supports_connection";
        _os_log_impl(&dword_182FBE000, v50, v61, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
      goto LABEL_123;
    }
    if (v62)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_proxy_config_supports_connection";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = backtrace_string;
      _os_log_impl(&dword_182FBE000, v50, v61, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_105:

    free(backtrace_string);
    goto LABEL_124;
  }
  v11 = *((_DWORD *)v7 + 38);
  if (!v11)
  {
LABEL_126:
    v12 = 0;
    goto LABEL_127;
  }
  if (v11 != 4)
  {
    v13 = (id *)v9;
    v14 = v13[19];

    if ((*((_DWORD *)v7 + 38) & 0xFFFFFFFE) == 2)
    {
      if (nw_protocol_setup_tcp_definition(void)::onceToken != -1)
        dispatch_once(&nw_protocol_setup_tcp_definition(void)::onceToken, &__block_literal_global_62963);
      v15 = (id)g_tcp_definition;
      v16 = nw_protocol_stack_includes_protocol(v14, v15);

      if ((v16 & 1) == 0)
        goto LABEL_65;
    }
    v17 = (void *)*((_QWORD *)v7 + 3);
    if (v17)
    {
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0x2020000000;
      v82 = 0;
      applier[0] = MEMORY[0x1E0C809B0];
      applier[1] = 3221225472;
      applier[2] = __nw_proxy_config_supports_connection_block_invoke;
      applier[3] = &unk_1E14A8FA0;
      applier[4] = v14;
      applier[5] = buf;
      xpc_array_apply(v17, applier);
      v18 = *(unsigned __int8 *)(*(_QWORD *)&buf[8] + 24);
      _Block_object_dispose(buf, 8);
      if (v18)
        goto LABEL_65;
    }
    if (*((_DWORD *)v7 + 38) != 1)
    {
LABEL_31:
      if (*((_DWORD *)v7 + 39) == 3005)
      {
        if (nw_proxy_config_can_use_tcp_converter(void)::onceToken != -1)
          dispatch_once(&nw_proxy_config_can_use_tcp_converter(void)::onceToken, &__block_literal_global_227);
        if (nw_proxy_config_can_use_tcp_converter(void)::allowed != 1)
          goto LABEL_65;
        if (v10)
        {
          v30 = v10[12];
          v31 = v30;
          if (v30 && nw_interface_get_type(v30) == nw_interface_type_other)
          {

            goto LABEL_65;
          }

        }
      }
      v32 = v8;
      v33 = -[NSObject type](v32, "type");

      if ((v33 - 3) <= 0xFFFFFFFD)
      {
        v12 = 0;
        if ((*((_BYTE *)v7 + 170) & 0x10) == 0 || v33 != 3)
          goto LABEL_66;
      }
      if ((*((_BYTE *)v7 + 170) & 0x20) == 0)
      {
        if ((*((_BYTE *)v7 + 170) & 0x80) != 0 && v33 == 2)
        {
          hostname = (char *)nw_endpoint_get_hostname(v32);
          if (hostname)
          {
            if (!strchr(hostname, 46))
              goto LABEL_65;
          }
        }
LABEL_69:
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = buf;
        *(_QWORD *)&buf[16] = 0x2020000000;
        v82 = 0;
        v46 = (void *)*((_QWORD *)v7 + 16);
        if (!v46)
          goto LABEL_72;
        v76[0] = MEMORY[0x1E0C809B0];
        v76[1] = 3221225472;
        v76[2] = __nw_proxy_config_supports_connection_block_invoke_3;
        v76[3] = &unk_1E14A8FA0;
        v77 = v32;
        v78 = buf;
        xpc_array_apply(v46, v76);

        if (*(_BYTE *)(*(_QWORD *)&buf[8] + 24))
        {
          v12 = 0;
        }
        else
        {
LABEL_72:
          v47 = (void *)*((_QWORD *)v7 + 15);
          if (v47)
          {
            *(_QWORD *)type = 0;
            v73 = type;
            v74 = 0x2020000000;
            v75 = 0;
            v69[0] = MEMORY[0x1E0C809B0];
            v69[1] = 3221225472;
            v69[2] = __nw_proxy_config_supports_connection_block_invoke_4;
            v69[3] = &unk_1E14A8FA0;
            v70 = v32;
            v71 = type;
            xpc_array_apply(v47, v69);
            v12 = *((_BYTE *)v73 + 24) != 0;

            _Block_object_dispose(type, 8);
          }
          else
          {
            v12 = (*((_BYTE *)v7 + 172) & 1) == 0;
          }
        }
        _Block_object_dispose(buf, 8);
        goto LABEL_66;
      }
      if (v33 != 1)
        goto LABEL_65;
      v35 = *((_QWORD *)v7 + 5);
      if (!v35 || nw_endpoint_get_type(v35) != nw_endpoint_type_address)
        goto LABEL_65;
      if (!nw_path_has_nat64_prefixes(v10) || nw_endpoint_get_address_family(v32) != 30)
        goto LABEL_68;
      v36 = (unsigned int *)nw_path_nat64_prefixes(v10);
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = 0;
      *(_DWORD *)type = 0;
      v37 = v36[4];
      if ((_DWORD)v37)
      {
        *(_DWORD *)buf = v36[4];
        memcpy(&buf[4], v36, v37);
        address = nw_endpoint_get_address(v32);
        if ((nw_nat64_extract_v4((unsigned int *)buf, &address->sa_data[6], (uint64_t)type) & 1) != 0)
          goto LABEL_61;
      }
      v39 = v36[9];
      if ((_DWORD)v39)
      {
        *(_DWORD *)buf = v36[9];
        memcpy(&buf[4], v36, v39);
        v40 = nw_endpoint_get_address(v32);
        if ((nw_nat64_extract_v4((unsigned int *)buf, &v40->sa_data[6], (uint64_t)type) & 1) != 0)
          goto LABEL_61;
      }
      v41 = v36[14];
      if ((_DWORD)v41)
      {
        *(_DWORD *)buf = v36[14];
        memcpy(&buf[4], v36, v41);
        v42 = nw_endpoint_get_address(v32);
        if ((nw_nat64_extract_v4((unsigned int *)buf, &v42->sa_data[6], (uint64_t)type) & 1) != 0)
          goto LABEL_61;
      }
      v43 = v36[19];
      if ((_DWORD)v43
        && (*(_DWORD *)buf = v36[19],
            memcpy(&buf[4], v36, v43),
            v44 = nw_endpoint_get_address(v32),
            (nw_nat64_extract_v4((unsigned int *)buf, &v44->sa_data[6], (uint64_t)type) & 1) != 0))
      {
LABEL_61:
        if (nw_endpoint_get_address_family(*((void **)v7 + 5)) == 2)
          goto LABEL_69;
      }
      else
      {
LABEL_68:
        address_family = nw_endpoint_get_address_family(v32);
        if (address_family == nw_endpoint_get_address_family(*((void **)v7 + 5)))
          goto LABEL_69;
      }
LABEL_65:
      v12 = 0;
LABEL_66:

      goto LABEL_127;
    }
    v19 = nw_protocol_stack_copy_transport_protocol(v14);
    v20 = v19;
    if (!v19)
    {
LABEL_30:

      goto LABEL_31;
    }
    v21 = v19;
    v22 = v21[1];
    v68 = v21;

    if (nw_protocol_copy_quic_connection_definition::onceToken != -1)
      dispatch_once(&nw_protocol_copy_quic_connection_definition::onceToken, &__block_literal_global_54912);
    v23 = (id)nw_protocol_copy_quic_connection_definition::quic_definition;
    is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v22, (uint64_t)v23);

    if (is_equal_unsafe)
    {
      if (nw_protocol_copy_quic_stream_definition::onceToken != -1)
        dispatch_once(&nw_protocol_copy_quic_stream_definition::onceToken, &__block_literal_global_12_55083);
      v25 = (id)nw_protocol_copy_quic_stream_definition::quic_definition;

      v22 = v25;
    }
    identifier = nw_protocol_definition_get_identifier(v22);
    buf[0] = 0;
    nw_proxy_config_should_proxy_transport_at_level((NWConcrete_nw_proxy_config *)v7, identifier, buf);
    if (buf[0])
      v27 = "proxy-wildcard";
    else
      v27 = identifier;
    v28 = nw_dictionary_copy_value(*((_QWORD *)v7 + 1), (uint64_t)v27);
    if ((*((_BYTE *)v7 + 172) & 2) == 0)
      goto LABEL_29;
    v29 = v68;
    if (nw_protocol_options_is_quic_connection(v29))
    {

    }
    else
    {
      is_quic_stream = nw_protocol_options_is_quic_stream(v29);

      if (!is_quic_stream)
        goto LABEL_29;
    }
    if ((_os_feature_enabled_impl() & 1) == 0)
    {

      goto LABEL_64;
    }
LABEL_29:

    if (v28)
      goto LABEL_30;
LABEL_64:

    goto LABEL_65;
  }
  v12 = 1;
LABEL_127:

  return v12;
}

void sub_1837217A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

BOOL __nw_proxy_config_supports_connection_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  const char *string_ptr;
  NSObject *v6;
  _BOOL8 v7;
  _QWORD v9[6];
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  char v13;

  v4 = a3;
  string_ptr = xpc_string_get_string_ptr(v4);
  if (*string_ptr)
  {
    v10 = 0;
    v11 = &v10;
    v12 = 0x2020000000;
    v13 = 0;
    v6 = *(NSObject **)(a1 + 32);
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 3221225472;
    v9[2] = __nw_proxy_config_supports_connection_block_invoke_2;
    v9[3] = &unk_1E14A1118;
    v9[4] = &v10;
    v9[5] = string_ptr;
    nw_protocol_stack_iterate_application_protocols(v6, v9);
    v7 = *((_BYTE *)v11 + 24) != 0;
    if (!*((_BYTE *)v11 + 24))
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
    _Block_object_dispose(&v10, 8);
  }
  else
  {
    v7 = 1;
  }

  return v7;
}

void sub_183721940(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t __nw_proxy_config_supports_connection_block_invoke_3(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  void *v5;
  uint64_t v6;
  const char *string_ptr;

  v4 = a3;
  v5 = v4;
  if (v4 && object_getClass(v4) == (Class)MEMORY[0x1E0C81390])
  {
    string_ptr = xpc_string_get_string_ptr(v5);
    v6 = 1;
    if (nw_endpoint_proxy_match_pattern_to_endpoint(*(void **)(a1 + 32), string_ptr))
    {
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
      v6 = 0;
    }
  }
  else
  {
    v6 = 1;
  }

  return v6;
}

void sub_1837219D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t __nw_proxy_config_supports_connection_block_invoke_4(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  void *v5;
  uint64_t v6;
  const char *string_ptr;

  v4 = a3;
  v5 = v4;
  if (v4 && object_getClass(v4) == (Class)MEMORY[0x1E0C81390])
  {
    string_ptr = xpc_string_get_string_ptr(v5);
    v6 = 1;
    if (nw_endpoint_proxy_match_pattern_to_endpoint(*(void **)(a1 + 32), string_ptr))
    {
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
      v6 = 0;
    }
  }
  else
  {
    v6 = 1;
  }

  return v6;
}

void sub_183721A6C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZL37nw_proxy_config_can_use_tcp_converterv_block_invoke()
{
  uint64_t result;

  result = MGGetBoolAnswer();
  if ((result & 1) != 0 || (result = MGGetBoolAnswer(), (_DWORD)result))
    nw_proxy_config_can_use_tcp_converter(void)::allowed = 1;
  return result;
}

void __nw_proxy_config_supports_connection_block_invoke_2(uint64_t a1, nw_protocol_options_t options)
{
  char *identifier;
  nw_protocol_definition_t v4;

  v4 = nw_protocol_options_copy_definition(options);
  identifier = nw_protocol_definition_get_identifier(v4);
  if (!strcmp(identifier, *(const char **)(a1 + 40)))
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;

}

uint64_t nw_proxy_config_get_is_companion_proxy(void *a1)
{
  unsigned __int8 *v1;
  void *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = (v1[172] >> 1) & 1;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_proxy_config_get_is_companion_proxy";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_proxy_config_get_is_companion_proxy";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_proxy_config_get_is_companion_proxy";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_proxy_config_get_is_companion_proxy";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_proxy_config_get_is_companion_proxy";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

BOOL nw_proxy_config_supports_unsatisfied_paths(void *a1)
{
  id v1;
  void *v2;
  _BOOL8 v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = (*((_BYTE *)v1 + 170) & 0x40) == 0;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_proxy_config_supports_unsatisfied_paths";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_proxy_config_supports_unsatisfied_paths";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_proxy_config_supports_unsatisfied_paths";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_proxy_config_supports_unsatisfied_paths";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_proxy_config_supports_unsatisfied_paths";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_proxy_config_override_opaque_https(void *a1)
{
  unsigned __int8 *v1;
  void *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = (v1[171] >> 4) & 1;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_proxy_config_override_opaque_https";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_proxy_config_override_opaque_https";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_proxy_config_override_opaque_https";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_proxy_config_override_opaque_https";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_proxy_config_override_opaque_https";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

uint64_t *nw_proxy_config_create_with_agent_data(uint64_t a1, unint64_t a2, _OWORD *a3)
{
  return nw_proxy_config_create_with_agent_data_extended(a1, a2, a3, 0);
}

uint64_t *nw_proxy_config_create_with_agent_data_extended(uint64_t a1, unint64_t a2, _OWORD *a3, _BYTE *a4)
{
  _QWORD *v4;
  unint64_t v6;
  xpc_object_t v9;
  unint64_t v10;
  int v11;
  size_t v12;
  BOOL v13;
  id v14;
  void *v15;
  NSObject *v16;
  os_log_type_t v17;
  char *v18;
  NSObject *v19;
  os_log_type_t v20;
  _BOOL4 v21;
  char *v22;
  os_log_type_t v23;
  BOOL v24;
  uint64_t v25;
  __int128 v26;
  uint64_t *v27;
  void *v32;
  NSObject *v33;
  nw_endpoint_t v34;
  NSObject *v35;
  NSObject *v36;
  xpc_object_t *v37;
  nw_endpoint_t v38;
  xpc_object_t v39;
  xpc_object_t v40;
  id v41;
  const char *v42;
  NSObject *v43;
  os_log_type_t v44;
  nw_endpoint_t v45;
  xpc_object_t v46;
  xpc_object_t v47;
  nw_endpoint_t v48;
  _BOOL8 v49;
  id v50;
  char *v51;
  NSObject *v52;
  os_log_type_t v53;
  int v54;
  const char *v55;
  int v56;
  int v57;
  int v58;
  const char *v59;
  int v60;
  int v61;
  _BOOL4 v62;
  int v63;
  id v64;
  os_log_type_t v65;
  char *v66;
  os_log_type_t v67;
  _BOOL4 v68;
  NWConcrete_nw_protocol_stack *v69;
  char **v70;
  char **v71;
  char **v72;
  char *identifier;
  int v74;
  NSObject *v75;
  const char *v76;
  const char *v77;
  char *v78;
  os_log_type_t v79;
  _BOOL4 v80;
  const char *v81;
  char *v82;
  NSObject *v83;
  os_log_type_t v84;
  char *v85;
  NWConcrete_nw_protocol_options *deserialized_options;
  os_log_type_t v87;
  NWConcrete_nw_protocol_options *v88;
  NWConcrete_nw_protocol_options *v89;
  NSObject *v90;
  NSObject *p_super;
  NSObject *v92;
  int v93;
  int v94;
  int v95;
  BOOL v96;
  BOOL v97;
  id v98;
  const char *v99;
  NSObject *v100;
  os_log_type_t v101;
  id v102;
  os_log_type_t v103;
  os_log_type_t v104;
  os_log_type_t v105;
  id v106;
  os_log_type_t v107;
  unint64_t v108;
  unsigned __int8 *v109;
  int v110;
  int v111;
  int v112;
  void *v113;
  unsigned int v114;
  unsigned int v115;
  uint64_t v116;
  id v117;
  char *v118;
  NSObject *v119;
  os_log_type_t v120;
  char *v121;
  NSObject *v122;
  os_log_type_t v123;
  _BOOL4 v124;
  os_log_type_t v125;
  id v126;
  char *v127;
  NSObject *v128;
  os_log_type_t v129;
  id v130;
  os_log_type_t v131;
  char *v132;
  os_log_type_t v133;
  _BOOL4 v134;
  char *v135;
  os_log_type_t v136;
  _BOOL4 v137;
  os_log_type_t v138;
  _BOOL4 is_quic_stream;
  NSObject *v140;
  NSObject *v141;
  NSObject *v142;
  char *v143;
  os_log_type_t v144;
  _BOOL4 v145;
  char *v146;
  NSObject *v147;
  os_log_type_t v148;
  _BOOL4 v149;
  os_log_type_t v150;
  os_log_type_t v151;
  char *v152;
  os_log_type_t v153;
  _BOOL4 v154;
  os_log_type_t v155;
  os_log_type_t v156;
  os_log_type_t v157;
  id v158;
  char *v159;
  NSObject *v160;
  os_log_type_t v161;
  id v162;
  void *v163;
  NSObject *v164;
  os_log_type_t v165;
  char *v166;
  os_log_type_t v167;
  _BOOL4 v168;
  char *v169;
  os_log_type_t v170;
  _BOOL4 v171;
  os_log_type_t v172;
  uint64_t *v173;
  os_log_type_t v174;
  uint64_t *v175;
  NSObject *v176;
  uint64_t *v177;
  int v178;
  unsigned int v179;
  unsigned int v180;
  unsigned int v181;
  unsigned int v182;
  unsigned int v183;
  int v184;
  unsigned int v185;
  unsigned int v186;
  unsigned int v187;
  unsigned int v188;
  int v189;
  void *v191;
  char *v192;
  NSObject *v193;
  os_log_type_t v194;
  void *v195;
  os_log_type_t v196;
  char *backtrace_string;
  os_log_type_t v198;
  _BOOL4 v199;
  char *v200;
  os_log_type_t v201;
  _BOOL4 v202;
  void *v203;
  char *v204;
  NSObject *v205;
  os_log_type_t v206;
  void *v207;
  char *v208;
  NSObject *v209;
  os_log_type_t v210;
  char *v211;
  os_log_type_t v212;
  _BOOL4 v213;
  char *v214;
  os_log_type_t v215;
  _BOOL4 v216;
  os_log_type_t v217;
  os_log_type_t v218;
  os_log_type_t v219;
  os_log_type_t v220;
  _DWORD *v221;
  _BYTE *v222;
  char v223;
  NWConcrete_nw_protocol_stack *v225;
  id v226;
  id v227;
  id v228;
  char *__s1;
  xpc_object_t *objects;
  id obj;
  id v232;
  id v233;
  nw_endpoint_t v234;
  uint64_t *v235;
  char **keys;
  NSObject *v237;
  id v238;
  id v239;
  id v240;
  NWConcrete_nw_protocol_stack *stack;
  unint64_t v242;
  int v243;
  char v244;
  uint8_t v245[4];
  const char *v246;
  __int16 v247;
  NSObject *v248;
  unsigned __int8 uu[16];
  _BYTE buf[52];
  uint64_t v251;

  v251 = *MEMORY[0x1E0C80C00];
  v4 = &unk_183BA7000;
  if (!a1)
  {
    __nwlog_obj();
    v191 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_proxy_config_create_with_agent_data_extended";
    v192 = (char *)_os_log_send_and_compose_impl();

    v245[0] = 16;
    uu[0] = 0;
    if (!__nwlog_fault(v192, v245, uu))
      goto LABEL_494;
    if (v245[0] == 17)
    {
      __nwlog_obj();
      v193 = objc_claimAutoreleasedReturnValue();
      v194 = v245[0];
      if (os_log_type_enabled(v193, (os_log_type_t)v245[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_proxy_config_create_with_agent_data_extended";
        _os_log_impl(&dword_182FBE000, v193, v194, "%{public}s called with null bytes", buf, 0xCu);
      }
    }
    else if (uu[0])
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v193 = objc_claimAutoreleasedReturnValue();
      v198 = v245[0];
      v199 = os_log_type_enabled(v193, (os_log_type_t)v245[0]);
      if (backtrace_string)
      {
        if (v199)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_proxy_config_create_with_agent_data_extended";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v193, v198, "%{public}s called with null bytes, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        if (!v192)
          return 0;
        goto LABEL_495;
      }
      if (v199)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_proxy_config_create_with_agent_data_extended";
        _os_log_impl(&dword_182FBE000, v193, v198, "%{public}s called with null bytes, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v193 = objc_claimAutoreleasedReturnValue();
      v217 = v245[0];
      if (os_log_type_enabled(v193, (os_log_type_t)v245[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_proxy_config_create_with_agent_data_extended";
        _os_log_impl(&dword_182FBE000, v193, v217, "%{public}s called with null bytes, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_493;
  }
  v6 = a2 - 25;
  if (a2 <= 0x19)
  {
    __nwlog_obj();
    v195 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_proxy_config_create_with_agent_data_extended";
    v192 = (char *)_os_log_send_and_compose_impl();

    v245[0] = 16;
    uu[0] = 0;
    if (!__nwlog_fault(v192, v245, uu))
      goto LABEL_494;
    if (v245[0] == 17)
    {
      __nwlog_obj();
      v193 = objc_claimAutoreleasedReturnValue();
      v196 = v245[0];
      if (os_log_type_enabled(v193, (os_log_type_t)v245[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_proxy_config_create_with_agent_data_extended";
        _os_log_impl(&dword_182FBE000, v193, v196, "%{public}s called with null (length > __builtin_offsetof(struct nw_proxy_config_agent_data, tlv_data))", buf, 0xCu);
      }
    }
    else if (uu[0])
    {
      v200 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v193 = objc_claimAutoreleasedReturnValue();
      v201 = v245[0];
      v202 = os_log_type_enabled(v193, (os_log_type_t)v245[0]);
      if (v200)
      {
        if (v202)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_proxy_config_create_with_agent_data_extended";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v200;
          _os_log_impl(&dword_182FBE000, v193, v201, "%{public}s called with null (length > __builtin_offsetof(struct nw_proxy_config_agent_data, tlv_data)), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v200);
LABEL_494:
        if (!v192)
          return 0;
LABEL_495:
        free(v192);
        return 0;
      }
      if (v202)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_proxy_config_create_with_agent_data_extended";
        _os_log_impl(&dword_182FBE000, v193, v201, "%{public}s called with null (length > __builtin_offsetof(struct nw_proxy_config_agent_data, tlv_data)), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v193 = objc_claimAutoreleasedReturnValue();
      v218 = v245[0];
      if (os_log_type_enabled(v193, (os_log_type_t)v245[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_proxy_config_create_with_agent_data_extended";
        _os_log_impl(&dword_182FBE000, v193, v218, "%{public}s called with null (length > __builtin_offsetof(struct nw_proxy_config_agent_data, tlv_data)), backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_493:

    goto LABEL_494;
  }
  if (a4)
    *a4 = 1;
  if (nw_proxy_config_initialize_known_protocols(void)::onceToken != -1)
    dispatch_once(&nw_proxy_config_initialize_known_protocols(void)::onceToken, &__block_literal_global_232);
  *(_OWORD *)uu = *a3;
  if (a2 - 31 > 0xFFFFFFFFFFFFFFF9)
  {
    v235 = 0;
    keys = 0;
    v240 = 0;
    stack = 0;
    v225 = 0;
    v226 = 0;
    v232 = 0;
    v233 = 0;
    v227 = 0;
    v228 = 0;
    objects = 0;
    obj = 0;
    v237 = 0;
    goto LABEL_385;
  }
  v222 = a4;
  v234 = 0;
  v235 = 0;
  v228 = 0;
  __s1 = 0;
  stack = 0;
  v225 = 0;
  v226 = 0;
  v223 = 0;
  keys = 0;
  v237 = 0;
  v9 = 0;
  v232 = 0;
  v233 = 0;
  v227 = 0;
  objects = 0;
  obj = 0;
  v10 = 0;
  v242 = a2 - 30;
  do
  {
    v11 = *(unsigned __int8 *)(a1 + 25 + v10);
    v12 = *(unsigned int *)(a1 + 26 + v10);
    if (!(_DWORD)v12)
      goto LABEL_35;
    if (v12 <= 0xFFFFFFF9)
    {
      v13 = v6 >= v12 + 5 && v6 - (v12 + 5) >= v10;
      if (v13)
      {
        v22 = (char *)(a1 + 30 + v10);
        goto LABEL_36;
      }
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v14 = (id)gLogObj;
    *(_DWORD *)buf = 136446978;
    *(_QWORD *)&buf[4] = "nw_necp_buffer_get_tlv_value";
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v10;
    *(_WORD *)&buf[22] = 2048;
    *(_QWORD *)&buf[24] = v6;
    *(_WORD *)&buf[32] = 1024;
    *(_DWORD *)&buf[34] = v12;
    v15 = (void *)_os_log_send_and_compose_impl();

    v245[0] = 16;
    v244 = 0;
    if (__nwlog_fault((const char *)v15, v245, &v244))
    {
      if (v245[0] == 17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v16 = (id)gLogObj;
        v17 = v245[0];
        if (os_log_type_enabled(v16, (os_log_type_t)v245[0]))
        {
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_necp_buffer_get_tlv_value";
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v10;
          *(_WORD *)&buf[22] = 2048;
          *(_QWORD *)&buf[24] = v6;
          *(_WORD *)&buf[32] = 1024;
          *(_DWORD *)&buf[34] = v12;
          _os_log_impl(&dword_182FBE000, v16, v17, "%{public}s buffer too short tlv_offset=%zu buffer_length=%zu value_length=%u", buf, 0x26u);
        }
      }
      else
      {
        if (v244)
        {
          v18 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v19 = (id)gLogObj;
          v20 = v245[0];
          v21 = os_log_type_enabled(v19, (os_log_type_t)v245[0]);
          if (v18)
          {
            if (v21)
            {
              *(_DWORD *)buf = 136447234;
              *(_QWORD *)&buf[4] = "nw_necp_buffer_get_tlv_value";
              *(_WORD *)&buf[12] = 2048;
              *(_QWORD *)&buf[14] = v10;
              *(_WORD *)&buf[22] = 2048;
              *(_QWORD *)&buf[24] = v6;
              *(_WORD *)&buf[32] = 1024;
              *(_DWORD *)&buf[34] = v12;
              *(_WORD *)&buf[38] = 2082;
              *(_QWORD *)&buf[40] = v18;
              _os_log_impl(&dword_182FBE000, v19, v20, "%{public}s buffer too short tlv_offset=%zu buffer_length=%zu value_length=%u, dumping backtrace:%{public}s", buf, 0x30u);
            }

            free(v18);
            if (!v15)
              goto LABEL_35;
LABEL_34:
            free(v15);
            goto LABEL_35;
          }
          if (v21)
          {
            *(_DWORD *)buf = 136446978;
            *(_QWORD *)&buf[4] = "nw_necp_buffer_get_tlv_value";
            *(_WORD *)&buf[12] = 2048;
            *(_QWORD *)&buf[14] = v10;
            *(_WORD *)&buf[22] = 2048;
            *(_QWORD *)&buf[24] = v6;
            *(_WORD *)&buf[32] = 1024;
            *(_DWORD *)&buf[34] = v12;
            _os_log_impl(&dword_182FBE000, v19, v20, "%{public}s buffer too short tlv_offset=%zu buffer_length=%zu value_length=%u, no backtrace", buf, 0x26u);
          }

          goto LABEL_33;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v16 = (id)gLogObj;
        v23 = v245[0];
        if (os_log_type_enabled(v16, (os_log_type_t)v245[0]))
        {
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_necp_buffer_get_tlv_value";
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v10;
          *(_WORD *)&buf[22] = 2048;
          *(_QWORD *)&buf[24] = v6;
          *(_WORD *)&buf[32] = 1024;
          *(_DWORD *)&buf[34] = v12;
          _os_log_impl(&dword_182FBE000, v16, v23, "%{public}s buffer too short tlv_offset=%zu buffer_length=%zu value_length=%u, backtrace limit exceeded", buf, 0x26u);
        }
      }

    }
LABEL_33:
    if (v15)
      goto LABEL_34;
LABEL_35:
    v22 = 0;
LABEL_36:
    v10 += v12 + 5;
    if (v10 > v6)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v162 = (id)gLogObj;
      *(_DWORD *)buf = 136446978;
      *(_QWORD *)&buf[4] = "nw_proxy_config_create_with_agent_data_extended";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v12;
      *(_WORD *)&buf[18] = 2048;
      *(_QWORD *)&buf[20] = v10;
      *(_WORD *)&buf[28] = 2048;
      *(_QWORD *)&buf[30] = v6;
      v163 = (void *)_os_log_send_and_compose_impl();

      v245[0] = 16;
      v244 = 0;
      if (__nwlog_fault((const char *)v163, v245, &v244))
      {
        if (v245[0] == 17)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v164 = (id)gLogObj;
          v165 = v245[0];
          if (os_log_type_enabled(v164, (os_log_type_t)v245[0]))
          {
            *(_DWORD *)buf = 136446978;
            *(_QWORD *)&buf[4] = "nw_proxy_config_create_with_agent_data_extended";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v12;
            *(_WORD *)&buf[18] = 2048;
            *(_QWORD *)&buf[20] = v10;
            *(_WORD *)&buf[28] = 2048;
            *(_QWORD *)&buf[30] = v6;
            _os_log_impl(&dword_182FBE000, v164, v165, "%{public}s TLV length (%u) at offset %zu goes beyond total length (%zu)", buf, 0x26u);
          }
        }
        else if (v244)
        {
          v169 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v164 = (id)gLogObj;
          v170 = v245[0];
          v171 = os_log_type_enabled(v164, (os_log_type_t)v245[0]);
          if (v169)
          {
            if (v171)
            {
              *(_DWORD *)buf = 136447234;
              *(_QWORD *)&buf[4] = "nw_proxy_config_create_with_agent_data_extended";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v12;
              *(_WORD *)&buf[18] = 2048;
              *(_QWORD *)&buf[20] = v10;
              *(_WORD *)&buf[28] = 2048;
              *(_QWORD *)&buf[30] = v6;
              *(_WORD *)&buf[38] = 2082;
              *(_QWORD *)&buf[40] = v169;
              _os_log_impl(&dword_182FBE000, v164, v170, "%{public}s TLV length (%u) at offset %zu goes beyond total length (%zu), dumping backtrace:%{public}s", buf, 0x30u);
            }

            free(v169);
            if (!v163)
              break;
LABEL_423:
            free(v163);
            break;
          }
          if (v171)
          {
            *(_DWORD *)buf = 136446978;
            *(_QWORD *)&buf[4] = "nw_proxy_config_create_with_agent_data_extended";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v12;
            *(_WORD *)&buf[18] = 2048;
            *(_QWORD *)&buf[20] = v10;
            *(_WORD *)&buf[28] = 2048;
            *(_QWORD *)&buf[30] = v6;
            _os_log_impl(&dword_182FBE000, v164, v170, "%{public}s TLV length (%u) at offset %zu goes beyond total length (%zu), no backtrace", buf, 0x26u);
          }
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v164 = (id)gLogObj;
          v174 = v245[0];
          if (os_log_type_enabled(v164, (os_log_type_t)v245[0]))
          {
            *(_DWORD *)buf = 136446978;
            *(_QWORD *)&buf[4] = "nw_proxy_config_create_with_agent_data_extended";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v12;
            *(_WORD *)&buf[18] = 2048;
            *(_QWORD *)&buf[20] = v10;
            *(_WORD *)&buf[28] = 2048;
            *(_QWORD *)&buf[30] = v6;
            _os_log_impl(&dword_182FBE000, v164, v174, "%{public}s TLV length (%u) at offset %zu goes beyond total length (%zu), backtrace limit exceeded", buf, 0x26u);
          }
        }

      }
      if (!v163)
        break;
      goto LABEL_423;
    }
    if ((_DWORD)v12)
      v24 = v22 == 0;
    else
      v24 = 1;
    if (v24)
      continue;
    switch(v11)
    {
      case 1:
        v45 = nw_path_copy_endpoint_from_tlv(1, v12, v22);

        v234 = v45;
        continue;
      case 2:
      case 3:
      case 10:
        if (!__s1)
          goto LABEL_146;
        if (stack)
        {
          if ((v223 & 1) != 0)
            goto LABEL_145;
        }
        else
        {
          stack = v225;
          if ((v223 & 1) != 0)
            goto LABEL_145;
        }
        if (v235)
          nw_dictionary_set_value(v235[1], __s1, stack);
        else
          v235 = nw_proxy_config_create_with_stack_internal(v234, stack, __s1);
        if (nw_proxy_config_default_transport(void)::onceToken[0] != -1)
          dispatch_once(nw_proxy_config_default_transport(void)::onceToken, &__block_literal_global_219);
        if (!strcmp(__s1, (const char *)nw_proxy_config_default_transport(void)::default_transport_string))
        {
          v69 = stack;

          v225 = v69;
        }
LABEL_145:

        v223 = 0;
        stack = 0;
LABEL_146:
        switch(v11)
        {
          case 10:
            v72 = keys;
            if (!keys)
              v72 = (char **)xpc_dictionary_create(0, 0, 0);
            keys = v72;
            xpc_dictionary_set_uint64(v72, v22, 2uLL);
            break;
          case 3:
            v71 = keys;
            if (!keys)
              v71 = (char **)xpc_dictionary_create(0, 0, 0);
            keys = v71;
            xpc_dictionary_set_uint64(v71, v22, 3uLL);
            break;
          case 2:
            if (nw_proxy_config_default_transport(void)::onceToken[0] != -1)
              dispatch_once(nw_proxy_config_default_transport(void)::onceToken, &__block_literal_global_219);
            if (strcmp(v22, (const char *)nw_proxy_config_default_transport(void)::default_transport_string))
            {
              v70 = keys;
              if (!keys)
                v70 = (char **)xpc_dictionary_create(0, 0, 0);
              keys = v70;
              xpc_dictionary_set_uint64(v70, v22, 4uLL);
            }
            break;
        }
        __s1 = v22;
        continue;
      case 4:
      case 5:
        if (!stack)
          stack = objc_alloc_init(NWConcrete_nw_protocol_stack);
        v238 = v9;
        if (v12 < 0x2A)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v50 = (id)gLogObj;
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_proxy_config_create_with_agent_data_extended";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v12;
          v51 = (char *)_os_log_send_and_compose_impl();

          v245[0] = 16;
          v244 = 0;
          if (!__nwlog_fault(v51, v245, &v244))
            goto LABEL_306;
          if (v245[0] == 17)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v52 = (id)gLogObj;
            v53 = v245[0];
            if (os_log_type_enabled(v52, (os_log_type_t)v245[0]))
            {
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "nw_proxy_config_create_with_agent_data_extended";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v12;
              _os_log_impl(&dword_182FBE000, v52, v53, "%{public}s NW_NECP_CLIENT_PARAMETER_APPLICATION_PROTOCOL has bad length %u", buf, 0x12u);
            }
          }
          else if (v244)
          {
            v66 = (char *)__nw_create_backtrace_string();
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v52 = (id)gLogObj;
            v67 = v245[0];
            v68 = os_log_type_enabled(v52, (os_log_type_t)v245[0]);
            if (v66)
            {
              if (v68)
              {
                *(_DWORD *)buf = 136446722;
                *(_QWORD *)&buf[4] = "nw_proxy_config_create_with_agent_data_extended";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v12;
                *(_WORD *)&buf[18] = 2082;
                *(_QWORD *)&buf[20] = v66;
                _os_log_impl(&dword_182FBE000, v52, v67, "%{public}s NW_NECP_CLIENT_PARAMETER_APPLICATION_PROTOCOL has bad length %u, dumping backtrace:%{public}s", buf, 0x1Cu);
              }

              free(v66);
              if (!v51)
                goto LABEL_308;
              goto LABEL_307;
            }
            if (v68)
            {
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "nw_proxy_config_create_with_agent_data_extended";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v12;
              _os_log_impl(&dword_182FBE000, v52, v67, "%{public}s NW_NECP_CLIENT_PARAMETER_APPLICATION_PROTOCOL has bad length %u, no backtrace", buf, 0x12u);
            }
          }
          else
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v52 = (id)gLogObj;
            v87 = v245[0];
            if (os_log_type_enabled(v52, (os_log_type_t)v245[0]))
            {
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "nw_proxy_config_create_with_agent_data_extended";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v12;
              _os_log_impl(&dword_182FBE000, v52, v87, "%{public}s NW_NECP_CLIENT_PARAMETER_APPLICATION_PROTOCOL has bad length %u, backtrace limit exceeded", buf, 0x12u);
            }
          }
        }
        else
        {
          v25 = *((unsigned __int16 *)v22 + 20);
          if (v25 + 42 == v12)
          {
            v26 = *((_OWORD *)v22 + 1);
            *(_OWORD *)buf = *(_OWORD *)v22;
            *(_OWORD *)&buf[16] = v26;
            *(_QWORD *)&buf[32] = *((_QWORD *)v22 + 4);
            os_unfair_lock_lock((os_unfair_lock_t)&nw_protocol_registrar_lock);
            v27 = &g_registration_list;
            do
            {
              v27 = (uint64_t *)*v27;
              if (!v27)
                goto LABEL_162;
            }
            while (*(_QWORD *)buf != v27[4]
                 || *(_QWORD *)&buf[8] != v27[5]
                 || *(_QWORD *)&buf[16] != v27[6]
                 || *(_QWORD *)&buf[24] != v27[7]
                 || *(_QWORD *)&buf[32] != v27[8]);
            v32 = (void *)v27[14];
            if (v32)
            {
              v33 = os_retain(v32);
              os_unfair_lock_unlock((os_unfair_lock_t)&nw_protocol_registrar_lock);
              if (v33)
                goto LABEL_187;
            }
            else
            {
LABEL_162:
              os_unfair_lock_unlock((os_unfair_lock_t)&nw_protocol_registrar_lock);
            }
            if (nw_protocol_setup_tcp_definition(void)::onceToken != -1)
              dispatch_once(&nw_protocol_setup_tcp_definition(void)::onceToken, &__block_literal_global_62963);
            v33 = (id)g_tcp_definition;
            identifier = nw_protocol_definition_get_identifier(v33);
            if (nw_protocols_are_equal(identifier, buf))
            {
              if (v33)
                goto LABEL_187;
            }
            else
            {

            }
            v33 = nw_protocol_boringssl_copy_definition();
            v85 = nw_protocol_definition_get_identifier(v33);
            if (nw_protocols_are_equal(v85, buf))
            {
              if (v33)
              {
LABEL_187:
                if (*((_WORD *)v22 + 20))
                  deserialized_options = nw_protocol_create_deserialized_options(v33, (uint64_t)(v22 + 42), *((unsigned __int16 *)v22 + 20));
                else
                  deserialized_options = nw_protocol_create_options(v33);
                v88 = deserialized_options;
                if (!deserialized_options)
                {
                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                  networkd_settings_init();
                  v92 = (id)gLogObj;
                  if (os_log_type_enabled(v92, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)v245 = 136446466;
                    v246 = "nw_proxy_config_create_with_agent_data_extended";
                    v247 = 2112;
                    v248 = v33;
                    _os_log_impl(&dword_182FBE000, v92, OS_LOG_TYPE_DEFAULT, "%{public}s Failed to deserialize options for %@", v245, 0x16u);
                  }
                  p_super = 0;
                  v223 = 1;
                  goto LABEL_324;
                }
                if (nw_protocol_options_is_serializable_tls(deserialized_options))
                {
                  v244 = 1;
                  v89 = nw_tls_create_options_from_serializable(v88, (uint64_t)uu, &v244);

                  if (!v244)
                  {
                    __nwlog_obj();
                    v90 = objc_claimAutoreleasedReturnValue();
                    if (os_log_type_enabled(v90, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)v245 = 136446210;
                      v246 = "nw_proxy_config_create_with_agent_data_extended";
                      _os_log_impl(&dword_182FBE000, v90, OS_LOG_TYPE_ERROR, "%{public}s Failed to serialize tls options", v245, 0xCu);
                    }

                    if (v222)
                      *v222 = 0;
                  }
                  p_super = &v89->super;
                  goto LABEL_321;
                }
                p_super = v88;
                if (nw_protocol_options_is_quic_connection(p_super))
                {

                }
                else
                {
                  is_quic_stream = nw_protocol_options_is_quic_stream(p_super);

                  if (!is_quic_stream)
                  {
LABEL_321:
                    if (v11 == 5)
                    {
                      nw_protocol_stack_set_transport_protocol(&stack->super, p_super);
LABEL_325:

LABEL_326:
                      goto LABEL_327;
                    }
                    nw_protocol_stack_append_application_protocol(stack, p_super);
                    p_super = p_super;
                    v92 = v237;
                    v237 = p_super;
LABEL_324:

                    goto LABEL_325;
                  }
                }
                if (!uuid_is_null(uu))
                {
                  p_super = p_super;
                  v140 = p_super;
                  if (nw_protocol_options_is_quic_stream(p_super))
                  {
                    v141 = nw_quic_stream_copy_shared_connection_options(p_super);

                    v140 = v141;
                  }
                  if (!nw_quic_connection_fetch_client_identity_reference(v140, uu))
                  {
                    if (v222)
                      *v222 = 0;
                    __nwlog_obj();
                    v142 = objc_claimAutoreleasedReturnValue();
                    if (os_log_type_enabled(v142, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)v245 = 136446210;
                      v246 = "nw_proxy_config_create_with_agent_data_extended";
                      _os_log_impl(&dword_182FBE000, v142, OS_LOG_TYPE_ERROR, "%{public}s Failed to fetch quic client identity", v245, 0xCu);
                    }

                  }
                }
                goto LABEL_321;
              }
            }
            else
            {

            }
            __nwlog_obj();
            v33 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)v245 = 136446466;
              v246 = "nw_proxy_config_create_with_agent_data_extended";
              v247 = 2080;
              v248 = buf;
              _os_log_impl(&dword_182FBE000, v33, OS_LOG_TYPE_DEFAULT, "%{public}s No protocol definition registered for \"%s\"", v245, 0x16u);
            }
            v223 = 1;
            goto LABEL_326;
          }
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v64 = (id)gLogObj;
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)&buf[4] = "nw_proxy_config_create_with_agent_data_extended";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v25;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = v12;
          v51 = (char *)_os_log_send_and_compose_impl();

          v245[0] = 16;
          v244 = 0;
          if (!__nwlog_fault(v51, v245, &v244))
          {
LABEL_306:
            if (!v51)
            {
LABEL_308:
              v223 = 1;
              continue;
            }
LABEL_307:
            free(v51);
            goto LABEL_308;
          }
          if (v245[0] == 17)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v52 = (id)gLogObj;
            v65 = v245[0];
            if (os_log_type_enabled(v52, (os_log_type_t)v245[0]))
            {
              *(_DWORD *)buf = 136446722;
              *(_QWORD *)&buf[4] = "nw_proxy_config_create_with_agent_data_extended";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v25;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v12;
              _os_log_impl(&dword_182FBE000, v52, v65, "%{public}s Protocol has bad options length %u (total %u)", buf, 0x18u);
            }
          }
          else if (v244)
          {
            v81 = __nw_create_backtrace_string();
            if (v81)
            {
              v82 = (char *)v81;
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v83 = (id)gLogObj;
              v84 = v245[0];
              if (os_log_type_enabled(v83, (os_log_type_t)v245[0]))
              {
                *(_DWORD *)buf = 136446978;
                *(_QWORD *)&buf[4] = "nw_proxy_config_create_with_agent_data_extended";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v25;
                *(_WORD *)&buf[18] = 1024;
                *(_DWORD *)&buf[20] = v12;
                *(_WORD *)&buf[24] = 2082;
                *(_QWORD *)&buf[26] = v82;
                _os_log_impl(&dword_182FBE000, v83, v84, "%{public}s Protocol has bad options length %u (total %u), dumping backtrace:%{public}s", buf, 0x22u);
              }

              free(v82);
              if (!v51)
                goto LABEL_308;
              goto LABEL_307;
            }
            __nwlog_obj();
            v52 = objc_claimAutoreleasedReturnValue();
            v138 = v245[0];
            if (os_log_type_enabled(v52, (os_log_type_t)v245[0]))
            {
              *(_DWORD *)buf = 136446722;
              *(_QWORD *)&buf[4] = "nw_proxy_config_create_with_agent_data_extended";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v25;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v12;
              _os_log_impl(&dword_182FBE000, v52, v138, "%{public}s Protocol has bad options length %u (total %u), no backtrace", buf, 0x18u);
            }
          }
          else
          {
            __nwlog_obj();
            v52 = objc_claimAutoreleasedReturnValue();
            v105 = v245[0];
            if (os_log_type_enabled(v52, (os_log_type_t)v245[0]))
            {
              *(_DWORD *)buf = 136446722;
              *(_QWORD *)&buf[4] = "nw_proxy_config_create_with_agent_data_extended";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v25;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v12;
              _os_log_impl(&dword_182FBE000, v52, v105, "%{public}s Protocol has bad options length %u (total %u), backtrace limit exceeded", buf, 0x18u);
            }
          }
        }

        goto LABEL_306;
      case 6:
      case 7:
        if (!v237)
          goto LABEL_83;
        v238 = v9;
        v34 = nw_path_copy_endpoint_from_tlv(v11, v12, v22);
        v35 = v237;
        v36 = v34;
        LOBYTE(v35[19].isa) = v11 == 7;
        v237 = v35;
        objc_storeStrong((id *)&v35[3].isa, v34);

        goto LABEL_327;
      case 8:
        if (!v9)
          v9 = xpc_array_create(0, 0);
        xpc_array_set_string(v9, 0xFFFFFFFFFFFFFFFFLL, v22);
        continue;
      case 9:
        v40 = v233;
        if (!v233)
          v40 = xpc_array_create(0, 0);
        v233 = v40;
        xpc_array_set_string(v40, 0xFFFFFFFFFFFFFFFFLL, v22);
        continue;
      case 11:
        v48 = nw_path_copy_endpoint_from_tlv(11, v12, v22);
        if (v48)
        {
          v49 = (_BOOL8)obj;
          if (!obj)
            v49 = nw_array_create();
          obj = (id)v49;
          nw_array_append(v49, v48);
        }

        continue;
      case 12:
        if (v237)
        {
          v238 = v9;
          v38 = nw_path_copy_endpoint_from_tlv(12, v12, v22);
          nw_protocol_options_add_proxy_next_hop(v237, v38);

LABEL_327:
          v9 = v238;
        }
        else
        {
LABEL_83:
          v237 = 0;
        }
        continue;
      case 13:
        if (!v22[(v12 - 1)])
        {
          v39 = v226;
          if (!v226)
            v39 = xpc_array_create(0, 0);
          v226 = v39;
          xpc_array_set_string(v39, 0xFFFFFFFFFFFFFFFFLL, v22);
        }
        continue;
      case 14:
        if (!v22[(v12 - 1)])
        {
          v47 = v227;
          if (!v227)
            v47 = xpc_array_create(0, 0);
          v227 = v47;
          xpc_array_set_string(v47, 0xFFFFFFFFFFFFFFFFLL, v22);
        }
        continue;
      case 15:
        if ((_DWORD)v12 == 16)
          *(_OWORD *)uu = *(_OWORD *)v22;
        continue;
      case 16:
        v239 = v9;
        if (v12 <= 5)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v41 = (id)gLogObj;
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_authentication_credential_create_from_tlv";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v12;
          v42 = (const char *)_os_log_send_and_compose_impl();

          v245[0] = 16;
          v244 = 0;
          if (!__nwlog_fault(v42, v245, &v244))
            goto LABEL_347;
          if (v245[0] == 17)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v43 = (id)gLogObj;
            v44 = v245[0];
            if (os_log_type_enabled(v43, (os_log_type_t)v245[0]))
            {
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "nw_authentication_credential_create_from_tlv";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v12;
              _os_log_impl(&dword_182FBE000, v43, v44, "%{public}s invalid buffer, underflow %u", buf, 0x12u);
            }
            goto LABEL_346;
          }
          if (!v244)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v43 = (id)gLogObj;
            v104 = v245[0];
            if (os_log_type_enabled(v43, (os_log_type_t)v245[0]))
            {
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "nw_authentication_credential_create_from_tlv";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v12;
              _os_log_impl(&dword_182FBE000, v43, v104, "%{public}s invalid buffer, underflow %u, backtrace limit exceeded", buf, 0x12u);
            }
            goto LABEL_346;
          }
          v78 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v43 = (id)gLogObj;
          v79 = v245[0];
          v80 = os_log_type_enabled(v43, (os_log_type_t)v245[0]);
          if (!v78)
          {
            if (v80)
            {
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "nw_authentication_credential_create_from_tlv";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v12;
              _os_log_impl(&dword_182FBE000, v43, v79, "%{public}s invalid buffer, underflow %u, no backtrace", buf, 0x12u);
            }
            goto LABEL_346;
          }
          if (v80)
          {
            *(_DWORD *)buf = 136446722;
            *(_QWORD *)&buf[4] = "nw_authentication_credential_create_from_tlv";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v12;
            *(_WORD *)&buf[18] = 2082;
            *(_QWORD *)&buf[20] = v78;
            _os_log_impl(&dword_182FBE000, v43, v79, "%{public}s invalid buffer, underflow %u, dumping backtrace:%{public}s", buf, 0x1Cu);
          }

          free(v78);
          if (!v42)
            goto LABEL_382;
          goto LABEL_348;
        }
        v54 = *v22;
        v55 = v22 + 2;
        v56 = v22[1];
        v57 = v12 - 2;
        if (v54 == 1)
        {
          if (*v55)
          {
            v58 = 2 - v12;
            v59 = v55;
            do
            {
              v61 = *(unsigned __int8 *)++v59;
              v60 = v61;
              v62 = v61 != 0;
              v63 = v58 + 1;
              if (v58 == -1)
                break;
              ++v58;
            }
            while (v60);
            v57 = -v63;
            if (!v63)
            {
LABEL_232:
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v102 = (id)gLogObj;
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "nw_authentication_credential_create_from_tlv";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v57;
              v99 = (const char *)_os_log_send_and_compose_impl();

              v245[0] = 16;
              v244 = 0;
              if (__nwlog_fault(v99, v245, &v244))
              {
                if (v245[0] == 17)
                {
                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                  networkd_settings_init();
                  v100 = (id)gLogObj;
                  v103 = v245[0];
                  if (os_log_type_enabled(v100, (os_log_type_t)v245[0]))
                  {
                    *(_DWORD *)buf = 136446466;
                    *(_QWORD *)&buf[4] = "nw_authentication_credential_create_from_tlv";
                    *(_WORD *)&buf[12] = 1024;
                    *(_DWORD *)&buf[14] = v57;
                    _os_log_impl(&dword_182FBE000, v100, v103, "%{public}s invalid buffer, underflow %u", buf, 0x12u);
                  }
                  goto LABEL_378;
                }
                if (!v244)
                {
                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                  networkd_settings_init();
                  v100 = (id)gLogObj;
                  v151 = v245[0];
                  if (os_log_type_enabled(v100, (os_log_type_t)v245[0]))
                  {
                    *(_DWORD *)buf = 136446466;
                    *(_QWORD *)&buf[4] = "nw_authentication_credential_create_from_tlv";
                    *(_WORD *)&buf[12] = 1024;
                    *(_DWORD *)&buf[14] = v57;
                    _os_log_impl(&dword_182FBE000, v100, v151, "%{public}s invalid buffer, underflow %u, backtrace limit exceeded", buf, 0x12u);
                  }
                  goto LABEL_378;
                }
                v135 = (char *)__nw_create_backtrace_string();
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                v100 = (id)gLogObj;
                v136 = v245[0];
                v137 = os_log_type_enabled(v100, (os_log_type_t)v245[0]);
                if (!v135)
                {
                  if (v137)
                  {
                    *(_DWORD *)buf = 136446466;
                    *(_QWORD *)&buf[4] = "nw_authentication_credential_create_from_tlv";
                    *(_WORD *)&buf[12] = 1024;
                    *(_DWORD *)&buf[14] = v57;
                    _os_log_impl(&dword_182FBE000, v100, v136, "%{public}s invalid buffer, underflow %u, no backtrace", buf, 0x12u);
                  }
                  goto LABEL_378;
                }
                if (v137)
                {
                  *(_DWORD *)buf = 136446722;
                  *(_QWORD *)&buf[4] = "nw_authentication_credential_create_from_tlv";
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = v57;
                  *(_WORD *)&buf[18] = 2082;
                  *(_QWORD *)&buf[20] = v135;
                  _os_log_impl(&dword_182FBE000, v100, v136, "%{public}s invalid buffer, underflow %u, dumping backtrace:%{public}s", buf, 0x1Cu);
                }

                free(v135);
              }
              goto LABEL_379;
            }
          }
          else
          {
            v62 = 0;
            v59 = v55;
          }
          if (v62)
            goto LABEL_232;
          v76 = v59 + 1;
          v77 = v59 + 1;
          do
          {
            v93 = v57--;
            v95 = *(unsigned __int8 *)v77++;
            v94 = v95;
            if (v95)
              v96 = v93 == 1;
            else
              v96 = 1;
          }
          while (!v96);
          if (v94)
            v97 = 1;
          else
            v97 = v57 == 0;
          if (v97)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v98 = (id)gLogObj;
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_authentication_credential_create_from_tlv";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v57;
            v99 = (const char *)_os_log_send_and_compose_impl();

            v245[0] = 16;
            v244 = 0;
            if (__nwlog_fault(v99, v245, &v244))
            {
              if (v245[0] == 17)
              {
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                v100 = (id)gLogObj;
                v101 = v245[0];
                if (os_log_type_enabled(v100, (os_log_type_t)v245[0]))
                {
                  *(_DWORD *)buf = 136446466;
                  *(_QWORD *)&buf[4] = "nw_authentication_credential_create_from_tlv";
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = v57;
                  _os_log_impl(&dword_182FBE000, v100, v101, "%{public}s invalid buffer, underflow %u", buf, 0x12u);
                }
                goto LABEL_378;
              }
              if (v244)
              {
                v143 = (char *)__nw_create_backtrace_string();
                __nwlog_obj();
                v100 = objc_claimAutoreleasedReturnValue();
                v144 = v245[0];
                v145 = os_log_type_enabled(v100, (os_log_type_t)v245[0]);
                if (v143)
                {
                  if (v145)
                  {
                    *(_DWORD *)buf = 136446722;
                    *(_QWORD *)&buf[4] = "nw_authentication_credential_create_from_tlv";
                    *(_WORD *)&buf[12] = 1024;
                    *(_DWORD *)&buf[14] = v57;
                    *(_WORD *)&buf[18] = 2082;
                    *(_QWORD *)&buf[20] = v143;
                    _os_log_impl(&dword_182FBE000, v100, v144, "%{public}s invalid buffer, underflow %u, dumping backtrace:%{public}s", buf, 0x1Cu);
                  }
                  goto LABEL_353;
                }
                if (v145)
                {
                  *(_DWORD *)buf = 136446466;
                  *(_QWORD *)&buf[4] = "nw_authentication_credential_create_from_tlv";
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = v57;
                  _os_log_impl(&dword_182FBE000, v100, v144, "%{public}s invalid buffer, underflow %u, no backtrace", buf, 0x12u);
                }
              }
              else
              {
                __nwlog_obj();
                v100 = objc_claimAutoreleasedReturnValue();
                v155 = v245[0];
                if (os_log_type_enabled(v100, (os_log_type_t)v245[0]))
                {
                  *(_DWORD *)buf = 136446466;
                  *(_QWORD *)&buf[4] = "nw_authentication_credential_create_from_tlv";
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = v57;
                  _os_log_impl(&dword_182FBE000, v100, v155, "%{public}s invalid buffer, underflow %u, backtrace limit exceeded", buf, 0x12u);
                }
              }
LABEL_378:

            }
LABEL_379:
            if (!v99)
              goto LABEL_382;
LABEL_380:
            v152 = (char *)v99;
LABEL_381:
            free(v152);
            goto LABEL_382;
          }
          v57 = v93 - 2;
          if ((v93 - 2) <= 3)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v106 = (id)gLogObj;
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_authentication_credential_create_from_tlv";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v57;
            v99 = (const char *)_os_log_send_and_compose_impl();

            v245[0] = 16;
            v244 = 0;
            if (!__nwlog_fault(v99, v245, &v244))
              goto LABEL_379;
            if (v245[0] == 17)
            {
              __nwlog_obj();
              v100 = objc_claimAutoreleasedReturnValue();
              v107 = v245[0];
              if (os_log_type_enabled(v100, (os_log_type_t)v245[0]))
              {
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = "nw_authentication_credential_create_from_tlv";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v57;
                _os_log_impl(&dword_182FBE000, v100, v107, "%{public}s invalid buffer, underflow %u", buf, 0x12u);
              }
              goto LABEL_378;
            }
            if (!v244)
            {
              __nwlog_obj();
              v100 = objc_claimAutoreleasedReturnValue();
              v157 = v245[0];
              if (os_log_type_enabled(v100, (os_log_type_t)v245[0]))
              {
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = "nw_authentication_credential_create_from_tlv";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v57;
                _os_log_impl(&dword_182FBE000, v100, v157, "%{public}s invalid buffer, underflow %u, backtrace limit exceeded", buf, 0x12u);
              }
              goto LABEL_378;
            }
            v143 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            v100 = objc_claimAutoreleasedReturnValue();
            v153 = v245[0];
            v154 = os_log_type_enabled(v100, (os_log_type_t)v245[0]);
            if (!v143)
            {
              if (v154)
              {
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = "nw_authentication_credential_create_from_tlv";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v57;
                _os_log_impl(&dword_182FBE000, v100, v153, "%{public}s invalid buffer, underflow %u, no backtrace", buf, 0x12u);
              }
              goto LABEL_378;
            }
            if (v154)
            {
              *(_DWORD *)buf = 136446722;
              *(_QWORD *)&buf[4] = "nw_authentication_credential_create_from_tlv";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v57;
              *(_WORD *)&buf[18] = 2082;
              *(_QWORD *)&buf[20] = v143;
              _os_log_impl(&dword_182FBE000, v100, v153, "%{public}s invalid buffer, underflow %u, dumping backtrace:%{public}s", buf, 0x1Cu);
            }
LABEL_353:

            free(v143);
            if (!v99)
              goto LABEL_382;
            goto LABEL_380;
          }
        }
        else if (v54 == 2)
        {
          v74 = v56;
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v75 = (id)gLogObj;
          if (os_log_type_enabled(v75, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_authentication_credential_create_from_tlv";
            _os_log_impl(&dword_182FBE000, v75, OS_LOG_TYPE_ERROR, "%{public}s Unsupported credential type identity", buf, 0xCu);
          }

          v76 = 0;
          v77 = v55;
          v55 = 0;
          v56 = v74;
        }
        else
        {
          v76 = 0;
          v77 = v55;
          v55 = 0;
        }
        v110 = *(_DWORD *)v77;
        v109 = (unsigned __int8 *)(v77 + 4);
        LODWORD(v108) = v110;
        v111 = v57 - 4;
        if (v57 - 4 != v110)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v130 = (id)gLogObj;
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_authentication_credential_create_from_tlv";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v57 - 4;
          v42 = (const char *)_os_log_send_and_compose_impl();

          v245[0] = 16;
          v244 = 0;
          if (__nwlog_fault(v42, v245, &v244))
          {
            if (v245[0] == 17)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v43 = (id)gLogObj;
              v131 = v245[0];
              if (os_log_type_enabled(v43, (os_log_type_t)v245[0]))
              {
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = "nw_authentication_credential_create_from_tlv";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v111;
                _os_log_impl(&dword_182FBE000, v43, v131, "%{public}s invalid buffer, underflow %u", buf, 0x12u);
              }
              goto LABEL_346;
            }
            if (v244)
            {
              v132 = (char *)__nw_create_backtrace_string();
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v43 = (id)gLogObj;
              v133 = v245[0];
              v134 = os_log_type_enabled(v43, (os_log_type_t)v245[0]);
              if (v132)
              {
                if (v134)
                {
                  *(_DWORD *)buf = 136446722;
                  *(_QWORD *)&buf[4] = "nw_authentication_credential_create_from_tlv";
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = v111;
                  *(_WORD *)&buf[18] = 2082;
                  *(_QWORD *)&buf[20] = v132;
                  _os_log_impl(&dword_182FBE000, v43, v133, "%{public}s invalid buffer, underflow %u, dumping backtrace:%{public}s", buf, 0x1Cu);
                }

                free(v132);
                if (!v42)
                  goto LABEL_382;
                goto LABEL_348;
              }
              if (v134)
              {
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = "nw_authentication_credential_create_from_tlv";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v111;
                _os_log_impl(&dword_182FBE000, v43, v133, "%{public}s invalid buffer, underflow %u, no backtrace", buf, 0x12u);
              }
            }
            else
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v43 = (id)gLogObj;
              v150 = v245[0];
              if (os_log_type_enabled(v43, (os_log_type_t)v245[0]))
              {
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = "nw_authentication_credential_create_from_tlv";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v111;
                _os_log_impl(&dword_182FBE000, v43, v150, "%{public}s invalid buffer, underflow %u, backtrace limit exceeded", buf, 0x12u);
              }
            }
LABEL_346:

          }
LABEL_347:
          if (!v42)
            goto LABEL_382;
LABEL_348:
          v152 = (char *)v42;
          goto LABEL_381;
        }
        v221 = -[NWConcrete_nw_authentication_credential initWithType:]([NWConcrete_nw_authentication_credential alloc], v54);
        nw_authentication_credential_set_persistence(v221, v56);
        if (v54 == 1)
        {
          nw_authentication_credential_set_username(v221, v55);
          nw_authentication_credential_set_password(v221, v76);
        }
        if (!(_DWORD)v108)
        {
          v113 = v221;
          goto LABEL_383;
        }
        v112 = v108;
        v113 = v221;
        break;
      case 17:
        if ((_DWORD)v12 == 16)
        {
          v37 = objects;
          if (!objects)
            v37 = (xpc_object_t *)xpc_array_create(0, 0);
          objects = v37;
          xpc_array_set_uuid(v37, 0xFFFFFFFFFFFFFFFFLL, (const unsigned __int8 *)v22);
        }
        continue;
      case 18:
        if (!v22[(v12 - 1)])
        {
          v46 = v228;
          if (!v228)
            v46 = xpc_array_create(0, 0);
          v228 = v46;
          xpc_array_set_string(v46, 0xFFFFFFFFFFFFFFFFLL, v22);
        }
        continue;
      default:
        continue;
    }
    do
    {
      v115 = *v109++;
      v114 = v115;
      v13 = v108 != 0;
      v108 = v108 - 1;
      if (!v13 || HIDWORD(v108))
      {
        v116 = v108;
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v117 = (id)gLogObj;
        *(_DWORD *)buf = 136446978;
        *(_QWORD *)&buf[4] = "nw_authentication_credential_create_from_tlv";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = "result_length";
        *(_WORD *)&buf[22] = 2048;
        *(_QWORD *)&buf[24] = 1;
        *(_WORD *)&buf[32] = 2048;
        *(_QWORD *)&buf[34] = v108;
        v118 = (char *)_os_log_send_and_compose_impl();

        v245[0] = 16;
        v244 = 0;
        if ((__nwlog_fault(v118, v245, &v244) & 1) == 0)
          goto LABEL_274;
        if (v245[0] == 17)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v119 = (id)gLogObj;
          v120 = v245[0];
          if (os_log_type_enabled(v119, (os_log_type_t)v245[0]))
          {
            *(_DWORD *)buf = 136446978;
            *(_QWORD *)&buf[4] = "nw_authentication_credential_create_from_tlv";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = "result_length";
            *(_WORD *)&buf[22] = 2048;
            *(_QWORD *)&buf[24] = 1;
            *(_WORD *)&buf[32] = 2048;
            *(_QWORD *)&buf[34] = v108;
            _os_log_impl(&dword_182FBE000, v119, v120, "%{public}s Underflow: %{public}s, decrement %llu, result %llu", buf, 0x2Au);
          }
        }
        else
        {
          if (v244)
          {
            v121 = (char *)__nw_create_backtrace_string();
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v122 = (id)gLogObj;
            v123 = v245[0];
            v124 = os_log_type_enabled(v122, (os_log_type_t)v245[0]);
            if (v121)
            {
              if (v124)
              {
                *(_DWORD *)buf = 136447234;
                *(_QWORD *)&buf[4] = "nw_authentication_credential_create_from_tlv";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = "result_length";
                *(_WORD *)&buf[22] = 2048;
                *(_QWORD *)&buf[24] = 1;
                *(_WORD *)&buf[32] = 2048;
                *(_QWORD *)&buf[34] = v116;
                *(_WORD *)&buf[42] = 2082;
                *(_QWORD *)&buf[44] = v121;
                _os_log_impl(&dword_182FBE000, v122, v123, "%{public}s Underflow: %{public}s, decrement %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
              }

              v113 = v221;
              free(v121);
              if (!v118)
                goto LABEL_276;
              goto LABEL_275;
            }
            if (v124)
            {
              *(_DWORD *)buf = 136446978;
              *(_QWORD *)&buf[4] = "nw_authentication_credential_create_from_tlv";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = "result_length";
              *(_WORD *)&buf[22] = 2048;
              *(_QWORD *)&buf[24] = 1;
              *(_WORD *)&buf[32] = 2048;
              *(_QWORD *)&buf[34] = v116;
              _os_log_impl(&dword_182FBE000, v122, v123, "%{public}s Underflow: %{public}s, decrement %llu, result %llu, no backtrace", buf, 0x2Au);
            }

            v113 = v221;
LABEL_274:
            if (!v118)
            {
LABEL_276:
              LODWORD(v108) = 0;
              goto LABEL_277;
            }
LABEL_275:
            free(v118);
            goto LABEL_276;
          }
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v119 = (id)gLogObj;
          v125 = v245[0];
          if (os_log_type_enabled(v119, (os_log_type_t)v245[0]))
          {
            *(_DWORD *)buf = 136446978;
            *(_QWORD *)&buf[4] = "nw_authentication_credential_create_from_tlv";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = "result_length";
            *(_WORD *)&buf[22] = 2048;
            *(_QWORD *)&buf[24] = 1;
            *(_WORD *)&buf[32] = 2048;
            *(_QWORD *)&buf[34] = v108;
            _os_log_impl(&dword_182FBE000, v119, v125, "%{public}s Underflow: %{public}s, decrement %llu, result %llu, backtrace limit exceeded", buf, 0x2Au);
          }
        }

        v113 = v221;
        goto LABEL_274;
      }
LABEL_277:
      nw_authentication_credential_add_valid_authentication_type(v113, v114);
      --v112;
    }
    while (v112);
    if (!(_DWORD)v108)
      goto LABEL_383;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v126 = (id)gLogObj;
    *(_DWORD *)buf = 136446722;
    *(_QWORD *)&buf[4] = "nw_authentication_credential_create_from_tlv";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v108;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = 0;
    v127 = (char *)_os_log_send_and_compose_impl();

    v245[0] = 16;
    v244 = 0;
    if (__nwlog_fault(v127, v245, &v244))
    {
      if (v245[0] == 17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v128 = (id)gLogObj;
        v129 = v245[0];
        if (os_log_type_enabled(v128, (os_log_type_t)v245[0]))
        {
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)&buf[4] = "nw_authentication_credential_create_from_tlv";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v108;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = 0;
          _os_log_impl(&dword_182FBE000, v128, v129, "%{public}s invalid result, result_length %u, types_count %u", buf, 0x18u);
        }
        goto LABEL_283;
      }
      if (v244)
      {
        v146 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v147 = objc_claimAutoreleasedReturnValue();
        v148 = v245[0];
        v149 = os_log_type_enabled(v147, (os_log_type_t)v245[0]);
        if (v146)
        {
          if (v149)
          {
            *(_DWORD *)buf = 136446978;
            *(_QWORD *)&buf[4] = "nw_authentication_credential_create_from_tlv";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v108;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = 0;
            *(_WORD *)&buf[24] = 2082;
            *(_QWORD *)&buf[26] = v146;
            _os_log_impl(&dword_182FBE000, v147, v148, "%{public}s invalid result, result_length %u, types_count %u, dumping backtrace:%{public}s", buf, 0x22u);
          }

          v113 = v221;
          free(v146);
        }
        else
        {
          if (v149)
          {
            *(_DWORD *)buf = 136446722;
            *(_QWORD *)&buf[4] = "nw_authentication_credential_create_from_tlv";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v108;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = 0;
            _os_log_impl(&dword_182FBE000, v147, v148, "%{public}s invalid result, result_length %u, types_count %u, no backtrace", buf, 0x18u);
          }

          v113 = v221;
        }
      }
      else
      {
        __nwlog_obj();
        v128 = objc_claimAutoreleasedReturnValue();
        v156 = v245[0];
        if (os_log_type_enabled(v128, (os_log_type_t)v245[0]))
        {
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)&buf[4] = "nw_authentication_credential_create_from_tlv";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v108;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = 0;
          _os_log_impl(&dword_182FBE000, v128, v156, "%{public}s invalid result, result_length %u, types_count %u, backtrace limit exceeded", buf, 0x18u);
        }
LABEL_283:

        v113 = v221;
      }
    }
    if (v127)
      free(v127);

LABEL_382:
    v113 = 0;
LABEL_383:

    v232 = v113;
    v9 = v239;
  }
  while (v6 >= 5 && v10 < v242);
  v240 = v9;
  if (!v234)
  {
    v4 = (_QWORD *)&unk_183BA7000;
LABEL_385:
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v158 = (id)gLogObj;
    v243 = v4[193];
    *(_DWORD *)buf = v243;
    *(_QWORD *)&buf[4] = "nw_proxy_config_create_with_agent_data_extended";
    v159 = (char *)_os_log_send_and_compose_impl();

    v245[0] = 16;
    v244 = 0;
    if (__nwlog_fault(v159, v245, &v244))
    {
      if (v245[0] == 17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v160 = (id)gLogObj;
        v161 = v245[0];
        if (os_log_type_enabled(v160, (os_log_type_t)v245[0]))
        {
          *(_DWORD *)buf = v243;
          *(_QWORD *)&buf[4] = "nw_proxy_config_create_with_agent_data_extended";
          _os_log_impl(&dword_182FBE000, v160, v161, "%{public}s called with null endpoint", buf, 0xCu);
        }
      }
      else if (v244)
      {
        v166 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v160 = (id)gLogObj;
        v167 = v245[0];
        v168 = os_log_type_enabled(v160, (os_log_type_t)v245[0]);
        if (v166)
        {
          if (v168)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_proxy_config_create_with_agent_data_extended";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v166;
            _os_log_impl(&dword_182FBE000, v160, v167, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v166);
          if (!v159)
            goto LABEL_415;
          goto LABEL_414;
        }
        if (v168)
        {
          *(_DWORD *)buf = v243;
          *(_QWORD *)&buf[4] = "nw_proxy_config_create_with_agent_data_extended";
          _os_log_impl(&dword_182FBE000, v160, v167, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v160 = (id)gLogObj;
        v172 = v245[0];
        if (os_log_type_enabled(v160, (os_log_type_t)v245[0]))
        {
          *(_DWORD *)buf = v243;
          *(_QWORD *)&buf[4] = "nw_proxy_config_create_with_agent_data_extended";
          _os_log_impl(&dword_182FBE000, v160, v172, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
    if (!v159)
    {
LABEL_415:
      v234 = 0;
      v173 = 0;
      goto LABEL_439;
    }
LABEL_414:
    free(v159);
    goto LABEL_415;
  }
  if (!stack)
  {
    stack = v225;
    if (!stack)
    {
      __nwlog_obj();
      v203 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_proxy_config_create_with_agent_data_extended";
      v204 = (char *)_os_log_send_and_compose_impl();

      v245[0] = 16;
      v244 = 0;
      if (__nwlog_fault(v204, v245, &v244))
      {
        if (v245[0] == 17)
        {
          __nwlog_obj();
          v205 = objc_claimAutoreleasedReturnValue();
          v206 = v245[0];
          if (os_log_type_enabled(v205, (os_log_type_t)v245[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_proxy_config_create_with_agent_data_extended";
            _os_log_impl(&dword_182FBE000, v205, v206, "%{public}s called with null stack", buf, 0xCu);
          }
        }
        else if (v244)
        {
          v211 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v205 = objc_claimAutoreleasedReturnValue();
          v212 = v245[0];
          v213 = os_log_type_enabled(v205, (os_log_type_t)v245[0]);
          if (v211)
          {
            if (v213)
            {
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "nw_proxy_config_create_with_agent_data_extended";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v211;
              _os_log_impl(&dword_182FBE000, v205, v212, "%{public}s called with null stack, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(v211);
            goto LABEL_506;
          }
          if (v213)
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_proxy_config_create_with_agent_data_extended";
            _os_log_impl(&dword_182FBE000, v205, v212, "%{public}s called with null stack, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          __nwlog_obj();
          v205 = objc_claimAutoreleasedReturnValue();
          v219 = v245[0];
          if (os_log_type_enabled(v205, (os_log_type_t)v245[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_proxy_config_create_with_agent_data_extended";
            _os_log_impl(&dword_182FBE000, v205, v219, "%{public}s called with null stack, backtrace limit exceeded", buf, 0xCu);
          }
        }

      }
LABEL_506:
      if (v204)
        free(v204);
      v225 = 0;
      stack = 0;
      v173 = 0;
      goto LABEL_439;
    }
  }
  v175 = v235;
  if (v235)
  {
    nw_dictionary_set_value(v235[1], __s1, stack);
    goto LABEL_438;
  }
  if ((v223 & 1) != 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v176 = (id)gLogObj;
    if (os_log_type_enabled(v176, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_proxy_config_create_with_agent_data_extended";
      _os_log_impl(&dword_182FBE000, v176, OS_LOG_TYPE_ERROR, "%{public}s Failed to create proxy config, error in deserializing stack", buf, 0xCu);
    }

    goto LABEL_433;
  }
  if (__s1)
    v177 = nw_proxy_config_create_with_stack_internal(v234, stack, __s1);
  else
    v177 = (uint64_t *)nw_proxy_config_create_with_stack(v234, stack);
  v175 = v177;
  if (v177)
  {
LABEL_438:
    objc_storeStrong((id *)v175 + 6, obj);
    objc_storeStrong((id *)v175 + 2, keys);
    objc_storeStrong((id *)v175 + 3, v9);
    objc_storeStrong((id *)v175 + 4, v233);
    *((_DWORD *)v175 + 38) = *(unsigned __int8 *)(a1 + 20);
    *((_DWORD *)v175 + 39) = *(unsigned __int16 *)(a1 + 16);
    *((_WORD *)v175 + 84) = *(_WORD *)(a1 + 18);
    *((_DWORD *)v175 + 40) = *(unsigned __int8 *)(a1 + 21);
    v178 = *((_BYTE *)v175 + 170) & 0xFE | *(_BYTE *)(a1 + 22) & 1;
    *((_BYTE *)v175 + 170) = v178;
    v179 = v178 & 0xFFFFFFFD | (2 * ((*(unsigned __int8 *)(a1 + 22) >> 1) & 1));
    *((_BYTE *)v175 + 170) = v179;
    v180 = v179 & 0xFFFFFFFB | (4 * ((*(unsigned __int16 *)(a1 + 22) >> 13) & 1));
    *((_BYTE *)v175 + 170) = v180;
    v181 = v180 & 0xFFFFFFF7 | (8 * ((*(unsigned __int8 *)(a1 + 22) >> 2) & 1));
    *((_BYTE *)v175 + 170) = v181;
    v182 = v181 & 0xFFFFFFEF | (16 * ((*(unsigned __int8 *)(a1 + 22) >> 3) & 1));
    *((_BYTE *)v175 + 170) = v182;
    v183 = v182 & 0xFFFFFFDF | (32 * ((*(unsigned __int8 *)(a1 + 22) >> 4) & 1));
    *((_BYTE *)v175 + 170) = v183;
    LOBYTE(v183) = v183 & 0xBF | (((*(_BYTE *)(a1 + 22) & 0x20) != 0) << 6);
    *((_BYTE *)v175 + 170) = v183;
    *((_BYTE *)v175 + 170) = (2 * *(_BYTE *)(a1 + 22)) & 0x80 | v183 & 0x7F;
    v184 = *((_BYTE *)v175 + 171) & 0xFE | (*(unsigned __int8 *)(a1 + 22) >> 7);
    *((_BYTE *)v175 + 171) = v184;
    v185 = v184 & 0xFFFFFFFD | (2 * (HIBYTE(*(unsigned __int16 *)(a1 + 22)) & 1));
    *((_BYTE *)v175 + 171) = v185;
    v186 = v185 & 0xFFFFFFFB | (4 * ((*(unsigned __int16 *)(a1 + 22) >> 9) & 1));
    *((_BYTE *)v175 + 171) = v186;
    v187 = v186 & 0xFFFFFFF7 | (8 * ((*(unsigned __int16 *)(a1 + 22) >> 10) & 1));
    *((_BYTE *)v175 + 171) = v187;
    v188 = v187 & 0xFFFFFFEF | (16 * ((*(unsigned __int16 *)(a1 + 22) >> 11) & 1));
    *((_BYTE *)v175 + 171) = v188;
    LOBYTE(v188) = v188 & 0xBF | (((*(_WORD *)(a1 + 22) & 0x1000) != 0) << 6);
    *((_BYTE *)v175 + 171) = v188;
    *((_BYTE *)v175 + 171) = (*(unsigned __int16 *)(a1 + 22) >> 7) & 0x80 | v188 & 0x7F;
    v189 = *((_BYTE *)v175 + 172) & 0xFE | (*(unsigned __int16 *)(a1 + 22) >> 15);
    *((_BYTE *)v175 + 172) = v189;
    *((_BYTE *)v175 + 172) = (2 * (*(_BYTE *)(a1 + 24) & 1)) | v189 & 0xFD;
    *(_OWORD *)(v175 + 9) = *(_OWORD *)a1;
    *(_OWORD *)(v175 + 7) = *(_OWORD *)uu;
    objc_storeStrong((id *)v175 + 15, v226);
    objc_storeStrong((id *)v175 + 16, v227);
    objc_storeStrong((id *)v175 + 17, v228);
    objc_storeStrong((id *)v175 + 13, v232);
    objc_storeStrong((id *)v175 + 18, objects);
    v173 = v175;
    v235 = v173;
    goto LABEL_439;
  }
  __nwlog_obj();
  v207 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_proxy_config_create_with_agent_data_extended";
  v208 = (char *)_os_log_send_and_compose_impl();

  v245[0] = 16;
  v244 = 0;
  if (__nwlog_fault(v208, v245, &v244))
  {
    if (v245[0] == 17)
    {
      __nwlog_obj();
      v209 = objc_claimAutoreleasedReturnValue();
      v210 = v245[0];
      if (os_log_type_enabled(v209, (os_log_type_t)v245[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_proxy_config_create_with_agent_data_extended";
        _os_log_impl(&dword_182FBE000, v209, v210, "%{public}s called with null config", buf, 0xCu);
      }
      goto LABEL_511;
    }
    if (v244)
    {
      v214 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v209 = objc_claimAutoreleasedReturnValue();
      v215 = v245[0];
      v216 = os_log_type_enabled(v209, (os_log_type_t)v245[0]);
      if (v214)
      {
        if (v216)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_proxy_config_create_with_agent_data_extended";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v214;
          _os_log_impl(&dword_182FBE000, v209, v215, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v214);
        goto LABEL_512;
      }
      if (v216)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_proxy_config_create_with_agent_data_extended";
        _os_log_impl(&dword_182FBE000, v209, v215, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v209 = objc_claimAutoreleasedReturnValue();
      v220 = v245[0];
      if (os_log_type_enabled(v209, (os_log_type_t)v245[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_proxy_config_create_with_agent_data_extended";
        _os_log_impl(&dword_182FBE000, v209, v220, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_511:

  }
LABEL_512:
  if (v208)
    free(v208);
LABEL_433:
  v235 = 0;
  v173 = 0;
LABEL_439:

  return v173;
}

void sub_183725CDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,void *a25,void *a26,void *a27,uint64_t a28,void *a29,void *a30,void *a31,void *a32,void *a33,void *a34,void *a35,void *a36,void *a37,void *a38)
{
  void *v38;
  void *v39;
  void *v40;

  _Unwind_Resume(a1);
}

uint64_t *nw_proxy_config_create_with_stack_internal(void *a1, void *a2, const char *a3)
{
  id v6;
  id v7;
  void *v8;
  NWConcrete_nw_proxy_config *v9;
  uint64_t *v10;
  _QWORD *v11;
  void *v12;
  uint64_t *v13;
  id v14;
  char *v15;
  NSObject *v16;
  os_log_type_t v17;
  char *backtrace_string;
  os_log_type_t v19;
  _BOOL4 v20;
  os_log_type_t v21;
  void *v23;
  char *v24;
  NSObject *v25;
  os_log_type_t v26;
  void *v27;
  os_log_type_t v28;
  char *v29;
  os_log_type_t v30;
  _BOOL4 v31;
  os_log_type_t v32;
  _BOOL4 v33;
  os_log_type_t v34;
  os_log_type_t v35;
  char v36;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v39;
  __int16 v40;
  char *v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v6 = a1;
  v7 = a2;
  v8 = v7;
  if (v6)
  {
    if (v7)
    {
      v9 = objc_alloc_init(NWConcrete_nw_proxy_config);
      v10 = (uint64_t *)v9;
      if (v9)
      {
        v9->mode = 1;
        objc_storeStrong((id *)&v9->endpoint, a1);
        v11 = nw_dictionary_create();
        v12 = (void *)v10[1];
        v10[1] = (uint64_t)v11;

        nw_dictionary_set_value(v10[1], a3, v8);
        v13 = v10;
LABEL_24:

        goto LABEL_25;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v14 = (id)gLogObj;
      *(_DWORD *)buf = 136446210;
      v39 = "nw_proxy_config_create_with_stack_internal";
      v15 = (char *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v36 = 0;
      if (__nwlog_fault(v15, &type, &v36))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v16 = (id)gLogObj;
          v17 = type;
          if (os_log_type_enabled(v16, type))
          {
            *(_DWORD *)buf = 136446210;
            v39 = "nw_proxy_config_create_with_stack_internal";
            _os_log_impl(&dword_182FBE000, v16, v17, "%{public}s [nw_proxy_config init] failed", buf, 0xCu);
          }
        }
        else if (v36)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v16 = (id)gLogObj;
          v19 = type;
          v20 = os_log_type_enabled(v16, type);
          if (backtrace_string)
          {
            if (v20)
            {
              *(_DWORD *)buf = 136446466;
              v39 = "nw_proxy_config_create_with_stack_internal";
              v40 = 2082;
              v41 = backtrace_string;
              _os_log_impl(&dword_182FBE000, v16, v19, "%{public}s [nw_proxy_config init] failed, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(backtrace_string);
            if (!v15)
              goto LABEL_24;
            goto LABEL_23;
          }
          if (v20)
          {
            *(_DWORD *)buf = 136446210;
            v39 = "nw_proxy_config_create_with_stack_internal";
            _os_log_impl(&dword_182FBE000, v16, v19, "%{public}s [nw_proxy_config init] failed, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v16 = (id)gLogObj;
          v21 = type;
          if (os_log_type_enabled(v16, type))
          {
            *(_DWORD *)buf = 136446210;
            v39 = "nw_proxy_config_create_with_stack_internal";
            _os_log_impl(&dword_182FBE000, v16, v21, "%{public}s [nw_proxy_config init] failed, backtrace limit exceeded", buf, 0xCu);
          }
        }

      }
      if (!v15)
        goto LABEL_24;
LABEL_23:
      free(v15);
      goto LABEL_24;
    }
    __nwlog_obj();
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v39 = "nw_proxy_config_create_with_stack_internal";
    v24 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v36 = 0;
    if (__nwlog_fault(v24, &type, &v36))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v25 = objc_claimAutoreleasedReturnValue();
        v28 = type;
        if (os_log_type_enabled(v25, type))
        {
          *(_DWORD *)buf = 136446210;
          v39 = "nw_proxy_config_create_with_stack_internal";
          _os_log_impl(&dword_182FBE000, v25, v28, "%{public}s called with null stack", buf, 0xCu);
        }
LABEL_57:

        goto LABEL_58;
      }
      if (!v36)
      {
        __nwlog_obj();
        v25 = objc_claimAutoreleasedReturnValue();
        v35 = type;
        if (os_log_type_enabled(v25, type))
        {
          *(_DWORD *)buf = 136446210;
          v39 = "nw_proxy_config_create_with_stack_internal";
          _os_log_impl(&dword_182FBE000, v25, v35, "%{public}s called with null stack, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_57;
      }
      v29 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v25 = objc_claimAutoreleasedReturnValue();
      v32 = type;
      v33 = os_log_type_enabled(v25, type);
      if (!v29)
      {
        if (v33)
        {
          *(_DWORD *)buf = 136446210;
          v39 = "nw_proxy_config_create_with_stack_internal";
          _os_log_impl(&dword_182FBE000, v25, v32, "%{public}s called with null stack, no backtrace", buf, 0xCu);
        }
        goto LABEL_57;
      }
      if (v33)
      {
        *(_DWORD *)buf = 136446466;
        v39 = "nw_proxy_config_create_with_stack_internal";
        v40 = 2082;
        v41 = v29;
        _os_log_impl(&dword_182FBE000, v25, v32, "%{public}s called with null stack, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_45;
    }
  }
  else
  {
    __nwlog_obj();
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v39 = "nw_proxy_config_create_with_stack_internal";
    v24 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v36 = 0;
    if (__nwlog_fault(v24, &type, &v36))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v25 = objc_claimAutoreleasedReturnValue();
        v26 = type;
        if (os_log_type_enabled(v25, type))
        {
          *(_DWORD *)buf = 136446210;
          v39 = "nw_proxy_config_create_with_stack_internal";
          _os_log_impl(&dword_182FBE000, v25, v26, "%{public}s called with null proxy_endpoint", buf, 0xCu);
        }
        goto LABEL_57;
      }
      if (!v36)
      {
        __nwlog_obj();
        v25 = objc_claimAutoreleasedReturnValue();
        v34 = type;
        if (os_log_type_enabled(v25, type))
        {
          *(_DWORD *)buf = 136446210;
          v39 = "nw_proxy_config_create_with_stack_internal";
          _os_log_impl(&dword_182FBE000, v25, v34, "%{public}s called with null proxy_endpoint, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_57;
      }
      v29 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v25 = objc_claimAutoreleasedReturnValue();
      v30 = type;
      v31 = os_log_type_enabled(v25, type);
      if (!v29)
      {
        if (v31)
        {
          *(_DWORD *)buf = 136446210;
          v39 = "nw_proxy_config_create_with_stack_internal";
          _os_log_impl(&dword_182FBE000, v25, v30, "%{public}s called with null proxy_endpoint, no backtrace", buf, 0xCu);
        }
        goto LABEL_57;
      }
      if (v31)
      {
        *(_DWORD *)buf = 136446466;
        v39 = "nw_proxy_config_create_with_stack_internal";
        v40 = 2082;
        v41 = v29;
        _os_log_impl(&dword_182FBE000, v25, v30, "%{public}s called with null proxy_endpoint, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_45:

      free(v29);
    }
  }
LABEL_58:
  if (v24)
    free(v24);
  v10 = 0;
LABEL_25:

  return v10;
}

void sub_183726554(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void ___ZL42nw_proxy_config_initialize_known_protocolsv_block_invoke()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  if (nw_protocol_socksv4_copy_definition::onceToken != -1)
    dispatch_once(&nw_protocol_socksv4_copy_definition::onceToken, &__block_literal_global_44100);
  v0 = (void *)nw_protocol_socksv4_copy_definition::definition;
  if (nw_protocol_socksv4_copy_definition::definition)
    v0 = os_retain((void *)nw_protocol_socksv4_copy_definition::definition);

  if (nw_protocol_socksv5_copy_definition::onceToken != -1)
    dispatch_once(&nw_protocol_socksv5_copy_definition::onceToken, &__block_literal_global_83487);
  v1 = (void *)nw_protocol_socksv5_copy_definition::definition;
  if (nw_protocol_socksv5_copy_definition::definition)
    v1 = os_retain((void *)nw_protocol_socksv5_copy_definition::definition);

  if (nw_protocol_masque_get_definition(void)::onceToken != -1)
    dispatch_once(&nw_protocol_masque_get_definition(void)::onceToken, &__block_literal_global_27122);
  v2 = (void *)nw_protocol_masque_get_definition(void)::definition;
  if (nw_protocol_masque_get_definition(void)::definition)
  {
    v2 = os_retain((void *)nw_protocol_masque_get_definition(void)::definition);
    if (v2)
      v2 = os_retain(v2);
  }

  if (nw_protocol_masque_listener_get_definition(void)::onceToken[0] != -1)
    dispatch_once(nw_protocol_masque_listener_get_definition(void)::onceToken, &__block_literal_global_186);
  v3 = (void *)nw_protocol_masque_listener_get_definition(void)::definition;
  if (nw_protocol_masque_listener_get_definition(void)::definition)
  {
    v3 = os_retain((void *)nw_protocol_masque_listener_get_definition(void)::definition);
    if (v3)
      v3 = os_retain(v3);
  }

  if (nw_protocol_copy_serializable_tls_definition::onceToken != -1)
    dispatch_once(&nw_protocol_copy_serializable_tls_definition::onceToken, &__block_literal_global_72016);

  if (nw_protocol_setup_tcp_definition(void)::onceToken != -1)
    dispatch_once(&nw_protocol_setup_tcp_definition(void)::onceToken, &__block_literal_global_62963);

  if (nw_protocol_setup_udp_definition(void)::onceToken[0] != -1)
    dispatch_once(nw_protocol_setup_udp_definition(void)::onceToken, &__block_literal_global_45078);

  if (nw_protocol_copy_quic_stream_definition::onceToken != -1)
    dispatch_once(&nw_protocol_copy_quic_stream_definition::onceToken, &__block_literal_global_12_55083);

  if (nw_protocol_copy_http_messaging_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_messaging_definition_onceToken, &__block_literal_global_57_72293);

  if (nw_protocol_copy_http1_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http1_definition_onceToken, &__block_literal_global_72242);

  if (nw_protocol_copy_http2_definition_onceToken[0] != -1)
    dispatch_once(nw_protocol_copy_http2_definition_onceToken, &__block_literal_global_3_72325);

  if (nw_protocol_copy_http3_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http3_definition_onceToken, &__block_literal_global_10_72326);

  if (nw_protocol_demux_copy_definition::onceToken != -1)
    dispatch_once(&nw_protocol_demux_copy_definition::onceToken, &__block_literal_global_5_25927);
  v4 = (void *)nw_protocol_demux_copy_definition::definition;
  if (nw_protocol_demux_copy_definition::definition)
    v4 = os_retain((void *)nw_protocol_demux_copy_definition::definition);

  if (nw_protocol_copy_oblivious_http_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_oblivious_http_definition_onceToken, &__block_literal_global_36_73533);

  if (nw_protocol_copy_oblivious_http_contexts_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_oblivious_http_contexts_definition_onceToken, &__block_literal_global_37);

  if (nw_protocol_copy_qpod_definition::onceToken != -1)
    dispatch_once(&nw_protocol_copy_qpod_definition::onceToken, &__block_literal_global_28_56150);

  if (nw_proxy_copy_http_connect_definition::onceToken != -1)
    dispatch_once(&nw_proxy_copy_http_connect_definition::onceToken, &__block_literal_global_92);

}

BOOL nw_proxy_config_copy_agent_data(uint64_t a1)
{
  const char *v1;
  void *v2;
  void *v3;
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  size_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  int is_null;
  unint64_t v28;
  unint64_t v29;
  void *v30;
  NSObject *v31;
  dispatch_data_t v32;
  id v33;
  char *v34;
  NSObject *v35;
  os_log_type_t v36;
  char *v37;
  os_log_type_t v38;
  _BOOL4 v39;
  os_log_type_t v40;
  const char **v41;
  const char **v42;
  const char *v43;
  unsigned int v44;
  const char *v45;
  unsigned int v46;
  char *v47;
  unsigned int count;
  int v49;
  unsigned int v50;
  uint64_t v51;
  id v52;
  char *v53;
  NSObject *v54;
  os_log_type_t v55;
  NSObject *v56;
  uint64_t v57;
  const char *v58;
  char *v59;
  NSObject *v60;
  os_log_type_t v61;
  os_log_type_t v62;
  os_log_type_t v63;
  BOOL v64;
  id v65;
  char *v66;
  NSObject *v67;
  os_log_type_t v68;
  const char *v69;
  char *v70;
  NSObject *v71;
  os_log_type_t v72;
  os_log_type_t v73;
  os_log_type_t v74;
  uint64_t v75;
  unint64_t v76;
  size_t v77;
  id v78;
  char *v79;
  NSObject *v80;
  os_log_type_t v81;
  NSObject *v82;
  void *v83;
  _BOOL8 result;
  char *v85;
  NSObject *v86;
  os_log_type_t v87;
  _BOOL4 v88;
  os_log_type_t v89;
  _BYTE *v90;
  char v91;
  char v92;
  _BYTE *v93;
  uint64_t *v94;
  _BYTE *v95;
  uint64_t *v96;
  _BYTE *v97;
  char *v98;
  size_t v99;
  id v100;
  char *v101;
  NSObject *v102;
  os_log_type_t v103;
  char *v104;
  os_log_type_t v105;
  _BOOL4 v106;
  os_log_type_t v107;
  _BOOL8 v108;
  int should_proxy_transport_at_level;
  char v110;
  unsigned __int8 v111;
  unint64_t v112;
  int v113;
  size_t v114;
  id v115;
  unint64_t v116;
  id v117;
  int v118;
  char *v119;
  NSObject *v120;
  os_log_type_t v121;
  NSObject *v122;
  uint64_t v123;
  char *v124;
  os_log_type_t v125;
  _BOOL4 v126;
  os_log_type_t v127;
  _BOOL8 v128;
  uint64_t v129;
  NSObject *v130;
  id v131;
  Class isa;
  Class v133;
  unsigned __int8 *v134;
  size_t v135;
  NSObject *v136;
  void *v137;
  const void *v138;
  size_t v139;
  NSObject *v140;
  void *v141;
  char *v142;
  NSObject *v143;
  os_log_type_t v144;
  void *v145;
  os_log_type_t v146;
  char *backtrace_string;
  os_log_type_t v148;
  _BOOL4 v149;
  void *v150;
  char *v151;
  NSObject *v152;
  os_log_type_t v153;
  NSObject *v154;
  void *v155;
  void *v156;
  os_log_type_t v157;
  char *v158;
  os_log_type_t v159;
  _BOOL4 v160;
  void *v161;
  NSObject *v162;
  void *v163;
  void *v164;
  char *v165;
  NSObject *v166;
  os_log_type_t v167;
  uint64_t v168;
  unint64_t v169;
  void *v170;
  int v171;
  char *v172;
  NSObject *v173;
  os_log_type_t v174;
  os_log_type_t v175;
  void *v176;
  char *v177;
  NSObject *v178;
  os_log_type_t v179;
  void *v180;
  NSObject *v181;
  os_log_type_t v182;
  char *v183;
  os_log_type_t v184;
  _BOOL4 v185;
  char *v186;
  os_log_type_t v187;
  _BOOL4 v188;
  char *v189;
  os_log_type_t v190;
  _BOOL4 v191;
  char *v192;
  os_log_type_t v193;
  _BOOL4 v194;
  os_log_type_t v195;
  char *v196;
  os_log_type_t v197;
  _BOOL4 v198;
  char *v199;
  os_log_type_t v200;
  _BOOL4 v201;
  void *v202;
  int v203;
  os_log_type_t v204;
  os_log_type_t v205;
  os_log_type_t v206;
  os_log_type_t v207;
  os_log_type_t v208;
  os_log_type_t v209;
  os_log_type_t v210;
  char *v211;
  os_log_type_t v212;
  _BOOL4 v213;
  os_log_type_t v214;
  unsigned int v215;
  unsigned int v216;
  _BOOL4 v217;
  unsigned int v218;
  void *v219;
  void *v220;
  void *buffer;
  char *v222;
  _QWORD v223[6];
  _QWORD v224[6];
  _QWORD v225[6];
  _QWORD v226[6];
  _QWORD v227[6];
  _QWORD v228[6];
  _QWORD applier[6];
  _QWORD v230[4];
  NSObject *v231;
  id v232;
  uint64_t *v233;
  const char *v234;
  unint64_t v235;
  uint64_t v236;
  uint64_t *v237;
  uint64_t v238;
  char *v239;
  _QWORD v240[5];
  uint64_t v241;
  uint64_t *v242;
  uint64_t v243;
  uint64_t v244;
  _QWORD v245[5];
  _QWORD v246[5];
  _QWORD enumerator[5];
  uint64_t v248;
  uint64_t *v249;
  uint64_t v250;
  uint64_t v251;
  os_log_type_t type[8];
  uint64_t v253;
  uint64_t (*v254)(uint64_t, uint64_t, void *);
  void *v255;
  uint64_t *v256;
  uint64_t v257;
  uint64_t *v258;
  uint64_t v259;
  _BYTE *v260;
  char v261;
  os_log_type_t v262;
  uint8_t buf[4];
  const char *v264;
  __int16 v265;
  char *v266;
  uint8_t v267[4];
  const char *v268;
  __int16 v269;
  _BYTE v270[10];
  _BYTE v271[10];
  _BYTE v272[10];
  _BYTE v273[10];
  __int16 v274;
  char *v275;
  uint64_t v276;

  v3 = (void *)MEMORY[0x1E0C80A78](a1);
  v276 = *MEMORY[0x1E0C80C00];
  v4 = v3;
  v5 = (uint64_t)v4;
  if (!v4)
  {
    __nwlog_obj();
    v141 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v264 = "nw_proxy_config_copy_agent_data";
    v142 = (char *)_os_log_send_and_compose_impl();

    v267[0] = 16;
    type[0] = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v142, v267, type))
      goto LABEL_322;
    if (v267[0] == 17)
    {
      __nwlog_obj();
      v143 = objc_claimAutoreleasedReturnValue();
      v144 = v267[0];
      if (os_log_type_enabled(v143, (os_log_type_t)v267[0]))
      {
        *(_DWORD *)buf = 136446210;
        v264 = "nw_proxy_config_copy_agent_data";
        _os_log_impl(&dword_182FBE000, v143, v144, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (type[0])
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v143 = objc_claimAutoreleasedReturnValue();
      v148 = v267[0];
      v149 = os_log_type_enabled(v143, (os_log_type_t)v267[0]);
      if (backtrace_string)
      {
        if (v149)
        {
          *(_DWORD *)buf = 136446466;
          v264 = "nw_proxy_config_copy_agent_data";
          v265 = 2082;
          v266 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v143, v148, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_322:
        if (!v142)
        {
LABEL_13:
          v32 = 0;
LABEL_216:

          return (BOOL)v32;
        }
LABEL_323:
        free(v142);
        goto LABEL_13;
      }
      if (v149)
      {
        *(_DWORD *)buf = 136446210;
        v264 = "nw_proxy_config_copy_agent_data";
        _os_log_impl(&dword_182FBE000, v143, v148, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v143 = objc_claimAutoreleasedReturnValue();
      v175 = v267[0];
      if (os_log_type_enabled(v143, (os_log_type_t)v267[0]))
      {
        *(_DWORD *)buf = 136446210;
        v264 = "nw_proxy_config_copy_agent_data";
        _os_log_impl(&dword_182FBE000, v143, v175, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_321:

    goto LABEL_322;
  }
  if (LODWORD(v4[19].isa) != 1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v31 = (id)gLogObj;
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      v264 = "nw_proxy_config_copy_agent_data";
      _os_log_impl(&dword_182FBE000, v31, OS_LOG_TYPE_ERROR, "%{public}s Only protocol proxies can be serialized", buf, 0xCu);
    }

    goto LABEL_13;
  }
  if (!v4[1].isa)
  {
    __nwlog_obj();
    v145 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v264 = "nw_proxy_config_copy_agent_data";
    v142 = (char *)_os_log_send_and_compose_impl();

    v267[0] = 16;
    type[0] = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v142, v267, type))
      goto LABEL_322;
    if (v267[0] == 17)
    {
      __nwlog_obj();
      v143 = objc_claimAutoreleasedReturnValue();
      v146 = v267[0];
      if (os_log_type_enabled(v143, (os_log_type_t)v267[0]))
      {
        *(_DWORD *)buf = 136446210;
        v264 = "nw_proxy_config_copy_agent_data";
        _os_log_impl(&dword_182FBE000, v143, v146, "%{public}s called with null config->stacks", buf, 0xCu);
      }
    }
    else if (type[0])
    {
      v158 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v143 = objc_claimAutoreleasedReturnValue();
      v159 = v267[0];
      v160 = os_log_type_enabled(v143, (os_log_type_t)v267[0]);
      if (v158)
      {
        if (v160)
        {
          *(_DWORD *)buf = 136446466;
          v264 = "nw_proxy_config_copy_agent_data";
          v265 = 2082;
          v266 = v158;
          _os_log_impl(&dword_182FBE000, v143, v159, "%{public}s called with null config->stacks, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v158);
        if (!v142)
          goto LABEL_13;
        goto LABEL_323;
      }
      if (v160)
      {
        *(_DWORD *)buf = 136446210;
        v264 = "nw_proxy_config_copy_agent_data";
        _os_log_impl(&dword_182FBE000, v143, v159, "%{public}s called with null config->stacks, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v143 = objc_claimAutoreleasedReturnValue();
      v195 = v267[0];
      if (os_log_type_enabled(v143, (os_log_type_t)v267[0]))
      {
        *(_DWORD *)buf = 136446210;
        v264 = "nw_proxy_config_copy_agent_data";
        _os_log_impl(&dword_182FBE000, v143, v195, "%{public}s called with null config->stacks, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_321;
  }
  v248 = 0;
  v249 = &v248;
  v250 = 0x2020000000;
  v6 = MEMORY[0x1E0C809B0];
  v251 = 0;
  enumerator[0] = MEMORY[0x1E0C809B0];
  enumerator[1] = 3221225472;
  enumerator[2] = __nw_proxy_config_copy_agent_data_block_invoke;
  enumerator[3] = &unk_1E14AA0E8;
  enumerator[4] = &v248;
  nw_proxy_config_enumerate_match_domains(v4, enumerator);
  v246[0] = v6;
  v246[1] = 3221225472;
  v246[2] = __nw_proxy_config_copy_agent_data_block_invoke_2;
  v246[3] = &unk_1E14AA0E8;
  v246[4] = &v248;
  nw_proxy_config_enumerate_excluded_domains((nw_proxy_config_t)v5, v246);
  v245[0] = v6;
  v245[1] = 3221225472;
  v245[2] = __nw_proxy_config_copy_agent_data_block_invoke_3;
  v245[3] = &unk_1E14AA0E8;
  v245[4] = &v248;
  nw_proxy_config_enumerate_preferred_domains((void *)v5, v245);
  v241 = 0;
  v242 = &v241;
  v243 = 0x2020000000;
  v244 = 0;
  v240[0] = v6;
  v240[1] = 3221225472;
  v240[2] = __nw_proxy_config_copy_agent_data_block_invoke_4;
  v240[3] = &unk_1E14AA0E8;
  v240[4] = &v241;
  nw_proxy_config_enumerate_alternate_agents((void *)v5, v240);
  v7 = 4028;
  v8 = buf;
  bzero(buf, 0xFBCuLL);
  v9 = v249[3];
  v10 = v242[3];
  v217 = (v9 | v10) != 0;
  if (v9 | v10)
  {
    v11 = v9 + v10;
    v7 = v11 + 4028;
    if (v11 == -4028)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
      *(_DWORD *)v267 = 136446210;
      v268 = "strict_calloc";
      v161 = (void *)_os_log_send_and_compose_impl();

      result = __nwlog_abort((uint64_t)v161);
      if (result)
        goto LABEL_384;
      free(v161);
    }
    v8 = malloc_type_calloc(1uLL, v7, 0xEAFB8F1AuLL);
    if (!v8)
    {
      __nwlog_obj();
      v162 = objc_claimAutoreleasedReturnValue();
      os_log_type_enabled(v162, OS_LOG_TYPE_ERROR);
      *(_DWORD *)v267 = 136446722;
      v268 = "strict_calloc";
      v269 = 2048;
      *(_QWORD *)v270 = 1;
      *(_WORD *)&v270[8] = 2048;
      *(_QWORD *)v271 = v7;
      v5 = _os_log_send_and_compose_impl();

      __nwlog_abort(v5);
      __break(1u);
      goto LABEL_254;
    }
  }
  v8[20] = *(_DWORD *)(v5 + 152);
  *((_WORD *)v8 + 8) = *(_DWORD *)(v5 + 156);
  *((_WORD *)v8 + 9) = *(_WORD *)(v5 + 168);
  v8[21] = *(_DWORD *)(v5 + 160);
  v12 = *((_WORD *)v8 + 11) & 0xFFFE | (v8[24] << 16) | *(_BYTE *)(v5 + 170) & 1;
  *((_WORD *)v8 + 11) = *((_WORD *)v8 + 11) & 0xFFFE | *(_BYTE *)(v5 + 170) & 1;
  v13 = v12 & 0xFFFFDFFD | *(_BYTE *)(v5 + 170) & 2 | (((*(unsigned __int8 *)(v5 + 170) >> 2) & 1) << 13);
  *((_WORD *)v8 + 11) = v13;
  v14 = v13 & 0xFFFFFFFB | (4 * ((*(unsigned __int8 *)(v5 + 170) >> 3) & 1));
  *((_WORD *)v8 + 11) = v14;
  v15 = v14 & 0xFFFFFFF7 | (8 * ((*(unsigned __int8 *)(v5 + 170) >> 4) & 1));
  *((_WORD *)v8 + 11) = v15;
  v16 = v15 & 0xFFFFFFEF | (16 * ((*(unsigned __int8 *)(v5 + 170) >> 5) & 1));
  *((_WORD *)v8 + 11) = v16;
  v17 = v16 & 0xFFFFFFDF | (32 * ((*(unsigned __int8 *)(v5 + 170) >> 6) & 1));
  *((_WORD *)v8 + 11) = v17;
  v18 = v17 & 0xFFFFFFBF | (((*(unsigned __int8 *)(v5 + 170) >> 7) & 1) << 6);
  *((_WORD *)v8 + 11) = v18;
  v19 = v18 & 0xFFFFFE7F | ((*(_BYTE *)(v5 + 171) & 1) << 7) | (((*(unsigned __int8 *)(v5 + 171) >> 1) & 1) << 8);
  *((_WORD *)v8 + 11) = v19;
  v20 = v19 & 0xFFFFFDFF | (((*(unsigned __int8 *)(v5 + 171) >> 2) & 1) << 9);
  *((_WORD *)v8 + 11) = v20;
  v21 = v20 & 0xFFFFFBFF | (((*(unsigned __int8 *)(v5 + 171) >> 3) & 1) << 10);
  *((_WORD *)v8 + 11) = v21;
  v22 = v21 & 0xFFFFF7FF | (((*(unsigned __int8 *)(v5 + 171) >> 4) & 1) << 11);
  *((_WORD *)v8 + 11) = v22;
  v23 = v22 & 0xFFFFEFFF | (((*(unsigned __int8 *)(v5 + 171) >> 6) & 1) << 12);
  *((_WORD *)v8 + 11) = v23;
  v24 = v23 & 0xFFFFBFFF | (((*(unsigned __int8 *)(v5 + 171) >> 7) & 1) << 14);
  *((_WORD *)v8 + 11) = v24;
  v25 = v24 & 0xFFFF7FFF | ((*(_BYTE *)(v5 + 172) & 1) << 15);
  *((_WORD *)v8 + 11) = v25;
  v26 = v25 & 0xFFFEFFFF | (((*(unsigned __int8 *)(v5 + 172) >> 1) & 1) << 16);
  *((_WORD *)v8 + 11) = v25;
  v8[24] = BYTE2(v26);
  *(_OWORD *)v8 = *(_OWORD *)(v5 + 72);
  v236 = 0;
  v237 = &v236;
  v238 = 0x2020000000;
  v239 = v8 + 25;
  is_null = uuid_is_null((const unsigned __int8 *)(v5 + 56));
  v28 = (unint64_t)&v8[v7];
  v29 = v237[3];
  buffer = v8;
  v222 = &v8[v7];
  if (!is_null)
  {
    if (v29)
    {
      if (v29 < v28)
      {
        if (v28 - v29 > 0x14)
        {
          *(_BYTE *)v29 = 15;
          *(_DWORD *)(v29 + 1) = 16;
          *(_OWORD *)(v29 + 5) = *(_OWORD *)(v5 + 56);
          v29 += 21;
          goto LABEL_38;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v33 = (id)gLogObj;
        *(_DWORD *)v267 = 136447490;
        v268 = "nw_necp_append_tlv";
        v269 = 2048;
        *(_QWORD *)v270 = v29;
        *(_WORD *)&v270[8] = 2048;
        *(_QWORD *)v271 = 21;
        *(_WORD *)&v271[8] = 2048;
        *(_QWORD *)v272 = &v8[v7];
        *(_WORD *)&v272[8] = 1024;
        *(_DWORD *)v273 = 15;
        *(_WORD *)&v273[4] = 1024;
        *(_DWORD *)&v273[6] = 16;
        v34 = (char *)_os_log_send_and_compose_impl();

        type[0] = OS_LOG_TYPE_ERROR;
        LOBYTE(v257) = 0;
        if (__nwlog_fault(v34, type, &v257))
        {
          if (type[0] == OS_LOG_TYPE_FAULT)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v35 = (id)gLogObj;
            v36 = type[0];
            if (os_log_type_enabled(v35, type[0]))
            {
              *(_DWORD *)v267 = 136447490;
              v268 = "nw_necp_append_tlv";
              v269 = 2048;
              *(_QWORD *)v270 = v29;
              *(_WORD *)&v270[8] = 2048;
              *(_QWORD *)v271 = 21;
              *(_WORD *)&v271[8] = 2048;
              *(_QWORD *)v272 = &v8[v7];
              *(_WORD *)&v272[8] = 1024;
              *(_DWORD *)v273 = 15;
              *(_WORD *)&v273[4] = 1024;
              *(_DWORD *)&v273[6] = 16;
              _os_log_impl(&dword_182FBE000, v35, v36, "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u", v267, 0x36u);
            }
          }
          else if ((_BYTE)v257)
          {
            v37 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            v35 = objc_claimAutoreleasedReturnValue();
            v38 = type[0];
            v39 = os_log_type_enabled(v35, type[0]);
            if (v37)
            {
              if (v39)
              {
                *(_DWORD *)v267 = 136447746;
                v268 = "nw_necp_append_tlv";
                v269 = 2048;
                *(_QWORD *)v270 = v29;
                *(_WORD *)&v270[8] = 2048;
                *(_QWORD *)v271 = 21;
                *(_WORD *)&v271[8] = 2048;
                *(_QWORD *)v272 = &v8[v7];
                *(_WORD *)&v272[8] = 1024;
                *(_DWORD *)v273 = 15;
                *(_WORD *)&v273[4] = 1024;
                *(_DWORD *)&v273[6] = 16;
                v274 = 2082;
                v275 = v37;
                _os_log_impl(&dword_182FBE000, v35, v38, "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, dumping backtrace:%{public}s", v267, 0x40u);
              }

              free(v37);
              v28 = (unint64_t)&v8[v7];
              if (!v34)
                goto LABEL_37;
              goto LABEL_36;
            }
            if (v39)
            {
              *(_DWORD *)v267 = 136447490;
              v268 = "nw_necp_append_tlv";
              v269 = 2048;
              *(_QWORD *)v270 = v29;
              *(_WORD *)&v270[8] = 2048;
              *(_QWORD *)v271 = 21;
              *(_WORD *)&v271[8] = 2048;
              *(_QWORD *)v272 = &v8[v7];
              *(_WORD *)&v272[8] = 1024;
              *(_DWORD *)v273 = 15;
              *(_WORD *)&v273[4] = 1024;
              *(_DWORD *)&v273[6] = 16;
              _os_log_impl(&dword_182FBE000, v35, v38, "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, no backtrace", v267, 0x36u);
            }
          }
          else
          {
            __nwlog_obj();
            v35 = objc_claimAutoreleasedReturnValue();
            v40 = type[0];
            if (os_log_type_enabled(v35, type[0]))
            {
              *(_DWORD *)v267 = 136447490;
              v268 = "nw_necp_append_tlv";
              v269 = 2048;
              *(_QWORD *)v270 = v29;
              *(_WORD *)&v270[8] = 2048;
              *(_QWORD *)v271 = 21;
              *(_WORD *)&v271[8] = 2048;
              *(_QWORD *)v272 = &v8[v7];
              *(_WORD *)&v272[8] = 1024;
              *(_DWORD *)v273 = 15;
              *(_WORD *)&v273[4] = 1024;
              *(_DWORD *)&v273[6] = 16;
              _os_log_impl(&dword_182FBE000, v35, v40, "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, backtrace limit exceeded", v267, 0x36u);
            }
          }

        }
        v28 = (unint64_t)&v8[v7];
        if (!v34)
        {
LABEL_37:
          v29 = 0;
          goto LABEL_38;
        }
LABEL_36:
        free(v34);
        goto LABEL_37;
      }
      __nwlog_obj();
      v180 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)v267 = 136447234;
      v268 = "nw_necp_append_tlv";
      v269 = 2048;
      *(_QWORD *)v270 = v29;
      *(_WORD *)&v270[8] = 2048;
      *(_QWORD *)v271 = &v8[v7];
      *(_WORD *)&v271[8] = 1024;
      *(_DWORD *)v272 = 15;
      *(_WORD *)&v272[4] = 1024;
      *(_DWORD *)&v272[6] = 16;
      v177 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(v257) = 0;
      if (__nwlog_fault(v177, type, &v257))
      {
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v181 = objc_claimAutoreleasedReturnValue();
          v182 = type[0];
          if (os_log_type_enabled(v181, type[0]))
          {
            *(_DWORD *)v267 = 136447234;
            v268 = "nw_necp_append_tlv";
            v269 = 2048;
            *(_QWORD *)v270 = v29;
            *(_WORD *)&v270[8] = 2048;
            *(_QWORD *)v271 = &v8[v7];
            *(_WORD *)&v271[8] = 1024;
            *(_DWORD *)v272 = 15;
            *(_WORD *)&v272[4] = 1024;
            *(_DWORD *)&v272[6] = 16;
            _os_log_impl(&dword_182FBE000, v181, v182, "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u", v267, 0x2Cu);
          }
        }
        else if ((_BYTE)v257)
        {
          v199 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v181 = objc_claimAutoreleasedReturnValue();
          v200 = type[0];
          v201 = os_log_type_enabled(v181, type[0]);
          if (v199)
          {
            if (v201)
            {
              *(_DWORD *)v267 = 136447490;
              v268 = "nw_necp_append_tlv";
              v269 = 2048;
              *(_QWORD *)v270 = v29;
              *(_WORD *)&v270[8] = 2048;
              *(_QWORD *)v271 = &v8[v7];
              *(_WORD *)&v271[8] = 1024;
              *(_DWORD *)v272 = 15;
              *(_WORD *)&v272[4] = 1024;
              *(_DWORD *)&v272[6] = 16;
              *(_WORD *)v273 = 2082;
              *(_QWORD *)&v273[2] = v199;
              _os_log_impl(&dword_182FBE000, v181, v200, "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, dumping backtrace:%{public}s", v267, 0x36u);
            }

            free(v199);
            if (!v177)
              goto LABEL_374;
            goto LABEL_373;
          }
          if (v201)
          {
            *(_DWORD *)v267 = 136447234;
            v268 = "nw_necp_append_tlv";
            v269 = 2048;
            *(_QWORD *)v270 = v29;
            *(_WORD *)&v270[8] = 2048;
            *(_QWORD *)v271 = &v8[v7];
            *(_WORD *)&v271[8] = 1024;
            *(_DWORD *)v272 = 15;
            *(_WORD *)&v272[4] = 1024;
            *(_DWORD *)&v272[6] = 16;
            _os_log_impl(&dword_182FBE000, v181, v200, "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, no backtrace", v267, 0x2Cu);
          }
        }
        else
        {
          __nwlog_obj();
          v181 = objc_claimAutoreleasedReturnValue();
          v210 = type[0];
          if (os_log_type_enabled(v181, type[0]))
          {
            *(_DWORD *)v267 = 136447234;
            v268 = "nw_necp_append_tlv";
            v269 = 2048;
            *(_QWORD *)v270 = v29;
            *(_WORD *)&v270[8] = 2048;
            *(_QWORD *)v271 = &v8[v7];
            *(_WORD *)&v271[8] = 1024;
            *(_DWORD *)v272 = 15;
            *(_WORD *)&v272[4] = 1024;
            *(_DWORD *)&v272[6] = 16;
            _os_log_impl(&dword_182FBE000, v181, v210, "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, backtrace limit exceeded", v267, 0x2Cu);
          }
        }

      }
LABEL_372:
      if (!v177)
      {
LABEL_374:
        v29 = 0;
        v28 = (unint64_t)&v8[v7];
LABEL_38:
        v237[3] = v29;
        v30 = *(void **)(v5 + 104);
        if (!v30)
          goto LABEL_155;
        goto LABEL_39;
      }
LABEL_373:
      free(v177);
      goto LABEL_374;
    }
    __nwlog_obj();
    v176 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)v267 = 136446210;
    v268 = "nw_necp_append_tlv";
    v177 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v257) = 0;
    if (!__nwlog_fault(v177, type, &v257))
      goto LABEL_372;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v178 = objc_claimAutoreleasedReturnValue();
      v179 = type[0];
      if (os_log_type_enabled(v178, type[0]))
      {
        *(_DWORD *)v267 = 136446210;
        v268 = "nw_necp_append_tlv";
        _os_log_impl(&dword_182FBE000, v178, v179, "%{public}s called with null tlv_start", v267, 0xCu);
      }
    }
    else if ((_BYTE)v257)
    {
      v196 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v178 = objc_claimAutoreleasedReturnValue();
      v197 = type[0];
      v198 = os_log_type_enabled(v178, type[0]);
      if (v196)
      {
        if (v198)
        {
          *(_DWORD *)v267 = 136446466;
          v268 = "nw_necp_append_tlv";
          v269 = 2082;
          *(_QWORD *)v270 = v196;
          _os_log_impl(&dword_182FBE000, v178, v197, "%{public}s called with null tlv_start, dumping backtrace:%{public}s", v267, 0x16u);
        }

        free(v196);
        goto LABEL_372;
      }
      if (v198)
      {
        *(_DWORD *)v267 = 136446210;
        v268 = "nw_necp_append_tlv";
        _os_log_impl(&dword_182FBE000, v178, v197, "%{public}s called with null tlv_start, no backtrace", v267, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v178 = objc_claimAutoreleasedReturnValue();
      v209 = type[0];
      if (os_log_type_enabled(v178, type[0]))
      {
        *(_DWORD *)v267 = 136446210;
        v268 = "nw_necp_append_tlv";
        _os_log_impl(&dword_182FBE000, v178, v209, "%{public}s called with null tlv_start, backtrace limit exceeded", v267, 0xCu);
      }
    }

    goto LABEL_372;
  }
  v30 = *(void **)(v5 + 104);
  if (!v30)
  {
LABEL_155:
    v108 = nw_path_evaluator_add_endpoint_to_necp_message(*(void **)(v5 + 40), 1, v29, v28, 0);
    v237[3] = v108;
    if (!v108)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v122 = (id)gLogObj;
      if (os_log_type_enabled(v122, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v267 = 136446210;
        v268 = "nw_proxy_config_copy_agent_data";
        _os_log_impl(&dword_182FBE000, v122, OS_LOG_TYPE_ERROR, "%{public}s Failed to serialize endpoint", v267, 0xCu);
      }

      if (v217)
        free(buffer);
      v32 = 0;
      goto LABEL_215;
    }
    if (nw_proxy_config_default_transport(void)::onceToken[0] != -1)
      dispatch_once(nw_proxy_config_default_transport(void)::onceToken, &__block_literal_global_219);
    v6 = MEMORY[0x1E0C809B0];
    v1 = (const char *)nw_proxy_config_default_transport(void)::default_transport_string;
    v2 = nw_dictionary_copy_value(*(_QWORD *)(v5 + 8), nw_proxy_config_default_transport(void)::default_transport_string);
    if (!v2)
    {
LABEL_198:
      v129 = *(_QWORD *)(v5 + 8);
      v230[0] = v6;
      v230[1] = 3221225472;
      v230[2] = __nw_proxy_config_copy_agent_data_block_invoke_101;
      v230[3] = &unk_1E14A1140;
      v234 = v1;
      v130 = (id)v5;
      v231 = v130;
      v233 = &v236;
      v235 = v28;
      v131 = v2;
      v232 = v131;
      nw_dictionary_apply(v129, (uint64_t)v230);
      isa = v130[3].isa;
      if (isa)
      {
        applier[0] = v6;
        applier[1] = 3221225472;
        applier[2] = __nw_proxy_config_copy_agent_data_block_invoke_2_102;
        applier[3] = &unk_1E14A91F0;
        applier[4] = &v236;
        applier[5] = v28;
        xpc_array_apply(isa, applier);
      }
      v133 = v130[4].isa;
      if (v133)
      {
        v228[0] = v6;
        v228[1] = 3221225472;
        v228[2] = __nw_proxy_config_copy_agent_data_block_invoke_3_103;
        v228[3] = &unk_1E14A91F0;
        v228[4] = &v236;
        v228[5] = v28;
        xpc_array_apply(v133, v228);
      }
      if (v237[3])
      {
        v134 = (unsigned __int8 *)v130[6].isa;
        if (v134)
        {
          v227[0] = v6;
          v227[1] = 3221225472;
          v227[2] = __nw_proxy_config_copy_agent_data_block_invoke_104;
          v227[3] = &unk_1E14A8F50;
          v227[4] = &v236;
          v227[5] = v28;
          nw_array_apply(v134, (uint64_t)v227);
        }
        v226[0] = v6;
        v226[1] = 3221225472;
        v226[2] = __nw_proxy_config_copy_agent_data_block_invoke_105;
        v226[3] = &unk_1E14A1168;
        v226[4] = &v236;
        v226[5] = v28;
        nw_proxy_config_enumerate_match_domains(v130, v226);
        v225[0] = v6;
        v225[1] = 3221225472;
        v225[2] = __nw_proxy_config_copy_agent_data_block_invoke_2_106;
        v225[3] = &unk_1E14A1168;
        v225[4] = &v236;
        v225[5] = v28;
        nw_proxy_config_enumerate_excluded_domains(v130, v225);
        v224[0] = v6;
        v224[1] = 3221225472;
        v224[2] = __nw_proxy_config_copy_agent_data_block_invoke_3_107;
        v224[3] = &unk_1E14A1168;
        v224[4] = &v236;
        v224[5] = v28;
        nw_proxy_config_enumerate_preferred_domains(v130, v224);
        v223[0] = v6;
        v223[1] = 3221225472;
        v223[2] = __nw_proxy_config_copy_agent_data_block_invoke_4_108;
        v223[3] = &unk_1E14A1168;
        v223[4] = &v236;
        v223[5] = v28;
        nw_proxy_config_enumerate_alternate_agents(v130, v223);
        v135 = v237[3] - (_QWORD)buffer;
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v136 = (id)gLogObj;
        if (os_log_type_enabled(v136, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)v267 = 136446466;
          v268 = "nw_proxy_config_copy_agent_data";
          v269 = 2048;
          *(_QWORD *)v270 = v135;
          _os_log_impl(&dword_182FBE000, v136, OS_LOG_TYPE_INFO, "%{public}s Serialized %zu bytes of agent data", v267, 0x16u);
        }

        if (v249[3] || v242[3])
        {
          v137 = (void *)*MEMORY[0x1E0C80CE0];
          v138 = buffer;
          v139 = v135;
        }
        else
        {
          v138 = buffer;
          v139 = v135;
          v137 = 0;
        }
        v32 = dispatch_data_create(v138, v139, 0, v137);
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v140 = (id)gLogObj;
        if (os_log_type_enabled(v140, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v267 = 136446210;
          v268 = "nw_proxy_config_copy_agent_data";
          _os_log_impl(&dword_182FBE000, v140, OS_LOG_TYPE_ERROR, "%{public}s Failed to serialize protocols", v267, 0xCu);
        }

        v32 = 0;
      }

LABEL_215:
      _Block_object_dispose(&v236, 8);
      _Block_object_dispose(&v241, 8);
      _Block_object_dispose(&v248, 8);
      goto LABEL_216;
    }
    should_proxy_transport_at_level = nw_proxy_config_should_proxy_transport_at_level((NWConcrete_nw_proxy_config *)v5, v1, 0);
    if (should_proxy_transport_at_level == 2)
      v110 = 10;
    else
      v110 = 2;
    if (should_proxy_transport_at_level == 3)
      v111 = 3;
    else
      v111 = v110;
    v112 = v237[3];
    v113 = strlen(v1);
    if (v112)
    {
      v114 = (v113 + 1);
      if (v112 < v28)
      {
        if (v28 - v112 < v114 + 5)
        {
          v219 = v2;
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v115 = (id)gLogObj;
          v116 = v28;
          v117 = v115;
          v118 = v111;
          *(_DWORD *)v267 = 136447490;
          v268 = "nw_necp_append_tlv";
          v269 = 2048;
          *(_QWORD *)v270 = v112;
          *(_WORD *)&v270[8] = 2048;
          *(_QWORD *)v271 = v114 + 5;
          *(_WORD *)&v271[8] = 2048;
          *(_QWORD *)v272 = v116;
          *(_WORD *)&v272[8] = 1024;
          *(_DWORD *)v273 = v111;
          *(_WORD *)&v273[4] = 1024;
          *(_DWORD *)&v273[6] = v114;
          v119 = (char *)_os_log_send_and_compose_impl();

          type[0] = OS_LOG_TYPE_ERROR;
          LOBYTE(v257) = 0;
          if (__nwlog_fault(v119, type, &v257))
          {
            if (type[0] == OS_LOG_TYPE_FAULT)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v120 = (id)gLogObj;
              v121 = type[0];
              if (os_log_type_enabled(v120, type[0]))
              {
                *(_DWORD *)v267 = 136447490;
                v268 = "nw_necp_append_tlv";
                v269 = 2048;
                *(_QWORD *)v270 = v112;
                *(_WORD *)&v270[8] = 2048;
                *(_QWORD *)v271 = v114 + 5;
                *(_WORD *)&v271[8] = 2048;
                *(_QWORD *)v272 = v222;
                *(_WORD *)&v272[8] = 1024;
                *(_DWORD *)v273 = v118;
                *(_WORD *)&v273[4] = 1024;
                *(_DWORD *)&v273[6] = v114;
                _os_log_impl(&dword_182FBE000, v120, v121, "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u", v267, 0x36u);
              }
            }
            else if ((_BYTE)v257)
            {
              v124 = (char *)__nw_create_backtrace_string();
              __nwlog_obj();
              v120 = objc_claimAutoreleasedReturnValue();
              v125 = type[0];
              v126 = os_log_type_enabled(v120, type[0]);
              if (v124)
              {
                if (v126)
                {
                  *(_DWORD *)v267 = 136447746;
                  v268 = "nw_necp_append_tlv";
                  v269 = 2048;
                  *(_QWORD *)v270 = v112;
                  *(_WORD *)&v270[8] = 2048;
                  *(_QWORD *)v271 = v114 + 5;
                  *(_WORD *)&v271[8] = 2048;
                  *(_QWORD *)v272 = v222;
                  *(_WORD *)&v272[8] = 1024;
                  *(_DWORD *)v273 = v118;
                  *(_WORD *)&v273[4] = 1024;
                  *(_DWORD *)&v273[6] = v114;
                  v274 = 2082;
                  v275 = v124;
                  _os_log_impl(&dword_182FBE000, v120, v125, "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, dumping backtrace:%{public}s", v267, 0x40u);
                }

                free(v124);
                v28 = (unint64_t)v222;
                if (!v119)
                  goto LABEL_196;
                goto LABEL_195;
              }
              if (v126)
              {
                *(_DWORD *)v267 = 136447490;
                v268 = "nw_necp_append_tlv";
                v269 = 2048;
                *(_QWORD *)v270 = v112;
                *(_WORD *)&v270[8] = 2048;
                *(_QWORD *)v271 = v114 + 5;
                *(_WORD *)&v271[8] = 2048;
                *(_QWORD *)v272 = v222;
                *(_WORD *)&v272[8] = 1024;
                *(_DWORD *)v273 = v118;
                *(_WORD *)&v273[4] = 1024;
                *(_DWORD *)&v273[6] = v114;
                _os_log_impl(&dword_182FBE000, v120, v125, "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, no backtrace", v267, 0x36u);
              }
            }
            else
            {
              __nwlog_obj();
              v120 = objc_claimAutoreleasedReturnValue();
              v127 = type[0];
              if (os_log_type_enabled(v120, type[0]))
              {
                *(_DWORD *)v267 = 136447490;
                v268 = "nw_necp_append_tlv";
                v269 = 2048;
                *(_QWORD *)v270 = v112;
                *(_WORD *)&v270[8] = 2048;
                *(_QWORD *)v271 = v114 + 5;
                *(_WORD *)&v271[8] = 2048;
                *(_QWORD *)v272 = v222;
                *(_WORD *)&v272[8] = 1024;
                *(_DWORD *)v273 = v118;
                *(_WORD *)&v273[4] = 1024;
                *(_DWORD *)&v273[6] = v114;
                _os_log_impl(&dword_182FBE000, v120, v127, "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, backtrace limit exceeded", v267, 0x36u);
              }
            }

          }
          v28 = (unint64_t)v222;
          if (!v119)
          {
LABEL_196:
            v123 = 0;
            v6 = MEMORY[0x1E0C809B0];
            v2 = v219;
            goto LABEL_197;
          }
LABEL_195:
          free(v119);
          goto LABEL_196;
        }
        *(_BYTE *)v112 = v111;
        *(_DWORD *)(v112 + 1) = v114;
        if (v113 == -1)
        {
LABEL_181:
          v123 = v112 + v114 + 5;
LABEL_197:
          v237[3] = v123;
          v128 = nw_proxy_config_serialize_one_stack(v2, v123, v28);
          v237[3] = v128;
          goto LABEL_198;
        }
        if (v1)
        {
          memcpy((void *)(v112 + 5), v1, v114);
          goto LABEL_181;
        }
        v220 = v2;
        __nwlog_obj();
        v202 = (void *)objc_claimAutoreleasedReturnValue();
        v203 = v111;
        *(_DWORD *)v267 = 136446722;
        v268 = "nw_necp_append_tlv";
        v269 = 1024;
        *(_DWORD *)v270 = v111;
        *(_WORD *)&v270[4] = 1024;
        *(_DWORD *)&v270[6] = v114;
        v172 = (char *)_os_log_send_and_compose_impl();

        type[0] = OS_LOG_TYPE_ERROR;
        LOBYTE(v257) = 0;
        if (__nwlog_fault(v172, type, &v257))
        {
          if (type[0] == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            v173 = objc_claimAutoreleasedReturnValue();
            v204 = type[0];
            if (os_log_type_enabled(v173, type[0]))
            {
              *(_DWORD *)v267 = 136446722;
              v268 = "nw_necp_append_tlv";
              v269 = 1024;
              *(_DWORD *)v270 = v203;
              *(_WORD *)&v270[4] = 1024;
              *(_DWORD *)&v270[6] = v114;
              _os_log_impl(&dword_182FBE000, v173, v204, "%{public}s type=%u length=%u but value is NULL", v267, 0x18u);
            }
          }
          else if ((_BYTE)v257)
          {
            v211 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            v173 = objc_claimAutoreleasedReturnValue();
            v212 = type[0];
            v213 = os_log_type_enabled(v173, type[0]);
            if (v211)
            {
              if (v213)
              {
                *(_DWORD *)v267 = 136446978;
                v268 = "nw_necp_append_tlv";
                v269 = 1024;
                *(_DWORD *)v270 = v203;
                *(_WORD *)&v270[4] = 1024;
                *(_DWORD *)&v270[6] = v114;
                *(_WORD *)v271 = 2082;
                *(_QWORD *)&v271[2] = v211;
                _os_log_impl(&dword_182FBE000, v173, v212, "%{public}s type=%u length=%u but value is NULL, dumping backtrace:%{public}s", v267, 0x22u);
              }

              free(v211);
              if (!v172)
                goto LABEL_383;
              goto LABEL_382;
            }
            if (v213)
            {
              *(_DWORD *)v267 = 136446722;
              v268 = "nw_necp_append_tlv";
              v269 = 1024;
              *(_DWORD *)v270 = v203;
              *(_WORD *)&v270[4] = 1024;
              *(_DWORD *)&v270[6] = v114;
              _os_log_impl(&dword_182FBE000, v173, v212, "%{public}s type=%u length=%u but value is NULL, no backtrace", v267, 0x18u);
            }
          }
          else
          {
            __nwlog_obj();
            v173 = objc_claimAutoreleasedReturnValue();
            v214 = type[0];
            if (os_log_type_enabled(v173, type[0]))
            {
              *(_DWORD *)v267 = 136446722;
              v268 = "nw_necp_append_tlv";
              v269 = 1024;
              *(_DWORD *)v270 = v203;
              *(_WORD *)&v270[4] = 1024;
              *(_DWORD *)&v270[6] = v114;
              _os_log_impl(&dword_182FBE000, v173, v214, "%{public}s type=%u length=%u but value is NULL, backtrace limit exceeded", v267, 0x18u);
            }
          }
          goto LABEL_380;
        }
LABEL_381:
        if (!v172)
        {
LABEL_383:
          v123 = 0;
          v6 = MEMORY[0x1E0C809B0];
          v28 = (unint64_t)v222;
          v2 = v220;
          goto LABEL_197;
        }
LABEL_382:
        free(v172);
        goto LABEL_383;
      }
      v220 = v2;
      __nwlog_obj();
      v168 = objc_claimAutoreleasedReturnValue();
      v169 = v28;
      v170 = (void *)v168;
      *(_DWORD *)v267 = 136447234;
      v171 = v111;
      v268 = "nw_necp_append_tlv";
      v269 = 2048;
      *(_QWORD *)v270 = v112;
      *(_WORD *)&v270[8] = 2048;
      *(_QWORD *)v271 = v169;
      *(_WORD *)&v271[8] = 1024;
      *(_DWORD *)v272 = v111;
      *(_WORD *)&v272[4] = 1024;
      *(_DWORD *)&v272[6] = v114;
      v172 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(v257) = 0;
      if (!__nwlog_fault(v172, type, &v257))
        goto LABEL_381;
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v173 = objc_claimAutoreleasedReturnValue();
        v174 = type[0];
        if (os_log_type_enabled(v173, type[0]))
        {
          *(_DWORD *)v267 = 136447234;
          v268 = "nw_necp_append_tlv";
          v269 = 2048;
          *(_QWORD *)v270 = v112;
          *(_WORD *)&v270[8] = 2048;
          *(_QWORD *)v271 = v222;
          *(_WORD *)&v271[8] = 1024;
          *(_DWORD *)v272 = v171;
          *(_WORD *)&v272[4] = 1024;
          *(_DWORD *)&v272[6] = v114;
          _os_log_impl(&dword_182FBE000, v173, v174, "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u", v267, 0x2Cu);
        }
      }
      else if ((_BYTE)v257)
      {
        v192 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v173 = objc_claimAutoreleasedReturnValue();
        v193 = type[0];
        v194 = os_log_type_enabled(v173, type[0]);
        if (v192)
        {
          if (v194)
          {
            *(_DWORD *)v267 = 136447490;
            v268 = "nw_necp_append_tlv";
            v269 = 2048;
            *(_QWORD *)v270 = v112;
            *(_WORD *)&v270[8] = 2048;
            *(_QWORD *)v271 = v222;
            *(_WORD *)&v271[8] = 1024;
            *(_DWORD *)v272 = v171;
            *(_WORD *)&v272[4] = 1024;
            *(_DWORD *)&v272[6] = v114;
            *(_WORD *)v273 = 2082;
            *(_QWORD *)&v273[2] = v192;
            _os_log_impl(&dword_182FBE000, v173, v193, "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, dumping backtrace:%{public}s", v267, 0x36u);
          }

          free(v192);
          goto LABEL_381;
        }
        if (v194)
        {
          *(_DWORD *)v267 = 136447234;
          v268 = "nw_necp_append_tlv";
          v269 = 2048;
          *(_QWORD *)v270 = v112;
          *(_WORD *)&v270[8] = 2048;
          *(_QWORD *)v271 = v222;
          *(_WORD *)&v271[8] = 1024;
          *(_DWORD *)v272 = v171;
          *(_WORD *)&v272[4] = 1024;
          *(_DWORD *)&v272[6] = v114;
          _os_log_impl(&dword_182FBE000, v173, v193, "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, no backtrace", v267, 0x2Cu);
        }
      }
      else
      {
        __nwlog_obj();
        v173 = objc_claimAutoreleasedReturnValue();
        v208 = type[0];
        if (os_log_type_enabled(v173, type[0]))
        {
          *(_DWORD *)v267 = 136447234;
          v268 = "nw_necp_append_tlv";
          v269 = 2048;
          *(_QWORD *)v270 = v112;
          *(_WORD *)&v270[8] = 2048;
          *(_QWORD *)v271 = v222;
          *(_WORD *)&v271[8] = 1024;
          *(_DWORD *)v272 = v171;
          *(_WORD *)&v272[4] = 1024;
          *(_DWORD *)&v272[6] = v114;
          _os_log_impl(&dword_182FBE000, v173, v208, "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, backtrace limit exceeded", v267, 0x2Cu);
        }
      }
LABEL_380:

      goto LABEL_381;
    }
LABEL_254:
    v163 = v2;
    __nwlog_obj();
    v164 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)v267 = 136446210;
    v268 = "nw_necp_append_tlv";
    v165 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v257) = 0;
    if (__nwlog_fault(v165, type, &v257))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v166 = objc_claimAutoreleasedReturnValue();
        v167 = type[0];
        if (os_log_type_enabled(v166, type[0]))
        {
          *(_DWORD *)v267 = 136446210;
          v268 = "nw_necp_append_tlv";
          _os_log_impl(&dword_182FBE000, v166, v167, "%{public}s called with null tlv_start", v267, 0xCu);
        }
      }
      else if ((_BYTE)v257)
      {
        v189 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v166 = objc_claimAutoreleasedReturnValue();
        v190 = type[0];
        v191 = os_log_type_enabled(v166, type[0]);
        if (v189)
        {
          if (v191)
          {
            *(_DWORD *)v267 = 136446466;
            v268 = "nw_necp_append_tlv";
            v269 = 2082;
            *(_QWORD *)v270 = v189;
            _os_log_impl(&dword_182FBE000, v166, v190, "%{public}s called with null tlv_start, dumping backtrace:%{public}s", v267, 0x16u);
          }

          free(v189);
          goto LABEL_360;
        }
        if (v191)
        {
          *(_DWORD *)v267 = 136446210;
          v268 = "nw_necp_append_tlv";
          _os_log_impl(&dword_182FBE000, v166, v190, "%{public}s called with null tlv_start, no backtrace", v267, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v166 = objc_claimAutoreleasedReturnValue();
        v207 = type[0];
        if (os_log_type_enabled(v166, type[0]))
        {
          *(_DWORD *)v267 = 136446210;
          v268 = "nw_necp_append_tlv";
          _os_log_impl(&dword_182FBE000, v166, v207, "%{public}s called with null tlv_start, backtrace limit exceeded", v267, 0xCu);
        }
      }

    }
LABEL_360:
    if (v165)
      free(v165);
    v123 = 0;
    v28 = (unint64_t)v222;
    v2 = v163;
    goto LABEL_197;
  }
LABEL_39:
  v41 = v30;
  v42 = v41;
  if (!v29)
  {
    __nwlog_obj();
    v150 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)v267 = 136446210;
    v268 = "nw_authentication_credential_add_to_tlv";
    v151 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v257) = 0;
    if (__nwlog_fault(v151, type, &v257))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v152 = objc_claimAutoreleasedReturnValue();
        v153 = type[0];
        if (os_log_type_enabled(v152, type[0]))
        {
          *(_DWORD *)v267 = 136446210;
          v268 = "nw_authentication_credential_add_to_tlv";
          _os_log_impl(&dword_182FBE000, v152, v153, "%{public}s called with null cursor", v267, 0xCu);
        }
      }
      else if ((_BYTE)v257)
      {
        v183 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v152 = objc_claimAutoreleasedReturnValue();
        v184 = type[0];
        v185 = os_log_type_enabled(v152, type[0]);
        if (v183)
        {
          if (v185)
          {
            *(_DWORD *)v267 = 136446466;
            v268 = "nw_authentication_credential_add_to_tlv";
            v269 = 2082;
            *(_QWORD *)v270 = v183;
            _os_log_impl(&dword_182FBE000, v152, v184, "%{public}s called with null cursor, dumping backtrace:%{public}s", v267, 0x16u);
          }

          free(v183);
          goto LABEL_333;
        }
        if (v185)
        {
          *(_DWORD *)v267 = 136446210;
          v268 = "nw_authentication_credential_add_to_tlv";
          _os_log_impl(&dword_182FBE000, v152, v184, "%{public}s called with null cursor, no backtrace", v267, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v152 = objc_claimAutoreleasedReturnValue();
        v205 = type[0];
        if (os_log_type_enabled(v152, type[0]))
        {
          *(_DWORD *)v267 = 136446210;
          v268 = "nw_authentication_credential_add_to_tlv";
          _os_log_impl(&dword_182FBE000, v152, v205, "%{public}s called with null cursor, backtrace limit exceeded", v267, 0xCu);
        }
      }

    }
LABEL_333:
    if (v151)
      free(v151);
    v29 = 0;
    goto LABEL_154;
  }
  v43 = v41[2];
  if (v43)
  {
    v44 = strlen(v43);
    v45 = v42[3];
    if (v45)
      goto LABEL_42;
LABEL_45:
    v46 = 0;
    v47 = (char *)v42[5];
    if (v47)
      goto LABEL_43;
    goto LABEL_46;
  }
  v44 = 0;
  v45 = v42[3];
  if (!v45)
    goto LABEL_45;
LABEL_42:
  v46 = strlen(v45);
  v47 = (char *)v42[5];
  if (v47)
  {
LABEL_43:
    count = xpc_array_get_count(v47);
    goto LABEL_47;
  }
LABEL_46:
  count = 0;
LABEL_47:
  v49 = *((_DWORD *)v42 + 2);
  v215 = v44;
  v216 = count;
  v218 = v46;
  if (v49 != 2)
  {
    if (v49 != 1)
    {
      LODWORD(v57) = 2;
      goto LABEL_94;
    }
    v50 = v44 + 1;
    v51 = v44 + 3;
    if (v50 < 0xFFFFFFFE)
    {
LABEL_73:
      v64 = __CFADD__((_DWORD)v51, v46 + 1);
      v57 = v51 + v46 + 1;
      if (!v64)
        goto LABEL_94;
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v65 = (id)gLogObj;
      *(_DWORD *)v267 = 136446978;
      v268 = "nw_authentication_credential_add_to_tlv";
      v269 = 2082;
      *(_QWORD *)v270 = "buffer_size";
      *(_WORD *)&v270[8] = 2048;
      *(_QWORD *)v271 = v46 + 1;
      *(_WORD *)&v271[8] = 2048;
      *(_QWORD *)v272 = v57;
      v66 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(v257) = 0;
      if (!__nwlog_fault(v66, type, &v257))
        goto LABEL_91;
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v67 = (id)gLogObj;
        v68 = type[0];
        if (os_log_type_enabled(v67, type[0]))
        {
          *(_DWORD *)v267 = 136446978;
          v268 = "nw_authentication_credential_add_to_tlv";
          v269 = 2082;
          *(_QWORD *)v270 = "buffer_size";
          *(_WORD *)&v270[8] = 2048;
          *(_QWORD *)v271 = v46 + 1;
          *(_WORD *)&v271[8] = 2048;
          *(_QWORD *)v272 = v57;
          _os_log_impl(&dword_182FBE000, v67, v68, "%{public}s Overflow: %{public}s, increment %llu, result %llu", v267, 0x2Au);
        }
      }
      else if ((_BYTE)v257)
      {
        v69 = __nw_create_backtrace_string();
        if (v69)
        {
          v70 = (char *)v69;
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v71 = (id)gLogObj;
          v72 = type[0];
          if (os_log_type_enabled(v71, type[0]))
          {
            *(_DWORD *)v267 = 136447234;
            v268 = "nw_authentication_credential_add_to_tlv";
            v269 = 2082;
            *(_QWORD *)v270 = "buffer_size";
            *(_WORD *)&v270[8] = 2048;
            *(_QWORD *)v271 = v46 + 1;
            *(_WORD *)&v271[8] = 2048;
            *(_QWORD *)v272 = v57;
            *(_WORD *)&v272[8] = 2082;
            *(_QWORD *)v273 = v70;
            _os_log_impl(&dword_182FBE000, v71, v72, "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s", v267, 0x34u);
          }

          free(v70);
          goto LABEL_91;
        }
        __nwlog_obj();
        v67 = objc_claimAutoreleasedReturnValue();
        v74 = type[0];
        if (os_log_type_enabled(v67, type[0]))
        {
          *(_DWORD *)v267 = 136446978;
          v268 = "nw_authentication_credential_add_to_tlv";
          v269 = 2082;
          *(_QWORD *)v270 = "buffer_size";
          *(_WORD *)&v270[8] = 2048;
          *(_QWORD *)v271 = v46 + 1;
          *(_WORD *)&v271[8] = 2048;
          *(_QWORD *)v272 = v57;
          _os_log_impl(&dword_182FBE000, v67, v74, "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace", v267, 0x2Au);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v67 = (id)gLogObj;
        v73 = type[0];
        if (os_log_type_enabled(v67, type[0]))
        {
          *(_DWORD *)v267 = 136446978;
          v268 = "nw_authentication_credential_add_to_tlv";
          v269 = 2082;
          *(_QWORD *)v270 = "buffer_size";
          *(_WORD *)&v270[8] = 2048;
          *(_QWORD *)v271 = v46 + 1;
          *(_WORD *)&v271[8] = 2048;
          *(_QWORD *)v272 = v57;
          _os_log_impl(&dword_182FBE000, v67, v73, "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded", v267, 0x2Au);
        }
      }

LABEL_91:
      count = v216;
      if (v66)
        free(v66);
      LODWORD(v57) = -1;
      v28 = (unint64_t)v222;
      goto LABEL_94;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v52 = (id)gLogObj;
    *(_DWORD *)v267 = 136446978;
    v268 = "nw_authentication_credential_add_to_tlv";
    v269 = 2082;
    *(_QWORD *)v270 = "buffer_size";
    *(_WORD *)&v270[8] = 2048;
    *(_QWORD *)v271 = v215 + 1;
    *(_WORD *)&v271[8] = 2048;
    *(_QWORD *)v272 = v51;
    v53 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v257) = 0;
    if ((__nwlog_fault(v53, type, &v257) & 1) != 0)
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v54 = (id)gLogObj;
        v55 = type[0];
        if (os_log_type_enabled(v54, type[0]))
        {
          *(_DWORD *)v267 = 136446978;
          v268 = "nw_authentication_credential_add_to_tlv";
          v269 = 2082;
          *(_QWORD *)v270 = "buffer_size";
          *(_WORD *)&v270[8] = 2048;
          *(_QWORD *)v271 = v215 + 1;
          *(_WORD *)&v271[8] = 2048;
          *(_QWORD *)v272 = v51;
          _os_log_impl(&dword_182FBE000, v54, v55, "%{public}s Overflow: %{public}s, increment %llu, result %llu", v267, 0x2Au);
        }
      }
      else if ((_BYTE)v257)
      {
        v58 = __nw_create_backtrace_string();
        if (v58)
        {
          v59 = (char *)v58;
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v60 = (id)gLogObj;
          v61 = type[0];
          if (os_log_type_enabled(v60, type[0]))
          {
            *(_DWORD *)v267 = 136447234;
            v268 = "nw_authentication_credential_add_to_tlv";
            v269 = 2082;
            *(_QWORD *)v270 = "buffer_size";
            *(_WORD *)&v270[8] = 2048;
            *(_QWORD *)v271 = v215 + 1;
            *(_WORD *)&v271[8] = 2048;
            *(_QWORD *)v272 = v51;
            *(_WORD *)&v272[8] = 2082;
            *(_QWORD *)v273 = v59;
            _os_log_impl(&dword_182FBE000, v60, v61, "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s", v267, 0x34u);
          }

          free(v59);
          goto LABEL_70;
        }
        __nwlog_obj();
        v54 = objc_claimAutoreleasedReturnValue();
        v63 = type[0];
        if (os_log_type_enabled(v54, type[0]))
        {
          *(_DWORD *)v267 = 136446978;
          v268 = "nw_authentication_credential_add_to_tlv";
          v269 = 2082;
          *(_QWORD *)v270 = "buffer_size";
          *(_WORD *)&v270[8] = 2048;
          *(_QWORD *)v271 = v215 + 1;
          *(_WORD *)&v271[8] = 2048;
          *(_QWORD *)v272 = v51;
          _os_log_impl(&dword_182FBE000, v54, v63, "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace", v267, 0x2Au);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v54 = (id)gLogObj;
        v62 = type[0];
        if (os_log_type_enabled(v54, type[0]))
        {
          *(_DWORD *)v267 = 136446978;
          v268 = "nw_authentication_credential_add_to_tlv";
          v269 = 2082;
          *(_QWORD *)v270 = "buffer_size";
          *(_WORD *)&v270[8] = 2048;
          *(_QWORD *)v271 = v215 + 1;
          *(_WORD *)&v271[8] = 2048;
          *(_QWORD *)v272 = v51;
          _os_log_impl(&dword_182FBE000, v54, v62, "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded", v267, 0x2Au);
        }
      }

    }
LABEL_70:
    count = v216;
    if (v53)
      free(v53);
    LODWORD(v51) = -1;
    v28 = (unint64_t)v222;
    goto LABEL_73;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v56 = (id)gLogObj;
  if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)v267 = 136446210;
    v268 = "nw_authentication_credential_add_to_tlv";
    _os_log_impl(&dword_182FBE000, v56, OS_LOG_TYPE_ERROR, "%{public}s Unsupported credential type identity", v267, 0xCu);
  }

  LODWORD(v57) = 2;
  v28 = (unint64_t)v222;
LABEL_94:
  v75 = count + 4;
  v76 = v75 + v57;
  v77 = v76;
  if (HIDWORD(v76))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v78 = (id)gLogObj;
    *(_DWORD *)v267 = 136446978;
    v268 = "nw_authentication_credential_add_to_tlv";
    v269 = 2082;
    *(_QWORD *)v270 = "buffer_size";
    *(_WORD *)&v270[8] = 2048;
    *(_QWORD *)v271 = count + 4;
    *(_WORD *)&v271[8] = 2048;
    *(_QWORD *)v272 = v76;
    v79 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v257) = 0;
    if (!__nwlog_fault(v79, type, &v257))
      goto LABEL_115;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v80 = (id)gLogObj;
      v81 = type[0];
      if (os_log_type_enabled(v80, type[0]))
      {
        *(_DWORD *)v267 = 136446978;
        v268 = "nw_authentication_credential_add_to_tlv";
        v269 = 2082;
        *(_QWORD *)v270 = "buffer_size";
        *(_WORD *)&v270[8] = 2048;
        *(_QWORD *)v271 = v75;
        *(_WORD *)&v271[8] = 2048;
        *(_QWORD *)v272 = v76;
        _os_log_impl(&dword_182FBE000, v80, v81, "%{public}s Overflow: %{public}s, increment %llu, result %llu", v267, 0x2Au);
      }
    }
    else
    {
      if ((_BYTE)v257)
      {
        v85 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v86 = (id)gLogObj;
        v87 = type[0];
        v88 = os_log_type_enabled(v86, type[0]);
        if (v85)
        {
          if (v88)
          {
            *(_DWORD *)v267 = 136447234;
            v268 = "nw_authentication_credential_add_to_tlv";
            v269 = 2082;
            *(_QWORD *)v270 = "buffer_size";
            *(_WORD *)&v270[8] = 2048;
            *(_QWORD *)v271 = v75;
            *(_WORD *)&v271[8] = 2048;
            *(_QWORD *)v272 = v76;
            *(_WORD *)&v272[8] = 2082;
            *(_QWORD *)v273 = v85;
            _os_log_impl(&dword_182FBE000, v86, v87, "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s", v267, 0x34u);
          }

          free(v85);
          v28 = (unint64_t)v222;
          if (!v79)
            goto LABEL_117;
          goto LABEL_116;
        }
        if (v88)
        {
          *(_DWORD *)v267 = 136446978;
          v268 = "nw_authentication_credential_add_to_tlv";
          v269 = 2082;
          *(_QWORD *)v270 = "buffer_size";
          *(_WORD *)&v270[8] = 2048;
          *(_QWORD *)v271 = v75;
          *(_WORD *)&v271[8] = 2048;
          *(_QWORD *)v272 = v76;
          _os_log_impl(&dword_182FBE000, v86, v87, "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace", v267, 0x2Au);
        }

LABEL_115:
        v28 = (unint64_t)v222;
        if (!v79)
        {
LABEL_117:
          v77 = 0xFFFFFFFFLL;
          LODWORD(v76) = -1;
LABEL_118:
          count = v216;
          goto LABEL_119;
        }
LABEL_116:
        free(v79);
        goto LABEL_117;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v80 = (id)gLogObj;
      v89 = type[0];
      if (os_log_type_enabled(v80, type[0]))
      {
        *(_DWORD *)v267 = 136446978;
        v268 = "nw_authentication_credential_add_to_tlv";
        v269 = 2082;
        *(_QWORD *)v270 = "buffer_size";
        *(_WORD *)&v270[8] = 2048;
        *(_QWORD *)v271 = v75;
        *(_WORD *)&v271[8] = 2048;
        *(_QWORD *)v272 = v76;
        _os_log_impl(&dword_182FBE000, v80, v89, "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded", v267, 0x2Au);
      }
    }

    goto LABEL_115;
  }
  if (!(_DWORD)v76)
  {
    __nwlog_obj();
    v82 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v82, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v267 = 136446210;
    v268 = "strict_calloc";
    v83 = (void *)_os_log_send_and_compose_impl();

    result = __nwlog_abort((uint64_t)v83);
    if (result)
      goto LABEL_384;
    free(v83);
    v77 = 0;
    v28 = (unint64_t)v222;
    goto LABEL_118;
  }
LABEL_119:
  v90 = malloc_type_calloc(1uLL, v77, 0xEAFB8F1AuLL);
  if (v90)
    goto LABEL_120;
  __nwlog_obj();
  v154 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v154, OS_LOG_TYPE_ERROR);
  *(_DWORD *)v267 = 136446722;
  v268 = "strict_calloc";
  v269 = 2048;
  *(_QWORD *)v270 = 1;
  *(_WORD *)&v270[8] = 2048;
  *(_QWORD *)v271 = v77;
  v155 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v155);
  if (!result)
  {
    free(v155);
    v28 = (unint64_t)v222;
    count = v216;
LABEL_120:
    v257 = 0;
    v258 = &v257;
    v259 = 0x2020000000;
    v91 = *((_DWORD *)v42 + 2);
    v260 = v90 + 1;
    *v90 = v91;
    v92 = *((_DWORD *)v42 + 3);
    v93 = (_BYTE *)v258[3];
    v258[3] = (uint64_t)(v93 + 1);
    *v93 = v92;
    v94 = v258;
    if (*((_DWORD *)v42 + 2) != 1)
      goto LABEL_126;
    v95 = (_BYTE *)v258[3];
    if (v215)
    {
      memcpy(v95, v42[2], v215 + 1);
      v96 = v258;
      v97 = (_BYTE *)(v258[3] + v215 + 1);
      v258[3] = (uint64_t)v97;
      if (v218)
      {
LABEL_123:
        memcpy(v97, v42[3], v218 + 1);
        v94 = v258;
        v258[3] += v218 + 1;
        goto LABEL_126;
      }
    }
    else
    {
      v258[3] = (uint64_t)(v95 + 1);
      *v95 = 0;
      v96 = v258;
      v97 = (_BYTE *)v258[3];
      if (v218)
        goto LABEL_123;
    }
    v96[3] = (uint64_t)(v97 + 1);
    *v97 = 0;
    v94 = v258;
LABEL_126:
    *(_DWORD *)v94[3] = count;
    v258[3] += 4;
    if (count)
    {
      v98 = (char *)v42[5];
      *(_QWORD *)type = MEMORY[0x1E0C809B0];
      v253 = 3221225472;
      v254 = __nw_authentication_credential_add_to_tlv_block_invoke;
      v255 = &unk_1E14A0900;
      v256 = &v257;
      xpc_array_apply(v98, type);
    }
    if (v29 < v28)
    {
      v99 = v77 + 5;
      if (v28 - v29 >= v77 + 5)
      {
        *(_BYTE *)v29 = 16;
        *(_DWORD *)(v29 + 1) = v76;
        if ((_DWORD)v76)
          memcpy((void *)(v29 + 5), v90, v77);
        v29 += v99;
        goto LABEL_153;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v100 = (id)gLogObj;
      *(_DWORD *)v267 = 136447490;
      v268 = "nw_necp_append_tlv";
      v269 = 2048;
      *(_QWORD *)v270 = v29;
      *(_WORD *)&v270[8] = 2048;
      *(_QWORD *)v271 = v77 + 5;
      *(_WORD *)&v271[8] = 2048;
      *(_QWORD *)v272 = v28;
      *(_WORD *)&v272[8] = 1024;
      *(_DWORD *)v273 = 16;
      *(_WORD *)&v273[4] = 1024;
      *(_DWORD *)&v273[6] = v76;
      v101 = (char *)_os_log_send_and_compose_impl();

      v262 = OS_LOG_TYPE_ERROR;
      v261 = 0;
      if (__nwlog_fault(v101, &v262, &v261))
      {
        if (v262 == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v102 = (id)gLogObj;
          v103 = v262;
          if (os_log_type_enabled(v102, v262))
          {
            *(_DWORD *)v267 = 136447490;
            v268 = "nw_necp_append_tlv";
            v269 = 2048;
            *(_QWORD *)v270 = v29;
            *(_WORD *)&v270[8] = 2048;
            *(_QWORD *)v271 = v77 + 5;
            *(_WORD *)&v271[8] = 2048;
            *(_QWORD *)v272 = v222;
            *(_WORD *)&v272[8] = 1024;
            *(_DWORD *)v273 = 16;
            *(_WORD *)&v273[4] = 1024;
            *(_DWORD *)&v273[6] = v76;
            _os_log_impl(&dword_182FBE000, v102, v103, "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u", v267, 0x36u);
          }
        }
        else if (v261)
        {
          v104 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v102 = (id)gLogObj;
          v105 = v262;
          v106 = os_log_type_enabled(v102, v262);
          if (v104)
          {
            if (v106)
            {
              *(_DWORD *)v267 = 136447746;
              v268 = "nw_necp_append_tlv";
              v269 = 2048;
              *(_QWORD *)v270 = v29;
              *(_WORD *)&v270[8] = 2048;
              *(_QWORD *)v271 = v99;
              *(_WORD *)&v271[8] = 2048;
              *(_QWORD *)v272 = v222;
              *(_WORD *)&v272[8] = 1024;
              *(_DWORD *)v273 = 16;
              *(_WORD *)&v273[4] = 1024;
              *(_DWORD *)&v273[6] = v76;
              v274 = 2082;
              v275 = v104;
              _os_log_impl(&dword_182FBE000, v102, v105, "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, dumping backtrace:%{public}s", v267, 0x40u);
            }

            free(v104);
            if (!v101)
              goto LABEL_152;
            goto LABEL_151;
          }
          if (v106)
          {
            *(_DWORD *)v267 = 136447490;
            v268 = "nw_necp_append_tlv";
            v269 = 2048;
            *(_QWORD *)v270 = v29;
            *(_WORD *)&v270[8] = 2048;
            *(_QWORD *)v271 = v99;
            *(_WORD *)&v271[8] = 2048;
            *(_QWORD *)v272 = v222;
            *(_WORD *)&v272[8] = 1024;
            *(_DWORD *)v273 = 16;
            *(_WORD *)&v273[4] = 1024;
            *(_DWORD *)&v273[6] = v76;
            _os_log_impl(&dword_182FBE000, v102, v105, "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, no backtrace", v267, 0x36u);
          }
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v102 = (id)gLogObj;
          v107 = v262;
          if (os_log_type_enabled(v102, v262))
          {
            *(_DWORD *)v267 = 136447490;
            v268 = "nw_necp_append_tlv";
            v269 = 2048;
            *(_QWORD *)v270 = v29;
            *(_WORD *)&v270[8] = 2048;
            *(_QWORD *)v271 = v77 + 5;
            *(_WORD *)&v271[8] = 2048;
            *(_QWORD *)v272 = v222;
            *(_WORD *)&v272[8] = 1024;
            *(_DWORD *)v273 = 16;
            *(_WORD *)&v273[4] = 1024;
            *(_DWORD *)&v273[6] = v76;
            _os_log_impl(&dword_182FBE000, v102, v107, "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, backtrace limit exceeded", v267, 0x36u);
          }
        }
        goto LABEL_149;
      }
LABEL_150:
      if (!v101)
      {
LABEL_152:
        v29 = 0;
LABEL_153:
        free(v90);
        _Block_object_dispose(&v257, 8);
LABEL_154:

        v237[3] = v29;
        v28 = (unint64_t)v222;
        goto LABEL_155;
      }
LABEL_151:
      free(v101);
      goto LABEL_152;
    }
    __nwlog_obj();
    v156 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)v267 = 136447234;
    v268 = "nw_necp_append_tlv";
    v269 = 2048;
    *(_QWORD *)v270 = v29;
    *(_WORD *)&v270[8] = 2048;
    *(_QWORD *)v271 = v28;
    *(_WORD *)&v271[8] = 1024;
    *(_DWORD *)v272 = 16;
    *(_WORD *)&v272[4] = 1024;
    *(_DWORD *)&v272[6] = v76;
    v101 = (char *)_os_log_send_and_compose_impl();

    v262 = OS_LOG_TYPE_ERROR;
    v261 = 0;
    if (!__nwlog_fault(v101, &v262, &v261))
      goto LABEL_150;
    if (v262 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v102 = objc_claimAutoreleasedReturnValue();
      v157 = v262;
      if (os_log_type_enabled(v102, v262))
      {
        *(_DWORD *)v267 = 136447234;
        v268 = "nw_necp_append_tlv";
        v269 = 2048;
        *(_QWORD *)v270 = v29;
        *(_WORD *)&v270[8] = 2048;
        *(_QWORD *)v271 = v222;
        *(_WORD *)&v271[8] = 1024;
        *(_DWORD *)v272 = 16;
        *(_WORD *)&v272[4] = 1024;
        *(_DWORD *)&v272[6] = v76;
        _os_log_impl(&dword_182FBE000, v102, v157, "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u", v267, 0x2Cu);
      }
    }
    else if (v261)
    {
      v186 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v102 = objc_claimAutoreleasedReturnValue();
      v187 = v262;
      v188 = os_log_type_enabled(v102, v262);
      if (v186)
      {
        if (v188)
        {
          *(_DWORD *)v267 = 136447490;
          v268 = "nw_necp_append_tlv";
          v269 = 2048;
          *(_QWORD *)v270 = v29;
          *(_WORD *)&v270[8] = 2048;
          *(_QWORD *)v271 = v222;
          *(_WORD *)&v271[8] = 1024;
          *(_DWORD *)v272 = 16;
          *(_WORD *)&v272[4] = 1024;
          *(_DWORD *)&v272[6] = v76;
          *(_WORD *)v273 = 2082;
          *(_QWORD *)&v273[2] = v186;
          _os_log_impl(&dword_182FBE000, v102, v187, "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, dumping backtrace:%{public}s", v267, 0x36u);
        }

        free(v186);
        goto LABEL_150;
      }
      if (v188)
      {
        *(_DWORD *)v267 = 136447234;
        v268 = "nw_necp_append_tlv";
        v269 = 2048;
        *(_QWORD *)v270 = v29;
        *(_WORD *)&v270[8] = 2048;
        *(_QWORD *)v271 = v222;
        *(_WORD *)&v271[8] = 1024;
        *(_DWORD *)v272 = 16;
        *(_WORD *)&v272[4] = 1024;
        *(_DWORD *)&v272[6] = v76;
        _os_log_impl(&dword_182FBE000, v102, v187, "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, no backtrace", v267, 0x2Cu);
      }
    }
    else
    {
      __nwlog_obj();
      v102 = objc_claimAutoreleasedReturnValue();
      v206 = v262;
      if (os_log_type_enabled(v102, v262))
      {
        *(_DWORD *)v267 = 136447234;
        v268 = "nw_necp_append_tlv";
        v269 = 2048;
        *(_QWORD *)v270 = v29;
        *(_WORD *)&v270[8] = 2048;
        *(_QWORD *)v271 = v222;
        *(_WORD *)&v271[8] = 1024;
        *(_DWORD *)v272 = 16;
        *(_WORD *)&v272[4] = 1024;
        *(_DWORD *)&v272[6] = v76;
        _os_log_impl(&dword_182FBE000, v102, v206, "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, backtrace limit exceeded", v267, 0x2Cu);
      }
    }
LABEL_149:

    goto LABEL_150;
  }
LABEL_384:
  __break(1u);
  return result;
}

void sub_18372A2FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Block_object_dispose(&STACK[0x338], 8);

  _Block_object_dispose(&STACK[0x210], 8);
  _Block_object_dispose(&STACK[0x258], 8);
  _Block_object_dispose(&STACK[0x2F0], 8);

  _Unwind_Resume(a1);
}

size_t __nw_proxy_config_copy_agent_data_block_invoke(uint64_t a1, char *__s)
{
  size_t result;

  result = strlen(__s);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) += result + 6;
  return result;
}

size_t __nw_proxy_config_copy_agent_data_block_invoke_2(uint64_t a1, char *__s)
{
  size_t result;

  result = strlen(__s);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) += result + 6;
  return result;
}

size_t __nw_proxy_config_copy_agent_data_block_invoke_3(uint64_t a1, char *__s)
{
  size_t result;

  result = strlen(__s);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) += result + 6;
  return result;
}

uint64_t __nw_proxy_config_copy_agent_data_block_invoke_4(uint64_t result)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) += 21;
  return result;
}

BOOL nw_proxy_config_serialize_one_stack(void *a1, uint64_t a2, unint64_t a3)
{
  NSObject *v5;
  NSObject *v6;
  id *v7;
  void *v8;
  size_t v9;
  _OWORD *v10;
  id *v11;
  char *v12;
  uint64_t v13;
  __int128 v14;
  size_t v15;
  char *v16;
  unint64_t v17;
  id v18;
  const char *v19;
  NSObject *v20;
  os_log_type_t v21;
  id *v22;
  id v23;
  char *identifier;
  _BYTE *v25;
  id v26;
  char *v27;
  NSObject *v28;
  os_log_type_t v29;
  _BYTE *v30;
  void *v31;
  char *v32;
  const char *v33;
  char *v34;
  NSObject *v35;
  os_log_type_t v36;
  const char *v37;
  char *v38;
  NSObject *v39;
  os_log_type_t v40;
  os_log_type_t v41;
  os_log_type_t v42;
  os_log_type_t v43;
  NSObject *v44;
  os_log_type_t v45;
  char *v46;
  NSObject *v47;
  uint64_t v48;
  _BOOL8 result;
  void *v50;
  char *v51;
  NSObject *v52;
  os_log_type_t v53;
  char *backtrace_string;
  os_log_type_t v55;
  _BOOL4 v56;
  NSObject *v57;
  void *v58;
  void *v59;
  char *v60;
  NSObject *v61;
  os_log_type_t v62;
  NSObject *v63;
  void *v64;
  void *v65;
  const char *v66;
  NSObject *v67;
  os_log_type_t v68;
  void *v69;
  os_log_type_t v70;
  void *v71;
  os_log_type_t v72;
  void *v73;
  os_log_type_t v74;
  void *v75;
  os_log_type_t v76;
  os_log_type_t v77;
  char *v78;
  os_log_type_t v79;
  _BOOL4 v80;
  char *v81;
  NSObject *v82;
  os_log_type_t v83;
  _BOOL4 v84;
  os_log_type_t v85;
  _BOOL4 v86;
  os_log_type_t v87;
  _BOOL4 v88;
  char *v89;
  os_log_type_t v90;
  _BOOL4 v91;
  char *v92;
  os_log_type_t v93;
  _BOOL4 v94;
  os_log_type_t v95;
  os_log_type_t v96;
  os_log_type_t v97;
  os_log_type_t v98;
  os_log_type_t v99;
  os_log_type_t v100;
  id v101;
  void *__src;
  id v103;
  size_t __n;
  _QWORD iterate_block[6];
  uint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  char v110;
  os_log_type_t v111;
  os_log_type_t type[16];
  __int128 v113;
  uint64_t v114;
  uint8_t buf[4];
  const char *v116;
  __int16 v117;
  size_t v118;
  __int16 v119;
  uint64_t v120;
  __int16 v121;
  _BYTE v122[10];
  _BYTE v123[10];
  __int16 v124;
  char *v125;
  uint64_t v126;

  v126 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = v5;
  if (!v5)
  {
    __nwlog_obj();
    v50 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v116 = "nw_proxy_config_serialize_one_stack";
    v51 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v106) = 0;
    if (__nwlog_fault(v51, type, &v106))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v52 = objc_claimAutoreleasedReturnValue();
        v53 = type[0];
        if (os_log_type_enabled(v52, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          v116 = "nw_proxy_config_serialize_one_stack";
          _os_log_impl(&dword_182FBE000, v52, v53, "%{public}s called with null protocol_stack", buf, 0xCu);
        }
      }
      else if ((_BYTE)v106)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v52 = objc_claimAutoreleasedReturnValue();
        v55 = type[0];
        v56 = os_log_type_enabled(v52, type[0]);
        if (backtrace_string)
        {
          if (v56)
          {
            *(_DWORD *)buf = 136446466;
            v116 = "nw_proxy_config_serialize_one_stack";
            v117 = 2082;
            v118 = (size_t)backtrace_string;
            _os_log_impl(&dword_182FBE000, v52, v55, "%{public}s called with null protocol_stack, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_150;
        }
        if (v56)
        {
          *(_DWORD *)buf = 136446210;
          v116 = "nw_proxy_config_serialize_one_stack";
          _os_log_impl(&dword_182FBE000, v52, v55, "%{public}s called with null protocol_stack, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v52 = objc_claimAutoreleasedReturnValue();
        v77 = type[0];
        if (os_log_type_enabled(v52, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          v116 = "nw_proxy_config_serialize_one_stack";
          _os_log_impl(&dword_182FBE000, v52, v77, "%{public}s called with null protocol_stack, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_150:
    if (v51)
      free(v51);
    v48 = 0;
    goto LABEL_69;
  }
  v106 = 0;
  v107 = &v106;
  v108 = 0x2020000000;
  v109 = a2;
  iterate_block[0] = MEMORY[0x1E0C809B0];
  iterate_block[1] = 3221225472;
  iterate_block[2] = ___ZL35nw_proxy_config_serialize_one_stackPU31objcproto20OS_nw_protocol_stack8NSObjectPhPKh_block_invoke;
  iterate_block[3] = &unk_1E14A1118;
  iterate_block[4] = &v106;
  iterate_block[5] = a3;
  nw_protocol_stack_iterate_application_protocols(v5, iterate_block);
  v7 = v6;
  v103 = v7[3];

  v8 = v103;
  if (!v103)
  {
LABEL_68:
    v48 = v107[3];

    _Block_object_dispose(&v106, 8);
LABEL_69:

    return v48;
  }
  __n = 0;
  __src = (void *)nw_protocol_options_copy_serialized_bytes(v103, (uint64_t)&__n, 0);
  if (!__src || !__n)
  {
    v22 = (id *)v103;
    v23 = v22[1];

    identifier = nw_protocol_definition_get_identifier(v23);
    *(_OWORD *)type = *(_OWORD *)identifier;
    v113 = *((_OWORD *)identifier + 1);
    v114 = *((_QWORD *)identifier + 4);
    v25 = (_BYTE *)v107[3];
    if (v25)
    {
      if (a3)
      {
        if ((unint64_t)v25 >= a3)
        {
          __nwlog_obj();
          v73 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 136447234;
          v116 = "nw_necp_append_tlv";
          v117 = 2048;
          v118 = (size_t)v25;
          v119 = 2048;
          v120 = a3;
          v121 = 1024;
          *(_DWORD *)v122 = 5;
          *(_WORD *)&v122[4] = 1024;
          *(_DWORD *)&v122[6] = 42;
          v27 = (char *)_os_log_send_and_compose_impl();

          v111 = OS_LOG_TYPE_ERROR;
          v110 = 0;
          if (!__nwlog_fault(v27, &v111, &v110))
            goto LABEL_49;
          if (v111 == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            v28 = objc_claimAutoreleasedReturnValue();
            v74 = v111;
            if (os_log_type_enabled(v28, v111))
            {
              *(_DWORD *)buf = 136447234;
              v116 = "nw_necp_append_tlv";
              v117 = 2048;
              v118 = (size_t)v25;
              v119 = 2048;
              v120 = a3;
              v121 = 1024;
              *(_DWORD *)v122 = 5;
              *(_WORD *)&v122[4] = 1024;
              *(_DWORD *)&v122[6] = 42;
              _os_log_impl(&dword_182FBE000, v28, v74, "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u", buf, 0x2Cu);
            }
          }
          else if (v110)
          {
            v89 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            v28 = objc_claimAutoreleasedReturnValue();
            v90 = v111;
            v91 = os_log_type_enabled(v28, v111);
            if (v89)
            {
              if (v91)
              {
                *(_DWORD *)buf = 136447490;
                v116 = "nw_necp_append_tlv";
                v117 = 2048;
                v118 = (size_t)v25;
                v119 = 2048;
                v120 = a3;
                v121 = 1024;
                *(_DWORD *)v122 = 5;
                *(_WORD *)&v122[4] = 1024;
                *(_DWORD *)&v122[6] = 42;
                *(_WORD *)v123 = 2082;
                *(_QWORD *)&v123[2] = v89;
                _os_log_impl(&dword_182FBE000, v28, v90, "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, dumping backtrace:%{public}s", buf, 0x36u);
              }

              free(v89);
              goto LABEL_49;
            }
            if (v91)
            {
              *(_DWORD *)buf = 136447234;
              v116 = "nw_necp_append_tlv";
              v117 = 2048;
              v118 = (size_t)v25;
              v119 = 2048;
              v120 = a3;
              v121 = 1024;
              *(_DWORD *)v122 = 5;
              *(_WORD *)&v122[4] = 1024;
              *(_DWORD *)&v122[6] = 42;
              _os_log_impl(&dword_182FBE000, v28, v90, "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, no backtrace", buf, 0x2Cu);
            }
          }
          else
          {
            __nwlog_obj();
            v28 = objc_claimAutoreleasedReturnValue();
            v99 = v111;
            if (os_log_type_enabled(v28, v111))
            {
              *(_DWORD *)buf = 136447234;
              v116 = "nw_necp_append_tlv";
              v117 = 2048;
              v118 = (size_t)v25;
              v119 = 2048;
              v120 = a3;
              v121 = 1024;
              *(_DWORD *)v122 = 5;
              *(_WORD *)&v122[4] = 1024;
              *(_DWORD *)&v122[6] = 42;
              _os_log_impl(&dword_182FBE000, v28, v99, "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, backtrace limit exceeded", buf, 0x2Cu);
            }
          }
        }
        else
        {
          if (a3 - (unint64_t)v25 > 0x2E)
          {
            *v25 = 5;
            *(_DWORD *)(v25 + 1) = 42;
            *(_OWORD *)(v25 + 5) = *(_OWORD *)type;
            *(_OWORD *)(v25 + 21) = v113;
            *(_QWORD *)(v25 + 37) = v114;
            *(_WORD *)(v25 + 45) = 0;
            v30 = v25 + 47;
            v31 = __src;
            goto LABEL_52;
          }
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v26 = (id)gLogObj;
          *(_DWORD *)buf = 136447490;
          v116 = "nw_necp_append_tlv";
          v117 = 2048;
          v118 = (size_t)v25;
          v119 = 2048;
          v120 = 47;
          v121 = 2048;
          *(_QWORD *)v122 = a3;
          *(_WORD *)&v122[8] = 1024;
          *(_DWORD *)v123 = 5;
          *(_WORD *)&v123[4] = 1024;
          *(_DWORD *)&v123[6] = 42;
          v27 = (char *)_os_log_send_and_compose_impl();

          v111 = OS_LOG_TYPE_ERROR;
          v110 = 0;
          if (!__nwlog_fault(v27, &v111, &v110))
            goto LABEL_49;
          if (v111 == OS_LOG_TYPE_FAULT)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v28 = (id)gLogObj;
            v29 = v111;
            if (os_log_type_enabled(v28, v111))
            {
              *(_DWORD *)buf = 136447490;
              v116 = "nw_necp_append_tlv";
              v117 = 2048;
              v118 = (size_t)v25;
              v119 = 2048;
              v120 = 47;
              v121 = 2048;
              *(_QWORD *)v122 = a3;
              *(_WORD *)&v122[8] = 1024;
              *(_DWORD *)v123 = 5;
              *(_WORD *)&v123[4] = 1024;
              *(_DWORD *)&v123[6] = 42;
              _os_log_impl(&dword_182FBE000, v28, v29, "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u", buf, 0x36u);
            }
          }
          else if (v110)
          {
            v33 = __nw_create_backtrace_string();
            if (v33)
            {
              v34 = (char *)v33;
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v35 = (id)gLogObj;
              v36 = v111;
              if (os_log_type_enabled(v35, v111))
              {
                *(_DWORD *)buf = 136447746;
                v116 = "nw_necp_append_tlv";
                v117 = 2048;
                v118 = (size_t)v25;
                v119 = 2048;
                v120 = 47;
                v121 = 2048;
                *(_QWORD *)v122 = a3;
                *(_WORD *)&v122[8] = 1024;
                *(_DWORD *)v123 = 5;
                *(_WORD *)&v123[4] = 1024;
                *(_DWORD *)&v123[6] = 42;
                v124 = 2082;
                v125 = v34;
                _os_log_impl(&dword_182FBE000, v35, v36, "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, dumping backtrace:%{public}s", buf, 0x40u);
              }

              free(v34);
              goto LABEL_49;
            }
            __nwlog_obj();
            v28 = objc_claimAutoreleasedReturnValue();
            v43 = v111;
            if (os_log_type_enabled(v28, v111))
            {
              *(_DWORD *)buf = 136447490;
              v116 = "nw_necp_append_tlv";
              v117 = 2048;
              v118 = (size_t)v25;
              v119 = 2048;
              v120 = 47;
              v121 = 2048;
              *(_QWORD *)v122 = a3;
              *(_WORD *)&v122[8] = 1024;
              *(_DWORD *)v123 = 5;
              *(_WORD *)&v123[4] = 1024;
              *(_DWORD *)&v123[6] = 42;
              _os_log_impl(&dword_182FBE000, v28, v43, "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, no backtrace", buf, 0x36u);
            }
          }
          else
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v28 = (id)gLogObj;
            v41 = v111;
            if (os_log_type_enabled(v28, v111))
            {
              *(_DWORD *)buf = 136447490;
              v116 = "nw_necp_append_tlv";
              v117 = 2048;
              v118 = (size_t)v25;
              v119 = 2048;
              v120 = 47;
              v121 = 2048;
              *(_QWORD *)v122 = a3;
              *(_WORD *)&v122[8] = 1024;
              *(_DWORD *)v123 = 5;
              *(_WORD *)&v123[4] = 1024;
              *(_DWORD *)&v123[6] = 42;
              _os_log_impl(&dword_182FBE000, v28, v41, "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, backtrace limit exceeded", buf, 0x36u);
            }
          }
        }

LABEL_49:
        v31 = __src;
        if (v27)
          free(v27);
        v30 = 0;
        goto LABEL_52;
      }
      __nwlog_obj();
      v69 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      v116 = "nw_necp_append_tlv";
      v60 = (char *)_os_log_send_and_compose_impl();

      v111 = OS_LOG_TYPE_ERROR;
      v110 = 0;
      if (__nwlog_fault(v60, &v111, &v110))
      {
        if (v111 == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v61 = objc_claimAutoreleasedReturnValue();
          v70 = v111;
          if (os_log_type_enabled(v61, v111))
          {
            *(_DWORD *)buf = 136446210;
            v116 = "nw_necp_append_tlv";
            _os_log_impl(&dword_182FBE000, v61, v70, "%{public}s called with null beyond", buf, 0xCu);
          }
LABEL_179:

          goto LABEL_180;
        }
        if (!v110)
        {
          __nwlog_obj();
          v61 = objc_claimAutoreleasedReturnValue();
          v97 = v111;
          if (os_log_type_enabled(v61, v111))
          {
            *(_DWORD *)buf = 136446210;
            v116 = "nw_necp_append_tlv";
            _os_log_impl(&dword_182FBE000, v61, v97, "%{public}s called with null beyond, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_179;
        }
        v78 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v61 = objc_claimAutoreleasedReturnValue();
        v85 = v111;
        v86 = os_log_type_enabled(v61, v111);
        if (!v78)
        {
          if (v86)
          {
            *(_DWORD *)buf = 136446210;
            v116 = "nw_necp_append_tlv";
            _os_log_impl(&dword_182FBE000, v61, v85, "%{public}s called with null beyond, no backtrace", buf, 0xCu);
          }
          goto LABEL_179;
        }
        if (v86)
        {
          *(_DWORD *)buf = 136446466;
          v116 = "nw_necp_append_tlv";
          v117 = 2082;
          v118 = (size_t)v78;
          _os_log_impl(&dword_182FBE000, v61, v85, "%{public}s called with null beyond, dumping backtrace:%{public}s", buf, 0x16u);
        }
        goto LABEL_131;
      }
    }
    else
    {
      __nwlog_obj();
      v59 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      v116 = "nw_necp_append_tlv";
      v60 = (char *)_os_log_send_and_compose_impl();

      v111 = OS_LOG_TYPE_ERROR;
      v110 = 0;
      if (__nwlog_fault(v60, &v111, &v110))
      {
        if (v111 == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v61 = objc_claimAutoreleasedReturnValue();
          v62 = v111;
          if (os_log_type_enabled(v61, v111))
          {
            *(_DWORD *)buf = 136446210;
            v116 = "nw_necp_append_tlv";
            _os_log_impl(&dword_182FBE000, v61, v62, "%{public}s called with null tlv_start", buf, 0xCu);
          }
          goto LABEL_179;
        }
        if (!v110)
        {
          __nwlog_obj();
          v61 = objc_claimAutoreleasedReturnValue();
          v95 = v111;
          if (os_log_type_enabled(v61, v111))
          {
            *(_DWORD *)buf = 136446210;
            v116 = "nw_necp_append_tlv";
            _os_log_impl(&dword_182FBE000, v61, v95, "%{public}s called with null tlv_start, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_179;
        }
        v78 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v61 = objc_claimAutoreleasedReturnValue();
        v79 = v111;
        v80 = os_log_type_enabled(v61, v111);
        if (!v78)
        {
          if (v80)
          {
            *(_DWORD *)buf = 136446210;
            v116 = "nw_necp_append_tlv";
            _os_log_impl(&dword_182FBE000, v61, v79, "%{public}s called with null tlv_start, no backtrace", buf, 0xCu);
          }
          goto LABEL_179;
        }
        if (v80)
        {
          *(_DWORD *)buf = 136446466;
          v116 = "nw_necp_append_tlv";
          v117 = 2082;
          v118 = (size_t)v78;
          _os_log_impl(&dword_182FBE000, v61, v79, "%{public}s called with null tlv_start, dumping backtrace:%{public}s", buf, 0x16u);
        }
LABEL_131:

        free(v78);
      }
    }
LABEL_180:
    v31 = __src;
    if (v60)
      free(v60);
    v30 = 0;
LABEL_52:
    v107[3] = (uint64_t)v30;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v44 = (id)gLogObj;
    if (os_log_type_enabled(v44, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446466;
      v116 = "nw_proxy_config_serialize_one_stack";
      v117 = 2112;
      v118 = (size_t)v23;
      _os_log_impl(&dword_182FBE000, v44, OS_LOG_TYPE_DEBUG, "%{public}s Serialized proxy transport protocol %@", buf, 0x16u);
    }

    if (!v31)
      goto LABEL_67;
    goto LABEL_66;
  }
  v9 = __n + 42;
  if (__n == -42)
  {
    __nwlog_obj();
    v57 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v57, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    v116 = "strict_malloc";
    v58 = (void *)_os_log_send_and_compose_impl();

    result = __nwlog_abort((uint64_t)v58);
    if (result)
      goto LABEL_194;
    free(v58);
  }
  v10 = malloc_type_malloc(v9, 0xF2B69DE5uLL);
  if (v10)
    goto LABEL_7;
  __nwlog_obj();
  v63 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v63, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446466;
  v116 = "strict_malloc";
  v117 = 2048;
  v118 = v9;
  v64 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v64);
  if (!result)
  {
    free(v64);
LABEL_7:
    v11 = (id *)v103;
    v101 = v11[1];

    v12 = nw_protocol_definition_get_identifier(v101);
    v13 = *((_QWORD *)v12 + 4);
    v14 = *((_OWORD *)v12 + 1);
    *v10 = *(_OWORD *)v12;
    v10[1] = v14;
    *((_QWORD *)v10 + 4) = v13;
    v15 = __n;
    *((_WORD *)v10 + 20) = __n;
    memcpy((char *)v10 + 42, __src, v15);
    v16 = (char *)v107[3];
    if (v16)
    {
      if (a3)
      {
        if ((unint64_t)v16 < a3)
        {
          v17 = v9 + 5;
          if (a3 - (unint64_t)v16 >= v17)
          {
            *v16 = 5;
            *(_DWORD *)(v16 + 1) = v9;
            if ((_DWORD)v9)
              memcpy(v16 + 5, v10, v9);
            v32 = &v16[v17];
            goto LABEL_63;
          }
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v18 = (id)gLogObj;
          *(_DWORD *)buf = 136447490;
          v116 = "nw_necp_append_tlv";
          v117 = 2048;
          v118 = (size_t)v16;
          v119 = 2048;
          v120 = v9 + 5;
          v121 = 2048;
          *(_QWORD *)v122 = a3;
          *(_WORD *)&v122[8] = 1024;
          *(_DWORD *)v123 = 5;
          *(_WORD *)&v123[4] = 1024;
          *(_DWORD *)&v123[6] = v9;
          v19 = (const char *)_os_log_send_and_compose_impl();

          type[0] = OS_LOG_TYPE_ERROR;
          v111 = OS_LOG_TYPE_DEFAULT;
          if (__nwlog_fault(v19, type, &v111))
          {
            if (type[0] == OS_LOG_TYPE_FAULT)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v20 = (id)gLogObj;
              v21 = type[0];
              if (os_log_type_enabled(v20, type[0]))
              {
                *(_DWORD *)buf = 136447490;
                v116 = "nw_necp_append_tlv";
                v117 = 2048;
                v118 = (size_t)v16;
                v119 = 2048;
                v120 = v9 + 5;
                v121 = 2048;
                *(_QWORD *)v122 = a3;
                *(_WORD *)&v122[8] = 1024;
                *(_DWORD *)v123 = 5;
                *(_WORD *)&v123[4] = 1024;
                *(_DWORD *)&v123[6] = v9;
                _os_log_impl(&dword_182FBE000, v20, v21, "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u", buf, 0x36u);
              }
            }
            else if (v111)
            {
              v37 = __nw_create_backtrace_string();
              if (v37)
              {
                v38 = (char *)v37;
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                v39 = (id)gLogObj;
                v40 = type[0];
                if (os_log_type_enabled(v39, type[0]))
                {
                  *(_DWORD *)buf = 136447746;
                  v116 = "nw_necp_append_tlv";
                  v117 = 2048;
                  v118 = (size_t)v16;
                  v119 = 2048;
                  v120 = v9 + 5;
                  v121 = 2048;
                  *(_QWORD *)v122 = a3;
                  *(_WORD *)&v122[8] = 1024;
                  *(_DWORD *)v123 = 5;
                  *(_WORD *)&v123[4] = 1024;
                  *(_DWORD *)&v123[6] = v9;
                  v124 = 2082;
                  v125 = v38;
                  _os_log_impl(&dword_182FBE000, v39, v40, "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, dumping backtrace:%{public}s", buf, 0x40u);
                }

                free(v38);
                if (!v19)
                  goto LABEL_62;
LABEL_60:
                v46 = (char *)v19;
LABEL_61:
                free(v46);
                goto LABEL_62;
              }
              __nwlog_obj();
              v20 = objc_claimAutoreleasedReturnValue();
              v45 = type[0];
              if (os_log_type_enabled(v20, type[0]))
              {
                *(_DWORD *)buf = 136447490;
                v116 = "nw_necp_append_tlv";
                v117 = 2048;
                v118 = (size_t)v16;
                v119 = 2048;
                v120 = v9 + 5;
                v121 = 2048;
                *(_QWORD *)v122 = a3;
                *(_WORD *)&v122[8] = 1024;
                *(_DWORD *)v123 = 5;
                *(_WORD *)&v123[4] = 1024;
                *(_DWORD *)&v123[6] = v9;
                _os_log_impl(&dword_182FBE000, v20, v45, "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, no backtrace", buf, 0x36u);
              }
            }
            else
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v20 = (id)gLogObj;
              v42 = type[0];
              if (os_log_type_enabled(v20, type[0]))
              {
                *(_DWORD *)buf = 136447490;
                v116 = "nw_necp_append_tlv";
                v117 = 2048;
                v118 = (size_t)v16;
                v119 = 2048;
                v120 = v9 + 5;
                v121 = 2048;
                *(_QWORD *)v122 = a3;
                *(_WORD *)&v122[8] = 1024;
                *(_DWORD *)v123 = 5;
                *(_WORD *)&v123[4] = 1024;
                *(_DWORD *)&v123[6] = v9;
                _os_log_impl(&dword_182FBE000, v20, v42, "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, backtrace limit exceeded", buf, 0x36u);
              }
            }
            goto LABEL_58;
          }
LABEL_59:
          if (!v19)
          {
LABEL_62:
            v32 = 0;
LABEL_63:
            v107[3] = (uint64_t)v32;
            free(v10);
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v47 = (id)gLogObj;
            if (os_log_type_enabled(v47, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136446466;
              v116 = "nw_proxy_config_serialize_one_stack";
              v117 = 2112;
              v118 = (size_t)v101;
              _os_log_impl(&dword_182FBE000, v47, OS_LOG_TYPE_DEBUG, "%{public}s Serialized proxy transport protocol %@", buf, 0x16u);
            }

LABEL_66:
            free(__src);
LABEL_67:
            v8 = v103;
            goto LABEL_68;
          }
          goto LABEL_60;
        }
        __nwlog_obj();
        v75 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136447234;
        v116 = "nw_necp_append_tlv";
        v117 = 2048;
        v118 = (size_t)v16;
        v119 = 2048;
        v120 = a3;
        v121 = 1024;
        *(_DWORD *)v122 = 5;
        *(_WORD *)&v122[4] = 1024;
        *(_DWORD *)&v122[6] = v9;
        v19 = (const char *)_os_log_send_and_compose_impl();

        type[0] = OS_LOG_TYPE_ERROR;
        v111 = OS_LOG_TYPE_DEFAULT;
        if (!__nwlog_fault(v19, type, &v111))
          goto LABEL_59;
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v20 = objc_claimAutoreleasedReturnValue();
          v76 = type[0];
          if (os_log_type_enabled(v20, type[0]))
          {
            *(_DWORD *)buf = 136447234;
            v116 = "nw_necp_append_tlv";
            v117 = 2048;
            v118 = (size_t)v16;
            v119 = 2048;
            v120 = a3;
            v121 = 1024;
            *(_DWORD *)v122 = 5;
            *(_WORD *)&v122[4] = 1024;
            *(_DWORD *)&v122[6] = v9;
            _os_log_impl(&dword_182FBE000, v20, v76, "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u", buf, 0x2Cu);
          }
        }
        else if (v111)
        {
          v92 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v20 = objc_claimAutoreleasedReturnValue();
          v93 = type[0];
          v94 = os_log_type_enabled(v20, type[0]);
          if (v92)
          {
            if (v94)
            {
              *(_DWORD *)buf = 136447490;
              v116 = "nw_necp_append_tlv";
              v117 = 2048;
              v118 = (size_t)v16;
              v119 = 2048;
              v120 = a3;
              v121 = 1024;
              *(_DWORD *)v122 = 5;
              *(_WORD *)&v122[4] = 1024;
              *(_DWORD *)&v122[6] = v9;
              *(_WORD *)v123 = 2082;
              *(_QWORD *)&v123[2] = v92;
              _os_log_impl(&dword_182FBE000, v20, v93, "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, dumping backtrace:%{public}s", buf, 0x36u);
            }

            free(v92);
            goto LABEL_59;
          }
          if (v94)
          {
            *(_DWORD *)buf = 136447234;
            v116 = "nw_necp_append_tlv";
            v117 = 2048;
            v118 = (size_t)v16;
            v119 = 2048;
            v120 = a3;
            v121 = 1024;
            *(_DWORD *)v122 = 5;
            *(_WORD *)&v122[4] = 1024;
            *(_DWORD *)&v122[6] = v9;
            _os_log_impl(&dword_182FBE000, v20, v93, "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, no backtrace", buf, 0x2Cu);
          }
        }
        else
        {
          __nwlog_obj();
          v20 = objc_claimAutoreleasedReturnValue();
          v100 = type[0];
          if (os_log_type_enabled(v20, type[0]))
          {
            *(_DWORD *)buf = 136447234;
            v116 = "nw_necp_append_tlv";
            v117 = 2048;
            v118 = (size_t)v16;
            v119 = 2048;
            v120 = a3;
            v121 = 1024;
            *(_DWORD *)v122 = 5;
            *(_WORD *)&v122[4] = 1024;
            *(_DWORD *)&v122[6] = v9;
            _os_log_impl(&dword_182FBE000, v20, v100, "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, backtrace limit exceeded", buf, 0x2Cu);
          }
        }
LABEL_58:

        goto LABEL_59;
      }
      __nwlog_obj();
      v71 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      v116 = "nw_necp_append_tlv";
      v66 = (const char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      v111 = OS_LOG_TYPE_DEFAULT;
      if (__nwlog_fault(v66, type, &v111))
      {
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v67 = objc_claimAutoreleasedReturnValue();
          v72 = type[0];
          if (os_log_type_enabled(v67, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            v116 = "nw_necp_append_tlv";
            _os_log_impl(&dword_182FBE000, v67, v72, "%{public}s called with null beyond", buf, 0xCu);
          }
LABEL_164:

          goto LABEL_186;
        }
        if (v111 == OS_LOG_TYPE_DEFAULT)
        {
          __nwlog_obj();
          v67 = objc_claimAutoreleasedReturnValue();
          v98 = type[0];
          if (os_log_type_enabled(v67, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            v116 = "nw_necp_append_tlv";
            _os_log_impl(&dword_182FBE000, v67, v98, "%{public}s called with null beyond, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_164;
        }
        v81 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v82 = objc_claimAutoreleasedReturnValue();
        v87 = type[0];
        v88 = os_log_type_enabled(v82, type[0]);
        if (v81)
        {
          if (v88)
          {
            *(_DWORD *)buf = 136446466;
            v116 = "nw_necp_append_tlv";
            v117 = 2082;
            v118 = (size_t)v81;
            _os_log_impl(&dword_182FBE000, v82, v87, "%{public}s called with null beyond, dumping backtrace:%{public}s", buf, 0x16u);
          }
LABEL_136:

          free(v81);
          goto LABEL_186;
        }
        if (v88)
        {
          *(_DWORD *)buf = 136446210;
          v116 = "nw_necp_append_tlv";
          _os_log_impl(&dword_182FBE000, v82, v87, "%{public}s called with null beyond, no backtrace", buf, 0xCu);
        }
        goto LABEL_185;
      }
    }
    else
    {
      __nwlog_obj();
      v65 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      v116 = "nw_necp_append_tlv";
      v66 = (const char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      v111 = OS_LOG_TYPE_DEFAULT;
      if (__nwlog_fault(v66, type, &v111))
      {
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v67 = objc_claimAutoreleasedReturnValue();
          v68 = type[0];
          if (os_log_type_enabled(v67, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            v116 = "nw_necp_append_tlv";
            _os_log_impl(&dword_182FBE000, v67, v68, "%{public}s called with null tlv_start", buf, 0xCu);
          }
          goto LABEL_164;
        }
        if (v111 == OS_LOG_TYPE_DEFAULT)
        {
          __nwlog_obj();
          v67 = objc_claimAutoreleasedReturnValue();
          v96 = type[0];
          if (os_log_type_enabled(v67, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            v116 = "nw_necp_append_tlv";
            _os_log_impl(&dword_182FBE000, v67, v96, "%{public}s called with null tlv_start, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_164;
        }
        v81 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v82 = objc_claimAutoreleasedReturnValue();
        v83 = type[0];
        v84 = os_log_type_enabled(v82, type[0]);
        if (v81)
        {
          if (v84)
          {
            *(_DWORD *)buf = 136446466;
            v116 = "nw_necp_append_tlv";
            v117 = 2082;
            v118 = (size_t)v81;
            _os_log_impl(&dword_182FBE000, v82, v83, "%{public}s called with null tlv_start, dumping backtrace:%{public}s", buf, 0x16u);
          }
          goto LABEL_136;
        }
        if (v84)
        {
          *(_DWORD *)buf = 136446210;
          v116 = "nw_necp_append_tlv";
          _os_log_impl(&dword_182FBE000, v82, v83, "%{public}s called with null tlv_start, no backtrace", buf, 0xCu);
        }
LABEL_185:

      }
    }
LABEL_186:
    if (!v66)
      goto LABEL_62;
    v46 = (char *)v66;
    goto LABEL_61;
  }
LABEL_194:
  __break(1u);
  return result;
}

void sub_18372C114(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  void *v26;

  _Block_object_dispose(&a26, 8);
  _Unwind_Resume(a1);
}

BOOL __nw_proxy_config_copy_agent_data_block_invoke_101(uint64_t a1, const char *a2, void *a3)
{
  id v5;
  size_t v6;
  int v7;
  int should_proxy_transport_at_level;
  char v9;
  unsigned __int8 v10;
  unint64_t v11;
  unint64_t v12;
  size_t v13;
  id v14;
  int v15;
  char *v16;
  NSObject *v17;
  os_log_type_t v18;
  _BOOL8 v19;
  size_t v20;
  char *v21;
  os_log_type_t v22;
  _BOOL4 v23;
  os_log_type_t v24;
  id v26;
  void *v27;
  char *v28;
  NSObject *v29;
  os_log_type_t v30;
  void *v31;
  os_log_type_t v32;
  void *v33;
  int v34;
  char *v35;
  NSObject *v36;
  os_log_type_t v37;
  char *backtrace_string;
  os_log_type_t v39;
  _BOOL4 v40;
  char *v41;
  os_log_type_t v42;
  _BOOL4 v43;
  char *v44;
  os_log_type_t v45;
  _BOOL4 v46;
  void *v47;
  int v48;
  char *v49;
  NSObject *v50;
  os_log_type_t v51;
  os_log_type_t v52;
  os_log_type_t v53;
  os_log_type_t v54;
  char *v55;
  os_log_type_t v56;
  _BOOL4 v57;
  os_log_type_t v58;
  id v59;
  char v60;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v63;
  __int16 v64;
  _BYTE v65[10];
  _BYTE v66[10];
  _BYTE v67[10];
  _BYTE v68[10];
  __int16 v69;
  char *v70;
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  v6 = strlen(a2);
  if (!v6 || (v7 = v6, !strcmp(*(const char **)(a1 + 56), a2)))
  {
    v19 = 1;
    goto LABEL_41;
  }
  should_proxy_transport_at_level = nw_proxy_config_should_proxy_transport_at_level(*(NWConcrete_nw_proxy_config **)(a1 + 32), a2, 0);
  if (should_proxy_transport_at_level == 2)
    v9 = 10;
  else
    v9 = 2;
  if (should_proxy_transport_at_level == 3)
    v10 = 3;
  else
    v10 = v9;
  v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
  if (!v11)
  {
    v26 = v5;
    __nwlog_obj();
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v63 = "nw_necp_append_tlv";
    v28 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v60 = 0;
    if (!__nwlog_fault(v28, &type, &v60))
      goto LABEL_98;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v29 = objc_claimAutoreleasedReturnValue();
      v30 = type;
      if (os_log_type_enabled(v29, type))
      {
        *(_DWORD *)buf = 136446210;
        v63 = "nw_necp_append_tlv";
        _os_log_impl(&dword_182FBE000, v29, v30, "%{public}s called with null tlv_start", buf, 0xCu);
      }
    }
    else if (v60)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v29 = objc_claimAutoreleasedReturnValue();
      v39 = type;
      v40 = os_log_type_enabled(v29, type);
      if (backtrace_string)
      {
        if (v40)
        {
          *(_DWORD *)buf = 136446466;
          v63 = "nw_necp_append_tlv";
          v64 = 2082;
          *(_QWORD *)v65 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v29, v39, "%{public}s called with null tlv_start, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_98:
        if (!v28)
        {
LABEL_100:
          v20 = 0;
          v5 = v26;
          goto LABEL_38;
        }
LABEL_99:
        free(v28);
        goto LABEL_100;
      }
      if (v40)
      {
        *(_DWORD *)buf = 136446210;
        v63 = "nw_necp_append_tlv";
        _os_log_impl(&dword_182FBE000, v29, v39, "%{public}s called with null tlv_start, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v29 = objc_claimAutoreleasedReturnValue();
      v52 = type;
      if (os_log_type_enabled(v29, type))
      {
        *(_DWORD *)buf = 136446210;
        v63 = "nw_necp_append_tlv";
        _os_log_impl(&dword_182FBE000, v29, v52, "%{public}s called with null tlv_start, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_97:

    goto LABEL_98;
  }
  v12 = *(_QWORD *)(a1 + 64);
  if (!v12)
  {
    v26 = v5;
    __nwlog_obj();
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v63 = "nw_necp_append_tlv";
    v28 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v60 = 0;
    if (!__nwlog_fault(v28, &type, &v60))
      goto LABEL_98;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v29 = objc_claimAutoreleasedReturnValue();
      v32 = type;
      if (os_log_type_enabled(v29, type))
      {
        *(_DWORD *)buf = 136446210;
        v63 = "nw_necp_append_tlv";
        _os_log_impl(&dword_182FBE000, v29, v32, "%{public}s called with null beyond", buf, 0xCu);
      }
    }
    else if (v60)
    {
      v41 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v29 = objc_claimAutoreleasedReturnValue();
      v42 = type;
      v43 = os_log_type_enabled(v29, type);
      if (v41)
      {
        if (v43)
        {
          *(_DWORD *)buf = 136446466;
          v63 = "nw_necp_append_tlv";
          v64 = 2082;
          *(_QWORD *)v65 = v41;
          _os_log_impl(&dword_182FBE000, v29, v42, "%{public}s called with null beyond, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v41);
        if (!v28)
          goto LABEL_100;
        goto LABEL_99;
      }
      if (v43)
      {
        *(_DWORD *)buf = 136446210;
        v63 = "nw_necp_append_tlv";
        _os_log_impl(&dword_182FBE000, v29, v42, "%{public}s called with null beyond, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v29 = objc_claimAutoreleasedReturnValue();
      v53 = type;
      if (os_log_type_enabled(v29, type))
      {
        *(_DWORD *)buf = 136446210;
        v63 = "nw_necp_append_tlv";
        _os_log_impl(&dword_182FBE000, v29, v53, "%{public}s called with null beyond, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_97;
  }
  v13 = (v7 + 1);
  if (v11 >= v12)
  {
    __nwlog_obj();
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136447234;
    v34 = v10;
    v63 = "nw_necp_append_tlv";
    v64 = 2048;
    *(_QWORD *)v65 = v11;
    *(_WORD *)&v65[8] = 2048;
    *(_QWORD *)v66 = v12;
    *(_WORD *)&v66[8] = 1024;
    *(_DWORD *)v67 = v10;
    *(_WORD *)&v67[4] = 1024;
    *(_DWORD *)&v67[6] = v13;
    v35 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v60 = 0;
    if (__nwlog_fault(v35, &type, &v60))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v36 = objc_claimAutoreleasedReturnValue();
        v37 = type;
        if (os_log_type_enabled(v36, type))
        {
          *(_DWORD *)buf = 136447234;
          v63 = "nw_necp_append_tlv";
          v64 = 2048;
          *(_QWORD *)v65 = v11;
          *(_WORD *)&v65[8] = 2048;
          *(_QWORD *)v66 = v12;
          *(_WORD *)&v66[8] = 1024;
          *(_DWORD *)v67 = v34;
          *(_WORD *)&v67[4] = 1024;
          *(_DWORD *)&v67[6] = v13;
          _os_log_impl(&dword_182FBE000, v36, v37, "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u", buf, 0x2Cu);
        }
      }
      else if (v60)
      {
        v44 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v36 = objc_claimAutoreleasedReturnValue();
        v45 = type;
        v46 = os_log_type_enabled(v36, type);
        if (v44)
        {
          if (v46)
          {
            *(_DWORD *)buf = 136447490;
            v63 = "nw_necp_append_tlv";
            v64 = 2048;
            *(_QWORD *)v65 = v11;
            *(_WORD *)&v65[8] = 2048;
            *(_QWORD *)v66 = v12;
            *(_WORD *)&v66[8] = 1024;
            *(_DWORD *)v67 = v34;
            *(_WORD *)&v67[4] = 1024;
            *(_DWORD *)&v67[6] = v13;
            *(_WORD *)v68 = 2082;
            *(_QWORD *)&v68[2] = v44;
            _os_log_impl(&dword_182FBE000, v36, v45, "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, dumping backtrace:%{public}s", buf, 0x36u);
          }

          free(v44);
          goto LABEL_104;
        }
        if (v46)
        {
          *(_DWORD *)buf = 136447234;
          v63 = "nw_necp_append_tlv";
          v64 = 2048;
          *(_QWORD *)v65 = v11;
          *(_WORD *)&v65[8] = 2048;
          *(_QWORD *)v66 = v12;
          *(_WORD *)&v66[8] = 1024;
          *(_DWORD *)v67 = v34;
          *(_WORD *)&v67[4] = 1024;
          *(_DWORD *)&v67[6] = v13;
          _os_log_impl(&dword_182FBE000, v36, v45, "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, no backtrace", buf, 0x2Cu);
        }
      }
      else
      {
        __nwlog_obj();
        v36 = objc_claimAutoreleasedReturnValue();
        v54 = type;
        if (os_log_type_enabled(v36, type))
        {
          *(_DWORD *)buf = 136447234;
          v63 = "nw_necp_append_tlv";
          v64 = 2048;
          *(_QWORD *)v65 = v11;
          *(_WORD *)&v65[8] = 2048;
          *(_QWORD *)v66 = v12;
          *(_WORD *)&v66[8] = 1024;
          *(_DWORD *)v67 = v34;
          *(_WORD *)&v67[4] = 1024;
          *(_DWORD *)&v67[6] = v13;
          _os_log_impl(&dword_182FBE000, v36, v54, "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, backtrace limit exceeded", buf, 0x2Cu);
        }
      }

    }
LABEL_104:
    if (v35)
      free(v35);
    v20 = 0;
    goto LABEL_38;
  }
  if (v12 - v11 < v13 + 5)
  {
    v59 = v5;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v14 = (id)gLogObj;
    v15 = v10;
    *(_DWORD *)buf = 136447490;
    v63 = "nw_necp_append_tlv";
    v64 = 2048;
    *(_QWORD *)v65 = v11;
    *(_WORD *)&v65[8] = 2048;
    *(_QWORD *)v66 = v13 + 5;
    *(_WORD *)&v66[8] = 2048;
    *(_QWORD *)v67 = v12;
    *(_WORD *)&v67[8] = 1024;
    *(_DWORD *)v68 = v10;
    *(_WORD *)&v68[4] = 1024;
    *(_DWORD *)&v68[6] = v13;
    v16 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v60 = 0;
    if (__nwlog_fault(v16, &type, &v60))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v17 = (id)gLogObj;
        v18 = type;
        if (os_log_type_enabled(v17, type))
        {
          *(_DWORD *)buf = 136447490;
          v63 = "nw_necp_append_tlv";
          v64 = 2048;
          *(_QWORD *)v65 = v11;
          *(_WORD *)&v65[8] = 2048;
          *(_QWORD *)v66 = v13 + 5;
          *(_WORD *)&v66[8] = 2048;
          *(_QWORD *)v67 = v12;
          *(_WORD *)&v67[8] = 1024;
          *(_DWORD *)v68 = v15;
          *(_WORD *)&v68[4] = 1024;
          *(_DWORD *)&v68[6] = v13;
          _os_log_impl(&dword_182FBE000, v17, v18, "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u", buf, 0x36u);
        }
      }
      else if (v60)
      {
        v21 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v17 = (id)gLogObj;
        v22 = type;
        v23 = os_log_type_enabled(v17, type);
        if (v21)
        {
          if (v23)
          {
            *(_DWORD *)buf = 136447746;
            v63 = "nw_necp_append_tlv";
            v64 = 2048;
            *(_QWORD *)v65 = v11;
            *(_WORD *)&v65[8] = 2048;
            *(_QWORD *)v66 = v13 + 5;
            *(_WORD *)&v66[8] = 2048;
            *(_QWORD *)v67 = v12;
            *(_WORD *)&v67[8] = 1024;
            *(_DWORD *)v68 = v15;
            *(_WORD *)&v68[4] = 1024;
            *(_DWORD *)&v68[6] = v13;
            v69 = 2082;
            v70 = v21;
            _os_log_impl(&dword_182FBE000, v17, v22, "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, dumping backtrace:%{public}s", buf, 0x40u);
          }

          free(v21);
          if (!v16)
            goto LABEL_37;
          goto LABEL_36;
        }
        if (v23)
        {
          *(_DWORD *)buf = 136447490;
          v63 = "nw_necp_append_tlv";
          v64 = 2048;
          *(_QWORD *)v65 = v11;
          *(_WORD *)&v65[8] = 2048;
          *(_QWORD *)v66 = v13 + 5;
          *(_WORD *)&v66[8] = 2048;
          *(_QWORD *)v67 = v12;
          *(_WORD *)&v67[8] = 1024;
          *(_DWORD *)v68 = v15;
          *(_WORD *)&v68[4] = 1024;
          *(_DWORD *)&v68[6] = v13;
          _os_log_impl(&dword_182FBE000, v17, v22, "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, no backtrace", buf, 0x36u);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v17 = (id)gLogObj;
        v24 = type;
        if (os_log_type_enabled(v17, type))
        {
          *(_DWORD *)buf = 136447490;
          v63 = "nw_necp_append_tlv";
          v64 = 2048;
          *(_QWORD *)v65 = v11;
          *(_WORD *)&v65[8] = 2048;
          *(_QWORD *)v66 = v13 + 5;
          *(_WORD *)&v66[8] = 2048;
          *(_QWORD *)v67 = v12;
          *(_WORD *)&v67[8] = 1024;
          *(_DWORD *)v68 = v15;
          *(_WORD *)&v68[4] = 1024;
          *(_DWORD *)&v68[6] = v13;
          _os_log_impl(&dword_182FBE000, v17, v24, "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, backtrace limit exceeded", buf, 0x36u);
        }
      }

    }
    if (!v16)
    {
LABEL_37:
      v20 = 0;
      v5 = v59;
      goto LABEL_38;
    }
LABEL_36:
    free(v16);
    goto LABEL_37;
  }
  *(_BYTE *)v11 = v10;
  *(_DWORD *)(v11 + 1) = v13;
  if ((_DWORD)v13)
  {
    if (a2)
    {
      memcpy((void *)(v11 + 5), a2, v13);
      goto LABEL_22;
    }
    __nwlog_obj();
    v47 = (void *)objc_claimAutoreleasedReturnValue();
    v48 = v10;
    *(_DWORD *)buf = 136446722;
    v63 = "nw_necp_append_tlv";
    v64 = 1024;
    *(_DWORD *)v65 = v10;
    *(_WORD *)&v65[4] = 1024;
    *(_DWORD *)&v65[6] = v13;
    v49 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v60 = 0;
    if (__nwlog_fault(v49, &type, &v60))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v50 = objc_claimAutoreleasedReturnValue();
        v51 = type;
        if (os_log_type_enabled(v50, type))
        {
          *(_DWORD *)buf = 136446722;
          v63 = "nw_necp_append_tlv";
          v64 = 1024;
          *(_DWORD *)v65 = v48;
          *(_WORD *)&v65[4] = 1024;
          *(_DWORD *)&v65[6] = v13;
          _os_log_impl(&dword_182FBE000, v50, v51, "%{public}s type=%u length=%u but value is NULL", buf, 0x18u);
        }
      }
      else if (v60)
      {
        v55 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v50 = objc_claimAutoreleasedReturnValue();
        v56 = type;
        v57 = os_log_type_enabled(v50, type);
        if (v55)
        {
          if (v57)
          {
            *(_DWORD *)buf = 136446978;
            v63 = "nw_necp_append_tlv";
            v64 = 1024;
            *(_DWORD *)v65 = v48;
            *(_WORD *)&v65[4] = 1024;
            *(_DWORD *)&v65[6] = v13;
            *(_WORD *)v66 = 2082;
            *(_QWORD *)&v66[2] = v55;
            _os_log_impl(&dword_182FBE000, v50, v56, "%{public}s type=%u length=%u but value is NULL, dumping backtrace:%{public}s", buf, 0x22u);
          }

          free(v55);
          goto LABEL_113;
        }
        if (v57)
        {
          *(_DWORD *)buf = 136446722;
          v63 = "nw_necp_append_tlv";
          v64 = 1024;
          *(_DWORD *)v65 = v48;
          *(_WORD *)&v65[4] = 1024;
          *(_DWORD *)&v65[6] = v13;
          _os_log_impl(&dword_182FBE000, v50, v56, "%{public}s type=%u length=%u but value is NULL, no backtrace", buf, 0x18u);
        }
      }
      else
      {
        __nwlog_obj();
        v50 = objc_claimAutoreleasedReturnValue();
        v58 = type;
        if (os_log_type_enabled(v50, type))
        {
          *(_DWORD *)buf = 136446722;
          v63 = "nw_necp_append_tlv";
          v64 = 1024;
          *(_DWORD *)v65 = v48;
          *(_WORD *)&v65[4] = 1024;
          *(_DWORD *)&v65[6] = v13;
          _os_log_impl(&dword_182FBE000, v50, v58, "%{public}s type=%u length=%u but value is NULL, backtrace limit exceeded", buf, 0x18u);
        }
      }

    }
LABEL_113:
    if (v49)
      free(v49);
    v20 = 0;
    goto LABEL_38;
  }
LABEL_22:
  v20 = v11 + v13 + 5;
LABEL_38:
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = v20;
  if (*(id *)(a1 + 40) != v5)
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = nw_proxy_config_serialize_one_stack(v5, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8)+ 24), *(_QWORD *)(a1 + 64));
  v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) != 0;
LABEL_41:

  return v19;
}

void sub_18372CFCC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL __nw_proxy_config_copy_agent_data_block_invoke_2_102(uint64_t a1, int a2, xpc_object_t xstring)
{
  const char *string_ptr;
  size_t v5;
  unint64_t v6;
  unint64_t v7;
  size_t v8;
  id v9;
  const char *v10;
  NSObject *v11;
  os_log_type_t v12;
  size_t v14;
  char *v15;
  os_log_type_t v16;
  _BOOL4 v17;
  os_log_type_t v18;
  char *v19;
  void *v20;
  const char *v21;
  NSObject *v22;
  os_log_type_t v23;
  void *v24;
  os_log_type_t v25;
  void *v26;
  os_log_type_t v27;
  char *backtrace_string;
  os_log_type_t v29;
  _BOOL4 v30;
  os_log_type_t v31;
  _BOOL4 v32;
  char *v33;
  os_log_type_t v34;
  _BOOL4 v35;
  void *v36;
  os_log_type_t v37;
  os_log_type_t v38;
  os_log_type_t v39;
  os_log_type_t v40;
  os_log_type_t v41;
  _BOOL4 v42;
  os_log_type_t v43;
  char v44;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v47;
  __int16 v48;
  _BYTE v49[10];
  _BYTE v50[10];
  _BYTE v51[10];
  _BYTE v52[10];
  __int16 v53;
  char *v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  string_ptr = xpc_string_get_string_ptr(xstring);
  v5 = strlen(string_ptr);
  if (!v5)
    return 1;
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  if (!v6)
  {
    __nwlog_obj();
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v47 = "nw_necp_append_tlv";
    v21 = (const char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v44 = 0;
    if (__nwlog_fault(v21, &type, &v44))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v22 = objc_claimAutoreleasedReturnValue();
        v23 = type;
        if (os_log_type_enabled(v22, type))
        {
          *(_DWORD *)buf = 136446210;
          v47 = "nw_necp_append_tlv";
          _os_log_impl(&dword_182FBE000, v22, v23, "%{public}s called with null tlv_start", buf, 0xCu);
        }
        goto LABEL_87;
      }
      if (!v44)
      {
        __nwlog_obj();
        v22 = objc_claimAutoreleasedReturnValue();
        v38 = type;
        if (os_log_type_enabled(v22, type))
        {
          *(_DWORD *)buf = 136446210;
          v47 = "nw_necp_append_tlv";
          _os_log_impl(&dword_182FBE000, v22, v38, "%{public}s called with null tlv_start, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_87;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v22 = objc_claimAutoreleasedReturnValue();
      v29 = type;
      v30 = os_log_type_enabled(v22, type);
      if (!backtrace_string)
      {
        if (v30)
        {
          *(_DWORD *)buf = 136446210;
          v47 = "nw_necp_append_tlv";
          _os_log_impl(&dword_182FBE000, v22, v29, "%{public}s called with null tlv_start, no backtrace", buf, 0xCu);
        }
        goto LABEL_87;
      }
      if (v30)
      {
        *(_DWORD *)buf = 136446466;
        v47 = "nw_necp_append_tlv";
        v48 = 2082;
        *(_QWORD *)v49 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v22, v29, "%{public}s called with null tlv_start, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_57:

      free(backtrace_string);
    }
LABEL_88:
    if (!v21)
      goto LABEL_31;
    v19 = (char *)v21;
    goto LABEL_30;
  }
  v7 = *(_QWORD *)(a1 + 40);
  if (!v7)
  {
    __nwlog_obj();
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v47 = "nw_necp_append_tlv";
    v21 = (const char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v44 = 0;
    if (__nwlog_fault(v21, &type, &v44))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v22 = objc_claimAutoreleasedReturnValue();
        v25 = type;
        if (os_log_type_enabled(v22, type))
        {
          *(_DWORD *)buf = 136446210;
          v47 = "nw_necp_append_tlv";
          _os_log_impl(&dword_182FBE000, v22, v25, "%{public}s called with null beyond", buf, 0xCu);
        }
LABEL_87:

        goto LABEL_88;
      }
      if (!v44)
      {
        __nwlog_obj();
        v22 = objc_claimAutoreleasedReturnValue();
        v39 = type;
        if (os_log_type_enabled(v22, type))
        {
          *(_DWORD *)buf = 136446210;
          v47 = "nw_necp_append_tlv";
          _os_log_impl(&dword_182FBE000, v22, v39, "%{public}s called with null beyond, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_87;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v22 = objc_claimAutoreleasedReturnValue();
      v31 = type;
      v32 = os_log_type_enabled(v22, type);
      if (!backtrace_string)
      {
        if (v32)
        {
          *(_DWORD *)buf = 136446210;
          v47 = "nw_necp_append_tlv";
          _os_log_impl(&dword_182FBE000, v22, v31, "%{public}s called with null beyond, no backtrace", buf, 0xCu);
        }
        goto LABEL_87;
      }
      if (v32)
      {
        *(_DWORD *)buf = 136446466;
        v47 = "nw_necp_append_tlv";
        v48 = 2082;
        *(_QWORD *)v49 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v22, v31, "%{public}s called with null beyond, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_57;
    }
    goto LABEL_88;
  }
  v8 = (v5 + 1);
  if (v6 >= v7)
  {
    __nwlog_obj();
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136447234;
    v47 = "nw_necp_append_tlv";
    v48 = 2048;
    *(_QWORD *)v49 = v6;
    *(_WORD *)&v49[8] = 2048;
    *(_QWORD *)v50 = v7;
    *(_WORD *)&v50[8] = 1024;
    *(_DWORD *)v51 = 8;
    *(_WORD *)&v51[4] = 1024;
    *(_DWORD *)&v51[6] = v8;
    v10 = (const char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v44 = 0;
    if (!__nwlog_fault(v10, &type, &v44))
      goto LABEL_28;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v27 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136447234;
        v47 = "nw_necp_append_tlv";
        v48 = 2048;
        *(_QWORD *)v49 = v6;
        *(_WORD *)&v49[8] = 2048;
        *(_QWORD *)v50 = v7;
        *(_WORD *)&v50[8] = 1024;
        *(_DWORD *)v51 = 8;
        *(_WORD *)&v51[4] = 1024;
        *(_DWORD *)&v51[6] = v8;
        _os_log_impl(&dword_182FBE000, v11, v27, "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u", buf, 0x2Cu);
      }
      goto LABEL_27;
    }
    if (!v44)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v40 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136447234;
        v47 = "nw_necp_append_tlv";
        v48 = 2048;
        *(_QWORD *)v49 = v6;
        *(_WORD *)&v49[8] = 2048;
        *(_QWORD *)v50 = v7;
        *(_WORD *)&v50[8] = 1024;
        *(_DWORD *)v51 = 8;
        *(_WORD *)&v51[4] = 1024;
        *(_DWORD *)&v51[6] = v8;
        _os_log_impl(&dword_182FBE000, v11, v40, "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, backtrace limit exceeded", buf, 0x2Cu);
      }
      goto LABEL_27;
    }
    v33 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v11 = objc_claimAutoreleasedReturnValue();
    v34 = type;
    v35 = os_log_type_enabled(v11, type);
    if (!v33)
    {
      if (v35)
      {
        *(_DWORD *)buf = 136447234;
        v47 = "nw_necp_append_tlv";
        v48 = 2048;
        *(_QWORD *)v49 = v6;
        *(_WORD *)&v49[8] = 2048;
        *(_QWORD *)v50 = v7;
        *(_WORD *)&v50[8] = 1024;
        *(_DWORD *)v51 = 8;
        *(_WORD *)&v51[4] = 1024;
        *(_DWORD *)&v51[6] = v8;
        _os_log_impl(&dword_182FBE000, v11, v34, "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, no backtrace", buf, 0x2Cu);
      }
      goto LABEL_27;
    }
    if (v35)
    {
      *(_DWORD *)buf = 136447490;
      v47 = "nw_necp_append_tlv";
      v48 = 2048;
      *(_QWORD *)v49 = v6;
      *(_WORD *)&v49[8] = 2048;
      *(_QWORD *)v50 = v7;
      *(_WORD *)&v50[8] = 1024;
      *(_DWORD *)v51 = 8;
      *(_WORD *)&v51[4] = 1024;
      *(_DWORD *)&v51[6] = v8;
      *(_WORD *)v52 = 2082;
      *(_QWORD *)&v52[2] = v33;
      _os_log_impl(&dword_182FBE000, v11, v34, "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, dumping backtrace:%{public}s", buf, 0x36u);
    }
    goto LABEL_81;
  }
  if (v7 - v6 < v8 + 5)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v9 = (id)gLogObj;
    *(_DWORD *)buf = 136447490;
    v47 = "nw_necp_append_tlv";
    v48 = 2048;
    *(_QWORD *)v49 = v6;
    *(_WORD *)&v49[8] = 2048;
    *(_QWORD *)v50 = v8 + 5;
    *(_WORD *)&v50[8] = 2048;
    *(_QWORD *)v51 = v7;
    *(_WORD *)&v51[8] = 1024;
    *(_DWORD *)v52 = 8;
    *(_WORD *)&v52[4] = 1024;
    *(_DWORD *)&v52[6] = v8;
    v10 = (const char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v44 = 0;
    if (!__nwlog_fault(v10, &type, &v44))
      goto LABEL_28;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v11 = (id)gLogObj;
      v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136447490;
        v47 = "nw_necp_append_tlv";
        v48 = 2048;
        *(_QWORD *)v49 = v6;
        *(_WORD *)&v49[8] = 2048;
        *(_QWORD *)v50 = v8 + 5;
        *(_WORD *)&v50[8] = 2048;
        *(_QWORD *)v51 = v7;
        *(_WORD *)&v51[8] = 1024;
        *(_DWORD *)v52 = 8;
        *(_WORD *)&v52[4] = 1024;
        *(_DWORD *)&v52[6] = v8;
        _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u", buf, 0x36u);
      }
    }
    else if (v44)
    {
      v15 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v11 = (id)gLogObj;
      v16 = type;
      v17 = os_log_type_enabled(v11, type);
      if (v15)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136447746;
          v47 = "nw_necp_append_tlv";
          v48 = 2048;
          *(_QWORD *)v49 = v6;
          *(_WORD *)&v49[8] = 2048;
          *(_QWORD *)v50 = v8 + 5;
          *(_WORD *)&v50[8] = 2048;
          *(_QWORD *)v51 = v7;
          *(_WORD *)&v51[8] = 1024;
          *(_DWORD *)v52 = 8;
          *(_WORD *)&v52[4] = 1024;
          *(_DWORD *)&v52[6] = v8;
          v53 = 2082;
          v54 = v15;
          _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, dumping backtrace:%{public}s", buf, 0x40u);
        }

        free(v15);
        if (!v10)
          goto LABEL_31;
LABEL_29:
        v19 = (char *)v10;
LABEL_30:
        free(v19);
        goto LABEL_31;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136447490;
        v47 = "nw_necp_append_tlv";
        v48 = 2048;
        *(_QWORD *)v49 = v6;
        *(_WORD *)&v49[8] = 2048;
        *(_QWORD *)v50 = v8 + 5;
        *(_WORD *)&v50[8] = 2048;
        *(_QWORD *)v51 = v7;
        *(_WORD *)&v51[8] = 1024;
        *(_DWORD *)v52 = 8;
        *(_WORD *)&v52[4] = 1024;
        *(_DWORD *)&v52[6] = v8;
        _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, no backtrace", buf, 0x36u);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v11 = (id)gLogObj;
      v18 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136447490;
        v47 = "nw_necp_append_tlv";
        v48 = 2048;
        *(_QWORD *)v49 = v6;
        *(_WORD *)&v49[8] = 2048;
        *(_QWORD *)v50 = v8 + 5;
        *(_WORD *)&v50[8] = 2048;
        *(_QWORD *)v51 = v7;
        *(_WORD *)&v51[8] = 1024;
        *(_DWORD *)v52 = 8;
        *(_WORD *)&v52[4] = 1024;
        *(_DWORD *)&v52[6] = v8;
        _os_log_impl(&dword_182FBE000, v11, v18, "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, backtrace limit exceeded", buf, 0x36u);
      }
    }
    goto LABEL_27;
  }
  *(_BYTE *)v6 = 8;
  *(_DWORD *)(v6 + 1) = v8;
  if ((_DWORD)v5 != -1)
  {
    if (string_ptr)
    {
      memcpy((void *)(v6 + 5), string_ptr, v8);
      goto LABEL_15;
    }
    __nwlog_obj();
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446722;
    v47 = "nw_necp_append_tlv";
    v48 = 1024;
    *(_DWORD *)v49 = 8;
    *(_WORD *)&v49[4] = 1024;
    *(_DWORD *)&v49[6] = v8;
    v10 = (const char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v44 = 0;
    if (!__nwlog_fault(v10, &type, &v44))
    {
LABEL_28:
      if (!v10)
      {
LABEL_31:
        v14 = 0;
        goto LABEL_32;
      }
      goto LABEL_29;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v37 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446722;
        v47 = "nw_necp_append_tlv";
        v48 = 1024;
        *(_DWORD *)v49 = 8;
        *(_WORD *)&v49[4] = 1024;
        *(_DWORD *)&v49[6] = v8;
        _os_log_impl(&dword_182FBE000, v11, v37, "%{public}s type=%u length=%u but value is NULL", buf, 0x18u);
      }
LABEL_27:

      goto LABEL_28;
    }
    if (!v44)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v43 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446722;
        v47 = "nw_necp_append_tlv";
        v48 = 1024;
        *(_DWORD *)v49 = 8;
        *(_WORD *)&v49[4] = 1024;
        *(_DWORD *)&v49[6] = v8;
        _os_log_impl(&dword_182FBE000, v11, v43, "%{public}s type=%u length=%u but value is NULL, backtrace limit exceeded", buf, 0x18u);
      }
      goto LABEL_27;
    }
    v33 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v11 = objc_claimAutoreleasedReturnValue();
    v41 = type;
    v42 = os_log_type_enabled(v11, type);
    if (!v33)
    {
      if (v42)
      {
        *(_DWORD *)buf = 136446722;
        v47 = "nw_necp_append_tlv";
        v48 = 1024;
        *(_DWORD *)v49 = 8;
        *(_WORD *)&v49[4] = 1024;
        *(_DWORD *)&v49[6] = v8;
        _os_log_impl(&dword_182FBE000, v11, v41, "%{public}s type=%u length=%u but value is NULL, no backtrace", buf, 0x18u);
      }
      goto LABEL_27;
    }
    if (v42)
    {
      *(_DWORD *)buf = 136446978;
      v47 = "nw_necp_append_tlv";
      v48 = 1024;
      *(_DWORD *)v49 = 8;
      *(_WORD *)&v49[4] = 1024;
      *(_DWORD *)&v49[6] = v8;
      *(_WORD *)v50 = 2082;
      *(_QWORD *)&v50[2] = v33;
      _os_log_impl(&dword_182FBE000, v11, v41, "%{public}s type=%u length=%u but value is NULL, dumping backtrace:%{public}s", buf, 0x22u);
    }
LABEL_81:

    free(v33);
    goto LABEL_28;
  }
LABEL_15:
  v14 = v6 + v8 + 5;
LABEL_32:
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v14;
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) != 0;
}

BOOL __nw_proxy_config_copy_agent_data_block_invoke_3_103(uint64_t a1, int a2, xpc_object_t xstring)
{
  const char *string_ptr;
  size_t v5;
  unint64_t v6;
  unint64_t v7;
  size_t v8;
  id v9;
  const char *v10;
  NSObject *v11;
  os_log_type_t v12;
  size_t v14;
  char *v15;
  os_log_type_t v16;
  _BOOL4 v17;
  os_log_type_t v18;
  char *v19;
  void *v20;
  const char *v21;
  NSObject *v22;
  os_log_type_t v23;
  void *v24;
  os_log_type_t v25;
  void *v26;
  os_log_type_t v27;
  char *backtrace_string;
  os_log_type_t v29;
  _BOOL4 v30;
  os_log_type_t v31;
  _BOOL4 v32;
  char *v33;
  os_log_type_t v34;
  _BOOL4 v35;
  void *v36;
  os_log_type_t v37;
  os_log_type_t v38;
  os_log_type_t v39;
  os_log_type_t v40;
  os_log_type_t v41;
  _BOOL4 v42;
  os_log_type_t v43;
  char v44;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v47;
  __int16 v48;
  _BYTE v49[10];
  _BYTE v50[10];
  _BYTE v51[10];
  _BYTE v52[10];
  __int16 v53;
  char *v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  string_ptr = xpc_string_get_string_ptr(xstring);
  v5 = strlen(string_ptr);
  if (!v5)
    return 1;
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  if (!v6)
  {
    __nwlog_obj();
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v47 = "nw_necp_append_tlv";
    v21 = (const char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v44 = 0;
    if (__nwlog_fault(v21, &type, &v44))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v22 = objc_claimAutoreleasedReturnValue();
        v23 = type;
        if (os_log_type_enabled(v22, type))
        {
          *(_DWORD *)buf = 136446210;
          v47 = "nw_necp_append_tlv";
          _os_log_impl(&dword_182FBE000, v22, v23, "%{public}s called with null tlv_start", buf, 0xCu);
        }
        goto LABEL_87;
      }
      if (!v44)
      {
        __nwlog_obj();
        v22 = objc_claimAutoreleasedReturnValue();
        v38 = type;
        if (os_log_type_enabled(v22, type))
        {
          *(_DWORD *)buf = 136446210;
          v47 = "nw_necp_append_tlv";
          _os_log_impl(&dword_182FBE000, v22, v38, "%{public}s called with null tlv_start, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_87;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v22 = objc_claimAutoreleasedReturnValue();
      v29 = type;
      v30 = os_log_type_enabled(v22, type);
      if (!backtrace_string)
      {
        if (v30)
        {
          *(_DWORD *)buf = 136446210;
          v47 = "nw_necp_append_tlv";
          _os_log_impl(&dword_182FBE000, v22, v29, "%{public}s called with null tlv_start, no backtrace", buf, 0xCu);
        }
        goto LABEL_87;
      }
      if (v30)
      {
        *(_DWORD *)buf = 136446466;
        v47 = "nw_necp_append_tlv";
        v48 = 2082;
        *(_QWORD *)v49 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v22, v29, "%{public}s called with null tlv_start, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_57:

      free(backtrace_string);
    }
LABEL_88:
    if (!v21)
      goto LABEL_31;
    v19 = (char *)v21;
    goto LABEL_30;
  }
  v7 = *(_QWORD *)(a1 + 40);
  if (!v7)
  {
    __nwlog_obj();
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v47 = "nw_necp_append_tlv";
    v21 = (const char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v44 = 0;
    if (__nwlog_fault(v21, &type, &v44))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v22 = objc_claimAutoreleasedReturnValue();
        v25 = type;
        if (os_log_type_enabled(v22, type))
        {
          *(_DWORD *)buf = 136446210;
          v47 = "nw_necp_append_tlv";
          _os_log_impl(&dword_182FBE000, v22, v25, "%{public}s called with null beyond", buf, 0xCu);
        }
LABEL_87:

        goto LABEL_88;
      }
      if (!v44)
      {
        __nwlog_obj();
        v22 = objc_claimAutoreleasedReturnValue();
        v39 = type;
        if (os_log_type_enabled(v22, type))
        {
          *(_DWORD *)buf = 136446210;
          v47 = "nw_necp_append_tlv";
          _os_log_impl(&dword_182FBE000, v22, v39, "%{public}s called with null beyond, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_87;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v22 = objc_claimAutoreleasedReturnValue();
      v31 = type;
      v32 = os_log_type_enabled(v22, type);
      if (!backtrace_string)
      {
        if (v32)
        {
          *(_DWORD *)buf = 136446210;
          v47 = "nw_necp_append_tlv";
          _os_log_impl(&dword_182FBE000, v22, v31, "%{public}s called with null beyond, no backtrace", buf, 0xCu);
        }
        goto LABEL_87;
      }
      if (v32)
      {
        *(_DWORD *)buf = 136446466;
        v47 = "nw_necp_append_tlv";
        v48 = 2082;
        *(_QWORD *)v49 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v22, v31, "%{public}s called with null beyond, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_57;
    }
    goto LABEL_88;
  }
  v8 = (v5 + 1);
  if (v6 >= v7)
  {
    __nwlog_obj();
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136447234;
    v47 = "nw_necp_append_tlv";
    v48 = 2048;
    *(_QWORD *)v49 = v6;
    *(_WORD *)&v49[8] = 2048;
    *(_QWORD *)v50 = v7;
    *(_WORD *)&v50[8] = 1024;
    *(_DWORD *)v51 = 9;
    *(_WORD *)&v51[4] = 1024;
    *(_DWORD *)&v51[6] = v8;
    v10 = (const char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v44 = 0;
    if (!__nwlog_fault(v10, &type, &v44))
      goto LABEL_28;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v27 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136447234;
        v47 = "nw_necp_append_tlv";
        v48 = 2048;
        *(_QWORD *)v49 = v6;
        *(_WORD *)&v49[8] = 2048;
        *(_QWORD *)v50 = v7;
        *(_WORD *)&v50[8] = 1024;
        *(_DWORD *)v51 = 9;
        *(_WORD *)&v51[4] = 1024;
        *(_DWORD *)&v51[6] = v8;
        _os_log_impl(&dword_182FBE000, v11, v27, "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u", buf, 0x2Cu);
      }
      goto LABEL_27;
    }
    if (!v44)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v40 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136447234;
        v47 = "nw_necp_append_tlv";
        v48 = 2048;
        *(_QWORD *)v49 = v6;
        *(_WORD *)&v49[8] = 2048;
        *(_QWORD *)v50 = v7;
        *(_WORD *)&v50[8] = 1024;
        *(_DWORD *)v51 = 9;
        *(_WORD *)&v51[4] = 1024;
        *(_DWORD *)&v51[6] = v8;
        _os_log_impl(&dword_182FBE000, v11, v40, "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, backtrace limit exceeded", buf, 0x2Cu);
      }
      goto LABEL_27;
    }
    v33 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v11 = objc_claimAutoreleasedReturnValue();
    v34 = type;
    v35 = os_log_type_enabled(v11, type);
    if (!v33)
    {
      if (v35)
      {
        *(_DWORD *)buf = 136447234;
        v47 = "nw_necp_append_tlv";
        v48 = 2048;
        *(_QWORD *)v49 = v6;
        *(_WORD *)&v49[8] = 2048;
        *(_QWORD *)v50 = v7;
        *(_WORD *)&v50[8] = 1024;
        *(_DWORD *)v51 = 9;
        *(_WORD *)&v51[4] = 1024;
        *(_DWORD *)&v51[6] = v8;
        _os_log_impl(&dword_182FBE000, v11, v34, "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, no backtrace", buf, 0x2Cu);
      }
      goto LABEL_27;
    }
    if (v35)
    {
      *(_DWORD *)buf = 136447490;
      v47 = "nw_necp_append_tlv";
      v48 = 2048;
      *(_QWORD *)v49 = v6;
      *(_WORD *)&v49[8] = 2048;
      *(_QWORD *)v50 = v7;
      *(_WORD *)&v50[8] = 1024;
      *(_DWORD *)v51 = 9;
      *(_WORD *)&v51[4] = 1024;
      *(_DWORD *)&v51[6] = v8;
      *(_WORD *)v52 = 2082;
      *(_QWORD *)&v52[2] = v33;
      _os_log_impl(&dword_182FBE000, v11, v34, "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, dumping backtrace:%{public}s", buf, 0x36u);
    }
    goto LABEL_81;
  }
  if (v7 - v6 < v8 + 5)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v9 = (id)gLogObj;
    *(_DWORD *)buf = 136447490;
    v47 = "nw_necp_append_tlv";
    v48 = 2048;
    *(_QWORD *)v49 = v6;
    *(_WORD *)&v49[8] = 2048;
    *(_QWORD *)v50 = v8 + 5;
    *(_WORD *)&v50[8] = 2048;
    *(_QWORD *)v51 = v7;
    *(_WORD *)&v51[8] = 1024;
    *(_DWORD *)v52 = 9;
    *(_WORD *)&v52[4] = 1024;
    *(_DWORD *)&v52[6] = v8;
    v10 = (const char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v44 = 0;
    if (!__nwlog_fault(v10, &type, &v44))
      goto LABEL_28;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v11 = (id)gLogObj;
      v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136447490;
        v47 = "nw_necp_append_tlv";
        v48 = 2048;
        *(_QWORD *)v49 = v6;
        *(_WORD *)&v49[8] = 2048;
        *(_QWORD *)v50 = v8 + 5;
        *(_WORD *)&v50[8] = 2048;
        *(_QWORD *)v51 = v7;
        *(_WORD *)&v51[8] = 1024;
        *(_DWORD *)v52 = 9;
        *(_WORD *)&v52[4] = 1024;
        *(_DWORD *)&v52[6] = v8;
        _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u", buf, 0x36u);
      }
    }
    else if (v44)
    {
      v15 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v11 = (id)gLogObj;
      v16 = type;
      v17 = os_log_type_enabled(v11, type);
      if (v15)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136447746;
          v47 = "nw_necp_append_tlv";
          v48 = 2048;
          *(_QWORD *)v49 = v6;
          *(_WORD *)&v49[8] = 2048;
          *(_QWORD *)v50 = v8 + 5;
          *(_WORD *)&v50[8] = 2048;
          *(_QWORD *)v51 = v7;
          *(_WORD *)&v51[8] = 1024;
          *(_DWORD *)v52 = 9;
          *(_WORD *)&v52[4] = 1024;
          *(_DWORD *)&v52[6] = v8;
          v53 = 2082;
          v54 = v15;
          _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, dumping backtrace:%{public}s", buf, 0x40u);
        }

        free(v15);
        if (!v10)
          goto LABEL_31;
LABEL_29:
        v19 = (char *)v10;
LABEL_30:
        free(v19);
        goto LABEL_31;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136447490;
        v47 = "nw_necp_append_tlv";
        v48 = 2048;
        *(_QWORD *)v49 = v6;
        *(_WORD *)&v49[8] = 2048;
        *(_QWORD *)v50 = v8 + 5;
        *(_WORD *)&v50[8] = 2048;
        *(_QWORD *)v51 = v7;
        *(_WORD *)&v51[8] = 1024;
        *(_DWORD *)v52 = 9;
        *(_WORD *)&v52[4] = 1024;
        *(_DWORD *)&v52[6] = v8;
        _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, no backtrace", buf, 0x36u);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v11 = (id)gLogObj;
      v18 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136447490;
        v47 = "nw_necp_append_tlv";
        v48 = 2048;
        *(_QWORD *)v49 = v6;
        *(_WORD *)&v49[8] = 2048;
        *(_QWORD *)v50 = v8 + 5;
        *(_WORD *)&v50[8] = 2048;
        *(_QWORD *)v51 = v7;
        *(_WORD *)&v51[8] = 1024;
        *(_DWORD *)v52 = 9;
        *(_WORD *)&v52[4] = 1024;
        *(_DWORD *)&v52[6] = v8;
        _os_log_impl(&dword_182FBE000, v11, v18, "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, backtrace limit exceeded", buf, 0x36u);
      }
    }
    goto LABEL_27;
  }
  *(_BYTE *)v6 = 9;
  *(_DWORD *)(v6 + 1) = v8;
  if ((_DWORD)v5 != -1)
  {
    if (string_ptr)
    {
      memcpy((void *)(v6 + 5), string_ptr, v8);
      goto LABEL_15;
    }
    __nwlog_obj();
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446722;
    v47 = "nw_necp_append_tlv";
    v48 = 1024;
    *(_DWORD *)v49 = 9;
    *(_WORD *)&v49[4] = 1024;
    *(_DWORD *)&v49[6] = v8;
    v10 = (const char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v44 = 0;
    if (!__nwlog_fault(v10, &type, &v44))
    {
LABEL_28:
      if (!v10)
      {
LABEL_31:
        v14 = 0;
        goto LABEL_32;
      }
      goto LABEL_29;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v37 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446722;
        v47 = "nw_necp_append_tlv";
        v48 = 1024;
        *(_DWORD *)v49 = 9;
        *(_WORD *)&v49[4] = 1024;
        *(_DWORD *)&v49[6] = v8;
        _os_log_impl(&dword_182FBE000, v11, v37, "%{public}s type=%u length=%u but value is NULL", buf, 0x18u);
      }
LABEL_27:

      goto LABEL_28;
    }
    if (!v44)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v43 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446722;
        v47 = "nw_necp_append_tlv";
        v48 = 1024;
        *(_DWORD *)v49 = 9;
        *(_WORD *)&v49[4] = 1024;
        *(_DWORD *)&v49[6] = v8;
        _os_log_impl(&dword_182FBE000, v11, v43, "%{public}s type=%u length=%u but value is NULL, backtrace limit exceeded", buf, 0x18u);
      }
      goto LABEL_27;
    }
    v33 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v11 = objc_claimAutoreleasedReturnValue();
    v41 = type;
    v42 = os_log_type_enabled(v11, type);
    if (!v33)
    {
      if (v42)
      {
        *(_DWORD *)buf = 136446722;
        v47 = "nw_necp_append_tlv";
        v48 = 1024;
        *(_DWORD *)v49 = 9;
        *(_WORD *)&v49[4] = 1024;
        *(_DWORD *)&v49[6] = v8;
        _os_log_impl(&dword_182FBE000, v11, v41, "%{public}s type=%u length=%u but value is NULL, no backtrace", buf, 0x18u);
      }
      goto LABEL_27;
    }
    if (v42)
    {
      *(_DWORD *)buf = 136446978;
      v47 = "nw_necp_append_tlv";
      v48 = 1024;
      *(_DWORD *)v49 = 9;
      *(_WORD *)&v49[4] = 1024;
      *(_DWORD *)&v49[6] = v8;
      *(_WORD *)v50 = 2082;
      *(_QWORD *)&v50[2] = v33;
      _os_log_impl(&dword_182FBE000, v11, v41, "%{public}s type=%u length=%u but value is NULL, dumping backtrace:%{public}s", buf, 0x22u);
    }
LABEL_81:

    free(v33);
    goto LABEL_28;
  }
LABEL_15:
  v14 = v6 + v8 + 5;
LABEL_32:
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v14;
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) != 0;
}

BOOL __nw_proxy_config_copy_agent_data_block_invoke_104(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  _BOOL8 v5;
  _BOOL8 v6;
  NSObject *v7;
  int v9;
  const char *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = nw_path_evaluator_add_endpoint_to_necp_message(v4, 11, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), *(_QWORD *)(a1 + 40), 0);
  v6 = v5;
  if (v5)
  {
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v5;
  }
  else
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v7 = (id)gLogObj;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v9 = 136446210;
      v10 = "nw_proxy_config_copy_agent_data_block_invoke";
      _os_log_impl(&dword_182FBE000, v7, OS_LOG_TYPE_ERROR, "%{public}s Failed to serialize resolved endpoint", (uint8_t *)&v9, 0xCu);
    }

  }
  return v6;
}

void sub_18372EC84(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void __nw_proxy_config_copy_agent_data_block_invoke_105(uint64_t a1, char *__s)
{
  unint64_t v4;
  unint64_t v5;
  int v6;
  size_t v7;
  id v8;
  const char *v9;
  NSObject *v10;
  os_log_type_t v11;
  const char *v12;
  size_t v13;
  char *v14;
  _BOOL4 v15;
  const char *v16;
  NSObject *v17;
  os_log_type_t v18;
  uint32_t v19;
  char *v20;
  void *v21;
  const char *v22;
  NSObject *v23;
  os_log_type_t v24;
  const char *v25;
  void *v26;
  void *v27;
  os_log_type_t v28;
  const char *v29;
  char *backtrace_string;
  _BOOL4 v31;
  const char *v32;
  _BOOL4 v33;
  _BOOL4 v34;
  void *v35;
  os_log_type_t v36;
  _BOOL4 v37;
  NSObject *v38;
  os_log_type_t v39;
  uint32_t v40;
  char v41;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v44;
  __int16 v45;
  _BYTE v46[10];
  _BYTE v47[10];
  _BYTE v48[10];
  _BYTE v49[10];
  __int16 v50;
  char *v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  v6 = strlen(__s);
  if (!v5)
  {
    __nwlog_obj();
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v44 = "nw_necp_append_tlv";
    v22 = (const char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v41 = 0;
    if (__nwlog_fault(v22, &type, &v41))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v23 = objc_claimAutoreleasedReturnValue();
        v24 = type;
        if (os_log_type_enabled(v23, type))
        {
          *(_DWORD *)buf = 136446210;
          v44 = "nw_necp_append_tlv";
          v25 = "%{public}s called with null tlv_start";
LABEL_75:
          _os_log_impl(&dword_182FBE000, v23, v24, v25, buf, 0xCu);
        }
LABEL_76:

        goto LABEL_77;
      }
      if (!v41)
      {
        __nwlog_obj();
        v23 = objc_claimAutoreleasedReturnValue();
        v24 = type;
        if (os_log_type_enabled(v23, type))
        {
          *(_DWORD *)buf = 136446210;
          v44 = "nw_necp_append_tlv";
          v25 = "%{public}s called with null tlv_start, backtrace limit exceeded";
          goto LABEL_75;
        }
        goto LABEL_76;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v23 = objc_claimAutoreleasedReturnValue();
      v24 = type;
      v31 = os_log_type_enabled(v23, type);
      if (!backtrace_string)
      {
        if (v31)
        {
          *(_DWORD *)buf = 136446210;
          v44 = "nw_necp_append_tlv";
          v25 = "%{public}s called with null tlv_start, no backtrace";
          goto LABEL_75;
        }
        goto LABEL_76;
      }
      if (!v31)
        goto LABEL_52;
      *(_DWORD *)buf = 136446466;
      v44 = "nw_necp_append_tlv";
      v45 = 2082;
      *(_QWORD *)v46 = backtrace_string;
      v32 = "%{public}s called with null tlv_start, dumping backtrace:%{public}s";
      goto LABEL_51;
    }
LABEL_77:
    if (!v22)
      goto LABEL_29;
    v20 = (char *)v22;
    goto LABEL_28;
  }
  if (!v4)
  {
    __nwlog_obj();
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v44 = "nw_necp_append_tlv";
    v22 = (const char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v41 = 0;
    if (__nwlog_fault(v22, &type, &v41))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v23 = objc_claimAutoreleasedReturnValue();
        v24 = type;
        if (os_log_type_enabled(v23, type))
        {
          *(_DWORD *)buf = 136446210;
          v44 = "nw_necp_append_tlv";
          v25 = "%{public}s called with null beyond";
          goto LABEL_75;
        }
        goto LABEL_76;
      }
      if (!v41)
      {
        __nwlog_obj();
        v23 = objc_claimAutoreleasedReturnValue();
        v24 = type;
        if (os_log_type_enabled(v23, type))
        {
          *(_DWORD *)buf = 136446210;
          v44 = "nw_necp_append_tlv";
          v25 = "%{public}s called with null beyond, backtrace limit exceeded";
          goto LABEL_75;
        }
        goto LABEL_76;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v23 = objc_claimAutoreleasedReturnValue();
      v24 = type;
      v33 = os_log_type_enabled(v23, type);
      if (!backtrace_string)
      {
        if (v33)
        {
          *(_DWORD *)buf = 136446210;
          v44 = "nw_necp_append_tlv";
          v25 = "%{public}s called with null beyond, no backtrace";
          goto LABEL_75;
        }
        goto LABEL_76;
      }
      if (!v33)
        goto LABEL_52;
      *(_DWORD *)buf = 136446466;
      v44 = "nw_necp_append_tlv";
      v45 = 2082;
      *(_QWORD *)v46 = backtrace_string;
      v32 = "%{public}s called with null beyond, dumping backtrace:%{public}s";
LABEL_51:
      _os_log_impl(&dword_182FBE000, v23, v24, v32, buf, 0x16u);
LABEL_52:

      free(backtrace_string);
      goto LABEL_77;
    }
    goto LABEL_77;
  }
  v7 = (v6 + 1);
  if (v5 >= v4)
  {
    __nwlog_obj();
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136447234;
    v44 = "nw_necp_append_tlv";
    v45 = 2048;
    *(_QWORD *)v46 = v5;
    *(_WORD *)&v46[8] = 2048;
    *(_QWORD *)v47 = v4;
    *(_WORD *)&v47[8] = 1024;
    *(_DWORD *)v48 = 13;
    *(_WORD *)&v48[4] = 1024;
    *(_DWORD *)&v48[6] = v7;
    v9 = (const char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v41 = 0;
    if (!__nwlog_fault(v9, &type, &v41))
      goto LABEL_19;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v28 = type;
      if (!os_log_type_enabled(v10, type))
        goto LABEL_88;
      *(_DWORD *)buf = 136447234;
      v44 = "nw_necp_append_tlv";
      v45 = 2048;
      *(_QWORD *)v46 = v5;
      *(_WORD *)&v46[8] = 2048;
      *(_QWORD *)v47 = v4;
      *(_WORD *)&v47[8] = 1024;
      *(_DWORD *)v48 = 13;
      *(_WORD *)&v48[4] = 1024;
      *(_DWORD *)&v48[6] = v7;
      v29 = "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u";
    }
    else if (v41)
    {
      v14 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v28 = type;
      v34 = os_log_type_enabled(v10, type);
      if (v14)
      {
        if (!v34)
          goto LABEL_18;
        *(_DWORD *)buf = 136447490;
        v44 = "nw_necp_append_tlv";
        v45 = 2048;
        *(_QWORD *)v46 = v5;
        *(_WORD *)&v46[8] = 2048;
        *(_QWORD *)v47 = v4;
        *(_WORD *)&v47[8] = 1024;
        *(_DWORD *)v48 = 13;
        *(_WORD *)&v48[4] = 1024;
        *(_DWORD *)&v48[6] = v7;
        *(_WORD *)v49 = 2082;
        *(_QWORD *)&v49[2] = v14;
        v16 = "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, dumping backtrace:%{public}s";
        v17 = v10;
        v18 = v28;
        v19 = 54;
LABEL_17:
        _os_log_impl(&dword_182FBE000, v17, v18, v16, buf, v19);
LABEL_18:

        free(v14);
        goto LABEL_19;
      }
      if (!v34)
        goto LABEL_88;
      *(_DWORD *)buf = 136447234;
      v44 = "nw_necp_append_tlv";
      v45 = 2048;
      *(_QWORD *)v46 = v5;
      *(_WORD *)&v46[8] = 2048;
      *(_QWORD *)v47 = v4;
      *(_WORD *)&v47[8] = 1024;
      *(_DWORD *)v48 = 13;
      *(_WORD *)&v48[4] = 1024;
      *(_DWORD *)&v48[6] = v7;
      v29 = "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, no backtrace";
    }
    else
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v28 = type;
      if (!os_log_type_enabled(v10, type))
        goto LABEL_88;
      *(_DWORD *)buf = 136447234;
      v44 = "nw_necp_append_tlv";
      v45 = 2048;
      *(_QWORD *)v46 = v5;
      *(_WORD *)&v46[8] = 2048;
      *(_QWORD *)v47 = v4;
      *(_WORD *)&v47[8] = 1024;
      *(_DWORD *)v48 = 13;
      *(_WORD *)&v48[4] = 1024;
      *(_DWORD *)&v48[6] = v7;
      v29 = "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, backtrace limit exceeded";
    }
    v38 = v10;
    v39 = v28;
    v40 = 44;
LABEL_87:
    _os_log_impl(&dword_182FBE000, v38, v39, v29, buf, v40);
    goto LABEL_88;
  }
  if (v4 - v5 < v7 + 5)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v8 = (id)gLogObj;
    *(_DWORD *)buf = 136447490;
    v44 = "nw_necp_append_tlv";
    v45 = 2048;
    *(_QWORD *)v46 = v5;
    *(_WORD *)&v46[8] = 2048;
    *(_QWORD *)v47 = v7 + 5;
    *(_WORD *)&v47[8] = 2048;
    *(_QWORD *)v48 = v4;
    *(_WORD *)&v48[8] = 1024;
    *(_DWORD *)v49 = 13;
    *(_WORD *)&v49[4] = 1024;
    *(_DWORD *)&v49[6] = v7;
    v9 = (const char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v41 = 0;
    if (!__nwlog_fault(v9, &type, &v41))
      goto LABEL_19;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v10 = (id)gLogObj;
      v11 = type;
      if (!os_log_type_enabled(v10, type))
        goto LABEL_26;
      *(_DWORD *)buf = 136447490;
      v44 = "nw_necp_append_tlv";
      v45 = 2048;
      *(_QWORD *)v46 = v5;
      *(_WORD *)&v46[8] = 2048;
      *(_QWORD *)v47 = v7 + 5;
      *(_WORD *)&v47[8] = 2048;
      *(_QWORD *)v48 = v4;
      *(_WORD *)&v48[8] = 1024;
      *(_DWORD *)v49 = 13;
      *(_WORD *)&v49[4] = 1024;
      *(_DWORD *)&v49[6] = v7;
      v12 = "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u";
      goto LABEL_25;
    }
    if (!v41)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v10 = (id)gLogObj;
      v11 = type;
      if (!os_log_type_enabled(v10, type))
        goto LABEL_26;
      *(_DWORD *)buf = 136447490;
      v44 = "nw_necp_append_tlv";
      v45 = 2048;
      *(_QWORD *)v46 = v5;
      *(_WORD *)&v46[8] = 2048;
      *(_QWORD *)v47 = v7 + 5;
      *(_WORD *)&v47[8] = 2048;
      *(_QWORD *)v48 = v4;
      *(_WORD *)&v48[8] = 1024;
      *(_DWORD *)v49 = 13;
      *(_WORD *)&v49[4] = 1024;
      *(_DWORD *)&v49[6] = v7;
      v12 = "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, backtrace limit exceeded";
      goto LABEL_25;
    }
    v14 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v10 = (id)gLogObj;
    v11 = type;
    v15 = os_log_type_enabled(v10, type);
    if (!v14)
    {
      if (!v15)
        goto LABEL_26;
      *(_DWORD *)buf = 136447490;
      v44 = "nw_necp_append_tlv";
      v45 = 2048;
      *(_QWORD *)v46 = v5;
      *(_WORD *)&v46[8] = 2048;
      *(_QWORD *)v47 = v7 + 5;
      *(_WORD *)&v47[8] = 2048;
      *(_QWORD *)v48 = v4;
      *(_WORD *)&v48[8] = 1024;
      *(_DWORD *)v49 = 13;
      *(_WORD *)&v49[4] = 1024;
      *(_DWORD *)&v49[6] = v7;
      v12 = "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, no backtrace";
LABEL_25:
      _os_log_impl(&dword_182FBE000, v10, v11, v12, buf, 0x36u);
LABEL_26:

      if (!v9)
      {
LABEL_29:
        v13 = 0;
        goto LABEL_30;
      }
      goto LABEL_27;
    }
    if (!v15)
      goto LABEL_18;
    *(_DWORD *)buf = 136447746;
    v44 = "nw_necp_append_tlv";
    v45 = 2048;
    *(_QWORD *)v46 = v5;
    *(_WORD *)&v46[8] = 2048;
    *(_QWORD *)v47 = v7 + 5;
    *(_WORD *)&v47[8] = 2048;
    *(_QWORD *)v48 = v4;
    *(_WORD *)&v48[8] = 1024;
    *(_DWORD *)v49 = 13;
    *(_WORD *)&v49[4] = 1024;
    *(_DWORD *)&v49[6] = v7;
    v50 = 2082;
    v51 = v14;
    v16 = "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, dumping backtrace:%{public}s";
    v17 = v10;
    v18 = v11;
    v19 = 64;
    goto LABEL_17;
  }
  *(_BYTE *)v5 = 13;
  *(_DWORD *)(v5 + 1) = v7;
  if (v6 != -1)
  {
    if (__s)
    {
      memcpy((void *)(v5 + 5), __s, v7);
      goto LABEL_12;
    }
    __nwlog_obj();
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446722;
    v44 = "nw_necp_append_tlv";
    v45 = 1024;
    *(_DWORD *)v46 = 13;
    *(_WORD *)&v46[4] = 1024;
    *(_DWORD *)&v46[6] = v7;
    v9 = (const char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v41 = 0;
    if (!__nwlog_fault(v9, &type, &v41))
    {
LABEL_19:
      if (!v9)
        goto LABEL_29;
LABEL_27:
      v20 = (char *)v9;
LABEL_28:
      free(v20);
      goto LABEL_29;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v36 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446722;
        v44 = "nw_necp_append_tlv";
        v45 = 1024;
        *(_DWORD *)v46 = 13;
        *(_WORD *)&v46[4] = 1024;
        *(_DWORD *)&v46[6] = v7;
        v29 = "%{public}s type=%u length=%u but value is NULL";
LABEL_86:
        v38 = v10;
        v39 = v36;
        v40 = 24;
        goto LABEL_87;
      }
    }
    else
    {
      if (v41)
      {
        v14 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v36 = type;
        v37 = os_log_type_enabled(v10, type);
        if (v14)
        {
          if (!v37)
            goto LABEL_18;
          *(_DWORD *)buf = 136446978;
          v44 = "nw_necp_append_tlv";
          v45 = 1024;
          *(_DWORD *)v46 = 13;
          *(_WORD *)&v46[4] = 1024;
          *(_DWORD *)&v46[6] = v7;
          *(_WORD *)v47 = 2082;
          *(_QWORD *)&v47[2] = v14;
          v16 = "%{public}s type=%u length=%u but value is NULL, dumping backtrace:%{public}s";
          v17 = v10;
          v18 = v36;
          v19 = 34;
          goto LABEL_17;
        }
        if (!v37)
          goto LABEL_88;
        *(_DWORD *)buf = 136446722;
        v44 = "nw_necp_append_tlv";
        v45 = 1024;
        *(_DWORD *)v46 = 13;
        *(_WORD *)&v46[4] = 1024;
        *(_DWORD *)&v46[6] = v7;
        v29 = "%{public}s type=%u length=%u but value is NULL, no backtrace";
        goto LABEL_86;
      }
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v36 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446722;
        v44 = "nw_necp_append_tlv";
        v45 = 1024;
        *(_DWORD *)v46 = 13;
        *(_WORD *)&v46[4] = 1024;
        *(_DWORD *)&v46[6] = v7;
        v29 = "%{public}s type=%u length=%u but value is NULL, backtrace limit exceeded";
        goto LABEL_86;
      }
    }
LABEL_88:

    goto LABEL_19;
  }
LABEL_12:
  v13 = v5 + v7 + 5;
LABEL_30:
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v13;
}

void __nw_proxy_config_copy_agent_data_block_invoke_2_106(uint64_t a1, char *__s)
{
  unint64_t v4;
  unint64_t v5;
  int v6;
  size_t v7;
  id v8;
  const char *v9;
  NSObject *v10;
  os_log_type_t v11;
  const char *v12;
  size_t v13;
  char *v14;
  _BOOL4 v15;
  const char *v16;
  NSObject *v17;
  os_log_type_t v18;
  uint32_t v19;
  char *v20;
  void *v21;
  const char *v22;
  NSObject *v23;
  os_log_type_t v24;
  const char *v25;
  void *v26;
  void *v27;
  os_log_type_t v28;
  const char *v29;
  char *backtrace_string;
  _BOOL4 v31;
  const char *v32;
  _BOOL4 v33;
  _BOOL4 v34;
  void *v35;
  os_log_type_t v36;
  _BOOL4 v37;
  NSObject *v38;
  os_log_type_t v39;
  uint32_t v40;
  char v41;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v44;
  __int16 v45;
  _BYTE v46[10];
  _BYTE v47[10];
  _BYTE v48[10];
  _BYTE v49[10];
  __int16 v50;
  char *v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  v6 = strlen(__s);
  if (!v5)
  {
    __nwlog_obj();
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v44 = "nw_necp_append_tlv";
    v22 = (const char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v41 = 0;
    if (__nwlog_fault(v22, &type, &v41))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v23 = objc_claimAutoreleasedReturnValue();
        v24 = type;
        if (os_log_type_enabled(v23, type))
        {
          *(_DWORD *)buf = 136446210;
          v44 = "nw_necp_append_tlv";
          v25 = "%{public}s called with null tlv_start";
LABEL_75:
          _os_log_impl(&dword_182FBE000, v23, v24, v25, buf, 0xCu);
        }
LABEL_76:

        goto LABEL_77;
      }
      if (!v41)
      {
        __nwlog_obj();
        v23 = objc_claimAutoreleasedReturnValue();
        v24 = type;
        if (os_log_type_enabled(v23, type))
        {
          *(_DWORD *)buf = 136446210;
          v44 = "nw_necp_append_tlv";
          v25 = "%{public}s called with null tlv_start, backtrace limit exceeded";
          goto LABEL_75;
        }
        goto LABEL_76;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v23 = objc_claimAutoreleasedReturnValue();
      v24 = type;
      v31 = os_log_type_enabled(v23, type);
      if (!backtrace_string)
      {
        if (v31)
        {
          *(_DWORD *)buf = 136446210;
          v44 = "nw_necp_append_tlv";
          v25 = "%{public}s called with null tlv_start, no backtrace";
          goto LABEL_75;
        }
        goto LABEL_76;
      }
      if (!v31)
        goto LABEL_52;
      *(_DWORD *)buf = 136446466;
      v44 = "nw_necp_append_tlv";
      v45 = 2082;
      *(_QWORD *)v46 = backtrace_string;
      v32 = "%{public}s called with null tlv_start, dumping backtrace:%{public}s";
      goto LABEL_51;
    }
LABEL_77:
    if (!v22)
      goto LABEL_29;
    v20 = (char *)v22;
    goto LABEL_28;
  }
  if (!v4)
  {
    __nwlog_obj();
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v44 = "nw_necp_append_tlv";
    v22 = (const char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v41 = 0;
    if (__nwlog_fault(v22, &type, &v41))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v23 = objc_claimAutoreleasedReturnValue();
        v24 = type;
        if (os_log_type_enabled(v23, type))
        {
          *(_DWORD *)buf = 136446210;
          v44 = "nw_necp_append_tlv";
          v25 = "%{public}s called with null beyond";
          goto LABEL_75;
        }
        goto LABEL_76;
      }
      if (!v41)
      {
        __nwlog_obj();
        v23 = objc_claimAutoreleasedReturnValue();
        v24 = type;
        if (os_log_type_enabled(v23, type))
        {
          *(_DWORD *)buf = 136446210;
          v44 = "nw_necp_append_tlv";
          v25 = "%{public}s called with null beyond, backtrace limit exceeded";
          goto LABEL_75;
        }
        goto LABEL_76;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v23 = objc_claimAutoreleasedReturnValue();
      v24 = type;
      v33 = os_log_type_enabled(v23, type);
      if (!backtrace_string)
      {
        if (v33)
        {
          *(_DWORD *)buf = 136446210;
          v44 = "nw_necp_append_tlv";
          v25 = "%{public}s called with null beyond, no backtrace";
          goto LABEL_75;
        }
        goto LABEL_76;
      }
      if (!v33)
        goto LABEL_52;
      *(_DWORD *)buf = 136446466;
      v44 = "nw_necp_append_tlv";
      v45 = 2082;
      *(_QWORD *)v46 = backtrace_string;
      v32 = "%{public}s called with null beyond, dumping backtrace:%{public}s";
LABEL_51:
      _os_log_impl(&dword_182FBE000, v23, v24, v32, buf, 0x16u);
LABEL_52:

      free(backtrace_string);
      goto LABEL_77;
    }
    goto LABEL_77;
  }
  v7 = (v6 + 1);
  if (v5 >= v4)
  {
    __nwlog_obj();
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136447234;
    v44 = "nw_necp_append_tlv";
    v45 = 2048;
    *(_QWORD *)v46 = v5;
    *(_WORD *)&v46[8] = 2048;
    *(_QWORD *)v47 = v4;
    *(_WORD *)&v47[8] = 1024;
    *(_DWORD *)v48 = 14;
    *(_WORD *)&v48[4] = 1024;
    *(_DWORD *)&v48[6] = v7;
    v9 = (const char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v41 = 0;
    if (!__nwlog_fault(v9, &type, &v41))
      goto LABEL_19;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v28 = type;
      if (!os_log_type_enabled(v10, type))
        goto LABEL_88;
      *(_DWORD *)buf = 136447234;
      v44 = "nw_necp_append_tlv";
      v45 = 2048;
      *(_QWORD *)v46 = v5;
      *(_WORD *)&v46[8] = 2048;
      *(_QWORD *)v47 = v4;
      *(_WORD *)&v47[8] = 1024;
      *(_DWORD *)v48 = 14;
      *(_WORD *)&v48[4] = 1024;
      *(_DWORD *)&v48[6] = v7;
      v29 = "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u";
    }
    else if (v41)
    {
      v14 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v28 = type;
      v34 = os_log_type_enabled(v10, type);
      if (v14)
      {
        if (!v34)
          goto LABEL_18;
        *(_DWORD *)buf = 136447490;
        v44 = "nw_necp_append_tlv";
        v45 = 2048;
        *(_QWORD *)v46 = v5;
        *(_WORD *)&v46[8] = 2048;
        *(_QWORD *)v47 = v4;
        *(_WORD *)&v47[8] = 1024;
        *(_DWORD *)v48 = 14;
        *(_WORD *)&v48[4] = 1024;
        *(_DWORD *)&v48[6] = v7;
        *(_WORD *)v49 = 2082;
        *(_QWORD *)&v49[2] = v14;
        v16 = "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, dumping backtrace:%{public}s";
        v17 = v10;
        v18 = v28;
        v19 = 54;
LABEL_17:
        _os_log_impl(&dword_182FBE000, v17, v18, v16, buf, v19);
LABEL_18:

        free(v14);
        goto LABEL_19;
      }
      if (!v34)
        goto LABEL_88;
      *(_DWORD *)buf = 136447234;
      v44 = "nw_necp_append_tlv";
      v45 = 2048;
      *(_QWORD *)v46 = v5;
      *(_WORD *)&v46[8] = 2048;
      *(_QWORD *)v47 = v4;
      *(_WORD *)&v47[8] = 1024;
      *(_DWORD *)v48 = 14;
      *(_WORD *)&v48[4] = 1024;
      *(_DWORD *)&v48[6] = v7;
      v29 = "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, no backtrace";
    }
    else
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v28 = type;
      if (!os_log_type_enabled(v10, type))
        goto LABEL_88;
      *(_DWORD *)buf = 136447234;
      v44 = "nw_necp_append_tlv";
      v45 = 2048;
      *(_QWORD *)v46 = v5;
      *(_WORD *)&v46[8] = 2048;
      *(_QWORD *)v47 = v4;
      *(_WORD *)&v47[8] = 1024;
      *(_DWORD *)v48 = 14;
      *(_WORD *)&v48[4] = 1024;
      *(_DWORD *)&v48[6] = v7;
      v29 = "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, backtrace limit exceeded";
    }
    v38 = v10;
    v39 = v28;
    v40 = 44;
LABEL_87:
    _os_log_impl(&dword_182FBE000, v38, v39, v29, buf, v40);
    goto LABEL_88;
  }
  if (v4 - v5 < v7 + 5)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v8 = (id)gLogObj;
    *(_DWORD *)buf = 136447490;
    v44 = "nw_necp_append_tlv";
    v45 = 2048;
    *(_QWORD *)v46 = v5;
    *(_WORD *)&v46[8] = 2048;
    *(_QWORD *)v47 = v7 + 5;
    *(_WORD *)&v47[8] = 2048;
    *(_QWORD *)v48 = v4;
    *(_WORD *)&v48[8] = 1024;
    *(_DWORD *)v49 = 14;
    *(_WORD *)&v49[4] = 1024;
    *(_DWORD *)&v49[6] = v7;
    v9 = (const char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v41 = 0;
    if (!__nwlog_fault(v9, &type, &v41))
      goto LABEL_19;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v10 = (id)gLogObj;
      v11 = type;
      if (!os_log_type_enabled(v10, type))
        goto LABEL_26;
      *(_DWORD *)buf = 136447490;
      v44 = "nw_necp_append_tlv";
      v45 = 2048;
      *(_QWORD *)v46 = v5;
      *(_WORD *)&v46[8] = 2048;
      *(_QWORD *)v47 = v7 + 5;
      *(_WORD *)&v47[8] = 2048;
      *(_QWORD *)v48 = v4;
      *(_WORD *)&v48[8] = 1024;
      *(_DWORD *)v49 = 14;
      *(_WORD *)&v49[4] = 1024;
      *(_DWORD *)&v49[6] = v7;
      v12 = "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u";
      goto LABEL_25;
    }
    if (!v41)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v10 = (id)gLogObj;
      v11 = type;
      if (!os_log_type_enabled(v10, type))
        goto LABEL_26;
      *(_DWORD *)buf = 136447490;
      v44 = "nw_necp_append_tlv";
      v45 = 2048;
      *(_QWORD *)v46 = v5;
      *(_WORD *)&v46[8] = 2048;
      *(_QWORD *)v47 = v7 + 5;
      *(_WORD *)&v47[8] = 2048;
      *(_QWORD *)v48 = v4;
      *(_WORD *)&v48[8] = 1024;
      *(_DWORD *)v49 = 14;
      *(_WORD *)&v49[4] = 1024;
      *(_DWORD *)&v49[6] = v7;
      v12 = "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, backtrace limit exceeded";
      goto LABEL_25;
    }
    v14 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v10 = (id)gLogObj;
    v11 = type;
    v15 = os_log_type_enabled(v10, type);
    if (!v14)
    {
      if (!v15)
        goto LABEL_26;
      *(_DWORD *)buf = 136447490;
      v44 = "nw_necp_append_tlv";
      v45 = 2048;
      *(_QWORD *)v46 = v5;
      *(_WORD *)&v46[8] = 2048;
      *(_QWORD *)v47 = v7 + 5;
      *(_WORD *)&v47[8] = 2048;
      *(_QWORD *)v48 = v4;
      *(_WORD *)&v48[8] = 1024;
      *(_DWORD *)v49 = 14;
      *(_WORD *)&v49[4] = 1024;
      *(_DWORD *)&v49[6] = v7;
      v12 = "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, no backtrace";
LABEL_25:
      _os_log_impl(&dword_182FBE000, v10, v11, v12, buf, 0x36u);
LABEL_26:

      if (!v9)
      {
LABEL_29:
        v13 = 0;
        goto LABEL_30;
      }
      goto LABEL_27;
    }
    if (!v15)
      goto LABEL_18;
    *(_DWORD *)buf = 136447746;
    v44 = "nw_necp_append_tlv";
    v45 = 2048;
    *(_QWORD *)v46 = v5;
    *(_WORD *)&v46[8] = 2048;
    *(_QWORD *)v47 = v7 + 5;
    *(_WORD *)&v47[8] = 2048;
    *(_QWORD *)v48 = v4;
    *(_WORD *)&v48[8] = 1024;
    *(_DWORD *)v49 = 14;
    *(_WORD *)&v49[4] = 1024;
    *(_DWORD *)&v49[6] = v7;
    v50 = 2082;
    v51 = v14;
    v16 = "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, dumping backtrace:%{public}s";
    v17 = v10;
    v18 = v11;
    v19 = 64;
    goto LABEL_17;
  }
  *(_BYTE *)v5 = 14;
  *(_DWORD *)(v5 + 1) = v7;
  if (v6 != -1)
  {
    if (__s)
    {
      memcpy((void *)(v5 + 5), __s, v7);
      goto LABEL_12;
    }
    __nwlog_obj();
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446722;
    v44 = "nw_necp_append_tlv";
    v45 = 1024;
    *(_DWORD *)v46 = 14;
    *(_WORD *)&v46[4] = 1024;
    *(_DWORD *)&v46[6] = v7;
    v9 = (const char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v41 = 0;
    if (!__nwlog_fault(v9, &type, &v41))
    {
LABEL_19:
      if (!v9)
        goto LABEL_29;
LABEL_27:
      v20 = (char *)v9;
LABEL_28:
      free(v20);
      goto LABEL_29;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v36 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446722;
        v44 = "nw_necp_append_tlv";
        v45 = 1024;
        *(_DWORD *)v46 = 14;
        *(_WORD *)&v46[4] = 1024;
        *(_DWORD *)&v46[6] = v7;
        v29 = "%{public}s type=%u length=%u but value is NULL";
LABEL_86:
        v38 = v10;
        v39 = v36;
        v40 = 24;
        goto LABEL_87;
      }
    }
    else
    {
      if (v41)
      {
        v14 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v36 = type;
        v37 = os_log_type_enabled(v10, type);
        if (v14)
        {
          if (!v37)
            goto LABEL_18;
          *(_DWORD *)buf = 136446978;
          v44 = "nw_necp_append_tlv";
          v45 = 1024;
          *(_DWORD *)v46 = 14;
          *(_WORD *)&v46[4] = 1024;
          *(_DWORD *)&v46[6] = v7;
          *(_WORD *)v47 = 2082;
          *(_QWORD *)&v47[2] = v14;
          v16 = "%{public}s type=%u length=%u but value is NULL, dumping backtrace:%{public}s";
          v17 = v10;
          v18 = v36;
          v19 = 34;
          goto LABEL_17;
        }
        if (!v37)
          goto LABEL_88;
        *(_DWORD *)buf = 136446722;
        v44 = "nw_necp_append_tlv";
        v45 = 1024;
        *(_DWORD *)v46 = 14;
        *(_WORD *)&v46[4] = 1024;
        *(_DWORD *)&v46[6] = v7;
        v29 = "%{public}s type=%u length=%u but value is NULL, no backtrace";
        goto LABEL_86;
      }
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v36 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446722;
        v44 = "nw_necp_append_tlv";
        v45 = 1024;
        *(_DWORD *)v46 = 14;
        *(_WORD *)&v46[4] = 1024;
        *(_DWORD *)&v46[6] = v7;
        v29 = "%{public}s type=%u length=%u but value is NULL, backtrace limit exceeded";
        goto LABEL_86;
      }
    }
LABEL_88:

    goto LABEL_19;
  }
LABEL_12:
  v13 = v5 + v7 + 5;
LABEL_30:
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v13;
}

void __nw_proxy_config_copy_agent_data_block_invoke_3_107(uint64_t a1, char *__s)
{
  unint64_t v4;
  unint64_t v5;
  int v6;
  size_t v7;
  id v8;
  const char *v9;
  NSObject *v10;
  os_log_type_t v11;
  const char *v12;
  size_t v13;
  char *v14;
  _BOOL4 v15;
  const char *v16;
  NSObject *v17;
  os_log_type_t v18;
  uint32_t v19;
  char *v20;
  void *v21;
  const char *v22;
  NSObject *v23;
  os_log_type_t v24;
  const char *v25;
  void *v26;
  void *v27;
  os_log_type_t v28;
  const char *v29;
  char *backtrace_string;
  _BOOL4 v31;
  const char *v32;
  _BOOL4 v33;
  _BOOL4 v34;
  void *v35;
  os_log_type_t v36;
  _BOOL4 v37;
  NSObject *v38;
  os_log_type_t v39;
  uint32_t v40;
  char v41;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v44;
  __int16 v45;
  _BYTE v46[10];
  _BYTE v47[10];
  _BYTE v48[10];
  _BYTE v49[10];
  __int16 v50;
  char *v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  v6 = strlen(__s);
  if (!v5)
  {
    __nwlog_obj();
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v44 = "nw_necp_append_tlv";
    v22 = (const char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v41 = 0;
    if (__nwlog_fault(v22, &type, &v41))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v23 = objc_claimAutoreleasedReturnValue();
        v24 = type;
        if (os_log_type_enabled(v23, type))
        {
          *(_DWORD *)buf = 136446210;
          v44 = "nw_necp_append_tlv";
          v25 = "%{public}s called with null tlv_start";
LABEL_75:
          _os_log_impl(&dword_182FBE000, v23, v24, v25, buf, 0xCu);
        }
LABEL_76:

        goto LABEL_77;
      }
      if (!v41)
      {
        __nwlog_obj();
        v23 = objc_claimAutoreleasedReturnValue();
        v24 = type;
        if (os_log_type_enabled(v23, type))
        {
          *(_DWORD *)buf = 136446210;
          v44 = "nw_necp_append_tlv";
          v25 = "%{public}s called with null tlv_start, backtrace limit exceeded";
          goto LABEL_75;
        }
        goto LABEL_76;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v23 = objc_claimAutoreleasedReturnValue();
      v24 = type;
      v31 = os_log_type_enabled(v23, type);
      if (!backtrace_string)
      {
        if (v31)
        {
          *(_DWORD *)buf = 136446210;
          v44 = "nw_necp_append_tlv";
          v25 = "%{public}s called with null tlv_start, no backtrace";
          goto LABEL_75;
        }
        goto LABEL_76;
      }
      if (!v31)
        goto LABEL_52;
      *(_DWORD *)buf = 136446466;
      v44 = "nw_necp_append_tlv";
      v45 = 2082;
      *(_QWORD *)v46 = backtrace_string;
      v32 = "%{public}s called with null tlv_start, dumping backtrace:%{public}s";
      goto LABEL_51;
    }
LABEL_77:
    if (!v22)
      goto LABEL_29;
    v20 = (char *)v22;
    goto LABEL_28;
  }
  if (!v4)
  {
    __nwlog_obj();
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v44 = "nw_necp_append_tlv";
    v22 = (const char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v41 = 0;
    if (__nwlog_fault(v22, &type, &v41))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v23 = objc_claimAutoreleasedReturnValue();
        v24 = type;
        if (os_log_type_enabled(v23, type))
        {
          *(_DWORD *)buf = 136446210;
          v44 = "nw_necp_append_tlv";
          v25 = "%{public}s called with null beyond";
          goto LABEL_75;
        }
        goto LABEL_76;
      }
      if (!v41)
      {
        __nwlog_obj();
        v23 = objc_claimAutoreleasedReturnValue();
        v24 = type;
        if (os_log_type_enabled(v23, type))
        {
          *(_DWORD *)buf = 136446210;
          v44 = "nw_necp_append_tlv";
          v25 = "%{public}s called with null beyond, backtrace limit exceeded";
          goto LABEL_75;
        }
        goto LABEL_76;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v23 = objc_claimAutoreleasedReturnValue();
      v24 = type;
      v33 = os_log_type_enabled(v23, type);
      if (!backtrace_string)
      {
        if (v33)
        {
          *(_DWORD *)buf = 136446210;
          v44 = "nw_necp_append_tlv";
          v25 = "%{public}s called with null beyond, no backtrace";
          goto LABEL_75;
        }
        goto LABEL_76;
      }
      if (!v33)
        goto LABEL_52;
      *(_DWORD *)buf = 136446466;
      v44 = "nw_necp_append_tlv";
      v45 = 2082;
      *(_QWORD *)v46 = backtrace_string;
      v32 = "%{public}s called with null beyond, dumping backtrace:%{public}s";
LABEL_51:
      _os_log_impl(&dword_182FBE000, v23, v24, v32, buf, 0x16u);
LABEL_52:

      free(backtrace_string);
      goto LABEL_77;
    }
    goto LABEL_77;
  }
  v7 = (v6 + 1);
  if (v5 >= v4)
  {
    __nwlog_obj();
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136447234;
    v44 = "nw_necp_append_tlv";
    v45 = 2048;
    *(_QWORD *)v46 = v5;
    *(_WORD *)&v46[8] = 2048;
    *(_QWORD *)v47 = v4;
    *(_WORD *)&v47[8] = 1024;
    *(_DWORD *)v48 = 18;
    *(_WORD *)&v48[4] = 1024;
    *(_DWORD *)&v48[6] = v7;
    v9 = (const char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v41 = 0;
    if (!__nwlog_fault(v9, &type, &v41))
      goto LABEL_19;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v28 = type;
      if (!os_log_type_enabled(v10, type))
        goto LABEL_88;
      *(_DWORD *)buf = 136447234;
      v44 = "nw_necp_append_tlv";
      v45 = 2048;
      *(_QWORD *)v46 = v5;
      *(_WORD *)&v46[8] = 2048;
      *(_QWORD *)v47 = v4;
      *(_WORD *)&v47[8] = 1024;
      *(_DWORD *)v48 = 18;
      *(_WORD *)&v48[4] = 1024;
      *(_DWORD *)&v48[6] = v7;
      v29 = "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u";
    }
    else if (v41)
    {
      v14 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v28 = type;
      v34 = os_log_type_enabled(v10, type);
      if (v14)
      {
        if (!v34)
          goto LABEL_18;
        *(_DWORD *)buf = 136447490;
        v44 = "nw_necp_append_tlv";
        v45 = 2048;
        *(_QWORD *)v46 = v5;
        *(_WORD *)&v46[8] = 2048;
        *(_QWORD *)v47 = v4;
        *(_WORD *)&v47[8] = 1024;
        *(_DWORD *)v48 = 18;
        *(_WORD *)&v48[4] = 1024;
        *(_DWORD *)&v48[6] = v7;
        *(_WORD *)v49 = 2082;
        *(_QWORD *)&v49[2] = v14;
        v16 = "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, dumping backtrace:%{public}s";
        v17 = v10;
        v18 = v28;
        v19 = 54;
LABEL_17:
        _os_log_impl(&dword_182FBE000, v17, v18, v16, buf, v19);
LABEL_18:

        free(v14);
        goto LABEL_19;
      }
      if (!v34)
        goto LABEL_88;
      *(_DWORD *)buf = 136447234;
      v44 = "nw_necp_append_tlv";
      v45 = 2048;
      *(_QWORD *)v46 = v5;
      *(_WORD *)&v46[8] = 2048;
      *(_QWORD *)v47 = v4;
      *(_WORD *)&v47[8] = 1024;
      *(_DWORD *)v48 = 18;
      *(_WORD *)&v48[4] = 1024;
      *(_DWORD *)&v48[6] = v7;
      v29 = "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, no backtrace";
    }
    else
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v28 = type;
      if (!os_log_type_enabled(v10, type))
        goto LABEL_88;
      *(_DWORD *)buf = 136447234;
      v44 = "nw_necp_append_tlv";
      v45 = 2048;
      *(_QWORD *)v46 = v5;
      *(_WORD *)&v46[8] = 2048;
      *(_QWORD *)v47 = v4;
      *(_WORD *)&v47[8] = 1024;
      *(_DWORD *)v48 = 18;
      *(_WORD *)&v48[4] = 1024;
      *(_DWORD *)&v48[6] = v7;
      v29 = "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, backtrace limit exceeded";
    }
    v38 = v10;
    v39 = v28;
    v40 = 44;
LABEL_87:
    _os_log_impl(&dword_182FBE000, v38, v39, v29, buf, v40);
    goto LABEL_88;
  }
  if (v4 - v5 < v7 + 5)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v8 = (id)gLogObj;
    *(_DWORD *)buf = 136447490;
    v44 = "nw_necp_append_tlv";
    v45 = 2048;
    *(_QWORD *)v46 = v5;
    *(_WORD *)&v46[8] = 2048;
    *(_QWORD *)v47 = v7 + 5;
    *(_WORD *)&v47[8] = 2048;
    *(_QWORD *)v48 = v4;
    *(_WORD *)&v48[8] = 1024;
    *(_DWORD *)v49 = 18;
    *(_WORD *)&v49[4] = 1024;
    *(_DWORD *)&v49[6] = v7;
    v9 = (const char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v41 = 0;
    if (!__nwlog_fault(v9, &type, &v41))
      goto LABEL_19;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v10 = (id)gLogObj;
      v11 = type;
      if (!os_log_type_enabled(v10, type))
        goto LABEL_26;
      *(_DWORD *)buf = 136447490;
      v44 = "nw_necp_append_tlv";
      v45 = 2048;
      *(_QWORD *)v46 = v5;
      *(_WORD *)&v46[8] = 2048;
      *(_QWORD *)v47 = v7 + 5;
      *(_WORD *)&v47[8] = 2048;
      *(_QWORD *)v48 = v4;
      *(_WORD *)&v48[8] = 1024;
      *(_DWORD *)v49 = 18;
      *(_WORD *)&v49[4] = 1024;
      *(_DWORD *)&v49[6] = v7;
      v12 = "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u";
      goto LABEL_25;
    }
    if (!v41)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v10 = (id)gLogObj;
      v11 = type;
      if (!os_log_type_enabled(v10, type))
        goto LABEL_26;
      *(_DWORD *)buf = 136447490;
      v44 = "nw_necp_append_tlv";
      v45 = 2048;
      *(_QWORD *)v46 = v5;
      *(_WORD *)&v46[8] = 2048;
      *(_QWORD *)v47 = v7 + 5;
      *(_WORD *)&v47[8] = 2048;
      *(_QWORD *)v48 = v4;
      *(_WORD *)&v48[8] = 1024;
      *(_DWORD *)v49 = 18;
      *(_WORD *)&v49[4] = 1024;
      *(_DWORD *)&v49[6] = v7;
      v12 = "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, backtrace limit exceeded";
      goto LABEL_25;
    }
    v14 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v10 = (id)gLogObj;
    v11 = type;
    v15 = os_log_type_enabled(v10, type);
    if (!v14)
    {
      if (!v15)
        goto LABEL_26;
      *(_DWORD *)buf = 136447490;
      v44 = "nw_necp_append_tlv";
      v45 = 2048;
      *(_QWORD *)v46 = v5;
      *(_WORD *)&v46[8] = 2048;
      *(_QWORD *)v47 = v7 + 5;
      *(_WORD *)&v47[8] = 2048;
      *(_QWORD *)v48 = v4;
      *(_WORD *)&v48[8] = 1024;
      *(_DWORD *)v49 = 18;
      *(_WORD *)&v49[4] = 1024;
      *(_DWORD *)&v49[6] = v7;
      v12 = "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, no backtrace";
LABEL_25:
      _os_log_impl(&dword_182FBE000, v10, v11, v12, buf, 0x36u);
LABEL_26:

      if (!v9)
      {
LABEL_29:
        v13 = 0;
        goto LABEL_30;
      }
      goto LABEL_27;
    }
    if (!v15)
      goto LABEL_18;
    *(_DWORD *)buf = 136447746;
    v44 = "nw_necp_append_tlv";
    v45 = 2048;
    *(_QWORD *)v46 = v5;
    *(_WORD *)&v46[8] = 2048;
    *(_QWORD *)v47 = v7 + 5;
    *(_WORD *)&v47[8] = 2048;
    *(_QWORD *)v48 = v4;
    *(_WORD *)&v48[8] = 1024;
    *(_DWORD *)v49 = 18;
    *(_WORD *)&v49[4] = 1024;
    *(_DWORD *)&v49[6] = v7;
    v50 = 2082;
    v51 = v14;
    v16 = "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, dumping backtrace:%{public}s";
    v17 = v10;
    v18 = v11;
    v19 = 64;
    goto LABEL_17;
  }
  *(_BYTE *)v5 = 18;
  *(_DWORD *)(v5 + 1) = v7;
  if (v6 != -1)
  {
    if (__s)
    {
      memcpy((void *)(v5 + 5), __s, v7);
      goto LABEL_12;
    }
    __nwlog_obj();
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446722;
    v44 = "nw_necp_append_tlv";
    v45 = 1024;
    *(_DWORD *)v46 = 18;
    *(_WORD *)&v46[4] = 1024;
    *(_DWORD *)&v46[6] = v7;
    v9 = (const char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v41 = 0;
    if (!__nwlog_fault(v9, &type, &v41))
    {
LABEL_19:
      if (!v9)
        goto LABEL_29;
LABEL_27:
      v20 = (char *)v9;
LABEL_28:
      free(v20);
      goto LABEL_29;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v36 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446722;
        v44 = "nw_necp_append_tlv";
        v45 = 1024;
        *(_DWORD *)v46 = 18;
        *(_WORD *)&v46[4] = 1024;
        *(_DWORD *)&v46[6] = v7;
        v29 = "%{public}s type=%u length=%u but value is NULL";
LABEL_86:
        v38 = v10;
        v39 = v36;
        v40 = 24;
        goto LABEL_87;
      }
    }
    else
    {
      if (v41)
      {
        v14 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v36 = type;
        v37 = os_log_type_enabled(v10, type);
        if (v14)
        {
          if (!v37)
            goto LABEL_18;
          *(_DWORD *)buf = 136446978;
          v44 = "nw_necp_append_tlv";
          v45 = 1024;
          *(_DWORD *)v46 = 18;
          *(_WORD *)&v46[4] = 1024;
          *(_DWORD *)&v46[6] = v7;
          *(_WORD *)v47 = 2082;
          *(_QWORD *)&v47[2] = v14;
          v16 = "%{public}s type=%u length=%u but value is NULL, dumping backtrace:%{public}s";
          v17 = v10;
          v18 = v36;
          v19 = 34;
          goto LABEL_17;
        }
        if (!v37)
          goto LABEL_88;
        *(_DWORD *)buf = 136446722;
        v44 = "nw_necp_append_tlv";
        v45 = 1024;
        *(_DWORD *)v46 = 18;
        *(_WORD *)&v46[4] = 1024;
        *(_DWORD *)&v46[6] = v7;
        v29 = "%{public}s type=%u length=%u but value is NULL, no backtrace";
        goto LABEL_86;
      }
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v36 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446722;
        v44 = "nw_necp_append_tlv";
        v45 = 1024;
        *(_DWORD *)v46 = 18;
        *(_WORD *)&v46[4] = 1024;
        *(_DWORD *)&v46[6] = v7;
        v29 = "%{public}s type=%u length=%u but value is NULL, backtrace limit exceeded";
        goto LABEL_86;
      }
    }
LABEL_88:

    goto LABEL_19;
  }
LABEL_12:
  v13 = v5 + v7 + 5;
LABEL_30:
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v13;
}

void __nw_proxy_config_copy_agent_data_block_invoke_4_108(uint64_t a1, _OWORD *a2)
{
  unint64_t v3;
  unint64_t v4;
  id v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  const char *v9;
  unint64_t v10;
  char *backtrace_string;
  _BOOL4 v12;
  const char *v13;
  NSObject *v14;
  os_log_type_t v15;
  uint32_t v16;
  void *v17;
  os_log_type_t v18;
  const char *v19;
  void *v20;
  void *v21;
  os_log_type_t v22;
  _BOOL4 v23;
  _BOOL4 v24;
  void *v25;
  os_log_type_t v26;
  _BOOL4 v27;
  _BOOL4 v28;
  NSObject *v29;
  os_log_type_t v30;
  uint32_t v31;
  char v32;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v35;
  __int16 v36;
  _BYTE v37[10];
  _BYTE v38[10];
  _BYTE v39[10];
  _BYTE v40[10];
  __int16 v41;
  char *v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  if (!v3)
  {
    __nwlog_obj();
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v35 = "nw_necp_append_tlv";
    v6 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v32 = 0;
    if (!__nwlog_fault(v6, &type, &v32))
      goto LABEL_17;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v18 = type;
      if (!os_log_type_enabled(v7, type))
        goto LABEL_81;
      *(_DWORD *)buf = 136446210;
      v35 = "nw_necp_append_tlv";
      v19 = "%{public}s called with null tlv_start";
      goto LABEL_71;
    }
    if (v32)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v18 = type;
      v23 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (!v23)
          goto LABEL_16;
        *(_DWORD *)buf = 136446466;
        v35 = "nw_necp_append_tlv";
        v36 = 2082;
        *(_QWORD *)v37 = backtrace_string;
        v13 = "%{public}s called with null tlv_start, dumping backtrace:%{public}s";
        goto LABEL_48;
      }
      if (!v23)
        goto LABEL_81;
      *(_DWORD *)buf = 136446210;
      v35 = "nw_necp_append_tlv";
      v19 = "%{public}s called with null tlv_start, no backtrace";
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v18 = type;
      if (!os_log_type_enabled(v7, type))
        goto LABEL_81;
      *(_DWORD *)buf = 136446210;
      v35 = "nw_necp_append_tlv";
      v19 = "%{public}s called with null tlv_start, backtrace limit exceeded";
    }
LABEL_71:
    v29 = v7;
    v30 = v18;
    v31 = 12;
    goto LABEL_80;
  }
  v4 = *(_QWORD *)(a1 + 40);
  if (!v4)
  {
    __nwlog_obj();
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v35 = "nw_necp_append_tlv";
    v6 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v32 = 0;
    if (!__nwlog_fault(v6, &type, &v32))
      goto LABEL_17;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v18 = type;
      if (!os_log_type_enabled(v7, type))
        goto LABEL_81;
      *(_DWORD *)buf = 136446210;
      v35 = "nw_necp_append_tlv";
      v19 = "%{public}s called with null beyond";
      goto LABEL_71;
    }
    if (v32)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v18 = type;
      v24 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (!v24)
          goto LABEL_16;
        *(_DWORD *)buf = 136446466;
        v35 = "nw_necp_append_tlv";
        v36 = 2082;
        *(_QWORD *)v37 = backtrace_string;
        v13 = "%{public}s called with null beyond, dumping backtrace:%{public}s";
LABEL_48:
        v14 = v7;
        v15 = v18;
        v16 = 22;
LABEL_15:
        _os_log_impl(&dword_182FBE000, v14, v15, v13, buf, v16);
LABEL_16:

        free(backtrace_string);
        goto LABEL_17;
      }
      if (!v24)
        goto LABEL_81;
      *(_DWORD *)buf = 136446210;
      v35 = "nw_necp_append_tlv";
      v19 = "%{public}s called with null beyond, no backtrace";
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v18 = type;
      if (!os_log_type_enabled(v7, type))
        goto LABEL_81;
      *(_DWORD *)buf = 136446210;
      v35 = "nw_necp_append_tlv";
      v19 = "%{public}s called with null beyond, backtrace limit exceeded";
    }
    goto LABEL_71;
  }
  if (v3 >= v4)
  {
    __nwlog_obj();
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136447234;
    v35 = "nw_necp_append_tlv";
    v36 = 2048;
    *(_QWORD *)v37 = v3;
    *(_WORD *)&v37[8] = 2048;
    *(_QWORD *)v38 = v4;
    *(_WORD *)&v38[8] = 1024;
    *(_DWORD *)v39 = 17;
    *(_WORD *)&v39[4] = 1024;
    *(_DWORD *)&v39[6] = 16;
    v6 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v32 = 0;
    if (!__nwlog_fault(v6, &type, &v32))
      goto LABEL_17;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v22 = type;
      if (!os_log_type_enabled(v7, type))
        goto LABEL_81;
      *(_DWORD *)buf = 136447234;
      v35 = "nw_necp_append_tlv";
      v36 = 2048;
      *(_QWORD *)v37 = v3;
      *(_WORD *)&v37[8] = 2048;
      *(_QWORD *)v38 = v4;
      *(_WORD *)&v38[8] = 1024;
      *(_DWORD *)v39 = 17;
      *(_WORD *)&v39[4] = 1024;
      *(_DWORD *)&v39[6] = 16;
      v19 = "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u";
    }
    else if (v32)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v22 = type;
      v27 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (!v27)
          goto LABEL_16;
        *(_DWORD *)buf = 136447490;
        v35 = "nw_necp_append_tlv";
        v36 = 2048;
        *(_QWORD *)v37 = v3;
        *(_WORD *)&v37[8] = 2048;
        *(_QWORD *)v38 = v4;
        *(_WORD *)&v38[8] = 1024;
        *(_DWORD *)v39 = 17;
        *(_WORD *)&v39[4] = 1024;
        *(_DWORD *)&v39[6] = 16;
        *(_WORD *)v40 = 2082;
        *(_QWORD *)&v40[2] = backtrace_string;
        v13 = "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, dumping backtrace:%{public}s";
        v14 = v7;
        v15 = v22;
        v16 = 54;
        goto LABEL_15;
      }
      if (!v27)
        goto LABEL_81;
      *(_DWORD *)buf = 136447234;
      v35 = "nw_necp_append_tlv";
      v36 = 2048;
      *(_QWORD *)v37 = v3;
      *(_WORD *)&v37[8] = 2048;
      *(_QWORD *)v38 = v4;
      *(_WORD *)&v38[8] = 1024;
      *(_DWORD *)v39 = 17;
      *(_WORD *)&v39[4] = 1024;
      *(_DWORD *)&v39[6] = 16;
      v19 = "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, no backtrace";
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v22 = type;
      if (!os_log_type_enabled(v7, type))
        goto LABEL_81;
      *(_DWORD *)buf = 136447234;
      v35 = "nw_necp_append_tlv";
      v36 = 2048;
      *(_QWORD *)v37 = v3;
      *(_WORD *)&v37[8] = 2048;
      *(_QWORD *)v38 = v4;
      *(_WORD *)&v38[8] = 1024;
      *(_DWORD *)v39 = 17;
      *(_WORD *)&v39[4] = 1024;
      *(_DWORD *)&v39[6] = 16;
      v19 = "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, backtrace limit exceeded";
    }
    v29 = v7;
    v30 = v22;
    v31 = 44;
LABEL_80:
    _os_log_impl(&dword_182FBE000, v29, v30, v19, buf, v31);
    goto LABEL_81;
  }
  if (v4 - v3 <= 0x14)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v5 = (id)gLogObj;
    *(_DWORD *)buf = 136447490;
    v35 = "nw_necp_append_tlv";
    v36 = 2048;
    *(_QWORD *)v37 = v3;
    *(_WORD *)&v37[8] = 2048;
    *(_QWORD *)v38 = 21;
    *(_WORD *)&v38[8] = 2048;
    *(_QWORD *)v39 = v4;
    *(_WORD *)&v39[8] = 1024;
    *(_DWORD *)v40 = 17;
    *(_WORD *)&v40[4] = 1024;
    *(_DWORD *)&v40[6] = 16;
    v6 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v32 = 0;
    if (!__nwlog_fault(v6, &type, &v32))
      goto LABEL_17;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v7 = (id)gLogObj;
      v8 = type;
      if (!os_log_type_enabled(v7, type))
        goto LABEL_26;
      *(_DWORD *)buf = 136447490;
      v35 = "nw_necp_append_tlv";
      v36 = 2048;
      *(_QWORD *)v37 = v3;
      *(_WORD *)&v37[8] = 2048;
      *(_QWORD *)v38 = 21;
      *(_WORD *)&v38[8] = 2048;
      *(_QWORD *)v39 = v4;
      *(_WORD *)&v39[8] = 1024;
      *(_DWORD *)v40 = 17;
      *(_WORD *)&v40[4] = 1024;
      *(_DWORD *)&v40[6] = 16;
      v9 = "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u";
      goto LABEL_25;
    }
    if (!v32)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v7 = (id)gLogObj;
      v8 = type;
      if (!os_log_type_enabled(v7, type))
        goto LABEL_26;
      *(_DWORD *)buf = 136447490;
      v35 = "nw_necp_append_tlv";
      v36 = 2048;
      *(_QWORD *)v37 = v3;
      *(_WORD *)&v37[8] = 2048;
      *(_QWORD *)v38 = 21;
      *(_WORD *)&v38[8] = 2048;
      *(_QWORD *)v39 = v4;
      *(_WORD *)&v39[8] = 1024;
      *(_DWORD *)v40 = 17;
      *(_WORD *)&v40[4] = 1024;
      *(_DWORD *)&v40[6] = 16;
      v9 = "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, backtrace limit exceeded";
      goto LABEL_25;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v7 = (id)gLogObj;
    v8 = type;
    v12 = os_log_type_enabled(v7, type);
    if (!backtrace_string)
    {
      if (!v12)
        goto LABEL_26;
      *(_DWORD *)buf = 136447490;
      v35 = "nw_necp_append_tlv";
      v36 = 2048;
      *(_QWORD *)v37 = v3;
      *(_WORD *)&v37[8] = 2048;
      *(_QWORD *)v38 = 21;
      *(_WORD *)&v38[8] = 2048;
      *(_QWORD *)v39 = v4;
      *(_WORD *)&v39[8] = 1024;
      *(_DWORD *)v40 = 17;
      *(_WORD *)&v40[4] = 1024;
      *(_DWORD *)&v40[6] = 16;
      v9 = "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, no backtrace";
LABEL_25:
      _os_log_impl(&dword_182FBE000, v7, v8, v9, buf, 0x36u);
LABEL_26:

      if (!v6)
        goto LABEL_19;
      goto LABEL_18;
    }
    if (!v12)
      goto LABEL_16;
    *(_DWORD *)buf = 136447746;
    v35 = "nw_necp_append_tlv";
    v36 = 2048;
    *(_QWORD *)v37 = v3;
    *(_WORD *)&v37[8] = 2048;
    *(_QWORD *)v38 = 21;
    *(_WORD *)&v38[8] = 2048;
    *(_QWORD *)v39 = v4;
    *(_WORD *)&v39[8] = 1024;
    *(_DWORD *)v40 = 17;
    *(_WORD *)&v40[4] = 1024;
    *(_DWORD *)&v40[6] = 16;
    v41 = 2082;
    v42 = backtrace_string;
    v13 = "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, dumping backtrace:%{public}s";
    v14 = v7;
    v15 = v8;
    v16 = 64;
    goto LABEL_15;
  }
  *(_BYTE *)v3 = 17;
  *(_DWORD *)(v3 + 1) = 16;
  if (!a2)
  {
    __nwlog_obj();
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446722;
    v35 = "nw_necp_append_tlv";
    v36 = 1024;
    *(_DWORD *)v37 = 17;
    *(_WORD *)&v37[4] = 1024;
    *(_DWORD *)&v37[6] = 16;
    v6 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v32 = 0;
    if (!__nwlog_fault(v6, &type, &v32))
      goto LABEL_17;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v26 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446722;
        v35 = "nw_necp_append_tlv";
        v36 = 1024;
        *(_DWORD *)v37 = 17;
        *(_WORD *)&v37[4] = 1024;
        *(_DWORD *)&v37[6] = 16;
        v19 = "%{public}s type=%u length=%u but value is NULL";
LABEL_79:
        v29 = v7;
        v30 = v26;
        v31 = 24;
        goto LABEL_80;
      }
    }
    else
    {
      if (v32)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v7 = objc_claimAutoreleasedReturnValue();
        v26 = type;
        v28 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (!v28)
            goto LABEL_16;
          *(_DWORD *)buf = 136446978;
          v35 = "nw_necp_append_tlv";
          v36 = 1024;
          *(_DWORD *)v37 = 17;
          *(_WORD *)&v37[4] = 1024;
          *(_DWORD *)&v37[6] = 16;
          *(_WORD *)v38 = 2082;
          *(_QWORD *)&v38[2] = backtrace_string;
          v13 = "%{public}s type=%u length=%u but value is NULL, dumping backtrace:%{public}s";
          v14 = v7;
          v15 = v26;
          v16 = 34;
          goto LABEL_15;
        }
        if (!v28)
          goto LABEL_81;
        *(_DWORD *)buf = 136446722;
        v35 = "nw_necp_append_tlv";
        v36 = 1024;
        *(_DWORD *)v37 = 17;
        *(_WORD *)&v37[4] = 1024;
        *(_DWORD *)&v37[6] = 16;
        v19 = "%{public}s type=%u length=%u but value is NULL, no backtrace";
        goto LABEL_79;
      }
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v26 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446722;
        v35 = "nw_necp_append_tlv";
        v36 = 1024;
        *(_DWORD *)v37 = 17;
        *(_WORD *)&v37[4] = 1024;
        *(_DWORD *)&v37[6] = 16;
        v19 = "%{public}s type=%u length=%u but value is NULL, backtrace limit exceeded";
        goto LABEL_79;
      }
    }
LABEL_81:

LABEL_17:
    if (!v6)
    {
LABEL_19:
      v10 = 0;
      goto LABEL_20;
    }
LABEL_18:
    free(v6);
    goto LABEL_19;
  }
  *(_OWORD *)(v3 + 5) = *a2;
  v10 = v3 + 21;
LABEL_20:
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v10;
}

void ___ZL35nw_proxy_config_serialize_one_stackPU31objcproto20OS_nw_protocol_stack8NSObjectPhPKh_block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  size_t v4;
  _OWORD *v5;
  char *v6;
  uint64_t v7;
  __int128 v8;
  size_t v9;
  size_t v10;
  unint64_t v11;
  unint64_t v12;
  id v13;
  const char *v14;
  NSObject *v15;
  os_log_type_t v16;
  nw_protocol_definition_t v17;
  char *identifier;
  size_t v19;
  unint64_t v20;
  id v21;
  char *v22;
  NSObject *v23;
  os_log_type_t v24;
  size_t v25;
  size_t v26;
  char *backtrace_string;
  os_log_type_t v28;
  _BOOL4 v29;
  char *v30;
  os_log_type_t v31;
  _BOOL4 v32;
  os_log_type_t v33;
  os_log_type_t v34;
  NSObject *v35;
  char *v36;
  NSObject *v37;
  nw_protocol_options_t v38;
  id v39;
  int v40;
  NSObject *v41;
  void *v42;
  void *v43;
  char *v44;
  NSObject *v45;
  os_log_type_t v46;
  NSObject *v47;
  void *v48;
  void *v49;
  const char *v50;
  NSObject *v51;
  os_log_type_t v52;
  void *v53;
  os_log_type_t v54;
  void *v55;
  os_log_type_t v56;
  void *v57;
  os_log_type_t v58;
  void *v59;
  os_log_type_t v60;
  char *v61;
  os_log_type_t v62;
  _BOOL4 v63;
  char *v64;
  os_log_type_t v65;
  _BOOL4 v66;
  char *v67;
  os_log_type_t v68;
  _BOOL4 v69;
  os_log_type_t v70;
  _BOOL4 v71;
  char *v72;
  os_log_type_t v73;
  _BOOL4 v74;
  char *v75;
  os_log_type_t v76;
  _BOOL4 v77;
  os_log_type_t v78;
  os_log_type_t v79;
  os_log_type_t v80;
  os_log_type_t v81;
  os_log_type_t v82;
  os_log_type_t v83;
  nw_protocol_definition_t v84;
  void *v85;
  nw_protocol_options_t options;
  _QWORD v87[4];
  __int128 v88;
  size_t __n;
  char v90;
  os_log_type_t v91;
  os_log_type_t type[16];
  __int128 v93;
  uint64_t v94;
  uint8_t buf[4];
  const char *v96;
  __int16 v97;
  size_t v98;
  __int16 v99;
  uint64_t v100;
  __int16 v101;
  _BYTE v102[10];
  _BYTE v103[10];
  __int16 v104;
  char *v105;
  uint64_t v106;

  v106 = *MEMORY[0x1E0C80C00];
  __n = 0;
  options = a2;
  v3 = (void *)nw_protocol_options_copy_serialized_bytes(options, (uint64_t)&__n, 0);
  v85 = v3;
  if (!v3 || !__n)
  {
    v17 = nw_protocol_options_copy_definition(options);
    identifier = nw_protocol_definition_get_identifier(v17);
    *(_OWORD *)type = *(_OWORD *)identifier;
    v93 = *((_OWORD *)identifier + 1);
    v94 = *((_QWORD *)identifier + 4);
    v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    if (v19)
    {
      v20 = *(_QWORD *)(a1 + 40);
      if (v20)
      {
        if (v19 < v20)
        {
          if (v20 - v19 > 0x2E)
          {
            *(_BYTE *)v19 = 4;
            *(_DWORD *)(v19 + 1) = 42;
            *(_OWORD *)(v19 + 5) = *(_OWORD *)type;
            *(_OWORD *)(v19 + 21) = v93;
            *(_QWORD *)(v19 + 37) = v94;
            *(_WORD *)(v19 + 45) = 0;
            v25 = v19 + 47;
            goto LABEL_51;
          }
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v21 = (id)gLogObj;
          *(_DWORD *)buf = 136447490;
          v96 = "nw_necp_append_tlv";
          v97 = 2048;
          v98 = v19;
          v99 = 2048;
          v100 = 47;
          v101 = 2048;
          *(_QWORD *)v102 = v20;
          *(_WORD *)&v102[8] = 1024;
          *(_DWORD *)v103 = 4;
          *(_WORD *)&v103[4] = 1024;
          *(_DWORD *)&v103[6] = 42;
          v22 = (char *)_os_log_send_and_compose_impl();

          v91 = OS_LOG_TYPE_ERROR;
          v90 = 0;
          if (__nwlog_fault(v22, &v91, &v90))
          {
            if (v91 == OS_LOG_TYPE_FAULT)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v23 = (id)gLogObj;
              v24 = v91;
              if (os_log_type_enabled(v23, v91))
              {
                *(_DWORD *)buf = 136447490;
                v96 = "nw_necp_append_tlv";
                v97 = 2048;
                v98 = v19;
                v99 = 2048;
                v100 = 47;
                v101 = 2048;
                *(_QWORD *)v102 = v20;
                *(_WORD *)&v102[8] = 1024;
                *(_DWORD *)v103 = 4;
                *(_WORD *)&v103[4] = 1024;
                *(_DWORD *)&v103[6] = 42;
                _os_log_impl(&dword_182FBE000, v23, v24, "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u", buf, 0x36u);
              }
            }
            else if (v90)
            {
              backtrace_string = (char *)__nw_create_backtrace_string();
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v23 = (id)gLogObj;
              v28 = v91;
              v29 = os_log_type_enabled(v23, v91);
              if (backtrace_string)
              {
                if (v29)
                {
                  *(_DWORD *)buf = 136447746;
                  v96 = "nw_necp_append_tlv";
                  v97 = 2048;
                  v98 = v19;
                  v99 = 2048;
                  v100 = 47;
                  v101 = 2048;
                  *(_QWORD *)v102 = v20;
                  *(_WORD *)&v102[8] = 1024;
                  *(_DWORD *)v103 = 4;
                  *(_WORD *)&v103[4] = 1024;
                  *(_DWORD *)&v103[6] = 42;
                  v104 = 2082;
                  v105 = backtrace_string;
                  _os_log_impl(&dword_182FBE000, v23, v28, "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, dumping backtrace:%{public}s", buf, 0x40u);
                }

                free(backtrace_string);
                if (!v22)
                  goto LABEL_50;
                goto LABEL_49;
              }
              if (v29)
              {
                *(_DWORD *)buf = 136447490;
                v96 = "nw_necp_append_tlv";
                v97 = 2048;
                v98 = v19;
                v99 = 2048;
                v100 = 47;
                v101 = 2048;
                *(_QWORD *)v102 = v20;
                *(_WORD *)&v102[8] = 1024;
                *(_DWORD *)v103 = 4;
                *(_WORD *)&v103[4] = 1024;
                *(_DWORD *)&v103[6] = 42;
                _os_log_impl(&dword_182FBE000, v23, v28, "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, no backtrace", buf, 0x36u);
              }
            }
            else
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v23 = (id)gLogObj;
              v33 = v91;
              if (os_log_type_enabled(v23, v91))
              {
                *(_DWORD *)buf = 136447490;
                v96 = "nw_necp_append_tlv";
                v97 = 2048;
                v98 = v19;
                v99 = 2048;
                v100 = 47;
                v101 = 2048;
                *(_QWORD *)v102 = v20;
                *(_WORD *)&v102[8] = 1024;
                *(_DWORD *)v103 = 4;
                *(_WORD *)&v103[4] = 1024;
                *(_DWORD *)&v103[6] = 42;
                _os_log_impl(&dword_182FBE000, v23, v33, "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, backtrace limit exceeded", buf, 0x36u);
              }
            }
            goto LABEL_47;
          }
LABEL_48:
          if (!v22)
          {
LABEL_50:
            v25 = 0;
            goto LABEL_51;
          }
LABEL_49:
          free(v22);
          goto LABEL_50;
        }
        __nwlog_obj();
        v57 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136447234;
        v96 = "nw_necp_append_tlv";
        v97 = 2048;
        v98 = v19;
        v99 = 2048;
        v100 = v20;
        v101 = 1024;
        *(_DWORD *)v102 = 4;
        *(_WORD *)&v102[4] = 1024;
        *(_DWORD *)&v102[6] = 42;
        v22 = (char *)_os_log_send_and_compose_impl();

        v91 = OS_LOG_TYPE_ERROR;
        v90 = 0;
        if (!__nwlog_fault(v22, &v91, &v90))
          goto LABEL_48;
        if (v91 == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v23 = objc_claimAutoreleasedReturnValue();
          v58 = v91;
          if (os_log_type_enabled(v23, v91))
          {
            *(_DWORD *)buf = 136447234;
            v96 = "nw_necp_append_tlv";
            v97 = 2048;
            v98 = v19;
            v99 = 2048;
            v100 = v20;
            v101 = 1024;
            *(_DWORD *)v102 = 4;
            *(_WORD *)&v102[4] = 1024;
            *(_DWORD *)&v102[6] = 42;
            _os_log_impl(&dword_182FBE000, v23, v58, "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u", buf, 0x2Cu);
          }
        }
        else if (v90)
        {
          v72 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v23 = objc_claimAutoreleasedReturnValue();
          v73 = v91;
          v74 = os_log_type_enabled(v23, v91);
          if (v72)
          {
            if (v74)
            {
              *(_DWORD *)buf = 136447490;
              v96 = "nw_necp_append_tlv";
              v97 = 2048;
              v98 = v19;
              v99 = 2048;
              v100 = v20;
              v101 = 1024;
              *(_DWORD *)v102 = 4;
              *(_WORD *)&v102[4] = 1024;
              *(_DWORD *)&v102[6] = 42;
              *(_WORD *)v103 = 2082;
              *(_QWORD *)&v103[2] = v72;
              _os_log_impl(&dword_182FBE000, v23, v73, "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, dumping backtrace:%{public}s", buf, 0x36u);
            }

            free(v72);
            goto LABEL_48;
          }
          if (v74)
          {
            *(_DWORD *)buf = 136447234;
            v96 = "nw_necp_append_tlv";
            v97 = 2048;
            v98 = v19;
            v99 = 2048;
            v100 = v20;
            v101 = 1024;
            *(_DWORD *)v102 = 4;
            *(_WORD *)&v102[4] = 1024;
            *(_DWORD *)&v102[6] = 42;
            _os_log_impl(&dword_182FBE000, v23, v73, "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, no backtrace", buf, 0x2Cu);
          }
        }
        else
        {
          __nwlog_obj();
          v23 = objc_claimAutoreleasedReturnValue();
          v82 = v91;
          if (os_log_type_enabled(v23, v91))
          {
            *(_DWORD *)buf = 136447234;
            v96 = "nw_necp_append_tlv";
            v97 = 2048;
            v98 = v19;
            v99 = 2048;
            v100 = v20;
            v101 = 1024;
            *(_DWORD *)v102 = 4;
            *(_WORD *)&v102[4] = 1024;
            *(_DWORD *)&v102[6] = 42;
            _os_log_impl(&dword_182FBE000, v23, v82, "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, backtrace limit exceeded", buf, 0x2Cu);
          }
        }
LABEL_47:

        goto LABEL_48;
      }
      __nwlog_obj();
      v53 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      v96 = "nw_necp_append_tlv";
      v44 = (char *)_os_log_send_and_compose_impl();

      v91 = OS_LOG_TYPE_ERROR;
      v90 = 0;
      if (__nwlog_fault(v44, &v91, &v90))
      {
        if (v91 == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v45 = objc_claimAutoreleasedReturnValue();
          v54 = v91;
          if (os_log_type_enabled(v45, v91))
          {
            *(_DWORD *)buf = 136446210;
            v96 = "nw_necp_append_tlv";
            _os_log_impl(&dword_182FBE000, v45, v54, "%{public}s called with null beyond", buf, 0xCu);
          }
        }
        else if (v90)
        {
          v67 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v45 = objc_claimAutoreleasedReturnValue();
          v68 = v91;
          v69 = os_log_type_enabled(v45, v91);
          if (v67)
          {
            if (v69)
            {
              *(_DWORD *)buf = 136446466;
              v96 = "nw_necp_append_tlv";
              v97 = 2082;
              v98 = (size_t)v67;
              _os_log_impl(&dword_182FBE000, v45, v68, "%{public}s called with null beyond, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(v67);
            if (!v44)
              goto LABEL_166;
            goto LABEL_165;
          }
          if (v69)
          {
            *(_DWORD *)buf = 136446210;
            v96 = "nw_necp_append_tlv";
            _os_log_impl(&dword_182FBE000, v45, v68, "%{public}s called with null beyond, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          __nwlog_obj();
          v45 = objc_claimAutoreleasedReturnValue();
          v80 = v91;
          if (os_log_type_enabled(v45, v91))
          {
            *(_DWORD *)buf = 136446210;
            v96 = "nw_necp_append_tlv";
            _os_log_impl(&dword_182FBE000, v45, v80, "%{public}s called with null beyond, backtrace limit exceeded", buf, 0xCu);
          }
        }
        goto LABEL_163;
      }
LABEL_164:
      if (!v44)
      {
LABEL_166:
        v25 = 0;
LABEL_51:
        *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v25;
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v35 = (id)gLogObj;
        if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136446466;
          v96 = "nw_proxy_config_serialize_one_stack_block_invoke";
          v97 = 2112;
          v98 = (size_t)v17;
          _os_log_impl(&dword_182FBE000, v35, OS_LOG_TYPE_DEBUG, "%{public}s Serialized proxy protocol %@", buf, 0x16u);
        }

        if (!v3)
          goto LABEL_66;
        goto LABEL_65;
      }
LABEL_165:
      free(v44);
      goto LABEL_166;
    }
    __nwlog_obj();
    v43 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v96 = "nw_necp_append_tlv";
    v44 = (char *)_os_log_send_and_compose_impl();

    v91 = OS_LOG_TYPE_ERROR;
    v90 = 0;
    if (!__nwlog_fault(v44, &v91, &v90))
      goto LABEL_164;
    if (v91 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v45 = objc_claimAutoreleasedReturnValue();
      v46 = v91;
      if (os_log_type_enabled(v45, v91))
      {
        *(_DWORD *)buf = 136446210;
        v96 = "nw_necp_append_tlv";
        _os_log_impl(&dword_182FBE000, v45, v46, "%{public}s called with null tlv_start", buf, 0xCu);
      }
    }
    else if (v90)
    {
      v61 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v45 = objc_claimAutoreleasedReturnValue();
      v62 = v91;
      v63 = os_log_type_enabled(v45, v91);
      if (v61)
      {
        if (v63)
        {
          *(_DWORD *)buf = 136446466;
          v96 = "nw_necp_append_tlv";
          v97 = 2082;
          v98 = (size_t)v61;
          _os_log_impl(&dword_182FBE000, v45, v62, "%{public}s called with null tlv_start, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v61);
        goto LABEL_164;
      }
      if (v63)
      {
        *(_DWORD *)buf = 136446210;
        v96 = "nw_necp_append_tlv";
        _os_log_impl(&dword_182FBE000, v45, v62, "%{public}s called with null tlv_start, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v45 = objc_claimAutoreleasedReturnValue();
      v78 = v91;
      if (os_log_type_enabled(v45, v91))
      {
        *(_DWORD *)buf = 136446210;
        v96 = "nw_necp_append_tlv";
        _os_log_impl(&dword_182FBE000, v45, v78, "%{public}s called with null tlv_start, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_163:

    goto LABEL_164;
  }
  v4 = __n + 42;
  if (__n == -42)
  {
    __nwlog_obj();
    v41 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v41, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    v96 = "strict_malloc";
    v42 = (void *)_os_log_send_and_compose_impl();

    if (__nwlog_abort((uint64_t)v42))
      goto LABEL_178;
    free(v42);
  }
  v5 = malloc_type_malloc(v4, 0xF2B69DE5uLL);
  if (v5)
    goto LABEL_5;
  __nwlog_obj();
  v47 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v47, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446466;
  v96 = "strict_malloc";
  v97 = 2048;
  v98 = v4;
  v48 = (void *)_os_log_send_and_compose_impl();

  if (__nwlog_abort((uint64_t)v48))
  {
LABEL_178:
    __break(1u);
    return;
  }
  free(v48);
LABEL_5:
  v84 = nw_protocol_options_copy_definition(options);
  v6 = nw_protocol_definition_get_identifier(v84);
  v7 = *((_QWORD *)v6 + 4);
  v8 = *((_OWORD *)v6 + 1);
  *v5 = *(_OWORD *)v6;
  v5[1] = v8;
  *((_QWORD *)v5 + 4) = v7;
  v9 = __n;
  *((_WORD *)v5 + 20) = __n;
  memcpy((char *)v5 + 42, v3, v9);
  v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  if (!v10)
  {
    __nwlog_obj();
    v49 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v96 = "nw_necp_append_tlv";
    v50 = (const char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    v91 = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v50, type, &v91))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v51 = objc_claimAutoreleasedReturnValue();
        v52 = type[0];
        if (os_log_type_enabled(v51, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          v96 = "nw_necp_append_tlv";
          _os_log_impl(&dword_182FBE000, v51, v52, "%{public}s called with null tlv_start", buf, 0xCu);
        }
        goto LABEL_169;
      }
      if (v91 == OS_LOG_TYPE_DEFAULT)
      {
        __nwlog_obj();
        v51 = objc_claimAutoreleasedReturnValue();
        v79 = type[0];
        if (os_log_type_enabled(v51, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          v96 = "nw_necp_append_tlv";
          _os_log_impl(&dword_182FBE000, v51, v79, "%{public}s called with null tlv_start, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_169;
      }
      v64 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v51 = objc_claimAutoreleasedReturnValue();
      v65 = type[0];
      v66 = os_log_type_enabled(v51, type[0]);
      if (!v64)
      {
        if (v66)
        {
          *(_DWORD *)buf = 136446210;
          v96 = "nw_necp_append_tlv";
          _os_log_impl(&dword_182FBE000, v51, v65, "%{public}s called with null tlv_start, no backtrace", buf, 0xCu);
        }
        goto LABEL_169;
      }
      if (v66)
      {
        *(_DWORD *)buf = 136446466;
        v96 = "nw_necp_append_tlv";
        v97 = 2082;
        v98 = (size_t)v64;
        _os_log_impl(&dword_182FBE000, v51, v65, "%{public}s called with null tlv_start, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_126:

      free(v64);
    }
LABEL_170:
    if (!v50)
      goto LABEL_61;
    v36 = (char *)v50;
    goto LABEL_60;
  }
  v11 = *(_QWORD *)(a1 + 40);
  if (!v11)
  {
    __nwlog_obj();
    v55 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v96 = "nw_necp_append_tlv";
    v50 = (const char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    v91 = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v50, type, &v91))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v51 = objc_claimAutoreleasedReturnValue();
        v56 = type[0];
        if (os_log_type_enabled(v51, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          v96 = "nw_necp_append_tlv";
          _os_log_impl(&dword_182FBE000, v51, v56, "%{public}s called with null beyond", buf, 0xCu);
        }
LABEL_169:

        goto LABEL_170;
      }
      if (v91 == OS_LOG_TYPE_DEFAULT)
      {
        __nwlog_obj();
        v51 = objc_claimAutoreleasedReturnValue();
        v81 = type[0];
        if (os_log_type_enabled(v51, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          v96 = "nw_necp_append_tlv";
          _os_log_impl(&dword_182FBE000, v51, v81, "%{public}s called with null beyond, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_169;
      }
      v64 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v51 = objc_claimAutoreleasedReturnValue();
      v70 = type[0];
      v71 = os_log_type_enabled(v51, type[0]);
      if (!v64)
      {
        if (v71)
        {
          *(_DWORD *)buf = 136446210;
          v96 = "nw_necp_append_tlv";
          _os_log_impl(&dword_182FBE000, v51, v70, "%{public}s called with null beyond, no backtrace", buf, 0xCu);
        }
        goto LABEL_169;
      }
      if (v71)
      {
        *(_DWORD *)buf = 136446466;
        v96 = "nw_necp_append_tlv";
        v97 = 2082;
        v98 = (size_t)v64;
        _os_log_impl(&dword_182FBE000, v51, v70, "%{public}s called with null beyond, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_126;
    }
    goto LABEL_170;
  }
  if (v10 >= v11)
  {
    __nwlog_obj();
    v59 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136447234;
    v96 = "nw_necp_append_tlv";
    v97 = 2048;
    v98 = v10;
    v99 = 2048;
    v100 = v11;
    v101 = 1024;
    *(_DWORD *)v102 = 4;
    *(_WORD *)&v102[4] = 1024;
    *(_DWORD *)&v102[6] = v4;
    v14 = (const char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    v91 = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v14, type, &v91))
      goto LABEL_58;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v15 = objc_claimAutoreleasedReturnValue();
      v60 = type[0];
      if (os_log_type_enabled(v15, type[0]))
      {
        *(_DWORD *)buf = 136447234;
        v96 = "nw_necp_append_tlv";
        v97 = 2048;
        v98 = v10;
        v99 = 2048;
        v100 = v11;
        v101 = 1024;
        *(_DWORD *)v102 = 4;
        *(_WORD *)&v102[4] = 1024;
        *(_DWORD *)&v102[6] = v4;
        _os_log_impl(&dword_182FBE000, v15, v60, "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u", buf, 0x2Cu);
      }
    }
    else if (v91)
    {
      v75 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v15 = objc_claimAutoreleasedReturnValue();
      v76 = type[0];
      v77 = os_log_type_enabled(v15, type[0]);
      if (v75)
      {
        if (v77)
        {
          *(_DWORD *)buf = 136447490;
          v96 = "nw_necp_append_tlv";
          v97 = 2048;
          v98 = v10;
          v99 = 2048;
          v100 = v11;
          v101 = 1024;
          *(_DWORD *)v102 = 4;
          *(_WORD *)&v102[4] = 1024;
          *(_DWORD *)&v102[6] = v4;
          *(_WORD *)v103 = 2082;
          *(_QWORD *)&v103[2] = v75;
          _os_log_impl(&dword_182FBE000, v15, v76, "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, dumping backtrace:%{public}s", buf, 0x36u);
        }

        free(v75);
        goto LABEL_58;
      }
      if (v77)
      {
        *(_DWORD *)buf = 136447234;
        v96 = "nw_necp_append_tlv";
        v97 = 2048;
        v98 = v10;
        v99 = 2048;
        v100 = v11;
        v101 = 1024;
        *(_DWORD *)v102 = 4;
        *(_WORD *)&v102[4] = 1024;
        *(_DWORD *)&v102[6] = v4;
        _os_log_impl(&dword_182FBE000, v15, v76, "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, no backtrace", buf, 0x2Cu);
      }
    }
    else
    {
      __nwlog_obj();
      v15 = objc_claimAutoreleasedReturnValue();
      v83 = type[0];
      if (os_log_type_enabled(v15, type[0]))
      {
        *(_DWORD *)buf = 136447234;
        v96 = "nw_necp_append_tlv";
        v97 = 2048;
        v98 = v10;
        v99 = 2048;
        v100 = v11;
        v101 = 1024;
        *(_DWORD *)v102 = 4;
        *(_WORD *)&v102[4] = 1024;
        *(_DWORD *)&v102[6] = v4;
        _os_log_impl(&dword_182FBE000, v15, v83, "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, backtrace limit exceeded", buf, 0x2Cu);
      }
    }
LABEL_57:

    goto LABEL_58;
  }
  v12 = v4 + 5;
  if (v11 - v10 >= v12)
  {
    *(_BYTE *)v10 = 4;
    *(_DWORD *)(v10 + 1) = v4;
    if ((_DWORD)v4)
      memcpy((void *)(v10 + 5), v5, v4);
    v26 = v10 + v12;
    goto LABEL_62;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v13 = (id)gLogObj;
  *(_DWORD *)buf = 136447490;
  v96 = "nw_necp_append_tlv";
  v97 = 2048;
  v98 = v10;
  v99 = 2048;
  v100 = v4 + 5;
  v101 = 2048;
  *(_QWORD *)v102 = v11;
  *(_WORD *)&v102[8] = 1024;
  *(_DWORD *)v103 = 4;
  *(_WORD *)&v103[4] = 1024;
  *(_DWORD *)&v103[6] = v4;
  v14 = (const char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  v91 = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v14, type, &v91))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v15 = (id)gLogObj;
      v16 = type[0];
      if (os_log_type_enabled(v15, type[0]))
      {
        *(_DWORD *)buf = 136447490;
        v96 = "nw_necp_append_tlv";
        v97 = 2048;
        v98 = v10;
        v99 = 2048;
        v100 = v4 + 5;
        v101 = 2048;
        *(_QWORD *)v102 = v11;
        *(_WORD *)&v102[8] = 1024;
        *(_DWORD *)v103 = 4;
        *(_WORD *)&v103[4] = 1024;
        *(_DWORD *)&v103[6] = v4;
        _os_log_impl(&dword_182FBE000, v15, v16, "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u", buf, 0x36u);
      }
    }
    else if (v91)
    {
      v30 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v15 = (id)gLogObj;
      v31 = type[0];
      v32 = os_log_type_enabled(v15, type[0]);
      if (v30)
      {
        if (v32)
        {
          *(_DWORD *)buf = 136447746;
          v96 = "nw_necp_append_tlv";
          v97 = 2048;
          v98 = v10;
          v99 = 2048;
          v100 = v4 + 5;
          v101 = 2048;
          *(_QWORD *)v102 = v11;
          *(_WORD *)&v102[8] = 1024;
          *(_DWORD *)v103 = 4;
          *(_WORD *)&v103[4] = 1024;
          *(_DWORD *)&v103[6] = v4;
          v104 = 2082;
          v105 = v30;
          _os_log_impl(&dword_182FBE000, v15, v31, "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, dumping backtrace:%{public}s", buf, 0x40u);
        }

        free(v30);
        if (!v14)
          goto LABEL_61;
        goto LABEL_59;
      }
      if (v32)
      {
        *(_DWORD *)buf = 136447490;
        v96 = "nw_necp_append_tlv";
        v97 = 2048;
        v98 = v10;
        v99 = 2048;
        v100 = v4 + 5;
        v101 = 2048;
        *(_QWORD *)v102 = v11;
        *(_WORD *)&v102[8] = 1024;
        *(_DWORD *)v103 = 4;
        *(_WORD *)&v103[4] = 1024;
        *(_DWORD *)&v103[6] = v4;
        _os_log_impl(&dword_182FBE000, v15, v31, "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, no backtrace", buf, 0x36u);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v15 = (id)gLogObj;
      v34 = type[0];
      if (os_log_type_enabled(v15, type[0]))
      {
        *(_DWORD *)buf = 136447490;
        v96 = "nw_necp_append_tlv";
        v97 = 2048;
        v98 = v10;
        v99 = 2048;
        v100 = v4 + 5;
        v101 = 2048;
        *(_QWORD *)v102 = v11;
        *(_WORD *)&v102[8] = 1024;
        *(_DWORD *)v103 = 4;
        *(_WORD *)&v103[4] = 1024;
        *(_DWORD *)&v103[6] = v4;
        _os_log_impl(&dword_182FBE000, v15, v34, "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, backtrace limit exceeded", buf, 0x36u);
      }
    }
    goto LABEL_57;
  }
LABEL_58:
  if (v14)
  {
LABEL_59:
    v36 = (char *)v14;
LABEL_60:
    free(v36);
  }
LABEL_61:
  v26 = 0;
LABEL_62:
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v26;
  free(v5);
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v37 = (id)gLogObj;
  if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136446466;
    v96 = "nw_proxy_config_serialize_one_stack_block_invoke";
    v97 = 2112;
    v98 = (size_t)v84;
    _os_log_impl(&dword_182FBE000, v37, OS_LOG_TYPE_DEBUG, "%{public}s Serialized proxy protocol %@", buf, 0x16u);
  }

LABEL_65:
  free(v85);
LABEL_66:
  v38 = options;
  v39 = nw_protocol_options_copy_proxy_endpoint(options);
  if (v39)
  {
    if (nw_protocol_options_proxy_endpoint_should_override_stack(options))
      v40 = 7;
    else
      v40 = 6;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = nw_path_evaluator_add_endpoint_to_necp_message(v39, v40, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8)+ 24), *(_QWORD *)(a1 + 40), 0);
    v38 = options;
  }
  v87[0] = MEMORY[0x1E0C809B0];
  v87[1] = 3221225472;
  v87[2] = ___ZL35nw_proxy_config_serialize_one_stackPU31objcproto20OS_nw_protocol_stack8NSObjectPhPKh_block_invoke_233;
  v87[3] = &unk_1E14AADD8;
  v88 = *(_OWORD *)(a1 + 32);
  nw_protocol_options_enumerate_proxy_next_hops(v38, v87);

}

void sub_183733828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{

  _Unwind_Resume(a1);
}

void ___ZL35nw_proxy_config_serialize_one_stackPU31objcproto20OS_nw_protocol_stack8NSObjectPhPKh_block_invoke_233(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = nw_path_evaluator_add_endpoint_to_necp_message(v3, 12, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8)+ 24), *(_QWORD *)(a1 + 40), 0);

}

void sub_1837338A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void nw_proxy_config_set_identifier(void *a1, _OWORD *a2)
{
  char *v3;
  void *v4;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    *(_OWORD *)(v3 + 56) = *a2;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_proxy_config_set_identifier";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_proxy_config_set_identifier";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_proxy_config_set_identifier";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_proxy_config_set_identifier";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_proxy_config_set_identifier";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
LABEL_3:

}

void nw_proxy_config_get_identifier(void *a1, _OWORD *a2)
{
  char *v3;
  void *v4;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    *a2 = *(_OWORD *)(v3 + 56);
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_proxy_config_get_identifier";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_proxy_config_get_identifier";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_proxy_config_get_identifier";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_proxy_config_get_identifier";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_proxy_config_get_identifier";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
LABEL_3:

}

const char *nw_proxy_config_get_agent_domain()
{
  return "Network";
}

const char *nw_proxy_config_get_agent_type()
{
  return "Proxy";
}

void nw_proxy_config_set_is_companion_proxy(void *a1, int a2)
{
  id v3;
  void *v4;
  char v5;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    if (a2)
      v5 = 2;
    else
      v5 = 0;
    *((_BYTE *)v3 + 172) = *((_BYTE *)v3 + 172) & 0xFD | v5;
    goto LABEL_6;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_proxy_config_set_is_companion_proxy";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_proxy_config_set_is_companion_proxy";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_proxy_config_set_is_companion_proxy";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_proxy_config_set_is_companion_proxy";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_proxy_config_set_is_companion_proxy";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_23:
  if (v7)
    free(v7);
LABEL_6:

}

uint64_t nw_proxy_config_publish(void *a1)
{
  _QWORD *v1;
  uint64_t v2;
  void *v3;
  _BOOL8 v4;
  uint64_t v5;
  id v6;
  _BOOL8 v7;
  NWConcrete_nw_agent *v8;
  void *v9;
  void *v10;
  void *v11;
  _BOOL8 v12;
  void *v13;
  char *v14;
  NSObject *v15;
  os_log_type_t v16;
  char *backtrace_string;
  os_log_type_t v18;
  _BOOL4 v19;
  os_log_type_t v20;
  char v22;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v25;
  __int16 v26;
  char *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (uint64_t)v1;
  if (!v1)
  {
    __nwlog_obj();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v25 = "nw_proxy_config_publish";
    v14 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (__nwlog_fault(v14, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v15 = objc_claimAutoreleasedReturnValue();
        v16 = type;
        if (os_log_type_enabled(v15, type))
        {
          *(_DWORD *)buf = 136446210;
          v25 = "nw_proxy_config_publish";
          _os_log_impl(&dword_182FBE000, v15, v16, "%{public}s called with null config", buf, 0xCu);
        }
      }
      else if (v22)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v15 = objc_claimAutoreleasedReturnValue();
        v18 = type;
        v19 = os_log_type_enabled(v15, type);
        if (backtrace_string)
        {
          if (v19)
          {
            *(_DWORD *)buf = 136446466;
            v25 = "nw_proxy_config_publish";
            v26 = 2082;
            v27 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v15, v18, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_24;
        }
        if (v19)
        {
          *(_DWORD *)buf = 136446210;
          v25 = "nw_proxy_config_publish";
          _os_log_impl(&dword_182FBE000, v15, v18, "%{public}s called with null config, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v15 = objc_claimAutoreleasedReturnValue();
        v20 = type;
        if (os_log_type_enabled(v15, type))
        {
          *(_DWORD *)buf = 136446210;
          v25 = "nw_proxy_config_publish";
          _os_log_impl(&dword_182FBE000, v15, v20, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_24:
    if (v14)
      free(v14);
    goto LABEL_26;
  }
  v3 = (void *)v1[12];
  if (!v3)
  {
    if (nw_context_copy_implicit_context::onceToken[0] != -1)
      dispatch_once(nw_context_copy_implicit_context::onceToken, &__block_literal_global_14);
    v6 = (id)nw_context_copy_implicit_context::implicit_context;
    v7 = nw_context_copy_workloop(v6);
    v8 = nw_agent_create("Network", "Proxy", "Proxy", (void *)v7);
    v9 = *(void **)(v2 + 96);
    *(_QWORD *)(v2 + 96) = v8;

    v10 = *(void **)(v2 + 96);
    if (v10)
    {
      nw_agent_set_uuid(v10, (_OWORD *)(v2 + 56));
      nw_agent_set_error_handler(*(void **)(v2 + 96), &__block_literal_global_39447);
      nw_agent_set_assert_handlers(*(void **)(v2 + 96), &__block_literal_global_113_39448, &__block_literal_global_115);
      v11 = *(void **)(v2 + 96);
      v12 = nw_proxy_config_copy_agent_data(v2);
      v5 = 1;
      nw_agent_change_state(v11, 1, 0, (void *)v12);

      goto LABEL_27;
    }
LABEL_26:
    v5 = 0;
    goto LABEL_27;
  }
  v4 = nw_proxy_config_copy_agent_data((uint64_t)v1);
  v5 = 1;
  nw_agent_change_state(v3, 1, 0, (void *)v4);

LABEL_27:
  return v5;
}

void sub_183734438(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void __nw_proxy_config_publish_block_invoke(uint64_t a1, uint64_t a2, int a3)
{
  NSObject *v4;
  int v5;
  const char *v6;
  __int16 v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v4 = (id)gLogObj;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = 136446466;
    v6 = "nw_proxy_config_publish_block_invoke";
    v7 = 1024;
    v8 = a3;
    _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_DEFAULT, "%{public}s Proxy config received error %d", (uint8_t *)&v5, 0x12u);
  }

}

void nw_proxy_config_unpublish(void *a1)
{
  id v1;
  _QWORD *v2;
  void *v3;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  char *backtrace_string;
  os_log_type_t v9;
  _BOOL4 v10;
  os_log_type_t v11;
  char v12;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    nw_agent_change_state(*((void **)v1 + 12), 0, 0, 0);
    v3 = (void *)v2[12];
    v2[12] = 0;

    goto LABEL_3;
  }
  __nwlog_obj();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v15 = "nw_proxy_config_unpublish";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v12 = 0;
  if (__nwlog_fault(v5, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_proxy_config_unpublish";
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v12)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          v15 = "nw_proxy_config_unpublish";
          v16 = 2082;
          v17 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_proxy_config_unpublish";
        _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_proxy_config_unpublish";
        _os_log_impl(&dword_182FBE000, v6, v11, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v5)
    free(v5);
LABEL_3:

}

uint64_t nw_proxy_config_get_generation(void *a1)
{
  unsigned int *v1;
  void *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = v1[41];
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_proxy_config_get_generation";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_proxy_config_get_generation";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_proxy_config_get_generation";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_proxy_config_get_generation";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_proxy_config_get_generation";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

void nw_proxy_config_set_generation(void *a1, int a2)
{
  id v3;
  void *v4;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    *((_DWORD *)v3 + 41) = a2;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_proxy_config_set_generation";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_proxy_config_set_generation";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_proxy_config_set_generation";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_proxy_config_set_generation";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_proxy_config_set_generation";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
LABEL_3:

}

uint64_t nw_proxy_config_get_epoch(void *a1)
{
  unsigned __int16 *v1;
  void *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = v1[84];
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_proxy_config_get_epoch";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_proxy_config_get_epoch";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_proxy_config_get_epoch";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_proxy_config_get_epoch";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_proxy_config_get_epoch";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

void nw_proxy_config_set_epoch(void *a1, __int16 a2)
{
  id v3;
  void *v4;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    *((_WORD *)v3 + 84) = a2;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_proxy_config_set_epoch";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_proxy_config_set_epoch";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_proxy_config_set_epoch";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_proxy_config_set_epoch";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_proxy_config_set_epoch";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
LABEL_3:

}

nw_relay_hop_t nw_relay_hop_create(nw_endpoint_t http3_relay_endpoint, nw_endpoint_t http2_relay_endpoint, nw_protocol_options_t relay_tls_options)
{
  unint64_t v5;
  unint64_t v6;
  NSObject *v7;
  NWConcrete_nw_proxy_hop *masque;
  NSObject *v9;
  NWConcrete_nw_proxy_hop *v10;
  NWConcrete_nw_proxy_hop *v11;
  NSObject *v12;
  NSObject *v13;
  void *v15;
  char *v16;
  NSObject *v17;
  os_log_type_t v18;
  void *v19;
  char *v20;
  NSObject *v21;
  os_log_type_t v22;
  char *v23;
  os_log_type_t v24;
  _BOOL4 v25;
  char *backtrace_string;
  os_log_type_t v27;
  _BOOL4 v28;
  void *v29;
  char *v30;
  NSObject *v31;
  os_log_type_t v32;
  void *v33;
  char *v34;
  NSObject *v35;
  os_log_type_t v36;
  char *v37;
  os_log_type_t v38;
  _BOOL4 v39;
  os_log_type_t v40;
  os_log_type_t v41;
  char *v42;
  os_log_type_t v43;
  _BOOL4 v44;
  os_log_type_t v45;
  os_log_type_t v46;
  char v47;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v50;
  __int16 v51;
  char *v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v5 = http3_relay_endpoint;
  v6 = http2_relay_endpoint;
  v7 = relay_tls_options;
  if (v5 | v6)
  {
    if (v5)
    {
      masque = nw_proxy_hop_create_masque((void *)v5);
      nw_proxy_hop_set_masque_version(masque, 2);
      if (!v6)
        goto LABEL_10;
      masque = masque;
      v9 = (id)v6;
      if (masque)
      {
        objc_storeStrong((id *)&masque->fallback_endpoint, http2_relay_endpoint);
LABEL_6:

LABEL_9:
LABEL_10:
        v12 = masque;
        v13 = v7;
        if (v12)
        {
          objc_storeStrong((id *)&v12[6].isa, relay_tls_options);
LABEL_12:

          goto LABEL_13;
        }
        __nwlog_obj();
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136446210;
        v50 = "nw_proxy_hop_set_tls_options";
        v20 = (char *)_os_log_send_and_compose_impl();

        type = OS_LOG_TYPE_ERROR;
        v47 = 0;
        if (__nwlog_fault(v20, &type, &v47))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            v21 = objc_claimAutoreleasedReturnValue();
            v22 = type;
            if (os_log_type_enabled(v21, type))
            {
              *(_DWORD *)buf = 136446210;
              v50 = "nw_proxy_hop_set_tls_options";
              _os_log_impl(&dword_182FBE000, v21, v22, "%{public}s called with null hop", buf, 0xCu);
            }
          }
          else if (v47)
          {
            backtrace_string = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            v21 = objc_claimAutoreleasedReturnValue();
            v27 = type;
            v28 = os_log_type_enabled(v21, type);
            if (backtrace_string)
            {
              if (v28)
              {
                *(_DWORD *)buf = 136446466;
                v50 = "nw_proxy_hop_set_tls_options";
                v51 = 2082;
                v52 = backtrace_string;
                _os_log_impl(&dword_182FBE000, v21, v27, "%{public}s called with null hop, dumping backtrace:%{public}s", buf, 0x16u);
              }

              free(backtrace_string);
              goto LABEL_69;
            }
            if (v28)
            {
              *(_DWORD *)buf = 136446210;
              v50 = "nw_proxy_hop_set_tls_options";
              _os_log_impl(&dword_182FBE000, v21, v27, "%{public}s called with null hop, no backtrace", buf, 0xCu);
            }
          }
          else
          {
            __nwlog_obj();
            v21 = objc_claimAutoreleasedReturnValue();
            v41 = type;
            if (os_log_type_enabled(v21, type))
            {
              *(_DWORD *)buf = 136446210;
              v50 = "nw_proxy_hop_set_tls_options";
              _os_log_impl(&dword_182FBE000, v21, v41, "%{public}s called with null hop, backtrace limit exceeded", buf, 0xCu);
            }
          }

        }
LABEL_69:
        if (v20)
          free(v20);
        goto LABEL_12;
      }
      __nwlog_obj();
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      v50 = "nw_proxy_hop_set_fallback_endpoint";
      v30 = (char *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v47 = 0;
      if (__nwlog_fault(v30, &type, &v47))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v31 = objc_claimAutoreleasedReturnValue();
          v32 = type;
          if (os_log_type_enabled(v31, type))
          {
            *(_DWORD *)buf = 136446210;
            v50 = "nw_proxy_hop_set_fallback_endpoint";
            _os_log_impl(&dword_182FBE000, v31, v32, "%{public}s called with null hop", buf, 0xCu);
          }
        }
        else if (v47)
        {
          v37 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v31 = objc_claimAutoreleasedReturnValue();
          v38 = type;
          v39 = os_log_type_enabled(v31, type);
          if (v37)
          {
            if (v39)
            {
              *(_DWORD *)buf = 136446466;
              v50 = "nw_proxy_hop_set_fallback_endpoint";
              v51 = 2082;
              v52 = v37;
              _os_log_impl(&dword_182FBE000, v31, v38, "%{public}s called with null hop, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(v37);
            goto LABEL_80;
          }
          if (v39)
          {
            *(_DWORD *)buf = 136446210;
            v50 = "nw_proxy_hop_set_fallback_endpoint";
            _os_log_impl(&dword_182FBE000, v31, v38, "%{public}s called with null hop, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          __nwlog_obj();
          v31 = objc_claimAutoreleasedReturnValue();
          v45 = type;
          if (os_log_type_enabled(v31, type))
          {
            *(_DWORD *)buf = 136446210;
            v50 = "nw_proxy_hop_set_fallback_endpoint";
            _os_log_impl(&dword_182FBE000, v31, v45, "%{public}s called with null hop, backtrace limit exceeded", buf, 0xCu);
          }
        }

      }
LABEL_80:
      if (v30)
        free(v30);
      goto LABEL_6;
    }
    v10 = nw_proxy_hop_create_masque((void *)v6);
    nw_proxy_hop_set_masque_version(v10, 2);
    v11 = v10;
    masque = v11;
    if (v11)
    {
      *((_BYTE *)v11 + 80) |= 0x20u;
      goto LABEL_9;
    }
    __nwlog_obj();
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v50 = "nw_proxy_hop_set_fallback_only";
    v34 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v47 = 0;
    if (__nwlog_fault(v34, &type, &v47))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v35 = objc_claimAutoreleasedReturnValue();
        v36 = type;
        if (os_log_type_enabled(v35, type))
        {
          *(_DWORD *)buf = 136446210;
          v50 = "nw_proxy_hop_set_fallback_only";
          _os_log_impl(&dword_182FBE000, v35, v36, "%{public}s called with null hop", buf, 0xCu);
        }
      }
      else if (v47)
      {
        v42 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v35 = objc_claimAutoreleasedReturnValue();
        v43 = type;
        v44 = os_log_type_enabled(v35, type);
        if (v42)
        {
          if (v44)
          {
            *(_DWORD *)buf = 136446466;
            v50 = "nw_proxy_hop_set_fallback_only";
            v51 = 2082;
            v52 = v42;
            _os_log_impl(&dword_182FBE000, v35, v43, "%{public}s called with null hop, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v42);
          goto LABEL_85;
        }
        if (v44)
        {
          *(_DWORD *)buf = 136446210;
          v50 = "nw_proxy_hop_set_fallback_only";
          _os_log_impl(&dword_182FBE000, v35, v43, "%{public}s called with null hop, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v35 = objc_claimAutoreleasedReturnValue();
        v46 = type;
        if (os_log_type_enabled(v35, type))
        {
          *(_DWORD *)buf = 136446210;
          v50 = "nw_proxy_hop_set_fallback_only";
          _os_log_impl(&dword_182FBE000, v35, v46, "%{public}s called with null hop, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_85:
    if (v34)
      free(v34);
    goto LABEL_9;
  }
  __nwlog_obj();
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v50 = "nw_relay_hop_create";
  v16 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v47 = 0;
  if (__nwlog_fault(v16, &type, &v47))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v17 = objc_claimAutoreleasedReturnValue();
      v18 = type;
      if (os_log_type_enabled(v17, type))
      {
        *(_DWORD *)buf = 136446210;
        v50 = "nw_relay_hop_create";
        _os_log_impl(&dword_182FBE000, v17, v18, "%{public}s called with null (http3_relay_endpoint || http2_relay_endpoint)", buf, 0xCu);
      }
    }
    else if (v47)
    {
      v23 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v17 = objc_claimAutoreleasedReturnValue();
      v24 = type;
      v25 = os_log_type_enabled(v17, type);
      if (v23)
      {
        if (v25)
        {
          *(_DWORD *)buf = 136446466;
          v50 = "nw_relay_hop_create";
          v51 = 2082;
          v52 = v23;
          _os_log_impl(&dword_182FBE000, v17, v24, "%{public}s called with null (http3_relay_endpoint || http2_relay_endpoint), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v23);
        goto LABEL_63;
      }
      if (v25)
      {
        *(_DWORD *)buf = 136446210;
        v50 = "nw_relay_hop_create";
        _os_log_impl(&dword_182FBE000, v17, v24, "%{public}s called with null (http3_relay_endpoint || http2_relay_endpoint), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v17 = objc_claimAutoreleasedReturnValue();
      v40 = type;
      if (os_log_type_enabled(v17, type))
      {
        *(_DWORD *)buf = 136446210;
        v50 = "nw_relay_hop_create";
        _os_log_impl(&dword_182FBE000, v17, v40, "%{public}s called with null (http3_relay_endpoint || http2_relay_endpoint), backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_63:
  if (v16)
    free(v16);
  v12 = 0;
LABEL_13:

  return v12;
}

void sub_183735BAC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void nw_relay_hop_add_additional_http_header_field(nw_relay_hop_t relay_hop, const char *field_name, const char *field_value)
{
  NSObject *v5;
  NSObject *v6;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  char *backtrace_string;
  os_log_type_t v12;
  _BOOL4 v13;
  os_log_type_t v14;
  char v15;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v5 = relay_hop;
  v6 = v5;
  if (v5)
  {
    nw_proxy_hop_add_extra_header(v5, (uint64_t)field_name, (uint64_t)field_value);
    goto LABEL_3;
  }
  __nwlog_obj();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v18 = "nw_relay_hop_add_additional_http_header_field";
  v8 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_relay_hop_add_additional_http_header_field";
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null proxy_hop", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          v18 = "nw_relay_hop_add_additional_http_header_field";
          v19 = 2082;
          v20 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null proxy_hop, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_relay_hop_add_additional_http_header_field";
        _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null proxy_hop, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_relay_hop_add_additional_http_header_field";
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null proxy_hop, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v8)
    free(v8);
LABEL_3:

}

nw_proxy_config_t nw_proxy_config_create_relay(nw_relay_hop_t first_hop, nw_relay_hop_t second_hop)
{
  NSObject *v3;
  NSObject *v4;
  NSObject *v5;
  char isa;
  _BOOL8 v7;
  NSObject *v8;
  char v9;
  id v10;
  _BOOL4 v11;
  NWConcrete_nw_proxy_config *privacy_proxy_internal;
  id *v13;
  id v14;
  id *v15;
  id v16;
  NSObject *v17;
  char v18;
  id *v19;
  id v20;
  NSObject *v21;
  NWConcrete_nw_proxy_config *fallback_privacy_proxy;
  NWConcrete_nw_proxy_config *v23;
  void *v25;
  char *v26;
  NSObject *v27;
  os_log_type_t v28;
  char *backtrace_string;
  os_log_type_t v30;
  _BOOL4 v31;
  os_log_type_t v32;
  char v33;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v36;
  __int16 v37;
  char *v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v3 = first_hop;
  v4 = second_hop;
  if (v3)
  {
    v5 = v3;
    isa = (char)v5[10].isa;

    v7 = nw_array_create();
    nw_array_append(v7, v5);
    if ((isa & 0x20) == 0)
    {
      if (!v4)
        goto LABEL_6;
      v8 = v4;
      v9 = (char)v8[10].isa;

      if ((v9 & 0x20) == 0)
      {
        nw_array_append(v7, v8);
LABEL_6:
        v10 = (id)v7;
        v11 = networkd_settings_get_BOOL((const char *)nw_setting_disable_swift_tls_privacy_proxy);
        privacy_proxy_internal = nw_proxy_config_create_privacy_proxy_internal(v10, !v11);

        nw_proxy_config_set_is_privacy_proxy(privacy_proxy_internal, 0, 0);
        *((_BYTE *)privacy_proxy_internal + 170) |= 0xCu;
        *((_BYTE *)privacy_proxy_internal + 171) |= 0x80u;
        v13 = v5;
        v14 = v13[4];

        if (v14)
        {
          if (v4)
          {
            v15 = v4;
            v16 = v15[4];

            if (!v16)
              goto LABEL_20;
          }
          else
          {

          }
          fallback_privacy_proxy = nw_proxy_config_create_fallback_privacy_proxy(v10);
          nw_proxy_config_set_is_privacy_proxy(fallback_privacy_proxy, 0, 0);
          *((_BYTE *)fallback_privacy_proxy + 170) |= 0xCu;
          *((_BYTE *)fallback_privacy_proxy + 171) |= 0x80u;
          privacy_proxy_internal = privacy_proxy_internal;
          v23 = fallback_privacy_proxy;
          objc_storeStrong((id *)&privacy_proxy_internal->fallback_config, fallback_privacy_proxy);

        }
LABEL_20:

        goto LABEL_21;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v21 = (id)gLogObj;
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446210;
        v36 = "nw_proxy_config_create_relay";
        _os_log_impl(&dword_182FBE000, v21, OS_LOG_TYPE_ERROR, "%{public}s Second hop proxy does not support HTTP/3", buf, 0xCu);
      }
LABEL_17:

      privacy_proxy_internal = 0;
      goto LABEL_20;
    }
    if (v4)
    {
      v17 = v4;
      v18 = (char)v17[10].isa;

      if ((v18 & 0x20) == 0)
      {
        v19 = v17;
        v20 = v19[4];

        if (!v20)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v21 = (id)gLogObj;
          if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446210;
            v36 = "nw_proxy_config_create_relay";
            _os_log_impl(&dword_182FBE000, v21, OS_LOG_TYPE_ERROR, "%{public}s Second hop proxy does not support HTTP/2 fallback", buf, 0xCu);
          }
          goto LABEL_17;
        }
      }
      nw_array_append(v7, v17);
    }
    privacy_proxy_internal = nw_proxy_config_create_fallback_privacy_proxy((void *)v7);
    nw_proxy_config_set_is_privacy_proxy(privacy_proxy_internal, 0, 0);
    *((_BYTE *)privacy_proxy_internal + 170) |= 0xCu;
    *((_BYTE *)privacy_proxy_internal + 171) |= 0x80u;
    goto LABEL_20;
  }
  __nwlog_obj();
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v36 = "nw_proxy_config_create_relay";
  v26 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v33 = 0;
  if (__nwlog_fault(v26, &type, &v33))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v27 = objc_claimAutoreleasedReturnValue();
      v28 = type;
      if (os_log_type_enabled(v27, type))
      {
        *(_DWORD *)buf = 136446210;
        v36 = "nw_proxy_config_create_relay";
        _os_log_impl(&dword_182FBE000, v27, v28, "%{public}s called with null first_hop", buf, 0xCu);
      }
    }
    else if (v33)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v27 = objc_claimAutoreleasedReturnValue();
      v30 = type;
      v31 = os_log_type_enabled(v27, type);
      if (backtrace_string)
      {
        if (v31)
        {
          *(_DWORD *)buf = 136446466;
          v36 = "nw_proxy_config_create_relay";
          v37 = 2082;
          v38 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v27, v30, "%{public}s called with null first_hop, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_41;
      }
      if (v31)
      {
        *(_DWORD *)buf = 136446210;
        v36 = "nw_proxy_config_create_relay";
        _os_log_impl(&dword_182FBE000, v27, v30, "%{public}s called with null first_hop, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v27 = objc_claimAutoreleasedReturnValue();
      v32 = type;
      if (os_log_type_enabled(v27, type))
      {
        *(_DWORD *)buf = 136446210;
        v36 = "nw_proxy_config_create_relay";
        _os_log_impl(&dword_182FBE000, v27, v32, "%{public}s called with null first_hop, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_41:
  if (v26)
    free(v26);
  privacy_proxy_internal = 0;
LABEL_21:

  return &privacy_proxy_internal->super;
}

void sub_1837363B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

nw_proxy_config_t nw_proxy_config_create_oblivious_http(nw_relay_hop_t relay, const char *relay_resource_path, const uint8_t *gateway_key_config, size_t gateway_key_config_length)
{
  NSObject *v7;
  NWConcrete_nw_proxy_hop *oblivious_http;
  NSObject *v9;
  char isa;
  _BOOL8 v11;
  id v12;
  _BOOL4 v13;
  NWConcrete_nw_proxy_config *fallback_privacy_proxy;
  id *v15;
  id v16;
  NWConcrete_nw_proxy_config *v17;
  id *v18;
  NWConcrete_nw_proxy_config *v19;
  void *v21;
  char *v22;
  NSObject *v23;
  os_log_type_t v24;
  void *v25;
  os_log_type_t v26;
  void *v27;
  os_log_type_t v28;
  void *v29;
  os_log_type_t v30;
  void *v31;
  char *v32;
  NSObject *v33;
  os_log_type_t v34;
  char *backtrace_string;
  os_log_type_t v36;
  _BOOL4 v37;
  os_log_type_t v38;
  _BOOL4 v39;
  os_log_type_t v40;
  _BOOL4 v41;
  char *v42;
  os_log_type_t v43;
  _BOOL4 v44;
  char *v45;
  os_log_type_t v46;
  _BOOL4 v47;
  os_log_type_t v48;
  os_log_type_t v49;
  os_log_type_t v50;
  os_log_type_t v51;
  os_log_type_t v52;
  char v53;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v56;
  __int16 v57;
  char *v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  v7 = relay;
  if (!v7)
  {
    __nwlog_obj();
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v56 = "nw_proxy_config_create_oblivious_http";
    v22 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v53 = 0;
    if (!__nwlog_fault(v22, &type, &v53))
      goto LABEL_91;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v23 = objc_claimAutoreleasedReturnValue();
      v24 = type;
      if (os_log_type_enabled(v23, type))
      {
        *(_DWORD *)buf = 136446210;
        v56 = "nw_proxy_config_create_oblivious_http";
        _os_log_impl(&dword_182FBE000, v23, v24, "%{public}s called with null relay", buf, 0xCu);
      }
      goto LABEL_90;
    }
    if (!v53)
    {
      __nwlog_obj();
      v23 = objc_claimAutoreleasedReturnValue();
      v48 = type;
      if (os_log_type_enabled(v23, type))
      {
        *(_DWORD *)buf = 136446210;
        v56 = "nw_proxy_config_create_oblivious_http";
        _os_log_impl(&dword_182FBE000, v23, v48, "%{public}s called with null relay, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_90;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v23 = objc_claimAutoreleasedReturnValue();
    v36 = type;
    v37 = os_log_type_enabled(v23, type);
    if (!backtrace_string)
    {
      if (v37)
      {
        *(_DWORD *)buf = 136446210;
        v56 = "nw_proxy_config_create_oblivious_http";
        _os_log_impl(&dword_182FBE000, v23, v36, "%{public}s called with null relay, no backtrace", buf, 0xCu);
      }
      goto LABEL_90;
    }
    if (v37)
    {
      *(_DWORD *)buf = 136446466;
      v56 = "nw_proxy_config_create_oblivious_http";
      v57 = 2082;
      v58 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v23, v36, "%{public}s called with null relay, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_52;
  }
  if (!relay_resource_path)
  {
    __nwlog_obj();
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v56 = "nw_proxy_config_create_oblivious_http";
    v22 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v53 = 0;
    if (!__nwlog_fault(v22, &type, &v53))
      goto LABEL_91;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v23 = objc_claimAutoreleasedReturnValue();
      v26 = type;
      if (os_log_type_enabled(v23, type))
      {
        *(_DWORD *)buf = 136446210;
        v56 = "nw_proxy_config_create_oblivious_http";
        _os_log_impl(&dword_182FBE000, v23, v26, "%{public}s called with null relay_resource_path", buf, 0xCu);
      }
      goto LABEL_90;
    }
    if (!v53)
    {
      __nwlog_obj();
      v23 = objc_claimAutoreleasedReturnValue();
      v49 = type;
      if (os_log_type_enabled(v23, type))
      {
        *(_DWORD *)buf = 136446210;
        v56 = "nw_proxy_config_create_oblivious_http";
        _os_log_impl(&dword_182FBE000, v23, v49, "%{public}s called with null relay_resource_path, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_90;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v23 = objc_claimAutoreleasedReturnValue();
    v38 = type;
    v39 = os_log_type_enabled(v23, type);
    if (!backtrace_string)
    {
      if (v39)
      {
        *(_DWORD *)buf = 136446210;
        v56 = "nw_proxy_config_create_oblivious_http";
        _os_log_impl(&dword_182FBE000, v23, v38, "%{public}s called with null relay_resource_path, no backtrace", buf, 0xCu);
      }
      goto LABEL_90;
    }
    if (v39)
    {
      *(_DWORD *)buf = 136446466;
      v56 = "nw_proxy_config_create_oblivious_http";
      v57 = 2082;
      v58 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v23, v38, "%{public}s called with null relay_resource_path, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_52;
  }
  if (!gateway_key_config)
  {
    __nwlog_obj();
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v56 = "nw_proxy_config_create_oblivious_http";
    v22 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v53 = 0;
    if (!__nwlog_fault(v22, &type, &v53))
      goto LABEL_91;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v23 = objc_claimAutoreleasedReturnValue();
      v28 = type;
      if (os_log_type_enabled(v23, type))
      {
        *(_DWORD *)buf = 136446210;
        v56 = "nw_proxy_config_create_oblivious_http";
        _os_log_impl(&dword_182FBE000, v23, v28, "%{public}s called with null gateway_key_config", buf, 0xCu);
      }
      goto LABEL_90;
    }
    if (!v53)
    {
      __nwlog_obj();
      v23 = objc_claimAutoreleasedReturnValue();
      v50 = type;
      if (os_log_type_enabled(v23, type))
      {
        *(_DWORD *)buf = 136446210;
        v56 = "nw_proxy_config_create_oblivious_http";
        _os_log_impl(&dword_182FBE000, v23, v50, "%{public}s called with null gateway_key_config, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_90;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v23 = objc_claimAutoreleasedReturnValue();
    v40 = type;
    v41 = os_log_type_enabled(v23, type);
    if (!backtrace_string)
    {
      if (v41)
      {
        *(_DWORD *)buf = 136446210;
        v56 = "nw_proxy_config_create_oblivious_http";
        _os_log_impl(&dword_182FBE000, v23, v40, "%{public}s called with null gateway_key_config, no backtrace", buf, 0xCu);
      }
      goto LABEL_90;
    }
    if (v41)
    {
      *(_DWORD *)buf = 136446466;
      v56 = "nw_proxy_config_create_oblivious_http";
      v57 = 2082;
      v58 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v23, v40, "%{public}s called with null gateway_key_config, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_52:

    free(backtrace_string);
    if (!v22)
      goto LABEL_93;
    goto LABEL_92;
  }
  if (!gateway_key_config_length)
  {
    __nwlog_obj();
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v56 = "nw_proxy_config_create_oblivious_http";
    v22 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v53 = 0;
    if (!__nwlog_fault(v22, &type, &v53))
      goto LABEL_91;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v23 = objc_claimAutoreleasedReturnValue();
      v30 = type;
      if (os_log_type_enabled(v23, type))
      {
        *(_DWORD *)buf = 136446210;
        v56 = "nw_proxy_config_create_oblivious_http";
        _os_log_impl(&dword_182FBE000, v23, v30, "%{public}s called with null gateway_key_config_length", buf, 0xCu);
      }
    }
    else if (v53)
    {
      v42 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v23 = objc_claimAutoreleasedReturnValue();
      v43 = type;
      v44 = os_log_type_enabled(v23, type);
      if (v42)
      {
        if (v44)
        {
          *(_DWORD *)buf = 136446466;
          v56 = "nw_proxy_config_create_oblivious_http";
          v57 = 2082;
          v58 = v42;
          _os_log_impl(&dword_182FBE000, v23, v43, "%{public}s called with null gateway_key_config_length, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v42);
LABEL_91:
        if (!v22)
        {
LABEL_93:
          fallback_privacy_proxy = 0;
          goto LABEL_12;
        }
LABEL_92:
        free(v22);
        goto LABEL_93;
      }
      if (v44)
      {
        *(_DWORD *)buf = 136446210;
        v56 = "nw_proxy_config_create_oblivious_http";
        _os_log_impl(&dword_182FBE000, v23, v43, "%{public}s called with null gateway_key_config_length, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v23 = objc_claimAutoreleasedReturnValue();
      v51 = type;
      if (os_log_type_enabled(v23, type))
      {
        *(_DWORD *)buf = 136446210;
        v56 = "nw_proxy_config_create_oblivious_http";
        _os_log_impl(&dword_182FBE000, v23, v51, "%{public}s called with null gateway_key_config_length, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_90:

    goto LABEL_91;
  }
  oblivious_http = nw_proxy_hop_create_oblivious_http((uint64_t)gateway_key_config, gateway_key_config_length, (uint64_t)relay_resource_path);
  if (!oblivious_http)
  {
    __nwlog_obj();
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v56 = "nw_proxy_config_create_oblivious_http";
    v32 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v53 = 0;
    if (__nwlog_fault(v32, &type, &v53))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v33 = objc_claimAutoreleasedReturnValue();
        v34 = type;
        if (os_log_type_enabled(v33, type))
        {
          *(_DWORD *)buf = 136446210;
          v56 = "nw_proxy_config_create_oblivious_http";
          _os_log_impl(&dword_182FBE000, v33, v34, "%{public}s called with null oblivious_hop", buf, 0xCu);
        }
      }
      else if (v53)
      {
        v45 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v33 = objc_claimAutoreleasedReturnValue();
        v46 = type;
        v47 = os_log_type_enabled(v33, type);
        if (v45)
        {
          if (v47)
          {
            *(_DWORD *)buf = 136446466;
            v56 = "nw_proxy_config_create_oblivious_http";
            v57 = 2082;
            v58 = v45;
            _os_log_impl(&dword_182FBE000, v33, v46, "%{public}s called with null oblivious_hop, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v45);
          goto LABEL_97;
        }
        if (v47)
        {
          *(_DWORD *)buf = 136446210;
          v56 = "nw_proxy_config_create_oblivious_http";
          _os_log_impl(&dword_182FBE000, v33, v46, "%{public}s called with null oblivious_hop, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v33 = objc_claimAutoreleasedReturnValue();
        v52 = type;
        if (os_log_type_enabled(v33, type))
        {
          *(_DWORD *)buf = 136446210;
          v56 = "nw_proxy_config_create_oblivious_http";
          _os_log_impl(&dword_182FBE000, v33, v52, "%{public}s called with null oblivious_hop, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_97:
    if (v32)
      free(v32);
    fallback_privacy_proxy = 0;
    goto LABEL_11;
  }
  v9 = v7;
  isa = (char)v9[10].isa;

  v11 = nw_array_create();
  nw_array_append(v11, v9);
  nw_array_append(v11, oblivious_http);
  if ((isa & 0x20) != 0)
  {
    fallback_privacy_proxy = nw_proxy_config_create_fallback_privacy_proxy((void *)v11);
    nw_proxy_config_set_is_privacy_proxy(fallback_privacy_proxy, 0, 0);
    *((_BYTE *)fallback_privacy_proxy + 170) |= 0xCu;
    *((_BYTE *)fallback_privacy_proxy + 171) |= 0x80u;
    *((_BYTE *)fallback_privacy_proxy + 172) |= 1u;

  }
  else
  {
    v12 = (id)v11;
    v13 = networkd_settings_get_BOOL((const char *)nw_setting_disable_swift_tls_privacy_proxy);
    fallback_privacy_proxy = nw_proxy_config_create_privacy_proxy_internal(v12, !v13);

    nw_proxy_config_set_is_privacy_proxy(fallback_privacy_proxy, 0, 0);
    *((_BYTE *)fallback_privacy_proxy + 170) |= 0xCu;
    *((_BYTE *)fallback_privacy_proxy + 171) |= 0x80u;
    *((_BYTE *)fallback_privacy_proxy + 172) |= 1u;
    v15 = v9;
    v16 = v15[4];

    if (v16)
    {
      v17 = nw_proxy_config_create_fallback_privacy_proxy(v12);
      nw_proxy_config_set_is_privacy_proxy(v17, 0, 0);
      *((_BYTE *)v17 + 170) |= 0xCu;
      *((_BYTE *)v17 + 171) |= 0x80u;
      *((_BYTE *)v17 + 172) |= 1u;
      v18 = fallback_privacy_proxy;
      v19 = v17;
      objc_storeStrong(v18 + 11, v17);

    }
  }
LABEL_11:

LABEL_12:
  return &fallback_privacy_proxy->super;
}

void sub_183736FF4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

nw_proxy_config_t nw_proxy_config_create_socksv5(nw_endpoint_t proxy_endpoint)
{
  NSObject *v1;
  NSObject *v2;
  nw_protocol_options_t options;
  NWConcrete_nw_proxy_config *v4;
  NWConcrete_nw_proxy_config *v5;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  void *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  char *v15;
  os_log_type_t v16;
  _BOOL4 v17;
  char *backtrace_string;
  os_log_type_t v19;
  _BOOL4 v20;
  os_log_type_t v21;
  os_log_type_t v22;
  char v23;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  char *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v1 = proxy_endpoint;
  if (v1)
  {
    if (nw_protocol_socksv5_copy_definition::onceToken != -1)
      dispatch_once(&nw_protocol_socksv5_copy_definition::onceToken, &__block_literal_global_83487);
    if (nw_protocol_socksv5_copy_definition::definition)
      v2 = os_retain((void *)nw_protocol_socksv5_copy_definition::definition);
    else
      v2 = 0;
    options = nw_framer_create_options(v2);
    v4 = nw_proxy_config_create(v1, options);

    if (v4)
    {
      v4->type = 3002;
      *((_BYTE *)v4 + 170) |= 8u;
      v5 = v4;
LABEL_9:

      goto LABEL_10;
    }
    __nwlog_obj();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v26 = "nw_proxy_config_create_socksv5";
    v12 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (__nwlog_fault(v12, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v13 = objc_claimAutoreleasedReturnValue();
        v14 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)buf = 136446210;
          v26 = "nw_proxy_config_create_socksv5";
          _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s called with null config", buf, 0xCu);
        }
      }
      else if (v23)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v13 = objc_claimAutoreleasedReturnValue();
        v19 = type;
        v20 = os_log_type_enabled(v13, type);
        if (backtrace_string)
        {
          if (v20)
          {
            *(_DWORD *)buf = 136446466;
            v26 = "nw_proxy_config_create_socksv5";
            v27 = 2082;
            v28 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v13, v19, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_46;
        }
        if (v20)
        {
          *(_DWORD *)buf = 136446210;
          v26 = "nw_proxy_config_create_socksv5";
          _os_log_impl(&dword_182FBE000, v13, v19, "%{public}s called with null config, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v13 = objc_claimAutoreleasedReturnValue();
        v22 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)buf = 136446210;
          v26 = "nw_proxy_config_create_socksv5";
          _os_log_impl(&dword_182FBE000, v13, v22, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_46:
    if (v12)
      free(v12);
    goto LABEL_9;
  }
  __nwlog_obj();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v26 = "nw_proxy_config_create_socksv5";
  v8 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v23 = 0;
  if (__nwlog_fault(v8, &type, &v23))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_proxy_config_create_socksv5";
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null proxy_endpoint", buf, 0xCu);
      }
    }
    else if (v23)
    {
      v15 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      v17 = os_log_type_enabled(v9, type);
      if (v15)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          v26 = "nw_proxy_config_create_socksv5";
          v27 = 2082;
          v28 = v15;
          _os_log_impl(&dword_182FBE000, v9, v16, "%{public}s called with null proxy_endpoint, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v15);
        goto LABEL_40;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_proxy_config_create_socksv5";
        _os_log_impl(&dword_182FBE000, v9, v16, "%{public}s called with null proxy_endpoint, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v21 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_proxy_config_create_socksv5";
        _os_log_impl(&dword_182FBE000, v9, v21, "%{public}s called with null proxy_endpoint, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_40:
  if (v8)
    free(v8);
  v4 = 0;
LABEL_10:

  return &v4->super;
}

void sub_18373754C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

nw_proxy_config_t nw_proxy_config_create_http_connect(nw_endpoint_t proxy_endpoint, nw_protocol_options_t proxy_tls_options)
{
  NSObject *v3;
  NSObject *v4;
  NWConcrete_nw_protocol_stack *v5;
  id v6;
  NWConcrete_nw_protocol_options *options;
  int v8;
  NWConcrete_nw_proxy_config *v9;
  NWConcrete_nw_proxy_config *v10;
  char v11;
  NWConcrete_nw_proxy_config *v12;
  void *v14;
  char *v15;
  NSObject *v16;
  os_log_type_t v17;
  void *v18;
  char *v19;
  NSObject *v20;
  os_log_type_t v21;
  char *v22;
  os_log_type_t v23;
  _BOOL4 v24;
  char *backtrace_string;
  os_log_type_t v26;
  _BOOL4 v27;
  os_log_type_t v28;
  os_log_type_t v29;
  char v30;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v33;
  __int16 v34;
  char *v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v3 = proxy_endpoint;
  v4 = proxy_tls_options;
  if (v3)
  {
    v5 = objc_alloc_init(NWConcrete_nw_protocol_stack);
    if (nw_proxy_copy_http_connect_definition::onceToken != -1)
      dispatch_once(&nw_proxy_copy_http_connect_definition::onceToken, &__block_literal_global_92);
    v6 = (id)nw_proxy_copy_http_connect_definition::proxy_definition;
    options = nw_proxy_create_options(v6);

    nw_protocol_options_set_proxy_endpoint(options, v3, 0);
    nw_protocol_stack_append_application_protocol(v5, options);
    if (v4 && nw_protocol_options_is_tls(v4))
    {
      nw_protocol_stack_append_application_protocol(v5, v4);
      v8 = 4002;
    }
    else
    {
      v8 = 3004;
    }
    v9 = nw_proxy_config_create_with_stack(v3, v5);
    v10 = v9;
    if (v9)
    {
      v9->type = v8;
      *((_BYTE *)v9 + 170) |= 8u;
      if (nw_path_is_endpoint_localhost(v3))
        v11 = 0;
      else
        v11 = 0x80;
      *((_BYTE *)v10 + 171) = v11 & 0x80 | *((_BYTE *)v10 + 171) & 0x7F;
      v12 = v10;
LABEL_13:

      goto LABEL_14;
    }
    __nwlog_obj();
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v33 = "nw_proxy_config_create_http_connect";
    v19 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v30 = 0;
    if (__nwlog_fault(v19, &type, &v30))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v20 = objc_claimAutoreleasedReturnValue();
        v21 = type;
        if (os_log_type_enabled(v20, type))
        {
          *(_DWORD *)buf = 136446210;
          v33 = "nw_proxy_config_create_http_connect";
          _os_log_impl(&dword_182FBE000, v20, v21, "%{public}s called with null config", buf, 0xCu);
        }
      }
      else if (v30)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v20 = objc_claimAutoreleasedReturnValue();
        v26 = type;
        v27 = os_log_type_enabled(v20, type);
        if (backtrace_string)
        {
          if (v27)
          {
            *(_DWORD *)buf = 136446466;
            v33 = "nw_proxy_config_create_http_connect";
            v34 = 2082;
            v35 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v20, v26, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_50;
        }
        if (v27)
        {
          *(_DWORD *)buf = 136446210;
          v33 = "nw_proxy_config_create_http_connect";
          _os_log_impl(&dword_182FBE000, v20, v26, "%{public}s called with null config, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v20 = objc_claimAutoreleasedReturnValue();
        v29 = type;
        if (os_log_type_enabled(v20, type))
        {
          *(_DWORD *)buf = 136446210;
          v33 = "nw_proxy_config_create_http_connect";
          _os_log_impl(&dword_182FBE000, v20, v29, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_50:
    if (v19)
      free(v19);
    goto LABEL_13;
  }
  __nwlog_obj();
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v33 = "nw_proxy_config_create_http_connect";
  v15 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v30 = 0;
  if (__nwlog_fault(v15, &type, &v30))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v16 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)buf = 136446210;
        v33 = "nw_proxy_config_create_http_connect";
        _os_log_impl(&dword_182FBE000, v16, v17, "%{public}s called with null proxy_endpoint", buf, 0xCu);
      }
    }
    else if (v30)
    {
      v22 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v16 = objc_claimAutoreleasedReturnValue();
      v23 = type;
      v24 = os_log_type_enabled(v16, type);
      if (v22)
      {
        if (v24)
        {
          *(_DWORD *)buf = 136446466;
          v33 = "nw_proxy_config_create_http_connect";
          v34 = 2082;
          v35 = v22;
          _os_log_impl(&dword_182FBE000, v16, v23, "%{public}s called with null proxy_endpoint, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v22);
        goto LABEL_44;
      }
      if (v24)
      {
        *(_DWORD *)buf = 136446210;
        v33 = "nw_proxy_config_create_http_connect";
        _os_log_impl(&dword_182FBE000, v16, v23, "%{public}s called with null proxy_endpoint, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v16 = objc_claimAutoreleasedReturnValue();
      v28 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)buf = 136446210;
        v33 = "nw_proxy_config_create_http_connect";
        _os_log_impl(&dword_182FBE000, v16, v28, "%{public}s called with null proxy_endpoint, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_44:
  if (v15)
    free(v15);
  v10 = 0;
LABEL_14:

  return &v10->super;
}

void sub_183737B10(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_183737B54()
{
  JUMPOUT(0x183737B44);
}

void nw_proxy_config_set_failover_allowed(nw_proxy_config_t proxy_config, BOOL failover_allowed)
{
  _BOOL4 v2;
  nw_proxy_config_t v3;
  nw_proxy_config_t v4;
  char v5;
  NSObject *isa;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  char *backtrace_string;
  os_log_type_t v12;
  _BOOL4 v13;
  os_log_type_t v14;
  char v15;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  char *v20;
  uint64_t v21;

  v2 = failover_allowed;
  v21 = *MEMORY[0x1E0C80C00];
  v3 = proxy_config;
  v4 = v3;
  if (v3)
  {
    if (v2)
      v5 = 0;
    else
      v5 = 8;
    BYTE2(v3[21].isa) = BYTE2(v3[21].isa) & 0xF7 | v5;
    isa = v3[11].isa;
    if (isa)
      nw_proxy_config_set_failover_allowed(isa, v2);
    goto LABEL_7;
  }
  __nwlog_obj();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v18 = "nw_proxy_config_set_failover_allowed";
  v8 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_proxy_config_set_failover_allowed";
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null proxy_config", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          v18 = "nw_proxy_config_set_failover_allowed";
          v19 = 2082;
          v20 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null proxy_config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_24;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_proxy_config_set_failover_allowed";
        _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null proxy_config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_proxy_config_set_failover_allowed";
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null proxy_config, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_24:
  if (v8)
    free(v8);
LABEL_7:

}

void sub_183737E14(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL nw_proxy_config_get_failover_allowed(nw_proxy_config_t proxy_config)
{
  nw_proxy_config_t v1;
  nw_proxy_config_t v2;
  BOOL v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = proxy_config;
  v2 = v1;
  if (v1)
  {
    v3 = (BYTE2(v1[21].isa) & 8) == 0;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_proxy_config_get_failover_allowed";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_proxy_config_get_failover_allowed";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null proxy_config", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_proxy_config_get_failover_allowed";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null proxy_config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_proxy_config_get_failover_allowed";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null proxy_config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_proxy_config_get_failover_allowed";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null proxy_config, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

BOOL nw_protocol_http1_accept(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 result;
  NSObject *v10;
  int v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  const char *v15;
  char *v16;
  NSObject *v17;
  os_log_type_t v18;
  const char *v19;
  char *backtrace_string;
  _BOOL4 v21;
  char *v22;
  _BOOL4 v23;
  const char *v24;
  char *v25;
  _BOOL4 v26;
  const char *v27;
  _BOOL4 v28;
  NSObject *v30;
  int v31;
  _BOOL4 v32;
  _BOOL4 v33;
  _BOOL4 v34;
  char v35;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v38;
  __int16 v39;
  char *v40;
  __int16 v41;
  const char *v42;
  __int16 v43;
  int v44;
  __int16 v45;
  uint64_t v46;
  __int16 v47;
  uint64_t v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v38 = "nw_http1_get_http1_protocol";
    v12 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v35 = 0;
    if (!__nwlog_fault(v12, &type, &v35))
      goto LABEL_98;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v13 = __nwlog_obj();
      v14 = type;
      if (!os_log_type_enabled(v13, type))
        goto LABEL_98;
      *(_DWORD *)buf = 136446210;
      v38 = "nw_http1_get_http1_protocol";
      v15 = "%{public}s called with null protocol";
    }
    else if (v35)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v13 = __nwlog_obj();
      v14 = type;
      v21 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v21)
        {
          *(_DWORD *)buf = 136446466;
          v38 = "nw_http1_get_http1_protocol";
          v39 = 2082;
          v40 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_98:
        if (!v12)
          goto LABEL_100;
LABEL_99:
        free(v12);
        goto LABEL_100;
      }
      if (!v21)
        goto LABEL_98;
      *(_DWORD *)buf = 136446210;
      v38 = "nw_http1_get_http1_protocol";
      v15 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      v13 = __nwlog_obj();
      v14 = type;
      if (!os_log_type_enabled(v13, type))
        goto LABEL_98;
      *(_DWORD *)buf = 136446210;
      v38 = "nw_http1_get_http1_protocol";
      v15 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    goto LABEL_97;
  }
  v3 = *(uint64_t **)(a1 + 40);
  if (!v3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v38 = "nw_http1_get_http1_protocol";
    v12 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v35 = 0;
    if (!__nwlog_fault(v12, &type, &v35))
      goto LABEL_98;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v35)
      {
        v13 = __nwlog_obj();
        v14 = type;
        if (!os_log_type_enabled(v13, type))
          goto LABEL_98;
        *(_DWORD *)buf = 136446210;
        v38 = "nw_http1_get_http1_protocol";
        v15 = "%{public}s called with null handle, backtrace limit exceeded";
        goto LABEL_97;
      }
      v22 = (char *)__nw_create_backtrace_string();
      v13 = __nwlog_obj();
      v14 = type;
      v23 = os_log_type_enabled(v13, type);
      if (!v22)
      {
        if (!v23)
          goto LABEL_98;
        *(_DWORD *)buf = 136446210;
        v38 = "nw_http1_get_http1_protocol";
        v15 = "%{public}s called with null handle, no backtrace";
        goto LABEL_97;
      }
      if (v23)
      {
        *(_DWORD *)buf = 136446466;
        v38 = "nw_http1_get_http1_protocol";
        v39 = 2082;
        v40 = v22;
        v24 = "%{public}s called with null handle, dumping backtrace:%{public}s";
LABEL_78:
        _os_log_impl(&dword_182FBE000, v13, v14, v24, buf, 0x16u);
      }
LABEL_79:
      free(v22);
      if (!v12)
        goto LABEL_100;
      goto LABEL_99;
    }
    v13 = __nwlog_obj();
    v14 = type;
    if (!os_log_type_enabled(v13, type))
      goto LABEL_98;
    *(_DWORD *)buf = 136446210;
    v38 = "nw_http1_get_http1_protocol";
    v15 = "%{public}s called with null handle";
LABEL_97:
    _os_log_impl(&dword_182FBE000, v13, v14, v15, buf, 0xCu);
    goto LABEL_98;
  }
  v5 = *((_DWORD *)v3 + 6);
  if (v5 == 1)
    goto LABEL_10;
  if (v5 != 2)
  {
    if (v5 != 3)
    {
LABEL_100:
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      *(_DWORD *)buf = 136446210;
      v38 = "nw_protocol_http1_accept";
      v16 = (char *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      v35 = 0;
      if (!__nwlog_fault(v16, &type, &v35))
        goto LABEL_115;
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v17 = gLogObj;
        v18 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type))
          goto LABEL_115;
        *(_DWORD *)buf = 136446210;
        v38 = "nw_protocol_http1_accept";
        v19 = "%{public}s called with null http1";
        goto LABEL_114;
      }
      if (!v35)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v17 = gLogObj;
        v18 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type))
          goto LABEL_115;
        *(_DWORD *)buf = 136446210;
        v38 = "nw_protocol_http1_accept";
        v19 = "%{public}s called with null http1, backtrace limit exceeded";
        goto LABEL_114;
      }
      v25 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v17 = gLogObj;
      v18 = type;
      v34 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (v25)
      {
        if (v34)
        {
          *(_DWORD *)buf = 136446466;
          v38 = "nw_protocol_http1_accept";
          v39 = 2082;
          v40 = v25;
          v27 = "%{public}s called with null http1, dumping backtrace:%{public}s";
          goto LABEL_108;
        }
        goto LABEL_109;
      }
      if (!v34)
        goto LABEL_115;
      *(_DWORD *)buf = 136446210;
      v38 = "nw_protocol_http1_accept";
      v19 = "%{public}s called with null http1, no backtrace";
      goto LABEL_114;
    }
    v6 = v3[2];
    if (v6)
    {
      v3 = (uint64_t *)(v6 + 480);
      goto LABEL_10;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v38 = "nw_http1_get_http1_protocol";
    v12 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v35 = 0;
    if (!__nwlog_fault(v12, &type, &v35))
      goto LABEL_98;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v13 = __nwlog_obj();
      v14 = type;
      if (!os_log_type_enabled(v13, type))
        goto LABEL_98;
      *(_DWORD *)buf = 136446210;
      v38 = "nw_http1_get_http1_protocol";
      v15 = "%{public}s called with null handle->http1_connection";
      goto LABEL_97;
    }
    if (!v35)
    {
      v13 = __nwlog_obj();
      v14 = type;
      if (!os_log_type_enabled(v13, type))
        goto LABEL_98;
      *(_DWORD *)buf = 136446210;
      v38 = "nw_http1_get_http1_protocol";
      v15 = "%{public}s called with null handle->http1_connection, backtrace limit exceeded";
      goto LABEL_97;
    }
    v22 = (char *)__nw_create_backtrace_string();
    v13 = __nwlog_obj();
    v14 = type;
    v32 = os_log_type_enabled(v13, type);
    if (!v22)
    {
      if (!v32)
        goto LABEL_98;
      *(_DWORD *)buf = 136446210;
      v38 = "nw_http1_get_http1_protocol";
      v15 = "%{public}s called with null handle->http1_connection, no backtrace";
      goto LABEL_97;
    }
    if (v32)
    {
      *(_DWORD *)buf = 136446466;
      v38 = "nw_http1_get_http1_protocol";
      v39 = 2082;
      v40 = v22;
      v24 = "%{public}s called with null handle->http1_connection, dumping backtrace:%{public}s";
      goto LABEL_78;
    }
    goto LABEL_79;
  }
  v7 = v3[1];
  if (!v7)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v38 = "nw_http1_get_http1_protocol";
    v12 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v35 = 0;
    if (!__nwlog_fault(v12, &type, &v35))
      goto LABEL_98;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v13 = __nwlog_obj();
      v14 = type;
      if (!os_log_type_enabled(v13, type))
        goto LABEL_98;
      *(_DWORD *)buf = 136446210;
      v38 = "nw_http1_get_http1_protocol";
      v15 = "%{public}s called with null handle->http1_stream";
      goto LABEL_97;
    }
    if (!v35)
    {
      v13 = __nwlog_obj();
      v14 = type;
      if (!os_log_type_enabled(v13, type))
        goto LABEL_98;
      *(_DWORD *)buf = 136446210;
      v38 = "nw_http1_get_http1_protocol";
      v15 = "%{public}s called with null handle->http1_stream, backtrace limit exceeded";
      goto LABEL_97;
    }
    v22 = (char *)__nw_create_backtrace_string();
    v13 = __nwlog_obj();
    v14 = type;
    v33 = os_log_type_enabled(v13, type);
    if (!v22)
    {
      if (!v33)
        goto LABEL_98;
      *(_DWORD *)buf = 136446210;
      v38 = "nw_http1_get_http1_protocol";
      v15 = "%{public}s called with null handle->http1_stream, no backtrace";
      goto LABEL_97;
    }
    if (v33)
    {
      *(_DWORD *)buf = 136446466;
      v38 = "nw_http1_get_http1_protocol";
      v39 = 2082;
      v40 = v22;
      v24 = "%{public}s called with null handle->http1_stream, dumping backtrace:%{public}s";
      goto LABEL_78;
    }
    goto LABEL_79;
  }
  v3 = (uint64_t *)(v7 + 248);
LABEL_10:
  v8 = *v3;
  if (!*v3)
    goto LABEL_100;
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v38 = "nw_protocol_http1_accept";
    v16 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v35 = 0;
    if (!__nwlog_fault(v16, &type, &v35))
      goto LABEL_115;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v35)
      {
        v17 = __nwlog_obj();
        v18 = type;
        if (!os_log_type_enabled(v17, type))
          goto LABEL_115;
        *(_DWORD *)buf = 136446210;
        v38 = "nw_protocol_http1_accept";
        v19 = "%{public}s called with null endpoint, backtrace limit exceeded";
        goto LABEL_114;
      }
      v25 = (char *)__nw_create_backtrace_string();
      v17 = __nwlog_obj();
      v18 = type;
      v26 = os_log_type_enabled(v17, type);
      if (!v25)
      {
        if (!v26)
          goto LABEL_115;
        *(_DWORD *)buf = 136446210;
        v38 = "nw_protocol_http1_accept";
        v19 = "%{public}s called with null endpoint, no backtrace";
        goto LABEL_114;
      }
      if (v26)
      {
        *(_DWORD *)buf = 136446466;
        v38 = "nw_protocol_http1_accept";
        v39 = 2082;
        v40 = v25;
        v27 = "%{public}s called with null endpoint, dumping backtrace:%{public}s";
LABEL_108:
        _os_log_impl(&dword_182FBE000, v17, v18, v27, buf, 0x16u);
      }
LABEL_109:
      free(v25);
      goto LABEL_115;
    }
    v17 = __nwlog_obj();
    v18 = type;
    if (!os_log_type_enabled(v17, type))
      goto LABEL_115;
    *(_DWORD *)buf = 136446210;
    v38 = "nw_protocol_http1_accept";
    v19 = "%{public}s called with null endpoint";
LABEL_114:
    _os_log_impl(&dword_182FBE000, v17, v18, v19, buf, 0xCu);
LABEL_115:
    if (v16)
      free(v16);
    return 0;
  }
  if (!a3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v38 = "nw_protocol_http1_accept";
    v16 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v35 = 0;
    if (!__nwlog_fault(v16, &type, &v35))
      goto LABEL_115;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v17 = __nwlog_obj();
      v18 = type;
      if (!os_log_type_enabled(v17, type))
        goto LABEL_115;
      *(_DWORD *)buf = 136446210;
      v38 = "nw_protocol_http1_accept";
      v19 = "%{public}s called with null parameters";
      goto LABEL_114;
    }
    if (!v35)
    {
      v17 = __nwlog_obj();
      v18 = type;
      if (!os_log_type_enabled(v17, type))
        goto LABEL_115;
      *(_DWORD *)buf = 136446210;
      v38 = "nw_protocol_http1_accept";
      v19 = "%{public}s called with null parameters, backtrace limit exceeded";
      goto LABEL_114;
    }
    v25 = (char *)__nw_create_backtrace_string();
    v17 = __nwlog_obj();
    v18 = type;
    v28 = os_log_type_enabled(v17, type);
    if (!v25)
    {
      if (!v28)
        goto LABEL_115;
      *(_DWORD *)buf = 136446210;
      v38 = "nw_protocol_http1_accept";
      v19 = "%{public}s called with null parameters, no backtrace";
      goto LABEL_114;
    }
    if (v28)
    {
      *(_DWORD *)buf = 136446466;
      v38 = "nw_protocol_http1_accept";
      v39 = 2082;
      v40 = v25;
      v27 = "%{public}s called with null parameters, dumping backtrace:%{public}s";
      goto LABEL_108;
    }
    goto LABEL_109;
  }
  if ((*(_BYTE *)(v8 + 376) & 8) != 0)
  {
    if (!(*(_BYTE *)(v8 + 158) & 1 | (gLogDatapath == 0)))
    {
      v10 = __nwlog_obj();
      result = os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG);
      if (!result)
        return result;
      v11 = *(_DWORD *)(v8 + 372);
      *(_DWORD *)buf = 136446978;
      v38 = "nw_protocol_http1_accept";
      v39 = 2082;
      v40 = (char *)(v8 + 74);
      v41 = 2080;
      v42 = " ";
      v43 = 1024;
      v44 = v11;
      _os_log_impl(&dword_182FBE000, v10, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> refusing accept because do not reuse is set", buf, 0x26u);
    }
    return 0;
  }
  if (!(*(_BYTE *)(v8 + 158) & 1 | (gLogDatapath == 0)))
  {
    v30 = __nwlog_obj();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
    {
      v31 = *(_DWORD *)(v8 + 372);
      *(_DWORD *)buf = 136447490;
      v38 = "nw_protocol_http1_accept";
      v39 = 2082;
      v40 = (char *)(v8 + 74);
      v41 = 2080;
      v42 = " ";
      v43 = 1024;
      v44 = v31;
      v45 = 2114;
      v46 = a2;
      v47 = 2114;
      v48 = a3;
      _os_log_impl(&dword_182FBE000, v30, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> accepting connection to %{public}@ with %{public}@", buf, 0x3Au);
    }
  }
  return 1;
}

BOOL nw_protocol_http1_create(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  char *v7;
  void *v8;
  char v9;
  void *v10;
  void *v11;
  char v12;
  void *v13;
  id *v14;
  id v15;
  _BOOL8 v16;
  _BOOL8 v17;
  char v18;
  void *v19;
  _DWORD *v20;
  int v21;
  char v22;
  id *metadata;
  char v24;
  void *v25;
  id *v26;
  id v27;
  NSObject *v28;
  int v29;
  const char *v30;
  BOOL v31;
  _BOOL8 result;
  char *v33;
  NSObject *v34;
  os_log_type_t v35;
  const char *v36;
  NSObject *v37;
  void *v38;
  char *backtrace_string;
  _BOOL4 v40;
  const char *v41;
  _BOOL4 v42;
  _BOOL4 v43;
  _QWORD aBlock[5];
  char v45;
  os_log_type_t type;
  _BYTE buf[24];
  uint64_t v48;
  __int16 v49;
  int v50;
  __int16 v51;
  const char *v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_http1_create";
    v33 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v45 = 0;
    if (!__nwlog_fault(v33, &type, &v45))
      goto LABEL_75;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v34 = __nwlog_obj();
      v35 = type;
      if (!os_log_type_enabled(v34, type))
        goto LABEL_75;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http1_create";
      v36 = "%{public}s called with null identifier";
LABEL_74:
      _os_log_impl(&dword_182FBE000, v34, v35, v36, buf, 0xCu);
      goto LABEL_75;
    }
    if (!v45)
    {
      v34 = __nwlog_obj();
      v35 = type;
      if (os_log_type_enabled(v34, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_http1_create";
        v36 = "%{public}s called with null identifier, backtrace limit exceeded";
        goto LABEL_74;
      }
      goto LABEL_75;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v34 = __nwlog_obj();
    v35 = type;
    v40 = os_log_type_enabled(v34, type);
    if (!backtrace_string)
    {
      if (v40)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_http1_create";
        v36 = "%{public}s called with null identifier, no backtrace";
        goto LABEL_74;
      }
      goto LABEL_75;
    }
    if (!v40)
      goto LABEL_61;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "nw_protocol_http1_create";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = backtrace_string;
    v41 = "%{public}s called with null identifier, dumping backtrace:%{public}s";
LABEL_60:
    _os_log_impl(&dword_182FBE000, v34, v35, v41, buf, 0x16u);
    goto LABEL_61;
  }
  if (!a3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_http1_create";
    v33 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v45 = 0;
    if (!__nwlog_fault(v33, &type, &v45))
      goto LABEL_75;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v34 = __nwlog_obj();
      v35 = type;
      if (!os_log_type_enabled(v34, type))
        goto LABEL_75;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http1_create";
      v36 = "%{public}s called with null endpoint";
      goto LABEL_74;
    }
    if (!v45)
    {
      v34 = __nwlog_obj();
      v35 = type;
      if (os_log_type_enabled(v34, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_http1_create";
        v36 = "%{public}s called with null endpoint, backtrace limit exceeded";
        goto LABEL_74;
      }
      goto LABEL_75;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v34 = __nwlog_obj();
    v35 = type;
    v42 = os_log_type_enabled(v34, type);
    if (!backtrace_string)
    {
      if (v42)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_http1_create";
        v36 = "%{public}s called with null endpoint, no backtrace";
        goto LABEL_74;
      }
      goto LABEL_75;
    }
    if (!v42)
      goto LABEL_61;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "nw_protocol_http1_create";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = backtrace_string;
    v41 = "%{public}s called with null endpoint, dumping backtrace:%{public}s";
    goto LABEL_60;
  }
  if (!a4)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_http1_create";
    v33 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v45 = 0;
    if (!__nwlog_fault(v33, &type, &v45))
      goto LABEL_75;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v34 = __nwlog_obj();
      v35 = type;
      if (os_log_type_enabled(v34, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_http1_create";
        v36 = "%{public}s called with null parameters";
        goto LABEL_74;
      }
LABEL_75:
      if (v33)
        free(v33);
      return 0;
    }
    if (!v45)
    {
      v34 = __nwlog_obj();
      v35 = type;
      if (os_log_type_enabled(v34, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_http1_create";
        v36 = "%{public}s called with null parameters, backtrace limit exceeded";
        goto LABEL_74;
      }
      goto LABEL_75;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v34 = __nwlog_obj();
    v35 = type;
    v43 = os_log_type_enabled(v34, type);
    if (!backtrace_string)
    {
      if (v43)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_http1_create";
        v36 = "%{public}s called with null parameters, no backtrace";
        goto LABEL_74;
      }
      goto LABEL_75;
    }
    if (v43)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_protocol_http1_create";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = backtrace_string;
      v41 = "%{public}s called with null parameters, dumping backtrace:%{public}s";
      goto LABEL_60;
    }
LABEL_61:
    free(backtrace_string);
    goto LABEL_75;
  }
  v7 = (char *)malloc_type_calloc(1uLL, 0x180uLL, 0xEAFB8F1AuLL);
  if (v7)
  {
LABEL_5:
    *((_OWORD *)v7 + 22) = 0u;
    *((_OWORD *)v7 + 23) = 0u;
    *((_OWORD *)v7 + 20) = 0u;
    *((_OWORD *)v7 + 21) = 0u;
    *((_OWORD *)v7 + 18) = 0u;
    *((_OWORD *)v7 + 19) = 0u;
    *((_OWORD *)v7 + 16) = 0u;
    *((_OWORD *)v7 + 17) = 0u;
    *((_OWORD *)v7 + 14) = 0u;
    *((_OWORD *)v7 + 15) = 0u;
    *((_OWORD *)v7 + 12) = 0u;
    *((_OWORD *)v7 + 13) = 0u;
    *((_OWORD *)v7 + 10) = 0u;
    *((_OWORD *)v7 + 11) = 0u;
    *((_OWORD *)v7 + 8) = 0u;
    *((_OWORD *)v7 + 9) = 0u;
    *((_OWORD *)v7 + 6) = 0u;
    *((_OWORD *)v7 + 7) = 0u;
    *((_OWORD *)v7 + 4) = 0u;
    *((_OWORD *)v7 + 5) = 0u;
    *((_OWORD *)v7 + 2) = 0u;
    *((_OWORD *)v7 + 3) = 0u;
    *(_OWORD *)v7 = 0u;
    *((_OWORD *)v7 + 1) = 0u;
    *((_QWORD *)v7 + 2) = a1;
    if (nw_protocol_http1_get_callbacks(void)::onceToken[0] != -1)
      dispatch_once(nw_protocol_http1_get_callbacks(void)::onceToken, &__block_literal_global_17_39614);
    *((_QWORD *)v7 + 3) = &nw_protocol_http1_get_callbacks(void)::http1_protocol_callbacks;
    *((_DWORD *)v7 + 46) = 1;
    *((_QWORD *)v7 + 20) = v7;
    *((_QWORD *)v7 + 5) = v7 + 160;
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x2000000000;
    v48 = (uint64_t)v7;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 0x40000000;
    aBlock[2] = __nw_protocol_http1_create_block_invoke;
    aBlock[3] = &unk_1E14A12B0;
    aBlock[4] = buf;
    *((_QWORD *)v7 + 25) = _Block_copy(aBlock);
    _Block_object_dispose(buf, 8);
    v8 = os_retain(a3);
    v9 = v7[288];
    if ((v9 & 1) != 0)
    {
      v10 = (void *)*((_QWORD *)v7 + 35);
      if (v10)
      {
        os_release(v10);
        v9 = v7[288];
      }
    }
    *((_QWORD *)v7 + 35) = v8;
    v7[288] = v9 | 1;
    v11 = os_retain(a3);
    v12 = v7[304];
    if ((v12 & 1) != 0)
    {
      v13 = (void *)*((_QWORD *)v7 + 37);
      if (v13)
      {
        os_release(v13);
        v12 = v7[304];
      }
    }
    *((_QWORD *)v7 + 37) = v11;
    v7[304] = v12 | 1;
    v14 = a4;
    v15 = v14[23];

    if (v15)
    {
      v16 = nw_endpoint_copy_proxy_original_endpoint(a3);
      if (v16)
      {
        v17 = v16;
        v18 = v7[304];
        if ((v18 & 1) != 0)
        {
          v19 = (void *)*((_QWORD *)v7 + 37);
          if (v19)
          {
            os_release(v19);
            v18 = v7[304];
          }
        }
        *((_QWORD *)v7 + 37) = v17;
        v7[304] = v18 | 1;
      }
      v20 = v15;
      if (v20[38] == 1)
      {
        v21 = v20[39];

        v22 = 4 * (v21 == 2001);
      }
      else
      {

        v22 = 0;
      }
      v7[376] = v7[376] & 0xFB | v22;
    }
    metadata = nw_http_connection_create_metadata(0, 0, 0);
    v24 = v7[320];
    if ((v24 & 1) != 0)
    {
      v25 = (void *)*((_QWORD *)v7 + 39);
      if (v25)
      {
        os_release(v25);
        v24 = v7[320];
      }
    }
    *((_QWORD *)v7 + 39) = metadata;
    v7[320] = v24 | 1;
    v26 = v14;
    v27 = v26[12];

    v7[376] = v7[376] & 0xFE | (((unsigned __int16)v27 & 0x8000) != 0);
    if ((v7[158] & 1) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v28 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
      {
        v29 = *((_DWORD *)v7 + 93);
        v30 = "server";
        v31 = (v7[376] & 1) == 0;
        *(_DWORD *)buf = 136447234;
        *(_QWORD *)&buf[4] = "nw_protocol_http1_create";
        if (v31)
          v30 = "client";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v7 + 74;
        *(_WORD *)&buf[22] = 2080;
        v48 = (uint64_t)" ";
        v49 = 1024;
        v50 = v29;
        v51 = 2082;
        v52 = v30;
        _os_log_impl(&dword_182FBE000, v28, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> http1 is in %{public}s mode", buf, 0x30u);
      }
    }
    *((_QWORD *)v7 + 26) = 0;
    *((_DWORD *)v7 + 88) = 0;
    *((_QWORD *)v7 + 27) = v7 + 208;
    *((_QWORD *)v7 + 29) = 0;
    *((_QWORD *)v7 + 30) = v7 + 232;
    *((_QWORD *)v7 + 31) = 0;
    *((_QWORD *)v7 + 32) = v7 + 248;
    *((_QWORD *)v7 + 42) = 0;
    *((_QWORD *)v7 + 43) = 0;
    *(_QWORD *)(v7 + 364) = 6;
    *((_QWORD *)v7 + 24) = 29000;
    if (v15)
      os_release(v15);
    return (BOOL)v7;
  }
  v37 = __nwlog_obj();
  os_log_type_enabled(v37, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  *(_QWORD *)&buf[4] = "strict_calloc";
  *(_WORD *)&buf[12] = 2048;
  *(_QWORD *)&buf[14] = 1;
  *(_WORD *)&buf[22] = 2048;
  v48 = 384;
  v38 = (void *)_os_log_send_and_compose_impl();
  result = __nwlog_abort((uint64_t)v38);
  if (!result)
  {
    free(v38);
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

uint64_t __nw_protocol_http1_create_block_invoke(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0)
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 0;
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
}

void ___ZL31nw_protocol_http1_get_callbacksv_block_invoke()
{
  qword_1EDCE2B88 = (uint64_t)nw_protocol_default_get_output_interface;
  unk_1EDCE2B90 = nw_protocol_default_waiting_for_output;
  qword_1EDCE2B48 = (uint64_t)nw_protocol_default_register_notification;
  unk_1EDCE2B50 = nw_protocol_default_unregister_notification;
  qword_1EDCE2AD8 = (uint64_t)nw_protocol_http1_disconnect;
  unk_1EDCE2AE0 = nw_protocol_http1_connected;
  nw_protocol_http1_get_callbacks(void)::http1_protocol_callbacks = (uint64_t)nw_protocol_http1_add_input_handler;
  unk_1EDCE2AC0 = nw_protocol_http1_remove_input_handler;
  qword_1EDCE2AC8 = (uint64_t)nw_protocol_http1_replace_input_handler;
  unk_1EDCE2AD0 = nw_protocol_http1_connect;
  qword_1EDCE2BB8 = (uint64_t)nw_protocol_http1_reset;
  unk_1EDCE2BC0 = nw_protocol_default_input_flush;
  qword_1EDCE2AF8 = (uint64_t)nw_protocol_http1_input_available;
  unk_1EDCE2B00 = nw_protocol_http1_output_available;
  qword_1EDCE2B68 = (uint64_t)nw_protocol_default_supports_external_data;
  unk_1EDCE2B70 = nw_protocol_http1_input_finished;
  qword_1EDCE2B78 = (uint64_t)nw_protocol_http1_output_finished;
  unk_1EDCE2B80 = nw_protocol_default_get_output_local;
  qword_1EDCE2B08 = (uint64_t)nw_protocol_http1_get_input_frames;
  unk_1EDCE2B10 = nw_protocol_http1_get_output_frames;
  qword_1EDCE2B18 = (uint64_t)nw_protocol_http1_finalize_output_frames;
  unk_1EDCE2B20 = nw_protocol_default_link_state;
  qword_1EDCE2B28 = (uint64_t)nw_protocol_http1_get_parameters;
  unk_1EDCE2B30 = nw_protocol_default_get_path;
  qword_1EDCE2B38 = (uint64_t)nw_protocol_default_get_local;
  unk_1EDCE2B40 = nw_protocol_http1_get_remote_endpoint;
  qword_1EDCE2BA8 = (uint64_t)nw_protocol_http1_remove_listen_handler;
  unk_1EDCE2BB0 = nw_protocol_http1_stream_get_message_properties;
  qword_1EDCE2AE8 = (uint64_t)nw_protocol_http1_disconnected;
  unk_1EDCE2AF0 = nw_protocol_http1_error;
  qword_1EDCE2B98 = (uint64_t)nw_protocol_http1_copy_info;
  unk_1EDCE2BA0 = nw_protocol_http1_add_listen_handler;
  qword_1EDCE2B58 = (uint64_t)nw_protocol_http1_notify;
  unk_1EDCE2B60 = nw_protocol_http1_updated_path;
}

BOOL nw_protocol_http1_connect(nw_protocol *a1, nw_protocol *a2, __n128 a3)
{
  _DWORD *handle;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  char *v11;
  int v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  _BOOL8 result;
  NSObject *v19;
  uint64_t v20;
  int v21;
  int v22;
  const char *v23;
  uint64_t v24;
  int v25;
  int v26;
  NSObject *v27;
  uint32_t v28;
  void *v29;
  _QWORD *v30;
  _OWORD *v31;
  void *v32;
  void *v33;
  _OWORD *v34;
  void *v35;
  char v36;
  void *v37;
  void *v38;
  char v39;
  void *v40;
  _QWORD *v41;
  id v42;
  char v43;
  void *v44;
  uint64_t v45;
  id *metadata;
  char v47;
  void *v48;
  uint64_t v49;
  char v50;
  char v51;
  NSObject *v52;
  uint64_t v53;
  int v54;
  int v55;
  NSObject **v56;
  void *v57;
  void **v58;
  id v59;
  void *v60;
  id v61;
  id v62;
  id v63;
  void *v64;
  NSObject *v65;
  NSObject *v66;
  __int16 v67;
  int v68;
  id v69;
  void *v70;
  NSObject *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  NSObject *v76;
  os_log_type_t v77;
  uint64_t v78;
  const char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  NSObject *v83;
  int v84;
  NSObject *v85;
  uint64_t v86;
  int v87;
  int v88;
  _WORD *v89;
  char *v90;
  NSObject *v91;
  os_log_type_t v92;
  const char *v93;
  NSObject *v94;
  uint64_t v95;
  int v96;
  int v97;
  const char *v98;
  NSObject *v99;
  uint32_t v100;
  NSObject *v101;
  uint64_t v102;
  int v103;
  int v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  NSObject *v110;
  os_log_type_t v111;
  uint64_t v112;
  const char *v113;
  _OWORD *v114;
  char *v115;
  _BOOL4 v116;
  uint64_t v117;
  char *v118;
  NSObject *v119;
  os_log_type_t v120;
  const char *v121;
  _BYTE *v122;
  char *v123;
  NSObject *v124;
  os_log_type_t v125;
  const char *v126;
  _BYTE *v127;
  uint64_t v128;
  _QWORD *v129;
  char *v130;
  _BOOL4 v131;
  uint64_t v132;
  void *v133;
  void *v134;
  _OWORD *v135;
  uint64_t v136;
  void *v137;
  uint64_t v138;
  char v139;
  char v140;
  NSObject *v141;
  uint64_t v142;
  int v143;
  int v144;
  nw_path_t *v145;
  void *v146;
  void **v147;
  id v148;
  void *v149;
  id v150;
  id v151;
  id v152;
  void *v153;
  nw_path_t v154;
  void *v155;
  __int16 v156;
  int v157;
  id v158;
  void *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  NSObject *v164;
  os_log_type_t v165;
  uint64_t v166;
  const char *v167;
  char *v168;
  _BOOL4 v169;
  int v170;
  uint64_t v171;
  char *v172;
  NSObject *v173;
  os_log_type_t v174;
  uint64_t v175;
  const char *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  char *v181;
  NSObject *v182;
  os_log_type_t v183;
  uint64_t v184;
  const char *v185;
  _OWORD *v186;
  char *v187;
  _BOOL4 v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  char *v193;
  NSObject *v194;
  os_log_type_t v195;
  uint64_t v196;
  const char *v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  NSObject *v202;
  uint64_t v203;
  int v204;
  int v205;
  NSObject *v206;
  uint64_t v207;
  int v208;
  int v209;
  _OWORD *v210;
  char *v211;
  _BOOL4 v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  NSObject *v216;
  uint64_t v217;
  int v218;
  int v219;
  void *v220;
  char *identifier;
  _QWORD *v222;
  _BOOL4 v223;
  uint64_t v224;
  void *v225;
  uint64_t v226;
  void *v227;
  NSObject *v228;
  NSObject *v229;
  NSObject *v230;
  int v231;
  uint64_t v232;
  char *v233;
  NSObject *v234;
  os_log_type_t v235;
  uint64_t v236;
  const char *v237;
  char *v238;
  _BOOL4 v239;
  uint64_t v240;
  char *v241;
  _BOOL4 v242;
  uint64_t v243;
  NSObject *v244;
  uint64_t v245;
  int v246;
  int v247;
  int v248;
  NSObject *v249;
  uint64_t v250;
  int v251;
  int v252;
  char *v253;
  _BOOL4 v254;
  uint64_t v255;
  uint64_t v256;
  char *v257;
  NSObject *v258;
  os_log_type_t v259;
  const char *v260;
  char *v261;
  _BOOL4 v262;
  uint64_t v263;
  char *v264;
  NSObject *v265;
  os_log_type_t v266;
  const char *v267;
  char *v268;
  NSObject *v269;
  os_log_type_t v270;
  const char *v271;
  NSObject *v272;
  _BOOL4 v273;
  int v274;
  uint64_t v275;
  _QWORD *v276;
  uint64_t v277;
  NSObject *v278;
  uint64_t v279;
  int v280;
  int v281;
  int v282;
  uint64_t v283;
  char *backtrace_string;
  _BOOL4 v285;
  char *v286;
  _BOOL4 v287;
  NSObject *v288;
  _BOOL4 v289;
  uint64_t v290;
  int v291;
  int v292;
  uint64_t v293;
  unsigned int v294;
  _BYTE *v295;
  uint64_t v296;
  char *v297;
  NSObject *v298;
  os_log_type_t v299;
  uint64_t v300;
  const char *v301;
  __int128 v302;
  __int128 v303;
  __int128 v304;
  __int128 v305;
  NSObject *v306;
  uint64_t v307;
  int v308;
  int v309;
  NSObject *v310;
  uint64_t v311;
  int v312;
  int v313;
  char *v314;
  _BOOL4 v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  NSObject *v319;
  os_log_type_t v320;
  uint32_t v321;
  char *v322;
  _BOOL4 v323;
  const char *v324;
  char *v325;
  _BOOL4 v326;
  char *v327;
  _BOOL4 v328;
  uint64_t v329;
  int v330;
  uint64_t v331;
  char *v332;
  NSObject *v333;
  os_log_type_t v334;
  uint64_t v335;
  const char *v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  char *v341;
  NSObject *v342;
  os_log_type_t v343;
  uint64_t v344;
  const char *v345;
  char *v346;
  _BOOL4 v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  char *v352;
  NSObject *v353;
  os_log_type_t v354;
  uint64_t v355;
  const char *v356;
  __int128 v357;
  __int128 v358;
  __int128 v359;
  __int128 v360;
  NSObject *v361;
  uint64_t v362;
  int v363;
  int v364;
  NSObject *v365;
  uint64_t v366;
  int v367;
  int v368;
  char *v369;
  _BOOL4 v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  NSObject *v374;
  uint64_t v375;
  int v376;
  int v377;
  void *v378;
  char *v379;
  _QWORD *v380;
  _BOOL4 v381;
  uint64_t v382;
  void *v383;
  uint64_t v384;
  void *v385;
  NSObject *v386;
  NSObject *v387;
  NSObject *v388;
  int v389;
  uint64_t v390;
  char *v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  char *v395;
  _BOOL4 v396;
  uint64_t v397;
  char *v398;
  _BOOL4 v399;
  const char *v400;
  _BOOL4 v401;
  char *v402;
  _BOOL4 v403;
  NSObject *v404;
  uint64_t v405;
  int v406;
  int v407;
  uint64_t v408;
  NSObject *v409;
  _BOOL4 v410;
  int v411;
  int v412;
  uint64_t v413;
  void *v414;
  void *v415;
  _OWORD *v416;
  uint64_t v417;
  void *v418;
  uint64_t v419;
  char v420;
  char v421;
  NSObject *v422;
  uint64_t v423;
  int v424;
  int v425;
  nw_path_t *v426;
  void *v427;
  void **v428;
  id v429;
  void *v430;
  id v431;
  id v432;
  id v433;
  void *v434;
  nw_path_t v435;
  void *v436;
  __int16 v437;
  int v438;
  id v439;
  void *v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  char *v444;
  NSObject *v445;
  os_log_type_t v446;
  uint64_t v447;
  const char *v448;
  NSObject *v449;
  uint64_t v450;
  NSObject *v451;
  _BOOL4 is_quic;
  void *v453;
  void *v454;
  NSObject *v455;
  void *v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  char *v460;
  NSObject *v461;
  os_log_type_t v462;
  uint64_t v463;
  const char *v464;
  char *v465;
  _BOOL4 v466;
  uint64_t v467;
  char *v468;
  _BOOL4 v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  char *v476;
  NSObject *v477;
  os_log_type_t v478;
  uint64_t v479;
  const char *v480;
  char *v481;
  _BOOL4 v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  char *v487;
  NSObject *v488;
  os_log_type_t v489;
  uint64_t v490;
  const char *v491;
  __int128 v492;
  __int128 v493;
  __int128 v494;
  __int128 v495;
  NSObject *v496;
  uint64_t v497;
  int v498;
  int v499;
  NSObject *v500;
  uint64_t v501;
  int v502;
  int v503;
  char *v504;
  _BOOL4 v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  NSObject *v509;
  uint64_t v510;
  int v511;
  int v512;
  void *v513;
  char *v514;
  _QWORD *v515;
  _BOOL4 v516;
  uint64_t v517;
  void *v518;
  uint64_t v519;
  void *v520;
  NSObject *v521;
  NSObject *v522;
  NSObject *v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  void *v527;
  _BOOL4 v528;
  _OWORD *v529;
  char *v530;
  NSObject *v531;
  os_log_type_t v532;
  const char *v533;
  char *v534;
  NSObject *v535;
  os_log_type_t v536;
  const char *v537;
  _BOOL4 v538;
  NSObject *v539;
  uint64_t v540;
  int v541;
  int v542;
  uint64_t v543;
  NSObject *v544;
  void *v545;
  _OWORD *v546;
  char *v547;
  NSObject *v548;
  os_log_type_t v549;
  const char *v550;
  _OWORD *v551;
  char *v552;
  NSObject *v553;
  os_log_type_t v554;
  const char *v555;
  char *v556;
  NSObject *v557;
  os_log_type_t v558;
  const char *v559;
  NSObject *v560;
  uint64_t v561;
  int v562;
  int v563;
  NSObject *v564;
  uint64_t v565;
  int v566;
  int v567;
  int v568;
  char *v569;
  _BOOL4 v570;
  char *v571;
  _BOOL4 v572;
  char *v573;
  _BOOL4 v574;
  const char *v575;
  _BOOL4 v576;
  char *v577;
  _BOOL4 v578;
  char *v579;
  _BOOL4 v580;
  char *v581;
  _BOOL4 v582;
  _BYTE *v583;
  NSObject *v584;
  _BOOL4 v585;
  int v586;
  NSObject *v587;
  uint64_t v588;
  int v589;
  int v590;
  NSObject *v591;
  os_log_type_t v592;
  _BYTE *v593;
  NSObject *v594;
  _BOOL4 v595;
  uint64_t v596;
  int v597;
  int v598;
  int v599;
  NSObject *v600;
  _BOOL4 v601;
  uint64_t v602;
  int v603;
  int v604;
  int v605;
  char *v606;
  _BOOL4 v607;
  char *v608;
  NSObject *v609;
  os_log_type_t v610;
  const char *v611;
  char *v612;
  _BOOL4 v613;
  char *v614;
  NSObject *v615;
  os_log_type_t v616;
  const char *v617;
  char *v618;
  _BOOL4 v619;
  NSObject *v620;
  uint64_t v621;
  int v622;
  int v623;
  char *v624;
  NSObject *v625;
  os_log_type_t v626;
  const char *v627;
  char *v628;
  NSObject *v629;
  os_log_type_t v630;
  const char *v631;
  NSObject *v632;
  uint64_t v633;
  int v634;
  int v635;
  uint64_t v636;
  NSObject *v637;
  void *v638;
  char *v639;
  NSObject *v640;
  os_log_type_t v641;
  const char *v642;
  char *v643;
  NSObject *v644;
  os_log_type_t v645;
  const char *v646;
  char *v647;
  NSObject *v648;
  os_log_type_t v649;
  const char *v650;
  NSObject *v651;
  uint64_t v652;
  int v653;
  int v654;
  NSObject *v655;
  uint64_t v656;
  int v657;
  int v658;
  int v659;
  NSObject *v660;
  _BOOL4 v661;
  uint64_t v662;
  int v663;
  int v664;
  char *v665;
  NSObject *v666;
  os_log_type_t v667;
  const char *v668;
  char *v669;
  NSObject *v670;
  os_log_type_t v671;
  const char *v672;
  NSObject *v673;
  uint64_t v674;
  int v675;
  int v676;
  uint64_t v677;
  char *v678;
  _BOOL4 v679;
  char *v680;
  _BOOL4 v681;
  char *v682;
  _BOOL4 v683;
  const char *v684;
  NSObject *v685;
  void *v686;
  char *v687;
  NSObject *v688;
  os_log_type_t v689;
  const char *v690;
  char *v691;
  NSObject *v692;
  os_log_type_t v693;
  const char *v694;
  char *v695;
  NSObject *v696;
  os_log_type_t v697;
  const char *v698;
  _BOOL4 v699;
  NSObject *v700;
  uint64_t v701;
  int v702;
  int v703;
  NSObject *v704;
  uint64_t v705;
  int v706;
  int v707;
  int v708;
  char *v709;
  _BOOL4 v710;
  char *v711;
  _BOOL4 v712;
  char *v713;
  _BOOL4 v714;
  NSObject *v715;
  int v716;
  int v717;
  char *v718;
  _BOOL4 v719;
  char *v720;
  _BOOL4 v721;
  char *v722;
  _BOOL4 v723;
  const char *v724;
  _BOOL4 v725;
  char *v726;
  _BOOL4 v727;
  char *v728;
  _BOOL4 v729;
  char *v730;
  _BOOL4 v731;
  NSObject *v732;
  _BOOL4 v733;
  uint64_t v734;
  int v735;
  int v736;
  int v737;
  char *v738;
  NSObject *v739;
  os_log_type_t v740;
  const char *v741;
  char *v742;
  _BOOL4 v743;
  char *v744;
  NSObject *v745;
  os_log_type_t v746;
  const char *v747;
  char *v748;
  _BOOL4 v749;
  char *v750;
  NSObject *v751;
  os_log_type_t v752;
  const char *v753;
  char *v754;
  _BOOL4 v755;
  char *v756;
  NSObject *v757;
  os_log_type_t v758;
  const char *v759;
  char *v760;
  _BOOL4 v761;
  __n128 v762;
  unsigned __int32 v763;
  unsigned __int32 v764;
  _OWORD *v765;
  _OWORD *v766;
  _OWORD *v767;
  _OWORD *v768;
  _QWORD v769[5];
  _QWORD v770[5];
  char v771;
  os_log_type_t v772;
  _QWORD v773[6];
  uint64_t aBlock;
  uint64_t v775;
  void *v776;
  void *v777;
  uint64_t *v778;
  os_log_type_t *v779;
  uint64_t v780;
  os_log_type_t type[8];
  uint64_t v782;
  uint64_t v783;
  uint64_t (*v784)(uint64_t, uint64_t);
  void (*v785)(uint64_t);
  void *object;
  char v787;
  uint64_t v788;
  uint64_t *v789;
  uint64_t v790;
  char v791;
  _BYTE v792[24];
  uint64_t v793;
  _BYTE v794[10];
  __int16 v795;
  char *v796;
  _BYTE buf[24];
  uint64_t v798;
  _BYTE v799[44];
  uint64_t v800;

  v800 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
    v257 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(aBlock) = 0;
    if (!__nwlog_fault(v257, type, &aBlock))
      goto LABEL_835;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      v258 = __nwlog_obj();
      v259 = type[0];
      if (!os_log_type_enabled(v258, type[0]))
        goto LABEL_835;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
      v260 = "%{public}s called with null protocol";
      goto LABEL_834;
    }
    if (!(_BYTE)aBlock)
    {
      v258 = __nwlog_obj();
      v259 = type[0];
      if (!os_log_type_enabled(v258, type[0]))
        goto LABEL_835;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
      v260 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_834;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v258 = __nwlog_obj();
    v259 = type[0];
    v285 = os_log_type_enabled(v258, type[0]);
    if (!backtrace_string)
    {
      if (!v285)
        goto LABEL_835;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
      v260 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_834;
    }
    if (v285)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = backtrace_string;
      _os_log_impl(&dword_182FBE000, v258, v259, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(backtrace_string);
LABEL_835:
    if (!v257)
      goto LABEL_837;
LABEL_836:
    free(v257);
    goto LABEL_837;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
    v257 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(aBlock) = 0;
    if (!__nwlog_fault(v257, type, &aBlock))
      goto LABEL_835;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      v258 = __nwlog_obj();
      v259 = type[0];
      if (!os_log_type_enabled(v258, type[0]))
        goto LABEL_835;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
      v260 = "%{public}s called with null handle";
      goto LABEL_834;
    }
    if (!(_BYTE)aBlock)
    {
      v258 = __nwlog_obj();
      v259 = type[0];
      if (!os_log_type_enabled(v258, type[0]))
        goto LABEL_835;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
      v260 = "%{public}s called with null handle, backtrace limit exceeded";
      goto LABEL_834;
    }
    v286 = (char *)__nw_create_backtrace_string();
    v258 = __nwlog_obj();
    v259 = type[0];
    v287 = os_log_type_enabled(v258, type[0]);
    if (v286)
    {
      if (v287)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v286;
        _os_log_impl(&dword_182FBE000, v258, v259, "%{public}s called with null handle, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v286);
      if (!v257)
        goto LABEL_837;
      goto LABEL_836;
    }
    if (v287)
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
      v260 = "%{public}s called with null handle, no backtrace";
LABEL_834:
      _os_log_impl(&dword_182FBE000, v258, v259, v260, buf, 0xCu);
      goto LABEL_835;
    }
    goto LABEL_835;
  }
  v6 = handle[6];
  if (v6 == 1)
    goto LABEL_10;
  if (v6 != 2)
  {
    if (v6 != 3)
    {
LABEL_837:
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http1_connect";
      v264 = (char *)_os_log_send_and_compose_impl();
      type[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(aBlock) = 0;
      if (!__nwlog_fault(v264, type, &aBlock))
        goto LABEL_877;
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v265 = gLogObj;
        v266 = type[0];
        if (!os_log_type_enabled((os_log_t)gLogObj, type[0]))
          goto LABEL_877;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_http1_connect";
        v267 = "%{public}s called with null http1";
        goto LABEL_876;
      }
      if (!(_BYTE)aBlock)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v265 = gLogObj;
        v266 = type[0];
        if (!os_log_type_enabled((os_log_t)gLogObj, type[0]))
          goto LABEL_877;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_http1_connect";
        v267 = "%{public}s called with null http1, backtrace limit exceeded";
        goto LABEL_876;
      }
      v322 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v265 = gLogObj;
      v266 = type[0];
      v528 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
      if (!v322)
      {
        if (!v528)
          goto LABEL_877;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_http1_connect";
        v267 = "%{public}s called with null http1, no backtrace";
        goto LABEL_876;
      }
      if (!v528)
        goto LABEL_871;
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_protocol_http1_connect";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v322;
      v324 = "%{public}s called with null http1, dumping backtrace:%{public}s";
      goto LABEL_870;
    }
    v7 = *((_QWORD *)handle + 2);
    if (v7)
    {
      handle = (_DWORD *)(v7 + 480);
      goto LABEL_10;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
    v257 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(aBlock) = 0;
    if (!__nwlog_fault(v257, type, &aBlock))
      goto LABEL_835;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      v258 = __nwlog_obj();
      v259 = type[0];
      if (!os_log_type_enabled(v258, type[0]))
        goto LABEL_835;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
      v260 = "%{public}s called with null handle->http1_connection";
      goto LABEL_834;
    }
    if (!(_BYTE)aBlock)
    {
      v258 = __nwlog_obj();
      v259 = type[0];
      if (!os_log_type_enabled(v258, type[0]))
        goto LABEL_835;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
      v260 = "%{public}s called with null handle->http1_connection, backtrace limit exceeded";
      goto LABEL_834;
    }
    v398 = (char *)__nw_create_backtrace_string();
    v258 = __nwlog_obj();
    v259 = type[0];
    v399 = os_log_type_enabled(v258, type[0]);
    if (!v398)
    {
      if (!v399)
        goto LABEL_835;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
      v260 = "%{public}s called with null handle->http1_connection, no backtrace";
      goto LABEL_834;
    }
    if (v399)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v398;
      v400 = "%{public}s called with null handle->http1_connection, dumping backtrace:%{public}s";
LABEL_618:
      _os_log_impl(&dword_182FBE000, v258, v259, v400, buf, 0x16u);
      goto LABEL_619;
    }
    goto LABEL_619;
  }
  v8 = *((_QWORD *)handle + 1);
  if (!v8)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
    v257 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(aBlock) = 0;
    if (!__nwlog_fault(v257, type, &aBlock))
      goto LABEL_835;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      v258 = __nwlog_obj();
      v259 = type[0];
      if (!os_log_type_enabled(v258, type[0]))
        goto LABEL_835;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
      v260 = "%{public}s called with null handle->http1_stream";
      goto LABEL_834;
    }
    if (!(_BYTE)aBlock)
    {
      v258 = __nwlog_obj();
      v259 = type[0];
      if (!os_log_type_enabled(v258, type[0]))
        goto LABEL_835;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
      v260 = "%{public}s called with null handle->http1_stream, backtrace limit exceeded";
      goto LABEL_834;
    }
    v398 = (char *)__nw_create_backtrace_string();
    v258 = __nwlog_obj();
    v259 = type[0];
    v401 = os_log_type_enabled(v258, type[0]);
    if (!v398)
    {
      if (!v401)
        goto LABEL_835;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
      v260 = "%{public}s called with null handle->http1_stream, no backtrace";
      goto LABEL_834;
    }
    if (v401)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v398;
      v400 = "%{public}s called with null handle->http1_stream, dumping backtrace:%{public}s";
      goto LABEL_618;
    }
LABEL_619:
    free(v398);
    if (!v257)
      goto LABEL_837;
    goto LABEL_836;
  }
  handle = (_DWORD *)(v8 + 248);
LABEL_10:
  v9 = *(_QWORD *)handle;
  if (!*(_QWORD *)handle)
    goto LABEL_837;
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_http1_connect";
    v264 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(aBlock) = 0;
    if (!__nwlog_fault(v264, type, &aBlock))
      goto LABEL_877;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      v265 = __nwlog_obj();
      v266 = type[0];
      if (!os_log_type_enabled(v265, type[0]))
        goto LABEL_877;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http1_connect";
      v267 = "%{public}s called with null other_protocol";
LABEL_876:
      _os_log_impl(&dword_182FBE000, v265, v266, v267, buf, 0xCu);
      goto LABEL_877;
    }
    if (!(_BYTE)aBlock)
    {
      v265 = __nwlog_obj();
      v266 = type[0];
      if (!os_log_type_enabled(v265, type[0]))
        goto LABEL_877;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http1_connect";
      v267 = "%{public}s called with null other_protocol, backtrace limit exceeded";
      goto LABEL_876;
    }
    v322 = (char *)__nw_create_backtrace_string();
    v265 = __nwlog_obj();
    v266 = type[0];
    v323 = os_log_type_enabled(v265, type[0]);
    if (!v322)
    {
      if (!v323)
        goto LABEL_877;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http1_connect";
      v267 = "%{public}s called with null other_protocol, no backtrace";
      goto LABEL_876;
    }
    if (!v323)
      goto LABEL_871;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "nw_protocol_http1_connect";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v322;
    v324 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
LABEL_870:
    _os_log_impl(&dword_182FBE000, v265, v266, v324, buf, 0x16u);
    goto LABEL_871;
  }
  v10 = &unk_1ECD84000;
  if ((*(_BYTE *)(v9 + 158) & 1) == 0)
  {
    if (gLogDatapath)
    {
      v272 = __nwlog_obj();
      v273 = os_log_type_enabled(v272, OS_LOG_TYPE_DEBUG);
      v10 = &unk_1ECD84000;
      if (v273)
      {
        v274 = *(_DWORD *)(v9 + 372);
        *(_DWORD *)buf = 136447234;
        *(_QWORD *)&buf[4] = "nw_protocol_http1_connect";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v9 + 74;
        *(_WORD *)&buf[22] = 2080;
        v798 = (uint64_t)" ";
        *(_WORD *)v799 = 1024;
        *(_DWORD *)&v799[2] = v274;
        *(_WORD *)&v799[6] = 2048;
        *(_QWORD *)&v799[8] = a2;
        _os_log_impl(&dword_182FBE000, v272, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> called by protocol %p", buf, 0x30u);
        v10 = &unk_1ECD84000;
      }
    }
  }
  v11 = (char *)a1->handle;
  if (!v11)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http1_get_stream_for_protocol";
    v268 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(aBlock) = 0;
    if (!__nwlog_fault(v268, type, &aBlock))
      goto LABEL_860;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      v269 = __nwlog_obj();
      v270 = type[0];
      if (!os_log_type_enabled(v269, type[0]))
        goto LABEL_860;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_get_stream_for_protocol";
      v271 = "%{public}s called with null handle";
      goto LABEL_859;
    }
    if (!(_BYTE)aBlock)
    {
      v269 = __nwlog_obj();
      v270 = type[0];
      if (!os_log_type_enabled(v269, type[0]))
        goto LABEL_860;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_get_stream_for_protocol";
      v271 = "%{public}s called with null handle, backtrace limit exceeded";
      goto LABEL_859;
    }
    v325 = (char *)__nw_create_backtrace_string();
    v269 = __nwlog_obj();
    v270 = type[0];
    v326 = os_log_type_enabled(v269, type[0]);
    if (!v325)
    {
      if (!v326)
        goto LABEL_860;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_get_stream_for_protocol";
      v271 = "%{public}s called with null handle, no backtrace";
      goto LABEL_859;
    }
    if (v326)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_http1_get_stream_for_protocol";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v325;
      _os_log_impl(&dword_182FBE000, v269, v270, "%{public}s called with null handle, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v325);
LABEL_860:
    if (!v268)
      goto LABEL_862;
    goto LABEL_861;
  }
  v12 = *((_DWORD *)v11 + 6);
  if (v12 != 2)
  {
    if (v12 != 3)
      goto LABEL_862;
    v13 = *((_QWORD *)v11 + 2);
    if (v13)
    {
      v14 = (uint64_t *)(v13 + 488);
      goto LABEL_20;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http1_get_stream_for_protocol";
    v268 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(aBlock) = 0;
    if (__nwlog_fault(v268, type, &aBlock))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        v269 = __nwlog_obj();
        v270 = type[0];
        if (!os_log_type_enabled(v269, type[0]))
          goto LABEL_860;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http1_get_stream_for_protocol";
        v271 = "%{public}s called with null handle->http1_connection";
        goto LABEL_859;
      }
      if (!(_BYTE)aBlock)
      {
        v269 = __nwlog_obj();
        v270 = type[0];
        if (!os_log_type_enabled(v269, type[0]))
          goto LABEL_860;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http1_get_stream_for_protocol";
        v271 = "%{public}s called with null handle->http1_connection, backtrace limit exceeded";
        goto LABEL_859;
      }
      v402 = (char *)__nw_create_backtrace_string();
      v269 = __nwlog_obj();
      v270 = type[0];
      v403 = os_log_type_enabled(v269, type[0]);
      if (v402)
      {
        if (v403)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_http1_get_stream_for_protocol";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v402;
          _os_log_impl(&dword_182FBE000, v269, v270, "%{public}s called with null handle->http1_connection, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v402);
        if (!v268)
        {
LABEL_862:
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_protocol_http1_connect";
          v264 = (char *)_os_log_send_and_compose_impl();
          type[0] = OS_LOG_TYPE_ERROR;
          LOBYTE(aBlock) = 0;
          if (!__nwlog_fault(v264, type, &aBlock))
            goto LABEL_877;
          if (type[0] == OS_LOG_TYPE_FAULT)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v265 = gLogObj;
            v266 = type[0];
            if (os_log_type_enabled((os_log_t)gLogObj, type[0]))
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_protocol_http1_connect";
              v267 = "%{public}s called with null http1_stream";
              goto LABEL_876;
            }
LABEL_877:
            if (v264)
              free(v264);
            return 0;
          }
          if (!(_BYTE)aBlock)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v265 = gLogObj;
            v266 = type[0];
            if (os_log_type_enabled((os_log_t)gLogObj, type[0]))
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_protocol_http1_connect";
              v267 = "%{public}s called with null http1_stream, backtrace limit exceeded";
              goto LABEL_876;
            }
            goto LABEL_877;
          }
          v322 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v265 = gLogObj;
          v266 = type[0];
          v538 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
          if (!v322)
          {
            if (v538)
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_protocol_http1_connect";
              v267 = "%{public}s called with null http1_stream, no backtrace";
              goto LABEL_876;
            }
            goto LABEL_877;
          }
          if (v538)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_protocol_http1_connect";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v322;
            v324 = "%{public}s called with null http1_stream, dumping backtrace:%{public}s";
            goto LABEL_870;
          }
LABEL_871:
          free(v322);
          goto LABEL_877;
        }
LABEL_861:
        free(v268);
        goto LABEL_862;
      }
      if (v403)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http1_get_stream_for_protocol";
        v271 = "%{public}s called with null handle->http1_connection, no backtrace";
LABEL_859:
        _os_log_impl(&dword_182FBE000, v269, v270, v271, buf, 0xCu);
        goto LABEL_860;
      }
    }
    goto LABEL_860;
  }
  v14 = (uint64_t *)(v11 + 8);
LABEL_20:
  v15 = *v14;
  if (!*v14)
    goto LABEL_862;
  if ((*(_BYTE *)(v15 + 158) & 1) == 0)
  {
    if (gLogDatapath)
    {
      v288 = __nwlog_obj();
      v289 = os_log_type_enabled(v288, OS_LOG_TYPE_DEBUG);
      v10 = &unk_1ECD84000;
      if (v289)
      {
        v290 = *(_QWORD *)(v15 + 256);
        v291 = *(_DWORD *)(*(_QWORD *)(v15 + 248) + 372);
        if (v290)
          LODWORD(v290) = *(_DWORD *)(v290 + 860);
        v292 = *(_DWORD *)(v15 + 424);
        *(_DWORD *)buf = 136447746;
        *(_QWORD *)&buf[4] = "nw_protocol_http1_connect";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v15 + 74;
        *(_WORD *)&buf[22] = 2080;
        v798 = (uint64_t)" ";
        *(_WORD *)v799 = 1024;
        *(_DWORD *)&v799[2] = v291;
        *(_WORD *)&v799[6] = 1024;
        *(_DWORD *)&v799[8] = v290;
        *(_WORD *)&v799[12] = 1024;
        *(_DWORD *)&v799[14] = v292;
        *(_WORD *)&v799[18] = 2048;
        *(_QWORD *)&v799[20] = v15;
        _os_log_impl(&dword_182FBE000, v288, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> called for stream %p", buf, 0x3Cu);
        v10 = &unk_1ECD84000;
      }
    }
  }
  v16 = *(_WORD *)(v15 + 428);
  if ((v16 & 0x1000) != 0)
  {
    result = 1;
    if ((*(_BYTE *)(v15 + 158) & 1) != 0 || !gLogDatapath)
      return result;
    v19 = __nwlog_obj();
    if (!os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
      return 1;
    v20 = *(_QWORD *)(v15 + 256);
    v21 = *(_DWORD *)(*(_QWORD *)(v15 + 248) + 372);
    if (v20)
      LODWORD(v20) = *(_DWORD *)(v20 + 860);
    v22 = *(_DWORD *)(v15 + 424);
    *(_DWORD *)buf = 136447490;
    *(_QWORD *)&buf[4] = "nw_protocol_http1_connect";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v15 + 74;
    *(_WORD *)&buf[22] = 2080;
    v798 = (uint64_t)" ";
    *(_WORD *)v799 = 1024;
    *(_DWORD *)&v799[2] = v21;
    *(_WORD *)&v799[6] = 1024;
    *(_DWORD *)&v799[8] = v20;
    *(_WORD *)&v799[12] = 1024;
    *(_DWORD *)&v799[14] = v22;
    v23 = "%{public}s %{public}s%s<i%u:c%u:s%u> ignoring duplicate call to connect";
    goto LABEL_42;
  }
  if ((v16 & 8) != 0)
  {
    if (*(_QWORD *)(v15 + 256))
    {
      if ((*(_BYTE *)(v15 + 158) & 1) != 0)
        return 1;
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v19 = gLogObj;
      if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
        return 1;
      v24 = *(_QWORD *)(v15 + 256);
      v25 = *(_DWORD *)(*(_QWORD *)(v15 + 248) + 372);
      if (v24)
        LODWORD(v24) = *(_DWORD *)(v24 + 860);
      v26 = *(_DWORD *)(v15 + 424);
      *(_DWORD *)buf = 136447490;
      *(_QWORD *)&buf[4] = "nw_http1_create_connection_for_stream_if_allowed";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v15 + 74;
      *(_WORD *)&buf[22] = 2080;
      v798 = (uint64_t)" ";
      *(_WORD *)v799 = 1024;
      *(_DWORD *)&v799[2] = v25;
      *(_WORD *)&v799[6] = 1024;
      *(_DWORD *)&v799[8] = v24;
      *(_WORD *)&v799[12] = 1024;
      *(_DWORD *)&v799[14] = v26;
      v23 = "%{public}s %{public}s%s<i%u:c%u:s%u> stream already has current connection, ignoring";
LABEL_42:
      v27 = v19;
      v28 = 50;
LABEL_43:
      _os_log_impl(&dword_182FBE000, v27, OS_LOG_TYPE_DEBUG, v23, buf, v28);
      return 1;
    }
    if (!*(_QWORD *)(v15 + 32))
    {
      if (*(_BYTE *)(v15 + 158) & 1 | (gLogDatapath == 0))
        return 1;
      v85 = __nwlog_obj();
      if (!os_log_type_enabled(v85, OS_LOG_TYPE_DEBUG))
        return 1;
      v86 = *(_QWORD *)(v15 + 256);
      v87 = *(_DWORD *)(*(_QWORD *)(v15 + 248) + 372);
      if (v86)
        LODWORD(v86) = *(_DWORD *)(v86 + 860);
      v88 = *(_DWORD *)(v15 + 424);
      *(_DWORD *)buf = 136447746;
      *(_QWORD *)&buf[4] = "nw_http1_create_connection_for_stream_if_allowed";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v15 + 74;
      *(_WORD *)&buf[22] = 2080;
      v798 = (uint64_t)" ";
      *(_WORD *)v799 = 1024;
      *(_DWORD *)&v799[2] = v87;
      *(_WORD *)&v799[6] = 1024;
      *(_DWORD *)&v799[8] = v86;
      *(_WORD *)&v799[12] = 1024;
      *(_DWORD *)&v799[14] = v88;
      *(_WORD *)&v799[18] = 2048;
      *(_QWORD *)&v799[20] = v15;
      v23 = "%{public}s %{public}s%s<i%u:c%u:s%u> Stream %p still awaiting new output handler";
      v27 = v85;
      v28 = 60;
      goto LABEL_43;
    }
    if (!(*(_BYTE *)(v15 + 158) & 1 | (gLogDatapath == 0)))
    {
      v539 = __nwlog_obj();
      if (os_log_type_enabled(v539, OS_LOG_TYPE_DEBUG))
      {
        v540 = *(_QWORD *)(v15 + 256);
        v541 = *(_DWORD *)(*(_QWORD *)(v15 + 248) + 372);
        if (v540)
          LODWORD(v540) = *(_DWORD *)(v540 + 860);
        v542 = *(_DWORD *)(v15 + 424);
        v543 = *(_QWORD *)(v15 + 32);
        *(_DWORD *)buf = 136448002;
        *(_QWORD *)&buf[4] = "nw_http1_create_connection_for_stream_if_allowed";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v15 + 74;
        *(_WORD *)&buf[22] = 2080;
        v798 = (uint64_t)" ";
        *(_WORD *)v799 = 1024;
        *(_DWORD *)&v799[2] = v541;
        *(_WORD *)&v799[6] = 1024;
        *(_DWORD *)&v799[8] = v540;
        *(_WORD *)&v799[12] = 1024;
        *(_DWORD *)&v799[14] = v542;
        *(_WORD *)&v799[18] = 2048;
        *(_QWORD *)&v799[20] = v15;
        *(_WORD *)&v799[28] = 2048;
        *(_QWORD *)&v799[30] = v543;
        _os_log_impl(&dword_182FBE000, v539, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> creating connection for stream %p with new output_handler %p", buf, 0x46u);
      }
    }
    v31 = *(_OWORD **)(v15 + 32);
    if (v31)
    {
      v32 = *(void **)(v15 + 336);
      if (v32)
      {
        v33 = *(void **)(v15 + 320);
        if (v33)
        {
          v34 = malloc_type_calloc(1uLL, 0x370uLL, 0xEAFB8F1AuLL);
          if (!v34)
          {
            v544 = __nwlog_obj();
            os_log_type_enabled(v544, OS_LOG_TYPE_ERROR);
            *(_DWORD *)buf = 136446722;
            *(_QWORD *)&buf[4] = "strict_calloc";
            *(_WORD *)&buf[12] = 2048;
            *(_QWORD *)&buf[14] = 1;
            *(_WORD *)&buf[22] = 2048;
            v798 = 880;
            v545 = (void *)_os_log_send_and_compose_impl();
            result = __nwlog_abort((uint64_t)v545);
            if (result)
              goto LABEL_1391;
            free(v545);
          }
          bzero(v34, 0x370uLL);
          if (nw_protocol_http1_identifier::onceToken != -1)
            dispatch_once(&nw_protocol_http1_identifier::onceToken, &__block_literal_global_39812);
          *((_QWORD *)v34 + 2) = &nw_protocol_http1_identifier::http1_protocol_identifier;
          if (nw_protocol_http1_get_callbacks(void)::onceToken[0] != -1)
            dispatch_once(nw_protocol_http1_get_callbacks(void)::onceToken, &__block_literal_global_17_39614);
          *((_QWORD *)v34 + 3) = &nw_protocol_http1_get_callbacks(void)::http1_protocol_callbacks;
          *((_DWORD *)v34 + 46) = 3;
          *((_QWORD *)v34 + 22) = v34;
          *((_QWORD *)v34 + 5) = v34 + 10;
          *((_QWORD *)v34 + 60) = v9;
          nw_protocol_set_output_handler((uint64_t)v34, (uint64_t)v31);
          v35 = os_retain(v32);
          v36 = *((_BYTE *)v34 + 760);
          if ((v36 & 1) != 0)
          {
            v37 = (void *)*((_QWORD *)v34 + 94);
            if (v37)
            {
              os_release(v37);
              v36 = *((_BYTE *)v34 + 760);
            }
          }
          *((_QWORD *)v34 + 94) = v35;
          *((_BYTE *)v34 + 760) = v36 | 1;
          v38 = os_retain(v33);
          v39 = *((_BYTE *)v34 + 744);
          if ((v39 & 1) != 0)
          {
            v40 = (void *)*((_QWORD *)v34 + 92);
            if (v40)
            {
              os_release(v40);
              v39 = *((_BYTE *)v34 + 744);
            }
          }
          *((_QWORD *)v34 + 92) = v38;
          *((_BYTE *)v34 + 744) = v39 | 1;
          v41 = v33;
          v42 = *(id *)(v41[13] + 136);

          v43 = *((_BYTE *)v34 + 504);
          if ((v43 & 1) != 0)
          {
            v44 = (void *)*((_QWORD *)v34 + 62);
            if (v44)
            {
              os_release(v44);
              v43 = *((_BYTE *)v34 + 504);
            }
          }
          *((_QWORD *)v34 + 62) = v42;
          *((_BYTE *)v34 + 504) = v43 | 1;
          v45 = MEMORY[0x1E0C809B0];
          *((_QWORD *)v34 + 24) = *(_QWORD *)(v9 + 192);
          *(_QWORD *)type = v45;
          v782 = 0x40000000;
          v783 = (uint64_t)___ZL26nw_http1_connection_createP11nw_protocolP17nw_protocol_http1P11nw_endpointP13nw_parameters_block_invoke;
          v784 = (uint64_t (*)(uint64_t, uint64_t))&__block_descriptor_tmp_40_39813;
          v785 = (void (*)(uint64_t))v34;
          metadata = nw_http_connection_create_metadata(v42, type, 0);
          v47 = *((_BYTE *)v34 + 776);
          if ((v47 & 1) != 0)
          {
            v48 = (void *)*((_QWORD *)v34 + 96);
            if (v48)
            {
              os_release(v48);
              v47 = *((_BYTE *)v34 + 776);
            }
          }
          *((_QWORD *)v34 + 96) = metadata;
          *((_BYTE *)v34 + 776) = v47 | 1;
          nw_http_connection_metadata_set_version(metadata, 3);
          nw_http_connection_metadata_set_shared_connection_pool_metadata(*((void **)v34 + 96), *(void **)(v9 + 312));
          *((_QWORD *)v34 + 77) = 0;
          *((_QWORD *)v34 + 78) = (char *)v34 + 616;
          *((_QWORD *)v34 + 79) = 0;
          *((_QWORD *)v34 + 80) = (char *)v34 + 632;
          *((_QWORD *)v34 + 81) = 0;
          *((_QWORD *)v34 + 82) = (char *)v34 + 648;
          *((_QWORD *)v34 + 83) = 0;
          *((_QWORD *)v34 + 84) = (char *)v34 + 664;
          *((_QWORD *)v34 + 86) = (char *)v34 + 680;
          *((_QWORD *)v34 + 85) = 0;
          nw_frame_cache_init((uint64_t)v34 + 696, (uint64_t)v34, 256, 0x40000, 16);
          v49 = *((_QWORD *)v34 + 60);
          if (v49)
          {
            *(_OWORD *)((char *)v34 + 360) = 0u;
            *(_OWORD *)((char *)v34 + 376) = 0u;
            *(_OWORD *)((char *)v34 + 392) = 0u;
            *(_OWORD *)((char *)v34 + 408) = 0u;
            *(_OWORD *)((char *)v34 + 424) = 0u;
            *(_OWORD *)((char *)v34 + 440) = 0u;
            *(_OWORD *)((char *)v34 + 328) = 0u;
            *(_OWORD *)((char *)v34 + 344) = 0u;
            *((_QWORD *)v34 + 59) = nw_http1_on_reset;
            *((_QWORD *)v34 + 37) = nw_http1_on_message_begin;
            *((_QWORD *)v34 + 38) = nw_http1_on_url;
            *((_QWORD *)v34 + 48) = nw_http1_on_message_complete;
            *((_QWORD *)v34 + 49) = nw_http1_on_url_complete;
            *((_QWORD *)v34 + 39) = nw_http1_on_status;
            *((_QWORD *)v34 + 40) = nw_http1_on_method;
            *((_QWORD *)v34 + 50) = nw_http1_on_status_complete;
            *((_QWORD *)v34 + 51) = nw_http1_on_method_complete;
            *((_QWORD *)v34 + 42) = nw_http1_on_header_field;
            *((_QWORD *)v34 + 43) = nw_http1_on_header_value;
            *((_QWORD *)v34 + 53) = nw_http1_on_header_field_complete;
            *((_QWORD *)v34 + 54) = nw_http1_on_header_value_complete;
            *((_QWORD *)v34 + 46) = nw_http1_on_headers_complete;
            *((_QWORD *)v34 + 47) = nw_http1_on_body;
            *((_QWORD *)v34 + 57) = nw_http1_on_chunk_header;
            *((_QWORD *)v34 + 58) = nw_http1_on_chunk_complete;
            v50 = *(_BYTE *)(v49 + 376);
            *(_OWORD *)((char *)v34 + 248) = 0u;
            *(_OWORD *)((char *)v34 + 200) = 0u;
            *(_OWORD *)((char *)v34 + 264) = 0u;
            *(_OWORD *)((char *)v34 + 232) = 0u;
            *(_OWORD *)((char *)v34 + 216) = 0u;
            if ((v50 & 1) != 0)
              v51 = 1;
            else
              v51 = 2;
            *((_BYTE *)v34 + 272) = v51;
            *((_QWORD *)v34 + 35) = 0;
            *((_QWORD *)v34 + 36) = (char *)v34 + 296;
            *((_WORD *)v34 + 139) = 15619;
            *((_QWORD *)v34 + 31) = v34;
            *((_QWORD *)v34 + 32) = 238;
            if ((*((_BYTE *)v34 + 158) & 1) == 0)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v52 = gLogObj;
              if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
              {
                v53 = *((_QWORD *)v34 + 61);
                v54 = *(_DWORD *)(*((_QWORD *)v34 + 60) + 372);
                v55 = *((_DWORD *)v34 + 215);
                if (v53)
                  LODWORD(v53) = *(_DWORD *)(v53 + 424);
                *(_DWORD *)buf = 136448258;
                *(_QWORD *)&buf[4] = "nw_http1_connection_log_parser_version";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = (char *)v34 + 74;
                *(_WORD *)&buf[22] = 2080;
                v798 = (uint64_t)" ";
                *(_WORD *)v799 = 1024;
                *(_DWORD *)&v799[2] = v54;
                *(_WORD *)&v799[6] = 1024;
                *(_DWORD *)&v799[8] = v55;
                *(_WORD *)&v799[12] = 1024;
                *(_DWORD *)&v799[14] = v53;
                *(_WORD *)&v799[18] = 1024;
                *(_DWORD *)&v799[20] = 9;
                *(_WORD *)&v799[24] = 1024;
                *(_DWORD *)&v799[26] = 2;
                *(_WORD *)&v799[30] = 1024;
                *(_DWORD *)&v799[32] = 1;
                _os_log_impl(&dword_182FBE000, v52, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> using http parser v%u.%u.%u", buf, 0x44u);
              }
            }
            goto LABEL_79;
          }
          v546 = v31;
          __nwlog_obj();
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http1_connection_parser_init";
          v547 = (char *)_os_log_send_and_compose_impl();
          v792[0] = 16;
          LOBYTE(v773[0]) = 0;
          if (__nwlog_fault(v547, v792, v773))
          {
            if (v792[0] == 17)
            {
              v548 = __nwlog_obj();
              v549 = v792[0];
              if (os_log_type_enabled(v548, (os_log_type_t)v792[0]))
              {
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_http1_connection_parser_init";
                v550 = "%{public}s called with null http1_connection->protocol_http1";
LABEL_1044:
                _os_log_impl(&dword_182FBE000, v548, v549, v550, buf, 0xCu);
              }
            }
            else if (LOBYTE(v773[0]))
            {
              v577 = (char *)__nw_create_backtrace_string();
              v548 = __nwlog_obj();
              v549 = v792[0];
              v578 = os_log_type_enabled(v548, (os_log_type_t)v792[0]);
              if (v577)
              {
                if (v578)
                {
                  *(_DWORD *)buf = 136446466;
                  *(_QWORD *)&buf[4] = "nw_http1_connection_parser_init";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = v577;
                  _os_log_impl(&dword_182FBE000, v548, v549, "%{public}s called with null http1_connection->protocol_http1, dumping backtrace:%{public}s", buf, 0x16u);
                }
                free(v577);
                goto LABEL_1045;
              }
              if (v578)
              {
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_http1_connection_parser_init";
                v550 = "%{public}s called with null http1_connection->protocol_http1, no backtrace";
                goto LABEL_1044;
              }
            }
            else
            {
              v548 = __nwlog_obj();
              v549 = v792[0];
              if (os_log_type_enabled(v548, (os_log_type_t)v792[0]))
              {
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_http1_connection_parser_init";
                v550 = "%{public}s called with null http1_connection->protocol_http1, backtrace limit exceeded";
                goto LABEL_1044;
              }
            }
          }
LABEL_1045:
          if (v547)
            free(v547);
          v31 = v546;
LABEL_79:
          *(_QWORD *)buf = 0;
          *(_QWORD *)&buf[8] = buf;
          *(_QWORD *)&buf[16] = 0x2000000000;
          v798 = (uint64_t)v34;
          aBlock = v45;
          v775 = 0x40000000;
          v776 = ___ZL26nw_http1_connection_createP11nw_protocolP17nw_protocol_http1P11nw_endpointP13nw_parameters_block_invoke_2;
          v777 = &unk_1E14A14C8;
          v778 = (uint64_t *)buf;
          *((_QWORD *)v34 + 76) = _Block_copy(&aBlock);
          _Block_object_dispose(buf, 8);
          if ((*((_BYTE *)v34 + 158) & 1) == 0)
          {
            if (gLogDatapath)
            {
              v560 = __nwlog_obj();
              if (os_log_type_enabled(v560, OS_LOG_TYPE_DEBUG))
              {
                v561 = *((_QWORD *)v34 + 61);
                v562 = *(_DWORD *)(*((_QWORD *)v34 + 60) + 372);
                v563 = *((_DWORD *)v34 + 215);
                if (v561)
                  LODWORD(v561) = *(_DWORD *)(v561 + 424);
                *(_DWORD *)buf = 136447746;
                *(_QWORD *)&buf[4] = "nw_http1_connection_create";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = (char *)v34 + 74;
                *(_WORD *)&buf[22] = 2080;
                v798 = (uint64_t)" ";
                *(_WORD *)v799 = 1024;
                *(_DWORD *)&v799[2] = v562;
                *(_WORD *)&v799[6] = 1024;
                *(_DWORD *)&v799[8] = v563;
                *(_WORD *)&v799[12] = 1024;
                *(_DWORD *)&v799[14] = v561;
                *(_WORD *)&v799[18] = 2048;
                *(_QWORD *)&v799[20] = v34;
                _os_log_impl(&dword_182FBE000, v560, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> created %p", buf, 0x3Cu);
              }
            }
          }
          v56 = (NSObject **)(v34 + 32);
          nw_protocol_replace_input_handler((uint64_t)v31, v15, (uint64_t)v34);
          *v34 = *v31;
          v57 = (void *)*((_QWORD *)v34 + 92);
          if (v57)
          {
            if (!*((_QWORD *)v34 + 66))
            {
              v765 = v31;
              v58 = (void **)(v34 + 35);
              v59 = nw_parameters_copy_context(v57);
              *(_QWORD *)buf = nw_path_copy_flow_registration(v59, (uint64_t)v34);
              nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v34 + 35), buf);
              v60 = (void *)*((_QWORD *)v34 + 70);
              if (v60)
              {
                v61 = nw_path_flow_registration_copy_endpoint(v60);
                v62 = nw_path_flow_registration_copy_parameters(*v58);
                *(_QWORD *)buf = nw_endpoint_copy_association_with_evaluator(v61, v62, 0);
                nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v34 + 33), buf);
                if (*((_QWORD *)v34 + 66))
                {
                  *(_QWORD *)buf = nw_protocol_instance_stub_create((nw_protocol *)v34);
                  nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v34 + 34), buf);
                  nw_association_register(*((void **)v34 + 66), v57, *((void **)v34 + 68), 0, &__block_literal_global_70_39832);
                  v63 = nw_association_copy_current_path(*((void **)v34 + 66), v62);
                  if (v63)
                  {
                    v64 = v63;
                    v65 = nw_path_copy_for_flow_registration(v63, *v58);
                    if (v65)
                    {
                      v66 = v65;
                      if (*v56 != v65)
                      {
                        *(_QWORD *)buf = os_retain(v65);
                        nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v34 + 32), buf);
                      }
                      if (nw_path_has_flows(v66))
                        v67 = 4096;
                      else
                        v67 = 0;
                      v68 = *((_WORD *)v34 + 436) & 0xEFFF | (*((unsigned __int8 *)v34 + 874) << 16);
                      *((_WORD *)v34 + 436) = *((_WORD *)v34 + 436) & 0xEFFF | v67;
                      *((_BYTE *)v34 + 874) = BYTE2(v68);
                      v69 = nw_parameters_copy_effective_proxy_config(v57);
                      if (v69)
                      {
                        v70 = v69;
                        if (nw_path_has_proxy_config(v64, v69))
                        {
                          *(_QWORD *)buf = os_retain(v70);
                          nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v34 + 36), buf);
                        }
                        os_release(v70);
                      }
                      os_release(v66);
                    }
                    os_release(v64);
                  }
                }
                if (v62)
                  os_release(v62);
                if (v61)
                  os_release(v61);
              }
              v31 = v765;
              if (v59)
                os_release(v59);
            }
            v71 = *v56;
            if (*v56)
            {
LABEL_105:
              if (nw_path_uses_interface_type(v71, nw_interface_type_cellular))
                *((_QWORD *)v34 + 24) = 1000;
            }
LABEL_107:
            v72 = *(unsigned int *)(v9 + 336) + 1;
            v73 = v72 << 31 >> 31;
            *(_DWORD *)(v9 + 336) = v72;
            if (v73 == v72 && (v73 & 0x8000000000000000) == 0)
              goto LABEL_259;
            __nwlog_obj();
            v74 = *(unsigned int *)(v9 + 336);
            *(_DWORD *)buf = 136446978;
            *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = "http1->connections_count";
            *(_WORD *)&buf[22] = 2048;
            v798 = 1;
            *(_WORD *)v799 = 2048;
            *(_QWORD *)&v799[2] = v74;
            v75 = (char *)_os_log_send_and_compose_impl();
            type[0] = OS_LOG_TYPE_ERROR;
            LOBYTE(aBlock) = 0;
            if (__nwlog_fault(v75, type, &aBlock))
            {
              if (type[0] == OS_LOG_TYPE_FAULT)
              {
                v76 = __nwlog_obj();
                v77 = type[0];
                if (os_log_type_enabled(v76, type[0]))
                {
                  v78 = *(unsigned int *)(v9 + 336);
                  *(_DWORD *)buf = 136446978;
                  *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = "http1->connections_count";
                  *(_WORD *)&buf[22] = 2048;
                  v798 = 1;
                  *(_WORD *)v799 = 2048;
                  *(_QWORD *)&v799[2] = v78;
                  v79 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_255:
                  _os_log_impl(&dword_182FBE000, v76, v77, v79, buf, 0x2Au);
                }
              }
              else if ((_BYTE)aBlock)
              {
                v114 = v31;
                v115 = (char *)__nw_create_backtrace_string();
                v76 = __nwlog_obj();
                v77 = type[0];
                v116 = os_log_type_enabled(v76, type[0]);
                if (v115)
                {
                  if (v116)
                  {
                    v117 = *(unsigned int *)(v9 + 336);
                    *(_DWORD *)buf = 136447234;
                    *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
                    *(_WORD *)&buf[12] = 2082;
                    *(_QWORD *)&buf[14] = "http1->connections_count";
                    *(_WORD *)&buf[22] = 2048;
                    v798 = 1;
                    *(_WORD *)v799 = 2048;
                    *(_QWORD *)&v799[2] = v117;
                    *(_WORD *)&v799[10] = 2082;
                    *(_QWORD *)&v799[12] = v115;
                    _os_log_impl(&dword_182FBE000, v76, v77, "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
                  }
                  free(v115);
                  v31 = v114;
                  goto LABEL_256;
                }
                v31 = v114;
                if (v116)
                {
                  v177 = *(unsigned int *)(v9 + 336);
                  *(_DWORD *)buf = 136446978;
                  *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = "http1->connections_count";
                  *(_WORD *)&buf[22] = 2048;
                  v798 = 1;
                  *(_WORD *)v799 = 2048;
                  *(_QWORD *)&v799[2] = v177;
                  v79 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
                  goto LABEL_255;
                }
              }
              else
              {
                v76 = __nwlog_obj();
                v77 = type[0];
                if (os_log_type_enabled(v76, type[0]))
                {
                  v132 = *(unsigned int *)(v9 + 336);
                  *(_DWORD *)buf = 136446978;
                  *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = "http1->connections_count";
                  *(_WORD *)&buf[22] = 2048;
                  v798 = 1;
                  *(_WORD *)v799 = 2048;
                  *(_QWORD *)&v799[2] = v132;
                  v79 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
                  goto LABEL_255;
                }
              }
            }
LABEL_256:
            if (v75)
              free(v75);
            *(_DWORD *)(v9 + 336) = -1;
LABEL_259:
            v178 = *(unsigned int *)(v9 + 360) + 1;
            v179 = v178 << 31 >> 31;
            *(_DWORD *)(v9 + 360) = v178;
            if (v179 == v178 && (v179 & 0x8000000000000000) == 0)
              goto LABEL_278;
            __nwlog_obj();
            v180 = *(unsigned int *)(v9 + 360);
            *(_DWORD *)buf = 136446978;
            *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = "http1->next_connection_log_num";
            *(_WORD *)&buf[22] = 2048;
            v798 = 1;
            *(_WORD *)v799 = 2048;
            *(_QWORD *)&v799[2] = v180;
            v181 = (char *)_os_log_send_and_compose_impl();
            type[0] = OS_LOG_TYPE_ERROR;
            LOBYTE(aBlock) = 0;
            if (__nwlog_fault(v181, type, &aBlock))
            {
              if (type[0] == OS_LOG_TYPE_FAULT)
              {
                v182 = __nwlog_obj();
                v183 = type[0];
                if (os_log_type_enabled(v182, type[0]))
                {
                  v184 = *(unsigned int *)(v9 + 360);
                  *(_DWORD *)buf = 136446978;
                  *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = "http1->next_connection_log_num";
                  *(_WORD *)&buf[22] = 2048;
                  v798 = 1;
                  *(_WORD *)v799 = 2048;
                  *(_QWORD *)&v799[2] = v184;
                  v185 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_274:
                  _os_log_impl(&dword_182FBE000, v182, v183, v185, buf, 0x2Au);
                }
              }
              else if ((_BYTE)aBlock)
              {
                v186 = v31;
                v187 = (char *)__nw_create_backtrace_string();
                v182 = __nwlog_obj();
                v183 = type[0];
                v188 = os_log_type_enabled(v182, type[0]);
                if (v187)
                {
                  if (v188)
                  {
                    v189 = *(unsigned int *)(v9 + 360);
                    *(_DWORD *)buf = 136447234;
                    *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
                    *(_WORD *)&buf[12] = 2082;
                    *(_QWORD *)&buf[14] = "http1->next_connection_log_num";
                    *(_WORD *)&buf[22] = 2048;
                    v798 = 1;
                    *(_WORD *)v799 = 2048;
                    *(_QWORD *)&v799[2] = v189;
                    *(_WORD *)&v799[10] = 2082;
                    *(_QWORD *)&v799[12] = v187;
                    _os_log_impl(&dword_182FBE000, v182, v183, "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
                  }
                  free(v187);
                  v31 = v186;
                  goto LABEL_275;
                }
                v31 = v186;
                if (v188)
                {
                  v191 = *(unsigned int *)(v9 + 360);
                  *(_DWORD *)buf = 136446978;
                  *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = "http1->next_connection_log_num";
                  *(_WORD *)&buf[22] = 2048;
                  v798 = 1;
                  *(_WORD *)v799 = 2048;
                  *(_QWORD *)&v799[2] = v191;
                  v185 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
                  goto LABEL_274;
                }
              }
              else
              {
                v182 = __nwlog_obj();
                v183 = type[0];
                if (os_log_type_enabled(v182, type[0]))
                {
                  v190 = *(unsigned int *)(v9 + 360);
                  *(_DWORD *)buf = 136446978;
                  *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = "http1->next_connection_log_num";
                  *(_WORD *)&buf[22] = 2048;
                  v798 = 1;
                  *(_WORD *)v799 = 2048;
                  *(_QWORD *)&v799[2] = v190;
                  v185 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
                  goto LABEL_274;
                }
              }
            }
LABEL_275:
            if (v181)
              free(v181);
            LODWORD(v178) = -1;
            *(_DWORD *)(v9 + 360) = -1;
LABEL_278:
            *((_DWORD *)v34 + 215) = v178;
            if ((*((_BYTE *)v34 + 158) & 1) == 0)
            {
              if (gLogDatapath)
              {
                v564 = __nwlog_obj();
                if (os_log_type_enabled(v564, OS_LOG_TYPE_DEBUG))
                {
                  v565 = *((_QWORD *)v34 + 61);
                  v566 = *(_DWORD *)(*((_QWORD *)v34 + 60) + 372);
                  v567 = *((_DWORD *)v34 + 215);
                  if (v565)
                    LODWORD(v565) = *(_DWORD *)(v565 + 424);
                  v568 = *(_DWORD *)(v9 + 336);
                  *(_DWORD *)buf = 136448002;
                  *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = (char *)v34 + 74;
                  *(_WORD *)&buf[22] = 2080;
                  v798 = (uint64_t)" ";
                  *(_WORD *)v799 = 1024;
                  *(_DWORD *)&v799[2] = v566;
                  *(_WORD *)&v799[6] = 1024;
                  *(_DWORD *)&v799[8] = v567;
                  *(_WORD *)&v799[12] = 1024;
                  *(_DWORD *)&v799[14] = v565;
                  *(_WORD *)&v799[18] = 2048;
                  *(_QWORD *)&v799[20] = v34;
                  *(_WORD *)&v799[28] = 1024;
                  *(_DWORD *)&v799[30] = v568;
                  _os_log_impl(&dword_182FBE000, v564, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> added connection %p, now have %u connections", buf, 0x42u);
                }
              }
            }
            if (*(_QWORD *)(v15 + 248))
            {
              if (!*((_QWORD *)v34 + 61))
              {
                *(_QWORD *)(v15 + 256) = v34;
                *((_QWORD *)v34 + 61) = v15;
                nw_protocol_set_output_handler(v15, *((_QWORD *)v34 + 4));
                nw_protocol_set_input_handler((uint64_t)v34, *(_QWORD *)(v15 + 48));
                *(_OWORD *)v15 = *v34;
                v198 = *(_OWORD *)(v15 + 144);
                v200 = *(_OWORD *)(v15 + 96);
                v199 = *(_OWORD *)(v15 + 112);
                v34[8] = *(_OWORD *)(v15 + 128);
                v34[9] = v198;
                v34[6] = v200;
                v34[7] = v199;
                v201 = *(_OWORD *)(v15 + 80);
                v34[4] = *(_OWORD *)(v15 + 64);
                v34[5] = v201;
                nw_http_transaction_metadata_set_connection_metadata(*(void **)(v15 + 352), *((void **)v34 + 96));
                *((_WORD *)v34 + 436) &= 0xFFD7u;
                *((_DWORD *)v34 + 216) = 1;
                if ((*((_BYTE *)v34 + 158) & 1) == 0)
                {
                  v202 = __nwlog_obj();
                  if (os_log_type_enabled(v202, OS_LOG_TYPE_DEBUG))
                  {
                    v203 = *((_QWORD *)v34 + 61);
                    v204 = *(_DWORD *)(*((_QWORD *)v34 + 60) + 372);
                    v205 = *((_DWORD *)v34 + 215);
                    if (v203)
                      LODWORD(v203) = *(_DWORD *)(v203 + 424);
                    *(_DWORD *)buf = 136447490;
                    *(_QWORD *)&buf[4] = "nw_http1_update_connection_input_state";
                    *(_WORD *)&buf[12] = 2082;
                    *(_QWORD *)&buf[14] = (char *)v34 + 74;
                    *(_WORD *)&buf[22] = 2080;
                    v798 = (uint64_t)" ";
                    *(_WORD *)v799 = 1024;
                    *(_DWORD *)&v799[2] = v204;
                    *(_WORD *)&v799[6] = 1024;
                    *(_DWORD *)&v799[8] = v205;
                    *(_WORD *)&v799[12] = 1024;
                    *(_DWORD *)&v799[14] = v203;
                    _os_log_impl(&dword_182FBE000, v202, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> connection input state: reading", buf, 0x32u);
                  }
                }
                if ((*(_BYTE *)(v15 + 158) & 1) == 0)
                {
                  v206 = __nwlog_obj();
                  if (os_log_type_enabled(v206, OS_LOG_TYPE_INFO))
                  {
                    v207 = *(_QWORD *)(v15 + 256);
                    v208 = *(_DWORD *)(*(_QWORD *)(v15 + 248) + 372);
                    if (v207)
                      LODWORD(v207) = *(_DWORD *)(v207 + 860);
                    v209 = *(_DWORD *)(v15 + 424);
                    *(_DWORD *)buf = 136448002;
                    *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                    *(_WORD *)&buf[12] = 2082;
                    *(_QWORD *)&buf[14] = v15 + 74;
                    *(_WORD *)&buf[22] = 2080;
                    v798 = (uint64_t)" ";
                    *(_WORD *)v799 = 1024;
                    *(_DWORD *)&v799[2] = v208;
                    *(_WORD *)&v799[6] = 1024;
                    *(_DWORD *)&v799[8] = v207;
                    *(_WORD *)&v799[12] = 1024;
                    *(_DWORD *)&v799[14] = v209;
                    *(_WORD *)&v799[18] = 2048;
                    *(_QWORD *)&v799[20] = v15;
                    *(_WORD *)&v799[28] = 2048;
                    *(_QWORD *)&v799[30] = v34;
                    _os_log_impl(&dword_182FBE000, v206, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s<i%u:c%u:s%u> stream (%p) now using connection %p", buf, 0x46u);
                    if ((*(_BYTE *)(v15 + 158) & 1) != 0)
                    {
LABEL_314:
                      nw_http_transaction_metadata_set_first_on_connection(*(void **)(v15 + 352));
                      v220 = (void *)nw_protocol_boringssl_copy_definition();
                      identifier = nw_protocol_definition_get_identifier(v220);
                      v222 = (_QWORD *)nw_protocol_get_identifier((uint64_t)v31);
                      v223 = nw_protocols_are_equal(identifier, v222);
                      if (v220)
                        os_release(v220);
                      if (v223)
                      {
                        v224 = nw_protocol_copy_info((uint64_t)v31, 255);
                        if (v224)
                        {
                          v225 = (void *)v224;
                          v226 = *(_QWORD *)(v224 + 24);
                          if (*(_QWORD *)(v224 + 16) != v226)
                          {
                            v227 = *(void **)(v226 - 8);
                            if (v227)
                            {
                              v228 = os_retain(v227);
                              if (v228)
                              {
                                v229 = v228;
                                if (nw_protocol_metadata_is_tls(v228))
                                {
                                  v230 = v229;
                                  nw_http_connection_metadata_set_sec_metadata(*((void **)v34 + 96), v230);
                                  os_release(v230);
                                }
                                os_release(v229);
                              }
                            }
                          }
                          os_release(v225);
                        }
                      }
                      if (v34)
                      {
                        nw_protocol_connect((uint64_t)v31, (uint64_t)v34);
                        goto LABEL_327;
                      }
                      __nwlog_obj();
                      *(_DWORD *)buf = 136446210;
                      *(_QWORD *)&buf[4] = "nw_http1_get_output_protocol";
                      v534 = (char *)_os_log_send_and_compose_impl();
                      type[0] = OS_LOG_TYPE_ERROR;
                      LOBYTE(aBlock) = 0;
                      if (__nwlog_fault(v534, type, &aBlock))
                      {
                        if (type[0] == OS_LOG_TYPE_FAULT)
                        {
                          v535 = __nwlog_obj();
                          v536 = type[0];
                          if (os_log_type_enabled(v535, type[0]))
                          {
                            *(_DWORD *)buf = 136446210;
                            *(_QWORD *)&buf[4] = "nw_http1_get_output_protocol";
                            v537 = "%{public}s called with null connection";
LABEL_996:
                            _os_log_impl(&dword_182FBE000, v535, v536, v537, buf, 0xCu);
                          }
                        }
                        else if ((_BYTE)aBlock)
                        {
                          v571 = (char *)__nw_create_backtrace_string();
                          v535 = __nwlog_obj();
                          v536 = type[0];
                          v572 = os_log_type_enabled(v535, type[0]);
                          if (v571)
                          {
                            if (v572)
                            {
                              *(_DWORD *)buf = 136446466;
                              *(_QWORD *)&buf[4] = "nw_http1_get_output_protocol";
                              *(_WORD *)&buf[12] = 2082;
                              *(_QWORD *)&buf[14] = v571;
                              _os_log_impl(&dword_182FBE000, v535, v536, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
                            }
                            free(v571);
                            goto LABEL_997;
                          }
                          if (v572)
                          {
                            *(_DWORD *)buf = 136446210;
                            *(_QWORD *)&buf[4] = "nw_http1_get_output_protocol";
                            v537 = "%{public}s called with null connection, no backtrace";
                            goto LABEL_996;
                          }
                        }
                        else
                        {
                          v535 = __nwlog_obj();
                          v536 = type[0];
                          if (os_log_type_enabled(v535, type[0]))
                          {
                            *(_DWORD *)buf = 136446210;
                            *(_QWORD *)&buf[4] = "nw_http1_get_output_protocol";
                            v537 = "%{public}s called with null connection, backtrace limit exceeded";
                            goto LABEL_996;
                          }
                        }
                      }
LABEL_997:
                      if (v534)
                        free(v534);
                      nw_protocol_connect((uint64_t)v31, 0);
LABEL_327:
                      nw_protocol_set_output_handler(v9, 0);
                      *(_WORD *)(v15 + 428) &= ~8u;
                      v231 = *(_DWORD *)(v9 + 352);
                      *(_DWORD *)(v9 + 352) = v231 - 1;
                      if (v231)
                        return 1;
                      __nwlog_obj();
                      v232 = *(unsigned int *)(v9 + 352);
                      *(_DWORD *)buf = 136446978;
                      *(_QWORD *)&buf[4] = "nw_http1_create_connection_for_stream_if_allowed";
                      *(_WORD *)&buf[12] = 2082;
                      *(_QWORD *)&buf[14] = "http1->pending_output_handler_count";
                      *(_WORD *)&buf[22] = 2048;
                      v798 = 1;
                      *(_WORD *)v799 = 2048;
                      *(_QWORD *)&v799[2] = v232;
                      v233 = (char *)_os_log_send_and_compose_impl();
                      type[0] = OS_LOG_TYPE_ERROR;
                      LOBYTE(aBlock) = 0;
                      if (__nwlog_fault(v233, type, &aBlock))
                      {
                        if (type[0] == OS_LOG_TYPE_FAULT)
                          goto LABEL_330;
                        if (!(_BYTE)aBlock)
                        {
LABEL_586:
                          v234 = __nwlog_obj();
                          v235 = type[0];
                          if (!os_log_type_enabled(v234, type[0]))
                            goto LABEL_591;
                          v393 = *(unsigned int *)(v9 + 352);
                          *(_DWORD *)buf = 136446978;
                          *(_QWORD *)&buf[4] = "nw_http1_create_connection_for_stream_if_allowed";
                          *(_WORD *)&buf[12] = 2082;
                          *(_QWORD *)&buf[14] = "http1->pending_output_handler_count";
                          *(_WORD *)&buf[22] = 2048;
                          v798 = 1;
                          *(_WORD *)v799 = 2048;
                          *(_QWORD *)&v799[2] = v393;
                          v237 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, backtrace limit exceeded";
                          goto LABEL_590;
                        }
                        v238 = (char *)__nw_create_backtrace_string();
                        v234 = __nwlog_obj();
                        v235 = type[0];
                        v239 = os_log_type_enabled(v234, type[0]);
                        if (!v238)
                        {
LABEL_588:
                          if (!v239)
                            goto LABEL_591;
                          v394 = *(unsigned int *)(v9 + 352);
                          *(_DWORD *)buf = 136446978;
                          *(_QWORD *)&buf[4] = "nw_http1_create_connection_for_stream_if_allowed";
                          *(_WORD *)&buf[12] = 2082;
                          *(_QWORD *)&buf[14] = "http1->pending_output_handler_count";
                          *(_WORD *)&buf[22] = 2048;
                          v798 = 1;
                          *(_WORD *)v799 = 2048;
                          *(_QWORD *)&v799[2] = v394;
                          v237 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, no backtrace";
                          goto LABEL_590;
                        }
                        if (v239)
                        {
                          v240 = *(unsigned int *)(v9 + 352);
                          *(_DWORD *)buf = 136447234;
                          *(_QWORD *)&buf[4] = "nw_http1_create_connection_for_stream_if_allowed";
                          *(_WORD *)&buf[12] = 2082;
                          *(_QWORD *)&buf[14] = "http1->pending_output_handler_count";
                          *(_WORD *)&buf[22] = 2048;
                          v798 = 1;
                          *(_WORD *)v799 = 2048;
                          *(_QWORD *)&v799[2] = v240;
                          *(_WORD *)&v799[10] = 2082;
                          *(_QWORD *)&v799[12] = v238;
                          _os_log_impl(&dword_182FBE000, v234, v235, "%{public}s Underflow: %{public}s, decrement %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
                        }
                        free(v238);
                      }
LABEL_591:
                      if (!v233)
                      {
LABEL_593:
                        *(_DWORD *)(v9 + 352) = 0;
                        return 1;
                      }
LABEL_592:
                      free(v233);
                      goto LABEL_593;
                    }
LABEL_310:
                    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                    networkd_settings_init();
                    v216 = gLogObj;
                    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
                    {
                      v217 = *(_QWORD *)(v15 + 256);
                      v218 = *(_DWORD *)(*(_QWORD *)(v15 + 248) + 372);
                      if (v217)
                        LODWORD(v217) = *(_DWORD *)(v217 + 860);
                      v219 = *(_DWORD *)(v15 + 424);
                      *(_DWORD *)buf = 136448258;
                      *(_QWORD *)&buf[4] = "nw_http1_start_new_connection_for_stream";
                      *(_WORD *)&buf[12] = 2082;
                      *(_QWORD *)&buf[14] = v15 + 74;
                      *(_WORD *)&buf[22] = 2080;
                      v798 = (uint64_t)" ";
                      *(_WORD *)v799 = 1024;
                      *(_DWORD *)&v799[2] = v218;
                      *(_WORD *)&v799[6] = 1024;
                      *(_DWORD *)&v799[8] = v217;
                      *(_WORD *)&v799[12] = 1024;
                      *(_DWORD *)&v799[14] = v219;
                      *(_WORD *)&v799[18] = 2048;
                      *(_QWORD *)&v799[20] = v34;
                      *(_WORD *)&v799[28] = 1024;
                      *(_DWORD *)&v799[30] = v219;
                      *(_WORD *)&v799[34] = 2048;
                      *(_QWORD *)&v799[36] = v15;
                      _os_log_impl(&dword_182FBE000, v216, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> created new connection %p for stream %u (%p)", buf, 0x4Cu);
                    }
                    goto LABEL_314;
                  }
                }
LABEL_309:
                if ((*(_BYTE *)(v15 + 158) & 1) != 0)
                  goto LABEL_314;
                goto LABEL_310;
              }
              __nwlog_obj();
              v192 = *((_QWORD *)v34 + 61);
              *(_DWORD *)buf = 136446722;
              *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
              *(_WORD *)&buf[12] = 2048;
              *(_QWORD *)&buf[14] = v34;
              *(_WORD *)&buf[22] = 2048;
              v798 = v192;
              v193 = (char *)_os_log_send_and_compose_impl();
              type[0] = OS_LOG_TYPE_ERROR;
              LOBYTE(aBlock) = 0;
              if (__nwlog_fault(v193, type, &aBlock))
              {
                if (type[0] == OS_LOG_TYPE_FAULT)
                {
                  v194 = __nwlog_obj();
                  v195 = type[0];
                  if (!os_log_type_enabled(v194, type[0]))
                    goto LABEL_307;
                  v196 = *((_QWORD *)v34 + 61);
                  *(_DWORD *)buf = 136446722;
                  *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                  *(_WORD *)&buf[12] = 2048;
                  *(_QWORD *)&buf[14] = v34;
                  *(_WORD *)&buf[22] = 2048;
                  v798 = v196;
                  v197 = "%{public}s Connection %p already has a stream (%p)";
                  goto LABEL_306;
                }
                if (!(_BYTE)aBlock)
                {
                  v194 = __nwlog_obj();
                  v195 = type[0];
                  if (!os_log_type_enabled(v194, type[0]))
                    goto LABEL_307;
                  v214 = *((_QWORD *)v34 + 61);
                  *(_DWORD *)buf = 136446722;
                  *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                  *(_WORD *)&buf[12] = 2048;
                  *(_QWORD *)&buf[14] = v34;
                  *(_WORD *)&buf[22] = 2048;
                  v798 = v214;
                  v197 = "%{public}s Connection %p already has a stream (%p), backtrace limit exceeded";
                  goto LABEL_306;
                }
                v210 = v31;
                v211 = (char *)__nw_create_backtrace_string();
                v194 = __nwlog_obj();
                v195 = type[0];
                v212 = os_log_type_enabled(v194, type[0]);
                if (v211)
                {
                  if (v212)
                  {
                    v213 = *((_QWORD *)v34 + 61);
                    *(_DWORD *)buf = 136446978;
                    *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                    *(_WORD *)&buf[12] = 2048;
                    *(_QWORD *)&buf[14] = v34;
                    *(_WORD *)&buf[22] = 2048;
                    v798 = v213;
                    *(_WORD *)v799 = 2082;
                    *(_QWORD *)&v799[2] = v211;
                    _os_log_impl(&dword_182FBE000, v194, v195, "%{public}s Connection %p already has a stream (%p), dumping backtrace:%{public}s", buf, 0x2Au);
                  }
                  free(v211);
                  v31 = v210;
                  goto LABEL_307;
                }
                v31 = v210;
                if (v212)
                {
                  v215 = *((_QWORD *)v34 + 61);
                  *(_DWORD *)buf = 136446722;
                  *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                  *(_WORD *)&buf[12] = 2048;
                  *(_QWORD *)&buf[14] = v34;
                  *(_WORD *)&buf[22] = 2048;
                  v798 = v215;
                  v197 = "%{public}s Connection %p already has a stream (%p), no backtrace";
LABEL_306:
                  _os_log_impl(&dword_182FBE000, v194, v195, v197, buf, 0x20u);
                }
              }
LABEL_307:
              if (v193)
                free(v193);
              goto LABEL_309;
            }
            v529 = v31;
            __nwlog_obj();
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
            v556 = (char *)_os_log_send_and_compose_impl();
            type[0] = OS_LOG_TYPE_ERROR;
            LOBYTE(aBlock) = 0;
            if (!__nwlog_fault(v556, type, &aBlock))
              goto LABEL_1058;
            if (type[0] == OS_LOG_TYPE_FAULT)
            {
              v557 = __nwlog_obj();
              v558 = type[0];
              if (!os_log_type_enabled(v557, type[0]))
                goto LABEL_1058;
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
              v559 = "%{public}s called with null http1_stream->protocol_http1";
            }
            else if ((_BYTE)aBlock)
            {
              v581 = (char *)__nw_create_backtrace_string();
              v557 = __nwlog_obj();
              v558 = type[0];
              v582 = os_log_type_enabled(v557, type[0]);
              if (v581)
              {
                if (v582)
                {
                  *(_DWORD *)buf = 136446466;
                  *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = v581;
                  _os_log_impl(&dword_182FBE000, v557, v558, "%{public}s called with null http1_stream->protocol_http1, dumping backtrace:%{public}s", buf, 0x16u);
                }
                free(v581);
                goto LABEL_1058;
              }
              if (!v582)
              {
LABEL_1058:
                if (v556)
                  free(v556);
                goto LABEL_1040;
              }
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
              v559 = "%{public}s called with null http1_stream->protocol_http1, no backtrace";
            }
            else
            {
              v557 = __nwlog_obj();
              v558 = type[0];
              if (!os_log_type_enabled(v557, type[0]))
                goto LABEL_1058;
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
              v559 = "%{public}s called with null http1_stream->protocol_http1, backtrace limit exceeded";
            }
            _os_log_impl(&dword_182FBE000, v557, v558, v559, buf, 0xCu);
            goto LABEL_1058;
          }
          v551 = v31;
          __nwlog_obj();
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_protocol_http1_set_up_association";
          v552 = (char *)_os_log_send_and_compose_impl();
          type[0] = OS_LOG_TYPE_ERROR;
          LOBYTE(aBlock) = 0;
          if (__nwlog_fault(v552, type, &aBlock))
          {
            if (type[0] == OS_LOG_TYPE_FAULT)
            {
              v553 = __nwlog_obj();
              v554 = type[0];
              if (!os_log_type_enabled(v553, type[0]))
                goto LABEL_1051;
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_protocol_http1_set_up_association";
              v555 = "%{public}s called with null parameters";
LABEL_1050:
              _os_log_impl(&dword_182FBE000, v553, v554, v555, buf, 0xCu);
              goto LABEL_1051;
            }
            if (!(_BYTE)aBlock)
            {
              v553 = __nwlog_obj();
              v554 = type[0];
              if (!os_log_type_enabled(v553, type[0]))
                goto LABEL_1051;
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_protocol_http1_set_up_association";
              v555 = "%{public}s called with null parameters, backtrace limit exceeded";
              goto LABEL_1050;
            }
            v579 = (char *)__nw_create_backtrace_string();
            v553 = __nwlog_obj();
            v554 = type[0];
            v580 = os_log_type_enabled(v553, type[0]);
            if (!v579)
            {
              if (!v580)
                goto LABEL_1051;
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_protocol_http1_set_up_association";
              v555 = "%{public}s called with null parameters, no backtrace";
              goto LABEL_1050;
            }
            if (v580)
            {
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "nw_protocol_http1_set_up_association";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v579;
              _os_log_impl(&dword_182FBE000, v553, v554, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
            }
            free(v579);
          }
LABEL_1051:
          if (v552)
            free(v552);
          v31 = v551;
          v71 = *v56;
          if (*v56)
            goto LABEL_105;
          goto LABEL_107;
        }
        v529 = *(_OWORD **)(v15 + 32);
        __nwlog_obj();
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http1_connection_create";
        v530 = (char *)_os_log_send_and_compose_impl();
        v792[0] = 16;
        LOBYTE(v773[0]) = 0;
        if (__nwlog_fault(v530, v792, v773))
        {
          if (v792[0] == 17)
          {
            v531 = __nwlog_obj();
            v532 = v792[0];
            if (!os_log_type_enabled(v531, (os_log_type_t)v792[0]))
              goto LABEL_1005;
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_http1_connection_create";
            v533 = "%{public}s called with null parameters";
            goto LABEL_1004;
          }
          if (!LOBYTE(v773[0]))
          {
            v531 = __nwlog_obj();
            v532 = v792[0];
            if (!os_log_type_enabled(v531, (os_log_type_t)v792[0]))
              goto LABEL_1005;
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_http1_connection_create";
            v533 = "%{public}s called with null parameters, backtrace limit exceeded";
            goto LABEL_1004;
          }
          v573 = (char *)__nw_create_backtrace_string();
          v531 = __nwlog_obj();
          v532 = v792[0];
          v576 = os_log_type_enabled(v531, (os_log_type_t)v792[0]);
          if (!v573)
          {
            if (!v576)
              goto LABEL_1005;
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_http1_connection_create";
            v533 = "%{public}s called with null parameters, no backtrace";
            goto LABEL_1004;
          }
          if (v576)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_http1_connection_create";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v573;
            v575 = "%{public}s called with null parameters, dumping backtrace:%{public}s";
            goto LABEL_933;
          }
          goto LABEL_934;
        }
LABEL_1005:
        if (!v530)
          goto LABEL_1007;
        goto LABEL_1006;
      }
      v529 = *(_OWORD **)(v15 + 32);
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_connection_create";
      v530 = (char *)_os_log_send_and_compose_impl();
      v792[0] = 16;
      LOBYTE(v773[0]) = 0;
      if (!__nwlog_fault(v530, v792, v773))
        goto LABEL_1005;
      if (v792[0] != 17)
      {
        if (!LOBYTE(v773[0]))
        {
          v531 = __nwlog_obj();
          v532 = v792[0];
          if (!os_log_type_enabled(v531, (os_log_type_t)v792[0]))
            goto LABEL_1005;
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http1_connection_create";
          v533 = "%{public}s called with null endpoint, backtrace limit exceeded";
          goto LABEL_1004;
        }
        v573 = (char *)__nw_create_backtrace_string();
        v531 = __nwlog_obj();
        v532 = v792[0];
        v574 = os_log_type_enabled(v531, (os_log_type_t)v792[0]);
        if (!v573)
        {
          if (!v574)
            goto LABEL_1005;
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http1_connection_create";
          v533 = "%{public}s called with null endpoint, no backtrace";
          goto LABEL_1004;
        }
        if (v574)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_http1_connection_create";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v573;
          v575 = "%{public}s called with null endpoint, dumping backtrace:%{public}s";
LABEL_933:
          _os_log_impl(&dword_182FBE000, v531, v532, v575, buf, 0x16u);
        }
LABEL_934:
        free(v573);
        if (!v530)
        {
LABEL_1007:
          __nwlog_obj();
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
          v608 = (char *)_os_log_send_and_compose_impl();
          type[0] = OS_LOG_TYPE_ERROR;
          LOBYTE(aBlock) = 0;
          if (!__nwlog_fault(v608, type, &aBlock))
            goto LABEL_1021;
          if (type[0] == OS_LOG_TYPE_FAULT)
          {
            v609 = __nwlog_obj();
            v610 = type[0];
            if (!os_log_type_enabled(v609, type[0]))
              goto LABEL_1021;
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
            v611 = "%{public}s called with null http1_connection";
          }
          else if ((_BYTE)aBlock)
          {
            v612 = (char *)__nw_create_backtrace_string();
            v609 = __nwlog_obj();
            v610 = type[0];
            v613 = os_log_type_enabled(v609, type[0]);
            if (v612)
            {
              if (v613)
              {
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = v612;
                _os_log_impl(&dword_182FBE000, v609, v610, "%{public}s called with null http1_connection, dumping backtrace:%{public}s", buf, 0x16u);
              }
              free(v612);
LABEL_1021:
              if (v608)
                free(v608);
              __nwlog_obj();
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
              v614 = (char *)_os_log_send_and_compose_impl();
              type[0] = OS_LOG_TYPE_ERROR;
              LOBYTE(aBlock) = 0;
              if (!__nwlog_fault(v614, type, &aBlock))
                goto LABEL_1037;
              if (type[0] == OS_LOG_TYPE_FAULT)
              {
                v615 = __nwlog_obj();
                v616 = type[0];
                if (os_log_type_enabled(v615, type[0]))
                {
                  *(_DWORD *)buf = 136446210;
                  *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                  v617 = "%{public}s called with null http1_connection";
LABEL_1036:
                  _os_log_impl(&dword_182FBE000, v615, v616, v617, buf, 0xCu);
                }
              }
              else if ((_BYTE)aBlock)
              {
                v618 = (char *)__nw_create_backtrace_string();
                v615 = __nwlog_obj();
                v616 = type[0];
                v619 = os_log_type_enabled(v615, type[0]);
                if (v618)
                {
                  if (v619)
                  {
                    *(_DWORD *)buf = 136446466;
                    *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                    *(_WORD *)&buf[12] = 2082;
                    *(_QWORD *)&buf[14] = v618;
                    _os_log_impl(&dword_182FBE000, v615, v616, "%{public}s called with null http1_connection, dumping backtrace:%{public}s", buf, 0x16u);
                  }
                  free(v618);
                  goto LABEL_1037;
                }
                if (v619)
                {
                  *(_DWORD *)buf = 136446210;
                  *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                  v617 = "%{public}s called with null http1_connection, no backtrace";
                  goto LABEL_1036;
                }
              }
              else
              {
                v615 = __nwlog_obj();
                v616 = type[0];
                if (os_log_type_enabled(v615, type[0]))
                {
                  *(_DWORD *)buf = 136446210;
                  *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                  v617 = "%{public}s called with null http1_connection, backtrace limit exceeded";
                  goto LABEL_1036;
                }
              }
LABEL_1037:
              if (v614)
                free(v614);
              v34 = 0;
LABEL_1040:
              v31 = v529;
              if ((*(_BYTE *)(v15 + 158) & 1) != 0)
                goto LABEL_314;
              goto LABEL_310;
            }
            if (!v613)
              goto LABEL_1021;
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
            v611 = "%{public}s called with null http1_connection, no backtrace";
          }
          else
          {
            v609 = __nwlog_obj();
            v610 = type[0];
            if (!os_log_type_enabled(v609, type[0]))
              goto LABEL_1021;
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
            v611 = "%{public}s called with null http1_connection, backtrace limit exceeded";
          }
          _os_log_impl(&dword_182FBE000, v609, v610, v611, buf, 0xCu);
          goto LABEL_1021;
        }
LABEL_1006:
        free(v530);
        goto LABEL_1007;
      }
      v531 = __nwlog_obj();
      v532 = v792[0];
      if (!os_log_type_enabled(v531, (os_log_type_t)v792[0]))
        goto LABEL_1005;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_connection_create";
      v533 = "%{public}s called with null endpoint";
    }
    else
    {
      v529 = 0;
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_connection_create";
      v530 = (char *)_os_log_send_and_compose_impl();
      v792[0] = 16;
      LOBYTE(v773[0]) = 0;
      if (!__nwlog_fault(v530, v792, v773))
        goto LABEL_1005;
      if (v792[0] != 17)
      {
        if (!LOBYTE(v773[0]))
        {
          v531 = __nwlog_obj();
          v532 = v792[0];
          if (!os_log_type_enabled(v531, (os_log_type_t)v792[0]))
            goto LABEL_1005;
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http1_connection_create";
          v533 = "%{public}s called with null output_handler, backtrace limit exceeded";
          goto LABEL_1004;
        }
        v569 = (char *)__nw_create_backtrace_string();
        v531 = __nwlog_obj();
        v532 = v792[0];
        v570 = os_log_type_enabled(v531, (os_log_type_t)v792[0]);
        if (!v569)
        {
          if (!v570)
            goto LABEL_1005;
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http1_connection_create";
          v533 = "%{public}s called with null output_handler, no backtrace";
          goto LABEL_1004;
        }
        if (v570)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_http1_connection_create";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v569;
          _os_log_impl(&dword_182FBE000, v531, v532, "%{public}s called with null output_handler, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v569);
        goto LABEL_1005;
      }
      v531 = __nwlog_obj();
      v532 = v792[0];
      if (!os_log_type_enabled(v531, (os_log_type_t)v792[0]))
        goto LABEL_1005;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_connection_create";
      v533 = "%{public}s called with null output_handler";
    }
LABEL_1004:
    _os_log_impl(&dword_182FBE000, v531, v532, v533, buf, 0xCu);
    goto LABEL_1005;
  }
  if ((v16 & 4) != 0)
  {
    if ((*(_BYTE *)(v15 + 158) & 1) == 0)
    {
      if (gLogDatapath)
      {
        v404 = __nwlog_obj();
        if (os_log_type_enabled(v404, OS_LOG_TYPE_DEBUG))
        {
          v405 = *(_QWORD *)(v15 + 256);
          v406 = *(_DWORD *)(*(_QWORD *)(v15 + 248) + 372);
          if (v405)
            LODWORD(v405) = *(_DWORD *)(v405 + 860);
          v407 = *(_DWORD *)(v15 + 424);
          *(_DWORD *)buf = 136447490;
          *(_QWORD *)&buf[4] = "nw_protocol_http1_connect";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v15 + 74;
          *(_WORD *)&buf[22] = 2080;
          v798 = (uint64_t)" ";
          *(_WORD *)v799 = 1024;
          *(_DWORD *)&v799[2] = v406;
          *(_WORD *)&v799[6] = 1024;
          *(_DWORD *)&v799[8] = v405;
          *(_WORD *)&v799[12] = 1024;
          *(_DWORD *)&v799[14] = v407;
          _os_log_impl(&dword_182FBE000, v404, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> new flow stream already attached, sending connected immediately", buf, 0x32u);
        }
      }
    }
    *(_WORD *)(v15 + 428) = *(_WORD *)(v15 + 428) & 0xBFFB | 0x4000;
    v29 = *(void **)(v15 + 352);
    v770[0] = MEMORY[0x1E0C809B0];
    v770[1] = 0x40000000;
    v770[2] = ___ZL25nw_protocol_http1_connectP11nw_protocolS0__block_invoke;
    v770[3] = &__block_descriptor_tmp_28_40993;
    v770[4] = v15;
    v30 = v770;
    goto LABEL_47;
  }
  v17 = *(_QWORD *)(v15 + 256);
  if (v17)
  {
    if ((*(_BYTE *)(v15 + 158) & 1) != 0 || !gLogDatapath)
      goto LABEL_29;
    v409 = __nwlog_obj();
    v410 = os_log_type_enabled(v409, OS_LOG_TYPE_DEBUG);
    v17 = *(_QWORD *)(v15 + 256);
    if (v410)
    {
      v411 = *(_DWORD *)(*(_QWORD *)(v15 + 248) + 372);
      if (v17)
        v412 = *(_DWORD *)(v17 + 860);
      else
        v412 = 0;
      v599 = *(_DWORD *)(v15 + 424);
      *(_DWORD *)buf = 136447490;
      *(_QWORD *)&buf[4] = "nw_protocol_http1_connect";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v15 + 74;
      *(_WORD *)&buf[22] = 2080;
      v798 = (uint64_t)" ";
      *(_WORD *)v799 = 1024;
      *(_DWORD *)&v799[2] = v411;
      *(_WORD *)&v799[6] = 1024;
      *(_DWORD *)&v799[8] = v412;
      *(_WORD *)&v799[12] = 1024;
      *(_DWORD *)&v799[14] = v599;
      _os_log_impl(&dword_182FBE000, v409, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> already associated with connection, forwarding connect", buf, 0x32u);
      v17 = *(_QWORD *)(v15 + 256);
    }
    if (v17)
LABEL_29:
      nw_protocol_connect(*(_QWORD *)(v17 + 32), v17);
    else
      nw_protocol_connect(0, 0);
    return 1;
  }
  v80 = *(_QWORD *)(v9 + 208);
  v768 = (_OWORD *)(v15 + 64);
  if (v80)
  {
    v81 = 0;
    a3.n128_u64[0] = 136447234;
    do
    {
      v82 = v80;
      v80 = *(_QWORD *)(v80 + 592);
      if ((*(_WORD *)(v82 + 872) & 0x800) == 0)
      {
        if ((*(_BYTE *)(v9 + 158) & 1) != 0 || !v10[1345])
        {
          v81 = v82;
        }
        else
        {
          v762 = a3;
          v83 = __nwlog_obj();
          if (os_log_type_enabled(v83, OS_LOG_TYPE_DEBUG))
          {
            v84 = *(_DWORD *)(v9 + 372);
            *(_DWORD *)buf = v762.n128_u32[0];
            *(_QWORD *)&buf[4] = "nw_http1_get_next_idle_connection";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v9 + 74;
            *(_WORD *)&buf[22] = 2080;
            v798 = (uint64_t)" ";
            *(_WORD *)v799 = 1024;
            *(_DWORD *)&v799[2] = v84;
            *(_WORD *)&v799[6] = 2048;
            *(_QWORD *)&v799[8] = v82;
            _os_log_impl(&dword_182FBE000, v83, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> found idle connection connection %p", buf, 0x30u);
            a3 = v762;
            v81 = v82;
            v10 = (_BYTE *)&unk_1ECD84000;
          }
          else
          {
            v81 = v82;
            v10 = (_BYTE *)&unk_1ECD84000;
            a3 = v762;
          }
        }
      }
    }
    while (v80);
    if (v81)
    {
      if ((*(_BYTE *)(v81 + 158) & 1) == 0)
      {
        if (v10[1345])
        {
          v593 = v10;
          v764 = a3.n128_u32[0];
          v594 = __nwlog_obj();
          v595 = os_log_type_enabled(v594, OS_LOG_TYPE_DEBUG);
          a3.n128_u32[0] = v764;
          v10 = v593;
          if (v595)
          {
            v596 = *(_QWORD *)(v81 + 488);
            v597 = *(_DWORD *)(*(_QWORD *)(v81 + 480) + 372);
            v598 = *(_DWORD *)(v81 + 860);
            if (v596)
              LODWORD(v596) = *(_DWORD *)(v596 + 424);
            *(_DWORD *)buf = 136447746;
            *(_QWORD *)&buf[4] = "nw_http1_remove_idle_connection";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v81 + 74;
            *(_WORD *)&buf[22] = 2080;
            v798 = (uint64_t)" ";
            *(_WORD *)v799 = 1024;
            *(_DWORD *)&v799[2] = v597;
            *(_WORD *)&v799[6] = 1024;
            *(_DWORD *)&v799[8] = v598;
            *(_WORD *)&v799[12] = 1024;
            *(_DWORD *)&v799[14] = v596;
            *(_WORD *)&v799[18] = 2048;
            *(_QWORD *)&v799[20] = v81;
            _os_log_impl(&dword_182FBE000, v594, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> called for connection %p", buf, 0x3Cu);
            v10 = v593;
            a3.n128_u32[0] = v764;
          }
        }
      }
      v89 = (_WORD *)(v81 + 872);
      if (((*(unsigned __int16 *)(v81 + 872) | (*(unsigned __int8 *)(v81 + 874) << 16)) & 0x80000) == 0)
      {
        __nwlog_obj();
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http1_remove_idle_connection";
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v81;
        v90 = (char *)_os_log_send_and_compose_impl();
        type[0] = OS_LOG_TYPE_ERROR;
        LOBYTE(aBlock) = 0;
        if (!__nwlog_fault(v90, type, &aBlock))
          goto LABEL_369;
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          v91 = __nwlog_obj();
          v92 = type[0];
          if (!os_log_type_enabled(v91, type[0]))
            goto LABEL_369;
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_http1_remove_idle_connection";
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v81;
          v93 = "%{public}s connection %p not in idle list, cannot remove";
        }
        else if ((_BYTE)aBlock)
        {
          v168 = (char *)__nw_create_backtrace_string();
          v91 = __nwlog_obj();
          v92 = type[0];
          v169 = os_log_type_enabled(v91, type[0]);
          if (v168)
          {
            if (v169)
            {
              *(_DWORD *)buf = 136446722;
              *(_QWORD *)&buf[4] = "nw_http1_remove_idle_connection";
              *(_WORD *)&buf[12] = 2048;
              *(_QWORD *)&buf[14] = v81;
              *(_WORD *)&buf[22] = 2082;
              v798 = (uint64_t)v168;
              _os_log_impl(&dword_182FBE000, v91, v92, "%{public}s connection %p not in idle list, cannot remove, dumping backtrace:%{public}s", buf, 0x20u);
            }
            free(v168);
            goto LABEL_369;
          }
          if (!v169)
          {
LABEL_369:
            if (v90)
              free(v90);
            goto LABEL_439;
          }
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_http1_remove_idle_connection";
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v81;
          v93 = "%{public}s connection %p not in idle list, cannot remove, no backtrace";
        }
        else
        {
          v91 = __nwlog_obj();
          v92 = type[0];
          if (!os_log_type_enabled(v91, type[0]))
            goto LABEL_369;
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_http1_remove_idle_connection";
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v81;
          v93 = "%{public}s connection %p not in idle list, cannot remove, backtrace limit exceeded";
        }
        _os_log_impl(&dword_182FBE000, v91, v92, v93, buf, 0x16u);
        goto LABEL_369;
      }
      v127 = v10;
      v128 = *(_QWORD *)(v81 + 592);
      v129 = *(_QWORD **)(v81 + 600);
      if (v128)
      {
        *(_QWORD *)(v128 + 600) = v129;
        v129 = *(_QWORD **)(v81 + 600);
      }
      else
      {
        *(_QWORD *)(v9 + 216) = v129;
      }
      *v129 = v128;
      *(_QWORD *)(v81 + 592) = 0;
      *(_QWORD *)(v81 + 600) = 0;
      v170 = *(_DWORD *)(v9 + 340);
      *(_DWORD *)(v9 + 340) = v170 - 1;
      if (v170)
      {
LABEL_433:
        v294 = (*(unsigned __int16 *)(v81 + 872) | (*(unsigned __int8 *)(v81 + 874) << 16)) & 0xFFF7FFFF;
        *v89 = *v89;
        *(_BYTE *)(v81 + 874) = BYTE2(v294);
        v295 = v127;
        if ((*(_BYTE *)(v81 + 158) & 1) == 0)
        {
          if (v127[1345])
          {
            v600 = __nwlog_obj();
            v601 = os_log_type_enabled(v600, OS_LOG_TYPE_DEBUG);
            v295 = v127;
            if (v601)
            {
              v602 = *(_QWORD *)(v81 + 488);
              v603 = *(_DWORD *)(*(_QWORD *)(v81 + 480) + 372);
              v604 = *(_DWORD *)(v81 + 860);
              if (v602)
                LODWORD(v602) = *(_DWORD *)(v602 + 424);
              v605 = *(_DWORD *)(v9 + 340);
              *(_DWORD *)buf = 136448002;
              *(_QWORD *)&buf[4] = "nw_http1_remove_idle_connection";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v81 + 74;
              *(_WORD *)&buf[22] = 2080;
              v798 = (uint64_t)" ";
              *(_WORD *)v799 = 1024;
              *(_DWORD *)&v799[2] = v603;
              *(_WORD *)&v799[6] = 1024;
              *(_DWORD *)&v799[8] = v604;
              *(_WORD *)&v799[12] = 1024;
              *(_DWORD *)&v799[14] = v602;
              *(_WORD *)&v799[18] = 2048;
              *(_QWORD *)&v799[20] = v81;
              *(_WORD *)&v799[28] = 1024;
              *(_DWORD *)&v799[30] = v605;
              _os_log_impl(&dword_182FBE000, v600, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> removed idle connection %p, now have %u idle connections", buf, 0x42u);
              v295 = v127;
            }
          }
        }
        if (*(_QWORD *)(v81 + 784))
        {
          if ((*(_BYTE *)(v81 + 158) & 1) == 0)
          {
            if (v295[1345])
            {
              v620 = __nwlog_obj();
              if (os_log_type_enabled(v620, OS_LOG_TYPE_DEBUG))
              {
                v621 = *(_QWORD *)(v81 + 488);
                v622 = *(_DWORD *)(*(_QWORD *)(v81 + 480) + 372);
                v623 = *(_DWORD *)(v81 + 860);
                if (v621)
                  LODWORD(v621) = *(_DWORD *)(v621 + 424);
                *(_DWORD *)buf = 136447746;
                *(_QWORD *)&buf[4] = "nw_http1_remove_idle_connection";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = v81 + 74;
                *(_WORD *)&buf[22] = 2080;
                v798 = (uint64_t)" ";
                *(_WORD *)v799 = 1024;
                *(_DWORD *)&v799[2] = v622;
                *(_WORD *)&v799[6] = 1024;
                *(_DWORD *)&v799[8] = v623;
                *(_WORD *)&v799[12] = 1024;
                *(_DWORD *)&v799[14] = v621;
                *(_WORD *)&v799[18] = 2048;
                *(_QWORD *)&v799[20] = v81;
                _os_log_impl(&dword_182FBE000, v620, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> deactivating destroy timer for connection %p", buf, 0x3Cu);
              }
            }
          }
          nw_queue_cancel_source(*(_QWORD *)(v81 + 784), v17);
          *(_QWORD *)(v81 + 784) = 0;
        }
LABEL_439:
        if (*(_QWORD *)(v15 + 248))
        {
          if (!*(_QWORD *)(v81 + 488))
          {
            *(_QWORD *)(v15 + 256) = v81;
            *(_QWORD *)(v81 + 488) = v15;
            nw_protocol_set_output_handler(v15, *(_QWORD *)(v81 + 32));
            nw_protocol_set_input_handler(v81, *(_QWORD *)(v15 + 48));
            *(_OWORD *)v15 = *(_OWORD *)v81;
            v302 = *(_OWORD *)(v15 + 144);
            v304 = *(_OWORD *)(v15 + 96);
            v303 = *(_OWORD *)(v15 + 112);
            *(_OWORD *)(v81 + 128) = *(_OWORD *)(v15 + 128);
            *(_OWORD *)(v81 + 144) = v302;
            *(_OWORD *)(v81 + 96) = v304;
            *(_OWORD *)(v81 + 112) = v303;
            v305 = *(_OWORD *)(v15 + 80);
            *(_OWORD *)(v81 + 64) = *v768;
            *(_OWORD *)(v81 + 80) = v305;
            nw_http_transaction_metadata_set_connection_metadata(*(void **)(v15 + 352), *(void **)(v81 + 768));
            *v89 &= 0xFFD7u;
            *(_DWORD *)(v81 + 864) = 1;
            if ((*(_BYTE *)(v81 + 158) & 1) == 0)
            {
              v306 = __nwlog_obj();
              if (os_log_type_enabled(v306, OS_LOG_TYPE_DEBUG))
              {
                v307 = *(_QWORD *)(v81 + 488);
                v308 = *(_DWORD *)(*(_QWORD *)(v81 + 480) + 372);
                v309 = *(_DWORD *)(v81 + 860);
                if (v307)
                  LODWORD(v307) = *(_DWORD *)(v307 + 424);
                *(_DWORD *)buf = 136447490;
                *(_QWORD *)&buf[4] = "nw_http1_update_connection_input_state";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = v81 + 74;
                *(_WORD *)&buf[22] = 2080;
                v798 = (uint64_t)" ";
                *(_WORD *)v799 = 1024;
                *(_DWORD *)&v799[2] = v308;
                *(_WORD *)&v799[6] = 1024;
                *(_DWORD *)&v799[8] = v309;
                *(_WORD *)&v799[12] = 1024;
                *(_DWORD *)&v799[14] = v307;
                _os_log_impl(&dword_182FBE000, v306, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> connection input state: reading", buf, 0x32u);
              }
            }
            if ((*(_BYTE *)(v15 + 158) & 1) == 0)
            {
              v310 = __nwlog_obj();
              if (os_log_type_enabled(v310, OS_LOG_TYPE_INFO))
              {
                v311 = *(_QWORD *)(v15 + 256);
                v312 = *(_DWORD *)(*(_QWORD *)(v15 + 248) + 372);
                if (v311)
                  LODWORD(v311) = *(_DWORD *)(v311 + 860);
                v313 = *(_DWORD *)(v15 + 424);
                *(_DWORD *)buf = 136448002;
                *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = v15 + 74;
                *(_WORD *)&buf[22] = 2080;
                v798 = (uint64_t)" ";
                *(_WORD *)v799 = 1024;
                *(_DWORD *)&v799[2] = v312;
                *(_WORD *)&v799[6] = 1024;
                *(_DWORD *)&v799[8] = v311;
                *(_WORD *)&v799[12] = 1024;
                *(_DWORD *)&v799[14] = v313;
                *(_WORD *)&v799[18] = 2048;
                *(_QWORD *)&v799[20] = v15;
                *(_WORD *)&v799[28] = 2048;
                *(_QWORD *)&v799[30] = v81;
                _os_log_impl(&dword_182FBE000, v310, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s<i%u:c%u:s%u> stream (%p) now using connection %p", buf, 0x46u);
              }
            }
            goto LABEL_469;
          }
          __nwlog_obj();
          v296 = *(_QWORD *)(v81 + 488);
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v81;
          *(_WORD *)&buf[22] = 2048;
          v798 = v296;
          v297 = (char *)_os_log_send_and_compose_impl();
          type[0] = OS_LOG_TYPE_ERROR;
          LOBYTE(aBlock) = 0;
          if (__nwlog_fault(v297, type, &aBlock))
          {
            if (type[0] == OS_LOG_TYPE_FAULT)
            {
              v298 = __nwlog_obj();
              v299 = type[0];
              if (!os_log_type_enabled(v298, type[0]))
                goto LABEL_467;
              v300 = *(_QWORD *)(v81 + 488);
              *(_DWORD *)buf = 136446722;
              *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
              *(_WORD *)&buf[12] = 2048;
              *(_QWORD *)&buf[14] = v81;
              *(_WORD *)&buf[22] = 2048;
              v798 = v300;
              v301 = "%{public}s Connection %p already has a stream (%p)";
              goto LABEL_465;
            }
            if (!(_BYTE)aBlock)
            {
              v298 = __nwlog_obj();
              v299 = type[0];
              if (!os_log_type_enabled(v298, type[0]))
                goto LABEL_467;
              v317 = *(_QWORD *)(v81 + 488);
              *(_DWORD *)buf = 136446722;
              *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
              *(_WORD *)&buf[12] = 2048;
              *(_QWORD *)&buf[14] = v81;
              *(_WORD *)&buf[22] = 2048;
              v798 = v317;
              v301 = "%{public}s Connection %p already has a stream (%p), backtrace limit exceeded";
              goto LABEL_465;
            }
            v314 = (char *)__nw_create_backtrace_string();
            v298 = __nwlog_obj();
            v299 = type[0];
            v315 = os_log_type_enabled(v298, type[0]);
            if (v314)
            {
              if (v315)
              {
                v316 = *(_QWORD *)(v81 + 488);
                *(_DWORD *)buf = 136446978;
                *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                *(_WORD *)&buf[12] = 2048;
                *(_QWORD *)&buf[14] = v81;
                *(_WORD *)&buf[22] = 2048;
                v798 = v316;
                *(_WORD *)v799 = 2082;
                *(_QWORD *)&v799[2] = v314;
                _os_log_impl(&dword_182FBE000, v298, v299, "%{public}s Connection %p already has a stream (%p), dumping backtrace:%{public}s", buf, 0x2Au);
              }
              free(v314);
              if (!v297)
                goto LABEL_469;
              goto LABEL_468;
            }
            if (v315)
            {
              v318 = *(_QWORD *)(v81 + 488);
              *(_DWORD *)buf = 136446722;
              *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
              *(_WORD *)&buf[12] = 2048;
              *(_QWORD *)&buf[14] = v81;
              *(_WORD *)&buf[22] = 2048;
              v798 = v318;
              v301 = "%{public}s Connection %p already has a stream (%p), no backtrace";
LABEL_465:
              v319 = v298;
              v320 = v299;
              v321 = 32;
LABEL_466:
              _os_log_impl(&dword_182FBE000, v319, v320, v301, buf, v321);
            }
          }
LABEL_467:
          if (!v297)
          {
LABEL_469:
            *(_WORD *)(v15 + 428) |= 0x4000u;
            v29 = *(void **)(v15 + 352);
            v769[0] = MEMORY[0x1E0C809B0];
            v769[1] = 0x40000000;
            v769[2] = ___ZL25nw_protocol_http1_connectP11nw_protocolS0__block_invoke_29;
            v769[3] = &__block_descriptor_tmp_38_40995;
            v769[4] = v15;
            v30 = v769;
LABEL_47:
            nw_http_transaction_metadata_set_event_handler(v29, v30);
            nw_protocol_connected(*(_QWORD **)(v15 + 48), v15);
            return 1;
          }
LABEL_468:
          free(v297);
          goto LABEL_469;
        }
        __nwlog_obj();
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
        v297 = (char *)_os_log_send_and_compose_impl();
        type[0] = OS_LOG_TYPE_ERROR;
        LOBYTE(aBlock) = 0;
        if (!__nwlog_fault(v297, type, &aBlock))
          goto LABEL_467;
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          v591 = __nwlog_obj();
          v592 = type[0];
          if (!os_log_type_enabled(v591, type[0]))
            goto LABEL_467;
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
          v301 = "%{public}s called with null http1_stream->protocol_http1";
        }
        else if ((_BYTE)aBlock)
        {
          v606 = (char *)__nw_create_backtrace_string();
          v591 = __nwlog_obj();
          v592 = type[0];
          v607 = os_log_type_enabled(v591, type[0]);
          if (v606)
          {
            if (v607)
            {
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v606;
              _os_log_impl(&dword_182FBE000, v591, v592, "%{public}s called with null http1_stream->protocol_http1, dumping backtrace:%{public}s", buf, 0x16u);
            }
            free(v606);
            goto LABEL_467;
          }
          if (!v607)
            goto LABEL_467;
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
          v301 = "%{public}s called with null http1_stream->protocol_http1, no backtrace";
        }
        else
        {
          v591 = __nwlog_obj();
          v592 = type[0];
          if (!os_log_type_enabled(v591, type[0]))
            goto LABEL_467;
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
          v301 = "%{public}s called with null http1_stream->protocol_http1, backtrace limit exceeded";
        }
        v319 = v591;
        v320 = v592;
        v321 = 12;
        goto LABEL_466;
      }
      v763 = a3.n128_u32[0];
      __nwlog_obj();
      v171 = *(unsigned int *)(v9 + 340);
      *(_DWORD *)buf = 136446978;
      *(_QWORD *)&buf[4] = "nw_http1_remove_idle_connection";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = "http1->idle_connections_count";
      *(_WORD *)&buf[22] = 2048;
      v798 = 1;
      *(_WORD *)v799 = 2048;
      *(_QWORD *)&v799[2] = v171;
      v172 = (char *)_os_log_send_and_compose_impl();
      type[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(aBlock) = 0;
      if (__nwlog_fault(v172, type, &aBlock))
      {
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          v173 = __nwlog_obj();
          v174 = type[0];
          if (os_log_type_enabled(v173, type[0]))
          {
            v175 = *(unsigned int *)(v9 + 340);
            *(_DWORD *)buf = 136446978;
            *(_QWORD *)&buf[4] = "nw_http1_remove_idle_connection";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = "http1->idle_connections_count";
            *(_WORD *)&buf[22] = 2048;
            v798 = 1;
            *(_WORD *)v799 = 2048;
            *(_QWORD *)&v799[2] = v175;
            v176 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu";
LABEL_429:
            _os_log_impl(&dword_182FBE000, v173, v174, v176, buf, 0x2Au);
          }
        }
        else if ((_BYTE)aBlock)
        {
          v253 = (char *)__nw_create_backtrace_string();
          v173 = __nwlog_obj();
          v174 = type[0];
          v254 = os_log_type_enabled(v173, type[0]);
          if (v253)
          {
            if (v254)
            {
              v255 = *(unsigned int *)(v9 + 340);
              *(_DWORD *)buf = v763;
              *(_QWORD *)&buf[4] = "nw_http1_remove_idle_connection";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = "http1->idle_connections_count";
              *(_WORD *)&buf[22] = 2048;
              v798 = 1;
              *(_WORD *)v799 = 2048;
              *(_QWORD *)&v799[2] = v255;
              *(_WORD *)&v799[10] = 2082;
              *(_QWORD *)&v799[12] = v253;
              _os_log_impl(&dword_182FBE000, v173, v174, "%{public}s Underflow: %{public}s, decrement %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
            }
            free(v253);
            goto LABEL_430;
          }
          if (v254)
          {
            v293 = *(unsigned int *)(v9 + 340);
            *(_DWORD *)buf = 136446978;
            *(_QWORD *)&buf[4] = "nw_http1_remove_idle_connection";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = "http1->idle_connections_count";
            *(_WORD *)&buf[22] = 2048;
            v798 = 1;
            *(_WORD *)v799 = 2048;
            *(_QWORD *)&v799[2] = v293;
            v176 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, no backtrace";
            goto LABEL_429;
          }
        }
        else
        {
          v173 = __nwlog_obj();
          v174 = type[0];
          if (os_log_type_enabled(v173, type[0]))
          {
            v283 = *(unsigned int *)(v9 + 340);
            *(_DWORD *)buf = 136446978;
            *(_QWORD *)&buf[4] = "nw_http1_remove_idle_connection";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = "http1->idle_connections_count";
            *(_WORD *)&buf[22] = 2048;
            v798 = 1;
            *(_WORD *)v799 = 2048;
            *(_QWORD *)&v799[2] = v283;
            v176 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, backtrace limit exceeded";
            goto LABEL_429;
          }
        }
      }
LABEL_430:
      if (v172)
        free(v172);
      *(_DWORD *)(v9 + 340) = 0;
      goto LABEL_433;
    }
  }
  if ((*(_BYTE *)(v9 + 158) & 1) == 0)
  {
    if (v10[1345])
    {
      v583 = v10;
      v584 = __nwlog_obj();
      v585 = os_log_type_enabled(v584, OS_LOG_TYPE_DEBUG);
      v10 = v583;
      if (v585)
      {
        v586 = *(_DWORD *)(v9 + 372);
        *(_DWORD *)buf = 136446978;
        *(_QWORD *)&buf[4] = "nw_http1_get_next_idle_connection";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v9 + 74;
        *(_WORD *)&buf[22] = 2080;
        v798 = (uint64_t)" ";
        *(_WORD *)v799 = 1024;
        *(_DWORD *)&v799[2] = v586;
        _os_log_impl(&dword_182FBE000, v584, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> no idle connections", buf, 0x26u);
        v10 = v583;
      }
    }
  }
  if (*(_QWORD *)(v15 + 256))
  {
    if ((*(_BYTE *)(v15 + 158) & 1) == 0)
    {
      v94 = __nwlog_obj();
      if (os_log_type_enabled(v94, OS_LOG_TYPE_DEBUG))
      {
        v95 = *(_QWORD *)(v15 + 256);
        v96 = *(_DWORD *)(*(_QWORD *)(v15 + 248) + 372);
        if (v95)
          LODWORD(v95) = *(_DWORD *)(v95 + 860);
        v97 = *(_DWORD *)(v15 + 424);
        *(_DWORD *)buf = 136447490;
        *(_QWORD *)&buf[4] = "nw_http1_create_connection_for_stream_if_allowed";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v15 + 74;
        *(_WORD *)&buf[22] = 2080;
        v798 = (uint64_t)" ";
        *(_WORD *)v799 = 1024;
        *(_DWORD *)&v799[2] = v96;
        *(_WORD *)&v799[6] = 1024;
        *(_DWORD *)&v799[8] = v95;
        *(_WORD *)&v799[12] = 1024;
        *(_DWORD *)&v799[14] = v97;
        v98 = "%{public}s %{public}s%s<i%u:c%u:s%u> stream already has current connection, ignoring";
        v99 = v94;
        v100 = 50;
LABEL_144:
        _os_log_impl(&dword_182FBE000, v99, OS_LOG_TYPE_DEBUG, v98, buf, v100);
        goto LABEL_145;
      }
    }
    goto LABEL_145;
  }
  if ((*(_WORD *)(v15 + 428) & 8) != 0)
  {
    if (!*(_QWORD *)(v15 + 32))
    {
      if (!(*(_BYTE *)(v15 + 158) & 1 | (v10[1345] == 0)))
      {
        v249 = __nwlog_obj();
        if (os_log_type_enabled(v249, OS_LOG_TYPE_DEBUG))
        {
          v250 = *(_QWORD *)(v15 + 256);
          v251 = *(_DWORD *)(*(_QWORD *)(v15 + 248) + 372);
          if (v250)
            LODWORD(v250) = *(_DWORD *)(v250 + 860);
          v252 = *(_DWORD *)(v15 + 424);
          *(_DWORD *)buf = 136447746;
          *(_QWORD *)&buf[4] = "nw_http1_create_connection_for_stream_if_allowed";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v15 + 74;
          *(_WORD *)&buf[22] = 2080;
          v798 = (uint64_t)" ";
          *(_WORD *)v799 = 1024;
          *(_DWORD *)&v799[2] = v251;
          *(_WORD *)&v799[6] = 1024;
          *(_DWORD *)&v799[8] = v250;
          *(_WORD *)&v799[12] = 1024;
          *(_DWORD *)&v799[14] = v252;
          *(_WORD *)&v799[18] = 2048;
          *(_QWORD *)&v799[20] = v15;
          v98 = "%{public}s %{public}s%s<i%u:c%u:s%u> Stream %p still awaiting new output handler";
          v99 = v249;
          v100 = 60;
          goto LABEL_144;
        }
      }
      goto LABEL_145;
    }
    if (!(*(_BYTE *)(v15 + 158) & 1 | (v10[1345] == 0)))
    {
      v632 = __nwlog_obj();
      if (os_log_type_enabled(v632, OS_LOG_TYPE_DEBUG))
      {
        v633 = *(_QWORD *)(v15 + 256);
        v634 = *(_DWORD *)(*(_QWORD *)(v15 + 248) + 372);
        if (v633)
          LODWORD(v633) = *(_DWORD *)(v633 + 860);
        v635 = *(_DWORD *)(v15 + 424);
        v636 = *(_QWORD *)(v15 + 32);
        *(_DWORD *)buf = 136448002;
        *(_QWORD *)&buf[4] = "nw_http1_create_connection_for_stream_if_allowed";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v15 + 74;
        *(_WORD *)&buf[22] = 2080;
        v798 = (uint64_t)" ";
        *(_WORD *)v799 = 1024;
        *(_DWORD *)&v799[2] = v634;
        *(_WORD *)&v799[6] = 1024;
        *(_DWORD *)&v799[8] = v633;
        *(_WORD *)&v799[12] = 1024;
        *(_DWORD *)&v799[14] = v635;
        *(_WORD *)&v799[18] = 2048;
        *(_QWORD *)&v799[20] = v15;
        *(_WORD *)&v799[28] = 2048;
        *(_QWORD *)&v799[30] = v636;
        _os_log_impl(&dword_182FBE000, v632, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> creating connection for stream %p with new output_handler %p", buf, 0x46u);
      }
    }
    v766 = *(_OWORD **)(v15 + 32);
    if (v766)
    {
      v133 = *(void **)(v15 + 336);
      if (v133)
      {
        v134 = *(void **)(v15 + 320);
        if (v134)
        {
          v135 = malloc_type_calloc(1uLL, 0x370uLL, 0xEAFB8F1AuLL);
          if (!v135)
          {
            v637 = __nwlog_obj();
            os_log_type_enabled(v637, OS_LOG_TYPE_ERROR);
            *(_DWORD *)buf = 136446722;
            *(_QWORD *)&buf[4] = "strict_calloc";
            *(_WORD *)&buf[12] = 2048;
            *(_QWORD *)&buf[14] = 1;
            *(_WORD *)&buf[22] = 2048;
            v798 = 880;
            v638 = (void *)_os_log_send_and_compose_impl();
            result = __nwlog_abort((uint64_t)v638);
            if (result)
              goto LABEL_1391;
            free(v638);
          }
          bzero(v135, 0x370uLL);
          if (nw_protocol_http1_identifier::onceToken != -1)
            dispatch_once(&nw_protocol_http1_identifier::onceToken, &__block_literal_global_39812);
          *((_QWORD *)v135 + 2) = &nw_protocol_http1_identifier::http1_protocol_identifier;
          if (nw_protocol_http1_get_callbacks(void)::onceToken[0] != -1)
            dispatch_once(nw_protocol_http1_get_callbacks(void)::onceToken, &__block_literal_global_17_39614);
          *((_QWORD *)v135 + 3) = &nw_protocol_http1_get_callbacks(void)::http1_protocol_callbacks;
          *((_DWORD *)v135 + 46) = 3;
          *((_QWORD *)v135 + 22) = v135;
          *((_QWORD *)v135 + 5) = v135 + 10;
          *((_QWORD *)v135 + 60) = v9;
          nw_protocol_set_output_handler((uint64_t)v135, (uint64_t)v766);
          *(_QWORD *)buf = os_retain(v133);
          nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v135 + 47), buf);
          *(_QWORD *)buf = os_retain(v134);
          nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v135 + 46), buf);
          *(_QWORD *)buf = nw_parameters_copy_context(v134);
          nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v135 + 31), buf);
          *((_QWORD *)v135 + 24) = *(_QWORD *)(v9 + 192);
          v136 = MEMORY[0x1E0C809B0];
          v137 = (void *)*((_QWORD *)v135 + 62);
          *(_QWORD *)type = MEMORY[0x1E0C809B0];
          v782 = 0x40000000;
          v783 = (uint64_t)___ZL26nw_http1_connection_createP11nw_protocolP17nw_protocol_http1P11nw_endpointP13nw_parameters_block_invoke;
          v784 = (uint64_t (*)(uint64_t, uint64_t))&__block_descriptor_tmp_40_39813;
          v785 = (void (*)(uint64_t))v135;
          *(_QWORD *)buf = nw_http_connection_create_metadata(v137, type, 0);
          nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v135 + 48), buf);
          nw_http_connection_metadata_set_version(*((void **)v135 + 96), 3);
          nw_http_connection_metadata_set_shared_connection_pool_metadata(*((void **)v135 + 96), *(void **)(v9 + 312));
          *((_QWORD *)v135 + 77) = 0;
          *((_QWORD *)v135 + 78) = (char *)v135 + 616;
          *((_QWORD *)v135 + 79) = 0;
          *((_QWORD *)v135 + 80) = (char *)v135 + 632;
          *((_QWORD *)v135 + 81) = 0;
          *((_QWORD *)v135 + 82) = (char *)v135 + 648;
          *((_QWORD *)v135 + 83) = 0;
          *((_QWORD *)v135 + 84) = (char *)v135 + 664;
          *((_QWORD *)v135 + 86) = (char *)v135 + 680;
          *((_QWORD *)v135 + 85) = 0;
          nw_frame_cache_init((uint64_t)v135 + 696, (uint64_t)v135, 256, 0x40000, 16);
          v138 = *((_QWORD *)v135 + 60);
          if (v138)
          {
            *(_OWORD *)((char *)v135 + 360) = 0u;
            *(_OWORD *)((char *)v135 + 376) = 0u;
            *(_OWORD *)((char *)v135 + 392) = 0u;
            *(_OWORD *)((char *)v135 + 408) = 0u;
            *(_OWORD *)((char *)v135 + 424) = 0u;
            *(_OWORD *)((char *)v135 + 440) = 0u;
            *(_OWORD *)((char *)v135 + 328) = 0u;
            *(_OWORD *)((char *)v135 + 344) = 0u;
            *((_QWORD *)v135 + 59) = nw_http1_on_reset;
            *((_QWORD *)v135 + 37) = nw_http1_on_message_begin;
            *((_QWORD *)v135 + 38) = nw_http1_on_url;
            *((_QWORD *)v135 + 48) = nw_http1_on_message_complete;
            *((_QWORD *)v135 + 49) = nw_http1_on_url_complete;
            *((_QWORD *)v135 + 39) = nw_http1_on_status;
            *((_QWORD *)v135 + 40) = nw_http1_on_method;
            *((_QWORD *)v135 + 50) = nw_http1_on_status_complete;
            *((_QWORD *)v135 + 51) = nw_http1_on_method_complete;
            *((_QWORD *)v135 + 42) = nw_http1_on_header_field;
            *((_QWORD *)v135 + 43) = nw_http1_on_header_value;
            *((_QWORD *)v135 + 53) = nw_http1_on_header_field_complete;
            *((_QWORD *)v135 + 54) = nw_http1_on_header_value_complete;
            *((_QWORD *)v135 + 46) = nw_http1_on_headers_complete;
            *((_QWORD *)v135 + 47) = nw_http1_on_body;
            *((_QWORD *)v135 + 57) = nw_http1_on_chunk_header;
            *((_QWORD *)v135 + 58) = nw_http1_on_chunk_complete;
            v139 = *(_BYTE *)(v138 + 376);
            *(_OWORD *)((char *)v135 + 248) = 0u;
            *(_OWORD *)((char *)v135 + 200) = 0u;
            *(_OWORD *)((char *)v135 + 264) = 0u;
            *(_OWORD *)((char *)v135 + 232) = 0u;
            *(_OWORD *)((char *)v135 + 216) = 0u;
            if ((v139 & 1) != 0)
              v140 = 1;
            else
              v140 = 2;
            *((_BYTE *)v135 + 272) = v140;
            *((_QWORD *)v135 + 35) = 0;
            *((_QWORD *)v135 + 36) = (char *)v135 + 296;
            *((_WORD *)v135 + 139) = 15619;
            *((_QWORD *)v135 + 31) = v135;
            *((_QWORD *)v135 + 32) = 238;
            if ((*((_BYTE *)v135 + 158) & 1) == 0)
            {
              v141 = __nwlog_obj();
              if (os_log_type_enabled(v141, OS_LOG_TYPE_DEBUG))
              {
                v142 = *((_QWORD *)v135 + 61);
                v143 = *(_DWORD *)(*((_QWORD *)v135 + 60) + 372);
                v144 = *((_DWORD *)v135 + 215);
                if (v142)
                  LODWORD(v142) = *(_DWORD *)(v142 + 424);
                *(_DWORD *)buf = 136448258;
                *(_QWORD *)&buf[4] = "nw_http1_connection_log_parser_version";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = (char *)v135 + 74;
                *(_WORD *)&buf[22] = 2080;
                v798 = (uint64_t)" ";
                *(_WORD *)v799 = 1024;
                *(_DWORD *)&v799[2] = v143;
                *(_WORD *)&v799[6] = 1024;
                *(_DWORD *)&v799[8] = v144;
                *(_WORD *)&v799[12] = 1024;
                *(_DWORD *)&v799[14] = v142;
                *(_WORD *)&v799[18] = 1024;
                *(_DWORD *)&v799[20] = 9;
                *(_WORD *)&v799[24] = 1024;
                *(_DWORD *)&v799[26] = 2;
                *(_WORD *)&v799[30] = 1024;
                *(_DWORD *)&v799[32] = 1;
                _os_log_impl(&dword_182FBE000, v141, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> using http parser v%u.%u.%u", buf, 0x44u);
              }
            }
            goto LABEL_208;
          }
          __nwlog_obj();
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http1_connection_parser_init";
          v639 = (char *)_os_log_send_and_compose_impl();
          v792[0] = 16;
          LOBYTE(v773[0]) = 0;
          if (__nwlog_fault(v639, v792, v773))
          {
            if (v792[0] == 17)
            {
              v640 = __nwlog_obj();
              v641 = v792[0];
              if (!os_log_type_enabled(v640, (os_log_type_t)v792[0]))
                goto LABEL_1300;
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_http1_connection_parser_init";
              v642 = "%{public}s called with null http1_connection->protocol_http1";
              goto LABEL_1299;
            }
            if (!LOBYTE(v773[0]))
            {
              v640 = __nwlog_obj();
              v641 = v792[0];
              if (!os_log_type_enabled(v640, (os_log_type_t)v792[0]))
                goto LABEL_1300;
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_http1_connection_parser_init";
              v642 = "%{public}s called with null http1_connection->protocol_http1, backtrace limit exceeded";
              goto LABEL_1299;
            }
            v709 = (char *)__nw_create_backtrace_string();
            v640 = __nwlog_obj();
            v641 = v792[0];
            v710 = os_log_type_enabled(v640, (os_log_type_t)v792[0]);
            if (v709)
            {
              if (v710)
              {
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = "nw_http1_connection_parser_init";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = v709;
                _os_log_impl(&dword_182FBE000, v640, v641, "%{public}s called with null http1_connection->protocol_http1, dumping backtrace:%{public}s", buf, 0x16u);
              }
              free(v709);
              goto LABEL_1300;
            }
            if (v710)
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_http1_connection_parser_init";
              v642 = "%{public}s called with null http1_connection->protocol_http1, no backtrace";
LABEL_1299:
              _os_log_impl(&dword_182FBE000, v640, v641, v642, buf, 0xCu);
            }
          }
LABEL_1300:
          if (v639)
            free(v639);
LABEL_208:
          *(_QWORD *)buf = 0;
          *(_QWORD *)&buf[8] = buf;
          *(_QWORD *)&buf[16] = 0x2000000000;
          v798 = (uint64_t)v135;
          aBlock = v136;
          v775 = 0x40000000;
          v776 = ___ZL26nw_http1_connection_createP11nw_protocolP17nw_protocol_http1P11nw_endpointP13nw_parameters_block_invoke_2;
          v777 = &unk_1E14A14C8;
          v778 = (uint64_t *)buf;
          *((_QWORD *)v135 + 76) = _Block_copy(&aBlock);
          _Block_object_dispose(buf, 8);
          if ((*((_BYTE *)v135 + 158) & 1) == 0)
          {
            if (gLogDatapath)
            {
              v651 = __nwlog_obj();
              if (os_log_type_enabled(v651, OS_LOG_TYPE_DEBUG))
              {
                v652 = *((_QWORD *)v135 + 61);
                v653 = *(_DWORD *)(*((_QWORD *)v135 + 60) + 372);
                v654 = *((_DWORD *)v135 + 215);
                if (v652)
                  LODWORD(v652) = *(_DWORD *)(v652 + 424);
                *(_DWORD *)buf = 136447746;
                *(_QWORD *)&buf[4] = "nw_http1_connection_create";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = (char *)v135 + 74;
                *(_WORD *)&buf[22] = 2080;
                v798 = (uint64_t)" ";
                *(_WORD *)v799 = 1024;
                *(_DWORD *)&v799[2] = v653;
                *(_WORD *)&v799[6] = 1024;
                *(_DWORD *)&v799[8] = v654;
                *(_WORD *)&v799[12] = 1024;
                *(_DWORD *)&v799[14] = v652;
                *(_WORD *)&v799[18] = 2048;
                *(_QWORD *)&v799[20] = v135;
                _os_log_impl(&dword_182FBE000, v651, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> created %p", buf, 0x3Cu);
              }
            }
          }
          v145 = (nw_path_t *)(v135 + 32);
          nw_protocol_replace_input_handler((uint64_t)v766, v15, (uint64_t)v135);
          *v135 = *v766;
          v146 = (void *)*((_QWORD *)v135 + 92);
          if (v146)
          {
            if (!*((_QWORD *)v135 + 66))
            {
              v147 = (void **)(v135 + 35);
              v148 = nw_parameters_copy_context(*((void **)v135 + 92));
              *(_QWORD *)buf = nw_path_copy_flow_registration(v148, (uint64_t)v135);
              nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v135 + 35), buf);
              v149 = (void *)*((_QWORD *)v135 + 70);
              if (v149)
              {
                v150 = nw_path_flow_registration_copy_endpoint(v149);
                v151 = nw_path_flow_registration_copy_parameters(*v147);
                *(_QWORD *)buf = nw_endpoint_copy_association_with_evaluator(v150, v151, 0);
                nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v135 + 33), buf);
                if (*((_QWORD *)v135 + 66))
                {
                  *(_QWORD *)buf = nw_protocol_instance_stub_create((nw_protocol *)v135);
                  nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v135 + 34), buf);
                  nw_association_register(*((void **)v135 + 66), v146, *((void **)v135 + 68), 0, &__block_literal_global_70_39832);
                  v152 = nw_association_copy_current_path(*((void **)v135 + 66), v151);
                  if (v152)
                  {
                    v153 = v152;
                    v154 = (nw_path_t)nw_path_copy_for_flow_registration(v152, *v147);
                    if (v154)
                    {
                      v155 = v154;
                      if (*v145 != v154)
                      {
                        *(_QWORD *)buf = os_retain(v154);
                        nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v135 + 32), buf);
                      }
                      if (nw_path_has_flows(v155))
                        v156 = 4096;
                      else
                        v156 = 0;
                      v157 = *((_WORD *)v135 + 436) & 0xEFFF | (*((unsigned __int8 *)v135 + 874) << 16);
                      *((_WORD *)v135 + 436) = *((_WORD *)v135 + 436) & 0xEFFF | v156;
                      *((_BYTE *)v135 + 874) = BYTE2(v157);
                      v158 = nw_parameters_copy_effective_proxy_config(v146);
                      if (v158)
                      {
                        v159 = v158;
                        if (nw_path_has_proxy_config(v153, v158))
                        {
                          *(_QWORD *)buf = os_retain(v159);
                          nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v135 + 36), buf);
                        }
                        os_release(v159);
                      }
                      os_release(v155);
                    }
                    os_release(v153);
                  }
                }
                if (v151)
                  os_release(v151);
                if (v150)
                  os_release(v150);
              }
              if (v148)
                os_release(v148);
            }
            goto LABEL_233;
          }
          __nwlog_obj();
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_protocol_http1_set_up_association";
          v643 = (char *)_os_log_send_and_compose_impl();
          type[0] = OS_LOG_TYPE_ERROR;
          LOBYTE(aBlock) = 0;
          if (__nwlog_fault(v643, type, &aBlock))
          {
            if (type[0] == OS_LOG_TYPE_FAULT)
            {
              v644 = __nwlog_obj();
              v645 = type[0];
              if (!os_log_type_enabled(v644, type[0]))
                goto LABEL_1305;
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_protocol_http1_set_up_association";
              v646 = "%{public}s called with null parameters";
              goto LABEL_1304;
            }
            if (!(_BYTE)aBlock)
            {
              v644 = __nwlog_obj();
              v645 = type[0];
              if (!os_log_type_enabled(v644, type[0]))
                goto LABEL_1305;
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_protocol_http1_set_up_association";
              v646 = "%{public}s called with null parameters, backtrace limit exceeded";
              goto LABEL_1304;
            }
            v711 = (char *)__nw_create_backtrace_string();
            v644 = __nwlog_obj();
            v645 = type[0];
            v712 = os_log_type_enabled(v644, type[0]);
            if (v711)
            {
              if (v712)
              {
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = "nw_protocol_http1_set_up_association";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = v711;
                _os_log_impl(&dword_182FBE000, v644, v645, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
              }
              free(v711);
              goto LABEL_1305;
            }
            if (v712)
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_protocol_http1_set_up_association";
              v646 = "%{public}s called with null parameters, no backtrace";
LABEL_1304:
              _os_log_impl(&dword_182FBE000, v644, v645, v646, buf, 0xCu);
            }
          }
LABEL_1305:
          if (v643)
            free(v643);
LABEL_233:
          if (*v145 && nw_path_uses_interface_type(*v145, nw_interface_type_cellular))
            *((_QWORD *)v135 + 24) = 1000;
          v160 = *(unsigned int *)(v9 + 336) + 1;
          v161 = v160 << 31 >> 31;
          *(_DWORD *)(v9 + 336) = v160;
          if (v161 == v160 && (v161 & 0x8000000000000000) == 0)
          {
LABEL_510:
            v338 = *(unsigned int *)(v9 + 360) + 1;
            v339 = v338 << 31 >> 31;
            *(_DWORD *)(v9 + 360) = v338;
            if (v339 == v338 && (v339 & 0x8000000000000000) == 0)
              goto LABEL_529;
            __nwlog_obj();
            v340 = *(unsigned int *)(v9 + 360);
            *(_DWORD *)buf = 136446978;
            *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = "http1->next_connection_log_num";
            *(_WORD *)&buf[22] = 2048;
            v798 = 1;
            *(_WORD *)v799 = 2048;
            *(_QWORD *)&v799[2] = v340;
            v341 = (char *)_os_log_send_and_compose_impl();
            type[0] = OS_LOG_TYPE_ERROR;
            LOBYTE(aBlock) = 0;
            if (__nwlog_fault(v341, type, &aBlock))
            {
              if (type[0] == OS_LOG_TYPE_FAULT)
              {
                v342 = __nwlog_obj();
                v343 = type[0];
                if (os_log_type_enabled(v342, type[0]))
                {
                  v344 = *(unsigned int *)(v9 + 360);
                  *(_DWORD *)buf = 136446978;
                  *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = "http1->next_connection_log_num";
                  *(_WORD *)&buf[22] = 2048;
                  v798 = 1;
                  *(_WORD *)v799 = 2048;
                  *(_QWORD *)&v799[2] = v344;
                  v345 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_525:
                  _os_log_impl(&dword_182FBE000, v342, v343, v345, buf, 0x2Au);
                }
              }
              else if ((_BYTE)aBlock)
              {
                v346 = (char *)__nw_create_backtrace_string();
                v342 = __nwlog_obj();
                v343 = type[0];
                v347 = os_log_type_enabled(v342, type[0]);
                if (v346)
                {
                  if (v347)
                  {
                    v348 = *(unsigned int *)(v9 + 360);
                    *(_DWORD *)buf = 136447234;
                    *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
                    *(_WORD *)&buf[12] = 2082;
                    *(_QWORD *)&buf[14] = "http1->next_connection_log_num";
                    *(_WORD *)&buf[22] = 2048;
                    v798 = 1;
                    *(_WORD *)v799 = 2048;
                    *(_QWORD *)&v799[2] = v348;
                    *(_WORD *)&v799[10] = 2082;
                    *(_QWORD *)&v799[12] = v346;
                    _os_log_impl(&dword_182FBE000, v342, v343, "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
                  }
                  free(v346);
                  goto LABEL_526;
                }
                if (v347)
                {
                  v350 = *(unsigned int *)(v9 + 360);
                  *(_DWORD *)buf = 136446978;
                  *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = "http1->next_connection_log_num";
                  *(_WORD *)&buf[22] = 2048;
                  v798 = 1;
                  *(_WORD *)v799 = 2048;
                  *(_QWORD *)&v799[2] = v350;
                  v345 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
                  goto LABEL_525;
                }
              }
              else
              {
                v342 = __nwlog_obj();
                v343 = type[0];
                if (os_log_type_enabled(v342, type[0]))
                {
                  v349 = *(unsigned int *)(v9 + 360);
                  *(_DWORD *)buf = 136446978;
                  *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = "http1->next_connection_log_num";
                  *(_WORD *)&buf[22] = 2048;
                  v798 = 1;
                  *(_WORD *)v799 = 2048;
                  *(_QWORD *)&v799[2] = v349;
                  v345 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
                  goto LABEL_525;
                }
              }
            }
LABEL_526:
            if (v341)
              free(v341);
            LODWORD(v338) = -1;
            *(_DWORD *)(v9 + 360) = -1;
LABEL_529:
            *((_DWORD *)v135 + 215) = v338;
            if ((*((_BYTE *)v135 + 158) & 1) == 0)
            {
              if (gLogDatapath)
              {
                v655 = __nwlog_obj();
                if (os_log_type_enabled(v655, OS_LOG_TYPE_DEBUG))
                {
                  v656 = *((_QWORD *)v135 + 61);
                  v657 = *(_DWORD *)(*((_QWORD *)v135 + 60) + 372);
                  v658 = *((_DWORD *)v135 + 215);
                  if (v656)
                    LODWORD(v656) = *(_DWORD *)(v656 + 424);
                  v659 = *(_DWORD *)(v9 + 336);
                  *(_DWORD *)buf = 136448002;
                  *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = (char *)v135 + 74;
                  *(_WORD *)&buf[22] = 2080;
                  v798 = (uint64_t)" ";
                  *(_WORD *)v799 = 1024;
                  *(_DWORD *)&v799[2] = v657;
                  *(_WORD *)&v799[6] = 1024;
                  *(_DWORD *)&v799[8] = v658;
                  *(_WORD *)&v799[12] = 1024;
                  *(_DWORD *)&v799[14] = v656;
                  *(_WORD *)&v799[18] = 2048;
                  *(_QWORD *)&v799[20] = v135;
                  *(_WORD *)&v799[28] = 1024;
                  *(_DWORD *)&v799[30] = v659;
                  _os_log_impl(&dword_182FBE000, v655, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> added connection %p, now have %u connections", buf, 0x42u);
                }
              }
            }
            if (*(_QWORD *)(v15 + 248))
            {
              if (*((_QWORD *)v135 + 61))
              {
                __nwlog_obj();
                v351 = *((_QWORD *)v135 + 61);
                *(_DWORD *)buf = 136446722;
                *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                *(_WORD *)&buf[12] = 2048;
                *(_QWORD *)&buf[14] = v135;
                *(_WORD *)&buf[22] = 2048;
                v798 = v351;
                v352 = (char *)_os_log_send_and_compose_impl();
                type[0] = OS_LOG_TYPE_ERROR;
                LOBYTE(aBlock) = 0;
                if (!__nwlog_fault(v352, type, &aBlock))
                  goto LABEL_557;
                if (type[0] == OS_LOG_TYPE_FAULT)
                {
                  v353 = __nwlog_obj();
                  v354 = type[0];
                  if (!os_log_type_enabled(v353, type[0]))
                    goto LABEL_557;
                  v355 = *((_QWORD *)v135 + 61);
                  *(_DWORD *)buf = 136446722;
                  *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                  *(_WORD *)&buf[12] = 2048;
                  *(_QWORD *)&buf[14] = v135;
                  *(_WORD *)&buf[22] = 2048;
                  v798 = v355;
                  v356 = "%{public}s Connection %p already has a stream (%p)";
                }
                else if ((_BYTE)aBlock)
                {
                  v369 = (char *)__nw_create_backtrace_string();
                  v353 = __nwlog_obj();
                  v354 = type[0];
                  v370 = os_log_type_enabled(v353, type[0]);
                  if (v369)
                  {
                    if (v370)
                    {
                      v371 = *((_QWORD *)v135 + 61);
                      *(_DWORD *)buf = 136446978;
                      *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                      *(_WORD *)&buf[12] = 2048;
                      *(_QWORD *)&buf[14] = v135;
                      *(_WORD *)&buf[22] = 2048;
                      v798 = v371;
                      *(_WORD *)v799 = 2082;
                      *(_QWORD *)&v799[2] = v369;
                      _os_log_impl(&dword_182FBE000, v353, v354, "%{public}s Connection %p already has a stream (%p), dumping backtrace:%{public}s", buf, 0x2Au);
                    }
                    free(v369);
                    goto LABEL_557;
                  }
                  if (!v370)
                  {
LABEL_557:
                    if (v352)
                      free(v352);
                    goto LABEL_559;
                  }
                  v373 = *((_QWORD *)v135 + 61);
                  *(_DWORD *)buf = 136446722;
                  *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                  *(_WORD *)&buf[12] = 2048;
                  *(_QWORD *)&buf[14] = v135;
                  *(_WORD *)&buf[22] = 2048;
                  v798 = v373;
                  v356 = "%{public}s Connection %p already has a stream (%p), no backtrace";
                }
                else
                {
                  v353 = __nwlog_obj();
                  v354 = type[0];
                  if (!os_log_type_enabled(v353, type[0]))
                    goto LABEL_557;
                  v372 = *((_QWORD *)v135 + 61);
                  *(_DWORD *)buf = 136446722;
                  *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                  *(_WORD *)&buf[12] = 2048;
                  *(_QWORD *)&buf[14] = v135;
                  *(_WORD *)&buf[22] = 2048;
                  v798 = v372;
                  v356 = "%{public}s Connection %p already has a stream (%p), backtrace limit exceeded";
                }
                _os_log_impl(&dword_182FBE000, v353, v354, v356, buf, 0x20u);
                goto LABEL_557;
              }
              *(_QWORD *)(v15 + 256) = v135;
              *((_QWORD *)v135 + 61) = v15;
              nw_protocol_set_output_handler(v15, *((_QWORD *)v135 + 4));
              nw_protocol_set_input_handler((uint64_t)v135, *(_QWORD *)(v15 + 48));
              *(_OWORD *)v15 = *v135;
              v357 = *(_OWORD *)(v15 + 144);
              v359 = *(_OWORD *)(v15 + 96);
              v358 = *(_OWORD *)(v15 + 112);
              v135[8] = *(_OWORD *)(v15 + 128);
              v135[9] = v357;
              v135[6] = v359;
              v135[7] = v358;
              v360 = *(_OWORD *)(v15 + 80);
              v135[4] = *v768;
              v135[5] = v360;
              nw_http_transaction_metadata_set_connection_metadata(*(void **)(v15 + 352), *((void **)v135 + 96));
              *((_WORD *)v135 + 436) &= 0xFFD7u;
              *((_DWORD *)v135 + 216) = 1;
              if ((*((_BYTE *)v135 + 158) & 1) == 0)
              {
                v361 = __nwlog_obj();
                if (os_log_type_enabled(v361, OS_LOG_TYPE_DEBUG))
                {
                  v362 = *((_QWORD *)v135 + 61);
                  v363 = *(_DWORD *)(*((_QWORD *)v135 + 60) + 372);
                  v364 = *((_DWORD *)v135 + 215);
                  if (v362)
                    LODWORD(v362) = *(_DWORD *)(v362 + 424);
                  *(_DWORD *)buf = 136447490;
                  *(_QWORD *)&buf[4] = "nw_http1_update_connection_input_state";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = (char *)v135 + 74;
                  *(_WORD *)&buf[22] = 2080;
                  v798 = (uint64_t)" ";
                  *(_WORD *)v799 = 1024;
                  *(_DWORD *)&v799[2] = v363;
                  *(_WORD *)&v799[6] = 1024;
                  *(_DWORD *)&v799[8] = v364;
                  *(_WORD *)&v799[12] = 1024;
                  *(_DWORD *)&v799[14] = v362;
                  _os_log_impl(&dword_182FBE000, v361, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> connection input state: reading", buf, 0x32u);
                }
              }
              if ((*(_BYTE *)(v15 + 158) & 1) == 0)
              {
                v365 = __nwlog_obj();
                if (os_log_type_enabled(v365, OS_LOG_TYPE_INFO))
                {
                  v366 = *(_QWORD *)(v15 + 256);
                  v367 = *(_DWORD *)(*(_QWORD *)(v15 + 248) + 372);
                  if (v366)
                    LODWORD(v366) = *(_DWORD *)(v366 + 860);
                  v368 = *(_DWORD *)(v15 + 424);
                  *(_DWORD *)buf = 136448002;
                  *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = v15 + 74;
                  *(_WORD *)&buf[22] = 2080;
                  v798 = (uint64_t)" ";
                  *(_WORD *)v799 = 1024;
                  *(_DWORD *)&v799[2] = v367;
                  *(_WORD *)&v799[6] = 1024;
                  *(_DWORD *)&v799[8] = v366;
                  *(_WORD *)&v799[12] = 1024;
                  *(_DWORD *)&v799[14] = v368;
                  *(_WORD *)&v799[18] = 2048;
                  *(_QWORD *)&v799[20] = v15;
                  *(_WORD *)&v799[28] = 2048;
                  *(_QWORD *)&v799[30] = v135;
                  _os_log_impl(&dword_182FBE000, v365, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s<i%u:c%u:s%u> stream (%p) now using connection %p", buf, 0x46u);
                }
              }
LABEL_559:
              if ((*(_BYTE *)(v15 + 158) & 1) == 0)
              {
                v374 = __nwlog_obj();
                if (os_log_type_enabled(v374, OS_LOG_TYPE_DEBUG))
                {
                  v375 = *(_QWORD *)(v15 + 256);
                  v376 = *(_DWORD *)(*(_QWORD *)(v15 + 248) + 372);
                  if (v375)
                    LODWORD(v375) = *(_DWORD *)(v375 + 860);
                  v377 = *(_DWORD *)(v15 + 424);
                  *(_DWORD *)buf = 136448258;
                  *(_QWORD *)&buf[4] = "nw_http1_start_new_connection_for_stream";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = v15 + 74;
                  *(_WORD *)&buf[22] = 2080;
                  v798 = (uint64_t)" ";
                  *(_WORD *)v799 = 1024;
                  *(_DWORD *)&v799[2] = v376;
                  *(_WORD *)&v799[6] = 1024;
                  *(_DWORD *)&v799[8] = v375;
                  *(_WORD *)&v799[12] = 1024;
                  *(_DWORD *)&v799[14] = v377;
                  *(_WORD *)&v799[18] = 2048;
                  *(_QWORD *)&v799[20] = v135;
                  *(_WORD *)&v799[28] = 1024;
                  *(_DWORD *)&v799[30] = v377;
                  *(_WORD *)&v799[34] = 2048;
                  *(_QWORD *)&v799[36] = v15;
                  _os_log_impl(&dword_182FBE000, v374, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> created new connection %p for stream %u (%p)", buf, 0x4Cu);
                }
              }
              nw_http_transaction_metadata_set_first_on_connection(*(void **)(v15 + 352));
              v378 = (void *)nw_protocol_boringssl_copy_definition();
              v379 = nw_protocol_definition_get_identifier(v378);
              v380 = (_QWORD *)nw_protocol_get_identifier((uint64_t)v766);
              v381 = nw_protocols_are_equal(v379, v380);
              if (v378)
                os_release(v378);
              if (v381)
              {
                v382 = nw_protocol_copy_info((uint64_t)v766, 255);
                if (v382)
                {
                  v383 = (void *)v382;
                  v384 = *(_QWORD *)(v382 + 24);
                  if (*(_QWORD *)(v382 + 16) != v384)
                  {
                    v385 = *(void **)(v384 - 8);
                    if (v385)
                    {
                      v386 = os_retain(v385);
                      if (v386)
                      {
                        v387 = v386;
                        if (nw_protocol_metadata_is_tls(v386))
                        {
                          v388 = v387;
                          nw_http_connection_metadata_set_sec_metadata(*((void **)v135 + 96), v388);
                          os_release(v388);
                        }
                        os_release(v387);
                      }
                    }
                  }
                  os_release(v383);
                }
              }
              if (v135)
              {
                nw_protocol_connect((uint64_t)v766, (uint64_t)v135);
                goto LABEL_577;
              }
              __nwlog_obj();
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_http1_get_output_protocol";
              v628 = (char *)_os_log_send_and_compose_impl();
              type[0] = OS_LOG_TYPE_ERROR;
              LOBYTE(aBlock) = 0;
              if (__nwlog_fault(v628, type, &aBlock))
              {
                if (type[0] == OS_LOG_TYPE_FAULT)
                {
                  v629 = __nwlog_obj();
                  v630 = type[0];
                  if (os_log_type_enabled(v629, type[0]))
                  {
                    *(_DWORD *)buf = 136446210;
                    *(_QWORD *)&buf[4] = "nw_http1_get_output_protocol";
                    v631 = "%{public}s called with null connection";
LABEL_1253:
                    _os_log_impl(&dword_182FBE000, v629, v630, v631, buf, 0xCu);
                  }
                }
                else if ((_BYTE)aBlock)
                {
                  v680 = (char *)__nw_create_backtrace_string();
                  v629 = __nwlog_obj();
                  v630 = type[0];
                  v681 = os_log_type_enabled(v629, type[0]);
                  if (v680)
                  {
                    if (v681)
                    {
                      *(_DWORD *)buf = 136446466;
                      *(_QWORD *)&buf[4] = "nw_http1_get_output_protocol";
                      *(_WORD *)&buf[12] = 2082;
                      *(_QWORD *)&buf[14] = v680;
                      _os_log_impl(&dword_182FBE000, v629, v630, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
                    }
                    free(v680);
                    goto LABEL_1254;
                  }
                  if (v681)
                  {
                    *(_DWORD *)buf = 136446210;
                    *(_QWORD *)&buf[4] = "nw_http1_get_output_protocol";
                    v631 = "%{public}s called with null connection, no backtrace";
                    goto LABEL_1253;
                  }
                }
                else
                {
                  v629 = __nwlog_obj();
                  v630 = type[0];
                  if (os_log_type_enabled(v629, type[0]))
                  {
                    *(_DWORD *)buf = 136446210;
                    *(_QWORD *)&buf[4] = "nw_http1_get_output_protocol";
                    v631 = "%{public}s called with null connection, backtrace limit exceeded";
                    goto LABEL_1253;
                  }
                }
              }
LABEL_1254:
              if (v628)
                free(v628);
              nw_protocol_connect((uint64_t)v766, 0);
LABEL_577:
              nw_protocol_set_output_handler(v9, 0);
              *(_WORD *)(v15 + 428) &= ~8u;
              v389 = *(_DWORD *)(v9 + 352);
              *(_DWORD *)(v9 + 352) = v389 - 1;
              if (v389)
                return 1;
              __nwlog_obj();
              v390 = *(unsigned int *)(v9 + 352);
              *(_DWORD *)buf = 136446978;
              *(_QWORD *)&buf[4] = "nw_http1_create_connection_for_stream_if_allowed";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = "http1->pending_output_handler_count";
              *(_WORD *)&buf[22] = 2048;
              v798 = 1;
              *(_WORD *)v799 = 2048;
              *(_QWORD *)&v799[2] = v390;
              v233 = (char *)_os_log_send_and_compose_impl();
              type[0] = OS_LOG_TYPE_ERROR;
              LOBYTE(aBlock) = 0;
              if (__nwlog_fault(v233, type, &aBlock))
              {
                if (type[0] != OS_LOG_TYPE_FAULT)
                {
                  if ((_BYTE)aBlock)
                  {
                    v391 = (char *)__nw_create_backtrace_string();
                    v234 = __nwlog_obj();
                    v235 = type[0];
                    v239 = os_log_type_enabled(v234, type[0]);
                    if (v391)
                    {
                      if (v239)
                      {
                        v392 = *(unsigned int *)(v9 + 352);
                        *(_DWORD *)buf = 136447234;
                        *(_QWORD *)&buf[4] = "nw_http1_create_connection_for_stream_if_allowed";
                        *(_WORD *)&buf[12] = 2082;
                        *(_QWORD *)&buf[14] = "http1->pending_output_handler_count";
                        *(_WORD *)&buf[22] = 2048;
                        v798 = 1;
                        *(_WORD *)v799 = 2048;
                        *(_QWORD *)&v799[2] = v392;
                        *(_WORD *)&v799[10] = 2082;
                        *(_QWORD *)&v799[12] = v391;
                        _os_log_impl(&dword_182FBE000, v234, v235, "%{public}s Underflow: %{public}s, decrement %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
                      }
                      free(v391);
                      if (!v233)
                        goto LABEL_593;
                      goto LABEL_592;
                    }
                    goto LABEL_588;
                  }
                  goto LABEL_586;
                }
LABEL_330:
                v234 = __nwlog_obj();
                v235 = type[0];
                if (!os_log_type_enabled(v234, type[0]))
                  goto LABEL_591;
                v236 = *(unsigned int *)(v9 + 352);
                *(_DWORD *)buf = 136446978;
                *(_QWORD *)&buf[4] = "nw_http1_create_connection_for_stream_if_allowed";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = "http1->pending_output_handler_count";
                *(_WORD *)&buf[22] = 2048;
                v798 = 1;
                *(_WORD *)v799 = 2048;
                *(_QWORD *)&v799[2] = v236;
                v237 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu";
LABEL_590:
                _os_log_impl(&dword_182FBE000, v234, v235, v237, buf, 0x2Au);
                goto LABEL_591;
              }
              goto LABEL_591;
            }
            __nwlog_obj();
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
            v647 = (char *)_os_log_send_and_compose_impl();
            type[0] = OS_LOG_TYPE_ERROR;
            LOBYTE(aBlock) = 0;
            if (__nwlog_fault(v647, type, &aBlock))
            {
              if (type[0] == OS_LOG_TYPE_FAULT)
              {
                v648 = __nwlog_obj();
                v649 = type[0];
                if (!os_log_type_enabled(v648, type[0]))
                  goto LABEL_1310;
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                v650 = "%{public}s called with null http1_stream->protocol_http1";
                goto LABEL_1309;
              }
              if (!(_BYTE)aBlock)
              {
                v648 = __nwlog_obj();
                v649 = type[0];
                if (!os_log_type_enabled(v648, type[0]))
                  goto LABEL_1310;
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                v650 = "%{public}s called with null http1_stream->protocol_http1, backtrace limit exceeded";
                goto LABEL_1309;
              }
              v713 = (char *)__nw_create_backtrace_string();
              v648 = __nwlog_obj();
              v649 = type[0];
              v714 = os_log_type_enabled(v648, type[0]);
              if (v713)
              {
                if (v714)
                {
                  *(_DWORD *)buf = 136446466;
                  *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = v713;
                  _os_log_impl(&dword_182FBE000, v648, v649, "%{public}s called with null http1_stream->protocol_http1, dumping backtrace:%{public}s", buf, 0x16u);
                }
                free(v713);
                goto LABEL_1310;
              }
              if (v714)
              {
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                v650 = "%{public}s called with null http1_stream->protocol_http1, no backtrace";
LABEL_1309:
                _os_log_impl(&dword_182FBE000, v648, v649, v650, buf, 0xCu);
              }
            }
LABEL_1310:
            if (v647)
              free(v647);
            goto LABEL_559;
          }
          __nwlog_obj();
          v162 = *(unsigned int *)(v9 + 336);
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = "http1->connections_count";
          *(_WORD *)&buf[22] = 2048;
          v798 = 1;
          *(_WORD *)v799 = 2048;
          *(_QWORD *)&v799[2] = v162;
          v163 = (char *)_os_log_send_and_compose_impl();
          type[0] = OS_LOG_TYPE_ERROR;
          LOBYTE(aBlock) = 0;
          if (__nwlog_fault(v163, type, &aBlock))
          {
            if (type[0] == OS_LOG_TYPE_FAULT)
            {
              v164 = __nwlog_obj();
              v165 = type[0];
              if (os_log_type_enabled(v164, type[0]))
              {
                v166 = *(unsigned int *)(v9 + 336);
                *(_DWORD *)buf = 136446978;
                *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = "http1->connections_count";
                *(_WORD *)&buf[22] = 2048;
                v798 = 1;
                *(_WORD *)v799 = 2048;
                *(_QWORD *)&v799[2] = v166;
                v167 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_506:
                _os_log_impl(&dword_182FBE000, v164, v165, v167, buf, 0x2Au);
              }
            }
            else if ((_BYTE)aBlock)
            {
              v261 = (char *)__nw_create_backtrace_string();
              v164 = __nwlog_obj();
              v165 = type[0];
              v262 = os_log_type_enabled(v164, type[0]);
              if (v261)
              {
                if (v262)
                {
                  v263 = *(unsigned int *)(v9 + 336);
                  *(_DWORD *)buf = 136447234;
                  *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = "http1->connections_count";
                  *(_WORD *)&buf[22] = 2048;
                  v798 = 1;
                  *(_WORD *)v799 = 2048;
                  *(_QWORD *)&v799[2] = v263;
                  *(_WORD *)&v799[10] = 2082;
                  *(_QWORD *)&v799[12] = v261;
                  _os_log_impl(&dword_182FBE000, v164, v165, "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
                }
                free(v261);
                goto LABEL_507;
              }
              if (v262)
              {
                v337 = *(unsigned int *)(v9 + 336);
                *(_DWORD *)buf = 136446978;
                *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = "http1->connections_count";
                *(_WORD *)&buf[22] = 2048;
                v798 = 1;
                *(_WORD *)v799 = 2048;
                *(_QWORD *)&v799[2] = v337;
                v167 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
                goto LABEL_506;
              }
            }
            else
            {
              v164 = __nwlog_obj();
              v165 = type[0];
              if (os_log_type_enabled(v164, type[0]))
              {
                v329 = *(unsigned int *)(v9 + 336);
                *(_DWORD *)buf = 136446978;
                *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = "http1->connections_count";
                *(_WORD *)&buf[22] = 2048;
                v798 = 1;
                *(_WORD *)v799 = 2048;
                *(_QWORD *)&v799[2] = v329;
                v167 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
                goto LABEL_506;
              }
            }
          }
LABEL_507:
          if (v163)
            free(v163);
          *(_DWORD *)(v9 + 336) = -1;
          goto LABEL_510;
        }
        __nwlog_obj();
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http1_connection_create";
        v624 = (char *)_os_log_send_and_compose_impl();
        v792[0] = 16;
        LOBYTE(v773[0]) = 0;
        if (__nwlog_fault(v624, v792, v773))
        {
          if (v792[0] == 17)
          {
            v625 = __nwlog_obj();
            v626 = v792[0];
            if (!os_log_type_enabled(v625, (os_log_type_t)v792[0]))
              goto LABEL_1262;
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_http1_connection_create";
            v627 = "%{public}s called with null parameters";
            goto LABEL_1261;
          }
          if (!LOBYTE(v773[0]))
          {
            v625 = __nwlog_obj();
            v626 = v792[0];
            if (!os_log_type_enabled(v625, (os_log_type_t)v792[0]))
              goto LABEL_1262;
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_http1_connection_create";
            v627 = "%{public}s called with null parameters, backtrace limit exceeded";
            goto LABEL_1261;
          }
          v682 = (char *)__nw_create_backtrace_string();
          v625 = __nwlog_obj();
          v626 = v792[0];
          v699 = os_log_type_enabled(v625, (os_log_type_t)v792[0]);
          if (!v682)
          {
            if (!v699)
              goto LABEL_1262;
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_http1_connection_create";
            v627 = "%{public}s called with null parameters, no backtrace";
            goto LABEL_1261;
          }
          if (v699)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_http1_connection_create";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v682;
            v684 = "%{public}s called with null parameters, dumping backtrace:%{public}s";
            goto LABEL_1167;
          }
          goto LABEL_1168;
        }
LABEL_1262:
        if (!v624)
          goto LABEL_1264;
        goto LABEL_1263;
      }
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_connection_create";
      v624 = (char *)_os_log_send_and_compose_impl();
      v792[0] = 16;
      LOBYTE(v773[0]) = 0;
      if (!__nwlog_fault(v624, v792, v773))
        goto LABEL_1262;
      if (v792[0] != 17)
      {
        if (!LOBYTE(v773[0]))
        {
          v625 = __nwlog_obj();
          v626 = v792[0];
          if (!os_log_type_enabled(v625, (os_log_type_t)v792[0]))
            goto LABEL_1262;
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http1_connection_create";
          v627 = "%{public}s called with null endpoint, backtrace limit exceeded";
          goto LABEL_1261;
        }
        v682 = (char *)__nw_create_backtrace_string();
        v625 = __nwlog_obj();
        v626 = v792[0];
        v683 = os_log_type_enabled(v625, (os_log_type_t)v792[0]);
        if (!v682)
        {
          if (!v683)
            goto LABEL_1262;
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http1_connection_create";
          v627 = "%{public}s called with null endpoint, no backtrace";
          goto LABEL_1261;
        }
        if (v683)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_http1_connection_create";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v682;
          v684 = "%{public}s called with null endpoint, dumping backtrace:%{public}s";
LABEL_1167:
          _os_log_impl(&dword_182FBE000, v625, v626, v684, buf, 0x16u);
        }
LABEL_1168:
        free(v682);
        if (!v624)
        {
LABEL_1264:
          __nwlog_obj();
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
          v738 = (char *)_os_log_send_and_compose_impl();
          type[0] = OS_LOG_TYPE_ERROR;
          LOBYTE(aBlock) = 0;
          if (!__nwlog_fault(v738, type, &aBlock))
            goto LABEL_1278;
          if (type[0] == OS_LOG_TYPE_FAULT)
          {
            v739 = __nwlog_obj();
            v740 = type[0];
            if (!os_log_type_enabled(v739, type[0]))
              goto LABEL_1278;
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
            v741 = "%{public}s called with null http1_connection";
          }
          else if ((_BYTE)aBlock)
          {
            v742 = (char *)__nw_create_backtrace_string();
            v739 = __nwlog_obj();
            v740 = type[0];
            v743 = os_log_type_enabled(v739, type[0]);
            if (v742)
            {
              if (v743)
              {
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = v742;
                _os_log_impl(&dword_182FBE000, v739, v740, "%{public}s called with null http1_connection, dumping backtrace:%{public}s", buf, 0x16u);
              }
              free(v742);
LABEL_1278:
              if (v738)
                free(v738);
              __nwlog_obj();
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
              v744 = (char *)_os_log_send_and_compose_impl();
              type[0] = OS_LOG_TYPE_ERROR;
              LOBYTE(aBlock) = 0;
              if (!__nwlog_fault(v744, type, &aBlock))
                goto LABEL_1294;
              if (type[0] == OS_LOG_TYPE_FAULT)
              {
                v745 = __nwlog_obj();
                v746 = type[0];
                if (os_log_type_enabled(v745, type[0]))
                {
                  *(_DWORD *)buf = 136446210;
                  *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                  v747 = "%{public}s called with null http1_connection";
LABEL_1293:
                  _os_log_impl(&dword_182FBE000, v745, v746, v747, buf, 0xCu);
                }
              }
              else if ((_BYTE)aBlock)
              {
                v748 = (char *)__nw_create_backtrace_string();
                v745 = __nwlog_obj();
                v746 = type[0];
                v749 = os_log_type_enabled(v745, type[0]);
                if (v748)
                {
                  if (v749)
                  {
                    *(_DWORD *)buf = 136446466;
                    *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                    *(_WORD *)&buf[12] = 2082;
                    *(_QWORD *)&buf[14] = v748;
                    _os_log_impl(&dword_182FBE000, v745, v746, "%{public}s called with null http1_connection, dumping backtrace:%{public}s", buf, 0x16u);
                  }
                  free(v748);
                  goto LABEL_1294;
                }
                if (v749)
                {
                  *(_DWORD *)buf = 136446210;
                  *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                  v747 = "%{public}s called with null http1_connection, no backtrace";
                  goto LABEL_1293;
                }
              }
              else
              {
                v745 = __nwlog_obj();
                v746 = type[0];
                if (os_log_type_enabled(v745, type[0]))
                {
                  *(_DWORD *)buf = 136446210;
                  *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                  v747 = "%{public}s called with null http1_connection, backtrace limit exceeded";
                  goto LABEL_1293;
                }
              }
LABEL_1294:
              if (v744)
                free(v744);
              v135 = 0;
              goto LABEL_559;
            }
            if (!v743)
              goto LABEL_1278;
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
            v741 = "%{public}s called with null http1_connection, no backtrace";
          }
          else
          {
            v739 = __nwlog_obj();
            v740 = type[0];
            if (!os_log_type_enabled(v739, type[0]))
              goto LABEL_1278;
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
            v741 = "%{public}s called with null http1_connection, backtrace limit exceeded";
          }
          _os_log_impl(&dword_182FBE000, v739, v740, v741, buf, 0xCu);
          goto LABEL_1278;
        }
LABEL_1263:
        free(v624);
        goto LABEL_1264;
      }
      v625 = __nwlog_obj();
      v626 = v792[0];
      if (!os_log_type_enabled(v625, (os_log_type_t)v792[0]))
        goto LABEL_1262;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_connection_create";
      v627 = "%{public}s called with null endpoint";
    }
    else
    {
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_connection_create";
      v624 = (char *)_os_log_send_and_compose_impl();
      v792[0] = 16;
      LOBYTE(v773[0]) = 0;
      if (!__nwlog_fault(v624, v792, v773))
        goto LABEL_1262;
      if (v792[0] != 17)
      {
        if (!LOBYTE(v773[0]))
        {
          v625 = __nwlog_obj();
          v626 = v792[0];
          if (!os_log_type_enabled(v625, (os_log_type_t)v792[0]))
            goto LABEL_1262;
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http1_connection_create";
          v627 = "%{public}s called with null output_handler, backtrace limit exceeded";
          goto LABEL_1261;
        }
        v678 = (char *)__nw_create_backtrace_string();
        v625 = __nwlog_obj();
        v626 = v792[0];
        v679 = os_log_type_enabled(v625, (os_log_type_t)v792[0]);
        if (!v678)
        {
          if (!v679)
            goto LABEL_1262;
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http1_connection_create";
          v627 = "%{public}s called with null output_handler, no backtrace";
          goto LABEL_1261;
        }
        if (v679)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_http1_connection_create";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v678;
          _os_log_impl(&dword_182FBE000, v625, v626, "%{public}s called with null output_handler, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v678);
        goto LABEL_1262;
      }
      v625 = __nwlog_obj();
      v626 = v792[0];
      if (!os_log_type_enabled(v625, (os_log_type_t)v792[0]))
        goto LABEL_1262;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_connection_create";
      v627 = "%{public}s called with null output_handler";
    }
LABEL_1261:
    _os_log_impl(&dword_182FBE000, v625, v626, v627, buf, 0xCu);
    goto LABEL_1262;
  }
  if (*(_DWORD *)(v9 + 336) + *(_DWORD *)(v9 + 352) < (*(_DWORD *)(v9 + 368) + *(_DWORD *)(v9 + 364)))
  {
    v122 = &unk_1ECD84000;
    if ((*(_BYTE *)(v15 + 158) & 1) == 0)
    {
      if (gLogDatapath)
      {
        v660 = __nwlog_obj();
        v661 = os_log_type_enabled(v660, OS_LOG_TYPE_DEBUG);
        v122 = (_BYTE *)&unk_1ECD84000;
        if (v661)
        {
          v662 = *(_QWORD *)(v15 + 256);
          v663 = *(_DWORD *)(*(_QWORD *)(v15 + 248) + 372);
          if (v662)
            LODWORD(v662) = *(_DWORD *)(v662 + 860);
          v664 = *(_DWORD *)(v15 + 424);
          *(_DWORD *)buf = 136447490;
          *(_QWORD *)&buf[4] = "nw_http1_create_connection_for_stream_if_allowed";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v15 + 74;
          *(_WORD *)&buf[22] = 2080;
          v798 = (uint64_t)" ";
          *(_WORD *)v799 = 1024;
          *(_DWORD *)&v799[2] = v663;
          *(_WORD *)&v799[6] = 1024;
          *(_DWORD *)&v799[8] = v662;
          *(_WORD *)&v799[12] = 1024;
          *(_DWORD *)&v799[14] = v664;
          _os_log_impl(&dword_182FBE000, v660, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> width allows new connection, creating", buf, 0x32u);
          v122 = (_BYTE *)&unk_1ECD84000;
        }
      }
    }
    if ((*(_WORD *)(v15 + 428) & 0x1000) == 0)
      goto LABEL_664;
    if ((*(_BYTE *)(v9 + 158) & 1) == 0)
    {
      if (v122[1345])
      {
        v715 = __nwlog_obj();
        if (os_log_type_enabled(v715, OS_LOG_TYPE_DEBUG))
        {
          v716 = *(_DWORD *)(v9 + 372);
          v717 = *(_DWORD *)(v15 + 424);
          *(_DWORD *)buf = 136447490;
          *(_QWORD *)&buf[4] = "nw_http1_remove_pending_stream";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v9 + 74;
          *(_WORD *)&buf[22] = 2080;
          v798 = (uint64_t)" ";
          *(_WORD *)v799 = 1024;
          *(_DWORD *)&v799[2] = v716;
          *(_WORD *)&v799[6] = 1024;
          *(_DWORD *)&v799[8] = v717;
          *(_WORD *)&v799[12] = 2048;
          *(_QWORD *)&v799[14] = v15;
          _os_log_impl(&dword_182FBE000, v715, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> called for stream %u (%p)", buf, 0x36u);
        }
      }
    }
    if ((*(_WORD *)(v15 + 428) & 0x1000) == 0)
    {
      __nwlog_obj();
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_http1_remove_pending_stream";
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v15;
      v123 = (char *)_os_log_send_and_compose_impl();
      type[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(aBlock) = 0;
      if (!__nwlog_fault(v123, type, &aBlock))
        goto LABEL_638;
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        v124 = __nwlog_obj();
        v125 = type[0];
        if (!os_log_type_enabled(v124, type[0]))
          goto LABEL_638;
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http1_remove_pending_stream";
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v15;
        v126 = "%{public}s stream %p not in pending list, cannot remove";
      }
      else if ((_BYTE)aBlock)
      {
        v327 = (char *)__nw_create_backtrace_string();
        v124 = __nwlog_obj();
        v125 = type[0];
        v328 = os_log_type_enabled(v124, type[0]);
        if (v327)
        {
          if (v328)
          {
            *(_DWORD *)buf = 136446722;
            *(_QWORD *)&buf[4] = "nw_http1_remove_pending_stream";
            *(_WORD *)&buf[12] = 2048;
            *(_QWORD *)&buf[14] = v15;
            *(_WORD *)&buf[22] = 2082;
            v798 = (uint64_t)v327;
            _os_log_impl(&dword_182FBE000, v124, v125, "%{public}s stream %p not in pending list, cannot remove, dumping backtrace:%{public}s", buf, 0x20u);
          }
          free(v327);
          goto LABEL_638;
        }
        if (!v328)
        {
LABEL_638:
          if (v123)
            free(v123);
LABEL_640:
          v122 = (_BYTE *)&unk_1ECD84000;
          goto LABEL_664;
        }
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http1_remove_pending_stream";
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v15;
        v126 = "%{public}s stream %p not in pending list, cannot remove, no backtrace";
      }
      else
      {
        v124 = __nwlog_obj();
        v125 = type[0];
        if (!os_log_type_enabled(v124, type[0]))
          goto LABEL_638;
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http1_remove_pending_stream";
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v15;
        v126 = "%{public}s stream %p not in pending list, cannot remove, backtrace limit exceeded";
      }
      _os_log_impl(&dword_182FBE000, v124, v125, v126, buf, 0x16u);
      goto LABEL_638;
    }
    v275 = *(_QWORD *)(v15 + 296);
    v276 = *(_QWORD **)(v15 + 304);
    if (v275)
    {
      *(_QWORD *)(v275 + 304) = v276;
      v276 = *(_QWORD **)(v15 + 304);
    }
    else
    {
      *(_QWORD *)(v9 + 256) = v276;
    }
    *v276 = v275;
    *(_QWORD *)(v15 + 296) = 0;
    *(_QWORD *)(v15 + 304) = 0;
    v330 = *(_DWORD *)(v9 + 348);
    *(_DWORD *)(v9 + 348) = v330 - 1;
    if (v330)
    {
LABEL_662:
      *(_WORD *)(v15 + 428) &= ~0x1000u;
      v122 = &unk_1ECD84000;
      if ((*(_BYTE *)(v15 + 158) & 1) == 0)
      {
        if (gLogDatapath)
        {
          v732 = __nwlog_obj();
          v733 = os_log_type_enabled(v732, OS_LOG_TYPE_DEBUG);
          v122 = (_BYTE *)&unk_1ECD84000;
          if (v733)
          {
            v734 = *(_QWORD *)(v15 + 256);
            v735 = *(_DWORD *)(*(_QWORD *)(v15 + 248) + 372);
            if (v734)
              LODWORD(v734) = *(_DWORD *)(v734 + 860);
            v736 = *(_DWORD *)(v15 + 424);
            v737 = *(_DWORD *)(v9 + 348);
            *(_DWORD *)buf = 136448258;
            *(_QWORD *)&buf[4] = "nw_http1_remove_pending_stream";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v15 + 74;
            *(_WORD *)&buf[22] = 2080;
            v798 = (uint64_t)" ";
            *(_WORD *)v799 = 1024;
            *(_DWORD *)&v799[2] = v735;
            *(_WORD *)&v799[6] = 1024;
            *(_DWORD *)&v799[8] = v734;
            *(_WORD *)&v799[12] = 1024;
            *(_DWORD *)&v799[14] = v736;
            *(_WORD *)&v799[18] = 1024;
            *(_DWORD *)&v799[20] = v736;
            *(_WORD *)&v799[24] = 2048;
            *(_QWORD *)&v799[26] = v15;
            *(_WORD *)&v799[34] = 1024;
            *(_DWORD *)&v799[36] = v737;
            _os_log_impl(&dword_182FBE000, v732, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> removed pending stream %u (%p), now have %u pending streams", buf, 0x48u);
            goto LABEL_640;
          }
        }
      }
LABEL_664:
      if (*(_QWORD *)(v15 + 32))
      {
        if ((*(_BYTE *)(v15 + 158) & 1) == 0)
        {
          if (v122[1345])
          {
            v673 = __nwlog_obj();
            if (os_log_type_enabled(v673, OS_LOG_TYPE_DEBUG))
            {
              v674 = *(_QWORD *)(v15 + 256);
              v675 = *(_DWORD *)(*(_QWORD *)(v15 + 248) + 372);
              if (v674)
                LODWORD(v674) = *(_DWORD *)(v674 + 860);
              v676 = *(_DWORD *)(v15 + 424);
              v677 = *(_QWORD *)(v15 + 32);
              *(_DWORD *)buf = 136447746;
              *(_QWORD *)&buf[4] = "nw_http1_establish_new_connection_for_stream";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v15 + 74;
              *(_WORD *)&buf[22] = 2080;
              v798 = (uint64_t)" ";
              *(_WORD *)v799 = 1024;
              *(_DWORD *)&v799[2] = v675;
              *(_WORD *)&v799[6] = 1024;
              *(_DWORD *)&v799[8] = v674;
              *(_WORD *)&v799[12] = 1024;
              *(_DWORD *)&v799[14] = v676;
              *(_WORD *)&v799[18] = 2048;
              *(_QWORD *)&v799[20] = v677;
              _os_log_impl(&dword_182FBE000, v673, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> using already established output handler %p", buf, 0x3Cu);
            }
          }
        }
        v767 = *(_OWORD **)(v15 + 32);
        if (v767)
        {
          v414 = *(void **)(v15 + 336);
          if (v414)
          {
            v415 = *(void **)(v15 + 320);
            if (v415)
            {
              v416 = malloc_type_calloc(1uLL, 0x370uLL, 0xEAFB8F1AuLL);
              if (v416)
                goto LABEL_671;
              v685 = __nwlog_obj();
              os_log_type_enabled(v685, OS_LOG_TYPE_ERROR);
              *(_DWORD *)buf = 136446722;
              *(_QWORD *)&buf[4] = "strict_calloc";
              *(_WORD *)&buf[12] = 2048;
              *(_QWORD *)&buf[14] = 1;
              *(_WORD *)&buf[22] = 2048;
              v798 = 880;
              v686 = (void *)_os_log_send_and_compose_impl();
              result = __nwlog_abort((uint64_t)v686);
              if (!result)
              {
                free(v686);
LABEL_671:
                bzero(v416, 0x370uLL);
                if (nw_protocol_http1_identifier::onceToken != -1)
                  dispatch_once(&nw_protocol_http1_identifier::onceToken, &__block_literal_global_39812);
                *((_QWORD *)v416 + 2) = &nw_protocol_http1_identifier::http1_protocol_identifier;
                if (nw_protocol_http1_get_callbacks(void)::onceToken[0] != -1)
                  dispatch_once(nw_protocol_http1_get_callbacks(void)::onceToken, &__block_literal_global_17_39614);
                *((_QWORD *)v416 + 3) = &nw_protocol_http1_get_callbacks(void)::http1_protocol_callbacks;
                *((_DWORD *)v416 + 46) = 3;
                *((_QWORD *)v416 + 22) = v416;
                *((_QWORD *)v416 + 5) = v416 + 10;
                *((_QWORD *)v416 + 60) = v9;
                nw_protocol_set_output_handler((uint64_t)v416, (uint64_t)v767);
                *(_QWORD *)buf = os_retain(v414);
                nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v416 + 47), buf);
                *(_QWORD *)buf = os_retain(v415);
                nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v416 + 46), buf);
                *(_QWORD *)buf = nw_parameters_copy_context(v415);
                nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v416 + 31), buf);
                *((_QWORD *)v416 + 24) = *(_QWORD *)(v9 + 192);
                v417 = MEMORY[0x1E0C809B0];
                v418 = (void *)*((_QWORD *)v416 + 62);
                *(_QWORD *)type = MEMORY[0x1E0C809B0];
                v782 = 0x40000000;
                v783 = (uint64_t)___ZL26nw_http1_connection_createP11nw_protocolP17nw_protocol_http1P11nw_endpointP13nw_parameters_block_invoke;
                v784 = (uint64_t (*)(uint64_t, uint64_t))&__block_descriptor_tmp_40_39813;
                v785 = (void (*)(uint64_t))v416;
                *(_QWORD *)buf = nw_http_connection_create_metadata(v418, type, 0);
                nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v416 + 48), buf);
                nw_http_connection_metadata_set_version(*((void **)v416 + 96), 3);
                nw_http_connection_metadata_set_shared_connection_pool_metadata(*((void **)v416 + 96), *(void **)(v9 + 312));
                *((_QWORD *)v416 + 77) = 0;
                *((_QWORD *)v416 + 78) = (char *)v416 + 616;
                *((_QWORD *)v416 + 79) = 0;
                *((_QWORD *)v416 + 80) = (char *)v416 + 632;
                *((_QWORD *)v416 + 81) = 0;
                *((_QWORD *)v416 + 82) = (char *)v416 + 648;
                *((_QWORD *)v416 + 83) = 0;
                *((_QWORD *)v416 + 84) = (char *)v416 + 664;
                *((_QWORD *)v416 + 86) = (char *)v416 + 680;
                *((_QWORD *)v416 + 85) = 0;
                nw_frame_cache_init((uint64_t)v416 + 696, (uint64_t)v416, 256, 0x40000, 16);
                v419 = *((_QWORD *)v416 + 60);
                if (v419)
                {
                  *(_OWORD *)((char *)v416 + 360) = 0u;
                  *(_OWORD *)((char *)v416 + 376) = 0u;
                  *(_OWORD *)((char *)v416 + 392) = 0u;
                  *(_OWORD *)((char *)v416 + 408) = 0u;
                  *(_OWORD *)((char *)v416 + 424) = 0u;
                  *(_OWORD *)((char *)v416 + 440) = 0u;
                  *(_OWORD *)((char *)v416 + 328) = 0u;
                  *(_OWORD *)((char *)v416 + 344) = 0u;
                  *((_QWORD *)v416 + 59) = nw_http1_on_reset;
                  *((_QWORD *)v416 + 37) = nw_http1_on_message_begin;
                  *((_QWORD *)v416 + 38) = nw_http1_on_url;
                  *((_QWORD *)v416 + 48) = nw_http1_on_message_complete;
                  *((_QWORD *)v416 + 49) = nw_http1_on_url_complete;
                  *((_QWORD *)v416 + 39) = nw_http1_on_status;
                  *((_QWORD *)v416 + 40) = nw_http1_on_method;
                  *((_QWORD *)v416 + 50) = nw_http1_on_status_complete;
                  *((_QWORD *)v416 + 51) = nw_http1_on_method_complete;
                  *((_QWORD *)v416 + 42) = nw_http1_on_header_field;
                  *((_QWORD *)v416 + 43) = nw_http1_on_header_value;
                  *((_QWORD *)v416 + 53) = nw_http1_on_header_field_complete;
                  *((_QWORD *)v416 + 54) = nw_http1_on_header_value_complete;
                  *((_QWORD *)v416 + 46) = nw_http1_on_headers_complete;
                  *((_QWORD *)v416 + 47) = nw_http1_on_body;
                  *((_QWORD *)v416 + 57) = nw_http1_on_chunk_header;
                  *((_QWORD *)v416 + 58) = nw_http1_on_chunk_complete;
                  v420 = *(_BYTE *)(v419 + 376);
                  *(_OWORD *)((char *)v416 + 248) = 0u;
                  *(_OWORD *)((char *)v416 + 200) = 0u;
                  *(_OWORD *)((char *)v416 + 264) = 0u;
                  *(_OWORD *)((char *)v416 + 232) = 0u;
                  *(_OWORD *)((char *)v416 + 216) = 0u;
                  if ((v420 & 1) != 0)
                    v421 = 1;
                  else
                    v421 = 2;
                  *((_BYTE *)v416 + 272) = v421;
                  *((_QWORD *)v416 + 35) = 0;
                  *((_QWORD *)v416 + 36) = (char *)v416 + 296;
                  *((_WORD *)v416 + 139) = 15619;
                  *((_QWORD *)v416 + 31) = v416;
                  *((_QWORD *)v416 + 32) = 238;
                  if ((*((_BYTE *)v416 + 158) & 1) == 0)
                  {
                    v422 = __nwlog_obj();
                    if (os_log_type_enabled(v422, OS_LOG_TYPE_DEBUG))
                    {
                      v423 = *((_QWORD *)v416 + 61);
                      v424 = *(_DWORD *)(*((_QWORD *)v416 + 60) + 372);
                      v425 = *((_DWORD *)v416 + 215);
                      if (v423)
                        LODWORD(v423) = *(_DWORD *)(v423 + 424);
                      *(_DWORD *)buf = 136448258;
                      *(_QWORD *)&buf[4] = "nw_http1_connection_log_parser_version";
                      *(_WORD *)&buf[12] = 2082;
                      *(_QWORD *)&buf[14] = (char *)v416 + 74;
                      *(_WORD *)&buf[22] = 2080;
                      v798 = (uint64_t)" ";
                      *(_WORD *)v799 = 1024;
                      *(_DWORD *)&v799[2] = v424;
                      *(_WORD *)&v799[6] = 1024;
                      *(_DWORD *)&v799[8] = v425;
                      *(_WORD *)&v799[12] = 1024;
                      *(_DWORD *)&v799[14] = v423;
                      *(_WORD *)&v799[18] = 1024;
                      *(_DWORD *)&v799[20] = 9;
                      *(_WORD *)&v799[24] = 1024;
                      *(_DWORD *)&v799[26] = 2;
                      *(_WORD *)&v799[30] = 1024;
                      *(_DWORD *)&v799[32] = 1;
                      _os_log_impl(&dword_182FBE000, v422, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> using http parser v%u.%u.%u", buf, 0x44u);
                    }
                  }
                  goto LABEL_684;
                }
                __nwlog_obj();
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_http1_connection_parser_init";
                v687 = (char *)_os_log_send_and_compose_impl();
                v792[0] = 16;
                LOBYTE(v773[0]) = 0;
                if (__nwlog_fault(v687, v792, v773))
                {
                  if (v792[0] == 17)
                  {
                    v688 = __nwlog_obj();
                    v689 = v792[0];
                    if (!os_log_type_enabled(v688, (os_log_type_t)v792[0]))
                      goto LABEL_1378;
                    *(_DWORD *)buf = 136446210;
                    *(_QWORD *)&buf[4] = "nw_http1_connection_parser_init";
                    v690 = "%{public}s called with null http1_connection->protocol_http1";
                    goto LABEL_1377;
                  }
                  if (!LOBYTE(v773[0]))
                  {
                    v688 = __nwlog_obj();
                    v689 = v792[0];
                    if (!os_log_type_enabled(v688, (os_log_type_t)v792[0]))
                      goto LABEL_1378;
                    *(_DWORD *)buf = 136446210;
                    *(_QWORD *)&buf[4] = "nw_http1_connection_parser_init";
                    v690 = "%{public}s called with null http1_connection->protocol_http1, backtrace limit exceeded";
                    goto LABEL_1377;
                  }
                  v726 = (char *)__nw_create_backtrace_string();
                  v688 = __nwlog_obj();
                  v689 = v792[0];
                  v727 = os_log_type_enabled(v688, (os_log_type_t)v792[0]);
                  if (v726)
                  {
                    if (v727)
                    {
                      *(_DWORD *)buf = 136446466;
                      *(_QWORD *)&buf[4] = "nw_http1_connection_parser_init";
                      *(_WORD *)&buf[12] = 2082;
                      *(_QWORD *)&buf[14] = v726;
                      _os_log_impl(&dword_182FBE000, v688, v689, "%{public}s called with null http1_connection->protocol_http1, dumping backtrace:%{public}s", buf, 0x16u);
                    }
                    free(v726);
                    goto LABEL_1378;
                  }
                  if (v727)
                  {
                    *(_DWORD *)buf = 136446210;
                    *(_QWORD *)&buf[4] = "nw_http1_connection_parser_init";
                    v690 = "%{public}s called with null http1_connection->protocol_http1, no backtrace";
LABEL_1377:
                    _os_log_impl(&dword_182FBE000, v688, v689, v690, buf, 0xCu);
                  }
                }
LABEL_1378:
                if (v687)
                  free(v687);
LABEL_684:
                *(_QWORD *)buf = 0;
                *(_QWORD *)&buf[8] = buf;
                *(_QWORD *)&buf[16] = 0x2000000000;
                v798 = (uint64_t)v416;
                aBlock = v417;
                v775 = 0x40000000;
                v776 = ___ZL26nw_http1_connection_createP11nw_protocolP17nw_protocol_http1P11nw_endpointP13nw_parameters_block_invoke_2;
                v777 = &unk_1E14A14C8;
                v778 = (uint64_t *)buf;
                *((_QWORD *)v416 + 76) = _Block_copy(&aBlock);
                _Block_object_dispose(buf, 8);
                if ((*((_BYTE *)v416 + 158) & 1) == 0)
                {
                  if (gLogDatapath)
                  {
                    v700 = __nwlog_obj();
                    if (os_log_type_enabled(v700, OS_LOG_TYPE_DEBUG))
                    {
                      v701 = *((_QWORD *)v416 + 61);
                      v702 = *(_DWORD *)(*((_QWORD *)v416 + 60) + 372);
                      v703 = *((_DWORD *)v416 + 215);
                      if (v701)
                        LODWORD(v701) = *(_DWORD *)(v701 + 424);
                      *(_DWORD *)buf = 136447746;
                      *(_QWORD *)&buf[4] = "nw_http1_connection_create";
                      *(_WORD *)&buf[12] = 2082;
                      *(_QWORD *)&buf[14] = (char *)v416 + 74;
                      *(_WORD *)&buf[22] = 2080;
                      v798 = (uint64_t)" ";
                      *(_WORD *)v799 = 1024;
                      *(_DWORD *)&v799[2] = v702;
                      *(_WORD *)&v799[6] = 1024;
                      *(_DWORD *)&v799[8] = v703;
                      *(_WORD *)&v799[12] = 1024;
                      *(_DWORD *)&v799[14] = v701;
                      *(_WORD *)&v799[18] = 2048;
                      *(_QWORD *)&v799[20] = v416;
                      _os_log_impl(&dword_182FBE000, v700, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> created %p", buf, 0x3Cu);
                    }
                  }
                }
                v426 = (nw_path_t *)(v416 + 32);
                nw_protocol_replace_input_handler((uint64_t)v767, v15, (uint64_t)v416);
                *v416 = *v767;
                v427 = (void *)*((_QWORD *)v416 + 92);
                if (v427)
                {
                  if (!*((_QWORD *)v416 + 66))
                  {
                    v428 = (void **)(v416 + 35);
                    v429 = nw_parameters_copy_context(*((void **)v416 + 92));
                    *(_QWORD *)buf = nw_path_copy_flow_registration(v429, (uint64_t)v416);
                    nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v416 + 35), buf);
                    v430 = (void *)*((_QWORD *)v416 + 70);
                    if (v430)
                    {
                      v431 = nw_path_flow_registration_copy_endpoint(v430);
                      v432 = nw_path_flow_registration_copy_parameters(*v428);
                      *(_QWORD *)buf = nw_endpoint_copy_association_with_evaluator(v431, v432, 0);
                      nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v416 + 33), buf);
                      if (*((_QWORD *)v416 + 66))
                      {
                        *(_QWORD *)buf = nw_protocol_instance_stub_create((nw_protocol *)v416);
                        nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v416 + 34), buf);
                        nw_association_register(*((void **)v416 + 66), v427, *((void **)v416 + 68), 0, &__block_literal_global_70_39832);
                        v433 = nw_association_copy_current_path(*((void **)v416 + 66), v432);
                        if (v433)
                        {
                          v434 = v433;
                          v435 = (nw_path_t)nw_path_copy_for_flow_registration(v433, *v428);
                          if (v435)
                          {
                            v436 = v435;
                            if (*v426 != v435)
                            {
                              *(_QWORD *)buf = os_retain(v435);
                              nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v416 + 32), buf);
                            }
                            if (nw_path_has_flows(v436))
                              v437 = 4096;
                            else
                              v437 = 0;
                            v438 = *((_WORD *)v416 + 436) & 0xEFFF | (*((unsigned __int8 *)v416 + 874) << 16);
                            *((_WORD *)v416 + 436) = *((_WORD *)v416 + 436) & 0xEFFF | v437;
                            *((_BYTE *)v416 + 874) = BYTE2(v438);
                            v439 = nw_parameters_copy_effective_proxy_config(v427);
                            if (v439)
                            {
                              v440 = v439;
                              if (nw_path_has_proxy_config(v434, v439))
                              {
                                *(_QWORD *)buf = os_retain(v440);
                                nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v416 + 36), buf);
                              }
                              os_release(v440);
                            }
                            os_release(v436);
                          }
                          os_release(v434);
                        }
                      }
                      if (v432)
                        os_release(v432);
                      if (v431)
                        os_release(v431);
                    }
                    if (v429)
                      os_release(v429);
                  }
                  goto LABEL_709;
                }
                __nwlog_obj();
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_protocol_http1_set_up_association";
                v691 = (char *)_os_log_send_and_compose_impl();
                type[0] = OS_LOG_TYPE_ERROR;
                LOBYTE(aBlock) = 0;
                if (__nwlog_fault(v691, type, &aBlock))
                {
                  if (type[0] == OS_LOG_TYPE_FAULT)
                  {
                    v692 = __nwlog_obj();
                    v693 = type[0];
                    if (!os_log_type_enabled(v692, type[0]))
                      goto LABEL_1383;
                    *(_DWORD *)buf = 136446210;
                    *(_QWORD *)&buf[4] = "nw_protocol_http1_set_up_association";
                    v694 = "%{public}s called with null parameters";
                    goto LABEL_1382;
                  }
                  if (!(_BYTE)aBlock)
                  {
                    v692 = __nwlog_obj();
                    v693 = type[0];
                    if (!os_log_type_enabled(v692, type[0]))
                      goto LABEL_1383;
                    *(_DWORD *)buf = 136446210;
                    *(_QWORD *)&buf[4] = "nw_protocol_http1_set_up_association";
                    v694 = "%{public}s called with null parameters, backtrace limit exceeded";
                    goto LABEL_1382;
                  }
                  v728 = (char *)__nw_create_backtrace_string();
                  v692 = __nwlog_obj();
                  v693 = type[0];
                  v729 = os_log_type_enabled(v692, type[0]);
                  if (v728)
                  {
                    if (v729)
                    {
                      *(_DWORD *)buf = 136446466;
                      *(_QWORD *)&buf[4] = "nw_protocol_http1_set_up_association";
                      *(_WORD *)&buf[12] = 2082;
                      *(_QWORD *)&buf[14] = v728;
                      _os_log_impl(&dword_182FBE000, v692, v693, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
                    }
                    free(v728);
                    goto LABEL_1383;
                  }
                  if (v729)
                  {
                    *(_DWORD *)buf = 136446210;
                    *(_QWORD *)&buf[4] = "nw_protocol_http1_set_up_association";
                    v694 = "%{public}s called with null parameters, no backtrace";
LABEL_1382:
                    _os_log_impl(&dword_182FBE000, v692, v693, v694, buf, 0xCu);
                  }
                }
LABEL_1383:
                if (v691)
                  free(v691);
LABEL_709:
                if (*v426 && nw_path_uses_interface_type(*v426, nw_interface_type_cellular))
                  *((_QWORD *)v416 + 24) = 1000;
                v441 = *(unsigned int *)(v9 + 336) + 1;
                v442 = v441 << 31 >> 31;
                *(_DWORD *)(v9 + 336) = v441;
                if (v442 == v441 && (v442 & 0x8000000000000000) == 0)
                {
LABEL_750:
                  v473 = *(unsigned int *)(v9 + 360) + 1;
                  v474 = v473 << 31 >> 31;
                  *(_DWORD *)(v9 + 360) = v473;
                  if (v474 == v473 && (v474 & 0x8000000000000000) == 0)
                    goto LABEL_769;
                  __nwlog_obj();
                  v475 = *(unsigned int *)(v9 + 360);
                  *(_DWORD *)buf = 136446978;
                  *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = "http1->next_connection_log_num";
                  *(_WORD *)&buf[22] = 2048;
                  v798 = 1;
                  *(_WORD *)v799 = 2048;
                  *(_QWORD *)&v799[2] = v475;
                  v476 = (char *)_os_log_send_and_compose_impl();
                  type[0] = OS_LOG_TYPE_ERROR;
                  LOBYTE(aBlock) = 0;
                  if (__nwlog_fault(v476, type, &aBlock))
                  {
                    if (type[0] == OS_LOG_TYPE_FAULT)
                    {
                      v477 = __nwlog_obj();
                      v478 = type[0];
                      if (os_log_type_enabled(v477, type[0]))
                      {
                        v479 = *(unsigned int *)(v9 + 360);
                        *(_DWORD *)buf = 136446978;
                        *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
                        *(_WORD *)&buf[12] = 2082;
                        *(_QWORD *)&buf[14] = "http1->next_connection_log_num";
                        *(_WORD *)&buf[22] = 2048;
                        v798 = 1;
                        *(_WORD *)v799 = 2048;
                        *(_QWORD *)&v799[2] = v479;
                        v480 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_765:
                        _os_log_impl(&dword_182FBE000, v477, v478, v480, buf, 0x2Au);
                      }
                    }
                    else if ((_BYTE)aBlock)
                    {
                      v481 = (char *)__nw_create_backtrace_string();
                      v477 = __nwlog_obj();
                      v478 = type[0];
                      v482 = os_log_type_enabled(v477, type[0]);
                      if (v481)
                      {
                        if (v482)
                        {
                          v483 = *(unsigned int *)(v9 + 360);
                          *(_DWORD *)buf = 136447234;
                          *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
                          *(_WORD *)&buf[12] = 2082;
                          *(_QWORD *)&buf[14] = "http1->next_connection_log_num";
                          *(_WORD *)&buf[22] = 2048;
                          v798 = 1;
                          *(_WORD *)v799 = 2048;
                          *(_QWORD *)&v799[2] = v483;
                          *(_WORD *)&v799[10] = 2082;
                          *(_QWORD *)&v799[12] = v481;
                          _os_log_impl(&dword_182FBE000, v477, v478, "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
                        }
                        free(v481);
                        goto LABEL_766;
                      }
                      if (v482)
                      {
                        v485 = *(unsigned int *)(v9 + 360);
                        *(_DWORD *)buf = 136446978;
                        *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
                        *(_WORD *)&buf[12] = 2082;
                        *(_QWORD *)&buf[14] = "http1->next_connection_log_num";
                        *(_WORD *)&buf[22] = 2048;
                        v798 = 1;
                        *(_WORD *)v799 = 2048;
                        *(_QWORD *)&v799[2] = v485;
                        v480 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
                        goto LABEL_765;
                      }
                    }
                    else
                    {
                      v477 = __nwlog_obj();
                      v478 = type[0];
                      if (os_log_type_enabled(v477, type[0]))
                      {
                        v484 = *(unsigned int *)(v9 + 360);
                        *(_DWORD *)buf = 136446978;
                        *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
                        *(_WORD *)&buf[12] = 2082;
                        *(_QWORD *)&buf[14] = "http1->next_connection_log_num";
                        *(_WORD *)&buf[22] = 2048;
                        v798 = 1;
                        *(_WORD *)v799 = 2048;
                        *(_QWORD *)&v799[2] = v484;
                        v480 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
                        goto LABEL_765;
                      }
                    }
                  }
LABEL_766:
                  if (v476)
                    free(v476);
                  LODWORD(v473) = -1;
                  *(_DWORD *)(v9 + 360) = -1;
LABEL_769:
                  *((_DWORD *)v416 + 215) = v473;
                  if ((*((_BYTE *)v416 + 158) & 1) == 0)
                  {
                    if (gLogDatapath)
                    {
                      v704 = __nwlog_obj();
                      if (os_log_type_enabled(v704, OS_LOG_TYPE_DEBUG))
                      {
                        v705 = *((_QWORD *)v416 + 61);
                        v706 = *(_DWORD *)(*((_QWORD *)v416 + 60) + 372);
                        v707 = *((_DWORD *)v416 + 215);
                        if (v705)
                          LODWORD(v705) = *(_DWORD *)(v705 + 424);
                        v708 = *(_DWORD *)(v9 + 336);
                        *(_DWORD *)buf = 136448002;
                        *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
                        *(_WORD *)&buf[12] = 2082;
                        *(_QWORD *)&buf[14] = (char *)v416 + 74;
                        *(_WORD *)&buf[22] = 2080;
                        v798 = (uint64_t)" ";
                        *(_WORD *)v799 = 1024;
                        *(_DWORD *)&v799[2] = v706;
                        *(_WORD *)&v799[6] = 1024;
                        *(_DWORD *)&v799[8] = v707;
                        *(_WORD *)&v799[12] = 1024;
                        *(_DWORD *)&v799[14] = v705;
                        *(_WORD *)&v799[18] = 2048;
                        *(_QWORD *)&v799[20] = v416;
                        *(_WORD *)&v799[28] = 1024;
                        *(_DWORD *)&v799[30] = v708;
                        _os_log_impl(&dword_182FBE000, v704, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> added connection %p, now have %u connections", buf, 0x42u);
                      }
                    }
                  }
                  if (*(_QWORD *)(v15 + 248))
                  {
                    if (*((_QWORD *)v416 + 61))
                    {
                      __nwlog_obj();
                      v486 = *((_QWORD *)v416 + 61);
                      *(_DWORD *)buf = 136446722;
                      *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                      *(_WORD *)&buf[12] = 2048;
                      *(_QWORD *)&buf[14] = v416;
                      *(_WORD *)&buf[22] = 2048;
                      v798 = v486;
                      v487 = (char *)_os_log_send_and_compose_impl();
                      type[0] = OS_LOG_TYPE_ERROR;
                      LOBYTE(aBlock) = 0;
                      if (!__nwlog_fault(v487, type, &aBlock))
                        goto LABEL_797;
                      if (type[0] == OS_LOG_TYPE_FAULT)
                      {
                        v488 = __nwlog_obj();
                        v489 = type[0];
                        if (!os_log_type_enabled(v488, type[0]))
                          goto LABEL_797;
                        v490 = *((_QWORD *)v416 + 61);
                        *(_DWORD *)buf = 136446722;
                        *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                        *(_WORD *)&buf[12] = 2048;
                        *(_QWORD *)&buf[14] = v416;
                        *(_WORD *)&buf[22] = 2048;
                        v798 = v490;
                        v491 = "%{public}s Connection %p already has a stream (%p)";
                      }
                      else if ((_BYTE)aBlock)
                      {
                        v504 = (char *)__nw_create_backtrace_string();
                        v488 = __nwlog_obj();
                        v489 = type[0];
                        v505 = os_log_type_enabled(v488, type[0]);
                        if (v504)
                        {
                          if (v505)
                          {
                            v506 = *((_QWORD *)v416 + 61);
                            *(_DWORD *)buf = 136446978;
                            *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                            *(_WORD *)&buf[12] = 2048;
                            *(_QWORD *)&buf[14] = v416;
                            *(_WORD *)&buf[22] = 2048;
                            v798 = v506;
                            *(_WORD *)v799 = 2082;
                            *(_QWORD *)&v799[2] = v504;
                            _os_log_impl(&dword_182FBE000, v488, v489, "%{public}s Connection %p already has a stream (%p), dumping backtrace:%{public}s", buf, 0x2Au);
                          }
                          free(v504);
                          goto LABEL_797;
                        }
                        if (!v505)
                        {
LABEL_797:
                          if (v487)
                            free(v487);
                          goto LABEL_799;
                        }
                        v508 = *((_QWORD *)v416 + 61);
                        *(_DWORD *)buf = 136446722;
                        *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                        *(_WORD *)&buf[12] = 2048;
                        *(_QWORD *)&buf[14] = v416;
                        *(_WORD *)&buf[22] = 2048;
                        v798 = v508;
                        v491 = "%{public}s Connection %p already has a stream (%p), no backtrace";
                      }
                      else
                      {
                        v488 = __nwlog_obj();
                        v489 = type[0];
                        if (!os_log_type_enabled(v488, type[0]))
                          goto LABEL_797;
                        v507 = *((_QWORD *)v416 + 61);
                        *(_DWORD *)buf = 136446722;
                        *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                        *(_WORD *)&buf[12] = 2048;
                        *(_QWORD *)&buf[14] = v416;
                        *(_WORD *)&buf[22] = 2048;
                        v798 = v507;
                        v491 = "%{public}s Connection %p already has a stream (%p), backtrace limit exceeded";
                      }
                      _os_log_impl(&dword_182FBE000, v488, v489, v491, buf, 0x20u);
                      goto LABEL_797;
                    }
                    *(_QWORD *)(v15 + 256) = v416;
                    *((_QWORD *)v416 + 61) = v15;
                    nw_protocol_set_output_handler(v15, *((_QWORD *)v416 + 4));
                    nw_protocol_set_input_handler((uint64_t)v416, *(_QWORD *)(v15 + 48));
                    *(_OWORD *)v15 = *v416;
                    v492 = *(_OWORD *)(v15 + 144);
                    v494 = *(_OWORD *)(v15 + 96);
                    v493 = *(_OWORD *)(v15 + 112);
                    v416[8] = *(_OWORD *)(v15 + 128);
                    v416[9] = v492;
                    v416[6] = v494;
                    v416[7] = v493;
                    v495 = *(_OWORD *)(v15 + 80);
                    v416[4] = *v768;
                    v416[5] = v495;
                    nw_http_transaction_metadata_set_connection_metadata(*(void **)(v15 + 352), *((void **)v416 + 96));
                    *((_WORD *)v416 + 436) &= 0xFFD7u;
                    *((_DWORD *)v416 + 216) = 1;
                    if ((*((_BYTE *)v416 + 158) & 1) == 0)
                    {
                      v496 = __nwlog_obj();
                      if (os_log_type_enabled(v496, OS_LOG_TYPE_DEBUG))
                      {
                        v497 = *((_QWORD *)v416 + 61);
                        v498 = *(_DWORD *)(*((_QWORD *)v416 + 60) + 372);
                        v499 = *((_DWORD *)v416 + 215);
                        if (v497)
                          LODWORD(v497) = *(_DWORD *)(v497 + 424);
                        *(_DWORD *)buf = 136447490;
                        *(_QWORD *)&buf[4] = "nw_http1_update_connection_input_state";
                        *(_WORD *)&buf[12] = 2082;
                        *(_QWORD *)&buf[14] = (char *)v416 + 74;
                        *(_WORD *)&buf[22] = 2080;
                        v798 = (uint64_t)" ";
                        *(_WORD *)v799 = 1024;
                        *(_DWORD *)&v799[2] = v498;
                        *(_WORD *)&v799[6] = 1024;
                        *(_DWORD *)&v799[8] = v499;
                        *(_WORD *)&v799[12] = 1024;
                        *(_DWORD *)&v799[14] = v497;
                        _os_log_impl(&dword_182FBE000, v496, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> connection input state: reading", buf, 0x32u);
                      }
                    }
                    if ((*(_BYTE *)(v15 + 158) & 1) == 0)
                    {
                      v500 = __nwlog_obj();
                      if (os_log_type_enabled(v500, OS_LOG_TYPE_INFO))
                      {
                        v501 = *(_QWORD *)(v15 + 256);
                        v502 = *(_DWORD *)(*(_QWORD *)(v15 + 248) + 372);
                        if (v501)
                          LODWORD(v501) = *(_DWORD *)(v501 + 860);
                        v503 = *(_DWORD *)(v15 + 424);
                        *(_DWORD *)buf = 136448002;
                        *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                        *(_WORD *)&buf[12] = 2082;
                        *(_QWORD *)&buf[14] = v15 + 74;
                        *(_WORD *)&buf[22] = 2080;
                        v798 = (uint64_t)" ";
                        *(_WORD *)v799 = 1024;
                        *(_DWORD *)&v799[2] = v502;
                        *(_WORD *)&v799[6] = 1024;
                        *(_DWORD *)&v799[8] = v501;
                        *(_WORD *)&v799[12] = 1024;
                        *(_DWORD *)&v799[14] = v503;
                        *(_WORD *)&v799[18] = 2048;
                        *(_QWORD *)&v799[20] = v15;
                        *(_WORD *)&v799[28] = 2048;
                        *(_QWORD *)&v799[30] = v416;
                        _os_log_impl(&dword_182FBE000, v500, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s<i%u:c%u:s%u> stream (%p) now using connection %p", buf, 0x46u);
                      }
                    }
LABEL_799:
                    if ((*(_BYTE *)(v15 + 158) & 1) == 0)
                    {
                      v509 = __nwlog_obj();
                      if (os_log_type_enabled(v509, OS_LOG_TYPE_DEBUG))
                      {
                        v510 = *(_QWORD *)(v15 + 256);
                        v511 = *(_DWORD *)(*(_QWORD *)(v15 + 248) + 372);
                        if (v510)
                          LODWORD(v510) = *(_DWORD *)(v510 + 860);
                        v512 = *(_DWORD *)(v15 + 424);
                        *(_DWORD *)buf = 136448258;
                        *(_QWORD *)&buf[4] = "nw_http1_start_new_connection_for_stream";
                        *(_WORD *)&buf[12] = 2082;
                        *(_QWORD *)&buf[14] = v15 + 74;
                        *(_WORD *)&buf[22] = 2080;
                        v798 = (uint64_t)" ";
                        *(_WORD *)v799 = 1024;
                        *(_DWORD *)&v799[2] = v511;
                        *(_WORD *)&v799[6] = 1024;
                        *(_DWORD *)&v799[8] = v510;
                        *(_WORD *)&v799[12] = 1024;
                        *(_DWORD *)&v799[14] = v512;
                        *(_WORD *)&v799[18] = 2048;
                        *(_QWORD *)&v799[20] = v416;
                        *(_WORD *)&v799[28] = 1024;
                        *(_DWORD *)&v799[30] = v512;
                        *(_WORD *)&v799[34] = 2048;
                        *(_QWORD *)&v799[36] = v15;
                        _os_log_impl(&dword_182FBE000, v509, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> created new connection %p for stream %u (%p)", buf, 0x4Cu);
                      }
                    }
                    nw_http_transaction_metadata_set_first_on_connection(*(void **)(v15 + 352));
                    v513 = (void *)nw_protocol_boringssl_copy_definition();
                    v514 = nw_protocol_definition_get_identifier(v513);
                    v515 = (_QWORD *)nw_protocol_get_identifier((uint64_t)v767);
                    v516 = nw_protocols_are_equal(v514, v515);
                    if (v513)
                      os_release(v513);
                    if (v516)
                    {
                      v517 = nw_protocol_copy_info((uint64_t)v767, 255);
                      if (v517)
                      {
                        v518 = (void *)v517;
                        v519 = *(_QWORD *)(v517 + 24);
                        if (*(_QWORD *)(v517 + 16) != v519)
                        {
                          v520 = *(void **)(v519 - 8);
                          if (v520)
                          {
                            v521 = os_retain(v520);
                            if (v521)
                            {
                              v522 = v521;
                              if (nw_protocol_metadata_is_tls(v521))
                              {
                                v523 = v522;
                                nw_http_connection_metadata_set_sec_metadata(*((void **)v416 + 96), v523);
                                os_release(v523);
                              }
                              os_release(v522);
                            }
                          }
                        }
                        os_release(v518);
                      }
                    }
                    if (v416)
                    {
                      nw_protocol_connect((uint64_t)v767, (uint64_t)v416);
                      return 1;
                    }
                    __nwlog_obj();
                    *(_DWORD *)buf = 136446210;
                    *(_QWORD *)&buf[4] = "nw_http1_get_output_protocol";
                    v669 = (char *)_os_log_send_and_compose_impl();
                    type[0] = OS_LOG_TYPE_ERROR;
                    LOBYTE(aBlock) = 0;
                    if (__nwlog_fault(v669, type, &aBlock))
                    {
                      if (type[0] == OS_LOG_TYPE_FAULT)
                      {
                        v670 = __nwlog_obj();
                        v671 = type[0];
                        if (os_log_type_enabled(v670, type[0]))
                        {
                          *(_DWORD *)buf = 136446210;
                          *(_QWORD *)&buf[4] = "nw_http1_get_output_protocol";
                          v672 = "%{public}s called with null connection";
LABEL_1331:
                          _os_log_impl(&dword_182FBE000, v670, v671, v672, buf, 0xCu);
                        }
                      }
                      else if ((_BYTE)aBlock)
                      {
                        v720 = (char *)__nw_create_backtrace_string();
                        v670 = __nwlog_obj();
                        v671 = type[0];
                        v721 = os_log_type_enabled(v670, type[0]);
                        if (v720)
                        {
                          if (v721)
                          {
                            *(_DWORD *)buf = 136446466;
                            *(_QWORD *)&buf[4] = "nw_http1_get_output_protocol";
                            *(_WORD *)&buf[12] = 2082;
                            *(_QWORD *)&buf[14] = v720;
                            _os_log_impl(&dword_182FBE000, v670, v671, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
                          }
                          free(v720);
                          goto LABEL_1332;
                        }
                        if (v721)
                        {
                          *(_DWORD *)buf = 136446210;
                          *(_QWORD *)&buf[4] = "nw_http1_get_output_protocol";
                          v672 = "%{public}s called with null connection, no backtrace";
                          goto LABEL_1331;
                        }
                      }
                      else
                      {
                        v670 = __nwlog_obj();
                        v671 = type[0];
                        if (os_log_type_enabled(v670, type[0]))
                        {
                          *(_DWORD *)buf = 136446210;
                          *(_QWORD *)&buf[4] = "nw_http1_get_output_protocol";
                          v672 = "%{public}s called with null connection, backtrace limit exceeded";
                          goto LABEL_1331;
                        }
                      }
                    }
LABEL_1332:
                    if (v669)
                      free(v669);
                    nw_protocol_connect((uint64_t)v767, 0);
                    return 1;
                  }
                  __nwlog_obj();
                  *(_DWORD *)buf = 136446210;
                  *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                  v695 = (char *)_os_log_send_and_compose_impl();
                  type[0] = OS_LOG_TYPE_ERROR;
                  LOBYTE(aBlock) = 0;
                  if (__nwlog_fault(v695, type, &aBlock))
                  {
                    if (type[0] == OS_LOG_TYPE_FAULT)
                    {
                      v696 = __nwlog_obj();
                      v697 = type[0];
                      if (!os_log_type_enabled(v696, type[0]))
                        goto LABEL_1388;
                      *(_DWORD *)buf = 136446210;
                      *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                      v698 = "%{public}s called with null http1_stream->protocol_http1";
                      goto LABEL_1387;
                    }
                    if (!(_BYTE)aBlock)
                    {
                      v696 = __nwlog_obj();
                      v697 = type[0];
                      if (!os_log_type_enabled(v696, type[0]))
                        goto LABEL_1388;
                      *(_DWORD *)buf = 136446210;
                      *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                      v698 = "%{public}s called with null http1_stream->protocol_http1, backtrace limit exceeded";
                      goto LABEL_1387;
                    }
                    v730 = (char *)__nw_create_backtrace_string();
                    v696 = __nwlog_obj();
                    v697 = type[0];
                    v731 = os_log_type_enabled(v696, type[0]);
                    if (v730)
                    {
                      if (v731)
                      {
                        *(_DWORD *)buf = 136446466;
                        *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                        *(_WORD *)&buf[12] = 2082;
                        *(_QWORD *)&buf[14] = v730;
                        _os_log_impl(&dword_182FBE000, v696, v697, "%{public}s called with null http1_stream->protocol_http1, dumping backtrace:%{public}s", buf, 0x16u);
                      }
                      free(v730);
                      goto LABEL_1388;
                    }
                    if (v731)
                    {
                      *(_DWORD *)buf = 136446210;
                      *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                      v698 = "%{public}s called with null http1_stream->protocol_http1, no backtrace";
LABEL_1387:
                      _os_log_impl(&dword_182FBE000, v696, v697, v698, buf, 0xCu);
                    }
                  }
LABEL_1388:
                  if (v695)
                    free(v695);
                  goto LABEL_799;
                }
                __nwlog_obj();
                v443 = *(unsigned int *)(v9 + 336);
                *(_DWORD *)buf = 136446978;
                *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = "http1->connections_count";
                *(_WORD *)&buf[22] = 2048;
                v798 = 1;
                *(_WORD *)v799 = 2048;
                *(_QWORD *)&v799[2] = v443;
                v444 = (char *)_os_log_send_and_compose_impl();
                type[0] = OS_LOG_TYPE_ERROR;
                LOBYTE(aBlock) = 0;
                if (__nwlog_fault(v444, type, &aBlock))
                {
                  if (type[0] == OS_LOG_TYPE_FAULT)
                  {
                    v445 = __nwlog_obj();
                    v446 = type[0];
                    if (os_log_type_enabled(v445, type[0]))
                    {
                      v447 = *(unsigned int *)(v9 + 336);
                      *(_DWORD *)buf = 136446978;
                      *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
                      *(_WORD *)&buf[12] = 2082;
                      *(_QWORD *)&buf[14] = "http1->connections_count";
                      *(_WORD *)&buf[22] = 2048;
                      v798 = 1;
                      *(_WORD *)v799 = 2048;
                      *(_QWORD *)&v799[2] = v447;
                      v448 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_746:
                      _os_log_impl(&dword_182FBE000, v445, v446, v448, buf, 0x2Au);
                    }
                  }
                  else if ((_BYTE)aBlock)
                  {
                    v465 = (char *)__nw_create_backtrace_string();
                    v445 = __nwlog_obj();
                    v446 = type[0];
                    v466 = os_log_type_enabled(v445, type[0]);
                    if (v465)
                    {
                      if (v466)
                      {
                        v467 = *(unsigned int *)(v9 + 336);
                        *(_DWORD *)buf = 136447234;
                        *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
                        *(_WORD *)&buf[12] = 2082;
                        *(_QWORD *)&buf[14] = "http1->connections_count";
                        *(_WORD *)&buf[22] = 2048;
                        v798 = 1;
                        *(_WORD *)v799 = 2048;
                        *(_QWORD *)&v799[2] = v467;
                        *(_WORD *)&v799[10] = 2082;
                        *(_QWORD *)&v799[12] = v465;
                        _os_log_impl(&dword_182FBE000, v445, v446, "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
                      }
                      free(v465);
                      goto LABEL_747;
                    }
                    if (v466)
                    {
                      v472 = *(unsigned int *)(v9 + 336);
                      *(_DWORD *)buf = 136446978;
                      *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
                      *(_WORD *)&buf[12] = 2082;
                      *(_QWORD *)&buf[14] = "http1->connections_count";
                      *(_WORD *)&buf[22] = 2048;
                      v798 = 1;
                      *(_WORD *)v799 = 2048;
                      *(_QWORD *)&v799[2] = v472;
                      v448 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
                      goto LABEL_746;
                    }
                  }
                  else
                  {
                    v445 = __nwlog_obj();
                    v446 = type[0];
                    if (os_log_type_enabled(v445, type[0]))
                    {
                      v471 = *(unsigned int *)(v9 + 336);
                      *(_DWORD *)buf = 136446978;
                      *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
                      *(_WORD *)&buf[12] = 2082;
                      *(_QWORD *)&buf[14] = "http1->connections_count";
                      *(_WORD *)&buf[22] = 2048;
                      v798 = 1;
                      *(_WORD *)v799 = 2048;
                      *(_QWORD *)&v799[2] = v471;
                      v448 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
                      goto LABEL_746;
                    }
                  }
                }
LABEL_747:
                if (v444)
                  free(v444);
                *(_DWORD *)(v9 + 336) = -1;
                goto LABEL_750;
              }
LABEL_1391:
              __break(1u);
              return result;
            }
            __nwlog_obj();
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_http1_connection_create";
            v665 = (char *)_os_log_send_and_compose_impl();
            v792[0] = 16;
            LOBYTE(v773[0]) = 0;
            if (__nwlog_fault(v665, v792, v773))
            {
              if (v792[0] == 17)
              {
                v666 = __nwlog_obj();
                v667 = v792[0];
                if (!os_log_type_enabled(v666, (os_log_type_t)v792[0]))
                  goto LABEL_1340;
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_http1_connection_create";
                v668 = "%{public}s called with null parameters";
                goto LABEL_1339;
              }
              if (!LOBYTE(v773[0]))
              {
                v666 = __nwlog_obj();
                v667 = v792[0];
                if (!os_log_type_enabled(v666, (os_log_type_t)v792[0]))
                  goto LABEL_1340;
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_http1_connection_create";
                v668 = "%{public}s called with null parameters, backtrace limit exceeded";
                goto LABEL_1339;
              }
              v722 = (char *)__nw_create_backtrace_string();
              v666 = __nwlog_obj();
              v667 = v792[0];
              v725 = os_log_type_enabled(v666, (os_log_type_t)v792[0]);
              if (!v722)
              {
                if (!v725)
                  goto LABEL_1340;
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_http1_connection_create";
                v668 = "%{public}s called with null parameters, no backtrace";
                goto LABEL_1339;
              }
              if (v725)
              {
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = "nw_http1_connection_create";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = v722;
                v724 = "%{public}s called with null parameters, dumping backtrace:%{public}s";
                goto LABEL_1213;
              }
              goto LABEL_1214;
            }
LABEL_1340:
            if (!v665)
              goto LABEL_1342;
            goto LABEL_1341;
          }
          __nwlog_obj();
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http1_connection_create";
          v665 = (char *)_os_log_send_and_compose_impl();
          v792[0] = 16;
          LOBYTE(v773[0]) = 0;
          if (!__nwlog_fault(v665, v792, v773))
            goto LABEL_1340;
          if (v792[0] != 17)
          {
            if (!LOBYTE(v773[0]))
            {
              v666 = __nwlog_obj();
              v667 = v792[0];
              if (!os_log_type_enabled(v666, (os_log_type_t)v792[0]))
                goto LABEL_1340;
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_http1_connection_create";
              v668 = "%{public}s called with null endpoint, backtrace limit exceeded";
              goto LABEL_1339;
            }
            v722 = (char *)__nw_create_backtrace_string();
            v666 = __nwlog_obj();
            v667 = v792[0];
            v723 = os_log_type_enabled(v666, (os_log_type_t)v792[0]);
            if (!v722)
            {
              if (!v723)
                goto LABEL_1340;
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_http1_connection_create";
              v668 = "%{public}s called with null endpoint, no backtrace";
              goto LABEL_1339;
            }
            if (v723)
            {
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "nw_http1_connection_create";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v722;
              v724 = "%{public}s called with null endpoint, dumping backtrace:%{public}s";
LABEL_1213:
              _os_log_impl(&dword_182FBE000, v666, v667, v724, buf, 0x16u);
            }
LABEL_1214:
            free(v722);
            if (!v665)
            {
LABEL_1342:
              __nwlog_obj();
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
              v750 = (char *)_os_log_send_and_compose_impl();
              type[0] = OS_LOG_TYPE_ERROR;
              LOBYTE(aBlock) = 0;
              if (!__nwlog_fault(v750, type, &aBlock))
                goto LABEL_1356;
              if (type[0] == OS_LOG_TYPE_FAULT)
              {
                v751 = __nwlog_obj();
                v752 = type[0];
                if (!os_log_type_enabled(v751, type[0]))
                  goto LABEL_1356;
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
                v753 = "%{public}s called with null http1_connection";
              }
              else if ((_BYTE)aBlock)
              {
                v754 = (char *)__nw_create_backtrace_string();
                v751 = __nwlog_obj();
                v752 = type[0];
                v755 = os_log_type_enabled(v751, type[0]);
                if (v754)
                {
                  if (v755)
                  {
                    *(_DWORD *)buf = 136446466;
                    *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
                    *(_WORD *)&buf[12] = 2082;
                    *(_QWORD *)&buf[14] = v754;
                    _os_log_impl(&dword_182FBE000, v751, v752, "%{public}s called with null http1_connection, dumping backtrace:%{public}s", buf, 0x16u);
                  }
                  free(v754);
LABEL_1356:
                  if (v750)
                    free(v750);
                  __nwlog_obj();
                  *(_DWORD *)buf = 136446210;
                  *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                  v756 = (char *)_os_log_send_and_compose_impl();
                  type[0] = OS_LOG_TYPE_ERROR;
                  LOBYTE(aBlock) = 0;
                  if (!__nwlog_fault(v756, type, &aBlock))
                    goto LABEL_1372;
                  if (type[0] == OS_LOG_TYPE_FAULT)
                  {
                    v757 = __nwlog_obj();
                    v758 = type[0];
                    if (os_log_type_enabled(v757, type[0]))
                    {
                      *(_DWORD *)buf = 136446210;
                      *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                      v759 = "%{public}s called with null http1_connection";
LABEL_1371:
                      _os_log_impl(&dword_182FBE000, v757, v758, v759, buf, 0xCu);
                    }
                  }
                  else if ((_BYTE)aBlock)
                  {
                    v760 = (char *)__nw_create_backtrace_string();
                    v757 = __nwlog_obj();
                    v758 = type[0];
                    v761 = os_log_type_enabled(v757, type[0]);
                    if (v760)
                    {
                      if (v761)
                      {
                        *(_DWORD *)buf = 136446466;
                        *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                        *(_WORD *)&buf[12] = 2082;
                        *(_QWORD *)&buf[14] = v760;
                        _os_log_impl(&dword_182FBE000, v757, v758, "%{public}s called with null http1_connection, dumping backtrace:%{public}s", buf, 0x16u);
                      }
                      free(v760);
                      goto LABEL_1372;
                    }
                    if (v761)
                    {
                      *(_DWORD *)buf = 136446210;
                      *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                      v759 = "%{public}s called with null http1_connection, no backtrace";
                      goto LABEL_1371;
                    }
                  }
                  else
                  {
                    v757 = __nwlog_obj();
                    v758 = type[0];
                    if (os_log_type_enabled(v757, type[0]))
                    {
                      *(_DWORD *)buf = 136446210;
                      *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                      v759 = "%{public}s called with null http1_connection, backtrace limit exceeded";
                      goto LABEL_1371;
                    }
                  }
LABEL_1372:
                  if (v756)
                    free(v756);
                  v416 = 0;
                  goto LABEL_799;
                }
                if (!v755)
                  goto LABEL_1356;
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
                v753 = "%{public}s called with null http1_connection, no backtrace";
              }
              else
              {
                v751 = __nwlog_obj();
                v752 = type[0];
                if (!os_log_type_enabled(v751, type[0]))
                  goto LABEL_1356;
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
                v753 = "%{public}s called with null http1_connection, backtrace limit exceeded";
              }
              _os_log_impl(&dword_182FBE000, v751, v752, v753, buf, 0xCu);
              goto LABEL_1356;
            }
LABEL_1341:
            free(v665);
            goto LABEL_1342;
          }
          v666 = __nwlog_obj();
          v667 = v792[0];
          if (!os_log_type_enabled(v666, (os_log_type_t)v792[0]))
            goto LABEL_1340;
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http1_connection_create";
          v668 = "%{public}s called with null endpoint";
        }
        else
        {
          __nwlog_obj();
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http1_connection_create";
          v665 = (char *)_os_log_send_and_compose_impl();
          v792[0] = 16;
          LOBYTE(v773[0]) = 0;
          if (!__nwlog_fault(v665, v792, v773))
            goto LABEL_1340;
          if (v792[0] != 17)
          {
            if (!LOBYTE(v773[0]))
            {
              v666 = __nwlog_obj();
              v667 = v792[0];
              if (!os_log_type_enabled(v666, (os_log_type_t)v792[0]))
                goto LABEL_1340;
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_http1_connection_create";
              v668 = "%{public}s called with null output_handler, backtrace limit exceeded";
              goto LABEL_1339;
            }
            v718 = (char *)__nw_create_backtrace_string();
            v666 = __nwlog_obj();
            v667 = v792[0];
            v719 = os_log_type_enabled(v666, (os_log_type_t)v792[0]);
            if (!v718)
            {
              if (!v719)
                goto LABEL_1340;
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_http1_connection_create";
              v668 = "%{public}s called with null output_handler, no backtrace";
              goto LABEL_1339;
            }
            if (v719)
            {
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "nw_http1_connection_create";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v718;
              _os_log_impl(&dword_182FBE000, v666, v667, "%{public}s called with null output_handler, dumping backtrace:%{public}s", buf, 0x16u);
            }
            free(v718);
            goto LABEL_1340;
          }
          v666 = __nwlog_obj();
          v667 = v792[0];
          if (!os_log_type_enabled(v666, (os_log_type_t)v792[0]))
            goto LABEL_1340;
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http1_connection_create";
          v668 = "%{public}s called with null output_handler";
        }
LABEL_1339:
        _os_log_impl(&dword_182FBE000, v666, v667, v668, buf, 0xCu);
        goto LABEL_1340;
      }
      v449 = nw_parameters_copy_default_protocol_stack(*(nw_parameters_t *)(v15 + 320));
      v788 = 0;
      v789 = &v788;
      v790 = 0x2000000000;
      v791 = 0;
      *(_QWORD *)type = 0;
      v782 = (uint64_t)type;
      v783 = 0x3802000000;
      v784 = __Block_byref_object_copy__39865;
      v785 = __Block_byref_object_dispose__39866;
      object = 0;
      v787 |= 1u;
      v450 = MEMORY[0x1E0C809B0];
      aBlock = MEMORY[0x1E0C809B0];
      v775 = 0x40000000;
      v776 = ___ZL44nw_http1_establish_new_connection_for_streamP17nw_protocol_http1P15nw_http1_stream_block_invoke;
      v777 = &unk_1E14A1688;
      v778 = &v788;
      v779 = type;
      v780 = v15;
      nw_protocol_stack_iterate_application_protocols(v449, &aBlock);
      if (*(_QWORD *)(v782 + 40))
        goto LABEL_723;
      v451 = nw_protocol_stack_copy_transport_protocol(v449);
      is_quic = nw_protocol_options_is_quic(v451);
      if (v451)
        os_release(v451);
      if (!is_quic)
      {
LABEL_723:
        *(_QWORD *)buf = nw_parameters_shallow_copy(*(void **)(v15 + 320));
        nw::retained_ptr<nw_endpoint *>::operator=(v15 + 320, buf);
      }
      else
      {
        v453 = *(void **)(v15 + 320);
        *(_QWORD *)buf = v450;
        *(_QWORD *)&buf[8] = 0x40000000;
        *(_QWORD *)&buf[16] = ___ZL44nw_http1_establish_new_connection_for_streamP17nw_protocol_http1P15nw_http1_stream_block_invoke_2;
        v798 = (uint64_t)&unk_1E14A16D8;
        *(_QWORD *)v799 = type;
        *(_QWORD *)&v799[8] = &v788;
        *(_QWORD *)&v799[16] = v15;
        *(_QWORD *)&v799[24] = v9;
        nw_parameters_enumerate_transformed_parameters(v453, buf);
      }
      v454 = *(void **)(v782 + 40);
      if (v454)
      {
        v455 = v454;
        sec_protocol_options_clear_tls_application_protocols();
        sec_protocol_options_add_tls_application_protocol(v455, "http/1.1");
        os_release(v455);
      }
      *((_BYTE *)v789 + 24) = 0;
      v456 = *(void **)(v15 + 320);
      v773[0] = v450;
      v773[1] = 0x40000000;
      v773[2] = ___ZL44nw_http1_establish_new_connection_for_streamP17nw_protocol_http1P15nw_http1_stream_block_invoke_78;
      v773[3] = &unk_1E14A1700;
      v773[4] = &v788;
      v773[5] = v15;
      nw_parameters_remove_application_protocol_options_from_protocol_stack(v456, v773);
      *(_WORD *)(v15 + 428) |= 8u;
      v457 = *(unsigned int *)(v9 + 352) + 1;
      v458 = v457 << 31 >> 31;
      *(_DWORD *)(v9 + 352) = v457;
      if (v458 == v457 && (v458 & 0x8000000000000000) == 0)
      {
LABEL_825:
        v526 = *(_QWORD *)(v15 + 312);
        v527 = *(void **)(v15 + 264);
        *(_QWORD *)v792 = v450;
        *(_QWORD *)&v792[8] = 0x40000000;
        *(_QWORD *)&v792[16] = ___ZL44nw_http1_establish_new_connection_for_streamP17nw_protocol_http1P15nw_http1_stream_block_invoke_81;
        v793 = (uint64_t)&unk_1E14A1728;
        *(_QWORD *)v794 = v526;
        nw_queue_context_async(v527, v792);
        _Block_object_dispose(type, 8);
        if ((v787 & 1) != 0 && object)
          os_release(object);
        _Block_object_dispose(&v788, 8);
        if (v449)
          os_release(v449);
        return 1;
      }
      __nwlog_obj();
      v459 = *(unsigned int *)(v9 + 352);
      *(_DWORD *)v792 = 136446978;
      *(_QWORD *)&v792[4] = "nw_http1_establish_new_connection_for_stream";
      *(_WORD *)&v792[12] = 2082;
      *(_QWORD *)&v792[14] = "http1->pending_output_handler_count";
      *(_WORD *)&v792[22] = 2048;
      v793 = 1;
      *(_WORD *)v794 = 2048;
      *(_QWORD *)&v794[2] = v459;
      v460 = (char *)_os_log_send_and_compose_impl();
      v772 = OS_LOG_TYPE_ERROR;
      v771 = 0;
      if (__nwlog_fault(v460, &v772, &v771))
      {
        if (v772 == OS_LOG_TYPE_FAULT)
        {
          v461 = __nwlog_obj();
          v462 = v772;
          if (os_log_type_enabled(v461, v772))
          {
            v463 = *(unsigned int *)(v9 + 352);
            *(_DWORD *)v792 = 136446978;
            *(_QWORD *)&v792[4] = "nw_http1_establish_new_connection_for_stream";
            *(_WORD *)&v792[12] = 2082;
            *(_QWORD *)&v792[14] = "http1->pending_output_handler_count";
            *(_WORD *)&v792[22] = 2048;
            v793 = 1;
            *(_WORD *)v794 = 2048;
            *(_QWORD *)&v794[2] = v463;
            v464 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_821:
            _os_log_impl(&dword_182FBE000, v461, v462, v464, v792, 0x2Au);
          }
        }
        else if (v771)
        {
          v468 = (char *)__nw_create_backtrace_string();
          v461 = __nwlog_obj();
          v462 = v772;
          v469 = os_log_type_enabled(v461, v772);
          if (v468)
          {
            if (v469)
            {
              v470 = *(unsigned int *)(v9 + 352);
              *(_DWORD *)v792 = 136447234;
              *(_QWORD *)&v792[4] = "nw_http1_establish_new_connection_for_stream";
              *(_WORD *)&v792[12] = 2082;
              *(_QWORD *)&v792[14] = "http1->pending_output_handler_count";
              *(_WORD *)&v792[22] = 2048;
              v793 = 1;
              *(_WORD *)v794 = 2048;
              *(_QWORD *)&v794[2] = v470;
              v795 = 2082;
              v796 = v468;
              _os_log_impl(&dword_182FBE000, v461, v462, "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s", v792, 0x34u);
            }
            free(v468);
            goto LABEL_822;
          }
          if (v469)
          {
            v525 = *(unsigned int *)(v9 + 352);
            *(_DWORD *)v792 = 136446978;
            *(_QWORD *)&v792[4] = "nw_http1_establish_new_connection_for_stream";
            *(_WORD *)&v792[12] = 2082;
            *(_QWORD *)&v792[14] = "http1->pending_output_handler_count";
            *(_WORD *)&v792[22] = 2048;
            v793 = 1;
            *(_WORD *)v794 = 2048;
            *(_QWORD *)&v794[2] = v525;
            v464 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
            goto LABEL_821;
          }
        }
        else
        {
          v461 = __nwlog_obj();
          v462 = v772;
          if (os_log_type_enabled(v461, v772))
          {
            v524 = *(unsigned int *)(v9 + 352);
            *(_DWORD *)v792 = 136446978;
            *(_QWORD *)&v792[4] = "nw_http1_establish_new_connection_for_stream";
            *(_WORD *)&v792[12] = 2082;
            *(_QWORD *)&v792[14] = "http1->pending_output_handler_count";
            *(_WORD *)&v792[22] = 2048;
            v793 = 1;
            *(_WORD *)v794 = 2048;
            *(_QWORD *)&v794[2] = v524;
            v464 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
            goto LABEL_821;
          }
        }
      }
LABEL_822:
      if (v460)
        free(v460);
      *(_DWORD *)(v9 + 352) = -1;
      goto LABEL_825;
    }
    __nwlog_obj();
    v331 = *(unsigned int *)(v9 + 348);
    *(_DWORD *)buf = 136446978;
    *(_QWORD *)&buf[4] = "nw_http1_remove_pending_stream";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = "http1->pending_stream_count";
    *(_WORD *)&buf[22] = 2048;
    v798 = 1;
    *(_WORD *)v799 = 2048;
    *(_QWORD *)&v799[2] = v331;
    v332 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(aBlock) = 0;
    if (__nwlog_fault(v332, type, &aBlock))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        v333 = __nwlog_obj();
        v334 = type[0];
        if (os_log_type_enabled(v333, type[0]))
        {
          v335 = *(unsigned int *)(v9 + 348);
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_http1_remove_pending_stream";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = "http1->pending_stream_count";
          *(_WORD *)&buf[22] = 2048;
          v798 = 1;
          *(_WORD *)v799 = 2048;
          *(_QWORD *)&v799[2] = v335;
          v336 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu";
LABEL_658:
          _os_log_impl(&dword_182FBE000, v333, v334, v336, buf, 0x2Au);
        }
      }
      else if ((_BYTE)aBlock)
      {
        v395 = (char *)__nw_create_backtrace_string();
        v333 = __nwlog_obj();
        v334 = type[0];
        v396 = os_log_type_enabled(v333, type[0]);
        if (v395)
        {
          if (v396)
          {
            v397 = *(unsigned int *)(v9 + 348);
            *(_DWORD *)buf = 136447234;
            *(_QWORD *)&buf[4] = "nw_http1_remove_pending_stream";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = "http1->pending_stream_count";
            *(_WORD *)&buf[22] = 2048;
            v798 = 1;
            *(_WORD *)v799 = 2048;
            *(_QWORD *)&v799[2] = v397;
            *(_WORD *)&v799[10] = 2082;
            *(_QWORD *)&v799[12] = v395;
            _os_log_impl(&dword_182FBE000, v333, v334, "%{public}s Underflow: %{public}s, decrement %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
          }
          free(v395);
          goto LABEL_659;
        }
        if (v396)
        {
          v413 = *(unsigned int *)(v9 + 348);
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_http1_remove_pending_stream";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = "http1->pending_stream_count";
          *(_WORD *)&buf[22] = 2048;
          v798 = 1;
          *(_WORD *)v799 = 2048;
          *(_QWORD *)&v799[2] = v413;
          v336 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, no backtrace";
          goto LABEL_658;
        }
      }
      else
      {
        v333 = __nwlog_obj();
        v334 = type[0];
        if (os_log_type_enabled(v333, type[0]))
        {
          v408 = *(unsigned int *)(v9 + 348);
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_http1_remove_pending_stream";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = "http1->pending_stream_count";
          *(_WORD *)&buf[22] = 2048;
          v798 = 1;
          *(_WORD *)v799 = 2048;
          *(_QWORD *)&v799[2] = v408;
          v336 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, backtrace limit exceeded";
          goto LABEL_658;
        }
      }
    }
LABEL_659:
    if (v332)
      free(v332);
    *(_DWORD *)(v9 + 348) = 0;
    goto LABEL_662;
  }
  if ((*(_BYTE *)(v15 + 158) & 1) == 0)
  {
    v244 = __nwlog_obj();
    if (os_log_type_enabled(v244, OS_LOG_TYPE_DEBUG))
    {
      v245 = *(_QWORD *)(v15 + 256);
      v246 = *(_DWORD *)(*(_QWORD *)(v15 + 248) + 372);
      if (v245)
        LODWORD(v245) = *(_DWORD *)(v245 + 860);
      v247 = *(_DWORD *)(v15 + 424);
      v248 = *(_DWORD *)(v9 + 364);
      *(_DWORD *)buf = 136447746;
      *(_QWORD *)&buf[4] = "nw_http1_create_connection_for_stream_if_allowed";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v15 + 74;
      *(_WORD *)&buf[22] = 2080;
      v798 = (uint64_t)" ";
      *(_WORD *)v799 = 1024;
      *(_DWORD *)&v799[2] = v246;
      *(_WORD *)&v799[6] = 1024;
      *(_DWORD *)&v799[8] = v245;
      *(_WORD *)&v799[12] = 1024;
      *(_DWORD *)&v799[14] = v247;
      *(_WORD *)&v799[18] = 1024;
      *(_DWORD *)&v799[20] = v248;
      v98 = "%{public}s %{public}s%s<i%u:c%u:s%u> already at max connection width %u, cannot create new connection";
      v99 = v244;
      v100 = 56;
      goto LABEL_144;
    }
  }
LABEL_145:
  if ((*(_BYTE *)(v15 + 158) & 1) == 0)
  {
    v101 = __nwlog_obj();
    if (os_log_type_enabled(v101, OS_LOG_TYPE_INFO))
    {
      v102 = *(_QWORD *)(v15 + 256);
      v103 = *(_DWORD *)(*(_QWORD *)(v15 + 248) + 372);
      if (v102)
        LODWORD(v102) = *(_DWORD *)(v102 + 860);
      v104 = *(_DWORD *)(v15 + 424);
      *(_DWORD *)buf = 136447490;
      *(_QWORD *)&buf[4] = "nw_protocol_http1_connect";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v15 + 74;
      *(_WORD *)&buf[22] = 2080;
      v798 = (uint64_t)" ";
      *(_WORD *)v799 = 1024;
      *(_DWORD *)&v799[2] = v103;
      *(_WORD *)&v799[6] = 1024;
      *(_DWORD *)&v799[8] = v102;
      *(_WORD *)&v799[12] = 1024;
      *(_DWORD *)&v799[14] = v104;
      _os_log_impl(&dword_182FBE000, v101, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s<i%u:c%u:s%u> no available connections, waiting", buf, 0x32u);
    }
  }
  if ((*(_BYTE *)(v15 + 158) & 1) == 0)
  {
    if (gLogDatapath)
    {
      v587 = __nwlog_obj();
      if (os_log_type_enabled(v587, OS_LOG_TYPE_DEBUG))
      {
        v588 = *(_QWORD *)(v15 + 256);
        v589 = *(_DWORD *)(*(_QWORD *)(v15 + 248) + 372);
        if (v588)
          LODWORD(v588) = *(_DWORD *)(v588 + 860);
        v590 = *(_DWORD *)(v15 + 424);
        *(_DWORD *)buf = 136447746;
        *(_QWORD *)&buf[4] = "nw_http1_add_pending_stream";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v15 + 74;
        *(_WORD *)&buf[22] = 2080;
        v798 = (uint64_t)" ";
        *(_WORD *)v799 = 1024;
        *(_DWORD *)&v799[2] = v589;
        *(_WORD *)&v799[6] = 1024;
        *(_DWORD *)&v799[8] = v588;
        *(_WORD *)&v799[12] = 1024;
        *(_DWORD *)&v799[14] = v590;
        *(_WORD *)&v799[18] = 2048;
        *(_QWORD *)&v799[20] = v15;
        _os_log_impl(&dword_182FBE000, v587, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> called for stream (%p)", buf, 0x3Cu);
      }
    }
  }
  if ((*(_WORD *)(v15 + 428) & 0x1000) != 0)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "nw_http1_add_pending_stream";
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v15;
    v118 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(aBlock) = 0;
    if (!__nwlog_fault(v118, type, &aBlock))
      goto LABEL_364;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      v119 = __nwlog_obj();
      v120 = type[0];
      if (!os_log_type_enabled(v119, type[0]))
        goto LABEL_364;
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_http1_add_pending_stream";
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v15;
      v121 = "%{public}s stream %p already in pending list, cannot add again";
    }
    else if ((_BYTE)aBlock)
    {
      v130 = (char *)__nw_create_backtrace_string();
      v119 = __nwlog_obj();
      v120 = type[0];
      v131 = os_log_type_enabled(v119, type[0]);
      if (v130)
      {
        if (v131)
        {
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)&buf[4] = "nw_http1_add_pending_stream";
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v15;
          *(_WORD *)&buf[22] = 2082;
          v798 = (uint64_t)v130;
          _os_log_impl(&dword_182FBE000, v119, v120, "%{public}s stream %p already in pending list, cannot add again, dumping backtrace:%{public}s", buf, 0x20u);
        }
        free(v130);
        goto LABEL_364;
      }
      if (!v131)
      {
LABEL_364:
        if (v118)
          free(v118);
        return 1;
      }
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_http1_add_pending_stream";
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v15;
      v121 = "%{public}s stream %p already in pending list, cannot add again, no backtrace";
    }
    else
    {
      v119 = __nwlog_obj();
      v120 = type[0];
      if (!os_log_type_enabled(v119, type[0]))
        goto LABEL_364;
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_http1_add_pending_stream";
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v15;
      v121 = "%{public}s stream %p already in pending list, cannot add again, backtrace limit exceeded";
    }
    _os_log_impl(&dword_182FBE000, v119, v120, v121, buf, 0x16u);
    goto LABEL_364;
  }
  *(_QWORD *)(v15 + 296) = 0;
  v105 = *(uint64_t **)(v9 + 256);
  *(_QWORD *)(v15 + 304) = v105;
  *v105 = v15;
  *(_QWORD *)(v9 + 256) = v15 + 296;
  v106 = *(unsigned int *)(v9 + 348) + 1;
  v107 = v106 << 31 >> 31;
  *(_DWORD *)(v9 + 348) = v106;
  if (v107 == v106 && (v107 & 0x8000000000000000) == 0)
    goto LABEL_404;
  __nwlog_obj();
  v108 = *(unsigned int *)(v9 + 348);
  *(_DWORD *)buf = 136446978;
  *(_QWORD *)&buf[4] = "nw_http1_add_pending_stream";
  *(_WORD *)&buf[12] = 2082;
  *(_QWORD *)&buf[14] = "http1->pending_stream_count";
  *(_WORD *)&buf[22] = 2048;
  v798 = 1;
  *(_WORD *)v799 = 2048;
  *(_QWORD *)&v799[2] = v108;
  v109 = (char *)_os_log_send_and_compose_impl();
  type[0] = OS_LOG_TYPE_ERROR;
  LOBYTE(aBlock) = 0;
  if (__nwlog_fault(v109, type, &aBlock))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      v110 = __nwlog_obj();
      v111 = type[0];
      if (os_log_type_enabled(v110, type[0]))
      {
        v112 = *(unsigned int *)(v9 + 348);
        *(_DWORD *)buf = 136446978;
        *(_QWORD *)&buf[4] = "nw_http1_add_pending_stream";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = "http1->pending_stream_count";
        *(_WORD *)&buf[22] = 2048;
        v798 = 1;
        *(_WORD *)v799 = 2048;
        *(_QWORD *)&v799[2] = v112;
        v113 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_400:
        _os_log_impl(&dword_182FBE000, v110, v111, v113, buf, 0x2Au);
      }
    }
    else if ((_BYTE)aBlock)
    {
      v241 = (char *)__nw_create_backtrace_string();
      v110 = __nwlog_obj();
      v111 = type[0];
      v242 = os_log_type_enabled(v110, type[0]);
      if (v241)
      {
        if (v242)
        {
          v243 = *(unsigned int *)(v9 + 348);
          *(_DWORD *)buf = 136447234;
          *(_QWORD *)&buf[4] = "nw_http1_add_pending_stream";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = "http1->pending_stream_count";
          *(_WORD *)&buf[22] = 2048;
          v798 = 1;
          *(_WORD *)v799 = 2048;
          *(_QWORD *)&v799[2] = v243;
          *(_WORD *)&v799[10] = 2082;
          *(_QWORD *)&v799[12] = v241;
          _os_log_impl(&dword_182FBE000, v110, v111, "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
        }
        free(v241);
        goto LABEL_401;
      }
      if (v242)
      {
        v277 = *(unsigned int *)(v9 + 348);
        *(_DWORD *)buf = 136446978;
        *(_QWORD *)&buf[4] = "nw_http1_add_pending_stream";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = "http1->pending_stream_count";
        *(_WORD *)&buf[22] = 2048;
        v798 = 1;
        *(_WORD *)v799 = 2048;
        *(_QWORD *)&v799[2] = v277;
        v113 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
        goto LABEL_400;
      }
    }
    else
    {
      v110 = __nwlog_obj();
      v111 = type[0];
      if (os_log_type_enabled(v110, type[0]))
      {
        v256 = *(unsigned int *)(v9 + 348);
        *(_DWORD *)buf = 136446978;
        *(_QWORD *)&buf[4] = "nw_http1_add_pending_stream";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = "http1->pending_stream_count";
        *(_WORD *)&buf[22] = 2048;
        v798 = 1;
        *(_WORD *)v799 = 2048;
        *(_QWORD *)&v799[2] = v256;
        v113 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
        goto LABEL_400;
      }
    }
  }
LABEL_401:
  if (v109)
    free(v109);
  *(_DWORD *)(v9 + 348) = -1;
LABEL_404:
  *(_WORD *)(v15 + 428) |= 0x1000u;
  result = 1;
  if ((*(_BYTE *)(v15 + 158) & 1) == 0 && gLogDatapath)
  {
    v278 = __nwlog_obj();
    if (!os_log_type_enabled(v278, OS_LOG_TYPE_DEBUG))
      return 1;
    v279 = *(_QWORD *)(v15 + 256);
    v280 = *(_DWORD *)(*(_QWORD *)(v15 + 248) + 372);
    if (v279)
      LODWORD(v279) = *(_DWORD *)(v279 + 860);
    v281 = *(_DWORD *)(v15 + 424);
    v282 = *(_DWORD *)(v9 + 348);
    *(_DWORD *)buf = 136448258;
    *(_QWORD *)&buf[4] = "nw_http1_add_pending_stream";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v15 + 74;
    *(_WORD *)&buf[22] = 2080;
    v798 = (uint64_t)" ";
    *(_WORD *)v799 = 1024;
    *(_DWORD *)&v799[2] = v280;
    *(_WORD *)&v799[6] = 1024;
    *(_DWORD *)&v799[8] = v279;
    *(_WORD *)&v799[12] = 1024;
    *(_DWORD *)&v799[14] = v281;
    *(_WORD *)&v799[18] = 1024;
    *(_DWORD *)&v799[20] = v281;
    *(_WORD *)&v799[24] = 2048;
    *(_QWORD *)&v799[26] = v15;
    *(_WORD *)&v799[34] = 1024;
    *(_DWORD *)&v799[36] = v282;
    v23 = "%{public}s %{public}s%s<i%u:c%u:s%u> added stream %u (%p), now have %u pending streams";
    v27 = v278;
    v28 = 72;
    goto LABEL_43;
  }
  return result;
}

void nw_protocol_http1_connected(nw_protocol *a1, nw_protocol *a2)
{
  void *handle;
  nw_protocol *v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  nw_protocol *v13;
  void *v14;
  void *v15;
  _OWORD *v16;
  void *v17;
  char v18;
  void *v19;
  void *v20;
  char v21;
  void *v22;
  _QWORD *v23;
  id v24;
  char v25;
  void *v26;
  uint64_t v27;
  id *metadata;
  char v29;
  void *v30;
  uint64_t v31;
  char v32;
  char v33;
  NSObject *v34;
  uint64_t v35;
  int v36;
  int v37;
  NSObject **v38;
  void *v39;
  _QWORD *v40;
  id v41;
  id v42;
  char v43;
  void *v44;
  id v45;
  id v46;
  id *v47;
  char v48;
  void *v49;
  id v50;
  void *v51;
  NSObject *v52;
  __int16 v53;
  int v54;
  id v55;
  void *v56;
  NSObject *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  NSObject *v62;
  os_log_type_t v63;
  uint64_t v64;
  const char *v65;
  char *v66;
  _BOOL4 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  NSObject *v75;
  os_log_type_t v76;
  uint64_t v77;
  const char *v78;
  char *v79;
  _BOOL4 v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  NSObject *v86;
  os_log_type_t v87;
  uint64_t v88;
  const char *v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  NSObject *v94;
  uint64_t v95;
  int v96;
  int v97;
  NSObject *v98;
  uint64_t v99;
  int v100;
  int v101;
  char *v102;
  _BOOL4 v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  NSObject *v107;
  uint64_t v108;
  int v109;
  int v110;
  void *v111;
  char *identifier;
  _BOOL4 v113;
  uint64_t v114;
  void *v115;
  uint64_t v116;
  void *v117;
  NSObject *v118;
  NSObject *v119;
  NSObject *v120;
  __int16 v121;
  int v122;
  uint64_t v123;
  char *v124;
  NSObject *v125;
  os_log_type_t v126;
  uint64_t v127;
  const char *v128;
  char *v129;
  _BOOL4 v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  int v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  NSObject *v140;
  uint64_t v141;
  int v142;
  int v143;
  nw_protocol_identifier *v144;
  uint64_t v145;
  void *v146;
  uint64_t v147;
  _QWORD *v148;
  char *v149;
  NSObject *v150;
  os_log_type_t v151;
  const char *v152;
  char *v153;
  NSObject *v154;
  os_log_type_t v155;
  const char *v156;
  char *v157;
  NSObject *v158;
  os_log_type_t v159;
  const char *v160;
  char *backtrace_string;
  _BOOL4 v162;
  char *v163;
  _BOOL4 v164;
  char *v165;
  _BOOL4 v166;
  const char *v167;
  char *v168;
  _BOOL4 v169;
  char *v170;
  NSObject *v171;
  os_log_type_t v172;
  const char *v173;
  NSObject *v174;
  uint64_t v175;
  int v176;
  int v177;
  nw_protocol_identifier *v178;
  NSObject *v179;
  uint64_t v180;
  int v181;
  int v182;
  nw_protocol *output_handler;
  char *v184;
  _BOOL4 v185;
  const char *v186;
  _BOOL4 v187;
  char *v188;
  _BOOL4 v189;
  char *v190;
  _BOOL4 v191;
  nw_protocol *v192;
  char *v193;
  NSObject *v194;
  os_log_type_t v195;
  const char *v196;
  char *v197;
  NSObject *v198;
  os_log_type_t v199;
  const char *v200;
  NSObject *v201;
  void *v202;
  char *v203;
  NSObject *v204;
  os_log_type_t v205;
  const char *v206;
  char *v207;
  NSObject *v208;
  os_log_type_t v209;
  const char *v210;
  char *v211;
  NSObject *v212;
  os_log_type_t v213;
  const char *v214;
  NSObject *v215;
  uint64_t v216;
  int v217;
  int v218;
  NSObject *v219;
  uint64_t v220;
  int v221;
  int v222;
  int v223;
  char *v225;
  NSObject *v226;
  os_log_type_t v227;
  const char *v228;
  char *v229;
  _BOOL4 v230;
  char *v231;
  _BOOL4 v232;
  char *v233;
  _BOOL4 v234;
  char *v235;
  _BOOL4 v236;
  char *v237;
  _BOOL4 v238;
  char *v239;
  _BOOL4 v240;
  char *v241;
  _BOOL4 v242;
  char *v243;
  _BOOL4 v244;
  _BOOL4 v245;
  char *v246;
  NSObject *v247;
  os_log_type_t v248;
  const char *v249;
  char *v250;
  _BOOL4 v251;
  char *v252;
  NSObject *v253;
  os_log_type_t v254;
  const char *v255;
  char *v256;
  _BOOL4 v257;
  NSObject *object;
  nw_protocol *v259;
  nw_protocol *v260;
  _QWORD v261[5];
  _QWORD aBlock[5];
  os_log_type_t type[8];
  uint64_t v264;
  void (*v265)(uint64_t, uint64_t);
  void *v266;
  _OWORD *v267;
  char v268;
  os_log_type_t v269;
  _BYTE buf[24];
  uint64_t v271;
  __int16 v272;
  _BYTE v273[10];
  char *v274;
  _BYTE v275[10];
  _BYTE v276[14];
  uint64_t v277;

  v277 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
    v149 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(aBlock[0]) = 0;
    if (!__nwlog_fault(v149, type, aBlock))
      goto LABEL_399;
    if (type[0] != OS_LOG_TYPE_FAULT)
    {
      if (!LOBYTE(aBlock[0]))
      {
        v150 = __nwlog_obj();
        v151 = type[0];
        if (!os_log_type_enabled(v150, type[0]))
          goto LABEL_399;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
        v152 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_398;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v150 = __nwlog_obj();
      v151 = type[0];
      v162 = os_log_type_enabled(v150, type[0]);
      if (!backtrace_string)
      {
        if (!v162)
          goto LABEL_399;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
        v152 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_398;
      }
      if (v162)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v150, v151, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_399;
    }
    v150 = __nwlog_obj();
    v151 = type[0];
    if (!os_log_type_enabled(v150, type[0]))
      goto LABEL_399;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
    v152 = "%{public}s called with null protocol";
LABEL_398:
    _os_log_impl(&dword_182FBE000, v150, v151, v152, buf, 0xCu);
    goto LABEL_399;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
    v149 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(aBlock[0]) = 0;
    if (!__nwlog_fault(v149, type, aBlock))
      goto LABEL_399;
    if (type[0] != OS_LOG_TYPE_FAULT)
    {
      if (!LOBYTE(aBlock[0]))
      {
        v150 = __nwlog_obj();
        v151 = type[0];
        if (!os_log_type_enabled(v150, type[0]))
          goto LABEL_399;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
        v152 = "%{public}s called with null handle, backtrace limit exceeded";
        goto LABEL_398;
      }
      v163 = (char *)__nw_create_backtrace_string();
      v150 = __nwlog_obj();
      v151 = type[0];
      v164 = os_log_type_enabled(v150, type[0]);
      if (!v163)
      {
        if (!v164)
          goto LABEL_399;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
        v152 = "%{public}s called with null handle, no backtrace";
        goto LABEL_398;
      }
      if (v164)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v163;
        _os_log_impl(&dword_182FBE000, v150, v151, "%{public}s called with null handle, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v163);
      if (!v149)
      {
LABEL_401:
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_http1_connected";
        v153 = (char *)_os_log_send_and_compose_impl();
        type[0] = OS_LOG_TYPE_ERROR;
        LOBYTE(aBlock[0]) = 0;
        if (!__nwlog_fault(v153, type, aBlock))
          goto LABEL_440;
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v154 = gLogObj;
          v155 = type[0];
          if (!os_log_type_enabled((os_log_t)gLogObj, type[0]))
            goto LABEL_440;
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_protocol_http1_connected";
          v156 = "%{public}s called with null http1";
        }
        else if (LOBYTE(aBlock[0]))
        {
          v243 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v154 = gLogObj;
          v155 = type[0];
          v244 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
          if (v243)
          {
            if (v244)
            {
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "nw_protocol_http1_connected";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v243;
              _os_log_impl(&dword_182FBE000, v154, v155, "%{public}s called with null http1, dumping backtrace:%{public}s", buf, 0x16u);
            }
            free(v243);
LABEL_440:
            if (!v153)
              return;
            goto LABEL_441;
          }
          if (!v244)
            goto LABEL_440;
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_protocol_http1_connected";
          v156 = "%{public}s called with null http1, no backtrace";
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v154 = gLogObj;
          v155 = type[0];
          if (!os_log_type_enabled((os_log_t)gLogObj, type[0]))
            goto LABEL_440;
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_protocol_http1_connected";
          v156 = "%{public}s called with null http1, backtrace limit exceeded";
        }
        goto LABEL_439;
      }
LABEL_400:
      free(v149);
      goto LABEL_401;
    }
    v150 = __nwlog_obj();
    v151 = type[0];
    if (!os_log_type_enabled(v150, type[0]))
      goto LABEL_399;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
    v152 = "%{public}s called with null handle";
    goto LABEL_398;
  }
  v4 = a2;
  v5 = *((_DWORD *)handle + 6);
  v6 = (uint64_t *)a1->handle;
  if (v5 == 1)
    goto LABEL_10;
  if (v5 != 2)
  {
    if (v5 != 3)
      goto LABEL_401;
    v7 = *((_QWORD *)handle + 2);
    if (v7)
    {
      v6 = (uint64_t *)(v7 + 480);
      goto LABEL_10;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
    v149 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(aBlock[0]) = 0;
    if (__nwlog_fault(v149, type, aBlock))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        v150 = __nwlog_obj();
        v151 = type[0];
        if (!os_log_type_enabled(v150, type[0]))
          goto LABEL_399;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
        v152 = "%{public}s called with null handle->http1_connection";
        goto LABEL_398;
      }
      if (!LOBYTE(aBlock[0]))
      {
        v150 = __nwlog_obj();
        v151 = type[0];
        if (!os_log_type_enabled(v150, type[0]))
          goto LABEL_399;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
        v152 = "%{public}s called with null handle->http1_connection, backtrace limit exceeded";
        goto LABEL_398;
      }
      v184 = (char *)__nw_create_backtrace_string();
      v150 = __nwlog_obj();
      v151 = type[0];
      v185 = os_log_type_enabled(v150, type[0]);
      if (!v184)
      {
        if (!v185)
          goto LABEL_399;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
        v152 = "%{public}s called with null handle->http1_connection, no backtrace";
        goto LABEL_398;
      }
      if (v185)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v184;
        v186 = "%{public}s called with null handle->http1_connection, dumping backtrace:%{public}s";
LABEL_290:
        _os_log_impl(&dword_182FBE000, v150, v151, v186, buf, 0x16u);
        goto LABEL_291;
      }
      goto LABEL_291;
    }
LABEL_399:
    if (!v149)
      goto LABEL_401;
    goto LABEL_400;
  }
  v8 = *((_QWORD *)handle + 1);
  if (!v8)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
    v149 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(aBlock[0]) = 0;
    if (!__nwlog_fault(v149, type, aBlock))
      goto LABEL_399;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      v150 = __nwlog_obj();
      v151 = type[0];
      if (!os_log_type_enabled(v150, type[0]))
        goto LABEL_399;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
      v152 = "%{public}s called with null handle->http1_stream";
      goto LABEL_398;
    }
    if (!LOBYTE(aBlock[0]))
    {
      v150 = __nwlog_obj();
      v151 = type[0];
      if (!os_log_type_enabled(v150, type[0]))
        goto LABEL_399;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
      v152 = "%{public}s called with null handle->http1_stream, backtrace limit exceeded";
      goto LABEL_398;
    }
    v184 = (char *)__nw_create_backtrace_string();
    v150 = __nwlog_obj();
    v151 = type[0];
    v187 = os_log_type_enabled(v150, type[0]);
    if (!v184)
    {
      if (!v187)
        goto LABEL_399;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
      v152 = "%{public}s called with null handle->http1_stream, no backtrace";
      goto LABEL_398;
    }
    if (v187)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v184;
      v186 = "%{public}s called with null handle->http1_stream, dumping backtrace:%{public}s";
      goto LABEL_290;
    }
LABEL_291:
    free(v184);
    if (!v149)
      goto LABEL_401;
    goto LABEL_400;
  }
  v6 = (uint64_t *)(v8 + 248);
LABEL_10:
  v9 = *v6;
  if (!*v6)
    goto LABEL_401;
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_http1_connected";
    v153 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(aBlock[0]) = 0;
    if (!__nwlog_fault(v153, type, aBlock))
      goto LABEL_440;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      v154 = __nwlog_obj();
      v155 = type[0];
      if (!os_log_type_enabled(v154, type[0]))
        goto LABEL_440;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http1_connected";
      v156 = "%{public}s called with null other_protocol";
    }
    else if (LOBYTE(aBlock[0]))
    {
      v165 = (char *)__nw_create_backtrace_string();
      v154 = __nwlog_obj();
      v155 = type[0];
      v166 = os_log_type_enabled(v154, type[0]);
      if (v165)
      {
        if (!v166)
          goto LABEL_433;
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_protocol_http1_connected";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v165;
        v167 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
        goto LABEL_432;
      }
      if (!v166)
        goto LABEL_440;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http1_connected";
      v156 = "%{public}s called with null other_protocol, no backtrace";
    }
    else
    {
      v154 = __nwlog_obj();
      v155 = type[0];
      if (!os_log_type_enabled(v154, type[0]))
        goto LABEL_440;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http1_connected";
      v156 = "%{public}s called with null other_protocol, backtrace limit exceeded";
    }
LABEL_439:
    _os_log_impl(&dword_182FBE000, v154, v155, v156, buf, 0xCu);
    goto LABEL_440;
  }
  if (v5 == 2)
  {
    v11 = *((_QWORD *)handle + 1);
    if (!v11)
      goto LABEL_193;
    goto LABEL_18;
  }
  if (v5 != 3)
    goto LABEL_193;
  v10 = *((_QWORD *)handle + 2);
  if (!v10)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http1_get_stream_for_protocol";
    v170 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(aBlock[0]) = 0;
    if (!__nwlog_fault(v170, type, aBlock))
      goto LABEL_417;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      v171 = __nwlog_obj();
      v172 = type[0];
      if (!os_log_type_enabled(v171, type[0]))
        goto LABEL_417;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_get_stream_for_protocol";
      v173 = "%{public}s called with null handle->http1_connection";
    }
    else if (LOBYTE(aBlock[0]))
    {
      v188 = (char *)__nw_create_backtrace_string();
      v171 = __nwlog_obj();
      v172 = type[0];
      v189 = os_log_type_enabled(v171, type[0]);
      if (v188)
      {
        if (v189)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_http1_get_stream_for_protocol";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v188;
          _os_log_impl(&dword_182FBE000, v171, v172, "%{public}s called with null handle->http1_connection, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v188);
        goto LABEL_417;
      }
      if (!v189)
      {
LABEL_417:
        if (v170)
          free(v170);
        goto LABEL_193;
      }
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_get_stream_for_protocol";
      v173 = "%{public}s called with null handle->http1_connection, no backtrace";
    }
    else
    {
      v171 = __nwlog_obj();
      v172 = type[0];
      if (!os_log_type_enabled(v171, type[0]))
        goto LABEL_417;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_get_stream_for_protocol";
      v173 = "%{public}s called with null handle->http1_connection, backtrace limit exceeded";
    }
    _os_log_impl(&dword_182FBE000, v171, v172, v173, buf, 0xCu);
    goto LABEL_417;
  }
  v11 = *(_QWORD *)(v10 + 488);
  if (!v11)
    goto LABEL_193;
LABEL_18:
  if (v5 != 2)
  {
    if (*((_QWORD *)handle + 2))
      goto LABEL_193;
    goto LABEL_23;
  }
  v12 = *((_QWORD *)handle + 1);
  if (!v12)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http1_get_connection_for_protocol";
    v225 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(aBlock[0]) = 0;
    if (__nwlog_fault(v225, type, aBlock))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        v226 = __nwlog_obj();
        v227 = type[0];
        if (os_log_type_enabled(v226, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http1_get_connection_for_protocol";
          v228 = "%{public}s called with null handle->http1_stream";
LABEL_525:
          _os_log_impl(&dword_182FBE000, v226, v227, v228, buf, 0xCu);
        }
      }
      else if (LOBYTE(aBlock[0]))
      {
        v241 = (char *)__nw_create_backtrace_string();
        v226 = __nwlog_obj();
        v227 = type[0];
        v242 = os_log_type_enabled(v226, type[0]);
        if (v241)
        {
          if (v242)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_http1_get_connection_for_protocol";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v241;
            _os_log_impl(&dword_182FBE000, v226, v227, "%{public}s called with null handle->http1_stream, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v241);
          goto LABEL_526;
        }
        if (v242)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http1_get_connection_for_protocol";
          v228 = "%{public}s called with null handle->http1_stream, no backtrace";
          goto LABEL_525;
        }
      }
      else
      {
        v226 = __nwlog_obj();
        v227 = type[0];
        if (os_log_type_enabled(v226, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http1_get_connection_for_protocol";
          v228 = "%{public}s called with null handle->http1_stream, backtrace limit exceeded";
          goto LABEL_525;
        }
      }
    }
LABEL_526:
    if (v225)
      free(v225);
    v4 = a2;
    goto LABEL_23;
  }
  if (*(_QWORD *)(v12 + 256))
    goto LABEL_193;
LABEL_23:
  if ((*(_BYTE *)(v11 + 158) & 1) == 0)
  {
    if (gLogDatapath)
    {
      v179 = __nwlog_obj();
      if (os_log_type_enabled(v179, OS_LOG_TYPE_DEBUG))
      {
        v180 = *(_QWORD *)(v11 + 256);
        v181 = *(_DWORD *)(*(_QWORD *)(v11 + 248) + 372);
        if (v180)
          LODWORD(v180) = *(_DWORD *)(v180 + 860);
        v182 = *(_DWORD *)(v11 + 424);
        output_handler = a1->output_handler;
        *(_DWORD *)buf = 136447746;
        *(_QWORD *)&buf[4] = "nw_protocol_http1_connected";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v11 + 74;
        *(_WORD *)&buf[22] = 2080;
        v271 = (uint64_t)" ";
        v272 = 1024;
        *(_DWORD *)v273 = v181;
        *(_WORD *)&v273[4] = 1024;
        *(_DWORD *)&v273[6] = v180;
        LOWORD(v274) = 1024;
        *(_DWORD *)((char *)&v274 + 2) = v182;
        HIWORD(v274) = 2048;
        *(_QWORD *)v275 = output_handler;
        _os_log_impl(&dword_182FBE000, v179, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> associating connected output handler %p", buf, 0x3Cu);
      }
    }
  }
  v13 = a1->output_handler;
  if (!v13)
    goto LABEL_193;
  v14 = *(void **)(v11 + 336);
  v260 = a1->output_handler;
  if (!v14)
  {
    v192 = v4;
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http1_connection_create";
    v193 = (char *)_os_log_send_and_compose_impl();
    v269 = OS_LOG_TYPE_ERROR;
    v268 = 0;
    if (!__nwlog_fault(v193, &v269, &v268))
      goto LABEL_469;
    if (v269 == OS_LOG_TYPE_FAULT)
    {
      v194 = __nwlog_obj();
      v195 = v269;
      if (!os_log_type_enabled(v194, v269))
        goto LABEL_469;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_connection_create";
      v196 = "%{public}s called with null endpoint";
      goto LABEL_468;
    }
    if (!v268)
    {
      v194 = __nwlog_obj();
      v195 = v269;
      if (!os_log_type_enabled(v194, v269))
        goto LABEL_469;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_connection_create";
      v196 = "%{public}s called with null endpoint, backtrace limit exceeded";
      goto LABEL_468;
    }
    v229 = (char *)__nw_create_backtrace_string();
    v194 = __nwlog_obj();
    v195 = v269;
    v230 = os_log_type_enabled(v194, v269);
    if (!v229)
    {
      if (!v230)
        goto LABEL_469;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_connection_create";
      v196 = "%{public}s called with null endpoint, no backtrace";
      goto LABEL_468;
    }
    if (v230)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_http1_connection_create";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v229;
      _os_log_impl(&dword_182FBE000, v194, v195, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v229);
LABEL_469:
    if (!v193)
      goto LABEL_471;
    goto LABEL_470;
  }
  v15 = *(void **)(v11 + 320);
  if (!v15)
  {
    v192 = v4;
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http1_connection_create";
    v193 = (char *)_os_log_send_and_compose_impl();
    v269 = OS_LOG_TYPE_ERROR;
    v268 = 0;
    if (!__nwlog_fault(v193, &v269, &v268))
      goto LABEL_469;
    if (v269 == OS_LOG_TYPE_FAULT)
    {
      v194 = __nwlog_obj();
      v195 = v269;
      if (!os_log_type_enabled(v194, v269))
        goto LABEL_469;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_connection_create";
      v196 = "%{public}s called with null parameters";
      goto LABEL_468;
    }
    if (!v268)
    {
      v194 = __nwlog_obj();
      v195 = v269;
      if (!os_log_type_enabled(v194, v269))
        goto LABEL_469;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_connection_create";
      v196 = "%{public}s called with null parameters, backtrace limit exceeded";
      goto LABEL_468;
    }
    v233 = (char *)__nw_create_backtrace_string();
    v194 = __nwlog_obj();
    v195 = v269;
    v234 = os_log_type_enabled(v194, v269);
    if (v233)
    {
      if (v234)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http1_connection_create";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v233;
        _os_log_impl(&dword_182FBE000, v194, v195, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v233);
      if (!v193)
      {
LABEL_471:
        __nwlog_obj();
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
        v246 = (char *)_os_log_send_and_compose_impl();
        type[0] = OS_LOG_TYPE_ERROR;
        LOBYTE(aBlock[0]) = 0;
        if (!__nwlog_fault(v246, type, aBlock))
          goto LABEL_485;
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          v247 = __nwlog_obj();
          v248 = type[0];
          if (!os_log_type_enabled(v247, type[0]))
            goto LABEL_485;
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
          v249 = "%{public}s called with null http1_connection";
        }
        else if (LOBYTE(aBlock[0]))
        {
          v250 = (char *)__nw_create_backtrace_string();
          v247 = __nwlog_obj();
          v248 = type[0];
          v251 = os_log_type_enabled(v247, type[0]);
          if (v250)
          {
            if (v251)
            {
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v250;
              _os_log_impl(&dword_182FBE000, v247, v248, "%{public}s called with null http1_connection, dumping backtrace:%{public}s", buf, 0x16u);
            }
            free(v250);
LABEL_485:
            if (v246)
              free(v246);
            __nwlog_obj();
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
            v252 = (char *)_os_log_send_and_compose_impl();
            type[0] = OS_LOG_TYPE_ERROR;
            LOBYTE(aBlock[0]) = 0;
            if (!__nwlog_fault(v252, type, aBlock))
              goto LABEL_501;
            if (type[0] == OS_LOG_TYPE_FAULT)
            {
              v253 = __nwlog_obj();
              v254 = type[0];
              if (os_log_type_enabled(v253, type[0]))
              {
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                v255 = "%{public}s called with null http1_connection";
LABEL_500:
                _os_log_impl(&dword_182FBE000, v253, v254, v255, buf, 0xCu);
              }
            }
            else if (LOBYTE(aBlock[0]))
            {
              v256 = (char *)__nw_create_backtrace_string();
              v253 = __nwlog_obj();
              v254 = type[0];
              v257 = os_log_type_enabled(v253, type[0]);
              if (v256)
              {
                if (v257)
                {
                  *(_DWORD *)buf = 136446466;
                  *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = v256;
                  _os_log_impl(&dword_182FBE000, v253, v254, "%{public}s called with null http1_connection, dumping backtrace:%{public}s", buf, 0x16u);
                }
                free(v256);
                goto LABEL_501;
              }
              if (v257)
              {
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                v255 = "%{public}s called with null http1_connection, no backtrace";
                goto LABEL_500;
              }
            }
            else
            {
              v253 = __nwlog_obj();
              v254 = type[0];
              if (os_log_type_enabled(v253, type[0]))
              {
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                v255 = "%{public}s called with null http1_connection, backtrace limit exceeded";
                goto LABEL_500;
              }
            }
LABEL_501:
            if (v252)
              free(v252);
            v16 = 0;
            v4 = v192;
            v13 = v260;
            goto LABEL_157;
          }
          if (!v251)
            goto LABEL_485;
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
          v249 = "%{public}s called with null http1_connection, no backtrace";
        }
        else
        {
          v247 = __nwlog_obj();
          v248 = type[0];
          if (!os_log_type_enabled(v247, type[0]))
            goto LABEL_485;
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
          v249 = "%{public}s called with null http1_connection, backtrace limit exceeded";
        }
        _os_log_impl(&dword_182FBE000, v247, v248, v249, buf, 0xCu);
        goto LABEL_485;
      }
LABEL_470:
      free(v193);
      goto LABEL_471;
    }
    if (v234)
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_connection_create";
      v196 = "%{public}s called with null parameters, no backtrace";
LABEL_468:
      _os_log_impl(&dword_182FBE000, v194, v195, v196, buf, 0xCu);
      goto LABEL_469;
    }
    goto LABEL_469;
  }
  v16 = malloc_type_calloc(1uLL, 0x370uLL, 0xEAFB8F1AuLL);
  if (!v16)
  {
    v201 = __nwlog_obj();
    os_log_type_enabled(v201, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446722;
    *(_QWORD *)&buf[4] = "strict_calloc";
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = 1;
    *(_WORD *)&buf[22] = 2048;
    v271 = 880;
    v202 = (void *)_os_log_send_and_compose_impl();
    if (__nwlog_abort((uint64_t)v202))
    {
      __break(1u);
      return;
    }
    free(v202);
    v13 = v260;
  }
  bzero(v16, 0x370uLL);
  if (nw_protocol_http1_identifier::onceToken != -1)
    dispatch_once(&nw_protocol_http1_identifier::onceToken, &__block_literal_global_39812);
  *((_QWORD *)v16 + 2) = &nw_protocol_http1_identifier::http1_protocol_identifier;
  if (nw_protocol_http1_get_callbacks(void)::onceToken[0] != -1)
    dispatch_once(nw_protocol_http1_get_callbacks(void)::onceToken, &__block_literal_global_17_39614);
  *((_QWORD *)v16 + 3) = &nw_protocol_http1_get_callbacks(void)::http1_protocol_callbacks;
  *((_DWORD *)v16 + 46) = 3;
  *((_QWORD *)v16 + 22) = v16;
  *((_QWORD *)v16 + 5) = v16 + 10;
  *((_QWORD *)v16 + 60) = v9;
  nw_protocol_set_output_handler((uint64_t)v16, (uint64_t)v13);
  v17 = os_retain(v14);
  v18 = *((_BYTE *)v16 + 760);
  if ((v18 & 1) != 0)
  {
    v19 = (void *)*((_QWORD *)v16 + 94);
    if (v19)
    {
      os_release(v19);
      v18 = *((_BYTE *)v16 + 760);
    }
  }
  *((_QWORD *)v16 + 94) = v17;
  *((_BYTE *)v16 + 760) = v18 | 1;
  v20 = os_retain(v15);
  v21 = *((_BYTE *)v16 + 744);
  v259 = v4;
  if ((v21 & 1) != 0)
  {
    v22 = (void *)*((_QWORD *)v16 + 92);
    if (v22)
    {
      os_release(v22);
      v21 = *((_BYTE *)v16 + 744);
    }
  }
  *((_QWORD *)v16 + 92) = v20;
  *((_BYTE *)v16 + 744) = v21 | 1;
  v23 = v15;
  v24 = *(id *)(v23[13] + 136);

  v25 = *((_BYTE *)v16 + 504);
  if ((v25 & 1) != 0)
  {
    v26 = (void *)*((_QWORD *)v16 + 62);
    if (v26)
    {
      os_release(v26);
      v25 = *((_BYTE *)v16 + 504);
    }
  }
  *((_QWORD *)v16 + 62) = v24;
  *((_BYTE *)v16 + 504) = v25 | 1;
  v27 = MEMORY[0x1E0C809B0];
  *((_QWORD *)v16 + 24) = *(_QWORD *)(v9 + 192);
  *(_QWORD *)type = v27;
  v264 = 0x40000000;
  v265 = ___ZL26nw_http1_connection_createP11nw_protocolP17nw_protocol_http1P11nw_endpointP13nw_parameters_block_invoke;
  v266 = &__block_descriptor_tmp_40_39813;
  v267 = v16;
  metadata = nw_http_connection_create_metadata(v24, type, 0);
  v29 = *((_BYTE *)v16 + 776);
  if ((v29 & 1) != 0)
  {
    v30 = (void *)*((_QWORD *)v16 + 96);
    if (v30)
    {
      os_release(v30);
      v29 = *((_BYTE *)v16 + 776);
    }
  }
  *((_QWORD *)v16 + 96) = metadata;
  *((_BYTE *)v16 + 776) = v29 | 1;
  nw_http_connection_metadata_set_version(metadata, 3);
  nw_http_connection_metadata_set_shared_connection_pool_metadata(*((void **)v16 + 96), *(void **)(v9 + 312));
  *((_QWORD *)v16 + 77) = 0;
  *((_QWORD *)v16 + 78) = (char *)v16 + 616;
  *((_QWORD *)v16 + 79) = 0;
  *((_QWORD *)v16 + 80) = (char *)v16 + 632;
  *((_QWORD *)v16 + 81) = 0;
  *((_QWORD *)v16 + 82) = (char *)v16 + 648;
  *((_QWORD *)v16 + 83) = 0;
  *((_QWORD *)v16 + 84) = (char *)v16 + 664;
  *((_QWORD *)v16 + 86) = (char *)v16 + 680;
  *((_QWORD *)v16 + 85) = 0;
  nw_frame_cache_init((uint64_t)v16 + 696, (uint64_t)v16, 256, 0x40000, 16);
  v31 = *((_QWORD *)v16 + 60);
  if (v31)
  {
    *(_OWORD *)((char *)v16 + 360) = 0u;
    *(_OWORD *)((char *)v16 + 376) = 0u;
    *(_OWORD *)((char *)v16 + 392) = 0u;
    *(_OWORD *)((char *)v16 + 408) = 0u;
    *(_OWORD *)((char *)v16 + 424) = 0u;
    *(_OWORD *)((char *)v16 + 440) = 0u;
    *(_OWORD *)((char *)v16 + 328) = 0u;
    *(_OWORD *)((char *)v16 + 344) = 0u;
    *((_QWORD *)v16 + 59) = nw_http1_on_reset;
    *((_QWORD *)v16 + 37) = nw_http1_on_message_begin;
    *((_QWORD *)v16 + 38) = nw_http1_on_url;
    *((_QWORD *)v16 + 48) = nw_http1_on_message_complete;
    *((_QWORD *)v16 + 49) = nw_http1_on_url_complete;
    *((_QWORD *)v16 + 39) = nw_http1_on_status;
    *((_QWORD *)v16 + 40) = nw_http1_on_method;
    *((_QWORD *)v16 + 50) = nw_http1_on_status_complete;
    *((_QWORD *)v16 + 51) = nw_http1_on_method_complete;
    *((_QWORD *)v16 + 42) = nw_http1_on_header_field;
    *((_QWORD *)v16 + 43) = nw_http1_on_header_value;
    *((_QWORD *)v16 + 53) = nw_http1_on_header_field_complete;
    *((_QWORD *)v16 + 54) = nw_http1_on_header_value_complete;
    *((_QWORD *)v16 + 46) = nw_http1_on_headers_complete;
    *((_QWORD *)v16 + 47) = nw_http1_on_body;
    *((_QWORD *)v16 + 57) = nw_http1_on_chunk_header;
    *((_QWORD *)v16 + 58) = nw_http1_on_chunk_complete;
    v32 = *(_BYTE *)(v31 + 376);
    *(_OWORD *)((char *)v16 + 248) = 0u;
    *(_OWORD *)((char *)v16 + 200) = 0u;
    *(_OWORD *)((char *)v16 + 264) = 0u;
    *(_OWORD *)((char *)v16 + 232) = 0u;
    *(_OWORD *)((char *)v16 + 216) = 0u;
    if ((v32 & 1) != 0)
      v33 = 1;
    else
      v33 = 2;
    *((_BYTE *)v16 + 272) = v33;
    *((_QWORD *)v16 + 35) = 0;
    *((_QWORD *)v16 + 36) = (char *)v16 + 296;
    *((_WORD *)v16 + 139) = 15619;
    *((_QWORD *)v16 + 31) = v16;
    *((_QWORD *)v16 + 32) = 238;
    if ((*((_BYTE *)v16 + 158) & 1) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v34 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
      {
        v35 = *((_QWORD *)v16 + 61);
        v36 = *(_DWORD *)(*((_QWORD *)v16 + 60) + 372);
        v37 = *((_DWORD *)v16 + 215);
        if (v35)
          LODWORD(v35) = *(_DWORD *)(v35 + 424);
        *(_DWORD *)buf = 136448258;
        *(_QWORD *)&buf[4] = "nw_http1_connection_log_parser_version";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = (char *)v16 + 74;
        *(_WORD *)&buf[22] = 2080;
        v271 = (uint64_t)" ";
        v272 = 1024;
        *(_DWORD *)v273 = v36;
        *(_WORD *)&v273[4] = 1024;
        *(_DWORD *)&v273[6] = v37;
        LOWORD(v274) = 1024;
        *(_DWORD *)((char *)&v274 + 2) = v35;
        HIWORD(v274) = 1024;
        *(_DWORD *)v275 = 9;
        *(_WORD *)&v275[4] = 1024;
        *(_DWORD *)&v275[6] = 2;
        *(_WORD *)v276 = 1024;
        *(_DWORD *)&v276[2] = 1;
        _os_log_impl(&dword_182FBE000, v34, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> using http parser v%u.%u.%u", buf, 0x44u);
      }
    }
    goto LABEL_54;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_http1_connection_parser_init";
  v203 = (char *)_os_log_send_and_compose_impl();
  v269 = OS_LOG_TYPE_ERROR;
  v268 = 0;
  if (__nwlog_fault(v203, &v269, &v268))
  {
    if (v269 == OS_LOG_TYPE_FAULT)
    {
      v204 = __nwlog_obj();
      v205 = v269;
      if (os_log_type_enabled(v204, v269))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http1_connection_parser_init";
        v206 = "%{public}s called with null http1_connection->protocol_http1";
LABEL_506:
        _os_log_impl(&dword_182FBE000, v204, v205, v206, buf, 0xCu);
      }
    }
    else if (v268)
    {
      v235 = (char *)__nw_create_backtrace_string();
      v204 = __nwlog_obj();
      v205 = v269;
      v236 = os_log_type_enabled(v204, v269);
      if (v235)
      {
        if (v236)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_http1_connection_parser_init";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v235;
          _os_log_impl(&dword_182FBE000, v204, v205, "%{public}s called with null http1_connection->protocol_http1, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v235);
        goto LABEL_507;
      }
      if (v236)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http1_connection_parser_init";
        v206 = "%{public}s called with null http1_connection->protocol_http1, no backtrace";
        goto LABEL_506;
      }
    }
    else
    {
      v204 = __nwlog_obj();
      v205 = v269;
      if (os_log_type_enabled(v204, v269))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http1_connection_parser_init";
        v206 = "%{public}s called with null http1_connection->protocol_http1, backtrace limit exceeded";
        goto LABEL_506;
      }
    }
  }
LABEL_507:
  if (v203)
    free(v203);
  v13 = v260;
LABEL_54:
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = buf;
  *(_QWORD *)&buf[16] = 0x2000000000;
  v271 = (uint64_t)v16;
  aBlock[0] = v27;
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZL26nw_http1_connection_createP11nw_protocolP17nw_protocol_http1P11nw_endpointP13nw_parameters_block_invoke_2;
  aBlock[3] = &unk_1E14A14C8;
  aBlock[4] = buf;
  *((_QWORD *)v16 + 76) = _Block_copy(aBlock);
  _Block_object_dispose(buf, 8);
  if ((*((_BYTE *)v16 + 158) & 1) == 0)
  {
    if (gLogDatapath)
    {
      v215 = __nwlog_obj();
      if (os_log_type_enabled(v215, OS_LOG_TYPE_DEBUG))
      {
        v216 = *((_QWORD *)v16 + 61);
        v217 = *(_DWORD *)(*((_QWORD *)v16 + 60) + 372);
        v218 = *((_DWORD *)v16 + 215);
        if (v216)
          LODWORD(v216) = *(_DWORD *)(v216 + 424);
        *(_DWORD *)buf = 136447746;
        *(_QWORD *)&buf[4] = "nw_http1_connection_create";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = (char *)v16 + 74;
        *(_WORD *)&buf[22] = 2080;
        v271 = (uint64_t)" ";
        v272 = 1024;
        *(_DWORD *)v273 = v217;
        *(_WORD *)&v273[4] = 1024;
        *(_DWORD *)&v273[6] = v218;
        LOWORD(v274) = 1024;
        *(_DWORD *)((char *)&v274 + 2) = v216;
        HIWORD(v274) = 2048;
        *(_QWORD *)v275 = v16;
        _os_log_impl(&dword_182FBE000, v215, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> created %p", buf, 0x3Cu);
        v13 = v260;
      }
    }
  }
  v38 = (NSObject **)(v16 + 32);
  nw_protocol_replace_input_handler((uint64_t)v13, v11, (uint64_t)v16);
  *v16 = *(_OWORD *)v13->flow_id;
  v39 = (void *)*((_QWORD *)v16 + 92);
  if (!v39)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_http1_set_up_association";
    v207 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(aBlock[0]) = 0;
    if (!__nwlog_fault(v207, type, aBlock))
      goto LABEL_513;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      v208 = __nwlog_obj();
      v209 = type[0];
      if (!os_log_type_enabled(v208, type[0]))
        goto LABEL_513;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http1_set_up_association";
      v210 = "%{public}s called with null parameters";
    }
    else if (LOBYTE(aBlock[0]))
    {
      v237 = (char *)__nw_create_backtrace_string();
      v208 = __nwlog_obj();
      v209 = type[0];
      v238 = os_log_type_enabled(v208, type[0]);
      if (v237)
      {
        if (v238)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_protocol_http1_set_up_association";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v237;
          _os_log_impl(&dword_182FBE000, v208, v209, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v237);
LABEL_513:
        if (v207)
          free(v207);
        v13 = v260;
        v57 = *v38;
        if (*v38)
          goto LABEL_86;
        goto LABEL_88;
      }
      if (!v238)
        goto LABEL_513;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http1_set_up_association";
      v210 = "%{public}s called with null parameters, no backtrace";
    }
    else
    {
      v208 = __nwlog_obj();
      v209 = type[0];
      if (!os_log_type_enabled(v208, type[0]))
        goto LABEL_513;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http1_set_up_association";
      v210 = "%{public}s called with null parameters, backtrace limit exceeded";
    }
    _os_log_impl(&dword_182FBE000, v208, v209, v210, buf, 0xCu);
    goto LABEL_513;
  }
  if (!*((_QWORD *)v16 + 66))
  {
    v40 = v39;
    v41 = *(id *)(v40[13] + 136);

    v42 = nw_path_copy_flow_registration(v41, (uint64_t)v16);
    v43 = *((_BYTE *)v16 + 568);
    if ((v43 & 1) != 0)
    {
      v44 = (void *)*((_QWORD *)v16 + 70);
      if (v44)
      {
        os_release(v44);
        v43 = *((_BYTE *)v16 + 568);
      }
    }
    *((_QWORD *)v16 + 70) = v42;
    *((_BYTE *)v16 + 568) = v43 | 1;
    if (v42)
    {
      v45 = nw_path_flow_registration_copy_endpoint(v42);
      v46 = nw_path_flow_registration_copy_parameters(*((void **)v16 + 70));
      v47 = nw_endpoint_copy_association_with_evaluator(v45, v46, 0);
      v48 = *((_BYTE *)v16 + 536);
      if ((v48 & 1) != 0)
      {
        v49 = (void *)*((_QWORD *)v16 + 66);
        if (v49)
        {
          os_release(v49);
          v48 = *((_BYTE *)v16 + 536);
        }
      }
      *((_QWORD *)v16 + 66) = v47;
      *((_BYTE *)v16 + 536) = v48 | 1;
      if (v47)
      {
        *(_QWORD *)buf = nw_protocol_instance_stub_create((nw_protocol *)v16);
        nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v16 + 34), buf);
        nw_association_register(*((void **)v16 + 66), v40, *((void **)v16 + 68), 0, &__block_literal_global_70_39832);
        v50 = nw_association_copy_current_path(*((void **)v16 + 66), v46);
        if (v50)
        {
          v51 = v50;
          v52 = nw_path_copy_for_flow_registration(v50, *((void **)v16 + 70));
          if (v52)
          {
            object = v52;
            if (*v38 != v52)
            {
              *(_QWORD *)buf = os_retain(v52);
              nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v16 + 32), buf);
              v52 = object;
            }
            if (nw_path_has_flows(v52))
              v53 = 4096;
            else
              v53 = 0;
            v54 = *((_WORD *)v16 + 436) & 0xEFFF | (*((unsigned __int8 *)v16 + 874) << 16);
            *((_WORD *)v16 + 436) = *((_WORD *)v16 + 436) & 0xEFFF | v53;
            *((_BYTE *)v16 + 874) = BYTE2(v54);
            v55 = nw_parameters_copy_effective_proxy_config(v40);
            if (v55)
            {
              v56 = v55;
              if (nw_path_has_proxy_config(v51, v55))
              {
                *(_QWORD *)buf = os_retain(v56);
                nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v16 + 36), buf);
              }
              os_release(v56);
            }
            os_release(object);
          }
          os_release(v51);
        }
      }
      if (v46)
        os_release(v46);
      v13 = v260;
      if (v45)
        os_release(v45);
    }
    if (v41)
      os_release(v41);
  }
  v57 = *v38;
  if (*v38)
  {
LABEL_86:
    if (nw_path_uses_interface_type(v57, nw_interface_type_cellular))
      *((_QWORD *)v16 + 24) = 1000;
  }
LABEL_88:
  v58 = *(unsigned int *)(v9 + 336) + 1;
  v59 = v58 << 31 >> 31;
  *(_DWORD *)(v9 + 336) = v58;
  if (v59 == v58 && (v59 & 0x8000000000000000) == 0)
    goto LABEL_107;
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v60 = *(unsigned int *)(v9 + 336);
  *(_DWORD *)buf = 136446978;
  *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
  *(_WORD *)&buf[12] = 2082;
  *(_QWORD *)&buf[14] = "http1->connections_count";
  *(_WORD *)&buf[22] = 2048;
  v271 = 1;
  v272 = 2048;
  *(_QWORD *)v273 = v60;
  v61 = (char *)_os_log_send_and_compose_impl();
  type[0] = OS_LOG_TYPE_ERROR;
  LOBYTE(aBlock[0]) = 0;
  if (__nwlog_fault(v61, type, aBlock))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v62 = gLogObj;
      v63 = type[0];
      if (os_log_type_enabled((os_log_t)gLogObj, type[0]))
      {
        v64 = *(unsigned int *)(v9 + 336);
        *(_DWORD *)buf = 136446978;
        *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = "http1->connections_count";
        *(_WORD *)&buf[22] = 2048;
        v271 = 1;
        v272 = 2048;
        *(_QWORD *)v273 = v64;
        v65 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_103:
        _os_log_impl(&dword_182FBE000, v62, v63, v65, buf, 0x2Au);
      }
    }
    else if (LOBYTE(aBlock[0]))
    {
      v66 = (char *)__nw_create_backtrace_string();
      v62 = __nwlog_obj();
      v63 = type[0];
      v67 = os_log_type_enabled(v62, type[0]);
      if (v66)
      {
        if (v67)
        {
          v68 = *(unsigned int *)(v9 + 336);
          *(_DWORD *)buf = 136447234;
          *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = "http1->connections_count";
          *(_WORD *)&buf[22] = 2048;
          v271 = 1;
          v272 = 2048;
          *(_QWORD *)v273 = v68;
          *(_WORD *)&v273[8] = 2082;
          v274 = v66;
          _os_log_impl(&dword_182FBE000, v62, v63, "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
        }
        free(v66);
        goto LABEL_104;
      }
      if (v67)
      {
        v70 = *(unsigned int *)(v9 + 336);
        *(_DWORD *)buf = 136446978;
        *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = "http1->connections_count";
        *(_WORD *)&buf[22] = 2048;
        v271 = 1;
        v272 = 2048;
        *(_QWORD *)v273 = v70;
        v65 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
        goto LABEL_103;
      }
    }
    else
    {
      v62 = __nwlog_obj();
      v63 = type[0];
      if (os_log_type_enabled(v62, type[0]))
      {
        v69 = *(unsigned int *)(v9 + 336);
        *(_DWORD *)buf = 136446978;
        *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = "http1->connections_count";
        *(_WORD *)&buf[22] = 2048;
        v271 = 1;
        v272 = 2048;
        *(_QWORD *)v273 = v69;
        v65 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
        goto LABEL_103;
      }
    }
  }
LABEL_104:
  if (v61)
    free(v61);
  *(_DWORD *)(v9 + 336) = -1;
  v13 = v260;
LABEL_107:
  v71 = *(unsigned int *)(v9 + 360) + 1;
  v72 = v71 << 31 >> 31;
  *(_DWORD *)(v9 + 360) = v71;
  if (v72 == v71 && (v72 & 0x8000000000000000) == 0)
    goto LABEL_126;
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v73 = *(unsigned int *)(v9 + 360);
  *(_DWORD *)buf = 136446978;
  *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
  *(_WORD *)&buf[12] = 2082;
  *(_QWORD *)&buf[14] = "http1->next_connection_log_num";
  *(_WORD *)&buf[22] = 2048;
  v271 = 1;
  v272 = 2048;
  *(_QWORD *)v273 = v73;
  v74 = (char *)_os_log_send_and_compose_impl();
  type[0] = OS_LOG_TYPE_ERROR;
  LOBYTE(aBlock[0]) = 0;
  if (__nwlog_fault(v74, type, aBlock))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v75 = gLogObj;
      v76 = type[0];
      if (os_log_type_enabled((os_log_t)gLogObj, type[0]))
      {
        v77 = *(unsigned int *)(v9 + 360);
        *(_DWORD *)buf = 136446978;
        *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = "http1->next_connection_log_num";
        *(_WORD *)&buf[22] = 2048;
        v271 = 1;
        v272 = 2048;
        *(_QWORD *)v273 = v77;
        v78 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_122:
        _os_log_impl(&dword_182FBE000, v75, v76, v78, buf, 0x2Au);
      }
    }
    else if (LOBYTE(aBlock[0]))
    {
      v79 = (char *)__nw_create_backtrace_string();
      v75 = __nwlog_obj();
      v76 = type[0];
      v80 = os_log_type_enabled(v75, type[0]);
      if (v79)
      {
        if (v80)
        {
          v81 = *(unsigned int *)(v9 + 360);
          *(_DWORD *)buf = 136447234;
          *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = "http1->next_connection_log_num";
          *(_WORD *)&buf[22] = 2048;
          v271 = 1;
          v272 = 2048;
          *(_QWORD *)v273 = v81;
          *(_WORD *)&v273[8] = 2082;
          v274 = v79;
          _os_log_impl(&dword_182FBE000, v75, v76, "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
        }
        free(v79);
        goto LABEL_123;
      }
      if (v80)
      {
        v83 = *(unsigned int *)(v9 + 360);
        *(_DWORD *)buf = 136446978;
        *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = "http1->next_connection_log_num";
        *(_WORD *)&buf[22] = 2048;
        v271 = 1;
        v272 = 2048;
        *(_QWORD *)v273 = v83;
        v78 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
        goto LABEL_122;
      }
    }
    else
    {
      v75 = __nwlog_obj();
      v76 = type[0];
      if (os_log_type_enabled(v75, type[0]))
      {
        v82 = *(unsigned int *)(v9 + 360);
        *(_DWORD *)buf = 136446978;
        *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = "http1->next_connection_log_num";
        *(_WORD *)&buf[22] = 2048;
        v271 = 1;
        v272 = 2048;
        *(_QWORD *)v273 = v82;
        v78 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
        goto LABEL_122;
      }
    }
  }
LABEL_123:
  if (v74)
    free(v74);
  LODWORD(v71) = -1;
  *(_DWORD *)(v9 + 360) = -1;
  v13 = v260;
LABEL_126:
  *((_DWORD *)v16 + 215) = v71;
  if ((*((_BYTE *)v16 + 158) & 1) == 0)
  {
    if (gLogDatapath)
    {
      v219 = __nwlog_obj();
      if (os_log_type_enabled(v219, OS_LOG_TYPE_DEBUG))
      {
        v220 = *((_QWORD *)v16 + 61);
        v221 = *(_DWORD *)(*((_QWORD *)v16 + 60) + 372);
        v222 = *((_DWORD *)v16 + 215);
        if (v220)
          LODWORD(v220) = *(_DWORD *)(v220 + 424);
        v223 = *(_DWORD *)(v9 + 336);
        *(_DWORD *)buf = 136448002;
        *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = (char *)v16 + 74;
        *(_WORD *)&buf[22] = 2080;
        v271 = (uint64_t)" ";
        v272 = 1024;
        *(_DWORD *)v273 = v221;
        *(_WORD *)&v273[4] = 1024;
        *(_DWORD *)&v273[6] = v222;
        LOWORD(v274) = 1024;
        *(_DWORD *)((char *)&v274 + 2) = v220;
        HIWORD(v274) = 2048;
        *(_QWORD *)v275 = v16;
        *(_WORD *)&v275[8] = 1024;
        *(_DWORD *)v276 = v223;
        _os_log_impl(&dword_182FBE000, v219, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> added connection %p, now have %u connections", buf, 0x42u);
        v13 = v260;
      }
    }
  }
  if (!*(_QWORD *)(v11 + 248))
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
    v211 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(aBlock[0]) = 0;
    if (__nwlog_fault(v211, type, aBlock))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        v212 = __nwlog_obj();
        v213 = type[0];
        if (os_log_type_enabled(v212, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
          v214 = "%{public}s called with null http1_stream->protocol_http1";
LABEL_519:
          _os_log_impl(&dword_182FBE000, v212, v213, v214, buf, 0xCu);
        }
      }
      else if (LOBYTE(aBlock[0]))
      {
        v239 = (char *)__nw_create_backtrace_string();
        v212 = __nwlog_obj();
        v213 = type[0];
        v240 = os_log_type_enabled(v212, type[0]);
        if (v239)
        {
          if (v240)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v239;
            _os_log_impl(&dword_182FBE000, v212, v213, "%{public}s called with null http1_stream->protocol_http1, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v239);
          goto LABEL_520;
        }
        if (v240)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
          v214 = "%{public}s called with null http1_stream->protocol_http1, no backtrace";
          goto LABEL_519;
        }
      }
      else
      {
        v212 = __nwlog_obj();
        v213 = type[0];
        if (os_log_type_enabled(v212, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
          v214 = "%{public}s called with null http1_stream->protocol_http1, backtrace limit exceeded";
          goto LABEL_519;
        }
      }
    }
LABEL_520:
    if (v211)
      free(v211);
    v4 = v259;
    v13 = v260;
    goto LABEL_157;
  }
  if (*((_QWORD *)v16 + 61))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v84 = *((_QWORD *)v16 + 61);
    *(_DWORD *)buf = 136446722;
    *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v16;
    *(_WORD *)&buf[22] = 2048;
    v271 = v84;
    v85 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(aBlock[0]) = 0;
    if (__nwlog_fault(v85, type, aBlock))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v86 = gLogObj;
        v87 = type[0];
        if (os_log_type_enabled((os_log_t)gLogObj, type[0]))
        {
          v88 = *((_QWORD *)v16 + 61);
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v16;
          *(_WORD *)&buf[22] = 2048;
          v271 = v88;
          v89 = "%{public}s Connection %p already has a stream (%p)";
LABEL_153:
          _os_log_impl(&dword_182FBE000, v86, v87, v89, buf, 0x20u);
        }
      }
      else if (LOBYTE(aBlock[0]))
      {
        v102 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v86 = gLogObj;
        v87 = type[0];
        v103 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
        if (v102)
        {
          if (v103)
          {
            v104 = *((_QWORD *)v16 + 61);
            *(_DWORD *)buf = 136446978;
            *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
            *(_WORD *)&buf[12] = 2048;
            *(_QWORD *)&buf[14] = v16;
            *(_WORD *)&buf[22] = 2048;
            v271 = v104;
            v272 = 2082;
            *(_QWORD *)v273 = v102;
            _os_log_impl(&dword_182FBE000, v86, v87, "%{public}s Connection %p already has a stream (%p), dumping backtrace:%{public}s", buf, 0x2Au);
          }
          free(v102);
          goto LABEL_154;
        }
        if (v103)
        {
          v106 = *((_QWORD *)v16 + 61);
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v16;
          *(_WORD *)&buf[22] = 2048;
          v271 = v106;
          v89 = "%{public}s Connection %p already has a stream (%p), no backtrace";
          goto LABEL_153;
        }
      }
      else
      {
        v86 = __nwlog_obj();
        v87 = type[0];
        if (os_log_type_enabled(v86, type[0]))
        {
          v105 = *((_QWORD *)v16 + 61);
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v16;
          *(_WORD *)&buf[22] = 2048;
          v271 = v105;
          v89 = "%{public}s Connection %p already has a stream (%p), backtrace limit exceeded";
          goto LABEL_153;
        }
      }
    }
LABEL_154:
    if (v85)
      free(v85);
    v4 = v259;
    goto LABEL_157;
  }
  *(_QWORD *)(v11 + 256) = v16;
  *((_QWORD *)v16 + 61) = v11;
  nw_protocol_set_output_handler(v11, *((_QWORD *)v16 + 4));
  nw_protocol_set_input_handler((uint64_t)v16, *(_QWORD *)(v11 + 48));
  *(_OWORD *)v11 = *v16;
  v90 = *(_OWORD *)(v11 + 144);
  v92 = *(_OWORD *)(v11 + 96);
  v91 = *(_OWORD *)(v11 + 112);
  v16[8] = *(_OWORD *)(v11 + 128);
  v16[9] = v90;
  v16[6] = v92;
  v16[7] = v91;
  v93 = *(_OWORD *)(v11 + 80);
  v16[4] = *(_OWORD *)(v11 + 64);
  v16[5] = v93;
  nw_http_transaction_metadata_set_connection_metadata(*(void **)(v11 + 352), *((void **)v16 + 96));
  *((_WORD *)v16 + 436) &= 0xFFD7u;
  *((_DWORD *)v16 + 216) = 1;
  v4 = v259;
  if ((*((_BYTE *)v16 + 158) & 1) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v94 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
    {
      v95 = *((_QWORD *)v16 + 61);
      v96 = *(_DWORD *)(*((_QWORD *)v16 + 60) + 372);
      v97 = *((_DWORD *)v16 + 215);
      if (v95)
        LODWORD(v95) = *(_DWORD *)(v95 + 424);
      *(_DWORD *)buf = 136447490;
      *(_QWORD *)&buf[4] = "nw_http1_update_connection_input_state";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = (char *)v16 + 74;
      *(_WORD *)&buf[22] = 2080;
      v271 = (uint64_t)" ";
      v272 = 1024;
      *(_DWORD *)v273 = v96;
      *(_WORD *)&v273[4] = 1024;
      *(_DWORD *)&v273[6] = v97;
      LOWORD(v274) = 1024;
      *(_DWORD *)((char *)&v274 + 2) = v95;
      _os_log_impl(&dword_182FBE000, v94, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> connection input state: reading", buf, 0x32u);
    }
  }
  if ((*(_BYTE *)(v11 + 158) & 1) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v98 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
    {
      v99 = *(_QWORD *)(v11 + 256);
      v100 = *(_DWORD *)(*(_QWORD *)(v11 + 248) + 372);
      if (v99)
        LODWORD(v99) = *(_DWORD *)(v99 + 860);
      v101 = *(_DWORD *)(v11 + 424);
      *(_DWORD *)buf = 136448002;
      *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v11 + 74;
      *(_WORD *)&buf[22] = 2080;
      v271 = (uint64_t)" ";
      v272 = 1024;
      *(_DWORD *)v273 = v100;
      *(_WORD *)&v273[4] = 1024;
      *(_DWORD *)&v273[6] = v99;
      LOWORD(v274) = 1024;
      *(_DWORD *)((char *)&v274 + 2) = v101;
      HIWORD(v274) = 2048;
      *(_QWORD *)v275 = v11;
      *(_WORD *)&v275[8] = 2048;
      *(_QWORD *)v276 = v16;
      _os_log_impl(&dword_182FBE000, v98, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s<i%u:c%u:s%u> stream (%p) now using connection %p", buf, 0x46u);
    }
  }
LABEL_157:
  if ((*(_BYTE *)(v11 + 158) & 1) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v107 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
    {
      v108 = *(_QWORD *)(v11 + 256);
      v109 = *(_DWORD *)(*(_QWORD *)(v11 + 248) + 372);
      if (v108)
        LODWORD(v108) = *(_DWORD *)(v108 + 860);
      v110 = *(_DWORD *)(v11 + 424);
      *(_DWORD *)buf = 136448258;
      *(_QWORD *)&buf[4] = "nw_http1_start_new_connection_for_stream";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v11 + 74;
      *(_WORD *)&buf[22] = 2080;
      v271 = (uint64_t)" ";
      v272 = 1024;
      *(_DWORD *)v273 = v109;
      *(_WORD *)&v273[4] = 1024;
      *(_DWORD *)&v273[6] = v108;
      LOWORD(v274) = 1024;
      *(_DWORD *)((char *)&v274 + 2) = v110;
      HIWORD(v274) = 2048;
      *(_QWORD *)v275 = v16;
      *(_WORD *)&v275[8] = 1024;
      *(_DWORD *)v276 = v110;
      *(_WORD *)&v276[4] = 2048;
      *(_QWORD *)&v276[6] = v11;
      _os_log_impl(&dword_182FBE000, v107, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> created new connection %p for stream %u (%p)", buf, 0x4Cu);
    }
  }
  nw_http_transaction_metadata_set_first_on_connection(*(void **)(v11 + 352));
  v111 = (void *)nw_protocol_boringssl_copy_definition();
  identifier = nw_protocol_definition_get_identifier(v111);
  v113 = nw_protocols_are_equal(identifier, v13->identifier->name);
  if (v111)
    os_release(v111);
  if (v113)
  {
    v114 = nw_protocol_copy_info((uint64_t)v13, 255);
    if (v114)
    {
      v115 = (void *)v114;
      v116 = *(_QWORD *)(v114 + 24);
      if (*(_QWORD *)(v114 + 16) != v116)
      {
        v117 = *(void **)(v116 - 8);
        if (v117)
        {
          v118 = os_retain(v117);
          if (v118)
          {
            v119 = v118;
            if (nw_protocol_metadata_is_tls(v118))
            {
              v120 = v119;
              nw_http_connection_metadata_set_sec_metadata(*((void **)v16 + 96), v120);
              os_release(v120);
            }
            os_release(v119);
          }
        }
      }
      os_release(v115);
    }
  }
  if (v16)
  {
    nw_protocol_connect((uint64_t)v13, (uint64_t)v16);
    v121 = *(_WORD *)(v11 + 428);
    if ((v121 & 8) == 0)
      goto LABEL_193;
LABEL_175:
    *(_WORD *)(v11 + 428) = v121 & 0xFFF7;
    v122 = *(_DWORD *)(v9 + 352);
    *(_DWORD *)(v9 + 352) = v122 - 1;
    if (v122)
      goto LABEL_193;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v123 = *(unsigned int *)(v9 + 352);
    *(_DWORD *)buf = 136446978;
    *(_QWORD *)&buf[4] = "nw_protocol_http1_connected";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = "http1->pending_output_handler_count";
    *(_WORD *)&buf[22] = 2048;
    v271 = 1;
    v272 = 2048;
    *(_QWORD *)v273 = v123;
    v124 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(aBlock[0]) = 0;
    if (!__nwlog_fault(v124, type, aBlock))
      goto LABEL_190;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      v125 = __nwlog_obj();
      v126 = type[0];
      if (os_log_type_enabled(v125, type[0]))
      {
        v127 = *(unsigned int *)(v9 + 352);
        *(_DWORD *)buf = 136446978;
        *(_QWORD *)&buf[4] = "nw_protocol_http1_connected";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = "http1->pending_output_handler_count";
        *(_WORD *)&buf[22] = 2048;
        v271 = 1;
        v272 = 2048;
        *(_QWORD *)v273 = v127;
        v128 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu";
LABEL_189:
        _os_log_impl(&dword_182FBE000, v125, v126, v128, buf, 0x2Au);
      }
    }
    else if (LOBYTE(aBlock[0]))
    {
      v129 = (char *)__nw_create_backtrace_string();
      v125 = __nwlog_obj();
      v126 = type[0];
      v130 = os_log_type_enabled(v125, type[0]);
      if (v129)
      {
        if (v130)
        {
          v131 = *(unsigned int *)(v9 + 352);
          *(_DWORD *)buf = 136447234;
          *(_QWORD *)&buf[4] = "nw_protocol_http1_connected";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = "http1->pending_output_handler_count";
          *(_WORD *)&buf[22] = 2048;
          v271 = 1;
          v272 = 2048;
          *(_QWORD *)v273 = v131;
          *(_WORD *)&v273[8] = 2082;
          v274 = v129;
          _os_log_impl(&dword_182FBE000, v125, v126, "%{public}s Underflow: %{public}s, decrement %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
        }
        free(v129);
        goto LABEL_190;
      }
      if (v130)
      {
        v133 = *(unsigned int *)(v9 + 352);
        *(_DWORD *)buf = 136446978;
        *(_QWORD *)&buf[4] = "nw_protocol_http1_connected";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = "http1->pending_output_handler_count";
        *(_WORD *)&buf[22] = 2048;
        v271 = 1;
        v272 = 2048;
        *(_QWORD *)v273 = v133;
        v128 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, no backtrace";
        goto LABEL_189;
      }
    }
    else
    {
      v125 = __nwlog_obj();
      v126 = type[0];
      if (os_log_type_enabled(v125, type[0]))
      {
        v132 = *(unsigned int *)(v9 + 352);
        *(_DWORD *)buf = 136446978;
        *(_QWORD *)&buf[4] = "nw_protocol_http1_connected";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = "http1->pending_output_handler_count";
        *(_WORD *)&buf[22] = 2048;
        v271 = 1;
        v272 = 2048;
        *(_QWORD *)v273 = v132;
        v128 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, backtrace limit exceeded";
        goto LABEL_189;
      }
    }
LABEL_190:
    if (v124)
      free(v124);
    *(_DWORD *)(v9 + 352) = 0;
    goto LABEL_193;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_http1_get_output_protocol";
  v197 = (char *)_os_log_send_and_compose_impl();
  type[0] = OS_LOG_TYPE_ERROR;
  LOBYTE(aBlock[0]) = 0;
  if (!__nwlog_fault(v197, type, aBlock))
    goto LABEL_462;
  if (type[0] == OS_LOG_TYPE_FAULT)
  {
    v198 = __nwlog_obj();
    v199 = type[0];
    if (!os_log_type_enabled(v198, type[0]))
      goto LABEL_462;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http1_get_output_protocol";
    v200 = "%{public}s called with null connection";
LABEL_461:
    _os_log_impl(&dword_182FBE000, v198, v199, v200, buf, 0xCu);
    goto LABEL_462;
  }
  if (!LOBYTE(aBlock[0]))
  {
    v198 = __nwlog_obj();
    v199 = type[0];
    if (!os_log_type_enabled(v198, type[0]))
      goto LABEL_462;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http1_get_output_protocol";
    v200 = "%{public}s called with null connection, backtrace limit exceeded";
    goto LABEL_461;
  }
  v231 = (char *)__nw_create_backtrace_string();
  v198 = __nwlog_obj();
  v199 = type[0];
  v232 = os_log_type_enabled(v198, type[0]);
  if (!v231)
  {
    if (!v232)
      goto LABEL_462;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http1_get_output_protocol";
    v200 = "%{public}s called with null connection, no backtrace";
    goto LABEL_461;
  }
  if (v232)
  {
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "nw_http1_get_output_protocol";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v231;
    _os_log_impl(&dword_182FBE000, v198, v199, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v231);
LABEL_462:
  if (v197)
    free(v197);
  nw_protocol_connect((uint64_t)v260, 0);
  v121 = *(_WORD *)(v11 + 428);
  if ((v121 & 8) != 0)
    goto LABEL_175;
LABEL_193:
  v134 = (char *)a1->handle;
  if (!v134)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http1_get_connection_for_protocol";
    v157 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(aBlock[0]) = 0;
    if (!__nwlog_fault(v157, type, aBlock))
      goto LABEL_422;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      v158 = __nwlog_obj();
      v159 = type[0];
      if (!os_log_type_enabled(v158, type[0]))
        goto LABEL_422;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_get_connection_for_protocol";
      v160 = "%{public}s called with null handle";
      goto LABEL_421;
    }
    if (!LOBYTE(aBlock[0]))
    {
      v158 = __nwlog_obj();
      v159 = type[0];
      if (!os_log_type_enabled(v158, type[0]))
        goto LABEL_422;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_get_connection_for_protocol";
      v160 = "%{public}s called with null handle, backtrace limit exceeded";
      goto LABEL_421;
    }
    v168 = (char *)__nw_create_backtrace_string();
    v158 = __nwlog_obj();
    v159 = type[0];
    v169 = os_log_type_enabled(v158, type[0]);
    if (!v168)
    {
      if (!v169)
        goto LABEL_422;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_get_connection_for_protocol";
      v160 = "%{public}s called with null handle, no backtrace";
      goto LABEL_421;
    }
    if (v169)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_http1_get_connection_for_protocol";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v168;
      _os_log_impl(&dword_182FBE000, v158, v159, "%{public}s called with null handle, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v168);
LABEL_422:
    if (!v157)
      goto LABEL_424;
LABEL_423:
    free(v157);
    goto LABEL_424;
  }
  v135 = *((_DWORD *)v134 + 6);
  if (v135 == 2)
  {
    v137 = *((_QWORD *)v134 + 1);
    if (v137)
    {
      v136 = (uint64_t *)(v137 + 256);
      goto LABEL_199;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http1_get_connection_for_protocol";
    v157 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(aBlock[0]) = 0;
    if (!__nwlog_fault(v157, type, aBlock))
      goto LABEL_422;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      v158 = __nwlog_obj();
      v159 = type[0];
      if (!os_log_type_enabled(v158, type[0]))
        goto LABEL_422;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_get_connection_for_protocol";
      v160 = "%{public}s called with null handle->http1_stream";
      goto LABEL_421;
    }
    if (!LOBYTE(aBlock[0]))
    {
      v158 = __nwlog_obj();
      v159 = type[0];
      if (!os_log_type_enabled(v158, type[0]))
        goto LABEL_422;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_get_connection_for_protocol";
      v160 = "%{public}s called with null handle->http1_stream, backtrace limit exceeded";
      goto LABEL_421;
    }
    v190 = (char *)__nw_create_backtrace_string();
    v158 = __nwlog_obj();
    v159 = type[0];
    v191 = os_log_type_enabled(v158, type[0]);
    if (v190)
    {
      if (v191)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http1_get_connection_for_protocol";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v190;
        _os_log_impl(&dword_182FBE000, v158, v159, "%{public}s called with null handle->http1_stream, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v190);
      if (!v157)
        goto LABEL_424;
      goto LABEL_423;
    }
    if (v191)
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_get_connection_for_protocol";
      v160 = "%{public}s called with null handle->http1_stream, no backtrace";
LABEL_421:
      _os_log_impl(&dword_182FBE000, v158, v159, v160, buf, 0xCu);
      goto LABEL_422;
    }
    goto LABEL_422;
  }
  if (v135 != 3)
  {
LABEL_424:
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_http1_connected";
    v153 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(aBlock[0]) = 0;
    if (!__nwlog_fault(v153, type, aBlock))
      goto LABEL_440;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v154 = gLogObj;
      v155 = type[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, type[0]))
        goto LABEL_440;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http1_connected";
      v156 = "%{public}s called with null http1_connection";
      goto LABEL_439;
    }
    if (!LOBYTE(aBlock[0]))
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v154 = gLogObj;
      v155 = type[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, type[0]))
        goto LABEL_440;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http1_connected";
      v156 = "%{public}s called with null http1_connection, backtrace limit exceeded";
      goto LABEL_439;
    }
    v165 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v154 = gLogObj;
    v155 = type[0];
    v245 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
    if (!v165)
    {
      if (!v245)
        goto LABEL_440;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http1_connected";
      v156 = "%{public}s called with null http1_connection, no backtrace";
      goto LABEL_439;
    }
    if (!v245)
    {
LABEL_433:
      free(v165);
      if (!v153)
        return;
LABEL_441:
      free(v153);
      return;
    }
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "nw_protocol_http1_connected";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v165;
    v167 = "%{public}s called with null http1_connection, dumping backtrace:%{public}s";
LABEL_432:
    _os_log_impl(&dword_182FBE000, v154, v155, v167, buf, 0x16u);
    goto LABEL_433;
  }
  v136 = (uint64_t *)(v134 + 16);
LABEL_199:
  v138 = *v136;
  if (!*v136)
    goto LABEL_424;
  v139 = *(_QWORD *)(v138 + 488);
  if (v139)
    nw_protocol_connected(*(_QWORD **)(v139 + 48), (uint64_t)v4);
  if (*(nw_protocol **)(v138 + 32) == v4)
  {
    if (!(*(_BYTE *)(v138 + 158) & 1 | (gLogDatapath == 0)))
    {
      v174 = __nwlog_obj();
      if (os_log_type_enabled(v174, OS_LOG_TYPE_DEBUG))
      {
        v175 = *(_QWORD *)(v138 + 488);
        v176 = *(_DWORD *)(*(_QWORD *)(v138 + 480) + 372);
        v177 = *(_DWORD *)(v138 + 860);
        if (v175)
          LODWORD(v175) = *(_DWORD *)(v175 + 424);
        v178 = v4->identifier;
        *(_DWORD *)buf = 136447746;
        *(_QWORD *)&buf[4] = "nw_protocol_http1_connected";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v138 + 74;
        *(_WORD *)&buf[22] = 2080;
        v271 = (uint64_t)" ";
        v272 = 1024;
        *(_DWORD *)v273 = v176;
        *(_WORD *)&v273[4] = 1024;
        *(_DWORD *)&v273[6] = v177;
        LOWORD(v274) = 1024;
        *(_DWORD *)((char *)&v274 + 2) = v175;
        HIWORD(v274) = 2080;
        *(_QWORD *)v275 = v178;
        _os_log_impl(&dword_182FBE000, v174, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> connected protocol %s is our output_handler, forwarding", buf, 0x3Cu);
      }
    }
    *(_WORD *)(v138 + 872) |= 0x40u;
    v145 = *(_QWORD *)(v138 + 488);
    if (v145)
    {
      *(_WORD *)(v145 + 428) |= 0x4000u;
      v146 = *(void **)(v145 + 352);
      v261[0] = MEMORY[0x1E0C809B0];
      v261[1] = 0x40000000;
      v261[2] = ___ZL27nw_protocol_http1_connectedP11nw_protocolS0__block_invoke;
      v261[3] = &__block_descriptor_tmp_91;
      v261[4] = v145;
      nw_http_transaction_metadata_set_event_handler(v146, v261);
      v147 = *(_QWORD *)(v138 + 488);
      if (v147)
        v148 = *(_QWORD **)(v147 + 48);
      else
        v148 = 0;
      nw_protocol_connected(v148, v147);
    }
  }
  else if (!(*(_BYTE *)(v138 + 158) & 1 | (gLogDatapath == 0)))
  {
    v140 = __nwlog_obj();
    if (os_log_type_enabled(v140, OS_LOG_TYPE_DEBUG))
    {
      v141 = *(_QWORD *)(v138 + 488);
      v142 = *(_DWORD *)(*(_QWORD *)(v138 + 480) + 372);
      v143 = *(_DWORD *)(v138 + 860);
      if (v141)
        LODWORD(v141) = *(_DWORD *)(v141 + 424);
      v144 = v4->identifier;
      *(_DWORD *)buf = 136447746;
      *(_QWORD *)&buf[4] = "nw_protocol_http1_connected";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v138 + 74;
      *(_WORD *)&buf[22] = 2080;
      v271 = (uint64_t)" ";
      v272 = 1024;
      *(_DWORD *)v273 = v142;
      *(_WORD *)&v273[4] = 1024;
      *(_DWORD *)&v273[6] = v143;
      LOWORD(v274) = 1024;
      *(_DWORD *)((char *)&v274 + 2) = v141;
      HIWORD(v274) = 2080;
      *(_QWORD *)v275 = v144;
      _os_log_impl(&dword_182FBE000, v140, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> connected protocol %s is not our output_handler, ignoring", buf, 0x3Cu);
    }
  }
}

void nw_protocol_http1_disconnect(nw_protocol *a1, nw_protocol *a2)
{
  char *handle;
  int v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  _BOOL4 v16;
  int v17;
  int v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  uint64_t v27;
  int v28;
  int v29;
  const char *v30;
  uint64_t v31;
  int v32;
  int v33;
  char *v34;
  NSObject *v35;
  os_log_type_t v36;
  const char *v37;
  uint64_t v38;
  int v39;
  int v40;
  uint64_t v41;
  _QWORD *v42;
  char *v43;
  _BOOL4 v44;
  const char *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  NSObject *v50;
  os_log_type_t v51;
  uint64_t v52;
  const char *v53;
  char *v54;
  _BOOL4 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  NSObject *v59;
  uint64_t v60;
  int v61;
  int v62;
  int v63;
  const char *v64;
  NSObject *v65;
  uint32_t v66;
  char *v67;
  NSObject *v68;
  os_log_type_t v69;
  const char *v70;
  char *v71;
  NSObject *v72;
  os_log_type_t v73;
  const char *v74;
  char *backtrace_string;
  _BOOL4 v76;
  char *v77;
  _BOOL4 v78;
  char *v79;
  _BOOL4 v80;
  const char *v81;
  NSObject *v82;
  os_log_type_t v83;
  char *v84;
  NSObject *v85;
  os_log_type_t v86;
  const char *v87;
  _BOOL4 v88;
  char *v89;
  _BOOL4 v90;
  char *v91;
  _BOOL4 v92;
  char *v93;
  _BOOL4 v94;
  const char *v95;
  _BOOL4 v96;
  char *v97;
  _BOOL4 v98;
  __int16 v99;
  uint64_t v100;
  int v101;
  int v102;
  uint64_t v103;
  int v104;
  int v105;
  uint64_t v106;
  _BYTE *v107;
  _OWORD *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  NSObject *v113;
  int v114;
  _WORD *v115;
  _BYTE *v116;
  char *v117;
  NSObject *v118;
  os_log_type_t v119;
  const char *v120;
  uint64_t v121;
  _BOOL4 v122;
  uint64_t v123;
  int v124;
  int v125;
  const char *v126;
  NSObject *v127;
  uint32_t v128;
  NSObject *v129;
  int v130;
  const char *v131;
  int v132;
  NSObject *v133;
  uint32_t v134;
  int v135;
  _BYTE *v136;
  char *v137;
  NSObject *v138;
  os_log_type_t v139;
  const char *v140;
  uint64_t v141;
  _QWORD *v142;
  _QWORD **v143;
  unsigned __int16 *v144;
  _QWORD *v145;
  NSObject *v146;
  NSObject *v147;
  NSObject *v148;
  int v149;
  int v150;
  int v151;
  uint64_t v152;
  int v153;
  int v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  NSObject *v159;
  os_log_type_t v160;
  uint64_t v161;
  const char *v162;
  _OWORD *v163;
  void *v164;
  void *v165;
  _OWORD *v166;
  uint64_t v167;
  void *v168;
  char v169;
  void *v170;
  void *v171;
  char v172;
  void *v173;
  id v174;
  char v175;
  uint64_t v176;
  char *v177;
  _BOOL4 v178;
  uint64_t v179;
  int v180;
  int v181;
  int v182;
  _BYTE *v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  NSObject *v187;
  os_log_type_t v188;
  uint64_t v189;
  const char *v190;
  NSObject *v191;
  uint64_t v192;
  int v193;
  int v194;
  NSObject *v195;
  _BOOL4 v196;
  uint64_t v197;
  int v198;
  int v199;
  int v200;
  NSObject *v201;
  int v202;
  uint64_t v203;
  int v204;
  int v205;
  NSObject *v206;
  _BOOL4 v207;
  uint64_t v208;
  int v209;
  int v210;
  char *v211;
  _BOOL4 v212;
  uint64_t v213;
  void *v214;
  uint64_t v215;
  id *metadata;
  char v217;
  void *v218;
  uint64_t v219;
  char v220;
  char v221;
  NSObject *v222;
  uint64_t v223;
  int v224;
  int v225;
  NSObject **v226;
  void *v227;
  uint64_t v228;
  _BYTE *v229;
  void **v230;
  id v231;
  void *v232;
  _OWORD *v233;
  id v234;
  id v235;
  id v236;
  void *v237;
  NSObject *v238;
  NSObject *v239;
  __int16 v240;
  int v241;
  id v242;
  void *v243;
  NSObject *v244;
  _BOOL4 v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  char *v251;
  NSObject *v252;
  os_log_type_t v253;
  uint64_t v254;
  const char *v255;
  NSObject *v256;
  uint64_t v257;
  int v258;
  int v259;
  _BOOL4 v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  char *v264;
  uint64_t v265;
  NSObject *v266;
  os_log_type_t v267;
  uint64_t v268;
  const char *v269;
  _OWORD *v270;
  char *v271;
  _BOOL4 v272;
  uint64_t v273;
  NSObject *v274;
  uint64_t v275;
  int v276;
  int v277;
  uint64_t v278;
  _QWORD *v279;
  uint64_t v280;
  int v281;
  unsigned int v282;
  uint64_t v283;
  int v284;
  unsigned int v285;
  _BYTE *v286;
  char *v287;
  NSObject *v288;
  os_log_type_t v289;
  const char *v290;
  uint64_t v291;
  _QWORD *v292;
  char *v293;
  _BOOL4 v294;
  int v295;
  _BYTE *v296;
  uint64_t v297;
  uint64_t v298;
  char *v299;
  NSObject *v300;
  os_log_type_t v301;
  uint64_t v302;
  const char *v303;
  char *v304;
  _BOOL4 v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  char *v310;
  NSObject *v311;
  os_log_type_t v312;
  uint64_t v313;
  const char *v314;
  __int128 v315;
  __int128 v316;
  __int128 v317;
  __int128 v318;
  NSObject *v319;
  uint64_t v320;
  int v321;
  int v322;
  NSObject *v323;
  uint64_t v324;
  int v325;
  int v326;
  char *v327;
  _BOOL4 v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  void *v332;
  NSObject *v333;
  uint64_t v334;
  int v335;
  int v336;
  uint64_t v337;
  uint64_t v338;
  char v339;
  uint64_t v340;
  char *v341;
  NSObject *v342;
  os_log_type_t v343;
  const char *v344;
  char *v345;
  _BOOL4 v346;
  char *v347;
  NSObject *v348;
  os_log_type_t v349;
  _BOOL4 v350;
  uint64_t v351;
  uint64_t v352;
  int v353;
  _BYTE *v354;
  uint64_t v355;
  uint64_t v356;
  char *v357;
  NSObject *v358;
  os_log_type_t v359;
  uint64_t v360;
  const char *v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  char *v367;
  NSObject *v368;
  os_log_type_t v369;
  uint64_t v370;
  const char *v371;
  _OWORD *v372;
  char *v373;
  _BOOL4 v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  char *v379;
  NSObject *v380;
  os_log_type_t v381;
  uint64_t v382;
  const char *v383;
  __int128 v384;
  __int128 v385;
  __int128 v386;
  __int128 v387;
  NSObject *v388;
  uint64_t v389;
  int v390;
  int v391;
  NSObject *v392;
  uint64_t v393;
  int v394;
  int v395;
  _OWORD *v396;
  char *v397;
  _BOOL4 v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  NSObject *v402;
  uint64_t v403;
  int v404;
  int v405;
  void *v406;
  char *v407;
  _QWORD *v408;
  _BOOL4 v409;
  uint64_t v410;
  void *v411;
  uint64_t v412;
  void *v413;
  NSObject *v414;
  NSObject *v415;
  NSObject *v416;
  int v417;
  uint64_t v418;
  char *v419;
  NSObject *v420;
  os_log_type_t v421;
  uint64_t v422;
  const char *v423;
  char *v424;
  _BOOL4 v425;
  uint64_t v426;
  uint64_t v427;
  char *v428;
  _BOOL4 v429;
  uint64_t v430;
  uint64_t v431;
  char *v432;
  _BOOL4 v433;
  uint64_t v434;
  uint64_t v435;
  NSObject *v436;
  os_log_type_t v437;
  _WORD *v438;
  uint64_t v439;
  uint64_t *v440;
  _QWORD *v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  char *v445;
  NSObject *v446;
  os_log_type_t v447;
  uint64_t v448;
  const char *v449;
  _BOOL4 v450;
  char *v451;
  _BOOL4 v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  NSObject *v456;
  os_log_type_t v457;
  uint32_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  void *v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  NSObject *v466;
  uint64_t v467;
  int v468;
  int v469;
  uint64_t v470;
  void *v471;
  uint64_t v472;
  int v473;
  void *v474;
  void *v475;
  void *v476;
  void *v477;
  void *v478;
  int v479;
  int v480;
  char v481;
  uint64_t v482;
  __int16 v483;
  NSObject *v484;
  uint64_t v485;
  int v486;
  int v487;
  const char *v488;
  unsigned int v489;
  uint64_t v490;
  void *v491;
  _BOOL8 source;
  dispatch_time_t v493;
  uint64_t v494;
  NSObject *v495;
  uint64_t v496;
  int v497;
  int v498;
  int v499;
  uint64_t v500;
  void *v501;
  void *v502;
  _OWORD *v503;
  uint64_t v504;
  uint64_t v505;
  void *v506;
  uint64_t v507;
  char v508;
  char v509;
  NSObject *v510;
  uint64_t v511;
  int v512;
  int v513;
  NSObject **v514;
  void *v515;
  uint64_t v516;
  _BYTE *v517;
  void **v518;
  id v519;
  void *v520;
  id v521;
  id v522;
  id v523;
  void *v524;
  NSObject *v525;
  NSObject *v526;
  __int16 v527;
  int v528;
  id v529;
  void *v530;
  NSObject *v531;
  _BOOL4 v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  char *v538;
  NSObject *v539;
  os_log_type_t v540;
  uint64_t v541;
  const char *v542;
  void **v543;
  uint64_t v544;
  uint64_t v545;
  NSObject *v546;
  _BOOL4 is_quic;
  void *v548;
  void *v549;
  NSObject *v550;
  void *v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  char *v555;
  NSObject *v556;
  os_log_type_t v557;
  uint64_t v558;
  const char *v559;
  char *v560;
  _BOOL4 v561;
  uint64_t v562;
  char *v563;
  _BOOL4 v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  char *v572;
  NSObject *v573;
  os_log_type_t v574;
  uint64_t v575;
  const char *v576;
  char *v577;
  _BOOL4 v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  char *v583;
  NSObject *v584;
  os_log_type_t v585;
  uint64_t v586;
  const char *v587;
  __int128 v588;
  __int128 v589;
  __int128 v590;
  __int128 v591;
  NSObject *v592;
  uint64_t v593;
  int v594;
  int v595;
  NSObject *v596;
  uint64_t v597;
  int v598;
  int v599;
  char *v600;
  _BOOL4 v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  NSObject *v605;
  uint64_t v606;
  int v607;
  int v608;
  void *v609;
  char *identifier;
  _QWORD *v611;
  _BOOL4 v612;
  uint64_t v613;
  void *v614;
  uint64_t v615;
  void *v616;
  NSObject *v617;
  NSObject *v618;
  NSObject *v619;
  uint64_t v620;
  uint64_t v621;
  uint64_t v622;
  void *v623;
  NSObject *v624;
  _BOOL4 v625;
  uint64_t v626;
  uint64_t v627;
  int v628;
  int v629;
  _OWORD *v630;
  _BYTE *v631;
  NSObject *v632;
  _BOOL4 v633;
  int v634;
  char *v635;
  NSObject *v636;
  os_log_type_t v637;
  const char *v638;
  _OWORD *v639;
  _BYTE *v640;
  NSObject *v641;
  _BOOL4 v642;
  uint64_t v643;
  int v644;
  int v645;
  _BYTE *v646;
  NSObject *v647;
  _BOOL4 v648;
  int v649;
  int v650;
  NSObject *v651;
  _BOOL4 v652;
  uint64_t v653;
  int v654;
  int v655;
  NSObject *v656;
  int v657;
  int v658;
  int v659;
  uint64_t v660;
  int v661;
  int v662;
  uint64_t v663;
  uint64_t v664;
  uint64_t v665;
  char *v666;
  NSObject *v667;
  os_log_type_t v668;
  uint64_t v669;
  const char *v670;
  _BYTE *v671;
  NSObject *v672;
  _BOOL4 v673;
  uint64_t v674;
  int v675;
  int v676;
  int v677;
  NSObject *v678;
  uint64_t v679;
  uint64_t v680;
  int v681;
  int v682;
  int v683;
  char *v684;
  _BOOL4 v685;
  uint64_t v686;
  int v687;
  int v688;
  NSObject *v689;
  _BOOL4 v690;
  int v691;
  int v692;
  _BYTE *v693;
  NSObject *v694;
  _BOOL4 v695;
  uint64_t v696;
  int v697;
  int v698;
  uint64_t v699;
  int v700;
  int v701;
  char *v702;
  _BOOL4 v703;
  _BOOL4 v704;
  _OWORD *v705;
  char *v706;
  NSObject *v707;
  os_log_type_t v708;
  const char *v709;
  char *v710;
  NSObject *v711;
  os_log_type_t v712;
  const char *v713;
  NSObject *v714;
  uint64_t v715;
  uint64_t v716;
  int v717;
  int v718;
  uint64_t v719;
  NSObject *v720;
  void *v721;
  _OWORD *v722;
  char *v723;
  NSObject *v724;
  os_log_type_t v725;
  const char *v726;
  _OWORD *v727;
  char *v728;
  NSObject *v729;
  os_log_type_t v730;
  const char *v731;
  _OWORD *v732;
  char *v733;
  NSObject *v734;
  os_log_type_t v735;
  const char *v736;
  NSObject *v737;
  uint64_t v738;
  int v739;
  int v740;
  NSObject *v741;
  uint64_t v742;
  int v743;
  int v744;
  int v745;
  NSObject *v746;
  uint64_t v747;
  int v748;
  int v749;
  _BYTE *v750;
  NSObject *v751;
  _BOOL4 v752;
  uint64_t v753;
  uint64_t v754;
  int v755;
  int v756;
  char *v757;
  NSObject *v758;
  os_log_type_t v759;
  const char *v760;
  char *v761;
  NSObject *v762;
  os_log_type_t v763;
  const char *v764;
  NSObject *v765;
  uint64_t v766;
  uint64_t v767;
  int v768;
  int v769;
  uint64_t v770;
  char *v771;
  _BOOL4 v772;
  char *v773;
  _BOOL4 v774;
  char *v775;
  _BOOL4 v776;
  const char *v777;
  NSObject *v778;
  void *v779;
  char *v780;
  NSObject *v781;
  os_log_type_t v782;
  const char *v783;
  char *v784;
  NSObject *v785;
  os_log_type_t v786;
  const char *v787;
  char *v788;
  NSObject *v789;
  os_log_type_t v790;
  const char *v791;
  _BOOL4 v792;
  NSObject *v793;
  uint64_t v794;
  int v795;
  int v796;
  NSObject *v797;
  uint64_t v798;
  int v799;
  int v800;
  int v801;
  char *v802;
  _BOOL4 v803;
  char *v804;
  _BOOL4 v805;
  char *v806;
  _BOOL4 v807;
  char *v808;
  NSObject *v809;
  os_log_type_t v810;
  const char *v811;
  NSObject *v812;
  uint64_t v813;
  int v814;
  int v815;
  _BYTE *v816;
  NSObject *v817;
  _BOOL4 v818;
  int v819;
  int v820;
  char *v821;
  NSObject *v822;
  os_log_type_t v823;
  const char *v824;
  NSObject *v825;
  uint64_t v826;
  int v827;
  int v828;
  NSObject *v829;
  uint64_t v830;
  int v831;
  int v832;
  char *v833;
  _BOOL4 v834;
  char *v835;
  _BOOL4 v836;
  char *v837;
  _BOOL4 v838;
  const char *v839;
  _BOOL4 v840;
  char *v841;
  _BOOL4 v842;
  char *v843;
  _BOOL4 v844;
  char *v845;
  _BOOL4 v846;
  char *v847;
  _BOOL4 v848;
  const char *v849;
  uint8_t *v850;
  NSObject *v851;
  uint64_t v852;
  int v853;
  int v854;
  int v855;
  char *v856;
  _BOOL4 v857;
  uint64_t v858;
  _BYTE *v859;
  NSObject *v860;
  _BOOL4 v861;
  uint64_t v862;
  uint64_t v863;
  int v864;
  int v865;
  int v866;
  char *v867;
  _BOOL4 v868;
  char *v869;
  _BOOL4 v870;
  char *v871;
  _BOOL4 v872;
  const char *v873;
  _BOOL4 v874;
  NSObject *v875;
  int v876;
  char *v877;
  NSObject *v878;
  os_log_type_t v879;
  const char *v880;
  char *v881;
  _BOOL4 v882;
  char *v883;
  NSObject *v884;
  os_log_type_t v885;
  const char *v886;
  char *v887;
  _BOOL4 v888;
  _BOOL4 v889;
  _BOOL4 v890;
  NSObject *v891;
  uint64_t v892;
  uint64_t v893;
  int v894;
  int v895;
  char *v896;
  NSObject *v897;
  os_log_type_t v898;
  const char *v899;
  char *v900;
  _BOOL4 v901;
  char *v902;
  NSObject *v903;
  os_log_type_t v904;
  const char *v905;
  char *v906;
  _BOOL4 v907;
  uint8_t *v908;
  uint64_t v909;
  void *v910;
  uint64_t v911;
  uint64_t v912;
  uint64_t v913;
  NSObject *v914;
  uint64_t v915;
  int v916;
  int v917;
  uint64_t v918;
  void *v919;
  char *v920;
  NSObject *v921;
  os_log_type_t v922;
  const char *v923;
  NSObject *v924;
  uint64_t v925;
  int v926;
  int v927;
  char *v928;
  _BOOL4 v929;
  NSObject *v930;
  uint64_t v931;
  int v932;
  int v933;
  int v934;
  char *v935;
  _BOOL4 v936;
  const char *v937;
  _BOOL4 v938;
  uint8_t *v939;
  uint64_t v940;
  uint64_t v941;
  _OWORD *v942;
  _OWORD *v943;
  _OWORD *v944;
  _OWORD *v945;
  uint64_t v946;
  uint64_t v947;
  char v948;
  os_log_type_t type;
  _QWORD v950[6];
  uint64_t aBlock;
  uint64_t v952;
  void *v953;
  void *v954;
  uint64_t *v955;
  _BYTE *v956;
  uint64_t v957;
  uint64_t v958;
  uint64_t *v959;
  uint64_t v960;
  char v961;
  _BYTE v962[24];
  uint64_t v963;
  _BYTE v964[10];
  __int16 v965;
  char *v966;
  _BYTE buf[24];
  uint64_t v968;
  _BYTE v969[44];
  _BYTE v970[24];
  uint64_t (*v971)(uint64_t, uint64_t);
  void (*v972)(uint64_t);
  void *v973;
  uint64_t v974;
  uint64_t v975;

  v975 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
    v67 = (char *)_os_log_send_and_compose_impl();
    v970[0] = 16;
    LOBYTE(aBlock) = 0;
    if (!__nwlog_fault(v67, v970, &aBlock))
      goto LABEL_1061;
    if (v970[0] != 17)
    {
      if (!(_BYTE)aBlock)
      {
        v68 = __nwlog_obj();
        v69 = v970[0];
        if (!os_log_type_enabled(v68, (os_log_type_t)v970[0]))
          goto LABEL_1061;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
        v70 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_1060;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v68 = __nwlog_obj();
      v69 = v970[0];
      v76 = os_log_type_enabled(v68, (os_log_type_t)v970[0]);
      if (!backtrace_string)
      {
        if (!v76)
          goto LABEL_1061;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
        v70 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_1060;
      }
      if (v76)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v68, v69, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_1061;
    }
    v68 = __nwlog_obj();
    v69 = v970[0];
    if (!os_log_type_enabled(v68, (os_log_type_t)v970[0]))
      goto LABEL_1061;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
    v70 = "%{public}s called with null protocol";
LABEL_1060:
    _os_log_impl(&dword_182FBE000, v68, v69, v70, buf, 0xCu);
    goto LABEL_1061;
  }
  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
    v67 = (char *)_os_log_send_and_compose_impl();
    v970[0] = 16;
    LOBYTE(aBlock) = 0;
    if (!__nwlog_fault(v67, v970, &aBlock))
      goto LABEL_1061;
    if (v970[0] != 17)
    {
      if (!(_BYTE)aBlock)
      {
        v68 = __nwlog_obj();
        v69 = v970[0];
        if (!os_log_type_enabled(v68, (os_log_type_t)v970[0]))
          goto LABEL_1061;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
        v70 = "%{public}s called with null handle, backtrace limit exceeded";
        goto LABEL_1060;
      }
      v77 = (char *)__nw_create_backtrace_string();
      v68 = __nwlog_obj();
      v69 = v970[0];
      v78 = os_log_type_enabled(v68, (os_log_type_t)v970[0]);
      if (!v77)
      {
        if (!v78)
          goto LABEL_1061;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
        v70 = "%{public}s called with null handle, no backtrace";
        goto LABEL_1060;
      }
      if (v78)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v77;
        _os_log_impl(&dword_182FBE000, v68, v69, "%{public}s called with null handle, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v77);
      if (!v67)
      {
LABEL_1063:
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_http1_disconnect";
        v71 = (char *)_os_log_send_and_compose_impl();
        v970[0] = 16;
        LOBYTE(aBlock) = 0;
        if (!__nwlog_fault(v71, v970, &aBlock))
          goto LABEL_1097;
        if (v970[0] == 17)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v72 = gLogObj;
          v73 = v970[0];
          if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v970[0]))
            goto LABEL_1097;
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_protocol_http1_disconnect";
          v74 = "%{public}s called with null http1";
        }
        else if ((_BYTE)aBlock)
        {
          v702 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v72 = gLogObj;
          v73 = v970[0];
          v703 = os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v970[0]);
          if (v702)
          {
            if (v703)
            {
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "nw_protocol_http1_disconnect";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v702;
              _os_log_impl(&dword_182FBE000, v72, v73, "%{public}s called with null http1, dumping backtrace:%{public}s", buf, 0x16u);
            }
            free(v702);
LABEL_1097:
            if (!v71)
              return;
            goto LABEL_1098;
          }
          if (!v703)
            goto LABEL_1097;
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_protocol_http1_disconnect";
          v74 = "%{public}s called with null http1, no backtrace";
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v72 = gLogObj;
          v73 = v970[0];
          if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v970[0]))
            goto LABEL_1097;
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_protocol_http1_disconnect";
          v74 = "%{public}s called with null http1, backtrace limit exceeded";
        }
        goto LABEL_1096;
      }
LABEL_1062:
      free(v67);
      goto LABEL_1063;
    }
    v68 = __nwlog_obj();
    v69 = v970[0];
    if (!os_log_type_enabled(v68, (os_log_type_t)v970[0]))
      goto LABEL_1061;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
    v70 = "%{public}s called with null handle";
    goto LABEL_1060;
  }
  v3 = *((_DWORD *)handle + 6);
  v4 = (uint64_t *)a1->handle;
  if (v3 == 1)
    goto LABEL_10;
  if (v3 != 2)
  {
    if (v3 != 3)
      goto LABEL_1063;
    v5 = *((_QWORD *)handle + 2);
    if (v5)
    {
      v4 = (uint64_t *)(v5 + 480);
      goto LABEL_10;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
    v67 = (char *)_os_log_send_and_compose_impl();
    v970[0] = 16;
    LOBYTE(aBlock) = 0;
    if (__nwlog_fault(v67, v970, &aBlock))
    {
      if (v970[0] == 17)
      {
        v68 = __nwlog_obj();
        v69 = v970[0];
        if (!os_log_type_enabled(v68, (os_log_type_t)v970[0]))
          goto LABEL_1061;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
        v70 = "%{public}s called with null handle->http1_connection";
        goto LABEL_1060;
      }
      if (!(_BYTE)aBlock)
      {
        v68 = __nwlog_obj();
        v69 = v970[0];
        if (!os_log_type_enabled(v68, (os_log_type_t)v970[0]))
          goto LABEL_1061;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
        v70 = "%{public}s called with null handle->http1_connection, backtrace limit exceeded";
        goto LABEL_1060;
      }
      v93 = (char *)__nw_create_backtrace_string();
      v68 = __nwlog_obj();
      v69 = v970[0];
      v94 = os_log_type_enabled(v68, (os_log_type_t)v970[0]);
      if (!v93)
      {
        if (!v94)
          goto LABEL_1061;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
        v70 = "%{public}s called with null handle->http1_connection, no backtrace";
        goto LABEL_1060;
      }
      if (v94)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v93;
        v95 = "%{public}s called with null handle->http1_connection, dumping backtrace:%{public}s";
LABEL_184:
        _os_log_impl(&dword_182FBE000, v68, v69, v95, buf, 0x16u);
        goto LABEL_185;
      }
      goto LABEL_185;
    }
LABEL_1061:
    if (!v67)
      goto LABEL_1063;
    goto LABEL_1062;
  }
  v6 = *((_QWORD *)handle + 1);
  if (!v6)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
    v67 = (char *)_os_log_send_and_compose_impl();
    v970[0] = 16;
    LOBYTE(aBlock) = 0;
    if (!__nwlog_fault(v67, v970, &aBlock))
      goto LABEL_1061;
    if (v970[0] == 17)
    {
      v68 = __nwlog_obj();
      v69 = v970[0];
      if (!os_log_type_enabled(v68, (os_log_type_t)v970[0]))
        goto LABEL_1061;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
      v70 = "%{public}s called with null handle->http1_stream";
      goto LABEL_1060;
    }
    if (!(_BYTE)aBlock)
    {
      v68 = __nwlog_obj();
      v69 = v970[0];
      if (!os_log_type_enabled(v68, (os_log_type_t)v970[0]))
        goto LABEL_1061;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
      v70 = "%{public}s called with null handle->http1_stream, backtrace limit exceeded";
      goto LABEL_1060;
    }
    v93 = (char *)__nw_create_backtrace_string();
    v68 = __nwlog_obj();
    v69 = v970[0];
    v96 = os_log_type_enabled(v68, (os_log_type_t)v970[0]);
    if (!v93)
    {
      if (!v96)
        goto LABEL_1061;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
      v70 = "%{public}s called with null handle->http1_stream, no backtrace";
      goto LABEL_1060;
    }
    if (v96)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v93;
      v95 = "%{public}s called with null handle->http1_stream, dumping backtrace:%{public}s";
      goto LABEL_184;
    }
LABEL_185:
    free(v93);
    if (!v67)
      goto LABEL_1063;
    goto LABEL_1062;
  }
  v4 = (uint64_t *)(v6 + 248);
LABEL_10:
  v7 = *v4;
  if (!*v4)
    goto LABEL_1063;
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_http1_disconnect";
    v71 = (char *)_os_log_send_and_compose_impl();
    v970[0] = 16;
    LOBYTE(aBlock) = 0;
    if (!__nwlog_fault(v71, v970, &aBlock))
      goto LABEL_1097;
    if (v970[0] == 17)
    {
      v72 = __nwlog_obj();
      v73 = v970[0];
      if (!os_log_type_enabled(v72, (os_log_type_t)v970[0]))
        goto LABEL_1097;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http1_disconnect";
      v74 = "%{public}s called with null other_protocol";
    }
    else if ((_BYTE)aBlock)
    {
      v79 = (char *)__nw_create_backtrace_string();
      v72 = __nwlog_obj();
      v73 = v970[0];
      v80 = os_log_type_enabled(v72, (os_log_type_t)v970[0]);
      if (v79)
      {
        if (!v80)
          goto LABEL_1090;
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_protocol_http1_disconnect";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v79;
        v81 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
        goto LABEL_1089;
      }
      if (!v80)
        goto LABEL_1097;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http1_disconnect";
      v74 = "%{public}s called with null other_protocol, no backtrace";
    }
    else
    {
      v72 = __nwlog_obj();
      v73 = v970[0];
      if (!os_log_type_enabled(v72, (os_log_type_t)v970[0]))
        goto LABEL_1097;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http1_disconnect";
      v74 = "%{public}s called with null other_protocol, backtrace limit exceeded";
    }
    goto LABEL_1096;
  }
  if (v3 != 2)
  {
    if (v3 != 3)
      goto LABEL_1081;
    v8 = *((_QWORD *)handle + 2);
    if (v8)
    {
      v9 = (uint64_t *)(v8 + 488);
      goto LABEL_17;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http1_get_stream_for_protocol";
    v84 = (char *)_os_log_send_and_compose_impl();
    v970[0] = 16;
    LOBYTE(aBlock) = 0;
    if (__nwlog_fault(v84, v970, &aBlock))
    {
      if (v970[0] == 17)
      {
        v85 = __nwlog_obj();
        v86 = v970[0];
        if (!os_log_type_enabled(v85, (os_log_type_t)v970[0]))
          goto LABEL_1079;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http1_get_stream_for_protocol";
        v87 = "%{public}s called with null handle->http1_connection";
        goto LABEL_1078;
      }
      if (!(_BYTE)aBlock)
      {
        v85 = __nwlog_obj();
        v86 = v970[0];
        if (!os_log_type_enabled(v85, (os_log_type_t)v970[0]))
          goto LABEL_1079;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http1_get_stream_for_protocol";
        v87 = "%{public}s called with null handle->http1_connection, backtrace limit exceeded";
        goto LABEL_1078;
      }
      v97 = (char *)__nw_create_backtrace_string();
      v85 = __nwlog_obj();
      v86 = v970[0];
      v98 = os_log_type_enabled(v85, (os_log_type_t)v970[0]);
      if (v97)
      {
        if (v98)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_http1_get_stream_for_protocol";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v97;
          _os_log_impl(&dword_182FBE000, v85, v86, "%{public}s called with null handle->http1_connection, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v97);
        goto LABEL_1079;
      }
      if (v98)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http1_get_stream_for_protocol";
        v87 = "%{public}s called with null handle->http1_connection, no backtrace";
LABEL_1078:
        _os_log_impl(&dword_182FBE000, v85, v86, v87, buf, 0xCu);
      }
    }
LABEL_1079:
    if (v84)
      free(v84);
LABEL_1081:
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_http1_disconnect";
    v71 = (char *)_os_log_send_and_compose_impl();
    v970[0] = 16;
    LOBYTE(aBlock) = 0;
    if (!__nwlog_fault(v71, v970, &aBlock))
      goto LABEL_1097;
    if (v970[0] == 17)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v72 = gLogObj;
      v73 = v970[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v970[0]))
        goto LABEL_1097;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http1_disconnect";
      v74 = "%{public}s called with null http1_stream";
      goto LABEL_1096;
    }
    if (!(_BYTE)aBlock)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v72 = gLogObj;
      v73 = v970[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v970[0]))
        goto LABEL_1097;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http1_disconnect";
      v74 = "%{public}s called with null http1_stream, backtrace limit exceeded";
      goto LABEL_1096;
    }
    v79 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v72 = gLogObj;
    v73 = v970[0];
    v704 = os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v970[0]);
    if (!v79)
    {
      if (!v704)
        goto LABEL_1097;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http1_disconnect";
      v74 = "%{public}s called with null http1_stream, no backtrace";
      goto LABEL_1096;
    }
    if (v704)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_protocol_http1_disconnect";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v79;
      v81 = "%{public}s called with null http1_stream, dumping backtrace:%{public}s";
      goto LABEL_1089;
    }
    goto LABEL_1090;
  }
  v9 = (uint64_t *)(handle + 8);
LABEL_17:
  v10 = *v9;
  if (!*v9)
    goto LABEL_1081;
  if (!*(_QWORD *)(v10 + 248))
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_http1_disconnect";
    v71 = (char *)_os_log_send_and_compose_impl();
    v970[0] = 16;
    LOBYTE(aBlock) = 0;
    if (!__nwlog_fault(v71, v970, &aBlock))
      goto LABEL_1097;
    if (v970[0] == 17)
    {
      v72 = __nwlog_obj();
      v73 = v970[0];
      if (!os_log_type_enabled(v72, (os_log_type_t)v970[0]))
        goto LABEL_1097;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http1_disconnect";
      v74 = "%{public}s called with null http1_stream->protocol_http1";
    }
    else
    {
      if ((_BYTE)aBlock)
      {
        v79 = (char *)__nw_create_backtrace_string();
        v72 = __nwlog_obj();
        v73 = v970[0];
        v88 = os_log_type_enabled(v72, (os_log_type_t)v970[0]);
        if (!v79)
        {
          if (!v88)
            goto LABEL_1097;
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_protocol_http1_disconnect";
          v74 = "%{public}s called with null http1_stream->protocol_http1, no backtrace";
          goto LABEL_1096;
        }
        if (v88)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_protocol_http1_disconnect";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v79;
          v81 = "%{public}s called with null http1_stream->protocol_http1, dumping backtrace:%{public}s";
LABEL_1089:
          _os_log_impl(&dword_182FBE000, v72, v73, v81, buf, 0x16u);
        }
LABEL_1090:
        free(v79);
        if (!v71)
          return;
LABEL_1098:
        free(v71);
        return;
      }
      v72 = __nwlog_obj();
      v73 = v970[0];
      if (!os_log_type_enabled(v72, (os_log_type_t)v970[0]))
        goto LABEL_1097;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http1_disconnect";
      v74 = "%{public}s called with null http1_stream->protocol_http1, backtrace limit exceeded";
    }
LABEL_1096:
    _os_log_impl(&dword_182FBE000, v72, v73, v74, buf, 0xCu);
    goto LABEL_1097;
  }
  v11 = *(_WORD *)(v10 + 428);
  *(_WORD *)(v10 + 428) = v11 | 0x10;
  v12 = *(_QWORD *)(v10 + 256);
  v947 = v7;
  if (v12)
  {
    v13 = *(_QWORD *)(v12 + 480);
    if (v13)
    {
      v14 = *(_QWORD *)(v12 + 488);
      if (v14)
      {
        if ((*(_WORD *)(v14 + 428) & 0x2000) != 0)
        {
          if ((*(_WORD *)(v12 + 872) & 4) == 0)
          {
            if ((*(_BYTE *)(v12 + 158) & 1) != 0)
              goto LABEL_217;
            if (!gLogDatapath)
              goto LABEL_217;
            v26 = __nwlog_obj();
            if (!os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
              goto LABEL_217;
            v27 = *(_QWORD *)(v12 + 488);
            v28 = *(_DWORD *)(*(_QWORD *)(v12 + 480) + 372);
            v29 = *(_DWORD *)(v12 + 860);
            if (v27)
              LODWORD(v27) = *(_DWORD *)(v27 + 424);
            *(_DWORD *)buf = 136447490;
            *(_QWORD *)&buf[4] = "nw_http1_connection_can_be_reused";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v12 + 74;
            *(_WORD *)&buf[22] = 2080;
            v968 = (uint64_t)" ";
            *(_WORD *)v969 = 1024;
            *(_DWORD *)&v969[2] = v28;
            *(_WORD *)&v969[6] = 1024;
            *(_DWORD *)&v969[8] = v29;
            *(_WORD *)&v969[12] = 1024;
            *(_DWORD *)&v969[14] = v27;
            v30 = "%{public}s %{public}s%s<i%u:c%u:s%u> connection cannot be reused because the message is not complete";
            goto LABEL_1038;
          }
          if ((*(_WORD *)(v12 + 872) & 0x20) == 0)
          {
            if ((*(_BYTE *)(v12 + 158) & 1) != 0)
              goto LABEL_217;
            if (!gLogDatapath)
              goto LABEL_217;
            v26 = __nwlog_obj();
            if (!os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
              goto LABEL_217;
            v31 = *(_QWORD *)(v12 + 488);
            v32 = *(_DWORD *)(*(_QWORD *)(v12 + 480) + 372);
            v33 = *(_DWORD *)(v12 + 860);
            if (v31)
              LODWORD(v31) = *(_DWORD *)(v31 + 424);
            *(_DWORD *)buf = 136447490;
            *(_QWORD *)&buf[4] = "nw_http1_connection_can_be_reused";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v12 + 74;
            *(_WORD *)&buf[22] = 2080;
            v968 = (uint64_t)" ";
            *(_WORD *)v969 = 1024;
            *(_DWORD *)&v969[2] = v32;
            *(_WORD *)&v969[6] = 1024;
            *(_DWORD *)&v969[8] = v33;
            *(_WORD *)&v969[12] = 1024;
            *(_DWORD *)&v969[14] = v31;
            v30 = "%{public}s %{public}s%s<i%u:c%u:s%u> connection cannot be reused because the outbound message is not complete";
            goto LABEL_1038;
          }
          if ((*(_WORD *)(v12 + 872) & 8) == 0)
          {
            if ((*(_BYTE *)(v12 + 158) & 1) != 0)
              goto LABEL_217;
            if (!gLogDatapath)
              goto LABEL_217;
            v26 = __nwlog_obj();
            if (!os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
              goto LABEL_217;
            v38 = *(_QWORD *)(v12 + 488);
            v39 = *(_DWORD *)(*(_QWORD *)(v12 + 480) + 372);
            v40 = *(_DWORD *)(v12 + 860);
            if (v38)
              LODWORD(v38) = *(_DWORD *)(v38 + 424);
            *(_DWORD *)buf = 136447490;
            *(_QWORD *)&buf[4] = "nw_http1_connection_can_be_reused";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v12 + 74;
            *(_WORD *)&buf[22] = 2080;
            v968 = (uint64_t)" ";
            *(_WORD *)v969 = 1024;
            *(_DWORD *)&v969[2] = v39;
            *(_WORD *)&v969[6] = 1024;
            *(_DWORD *)&v969[8] = v40;
            *(_WORD *)&v969[12] = 1024;
            *(_DWORD *)&v969[14] = v38;
            v30 = "%{public}s %{public}s%s<i%u:c%u:s%u> connection cannot be reused because keep alive is false";
            goto LABEL_1038;
          }
        }
        else if ((*(_BYTE *)(v12 + 158) & 1) == 0)
        {
          if (gLogDatapath)
          {
            v15 = __nwlog_obj();
            v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG);
            v13 = *(_QWORD *)(v12 + 480);
            if (v16)
            {
              v17 = *(_DWORD *)(v13 + 372);
              v18 = *(_DWORD *)(v12 + 860);
              v19 = *(_QWORD *)(v12 + 488);
              if (v19)
                LODWORD(v19) = *(_DWORD *)(v19 + 424);
              *(_DWORD *)buf = 136447490;
              *(_QWORD *)&buf[4] = "nw_http1_connection_can_be_reused";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v12 + 74;
              *(_WORD *)&buf[22] = 2080;
              v968 = (uint64_t)" ";
              *(_WORD *)v969 = 1024;
              *(_DWORD *)&v969[2] = v17;
              *(_WORD *)&v969[6] = 1024;
              *(_DWORD *)&v969[8] = v18;
              *(_WORD *)&v969[12] = 1024;
              *(_DWORD *)&v969[14] = v19;
              _os_log_impl(&dword_182FBE000, v15, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> connection may be reusable because the current stream didn't use it", buf, 0x32u);
              v13 = *(_QWORD *)(v12 + 480);
            }
          }
        }
        if ((*(_BYTE *)(v13 + 376) & 8) != 0)
        {
          if ((*(_BYTE *)(v12 + 158) & 1) != 0)
            goto LABEL_217;
          if (!gLogDatapath)
            goto LABEL_217;
          v26 = __nwlog_obj();
          if (!os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
            goto LABEL_217;
          v103 = *(_QWORD *)(v12 + 488);
          v104 = *(_DWORD *)(*(_QWORD *)(v12 + 480) + 372);
          v105 = *(_DWORD *)(v12 + 860);
          if (v103)
            LODWORD(v103) = *(_DWORD *)(v103 + 424);
          *(_DWORD *)buf = 136447490;
          *(_QWORD *)&buf[4] = "nw_http1_connection_can_be_reused";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v12 + 74;
          *(_WORD *)&buf[22] = 2080;
          v968 = (uint64_t)" ";
          *(_WORD *)v969 = 1024;
          *(_DWORD *)&v969[2] = v104;
          *(_WORD *)&v969[6] = 1024;
          *(_DWORD *)&v969[8] = v105;
          *(_WORD *)&v969[12] = 1024;
          *(_DWORD *)&v969[14] = v103;
          v30 = "%{public}s %{public}s%s<i%u:c%u:s%u> connection cannot be reused because pool is closed for new connections";
          goto LABEL_1038;
        }
        v99 = *(_WORD *)(v12 + 872);
        if ((v99 & 0x200) != 0)
        {
          if ((*(_BYTE *)(v12 + 158) & 1) != 0)
            goto LABEL_217;
          if (!gLogDatapath)
            goto LABEL_217;
          v26 = __nwlog_obj();
          if (!os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
            goto LABEL_217;
          v686 = *(_QWORD *)(v12 + 488);
          v687 = *(_DWORD *)(*(_QWORD *)(v12 + 480) + 372);
          v688 = *(_DWORD *)(v12 + 860);
          if (v686)
            LODWORD(v686) = *(_DWORD *)(v686 + 424);
          *(_DWORD *)buf = 136447490;
          *(_QWORD *)&buf[4] = "nw_http1_connection_can_be_reused";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v12 + 74;
          *(_WORD *)&buf[22] = 2080;
          v968 = (uint64_t)" ";
          *(_WORD *)v969 = 1024;
          *(_DWORD *)&v969[2] = v687;
          *(_WORD *)&v969[6] = 1024;
          *(_DWORD *)&v969[8] = v688;
          *(_WORD *)&v969[12] = 1024;
          *(_DWORD *)&v969[14] = v686;
          v30 = "%{public}s %{public}s%s<i%u:c%u:s%u> connection cannot be reused because it was upgraded";
          goto LABEL_1038;
        }
        if ((v99 & 0x40) == 0)
        {
          if ((*(_BYTE *)(v12 + 158) & 1) != 0)
            goto LABEL_217;
          if (!gLogDatapath)
            goto LABEL_217;
          v26 = __nwlog_obj();
          if (!os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
            goto LABEL_217;
          v100 = *(_QWORD *)(v12 + 488);
          v101 = *(_DWORD *)(*(_QWORD *)(v12 + 480) + 372);
          v102 = *(_DWORD *)(v12 + 860);
          if (v100)
            LODWORD(v100) = *(_DWORD *)(v100 + 424);
          *(_DWORD *)buf = 136447490;
          *(_QWORD *)&buf[4] = "nw_http1_connection_can_be_reused";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v12 + 74;
          *(_WORD *)&buf[22] = 2080;
          v968 = (uint64_t)" ";
          *(_WORD *)v969 = 1024;
          *(_DWORD *)&v969[2] = v101;
          *(_WORD *)&v969[6] = 1024;
          *(_DWORD *)&v969[8] = v102;
          *(_WORD *)&v969[12] = 1024;
          *(_DWORD *)&v969[14] = v100;
          v30 = "%{public}s %{public}s%s<i%u:c%u:s%u> connection cannot be reused because it was never connected";
LABEL_1038:
          _os_log_impl(&dword_182FBE000, v26, OS_LOG_TYPE_DEBUG, v30, buf, 0x32u);
LABEL_217:
          nw_protocol_disconnect(*(_QWORD **)(v12 + 32), v12);
          v25 = v947;
          goto LABEL_218;
        }
        if ((*(_WORD *)(v12 + 872) & 0x100) != 0)
        {
          if ((*(_BYTE *)(v12 + 158) & 1) != 0)
            goto LABEL_217;
          if (!gLogDatapath)
            goto LABEL_217;
          v26 = __nwlog_obj();
          if (!os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
            goto LABEL_217;
          v203 = *(_QWORD *)(v12 + 488);
          v204 = *(_DWORD *)(*(_QWORD *)(v12 + 480) + 372);
          v205 = *(_DWORD *)(v12 + 860);
          if (v203)
            LODWORD(v203) = *(_DWORD *)(v203 + 424);
          *(_DWORD *)buf = 136447490;
          *(_QWORD *)&buf[4] = "nw_http1_connection_can_be_reused";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v12 + 74;
          *(_WORD *)&buf[22] = 2080;
          v968 = (uint64_t)" ";
          *(_WORD *)v969 = 1024;
          *(_DWORD *)&v969[2] = v204;
          *(_WORD *)&v969[6] = 1024;
          *(_DWORD *)&v969[8] = v205;
          *(_WORD *)&v969[12] = 1024;
          *(_DWORD *)&v969[14] = v203;
          v30 = "%{public}s %{public}s%s<i%u:c%u:s%u> connection cannot be reused because it has been closed";
          goto LABEL_1038;
        }
        if (*(_DWORD *)(v12 + 864) == 4)
        {
          if (*(_BYTE *)(v12 + 158) & 1 | (gLogDatapath == 0))
            goto LABEL_217;
          v26 = __nwlog_obj();
          if (!os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
            goto LABEL_217;
          v179 = *(_QWORD *)(v12 + 488);
          v180 = *(_DWORD *)(*(_QWORD *)(v12 + 480) + 372);
          v181 = *(_DWORD *)(v12 + 860);
          if (v179)
            LODWORD(v179) = *(_DWORD *)(v179 + 424);
          *(_DWORD *)buf = 136447490;
          *(_QWORD *)&buf[4] = "nw_http1_connection_can_be_reused";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v12 + 74;
          *(_WORD *)&buf[22] = 2080;
          v968 = (uint64_t)" ";
          *(_WORD *)v969 = 1024;
          *(_DWORD *)&v969[2] = v180;
          *(_WORD *)&v969[6] = 1024;
          *(_DWORD *)&v969[8] = v181;
          *(_WORD *)&v969[12] = 1024;
          *(_DWORD *)&v969[14] = v179;
          v30 = "%{public}s %{public}s%s<i%u:c%u:s%u> connection cannot be reused because input has finished from below";
          goto LABEL_1038;
        }
        if (!(*(_BYTE *)(v12 + 158) & 1 | (gLogDatapath == 0)))
        {
          v825 = __nwlog_obj();
          if (os_log_type_enabled(v825, OS_LOG_TYPE_DEBUG))
          {
            v826 = *(_QWORD *)(v12 + 488);
            v827 = *(_DWORD *)(*(_QWORD *)(v12 + 480) + 372);
            v828 = *(_DWORD *)(v12 + 860);
            if (v826)
              LODWORD(v826) = *(_DWORD *)(v826 + 424);
            *(_DWORD *)buf = 136447490;
            *(_QWORD *)&buf[4] = "nw_http1_connection_can_be_reused";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v12 + 74;
            *(_WORD *)&buf[22] = 2080;
            v968 = (uint64_t)" ";
            *(_WORD *)v969 = 1024;
            *(_DWORD *)&v969[2] = v827;
            *(_WORD *)&v969[6] = 1024;
            *(_DWORD *)&v969[8] = v828;
            *(_WORD *)&v969[12] = 1024;
            *(_DWORD *)&v969[14] = v826;
            _os_log_impl(&dword_182FBE000, v825, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> connection can be reused", buf, 0x32u);
          }
        }
        v261 = *(_QWORD *)(v12 + 488);
        if (v261)
        {
          if (*(_QWORD *)(v261 + 248))
          {
            v262 = *(_QWORD *)(v261 + 256);
            if (v262)
            {
              if (*(_QWORD *)(v262 + 488) == v261)
              {
                if ((*(_BYTE *)(v261 + 158) & 1) == 0)
                {
                  v333 = __nwlog_obj();
                  if (os_log_type_enabled(v333, OS_LOG_TYPE_INFO))
                  {
                    v334 = *(_QWORD *)(v261 + 256);
                    v335 = *(_DWORD *)(*(_QWORD *)(v261 + 248) + 372);
                    if (v334)
                      LODWORD(v334) = *(_DWORD *)(v334 + 860);
                    v336 = *(_DWORD *)(v261 + 424);
                    *(_DWORD *)buf = 136448002;
                    *(_QWORD *)&buf[4] = "nw_http1_stream_disassociate_from_connection";
                    *(_WORD *)&buf[12] = 2082;
                    *(_QWORD *)&buf[14] = v261 + 74;
                    *(_WORD *)&buf[22] = 2080;
                    v968 = (uint64_t)" ";
                    *(_WORD *)v969 = 1024;
                    *(_DWORD *)&v969[2] = v335;
                    *(_WORD *)&v969[6] = 1024;
                    *(_DWORD *)&v969[8] = v334;
                    *(_WORD *)&v969[12] = 1024;
                    *(_DWORD *)&v969[14] = v336;
                    *(_WORD *)&v969[18] = 2048;
                    *(_QWORD *)&v969[20] = v261;
                    *(_WORD *)&v969[28] = 2048;
                    *(_QWORD *)&v969[30] = v262;
                    _os_log_impl(&dword_182FBE000, v333, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s<i%u:c%u:s%u> stream (%p) finished with connection %p", buf, 0x46u);
                  }
                }
                if (gLogDatapath)
                {
                  v891 = __nwlog_obj();
                  if (os_log_type_enabled(v891, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)buf = 136446210;
                    *(_QWORD *)&buf[4] = "nw_protocol_finalize_temp_frame_array";
                    _os_log_impl(&dword_182FBE000, v891, OS_LOG_TYPE_DEBUG, "%{public}s called", buf, 0xCu);
                  }
                }
                *(_QWORD *)buf = MEMORY[0x1E0C809B0];
                *(_QWORD *)&buf[8] = 0x40000000;
                *(_QWORD *)&buf[16] = ___ZL37nw_protocol_finalize_temp_frame_arrayP16nw_frame_array_sb_block_invoke_39647;
                v968 = (uint64_t)&__block_descriptor_tmp_55_39648;
                *(_QWORD *)v969 = v262 + 632;
                v969[8] = 0;
                v337 = *(_QWORD *)(v262 + 632);
                do
                {
                  if (!v337)
                    break;
                  v338 = *(_QWORD *)(v337 + 32);
                  v339 = (*(uint64_t (**)(_BYTE *))&buf[16])(buf);
                  v337 = v338;
                }
                while ((v339 & 1) != 0);
                *(_QWORD *)(v261 + 256) = 0;
                *(_QWORD *)(v262 + 488) = 0;
                nw_protocol_set_output_handler(v261, 0);
                nw_protocol_set_input_handler(v262, 0);
                v340 = *(_QWORD *)(v12 + 480);
                if (v340)
                  goto LABEL_694;
                goto LABEL_559;
              }
              __nwlog_obj();
              v263 = *(_QWORD *)(v262 + 488);
              *(_DWORD *)buf = 136446978;
              *(_QWORD *)&buf[4] = "nw_http1_stream_disassociate_from_connection";
              *(_WORD *)&buf[12] = 2048;
              *(_QWORD *)&buf[14] = v262;
              *(_WORD *)&buf[22] = 2048;
              v968 = v261;
              *(_WORD *)v969 = 2048;
              *(_QWORD *)&v969[2] = v263;
              v264 = (char *)_os_log_send_and_compose_impl();
              v970[0] = 16;
              LOBYTE(aBlock) = 0;
              if (!__nwlog_fault(v264, v970, &aBlock))
                goto LABEL_691;
              if (v970[0] == 17)
              {
                v266 = __nwlog_obj();
                v267 = v970[0];
                if (!os_log_type_enabled(v266, (os_log_type_t)v970[0]))
                  goto LABEL_691;
                v268 = *(_QWORD *)(v262 + 488);
                *(_DWORD *)buf = 136446978;
                *(_QWORD *)&buf[4] = "nw_http1_stream_disassociate_from_connection";
                *(_WORD *)&buf[12] = 2048;
                *(_QWORD *)&buf[14] = v262;
                *(_WORD *)&buf[22] = 2048;
                v968 = v261;
                *(_WORD *)v969 = 2048;
                *(_QWORD *)&v969[2] = v268;
                v269 = "%{public}s Connection %p does not already have stream %p, has %p";
              }
              else
              {
                if ((_BYTE)aBlock)
                {
                  v347 = (char *)__nw_create_backtrace_string();
                  v348 = __nwlog_obj();
                  v349 = v970[0];
                  v350 = os_log_type_enabled(v348, (os_log_type_t)v970[0]);
                  if (v347)
                  {
                    if (v350)
                    {
                      v351 = *(_QWORD *)(v262 + 488);
                      *(_DWORD *)buf = 136447234;
                      *(_QWORD *)&buf[4] = "nw_http1_stream_disassociate_from_connection";
                      *(_WORD *)&buf[12] = 2048;
                      *(_QWORD *)&buf[14] = v262;
                      *(_WORD *)&buf[22] = 2048;
                      v968 = v261;
                      *(_WORD *)v969 = 2048;
                      *(_QWORD *)&v969[2] = v351;
                      *(_WORD *)&v969[10] = 2082;
                      *(_QWORD *)&v969[12] = v347;
                      _os_log_impl(&dword_182FBE000, v348, v349, "%{public}s Connection %p does not already have stream %p, has %p, dumping backtrace:%{public}s", buf, 0x34u);
                    }
                    free(v347);
                  }
                  else if (v350)
                  {
                    v454 = *(_QWORD *)(v262 + 488);
                    *(_DWORD *)buf = 136446978;
                    *(_QWORD *)&buf[4] = "nw_http1_stream_disassociate_from_connection";
                    *(_WORD *)&buf[12] = 2048;
                    *(_QWORD *)&buf[14] = v262;
                    *(_WORD *)&buf[22] = 2048;
                    v968 = v261;
                    *(_WORD *)v969 = 2048;
                    *(_QWORD *)&v969[2] = v454;
                    v269 = "%{public}s Connection %p does not already have stream %p, has %p, no backtrace";
                    v436 = v348;
                    v437 = v349;
                    goto LABEL_690;
                  }
LABEL_691:
                  if (v264)
                    free(v264);
                  v340 = *(_QWORD *)(v12 + 480);
                  if (v340)
                    goto LABEL_694;
                  goto LABEL_559;
                }
                v266 = __nwlog_obj();
                v267 = v970[0];
                if (!os_log_type_enabled(v266, (os_log_type_t)v970[0]))
                  goto LABEL_691;
                v435 = *(_QWORD *)(v262 + 488);
                *(_DWORD *)buf = 136446978;
                *(_QWORD *)&buf[4] = "nw_http1_stream_disassociate_from_connection";
                *(_WORD *)&buf[12] = 2048;
                *(_QWORD *)&buf[14] = v262;
                *(_WORD *)&buf[22] = 2048;
                v968 = v261;
                *(_WORD *)v969 = 2048;
                *(_QWORD *)&v969[2] = v435;
                v269 = "%{public}s Connection %p does not already have stream %p, has %p, backtrace limit exceeded";
              }
              v436 = v266;
              v437 = v267;
LABEL_690:
              _os_log_impl(&dword_182FBE000, v436, v437, v269, buf, 0x2Au);
              goto LABEL_691;
            }
            __nwlog_obj();
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_http1_stream_disassociate_from_connection";
            v821 = (char *)_os_log_send_and_compose_impl();
            v970[0] = 16;
            LOBYTE(aBlock) = 0;
            if (__nwlog_fault(v821, v970, &aBlock))
            {
              if (v970[0] == 17)
              {
                v822 = __nwlog_obj();
                v823 = v970[0];
                if (!os_log_type_enabled(v822, (os_log_type_t)v970[0]))
                  goto LABEL_1585;
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_http1_stream_disassociate_from_connection";
                v824 = "%{public}s called with null http1_connection";
                goto LABEL_1584;
              }
              if (!(_BYTE)aBlock)
              {
                v822 = __nwlog_obj();
                v823 = v970[0];
                if (!os_log_type_enabled(v822, (os_log_type_t)v970[0]))
                  goto LABEL_1585;
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_http1_stream_disassociate_from_connection";
                v824 = "%{public}s called with null http1_connection, backtrace limit exceeded";
                goto LABEL_1584;
              }
              v871 = (char *)__nw_create_backtrace_string();
              v822 = __nwlog_obj();
              v823 = v970[0];
              v874 = os_log_type_enabled(v822, (os_log_type_t)v970[0]);
              if (!v871)
              {
                if (!v874)
                  goto LABEL_1585;
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_http1_stream_disassociate_from_connection";
                v824 = "%{public}s called with null http1_connection, no backtrace";
                goto LABEL_1584;
              }
              if (v874)
              {
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = "nw_http1_stream_disassociate_from_connection";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = v871;
                v873 = "%{public}s called with null http1_connection, dumping backtrace:%{public}s";
                goto LABEL_1361;
              }
              goto LABEL_1362;
            }
LABEL_1585:
            if (!v821)
              goto LABEL_1587;
            goto LABEL_1586;
          }
          __nwlog_obj();
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http1_stream_disassociate_from_connection";
          v821 = (char *)_os_log_send_and_compose_impl();
          v970[0] = 16;
          LOBYTE(aBlock) = 0;
          if (!__nwlog_fault(v821, v970, &aBlock))
            goto LABEL_1585;
          if (v970[0] != 17)
          {
            if (!(_BYTE)aBlock)
            {
              v822 = __nwlog_obj();
              v823 = v970[0];
              if (!os_log_type_enabled(v822, (os_log_type_t)v970[0]))
                goto LABEL_1585;
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_http1_stream_disassociate_from_connection";
              v824 = "%{public}s called with null http1_stream->protocol_http1, backtrace limit exceeded";
              goto LABEL_1584;
            }
            v871 = (char *)__nw_create_backtrace_string();
            v822 = __nwlog_obj();
            v823 = v970[0];
            v872 = os_log_type_enabled(v822, (os_log_type_t)v970[0]);
            if (!v871)
            {
              if (!v872)
                goto LABEL_1585;
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_http1_stream_disassociate_from_connection";
              v824 = "%{public}s called with null http1_stream->protocol_http1, no backtrace";
              goto LABEL_1584;
            }
            if (v872)
            {
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "nw_http1_stream_disassociate_from_connection";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v871;
              v873 = "%{public}s called with null http1_stream->protocol_http1, dumping backtrace:%{public}s";
LABEL_1361:
              _os_log_impl(&dword_182FBE000, v822, v823, v873, buf, 0x16u);
            }
LABEL_1362:
            free(v871);
            if (!v821)
            {
LABEL_1587:
              v340 = *(_QWORD *)(v12 + 480);
              if (v340)
              {
LABEL_694:
                v438 = (_WORD *)(v12 + 872);
                if ((*(_BYTE *)(v12 + 158) & 1) == 0)
                {
                  if (gLogDatapath)
                  {
                    v829 = __nwlog_obj();
                    if (os_log_type_enabled(v829, OS_LOG_TYPE_DEBUG))
                    {
                      v830 = *(_QWORD *)(v12 + 488);
                      v831 = *(_DWORD *)(*(_QWORD *)(v12 + 480) + 372);
                      v832 = *(_DWORD *)(v12 + 860);
                      if (v830)
                        LODWORD(v830) = *(_DWORD *)(v830 + 424);
                      *(_DWORD *)buf = 136447746;
                      *(_QWORD *)&buf[4] = "nw_http1_add_idle_connection";
                      *(_WORD *)&buf[12] = 2082;
                      *(_QWORD *)&buf[14] = v12 + 74;
                      *(_WORD *)&buf[22] = 2080;
                      v968 = (uint64_t)" ";
                      *(_WORD *)v969 = 1024;
                      *(_DWORD *)&v969[2] = v831;
                      *(_WORD *)&v969[6] = 1024;
                      *(_DWORD *)&v969[8] = v832;
                      *(_WORD *)&v969[12] = 1024;
                      *(_DWORD *)&v969[14] = v830;
                      *(_WORD *)&v969[18] = 2048;
                      *(_QWORD *)&v969[20] = v12;
                      _os_log_impl(&dword_182FBE000, v829, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> called for connection (%p)", buf, 0x3Cu);
                    }
                  }
                }
                if ((((unsigned __int16)*v438 | (*(unsigned __int8 *)(v12 + 874) << 16)) & 0x80000) == 0)
                {
                  v440 = (uint64_t *)(v340 + 208);
                  v439 = *(_QWORD *)(v340 + 208);
                  *(_QWORD *)(v12 + 592) = v439;
                  if (v439)
                    v441 = (_QWORD *)(v439 + 600);
                  else
                    v441 = (_QWORD *)(v340 + 216);
                  *v441 = v12 + 592;
                  *v440 = v12;
                  *(_QWORD *)(v12 + 600) = v440;
                  v442 = *(unsigned int *)(v340 + 340) + 1;
                  v443 = v442 << 31 >> 31;
                  *(_DWORD *)(v340 + 340) = v442;
                  if (v443 == v442 && (v443 & 0x8000000000000000) == 0)
                    goto LABEL_771;
                  __nwlog_obj();
                  v444 = *(unsigned int *)(v340 + 340);
                  *(_DWORD *)buf = 136446978;
                  *(_QWORD *)&buf[4] = "nw_http1_add_idle_connection";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = "http1->idle_connections_count";
                  *(_WORD *)&buf[22] = 2048;
                  v968 = 1;
                  *(_WORD *)v969 = 2048;
                  *(_QWORD *)&v969[2] = v444;
                  v445 = (char *)_os_log_send_and_compose_impl();
                  v970[0] = 16;
                  LOBYTE(aBlock) = 0;
                  if (__nwlog_fault(v445, v970, &aBlock))
                  {
                    if (v970[0] == 17)
                    {
                      v446 = __nwlog_obj();
                      v447 = v970[0];
                      if (os_log_type_enabled(v446, (os_log_type_t)v970[0]))
                      {
                        v448 = *(unsigned int *)(v340 + 340);
                        *(_DWORD *)buf = 136446978;
                        *(_QWORD *)&buf[4] = "nw_http1_add_idle_connection";
                        *(_WORD *)&buf[12] = 2082;
                        *(_QWORD *)&buf[14] = "http1->idle_connections_count";
                        *(_WORD *)&buf[22] = 2048;
                        v968 = 1;
                        *(_WORD *)v969 = 2048;
                        *(_QWORD *)&v969[2] = v448;
                        v449 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_767:
                        _os_log_impl(&dword_182FBE000, v446, v447, v449, buf, 0x2Au);
                      }
                    }
                    else if ((_BYTE)aBlock)
                    {
                      v451 = (char *)__nw_create_backtrace_string();
                      v446 = __nwlog_obj();
                      v447 = v970[0];
                      v452 = os_log_type_enabled(v446, (os_log_type_t)v970[0]);
                      if (v451)
                      {
                        if (v452)
                        {
                          v453 = *(unsigned int *)(v340 + 340);
                          *(_DWORD *)buf = 136447234;
                          *(_QWORD *)&buf[4] = "nw_http1_add_idle_connection";
                          *(_WORD *)&buf[12] = 2082;
                          *(_QWORD *)&buf[14] = "http1->idle_connections_count";
                          *(_WORD *)&buf[22] = 2048;
                          v968 = 1;
                          *(_WORD *)v969 = 2048;
                          *(_QWORD *)&v969[2] = v453;
                          *(_WORD *)&v969[10] = 2082;
                          *(_QWORD *)&v969[12] = v451;
                          _os_log_impl(&dword_182FBE000, v446, v447, "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
                        }
                        free(v451);
                        goto LABEL_768;
                      }
                      if (v452)
                      {
                        v472 = *(unsigned int *)(v340 + 340);
                        *(_DWORD *)buf = 136446978;
                        *(_QWORD *)&buf[4] = "nw_http1_add_idle_connection";
                        *(_WORD *)&buf[12] = 2082;
                        *(_QWORD *)&buf[14] = "http1->idle_connections_count";
                        *(_WORD *)&buf[22] = 2048;
                        v968 = 1;
                        *(_WORD *)v969 = 2048;
                        *(_QWORD *)&v969[2] = v472;
                        v449 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
                        goto LABEL_767;
                      }
                    }
                    else
                    {
                      v446 = __nwlog_obj();
                      v447 = v970[0];
                      if (os_log_type_enabled(v446, (os_log_type_t)v970[0]))
                      {
                        v459 = *(unsigned int *)(v340 + 340);
                        *(_DWORD *)buf = 136446978;
                        *(_QWORD *)&buf[4] = "nw_http1_add_idle_connection";
                        *(_WORD *)&buf[12] = 2082;
                        *(_QWORD *)&buf[14] = "http1->idle_connections_count";
                        *(_WORD *)&buf[22] = 2048;
                        v968 = 1;
                        *(_WORD *)v969 = 2048;
                        *(_QWORD *)&v969[2] = v459;
                        v449 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
                        goto LABEL_767;
                      }
                    }
                  }
LABEL_768:
                  if (v445)
                    free(v445);
                  *(_DWORD *)(v340 + 340) = -1;
LABEL_771:
                  v473 = (*(unsigned __int16 *)(v12 + 872) | (*(unsigned __int8 *)(v12 + 874) << 16)) & 0xF7FFFA | 0x80000;
                  *v438 &= 0xFFFAu;
                  *(_BYTE *)(v12 + 874) = BYTE2(v473);
                  v474 = *(void **)(v12 + 800);
                  if (v474)
                  {
                    free(v474);
                    *(_QWORD *)(v12 + 800) = 0;
                  }
                  *(_DWORD *)(v12 + 840) = 0;
                  v475 = *(void **)(v12 + 808);
                  if (v475)
                  {
                    free(v475);
                    *(_QWORD *)(v12 + 808) = 0;
                  }
                  *(_DWORD *)(v12 + 844) = 0;
                  v476 = *(void **)(v12 + 816);
                  if (v476)
                  {
                    free(v476);
                    *(_QWORD *)(v12 + 816) = 0;
                  }
                  *(_DWORD *)(v12 + 848) = 0;
                  v477 = *(void **)(v12 + 824);
                  if (v477)
                  {
                    free(v477);
                    *(_QWORD *)(v12 + 824) = 0;
                  }
                  *(_DWORD *)(v12 + 852) = 0;
                  v478 = *(void **)(v12 + 832);
                  if (v478)
                  {
                    free(v478);
                    *(_QWORD *)(v12 + 832) = 0;
                  }
                  *(_DWORD *)(v12 + 856) = 0;
                  v479 = (unsigned __int16)*v438;
                  v480 = v479 | (*(unsigned __int8 *)(v12 + 874) << 16);
                  if ((v479 & 0x10) != 0)
                  {
                    if (*(_DWORD *)(v12 + 224) == 21)
                      *(_DWORD *)(v12 + 224) = 0;
                    v489 = v480 & 0xFFFFFFEF;
                    *v438 = v489;
                    *(_BYTE *)(v12 + 874) = BYTE2(v489);
                    if ((*(_BYTE *)(v12 + 158) & 1) == 0)
                    {
                      if (gLogDatapath)
                      {
                        v484 = __nwlog_obj();
                        if (os_log_type_enabled(v484, OS_LOG_TYPE_DEBUG))
                        {
                          v893 = *(_QWORD *)(v12 + 488);
                          v894 = *(_DWORD *)(*(_QWORD *)(v12 + 480) + 372);
                          v895 = *(_DWORD *)(v12 + 860);
                          if (v893)
                            LODWORD(v893) = *(_DWORD *)(v893 + 424);
                          *(_DWORD *)buf = 136447490;
                          *(_QWORD *)&buf[4] = "nw_http1_connection_reset_for_new_message";
                          *(_WORD *)&buf[12] = 2082;
                          *(_QWORD *)&buf[14] = v12 + 74;
                          *(_WORD *)&buf[22] = 2080;
                          v968 = (uint64_t)" ";
                          *(_WORD *)v969 = 1024;
                          *(_DWORD *)&v969[2] = v894;
                          *(_WORD *)&v969[6] = 1024;
                          *(_DWORD *)&v969[8] = v895;
                          *(_WORD *)&v969[12] = 1024;
                          *(_DWORD *)&v969[14] = v893;
                          v488 = "%{public}s %{public}s%s<i%u:c%u:s%u> Unpausing parser, input for next stream available";
                          goto LABEL_1468;
                        }
                      }
                    }
                  }
                  else
                  {
                    *(_OWORD *)(v12 + 200) = 0u;
                    v481 = *(_BYTE *)(v12 + 272);
                    v482 = *(_QWORD *)(v12 + 248);
                    v483 = *(_WORD *)(v12 + 278);
                    *(_OWORD *)(v12 + 248) = 0u;
                    *(_OWORD *)(v12 + 264) = 0u;
                    *(_OWORD *)(v12 + 216) = 0u;
                    *(_OWORD *)(v12 + 232) = 0u;
                    *(_QWORD *)(v12 + 280) = 0;
                    *(_BYTE *)(v12 + 272) = v481;
                    *(_QWORD *)(v12 + 248) = v482;
                    *(_QWORD *)(v12 + 256) = 238;
                    *(_WORD *)(v12 + 278) = v483;
                    if ((*(_BYTE *)(v12 + 158) & 1) == 0)
                    {
                      if (gLogDatapath)
                      {
                        v484 = __nwlog_obj();
                        if (os_log_type_enabled(v484, OS_LOG_TYPE_DEBUG))
                        {
                          v485 = *(_QWORD *)(v12 + 488);
                          v486 = *(_DWORD *)(*(_QWORD *)(v12 + 480) + 372);
                          v487 = *(_DWORD *)(v12 + 860);
                          if (v485)
                            LODWORD(v485) = *(_DWORD *)(v485 + 424);
                          *(_DWORD *)buf = 136447490;
                          *(_QWORD *)&buf[4] = "nw_http1_connection_reset_for_new_message";
                          *(_WORD *)&buf[12] = 2082;
                          *(_QWORD *)&buf[14] = v12 + 74;
                          *(_WORD *)&buf[22] = 2080;
                          v968 = (uint64_t)" ";
                          *(_WORD *)v969 = 1024;
                          *(_DWORD *)&v969[2] = v486;
                          *(_WORD *)&v969[6] = 1024;
                          *(_DWORD *)&v969[8] = v487;
                          *(_WORD *)&v969[12] = 1024;
                          *(_DWORD *)&v969[14] = v485;
                          v488 = "%{public}s %{public}s%s<i%u:c%u:s%u> Resetting parser, no current available input for next stream";
LABEL_1468:
                          _os_log_impl(&dword_182FBE000, v484, OS_LOG_TYPE_DEBUG, v488, buf, 0x32u);
                        }
                      }
                    }
                  }
                  v490 = *(_QWORD *)(v12 + 784);
                  if (v490)
                    nw_queue_cancel_source(v490, v265);
                  v491 = *(void **)(v12 + 192);
                  *(_QWORD *)v970 = MEMORY[0x1E0C809B0];
                  *(_QWORD *)&v970[8] = 0x40000000;
                  *(_QWORD *)&v970[16] = ___ZL28nw_http1_add_idle_connectionP17nw_protocol_http1P19nw_http1_connection_block_invoke;
                  v971 = (uint64_t (*)(uint64_t, uint64_t))&__block_descriptor_tmp_92;
                  v972 = (void (*)(uint64_t))v12;
                  v973 = v491;
                  v974 = v340;
                  source = nw_queue_context_create_source(0, 2, 3, 0, v970, 0);
                  *(_QWORD *)(v12 + 784) = source;
                  v493 = dispatch_time(0x8000000000000000, 1000000 * (_QWORD)v491);
                  nw_queue_set_timer_values(source, v493, 0xFFFFFFFFFFFFFFFFLL, 1000 * (_QWORD)v491);
                  nw_queue_activate_source(*(_QWORD *)(v12 + 784), v494);
                  if ((*(_BYTE *)(v12 + 158) & 1) == 0)
                  {
                    if (gLogDatapath)
                    {
                      v495 = __nwlog_obj();
                      if (os_log_type_enabled(v495, OS_LOG_TYPE_DEBUG))
                      {
                        v496 = *(_QWORD *)(v12 + 488);
                        v497 = *(_DWORD *)(*(_QWORD *)(v12 + 480) + 372);
                        v498 = *(_DWORD *)(v12 + 860);
                        if (v496)
                          LODWORD(v496) = *(_DWORD *)(v496 + 424);
                        v499 = *(_DWORD *)(v340 + 340);
                        *(_DWORD *)buf = 136448258;
                        *(_QWORD *)&buf[4] = "nw_http1_add_idle_connection";
                        *(_WORD *)&buf[12] = 2082;
                        *(_QWORD *)&buf[14] = v12 + 74;
                        *(_WORD *)&buf[22] = 2080;
                        v968 = (uint64_t)" ";
                        *(_WORD *)v969 = 1024;
                        *(_DWORD *)&v969[2] = v497;
                        *(_WORD *)&v969[6] = 1024;
                        *(_DWORD *)&v969[8] = v498;
                        *(_WORD *)&v969[12] = 1024;
                        *(_DWORD *)&v969[14] = v496;
                        *(_WORD *)&v969[18] = 2048;
                        *(_QWORD *)&v969[20] = v12;
                        *(_WORD *)&v969[28] = 2048;
                        *(_QWORD *)&v969[30] = v491;
                        *(_WORD *)&v969[38] = 1024;
                        *(_DWORD *)&v969[40] = v499;
                        v64 = "%{public}s %{public}s%s<i%u:c%u:s%u> added idle connection %p and started destroy timer fo"
                              "r %lldms, now have %u idle connections";
                        v65 = v495;
                        v66 = 76;
LABEL_103:
                        _os_log_impl(&dword_182FBE000, v65, OS_LOG_TYPE_DEBUG, v64, buf, v66);
                        goto LABEL_737;
                      }
                    }
                  }
                  goto LABEL_737;
                }
                __nwlog_obj();
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = "nw_http1_add_idle_connection";
                *(_WORD *)&buf[12] = 2048;
                *(_QWORD *)&buf[14] = v12;
                v34 = (char *)_os_log_send_and_compose_impl();
                v970[0] = 16;
                LOBYTE(aBlock) = 0;
                if (!__nwlog_fault(v34, v970, &aBlock))
                  goto LABEL_735;
                if (v970[0] == 17)
                {
                  v35 = __nwlog_obj();
                  v36 = v970[0];
                  if (!os_log_type_enabled(v35, (os_log_type_t)v970[0]))
                    goto LABEL_735;
                  *(_DWORD *)buf = 136446466;
                  *(_QWORD *)&buf[4] = "nw_http1_add_idle_connection";
                  *(_WORD *)&buf[12] = 2048;
                  *(_QWORD *)&buf[14] = v12;
                  v37 = "%{public}s connection %p already in idle list, cannot add twice";
                  goto LABEL_733;
                }
                if (!(_BYTE)aBlock)
                {
                  v35 = __nwlog_obj();
                  v36 = v970[0];
                  if (!os_log_type_enabled(v35, (os_log_type_t)v970[0]))
                    goto LABEL_735;
                  *(_DWORD *)buf = 136446466;
                  *(_QWORD *)&buf[4] = "nw_http1_add_idle_connection";
                  *(_WORD *)&buf[12] = 2048;
                  *(_QWORD *)&buf[14] = v12;
                  v37 = "%{public}s connection %p already in idle list, cannot add twice, backtrace limit exceeded";
                  goto LABEL_733;
                }
                v43 = (char *)__nw_create_backtrace_string();
                v35 = __nwlog_obj();
                v36 = v970[0];
                v450 = os_log_type_enabled(v35, (os_log_type_t)v970[0]);
                if (!v43)
                {
                  if (!v450)
                    goto LABEL_735;
                  *(_DWORD *)buf = 136446466;
                  *(_QWORD *)&buf[4] = "nw_http1_add_idle_connection";
                  *(_WORD *)&buf[12] = 2048;
                  *(_QWORD *)&buf[14] = v12;
                  v37 = "%{public}s connection %p already in idle list, cannot add twice, no backtrace";
                  goto LABEL_733;
                }
                if (!v450)
                  goto LABEL_72;
                *(_DWORD *)buf = 136446722;
                *(_QWORD *)&buf[4] = "nw_http1_add_idle_connection";
                *(_WORD *)&buf[12] = 2048;
                *(_QWORD *)&buf[14] = v12;
                *(_WORD *)&buf[22] = 2082;
                v968 = (uint64_t)v43;
                v45 = "%{public}s connection %p already in idle list, cannot add twice, dumping backtrace:%{public}s";
                goto LABEL_71;
              }
LABEL_559:
              __nwlog_obj();
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_http1_add_idle_connection";
              v341 = (char *)_os_log_send_and_compose_impl();
              v970[0] = 16;
              LOBYTE(aBlock) = 0;
              if (!__nwlog_fault(v341, v970, &aBlock))
                goto LABEL_1575;
              if (v970[0] == 17)
              {
                v342 = __nwlog_obj();
                v343 = v970[0];
                if (!os_log_type_enabled(v342, (os_log_type_t)v970[0]))
                  goto LABEL_1575;
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_http1_add_idle_connection";
                v344 = "%{public}s called with null http1";
              }
              else if ((_BYTE)aBlock)
              {
                v867 = (char *)__nw_create_backtrace_string();
                v342 = __nwlog_obj();
                v343 = v970[0];
                v868 = os_log_type_enabled(v342, (os_log_type_t)v970[0]);
                if (v867)
                {
                  if (v868)
                  {
                    *(_DWORD *)buf = 136446466;
                    *(_QWORD *)&buf[4] = "nw_http1_add_idle_connection";
                    *(_WORD *)&buf[12] = 2082;
                    *(_QWORD *)&buf[14] = v867;
                    _os_log_impl(&dword_182FBE000, v342, v343, "%{public}s called with null http1, dumping backtrace:%{public}s", buf, 0x16u);
                  }
                  free(v867);
                  goto LABEL_1575;
                }
                if (!v868)
                {
LABEL_1575:
                  if (v341)
                    free(v341);
                  goto LABEL_737;
                }
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_http1_add_idle_connection";
                v344 = "%{public}s called with null http1, no backtrace";
              }
              else
              {
                v342 = __nwlog_obj();
                v343 = v970[0];
                if (!os_log_type_enabled(v342, (os_log_type_t)v970[0]))
                  goto LABEL_1575;
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_http1_add_idle_connection";
                v344 = "%{public}s called with null http1, backtrace limit exceeded";
              }
              _os_log_impl(&dword_182FBE000, v342, v343, v344, buf, 0xCu);
              goto LABEL_1575;
            }
LABEL_1586:
            free(v821);
            goto LABEL_1587;
          }
          v822 = __nwlog_obj();
          v823 = v970[0];
          if (!os_log_type_enabled(v822, (os_log_type_t)v970[0]))
            goto LABEL_1585;
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http1_stream_disassociate_from_connection";
          v824 = "%{public}s called with null http1_stream->protocol_http1";
        }
        else
        {
          __nwlog_obj();
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http1_stream_disassociate_from_connection";
          v821 = (char *)_os_log_send_and_compose_impl();
          v970[0] = 16;
          LOBYTE(aBlock) = 0;
          if (!__nwlog_fault(v821, v970, &aBlock))
            goto LABEL_1585;
          if (v970[0] != 17)
          {
            if (!(_BYTE)aBlock)
            {
              v822 = __nwlog_obj();
              v823 = v970[0];
              if (!os_log_type_enabled(v822, (os_log_type_t)v970[0]))
                goto LABEL_1585;
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_http1_stream_disassociate_from_connection";
              v824 = "%{public}s called with null http1_stream, backtrace limit exceeded";
              goto LABEL_1584;
            }
            v869 = (char *)__nw_create_backtrace_string();
            v822 = __nwlog_obj();
            v823 = v970[0];
            v870 = os_log_type_enabled(v822, (os_log_type_t)v970[0]);
            if (!v869)
            {
              if (!v870)
                goto LABEL_1585;
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_http1_stream_disassociate_from_connection";
              v824 = "%{public}s called with null http1_stream, no backtrace";
              goto LABEL_1584;
            }
            if (v870)
            {
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "nw_http1_stream_disassociate_from_connection";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v869;
              _os_log_impl(&dword_182FBE000, v822, v823, "%{public}s called with null http1_stream, dumping backtrace:%{public}s", buf, 0x16u);
            }
            free(v869);
            goto LABEL_1585;
          }
          v822 = __nwlog_obj();
          v823 = v970[0];
          if (!os_log_type_enabled(v822, (os_log_type_t)v970[0]))
            goto LABEL_1585;
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http1_stream_disassociate_from_connection";
          v824 = "%{public}s called with null http1_stream";
        }
LABEL_1584:
        _os_log_impl(&dword_182FBE000, v822, v823, v824, buf, 0xCu);
        goto LABEL_1585;
      }
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_connection_disconnect";
      v34 = (char *)_os_log_send_and_compose_impl();
      v970[0] = 16;
      LOBYTE(aBlock) = 0;
      if (!__nwlog_fault(v34, v970, &aBlock))
        goto LABEL_735;
      if (v970[0] == 17)
      {
        v82 = __nwlog_obj();
        v83 = v970[0];
        if (!os_log_type_enabled(v82, (os_log_type_t)v970[0]))
          goto LABEL_735;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http1_connection_disconnect";
        v37 = "%{public}s called with null http1_connection->current_stream";
        goto LABEL_1043;
      }
      if ((_BYTE)aBlock)
      {
        v91 = (char *)__nw_create_backtrace_string();
        v82 = __nwlog_obj();
        v83 = v970[0];
        v92 = os_log_type_enabled(v82, (os_log_type_t)v970[0]);
        if (v91)
        {
          if (v92)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_http1_connection_disconnect";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v91;
            _os_log_impl(&dword_182FBE000, v82, v83, "%{public}s called with null http1_connection->current_stream, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v91);
          if (!v34)
            goto LABEL_737;
LABEL_736:
          free(v34);
          goto LABEL_737;
        }
        if (v92)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http1_connection_disconnect";
          v37 = "%{public}s called with null http1_connection->current_stream, no backtrace";
          goto LABEL_1043;
        }
LABEL_735:
        if (!v34)
          goto LABEL_737;
        goto LABEL_736;
      }
      v82 = __nwlog_obj();
      v83 = v970[0];
      if (!os_log_type_enabled(v82, (os_log_type_t)v970[0]))
        goto LABEL_735;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_connection_disconnect";
      v37 = "%{public}s called with null http1_connection->current_stream, backtrace limit exceeded";
    }
    else
    {
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_connection_disconnect";
      v34 = (char *)_os_log_send_and_compose_impl();
      v970[0] = 16;
      LOBYTE(aBlock) = 0;
      if (!__nwlog_fault(v34, v970, &aBlock))
        goto LABEL_735;
      if (v970[0] == 17)
      {
        v82 = __nwlog_obj();
        v83 = v970[0];
        if (!os_log_type_enabled(v82, (os_log_type_t)v970[0]))
          goto LABEL_735;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http1_connection_disconnect";
        v37 = "%{public}s called with null http1_connection->protocol_http1";
        goto LABEL_1043;
      }
      if ((_BYTE)aBlock)
      {
        v89 = (char *)__nw_create_backtrace_string();
        v82 = __nwlog_obj();
        v83 = v970[0];
        v90 = os_log_type_enabled(v82, (os_log_type_t)v970[0]);
        if (v89)
        {
          if (v90)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_http1_connection_disconnect";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v89;
            _os_log_impl(&dword_182FBE000, v82, v83, "%{public}s called with null http1_connection->protocol_http1, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v89);
          goto LABEL_735;
        }
        if (!v90)
          goto LABEL_735;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http1_connection_disconnect";
        v37 = "%{public}s called with null http1_connection->protocol_http1, no backtrace";
      }
      else
      {
        v82 = __nwlog_obj();
        v83 = v970[0];
        if (!os_log_type_enabled(v82, (os_log_type_t)v970[0]))
          goto LABEL_735;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http1_connection_disconnect";
        v37 = "%{public}s called with null http1_connection->protocol_http1, backtrace limit exceeded";
      }
    }
LABEL_1043:
    v456 = v82;
    v457 = v83;
    v458 = 12;
    goto LABEL_734;
  }
  if (!*(_QWORD *)(v10 + 32))
  {
    if ((v11 & 0x1000) == 0)
      goto LABEL_737;
    if ((*(_BYTE *)(v7 + 158) & 1) == 0)
    {
      if (gLogDatapath)
      {
        v689 = __nwlog_obj();
        v690 = os_log_type_enabled(v689, OS_LOG_TYPE_DEBUG);
        v7 = v947;
        if (v690)
        {
          v691 = *(_DWORD *)(v947 + 372);
          v692 = *(_DWORD *)(v10 + 424);
          *(_DWORD *)buf = 136447490;
          *(_QWORD *)&buf[4] = "nw_http1_remove_pending_stream";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v947 + 74;
          *(_WORD *)&buf[22] = 2080;
          v968 = (uint64_t)" ";
          *(_WORD *)v969 = 1024;
          *(_DWORD *)&v969[2] = v691;
          *(_WORD *)&v969[6] = 1024;
          *(_DWORD *)&v969[8] = v692;
          *(_WORD *)&v969[12] = 2048;
          *(_QWORD *)&v969[14] = v10;
          _os_log_impl(&dword_182FBE000, v689, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> called for stream %u (%p)", buf, 0x36u);
          v7 = v947;
        }
      }
    }
    if ((*(_WORD *)(v10 + 428) & 0x1000) == 0)
    {
      __nwlog_obj();
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_http1_remove_pending_stream";
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v10;
      v34 = (char *)_os_log_send_and_compose_impl();
      v970[0] = 16;
      LOBYTE(aBlock) = 0;
      if (!__nwlog_fault(v34, v970, &aBlock))
        goto LABEL_735;
      if (v970[0] == 17)
      {
        v35 = __nwlog_obj();
        v36 = v970[0];
        if (!os_log_type_enabled(v35, (os_log_type_t)v970[0]))
          goto LABEL_735;
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http1_remove_pending_stream";
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v10;
        v37 = "%{public}s stream %p not in pending list, cannot remove";
      }
      else if ((_BYTE)aBlock)
      {
        v43 = (char *)__nw_create_backtrace_string();
        v35 = __nwlog_obj();
        v36 = v970[0];
        v44 = os_log_type_enabled(v35, (os_log_type_t)v970[0]);
        if (v43)
        {
          if (!v44)
            goto LABEL_72;
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)&buf[4] = "nw_http1_remove_pending_stream";
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v10;
          *(_WORD *)&buf[22] = 2082;
          v968 = (uint64_t)v43;
          v45 = "%{public}s stream %p not in pending list, cannot remove, dumping backtrace:%{public}s";
LABEL_71:
          _os_log_impl(&dword_182FBE000, v35, v36, v45, buf, 0x20u);
LABEL_72:
          free(v43);
          if (!v34)
            goto LABEL_737;
          goto LABEL_736;
        }
        if (!v44)
          goto LABEL_735;
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http1_remove_pending_stream";
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v10;
        v37 = "%{public}s stream %p not in pending list, cannot remove, no backtrace";
      }
      else
      {
        v35 = __nwlog_obj();
        v36 = v970[0];
        if (!os_log_type_enabled(v35, (os_log_type_t)v970[0]))
          goto LABEL_735;
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http1_remove_pending_stream";
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v10;
        v37 = "%{public}s stream %p not in pending list, cannot remove, backtrace limit exceeded";
      }
LABEL_733:
      v456 = v35;
      v457 = v36;
      v458 = 22;
LABEL_734:
      _os_log_impl(&dword_182FBE000, v456, v457, v37, buf, v458);
      goto LABEL_735;
    }
    v41 = *(_QWORD *)(v10 + 296);
    v42 = *(_QWORD **)(v10 + 304);
    if (v41)
    {
      *(_QWORD *)(v41 + 304) = v42;
      v42 = *(_QWORD **)(v10 + 304);
    }
    else
    {
      *(_QWORD *)(v7 + 256) = v42;
    }
    *v42 = v41;
    *(_QWORD *)(v10 + 296) = 0;
    *(_QWORD *)(v10 + 304) = 0;
    v46 = *(_DWORD *)(v7 + 348);
    *(_DWORD *)(v7 + 348) = v46 - 1;
    if (v46)
    {
LABEL_97:
      *(_WORD *)(v10 + 428) &= ~0x1000u;
      if ((*(_BYTE *)(v10 + 158) & 1) == 0)
      {
        if (gLogDatapath)
        {
          v59 = __nwlog_obj();
          if (os_log_type_enabled(v59, OS_LOG_TYPE_DEBUG))
          {
            v60 = *(_QWORD *)(v10 + 256);
            v61 = *(_DWORD *)(*(_QWORD *)(v10 + 248) + 372);
            if (v60)
              LODWORD(v60) = *(_DWORD *)(v60 + 860);
            v62 = *(_DWORD *)(v10 + 424);
            v63 = *(_DWORD *)(v947 + 348);
            *(_DWORD *)buf = 136448258;
            *(_QWORD *)&buf[4] = "nw_http1_remove_pending_stream";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v10 + 74;
            *(_WORD *)&buf[22] = 2080;
            v968 = (uint64_t)" ";
            *(_WORD *)v969 = 1024;
            *(_DWORD *)&v969[2] = v61;
            *(_WORD *)&v969[6] = 1024;
            *(_DWORD *)&v969[8] = v60;
            *(_WORD *)&v969[12] = 1024;
            *(_DWORD *)&v969[14] = v62;
            *(_WORD *)&v969[18] = 1024;
            *(_DWORD *)&v969[20] = v62;
            *(_WORD *)&v969[24] = 2048;
            *(_QWORD *)&v969[26] = v10;
            *(_WORD *)&v969[34] = 1024;
            *(_DWORD *)&v969[36] = v63;
            v64 = "%{public}s %{public}s%s<i%u:c%u:s%u> removed pending stream %u (%p), now have %u pending streams";
            v65 = v59;
            v66 = 72;
            goto LABEL_103;
          }
        }
      }
LABEL_737:
      nw_protocol_disconnected(*(_QWORD **)(v10 + 48), v10);
      v25 = v947;
      if (!v12)
        goto LABEL_220;
LABEL_218:
      if ((*(_BYTE *)(v25 + 376) & 1) == 0
        || ((*(unsigned __int16 *)(v12 + 872) | (*(unsigned __int8 *)(v12 + 874) << 16)) & 0x20000) == 0)
      {
        goto LABEL_220;
      }
      if ((*(_BYTE *)(v12 + 158) & 1) == 0)
      {
        if (gLogDatapath)
        {
          v651 = __nwlog_obj();
          v652 = os_log_type_enabled(v651, OS_LOG_TYPE_DEBUG);
          v25 = v947;
          if (v652)
          {
            v653 = *(_QWORD *)(v12 + 488);
            v654 = *(_DWORD *)(*(_QWORD *)(v12 + 480) + 372);
            v655 = *(_DWORD *)(v12 + 860);
            if (v653)
              LODWORD(v653) = *(_DWORD *)(v653 + 424);
            *(_DWORD *)buf = 136447746;
            *(_QWORD *)&buf[4] = "nw_protocol_http1_disconnect";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v12 + 74;
            *(_WORD *)&buf[22] = 2080;
            v968 = (uint64_t)" ";
            *(_WORD *)v969 = 1024;
            *(_DWORD *)&v969[2] = v654;
            *(_WORD *)&v969[6] = 1024;
            *(_DWORD *)&v969[8] = v655;
            *(_WORD *)&v969[12] = 1024;
            *(_DWORD *)&v969[14] = v653;
            *(_WORD *)&v969[18] = 2048;
            *(_QWORD *)&v969[20] = v12;
            _os_log_impl(&dword_182FBE000, v651, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> triggering new flow on server connection %p, more input available", buf, 0x3Cu);
            v25 = v947;
          }
        }
      }
      if ((*(_BYTE *)(v25 + 376) & 1) == 0)
      {
        if ((*(_BYTE *)(v25 + 158) & 1) == 0)
        {
          if (gLogDatapath)
          {
            v129 = __nwlog_obj();
            if (os_log_type_enabled(v129, OS_LOG_TYPE_DEBUG))
            {
              v135 = *(_DWORD *)(v947 + 372);
              *(_DWORD *)buf = 136446978;
              *(_QWORD *)&buf[4] = "nw_http1_new_flow_valid";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v947 + 74;
              *(_WORD *)&buf[22] = 2080;
              v968 = (uint64_t)" ";
              *(_WORD *)v969 = 1024;
              *(_DWORD *)&v969[2] = v135;
              v131 = "%{public}s %{public}s%s<i%u> called when not in server mode, ignoring";
              goto LABEL_256;
            }
          }
        }
        return;
      }
      v143 = *(_QWORD ***)(v25 + 328);
      if (v143)
      {
        v144 = (unsigned __int16 *)(v12 + 872);
        v145 = *v143;
        if (v145 && *v145)
        {
          v146 = *(NSObject **)(v25 + 264);
          if (v146)
          {
            v147 = nw_parameters_copy(v146);
            *(_QWORD *)(v947 + 224) = v12;
            if ((***(unsigned int (****)(_QWORD, _QWORD, NSObject *))(v947 + 328))(*(_QWORD *)(v947 + 328), *(_QWORD *)(v947 + 280), v147)&& *(_QWORD *)(v12 + 488)&& !*(_QWORD *)(v947 + 224))
            {
              if ((*(_BYTE *)(v947 + 158) & 1) == 0)
              {
                if (gLogDatapath)
                {
                  v875 = __nwlog_obj();
                  if (os_log_type_enabled(v875, OS_LOG_TYPE_DEBUG))
                  {
                    v876 = *(_DWORD *)(v947 + 372);
                    *(_DWORD *)buf = 136446978;
                    *(_QWORD *)&buf[4] = "nw_http1_attempt_trigger_new_flow";
                    *(_WORD *)&buf[12] = 2082;
                    *(_QWORD *)&buf[14] = v947 + 74;
                    *(_WORD *)&buf[22] = 2080;
                    v968 = (uint64_t)" ";
                    *(_WORD *)v969 = 1024;
                    *(_DWORD *)&v969[2] = v876;
                    _os_log_impl(&dword_182FBE000, v875, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> sucessfully associated new flow stream with connection, awaiting connected", buf, 0x26u);
                  }
                }
              }
              v281 = *v144;
              v282 = (v281 | (*((unsigned __int8 *)v144 + 2) << 16)) & 0xFFFDFFFF;
              *v144 = v281;
              *((_BYTE *)v144 + 2) = BYTE2(v282);
              goto LABEL_763;
            }
            if ((*(_BYTE *)(v947 + 158) & 1) == 0)
            {
              v148 = __nwlog_obj();
              if (os_log_type_enabled(v148, OS_LOG_TYPE_ERROR))
              {
                v149 = *(_DWORD *)(v947 + 372);
                *(_DWORD *)buf = 136447234;
                *(_QWORD *)&buf[4] = "nw_http1_attempt_trigger_new_flow";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = v947 + 74;
                *(_WORD *)&buf[22] = 2080;
                v968 = (uint64_t)" ";
                *(_WORD *)v969 = 1024;
                *(_DWORD *)&v969[2] = v149;
                *(_WORD *)&v969[6] = 2048;
                *(_QWORD *)&v969[8] = v12;
                _os_log_impl(&dword_182FBE000, v148, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u> listen handler didn't accept the new flow, closing connection %p", buf, 0x30u);
              }
            }
            v150 = *v144;
            v151 = v150 | (*(unsigned __int8 *)(v12 + 874) << 16);
            if ((v150 & 0x100) != 0)
            {
              if ((*(_BYTE *)(v12 + 158) & 1) == 0)
              {
                if (gLogDatapath)
                {
                  v256 = __nwlog_obj();
                  if (os_log_type_enabled(v256, OS_LOG_TYPE_DEBUG))
                  {
                    v257 = *(_QWORD *)(v12 + 488);
                    v258 = *(_DWORD *)(*(_QWORD *)(v12 + 480) + 372);
                    v259 = *(_DWORD *)(v12 + 860);
                    if (v257)
                      LODWORD(v257) = *(_DWORD *)(v257 + 424);
                    *(_DWORD *)buf = 136447490;
                    *(_QWORD *)&buf[4] = "nw_http1_connection_close";
                    *(_WORD *)&buf[12] = 2082;
                    *(_QWORD *)&buf[14] = v12 + 74;
                    *(_WORD *)&buf[22] = 2080;
                    v968 = (uint64_t)" ";
                    *(_WORD *)v969 = 1024;
                    *(_DWORD *)&v969[2] = v258;
                    *(_WORD *)&v969[6] = 1024;
                    *(_DWORD *)&v969[8] = v259;
                    *(_WORD *)&v969[12] = 1024;
                    *(_DWORD *)&v969[14] = v257;
                    _os_log_impl(&dword_182FBE000, v256, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> already closed", buf, 0x32u);
                  }
                }
              }
              goto LABEL_763;
            }
            *(_BYTE *)(v12 + 874) = BYTE2(v151);
            *v144 = v151 | 0x100;
            if ((*(_BYTE *)(v12 + 158) & 1) == 0)
            {
              if (gLogDatapath)
              {
                v812 = __nwlog_obj();
                if (os_log_type_enabled(v812, OS_LOG_TYPE_DEBUG))
                {
                  v813 = *(_QWORD *)(v12 + 488);
                  v814 = *(_DWORD *)(*(_QWORD *)(v12 + 480) + 372);
                  v815 = *(_DWORD *)(v12 + 860);
                  if (v813)
                    LODWORD(v813) = *(_DWORD *)(v813 + 424);
                  *(_DWORD *)buf = 136447490;
                  *(_QWORD *)&buf[4] = "nw_http1_connection_close";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = v12 + 74;
                  *(_WORD *)&buf[22] = 2080;
                  v968 = (uint64_t)" ";
                  *(_WORD *)v969 = 1024;
                  *(_DWORD *)&v969[2] = v814;
                  *(_WORD *)&v969[6] = 1024;
                  *(_DWORD *)&v969[8] = v815;
                  *(_WORD *)&v969[12] = 1024;
                  *(_DWORD *)&v969[14] = v813;
                  _os_log_impl(&dword_182FBE000, v812, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> http connection closed, increasing pool width", buf, 0x32u);
                }
              }
            }
            v152 = *(_QWORD *)(v12 + 480);
            if (!v152)
            {
              __nwlog_obj();
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
              v808 = (char *)_os_log_send_and_compose_impl();
              v970[0] = 16;
              LOBYTE(aBlock) = 0;
              if (!__nwlog_fault(v808, v970, &aBlock))
                goto LABEL_1595;
              if (v970[0] == 17)
              {
                v809 = __nwlog_obj();
                v810 = v970[0];
                if (!os_log_type_enabled(v809, (os_log_type_t)v970[0]))
                  goto LABEL_1595;
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
                v811 = "%{public}s called with null http1";
              }
              else if ((_BYTE)aBlock)
              {
                v847 = (char *)__nw_create_backtrace_string();
                v809 = __nwlog_obj();
                v810 = v970[0];
                v848 = os_log_type_enabled(v809, (os_log_type_t)v970[0]);
                if (v847)
                {
                  if (v848)
                  {
                    *(_DWORD *)buf = 136446466;
                    *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
                    *(_WORD *)&buf[12] = 2082;
                    *(_QWORD *)&buf[14] = v847;
                    v849 = "%{public}s called with null http1, dumping backtrace:%{public}s";
                    v850 = buf;
LABEL_1442:
                    _os_log_impl(&dword_182FBE000, v809, v810, v849, v850, 0x16u);
                    goto LABEL_1443;
                  }
                  goto LABEL_1443;
                }
                if (!v848)
                  goto LABEL_1595;
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
                v811 = "%{public}s called with null http1, no backtrace";
              }
              else
              {
                v809 = __nwlog_obj();
                v810 = v970[0];
                if (!os_log_type_enabled(v809, (os_log_type_t)v970[0]))
                  goto LABEL_1595;
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
                v811 = "%{public}s called with null http1, backtrace limit exceeded";
              }
              v908 = buf;
LABEL_1594:
              _os_log_impl(&dword_182FBE000, v809, v810, v811, v908, 0xCu);
              goto LABEL_1595;
            }
            v153 = *v144;
            v154 = v153 | (*(unsigned __int8 *)(v12 + 874) << 16);
            if ((v153 & 0x800) != 0)
            {
              if ((*(_BYTE *)(v12 + 158) & 1) != 0
                || !gLogDatapath
                || (v274 = __nwlog_obj(), !os_log_type_enabled(v274, OS_LOG_TYPE_DEBUG)))
              {
LABEL_754:
                if (*(_QWORD *)(v12 + 488))
                  goto LABEL_763;
                goto LABEL_755;
              }
              v275 = *(_QWORD *)(v12 + 488);
              v276 = *(_DWORD *)(*(_QWORD *)(v12 + 480) + 372);
              v277 = *(_DWORD *)(v12 + 860);
              if (v275)
                LODWORD(v275) = *(_DWORD *)(v275 + 424);
              *(_DWORD *)buf = 136447490;
              *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v12 + 74;
              *(_WORD *)&buf[22] = 2080;
              v968 = (uint64_t)" ";
              *(_WORD *)v969 = 1024;
              *(_DWORD *)&v969[2] = v276;
              *(_WORD *)&v969[6] = 1024;
              *(_DWORD *)&v969[8] = v277;
              *(_WORD *)&v969[12] = 1024;
              *(_DWORD *)&v969[14] = v275;
              _os_log_impl(&dword_182FBE000, v274, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> Connection already marked as not-reusable, ignoring", buf, 0x32u);
              if (!*(_QWORD *)(v12 + 488))
              {
LABEL_755:
                v465 = *(_QWORD *)(v12 + 784);
                if (v465)
                {
                  nw_queue_set_timer_values(v465, 0x8000000000000000, 0xFFFFFFFFFFFFFFFFLL, 0x3B9ACA00uLL);
                }
                else
                {
                  if ((*(_BYTE *)(v12 + 158) & 1) == 0)
                  {
                    v466 = __nwlog_obj();
                    if (os_log_type_enabled(v466, OS_LOG_TYPE_ERROR))
                    {
                      v467 = *(_QWORD *)(v12 + 488);
                      v468 = *(_DWORD *)(*(_QWORD *)(v12 + 480) + 372);
                      v469 = *(_DWORD *)(v12 + 860);
                      if (v467)
                        LODWORD(v467) = *(_DWORD *)(v467 + 424);
                      *(_DWORD *)buf = 136447490;
                      *(_QWORD *)&buf[4] = "nw_http1_connection_close";
                      *(_WORD *)&buf[12] = 2082;
                      *(_QWORD *)&buf[14] = v12 + 74;
                      *(_WORD *)&buf[22] = 2080;
                      v968 = (uint64_t)" ";
                      *(_WORD *)v969 = 1024;
                      *(_DWORD *)&v969[2] = v468;
                      *(_WORD *)&v969[6] = 1024;
                      *(_DWORD *)&v969[8] = v469;
                      *(_WORD *)&v969[12] = 1024;
                      *(_DWORD *)&v969[14] = v467;
                      _os_log_impl(&dword_182FBE000, v466, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u:c%u:s%u> No destroy timer on HTTP/1 connection when closing", buf, 0x32u);
                    }
                  }
                  v470 = *(_QWORD *)(v12 + 608);
                  v471 = *(void **)(v12 + 496);
                  *(_QWORD *)buf = MEMORY[0x1E0C809B0];
                  *(_QWORD *)&buf[8] = 0x40000000;
                  *(_QWORD *)&buf[16] = ___ZL25nw_http1_connection_closeP19nw_http1_connection_block_invoke;
                  v968 = (uint64_t)&unk_1E14A14F0;
                  *(_QWORD *)v969 = v470;
                  nw_queue_context_async(v471, buf);
                }
              }
LABEL_763:
              if (!v147)
                return;
              goto LABEL_974;
            }
            *(_BYTE *)(v12 + 874) = BYTE2(v154);
            *v144 = v154 | 0x800;
            v155 = *(unsigned int *)(v152 + 368) + 1;
            v156 = v155 << 31 >> 31;
            *(_DWORD *)(v152 + 368) = v155;
            if (v156 == v155 && (v156 & 0x8000000000000000) == 0)
            {
LABEL_749:
              if ((*(_BYTE *)(v12 + 158) & 1) == 0)
              {
                if (gLogDatapath)
                {
                  v851 = __nwlog_obj();
                  if (os_log_type_enabled(v851, OS_LOG_TYPE_DEBUG))
                  {
                    v852 = *(_QWORD *)(v12 + 488);
                    v853 = *(_DWORD *)(*(_QWORD *)(v12 + 480) + 372);
                    v854 = *(_DWORD *)(v12 + 860);
                    if (v852)
                      LODWORD(v852) = *(_DWORD *)(v852 + 424);
                    v855 = *(_DWORD *)(v152 + 368) + *(_DWORD *)(v152 + 364);
                    *(_DWORD *)buf = 136447746;
                    *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
                    *(_WORD *)&buf[12] = 2082;
                    *(_QWORD *)&buf[14] = v12 + 74;
                    *(_WORD *)&buf[22] = 2080;
                    v968 = (uint64_t)" ";
                    *(_WORD *)v969 = 1024;
                    *(_DWORD *)&v969[2] = v853;
                    *(_WORD *)&v969[6] = 1024;
                    *(_DWORD *)&v969[8] = v854;
                    *(_WORD *)&v969[12] = 1024;
                    *(_DWORD *)&v969[14] = v852;
                    *(_WORD *)&v969[18] = 1024;
                    *(_DWORD *)&v969[20] = v855;
                    _os_log_impl(&dword_182FBE000, v851, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> connection marked as not-reusable, increased pool width to %u", buf, 0x38u);
                  }
                }
              }
              v462 = *(void **)(v12 + 496);
              if (v462)
              {
                v463 = *(_QWORD *)(v12 + 480);
                if (v463)
                {
                  v464 = *(_QWORD *)(v463 + 200);
                  *(_QWORD *)buf = MEMORY[0x1E0C809B0];
                  *(_QWORD *)&buf[8] = 0x40000000;
                  *(_QWORD *)&buf[16] = ___ZL56nw_http1_match_idle_connection_with_pending_stream_asyncP19nw_http1_connection_block_invoke;
                  v968 = (uint64_t)&unk_1E14A1518;
                  *(_QWORD *)v969 = v464;
                  nw_queue_context_async(v462, buf);
                  goto LABEL_754;
                }
                __nwlog_obj();
                *(_DWORD *)v970 = 136446210;
                *(_QWORD *)&v970[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
                v808 = (char *)_os_log_send_and_compose_impl();
                LOBYTE(aBlock) = 16;
                v962[0] = 0;
                if (!__nwlog_fault(v808, &aBlock, v962))
                {
LABEL_1595:
                  if (v808)
                    free(v808);
                  if (!*(_QWORD *)(v12 + 488))
                    goto LABEL_755;
                  goto LABEL_763;
                }
                if (aBlock == 17)
                {
                  v809 = __nwlog_obj();
                  v810 = aBlock;
                  if (!os_log_type_enabled(v809, (os_log_type_t)aBlock))
                    goto LABEL_1595;
                  *(_DWORD *)v970 = 136446210;
                  *(_QWORD *)&v970[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
                  v811 = "%{public}s called with null http1";
                  goto LABEL_1593;
                }
                if (!v962[0])
                {
                  v809 = __nwlog_obj();
                  v810 = aBlock;
                  if (!os_log_type_enabled(v809, (os_log_type_t)aBlock))
                    goto LABEL_1595;
                  *(_DWORD *)v970 = 136446210;
                  *(_QWORD *)&v970[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
                  v811 = "%{public}s called with null http1, backtrace limit exceeded";
                  goto LABEL_1593;
                }
                v847 = (char *)__nw_create_backtrace_string();
                v809 = __nwlog_obj();
                v810 = aBlock;
                v890 = os_log_type_enabled(v809, (os_log_type_t)aBlock);
                if (!v847)
                {
                  if (!v890)
                    goto LABEL_1595;
                  *(_DWORD *)v970 = 136446210;
                  *(_QWORD *)&v970[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
                  v811 = "%{public}s called with null http1, no backtrace";
                  goto LABEL_1593;
                }
                if (v890)
                {
                  *(_DWORD *)v970 = 136446466;
                  *(_QWORD *)&v970[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
                  *(_WORD *)&v970[12] = 2082;
                  *(_QWORD *)&v970[14] = v847;
                  v849 = "%{public}s called with null http1, dumping backtrace:%{public}s";
                  goto LABEL_1441;
                }
              }
              else
              {
                __nwlog_obj();
                *(_DWORD *)v970 = 136446210;
                *(_QWORD *)&v970[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
                v808 = (char *)_os_log_send_and_compose_impl();
                LOBYTE(aBlock) = 16;
                v962[0] = 0;
                if (!__nwlog_fault(v808, &aBlock, v962))
                  goto LABEL_1595;
                if (aBlock == 17)
                {
                  v809 = __nwlog_obj();
                  v810 = aBlock;
                  if (!os_log_type_enabled(v809, (os_log_type_t)aBlock))
                    goto LABEL_1595;
                  *(_DWORD *)v970 = 136446210;
                  *(_QWORD *)&v970[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
                  v811 = "%{public}s called with null http1_connection->context";
LABEL_1593:
                  v908 = v970;
                  goto LABEL_1594;
                }
                if (!v962[0])
                {
                  v809 = __nwlog_obj();
                  v810 = aBlock;
                  if (!os_log_type_enabled(v809, (os_log_type_t)aBlock))
                    goto LABEL_1595;
                  *(_DWORD *)v970 = 136446210;
                  *(_QWORD *)&v970[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
                  v811 = "%{public}s called with null http1_connection->context, backtrace limit exceeded";
                  goto LABEL_1593;
                }
                v847 = (char *)__nw_create_backtrace_string();
                v809 = __nwlog_obj();
                v810 = aBlock;
                v889 = os_log_type_enabled(v809, (os_log_type_t)aBlock);
                if (!v847)
                {
                  if (!v889)
                    goto LABEL_1595;
                  *(_DWORD *)v970 = 136446210;
                  *(_QWORD *)&v970[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
                  v811 = "%{public}s called with null http1_connection->context, no backtrace";
                  goto LABEL_1593;
                }
                if (v889)
                {
                  *(_DWORD *)v970 = 136446466;
                  *(_QWORD *)&v970[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
                  *(_WORD *)&v970[12] = 2082;
                  *(_QWORD *)&v970[14] = v847;
                  v849 = "%{public}s called with null http1_connection->context, dumping backtrace:%{public}s";
LABEL_1441:
                  v850 = v970;
                  goto LABEL_1442;
                }
              }
LABEL_1443:
              free(v847);
              goto LABEL_1595;
            }
            __nwlog_obj();
            v157 = *(unsigned int *)(v152 + 368);
            *(_DWORD *)buf = 136446978;
            *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = "http1->nonresuable_connections";
            *(_WORD *)&buf[22] = 2048;
            v968 = 1;
            *(_WORD *)v969 = 2048;
            *(_QWORD *)&v969[2] = v157;
            v158 = (char *)_os_log_send_and_compose_impl();
            v970[0] = 16;
            LOBYTE(aBlock) = 0;
            if (__nwlog_fault(v158, v970, &aBlock))
            {
              if (v970[0] == 17)
              {
                v159 = __nwlog_obj();
                v160 = v970[0];
                if (os_log_type_enabled(v159, (os_log_type_t)v970[0]))
                {
                  v161 = *(unsigned int *)(v152 + 368);
                  *(_DWORD *)buf = 136446978;
                  *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = "http1->nonresuable_connections";
                  *(_WORD *)&buf[22] = 2048;
                  v968 = 1;
                  *(_WORD *)v969 = 2048;
                  *(_QWORD *)&v969[2] = v161;
                  v162 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_745:
                  _os_log_impl(&dword_182FBE000, v159, v160, v162, buf, 0x2Au);
                }
              }
              else if ((_BYTE)aBlock)
              {
                v428 = (char *)__nw_create_backtrace_string();
                v159 = __nwlog_obj();
                v160 = v970[0];
                v429 = os_log_type_enabled(v159, (os_log_type_t)v970[0]);
                if (v428)
                {
                  if (v429)
                  {
                    v430 = *(unsigned int *)(v152 + 368);
                    *(_DWORD *)buf = 136447234;
                    *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
                    *(_WORD *)&buf[12] = 2082;
                    *(_QWORD *)&buf[14] = "http1->nonresuable_connections";
                    *(_WORD *)&buf[22] = 2048;
                    v968 = 1;
                    *(_WORD *)v969 = 2048;
                    *(_QWORD *)&v969[2] = v430;
                    *(_WORD *)&v969[10] = 2082;
                    *(_QWORD *)&v969[12] = v428;
                    _os_log_impl(&dword_182FBE000, v159, v160, "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
                  }
                  free(v428);
                  goto LABEL_746;
                }
                if (v429)
                {
                  v461 = *(unsigned int *)(v152 + 368);
                  *(_DWORD *)buf = 136446978;
                  *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = "http1->nonresuable_connections";
                  *(_WORD *)&buf[22] = 2048;
                  v968 = 1;
                  *(_WORD *)v969 = 2048;
                  *(_QWORD *)&v969[2] = v461;
                  v162 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
                  goto LABEL_745;
                }
              }
              else
              {
                v159 = __nwlog_obj();
                v160 = v970[0];
                if (os_log_type_enabled(v159, (os_log_type_t)v970[0]))
                {
                  v455 = *(unsigned int *)(v152 + 368);
                  *(_DWORD *)buf = 136446978;
                  *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = "http1->nonresuable_connections";
                  *(_WORD *)&buf[22] = 2048;
                  v968 = 1;
                  *(_WORD *)v969 = 2048;
                  *(_QWORD *)&v969[2] = v455;
                  v162 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
                  goto LABEL_745;
                }
              }
            }
LABEL_746:
            if (v158)
              free(v158);
            *(_DWORD *)(v152 + 368) = -1;
            goto LABEL_749;
          }
          if ((*(_BYTE *)(v25 + 158) & 1) == 0)
          {
            v201 = __nwlog_obj();
            if (os_log_type_enabled(v201, OS_LOG_TYPE_ERROR))
            {
              v202 = *(_DWORD *)(v947 + 372);
              *(_DWORD *)buf = 136446978;
              *(_QWORD *)&buf[4] = "nw_http1_attempt_trigger_new_flow";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v947 + 74;
              *(_WORD *)&buf[22] = 2080;
              v968 = (uint64_t)" ";
              *(_WORD *)v969 = 1024;
              *(_DWORD *)&v969[2] = v202;
              _os_log_impl(&dword_182FBE000, v201, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u> http1->parameters is NULL when opening responder stream", buf, 0x26u);
            }
          }
          __nwlog_obj();
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http1_attempt_trigger_new_flow";
          v71 = (char *)_os_log_send_and_compose_impl();
          v970[0] = 16;
          LOBYTE(aBlock) = 0;
          if (!__nwlog_fault(v71, v970, &aBlock))
            goto LABEL_1097;
          if (v970[0] == 17)
          {
            v72 = __nwlog_obj();
            v73 = v970[0];
            if (!os_log_type_enabled(v72, (os_log_type_t)v970[0]))
              goto LABEL_1097;
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_http1_attempt_trigger_new_flow";
            v74 = "%{public}s http1->parameters is NULL when opening responder stream";
            goto LABEL_1096;
          }
          if (!(_BYTE)aBlock)
          {
            v72 = __nwlog_obj();
            v73 = v970[0];
            if (!os_log_type_enabled(v72, (os_log_type_t)v970[0]))
              goto LABEL_1097;
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_http1_attempt_trigger_new_flow";
            v74 = "%{public}s http1->parameters is NULL when opening responder stream, backtrace limit exceeded";
            goto LABEL_1096;
          }
          v79 = (char *)__nw_create_backtrace_string();
          v72 = __nwlog_obj();
          v73 = v970[0];
          v260 = os_log_type_enabled(v72, (os_log_type_t)v970[0]);
          if (!v79)
          {
            if (!v260)
              goto LABEL_1097;
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_http1_attempt_trigger_new_flow";
            v74 = "%{public}s http1->parameters is NULL when opening responder stream, no backtrace";
            goto LABEL_1096;
          }
          if (v260)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_http1_attempt_trigger_new_flow";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v79;
            v81 = "%{public}s http1->parameters is NULL when opening responder stream, dumping backtrace:%{public}s";
            goto LABEL_1089;
          }
          goto LABEL_1090;
        }
        if ((*(_BYTE *)(v25 + 158) & 1) == 0)
        {
          v656 = __nwlog_obj();
          if (os_log_type_enabled(v656, OS_LOG_TYPE_ERROR))
          {
            v657 = *(_DWORD *)(v947 + 372);
            *(_DWORD *)buf = 136446978;
            *(_QWORD *)&buf[4] = "nw_http1_new_flow_valid";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v947 + 74;
            *(_WORD *)&buf[22] = 2080;
            v968 = (uint64_t)" ";
            *(_WORD *)v969 = 1024;
            *(_DWORD *)&v969[2] = v657;
            _os_log_impl(&dword_182FBE000, v656, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u> listen handler has no new_flow callback, ignoring incoming flow", buf, 0x26u);
          }
        }
        v658 = *v144;
        v659 = v658 | (*(unsigned __int8 *)(v12 + 874) << 16);
        if ((v658 & 0x100) == 0)
        {
          *(_BYTE *)(v12 + 874) = BYTE2(v659);
          *v144 = v659 | 0x100;
          if ((*(_BYTE *)(v12 + 158) & 1) == 0)
          {
            if (gLogDatapath)
            {
              v924 = __nwlog_obj();
              if (os_log_type_enabled(v924, OS_LOG_TYPE_DEBUG))
              {
                v925 = *(_QWORD *)(v12 + 488);
                v926 = *(_DWORD *)(*(_QWORD *)(v12 + 480) + 372);
                v927 = *(_DWORD *)(v12 + 860);
                if (v925)
                  LODWORD(v925) = *(_DWORD *)(v925 + 424);
                *(_DWORD *)buf = 136447490;
                *(_QWORD *)&buf[4] = "nw_http1_connection_close";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = v12 + 74;
                *(_WORD *)&buf[22] = 2080;
                v968 = (uint64_t)" ";
                *(_WORD *)v969 = 1024;
                *(_DWORD *)&v969[2] = v926;
                *(_WORD *)&v969[6] = 1024;
                *(_DWORD *)&v969[8] = v927;
                *(_WORD *)&v969[12] = 1024;
                *(_DWORD *)&v969[14] = v925;
                _os_log_impl(&dword_182FBE000, v924, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> http connection closed, increasing pool width", buf, 0x32u);
              }
            }
          }
          v660 = *(_QWORD *)(v12 + 480);
          if (!v660)
          {
            __nwlog_obj();
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
            v920 = (char *)_os_log_send_and_compose_impl();
            v970[0] = 16;
            LOBYTE(aBlock) = 0;
            if (!__nwlog_fault(v920, v970, &aBlock))
              goto LABEL_1650;
            if (v970[0] == 17)
            {
              v921 = __nwlog_obj();
              v922 = v970[0];
              if (!os_log_type_enabled(v921, (os_log_type_t)v970[0]))
                goto LABEL_1650;
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
              v923 = "%{public}s called with null http1";
            }
            else if ((_BYTE)aBlock)
            {
              v928 = (char *)__nw_create_backtrace_string();
              v921 = __nwlog_obj();
              v922 = v970[0];
              v929 = os_log_type_enabled(v921, (os_log_type_t)v970[0]);
              if (v928)
              {
                if (v929)
                {
                  *(_DWORD *)buf = 136446466;
                  *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = v928;
                  _os_log_impl(&dword_182FBE000, v921, v922, "%{public}s called with null http1, dumping backtrace:%{public}s", buf, 0x16u);
                }
                free(v928);
                goto LABEL_1650;
              }
              if (!v929)
                goto LABEL_1650;
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
              v923 = "%{public}s called with null http1, no backtrace";
            }
            else
            {
              v921 = __nwlog_obj();
              v922 = v970[0];
              if (!os_log_type_enabled(v921, (os_log_type_t)v970[0]))
                goto LABEL_1650;
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
              v923 = "%{public}s called with null http1, backtrace limit exceeded";
            }
            v939 = buf;
LABEL_1649:
            _os_log_impl(&dword_182FBE000, v921, v922, v923, v939, 0xCu);
            goto LABEL_1650;
          }
          v661 = *v144;
          v662 = v661 | (*(unsigned __int8 *)(v12 + 874) << 16);
          if ((v661 & 0x800) != 0)
          {
            if ((*(_BYTE *)(v12 + 158) & 1) == 0)
            {
              if (gLogDatapath)
              {
                v746 = __nwlog_obj();
                if (os_log_type_enabled(v746, OS_LOG_TYPE_DEBUG))
                {
                  v747 = *(_QWORD *)(v12 + 488);
                  v748 = *(_DWORD *)(*(_QWORD *)(v12 + 480) + 372);
                  v749 = *(_DWORD *)(v12 + 860);
                  if (v747)
                    LODWORD(v747) = *(_DWORD *)(v747 + 424);
                  *(_DWORD *)buf = 136447490;
                  *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = v12 + 74;
                  *(_WORD *)&buf[22] = 2080;
                  v968 = (uint64_t)" ";
                  *(_WORD *)v969 = 1024;
                  *(_DWORD *)&v969[2] = v748;
                  *(_WORD *)&v969[6] = 1024;
                  *(_DWORD *)&v969[8] = v749;
                  *(_WORD *)&v969[12] = 1024;
                  *(_DWORD *)&v969[14] = v747;
                  _os_log_impl(&dword_182FBE000, v746, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> Connection already marked as not-reusable, ignoring", buf, 0x32u);
                }
              }
            }
            goto LABEL_1559;
          }
          *(_BYTE *)(v12 + 874) = BYTE2(v662);
          *v144 = v662 | 0x800;
          v663 = *(unsigned int *)(v660 + 368) + 1;
          v664 = v663 << 31 >> 31;
          *(_DWORD *)(v660 + 368) = v663;
          if (v664 == v663 && (v664 & 0x8000000000000000) == 0)
          {
LABEL_1554:
            if ((*(_BYTE *)(v12 + 158) & 1) == 0)
            {
              if (gLogDatapath)
              {
                v930 = __nwlog_obj();
                if (os_log_type_enabled(v930, OS_LOG_TYPE_DEBUG))
                {
                  v931 = *(_QWORD *)(v12 + 488);
                  v932 = *(_DWORD *)(*(_QWORD *)(v12 + 480) + 372);
                  v933 = *(_DWORD *)(v12 + 860);
                  if (v931)
                    LODWORD(v931) = *(_DWORD *)(v931 + 424);
                  v934 = *(_DWORD *)(v660 + 368) + *(_DWORD *)(v660 + 364);
                  *(_DWORD *)buf = 136447746;
                  *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = v12 + 74;
                  *(_WORD *)&buf[22] = 2080;
                  v968 = (uint64_t)" ";
                  *(_WORD *)v969 = 1024;
                  *(_DWORD *)&v969[2] = v932;
                  *(_WORD *)&v969[6] = 1024;
                  *(_DWORD *)&v969[8] = v933;
                  *(_WORD *)&v969[12] = 1024;
                  *(_DWORD *)&v969[14] = v931;
                  *(_WORD *)&v969[18] = 1024;
                  *(_DWORD *)&v969[20] = v934;
                  _os_log_impl(&dword_182FBE000, v930, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> connection marked as not-reusable, increased pool width to %u", buf, 0x38u);
                }
              }
            }
            v910 = *(void **)(v12 + 496);
            if (!v910)
            {
              __nwlog_obj();
              *(_DWORD *)v970 = 136446210;
              *(_QWORD *)&v970[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
              v920 = (char *)_os_log_send_and_compose_impl();
              LOBYTE(aBlock) = 16;
              v962[0] = 0;
              if (!__nwlog_fault(v920, &aBlock, v962))
                goto LABEL_1650;
              if (aBlock == 17)
              {
                v921 = __nwlog_obj();
                v922 = aBlock;
                if (!os_log_type_enabled(v921, (os_log_type_t)aBlock))
                  goto LABEL_1650;
                *(_DWORD *)v970 = 136446210;
                *(_QWORD *)&v970[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
                v923 = "%{public}s called with null http1_connection->context";
LABEL_1648:
                v939 = v970;
                goto LABEL_1649;
              }
              if (!v962[0])
              {
                v921 = __nwlog_obj();
                v922 = aBlock;
                if (!os_log_type_enabled(v921, (os_log_type_t)aBlock))
                  goto LABEL_1650;
                *(_DWORD *)v970 = 136446210;
                *(_QWORD *)&v970[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
                v923 = "%{public}s called with null http1_connection->context, backtrace limit exceeded";
                goto LABEL_1648;
              }
              v935 = (char *)__nw_create_backtrace_string();
              v921 = __nwlog_obj();
              v922 = aBlock;
              v936 = os_log_type_enabled(v921, (os_log_type_t)aBlock);
              if (!v935)
              {
                if (!v936)
                  goto LABEL_1650;
                *(_DWORD *)v970 = 136446210;
                *(_QWORD *)&v970[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
                v923 = "%{public}s called with null http1_connection->context, no backtrace";
                goto LABEL_1648;
              }
              if (v936)
              {
                *(_DWORD *)v970 = 136446466;
                *(_QWORD *)&v970[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
                *(_WORD *)&v970[12] = 2082;
                *(_QWORD *)&v970[14] = v935;
                v937 = "%{public}s called with null http1_connection->context, dumping backtrace:%{public}s";
LABEL_1632:
                _os_log_impl(&dword_182FBE000, v921, v922, v937, v970, 0x16u);
              }
LABEL_1633:
              free(v935);
              if (!v920)
              {
LABEL_1559:
                if (!*(_QWORD *)(v12 + 488))
                {
                  v913 = *(_QWORD *)(v12 + 784);
                  if (v913)
                  {
                    nw_queue_set_timer_values(v913, 0x8000000000000000, 0xFFFFFFFFFFFFFFFFLL, 0x3B9ACA00uLL);
                  }
                  else
                  {
                    if ((*(_BYTE *)(v12 + 158) & 1) == 0)
                    {
                      v914 = __nwlog_obj();
                      if (os_log_type_enabled(v914, OS_LOG_TYPE_ERROR))
                      {
                        v915 = *(_QWORD *)(v12 + 488);
                        v916 = *(_DWORD *)(*(_QWORD *)(v12 + 480) + 372);
                        v917 = *(_DWORD *)(v12 + 860);
                        if (v915)
                          LODWORD(v915) = *(_DWORD *)(v915 + 424);
                        *(_DWORD *)buf = 136447490;
                        *(_QWORD *)&buf[4] = "nw_http1_connection_close";
                        *(_WORD *)&buf[12] = 2082;
                        *(_QWORD *)&buf[14] = v12 + 74;
                        *(_WORD *)&buf[22] = 2080;
                        v968 = (uint64_t)" ";
                        *(_WORD *)v969 = 1024;
                        *(_DWORD *)&v969[2] = v916;
                        *(_WORD *)&v969[6] = 1024;
                        *(_DWORD *)&v969[8] = v917;
                        *(_WORD *)&v969[12] = 1024;
                        *(_DWORD *)&v969[14] = v915;
                        _os_log_impl(&dword_182FBE000, v914, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u:c%u:s%u> No destroy timer on HTTP/1 connection when closing", buf, 0x32u);
                      }
                    }
                    v918 = *(_QWORD *)(v12 + 608);
                    v919 = *(void **)(v12 + 496);
                    *(_QWORD *)buf = MEMORY[0x1E0C809B0];
                    *(_QWORD *)&buf[8] = 0x40000000;
                    *(_QWORD *)&buf[16] = ___ZL25nw_http1_connection_closeP19nw_http1_connection_block_invoke;
                    v968 = (uint64_t)&unk_1E14A14F0;
                    *(_QWORD *)v969 = v918;
                    nw_queue_context_async(v919, buf);
                  }
                }
                return;
              }
LABEL_1651:
              free(v920);
              goto LABEL_1559;
            }
            v911 = *(_QWORD *)(v12 + 480);
            if (v911)
            {
              v912 = *(_QWORD *)(v911 + 200);
              *(_QWORD *)buf = MEMORY[0x1E0C809B0];
              *(_QWORD *)&buf[8] = 0x40000000;
              *(_QWORD *)&buf[16] = ___ZL56nw_http1_match_idle_connection_with_pending_stream_asyncP19nw_http1_connection_block_invoke;
              v968 = (uint64_t)&unk_1E14A1518;
              *(_QWORD *)v969 = v912;
              nw_queue_context_async(v910, buf);
              goto LABEL_1559;
            }
            __nwlog_obj();
            *(_DWORD *)v970 = 136446210;
            *(_QWORD *)&v970[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
            v920 = (char *)_os_log_send_and_compose_impl();
            LOBYTE(aBlock) = 16;
            v962[0] = 0;
            if (__nwlog_fault(v920, &aBlock, v962))
            {
              if (aBlock == 17)
              {
                v921 = __nwlog_obj();
                v922 = aBlock;
                if (!os_log_type_enabled(v921, (os_log_type_t)aBlock))
                  goto LABEL_1650;
                *(_DWORD *)v970 = 136446210;
                *(_QWORD *)&v970[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
                v923 = "%{public}s called with null http1";
                goto LABEL_1648;
              }
              if (!v962[0])
              {
                v921 = __nwlog_obj();
                v922 = aBlock;
                if (!os_log_type_enabled(v921, (os_log_type_t)aBlock))
                  goto LABEL_1650;
                *(_DWORD *)v970 = 136446210;
                *(_QWORD *)&v970[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
                v923 = "%{public}s called with null http1, backtrace limit exceeded";
                goto LABEL_1648;
              }
              v935 = (char *)__nw_create_backtrace_string();
              v921 = __nwlog_obj();
              v922 = aBlock;
              v938 = os_log_type_enabled(v921, (os_log_type_t)aBlock);
              if (!v935)
              {
                if (!v938)
                  goto LABEL_1650;
                *(_DWORD *)v970 = 136446210;
                *(_QWORD *)&v970[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
                v923 = "%{public}s called with null http1, no backtrace";
                goto LABEL_1648;
              }
              if (v938)
              {
                *(_DWORD *)v970 = 136446466;
                *(_QWORD *)&v970[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
                *(_WORD *)&v970[12] = 2082;
                *(_QWORD *)&v970[14] = v935;
                v937 = "%{public}s called with null http1, dumping backtrace:%{public}s";
                goto LABEL_1632;
              }
              goto LABEL_1633;
            }
LABEL_1650:
            if (!v920)
              goto LABEL_1559;
            goto LABEL_1651;
          }
          __nwlog_obj();
          v665 = *(unsigned int *)(v660 + 368);
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = "http1->nonresuable_connections";
          *(_WORD *)&buf[22] = 2048;
          v968 = 1;
          *(_WORD *)v969 = 2048;
          *(_QWORD *)&v969[2] = v665;
          v666 = (char *)_os_log_send_and_compose_impl();
          v970[0] = 16;
          LOBYTE(aBlock) = 0;
          if (__nwlog_fault(v666, v970, &aBlock))
          {
            if (v970[0] == 17)
            {
              v667 = __nwlog_obj();
              v668 = v970[0];
              if (os_log_type_enabled(v667, (os_log_type_t)v970[0]))
              {
                v669 = *(unsigned int *)(v660 + 368);
                *(_DWORD *)buf = 136446978;
                *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = "http1->nonresuable_connections";
                *(_WORD *)&buf[22] = 2048;
                v968 = 1;
                *(_WORD *)v969 = 2048;
                *(_QWORD *)&v969[2] = v669;
                v670 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_1550:
                _os_log_impl(&dword_182FBE000, v667, v668, v670, buf, 0x2Au);
              }
            }
            else if ((_BYTE)aBlock)
            {
              v856 = (char *)__nw_create_backtrace_string();
              v667 = __nwlog_obj();
              v668 = v970[0];
              v857 = os_log_type_enabled(v667, (os_log_type_t)v970[0]);
              if (v856)
              {
                if (v857)
                {
                  v858 = *(unsigned int *)(v660 + 368);
                  *(_DWORD *)buf = 136447234;
                  *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = "http1->nonresuable_connections";
                  *(_WORD *)&buf[22] = 2048;
                  v968 = 1;
                  *(_WORD *)v969 = 2048;
                  *(_QWORD *)&v969[2] = v858;
                  *(_WORD *)&v969[10] = 2082;
                  *(_QWORD *)&v969[12] = v856;
                  _os_log_impl(&dword_182FBE000, v667, v668, "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
                }
                free(v856);
                goto LABEL_1551;
              }
              if (v857)
              {
                v909 = *(unsigned int *)(v660 + 368);
                *(_DWORD *)buf = 136446978;
                *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = "http1->nonresuable_connections";
                *(_WORD *)&buf[22] = 2048;
                v968 = 1;
                *(_WORD *)v969 = 2048;
                *(_QWORD *)&v969[2] = v909;
                v670 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
                goto LABEL_1550;
              }
            }
            else
            {
              v667 = __nwlog_obj();
              v668 = v970[0];
              if (os_log_type_enabled(v667, (os_log_type_t)v970[0]))
              {
                v892 = *(unsigned int *)(v660 + 368);
                *(_DWORD *)buf = 136446978;
                *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = "http1->nonresuable_connections";
                *(_WORD *)&buf[22] = 2048;
                v968 = 1;
                *(_WORD *)v969 = 2048;
                *(_QWORD *)&v969[2] = v892;
                v670 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
                goto LABEL_1550;
              }
            }
          }
LABEL_1551:
          if (v666)
            free(v666);
          *(_DWORD *)(v660 + 368) = -1;
          goto LABEL_1554;
        }
        if ((*(_BYTE *)(v12 + 158) & 1) != 0)
          return;
        if (!gLogDatapath)
          return;
        v191 = __nwlog_obj();
        if (!os_log_type_enabled(v191, OS_LOG_TYPE_DEBUG))
          return;
        v699 = *(_QWORD *)(v12 + 488);
        v700 = *(_DWORD *)(*(_QWORD *)(v12 + 480) + 372);
        v701 = *(_DWORD *)(v12 + 860);
        if (v699)
          LODWORD(v699) = *(_DWORD *)(v699 + 424);
        *(_DWORD *)buf = 136447490;
        *(_QWORD *)&buf[4] = "nw_http1_connection_close";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v12 + 74;
        *(_WORD *)&buf[22] = 2080;
        v968 = (uint64_t)" ";
        *(_WORD *)v969 = 1024;
        *(_DWORD *)&v969[2] = v700;
        *(_WORD *)&v969[6] = 1024;
        *(_DWORD *)&v969[8] = v701;
        *(_WORD *)&v969[12] = 1024;
        *(_DWORD *)&v969[14] = v699;
        v131 = "%{public}s %{public}s%s<i%u:c%u:s%u> already closed";
      }
      else
      {
        if ((*(_BYTE *)(v12 + 158) & 1) != 0)
          return;
        v191 = __nwlog_obj();
        if (!os_log_type_enabled(v191, OS_LOG_TYPE_DEBUG))
          return;
        v192 = *(_QWORD *)(v12 + 488);
        v193 = *(_DWORD *)(*(_QWORD *)(v12 + 480) + 372);
        v194 = *(_DWORD *)(v12 + 860);
        if (v192)
          LODWORD(v192) = *(_DWORD *)(v192 + 424);
        *(_DWORD *)buf = 136447490;
        *(_QWORD *)&buf[4] = "nw_http1_new_flow_valid";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v12 + 74;
        *(_WORD *)&buf[22] = 2080;
        v968 = (uint64_t)" ";
        *(_WORD *)v969 = 1024;
        *(_DWORD *)&v969[2] = v193;
        *(_WORD *)&v969[6] = 1024;
        *(_DWORD *)&v969[8] = v194;
        *(_WORD *)&v969[12] = 1024;
        *(_DWORD *)&v969[14] = v192;
        v131 = "%{public}s %{public}s%s<i%u:c%u:s%u> called without listen handler, ignoring";
      }
      v133 = v191;
      v134 = 50;
      goto LABEL_257;
    }
    v47 = v7;
    __nwlog_obj();
    v48 = *(unsigned int *)(v47 + 348);
    *(_DWORD *)buf = 136446978;
    *(_QWORD *)&buf[4] = "nw_http1_remove_pending_stream";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = "http1->pending_stream_count";
    *(_WORD *)&buf[22] = 2048;
    v968 = 1;
    *(_WORD *)v969 = 2048;
    *(_QWORD *)&v969[2] = v48;
    v49 = (char *)_os_log_send_and_compose_impl();
    v970[0] = 16;
    LOBYTE(aBlock) = 0;
    if (__nwlog_fault(v49, v970, &aBlock))
    {
      if (v970[0] == 17)
      {
        v50 = __nwlog_obj();
        v51 = v970[0];
        if (os_log_type_enabled(v50, (os_log_type_t)v970[0]))
        {
          v52 = *(unsigned int *)(v947 + 348);
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_http1_remove_pending_stream";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = "http1->pending_stream_count";
          *(_WORD *)&buf[22] = 2048;
          v968 = 1;
          *(_WORD *)v969 = 2048;
          *(_QWORD *)&v969[2] = v52;
          v53 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu";
LABEL_93:
          _os_log_impl(&dword_182FBE000, v50, v51, v53, buf, 0x2Au);
        }
      }
      else if ((_BYTE)aBlock)
      {
        v54 = (char *)__nw_create_backtrace_string();
        v50 = __nwlog_obj();
        v51 = v970[0];
        v55 = os_log_type_enabled(v50, (os_log_type_t)v970[0]);
        if (v54)
        {
          if (v55)
          {
            v56 = *(unsigned int *)(v947 + 348);
            *(_DWORD *)buf = 136447234;
            *(_QWORD *)&buf[4] = "nw_http1_remove_pending_stream";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = "http1->pending_stream_count";
            *(_WORD *)&buf[22] = 2048;
            v968 = 1;
            *(_WORD *)v969 = 2048;
            *(_QWORD *)&v969[2] = v56;
            *(_WORD *)&v969[10] = 2082;
            *(_QWORD *)&v969[12] = v54;
            _os_log_impl(&dword_182FBE000, v50, v51, "%{public}s Underflow: %{public}s, decrement %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
          }
          free(v54);
          goto LABEL_94;
        }
        if (v55)
        {
          v58 = *(unsigned int *)(v947 + 348);
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_http1_remove_pending_stream";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = "http1->pending_stream_count";
          *(_WORD *)&buf[22] = 2048;
          v968 = 1;
          *(_WORD *)v969 = 2048;
          *(_QWORD *)&v969[2] = v58;
          v53 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, no backtrace";
          goto LABEL_93;
        }
      }
      else
      {
        v50 = __nwlog_obj();
        v51 = v970[0];
        if (os_log_type_enabled(v50, (os_log_type_t)v970[0]))
        {
          v57 = *(unsigned int *)(v947 + 348);
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_http1_remove_pending_stream";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = "http1->pending_stream_count";
          *(_WORD *)&buf[22] = 2048;
          v968 = 1;
          *(_WORD *)v969 = 2048;
          *(_QWORD *)&v969[2] = v57;
          v53 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, backtrace limit exceeded";
          goto LABEL_93;
        }
      }
    }
LABEL_94:
    if (v49)
      free(v49);
    *(_DWORD *)(v947 + 348) = 0;
    goto LABEL_97;
  }
  if ((*(_BYTE *)(v10 + 158) & 1) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v20 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      v21 = *(_QWORD *)(v10 + 256);
      v22 = *(_DWORD *)(*(_QWORD *)(v10 + 248) + 372);
      if (v21)
        LODWORD(v21) = *(_DWORD *)(v21 + 860);
      v23 = *(_DWORD *)(v10 + 424);
      *(_DWORD *)buf = 136447490;
      *(_QWORD *)&buf[4] = "nw_protocol_http1_disconnect";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v10 + 74;
      *(_WORD *)&buf[22] = 2080;
      v968 = (uint64_t)" ";
      *(_WORD *)v969 = 1024;
      *(_DWORD *)&v969[2] = v22;
      *(_WORD *)&v969[6] = 1024;
      *(_DWORD *)&v969[8] = v21;
      *(_WORD *)&v969[12] = 1024;
      *(_DWORD *)&v969[14] = v23;
      _os_log_impl(&dword_182FBE000, v20, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u:c%u:s%u> disconnecting the initial stream without connecting", buf, 0x32u);
    }
  }
  nw_protocol_disconnect(*(_QWORD **)(v10 + 32), v10);
  v25 = v947;
LABEL_220:
  v106 = *(_QWORD *)(v25 + 248);
  if (v106)
  {
    v107 = &unk_1ECD84000;
    v946 = *(_QWORD *)(v25 + 248);
    if ((*(_BYTE *)(v106 + 158) & 1) == 0)
    {
      if (gLogDatapath)
      {
        v624 = __nwlog_obj();
        v625 = os_log_type_enabled(v624, OS_LOG_TYPE_DEBUG);
        v107 = &unk_1ECD84000;
        v25 = v947;
        if (v625)
        {
          v626 = v106 + 74;
          v627 = *(_QWORD *)(v106 + 256);
          v628 = *(_DWORD *)(*(_QWORD *)(v106 + 248) + 372);
          if (v627)
            LODWORD(v627) = *(_DWORD *)(v627 + 860);
          v106 = v946;
          v629 = *(_DWORD *)(v946 + 424);
          *(_DWORD *)buf = 136448002;
          *(_QWORD *)&buf[4] = "nw_http1_get_next_pending_stream";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v626;
          *(_WORD *)&buf[22] = 2080;
          v968 = (uint64_t)" ";
          *(_WORD *)v969 = 1024;
          *(_DWORD *)&v969[2] = v628;
          *(_WORD *)&v969[6] = 1024;
          *(_DWORD *)&v969[8] = v627;
          *(_WORD *)&v969[12] = 1024;
          *(_DWORD *)&v969[14] = v629;
          *(_WORD *)&v969[18] = 1024;
          *(_DWORD *)&v969[20] = v629;
          *(_WORD *)&v969[24] = 2048;
          *(_QWORD *)&v969[26] = v946;
          _os_log_impl(&dword_182FBE000, v624, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> found stream %u (%p)", buf, 0x42u);
          v25 = v947;
          v107 = &unk_1ECD84000;
        }
      }
    }
    v108 = (_OWORD *)(v106 + 64);
    v109 = *(_QWORD *)(v25 + 208);
    if (v109)
    {
      v110 = 0;
      v111 = v25 + 74;
      do
      {
        v112 = v109;
        v109 = *(_QWORD *)(v109 + 592);
        if ((*(_WORD *)(v112 + 872) & 0x800) == 0)
        {
          if ((*(_BYTE *)(v25 + 158) & 1) != 0 || !v107[1345])
          {
            v110 = v112;
          }
          else
          {
            v940 = v111;
            v943 = v108;
            v113 = __nwlog_obj();
            if (os_log_type_enabled(v113, OS_LOG_TYPE_DEBUG))
            {
              v114 = *(_DWORD *)(v947 + 372);
              *(_DWORD *)buf = 136447234;
              *(_QWORD *)&buf[4] = "nw_http1_get_next_idle_connection";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v940;
              *(_WORD *)&buf[22] = 2080;
              v968 = (uint64_t)" ";
              *(_WORD *)v969 = 1024;
              *(_DWORD *)&v969[2] = v114;
              *(_WORD *)&v969[6] = 2048;
              *(_QWORD *)&v969[8] = v112;
              _os_log_impl(&dword_182FBE000, v113, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> found idle connection connection %p", buf, 0x30u);
              v111 = v940;
              v25 = v947;
              v110 = v112;
              v108 = v943;
              v107 = (_BYTE *)&unk_1ECD84000;
            }
            else
            {
              v110 = v112;
              v25 = v947;
              v108 = v943;
              v107 = (_BYTE *)&unk_1ECD84000;
              v111 = v940;
            }
          }
        }
      }
      while (v109);
      v106 = v946;
      if (v110)
      {
        v941 = v111;
        if ((*(_BYTE *)(v110 + 158) & 1) == 0)
        {
          if (v107[1345])
          {
            v639 = v108;
            v640 = v107;
            v641 = __nwlog_obj();
            v642 = os_log_type_enabled(v641, OS_LOG_TYPE_DEBUG);
            v107 = v640;
            v108 = v639;
            v25 = v947;
            if (v642)
            {
              v643 = *(_QWORD *)(v110 + 488);
              v644 = *(_DWORD *)(*(_QWORD *)(v110 + 480) + 372);
              v645 = *(_DWORD *)(v110 + 860);
              if (v643)
                LODWORD(v643) = *(_DWORD *)(v643 + 424);
              *(_DWORD *)buf = 136447746;
              *(_QWORD *)&buf[4] = "nw_http1_remove_idle_connection";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v110 + 74;
              *(_WORD *)&buf[22] = 2080;
              v968 = (uint64_t)" ";
              *(_WORD *)v969 = 1024;
              *(_DWORD *)&v969[2] = v644;
              *(_WORD *)&v969[6] = 1024;
              *(_DWORD *)&v969[8] = v645;
              *(_WORD *)&v969[12] = 1024;
              *(_DWORD *)&v969[14] = v643;
              *(_WORD *)&v969[18] = 2048;
              *(_QWORD *)&v969[20] = v110;
              _os_log_impl(&dword_182FBE000, v641, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> called for connection %p", buf, 0x3Cu);
              v25 = v947;
              v106 = v946;
              v108 = v639;
              v107 = v640;
            }
          }
        }
        v944 = v108;
        v115 = (_WORD *)(v110 + 872);
        if (((*(unsigned __int16 *)(v110 + 872) | (*(unsigned __int8 *)(v110 + 874) << 16)) & 0x80000) == 0)
        {
          v116 = v107;
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_http1_remove_idle_connection";
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v110;
          v117 = (char *)_os_log_send_and_compose_impl();
          v970[0] = 16;
          LOBYTE(aBlock) = 0;
          if (__nwlog_fault(v117, v970, &aBlock))
          {
            if (v970[0] == 17)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v118 = gLogObj;
              v119 = v970[0];
              if (os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v970[0]))
              {
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = "nw_http1_remove_idle_connection";
                *(_WORD *)&buf[12] = 2048;
                *(_QWORD *)&buf[14] = v110;
                v120 = "%{public}s connection %p not in idle list, cannot remove";
LABEL_428:
                _os_log_impl(&dword_182FBE000, v118, v119, v120, buf, 0x16u);
              }
            }
            else if ((_BYTE)aBlock)
            {
              v177 = (char *)__nw_create_backtrace_string();
              v118 = __nwlog_obj();
              v119 = v970[0];
              v178 = os_log_type_enabled(v118, (os_log_type_t)v970[0]);
              if (v177)
              {
                if (v178)
                {
                  *(_DWORD *)buf = 136446722;
                  *(_QWORD *)&buf[4] = "nw_http1_remove_idle_connection";
                  *(_WORD *)&buf[12] = 2048;
                  *(_QWORD *)&buf[14] = v110;
                  *(_WORD *)&buf[22] = 2082;
                  v968 = (uint64_t)v177;
                  _os_log_impl(&dword_182FBE000, v118, v119, "%{public}s connection %p not in idle list, cannot remove, dumping backtrace:%{public}s", buf, 0x20u);
                }
                free(v177);
                goto LABEL_429;
              }
              if (v178)
              {
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = "nw_http1_remove_idle_connection";
                *(_WORD *)&buf[12] = 2048;
                *(_QWORD *)&buf[14] = v110;
                v120 = "%{public}s connection %p not in idle list, cannot remove, no backtrace";
                goto LABEL_428;
              }
            }
            else
            {
              v118 = __nwlog_obj();
              v119 = v970[0];
              if (os_log_type_enabled(v118, (os_log_type_t)v970[0]))
              {
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = "nw_http1_remove_idle_connection";
                *(_WORD *)&buf[12] = 2048;
                *(_QWORD *)&buf[14] = v110;
                v120 = "%{public}s connection %p not in idle list, cannot remove, backtrace limit exceeded";
                goto LABEL_428;
              }
            }
          }
LABEL_429:
          v106 = v946;
          if (v117)
            free(v117);
          v25 = v947;
          v107 = v116;
          v115 = (_WORD *)(v110 + 872);
          goto LABEL_476;
        }
        v141 = *(_QWORD *)(v110 + 592);
        v142 = *(_QWORD **)(v110 + 600);
        if (v141)
        {
          *(_QWORD *)(v141 + 600) = v142;
          v142 = *(_QWORD **)(v110 + 600);
        }
        else
        {
          *(_QWORD *)(v25 + 216) = v142;
        }
        *v142 = v141;
        *(_QWORD *)(v110 + 592) = 0;
        *(_QWORD *)(v110 + 600) = 0;
        v182 = *(_DWORD *)(v25 + 340);
        *(_DWORD *)(v25 + 340) = v182 - 1;
        if (v182)
        {
LABEL_470:
          v284 = (unsigned __int16)*v115;
          v285 = (v284 | (*(unsigned __int8 *)(v110 + 874) << 16)) & 0xFFF7FFFF;
          *v115 = v284;
          *(_BYTE *)(v110 + 874) = BYTE2(v285);
          if ((*(_BYTE *)(v110 + 158) & 1) == 0)
          {
            if (v107[1345])
            {
              v671 = v107;
              v672 = __nwlog_obj();
              v673 = os_log_type_enabled(v672, OS_LOG_TYPE_DEBUG);
              v107 = v671;
              v25 = v947;
              if (v673)
              {
                v674 = *(_QWORD *)(v110 + 488);
                v675 = *(_DWORD *)(*(_QWORD *)(v110 + 480) + 372);
                v676 = *(_DWORD *)(v110 + 860);
                if (v674)
                  LODWORD(v674) = *(_DWORD *)(v674 + 424);
                v677 = *(_DWORD *)(v947 + 340);
                *(_DWORD *)buf = 136448002;
                *(_QWORD *)&buf[4] = "nw_http1_remove_idle_connection";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = v110 + 74;
                *(_WORD *)&buf[22] = 2080;
                v968 = (uint64_t)" ";
                *(_WORD *)v969 = 1024;
                *(_DWORD *)&v969[2] = v675;
                *(_WORD *)&v969[6] = 1024;
                *(_DWORD *)&v969[8] = v676;
                *(_WORD *)&v969[12] = 1024;
                *(_DWORD *)&v969[14] = v674;
                *(_WORD *)&v969[18] = 2048;
                *(_QWORD *)&v969[20] = v110;
                *(_WORD *)&v969[28] = 1024;
                *(_DWORD *)&v969[30] = v677;
                _os_log_impl(&dword_182FBE000, v672, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> removed idle connection %p, now have %u idle connections", buf, 0x42u);
                v25 = v947;
                v106 = v946;
                v107 = v671;
              }
            }
          }
          if (*(_QWORD *)(v110 + 784))
          {
            if ((*(_BYTE *)(v110 + 158) & 1) == 0)
            {
              if (v107[1345])
              {
                v693 = v107;
                v694 = __nwlog_obj();
                v695 = os_log_type_enabled(v694, OS_LOG_TYPE_DEBUG);
                v107 = v693;
                if (v695)
                {
                  v696 = *(_QWORD *)(v110 + 488);
                  v697 = *(_DWORD *)(*(_QWORD *)(v110 + 480) + 372);
                  v698 = *(_DWORD *)(v110 + 860);
                  if (v696)
                    LODWORD(v696) = *(_DWORD *)(v696 + 424);
                  *(_DWORD *)buf = 136447746;
                  *(_QWORD *)&buf[4] = "nw_http1_remove_idle_connection";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = v110 + 74;
                  *(_WORD *)&buf[22] = 2080;
                  v968 = (uint64_t)" ";
                  *(_WORD *)v969 = 1024;
                  *(_DWORD *)&v969[2] = v697;
                  *(_WORD *)&v969[6] = 1024;
                  *(_DWORD *)&v969[8] = v698;
                  *(_WORD *)&v969[12] = 1024;
                  *(_DWORD *)&v969[14] = v696;
                  *(_WORD *)&v969[18] = 2048;
                  *(_QWORD *)&v969[20] = v110;
                  _os_log_impl(&dword_182FBE000, v694, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> deactivating destroy timer for connection %p", buf, 0x3Cu);
                  v106 = v946;
                  v107 = v693;
                }
              }
            }
            v286 = v107;
            nw_queue_cancel_source(*(_QWORD *)(v110 + 784), v24);
            v107 = v286;
            *(_QWORD *)(v110 + 784) = 0;
            v25 = v947;
          }
LABEL_476:
          if ((*(_BYTE *)(v25 + 158) & 1) == 0)
          {
            if (v107[1345])
            {
              v646 = v107;
              v647 = __nwlog_obj();
              v648 = os_log_type_enabled(v647, OS_LOG_TYPE_DEBUG);
              v107 = v646;
              v25 = v947;
              if (v648)
              {
                v649 = *(_DWORD *)(v947 + 372);
                v650 = *(_DWORD *)(v106 + 424);
                *(_DWORD *)buf = 136447490;
                *(_QWORD *)&buf[4] = "nw_http1_remove_pending_stream";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = v941;
                *(_WORD *)&buf[22] = 2080;
                v968 = (uint64_t)" ";
                *(_WORD *)v969 = 1024;
                *(_DWORD *)&v969[2] = v649;
                *(_WORD *)&v969[6] = 1024;
                *(_DWORD *)&v969[8] = v650;
                *(_WORD *)&v969[12] = 2048;
                *(_QWORD *)&v969[14] = v106;
                _os_log_impl(&dword_182FBE000, v647, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> called for stream %u (%p)", buf, 0x36u);
                v107 = v646;
                v25 = v947;
              }
            }
          }
          if ((*(_WORD *)(v106 + 428) & 0x1000) == 0)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_http1_remove_pending_stream";
            *(_WORD *)&buf[12] = 2048;
            *(_QWORD *)&buf[14] = v106;
            v287 = (char *)_os_log_send_and_compose_impl();
            v970[0] = 16;
            LOBYTE(aBlock) = 0;
            if (!__nwlog_fault(v287, v970, &aBlock))
              goto LABEL_506;
            if (v970[0] == 17)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v288 = gLogObj;
              v289 = v970[0];
              if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v970[0]))
                goto LABEL_506;
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "nw_http1_remove_pending_stream";
              *(_WORD *)&buf[12] = 2048;
              *(_QWORD *)&buf[14] = v106;
              v290 = "%{public}s stream %p not in pending list, cannot remove";
            }
            else if ((_BYTE)aBlock)
            {
              v293 = (char *)__nw_create_backtrace_string();
              v288 = __nwlog_obj();
              v289 = v970[0];
              v294 = os_log_type_enabled(v288, (os_log_type_t)v970[0]);
              if (v293)
              {
                if (v294)
                {
                  *(_DWORD *)buf = 136446722;
                  *(_QWORD *)&buf[4] = "nw_http1_remove_pending_stream";
                  *(_WORD *)&buf[12] = 2048;
                  *(_QWORD *)&buf[14] = v106;
                  *(_WORD *)&buf[22] = 2082;
                  v968 = (uint64_t)v293;
                  _os_log_impl(&dword_182FBE000, v288, v289, "%{public}s stream %p not in pending list, cannot remove, dumping backtrace:%{public}s", buf, 0x20u);
                }
                free(v293);
                goto LABEL_506;
              }
              if (!v294)
              {
LABEL_506:
                if (v287)
                  free(v287);
                goto LABEL_518;
              }
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "nw_http1_remove_pending_stream";
              *(_WORD *)&buf[12] = 2048;
              *(_QWORD *)&buf[14] = v106;
              v290 = "%{public}s stream %p not in pending list, cannot remove, no backtrace";
            }
            else
            {
              v288 = __nwlog_obj();
              v289 = v970[0];
              if (!os_log_type_enabled(v288, (os_log_type_t)v970[0]))
                goto LABEL_506;
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "nw_http1_remove_pending_stream";
              *(_WORD *)&buf[12] = 2048;
              *(_QWORD *)&buf[14] = v106;
              v290 = "%{public}s stream %p not in pending list, cannot remove, backtrace limit exceeded";
            }
            _os_log_impl(&dword_182FBE000, v288, v289, v290, buf, 0x16u);
            goto LABEL_506;
          }
          v291 = *(_QWORD *)(v106 + 296);
          v292 = *(_QWORD **)(v106 + 304);
          if (v291)
          {
            *(_QWORD *)(v291 + 304) = v292;
            v292 = *(_QWORD **)(v106 + 304);
          }
          else
          {
            *(_QWORD *)(v25 + 256) = v292;
          }
          *v292 = v291;
          *(_QWORD *)(v106 + 296) = 0;
          *(_QWORD *)(v106 + 304) = 0;
          v295 = *(_DWORD *)(v25 + 348);
          *(_DWORD *)(v25 + 348) = v295 - 1;
          if (v295)
          {
LABEL_516:
            *(_WORD *)(v106 + 428) &= ~0x1000u;
            if ((*(_BYTE *)(v106 + 158) & 1) == 0)
            {
              if (v107[1345])
              {
                v678 = __nwlog_obj();
                if (os_log_type_enabled(v678, OS_LOG_TYPE_DEBUG))
                {
                  v679 = v106 + 74;
                  v680 = *(_QWORD *)(v106 + 256);
                  v681 = *(_DWORD *)(*(_QWORD *)(v106 + 248) + 372);
                  if (v680)
                    LODWORD(v680) = *(_DWORD *)(v680 + 860);
                  v106 = v946;
                  v682 = *(_DWORD *)(v946 + 424);
                  v683 = *(_DWORD *)(v947 + 348);
                  *(_DWORD *)buf = 136448258;
                  *(_QWORD *)&buf[4] = "nw_http1_remove_pending_stream";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = v679;
                  *(_WORD *)&buf[22] = 2080;
                  v968 = (uint64_t)" ";
                  *(_WORD *)v969 = 1024;
                  *(_DWORD *)&v969[2] = v681;
                  *(_WORD *)&v969[6] = 1024;
                  *(_DWORD *)&v969[8] = v680;
                  *(_WORD *)&v969[12] = 1024;
                  *(_DWORD *)&v969[14] = v682;
                  *(_WORD *)&v969[18] = 1024;
                  *(_DWORD *)&v969[20] = v682;
                  *(_WORD *)&v969[24] = 2048;
                  *(_QWORD *)&v969[26] = v946;
                  *(_WORD *)&v969[34] = 1024;
                  *(_DWORD *)&v969[36] = v683;
                  _os_log_impl(&dword_182FBE000, v678, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> removed pending stream %u (%p), now have %u pending streams", buf, 0x48u);
                }
              }
            }
LABEL_518:
            if (*(_QWORD *)(v106 + 248))
            {
              if (!*(_QWORD *)(v110 + 488))
              {
                *(_QWORD *)(v106 + 256) = v110;
                *(_QWORD *)(v110 + 488) = v106;
                nw_protocol_set_output_handler(v106, *(_QWORD *)(v110 + 32));
                nw_protocol_set_input_handler(v110, *(_QWORD *)(v106 + 48));
                *(_OWORD *)v106 = *(_OWORD *)v110;
                v315 = v944[5];
                v317 = v944[2];
                v316 = v944[3];
                *(_OWORD *)(v110 + 128) = v944[4];
                *(_OWORD *)(v110 + 144) = v315;
                *(_OWORD *)(v110 + 96) = v317;
                *(_OWORD *)(v110 + 112) = v316;
                v318 = v944[1];
                *(_OWORD *)(v110 + 64) = *v944;
                *(_OWORD *)(v110 + 80) = v318;
                nw_http_transaction_metadata_set_connection_metadata(*(void **)(v106 + 352), *(void **)(v110 + 768));
                *v115 &= 0xFFD7u;
                *(_DWORD *)(v110 + 864) = 1;
                if ((*(_BYTE *)(v110 + 158) & 1) == 0)
                {
                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                  networkd_settings_init();
                  v319 = gLogObj;
                  if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
                  {
                    v320 = *(_QWORD *)(v110 + 488);
                    v321 = *(_DWORD *)(*(_QWORD *)(v110 + 480) + 372);
                    v322 = *(_DWORD *)(v110 + 860);
                    if (v320)
                      LODWORD(v320) = *(_DWORD *)(v320 + 424);
                    *(_DWORD *)buf = 136447490;
                    *(_QWORD *)&buf[4] = "nw_http1_update_connection_input_state";
                    *(_WORD *)&buf[12] = 2082;
                    *(_QWORD *)&buf[14] = v110 + 74;
                    *(_WORD *)&buf[22] = 2080;
                    v968 = (uint64_t)" ";
                    *(_WORD *)v969 = 1024;
                    *(_DWORD *)&v969[2] = v321;
                    *(_WORD *)&v969[6] = 1024;
                    *(_DWORD *)&v969[8] = v322;
                    *(_WORD *)&v969[12] = 1024;
                    *(_DWORD *)&v969[14] = v320;
                    _os_log_impl(&dword_182FBE000, v319, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> connection input state: reading", buf, 0x32u);
                  }
                }
                if ((*(_BYTE *)(v106 + 158) & 1) == 0)
                {
                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                  networkd_settings_init();
                  v323 = gLogObj;
                  if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
                  {
                    v324 = *(_QWORD *)(v106 + 256);
                    v325 = *(_DWORD *)(*(_QWORD *)(v106 + 248) + 372);
                    if (v324)
                      LODWORD(v324) = *(_DWORD *)(v324 + 860);
                    v326 = *(_DWORD *)(v106 + 424);
                    *(_DWORD *)buf = 136448002;
                    *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                    *(_WORD *)&buf[12] = 2082;
                    *(_QWORD *)&buf[14] = v106 + 74;
                    *(_WORD *)&buf[22] = 2080;
                    v968 = (uint64_t)" ";
                    *(_WORD *)v969 = 1024;
                    *(_DWORD *)&v969[2] = v325;
                    *(_WORD *)&v969[6] = 1024;
                    *(_DWORD *)&v969[8] = v324;
                    *(_WORD *)&v969[12] = 1024;
                    *(_DWORD *)&v969[14] = v326;
                    *(_WORD *)&v969[18] = 2048;
                    *(_QWORD *)&v969[20] = v106;
                    *(_WORD *)&v969[28] = 2048;
                    *(_QWORD *)&v969[30] = v110;
                    _os_log_impl(&dword_182FBE000, v323, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s<i%u:c%u:s%u> stream (%p) now using connection %p", buf, 0x46u);
                  }
                }
                goto LABEL_546;
              }
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v309 = *(_QWORD *)(v110 + 488);
              *(_DWORD *)buf = 136446722;
              *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
              *(_WORD *)&buf[12] = 2048;
              *(_QWORD *)&buf[14] = v110;
              *(_WORD *)&buf[22] = 2048;
              v968 = v309;
              v310 = (char *)_os_log_send_and_compose_impl();
              v970[0] = 16;
              LOBYTE(aBlock) = 0;
              if (__nwlog_fault(v310, v970, &aBlock))
              {
                if (v970[0] == 17)
                {
                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                  networkd_settings_init();
                  v311 = gLogObj;
                  v312 = v970[0];
                  if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v970[0]))
                    goto LABEL_544;
                  v313 = *(_QWORD *)(v110 + 488);
                  *(_DWORD *)buf = 136446722;
                  *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                  *(_WORD *)&buf[12] = 2048;
                  *(_QWORD *)&buf[14] = v110;
                  *(_WORD *)&buf[22] = 2048;
                  v968 = v313;
                  v314 = "%{public}s Connection %p already has a stream (%p)";
                  goto LABEL_543;
                }
                if (!(_BYTE)aBlock)
                {
                  v311 = __nwlog_obj();
                  v312 = v970[0];
                  if (!os_log_type_enabled(v311, (os_log_type_t)v970[0]))
                    goto LABEL_544;
                  v330 = *(_QWORD *)(v110 + 488);
                  *(_DWORD *)buf = 136446722;
                  *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                  *(_WORD *)&buf[12] = 2048;
                  *(_QWORD *)&buf[14] = v110;
                  *(_WORD *)&buf[22] = 2048;
                  v968 = v330;
                  v314 = "%{public}s Connection %p already has a stream (%p), backtrace limit exceeded";
                  goto LABEL_543;
                }
                v327 = (char *)__nw_create_backtrace_string();
                v311 = __nwlog_obj();
                v312 = v970[0];
                v328 = os_log_type_enabled(v311, (os_log_type_t)v970[0]);
                if (v327)
                {
                  if (v328)
                  {
                    v329 = *(_QWORD *)(v110 + 488);
                    *(_DWORD *)buf = 136446978;
                    *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                    *(_WORD *)&buf[12] = 2048;
                    *(_QWORD *)&buf[14] = v110;
                    *(_WORD *)&buf[22] = 2048;
                    v968 = v329;
                    *(_WORD *)v969 = 2082;
                    *(_QWORD *)&v969[2] = v327;
                    _os_log_impl(&dword_182FBE000, v311, v312, "%{public}s Connection %p already has a stream (%p), dumping backtrace:%{public}s", buf, 0x2Au);
                  }
                  free(v327);
                  goto LABEL_544;
                }
                if (v328)
                {
                  v331 = *(_QWORD *)(v110 + 488);
                  *(_DWORD *)buf = 136446722;
                  *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                  *(_WORD *)&buf[12] = 2048;
                  *(_QWORD *)&buf[14] = v110;
                  *(_WORD *)&buf[22] = 2048;
                  v968 = v331;
                  v314 = "%{public}s Connection %p already has a stream (%p), no backtrace";
LABEL_543:
                  _os_log_impl(&dword_182FBE000, v311, v312, v314, buf, 0x20u);
                }
              }
LABEL_544:
              if (v310)
                free(v310);
LABEL_546:
              *(_WORD *)(v106 + 428) |= 0x4000u;
              v332 = *(void **)(v106 + 352);
              *(_QWORD *)buf = MEMORY[0x1E0C809B0];
              *(_QWORD *)&buf[8] = 0x40000000;
              *(_QWORD *)&buf[16] = ___ZL50nw_http1_match_idle_connection_with_pending_streamP17nw_protocol_http1_block_invoke;
              v968 = (uint64_t)&__block_descriptor_tmp_52_39794;
              *(_QWORD *)v969 = v106;
              nw_http_transaction_metadata_set_event_handler(v332, buf);
              nw_protocol_connected(*(_QWORD **)(v106 + 48), v106);
              return;
            }
            __nwlog_obj();
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
            v635 = (char *)_os_log_send_and_compose_impl();
            v970[0] = 16;
            LOBYTE(aBlock) = 0;
            if (__nwlog_fault(v635, v970, &aBlock))
            {
              if (v970[0] == 17)
              {
                v636 = __nwlog_obj();
                v637 = v970[0];
                if (os_log_type_enabled(v636, (os_log_type_t)v970[0]))
                {
                  *(_DWORD *)buf = 136446210;
                  *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                  v638 = "%{public}s called with null http1_stream->protocol_http1";
LABEL_1156:
                  _os_log_impl(&dword_182FBE000, v636, v637, v638, buf, 0xCu);
                }
              }
              else if ((_BYTE)aBlock)
              {
                v684 = (char *)__nw_create_backtrace_string();
                v636 = __nwlog_obj();
                v637 = v970[0];
                v685 = os_log_type_enabled(v636, (os_log_type_t)v970[0]);
                if (v684)
                {
                  if (v685)
                  {
                    *(_DWORD *)buf = 136446466;
                    *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                    *(_WORD *)&buf[12] = 2082;
                    *(_QWORD *)&buf[14] = v684;
                    _os_log_impl(&dword_182FBE000, v636, v637, "%{public}s called with null http1_stream->protocol_http1, dumping backtrace:%{public}s", buf, 0x16u);
                  }
                  free(v684);
                  goto LABEL_1157;
                }
                if (v685)
                {
                  *(_DWORD *)buf = 136446210;
                  *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                  v638 = "%{public}s called with null http1_stream->protocol_http1, no backtrace";
                  goto LABEL_1156;
                }
              }
              else
              {
                v636 = __nwlog_obj();
                v637 = v970[0];
                if (os_log_type_enabled(v636, (os_log_type_t)v970[0]))
                {
                  *(_DWORD *)buf = 136446210;
                  *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                  v638 = "%{public}s called with null http1_stream->protocol_http1, backtrace limit exceeded";
                  goto LABEL_1156;
                }
              }
            }
LABEL_1157:
            if (v635)
              free(v635);
            v106 = v946;
            goto LABEL_546;
          }
          v296 = v107;
          v297 = v25;
          __nwlog_obj();
          v298 = *(unsigned int *)(v297 + 348);
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_http1_remove_pending_stream";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = "http1->pending_stream_count";
          *(_WORD *)&buf[22] = 2048;
          v968 = 1;
          *(_WORD *)v969 = 2048;
          *(_QWORD *)&v969[2] = v298;
          v299 = (char *)_os_log_send_and_compose_impl();
          v970[0] = 16;
          LOBYTE(aBlock) = 0;
          if (__nwlog_fault(v299, v970, &aBlock))
          {
            if (v970[0] == 17)
            {
              v300 = __nwlog_obj();
              v301 = v970[0];
              if (os_log_type_enabled(v300, (os_log_type_t)v970[0]))
              {
                v302 = *(unsigned int *)(v947 + 348);
                *(_DWORD *)buf = 136446978;
                *(_QWORD *)&buf[4] = "nw_http1_remove_pending_stream";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = "http1->pending_stream_count";
                *(_WORD *)&buf[22] = 2048;
                v968 = 1;
                *(_WORD *)v969 = 2048;
                *(_QWORD *)&v969[2] = v302;
                v303 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu";
LABEL_512:
                _os_log_impl(&dword_182FBE000, v300, v301, v303, buf, 0x2Au);
              }
            }
            else if ((_BYTE)aBlock)
            {
              v304 = (char *)__nw_create_backtrace_string();
              v300 = __nwlog_obj();
              v301 = v970[0];
              v305 = os_log_type_enabled(v300, (os_log_type_t)v970[0]);
              if (v304)
              {
                if (v305)
                {
                  v306 = *(unsigned int *)(v947 + 348);
                  *(_DWORD *)buf = 136447234;
                  *(_QWORD *)&buf[4] = "nw_http1_remove_pending_stream";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = "http1->pending_stream_count";
                  *(_WORD *)&buf[22] = 2048;
                  v968 = 1;
                  *(_WORD *)v969 = 2048;
                  *(_QWORD *)&v969[2] = v306;
                  *(_WORD *)&v969[10] = 2082;
                  *(_QWORD *)&v969[12] = v304;
                  _os_log_impl(&dword_182FBE000, v300, v301, "%{public}s Underflow: %{public}s, decrement %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
                }
                free(v304);
                goto LABEL_513;
              }
              if (v305)
              {
                v308 = *(unsigned int *)(v947 + 348);
                *(_DWORD *)buf = 136446978;
                *(_QWORD *)&buf[4] = "nw_http1_remove_pending_stream";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = "http1->pending_stream_count";
                *(_WORD *)&buf[22] = 2048;
                v968 = 1;
                *(_WORD *)v969 = 2048;
                *(_QWORD *)&v969[2] = v308;
                v303 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, no backtrace";
                goto LABEL_512;
              }
            }
            else
            {
              v300 = __nwlog_obj();
              v301 = v970[0];
              if (os_log_type_enabled(v300, (os_log_type_t)v970[0]))
              {
                v307 = *(unsigned int *)(v947 + 348);
                *(_DWORD *)buf = 136446978;
                *(_QWORD *)&buf[4] = "nw_http1_remove_pending_stream";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = "http1->pending_stream_count";
                *(_WORD *)&buf[22] = 2048;
                v968 = 1;
                *(_WORD *)v969 = 2048;
                *(_QWORD *)&v969[2] = v307;
                v303 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, backtrace limit exceeded";
                goto LABEL_512;
              }
            }
          }
LABEL_513:
          if (v299)
            free(v299);
          *(_DWORD *)(v947 + 348) = 0;
          v106 = v946;
          v107 = v296;
          goto LABEL_516;
        }
        v183 = v107;
        v184 = v25;
        __nwlog_obj();
        v185 = *(unsigned int *)(v184 + 340);
        *(_DWORD *)buf = 136446978;
        *(_QWORD *)&buf[4] = "nw_http1_remove_idle_connection";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = "http1->idle_connections_count";
        *(_WORD *)&buf[22] = 2048;
        v968 = 1;
        *(_WORD *)v969 = 2048;
        *(_QWORD *)&v969[2] = v185;
        v186 = (char *)_os_log_send_and_compose_impl();
        v970[0] = 16;
        LOBYTE(aBlock) = 0;
        if (__nwlog_fault(v186, v970, &aBlock))
        {
          if (v970[0] == 17)
          {
            v187 = __nwlog_obj();
            v188 = v970[0];
            if (os_log_type_enabled(v187, (os_log_type_t)v970[0]))
            {
              v189 = *(unsigned int *)(v947 + 340);
              *(_DWORD *)buf = 136446978;
              *(_QWORD *)&buf[4] = "nw_http1_remove_idle_connection";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = "http1->idle_connections_count";
              *(_WORD *)&buf[22] = 2048;
              v968 = 1;
              *(_WORD *)v969 = 2048;
              *(_QWORD *)&v969[2] = v189;
              v190 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu";
LABEL_466:
              _os_log_impl(&dword_182FBE000, v187, v188, v190, buf, 0x2Au);
            }
          }
          else if ((_BYTE)aBlock)
          {
            v211 = (char *)__nw_create_backtrace_string();
            v187 = __nwlog_obj();
            v188 = v970[0];
            v212 = os_log_type_enabled(v187, (os_log_type_t)v970[0]);
            if (v211)
            {
              if (v212)
              {
                v213 = *(unsigned int *)(v947 + 340);
                *(_DWORD *)buf = 136447234;
                *(_QWORD *)&buf[4] = "nw_http1_remove_idle_connection";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = "http1->idle_connections_count";
                *(_WORD *)&buf[22] = 2048;
                v968 = 1;
                *(_WORD *)v969 = 2048;
                *(_QWORD *)&v969[2] = v213;
                *(_WORD *)&v969[10] = 2082;
                *(_QWORD *)&v969[12] = v211;
                _os_log_impl(&dword_182FBE000, v187, v188, "%{public}s Underflow: %{public}s, decrement %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
              }
              free(v211);
              goto LABEL_467;
            }
            if (v212)
            {
              v283 = *(unsigned int *)(v947 + 340);
              *(_DWORD *)buf = 136446978;
              *(_QWORD *)&buf[4] = "nw_http1_remove_idle_connection";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = "http1->idle_connections_count";
              *(_WORD *)&buf[22] = 2048;
              v968 = 1;
              *(_WORD *)v969 = 2048;
              *(_QWORD *)&v969[2] = v283;
              v190 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, no backtrace";
              goto LABEL_466;
            }
          }
          else
          {
            v187 = __nwlog_obj();
            v188 = v970[0];
            if (os_log_type_enabled(v187, (os_log_type_t)v970[0]))
            {
              v280 = *(unsigned int *)(v947 + 340);
              *(_DWORD *)buf = 136446978;
              *(_QWORD *)&buf[4] = "nw_http1_remove_idle_connection";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = "http1->idle_connections_count";
              *(_WORD *)&buf[22] = 2048;
              v968 = 1;
              *(_WORD *)v969 = 2048;
              *(_QWORD *)&v969[2] = v280;
              v190 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, backtrace limit exceeded";
              goto LABEL_466;
            }
          }
        }
LABEL_467:
        if (v186)
          free(v186);
        v25 = v947;
        *(_DWORD *)(v947 + 340) = 0;
        v107 = v183;
        goto LABEL_470;
      }
    }
    if ((*(_BYTE *)(v25 + 158) & 1) == 0)
    {
      if (v107[1345])
      {
        v630 = v108;
        v631 = v107;
        v632 = __nwlog_obj();
        v633 = os_log_type_enabled(v632, OS_LOG_TYPE_DEBUG);
        v107 = v631;
        v108 = v630;
        v25 = v947;
        if (v633)
        {
          v634 = *(_DWORD *)(v947 + 372);
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_http1_get_next_idle_connection";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v947 + 74;
          *(_WORD *)&buf[22] = 2080;
          v968 = (uint64_t)" ";
          *(_WORD *)v969 = 1024;
          *(_DWORD *)&v969[2] = v634;
          _os_log_impl(&dword_182FBE000, v632, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> no idle connections", buf, 0x26u);
          v107 = v631;
          v108 = v630;
          v25 = v947;
        }
      }
    }
    if (*(_QWORD *)(v106 + 256))
    {
      if ((*(_BYTE *)(v106 + 158) & 1) == 0)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v121 = gLogObj;
        v122 = os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG);
        v25 = v947;
        if (v122)
        {
          v123 = *(_QWORD *)(v106 + 256);
          v124 = *(_DWORD *)(*(_QWORD *)(v106 + 248) + 372);
          if (v123)
            LODWORD(v123) = *(_DWORD *)(v123 + 860);
          v125 = *(_DWORD *)(v106 + 424);
          *(_DWORD *)buf = 136447490;
          *(_QWORD *)&buf[4] = "nw_http1_create_connection_for_stream_if_allowed";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v106 + 74;
          *(_WORD *)&buf[22] = 2080;
          v968 = (uint64_t)" ";
          *(_WORD *)v969 = 1024;
          *(_DWORD *)&v969[2] = v124;
          *(_WORD *)&v969[6] = 1024;
          *(_DWORD *)&v969[8] = v123;
          *(_WORD *)&v969[12] = 1024;
          *(_DWORD *)&v969[14] = v125;
          v126 = "%{public}s %{public}s%s<i%u:c%u:s%u> stream already has current connection, ignoring";
          v127 = v121;
          v128 = 50;
LABEL_249:
          _os_log_impl(&dword_182FBE000, v127, OS_LOG_TYPE_DEBUG, v126, buf, v128);
          v25 = v947;
          goto LABEL_250;
        }
      }
      goto LABEL_250;
    }
    v945 = v108;
    if ((*(_WORD *)(v106 + 428) & 8) == 0)
    {
      if (*(_DWORD *)(v25 + 336) + *(_DWORD *)(v25 + 352) >= (*(_DWORD *)(v25 + 368)
                                                                           + *(_DWORD *)(v25 + 364)))
      {
        if ((*(_BYTE *)(v106 + 158) & 1) == 0)
        {
          v195 = __nwlog_obj();
          v196 = os_log_type_enabled(v195, OS_LOG_TYPE_DEBUG);
          v25 = v947;
          if (v196)
          {
            v197 = *(_QWORD *)(v106 + 256);
            v198 = *(_DWORD *)(*(_QWORD *)(v106 + 248) + 372);
            if (v197)
              LODWORD(v197) = *(_DWORD *)(v197 + 860);
            v199 = *(_DWORD *)(v106 + 424);
            v200 = *(_DWORD *)(v947 + 364);
            *(_DWORD *)buf = 136447746;
            *(_QWORD *)&buf[4] = "nw_http1_create_connection_for_stream_if_allowed";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v106 + 74;
            *(_WORD *)&buf[22] = 2080;
            v968 = (uint64_t)" ";
            *(_WORD *)v969 = 1024;
            *(_DWORD *)&v969[2] = v198;
            *(_WORD *)&v969[6] = 1024;
            *(_DWORD *)&v969[8] = v197;
            *(_WORD *)&v969[12] = 1024;
            *(_DWORD *)&v969[14] = v199;
            *(_WORD *)&v969[18] = 1024;
            *(_DWORD *)&v969[20] = v200;
            v126 = "%{public}s %{public}s%s<i%u:c%u:s%u> already at max connection width %u, cannot create new connection";
            v127 = v195;
            v128 = 56;
            goto LABEL_249;
          }
        }
LABEL_250:
        if ((*(_BYTE *)(v25 + 158) & 1) == 0)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v129 = gLogObj;
          if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
          {
            v130 = *(_DWORD *)(v947 + 372);
            *(_DWORD *)buf = 136446978;
            *(_QWORD *)&buf[4] = "nw_http1_match_idle_connection_with_pending_stream";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v947 + 74;
            *(_WORD *)&buf[22] = 2080;
            v968 = (uint64_t)" ";
            *(_WORD *)v969 = 1024;
            *(_DWORD *)&v969[2] = v130;
            v131 = "%{public}s %{public}s%s<i%u> cannot make new connection, waiting for other requests to finish";
LABEL_256:
            v133 = v129;
            v134 = 38;
LABEL_257:
            _os_log_impl(&dword_182FBE000, v133, OS_LOG_TYPE_DEBUG, v131, buf, v134);
            return;
          }
        }
        return;
      }
      if ((*(_BYTE *)(v106 + 158) & 1) == 0)
      {
        if (v107[1345])
        {
          v750 = v107;
          v751 = __nwlog_obj();
          v752 = os_log_type_enabled(v751, OS_LOG_TYPE_DEBUG);
          v107 = v750;
          v25 = v947;
          if (v752)
          {
            v753 = v106 + 74;
            v754 = *(_QWORD *)(v106 + 256);
            v755 = *(_DWORD *)(*(_QWORD *)(v106 + 248) + 372);
            if (v754)
              LODWORD(v754) = *(_DWORD *)(v754 + 860);
            v106 = v946;
            v756 = *(_DWORD *)(v946 + 424);
            *(_DWORD *)buf = 136447490;
            *(_QWORD *)&buf[4] = "nw_http1_create_connection_for_stream_if_allowed";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v753;
            *(_WORD *)&buf[22] = 2080;
            v968 = (uint64_t)" ";
            *(_WORD *)v969 = 1024;
            *(_DWORD *)&v969[2] = v755;
            *(_WORD *)&v969[6] = 1024;
            *(_DWORD *)&v969[8] = v754;
            *(_WORD *)&v969[12] = 1024;
            *(_DWORD *)&v969[14] = v756;
            _os_log_impl(&dword_182FBE000, v751, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> width allows new connection, creating", buf, 0x32u);
            v25 = v947;
            v107 = v750;
          }
        }
      }
      if ((*(_WORD *)(v106 + 428) & 0x1000) == 0)
      {
LABEL_808:
        if (*(_QWORD *)(v106 + 32))
        {
          if ((*(_BYTE *)(v106 + 158) & 1) == 0)
          {
            if (v107[1345])
            {
              v765 = __nwlog_obj();
              if (os_log_type_enabled(v765, OS_LOG_TYPE_DEBUG))
              {
                v766 = v106 + 74;
                v767 = *(_QWORD *)(v106 + 256);
                v768 = *(_DWORD *)(*(_QWORD *)(v106 + 248) + 372);
                if (v767)
                  LODWORD(v767) = *(_DWORD *)(v767 + 860);
                v106 = v946;
                v769 = *(_DWORD *)(v946 + 424);
                v770 = *(_QWORD *)(v946 + 32);
                *(_DWORD *)buf = 136447746;
                *(_QWORD *)&buf[4] = "nw_http1_establish_new_connection_for_stream";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = v766;
                *(_WORD *)&buf[22] = 2080;
                v968 = (uint64_t)" ";
                *(_WORD *)v969 = 1024;
                *(_DWORD *)&v969[2] = v768;
                *(_WORD *)&v969[6] = 1024;
                *(_DWORD *)&v969[8] = v767;
                *(_WORD *)&v969[12] = 1024;
                *(_DWORD *)&v969[14] = v769;
                *(_WORD *)&v969[18] = 2048;
                *(_QWORD *)&v969[20] = v770;
                _os_log_impl(&dword_182FBE000, v765, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> using already established output handler %p", buf, 0x3Cu);
              }
            }
          }
          v942 = *(_OWORD **)(v106 + 32);
          if (v942)
          {
            v501 = *(void **)(v106 + 336);
            if (v501)
            {
              v502 = *(void **)(v106 + 320);
              if (v502)
              {
                v503 = malloc_type_calloc(1uLL, 0x370uLL, 0xEAFB8F1AuLL);
                if (v503)
                  goto LABEL_815;
                v778 = __nwlog_obj();
                os_log_type_enabled(v778, OS_LOG_TYPE_ERROR);
                *(_DWORD *)buf = 136446722;
                *(_QWORD *)&buf[4] = "strict_calloc";
                *(_WORD *)&buf[12] = 2048;
                *(_QWORD *)&buf[14] = 1;
                *(_WORD *)&buf[22] = 2048;
                v968 = 880;
                v779 = (void *)_os_log_send_and_compose_impl();
                if (!__nwlog_abort((uint64_t)v779))
                {
                  free(v779);
LABEL_815:
                  bzero(v503, 0x370uLL);
                  if (nw_protocol_http1_identifier::onceToken != -1)
                    dispatch_once(&nw_protocol_http1_identifier::onceToken, &__block_literal_global_39812);
                  v504 = v947;
                  *((_QWORD *)v503 + 2) = &nw_protocol_http1_identifier::http1_protocol_identifier;
                  if (nw_protocol_http1_get_callbacks(void)::onceToken[0] != -1)
                  {
                    dispatch_once(nw_protocol_http1_get_callbacks(void)::onceToken, &__block_literal_global_17_39614);
                    v504 = v947;
                  }
                  *((_QWORD *)v503 + 3) = &nw_protocol_http1_get_callbacks(void)::http1_protocol_callbacks;
                  *((_DWORD *)v503 + 46) = 3;
                  *((_QWORD *)v503 + 22) = v503;
                  *((_QWORD *)v503 + 5) = v503 + 10;
                  *((_QWORD *)v503 + 60) = v504;
                  nw_protocol_set_output_handler((uint64_t)v503, (uint64_t)v942);
                  *(_QWORD *)buf = os_retain(v501);
                  nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v503 + 47), buf);
                  *(_QWORD *)buf = os_retain(v502);
                  nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v503 + 46), buf);
                  *(_QWORD *)buf = nw_parameters_copy_context(v502);
                  nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v503 + 31), buf);
                  *((_QWORD *)v503 + 24) = *(_QWORD *)(v504 + 192);
                  v505 = MEMORY[0x1E0C809B0];
                  v506 = (void *)*((_QWORD *)v503 + 62);
                  *(_QWORD *)v970 = MEMORY[0x1E0C809B0];
                  *(_QWORD *)&v970[8] = 0x40000000;
                  *(_QWORD *)&v970[16] = ___ZL26nw_http1_connection_createP11nw_protocolP17nw_protocol_http1P11nw_endpointP13nw_parameters_block_invoke;
                  v971 = (uint64_t (*)(uint64_t, uint64_t))&__block_descriptor_tmp_40_39813;
                  v972 = (void (*)(uint64_t))v503;
                  *(_QWORD *)buf = nw_http_connection_create_metadata(v506, v970, 0);
                  nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v503 + 48), buf);
                  nw_http_connection_metadata_set_version(*((void **)v503 + 96), 3);
                  nw_http_connection_metadata_set_shared_connection_pool_metadata(*((void **)v503 + 96), *(void **)(v504 + 312));
                  *((_QWORD *)v503 + 77) = 0;
                  *((_QWORD *)v503 + 78) = (char *)v503 + 616;
                  *((_QWORD *)v503 + 79) = 0;
                  *((_QWORD *)v503 + 80) = (char *)v503 + 632;
                  *((_QWORD *)v503 + 81) = 0;
                  *((_QWORD *)v503 + 82) = (char *)v503 + 648;
                  *((_QWORD *)v503 + 83) = 0;
                  *((_QWORD *)v503 + 84) = (char *)v503 + 664;
                  *((_QWORD *)v503 + 86) = (char *)v503 + 680;
                  *((_QWORD *)v503 + 85) = 0;
                  nw_frame_cache_init((uint64_t)v503 + 696, (uint64_t)v503, 256, 0x40000, 16);
                  v507 = *((_QWORD *)v503 + 60);
                  if (v507)
                  {
                    *(_OWORD *)((char *)v503 + 360) = 0u;
                    *(_OWORD *)((char *)v503 + 376) = 0u;
                    *(_OWORD *)((char *)v503 + 392) = 0u;
                    *(_OWORD *)((char *)v503 + 408) = 0u;
                    *(_OWORD *)((char *)v503 + 424) = 0u;
                    *(_OWORD *)((char *)v503 + 440) = 0u;
                    *(_OWORD *)((char *)v503 + 328) = 0u;
                    *(_OWORD *)((char *)v503 + 344) = 0u;
                    *((_QWORD *)v503 + 59) = nw_http1_on_reset;
                    *((_QWORD *)v503 + 37) = nw_http1_on_message_begin;
                    *((_QWORD *)v503 + 38) = nw_http1_on_url;
                    *((_QWORD *)v503 + 48) = nw_http1_on_message_complete;
                    *((_QWORD *)v503 + 49) = nw_http1_on_url_complete;
                    *((_QWORD *)v503 + 39) = nw_http1_on_status;
                    *((_QWORD *)v503 + 40) = nw_http1_on_method;
                    *((_QWORD *)v503 + 50) = nw_http1_on_status_complete;
                    *((_QWORD *)v503 + 51) = nw_http1_on_method_complete;
                    *((_QWORD *)v503 + 42) = nw_http1_on_header_field;
                    *((_QWORD *)v503 + 43) = nw_http1_on_header_value;
                    *((_QWORD *)v503 + 53) = nw_http1_on_header_field_complete;
                    *((_QWORD *)v503 + 54) = nw_http1_on_header_value_complete;
                    *((_QWORD *)v503 + 46) = nw_http1_on_headers_complete;
                    *((_QWORD *)v503 + 47) = nw_http1_on_body;
                    *((_QWORD *)v503 + 57) = nw_http1_on_chunk_header;
                    *((_QWORD *)v503 + 58) = nw_http1_on_chunk_complete;
                    v508 = *(_BYTE *)(v507 + 376);
                    *(_OWORD *)((char *)v503 + 248) = 0u;
                    *(_OWORD *)((char *)v503 + 200) = 0u;
                    *(_OWORD *)((char *)v503 + 264) = 0u;
                    *(_OWORD *)((char *)v503 + 232) = 0u;
                    *(_OWORD *)((char *)v503 + 216) = 0u;
                    if ((v508 & 1) != 0)
                      v509 = 1;
                    else
                      v509 = 2;
                    *((_BYTE *)v503 + 272) = v509;
                    *((_QWORD *)v503 + 35) = 0;
                    *((_QWORD *)v503 + 36) = (char *)v503 + 296;
                    *((_WORD *)v503 + 139) = 15619;
                    *((_QWORD *)v503 + 31) = v503;
                    *((_QWORD *)v503 + 32) = 238;
                    if ((*((_BYTE *)v503 + 158) & 1) == 0)
                    {
                      v510 = __nwlog_obj();
                      if (os_log_type_enabled(v510, OS_LOG_TYPE_DEBUG))
                      {
                        v511 = *((_QWORD *)v503 + 61);
                        v512 = *(_DWORD *)(*((_QWORD *)v503 + 60) + 372);
                        v513 = *((_DWORD *)v503 + 215);
                        if (v511)
                          LODWORD(v511) = *(_DWORD *)(v511 + 424);
                        *(_DWORD *)buf = 136448258;
                        *(_QWORD *)&buf[4] = "nw_http1_connection_log_parser_version";
                        *(_WORD *)&buf[12] = 2082;
                        *(_QWORD *)&buf[14] = (char *)v503 + 74;
                        *(_WORD *)&buf[22] = 2080;
                        v968 = (uint64_t)" ";
                        *(_WORD *)v969 = 1024;
                        *(_DWORD *)&v969[2] = v512;
                        *(_WORD *)&v969[6] = 1024;
                        *(_DWORD *)&v969[8] = v513;
                        *(_WORD *)&v969[12] = 1024;
                        *(_DWORD *)&v969[14] = v511;
                        *(_WORD *)&v969[18] = 1024;
                        *(_DWORD *)&v969[20] = 9;
                        *(_WORD *)&v969[24] = 1024;
                        *(_DWORD *)&v969[26] = 2;
                        *(_WORD *)&v969[30] = 1024;
                        *(_DWORD *)&v969[32] = 1;
                        _os_log_impl(&dword_182FBE000, v510, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> using http parser v%u.%u.%u", buf, 0x44u);
                      }
                    }
                    goto LABEL_828;
                  }
                  __nwlog_obj();
                  *(_DWORD *)buf = 136446210;
                  *(_QWORD *)&buf[4] = "nw_http1_connection_parser_init";
                  v780 = (char *)_os_log_send_and_compose_impl();
                  v962[0] = 16;
                  LOBYTE(v950[0]) = 0;
                  if (__nwlog_fault(v780, v962, v950))
                  {
                    if (v962[0] == 17)
                    {
                      v781 = __nwlog_obj();
                      v782 = v962[0];
                      if (!os_log_type_enabled(v781, (os_log_type_t)v962[0]))
                        goto LABEL_1522;
                      *(_DWORD *)buf = 136446210;
                      *(_QWORD *)&buf[4] = "nw_http1_connection_parser_init";
                      v783 = "%{public}s called with null http1_connection->protocol_http1";
                      goto LABEL_1521;
                    }
                    if (!LOBYTE(v950[0]))
                    {
                      v781 = __nwlog_obj();
                      v782 = v962[0];
                      if (!os_log_type_enabled(v781, (os_log_type_t)v962[0]))
                        goto LABEL_1522;
                      *(_DWORD *)buf = 136446210;
                      *(_QWORD *)&buf[4] = "nw_http1_connection_parser_init";
                      v783 = "%{public}s called with null http1_connection->protocol_http1, backtrace limit exceeded";
                      goto LABEL_1521;
                    }
                    v841 = (char *)__nw_create_backtrace_string();
                    v781 = __nwlog_obj();
                    v782 = v962[0];
                    v842 = os_log_type_enabled(v781, (os_log_type_t)v962[0]);
                    if (v841)
                    {
                      if (v842)
                      {
                        *(_DWORD *)buf = 136446466;
                        *(_QWORD *)&buf[4] = "nw_http1_connection_parser_init";
                        *(_WORD *)&buf[12] = 2082;
                        *(_QWORD *)&buf[14] = v841;
                        _os_log_impl(&dword_182FBE000, v781, v782, "%{public}s called with null http1_connection->protocol_http1, dumping backtrace:%{public}s", buf, 0x16u);
                      }
                      free(v841);
                      goto LABEL_1522;
                    }
                    if (v842)
                    {
                      *(_DWORD *)buf = 136446210;
                      *(_QWORD *)&buf[4] = "nw_http1_connection_parser_init";
                      v783 = "%{public}s called with null http1_connection->protocol_http1, no backtrace";
LABEL_1521:
                      _os_log_impl(&dword_182FBE000, v781, v782, v783, buf, 0xCu);
                    }
                  }
LABEL_1522:
                  if (v780)
                    free(v780);
LABEL_828:
                  *(_QWORD *)buf = 0;
                  *(_QWORD *)&buf[8] = buf;
                  *(_QWORD *)&buf[16] = 0x2000000000;
                  v968 = (uint64_t)v503;
                  aBlock = v505;
                  v952 = 0x40000000;
                  v953 = ___ZL26nw_http1_connection_createP11nw_protocolP17nw_protocol_http1P11nw_endpointP13nw_parameters_block_invoke_2;
                  v954 = &unk_1E14A14C8;
                  v955 = (uint64_t *)buf;
                  *((_QWORD *)v503 + 76) = _Block_copy(&aBlock);
                  _Block_object_dispose(buf, 8);
                  if ((*((_BYTE *)v503 + 158) & 1) == 0)
                  {
                    if (gLogDatapath)
                    {
                      v793 = __nwlog_obj();
                      if (os_log_type_enabled(v793, OS_LOG_TYPE_DEBUG))
                      {
                        v794 = *((_QWORD *)v503 + 61);
                        v795 = *(_DWORD *)(*((_QWORD *)v503 + 60) + 372);
                        v796 = *((_DWORD *)v503 + 215);
                        if (v794)
                          LODWORD(v794) = *(_DWORD *)(v794 + 424);
                        *(_DWORD *)buf = 136447746;
                        *(_QWORD *)&buf[4] = "nw_http1_connection_create";
                        *(_WORD *)&buf[12] = 2082;
                        *(_QWORD *)&buf[14] = (char *)v503 + 74;
                        *(_WORD *)&buf[22] = 2080;
                        v968 = (uint64_t)" ";
                        *(_WORD *)v969 = 1024;
                        *(_DWORD *)&v969[2] = v795;
                        *(_WORD *)&v969[6] = 1024;
                        *(_DWORD *)&v969[8] = v796;
                        *(_WORD *)&v969[12] = 1024;
                        *(_DWORD *)&v969[14] = v794;
                        *(_WORD *)&v969[18] = 2048;
                        *(_QWORD *)&v969[20] = v503;
                        _os_log_impl(&dword_182FBE000, v793, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> created %p", buf, 0x3Cu);
                      }
                    }
                  }
                  v514 = (NSObject **)(v503 + 32);
                  nw_protocol_replace_input_handler((uint64_t)v942, v946, (uint64_t)v503);
                  *v503 = *v942;
                  v515 = (void *)*((_QWORD *)v503 + 92);
                  if (v515)
                  {
                    v516 = v947;
                    v517 = (_BYTE *)&unk_1ECD84000;
                    if (!*((_QWORD *)v503 + 66))
                    {
                      v518 = (void **)(v503 + 35);
                      v519 = nw_parameters_copy_context(*((void **)v503 + 92));
                      *(_QWORD *)buf = nw_path_copy_flow_registration(v519, (uint64_t)v503);
                      nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v503 + 35), buf);
                      v520 = (void *)*((_QWORD *)v503 + 70);
                      if (v520)
                      {
                        v521 = nw_path_flow_registration_copy_endpoint(v520);
                        v522 = nw_path_flow_registration_copy_parameters(*v518);
                        *(_QWORD *)buf = nw_endpoint_copy_association_with_evaluator(v521, v522, 0);
                        nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v503 + 33), buf);
                        if (*((_QWORD *)v503 + 66))
                        {
                          *(_QWORD *)buf = nw_protocol_instance_stub_create((nw_protocol *)v503);
                          nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v503 + 34), buf);
                          nw_association_register(*((void **)v503 + 66), v515, *((void **)v503 + 68), 0, &__block_literal_global_70_39832);
                          v523 = nw_association_copy_current_path(*((void **)v503 + 66), v522);
                          if (v523)
                          {
                            v524 = v523;
                            v525 = nw_path_copy_for_flow_registration(v523, *v518);
                            if (v525)
                            {
                              v526 = v525;
                              if (*v514 != v525)
                              {
                                *(_QWORD *)buf = os_retain(v525);
                                nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v503 + 32), buf);
                              }
                              if (nw_path_has_flows(v526))
                                v527 = 4096;
                              else
                                v527 = 0;
                              v528 = *((_WORD *)v503 + 436) & 0xEFFF | (*((unsigned __int8 *)v503 + 874) << 16);
                              *((_WORD *)v503 + 436) = *((_WORD *)v503 + 436) & 0xEFFF | v527;
                              *((_BYTE *)v503 + 874) = BYTE2(v528);
                              v529 = nw_parameters_copy_effective_proxy_config(v515);
                              if (v529)
                              {
                                v530 = v529;
                                if (nw_path_has_proxy_config(v524, v529))
                                {
                                  *(_QWORD *)buf = os_retain(v530);
                                  nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v503 + 36), buf);
                                }
                                os_release(v530);
                              }
                              os_release(v526);
                            }
                            os_release(v524);
                          }
                        }
                        if (v522)
                          os_release(v522);
                        if (v521)
                          os_release(v521);
                      }
                      v516 = v947;
                      v517 = (_BYTE *)&unk_1ECD84000;
                      if (v519)
                      {
                        os_release(v519);
                        v517 = (_BYTE *)&unk_1ECD84000;
                        v516 = v947;
                      }
                    }
                    v531 = *v514;
                    if (*v514)
                    {
LABEL_854:
                      v532 = nw_path_uses_interface_type(v531, nw_interface_type_cellular);
                      v517 = (_BYTE *)&unk_1ECD84000;
                      v516 = v947;
                      if (v532)
                        *((_QWORD *)v503 + 24) = 1000;
                    }
LABEL_856:
                    v533 = *(unsigned int *)(v516 + 336) + 1;
                    v534 = v533 << 31 >> 31;
                    *(_DWORD *)(v516 + 336) = v533;
                    v535 = v946;
                    if (v534 == v533 && (v534 & 0x8000000000000000) == 0)
                      goto LABEL_894;
                    v536 = v516;
                    __nwlog_obj();
                    v537 = *(unsigned int *)(v536 + 336);
                    *(_DWORD *)buf = 136446978;
                    *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
                    *(_WORD *)&buf[12] = 2082;
                    *(_QWORD *)&buf[14] = "http1->connections_count";
                    *(_WORD *)&buf[22] = 2048;
                    v968 = 1;
                    *(_WORD *)v969 = 2048;
                    *(_QWORD *)&v969[2] = v537;
                    v538 = (char *)_os_log_send_and_compose_impl();
                    v970[0] = 16;
                    LOBYTE(aBlock) = 0;
                    if (__nwlog_fault(v538, v970, &aBlock))
                    {
                      if (v970[0] == 17)
                      {
                        v539 = __nwlog_obj();
                        v540 = v970[0];
                        if (os_log_type_enabled(v539, (os_log_type_t)v970[0]))
                        {
                          v541 = *(unsigned int *)(v947 + 336);
                          *(_DWORD *)buf = 136446978;
                          *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
                          *(_WORD *)&buf[12] = 2082;
                          *(_QWORD *)&buf[14] = "http1->connections_count";
                          *(_WORD *)&buf[22] = 2048;
                          v968 = 1;
                          *(_WORD *)v969 = 2048;
                          *(_QWORD *)&v969[2] = v541;
                          v542 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_890:
                          _os_log_impl(&dword_182FBE000, v539, v540, v542, buf, 0x2Au);
                        }
                      }
                      else if ((_BYTE)aBlock)
                      {
                        v560 = (char *)__nw_create_backtrace_string();
                        v539 = __nwlog_obj();
                        v540 = v970[0];
                        v561 = os_log_type_enabled(v539, (os_log_type_t)v970[0]);
                        if (v560)
                        {
                          if (v561)
                          {
                            v562 = *(unsigned int *)(v947 + 336);
                            *(_DWORD *)buf = 136447234;
                            *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
                            *(_WORD *)&buf[12] = 2082;
                            *(_QWORD *)&buf[14] = "http1->connections_count";
                            *(_WORD *)&buf[22] = 2048;
                            v968 = 1;
                            *(_WORD *)v969 = 2048;
                            *(_QWORD *)&v969[2] = v562;
                            *(_WORD *)&v969[10] = 2082;
                            *(_QWORD *)&v969[12] = v560;
                            _os_log_impl(&dword_182FBE000, v539, v540, "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
                          }
                          free(v560);
                          goto LABEL_891;
                        }
                        if (v561)
                        {
                          v567 = *(unsigned int *)(v947 + 336);
                          *(_DWORD *)buf = 136446978;
                          *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
                          *(_WORD *)&buf[12] = 2082;
                          *(_QWORD *)&buf[14] = "http1->connections_count";
                          *(_WORD *)&buf[22] = 2048;
                          v968 = 1;
                          *(_WORD *)v969 = 2048;
                          *(_QWORD *)&v969[2] = v567;
                          v542 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
                          goto LABEL_890;
                        }
                      }
                      else
                      {
                        v539 = __nwlog_obj();
                        v540 = v970[0];
                        if (os_log_type_enabled(v539, (os_log_type_t)v970[0]))
                        {
                          v566 = *(unsigned int *)(v947 + 336);
                          *(_DWORD *)buf = 136446978;
                          *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
                          *(_WORD *)&buf[12] = 2082;
                          *(_QWORD *)&buf[14] = "http1->connections_count";
                          *(_WORD *)&buf[22] = 2048;
                          v968 = 1;
                          *(_WORD *)v969 = 2048;
                          *(_QWORD *)&v969[2] = v566;
                          v542 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
                          goto LABEL_890;
                        }
                      }
                    }
LABEL_891:
                    if (v538)
                      free(v538);
                    v516 = v947;
                    *(_DWORD *)(v947 + 336) = -1;
                    v535 = v946;
                    v517 = (_BYTE *)&unk_1ECD84000;
LABEL_894:
                    v568 = *(unsigned int *)(v516 + 360) + 1;
                    v569 = v568 << 31 >> 31;
                    *(_DWORD *)(v516 + 360) = v568;
                    if (v569 == v568 && (v569 & 0x8000000000000000) == 0)
                      goto LABEL_913;
                    v570 = v516;
                    __nwlog_obj();
                    v571 = *(unsigned int *)(v570 + 360);
                    *(_DWORD *)buf = 136446978;
                    *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
                    *(_WORD *)&buf[12] = 2082;
                    *(_QWORD *)&buf[14] = "http1->next_connection_log_num";
                    *(_WORD *)&buf[22] = 2048;
                    v968 = 1;
                    *(_WORD *)v969 = 2048;
                    *(_QWORD *)&v969[2] = v571;
                    v572 = (char *)_os_log_send_and_compose_impl();
                    v970[0] = 16;
                    LOBYTE(aBlock) = 0;
                    if (__nwlog_fault(v572, v970, &aBlock))
                    {
                      if (v970[0] == 17)
                      {
                        v573 = __nwlog_obj();
                        v574 = v970[0];
                        if (os_log_type_enabled(v573, (os_log_type_t)v970[0]))
                        {
                          v575 = *(unsigned int *)(v947 + 360);
                          *(_DWORD *)buf = 136446978;
                          *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
                          *(_WORD *)&buf[12] = 2082;
                          *(_QWORD *)&buf[14] = "http1->next_connection_log_num";
                          *(_WORD *)&buf[22] = 2048;
                          v968 = 1;
                          *(_WORD *)v969 = 2048;
                          *(_QWORD *)&v969[2] = v575;
                          v576 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_909:
                          _os_log_impl(&dword_182FBE000, v573, v574, v576, buf, 0x2Au);
                        }
                      }
                      else if ((_BYTE)aBlock)
                      {
                        v577 = (char *)__nw_create_backtrace_string();
                        v573 = __nwlog_obj();
                        v574 = v970[0];
                        v578 = os_log_type_enabled(v573, (os_log_type_t)v970[0]);
                        if (v577)
                        {
                          if (v578)
                          {
                            v579 = *(unsigned int *)(v947 + 360);
                            *(_DWORD *)buf = 136447234;
                            *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
                            *(_WORD *)&buf[12] = 2082;
                            *(_QWORD *)&buf[14] = "http1->next_connection_log_num";
                            *(_WORD *)&buf[22] = 2048;
                            v968 = 1;
                            *(_WORD *)v969 = 2048;
                            *(_QWORD *)&v969[2] = v579;
                            *(_WORD *)&v969[10] = 2082;
                            *(_QWORD *)&v969[12] = v577;
                            _os_log_impl(&dword_182FBE000, v573, v574, "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
                          }
                          free(v577);
                          goto LABEL_910;
                        }
                        if (v578)
                        {
                          v581 = *(unsigned int *)(v947 + 360);
                          *(_DWORD *)buf = 136446978;
                          *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
                          *(_WORD *)&buf[12] = 2082;
                          *(_QWORD *)&buf[14] = "http1->next_connection_log_num";
                          *(_WORD *)&buf[22] = 2048;
                          v968 = 1;
                          *(_WORD *)v969 = 2048;
                          *(_QWORD *)&v969[2] = v581;
                          v576 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
                          goto LABEL_909;
                        }
                      }
                      else
                      {
                        v573 = __nwlog_obj();
                        v574 = v970[0];
                        if (os_log_type_enabled(v573, (os_log_type_t)v970[0]))
                        {
                          v580 = *(unsigned int *)(v947 + 360);
                          *(_DWORD *)buf = 136446978;
                          *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
                          *(_WORD *)&buf[12] = 2082;
                          *(_QWORD *)&buf[14] = "http1->next_connection_log_num";
                          *(_WORD *)&buf[22] = 2048;
                          v968 = 1;
                          *(_WORD *)v969 = 2048;
                          *(_QWORD *)&v969[2] = v580;
                          v576 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
                          goto LABEL_909;
                        }
                      }
                    }
LABEL_910:
                    if (v572)
                      free(v572);
                    LODWORD(v568) = -1;
                    *(_DWORD *)(v947 + 360) = -1;
                    v535 = v946;
                    v517 = &unk_1ECD84000;
LABEL_913:
                    *((_DWORD *)v503 + 215) = v568;
                    if ((*((_BYTE *)v503 + 158) & 1) == 0)
                    {
                      if (v517[1345])
                      {
                        v797 = __nwlog_obj();
                        if (os_log_type_enabled(v797, OS_LOG_TYPE_DEBUG))
                        {
                          v798 = *((_QWORD *)v503 + 61);
                          v799 = *(_DWORD *)(*((_QWORD *)v503 + 60) + 372);
                          v800 = *((_DWORD *)v503 + 215);
                          if (v798)
                            LODWORD(v798) = *(_DWORD *)(v798 + 424);
                          v801 = *(_DWORD *)(v947 + 336);
                          *(_DWORD *)buf = 136448002;
                          *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
                          *(_WORD *)&buf[12] = 2082;
                          *(_QWORD *)&buf[14] = (char *)v503 + 74;
                          *(_WORD *)&buf[22] = 2080;
                          v968 = (uint64_t)" ";
                          *(_WORD *)v969 = 1024;
                          *(_DWORD *)&v969[2] = v799;
                          *(_WORD *)&v969[6] = 1024;
                          *(_DWORD *)&v969[8] = v800;
                          *(_WORD *)&v969[12] = 1024;
                          *(_DWORD *)&v969[14] = v798;
                          *(_WORD *)&v969[18] = 2048;
                          *(_QWORD *)&v969[20] = v503;
                          *(_WORD *)&v969[28] = 1024;
                          *(_DWORD *)&v969[30] = v801;
                          _os_log_impl(&dword_182FBE000, v797, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> added connection %p, now have %u connections", buf, 0x42u);
                          v535 = v946;
                        }
                      }
                    }
                    if (*(_QWORD *)(v535 + 248))
                    {
                      if (!*((_QWORD *)v503 + 61))
                      {
                        *(_QWORD *)(v535 + 256) = v503;
                        *((_QWORD *)v503 + 61) = v535;
                        nw_protocol_set_output_handler(v535, *((_QWORD *)v503 + 4));
                        nw_protocol_set_input_handler((uint64_t)v503, *(_QWORD *)(v535 + 48));
                        *(_OWORD *)v535 = *v503;
                        v588 = v945[5];
                        v590 = v945[2];
                        v589 = v945[3];
                        v503[8] = v945[4];
                        v503[9] = v588;
                        v503[6] = v590;
                        v503[7] = v589;
                        v591 = v945[1];
                        v503[4] = *v945;
                        v503[5] = v591;
                        nw_http_transaction_metadata_set_connection_metadata(*(void **)(v535 + 352), *((void **)v503 + 96));
                        *((_WORD *)v503 + 436) &= 0xFFD7u;
                        *((_DWORD *)v503 + 216) = 1;
                        if ((*((_BYTE *)v503 + 158) & 1) == 0)
                        {
                          v592 = __nwlog_obj();
                          if (os_log_type_enabled(v592, OS_LOG_TYPE_DEBUG))
                          {
                            v593 = *((_QWORD *)v503 + 61);
                            v594 = *(_DWORD *)(*((_QWORD *)v503 + 60) + 372);
                            v595 = *((_DWORD *)v503 + 215);
                            if (v593)
                              LODWORD(v593) = *(_DWORD *)(v593 + 424);
                            *(_DWORD *)buf = 136447490;
                            *(_QWORD *)&buf[4] = "nw_http1_update_connection_input_state";
                            *(_WORD *)&buf[12] = 2082;
                            *(_QWORD *)&buf[14] = (char *)v503 + 74;
                            *(_WORD *)&buf[22] = 2080;
                            v968 = (uint64_t)" ";
                            *(_WORD *)v969 = 1024;
                            *(_DWORD *)&v969[2] = v594;
                            *(_WORD *)&v969[6] = 1024;
                            *(_DWORD *)&v969[8] = v595;
                            *(_WORD *)&v969[12] = 1024;
                            *(_DWORD *)&v969[14] = v593;
                            _os_log_impl(&dword_182FBE000, v592, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> connection input state: reading", buf, 0x32u);
                          }
                        }
                        if ((*(_BYTE *)(v535 + 158) & 1) == 0)
                        {
                          v596 = __nwlog_obj();
                          if (os_log_type_enabled(v596, OS_LOG_TYPE_INFO))
                          {
                            v597 = *(_QWORD *)(v535 + 256);
                            v598 = *(_DWORD *)(*(_QWORD *)(v535 + 248) + 372);
                            if (v597)
                              LODWORD(v597) = *(_DWORD *)(v597 + 860);
                            v599 = *(_DWORD *)(v535 + 424);
                            *(_DWORD *)buf = 136448002;
                            *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                            *(_WORD *)&buf[12] = 2082;
                            *(_QWORD *)&buf[14] = v535 + 74;
                            *(_WORD *)&buf[22] = 2080;
                            v968 = (uint64_t)" ";
                            *(_WORD *)v969 = 1024;
                            *(_DWORD *)&v969[2] = v598;
                            *(_WORD *)&v969[6] = 1024;
                            *(_DWORD *)&v969[8] = v597;
                            *(_WORD *)&v969[12] = 1024;
                            *(_DWORD *)&v969[14] = v599;
                            *(_WORD *)&v969[18] = 2048;
                            *(_QWORD *)&v969[20] = v535;
                            *(_WORD *)&v969[28] = 2048;
                            *(_QWORD *)&v969[30] = v503;
                            _os_log_impl(&dword_182FBE000, v596, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s<i%u:c%u:s%u> stream (%p) now using connection %p", buf, 0x46u);
                            if ((*(_BYTE *)(v535 + 158) & 1) != 0)
                            {
LABEL_949:
                              nw_http_transaction_metadata_set_first_on_connection(*(void **)(v535 + 352));
                              v609 = (void *)nw_protocol_boringssl_copy_definition();
                              identifier = nw_protocol_definition_get_identifier(v609);
                              v611 = (_QWORD *)nw_protocol_get_identifier((uint64_t)v942);
                              v612 = nw_protocols_are_equal(identifier, v611);
                              if (v609)
                                os_release(v609);
                              if (v612)
                              {
                                v613 = nw_protocol_copy_info((uint64_t)v942, 255);
                                if (v613)
                                {
                                  v614 = (void *)v613;
                                  v615 = *(_QWORD *)(v613 + 24);
                                  if (*(_QWORD *)(v613 + 16) != v615)
                                  {
                                    v616 = *(void **)(v615 - 8);
                                    if (v616)
                                    {
                                      v617 = os_retain(v616);
                                      if (v617)
                                      {
                                        v618 = v617;
                                        if (nw_protocol_metadata_is_tls(v617))
                                        {
                                          v619 = v618;
                                          nw_http_connection_metadata_set_sec_metadata(*((void **)v503 + 96), v619);
                                          os_release(v619);
                                        }
                                        os_release(v618);
                                      }
                                    }
                                  }
                                  os_release(v614);
                                }
                              }
                              if (v503)
                              {
                                nw_protocol_connect((uint64_t)v942, (uint64_t)v503);
                                return;
                              }
                              __nwlog_obj();
                              *(_DWORD *)buf = 136446210;
                              *(_QWORD *)&buf[4] = "nw_http1_get_output_protocol";
                              v761 = (char *)_os_log_send_and_compose_impl();
                              v970[0] = 16;
                              LOBYTE(aBlock) = 0;
                              if (!__nwlog_fault(v761, v970, &aBlock))
                                goto LABEL_1474;
                              if (v970[0] == 17)
                              {
                                v762 = __nwlog_obj();
                                v763 = v970[0];
                                if (os_log_type_enabled(v762, (os_log_type_t)v970[0]))
                                {
                                  *(_DWORD *)buf = 136446210;
                                  *(_QWORD *)&buf[4] = "nw_http1_get_output_protocol";
                                  v764 = "%{public}s called with null connection";
LABEL_1473:
                                  _os_log_impl(&dword_182FBE000, v762, v763, v764, buf, 0xCu);
                                }
                              }
                              else if ((_BYTE)aBlock)
                              {
                                v835 = (char *)__nw_create_backtrace_string();
                                v762 = __nwlog_obj();
                                v763 = v970[0];
                                v836 = os_log_type_enabled(v762, (os_log_type_t)v970[0]);
                                if (v835)
                                {
                                  if (v836)
                                  {
                                    *(_DWORD *)buf = 136446466;
                                    *(_QWORD *)&buf[4] = "nw_http1_get_output_protocol";
                                    *(_WORD *)&buf[12] = 2082;
                                    *(_QWORD *)&buf[14] = v835;
                                    _os_log_impl(&dword_182FBE000, v762, v763, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
                                  }
                                  free(v835);
                                  goto LABEL_1474;
                                }
                                if (v836)
                                {
                                  *(_DWORD *)buf = 136446210;
                                  *(_QWORD *)&buf[4] = "nw_http1_get_output_protocol";
                                  v764 = "%{public}s called with null connection, no backtrace";
                                  goto LABEL_1473;
                                }
                              }
                              else
                              {
                                v762 = __nwlog_obj();
                                v763 = v970[0];
                                if (os_log_type_enabled(v762, (os_log_type_t)v970[0]))
                                {
                                  *(_DWORD *)buf = 136446210;
                                  *(_QWORD *)&buf[4] = "nw_http1_get_output_protocol";
                                  v764 = "%{public}s called with null connection, backtrace limit exceeded";
                                  goto LABEL_1473;
                                }
                              }
LABEL_1474:
                              if (v761)
                                free(v761);
                              nw_protocol_connect((uint64_t)v942, 0);
                              return;
                            }
LABEL_945:
                            v605 = __nwlog_obj();
                            if (os_log_type_enabled(v605, OS_LOG_TYPE_DEBUG))
                            {
                              v606 = *(_QWORD *)(v535 + 256);
                              v607 = *(_DWORD *)(*(_QWORD *)(v535 + 248) + 372);
                              if (v606)
                                LODWORD(v606) = *(_DWORD *)(v606 + 860);
                              v608 = *(_DWORD *)(v535 + 424);
                              *(_DWORD *)buf = 136448258;
                              *(_QWORD *)&buf[4] = "nw_http1_start_new_connection_for_stream";
                              *(_WORD *)&buf[12] = 2082;
                              *(_QWORD *)&buf[14] = v535 + 74;
                              *(_WORD *)&buf[22] = 2080;
                              v968 = (uint64_t)" ";
                              *(_WORD *)v969 = 1024;
                              *(_DWORD *)&v969[2] = v607;
                              *(_WORD *)&v969[6] = 1024;
                              *(_DWORD *)&v969[8] = v606;
                              *(_WORD *)&v969[12] = 1024;
                              *(_DWORD *)&v969[14] = v608;
                              *(_WORD *)&v969[18] = 2048;
                              *(_QWORD *)&v969[20] = v503;
                              *(_WORD *)&v969[28] = 1024;
                              *(_DWORD *)&v969[30] = v608;
                              *(_WORD *)&v969[34] = 2048;
                              *(_QWORD *)&v969[36] = v535;
                              _os_log_impl(&dword_182FBE000, v605, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> created new connection %p for stream %u (%p)", buf, 0x4Cu);
                            }
                            goto LABEL_949;
                          }
                        }
LABEL_944:
                        if ((*(_BYTE *)(v535 + 158) & 1) != 0)
                          goto LABEL_949;
                        goto LABEL_945;
                      }
                      __nwlog_obj();
                      v582 = *((_QWORD *)v503 + 61);
                      *(_DWORD *)buf = 136446722;
                      *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                      *(_WORD *)&buf[12] = 2048;
                      *(_QWORD *)&buf[14] = v503;
                      *(_WORD *)&buf[22] = 2048;
                      v968 = v582;
                      v583 = (char *)_os_log_send_and_compose_impl();
                      v970[0] = 16;
                      LOBYTE(aBlock) = 0;
                      if (__nwlog_fault(v583, v970, &aBlock))
                      {
                        if (v970[0] == 17)
                        {
                          v584 = __nwlog_obj();
                          v585 = v970[0];
                          if (!os_log_type_enabled(v584, (os_log_type_t)v970[0]))
                            goto LABEL_942;
                          v586 = *((_QWORD *)v503 + 61);
                          *(_DWORD *)buf = 136446722;
                          *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                          *(_WORD *)&buf[12] = 2048;
                          *(_QWORD *)&buf[14] = v503;
                          *(_WORD *)&buf[22] = 2048;
                          v968 = v586;
                          v587 = "%{public}s Connection %p already has a stream (%p)";
                          goto LABEL_941;
                        }
                        if (!(_BYTE)aBlock)
                        {
                          v584 = __nwlog_obj();
                          v585 = v970[0];
                          if (!os_log_type_enabled(v584, (os_log_type_t)v970[0]))
                            goto LABEL_942;
                          v603 = *((_QWORD *)v503 + 61);
                          *(_DWORD *)buf = 136446722;
                          *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                          *(_WORD *)&buf[12] = 2048;
                          *(_QWORD *)&buf[14] = v503;
                          *(_WORD *)&buf[22] = 2048;
                          v968 = v603;
                          v587 = "%{public}s Connection %p already has a stream (%p), backtrace limit exceeded";
                          goto LABEL_941;
                        }
                        v600 = (char *)__nw_create_backtrace_string();
                        v584 = __nwlog_obj();
                        v585 = v970[0];
                        v601 = os_log_type_enabled(v584, (os_log_type_t)v970[0]);
                        if (v600)
                        {
                          if (v601)
                          {
                            v602 = *((_QWORD *)v503 + 61);
                            *(_DWORD *)buf = 136446978;
                            *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                            *(_WORD *)&buf[12] = 2048;
                            *(_QWORD *)&buf[14] = v503;
                            *(_WORD *)&buf[22] = 2048;
                            v968 = v602;
                            *(_WORD *)v969 = 2082;
                            *(_QWORD *)&v969[2] = v600;
                            _os_log_impl(&dword_182FBE000, v584, v585, "%{public}s Connection %p already has a stream (%p), dumping backtrace:%{public}s", buf, 0x2Au);
                          }
                          free(v600);
                          goto LABEL_942;
                        }
                        if (v601)
                        {
                          v604 = *((_QWORD *)v503 + 61);
                          *(_DWORD *)buf = 136446722;
                          *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                          *(_WORD *)&buf[12] = 2048;
                          *(_QWORD *)&buf[14] = v503;
                          *(_WORD *)&buf[22] = 2048;
                          v968 = v604;
                          v587 = "%{public}s Connection %p already has a stream (%p), no backtrace";
LABEL_941:
                          _os_log_impl(&dword_182FBE000, v584, v585, v587, buf, 0x20u);
                        }
                      }
LABEL_942:
                      if (v583)
                        free(v583);
                      goto LABEL_944;
                    }
                    __nwlog_obj();
                    *(_DWORD *)buf = 136446210;
                    *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                    v788 = (char *)_os_log_send_and_compose_impl();
                    v970[0] = 16;
                    LOBYTE(aBlock) = 0;
                    if (!__nwlog_fault(v788, v970, &aBlock))
                      goto LABEL_1535;
                    if (v970[0] == 17)
                    {
                      v789 = __nwlog_obj();
                      v790 = v970[0];
                      if (!os_log_type_enabled(v789, (os_log_type_t)v970[0]))
                        goto LABEL_1535;
                      *(_DWORD *)buf = 136446210;
                      *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                      v791 = "%{public}s called with null http1_stream->protocol_http1";
                    }
                    else if ((_BYTE)aBlock)
                    {
                      v845 = (char *)__nw_create_backtrace_string();
                      v789 = __nwlog_obj();
                      v790 = v970[0];
                      v846 = os_log_type_enabled(v789, (os_log_type_t)v970[0]);
                      if (v845)
                      {
                        if (v846)
                        {
                          *(_DWORD *)buf = 136446466;
                          *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                          *(_WORD *)&buf[12] = 2082;
                          *(_QWORD *)&buf[14] = v845;
                          _os_log_impl(&dword_182FBE000, v789, v790, "%{public}s called with null http1_stream->protocol_http1, dumping backtrace:%{public}s", buf, 0x16u);
                        }
                        free(v845);
                        goto LABEL_1535;
                      }
                      if (!v846)
                      {
LABEL_1535:
                        if (v788)
                          free(v788);
                        goto LABEL_1517;
                      }
                      *(_DWORD *)buf = 136446210;
                      *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                      v791 = "%{public}s called with null http1_stream->protocol_http1, no backtrace";
                    }
                    else
                    {
                      v789 = __nwlog_obj();
                      v790 = v970[0];
                      if (!os_log_type_enabled(v789, (os_log_type_t)v970[0]))
                        goto LABEL_1535;
                      *(_DWORD *)buf = 136446210;
                      *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                      v791 = "%{public}s called with null http1_stream->protocol_http1, backtrace limit exceeded";
                    }
                    _os_log_impl(&dword_182FBE000, v789, v790, v791, buf, 0xCu);
                    goto LABEL_1535;
                  }
                  __nwlog_obj();
                  *(_DWORD *)buf = 136446210;
                  *(_QWORD *)&buf[4] = "nw_protocol_http1_set_up_association";
                  v784 = (char *)_os_log_send_and_compose_impl();
                  v970[0] = 16;
                  LOBYTE(aBlock) = 0;
                  if (__nwlog_fault(v784, v970, &aBlock))
                  {
                    if (v970[0] == 17)
                    {
                      v785 = __nwlog_obj();
                      v786 = v970[0];
                      if (!os_log_type_enabled(v785, (os_log_type_t)v970[0]))
                        goto LABEL_1528;
                      *(_DWORD *)buf = 136446210;
                      *(_QWORD *)&buf[4] = "nw_protocol_http1_set_up_association";
                      v787 = "%{public}s called with null parameters";
LABEL_1527:
                      _os_log_impl(&dword_182FBE000, v785, v786, v787, buf, 0xCu);
                      goto LABEL_1528;
                    }
                    if (!(_BYTE)aBlock)
                    {
                      v785 = __nwlog_obj();
                      v786 = v970[0];
                      if (!os_log_type_enabled(v785, (os_log_type_t)v970[0]))
                        goto LABEL_1528;
                      *(_DWORD *)buf = 136446210;
                      *(_QWORD *)&buf[4] = "nw_protocol_http1_set_up_association";
                      v787 = "%{public}s called with null parameters, backtrace limit exceeded";
                      goto LABEL_1527;
                    }
                    v843 = (char *)__nw_create_backtrace_string();
                    v785 = __nwlog_obj();
                    v786 = v970[0];
                    v844 = os_log_type_enabled(v785, (os_log_type_t)v970[0]);
                    if (!v843)
                    {
                      if (!v844)
                        goto LABEL_1528;
                      *(_DWORD *)buf = 136446210;
                      *(_QWORD *)&buf[4] = "nw_protocol_http1_set_up_association";
                      v787 = "%{public}s called with null parameters, no backtrace";
                      goto LABEL_1527;
                    }
                    if (v844)
                    {
                      *(_DWORD *)buf = 136446466;
                      *(_QWORD *)&buf[4] = "nw_protocol_http1_set_up_association";
                      *(_WORD *)&buf[12] = 2082;
                      *(_QWORD *)&buf[14] = v843;
                      _os_log_impl(&dword_182FBE000, v785, v786, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
                    }
                    free(v843);
                  }
LABEL_1528:
                  if (v784)
                    free(v784);
                  v516 = v947;
                  v517 = (_BYTE *)&unk_1ECD84000;
                  v531 = *v514;
                  if (*v514)
                    goto LABEL_854;
                  goto LABEL_856;
                }
LABEL_1652:
                __break(1u);
                return;
              }
              __nwlog_obj();
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_http1_connection_create";
              v757 = (char *)_os_log_send_and_compose_impl();
              v962[0] = 16;
              LOBYTE(v950[0]) = 0;
              if (__nwlog_fault(v757, v962, v950))
              {
                if (v962[0] == 17)
                {
                  v758 = __nwlog_obj();
                  v759 = v962[0];
                  if (!os_log_type_enabled(v758, (os_log_type_t)v962[0]))
                    goto LABEL_1482;
                  *(_DWORD *)buf = 136446210;
                  *(_QWORD *)&buf[4] = "nw_http1_connection_create";
                  v760 = "%{public}s called with null parameters";
                  goto LABEL_1481;
                }
                if (!LOBYTE(v950[0]))
                {
                  v758 = __nwlog_obj();
                  v759 = v962[0];
                  if (!os_log_type_enabled(v758, (os_log_type_t)v962[0]))
                    goto LABEL_1482;
                  *(_DWORD *)buf = 136446210;
                  *(_QWORD *)&buf[4] = "nw_http1_connection_create";
                  v760 = "%{public}s called with null parameters, backtrace limit exceeded";
                  goto LABEL_1481;
                }
                v837 = (char *)__nw_create_backtrace_string();
                v758 = __nwlog_obj();
                v759 = v962[0];
                v840 = os_log_type_enabled(v758, (os_log_type_t)v962[0]);
                if (!v837)
                {
                  if (!v840)
                    goto LABEL_1482;
                  *(_DWORD *)buf = 136446210;
                  *(_QWORD *)&buf[4] = "nw_http1_connection_create";
                  v760 = "%{public}s called with null parameters, no backtrace";
                  goto LABEL_1481;
                }
                if (v840)
                {
                  *(_DWORD *)buf = 136446466;
                  *(_QWORD *)&buf[4] = "nw_http1_connection_create";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = v837;
                  v839 = "%{public}s called with null parameters, dumping backtrace:%{public}s";
                  goto LABEL_1286;
                }
                goto LABEL_1287;
              }
LABEL_1482:
              if (!v757)
                goto LABEL_1484;
              goto LABEL_1483;
            }
            __nwlog_obj();
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_http1_connection_create";
            v757 = (char *)_os_log_send_and_compose_impl();
            v962[0] = 16;
            LOBYTE(v950[0]) = 0;
            if (!__nwlog_fault(v757, v962, v950))
              goto LABEL_1482;
            if (v962[0] != 17)
            {
              if (!LOBYTE(v950[0]))
              {
                v758 = __nwlog_obj();
                v759 = v962[0];
                if (!os_log_type_enabled(v758, (os_log_type_t)v962[0]))
                  goto LABEL_1482;
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_http1_connection_create";
                v760 = "%{public}s called with null endpoint, backtrace limit exceeded";
                goto LABEL_1481;
              }
              v837 = (char *)__nw_create_backtrace_string();
              v758 = __nwlog_obj();
              v759 = v962[0];
              v838 = os_log_type_enabled(v758, (os_log_type_t)v962[0]);
              if (!v837)
              {
                if (!v838)
                  goto LABEL_1482;
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_http1_connection_create";
                v760 = "%{public}s called with null endpoint, no backtrace";
                goto LABEL_1481;
              }
              if (v838)
              {
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = "nw_http1_connection_create";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = v837;
                v839 = "%{public}s called with null endpoint, dumping backtrace:%{public}s";
LABEL_1286:
                _os_log_impl(&dword_182FBE000, v758, v759, v839, buf, 0x16u);
              }
LABEL_1287:
              free(v837);
              if (!v757)
              {
LABEL_1484:
                __nwlog_obj();
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
                v896 = (char *)_os_log_send_and_compose_impl();
                v970[0] = 16;
                LOBYTE(aBlock) = 0;
                if (!__nwlog_fault(v896, v970, &aBlock))
                  goto LABEL_1498;
                if (v970[0] == 17)
                {
                  v897 = __nwlog_obj();
                  v898 = v970[0];
                  if (!os_log_type_enabled(v897, (os_log_type_t)v970[0]))
                    goto LABEL_1498;
                  *(_DWORD *)buf = 136446210;
                  *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
                  v899 = "%{public}s called with null http1_connection";
                }
                else if ((_BYTE)aBlock)
                {
                  v900 = (char *)__nw_create_backtrace_string();
                  v897 = __nwlog_obj();
                  v898 = v970[0];
                  v901 = os_log_type_enabled(v897, (os_log_type_t)v970[0]);
                  if (v900)
                  {
                    if (v901)
                    {
                      *(_DWORD *)buf = 136446466;
                      *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
                      *(_WORD *)&buf[12] = 2082;
                      *(_QWORD *)&buf[14] = v900;
                      _os_log_impl(&dword_182FBE000, v897, v898, "%{public}s called with null http1_connection, dumping backtrace:%{public}s", buf, 0x16u);
                    }
                    free(v900);
LABEL_1498:
                    if (v896)
                      free(v896);
                    __nwlog_obj();
                    *(_DWORD *)buf = 136446210;
                    *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                    v902 = (char *)_os_log_send_and_compose_impl();
                    v970[0] = 16;
                    LOBYTE(aBlock) = 0;
                    if (!__nwlog_fault(v902, v970, &aBlock))
                      goto LABEL_1514;
                    if (v970[0] == 17)
                    {
                      v903 = __nwlog_obj();
                      v904 = v970[0];
                      if (os_log_type_enabled(v903, (os_log_type_t)v970[0]))
                      {
                        *(_DWORD *)buf = 136446210;
                        *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                        v905 = "%{public}s called with null http1_connection";
LABEL_1513:
                        _os_log_impl(&dword_182FBE000, v903, v904, v905, buf, 0xCu);
                      }
                    }
                    else if ((_BYTE)aBlock)
                    {
                      v906 = (char *)__nw_create_backtrace_string();
                      v903 = __nwlog_obj();
                      v904 = v970[0];
                      v907 = os_log_type_enabled(v903, (os_log_type_t)v970[0]);
                      if (v906)
                      {
                        if (v907)
                        {
                          *(_DWORD *)buf = 136446466;
                          *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                          *(_WORD *)&buf[12] = 2082;
                          *(_QWORD *)&buf[14] = v906;
                          _os_log_impl(&dword_182FBE000, v903, v904, "%{public}s called with null http1_connection, dumping backtrace:%{public}s", buf, 0x16u);
                        }
                        free(v906);
                        goto LABEL_1514;
                      }
                      if (v907)
                      {
                        *(_DWORD *)buf = 136446210;
                        *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                        v905 = "%{public}s called with null http1_connection, no backtrace";
                        goto LABEL_1513;
                      }
                    }
                    else
                    {
                      v903 = __nwlog_obj();
                      v904 = v970[0];
                      if (os_log_type_enabled(v903, (os_log_type_t)v970[0]))
                      {
                        *(_DWORD *)buf = 136446210;
                        *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                        v905 = "%{public}s called with null http1_connection, backtrace limit exceeded";
                        goto LABEL_1513;
                      }
                    }
LABEL_1514:
                    if (v902)
                      free(v902);
                    v503 = 0;
LABEL_1517:
                    v535 = v946;
                    if ((*(_BYTE *)(v946 + 158) & 1) != 0)
                      goto LABEL_949;
                    goto LABEL_945;
                  }
                  if (!v901)
                    goto LABEL_1498;
                  *(_DWORD *)buf = 136446210;
                  *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
                  v899 = "%{public}s called with null http1_connection, no backtrace";
                }
                else
                {
                  v897 = __nwlog_obj();
                  v898 = v970[0];
                  if (!os_log_type_enabled(v897, (os_log_type_t)v970[0]))
                    goto LABEL_1498;
                  *(_DWORD *)buf = 136446210;
                  *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
                  v899 = "%{public}s called with null http1_connection, backtrace limit exceeded";
                }
                _os_log_impl(&dword_182FBE000, v897, v898, v899, buf, 0xCu);
                goto LABEL_1498;
              }
LABEL_1483:
              free(v757);
              goto LABEL_1484;
            }
            v758 = __nwlog_obj();
            v759 = v962[0];
            if (!os_log_type_enabled(v758, (os_log_type_t)v962[0]))
              goto LABEL_1482;
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_http1_connection_create";
            v760 = "%{public}s called with null endpoint";
          }
          else
          {
            __nwlog_obj();
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_http1_connection_create";
            v757 = (char *)_os_log_send_and_compose_impl();
            v962[0] = 16;
            LOBYTE(v950[0]) = 0;
            if (!__nwlog_fault(v757, v962, v950))
              goto LABEL_1482;
            if (v962[0] != 17)
            {
              if (!LOBYTE(v950[0]))
              {
                v758 = __nwlog_obj();
                v759 = v962[0];
                if (!os_log_type_enabled(v758, (os_log_type_t)v962[0]))
                  goto LABEL_1482;
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_http1_connection_create";
                v760 = "%{public}s called with null output_handler, backtrace limit exceeded";
                goto LABEL_1481;
              }
              v833 = (char *)__nw_create_backtrace_string();
              v758 = __nwlog_obj();
              v759 = v962[0];
              v834 = os_log_type_enabled(v758, (os_log_type_t)v962[0]);
              if (!v833)
              {
                if (!v834)
                  goto LABEL_1482;
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_http1_connection_create";
                v760 = "%{public}s called with null output_handler, no backtrace";
                goto LABEL_1481;
              }
              if (v834)
              {
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = "nw_http1_connection_create";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = v833;
                _os_log_impl(&dword_182FBE000, v758, v759, "%{public}s called with null output_handler, dumping backtrace:%{public}s", buf, 0x16u);
              }
              free(v833);
              goto LABEL_1482;
            }
            v758 = __nwlog_obj();
            v759 = v962[0];
            if (!os_log_type_enabled(v758, (os_log_type_t)v962[0]))
              goto LABEL_1482;
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_http1_connection_create";
            v760 = "%{public}s called with null output_handler";
          }
LABEL_1481:
          _os_log_impl(&dword_182FBE000, v758, v759, v760, buf, 0xCu);
          goto LABEL_1482;
        }
        v543 = (void **)(v106 + 320);
        v147 = nw_parameters_copy_default_protocol_stack(*(nw_parameters_t *)(v106 + 320));
        v958 = 0;
        v959 = &v958;
        v960 = 0x2000000000;
        v961 = 0;
        *(_QWORD *)v970 = 0;
        *(_QWORD *)&v970[8] = v970;
        *(_QWORD *)&v970[16] = 0x3802000000;
        v971 = __Block_byref_object_copy__39865;
        v972 = __Block_byref_object_dispose__39866;
        v973 = 0;
        LOBYTE(v974) = v974 | 1;
        v544 = v106;
        v545 = MEMORY[0x1E0C809B0];
        aBlock = MEMORY[0x1E0C809B0];
        v952 = 0x40000000;
        v953 = ___ZL44nw_http1_establish_new_connection_for_streamP17nw_protocol_http1P15nw_http1_stream_block_invoke;
        v954 = &unk_1E14A1688;
        v955 = &v958;
        v956 = v970;
        v957 = v544;
        nw_protocol_stack_iterate_application_protocols(v147, &aBlock);
        if (*(_QWORD *)(*(_QWORD *)&v970[8] + 40))
          goto LABEL_867;
        v546 = nw_protocol_stack_copy_transport_protocol(v147);
        is_quic = nw_protocol_options_is_quic(v546);
        if (v546)
          os_release(v546);
        if (!is_quic)
        {
LABEL_867:
          *(_QWORD *)buf = nw_parameters_shallow_copy(*v543);
          nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)v543, buf);
        }
        else
        {
          v548 = *(void **)(v946 + 320);
          *(_QWORD *)buf = v545;
          *(_QWORD *)&buf[8] = 0x40000000;
          *(_QWORD *)&buf[16] = ___ZL44nw_http1_establish_new_connection_for_streamP17nw_protocol_http1P15nw_http1_stream_block_invoke_2;
          v968 = (uint64_t)&unk_1E14A16D8;
          *(_QWORD *)v969 = v970;
          *(_QWORD *)&v969[8] = &v958;
          *(_QWORD *)&v969[16] = v946;
          *(_QWORD *)&v969[24] = v947;
          nw_parameters_enumerate_transformed_parameters(v548, buf);
        }
        v549 = *(void **)(*(_QWORD *)&v970[8] + 40);
        if (v549)
        {
          v550 = v549;
          sec_protocol_options_clear_tls_application_protocols();
          sec_protocol_options_add_tls_application_protocol(v550, "http/1.1");
          os_release(v550);
        }
        *((_BYTE *)v959 + 24) = 0;
        v551 = *(void **)(v946 + 320);
        v950[0] = v545;
        v950[1] = 0x40000000;
        v950[2] = ___ZL44nw_http1_establish_new_connection_for_streamP17nw_protocol_http1P15nw_http1_stream_block_invoke_78;
        v950[3] = &unk_1E14A1700;
        v950[4] = &v958;
        v950[5] = v946;
        nw_parameters_remove_application_protocol_options_from_protocol_stack(v551, v950);
        *(_WORD *)(v946 + 428) |= 8u;
        v552 = *(unsigned int *)(v947 + 352) + 1;
        v553 = v552 << 31 >> 31;
        *(_DWORD *)(v947 + 352) = v552;
        if (v553 == v552 && (v553 & 0x8000000000000000) == 0)
          goto LABEL_970;
        __nwlog_obj();
        v554 = *(unsigned int *)(v947 + 352);
        *(_DWORD *)v962 = 136446978;
        *(_QWORD *)&v962[4] = "nw_http1_establish_new_connection_for_stream";
        *(_WORD *)&v962[12] = 2082;
        *(_QWORD *)&v962[14] = "http1->pending_output_handler_count";
        *(_WORD *)&v962[22] = 2048;
        v963 = 1;
        *(_WORD *)v964 = 2048;
        *(_QWORD *)&v964[2] = v554;
        v555 = (char *)_os_log_send_and_compose_impl();
        type = OS_LOG_TYPE_ERROR;
        v948 = 0;
        if (__nwlog_fault(v555, &type, &v948))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            v556 = __nwlog_obj();
            v557 = type;
            if (os_log_type_enabled(v556, type))
            {
              v558 = *(unsigned int *)(v947 + 352);
              *(_DWORD *)v962 = 136446978;
              *(_QWORD *)&v962[4] = "nw_http1_establish_new_connection_for_stream";
              *(_WORD *)&v962[12] = 2082;
              *(_QWORD *)&v962[14] = "http1->pending_output_handler_count";
              *(_WORD *)&v962[22] = 2048;
              v963 = 1;
              *(_WORD *)v964 = 2048;
              *(_QWORD *)&v964[2] = v558;
              v559 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_966:
              _os_log_impl(&dword_182FBE000, v556, v557, v559, v962, 0x2Au);
            }
          }
          else if (v948)
          {
            v563 = (char *)__nw_create_backtrace_string();
            v556 = __nwlog_obj();
            v557 = type;
            v564 = os_log_type_enabled(v556, type);
            if (v563)
            {
              if (v564)
              {
                v565 = *(unsigned int *)(v947 + 352);
                *(_DWORD *)v962 = 136447234;
                *(_QWORD *)&v962[4] = "nw_http1_establish_new_connection_for_stream";
                *(_WORD *)&v962[12] = 2082;
                *(_QWORD *)&v962[14] = "http1->pending_output_handler_count";
                *(_WORD *)&v962[22] = 2048;
                v963 = 1;
                *(_WORD *)v964 = 2048;
                *(_QWORD *)&v964[2] = v565;
                v965 = 2082;
                v966 = v563;
                _os_log_impl(&dword_182FBE000, v556, v557, "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s", v962, 0x34u);
              }
              free(v563);
              goto LABEL_967;
            }
            if (v564)
            {
              v621 = *(unsigned int *)(v947 + 352);
              *(_DWORD *)v962 = 136446978;
              *(_QWORD *)&v962[4] = "nw_http1_establish_new_connection_for_stream";
              *(_WORD *)&v962[12] = 2082;
              *(_QWORD *)&v962[14] = "http1->pending_output_handler_count";
              *(_WORD *)&v962[22] = 2048;
              v963 = 1;
              *(_WORD *)v964 = 2048;
              *(_QWORD *)&v964[2] = v621;
              v559 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
              goto LABEL_966;
            }
          }
          else
          {
            v556 = __nwlog_obj();
            v557 = type;
            if (os_log_type_enabled(v556, type))
            {
              v620 = *(unsigned int *)(v947 + 352);
              *(_DWORD *)v962 = 136446978;
              *(_QWORD *)&v962[4] = "nw_http1_establish_new_connection_for_stream";
              *(_WORD *)&v962[12] = 2082;
              *(_QWORD *)&v962[14] = "http1->pending_output_handler_count";
              *(_WORD *)&v962[22] = 2048;
              v963 = 1;
              *(_WORD *)v964 = 2048;
              *(_QWORD *)&v964[2] = v620;
              v559 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
              goto LABEL_966;
            }
          }
        }
LABEL_967:
        if (v555)
          free(v555);
        *(_DWORD *)(v947 + 352) = -1;
LABEL_970:
        v622 = *(_QWORD *)(v946 + 312);
        v623 = *(void **)(v946 + 264);
        *(_QWORD *)v962 = v545;
        *(_QWORD *)&v962[8] = 0x40000000;
        *(_QWORD *)&v962[16] = ___ZL44nw_http1_establish_new_connection_for_streamP17nw_protocol_http1P15nw_http1_stream_block_invoke_81;
        v963 = (uint64_t)&unk_1E14A1728;
        *(_QWORD *)v964 = v622;
        nw_queue_context_async(v623, v962);
        _Block_object_dispose(v970, 8);
        if ((v974 & 1) != 0 && v973)
          os_release(v973);
        _Block_object_dispose(&v958, 8);
        if (!v147)
          return;
LABEL_974:
        os_release(v147);
        return;
      }
      if ((*(_BYTE *)(v25 + 158) & 1) == 0)
      {
        if (v107[1345])
        {
          v816 = v107;
          v817 = __nwlog_obj();
          v818 = os_log_type_enabled(v817, OS_LOG_TYPE_DEBUG);
          v107 = v816;
          v25 = v947;
          if (v818)
          {
            v819 = *(_DWORD *)(v947 + 372);
            v820 = *(_DWORD *)(v106 + 424);
            *(_DWORD *)buf = 136447490;
            *(_QWORD *)&buf[4] = "nw_http1_remove_pending_stream";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v947 + 74;
            *(_WORD *)&buf[22] = 2080;
            v968 = (uint64_t)" ";
            *(_WORD *)v969 = 1024;
            *(_DWORD *)&v969[2] = v819;
            *(_WORD *)&v969[6] = 1024;
            *(_DWORD *)&v969[8] = v820;
            *(_WORD *)&v969[12] = 2048;
            *(_QWORD *)&v969[14] = v106;
            _os_log_impl(&dword_182FBE000, v817, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> called for stream %u (%p)", buf, 0x36u);
            v107 = v816;
            v25 = v947;
          }
        }
      }
      if ((*(_WORD *)(v106 + 428) & 0x1000) == 0)
      {
        v136 = v107;
        __nwlog_obj();
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http1_remove_pending_stream";
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v106;
        v137 = (char *)_os_log_send_and_compose_impl();
        v970[0] = 16;
        LOBYTE(aBlock) = 0;
        if (__nwlog_fault(v137, v970, &aBlock))
        {
          if (v970[0] == 17)
          {
            v138 = __nwlog_obj();
            v139 = v970[0];
            if (os_log_type_enabled(v138, (os_log_type_t)v970[0]))
            {
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "nw_http1_remove_pending_stream";
              *(_WORD *)&buf[12] = 2048;
              *(_QWORD *)&buf[14] = v106;
              v140 = "%{public}s stream %p not in pending list, cannot remove";
LABEL_723:
              _os_log_impl(&dword_182FBE000, v138, v139, v140, buf, 0x16u);
            }
          }
          else if ((_BYTE)aBlock)
          {
            v345 = (char *)__nw_create_backtrace_string();
            v138 = __nwlog_obj();
            v139 = v970[0];
            v346 = os_log_type_enabled(v138, (os_log_type_t)v970[0]);
            if (v345)
            {
              if (v346)
              {
                *(_DWORD *)buf = 136446722;
                *(_QWORD *)&buf[4] = "nw_http1_remove_pending_stream";
                *(_WORD *)&buf[12] = 2048;
                *(_QWORD *)&buf[14] = v106;
                *(_WORD *)&buf[22] = 2082;
                v968 = (uint64_t)v345;
                _os_log_impl(&dword_182FBE000, v138, v139, "%{public}s stream %p not in pending list, cannot remove, dumping backtrace:%{public}s", buf, 0x20u);
              }
              free(v345);
              goto LABEL_724;
            }
            if (v346)
            {
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "nw_http1_remove_pending_stream";
              *(_WORD *)&buf[12] = 2048;
              *(_QWORD *)&buf[14] = v106;
              v140 = "%{public}s stream %p not in pending list, cannot remove, no backtrace";
              goto LABEL_723;
            }
          }
          else
          {
            v138 = __nwlog_obj();
            v139 = v970[0];
            if (os_log_type_enabled(v138, (os_log_type_t)v970[0]))
            {
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "nw_http1_remove_pending_stream";
              *(_WORD *)&buf[12] = 2048;
              *(_QWORD *)&buf[14] = v106;
              v140 = "%{public}s stream %p not in pending list, cannot remove, backtrace limit exceeded";
              goto LABEL_723;
            }
          }
        }
LABEL_724:
        if (v137)
          free(v137);
        v107 = v136;
        goto LABEL_808;
      }
      v278 = *(_QWORD *)(v106 + 296);
      v279 = *(_QWORD **)(v106 + 304);
      if (v278)
      {
        *(_QWORD *)(v278 + 304) = v279;
        v279 = *(_QWORD **)(v106 + 304);
      }
      else
      {
        *(_QWORD *)(v25 + 256) = v279;
      }
      *v279 = v278;
      *(_QWORD *)(v106 + 296) = 0;
      *(_QWORD *)(v106 + 304) = 0;
      v353 = *(_DWORD *)(v25 + 348);
      *(_DWORD *)(v25 + 348) = v353 - 1;
      if (v353)
      {
LABEL_806:
        *(_WORD *)(v106 + 428) &= ~0x1000u;
        if ((*(_BYTE *)(v106 + 158) & 1) == 0)
        {
          if (v107[1345])
          {
            v859 = v107;
            v860 = __nwlog_obj();
            v861 = os_log_type_enabled(v860, OS_LOG_TYPE_DEBUG);
            v107 = v859;
            if (v861)
            {
              v862 = v106 + 74;
              v863 = *(_QWORD *)(v106 + 256);
              v864 = *(_DWORD *)(*(_QWORD *)(v106 + 248) + 372);
              if (v863)
                LODWORD(v863) = *(_DWORD *)(v863 + 860);
              v106 = v946;
              v865 = *(_DWORD *)(v946 + 424);
              v866 = *(_DWORD *)(v947 + 348);
              *(_DWORD *)buf = 136448258;
              *(_QWORD *)&buf[4] = "nw_http1_remove_pending_stream";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v862;
              *(_WORD *)&buf[22] = 2080;
              v968 = (uint64_t)" ";
              *(_WORD *)v969 = 1024;
              *(_DWORD *)&v969[2] = v864;
              *(_WORD *)&v969[6] = 1024;
              *(_DWORD *)&v969[8] = v863;
              *(_WORD *)&v969[12] = 1024;
              *(_DWORD *)&v969[14] = v865;
              *(_WORD *)&v969[18] = 1024;
              *(_DWORD *)&v969[20] = v865;
              *(_WORD *)&v969[24] = 2048;
              *(_QWORD *)&v969[26] = v946;
              *(_WORD *)&v969[34] = 1024;
              *(_DWORD *)&v969[36] = v866;
              _os_log_impl(&dword_182FBE000, v860, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> removed pending stream %u (%p), now have %u pending streams", buf, 0x48u);
              v107 = v859;
            }
          }
        }
        goto LABEL_808;
      }
      v354 = v107;
      v355 = v25;
      __nwlog_obj();
      v356 = *(unsigned int *)(v355 + 348);
      *(_DWORD *)buf = 136446978;
      *(_QWORD *)&buf[4] = "nw_http1_remove_pending_stream";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = "http1->pending_stream_count";
      *(_WORD *)&buf[22] = 2048;
      v968 = 1;
      *(_WORD *)v969 = 2048;
      *(_QWORD *)&v969[2] = v356;
      v357 = (char *)_os_log_send_and_compose_impl();
      v970[0] = 16;
      LOBYTE(aBlock) = 0;
      if (__nwlog_fault(v357, v970, &aBlock))
      {
        if (v970[0] == 17)
        {
          v358 = __nwlog_obj();
          v359 = v970[0];
          if (os_log_type_enabled(v358, (os_log_type_t)v970[0]))
          {
            v360 = *(unsigned int *)(v947 + 348);
            *(_DWORD *)buf = 136446978;
            *(_QWORD *)&buf[4] = "nw_http1_remove_pending_stream";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = "http1->pending_stream_count";
            *(_WORD *)&buf[22] = 2048;
            v968 = 1;
            *(_WORD *)v969 = 2048;
            *(_QWORD *)&v969[2] = v360;
            v361 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu";
LABEL_802:
            _os_log_impl(&dword_182FBE000, v358, v359, v361, buf, 0x2Au);
          }
        }
        else if ((_BYTE)aBlock)
        {
          v432 = (char *)__nw_create_backtrace_string();
          v358 = __nwlog_obj();
          v359 = v970[0];
          v433 = os_log_type_enabled(v358, (os_log_type_t)v970[0]);
          if (v432)
          {
            if (v433)
            {
              v434 = *(unsigned int *)(v947 + 348);
              *(_DWORD *)buf = 136447234;
              *(_QWORD *)&buf[4] = "nw_http1_remove_pending_stream";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = "http1->pending_stream_count";
              *(_WORD *)&buf[22] = 2048;
              v968 = 1;
              *(_WORD *)v969 = 2048;
              *(_QWORD *)&v969[2] = v434;
              *(_WORD *)&v969[10] = 2082;
              *(_QWORD *)&v969[12] = v432;
              _os_log_impl(&dword_182FBE000, v358, v359, "%{public}s Underflow: %{public}s, decrement %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
            }
            free(v432);
            goto LABEL_803;
          }
          if (v433)
          {
            v500 = *(unsigned int *)(v947 + 348);
            *(_DWORD *)buf = 136446978;
            *(_QWORD *)&buf[4] = "nw_http1_remove_pending_stream";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = "http1->pending_stream_count";
            *(_WORD *)&buf[22] = 2048;
            v968 = 1;
            *(_WORD *)v969 = 2048;
            *(_QWORD *)&v969[2] = v500;
            v361 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, no backtrace";
            goto LABEL_802;
          }
        }
        else
        {
          v358 = __nwlog_obj();
          v359 = v970[0];
          if (os_log_type_enabled(v358, (os_log_type_t)v970[0]))
          {
            v460 = *(unsigned int *)(v947 + 348);
            *(_DWORD *)buf = 136446978;
            *(_QWORD *)&buf[4] = "nw_http1_remove_pending_stream";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = "http1->pending_stream_count";
            *(_WORD *)&buf[22] = 2048;
            v968 = 1;
            *(_WORD *)v969 = 2048;
            *(_QWORD *)&v969[2] = v460;
            v361 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, backtrace limit exceeded";
            goto LABEL_802;
          }
        }
      }
LABEL_803:
      if (v357)
        free(v357);
      *(_DWORD *)(v947 + 348) = 0;
      v106 = v946;
      v107 = v354;
      goto LABEL_806;
    }
    if (!*(_QWORD *)(v106 + 32))
    {
      if (!(*(_BYTE *)(v106 + 158) & 1 | (v107[1345] == 0)))
      {
        v206 = __nwlog_obj();
        v207 = os_log_type_enabled(v206, OS_LOG_TYPE_DEBUG);
        v25 = v947;
        if (v207)
        {
          v208 = *(_QWORD *)(v106 + 256);
          v209 = *(_DWORD *)(*(_QWORD *)(v106 + 248) + 372);
          if (v208)
            LODWORD(v208) = *(_DWORD *)(v208 + 860);
          v210 = *(_DWORD *)(v946 + 424);
          *(_DWORD *)buf = 136447746;
          *(_QWORD *)&buf[4] = "nw_http1_create_connection_for_stream_if_allowed";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v106 + 74;
          *(_WORD *)&buf[22] = 2080;
          v968 = (uint64_t)" ";
          *(_WORD *)v969 = 1024;
          *(_DWORD *)&v969[2] = v209;
          *(_WORD *)&v969[6] = 1024;
          *(_DWORD *)&v969[8] = v208;
          *(_WORD *)&v969[12] = 1024;
          *(_DWORD *)&v969[14] = v210;
          *(_WORD *)&v969[18] = 2048;
          *(_QWORD *)&v969[20] = v946;
          v126 = "%{public}s %{public}s%s<i%u:c%u:s%u> Stream %p still awaiting new output handler";
          v127 = v206;
          v128 = 60;
          goto LABEL_249;
        }
      }
      goto LABEL_250;
    }
    if (!(*(_BYTE *)(v106 + 158) & 1 | (v107[1345] == 0)))
    {
      v714 = __nwlog_obj();
      if (os_log_type_enabled(v714, OS_LOG_TYPE_DEBUG))
      {
        v715 = v106 + 74;
        v716 = *(_QWORD *)(v106 + 256);
        v717 = *(_DWORD *)(*(_QWORD *)(v106 + 248) + 372);
        if (v716)
          LODWORD(v716) = *(_DWORD *)(v716 + 860);
        v106 = v946;
        v718 = *(_DWORD *)(v946 + 424);
        v719 = *(_QWORD *)(v946 + 32);
        *(_DWORD *)buf = 136448002;
        *(_QWORD *)&buf[4] = "nw_http1_create_connection_for_stream_if_allowed";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v715;
        *(_WORD *)&buf[22] = 2080;
        v968 = (uint64_t)" ";
        *(_WORD *)v969 = 1024;
        *(_DWORD *)&v969[2] = v717;
        *(_WORD *)&v969[6] = 1024;
        *(_DWORD *)&v969[8] = v716;
        *(_WORD *)&v969[12] = 1024;
        *(_DWORD *)&v969[14] = v718;
        *(_WORD *)&v969[18] = 2048;
        *(_QWORD *)&v969[20] = v946;
        *(_WORD *)&v969[28] = 2048;
        *(_QWORD *)&v969[30] = v719;
        _os_log_impl(&dword_182FBE000, v714, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> creating connection for stream %p with new output_handler %p", buf, 0x46u);
      }
    }
    v163 = *(_OWORD **)(v106 + 32);
    if (v163)
    {
      v164 = *(void **)(v106 + 336);
      if (v164)
      {
        v165 = *(void **)(v106 + 320);
        if (v165)
        {
          v166 = malloc_type_calloc(1uLL, 0x370uLL, 0xEAFB8F1AuLL);
          if (!v166)
          {
            v720 = __nwlog_obj();
            os_log_type_enabled(v720, OS_LOG_TYPE_ERROR);
            *(_DWORD *)buf = 136446722;
            *(_QWORD *)&buf[4] = "strict_calloc";
            *(_WORD *)&buf[12] = 2048;
            *(_QWORD *)&buf[14] = 1;
            *(_WORD *)&buf[22] = 2048;
            v968 = 880;
            v721 = (void *)_os_log_send_and_compose_impl();
            if (__nwlog_abort((uint64_t)v721))
              goto LABEL_1652;
            free(v721);
          }
          bzero(v166, 0x370uLL);
          if (nw_protocol_http1_identifier::onceToken != -1)
            dispatch_once(&nw_protocol_http1_identifier::onceToken, &__block_literal_global_39812);
          v167 = v947;
          *((_QWORD *)v166 + 2) = &nw_protocol_http1_identifier::http1_protocol_identifier;
          if (nw_protocol_http1_get_callbacks(void)::onceToken[0] != -1)
          {
            dispatch_once(nw_protocol_http1_get_callbacks(void)::onceToken, &__block_literal_global_17_39614);
            v167 = v947;
          }
          *((_QWORD *)v166 + 3) = &nw_protocol_http1_get_callbacks(void)::http1_protocol_callbacks;
          *((_DWORD *)v166 + 46) = 3;
          *((_QWORD *)v166 + 22) = v166;
          *((_QWORD *)v166 + 5) = v166 + 10;
          *((_QWORD *)v166 + 60) = v167;
          nw_protocol_set_output_handler((uint64_t)v166, (uint64_t)v163);
          v168 = os_retain(v164);
          v169 = *((_BYTE *)v166 + 760);
          if ((v169 & 1) != 0)
          {
            v170 = (void *)*((_QWORD *)v166 + 94);
            if (v170)
            {
              os_release(v170);
              v169 = *((_BYTE *)v166 + 760);
            }
          }
          *((_QWORD *)v166 + 94) = v168;
          *((_BYTE *)v166 + 760) = v169 | 1;
          v171 = os_retain(v165);
          v172 = *((_BYTE *)v166 + 744);
          if ((v172 & 1) != 0)
          {
            v173 = (void *)*((_QWORD *)v166 + 92);
            if (v173)
            {
              os_release(v173);
              v172 = *((_BYTE *)v166 + 744);
            }
          }
          *((_QWORD *)v166 + 92) = v171;
          *((_BYTE *)v166 + 744) = v172 | 1;
          v174 = nw_parameters_copy_context(v165);
          v175 = *((_BYTE *)v166 + 504);
          if ((v175 & 1) != 0)
          {
            v214 = (void *)*((_QWORD *)v166 + 62);
            v176 = v947;
            if (v214)
            {
              os_release(v214);
              v176 = v947;
              v175 = *((_BYTE *)v166 + 504);
            }
          }
          else
          {
            v176 = v947;
          }
          *((_QWORD *)v166 + 62) = v174;
          *((_BYTE *)v166 + 504) = v175 | 1;
          v215 = MEMORY[0x1E0C809B0];
          *((_QWORD *)v166 + 24) = *(_QWORD *)(v176 + 192);
          *(_QWORD *)v970 = v215;
          *(_QWORD *)&v970[8] = 0x40000000;
          *(_QWORD *)&v970[16] = ___ZL26nw_http1_connection_createP11nw_protocolP17nw_protocol_http1P11nw_endpointP13nw_parameters_block_invoke;
          v971 = (uint64_t (*)(uint64_t, uint64_t))&__block_descriptor_tmp_40_39813;
          v972 = (void (*)(uint64_t))v166;
          metadata = nw_http_connection_create_metadata(v174, v970, 0);
          v217 = *((_BYTE *)v166 + 776);
          if ((v217 & 1) != 0)
          {
            v218 = (void *)*((_QWORD *)v166 + 96);
            if (v218)
            {
              os_release(v218);
              v217 = *((_BYTE *)v166 + 776);
            }
          }
          *((_QWORD *)v166 + 96) = metadata;
          *((_BYTE *)v166 + 776) = v217 | 1;
          nw_http_connection_metadata_set_version(metadata, 3);
          nw_http_connection_metadata_set_shared_connection_pool_metadata(*((void **)v166 + 96), *(void **)(v947 + 312));
          *((_QWORD *)v166 + 77) = 0;
          *((_QWORD *)v166 + 78) = (char *)v166 + 616;
          *((_QWORD *)v166 + 79) = 0;
          *((_QWORD *)v166 + 80) = (char *)v166 + 632;
          *((_QWORD *)v166 + 81) = 0;
          *((_QWORD *)v166 + 82) = (char *)v166 + 648;
          *((_QWORD *)v166 + 83) = 0;
          *((_QWORD *)v166 + 84) = (char *)v166 + 664;
          *((_QWORD *)v166 + 86) = (char *)v166 + 680;
          *((_QWORD *)v166 + 85) = 0;
          nw_frame_cache_init((uint64_t)v166 + 696, (uint64_t)v166, 256, 0x40000, 16);
          v219 = *((_QWORD *)v166 + 60);
          if (v219)
          {
            *(_OWORD *)((char *)v166 + 360) = 0u;
            *(_OWORD *)((char *)v166 + 376) = 0u;
            *(_OWORD *)((char *)v166 + 392) = 0u;
            *(_OWORD *)((char *)v166 + 408) = 0u;
            *(_OWORD *)((char *)v166 + 424) = 0u;
            *(_OWORD *)((char *)v166 + 440) = 0u;
            *(_OWORD *)((char *)v166 + 328) = 0u;
            *(_OWORD *)((char *)v166 + 344) = 0u;
            *((_QWORD *)v166 + 59) = nw_http1_on_reset;
            *((_QWORD *)v166 + 37) = nw_http1_on_message_begin;
            *((_QWORD *)v166 + 38) = nw_http1_on_url;
            *((_QWORD *)v166 + 48) = nw_http1_on_message_complete;
            *((_QWORD *)v166 + 49) = nw_http1_on_url_complete;
            *((_QWORD *)v166 + 39) = nw_http1_on_status;
            *((_QWORD *)v166 + 40) = nw_http1_on_method;
            *((_QWORD *)v166 + 50) = nw_http1_on_status_complete;
            *((_QWORD *)v166 + 51) = nw_http1_on_method_complete;
            *((_QWORD *)v166 + 42) = nw_http1_on_header_field;
            *((_QWORD *)v166 + 43) = nw_http1_on_header_value;
            *((_QWORD *)v166 + 53) = nw_http1_on_header_field_complete;
            *((_QWORD *)v166 + 54) = nw_http1_on_header_value_complete;
            *((_QWORD *)v166 + 46) = nw_http1_on_headers_complete;
            *((_QWORD *)v166 + 47) = nw_http1_on_body;
            *((_QWORD *)v166 + 57) = nw_http1_on_chunk_header;
            *((_QWORD *)v166 + 58) = nw_http1_on_chunk_complete;
            v220 = *(_BYTE *)(v219 + 376);
            *(_OWORD *)((char *)v166 + 248) = 0u;
            *(_OWORD *)((char *)v166 + 200) = 0u;
            *(_OWORD *)((char *)v166 + 264) = 0u;
            *(_OWORD *)((char *)v166 + 232) = 0u;
            *(_OWORD *)((char *)v166 + 216) = 0u;
            if ((v220 & 1) != 0)
              v221 = 1;
            else
              v221 = 2;
            *((_BYTE *)v166 + 272) = v221;
            *((_QWORD *)v166 + 35) = 0;
            *((_QWORD *)v166 + 36) = (char *)v166 + 296;
            *((_WORD *)v166 + 139) = 15619;
            *((_QWORD *)v166 + 31) = v166;
            *((_QWORD *)v166 + 32) = 238;
            if ((*((_BYTE *)v166 + 158) & 1) == 0)
            {
              v222 = __nwlog_obj();
              if (os_log_type_enabled(v222, OS_LOG_TYPE_DEBUG))
              {
                v223 = *((_QWORD *)v166 + 61);
                v224 = *(_DWORD *)(*((_QWORD *)v166 + 60) + 372);
                v225 = *((_DWORD *)v166 + 215);
                if (v223)
                  LODWORD(v223) = *(_DWORD *)(v223 + 424);
                *(_DWORD *)buf = 136448258;
                *(_QWORD *)&buf[4] = "nw_http1_connection_log_parser_version";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = (char *)v166 + 74;
                *(_WORD *)&buf[22] = 2080;
                v968 = (uint64_t)" ";
                *(_WORD *)v969 = 1024;
                *(_DWORD *)&v969[2] = v224;
                *(_WORD *)&v969[6] = 1024;
                *(_DWORD *)&v969[8] = v225;
                *(_WORD *)&v969[12] = 1024;
                *(_DWORD *)&v969[14] = v223;
                *(_WORD *)&v969[18] = 1024;
                *(_DWORD *)&v969[20] = 9;
                *(_WORD *)&v969[24] = 1024;
                *(_DWORD *)&v969[26] = 2;
                *(_WORD *)&v969[30] = 1024;
                *(_DWORD *)&v969[32] = 1;
                _os_log_impl(&dword_182FBE000, v222, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> using http parser v%u.%u.%u", buf, 0x44u);
              }
            }
            goto LABEL_386;
          }
          v722 = v163;
          __nwlog_obj();
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http1_connection_parser_init";
          v723 = (char *)_os_log_send_and_compose_impl();
          v962[0] = 16;
          LOBYTE(v950[0]) = 0;
          if (__nwlog_fault(v723, v962, v950))
          {
            if (v962[0] == 17)
            {
              v724 = __nwlog_obj();
              v725 = v962[0];
              if (os_log_type_enabled(v724, (os_log_type_t)v962[0]))
              {
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_http1_connection_parser_init";
                v726 = "%{public}s called with null http1_connection->protocol_http1";
LABEL_1416:
                _os_log_impl(&dword_182FBE000, v724, v725, v726, buf, 0xCu);
              }
            }
            else if (LOBYTE(v950[0]))
            {
              v802 = (char *)__nw_create_backtrace_string();
              v724 = __nwlog_obj();
              v725 = v962[0];
              v803 = os_log_type_enabled(v724, (os_log_type_t)v962[0]);
              if (v802)
              {
                if (v803)
                {
                  *(_DWORD *)buf = 136446466;
                  *(_QWORD *)&buf[4] = "nw_http1_connection_parser_init";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = v802;
                  _os_log_impl(&dword_182FBE000, v724, v725, "%{public}s called with null http1_connection->protocol_http1, dumping backtrace:%{public}s", buf, 0x16u);
                }
                free(v802);
                goto LABEL_1417;
              }
              if (v803)
              {
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_http1_connection_parser_init";
                v726 = "%{public}s called with null http1_connection->protocol_http1, no backtrace";
                goto LABEL_1416;
              }
            }
            else
            {
              v724 = __nwlog_obj();
              v725 = v962[0];
              if (os_log_type_enabled(v724, (os_log_type_t)v962[0]))
              {
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_http1_connection_parser_init";
                v726 = "%{public}s called with null http1_connection->protocol_http1, backtrace limit exceeded";
                goto LABEL_1416;
              }
            }
          }
LABEL_1417:
          if (v723)
            free(v723);
          v163 = v722;
LABEL_386:
          *(_QWORD *)buf = 0;
          *(_QWORD *)&buf[8] = buf;
          *(_QWORD *)&buf[16] = 0x2000000000;
          v968 = (uint64_t)v166;
          aBlock = v215;
          v952 = 0x40000000;
          v953 = ___ZL26nw_http1_connection_createP11nw_protocolP17nw_protocol_http1P11nw_endpointP13nw_parameters_block_invoke_2;
          v954 = &unk_1E14A14C8;
          v955 = (uint64_t *)buf;
          *((_QWORD *)v166 + 76) = _Block_copy(&aBlock);
          _Block_object_dispose(buf, 8);
          if ((*((_BYTE *)v166 + 158) & 1) == 0)
          {
            if (gLogDatapath)
            {
              v737 = __nwlog_obj();
              if (os_log_type_enabled(v737, OS_LOG_TYPE_DEBUG))
              {
                v738 = *((_QWORD *)v166 + 61);
                v739 = *(_DWORD *)(*((_QWORD *)v166 + 60) + 372);
                v740 = *((_DWORD *)v166 + 215);
                if (v738)
                  LODWORD(v738) = *(_DWORD *)(v738 + 424);
                *(_DWORD *)buf = 136447746;
                *(_QWORD *)&buf[4] = "nw_http1_connection_create";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = (char *)v166 + 74;
                *(_WORD *)&buf[22] = 2080;
                v968 = (uint64_t)" ";
                *(_WORD *)v969 = 1024;
                *(_DWORD *)&v969[2] = v739;
                *(_WORD *)&v969[6] = 1024;
                *(_DWORD *)&v969[8] = v740;
                *(_WORD *)&v969[12] = 1024;
                *(_DWORD *)&v969[14] = v738;
                *(_WORD *)&v969[18] = 2048;
                *(_QWORD *)&v969[20] = v166;
                _os_log_impl(&dword_182FBE000, v737, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> created %p", buf, 0x3Cu);
              }
            }
          }
          v226 = (NSObject **)(v166 + 32);
          nw_protocol_replace_input_handler((uint64_t)v163, v946, (uint64_t)v166);
          *v166 = *v163;
          v227 = (void *)*((_QWORD *)v166 + 92);
          if (v227)
          {
            v228 = v947;
            v229 = (_BYTE *)&unk_1ECD84000;
            if (!*((_QWORD *)v166 + 66))
            {
              v230 = (void **)(v166 + 35);
              v231 = nw_parameters_copy_context(*((void **)v166 + 92));
              *(_QWORD *)buf = nw_path_copy_flow_registration(v231, (uint64_t)v166);
              nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v166 + 35), buf);
              v232 = (void *)*((_QWORD *)v166 + 70);
              if (v232)
              {
                v233 = v163;
                v234 = nw_path_flow_registration_copy_endpoint(v232);
                v235 = nw_path_flow_registration_copy_parameters(*v230);
                *(_QWORD *)buf = nw_endpoint_copy_association_with_evaluator(v234, v235, 0);
                nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v166 + 33), buf);
                if (*((_QWORD *)v166 + 66))
                {
                  *(_QWORD *)buf = nw_protocol_instance_stub_create((nw_protocol *)v166);
                  nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v166 + 34), buf);
                  nw_association_register(*((void **)v166 + 66), v227, *((void **)v166 + 68), 0, &__block_literal_global_70_39832);
                  v236 = nw_association_copy_current_path(*((void **)v166 + 66), v235);
                  if (v236)
                  {
                    v237 = v236;
                    v238 = nw_path_copy_for_flow_registration(v236, *v230);
                    if (v238)
                    {
                      v239 = v238;
                      if (*v226 != v238)
                      {
                        *(_QWORD *)buf = os_retain(v238);
                        nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v166 + 32), buf);
                      }
                      if (nw_path_has_flows(v239))
                        v240 = 4096;
                      else
                        v240 = 0;
                      v241 = *((_WORD *)v166 + 436) & 0xEFFF | (*((unsigned __int8 *)v166 + 874) << 16);
                      *((_WORD *)v166 + 436) = *((_WORD *)v166 + 436) & 0xEFFF | v240;
                      *((_BYTE *)v166 + 874) = BYTE2(v241);
                      v242 = nw_parameters_copy_effective_proxy_config(v227);
                      if (v242)
                      {
                        v243 = v242;
                        if (nw_path_has_proxy_config(v237, v242))
                        {
                          *(_QWORD *)buf = os_retain(v243);
                          nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v166 + 36), buf);
                        }
                        os_release(v243);
                      }
                      os_release(v239);
                    }
                    os_release(v237);
                  }
                }
                if (v235)
                  os_release(v235);
                v163 = v233;
                if (v234)
                  os_release(v234);
              }
              v228 = v947;
              v229 = (_BYTE *)&unk_1ECD84000;
              if (v231)
              {
                os_release(v231);
                v229 = (_BYTE *)&unk_1ECD84000;
                v228 = v947;
              }
            }
            v244 = *v226;
            if (*v226)
            {
LABEL_412:
              v245 = nw_path_uses_interface_type(v244, nw_interface_type_cellular);
              v229 = (_BYTE *)&unk_1ECD84000;
              v228 = v947;
              if (v245)
                *((_QWORD *)v166 + 24) = 1000;
            }
LABEL_414:
            v246 = *(unsigned int *)(v228 + 336) + 1;
            v247 = v246 << 31 >> 31;
            *(_DWORD *)(v228 + 336) = v246;
            v248 = v946;
            if (v247 == v246 && (v247 & 0x8000000000000000) == 0)
              goto LABEL_589;
            v249 = v228;
            __nwlog_obj();
            v250 = *(unsigned int *)(v249 + 336);
            *(_DWORD *)buf = 136446978;
            *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = "http1->connections_count";
            *(_WORD *)&buf[22] = 2048;
            v968 = 1;
            *(_WORD *)v969 = 2048;
            *(_QWORD *)&v969[2] = v250;
            v251 = (char *)_os_log_send_and_compose_impl();
            v970[0] = 16;
            LOBYTE(aBlock) = 0;
            if (__nwlog_fault(v251, v970, &aBlock))
            {
              if (v970[0] == 17)
              {
                v252 = __nwlog_obj();
                v253 = v970[0];
                if (os_log_type_enabled(v252, (os_log_type_t)v970[0]))
                {
                  v254 = *(unsigned int *)(v947 + 336);
                  *(_DWORD *)buf = 136446978;
                  *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = "http1->connections_count";
                  *(_WORD *)&buf[22] = 2048;
                  v968 = 1;
                  *(_WORD *)v969 = 2048;
                  *(_QWORD *)&v969[2] = v254;
                  v255 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_585:
                  _os_log_impl(&dword_182FBE000, v252, v253, v255, buf, 0x2Au);
                }
              }
              else if ((_BYTE)aBlock)
              {
                v270 = v163;
                v271 = (char *)__nw_create_backtrace_string();
                v252 = __nwlog_obj();
                v253 = v970[0];
                v272 = os_log_type_enabled(v252, (os_log_type_t)v970[0]);
                if (v271)
                {
                  if (v272)
                  {
                    v273 = *(unsigned int *)(v947 + 336);
                    *(_DWORD *)buf = 136447234;
                    *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
                    *(_WORD *)&buf[12] = 2082;
                    *(_QWORD *)&buf[14] = "http1->connections_count";
                    *(_WORD *)&buf[22] = 2048;
                    v968 = 1;
                    *(_WORD *)v969 = 2048;
                    *(_QWORD *)&v969[2] = v273;
                    *(_WORD *)&v969[10] = 2082;
                    *(_QWORD *)&v969[12] = v271;
                    _os_log_impl(&dword_182FBE000, v252, v253, "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
                  }
                  free(v271);
                  v163 = v270;
                  goto LABEL_586;
                }
                v163 = v270;
                if (v272)
                {
                  v362 = *(unsigned int *)(v947 + 336);
                  *(_DWORD *)buf = 136446978;
                  *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = "http1->connections_count";
                  *(_WORD *)&buf[22] = 2048;
                  v968 = 1;
                  *(_WORD *)v969 = 2048;
                  *(_QWORD *)&v969[2] = v362;
                  v255 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
                  goto LABEL_585;
                }
              }
              else
              {
                v252 = __nwlog_obj();
                v253 = v970[0];
                if (os_log_type_enabled(v252, (os_log_type_t)v970[0]))
                {
                  v352 = *(unsigned int *)(v947 + 336);
                  *(_DWORD *)buf = 136446978;
                  *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = "http1->connections_count";
                  *(_WORD *)&buf[22] = 2048;
                  v968 = 1;
                  *(_WORD *)v969 = 2048;
                  *(_QWORD *)&v969[2] = v352;
                  v255 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
                  goto LABEL_585;
                }
              }
            }
LABEL_586:
            if (v251)
              free(v251);
            v228 = v947;
            *(_DWORD *)(v947 + 336) = -1;
            v248 = v946;
            v229 = (_BYTE *)&unk_1ECD84000;
LABEL_589:
            v363 = *(unsigned int *)(v228 + 360) + 1;
            v364 = v363 << 31 >> 31;
            *(_DWORD *)(v228 + 360) = v363;
            if (v364 == v363 && (v364 & 0x8000000000000000) == 0)
              goto LABEL_608;
            v365 = v228;
            __nwlog_obj();
            v366 = *(unsigned int *)(v365 + 360);
            *(_DWORD *)buf = 136446978;
            *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = "http1->next_connection_log_num";
            *(_WORD *)&buf[22] = 2048;
            v968 = 1;
            *(_WORD *)v969 = 2048;
            *(_QWORD *)&v969[2] = v366;
            v367 = (char *)_os_log_send_and_compose_impl();
            v970[0] = 16;
            LOBYTE(aBlock) = 0;
            if (__nwlog_fault(v367, v970, &aBlock))
            {
              if (v970[0] == 17)
              {
                v368 = __nwlog_obj();
                v369 = v970[0];
                if (os_log_type_enabled(v368, (os_log_type_t)v970[0]))
                {
                  v370 = *(unsigned int *)(v947 + 360);
                  *(_DWORD *)buf = 136446978;
                  *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = "http1->next_connection_log_num";
                  *(_WORD *)&buf[22] = 2048;
                  v968 = 1;
                  *(_WORD *)v969 = 2048;
                  *(_QWORD *)&v969[2] = v370;
                  v371 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_604:
                  _os_log_impl(&dword_182FBE000, v368, v369, v371, buf, 0x2Au);
                }
              }
              else if ((_BYTE)aBlock)
              {
                v372 = v163;
                v373 = (char *)__nw_create_backtrace_string();
                v368 = __nwlog_obj();
                v369 = v970[0];
                v374 = os_log_type_enabled(v368, (os_log_type_t)v970[0]);
                if (v373)
                {
                  if (v374)
                  {
                    v375 = *(unsigned int *)(v947 + 360);
                    *(_DWORD *)buf = 136447234;
                    *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
                    *(_WORD *)&buf[12] = 2082;
                    *(_QWORD *)&buf[14] = "http1->next_connection_log_num";
                    *(_WORD *)&buf[22] = 2048;
                    v968 = 1;
                    *(_WORD *)v969 = 2048;
                    *(_QWORD *)&v969[2] = v375;
                    *(_WORD *)&v969[10] = 2082;
                    *(_QWORD *)&v969[12] = v373;
                    _os_log_impl(&dword_182FBE000, v368, v369, "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
                  }
                  free(v373);
                  v163 = v372;
                  goto LABEL_605;
                }
                v163 = v372;
                if (v374)
                {
                  v377 = *(unsigned int *)(v947 + 360);
                  *(_DWORD *)buf = 136446978;
                  *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = "http1->next_connection_log_num";
                  *(_WORD *)&buf[22] = 2048;
                  v968 = 1;
                  *(_WORD *)v969 = 2048;
                  *(_QWORD *)&v969[2] = v377;
                  v371 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
                  goto LABEL_604;
                }
              }
              else
              {
                v368 = __nwlog_obj();
                v369 = v970[0];
                if (os_log_type_enabled(v368, (os_log_type_t)v970[0]))
                {
                  v376 = *(unsigned int *)(v947 + 360);
                  *(_DWORD *)buf = 136446978;
                  *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = "http1->next_connection_log_num";
                  *(_WORD *)&buf[22] = 2048;
                  v968 = 1;
                  *(_WORD *)v969 = 2048;
                  *(_QWORD *)&v969[2] = v376;
                  v371 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
                  goto LABEL_604;
                }
              }
            }
LABEL_605:
            if (v367)
              free(v367);
            LODWORD(v363) = -1;
            *(_DWORD *)(v947 + 360) = -1;
            v248 = v946;
            v229 = &unk_1ECD84000;
LABEL_608:
            *((_DWORD *)v166 + 215) = v363;
            if ((*((_BYTE *)v166 + 158) & 1) == 0)
            {
              if (v229[1345])
              {
                v741 = __nwlog_obj();
                if (os_log_type_enabled(v741, OS_LOG_TYPE_DEBUG))
                {
                  v742 = *((_QWORD *)v166 + 61);
                  v743 = *(_DWORD *)(*((_QWORD *)v166 + 60) + 372);
                  v744 = *((_DWORD *)v166 + 215);
                  if (v742)
                    LODWORD(v742) = *(_DWORD *)(v742 + 424);
                  v745 = *(_DWORD *)(v947 + 336);
                  *(_DWORD *)buf = 136448002;
                  *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = (char *)v166 + 74;
                  *(_WORD *)&buf[22] = 2080;
                  v968 = (uint64_t)" ";
                  *(_WORD *)v969 = 1024;
                  *(_DWORD *)&v969[2] = v743;
                  *(_WORD *)&v969[6] = 1024;
                  *(_DWORD *)&v969[8] = v744;
                  *(_WORD *)&v969[12] = 1024;
                  *(_DWORD *)&v969[14] = v742;
                  *(_WORD *)&v969[18] = 2048;
                  *(_QWORD *)&v969[20] = v166;
                  *(_WORD *)&v969[28] = 1024;
                  *(_DWORD *)&v969[30] = v745;
                  _os_log_impl(&dword_182FBE000, v741, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> added connection %p, now have %u connections", buf, 0x42u);
                  v248 = v946;
                }
              }
            }
            if (*(_QWORD *)(v248 + 248))
            {
              if (*((_QWORD *)v166 + 61))
              {
                __nwlog_obj();
                v378 = *((_QWORD *)v166 + 61);
                *(_DWORD *)buf = 136446722;
                *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                *(_WORD *)&buf[12] = 2048;
                *(_QWORD *)&buf[14] = v166;
                *(_WORD *)&buf[22] = 2048;
                v968 = v378;
                v379 = (char *)_os_log_send_and_compose_impl();
                v970[0] = 16;
                LOBYTE(aBlock) = 0;
                if (__nwlog_fault(v379, v970, &aBlock))
                {
                  if (v970[0] == 17)
                  {
                    v380 = __nwlog_obj();
                    v381 = v970[0];
                    if (os_log_type_enabled(v380, (os_log_type_t)v970[0]))
                    {
                      v382 = *((_QWORD *)v166 + 61);
                      *(_DWORD *)buf = 136446722;
                      *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                      *(_WORD *)&buf[12] = 2048;
                      *(_QWORD *)&buf[14] = v166;
                      *(_WORD *)&buf[22] = 2048;
                      v968 = v382;
                      v383 = "%{public}s Connection %p already has a stream (%p)";
LABEL_635:
                      _os_log_impl(&dword_182FBE000, v380, v381, v383, buf, 0x20u);
                    }
                  }
                  else if ((_BYTE)aBlock)
                  {
                    v396 = v163;
                    v397 = (char *)__nw_create_backtrace_string();
                    v380 = __nwlog_obj();
                    v381 = v970[0];
                    v398 = os_log_type_enabled(v380, (os_log_type_t)v970[0]);
                    if (v397)
                    {
                      if (v398)
                      {
                        v399 = *((_QWORD *)v166 + 61);
                        *(_DWORD *)buf = 136446978;
                        *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                        *(_WORD *)&buf[12] = 2048;
                        *(_QWORD *)&buf[14] = v166;
                        *(_WORD *)&buf[22] = 2048;
                        v968 = v399;
                        *(_WORD *)v969 = 2082;
                        *(_QWORD *)&v969[2] = v397;
                        _os_log_impl(&dword_182FBE000, v380, v381, "%{public}s Connection %p already has a stream (%p), dumping backtrace:%{public}s", buf, 0x2Au);
                      }
                      free(v397);
                      v163 = v396;
                      goto LABEL_636;
                    }
                    v163 = v396;
                    if (v398)
                    {
                      v401 = *((_QWORD *)v166 + 61);
                      *(_DWORD *)buf = 136446722;
                      *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                      *(_WORD *)&buf[12] = 2048;
                      *(_QWORD *)&buf[14] = v166;
                      *(_WORD *)&buf[22] = 2048;
                      v968 = v401;
                      v383 = "%{public}s Connection %p already has a stream (%p), no backtrace";
                      goto LABEL_635;
                    }
                  }
                  else
                  {
                    v380 = __nwlog_obj();
                    v381 = v970[0];
                    if (os_log_type_enabled(v380, (os_log_type_t)v970[0]))
                    {
                      v400 = *((_QWORD *)v166 + 61);
                      *(_DWORD *)buf = 136446722;
                      *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                      *(_WORD *)&buf[12] = 2048;
                      *(_QWORD *)&buf[14] = v166;
                      *(_WORD *)&buf[22] = 2048;
                      v968 = v400;
                      v383 = "%{public}s Connection %p already has a stream (%p), backtrace limit exceeded";
                      goto LABEL_635;
                    }
                  }
                }
LABEL_636:
                if (v379)
                  free(v379);
                v248 = v946;
                goto LABEL_639;
              }
              *(_QWORD *)(v248 + 256) = v166;
              *((_QWORD *)v166 + 61) = v248;
              nw_protocol_set_output_handler(v248, *((_QWORD *)v166 + 4));
              nw_protocol_set_input_handler((uint64_t)v166, *(_QWORD *)(v248 + 48));
              *(_OWORD *)v248 = *v166;
              v384 = v945[5];
              v386 = v945[2];
              v385 = v945[3];
              v166[8] = v945[4];
              v166[9] = v384;
              v166[6] = v386;
              v166[7] = v385;
              v387 = v945[1];
              v166[4] = *v945;
              v166[5] = v387;
              nw_http_transaction_metadata_set_connection_metadata(*(void **)(v248 + 352), *((void **)v166 + 96));
              *((_WORD *)v166 + 436) &= 0xFFD7u;
              *((_DWORD *)v166 + 216) = 1;
              if ((*((_BYTE *)v166 + 158) & 1) == 0)
              {
                v388 = __nwlog_obj();
                if (os_log_type_enabled(v388, OS_LOG_TYPE_DEBUG))
                {
                  v389 = *((_QWORD *)v166 + 61);
                  v390 = *(_DWORD *)(*((_QWORD *)v166 + 60) + 372);
                  v391 = *((_DWORD *)v166 + 215);
                  if (v389)
                    LODWORD(v389) = *(_DWORD *)(v389 + 424);
                  *(_DWORD *)buf = 136447490;
                  *(_QWORD *)&buf[4] = "nw_http1_update_connection_input_state";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = (char *)v166 + 74;
                  *(_WORD *)&buf[22] = 2080;
                  v968 = (uint64_t)" ";
                  *(_WORD *)v969 = 1024;
                  *(_DWORD *)&v969[2] = v390;
                  *(_WORD *)&v969[6] = 1024;
                  *(_DWORD *)&v969[8] = v391;
                  *(_WORD *)&v969[12] = 1024;
                  *(_DWORD *)&v969[14] = v389;
                  _os_log_impl(&dword_182FBE000, v388, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> connection input state: reading", buf, 0x32u);
                }
              }
              if ((*(_BYTE *)(v248 + 158) & 1) == 0)
              {
                v392 = __nwlog_obj();
                if (os_log_type_enabled(v392, OS_LOG_TYPE_INFO))
                {
                  v393 = *(_QWORD *)(v248 + 256);
                  v394 = *(_DWORD *)(*(_QWORD *)(v248 + 248) + 372);
                  if (v393)
                    LODWORD(v393) = *(_DWORD *)(v393 + 860);
                  v395 = *(_DWORD *)(v248 + 424);
                  *(_DWORD *)buf = 136448002;
                  *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = v248 + 74;
                  *(_WORD *)&buf[22] = 2080;
                  v968 = (uint64_t)" ";
                  *(_WORD *)v969 = 1024;
                  *(_DWORD *)&v969[2] = v394;
                  *(_WORD *)&v969[6] = 1024;
                  *(_DWORD *)&v969[8] = v393;
                  *(_WORD *)&v969[12] = 1024;
                  *(_DWORD *)&v969[14] = v395;
                  *(_WORD *)&v969[18] = 2048;
                  *(_QWORD *)&v969[20] = v248;
                  *(_WORD *)&v969[28] = 2048;
                  *(_QWORD *)&v969[30] = v166;
                  _os_log_impl(&dword_182FBE000, v392, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s<i%u:c%u:s%u> stream (%p) now using connection %p", buf, 0x46u);
                }
              }
LABEL_639:
              if ((*(_BYTE *)(v248 + 158) & 1) == 0)
              {
                v402 = __nwlog_obj();
                if (os_log_type_enabled(v402, OS_LOG_TYPE_DEBUG))
                {
                  v403 = *(_QWORD *)(v248 + 256);
                  v404 = *(_DWORD *)(*(_QWORD *)(v248 + 248) + 372);
                  if (v403)
                    LODWORD(v403) = *(_DWORD *)(v403 + 860);
                  v405 = *(_DWORD *)(v248 + 424);
                  *(_DWORD *)buf = 136448258;
                  *(_QWORD *)&buf[4] = "nw_http1_start_new_connection_for_stream";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = v248 + 74;
                  *(_WORD *)&buf[22] = 2080;
                  v968 = (uint64_t)" ";
                  *(_WORD *)v969 = 1024;
                  *(_DWORD *)&v969[2] = v404;
                  *(_WORD *)&v969[6] = 1024;
                  *(_DWORD *)&v969[8] = v403;
                  *(_WORD *)&v969[12] = 1024;
                  *(_DWORD *)&v969[14] = v405;
                  *(_WORD *)&v969[18] = 2048;
                  *(_QWORD *)&v969[20] = v166;
                  *(_WORD *)&v969[28] = 1024;
                  *(_DWORD *)&v969[30] = v405;
                  *(_WORD *)&v969[34] = 2048;
                  *(_QWORD *)&v969[36] = v248;
                  _os_log_impl(&dword_182FBE000, v402, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> created new connection %p for stream %u (%p)", buf, 0x4Cu);
                }
              }
              nw_http_transaction_metadata_set_first_on_connection(*(void **)(v248 + 352));
              v406 = (void *)nw_protocol_boringssl_copy_definition();
              v407 = nw_protocol_definition_get_identifier(v406);
              v408 = (_QWORD *)nw_protocol_get_identifier((uint64_t)v163);
              v409 = nw_protocols_are_equal(v407, v408);
              if (v406)
                os_release(v406);
              if (v409)
              {
                v410 = nw_protocol_copy_info((uint64_t)v163, 255);
                if (v410)
                {
                  v411 = (void *)v410;
                  v412 = *(_QWORD *)(v410 + 24);
                  if (*(_QWORD *)(v410 + 16) != v412)
                  {
                    v413 = *(void **)(v412 - 8);
                    if (v413)
                    {
                      v414 = os_retain(v413);
                      if (v414)
                      {
                        v415 = v414;
                        if (nw_protocol_metadata_is_tls(v414))
                        {
                          v416 = v415;
                          nw_http_connection_metadata_set_sec_metadata(*((void **)v166 + 96), v416);
                          os_release(v416);
                        }
                        os_release(v415);
                      }
                    }
                  }
                  os_release(v411);
                }
              }
              if (v166)
              {
                nw_protocol_connect((uint64_t)v163, (uint64_t)v166);
                goto LABEL_657;
              }
              __nwlog_obj();
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_http1_get_output_protocol";
              v710 = (char *)_os_log_send_and_compose_impl();
              v970[0] = 16;
              LOBYTE(aBlock) = 0;
              if (__nwlog_fault(v710, v970, &aBlock))
              {
                if (v970[0] == 17)
                {
                  v711 = __nwlog_obj();
                  v712 = v970[0];
                  if (os_log_type_enabled(v711, (os_log_type_t)v970[0]))
                  {
                    *(_DWORD *)buf = 136446210;
                    *(_QWORD *)&buf[4] = "nw_http1_get_output_protocol";
                    v713 = "%{public}s called with null connection";
LABEL_1370:
                    _os_log_impl(&dword_182FBE000, v711, v712, v713, buf, 0xCu);
                  }
                }
                else if ((_BYTE)aBlock)
                {
                  v773 = (char *)__nw_create_backtrace_string();
                  v711 = __nwlog_obj();
                  v712 = v970[0];
                  v774 = os_log_type_enabled(v711, (os_log_type_t)v970[0]);
                  if (v773)
                  {
                    if (v774)
                    {
                      *(_DWORD *)buf = 136446466;
                      *(_QWORD *)&buf[4] = "nw_http1_get_output_protocol";
                      *(_WORD *)&buf[12] = 2082;
                      *(_QWORD *)&buf[14] = v773;
                      _os_log_impl(&dword_182FBE000, v711, v712, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
                    }
                    free(v773);
                    goto LABEL_1371;
                  }
                  if (v774)
                  {
                    *(_DWORD *)buf = 136446210;
                    *(_QWORD *)&buf[4] = "nw_http1_get_output_protocol";
                    v713 = "%{public}s called with null connection, no backtrace";
                    goto LABEL_1370;
                  }
                }
                else
                {
                  v711 = __nwlog_obj();
                  v712 = v970[0];
                  if (os_log_type_enabled(v711, (os_log_type_t)v970[0]))
                  {
                    *(_DWORD *)buf = 136446210;
                    *(_QWORD *)&buf[4] = "nw_http1_get_output_protocol";
                    v713 = "%{public}s called with null connection, backtrace limit exceeded";
                    goto LABEL_1370;
                  }
                }
              }
LABEL_1371:
              if (v710)
                free(v710);
              nw_protocol_connect((uint64_t)v163, 0);
              v248 = v946;
LABEL_657:
              nw_protocol_set_output_handler(v947, 0);
              *(_WORD *)(v248 + 428) &= ~8u;
              v417 = *(_DWORD *)(v947 + 352);
              *(_DWORD *)(v947 + 352) = v417 - 1;
              if (v417)
                return;
              __nwlog_obj();
              v418 = *(unsigned int *)(v947 + 352);
              *(_DWORD *)buf = 136446978;
              *(_QWORD *)&buf[4] = "nw_http1_create_connection_for_stream_if_allowed";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = "http1->pending_output_handler_count";
              *(_WORD *)&buf[22] = 2048;
              v968 = 1;
              *(_WORD *)v969 = 2048;
              *(_QWORD *)&v969[2] = v418;
              v419 = (char *)_os_log_send_and_compose_impl();
              v970[0] = 16;
              LOBYTE(aBlock) = 0;
              if (!__nwlog_fault(v419, v970, &aBlock))
                goto LABEL_677;
              if (v970[0] == 17)
              {
                v420 = __nwlog_obj();
                v421 = v970[0];
                if (os_log_type_enabled(v420, (os_log_type_t)v970[0]))
                {
                  v422 = *(unsigned int *)(v947 + 352);
                  *(_DWORD *)buf = 136446978;
                  *(_QWORD *)&buf[4] = "nw_http1_create_connection_for_stream_if_allowed";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = "http1->pending_output_handler_count";
                  *(_WORD *)&buf[22] = 2048;
                  v968 = 1;
                  *(_WORD *)v969 = 2048;
                  *(_QWORD *)&v969[2] = v422;
                  v423 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu";
LABEL_676:
                  _os_log_impl(&dword_182FBE000, v420, v421, v423, buf, 0x2Au);
                }
              }
              else if ((_BYTE)aBlock)
              {
                v424 = (char *)__nw_create_backtrace_string();
                v420 = __nwlog_obj();
                v421 = v970[0];
                v425 = os_log_type_enabled(v420, (os_log_type_t)v970[0]);
                if (v424)
                {
                  if (v425)
                  {
                    v426 = *(unsigned int *)(v947 + 352);
                    *(_DWORD *)buf = 136447234;
                    *(_QWORD *)&buf[4] = "nw_http1_create_connection_for_stream_if_allowed";
                    *(_WORD *)&buf[12] = 2082;
                    *(_QWORD *)&buf[14] = "http1->pending_output_handler_count";
                    *(_WORD *)&buf[22] = 2048;
                    v968 = 1;
                    *(_WORD *)v969 = 2048;
                    *(_QWORD *)&v969[2] = v426;
                    *(_WORD *)&v969[10] = 2082;
                    *(_QWORD *)&v969[12] = v424;
                    _os_log_impl(&dword_182FBE000, v420, v421, "%{public}s Underflow: %{public}s, decrement %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
                  }
                  free(v424);
                  goto LABEL_677;
                }
                if (v425)
                {
                  v431 = *(unsigned int *)(v947 + 352);
                  *(_DWORD *)buf = 136446978;
                  *(_QWORD *)&buf[4] = "nw_http1_create_connection_for_stream_if_allowed";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = "http1->pending_output_handler_count";
                  *(_WORD *)&buf[22] = 2048;
                  v968 = 1;
                  *(_WORD *)v969 = 2048;
                  *(_QWORD *)&v969[2] = v431;
                  v423 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, no backtrace";
                  goto LABEL_676;
                }
              }
              else
              {
                v420 = __nwlog_obj();
                v421 = v970[0];
                if (os_log_type_enabled(v420, (os_log_type_t)v970[0]))
                {
                  v427 = *(unsigned int *)(v947 + 352);
                  *(_DWORD *)buf = 136446978;
                  *(_QWORD *)&buf[4] = "nw_http1_create_connection_for_stream_if_allowed";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = "http1->pending_output_handler_count";
                  *(_WORD *)&buf[22] = 2048;
                  v968 = 1;
                  *(_WORD *)v969 = 2048;
                  *(_QWORD *)&v969[2] = v427;
                  v423 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, backtrace limit exceeded";
                  goto LABEL_676;
                }
              }
LABEL_677:
              if (v419)
                free(v419);
              *(_DWORD *)(v947 + 352) = 0;
              return;
            }
            v732 = v163;
            __nwlog_obj();
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
            v733 = (char *)_os_log_send_and_compose_impl();
            v970[0] = 16;
            LOBYTE(aBlock) = 0;
            if (__nwlog_fault(v733, v970, &aBlock))
            {
              if (v970[0] == 17)
              {
                v734 = __nwlog_obj();
                v735 = v970[0];
                if (os_log_type_enabled(v734, (os_log_type_t)v970[0]))
                {
                  *(_DWORD *)buf = 136446210;
                  *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                  v736 = "%{public}s called with null http1_stream->protocol_http1";
LABEL_1429:
                  _os_log_impl(&dword_182FBE000, v734, v735, v736, buf, 0xCu);
                }
              }
              else if ((_BYTE)aBlock)
              {
                v806 = (char *)__nw_create_backtrace_string();
                v734 = __nwlog_obj();
                v735 = v970[0];
                v807 = os_log_type_enabled(v734, (os_log_type_t)v970[0]);
                if (v806)
                {
                  if (v807)
                  {
                    *(_DWORD *)buf = 136446466;
                    *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                    *(_WORD *)&buf[12] = 2082;
                    *(_QWORD *)&buf[14] = v806;
                    _os_log_impl(&dword_182FBE000, v734, v735, "%{public}s called with null http1_stream->protocol_http1, dumping backtrace:%{public}s", buf, 0x16u);
                  }
                  free(v806);
                  goto LABEL_1430;
                }
                if (v807)
                {
                  *(_DWORD *)buf = 136446210;
                  *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                  v736 = "%{public}s called with null http1_stream->protocol_http1, no backtrace";
                  goto LABEL_1429;
                }
              }
              else
              {
                v734 = __nwlog_obj();
                v735 = v970[0];
                if (os_log_type_enabled(v734, (os_log_type_t)v970[0]))
                {
                  *(_DWORD *)buf = 136446210;
                  *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                  v736 = "%{public}s called with null http1_stream->protocol_http1, backtrace limit exceeded";
                  goto LABEL_1429;
                }
              }
            }
LABEL_1430:
            if (v733)
              free(v733);
            v248 = v946;
            v163 = v732;
            goto LABEL_639;
          }
          v727 = v163;
          __nwlog_obj();
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_protocol_http1_set_up_association";
          v728 = (char *)_os_log_send_and_compose_impl();
          v970[0] = 16;
          LOBYTE(aBlock) = 0;
          if (__nwlog_fault(v728, v970, &aBlock))
          {
            if (v970[0] == 17)
            {
              v729 = __nwlog_obj();
              v730 = v970[0];
              if (!os_log_type_enabled(v729, (os_log_type_t)v970[0]))
                goto LABEL_1423;
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_protocol_http1_set_up_association";
              v731 = "%{public}s called with null parameters";
LABEL_1422:
              _os_log_impl(&dword_182FBE000, v729, v730, v731, buf, 0xCu);
              goto LABEL_1423;
            }
            if (!(_BYTE)aBlock)
            {
              v729 = __nwlog_obj();
              v730 = v970[0];
              if (!os_log_type_enabled(v729, (os_log_type_t)v970[0]))
                goto LABEL_1423;
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_protocol_http1_set_up_association";
              v731 = "%{public}s called with null parameters, backtrace limit exceeded";
              goto LABEL_1422;
            }
            v804 = (char *)__nw_create_backtrace_string();
            v729 = __nwlog_obj();
            v730 = v970[0];
            v805 = os_log_type_enabled(v729, (os_log_type_t)v970[0]);
            if (!v804)
            {
              if (!v805)
                goto LABEL_1423;
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_protocol_http1_set_up_association";
              v731 = "%{public}s called with null parameters, no backtrace";
              goto LABEL_1422;
            }
            if (v805)
            {
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "nw_protocol_http1_set_up_association";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v804;
              _os_log_impl(&dword_182FBE000, v729, v730, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
            }
            free(v804);
          }
LABEL_1423:
          if (v728)
            free(v728);
          v228 = v947;
          v229 = (_BYTE *)&unk_1ECD84000;
          v163 = v727;
          v244 = *v226;
          if (*v226)
            goto LABEL_412;
          goto LABEL_414;
        }
        v705 = *(_OWORD **)(v106 + 32);
        __nwlog_obj();
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http1_connection_create";
        v706 = (char *)_os_log_send_and_compose_impl();
        v962[0] = 16;
        LOBYTE(v950[0]) = 0;
        if (__nwlog_fault(v706, v962, v950))
        {
          if (v962[0] == 17)
          {
            v707 = __nwlog_obj();
            v708 = v962[0];
            if (!os_log_type_enabled(v707, (os_log_type_t)v962[0]))
              goto LABEL_1379;
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_http1_connection_create";
            v709 = "%{public}s called with null parameters";
            goto LABEL_1378;
          }
          if (!LOBYTE(v950[0]))
          {
            v707 = __nwlog_obj();
            v708 = v962[0];
            if (!os_log_type_enabled(v707, (os_log_type_t)v962[0]))
              goto LABEL_1379;
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_http1_connection_create";
            v709 = "%{public}s called with null parameters, backtrace limit exceeded";
            goto LABEL_1378;
          }
          v775 = (char *)__nw_create_backtrace_string();
          v707 = __nwlog_obj();
          v708 = v962[0];
          v792 = os_log_type_enabled(v707, (os_log_type_t)v962[0]);
          if (!v775)
          {
            if (!v792)
              goto LABEL_1379;
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_http1_connection_create";
            v709 = "%{public}s called with null parameters, no backtrace";
            goto LABEL_1378;
          }
          if (v792)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_http1_connection_create";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v775;
            v777 = "%{public}s called with null parameters, dumping backtrace:%{public}s";
            goto LABEL_1212;
          }
          goto LABEL_1213;
        }
LABEL_1379:
        if (!v706)
          goto LABEL_1381;
        goto LABEL_1380;
      }
      v705 = *(_OWORD **)(v106 + 32);
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_connection_create";
      v706 = (char *)_os_log_send_and_compose_impl();
      v962[0] = 16;
      LOBYTE(v950[0]) = 0;
      if (!__nwlog_fault(v706, v962, v950))
        goto LABEL_1379;
      if (v962[0] != 17)
      {
        if (!LOBYTE(v950[0]))
        {
          v707 = __nwlog_obj();
          v708 = v962[0];
          if (!os_log_type_enabled(v707, (os_log_type_t)v962[0]))
            goto LABEL_1379;
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http1_connection_create";
          v709 = "%{public}s called with null endpoint, backtrace limit exceeded";
          goto LABEL_1378;
        }
        v775 = (char *)__nw_create_backtrace_string();
        v707 = __nwlog_obj();
        v708 = v962[0];
        v776 = os_log_type_enabled(v707, (os_log_type_t)v962[0]);
        if (!v775)
        {
          if (!v776)
            goto LABEL_1379;
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http1_connection_create";
          v709 = "%{public}s called with null endpoint, no backtrace";
          goto LABEL_1378;
        }
        if (v776)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_http1_connection_create";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v775;
          v777 = "%{public}s called with null endpoint, dumping backtrace:%{public}s";
LABEL_1212:
          _os_log_impl(&dword_182FBE000, v707, v708, v777, buf, 0x16u);
        }
LABEL_1213:
        free(v775);
        if (!v706)
        {
LABEL_1381:
          __nwlog_obj();
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
          v877 = (char *)_os_log_send_and_compose_impl();
          v970[0] = 16;
          LOBYTE(aBlock) = 0;
          if (!__nwlog_fault(v877, v970, &aBlock))
            goto LABEL_1395;
          if (v970[0] == 17)
          {
            v878 = __nwlog_obj();
            v879 = v970[0];
            if (!os_log_type_enabled(v878, (os_log_type_t)v970[0]))
              goto LABEL_1395;
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
            v880 = "%{public}s called with null http1_connection";
          }
          else if ((_BYTE)aBlock)
          {
            v881 = (char *)__nw_create_backtrace_string();
            v878 = __nwlog_obj();
            v879 = v970[0];
            v882 = os_log_type_enabled(v878, (os_log_type_t)v970[0]);
            if (v881)
            {
              if (v882)
              {
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = v881;
                _os_log_impl(&dword_182FBE000, v878, v879, "%{public}s called with null http1_connection, dumping backtrace:%{public}s", buf, 0x16u);
              }
              free(v881);
LABEL_1395:
              if (v877)
                free(v877);
              __nwlog_obj();
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
              v883 = (char *)_os_log_send_and_compose_impl();
              v970[0] = 16;
              LOBYTE(aBlock) = 0;
              if (!__nwlog_fault(v883, v970, &aBlock))
                goto LABEL_1411;
              if (v970[0] == 17)
              {
                v884 = __nwlog_obj();
                v885 = v970[0];
                if (os_log_type_enabled(v884, (os_log_type_t)v970[0]))
                {
                  *(_DWORD *)buf = 136446210;
                  *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                  v886 = "%{public}s called with null http1_connection";
LABEL_1410:
                  _os_log_impl(&dword_182FBE000, v884, v885, v886, buf, 0xCu);
                }
              }
              else if ((_BYTE)aBlock)
              {
                v887 = (char *)__nw_create_backtrace_string();
                v884 = __nwlog_obj();
                v885 = v970[0];
                v888 = os_log_type_enabled(v884, (os_log_type_t)v970[0]);
                if (v887)
                {
                  if (v888)
                  {
                    *(_DWORD *)buf = 136446466;
                    *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                    *(_WORD *)&buf[12] = 2082;
                    *(_QWORD *)&buf[14] = v887;
                    _os_log_impl(&dword_182FBE000, v884, v885, "%{public}s called with null http1_connection, dumping backtrace:%{public}s", buf, 0x16u);
                  }
                  free(v887);
                  goto LABEL_1411;
                }
                if (v888)
                {
                  *(_DWORD *)buf = 136446210;
                  *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                  v886 = "%{public}s called with null http1_connection, no backtrace";
                  goto LABEL_1410;
                }
              }
              else
              {
                v884 = __nwlog_obj();
                v885 = v970[0];
                if (os_log_type_enabled(v884, (os_log_type_t)v970[0]))
                {
                  *(_DWORD *)buf = 136446210;
                  *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                  v886 = "%{public}s called with null http1_connection, backtrace limit exceeded";
                  goto LABEL_1410;
                }
              }
LABEL_1411:
              if (v883)
                free(v883);
              v166 = 0;
              v248 = v946;
              v163 = v705;
              goto LABEL_639;
            }
            if (!v882)
              goto LABEL_1395;
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
            v880 = "%{public}s called with null http1_connection, no backtrace";
          }
          else
          {
            v878 = __nwlog_obj();
            v879 = v970[0];
            if (!os_log_type_enabled(v878, (os_log_type_t)v970[0]))
              goto LABEL_1395;
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
            v880 = "%{public}s called with null http1_connection, backtrace limit exceeded";
          }
          _os_log_impl(&dword_182FBE000, v878, v879, v880, buf, 0xCu);
          goto LABEL_1395;
        }
LABEL_1380:
        free(v706);
        goto LABEL_1381;
      }
      v707 = __nwlog_obj();
      v708 = v962[0];
      if (!os_log_type_enabled(v707, (os_log_type_t)v962[0]))
        goto LABEL_1379;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_connection_create";
      v709 = "%{public}s called with null endpoint";
    }
    else
    {
      v705 = 0;
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_connection_create";
      v706 = (char *)_os_log_send_and_compose_impl();
      v962[0] = 16;
      LOBYTE(v950[0]) = 0;
      if (!__nwlog_fault(v706, v962, v950))
        goto LABEL_1379;
      if (v962[0] != 17)
      {
        if (!LOBYTE(v950[0]))
        {
          v707 = __nwlog_obj();
          v708 = v962[0];
          if (!os_log_type_enabled(v707, (os_log_type_t)v962[0]))
            goto LABEL_1379;
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http1_connection_create";
          v709 = "%{public}s called with null output_handler, backtrace limit exceeded";
          goto LABEL_1378;
        }
        v771 = (char *)__nw_create_backtrace_string();
        v707 = __nwlog_obj();
        v708 = v962[0];
        v772 = os_log_type_enabled(v707, (os_log_type_t)v962[0]);
        if (!v771)
        {
          if (!v772)
            goto LABEL_1379;
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http1_connection_create";
          v709 = "%{public}s called with null output_handler, no backtrace";
          goto LABEL_1378;
        }
        if (v772)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_http1_connection_create";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v771;
          _os_log_impl(&dword_182FBE000, v707, v708, "%{public}s called with null output_handler, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v771);
        goto LABEL_1379;
      }
      v707 = __nwlog_obj();
      v708 = v962[0];
      if (!os_log_type_enabled(v707, (os_log_type_t)v962[0]))
        goto LABEL_1379;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_connection_create";
      v709 = "%{public}s called with null output_handler";
    }
LABEL_1378:
    _os_log_impl(&dword_182FBE000, v707, v708, v709, buf, 0xCu);
    goto LABEL_1379;
  }
  if ((*(_BYTE *)(v25 + 158) & 1) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v129 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
    {
      v132 = *(_DWORD *)(v947 + 372);
      *(_DWORD *)buf = 136446978;
      *(_QWORD *)&buf[4] = "nw_http1_match_idle_connection_with_pending_stream";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v947 + 74;
      *(_WORD *)&buf[22] = 2080;
      v968 = (uint64_t)" ";
      *(_WORD *)v969 = 1024;
      *(_DWORD *)&v969[2] = v132;
      v131 = "%{public}s %{public}s%s<i%u> no pending streams, nothing to do";
      goto LABEL_256;
    }
  }
}

void nw_protocol_http1_disconnected(nw_protocol *a1, nw_protocol *a2)
{
  void *handle;
  int v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  unsigned __int16 *v13;
  int v14;
  int v15;
  int v16;
  int input_frames;
  nw_protocol *v18;
  int v19;
  nw_protocol **v20;
  nw_protocol *output_handler;
  nw_protocol *v22;
  _QWORD *v23;
  NSObject *v24;
  int default_input_handler_high;
  int v26;
  _DWORD *v27;
  int v28;
  _QWORD *v29;
  _QWORD *v30;
  _DWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  NSObject *v34;
  int v35;
  int v36;
  char *v37;
  uint64_t v38;
  os_log_type_t v39;
  NSObject *v40;
  os_log_type_t v41;
  const char *v42;
  char *v43;
  NSObject *v44;
  os_log_type_t v45;
  _BOOL4 v46;
  uint64_t v47;
  os_log_type_t v48;
  NSObject *v49;
  NSObject *v50;
  NSObject *v51;
  char *v52;
  NSObject *v53;
  os_log_type_t v54;
  const char *v55;
  NSObject *v56;
  uint64_t v57;
  int v58;
  int v59;
  const char *v60;
  char *v61;
  _BOOL4 v62;
  const char *v63;
  uint64_t v64;
  int v65;
  int v66;
  int v67;
  int v68;
  uint64_t v69;
  int v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  unsigned __int16 *v74;
  uint64_t v75;
  char *v76;
  NSObject *v77;
  os_log_type_t v78;
  uint64_t v79;
  const char *v80;
  NSObject *v81;
  uint64_t v82;
  int v83;
  int v84;
  uint64_t v85;
  nw_protocol *v86;
  char v87;
  int v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  NSObject *v93;
  uint64_t v94;
  int v95;
  int v96;
  const char *v97;
  NSObject *v98;
  uint64_t v99;
  int v100;
  int v101;
  uint64_t v102;
  _BOOL4 v103;
  unsigned int v104;
  uint64_t v105;
  int v106;
  int v107;
  uint64_t v108;
  int v109;
  int v110;
  uint64_t v111;
  int v112;
  int v113;
  char *v114;
  _BOOL4 v115;
  uint64_t v116;
  unsigned int v117;
  uint64_t v118;
  int v119;
  int v120;
  uint64_t v121;
  unsigned int v122;
  uint64_t v123;
  NSObject *v124;
  uint64_t v125;
  int v126;
  int v127;
  char *v128;
  uint64_t v129;
  int v130;
  int v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  NSObject *v136;
  os_log_type_t v137;
  uint64_t v138;
  const char *v139;
  uint64_t v140;
  void *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  NSObject *v145;
  uint64_t v146;
  int v147;
  int v148;
  NSObject *v149;
  uint64_t v150;
  int v151;
  int v152;
  NSObject *v153;
  uint64_t v154;
  int v155;
  int v156;
  char *v157;
  NSObject *v158;
  os_log_type_t v159;
  const char *v160;
  char *v161;
  _BOOL4 v162;
  uint64_t v163;
  char *backtrace_string;
  _BOOL4 v165;
  char *v166;
  _BOOL4 v167;
  const char *v168;
  _BOOL4 v169;
  uint64_t v170;
  uint64_t v171;
  void *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  NSObject *v176;
  uint64_t v177;
  int v178;
  int v179;
  uint64_t v180;
  void *v181;
  _BOOL4 v182;
  _BOOL4 v183;
  unsigned __int16 *v184;
  char *v185;
  NSObject *v186;
  os_log_type_t v187;
  const char *v188;
  NSObject *v189;
  uint64_t v190;
  int v191;
  int v192;
  NSObject *v193;
  _BOOL4 v194;
  int v195;
  int v196;
  int v197;
  NSObject *v198;
  char *v199;
  _BOOL4 v200;
  const char *v201;
  uint8_t *v202;
  NSObject *v203;
  uint64_t v204;
  int v205;
  int v206;
  int v207;
  char *v208;
  NSObject *v209;
  uint64_t v210;
  int v211;
  int v212;
  int v213;
  _BOOL4 v214;
  _BOOL4 v215;
  char *v216;
  _BOOL4 v217;
  uint8_t *v218;
  uint64_t v219;
  NSObject *v220;
  uint64_t v221;
  int v222;
  int v223;
  uint64_t v224;
  void *v225;
  NSObject *v226;
  uint64_t v227;
  int v228;
  int v229;
  char *v230;
  NSObject *v231;
  os_log_type_t v232;
  const char *v233;
  NSObject *v234;
  uint64_t v235;
  int v236;
  int v237;
  char *v238;
  NSObject *v239;
  os_log_type_t v240;
  const char *v241;
  char *v242;
  _BOOL4 v243;
  NSObject *v244;
  uint64_t v245;
  int v246;
  int v247;
  int v248;
  char *v249;
  _BOOL4 v250;
  char *v251;
  _BOOL4 v252;
  const char *v253;
  _BOOL4 v254;
  uint8_t *v255;
  NSObject *v256;
  void *v257;
  _BOOL4 v258;
  _WORD *v259;
  os_log_type_t v260[8];
  os_log_type_t *v261;
  char v262;
  os_log_type_t type;
  _BYTE buf[44];
  __int128 v265;
  __int16 v266;
  uint64_t v267;
  _BYTE v268[22];
  uint64_t v269;

  v269 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
    v157 = (char *)_os_log_send_and_compose_impl();
    v268[0] = 16;
    v260[0] = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v157, v268, v260))
      goto LABEL_409;
    if (v268[0] == 17)
    {
      v158 = __nwlog_obj();
      v159 = v268[0];
      if (!os_log_type_enabled(v158, (os_log_type_t)v268[0]))
        goto LABEL_409;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
      v160 = "%{public}s called with null protocol";
    }
    else if (v260[0])
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v158 = __nwlog_obj();
      v159 = v268[0];
      v165 = os_log_type_enabled(v158, (os_log_type_t)v268[0]);
      if (backtrace_string)
      {
        if (v165)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v158, v159, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_409:
        if (!v157)
          goto LABEL_411;
LABEL_410:
        free(v157);
        goto LABEL_411;
      }
      if (!v165)
        goto LABEL_409;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
      v160 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      v158 = __nwlog_obj();
      v159 = v268[0];
      if (!os_log_type_enabled(v158, (os_log_type_t)v268[0]))
        goto LABEL_409;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
      v160 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    goto LABEL_408;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
    v157 = (char *)_os_log_send_and_compose_impl();
    v268[0] = 16;
    v260[0] = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v157, v268, v260))
      goto LABEL_409;
    if (v268[0] != 17)
    {
      if (v260[0] == OS_LOG_TYPE_DEFAULT)
      {
        v158 = __nwlog_obj();
        v159 = v268[0];
        if (!os_log_type_enabled(v158, (os_log_type_t)v268[0]))
          goto LABEL_409;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
        v160 = "%{public}s called with null handle, backtrace limit exceeded";
        goto LABEL_408;
      }
      v166 = (char *)__nw_create_backtrace_string();
      v158 = __nwlog_obj();
      v159 = v268[0];
      v167 = os_log_type_enabled(v158, (os_log_type_t)v268[0]);
      if (!v166)
      {
        if (!v167)
          goto LABEL_409;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
        v160 = "%{public}s called with null handle, no backtrace";
        goto LABEL_408;
      }
      if (!v167)
        goto LABEL_291;
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v166;
      v168 = "%{public}s called with null handle, dumping backtrace:%{public}s";
      goto LABEL_290;
    }
    v158 = __nwlog_obj();
    v159 = v268[0];
    if (!os_log_type_enabled(v158, (os_log_type_t)v268[0]))
      goto LABEL_409;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
    v160 = "%{public}s called with null handle";
LABEL_408:
    _os_log_impl(&dword_182FBE000, v158, v159, v160, buf, 0xCu);
    goto LABEL_409;
  }
  v3 = *((_DWORD *)handle + 6);
  v4 = a1->handle;
  if (v3 == 1)
    goto LABEL_10;
  if (v3 != 2)
  {
    if (v3 != 3)
    {
LABEL_411:
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http1_disconnected";
      v52 = (char *)_os_log_send_and_compose_impl();
      v268[0] = 16;
      v260[0] = OS_LOG_TYPE_DEFAULT;
      if (!__nwlog_fault(v52, v268, v260))
        goto LABEL_425;
      if (v268[0] == 17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v53 = gLogObj;
        v54 = v268[0];
        if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v268[0]))
          goto LABEL_425;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_http1_disconnected";
        v55 = "%{public}s called with null http1";
        goto LABEL_424;
      }
      if (v260[0] == OS_LOG_TYPE_DEFAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v53 = gLogObj;
        v54 = v268[0];
        if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v268[0]))
          goto LABEL_425;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_http1_disconnected";
        v55 = "%{public}s called with null http1, backtrace limit exceeded";
        goto LABEL_424;
      }
      v216 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v53 = gLogObj;
      v54 = v268[0];
      v217 = os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v268[0]);
      if (!v216)
      {
        if (!v217)
          goto LABEL_425;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_http1_disconnected";
        v55 = "%{public}s called with null http1, no backtrace";
        goto LABEL_424;
      }
      if (v217)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_protocol_http1_disconnected";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v216;
        _os_log_impl(&dword_182FBE000, v53, v54, "%{public}s called with null http1, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v216);
      goto LABEL_425;
    }
    v5 = *((_QWORD *)handle + 2);
    if (v5)
    {
      v4 = (_QWORD *)(v5 + 480);
      goto LABEL_10;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
    v157 = (char *)_os_log_send_and_compose_impl();
    v268[0] = 16;
    v260[0] = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v157, v268, v260))
      goto LABEL_409;
    if (v268[0] == 17)
    {
      v158 = __nwlog_obj();
      v159 = v268[0];
      if (!os_log_type_enabled(v158, (os_log_type_t)v268[0]))
        goto LABEL_409;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
      v160 = "%{public}s called with null handle->http1_connection";
      goto LABEL_408;
    }
    if (v260[0] == OS_LOG_TYPE_DEFAULT)
    {
      v158 = __nwlog_obj();
      v159 = v268[0];
      if (!os_log_type_enabled(v158, (os_log_type_t)v268[0]))
        goto LABEL_409;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
      v160 = "%{public}s called with null handle->http1_connection, backtrace limit exceeded";
      goto LABEL_408;
    }
    v166 = (char *)__nw_create_backtrace_string();
    v158 = __nwlog_obj();
    v159 = v268[0];
    v183 = os_log_type_enabled(v158, (os_log_type_t)v268[0]);
    if (!v166)
    {
      if (!v183)
        goto LABEL_409;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
      v160 = "%{public}s called with null handle->http1_connection, no backtrace";
      goto LABEL_408;
    }
    if (v183)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v166;
      v168 = "%{public}s called with null handle->http1_connection, dumping backtrace:%{public}s";
      goto LABEL_290;
    }
LABEL_291:
    free(v166);
    if (!v157)
      goto LABEL_411;
    goto LABEL_410;
  }
  v6 = *((_QWORD *)handle + 1);
  if (!v6)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
    v157 = (char *)_os_log_send_and_compose_impl();
    v268[0] = 16;
    v260[0] = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v157, v268, v260))
      goto LABEL_409;
    if (v268[0] == 17)
    {
      v158 = __nwlog_obj();
      v159 = v268[0];
      if (!os_log_type_enabled(v158, (os_log_type_t)v268[0]))
        goto LABEL_409;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
      v160 = "%{public}s called with null handle->http1_stream";
      goto LABEL_408;
    }
    if (v260[0] == OS_LOG_TYPE_DEFAULT)
    {
      v158 = __nwlog_obj();
      v159 = v268[0];
      if (!os_log_type_enabled(v158, (os_log_type_t)v268[0]))
        goto LABEL_409;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
      v160 = "%{public}s called with null handle->http1_stream, backtrace limit exceeded";
      goto LABEL_408;
    }
    v166 = (char *)__nw_create_backtrace_string();
    v158 = __nwlog_obj();
    v159 = v268[0];
    v182 = os_log_type_enabled(v158, (os_log_type_t)v268[0]);
    if (!v166)
    {
      if (!v182)
        goto LABEL_409;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
      v160 = "%{public}s called with null handle->http1_stream, no backtrace";
      goto LABEL_408;
    }
    if (!v182)
      goto LABEL_291;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v166;
    v168 = "%{public}s called with null handle->http1_stream, dumping backtrace:%{public}s";
LABEL_290:
    _os_log_impl(&dword_182FBE000, v158, v159, v168, buf, 0x16u);
    goto LABEL_291;
  }
  v4 = (_QWORD *)(v6 + 248);
LABEL_10:
  if (!*v4)
    goto LABEL_411;
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_http1_disconnected";
    v52 = (char *)_os_log_send_and_compose_impl();
    v268[0] = 16;
    v260[0] = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v52, v268, v260))
      goto LABEL_425;
    if (v268[0] == 17)
    {
      v53 = __nwlog_obj();
      v54 = v268[0];
      if (!os_log_type_enabled(v53, (os_log_type_t)v268[0]))
        goto LABEL_425;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http1_disconnected";
      v55 = "%{public}s called with null other_protocol";
      goto LABEL_424;
    }
    if (v260[0] == OS_LOG_TYPE_DEFAULT)
    {
      v53 = __nwlog_obj();
      v54 = v268[0];
      if (!os_log_type_enabled(v53, (os_log_type_t)v268[0]))
        goto LABEL_425;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http1_disconnected";
      v55 = "%{public}s called with null other_protocol, backtrace limit exceeded";
      goto LABEL_424;
    }
    v61 = (char *)__nw_create_backtrace_string();
    v53 = __nwlog_obj();
    v54 = v268[0];
    v169 = os_log_type_enabled(v53, (os_log_type_t)v268[0]);
    if (!v61)
    {
      if (!v169)
        goto LABEL_425;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http1_disconnected";
      v55 = "%{public}s called with null other_protocol, no backtrace";
      goto LABEL_424;
    }
    if (!v169)
      goto LABEL_103;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "nw_protocol_http1_disconnected";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v61;
    v63 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
    goto LABEL_102;
  }
  if (v3 != 3)
  {
    if (v3 == 2)
    {
      v7 = *((_QWORD *)handle + 1);
      if (v7)
      {
        if ((*(_BYTE *)(v7 + 158) & 1) == 0)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v8 = gLogObj;
          if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
          {
            v9 = *(_QWORD *)(v7 + 256);
            v10 = *(_DWORD *)(*(_QWORD *)(v7 + 248) + 372);
            if (v9)
              LODWORD(v9) = *(_DWORD *)(v9 + 860);
            v11 = *(_DWORD *)(v7 + 424);
            *(_DWORD *)buf = 136447490;
            *(_QWORD *)&buf[4] = "nw_protocol_http1_disconnected";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v7 + 74;
            *(_WORD *)&buf[22] = 2080;
            *(_QWORD *)&buf[24] = " ";
            *(_WORD *)&buf[32] = 1024;
            *(_DWORD *)&buf[34] = v10;
            *(_WORD *)&buf[38] = 1024;
            *(_DWORD *)&buf[40] = v9;
            LOWORD(v265) = 1024;
            *(_DWORD *)((char *)&v265 + 2) = v11;
            _os_log_impl(&dword_182FBE000, v8, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s<i%u:c%u:s%u> initial stream disconnected", buf, 0x32u);
          }
        }
        nw_protocol_disconnected(*(_QWORD **)(v7 + 48), v7);
        return;
      }
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http1_disconnected";
      v52 = (char *)_os_log_send_and_compose_impl();
      v268[0] = 16;
      v260[0] = OS_LOG_TYPE_DEFAULT;
      if (!__nwlog_fault(v52, v268, v260))
        goto LABEL_425;
      if (v268[0] == 17)
      {
        v53 = __nwlog_obj();
        v54 = v268[0];
        if (os_log_type_enabled(v53, (os_log_type_t)v268[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_protocol_http1_disconnected";
          v55 = "%{public}s called with null http1_stream";
LABEL_424:
          _os_log_impl(&dword_182FBE000, v53, v54, v55, buf, 0xCu);
          goto LABEL_425;
        }
        goto LABEL_425;
      }
      if (v260[0] == OS_LOG_TYPE_DEFAULT)
      {
        v53 = __nwlog_obj();
        v54 = v268[0];
        if (os_log_type_enabled(v53, (os_log_type_t)v268[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_protocol_http1_disconnected";
          v55 = "%{public}s called with null http1_stream, backtrace limit exceeded";
          goto LABEL_424;
        }
LABEL_425:
        if (!v52)
          return;
        goto LABEL_426;
      }
      v61 = (char *)__nw_create_backtrace_string();
      v53 = __nwlog_obj();
      v54 = v268[0];
      v258 = os_log_type_enabled(v53, (os_log_type_t)v268[0]);
      if (!v61)
      {
        if (v258)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_protocol_http1_disconnected";
          v55 = "%{public}s called with null http1_stream, no backtrace";
          goto LABEL_424;
        }
        goto LABEL_425;
      }
      if (v258)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_protocol_http1_disconnected";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v61;
        v63 = "%{public}s called with null http1_stream, dumping backtrace:%{public}s";
        goto LABEL_102;
      }
LABEL_103:
      free(v61);
      if (!v52)
        return;
LABEL_426:
      free(v52);
      return;
    }
    goto LABEL_89;
  }
  v12 = *((_QWORD *)handle + 2);
  if (!v12)
  {
LABEL_89:
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_http1_disconnected";
    v52 = (char *)_os_log_send_and_compose_impl();
    v268[0] = 16;
    v260[0] = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v52, v268, v260))
      goto LABEL_425;
    if (v268[0] == 17)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v53 = gLogObj;
      v54 = v268[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v268[0]))
        goto LABEL_425;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http1_disconnected";
      v55 = "%{public}s called with null http1_connection";
      goto LABEL_424;
    }
    if (v260[0] == OS_LOG_TYPE_DEFAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v53 = gLogObj;
      v54 = v268[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v268[0]))
        goto LABEL_425;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http1_disconnected";
      v55 = "%{public}s called with null http1_connection, backtrace limit exceeded";
      goto LABEL_424;
    }
    v61 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v53 = gLogObj;
    v54 = v268[0];
    v62 = os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v268[0]);
    if (!v61)
    {
      if (!v62)
        goto LABEL_425;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http1_disconnected";
      v55 = "%{public}s called with null http1_connection, no backtrace";
      goto LABEL_424;
    }
    if (!v62)
      goto LABEL_103;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "nw_protocol_http1_disconnected";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v61;
    v63 = "%{public}s called with null http1_connection, dumping backtrace:%{public}s";
LABEL_102:
    _os_log_impl(&dword_182FBE000, v53, v54, v63, buf, 0x16u);
    goto LABEL_103;
  }
  v13 = (unsigned __int16 *)(v12 + 872);
  v14 = *(unsigned __int16 *)(v12 + 872);
  v15 = v14 | (*(unsigned __int8 *)(v12 + 874) << 16);
  if ((v14 & 0x2000) != 0)
  {
    if ((*(_BYTE *)(v12 + 158) & 1) != 0)
      goto LABEL_111;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v56 = gLogObj;
    if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
      goto LABEL_111;
    v57 = *(_QWORD *)(v12 + 488);
    v58 = *(_DWORD *)(*(_QWORD *)(v12 + 480) + 372);
    v59 = *(_DWORD *)(v12 + 860);
    if (v57)
      LODWORD(v57) = *(_DWORD *)(v57 + 424);
    *(_DWORD *)buf = 136447490;
    *(_QWORD *)&buf[4] = "nw_http1_connection_finish_input";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v12 + 74;
    *(_WORD *)&buf[22] = 2080;
    *(_QWORD *)&buf[24] = " ";
    *(_WORD *)&buf[32] = 1024;
    *(_DWORD *)&buf[34] = v58;
    *(_WORD *)&buf[38] = 1024;
    *(_DWORD *)&buf[40] = v59;
    LOWORD(v265) = 1024;
    *(_DWORD *)((char *)&v265 + 2) = v57;
    v60 = "%{public}s %{public}s%s<i%u:c%u:s%u> input already finished, returning";
LABEL_110:
    _os_log_impl(&dword_182FBE000, v56, OS_LOG_TYPE_INFO, v60, buf, 0x32u);
    goto LABEL_111;
  }
  *(_BYTE *)(v12 + 874) = BYTE2(v15);
  *v13 = v15 | 0x2000;
  if ((v15 & 0x40000) != 0)
  {
    if ((*(_BYTE *)(v12 + 158) & 1) != 0)
      goto LABEL_111;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v56 = gLogObj;
    if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
      goto LABEL_111;
    v64 = *(_QWORD *)(v12 + 488);
    v65 = *(_DWORD *)(*(_QWORD *)(v12 + 480) + 372);
    v66 = *(_DWORD *)(v12 + 860);
    if (v64)
      LODWORD(v64) = *(_DWORD *)(v64 + 424);
    *(_DWORD *)buf = 136447490;
    *(_QWORD *)&buf[4] = "nw_http1_connection_finish_input";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v12 + 74;
    *(_WORD *)&buf[22] = 2080;
    *(_QWORD *)&buf[24] = " ";
    *(_WORD *)&buf[32] = 1024;
    *(_DWORD *)&buf[34] = v65;
    *(_WORD *)&buf[38] = 1024;
    *(_DWORD *)&buf[40] = v66;
    LOWORD(v265) = 1024;
    *(_DWORD *)((char *)&v265 + 2) = v64;
    v60 = "%{public}s %{public}s%s<i%u:c%u:s%u> already getting input frames, returning";
    goto LABEL_110;
  }
  v259 = (_WORD *)(v12 + 872);
  v16 = 0;
  *(_QWORD *)v260 = 0;
  v261 = v260;
  do
  {
    input_frames = nw_protocol_get_input_frames(*(_QWORD *)(v12 + 32), v12, 1, 0xFFFFFFFFLL, 0xFFFFFFFFLL, (uint64_t)v260);
    v18 = *(nw_protocol **)v260;
    if (!*(_QWORD *)v260)
      goto LABEL_26;
    if (gLogDatapath)
    {
      v50 = __nwlog_obj();
      if (os_log_type_enabled(v50, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136447746;
        *(_QWORD *)&buf[4] = "nw_http1_move_frame_array";
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v18;
        *(_WORD *)&buf[22] = 2048;
        *(_QWORD *)&buf[24] = v260;
        *(_WORD *)&buf[32] = 2048;
        *(_QWORD *)&buf[34] = v12 + 616;
        *(_WORD *)&buf[42] = 1024;
        LODWORD(v265) = 1;
        WORD2(v265) = 1024;
        *(_DWORD *)((char *)&v265 + 6) = 1;
        WORD5(v265) = 1024;
        HIDWORD(v265) = 1;
        _os_log_impl(&dword_182FBE000, v50, OS_LOG_TYPE_DEBUG, "%{public}s called: initial frame %p, source %p, destination %p, temp %u, forwards %u, append %u", buf, 0x3Cu);
      }
    }
    v19 = 0;
    *(_QWORD *)v268 = 0;
    *(_QWORD *)&v268[8] = v268;
    do
    {
      output_handler = v18->output_handler;
      if (!output_handler && !v18->handle)
        output_handler = 0;
      if (gLogDatapath)
      {
        v24 = __nwlog_obj();
        if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
        {
          default_input_handler_high = HIDWORD(v18->default_input_handler);
          if (default_input_handler_high)
            default_input_handler_high -= LODWORD(v18->output_handler_context) + HIDWORD(v18->output_handler_context);
          if (output_handler)
          {
            v26 = HIDWORD(output_handler->default_input_handler);
            if (v26)
              v26 -= LODWORD(output_handler->output_handler_context) + HIDWORD(output_handler->output_handler_context);
          }
          else
          {
            v26 = 0;
          }
          *(_DWORD *)buf = 136447234;
          *(_QWORD *)&buf[4] = "nw_http1_move_frame_array";
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v18;
          *(_WORD *)&buf[22] = 1024;
          *(_DWORD *)&buf[24] = default_input_handler_high;
          *(_WORD *)&buf[28] = 2048;
          *(_QWORD *)&buf[30] = output_handler;
          *(_WORD *)&buf[38] = 1024;
          *(_DWORD *)&buf[40] = v26;
          _os_log_impl(&dword_182FBE000, v24, OS_LOG_TYPE_DEBUG, "%{public}s current frame: (%p, %u bytes), next frame: (%p, %u bytes)", buf, 0x2Cu);
        }
      }
      v22 = v18->output_handler;
      v23 = v18->handle;
      if (v22)
      {
        v22->handle = v23;
        v23 = v18->handle;
      }
      else
      {
        v261 = (os_log_type_t *)v18->handle;
      }
      *v23 = v22;
      v20 = *(nw_protocol ***)&v268[8];
      v18->output_handler = 0;
      v18->handle = v20;
      *v20 = v18;
      *(_QWORD *)&v268[8] = &v18->output_handler;
      ++v19;
      v18 = output_handler;
    }
    while (output_handler);
    if (v19)
    {
      if (gLogDatapath)
      {
        v51 = __nwlog_obj();
        if (os_log_type_enabled(v51, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_http1_move_frame_array";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v19;
          _os_log_impl(&dword_182FBE000, v51, OS_LOG_TYPE_DEBUG, "%{public}s moving %u frames from temp array to destination array", buf, 0x12u);
        }
      }
      v27 = *(_DWORD **)v268;
      v28 = v19;
      if (!*(_QWORD *)v268)
        goto LABEL_67;
      v28 = v19;
      do
      {
        v30 = v27 + 8;
        v31 = (_DWORD *)*((_QWORD *)v27 + 4);
        if (!v31 && !*((_QWORD *)v27 + 5))
          v31 = 0;
        if (gLogDatapath)
        {
          v34 = __nwlog_obj();
          if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
          {
            v35 = v27[13];
            if (v35)
              v35 -= v27[14] + v27[15];
            if (v31)
            {
              v36 = v31[13];
              if (v36)
                v36 -= v31[14] + v31[15];
            }
            else
            {
              v36 = 0;
            }
            *(_DWORD *)buf = 136447234;
            *(_QWORD *)&buf[4] = "nw_http1_move_frame_array";
            *(_WORD *)&buf[12] = 2048;
            *(_QWORD *)&buf[14] = v27;
            *(_WORD *)&buf[22] = 1024;
            *(_DWORD *)&buf[24] = v35;
            *(_WORD *)&buf[28] = 2048;
            *(_QWORD *)&buf[30] = v31;
            *(_WORD *)&buf[38] = 1024;
            *(_DWORD *)&buf[40] = v36;
            _os_log_impl(&dword_182FBE000, v34, OS_LOG_TYPE_DEBUG, "%{public}s current frame: (%p, %u bytes), next frame: (%p, %u bytes)", buf, 0x2Cu);
          }
        }
        v32 = *((_QWORD *)v27 + 4);
        v33 = (_QWORD *)*((_QWORD *)v27 + 5);
        if (v32)
        {
          *(_QWORD *)(v32 + 40) = v33;
          v33 = (_QWORD *)*((_QWORD *)v27 + 5);
        }
        else
        {
          *(_QWORD *)&v268[8] = *((_QWORD *)v27 + 5);
        }
        *v33 = v32;
        *v30 = 0;
        *((_QWORD *)v27 + 5) = 0;
        v29 = *(_QWORD **)(v12 + 624);
        *((_QWORD *)v27 + 5) = v29;
        *v29 = v27;
        *(_QWORD *)(v12 + 624) = v30;
        --v28;
        v27 = v31;
      }
      while (v31);
      if (v28)
      {
LABEL_67:
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http1_move_frame_array";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v28;
        v37 = (char *)_os_log_send_and_compose_impl();
        type = OS_LOG_TYPE_ERROR;
        v262 = 0;
        if (!__nwlog_fault(v37, &type, &v262))
          goto LABEL_81;
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v38 = gLogObj;
          v39 = type;
          if (!os_log_type_enabled((os_log_t)gLogObj, type))
            goto LABEL_81;
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_http1_move_frame_array";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v28;
          v40 = v38;
          v41 = v39;
          v42 = "%{public}s failed to deliver all temp frames, remaining %u frames";
        }
        else if (v262)
        {
          v43 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v44 = gLogObj;
          v45 = type;
          v46 = os_log_type_enabled((os_log_t)gLogObj, type);
          if (v43)
          {
            if (v46)
            {
              *(_DWORD *)buf = 136446722;
              *(_QWORD *)&buf[4] = "nw_http1_move_frame_array";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v28;
              *(_WORD *)&buf[18] = 2082;
              *(_QWORD *)&buf[20] = v43;
              _os_log_impl(&dword_182FBE000, v44, v45, "%{public}s failed to deliver all temp frames, remaining %u frames, dumping backtrace:%{public}s", buf, 0x1Cu);
            }
            free(v43);
            goto LABEL_81;
          }
          if (!v46)
          {
LABEL_81:
            if (v37)
              free(v37);
            goto LABEL_25;
          }
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_http1_move_frame_array";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v28;
          v40 = v44;
          v41 = v45;
          v42 = "%{public}s failed to deliver all temp frames, remaining %u frames, no backtrace";
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v47 = gLogObj;
          v48 = type;
          if (!os_log_type_enabled((os_log_t)gLogObj, type))
            goto LABEL_81;
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_http1_move_frame_array";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v28;
          v40 = v47;
          v41 = v48;
          v42 = "%{public}s failed to deliver all temp frames, remaining %u frames, backtrace limit exceeded";
        }
        _os_log_impl(&dword_182FBE000, v40, v41, v42, buf, 0x12u);
        goto LABEL_81;
      }
    }
LABEL_25:
    if (gLogDatapath)
    {
      v49 = __nwlog_obj();
      if (os_log_type_enabled(v49, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446978;
        *(_QWORD *)&buf[4] = "nw_http1_move_frame_array";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v19;
        *(_WORD *)&buf[18] = 2048;
        *(_QWORD *)&buf[20] = v260;
        *(_WORD *)&buf[28] = 2048;
        *(_QWORD *)&buf[30] = v12 + 616;
        _os_log_impl(&dword_182FBE000, v49, OS_LOG_TYPE_DEBUG, "%{public}s moved %u frames from %p to %p", buf, 0x26u);
      }
    }
LABEL_26:
    v16 += input_frames;
  }
  while (input_frames);
  if (gLogDatapath)
  {
    v198 = __nwlog_obj();
    if (os_log_type_enabled(v198, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_finalize_temp_frame_array";
      _os_log_impl(&dword_182FBE000, v198, OS_LOG_TYPE_DEBUG, "%{public}s called", buf, 0xCu);
    }
  }
  v85 = MEMORY[0x1E0C809B0];
  *(_QWORD *)buf = MEMORY[0x1E0C809B0];
  *(_QWORD *)&buf[8] = 0x40000000;
  *(_QWORD *)&buf[16] = ___ZL37nw_protocol_finalize_temp_frame_arrayP16nw_frame_array_sb_block_invoke_39647;
  *(_QWORD *)&buf[24] = &__block_descriptor_tmp_55_39648;
  *(_QWORD *)&buf[32] = v260;
  buf[40] = 0;
  a2 = *(nw_protocol **)v260;
  v13 = (unsigned __int16 *)(v12 + 872);
  do
  {
    if (!a2)
      break;
    v86 = a2->output_handler;
    v87 = (*(uint64_t (**)(_BYTE *))&buf[16])(buf);
    a2 = v86;
  }
  while ((v87 & 1) != 0);
  v88 = (unsigned __int16)*v259;
  v89 = v88 | (*(unsigned __int8 *)(v12 + 874) << 16);
  if ((v88 & 0x6000) == 0x2000 && !*(_QWORD *)(v12 + 616))
  {
    *(_BYTE *)(v12 + 874) = BYTE2(v89);
    *v259 = v89 | 0x4000;
    if (*(_QWORD *)(v12 + 488))
    {
      if (*(_DWORD *)(v12 + 868) && llhttp_message_needs_eof(v12 + 200))
      {
        if ((v89 & 4) == 0)
        {
          v117 = 5;
          if ((*(_BYTE *)(v12 + 158) & 1) != 0)
            goto LABEL_134;
          goto LABEL_209;
        }
LABEL_383:
        if ((*(_BYTE *)(v12 + 158) & 1) == 0)
        {
          if (gLogDatapath)
          {
            v226 = __nwlog_obj();
            if (os_log_type_enabled(v226, OS_LOG_TYPE_DEBUG))
            {
              v227 = *(_QWORD *)(v12 + 488);
              v228 = *(_DWORD *)(*(_QWORD *)(v12 + 480) + 372);
              v229 = *(_DWORD *)(v12 + 860);
              if (v227)
                LODWORD(v227) = *(_DWORD *)(v227 + 424);
              *(_DWORD *)buf = 136447490;
              *(_QWORD *)&buf[4] = "nw_http1_parser_signal_eof_if_needed";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v12 + 74;
              *(_WORD *)&buf[22] = 2080;
              *(_QWORD *)&buf[24] = " ";
              *(_WORD *)&buf[32] = 1024;
              *(_DWORD *)&buf[34] = v228;
              *(_WORD *)&buf[38] = 1024;
              *(_DWORD *)&buf[40] = v229;
              LOWORD(v265) = 1024;
              *(_DWORD *)((char *)&v265 + 2) = v227;
              _os_log_impl(&dword_182FBE000, v226, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> signaled eof and terminated message successfully", buf, 0x32u);
              v13 = (unsigned __int16 *)(v12 + 872);
            }
          }
        }
        *((_BYTE *)v13 + 2) = (*v13 | (*((unsigned __int8 *)v13 + 2) << 16) | 0x10000u) >> 16;
        goto LABEL_134;
      }
      v122 = llhttp_finish(v12 + 200);
      if ((*v259 & 4) != 0)
        goto LABEL_383;
      v117 = v122;
      if (!v122)
        goto LABEL_383;
      if (v122 != 14)
        goto LABEL_208;
      v123 = *(_QWORD *)(v12 + 488);
      if (v123)
      {
        v117 = 14;
        if ((*v259 & 1) != 0
          && (*(_WORD *)(v123 + 428) & 1) == 0
          && !*(_DWORD *)(v12 + 848)
          && !*(_DWORD *)(v12 + 852)
          && !*(_DWORD *)(v12 + 856))
        {
          if ((*v259 & 2) != 0 && *(_QWORD *)(v12 + 800))
          {
            if (!*(_QWORD *)(v12 + 808))
            {
              v208 = strdup("");
              if (!v208)
              {
                v256 = __nwlog_obj();
                os_log_type_enabled(v256, OS_LOG_TYPE_ERROR);
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "strict_strdup";
                v257 = (void *)_os_log_send_and_compose_impl();
                if (__nwlog_abort((uint64_t)v257))
                {
                  __break(1u);
                  return;
                }
                free(v257);
              }
              *(_QWORD *)(v12 + 808) = v208;
            }
            nw_http1_on_header_value_complete(v12 + 200);
          }
          nw_http1_on_headers_complete(v12 + 200);
          nw_http1_on_message_complete(v12 + 200);
          v13 = (unsigned __int16 *)(v12 + 872);
          goto LABEL_383;
        }
LABEL_208:
        if ((*(_BYTE *)(v12 + 158) & 1) != 0)
          goto LABEL_134;
        goto LABEL_209;
      }
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_recover_incomplete_header";
      v238 = (char *)_os_log_send_and_compose_impl();
      v268[0] = 16;
      type = OS_LOG_TYPE_DEFAULT;
      if (__nwlog_fault(v238, v268, &type))
      {
        if (v268[0] == 17)
        {
          v239 = __nwlog_obj();
          v240 = v268[0];
          if (!os_log_type_enabled(v239, (os_log_type_t)v268[0]))
            goto LABEL_527;
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http1_recover_incomplete_header";
          v241 = "%{public}s called with null http1_stream";
LABEL_526:
          _os_log_impl(&dword_182FBE000, v239, v240, v241, buf, 0xCu);
          goto LABEL_527;
        }
        if (type == OS_LOG_TYPE_DEFAULT)
        {
          v239 = __nwlog_obj();
          v240 = v268[0];
          if (!os_log_type_enabled(v239, (os_log_type_t)v268[0]))
            goto LABEL_527;
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http1_recover_incomplete_header";
          v241 = "%{public}s called with null http1_stream, backtrace limit exceeded";
          goto LABEL_526;
        }
        v249 = (char *)__nw_create_backtrace_string();
        v239 = __nwlog_obj();
        v240 = v268[0];
        v250 = os_log_type_enabled(v239, (os_log_type_t)v268[0]);
        if (!v249)
        {
          if (!v250)
            goto LABEL_527;
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http1_recover_incomplete_header";
          v241 = "%{public}s called with null http1_stream, no backtrace";
          goto LABEL_526;
        }
        if (v250)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_http1_recover_incomplete_header";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v249;
          _os_log_impl(&dword_182FBE000, v239, v240, "%{public}s called with null http1_stream, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v249);
      }
LABEL_527:
      if (v238)
        free(v238);
      v117 = 14;
      v13 = (unsigned __int16 *)(v12 + 872);
      if ((*(_BYTE *)(v12 + 158) & 1) != 0)
        goto LABEL_134;
LABEL_209:
      v124 = __nwlog_obj();
      if (os_log_type_enabled(v124, OS_LOG_TYPE_ERROR))
      {
        v125 = *(_QWORD *)(v12 + 488);
        if (v125)
          LODWORD(v125) = *(_DWORD *)(v125 + 424);
        if (v117 >= 0x24)
          abort();
        v126 = *(_DWORD *)(*(_QWORD *)(v12 + 480) + 372);
        v127 = *(_DWORD *)(v12 + 860);
        v128 = off_1E14A4C50[v117];
        *(_DWORD *)buf = 136447746;
        *(_QWORD *)&buf[4] = "nw_http1_parser_signal_eof_if_needed";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v12 + 74;
        *(_WORD *)&buf[22] = 2080;
        *(_QWORD *)&buf[24] = " ";
        *(_WORD *)&buf[32] = 1024;
        *(_DWORD *)&buf[34] = v126;
        *(_WORD *)&buf[38] = 1024;
        *(_DWORD *)&buf[40] = v127;
        LOWORD(v265) = 1024;
        *(_DWORD *)((char *)&v265 + 2) = v125;
        WORD3(v265) = 2080;
        *((_QWORD *)&v265 + 1) = v128;
        _os_log_impl(&dword_182FBE000, v124, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u:c%u:s%u> parser eof did not terminate full message with errno: %s, deferring input error", buf, 0x3Cu);
      }
      goto LABEL_134;
    }
    if ((v89 & 0x100) != 0)
    {
      if ((*(_BYTE *)(v12 + 158) & 1) == 0)
      {
        if (gLogDatapath)
        {
          v149 = __nwlog_obj();
          if (os_log_type_enabled(v149, OS_LOG_TYPE_DEBUG))
          {
            v150 = *(_QWORD *)(v12 + 488);
            v151 = *(_DWORD *)(*(_QWORD *)(v12 + 480) + 372);
            v152 = *(_DWORD *)(v12 + 860);
            if (v150)
              LODWORD(v150) = *(_DWORD *)(v150 + 424);
            *(_DWORD *)buf = 136447490;
            *(_QWORD *)&buf[4] = "nw_http1_connection_close";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v12 + 74;
            *(_WORD *)&buf[22] = 2080;
            *(_QWORD *)&buf[24] = " ";
            *(_WORD *)&buf[32] = 1024;
            *(_DWORD *)&buf[34] = v151;
            *(_WORD *)&buf[38] = 1024;
            *(_DWORD *)&buf[40] = v152;
            LOWORD(v265) = 1024;
            *(_DWORD *)((char *)&v265 + 2) = v150;
            _os_log_impl(&dword_182FBE000, v149, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> already closed", buf, 0x32u);
            v13 = (unsigned __int16 *)(v12 + 872);
          }
        }
      }
      goto LABEL_134;
    }
    *(_BYTE *)(v12 + 874) = BYTE2(v89);
    *v259 = v89 | 0x4100;
    if ((*(_BYTE *)(v12 + 158) & 1) == 0)
    {
      if (gLogDatapath)
      {
        v234 = __nwlog_obj();
        if (os_log_type_enabled(v234, OS_LOG_TYPE_DEBUG))
        {
          v235 = *(_QWORD *)(v12 + 488);
          v236 = *(_DWORD *)(*(_QWORD *)(v12 + 480) + 372);
          v237 = *(_DWORD *)(v12 + 860);
          if (v235)
            LODWORD(v235) = *(_DWORD *)(v235 + 424);
          *(_DWORD *)buf = 136447490;
          *(_QWORD *)&buf[4] = "nw_http1_connection_close";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v12 + 74;
          *(_WORD *)&buf[22] = 2080;
          *(_QWORD *)&buf[24] = " ";
          *(_WORD *)&buf[32] = 1024;
          *(_DWORD *)&buf[34] = v236;
          *(_WORD *)&buf[38] = 1024;
          *(_DWORD *)&buf[40] = v237;
          LOWORD(v265) = 1024;
          *(_DWORD *)((char *)&v265 + 2) = v235;
          _os_log_impl(&dword_182FBE000, v234, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> http connection closed, increasing pool width", buf, 0x32u);
          v13 = (unsigned __int16 *)(v12 + 872);
        }
      }
    }
    v129 = *(_QWORD *)(v12 + 480);
    if (!v129)
    {
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
      v230 = (char *)_os_log_send_and_compose_impl();
      v268[0] = 16;
      type = OS_LOG_TYPE_DEFAULT;
      if (!__nwlog_fault(v230, v268, &type))
        goto LABEL_537;
      if (v268[0] == 17)
      {
        v231 = __nwlog_obj();
        v232 = v268[0];
        if (!os_log_type_enabled(v231, (os_log_type_t)v268[0]))
          goto LABEL_537;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
        v233 = "%{public}s called with null http1";
      }
      else if (type)
      {
        v242 = (char *)__nw_create_backtrace_string();
        v231 = __nwlog_obj();
        v232 = v268[0];
        v243 = os_log_type_enabled(v231, (os_log_type_t)v268[0]);
        if (v242)
        {
          if (v243)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v242;
            _os_log_impl(&dword_182FBE000, v231, v232, "%{public}s called with null http1, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v242);
          goto LABEL_537;
        }
        if (!v243)
          goto LABEL_537;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
        v233 = "%{public}s called with null http1, no backtrace";
      }
      else
      {
        v231 = __nwlog_obj();
        v232 = v268[0];
        if (!os_log_type_enabled(v231, (os_log_type_t)v268[0]))
          goto LABEL_537;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
        v233 = "%{public}s called with null http1, backtrace limit exceeded";
      }
      v255 = buf;
LABEL_536:
      _os_log_impl(&dword_182FBE000, v231, v232, v233, v255, 0xCu);
      goto LABEL_537;
    }
    v130 = *v13;
    v131 = v130 | (*((unsigned __int8 *)v13 + 2) << 16);
    if ((v130 & 0x800) != 0)
    {
      if ((*(_BYTE *)(v12 + 158) & 1) != 0
        || !gLogDatapath
        || (v153 = __nwlog_obj(), !os_log_type_enabled(v153, OS_LOG_TYPE_DEBUG)))
      {
LABEL_324:
        if (*(_QWORD *)(v12 + 488))
          goto LABEL_134;
LABEL_325:
        v175 = *(_QWORD *)(v12 + 784);
        if (v175)
        {
          nw_queue_set_timer_values(v175, 0x8000000000000000, 0xFFFFFFFFFFFFFFFFLL, 0x3B9ACA00uLL);
        }
        else
        {
          if ((*(_BYTE *)(v12 + 158) & 1) == 0)
          {
            v176 = __nwlog_obj();
            if (os_log_type_enabled(v176, OS_LOG_TYPE_ERROR))
            {
              v177 = *(_QWORD *)(v12 + 488);
              v178 = *(_DWORD *)(*(_QWORD *)(v12 + 480) + 372);
              v179 = *(_DWORD *)(v12 + 860);
              if (v177)
                LODWORD(v177) = *(_DWORD *)(v177 + 424);
              *(_DWORD *)buf = 136447490;
              *(_QWORD *)&buf[4] = "nw_http1_connection_close";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v12 + 74;
              *(_WORD *)&buf[22] = 2080;
              *(_QWORD *)&buf[24] = " ";
              *(_WORD *)&buf[32] = 1024;
              *(_DWORD *)&buf[34] = v178;
              *(_WORD *)&buf[38] = 1024;
              *(_DWORD *)&buf[40] = v179;
              LOWORD(v265) = 1024;
              *(_DWORD *)((char *)&v265 + 2) = v177;
              _os_log_impl(&dword_182FBE000, v176, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u:c%u:s%u> No destroy timer on HTTP/1 connection when closing", buf, 0x32u);
            }
          }
          v180 = *(_QWORD *)(v12 + 608);
          v181 = *(void **)(v12 + 496);
          *(_QWORD *)buf = v85;
          *(_QWORD *)&buf[8] = 0x40000000;
          *(_QWORD *)&buf[16] = ___ZL25nw_http1_connection_closeP19nw_http1_connection_block_invoke;
          *(_QWORD *)&buf[24] = &unk_1E14A14F0;
          *(_QWORD *)&buf[32] = v180;
          nw_queue_context_async(v181, buf);
        }
        goto LABEL_134;
      }
      v154 = *(_QWORD *)(v12 + 488);
      v155 = *(_DWORD *)(*(_QWORD *)(v12 + 480) + 372);
      v156 = *(_DWORD *)(v12 + 860);
      if (v154)
        LODWORD(v154) = *(_DWORD *)(v154 + 424);
      *(_DWORD *)buf = 136447490;
      *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v12 + 74;
      *(_WORD *)&buf[22] = 2080;
      *(_QWORD *)&buf[24] = " ";
      *(_WORD *)&buf[32] = 1024;
      *(_DWORD *)&buf[34] = v155;
      *(_WORD *)&buf[38] = 1024;
      *(_DWORD *)&buf[40] = v156;
      LOWORD(v265) = 1024;
      *(_DWORD *)((char *)&v265 + 2) = v154;
      _os_log_impl(&dword_182FBE000, v153, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> Connection already marked as not-reusable, ignoring", buf, 0x32u);
      goto LABEL_539;
    }
    *((_BYTE *)v13 + 2) = BYTE2(v131);
    *v13 = v131 | 0x800;
    v132 = *(unsigned int *)(v129 + 368) + 1;
    v133 = v132 << 31 >> 31;
    *(_DWORD *)(v129 + 368) = v132;
    if (v133 == v132 && (v133 & 0x8000000000000000) == 0)
    {
LABEL_319:
      if ((*(_BYTE *)(v12 + 158) & 1) == 0)
      {
        if (gLogDatapath)
        {
          v244 = __nwlog_obj();
          if (os_log_type_enabled(v244, OS_LOG_TYPE_DEBUG))
          {
            v245 = *(_QWORD *)(v12 + 488);
            v246 = *(_DWORD *)(*(_QWORD *)(v12 + 480) + 372);
            v247 = *(_DWORD *)(v12 + 860);
            if (v245)
              LODWORD(v245) = *(_DWORD *)(v245 + 424);
            v248 = *(_DWORD *)(v129 + 368) + *(_DWORD *)(v129 + 364);
            *(_DWORD *)buf = 136447746;
            *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v12 + 74;
            *(_WORD *)&buf[22] = 2080;
            *(_QWORD *)&buf[24] = " ";
            *(_WORD *)&buf[32] = 1024;
            *(_DWORD *)&buf[34] = v246;
            *(_WORD *)&buf[38] = 1024;
            *(_DWORD *)&buf[40] = v247;
            LOWORD(v265) = 1024;
            *(_DWORD *)((char *)&v265 + 2) = v245;
            WORD3(v265) = 1024;
            DWORD2(v265) = v248;
            _os_log_impl(&dword_182FBE000, v244, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> connection marked as not-reusable, increased pool width to %u", buf, 0x38u);
            v13 = (unsigned __int16 *)(v12 + 872);
          }
        }
      }
      v172 = *(void **)(v12 + 496);
      if (!v172)
      {
        __nwlog_obj();
        *(_DWORD *)v268 = 136446210;
        *(_QWORD *)&v268[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
        v230 = (char *)_os_log_send_and_compose_impl();
        type = OS_LOG_TYPE_ERROR;
        v262 = 0;
        if (!__nwlog_fault(v230, &type, &v262))
          goto LABEL_537;
        if (type == OS_LOG_TYPE_FAULT)
        {
          v231 = __nwlog_obj();
          v232 = type;
          if (!os_log_type_enabled(v231, type))
            goto LABEL_537;
          *(_DWORD *)v268 = 136446210;
          *(_QWORD *)&v268[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
          v233 = "%{public}s called with null http1_connection->context";
LABEL_535:
          v255 = v268;
          goto LABEL_536;
        }
        if (!v262)
        {
          v231 = __nwlog_obj();
          v232 = type;
          if (!os_log_type_enabled(v231, type))
            goto LABEL_537;
          *(_DWORD *)v268 = 136446210;
          *(_QWORD *)&v268[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
          v233 = "%{public}s called with null http1_connection->context, backtrace limit exceeded";
          goto LABEL_535;
        }
        v251 = (char *)__nw_create_backtrace_string();
        v231 = __nwlog_obj();
        v232 = type;
        v252 = os_log_type_enabled(v231, type);
        if (!v251)
        {
          if (!v252)
            goto LABEL_537;
          *(_DWORD *)v268 = 136446210;
          *(_QWORD *)&v268[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
          v233 = "%{public}s called with null http1_connection->context, no backtrace";
          goto LABEL_535;
        }
        if (!v252)
          goto LABEL_511;
        *(_DWORD *)v268 = 136446466;
        *(_QWORD *)&v268[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
        *(_WORD *)&v268[12] = 2082;
        *(_QWORD *)&v268[14] = v251;
        v253 = "%{public}s called with null http1_connection->context, dumping backtrace:%{public}s";
        goto LABEL_510;
      }
      v173 = *(_QWORD *)(v12 + 480);
      if (v173)
      {
        v174 = *(_QWORD *)(v173 + 200);
        *(_QWORD *)buf = v85;
        *(_QWORD *)&buf[8] = 0x40000000;
        *(_QWORD *)&buf[16] = ___ZL56nw_http1_match_idle_connection_with_pending_stream_asyncP19nw_http1_connection_block_invoke;
        *(_QWORD *)&buf[24] = &unk_1E14A1518;
        *(_QWORD *)&buf[32] = v174;
        nw_queue_context_async(v172, buf);
        goto LABEL_324;
      }
      __nwlog_obj();
      *(_DWORD *)v268 = 136446210;
      *(_QWORD *)&v268[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
      v230 = (char *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      v262 = 0;
      if (__nwlog_fault(v230, &type, &v262))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          v231 = __nwlog_obj();
          v232 = type;
          if (!os_log_type_enabled(v231, type))
            goto LABEL_537;
          *(_DWORD *)v268 = 136446210;
          *(_QWORD *)&v268[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
          v233 = "%{public}s called with null http1";
          goto LABEL_535;
        }
        if (!v262)
        {
          v231 = __nwlog_obj();
          v232 = type;
          if (!os_log_type_enabled(v231, type))
            goto LABEL_537;
          *(_DWORD *)v268 = 136446210;
          *(_QWORD *)&v268[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
          v233 = "%{public}s called with null http1, backtrace limit exceeded";
          goto LABEL_535;
        }
        v251 = (char *)__nw_create_backtrace_string();
        v231 = __nwlog_obj();
        v232 = type;
        v254 = os_log_type_enabled(v231, type);
        if (!v251)
        {
          if (!v254)
            goto LABEL_537;
          *(_DWORD *)v268 = 136446210;
          *(_QWORD *)&v268[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
          v233 = "%{public}s called with null http1, no backtrace";
          goto LABEL_535;
        }
        if (!v254)
          goto LABEL_511;
        *(_DWORD *)v268 = 136446466;
        *(_QWORD *)&v268[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
        *(_WORD *)&v268[12] = 2082;
        *(_QWORD *)&v268[14] = v251;
        v253 = "%{public}s called with null http1, dumping backtrace:%{public}s";
LABEL_510:
        _os_log_impl(&dword_182FBE000, v231, v232, v253, v268, 0x16u);
LABEL_511:
        free(v251);
        if (v230)
LABEL_538:
          free(v230);
LABEL_539:
        v13 = (unsigned __int16 *)(v12 + 872);
        if (*(_QWORD *)(v12 + 488))
          goto LABEL_134;
        goto LABEL_325;
      }
LABEL_537:
      if (!v230)
        goto LABEL_539;
      goto LABEL_538;
    }
    __nwlog_obj();
    v134 = *(unsigned int *)(v129 + 368);
    *(_DWORD *)buf = 136446978;
    *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = "http1->nonresuable_connections";
    *(_WORD *)&buf[22] = 2048;
    *(_QWORD *)&buf[24] = 1;
    *(_WORD *)&buf[32] = 2048;
    *(_QWORD *)&buf[34] = v134;
    v135 = (char *)_os_log_send_and_compose_impl();
    v268[0] = 16;
    type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v135, v268, &type))
    {
      if (v268[0] == 17)
      {
        v136 = __nwlog_obj();
        v137 = v268[0];
        if (os_log_type_enabled(v136, (os_log_type_t)v268[0]))
        {
          v138 = *(unsigned int *)(v129 + 368);
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = "http1->nonresuable_connections";
          *(_WORD *)&buf[22] = 2048;
          *(_QWORD *)&buf[24] = 1;
          *(_WORD *)&buf[32] = 2048;
          *(_QWORD *)&buf[34] = v138;
          v139 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_315:
          _os_log_impl(&dword_182FBE000, v136, v137, v139, buf, 0x2Au);
        }
      }
      else if (type)
      {
        v161 = (char *)__nw_create_backtrace_string();
        v136 = __nwlog_obj();
        v137 = v268[0];
        v162 = os_log_type_enabled(v136, (os_log_type_t)v268[0]);
        if (v161)
        {
          if (v162)
          {
            v163 = *(unsigned int *)(v129 + 368);
            *(_DWORD *)buf = 136447234;
            *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = "http1->nonresuable_connections";
            *(_WORD *)&buf[22] = 2048;
            *(_QWORD *)&buf[24] = 1;
            *(_WORD *)&buf[32] = 2048;
            *(_QWORD *)&buf[34] = v163;
            *(_WORD *)&buf[42] = 2082;
            *(_QWORD *)&v265 = v161;
            _os_log_impl(&dword_182FBE000, v136, v137, "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
          }
          free(v161);
          goto LABEL_316;
        }
        if (v162)
        {
          v171 = *(unsigned int *)(v129 + 368);
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = "http1->nonresuable_connections";
          *(_WORD *)&buf[22] = 2048;
          *(_QWORD *)&buf[24] = 1;
          *(_WORD *)&buf[32] = 2048;
          *(_QWORD *)&buf[34] = v171;
          v139 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
          goto LABEL_315;
        }
      }
      else
      {
        v136 = __nwlog_obj();
        v137 = v268[0];
        if (os_log_type_enabled(v136, (os_log_type_t)v268[0]))
        {
          v170 = *(unsigned int *)(v129 + 368);
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = "http1->nonresuable_connections";
          *(_WORD *)&buf[22] = 2048;
          *(_QWORD *)&buf[24] = 1;
          *(_WORD *)&buf[32] = 2048;
          *(_QWORD *)&buf[34] = v170;
          v139 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
          goto LABEL_315;
        }
      }
    }
LABEL_316:
    if (v135)
      free(v135);
    *(_DWORD *)(v129 + 368) = -1;
    v13 = (unsigned __int16 *)(v12 + 872);
    goto LABEL_319;
  }
LABEL_134:
  v90 = *(_QWORD *)(v12 + 616);
  v91 = *(_QWORD *)(v12 + 632);
  v92 = *v13 & 0x204;
  if ((*v13 & 0x2000) != 0)
  {
    v102 = v90 | v91;
    v103 = (v90 | v91) == 0;
    v104 = ((*v13 | (*((unsigned __int8 *)v13 + 2) << 16)) >> 9) & 1;
    if (v92 == 4)
      v104 = 1;
    if (v102 || !v104)
    {
      if (v92 == 4)
        goto LABEL_175;
      if (!v103)
        goto LABEL_175;
      *(_DWORD *)(v12 + 864) = 5;
      if ((*(_BYTE *)(v12 + 158) & 1) != 0)
        goto LABEL_175;
      v93 = __nwlog_obj();
      if (!os_log_type_enabled(v93, OS_LOG_TYPE_DEBUG))
        goto LABEL_175;
      v108 = *(_QWORD *)(v12 + 488);
      v109 = *(_DWORD *)(*(_QWORD *)(v12 + 480) + 372);
      v110 = *(_DWORD *)(v12 + 860);
      if (v108)
        LODWORD(v108) = *(_DWORD *)(v108 + 424);
      *(_DWORD *)buf = 136447490;
      *(_QWORD *)&buf[4] = "nw_http1_update_connection_input_state";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v12 + 74;
      *(_WORD *)&buf[22] = 2080;
      *(_QWORD *)&buf[24] = " ";
      *(_WORD *)&buf[32] = 1024;
      *(_DWORD *)&buf[34] = v109;
      *(_WORD *)&buf[38] = 1024;
      *(_DWORD *)&buf[40] = v110;
      LOWORD(v265) = 1024;
      *(_DWORD *)((char *)&v265 + 2) = v108;
      v97 = "%{public}s %{public}s%s<i%u:c%u:s%u> connection input state: connection error";
    }
    else
    {
      *(_DWORD *)(v12 + 864) = 4;
      if ((*(_BYTE *)(v12 + 158) & 1) != 0)
        goto LABEL_175;
      v93 = __nwlog_obj();
      if (!os_log_type_enabled(v93, OS_LOG_TYPE_DEBUG))
        goto LABEL_175;
      v105 = *(_QWORD *)(v12 + 488);
      v106 = *(_DWORD *)(*(_QWORD *)(v12 + 480) + 372);
      v107 = *(_DWORD *)(v12 + 860);
      if (v105)
        LODWORD(v105) = *(_DWORD *)(v105 + 424);
      *(_DWORD *)buf = 136447490;
      *(_QWORD *)&buf[4] = "nw_http1_update_connection_input_state";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v12 + 74;
      *(_WORD *)&buf[22] = 2080;
      *(_QWORD *)&buf[24] = " ";
      *(_WORD *)&buf[32] = 1024;
      *(_DWORD *)&buf[34] = v106;
      *(_WORD *)&buf[38] = 1024;
      *(_DWORD *)&buf[40] = v107;
      LOWORD(v265) = 1024;
      *(_DWORD *)((char *)&v265 + 2) = v105;
      v97 = "%{public}s %{public}s%s<i%u:c%u:s%u> connection input state: connection complete";
    }
LABEL_174:
    _os_log_impl(&dword_182FBE000, v93, OS_LOG_TYPE_DEBUG, v97, buf, 0x32u);
    goto LABEL_175;
  }
  if (v92 != 4)
  {
    if ((*(_BYTE *)(v12 + 158) & 1) != 0)
      goto LABEL_175;
    v93 = __nwlog_obj();
    if (!os_log_type_enabled(v93, OS_LOG_TYPE_DEBUG))
      goto LABEL_175;
    v111 = *(_QWORD *)(v12 + 488);
    v112 = *(_DWORD *)(*(_QWORD *)(v12 + 480) + 372);
    v113 = *(_DWORD *)(v12 + 860);
    if (v111)
      LODWORD(v111) = *(_DWORD *)(v111 + 424);
    *(_DWORD *)buf = 136447490;
    *(_QWORD *)&buf[4] = "nw_http1_update_connection_input_state";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v12 + 74;
    *(_WORD *)&buf[22] = 2080;
    *(_QWORD *)&buf[24] = " ";
    *(_WORD *)&buf[32] = 1024;
    *(_DWORD *)&buf[34] = v112;
    *(_WORD *)&buf[38] = 1024;
    *(_DWORD *)&buf[40] = v113;
    LOWORD(v265) = 1024;
    *(_DWORD *)((char *)&v265 + 2) = v111;
    v97 = "%{public}s %{public}s%s<i%u:c%u:s%u> no change to http1 connection state";
    goto LABEL_174;
  }
  if (v90 | v91)
  {
    if (!v90)
      goto LABEL_175;
    if (v91)
      goto LABEL_175;
    *(_DWORD *)(v12 + 864) = 3;
    if ((*(_BYTE *)(v12 + 158) & 1) != 0)
      goto LABEL_175;
    v93 = __nwlog_obj();
    if (!os_log_type_enabled(v93, OS_LOG_TYPE_DEBUG))
      goto LABEL_175;
    v118 = *(_QWORD *)(v12 + 488);
    v119 = *(_DWORD *)(*(_QWORD *)(v12 + 480) + 372);
    v120 = *(_DWORD *)(v12 + 860);
    if (v118)
      LODWORD(v118) = *(_DWORD *)(v118 + 424);
    *(_DWORD *)buf = 136447490;
    *(_QWORD *)&buf[4] = "nw_http1_update_connection_input_state";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v12 + 74;
    *(_WORD *)&buf[22] = 2080;
    *(_QWORD *)&buf[24] = " ";
    *(_WORD *)&buf[32] = 1024;
    *(_DWORD *)&buf[34] = v119;
    *(_WORD *)&buf[38] = 1024;
    *(_DWORD *)&buf[40] = v120;
    LOWORD(v265) = 1024;
    *(_DWORD *)((char *)&v265 + 2) = v118;
    v97 = "%{public}s %{public}s%s<i%u:c%u:s%u> connection input state: stream pending";
    goto LABEL_174;
  }
  *(_DWORD *)(v12 + 864) = 2;
  if ((*(_BYTE *)(v12 + 158) & 1) == 0)
  {
    v93 = __nwlog_obj();
    if (os_log_type_enabled(v93, OS_LOG_TYPE_DEBUG))
    {
      v94 = *(_QWORD *)(v12 + 488);
      v95 = *(_DWORD *)(*(_QWORD *)(v12 + 480) + 372);
      v96 = *(_DWORD *)(v12 + 860);
      if (v94)
        LODWORD(v94) = *(_DWORD *)(v94 + 424);
      *(_DWORD *)buf = 136447490;
      *(_QWORD *)&buf[4] = "nw_http1_update_connection_input_state";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v12 + 74;
      *(_WORD *)&buf[22] = 2080;
      *(_QWORD *)&buf[24] = " ";
      *(_WORD *)&buf[32] = 1024;
      *(_DWORD *)&buf[34] = v95;
      *(_WORD *)&buf[38] = 1024;
      *(_DWORD *)&buf[40] = v96;
      LOWORD(v265) = 1024;
      *(_DWORD *)((char *)&v265 + 2) = v94;
      v97 = "%{public}s %{public}s%s<i%u:c%u:s%u> connection input state: stream complete";
      goto LABEL_174;
    }
  }
LABEL_175:
  if (*(_DWORD *)(v12 + 864) == 1)
  {
    if (v16)
    {
      a2 = *(nw_protocol **)(v12 + 488);
      if (a2)
        nw_protocol_input_available(a2->default_input_handler->flow_id, (uint64_t)a2);
    }
  }
LABEL_111:
  v67 = *v13;
  v68 = v67 | (*((unsigned __int8 *)v13 + 2) << 16);
  if ((v67 & 0x100) != 0)
  {
    if ((*(_BYTE *)(v12 + 158) & 1) == 0)
    {
      if (gLogDatapath)
      {
        v81 = __nwlog_obj();
        if (os_log_type_enabled(v81, OS_LOG_TYPE_DEBUG))
        {
          v82 = *(_QWORD *)(v12 + 488);
          v83 = *(_DWORD *)(*(_QWORD *)(v12 + 480) + 372);
          v84 = *(_DWORD *)(v12 + 860);
          if (v82)
            LODWORD(v82) = *(_DWORD *)(v82 + 424);
          *(_DWORD *)buf = 136447490;
          *(_QWORD *)&buf[4] = "nw_http1_connection_close";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v12 + 74;
          *(_WORD *)&buf[22] = 2080;
          *(_QWORD *)&buf[24] = " ";
          *(_WORD *)&buf[32] = 1024;
          *(_DWORD *)&buf[34] = v83;
          *(_WORD *)&buf[38] = 1024;
          *(_DWORD *)&buf[40] = v84;
          LOWORD(v265) = 1024;
          *(_DWORD *)((char *)&v265 + 2) = v82;
          _os_log_impl(&dword_182FBE000, v81, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> already closed", buf, 0x32u);
        }
      }
    }
    goto LABEL_237;
  }
  *((_BYTE *)v13 + 2) = BYTE2(v68);
  *v13 = v68 | 0x100;
  if ((*(_BYTE *)(v12 + 158) & 1) == 0)
  {
    if (gLogDatapath)
    {
      v189 = __nwlog_obj();
      if (os_log_type_enabled(v189, OS_LOG_TYPE_DEBUG))
      {
        v190 = *(_QWORD *)(v12 + 488);
        v191 = *(_DWORD *)(*(_QWORD *)(v12 + 480) + 372);
        v192 = *(_DWORD *)(v12 + 860);
        if (v190)
          LODWORD(v190) = *(_DWORD *)(v190 + 424);
        *(_DWORD *)buf = 136447490;
        *(_QWORD *)&buf[4] = "nw_http1_connection_close";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v12 + 74;
        *(_WORD *)&buf[22] = 2080;
        *(_QWORD *)&buf[24] = " ";
        *(_WORD *)&buf[32] = 1024;
        *(_DWORD *)&buf[34] = v191;
        *(_WORD *)&buf[38] = 1024;
        *(_DWORD *)&buf[40] = v192;
        LOWORD(v265) = 1024;
        *(_DWORD *)((char *)&v265 + 2) = v190;
        _os_log_impl(&dword_182FBE000, v189, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> http connection closed, increasing pool width", buf, 0x32u);
      }
    }
  }
  v69 = *(_QWORD *)(v12 + 480);
  if (!v69)
  {
    v184 = v13;
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
    v185 = (char *)_os_log_send_and_compose_impl();
    v268[0] = 16;
    v260[0] = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v185, v268, v260))
      goto LABEL_449;
    if (v268[0] == 17)
    {
      v186 = __nwlog_obj();
      v187 = v268[0];
      if (!os_log_type_enabled(v186, (os_log_type_t)v268[0]))
        goto LABEL_449;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
      v188 = "%{public}s called with null http1";
    }
    else if (v260[0])
    {
      v199 = (char *)__nw_create_backtrace_string();
      v186 = __nwlog_obj();
      v187 = v268[0];
      v200 = os_log_type_enabled(v186, (os_log_type_t)v268[0]);
      if (v199)
      {
        if (v200)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v199;
          v201 = "%{public}s called with null http1, dumping backtrace:%{public}s";
          v202 = buf;
          goto LABEL_402;
        }
LABEL_403:
        free(v199);
        goto LABEL_449;
      }
      if (!v200)
        goto LABEL_449;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
      v188 = "%{public}s called with null http1, no backtrace";
    }
    else
    {
      v186 = __nwlog_obj();
      v187 = v268[0];
      if (!os_log_type_enabled(v186, (os_log_type_t)v268[0]))
        goto LABEL_449;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
      v188 = "%{public}s called with null http1, backtrace limit exceeded";
    }
    v218 = buf;
LABEL_448:
    _os_log_impl(&dword_182FBE000, v186, v187, v188, v218, 0xCu);
    goto LABEL_449;
  }
  v70 = *v13;
  v71 = v70 | (*((unsigned __int8 *)v13 + 2) << 16);
  if ((v70 & 0x800) == 0)
  {
    *((_BYTE *)v13 + 2) = BYTE2(v71);
    *v13 = v71 | 0x800;
    v72 = *(unsigned int *)(v69 + 368) + 1;
    v73 = v72 << 31 >> 31;
    *(_DWORD *)(v69 + 368) = v72;
    if (v73 != v72 || v73 < 0)
    {
      v74 = v13;
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v75 = *(unsigned int *)(v69 + 368);
      *(_DWORD *)buf = 136446978;
      *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = "http1->nonresuable_connections";
      *(_WORD *)&buf[22] = 2048;
      *(_QWORD *)&buf[24] = 1;
      *(_WORD *)&buf[32] = 2048;
      *(_QWORD *)&buf[34] = v75;
      v76 = (char *)_os_log_send_and_compose_impl();
      v268[0] = 16;
      v260[0] = OS_LOG_TYPE_DEFAULT;
      if (!__nwlog_fault(v76, v268, v260))
        goto LABEL_228;
      if (v268[0] != 17)
      {
        if (v260[0])
        {
          v114 = (char *)__nw_create_backtrace_string();
          v77 = __nwlog_obj();
          v78 = v268[0];
          v115 = os_log_type_enabled(v77, (os_log_type_t)v268[0]);
          if (v114)
          {
            if (v115)
            {
              v116 = *(unsigned int *)(v69 + 368);
              *(_DWORD *)buf = 136447234;
              *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = "http1->nonresuable_connections";
              *(_WORD *)&buf[22] = 2048;
              *(_QWORD *)&buf[24] = 1;
              *(_WORD *)&buf[32] = 2048;
              *(_QWORD *)&buf[34] = v116;
              *(_WORD *)&buf[42] = 2082;
              *(_QWORD *)&v265 = v114;
              _os_log_impl(&dword_182FBE000, v77, v78, "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
            }
            free(v114);
            goto LABEL_228;
          }
          if (!v115)
            goto LABEL_228;
          v140 = *(unsigned int *)(v69 + 368);
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = "http1->nonresuable_connections";
          *(_WORD *)&buf[22] = 2048;
          *(_QWORD *)&buf[24] = 1;
          *(_WORD *)&buf[32] = 2048;
          *(_QWORD *)&buf[34] = v140;
          v80 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
        }
        else
        {
          v77 = __nwlog_obj();
          v78 = v268[0];
          if (!os_log_type_enabled(v77, (os_log_type_t)v268[0]))
            goto LABEL_228;
          v121 = *(unsigned int *)(v69 + 368);
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = "http1->nonresuable_connections";
          *(_WORD *)&buf[22] = 2048;
          *(_QWORD *)&buf[24] = 1;
          *(_WORD *)&buf[32] = 2048;
          *(_QWORD *)&buf[34] = v121;
          v80 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
        }
LABEL_227:
        _os_log_impl(&dword_182FBE000, v77, v78, v80, buf, 0x2Au);
        goto LABEL_228;
      }
      v77 = __nwlog_obj();
      v78 = v268[0];
      if (os_log_type_enabled(v77, (os_log_type_t)v268[0]))
      {
        v79 = *(unsigned int *)(v69 + 368);
        *(_DWORD *)buf = 136446978;
        *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = "http1->nonresuable_connections";
        *(_WORD *)&buf[22] = 2048;
        *(_QWORD *)&buf[24] = 1;
        *(_WORD *)&buf[32] = 2048;
        *(_QWORD *)&buf[34] = v79;
        v80 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
        goto LABEL_227;
      }
LABEL_228:
      if (v76)
        free(v76);
      *(_DWORD *)(v69 + 368) = -1;
      v13 = v74;
    }
    if ((*(_BYTE *)(v12 + 158) & 1) == 0)
    {
      if (gLogDatapath)
      {
        v203 = __nwlog_obj();
        if (os_log_type_enabled(v203, OS_LOG_TYPE_DEBUG))
        {
          v204 = *(_QWORD *)(v12 + 488);
          v205 = *(_DWORD *)(*(_QWORD *)(v12 + 480) + 372);
          v206 = *(_DWORD *)(v12 + 860);
          if (v204)
            LODWORD(v204) = *(_DWORD *)(v204 + 424);
          v207 = *(_DWORD *)(v69 + 368) + *(_DWORD *)(v69 + 364);
          *(_DWORD *)buf = 136447746;
          *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v12 + 74;
          *(_WORD *)&buf[22] = 2080;
          *(_QWORD *)&buf[24] = " ";
          *(_WORD *)&buf[32] = 1024;
          *(_DWORD *)&buf[34] = v205;
          *(_WORD *)&buf[38] = 1024;
          *(_DWORD *)&buf[40] = v206;
          LOWORD(v265) = 1024;
          *(_DWORD *)((char *)&v265 + 2) = v204;
          WORD3(v265) = 1024;
          DWORD2(v265) = v207;
          _os_log_impl(&dword_182FBE000, v203, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> connection marked as not-reusable, increased pool width to %u", buf, 0x38u);
        }
      }
    }
    v141 = *(void **)(v12 + 496);
    if (v141)
    {
      v142 = *(_QWORD *)(v12 + 480);
      if (v142)
      {
        v143 = *(_QWORD *)(v142 + 200);
        *(_QWORD *)buf = MEMORY[0x1E0C809B0];
        *(_QWORD *)&buf[8] = 0x40000000;
        *(_QWORD *)&buf[16] = ___ZL56nw_http1_match_idle_connection_with_pending_stream_asyncP19nw_http1_connection_block_invoke;
        *(_QWORD *)&buf[24] = &unk_1E14A1518;
        *(_QWORD *)&buf[32] = v143;
        nw_queue_context_async(v141, buf);
        goto LABEL_236;
      }
      v184 = v13;
      __nwlog_obj();
      *(_DWORD *)v268 = 136446210;
      *(_QWORD *)&v268[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
      v185 = (char *)_os_log_send_and_compose_impl();
      v260[0] = OS_LOG_TYPE_ERROR;
      type = OS_LOG_TYPE_DEFAULT;
      if (!__nwlog_fault(v185, v260, &type))
        goto LABEL_449;
      if (v260[0] == OS_LOG_TYPE_FAULT)
      {
        v186 = __nwlog_obj();
        v187 = v260[0];
        if (os_log_type_enabled(v186, v260[0]))
        {
          *(_DWORD *)v268 = 136446210;
          *(_QWORD *)&v268[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
          v188 = "%{public}s called with null http1";
          goto LABEL_447;
        }
LABEL_449:
        if (v185)
          free(v185);
        v13 = v184;
        if (!*(_QWORD *)(v12 + 488))
        {
LABEL_452:
          v219 = *(_QWORD *)(v12 + 784);
          if (v219)
          {
            if (*(_QWORD *)v219)
            {
              dispatch_source_set_timer(*(dispatch_source_t *)v219, 0x8000000000000000, 0xFFFFFFFFFFFFFFFFLL, 0x3B9ACA00uLL);
            }
            else
            {
              *(_OWORD *)(v219 + 32) = xmmword_183C6F190;
              if (*(_BYTE *)(v219 + 48) && *(_BYTE *)(v219 + 49))
                nw_queue_source_run_timer(v219, (uint64_t)a2);
            }
          }
          else
          {
            if ((*(_BYTE *)(v12 + 158) & 1) == 0)
            {
              v220 = __nwlog_obj();
              if (os_log_type_enabled(v220, OS_LOG_TYPE_ERROR))
              {
                v221 = *(_QWORD *)(v12 + 488);
                v222 = *(_DWORD *)(*(_QWORD *)(v12 + 480) + 372);
                v223 = *(_DWORD *)(v12 + 860);
                if (v221)
                  LODWORD(v221) = *(_DWORD *)(v221 + 424);
                *(_DWORD *)buf = 136447490;
                *(_QWORD *)&buf[4] = "nw_http1_connection_close";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = v12 + 74;
                *(_WORD *)&buf[22] = 2080;
                *(_QWORD *)&buf[24] = " ";
                *(_WORD *)&buf[32] = 1024;
                *(_DWORD *)&buf[34] = v222;
                *(_WORD *)&buf[38] = 1024;
                *(_DWORD *)&buf[40] = v223;
                LOWORD(v265) = 1024;
                *(_DWORD *)((char *)&v265 + 2) = v221;
                _os_log_impl(&dword_182FBE000, v220, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u:c%u:s%u> No destroy timer on HTTP/1 connection when closing", buf, 0x32u);
              }
            }
            v224 = *(_QWORD *)(v12 + 608);
            v225 = *(void **)(v12 + 496);
            *(_QWORD *)buf = MEMORY[0x1E0C809B0];
            *(_QWORD *)&buf[8] = 0x40000000;
            *(_QWORD *)&buf[16] = ___ZL25nw_http1_connection_closeP19nw_http1_connection_block_invoke;
            *(_QWORD *)&buf[24] = &unk_1E14A14F0;
            *(_QWORD *)&buf[32] = v224;
            nw_queue_context_async(v225, buf);
          }
        }
        goto LABEL_237;
      }
      if (type)
      {
        v199 = (char *)__nw_create_backtrace_string();
        v186 = __nwlog_obj();
        v187 = v260[0];
        v215 = os_log_type_enabled(v186, v260[0]);
        if (v199)
        {
          if (v215)
          {
            *(_DWORD *)v268 = 136446466;
            *(_QWORD *)&v268[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
            *(_WORD *)&v268[12] = 2082;
            *(_QWORD *)&v268[14] = v199;
            v201 = "%{public}s called with null http1, dumping backtrace:%{public}s";
LABEL_401:
            v202 = v268;
LABEL_402:
            _os_log_impl(&dword_182FBE000, v186, v187, v201, v202, 0x16u);
          }
          goto LABEL_403;
        }
        if (!v215)
          goto LABEL_449;
        *(_DWORD *)v268 = 136446210;
        *(_QWORD *)&v268[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
        v188 = "%{public}s called with null http1, no backtrace";
      }
      else
      {
        v186 = __nwlog_obj();
        v187 = v260[0];
        if (!os_log_type_enabled(v186, v260[0]))
          goto LABEL_449;
        *(_DWORD *)v268 = 136446210;
        *(_QWORD *)&v268[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
        v188 = "%{public}s called with null http1, backtrace limit exceeded";
      }
    }
    else
    {
      v184 = v13;
      __nwlog_obj();
      *(_DWORD *)v268 = 136446210;
      *(_QWORD *)&v268[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
      v185 = (char *)_os_log_send_and_compose_impl();
      v260[0] = OS_LOG_TYPE_ERROR;
      type = OS_LOG_TYPE_DEFAULT;
      if (!__nwlog_fault(v185, v260, &type))
        goto LABEL_449;
      if (v260[0] == OS_LOG_TYPE_FAULT)
      {
        v186 = __nwlog_obj();
        v187 = v260[0];
        if (os_log_type_enabled(v186, v260[0]))
        {
          *(_DWORD *)v268 = 136446210;
          *(_QWORD *)&v268[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
          v188 = "%{public}s called with null http1_connection->context";
          goto LABEL_447;
        }
        goto LABEL_449;
      }
      if (type)
      {
        v199 = (char *)__nw_create_backtrace_string();
        v186 = __nwlog_obj();
        v187 = v260[0];
        v214 = os_log_type_enabled(v186, v260[0]);
        if (v199)
        {
          if (v214)
          {
            *(_DWORD *)v268 = 136446466;
            *(_QWORD *)&v268[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
            *(_WORD *)&v268[12] = 2082;
            *(_QWORD *)&v268[14] = v199;
            v201 = "%{public}s called with null http1_connection->context, dumping backtrace:%{public}s";
            goto LABEL_401;
          }
          goto LABEL_403;
        }
        if (!v214)
          goto LABEL_449;
        *(_DWORD *)v268 = 136446210;
        *(_QWORD *)&v268[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
        v188 = "%{public}s called with null http1_connection->context, no backtrace";
      }
      else
      {
        v186 = __nwlog_obj();
        v187 = v260[0];
        if (!os_log_type_enabled(v186, v260[0]))
          goto LABEL_449;
        *(_DWORD *)v268 = 136446210;
        *(_QWORD *)&v268[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
        v188 = "%{public}s called with null http1_connection->context, backtrace limit exceeded";
      }
    }
LABEL_447:
    v218 = v268;
    goto LABEL_448;
  }
  if ((*(_BYTE *)(v12 + 158) & 1) == 0
    && gLogDatapath
    && (v98 = __nwlog_obj(), os_log_type_enabled(v98, OS_LOG_TYPE_DEBUG)))
  {
    v99 = *(_QWORD *)(v12 + 488);
    v100 = *(_DWORD *)(*(_QWORD *)(v12 + 480) + 372);
    v101 = *(_DWORD *)(v12 + 860);
    if (v99)
      LODWORD(v99) = *(_DWORD *)(v99 + 424);
    *(_DWORD *)buf = 136447490;
    *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v12 + 74;
    *(_WORD *)&buf[22] = 2080;
    *(_QWORD *)&buf[24] = " ";
    *(_WORD *)&buf[32] = 1024;
    *(_DWORD *)&buf[34] = v100;
    *(_WORD *)&buf[38] = 1024;
    *(_DWORD *)&buf[40] = v101;
    LOWORD(v265) = 1024;
    *(_DWORD *)((char *)&v265 + 2) = v99;
    _os_log_impl(&dword_182FBE000, v98, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> Connection already marked as not-reusable, ignoring", buf, 0x32u);
    if (!*(_QWORD *)(v12 + 488))
      goto LABEL_452;
  }
  else
  {
LABEL_236:
    if (!*(_QWORD *)(v12 + 488))
      goto LABEL_452;
  }
LABEL_237:
  v144 = *(_QWORD *)(v12 + 488);
  if (v144)
  {
    if ((*(_DWORD *)(v12 + 864) & 0xFFFFFFFE) == 4 || (*(_WORD *)(v144 + 428) & 0x10) != 0)
    {
      if ((*(_BYTE *)(v12 + 158) & 1) != 0 || !gLogDatapath)
        goto LABEL_245;
      v193 = __nwlog_obj();
      v194 = os_log_type_enabled(v193, OS_LOG_TYPE_DEBUG);
      v144 = *(_QWORD *)(v12 + 488);
      if (v194)
      {
        v195 = *(_DWORD *)(*(_QWORD *)(v12 + 480) + 372);
        v196 = *(_DWORD *)(v12 + 860);
        if (v144)
          v197 = *(_DWORD *)(v144 + 424);
        else
          v197 = 0;
        *(_DWORD *)buf = 136448002;
        *(_QWORD *)&buf[4] = "nw_protocol_http1_disconnected";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v12 + 74;
        *(_WORD *)&buf[22] = 2080;
        *(_QWORD *)&buf[24] = " ";
        *(_WORD *)&buf[32] = 1024;
        *(_DWORD *)&buf[34] = v195;
        *(_WORD *)&buf[38] = 1024;
        *(_DWORD *)&buf[40] = v196;
        LOWORD(v265) = 1024;
        *(_DWORD *)((char *)&v265 + 2) = v197;
        WORD3(v265) = 2048;
        *((_QWORD *)&v265 + 1) = v12;
        v266 = 2048;
        v267 = v144;
        _os_log_impl(&dword_182FBE000, v193, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> http connection %p sending disconnected to current stream (%p)", buf, 0x46u);
        v144 = *(_QWORD *)(v12 + 488);
      }
      if (v144)
LABEL_245:
        nw_protocol_disconnected(*(_QWORD **)(v144 + 48), v144);
      else
        nw_protocol_disconnected(0, 0);
    }
    else
    {
      if ((*(_BYTE *)(v12 + 158) & 1) == 0)
      {
        if (gLogDatapath)
        {
          v209 = __nwlog_obj();
          if (os_log_type_enabled(v209, OS_LOG_TYPE_DEBUG))
          {
            v210 = *(_QWORD *)(v12 + 488);
            v211 = *(_DWORD *)(*(_QWORD *)(v12 + 480) + 372);
            v212 = *(_DWORD *)(v12 + 860);
            if (v210)
              v213 = *(_DWORD *)(v210 + 424);
            else
              v213 = 0;
            *(_DWORD *)buf = 136448002;
            *(_QWORD *)&buf[4] = "nw_protocol_http1_disconnected";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v12 + 74;
            *(_WORD *)&buf[22] = 2080;
            *(_QWORD *)&buf[24] = " ";
            *(_WORD *)&buf[32] = 1024;
            *(_DWORD *)&buf[34] = v211;
            *(_WORD *)&buf[38] = 1024;
            *(_DWORD *)&buf[40] = v212;
            LOWORD(v265) = 1024;
            *(_DWORD *)((char *)&v265 + 2) = v213;
            WORD3(v265) = 2048;
            *((_QWORD *)&v265 + 1) = v12;
            v266 = 2048;
            v267 = v210;
            _os_log_impl(&dword_182FBE000, v209, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> http connection %p not sending disconnected up to current stream (%p), input still available", buf, 0x46u);
          }
        }
      }
      *v13 |= 0x80u;
    }
  }
  else if ((*(_BYTE *)(v12 + 158) & 1) == 0)
  {
    if (gLogDatapath)
    {
      v145 = __nwlog_obj();
      if (os_log_type_enabled(v145, OS_LOG_TYPE_DEBUG))
      {
        v146 = *(_QWORD *)(v12 + 488);
        v147 = *(_DWORD *)(*(_QWORD *)(v12 + 480) + 372);
        v148 = *(_DWORD *)(v12 + 860);
        if (v146)
          LODWORD(v146) = *(_DWORD *)(v146 + 424);
        *(_DWORD *)buf = 136447490;
        *(_QWORD *)&buf[4] = "nw_protocol_http1_disconnected";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v12 + 74;
        *(_WORD *)&buf[22] = 2080;
        *(_QWORD *)&buf[24] = " ";
        *(_WORD *)&buf[32] = 1024;
        *(_DWORD *)&buf[34] = v147;
        *(_WORD *)&buf[38] = 1024;
        *(_DWORD *)&buf[40] = v148;
        LOWORD(v265) = 1024;
        *(_DWORD *)((char *)&v265 + 2) = v146;
        _os_log_impl(&dword_182FBE000, v145, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> no stream on http connection, just closing", buf, 0x32u);
      }
    }
  }
}

BOOL nw_protocol_http1_add_input_handler(nw_protocol *a1, nw_protocol *a2)
{
  _DWORD *handle;
  nw_protocol *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t *parameters;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  NSObject *v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  int v19;
  NSObject *v20;
  int v21;
  nw_protocol_stack_t v22;
  NWConcrete_nw_protocol_options *v23;
  id v24;
  uint64_t v25;
  NSObject *v26;
  int v27;
  char v28;
  void *v29;
  uint64_t v30;
  void *v31;
  char *v32;
  void *v33;
  char v34;
  void *v35;
  void *v36;
  char v37;
  void *v38;
  uint64_t *v39;
  id v40;
  char v41;
  void *v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  void *v46;
  unsigned __int8 *v47;
  unsigned __int8 *v48;
  void *singleton;
  char v50;
  void *v51;
  _DWORD *v52;
  unsigned __int8 *v53;
  unsigned __int8 *v54;
  id v55;
  unsigned __int8 *v56;
  char *v57;
  NSObject *v58;
  os_log_type_t v59;
  const char *v60;
  char *v61;
  NSObject *v62;
  os_log_type_t v63;
  const char *v64;
  char *v65;
  NSObject *v66;
  os_log_type_t v67;
  const char *v68;
  NSObject *v69;
  int v70;
  _QWORD *v71;
  NSObject *v72;
  void *v73;
  _BOOL8 result;
  NSObject *v75;
  uint64_t v76;
  int v77;
  int v78;
  char *backtrace_string;
  _BOOL4 v80;
  char *v81;
  _BOOL4 v82;
  const char *v83;
  char *v84;
  _BOOL4 v85;
  const char *v86;
  char *v87;
  _BOOL4 v88;
  char *v89;
  NSObject *v90;
  os_log_type_t v91;
  const char *v92;
  char *v93;
  _BOOL4 v94;
  char *v95;
  NSObject *v96;
  os_log_type_t v97;
  const char *v98;
  NSObject *v99;
  uint64_t v100;
  int v101;
  int v102;
  char *v103;
  _BOOL4 v104;
  char *v105;
  _BOOL4 v106;
  _BOOL4 v107;
  _BOOL4 v108;
  char *v109;
  NSObject *v110;
  os_log_type_t v111;
  const char *v112;
  char *v113;
  _BOOL4 v114;
  NSObject *v115;
  int v116;
  uint64_t *v117;
  unsigned __int8 *v118;
  unsigned __int8 *v119;
  id v120;
  unsigned __int8 *v121;
  unsigned __int8 *v122;
  unsigned __int8 *v123;
  unsigned __int8 *v124;
  uint64_t v125;
  int v126;
  NSObject *v127;
  uint64_t v128;
  int v129;
  int v130;
  _QWORD *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  NSObject *v136;
  os_log_type_t v137;
  uint64_t v138;
  const char *v139;
  char *v140;
  _BOOL4 v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  nw_protocol *v147;
  uint64_t v148;
  char *v149;
  NSObject *v150;
  os_log_type_t v151;
  uint64_t v152;
  const char *v153;
  char *v154;
  _BOOL4 v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  int v161;
  int v162;
  const char *v163;
  NSObject *v164;
  uint32_t v165;
  uint64_t v166;
  int v167;
  int v168;
  int v169;
  uint64_t v170;
  _WORD *v171;
  char *v172;
  NSObject *v173;
  os_log_type_t v174;
  const char *v175;
  uint64_t v176;
  _QWORD *v177;
  char *v178;
  _BOOL4 v179;
  int v180;
  uint64_t v181;
  char *v182;
  NSObject *v183;
  os_log_type_t v184;
  uint64_t v185;
  const char *v186;
  char *v187;
  _BOOL4 v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  int v192;
  unsigned int v193;
  uint64_t v194;
  char *v195;
  _BYTE *v196;
  uint64_t v197;
  os_log_type_t v198;
  uint64_t v199;
  const char *v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  NSObject *v205;
  uint64_t v206;
  int v207;
  int v208;
  NSObject *v209;
  uint64_t v210;
  int v211;
  int v212;
  char *v213;
  _BOOL4 v214;
  uint64_t v215;
  const char *v216;
  NSObject *v217;
  os_log_type_t v218;
  uint32_t v219;
  uint64_t v220;
  uint64_t v221;
  NSObject *v222;
  os_log_type_t v223;
  uint32_t v224;
  NSObject *v225;
  uint64_t v226;
  int v227;
  int v228;
  char *v229;
  NSObject *v230;
  os_log_type_t v231;
  const char *v232;
  NSObject *v233;
  int v234;
  NSObject *v235;
  uint64_t v236;
  int v237;
  int v238;
  int v239;
  NSObject *v240;
  os_log_type_t v241;
  NSObject *v242;
  uint64_t v243;
  int v244;
  int v245;
  NSObject *v246;
  uint64_t v247;
  int v248;
  int v249;
  char *v250;
  _BOOL4 v251;
  NSObject *v252;
  uint64_t v253;
  int v254;
  int v255;
  int v256;
  char *v257;
  _BOOL4 v258;
  _BOOL4 v259;
  NSObject *v260;
  uint64_t v261;
  int v262;
  int v263;
  char *v264;
  NSObject *v265;
  os_log_type_t v266;
  const char *v267;
  char *v268;
  _BOOL4 v269;
  _BOOL4 v270;
  nw_protocol *v271;
  _QWORD iterate_block[6];
  char v273;
  os_log_type_t type;
  uint8_t buf[80];
  _BYTE v276[10];
  __int16 v277;
  unsigned __int8 *v278;
  _BYTE aBlock[24];
  uint64_t v280;
  _BYTE v281[40];
  uint64_t v282;

  v282 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
    v57 = (char *)_os_log_send_and_compose_impl();
    aBlock[0] = 16;
    type = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v57, aBlock, &type))
      goto LABEL_481;
    if (aBlock[0] != 17)
    {
      if (type == OS_LOG_TYPE_DEFAULT)
      {
        v58 = __nwlog_obj();
        v59 = aBlock[0];
        if (!os_log_type_enabled(v58, (os_log_type_t)aBlock[0]))
          goto LABEL_481;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
        v60 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_480;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v58 = __nwlog_obj();
      v59 = aBlock[0];
      v80 = os_log_type_enabled(v58, (os_log_type_t)aBlock[0]);
      if (!backtrace_string)
      {
        if (!v80)
          goto LABEL_481;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
        v60 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_480;
      }
      if (v80)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v58, v59, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_481;
    }
    v58 = __nwlog_obj();
    v59 = aBlock[0];
    if (!os_log_type_enabled(v58, (os_log_type_t)aBlock[0]))
      goto LABEL_481;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
    v60 = "%{public}s called with null protocol";
LABEL_480:
    _os_log_impl(&dword_182FBE000, v58, v59, v60, buf, 0xCu);
    goto LABEL_481;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
    v57 = (char *)_os_log_send_and_compose_impl();
    aBlock[0] = 16;
    type = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v57, aBlock, &type))
      goto LABEL_481;
    if (aBlock[0] != 17)
    {
      if (type == OS_LOG_TYPE_DEFAULT)
      {
        v58 = __nwlog_obj();
        v59 = aBlock[0];
        if (!os_log_type_enabled(v58, (os_log_type_t)aBlock[0]))
          goto LABEL_481;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
        v60 = "%{public}s called with null handle, backtrace limit exceeded";
        goto LABEL_480;
      }
      v81 = (char *)__nw_create_backtrace_string();
      v58 = __nwlog_obj();
      v59 = aBlock[0];
      v82 = os_log_type_enabled(v58, (os_log_type_t)aBlock[0]);
      if (!v81)
      {
        if (!v82)
          goto LABEL_481;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
        v60 = "%{public}s called with null handle, no backtrace";
        goto LABEL_480;
      }
      if (v82)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v81;
        v83 = "%{public}s called with null handle, dumping backtrace:%{public}s";
LABEL_117:
        _os_log_impl(&dword_182FBE000, v58, v59, v83, buf, 0x16u);
      }
LABEL_118:
      free(v81);
      if (!v57)
      {
LABEL_483:
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_http1_add_input_handler";
        v61 = (char *)_os_log_send_and_compose_impl();
        aBlock[0] = 16;
        type = OS_LOG_TYPE_DEFAULT;
        if (!__nwlog_fault(v61, aBlock, &type))
          goto LABEL_498;
        if (aBlock[0] == 17)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v62 = gLogObj;
          v63 = aBlock[0];
          if (os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)aBlock[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_protocol_http1_add_input_handler";
            v64 = "%{public}s called with null http1";
            goto LABEL_497;
          }
          goto LABEL_498;
        }
        if (type == OS_LOG_TYPE_DEFAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v62 = gLogObj;
          v63 = aBlock[0];
          if (os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)aBlock[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_protocol_http1_add_input_handler";
            v64 = "%{public}s called with null http1, backtrace limit exceeded";
            goto LABEL_497;
          }
          goto LABEL_498;
        }
        v84 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v62 = gLogObj;
        v63 = aBlock[0];
        v270 = os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)aBlock[0]);
        if (!v84)
        {
          if (v270)
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_protocol_http1_add_input_handler";
            v64 = "%{public}s called with null http1, no backtrace";
            goto LABEL_497;
          }
          goto LABEL_498;
        }
        if (v270)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_protocol_http1_add_input_handler";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v84;
          v86 = "%{public}s called with null http1, dumping backtrace:%{public}s";
          goto LABEL_491;
        }
LABEL_492:
        free(v84);
        goto LABEL_498;
      }
LABEL_482:
      free(v57);
      goto LABEL_483;
    }
    v58 = __nwlog_obj();
    v59 = aBlock[0];
    if (!os_log_type_enabled(v58, (os_log_type_t)aBlock[0]))
      goto LABEL_481;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
    v60 = "%{public}s called with null handle";
    goto LABEL_480;
  }
  v4 = a2;
  v5 = handle[6];
  if (v5 == 1)
    goto LABEL_10;
  if (v5 != 2)
  {
    if (v5 != 3)
      goto LABEL_483;
    v6 = *((_QWORD *)handle + 2);
    if (v6)
    {
      handle = (_DWORD *)(v6 + 480);
      goto LABEL_10;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
    v57 = (char *)_os_log_send_and_compose_impl();
    aBlock[0] = 16;
    type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v57, aBlock, &type))
    {
      if (aBlock[0] == 17)
      {
        v58 = __nwlog_obj();
        v59 = aBlock[0];
        if (!os_log_type_enabled(v58, (os_log_type_t)aBlock[0]))
          goto LABEL_481;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
        v60 = "%{public}s called with null handle->http1_connection";
        goto LABEL_480;
      }
      if (type == OS_LOG_TYPE_DEFAULT)
      {
        v58 = __nwlog_obj();
        v59 = aBlock[0];
        if (!os_log_type_enabled(v58, (os_log_type_t)aBlock[0]))
          goto LABEL_481;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
        v60 = "%{public}s called with null handle->http1_connection, backtrace limit exceeded";
        goto LABEL_480;
      }
      v81 = (char *)__nw_create_backtrace_string();
      v58 = __nwlog_obj();
      v59 = aBlock[0];
      v107 = os_log_type_enabled(v58, (os_log_type_t)aBlock[0]);
      if (!v81)
      {
        if (!v107)
          goto LABEL_481;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
        v60 = "%{public}s called with null handle->http1_connection, no backtrace";
        goto LABEL_480;
      }
      if (v107)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v81;
        v83 = "%{public}s called with null handle->http1_connection, dumping backtrace:%{public}s";
        goto LABEL_117;
      }
      goto LABEL_118;
    }
LABEL_481:
    if (!v57)
      goto LABEL_483;
    goto LABEL_482;
  }
  v7 = *((_QWORD *)handle + 1);
  if (!v7)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
    v57 = (char *)_os_log_send_and_compose_impl();
    aBlock[0] = 16;
    type = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v57, aBlock, &type))
      goto LABEL_481;
    if (aBlock[0] == 17)
    {
      v58 = __nwlog_obj();
      v59 = aBlock[0];
      if (!os_log_type_enabled(v58, (os_log_type_t)aBlock[0]))
        goto LABEL_481;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
      v60 = "%{public}s called with null handle->http1_stream";
      goto LABEL_480;
    }
    if (type == OS_LOG_TYPE_DEFAULT)
    {
      v58 = __nwlog_obj();
      v59 = aBlock[0];
      if (!os_log_type_enabled(v58, (os_log_type_t)aBlock[0]))
        goto LABEL_481;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
      v60 = "%{public}s called with null handle->http1_stream, backtrace limit exceeded";
      goto LABEL_480;
    }
    v81 = (char *)__nw_create_backtrace_string();
    v58 = __nwlog_obj();
    v59 = aBlock[0];
    v108 = os_log_type_enabled(v58, (os_log_type_t)aBlock[0]);
    if (!v81)
    {
      if (!v108)
        goto LABEL_481;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
      v60 = "%{public}s called with null handle->http1_stream, no backtrace";
      goto LABEL_480;
    }
    if (v108)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v81;
      v83 = "%{public}s called with null handle->http1_stream, dumping backtrace:%{public}s";
      goto LABEL_117;
    }
    goto LABEL_118;
  }
  handle = (_DWORD *)(v7 + 248);
LABEL_10:
  v8 = *(_QWORD *)handle;
  if (!*(_QWORD *)handle)
    goto LABEL_483;
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_http1_add_input_handler";
    v61 = (char *)_os_log_send_and_compose_impl();
    aBlock[0] = 16;
    type = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v61, aBlock, &type))
      goto LABEL_498;
    if (aBlock[0] == 17)
    {
      v62 = __nwlog_obj();
      v63 = aBlock[0];
      if (os_log_type_enabled(v62, (os_log_type_t)aBlock[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_http1_add_input_handler";
        v64 = "%{public}s called with null input_protocol";
LABEL_497:
        _os_log_impl(&dword_182FBE000, v62, v63, v64, buf, 0xCu);
        goto LABEL_498;
      }
      goto LABEL_498;
    }
    if (type == OS_LOG_TYPE_DEFAULT)
    {
      v62 = __nwlog_obj();
      v63 = aBlock[0];
      if (os_log_type_enabled(v62, (os_log_type_t)aBlock[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_http1_add_input_handler";
        v64 = "%{public}s called with null input_protocol, backtrace limit exceeded";
        goto LABEL_497;
      }
LABEL_498:
      if (v61)
        free(v61);
      return 0;
    }
    v84 = (char *)__nw_create_backtrace_string();
    v62 = __nwlog_obj();
    v63 = aBlock[0];
    v85 = os_log_type_enabled(v62, (os_log_type_t)aBlock[0]);
    if (!v84)
    {
      if (v85)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_http1_add_input_handler";
        v64 = "%{public}s called with null input_protocol, no backtrace";
        goto LABEL_497;
      }
      goto LABEL_498;
    }
    if (v85)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_protocol_http1_add_input_handler";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v84;
      v86 = "%{public}s called with null input_protocol, dumping backtrace:%{public}s";
LABEL_491:
      _os_log_impl(&dword_182FBE000, v62, v63, v86, buf, 0x16u);
      goto LABEL_492;
    }
    goto LABEL_492;
  }
  v9 = &unk_1ECD84000;
  if ((*(_BYTE *)(v8 + 158) & 1) == 0)
  {
    if (gLogDatapath)
    {
      v69 = __nwlog_obj();
      if (os_log_type_enabled(v69, OS_LOG_TYPE_DEBUG))
      {
        v70 = *(_DWORD *)(v8 + 372);
        *(_DWORD *)buf = 136447234;
        *(_QWORD *)&buf[4] = "nw_protocol_http1_add_input_handler";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v8 + 74;
        *(_WORD *)&buf[22] = 2080;
        *(_QWORD *)&buf[24] = " ";
        *(_WORD *)&buf[32] = 1024;
        *(_DWORD *)&buf[34] = v70;
        *(_WORD *)&buf[38] = 2048;
        *(_QWORD *)&buf[40] = v4;
        _os_log_impl(&dword_182FBE000, v69, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> called with input_protocol %p", buf, 0x30u);
      }
    }
  }
  parameters = (uint64_t *)nw_protocol_get_parameters((uint64_t)v4);
  v11 = *(_QWORD *)(v8 + 264);
  v12 = MEMORY[0x1E0C809B0];
  v13 = (_QWORD *)&unk_183BA7000;
  v271 = v4;
  if (!v11)
  {
    nw_protocol_set_input_handler(v8, (uint64_t)v4);
    *(_OWORD *)v8 = *(_OWORD *)v4->flow_id;
    nw_protocol_plugin_name_set_name(v8 + 64, (uint64_t)a1, parameters);
    v14 = parameters;
    v15 = -[NWConcrete_nw_parameters initWithParameters:stripConnected:shallowCopy:]((id *)[NWConcrete_nw_parameters alloc], v14, 0, 1);

    v16 = nw_parameters_copy_protocol_options_legacy(v15, (nw_protocol *)v8);
    v17 = v16;
    if (v16)
    {
      *(_DWORD *)(v8 + 364) = nw_http1_get_connection_pool_width(v16);
      *(_QWORD *)(v8 + 192) = 1000 * nw_http1_get_idle_timeout(v17);
      *(_DWORD *)(v8 + 372) = nw_protocol_get_next_instance_id();
      v18 = v17;
      v19 = *((_DWORD *)v18 + 33);

      if ((*(_BYTE *)(v8 + 158) & 1) == 0)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v20 = gLogObj;
        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
        {
          v21 = *(_DWORD *)(v8 + 372);
          *(_DWORD *)buf = 136447490;
          *(_QWORD *)&buf[4] = "nw_protocol_http1_add_input_handler";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v8 + 74;
          *(_WORD *)&buf[22] = 2080;
          *(_QWORD *)&buf[24] = " ";
          *(_WORD *)&buf[32] = 1024;
          *(_DWORD *)&buf[34] = v21;
          *(_WORD *)&buf[38] = 1024;
          *(_DWORD *)&buf[40] = v21;
          *(_WORD *)&buf[44] = 1024;
          *(_DWORD *)&buf[46] = v19;
          _os_log_impl(&dword_182FBE000, v20, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s<i%u> created HTTP/1 and assigned instance ID: %u from C%u", buf, 0x32u);
        }
      }
      v22 = nw_parameters_copy_default_protocol_stack(v15);
      v23 = nw_protocol_options_copy(v18);
      if (nw_protocol_copy_http1_definition_onceToken != -1)
        dispatch_once(&nw_protocol_copy_http1_definition_onceToken, &__block_literal_global_72242);
      v24 = (id)nw_protocol_copy_http1_definition_http1_definition;
      nw_parameters_set_protocol_instance(v23, v25, v8);
      if (v24)
        os_release(v24);
      nw_protocol_stack_replace_protocol_with_handle(v22, v8, v23);
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0x2000000000;
      buf[24] = 0;
      iterate_block[0] = MEMORY[0x1E0C809B0];
      iterate_block[1] = 0x40000000;
      iterate_block[2] = ___ZL35nw_protocol_http1_add_input_handlerP11nw_protocolS0__block_invoke;
      iterate_block[3] = &unk_1E14A1818;
      iterate_block[4] = buf;
      iterate_block[5] = v8;
      nw_protocol_stack_iterate_application_protocols(v22, iterate_block);
      _Block_object_dispose(buf, 8);
      v9 = (_BYTE *)&unk_1ECD84000;
      if (v23)
        os_release(v23);
      if (v22)
        os_release(v22);
    }
    else if ((*(_BYTE *)(v8 + 158) & 1) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v26 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
      {
        v27 = *(_DWORD *)(v8 + 372);
        *(_DWORD *)buf = 136447490;
        *(_QWORD *)&buf[4] = "nw_protocol_http1_add_input_handler";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v8 + 74;
        *(_WORD *)&buf[22] = 2080;
        *(_QWORD *)&buf[24] = " ";
        *(_WORD *)&buf[32] = 1024;
        *(_DWORD *)&buf[34] = v27;
        *(_WORD *)&buf[38] = 2048;
        *(_QWORD *)&buf[40] = v15;
        *(_WORD *)&buf[48] = 2048;
        *(_QWORD *)&buf[50] = v14;
        _os_log_impl(&dword_182FBE000, v26, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s<i%u> failed to find http1 options in new parameters %p, copy of %p", buf, 0x3Au);
      }
    }
    v28 = *(_BYTE *)(v8 + 272);
    if ((v28 & 1) != 0)
    {
      v29 = *(void **)(v8 + 264);
      v4 = v271;
      v12 = MEMORY[0x1E0C809B0];
      v13 = &unk_183BA7000;
      if (v29)
      {
        os_release(v29);
        v28 = *(_BYTE *)(v8 + 272);
      }
    }
    else
    {
      v4 = v271;
      v12 = MEMORY[0x1E0C809B0];
      v13 = (_QWORD *)&unk_183BA7000;
    }
    *(_QWORD *)(v8 + 264) = v15;
    *(_BYTE *)(v8 + 272) = v28 | 1;
    if (v17)
      os_release(v17);
  }
  v30 = 296;
  if (!v11)
    v30 = 280;
  v31 = *(void **)(v8 + v30);
  if (!v31)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http1_stream_create";
    v65 = (char *)_os_log_send_and_compose_impl();
    aBlock[0] = 16;
    type = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v65, aBlock, &type))
      goto LABEL_194;
    if (aBlock[0] == 17)
    {
      v66 = __nwlog_obj();
      v67 = aBlock[0];
      if (!os_log_type_enabled(v66, (os_log_type_t)aBlock[0]))
        goto LABEL_194;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_stream_create";
      v68 = "%{public}s called with null endpoint";
      goto LABEL_193;
    }
    if (type == OS_LOG_TYPE_DEFAULT)
    {
      v66 = __nwlog_obj();
      v67 = aBlock[0];
      if (!os_log_type_enabled(v66, (os_log_type_t)aBlock[0]))
        goto LABEL_194;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_stream_create";
      v68 = "%{public}s called with null endpoint, backtrace limit exceeded";
      goto LABEL_193;
    }
    v87 = (char *)__nw_create_backtrace_string();
    v66 = __nwlog_obj();
    v67 = aBlock[0];
    v88 = os_log_type_enabled(v66, (os_log_type_t)aBlock[0]);
    if (!v87)
    {
      if (!v88)
        goto LABEL_194;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_stream_create";
      v68 = "%{public}s called with null endpoint, no backtrace";
      goto LABEL_193;
    }
    if (v88)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_http1_stream_create";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v87;
      _os_log_impl(&dword_182FBE000, v66, v67, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v87);
LABEL_194:
    if (!v65)
      goto LABEL_196;
    goto LABEL_195;
  }
  if (!parameters)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http1_stream_create";
    v65 = (char *)_os_log_send_and_compose_impl();
    aBlock[0] = 16;
    type = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v65, aBlock, &type))
      goto LABEL_194;
    if (aBlock[0] == 17)
    {
      v66 = __nwlog_obj();
      v67 = aBlock[0];
      if (!os_log_type_enabled(v66, (os_log_type_t)aBlock[0]))
        goto LABEL_194;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_stream_create";
      v68 = "%{public}s called with null parameters";
      goto LABEL_193;
    }
    if (type == OS_LOG_TYPE_DEFAULT)
    {
      v66 = __nwlog_obj();
      v67 = aBlock[0];
      if (!os_log_type_enabled(v66, (os_log_type_t)aBlock[0]))
        goto LABEL_194;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_stream_create";
      v68 = "%{public}s called with null parameters, backtrace limit exceeded";
      goto LABEL_193;
    }
    v93 = (char *)__nw_create_backtrace_string();
    v66 = __nwlog_obj();
    v67 = aBlock[0];
    v94 = os_log_type_enabled(v66, (os_log_type_t)aBlock[0]);
    if (v93)
    {
      if (v94)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http1_stream_create";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v93;
        _os_log_impl(&dword_182FBE000, v66, v67, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v93);
      if (!v65)
      {
LABEL_196:
        v32 = 0;
        v45 = (uint64_t)v271;
        v52 = a1->handle;
        if (v52)
          goto LABEL_69;
LABEL_197:
        __nwlog_obj();
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http1_get_handle_type_for_protocol";
        v109 = (char *)_os_log_send_and_compose_impl();
        aBlock[0] = 16;
        type = OS_LOG_TYPE_DEFAULT;
        if (!__nwlog_fault(v109, aBlock, &type))
          goto LABEL_211;
        if (aBlock[0] == 17)
        {
          v110 = __nwlog_obj();
          v111 = aBlock[0];
          if (!os_log_type_enabled(v110, (os_log_type_t)aBlock[0]))
            goto LABEL_211;
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http1_get_handle_type_for_protocol";
          v112 = "%{public}s called with null handle";
        }
        else if (type)
        {
          v113 = (char *)__nw_create_backtrace_string();
          v110 = __nwlog_obj();
          v111 = aBlock[0];
          v114 = os_log_type_enabled(v110, (os_log_type_t)aBlock[0]);
          if (v113)
          {
            if (v114)
            {
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "nw_http1_get_handle_type_for_protocol";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v113;
              _os_log_impl(&dword_182FBE000, v110, v111, "%{public}s called with null handle, dumping backtrace:%{public}s", buf, 0x16u);
            }
            free(v113);
            goto LABEL_211;
          }
          if (!v114)
          {
LABEL_211:
            v45 = (uint64_t)v271;
            if (v109)
              free(v109);
LABEL_213:
            if (v32)
              goto LABEL_214;
LABEL_453:
            __nwlog_obj();
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_http1_stream_add_input_handler";
            v264 = (char *)_os_log_send_and_compose_impl();
            aBlock[0] = 16;
            type = OS_LOG_TYPE_DEFAULT;
            if (!__nwlog_fault(v264, aBlock, &type))
              goto LABEL_467;
            if (aBlock[0] == 17)
            {
              v265 = __nwlog_obj();
              v266 = aBlock[0];
              if (!os_log_type_enabled(v265, (os_log_type_t)aBlock[0]))
                goto LABEL_467;
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_http1_stream_add_input_handler";
              v267 = "%{public}s called with null http1_stream";
            }
            else if (type)
            {
              v268 = (char *)__nw_create_backtrace_string();
              v265 = __nwlog_obj();
              v266 = aBlock[0];
              v269 = os_log_type_enabled(v265, (os_log_type_t)aBlock[0]);
              if (v268)
              {
                if (v269)
                {
                  *(_DWORD *)buf = 136446466;
                  *(_QWORD *)&buf[4] = "nw_http1_stream_add_input_handler";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = v268;
                  _os_log_impl(&dword_182FBE000, v265, v266, "%{public}s called with null http1_stream, dumping backtrace:%{public}s", buf, 0x16u);
                }
                free(v268);
LABEL_467:
                if (v264)
                  free(v264);
                v169 = 1;
                v170 = *(_QWORD *)(v8 + 224);
                if (!v170)
                  return 1;
                goto LABEL_292;
              }
              if (!v269)
                goto LABEL_467;
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_http1_stream_add_input_handler";
              v267 = "%{public}s called with null http1_stream, no backtrace";
            }
            else
            {
              v265 = __nwlog_obj();
              v266 = aBlock[0];
              if (!os_log_type_enabled(v265, (os_log_type_t)aBlock[0]))
                goto LABEL_467;
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_http1_stream_add_input_handler";
              v267 = "%{public}s called with null http1_stream, backtrace limit exceeded";
            }
            _os_log_impl(&dword_182FBE000, v265, v266, v267, buf, 0xCu);
            goto LABEL_467;
          }
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http1_get_handle_type_for_protocol";
          v112 = "%{public}s called with null handle, no backtrace";
        }
        else
        {
          v110 = __nwlog_obj();
          v111 = aBlock[0];
          if (!os_log_type_enabled(v110, (os_log_type_t)aBlock[0]))
            goto LABEL_211;
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http1_get_handle_type_for_protocol";
          v112 = "%{public}s called with null handle, backtrace limit exceeded";
        }
        _os_log_impl(&dword_182FBE000, v110, v111, v112, buf, 0xCu);
        goto LABEL_211;
      }
LABEL_195:
      free(v65);
      goto LABEL_196;
    }
    if (v94)
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_stream_create";
      v68 = "%{public}s called with null parameters, no backtrace";
LABEL_193:
      _os_log_impl(&dword_182FBE000, v66, v67, v68, buf, 0xCu);
      goto LABEL_194;
    }
    goto LABEL_194;
  }
  v32 = (char *)malloc_type_calloc(1uLL, 0x1B0uLL, 0xEAFB8F1AuLL);
  if (!v32)
  {
    v71 = v13;
    v72 = __nwlog_obj();
    os_log_type_enabled(v72, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446722;
    *(_QWORD *)&buf[4] = "strict_calloc";
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = 1;
    *(_WORD *)&buf[22] = 2048;
    *(_QWORD *)&buf[24] = 432;
    v73 = (void *)_os_log_send_and_compose_impl();
    result = __nwlog_abort((uint64_t)v73);
    if (result)
    {
      __break(1u);
      return result;
    }
    free(v73);
    v13 = v71;
  }
  *((_OWORD *)v32 + 25) = 0u;
  *((_OWORD *)v32 + 26) = 0u;
  *((_OWORD *)v32 + 23) = 0u;
  *((_OWORD *)v32 + 24) = 0u;
  *((_OWORD *)v32 + 21) = 0u;
  *((_OWORD *)v32 + 22) = 0u;
  *((_OWORD *)v32 + 19) = 0u;
  *((_OWORD *)v32 + 20) = 0u;
  *((_OWORD *)v32 + 17) = 0u;
  *((_OWORD *)v32 + 18) = 0u;
  *((_OWORD *)v32 + 15) = 0u;
  *((_OWORD *)v32 + 16) = 0u;
  *((_OWORD *)v32 + 13) = 0u;
  *((_OWORD *)v32 + 14) = 0u;
  *((_OWORD *)v32 + 11) = 0u;
  *((_OWORD *)v32 + 12) = 0u;
  *((_OWORD *)v32 + 9) = 0u;
  *((_OWORD *)v32 + 10) = 0u;
  *((_OWORD *)v32 + 7) = 0u;
  *((_OWORD *)v32 + 8) = 0u;
  *((_OWORD *)v32 + 5) = 0u;
  *((_OWORD *)v32 + 6) = 0u;
  *((_OWORD *)v32 + 3) = 0u;
  *((_OWORD *)v32 + 4) = 0u;
  *((_OWORD *)v32 + 1) = 0u;
  *((_OWORD *)v32 + 2) = 0u;
  *(_OWORD *)v32 = 0u;
  *((_QWORD *)v32 + 2) = *(_QWORD *)(v8 + 16);
  if (nw_protocol_http1_get_callbacks(void)::onceToken[0] != -1)
    dispatch_once(nw_protocol_http1_get_callbacks(void)::onceToken, &__block_literal_global_17_39614);
  *((_QWORD *)v32 + 3) = &nw_protocol_http1_get_callbacks(void)::http1_protocol_callbacks;
  *((_DWORD *)v32 + 60) = 2;
  *((_QWORD *)v32 + 28) = v32;
  *((_QWORD *)v32 + 5) = v32 + 216;
  *((_QWORD *)v32 + 31) = v8;
  nw_protocol_set_input_handler((uint64_t)v32, (uint64_t)v4);
  nw_protocol_set_output_handler((uint64_t)v32, *(_QWORD *)(v8 + 32));
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = buf;
  *(_QWORD *)&buf[16] = 0x2000000000;
  *(_QWORD *)&buf[24] = v32;
  *(_QWORD *)aBlock = v12;
  *(_QWORD *)&aBlock[8] = v13[197];
  *(_QWORD *)&aBlock[16] = ___ZL22nw_http1_stream_createP11nw_protocolP17nw_protocol_http1P11nw_endpointP13nw_parameters_block_invoke;
  v280 = (uint64_t)&unk_1E14A1840;
  *(_QWORD *)v281 = buf;
  *((_QWORD *)v32 + 39) = _Block_copy(aBlock);
  _Block_object_dispose(buf, 8);
  v33 = os_retain(v31);
  v34 = v32[344];
  if ((v34 & 1) != 0)
  {
    v35 = (void *)*((_QWORD *)v32 + 42);
    if (v35)
    {
      os_release(v35);
      v34 = v32[344];
    }
  }
  *((_QWORD *)v32 + 42) = v33;
  v32[344] = v34 | 1;
  v36 = os_retain(parameters);
  v37 = v32[328];
  if ((v37 & 1) != 0)
  {
    v38 = (void *)*((_QWORD *)v32 + 40);
    if (v38)
    {
      os_release(v38);
      v37 = v32[328];
    }
  }
  *((_QWORD *)v32 + 40) = v36;
  v32[328] = v37 | 1;
  if ((v32[158] & 1) == 0)
  {
    if (v9[1345])
    {
      v75 = __nwlog_obj();
      if (os_log_type_enabled(v75, OS_LOG_TYPE_DEBUG))
      {
        v76 = *((_QWORD *)v32 + 32);
        v77 = *(_DWORD *)(*((_QWORD *)v32 + 31) + 372);
        if (v76)
          LODWORD(v76) = *(_DWORD *)(v76 + 860);
        v78 = *((_DWORD *)v32 + 106);
        *(_DWORD *)buf = 136447746;
        *(_QWORD *)&buf[4] = "nw_http1_stream_create";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v32 + 74;
        *(_WORD *)&buf[22] = 2080;
        *(_QWORD *)&buf[24] = " ";
        *(_WORD *)&buf[32] = 1024;
        *(_DWORD *)&buf[34] = v77;
        *(_WORD *)&buf[38] = 1024;
        *(_DWORD *)&buf[40] = v76;
        *(_WORD *)&buf[44] = 1024;
        *(_DWORD *)&buf[46] = v78;
        *(_WORD *)&buf[50] = 2048;
        *(_QWORD *)&buf[52] = v32;
        _os_log_impl(&dword_182FBE000, v75, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> created %p", buf, 0x3Cu);
      }
    }
  }
  v4->output_handler_context = v32;
  v39 = parameters;
  v40 = *(id *)(v39[13] + 136);

  v41 = v32[272];
  if ((v41 & 1) != 0)
  {
    v42 = (void *)*((_QWORD *)v32 + 33);
    if (v42)
    {
      os_release(v42);
      v41 = v32[272];
    }
  }
  *((_QWORD *)v32 + 33) = v40;
  v32[272] = v41 | 1;
  v43 = _nw_http_parsed_fields_create();
  v44 = v32[408];
  if ((v44 & 1) != 0)
  {
    v46 = (void *)*((_QWORD *)v32 + 50);
    v45 = (uint64_t)v271;
    if (v46)
    {
      os_release(v46);
      v44 = v32[408];
    }
  }
  else
  {
    v45 = (uint64_t)v271;
  }
  *((_QWORD *)v32 + 50) = v43;
  v32[408] = v44 | 1;
  v32[208] = *(_BYTE *)(v8 + 376) & 1;
  v47 = nw_parameters_copy_protocol_options_legacy(v39, (nw_protocol *)v8);
  v48 = v47;
  if (!v47 || (singleton = nw_http_messaging_options_copy_transaction_metadata(v47)) == 0)
  {
    if (nw_protocol_copy_http_transaction_definition_onceToken != -1)
      dispatch_once(&nw_protocol_copy_http_transaction_definition_onceToken, &__block_literal_global_59_74256);
    singleton = nw_protocol_metadata_create_singleton((void *)nw_protocol_copy_http_transaction_definition_definition);
  }
  v50 = v32[360];
  if ((v50 & 1) != 0)
  {
    v51 = (void *)*((_QWORD *)v32 + 44);
    if (v51)
    {
      os_release(v51);
      v50 = v32[360];
    }
  }
  *((_QWORD *)v32 + 44) = singleton;
  v32[360] = v50 | 1;
  if (v48)
    os_release(v48);
  v52 = a1->handle;
  if (!v52)
    goto LABEL_197;
LABEL_69:
  if (v52[6] != 2)
    goto LABEL_213;
  if (!v32)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http1_stream_replace_protocol_instance";
    v89 = (char *)_os_log_send_and_compose_impl();
    aBlock[0] = 16;
    type = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v89, aBlock, &type))
      goto LABEL_451;
    if (aBlock[0] == 17)
    {
      v90 = __nwlog_obj();
      v91 = aBlock[0];
      if (!os_log_type_enabled(v90, (os_log_type_t)aBlock[0]))
        goto LABEL_451;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_stream_replace_protocol_instance";
      v92 = "%{public}s called with null http1_stream";
    }
    else if (type)
    {
      v103 = (char *)__nw_create_backtrace_string();
      v90 = __nwlog_obj();
      v91 = aBlock[0];
      v104 = os_log_type_enabled(v90, (os_log_type_t)aBlock[0]);
      if (v103)
      {
        if (v104)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_http1_stream_replace_protocol_instance";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v103;
          _os_log_impl(&dword_182FBE000, v90, v91, "%{public}s called with null http1_stream, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v103);
        goto LABEL_451;
      }
      if (!v104)
      {
LABEL_451:
        if (v89)
          free(v89);
        goto LABEL_453;
      }
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_stream_replace_protocol_instance";
      v92 = "%{public}s called with null http1_stream, no backtrace";
    }
    else
    {
      v90 = __nwlog_obj();
      v91 = aBlock[0];
      if (!os_log_type_enabled(v90, (os_log_type_t)aBlock[0]))
        goto LABEL_451;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_stream_replace_protocol_instance";
      v92 = "%{public}s called with null http1_stream, backtrace limit exceeded";
    }
    _os_log_impl(&dword_182FBE000, v90, v91, v92, buf, 0xCu);
    goto LABEL_451;
  }
  if (parameters)
  {
    v53 = nw_parameters_copy_protocol_options_legacy(parameters, a1);
    if (v53)
    {
      v54 = v53;
      if ((v32[158] & 1) == 0)
      {
        if (v9[1345])
        {
          v99 = __nwlog_obj();
          if (os_log_type_enabled(v99, OS_LOG_TYPE_DEBUG))
          {
            v100 = *((_QWORD *)v32 + 32);
            v101 = *(_DWORD *)(*((_QWORD *)v32 + 31) + 372);
            if (v100)
              LODWORD(v100) = *(_DWORD *)(v100 + 860);
            v102 = *((_DWORD *)v32 + 106);
            *(_DWORD *)buf = 136448770;
            *(_QWORD *)&buf[4] = "nw_http1_stream_replace_protocol_instance";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v32 + 74;
            *(_WORD *)&buf[22] = 2080;
            *(_QWORD *)&buf[24] = " ";
            *(_WORD *)&buf[32] = 1024;
            *(_DWORD *)&buf[34] = v101;
            *(_WORD *)&buf[38] = 1024;
            *(_DWORD *)&buf[40] = v100;
            *(_WORD *)&buf[44] = 1024;
            *(_DWORD *)&buf[46] = v102;
            *(_WORD *)&buf[50] = 2048;
            *(_QWORD *)&buf[52] = v32;
            *(_WORD *)&buf[60] = 2048;
            *(_QWORD *)&buf[62] = v8;
            *(_WORD *)&buf[70] = 2048;
            *(_QWORD *)&buf[72] = a1;
            *(_WORD *)v276 = 2048;
            *(_QWORD *)&v276[2] = parameters;
            v277 = 2048;
            v278 = v54;
            _os_log_impl(&dword_182FBE000, v99, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> http1_stream protocol %p, set protocol instance to %p instead of %p in parameters %p options %p", buf, 0x64u);
          }
        }
      }
      if (nw_protocol_copy_http1_definition_onceToken != -1)
        dispatch_once(&nw_protocol_copy_http1_definition_onceToken, &__block_literal_global_72242);
      v55 = (id)nw_protocol_copy_http1_definition_http1_definition;
      v56 = v54;
      *((_QWORD *)v56 + 2) = v8;

      if (v55)
        os_release(v55);
      os_release(v56);
      v45 = (uint64_t)v271;
    }
    goto LABEL_214;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_http1_stream_replace_protocol_instance";
  v95 = (char *)_os_log_send_and_compose_impl();
  aBlock[0] = 16;
  type = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v95, aBlock, &type))
  {
    if (aBlock[0] == 17)
    {
      v96 = __nwlog_obj();
      v97 = aBlock[0];
      if (!os_log_type_enabled(v96, (os_log_type_t)aBlock[0]))
        goto LABEL_474;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_stream_replace_protocol_instance";
      v98 = "%{public}s called with null parameters";
      goto LABEL_473;
    }
    if (type == OS_LOG_TYPE_DEFAULT)
    {
      v96 = __nwlog_obj();
      v97 = aBlock[0];
      if (!os_log_type_enabled(v96, (os_log_type_t)aBlock[0]))
        goto LABEL_474;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_stream_replace_protocol_instance";
      v98 = "%{public}s called with null parameters, backtrace limit exceeded";
      goto LABEL_473;
    }
    v105 = (char *)__nw_create_backtrace_string();
    v96 = __nwlog_obj();
    v97 = aBlock[0];
    v106 = os_log_type_enabled(v96, (os_log_type_t)aBlock[0]);
    if (v105)
    {
      if (v106)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http1_stream_replace_protocol_instance";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v105;
        _os_log_impl(&dword_182FBE000, v96, v97, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v105);
      goto LABEL_474;
    }
    if (v106)
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_stream_replace_protocol_instance";
      v98 = "%{public}s called with null parameters, no backtrace";
LABEL_473:
      _os_log_impl(&dword_182FBE000, v96, v97, v98, buf, 0xCu);
    }
  }
LABEL_474:
  v45 = (uint64_t)v271;
  if (v95)
    free(v95);
LABEL_214:
  nw_protocol_set_input_handler((uint64_t)v32, v45);
  *(_OWORD *)v32 = *(_OWORD *)v45;
  if (*(_QWORD *)(v45 + 32))
  {
    if ((*(_BYTE *)(v8 + 158) & 1) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v115 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        v116 = *(_DWORD *)(v8 + 372);
        *(_DWORD *)buf = 136446978;
        *(_QWORD *)&buf[4] = "nw_http1_stream_add_input_handler";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v8 + 74;
        *(_WORD *)&buf[22] = 2080;
        *(_QWORD *)&buf[24] = " ";
        *(_WORD *)&buf[32] = 1024;
        *(_DWORD *)&buf[34] = v116;
        _os_log_impl(&dword_182FBE000, v115, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u> Output handler already exists for protocol being added as input handler", buf, 0x26u);
      }
    }
  }
  else
  {
    nw_protocol_set_output_handler(v45, (uint64_t)v32);
  }
  v117 = (uint64_t *)*((_QWORD *)v32 + 40);
  if (v117)
  {
    v118 = nw_parameters_copy_protocol_options_legacy(*((void **)v32 + 40), (nw_protocol *)v8);
    if (v118)
    {
      v119 = v118;
      if ((v32[158] & 1) == 0)
      {
        if (v9[1345])
        {
          v246 = __nwlog_obj();
          if (os_log_type_enabled(v246, OS_LOG_TYPE_DEBUG))
          {
            v247 = *((_QWORD *)v32 + 32);
            v248 = *(_DWORD *)(*((_QWORD *)v32 + 31) + 372);
            if (v247)
              LODWORD(v247) = *(_DWORD *)(v247 + 860);
            v249 = *((_DWORD *)v32 + 106);
            *(_DWORD *)buf = 136448770;
            *(_QWORD *)&buf[4] = "nw_http1_stream_replace_protocol_instance";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v32 + 74;
            *(_WORD *)&buf[22] = 2080;
            *(_QWORD *)&buf[24] = " ";
            *(_WORD *)&buf[32] = 1024;
            *(_DWORD *)&buf[34] = v248;
            *(_WORD *)&buf[38] = 1024;
            *(_DWORD *)&buf[40] = v247;
            *(_WORD *)&buf[44] = 1024;
            *(_DWORD *)&buf[46] = v249;
            *(_WORD *)&buf[50] = 2048;
            *(_QWORD *)&buf[52] = v32;
            *(_WORD *)&buf[60] = 2048;
            *(_QWORD *)&buf[62] = v32;
            *(_WORD *)&buf[70] = 2048;
            *(_QWORD *)&buf[72] = v8;
            *(_WORD *)v276 = 2048;
            *(_QWORD *)&v276[2] = v117;
            v277 = 2048;
            v278 = v119;
            _os_log_impl(&dword_182FBE000, v246, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> http1_stream protocol %p, set protocol instance to %p instead of %p in parameters %p options %p", buf, 0x64u);
          }
        }
      }
      if (nw_protocol_copy_http1_definition_onceToken != -1)
        dispatch_once(&nw_protocol_copy_http1_definition_onceToken, &__block_literal_global_72242);
      v120 = (id)nw_protocol_copy_http1_definition_http1_definition;
      v121 = v119;
      *((_QWORD *)v121 + 2) = v32;

      if (v120)
        os_release(v120);
      os_release(v121);
    }
    *(_DWORD *)v276 = 0;
    memset(buf, 0, sizeof(buf));
    v122 = nw_parameters_copy_protocol_options_legacy(*((void **)v32 + 40), (nw_protocol *)v32);
    v123 = v122;
    if (v122)
    {
      v124 = v122;
      v125 = 0;
      buf[0] = 0;
      while (1)
      {
        v126 = v124[v125 + 48];
        buf[v125] = v126;
        if (!v126)
          break;
        if (++v125 == 83)
        {
          v276[3] = 0;
          break;
        }
      }

    }
    else if ((v32[158] & 1) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v127 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        v128 = *((_QWORD *)v32 + 32);
        v129 = *(_DWORD *)(*((_QWORD *)v32 + 31) + 372);
        if (v128)
          LODWORD(v128) = *(_DWORD *)(v128 + 860);
        v130 = *((_DWORD *)v32 + 106);
        *(_DWORD *)aBlock = 136448002;
        *(_QWORD *)&aBlock[4] = "nw_http1_stream_add_input_handler";
        *(_WORD *)&aBlock[12] = 2082;
        *(_QWORD *)&aBlock[14] = v32 + 74;
        *(_WORD *)&aBlock[22] = 2080;
        v280 = (uint64_t)" ";
        *(_WORD *)v281 = 1024;
        *(_DWORD *)&v281[2] = v129;
        *(_WORD *)&v281[6] = 1024;
        *(_DWORD *)&v281[8] = v128;
        *(_WORD *)&v281[12] = 1024;
        *(_DWORD *)&v281[14] = v130;
        *(_WORD *)&v281[18] = 2048;
        *(_QWORD *)&v281[20] = v32;
        *(_WORD *)&v281[28] = 2048;
        *(_QWORD *)&v281[30] = v117;
        _os_log_impl(&dword_182FBE000, v127, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u:c%u:s%u> Failed to access options for protocol %p, parameters %p", aBlock, 0x46u);
      }
    }
    if ((*(_BYTE *)(v8 + 158) & 1) == 0)
    {
      if (v9[1345])
      {
        v233 = __nwlog_obj();
        if (os_log_type_enabled(v233, OS_LOG_TYPE_DEBUG))
        {
          v234 = *(_DWORD *)(v8 + 372);
          *(_DWORD *)aBlock = 136447234;
          *(_QWORD *)&aBlock[4] = "nw_http1_add_stream";
          *(_WORD *)&aBlock[12] = 2082;
          *(_QWORD *)&aBlock[14] = v8 + 74;
          *(_WORD *)&aBlock[22] = 2080;
          v280 = (uint64_t)" ";
          *(_WORD *)v281 = 1024;
          *(_DWORD *)&v281[2] = v234;
          *(_WORD *)&v281[6] = 2048;
          *(_QWORD *)&v281[8] = v32;
          _os_log_impl(&dword_182FBE000, v233, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> called for stream (%p)", aBlock, 0x30u);
        }
      }
    }
    *((_QWORD *)v32 + 35) = 0;
    v131 = *(_QWORD **)(v8 + 240);
    *((_QWORD *)v32 + 36) = v131;
    *v131 = v32;
    *(_QWORD *)(v8 + 240) = v32 + 280;
    v132 = *(unsigned int *)(v8 + 344) + 1;
    v133 = v132 << 31 >> 31;
    *(_DWORD *)(v8 + 344) = v132;
    if (v133 == v132 && (v133 & 0x8000000000000000) == 0)
    {
LABEL_260:
      v145 = *(unsigned int *)(v8 + 356) + 1;
      v146 = v145 << 31 >> 31;
      *(_DWORD *)(v8 + 356) = v145;
      v147 = v271;
      if (v146 == v145 && (v146 & 0x8000000000000000) == 0)
        goto LABEL_279;
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v148 = *(unsigned int *)(v8 + 356);
      *(_DWORD *)aBlock = 136446978;
      *(_QWORD *)&aBlock[4] = "nw_http1_add_stream";
      *(_WORD *)&aBlock[12] = 2082;
      *(_QWORD *)&aBlock[14] = "http1->next_stream_log_num";
      *(_WORD *)&aBlock[22] = 2048;
      v280 = 1;
      *(_WORD *)v281 = 2048;
      *(_QWORD *)&v281[2] = v148;
      v149 = (char *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      v273 = 0;
      if (__nwlog_fault(v149, &type, &v273))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v150 = gLogObj;
          v151 = type;
          if (os_log_type_enabled((os_log_t)gLogObj, type))
          {
            v152 = *(unsigned int *)(v8 + 356);
            *(_DWORD *)aBlock = 136446978;
            *(_QWORD *)&aBlock[4] = "nw_http1_add_stream";
            *(_WORD *)&aBlock[12] = 2082;
            *(_QWORD *)&aBlock[14] = "http1->next_stream_log_num";
            *(_WORD *)&aBlock[22] = 2048;
            v280 = 1;
            *(_WORD *)v281 = 2048;
            *(_QWORD *)&v281[2] = v152;
            v153 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_275:
            _os_log_impl(&dword_182FBE000, v150, v151, v153, aBlock, 0x2Au);
          }
        }
        else if (v273)
        {
          v154 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v150 = gLogObj;
          v151 = type;
          v155 = os_log_type_enabled((os_log_t)gLogObj, type);
          if (v154)
          {
            if (v155)
            {
              v156 = *(unsigned int *)(v8 + 356);
              *(_DWORD *)aBlock = 136447234;
              *(_QWORD *)&aBlock[4] = "nw_http1_add_stream";
              *(_WORD *)&aBlock[12] = 2082;
              *(_QWORD *)&aBlock[14] = "http1->next_stream_log_num";
              *(_WORD *)&aBlock[22] = 2048;
              v280 = 1;
              *(_WORD *)v281 = 2048;
              *(_QWORD *)&v281[2] = v156;
              *(_WORD *)&v281[10] = 2082;
              *(_QWORD *)&v281[12] = v154;
              _os_log_impl(&dword_182FBE000, v150, v151, "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s", aBlock, 0x34u);
            }
            free(v154);
            v9 = (_BYTE *)&unk_1ECD84000;
            goto LABEL_276;
          }
          v9 = &unk_1ECD84000;
          if (v155)
          {
            v158 = *(unsigned int *)(v8 + 356);
            *(_DWORD *)aBlock = 136446978;
            *(_QWORD *)&aBlock[4] = "nw_http1_add_stream";
            *(_WORD *)&aBlock[12] = 2082;
            *(_QWORD *)&aBlock[14] = "http1->next_stream_log_num";
            *(_WORD *)&aBlock[22] = 2048;
            v280 = 1;
            *(_WORD *)v281 = 2048;
            *(_QWORD *)&v281[2] = v158;
            v153 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
            goto LABEL_275;
          }
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v150 = gLogObj;
          v151 = type;
          if (os_log_type_enabled((os_log_t)gLogObj, type))
          {
            v157 = *(unsigned int *)(v8 + 356);
            *(_DWORD *)aBlock = 136446978;
            *(_QWORD *)&aBlock[4] = "nw_http1_add_stream";
            *(_WORD *)&aBlock[12] = 2082;
            *(_QWORD *)&aBlock[14] = "http1->next_stream_log_num";
            *(_WORD *)&aBlock[22] = 2048;
            v280 = 1;
            *(_WORD *)v281 = 2048;
            *(_QWORD *)&v281[2] = v157;
            v153 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
            goto LABEL_275;
          }
        }
      }
LABEL_276:
      if (v149)
        free(v149);
      LODWORD(v145) = -1;
      *(_DWORD *)(v8 + 356) = -1;
      v147 = v271;
LABEL_279:
      *((_DWORD *)v32 + 106) = v145;
      if ((v32[158] & 1) == 0)
      {
        if (v9[1345])
        {
          v235 = __nwlog_obj();
          if (os_log_type_enabled(v235, OS_LOG_TYPE_DEBUG))
          {
            v236 = *((_QWORD *)v32 + 32);
            v237 = *(_DWORD *)(*((_QWORD *)v32 + 31) + 372);
            if (v236)
              LODWORD(v236) = *(_DWORD *)(v236 + 860);
            v238 = *((_DWORD *)v32 + 106);
            v239 = *(_DWORD *)(v8 + 344);
            *(_DWORD *)aBlock = 136448258;
            *(_QWORD *)&aBlock[4] = "nw_http1_add_stream";
            *(_WORD *)&aBlock[12] = 2082;
            *(_QWORD *)&aBlock[14] = v32 + 74;
            *(_WORD *)&aBlock[22] = 2080;
            v280 = (uint64_t)" ";
            *(_WORD *)v281 = 1024;
            *(_DWORD *)&v281[2] = v237;
            *(_WORD *)&v281[6] = 1024;
            *(_DWORD *)&v281[8] = v236;
            *(_WORD *)&v281[12] = 1024;
            *(_DWORD *)&v281[14] = v238;
            *(_WORD *)&v281[18] = 1024;
            *(_DWORD *)&v281[20] = v238;
            *(_WORD *)&v281[24] = 2048;
            *(_QWORD *)&v281[26] = v32;
            *(_WORD *)&v281[34] = 1024;
            *(_DWORD *)&v281[36] = v239;
            _os_log_impl(&dword_182FBE000, v235, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> added stream %u (%p), now have %u streams", aBlock, 0x48u);
          }
        }
      }
      nw_protocol_plugin_name_set_name((uint64_t)(v32 + 64), (uint64_t)v32, v117);
      if (buf[0])
      {
        if ((*(_BYTE *)(v8 + 158) & 1) == 0)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v160 = gLogObj;
          if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEFAULT))
          {
            v161 = *(_DWORD *)(v8 + 372);
            v162 = *(_DWORD *)(v8 + 344);
            *(_DWORD *)aBlock = 136447746;
            *(_QWORD *)&aBlock[4] = "nw_http1_stream_add_input_handler";
            *(_QWORD *)&aBlock[14] = v8 + 74;
            *(_WORD *)&aBlock[22] = 2080;
            *(_WORD *)&aBlock[12] = 2082;
            v280 = (uint64_t)" ";
            *(_WORD *)v281 = 1024;
            *(_DWORD *)&v281[2] = v161;
            *(_WORD *)&v281[6] = 2048;
            *(_QWORD *)&v281[8] = v147;
            *(_WORD *)&v281[16] = 2082;
            *(_QWORD *)&v281[18] = buf;
            *(_WORD *)&v281[26] = 1024;
            *(_DWORD *)&v281[28] = v162;
            v163 = "%{public}s %{public}s%s<i%u> added input handler %p from %{public}s, now have %u input handlers";
            v164 = v160;
            v165 = 64;
LABEL_288:
            _os_log_impl(&dword_182FBE000, v164, OS_LOG_TYPE_DEFAULT, v163, aBlock, v165);
          }
        }
      }
      else if ((*(_BYTE *)(v8 + 158) & 1) == 0)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v166 = gLogObj;
        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEFAULT))
        {
          v167 = *(_DWORD *)(v8 + 372);
          v168 = *(_DWORD *)(v8 + 344);
          *(_DWORD *)aBlock = 136447490;
          *(_QWORD *)&aBlock[4] = "nw_http1_stream_add_input_handler";
          *(_WORD *)&aBlock[12] = 2082;
          *(_QWORD *)&aBlock[14] = v8 + 74;
          *(_WORD *)&aBlock[22] = 2080;
          v280 = (uint64_t)" ";
          *(_WORD *)v281 = 1024;
          *(_DWORD *)&v281[2] = v167;
          *(_WORD *)&v281[6] = 2048;
          *(_QWORD *)&v281[8] = v147;
          *(_WORD *)&v281[16] = 1024;
          *(_DWORD *)&v281[18] = v168;
          v163 = "%{public}s %{public}s%s<i%u> added input handler %p, now have %u input handlers";
          v164 = v166;
          v165 = 54;
          goto LABEL_288;
        }
      }
      if (v123)
        os_release(v123);
      goto LABEL_291;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v134 = *(unsigned int *)(v8 + 344);
    *(_DWORD *)aBlock = 136446978;
    *(_QWORD *)&aBlock[4] = "nw_http1_add_stream";
    *(_WORD *)&aBlock[12] = 2082;
    *(_QWORD *)&aBlock[14] = "http1->streams_count";
    *(_WORD *)&aBlock[22] = 2048;
    v280 = 1;
    *(_WORD *)v281 = 2048;
    *(_QWORD *)&v281[2] = v134;
    v135 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v273 = 0;
    if (__nwlog_fault(v135, &type, &v273))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v136 = gLogObj;
        v137 = type;
        if (os_log_type_enabled((os_log_t)gLogObj, type))
        {
          v138 = *(unsigned int *)(v8 + 344);
          *(_DWORD *)aBlock = 136446978;
          *(_QWORD *)&aBlock[4] = "nw_http1_add_stream";
          *(_WORD *)&aBlock[12] = 2082;
          *(_QWORD *)&aBlock[14] = "http1->streams_count";
          *(_WORD *)&aBlock[22] = 2048;
          v280 = 1;
          *(_WORD *)v281 = 2048;
          *(_QWORD *)&v281[2] = v138;
          v139 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_256:
          _os_log_impl(&dword_182FBE000, v136, v137, v139, aBlock, 0x2Au);
        }
      }
      else if (v273)
      {
        v140 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v136 = gLogObj;
        v137 = type;
        v141 = os_log_type_enabled((os_log_t)gLogObj, type);
        if (v140)
        {
          if (v141)
          {
            v142 = *(unsigned int *)(v8 + 344);
            *(_DWORD *)aBlock = 136447234;
            *(_QWORD *)&aBlock[4] = "nw_http1_add_stream";
            *(_WORD *)&aBlock[12] = 2082;
            *(_QWORD *)&aBlock[14] = "http1->streams_count";
            *(_WORD *)&aBlock[22] = 2048;
            v280 = 1;
            *(_WORD *)v281 = 2048;
            *(_QWORD *)&v281[2] = v142;
            *(_WORD *)&v281[10] = 2082;
            *(_QWORD *)&v281[12] = v140;
            _os_log_impl(&dword_182FBE000, v136, v137, "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s", aBlock, 0x34u);
          }
          free(v140);
          v9 = (_BYTE *)&unk_1ECD84000;
          goto LABEL_257;
        }
        v9 = (_BYTE *)&unk_1ECD84000;
        if (v141)
        {
          v144 = *(unsigned int *)(v8 + 344);
          *(_DWORD *)aBlock = 136446978;
          *(_QWORD *)&aBlock[4] = "nw_http1_add_stream";
          *(_WORD *)&aBlock[12] = 2082;
          *(_QWORD *)&aBlock[14] = "http1->streams_count";
          *(_WORD *)&aBlock[22] = 2048;
          v280 = 1;
          *(_WORD *)v281 = 2048;
          *(_QWORD *)&v281[2] = v144;
          v139 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
          goto LABEL_256;
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v136 = gLogObj;
        v137 = type;
        if (os_log_type_enabled((os_log_t)gLogObj, type))
        {
          v143 = *(unsigned int *)(v8 + 344);
          *(_DWORD *)aBlock = 136446978;
          *(_QWORD *)&aBlock[4] = "nw_http1_add_stream";
          *(_WORD *)&aBlock[12] = 2082;
          *(_QWORD *)&aBlock[14] = "http1->streams_count";
          *(_WORD *)&aBlock[22] = 2048;
          v280 = 1;
          *(_WORD *)v281 = 2048;
          *(_QWORD *)&v281[2] = v143;
          v139 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
          goto LABEL_256;
        }
      }
    }
LABEL_257:
    if (v135)
      free(v135);
    *(_DWORD *)(v8 + 344) = -1;
    goto LABEL_260;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_http1_stream_add_input_handler";
  v229 = (char *)_os_log_send_and_compose_impl();
  aBlock[0] = 16;
  type = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v229, aBlock, &type))
  {
    if (aBlock[0] == 17)
    {
      v230 = __nwlog_obj();
      v231 = aBlock[0];
      if (!os_log_type_enabled(v230, (os_log_type_t)aBlock[0]))
        goto LABEL_431;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_stream_add_input_handler";
      v232 = "%{public}s called with null http1_stream->parameters";
      goto LABEL_430;
    }
    if (type == OS_LOG_TYPE_DEFAULT)
    {
      v230 = __nwlog_obj();
      v231 = aBlock[0];
      if (!os_log_type_enabled(v230, (os_log_type_t)aBlock[0]))
        goto LABEL_431;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_stream_add_input_handler";
      v232 = "%{public}s called with null http1_stream->parameters, backtrace limit exceeded";
      goto LABEL_430;
    }
    v250 = (char *)__nw_create_backtrace_string();
    v230 = __nwlog_obj();
    v231 = aBlock[0];
    v251 = os_log_type_enabled(v230, (os_log_type_t)aBlock[0]);
    if (v250)
    {
      if (v251)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http1_stream_add_input_handler";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v250;
        _os_log_impl(&dword_182FBE000, v230, v231, "%{public}s called with null http1_stream->parameters, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v250);
      goto LABEL_431;
    }
    if (v251)
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_stream_add_input_handler";
      v232 = "%{public}s called with null http1_stream->parameters, no backtrace";
LABEL_430:
      _os_log_impl(&dword_182FBE000, v230, v231, v232, buf, 0xCu);
    }
  }
LABEL_431:
  if (v229)
    free(v229);
LABEL_291:
  v169 = 0;
  v170 = *(_QWORD *)(v8 + 224);
  if (!v170)
    return 1;
LABEL_292:
  if ((*(_BYTE *)(v170 + 158) & 1) == 0)
  {
    if (v9[1345])
    {
      v242 = __nwlog_obj();
      if (os_log_type_enabled(v242, OS_LOG_TYPE_DEBUG))
      {
        v243 = *(_QWORD *)(v170 + 488);
        v244 = *(_DWORD *)(*(_QWORD *)(v170 + 480) + 372);
        v245 = *(_DWORD *)(v170 + 860);
        if (v243)
          LODWORD(v243) = *(_DWORD *)(v243 + 424);
        *(_DWORD *)buf = 136447746;
        *(_QWORD *)&buf[4] = "nw_http1_remove_idle_connection";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v170 + 74;
        *(_WORD *)&buf[22] = 2080;
        *(_QWORD *)&buf[24] = " ";
        *(_WORD *)&buf[32] = 1024;
        *(_DWORD *)&buf[34] = v244;
        *(_WORD *)&buf[38] = 1024;
        *(_DWORD *)&buf[40] = v245;
        *(_WORD *)&buf[44] = 1024;
        *(_DWORD *)&buf[46] = v243;
        *(_WORD *)&buf[50] = 2048;
        *(_QWORD *)&buf[52] = v170;
        _os_log_impl(&dword_182FBE000, v242, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> called for connection %p", buf, 0x3Cu);
      }
    }
  }
  v171 = (_WORD *)(v170 + 872);
  if (((*(unsigned __int16 *)(v170 + 872) | (*(unsigned __int8 *)(v170 + 874) << 16)) & 0x80000) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "nw_http1_remove_idle_connection";
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v170;
    v172 = (char *)_os_log_send_and_compose_impl();
    aBlock[0] = 16;
    type = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v172, aBlock, &type))
      goto LABEL_322;
    if (aBlock[0] == 17)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v173 = gLogObj;
      v174 = aBlock[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)aBlock[0]))
        goto LABEL_322;
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_http1_remove_idle_connection";
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v170;
      v175 = "%{public}s connection %p not in idle list, cannot remove";
    }
    else if (type)
    {
      v178 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v173 = gLogObj;
      v174 = aBlock[0];
      v179 = os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)aBlock[0]);
      if (v178)
      {
        if (v179)
        {
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)&buf[4] = "nw_http1_remove_idle_connection";
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v170;
          *(_WORD *)&buf[22] = 2082;
          *(_QWORD *)&buf[24] = v178;
          _os_log_impl(&dword_182FBE000, v173, v174, "%{public}s connection %p not in idle list, cannot remove, dumping backtrace:%{public}s", buf, 0x20u);
        }
        free(v178);
        goto LABEL_322;
      }
      if (!v179)
      {
LABEL_322:
        if (v172)
          free(v172);
        goto LABEL_338;
      }
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_http1_remove_idle_connection";
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v170;
      v175 = "%{public}s connection %p not in idle list, cannot remove, no backtrace";
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v173 = gLogObj;
      v174 = aBlock[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)aBlock[0]))
        goto LABEL_322;
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_http1_remove_idle_connection";
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v170;
      v175 = "%{public}s connection %p not in idle list, cannot remove, backtrace limit exceeded";
    }
    _os_log_impl(&dword_182FBE000, v173, v174, v175, buf, 0x16u);
    goto LABEL_322;
  }
  v176 = *(_QWORD *)(v170 + 592);
  v177 = *(_QWORD **)(v170 + 600);
  if (v176)
  {
    *(_QWORD *)(v176 + 600) = v177;
    v177 = *(_QWORD **)(v170 + 600);
  }
  else
  {
    *(_QWORD *)(v8 + 216) = v177;
  }
  *v177 = v176;
  *(_QWORD *)(v170 + 592) = 0;
  *(_QWORD *)(v170 + 600) = 0;
  v180 = *(_DWORD *)(v8 + 340);
  *(_DWORD *)(v8 + 340) = v180 - 1;
  if (!v180)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v181 = *(unsigned int *)(v8 + 340);
    *(_DWORD *)buf = 136446978;
    *(_QWORD *)&buf[4] = "nw_http1_remove_idle_connection";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = "http1->idle_connections_count";
    *(_WORD *)&buf[22] = 2048;
    *(_QWORD *)&buf[24] = 1;
    *(_WORD *)&buf[32] = 2048;
    *(_QWORD *)&buf[34] = v181;
    v182 = (char *)_os_log_send_and_compose_impl();
    aBlock[0] = 16;
    type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v182, aBlock, &type))
    {
      if (aBlock[0] == 17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v183 = gLogObj;
        v184 = aBlock[0];
        if (os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)aBlock[0]))
        {
          v185 = *(unsigned int *)(v8 + 340);
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_http1_remove_idle_connection";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = "http1->idle_connections_count";
          *(_WORD *)&buf[22] = 2048;
          *(_QWORD *)&buf[24] = 1;
          *(_WORD *)&buf[32] = 2048;
          *(_QWORD *)&buf[34] = v185;
          v186 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu";
LABEL_328:
          _os_log_impl(&dword_182FBE000, v183, v184, v186, buf, 0x2Au);
        }
      }
      else if (type)
      {
        v187 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v183 = gLogObj;
        v184 = aBlock[0];
        v188 = os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)aBlock[0]);
        if (v187)
        {
          if (v188)
          {
            v189 = *(unsigned int *)(v8 + 340);
            *(_DWORD *)buf = 136447234;
            *(_QWORD *)&buf[4] = "nw_http1_remove_idle_connection";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = "http1->idle_connections_count";
            *(_WORD *)&buf[22] = 2048;
            *(_QWORD *)&buf[24] = 1;
            *(_WORD *)&buf[32] = 2048;
            *(_QWORD *)&buf[34] = v189;
            *(_WORD *)&buf[42] = 2082;
            *(_QWORD *)&buf[44] = v187;
            _os_log_impl(&dword_182FBE000, v183, v184, "%{public}s Underflow: %{public}s, decrement %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
          }
          free(v187);
          goto LABEL_329;
        }
        if (v188)
        {
          v191 = *(unsigned int *)(v8 + 340);
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_http1_remove_idle_connection";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = "http1->idle_connections_count";
          *(_WORD *)&buf[22] = 2048;
          *(_QWORD *)&buf[24] = 1;
          *(_WORD *)&buf[32] = 2048;
          *(_QWORD *)&buf[34] = v191;
          v186 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, no backtrace";
          goto LABEL_328;
        }
      }
      else
      {
        v183 = __nwlog_obj();
        v184 = aBlock[0];
        if (os_log_type_enabled(v183, (os_log_type_t)aBlock[0]))
        {
          v190 = *(unsigned int *)(v8 + 340);
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_http1_remove_idle_connection";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = "http1->idle_connections_count";
          *(_WORD *)&buf[22] = 2048;
          *(_QWORD *)&buf[24] = 1;
          *(_WORD *)&buf[32] = 2048;
          *(_QWORD *)&buf[34] = v190;
          v186 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, backtrace limit exceeded";
          goto LABEL_328;
        }
      }
    }
LABEL_329:
    if (v182)
      free(v182);
    *(_DWORD *)(v8 + 340) = 0;
  }
  v192 = (unsigned __int16)*v171;
  v193 = (v192 | (*(unsigned __int8 *)(v170 + 874) << 16)) & 0xFFF7FFFF;
  *v171 = v192;
  *(_BYTE *)(v170 + 874) = BYTE2(v193);
  if ((*(_BYTE *)(v170 + 158) & 1) == 0)
  {
    if (gLogDatapath)
    {
      v252 = __nwlog_obj();
      if (os_log_type_enabled(v252, OS_LOG_TYPE_DEBUG))
      {
        v253 = *(_QWORD *)(v170 + 488);
        v254 = *(_DWORD *)(*(_QWORD *)(v170 + 480) + 372);
        v255 = *(_DWORD *)(v170 + 860);
        if (v253)
          LODWORD(v253) = *(_DWORD *)(v253 + 424);
        v256 = *(_DWORD *)(v8 + 340);
        *(_DWORD *)buf = 136448002;
        *(_QWORD *)&buf[4] = "nw_http1_remove_idle_connection";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v170 + 74;
        *(_WORD *)&buf[22] = 2080;
        *(_QWORD *)&buf[24] = " ";
        *(_WORD *)&buf[32] = 1024;
        *(_DWORD *)&buf[34] = v254;
        *(_WORD *)&buf[38] = 1024;
        *(_DWORD *)&buf[40] = v255;
        *(_WORD *)&buf[44] = 1024;
        *(_DWORD *)&buf[46] = v253;
        *(_WORD *)&buf[50] = 2048;
        *(_QWORD *)&buf[52] = v170;
        *(_WORD *)&buf[60] = 1024;
        *(_DWORD *)&buf[62] = v256;
        _os_log_impl(&dword_182FBE000, v252, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> removed idle connection %p, now have %u idle connections", buf, 0x42u);
      }
    }
  }
  if (*(_QWORD *)(v170 + 784))
  {
    if ((*(_BYTE *)(v170 + 158) & 1) == 0)
    {
      if (gLogDatapath)
      {
        v260 = __nwlog_obj();
        if (os_log_type_enabled(v260, OS_LOG_TYPE_DEBUG))
        {
          v261 = *(_QWORD *)(v170 + 488);
          v262 = *(_DWORD *)(*(_QWORD *)(v170 + 480) + 372);
          v263 = *(_DWORD *)(v170 + 860);
          if (v261)
            LODWORD(v261) = *(_DWORD *)(v261 + 424);
          *(_DWORD *)buf = 136447746;
          *(_QWORD *)&buf[4] = "nw_http1_remove_idle_connection";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v170 + 74;
          *(_WORD *)&buf[22] = 2080;
          *(_QWORD *)&buf[24] = " ";
          *(_WORD *)&buf[32] = 1024;
          *(_DWORD *)&buf[34] = v262;
          *(_WORD *)&buf[38] = 1024;
          *(_DWORD *)&buf[40] = v263;
          *(_WORD *)&buf[44] = 1024;
          *(_DWORD *)&buf[46] = v261;
          *(_WORD *)&buf[50] = 2048;
          *(_QWORD *)&buf[52] = v170;
          _os_log_impl(&dword_182FBE000, v260, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> deactivating destroy timer for connection %p", buf, 0x3Cu);
        }
      }
    }
    nw_queue_cancel_source(*(_QWORD *)(v170 + 784), v159);
    *(_QWORD *)(v170 + 784) = 0;
  }
LABEL_338:
  if (v169)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
    v195 = (char *)_os_log_send_and_compose_impl();
    aBlock[0] = 16;
    type = OS_LOG_TYPE_DEFAULT;
    v196 = (_BYTE *)&unk_1ECD84000;
    if (!__nwlog_fault(v195, aBlock, &type))
      goto LABEL_368;
    if (aBlock[0] == 17)
    {
      v240 = __nwlog_obj();
      v241 = aBlock[0];
      if (!os_log_type_enabled(v240, (os_log_type_t)aBlock[0]))
        goto LABEL_368;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
      v200 = "%{public}s called with null http1_stream";
    }
    else if (type)
    {
      v257 = (char *)__nw_create_backtrace_string();
      v240 = __nwlog_obj();
      v241 = aBlock[0];
      v258 = os_log_type_enabled(v240, (os_log_type_t)aBlock[0]);
      if (v257)
      {
        if (v258)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v257;
          _os_log_impl(&dword_182FBE000, v240, v241, "%{public}s called with null http1_stream, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v257);
        goto LABEL_368;
      }
      if (!v258)
        goto LABEL_368;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
      v200 = "%{public}s called with null http1_stream, no backtrace";
    }
    else
    {
      v240 = __nwlog_obj();
      v241 = aBlock[0];
      if (!os_log_type_enabled(v240, (os_log_type_t)aBlock[0]))
        goto LABEL_368;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
      v200 = "%{public}s called with null http1_stream, backtrace limit exceeded";
    }
LABEL_443:
    v222 = v240;
    v223 = v241;
    v224 = 12;
    goto LABEL_367;
  }
  if (*((_QWORD *)v32 + 31))
  {
    if (!*(_QWORD *)(v170 + 488))
    {
      *((_QWORD *)v32 + 32) = v170;
      *(_QWORD *)(v170 + 488) = v32;
      nw_protocol_set_output_handler((uint64_t)v32, *(_QWORD *)(v170 + 32));
      nw_protocol_set_input_handler(v170, *((_QWORD *)v32 + 6));
      *(_OWORD *)v32 = *(_OWORD *)v170;
      v201 = *((_OWORD *)v32 + 9);
      v203 = *((_OWORD *)v32 + 6);
      v202 = *((_OWORD *)v32 + 7);
      *(_OWORD *)(v170 + 128) = *((_OWORD *)v32 + 8);
      *(_OWORD *)(v170 + 144) = v201;
      *(_OWORD *)(v170 + 96) = v203;
      *(_OWORD *)(v170 + 112) = v202;
      v204 = *((_OWORD *)v32 + 5);
      *(_OWORD *)(v170 + 64) = *((_OWORD *)v32 + 4);
      *(_OWORD *)(v170 + 80) = v204;
      nw_http_transaction_metadata_set_connection_metadata(*((void **)v32 + 44), *(void **)(v170 + 768));
      *v171 &= 0xFFD7u;
      *(_DWORD *)(v170 + 864) = 1;
      v196 = (_BYTE *)&unk_1ECD84000;
      if ((*(_BYTE *)(v170 + 158) & 1) == 0)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v205 = gLogObj;
        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
        {
          v206 = *(_QWORD *)(v170 + 488);
          v207 = *(_DWORD *)(*(_QWORD *)(v170 + 480) + 372);
          v208 = *(_DWORD *)(v170 + 860);
          if (v206)
            LODWORD(v206) = *(_DWORD *)(v206 + 424);
          *(_DWORD *)buf = 136447490;
          *(_QWORD *)&buf[4] = "nw_http1_update_connection_input_state";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v170 + 74;
          *(_WORD *)&buf[22] = 2080;
          *(_QWORD *)&buf[24] = " ";
          *(_WORD *)&buf[32] = 1024;
          *(_DWORD *)&buf[34] = v207;
          *(_WORD *)&buf[38] = 1024;
          *(_DWORD *)&buf[40] = v208;
          *(_WORD *)&buf[44] = 1024;
          *(_DWORD *)&buf[46] = v206;
          _os_log_impl(&dword_182FBE000, v205, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> connection input state: reading", buf, 0x32u);
        }
      }
      if ((v32[158] & 1) == 0)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v209 = gLogObj;
        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
        {
          v210 = *((_QWORD *)v32 + 32);
          v211 = *(_DWORD *)(*((_QWORD *)v32 + 31) + 372);
          if (v210)
            LODWORD(v210) = *(_DWORD *)(v210 + 860);
          v212 = *((_DWORD *)v32 + 106);
          *(_DWORD *)buf = 136448002;
          *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v32 + 74;
          *(_WORD *)&buf[22] = 2080;
          *(_QWORD *)&buf[24] = " ";
          *(_WORD *)&buf[32] = 1024;
          *(_DWORD *)&buf[34] = v211;
          *(_WORD *)&buf[38] = 1024;
          *(_DWORD *)&buf[40] = v210;
          *(_WORD *)&buf[44] = 1024;
          *(_DWORD *)&buf[46] = v212;
          *(_WORD *)&buf[50] = 2048;
          *(_QWORD *)&buf[52] = v32;
          *(_WORD *)&buf[60] = 2048;
          *(_QWORD *)&buf[62] = v170;
          _os_log_impl(&dword_182FBE000, v209, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s<i%u:c%u:s%u> stream (%p) now using connection %p", buf, 0x46u);
        }
      }
      goto LABEL_370;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v194 = *(_QWORD *)(v170 + 488);
    *(_DWORD *)buf = 136446722;
    *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v170;
    *(_WORD *)&buf[22] = 2048;
    *(_QWORD *)&buf[24] = v194;
    v195 = (char *)_os_log_send_and_compose_impl();
    aBlock[0] = 16;
    type = OS_LOG_TYPE_DEFAULT;
    v196 = &unk_1ECD84000;
    if (__nwlog_fault(v195, aBlock, &type))
    {
      if (aBlock[0] == 17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v197 = gLogObj;
        v198 = aBlock[0];
        if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)aBlock[0]))
          goto LABEL_368;
        v199 = *(_QWORD *)(v170 + 488);
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v170;
        *(_WORD *)&buf[22] = 2048;
        *(_QWORD *)&buf[24] = v199;
        v200 = "%{public}s Connection %p already has a stream (%p)";
LABEL_366:
        v222 = v197;
        v223 = v198;
        v224 = 32;
LABEL_367:
        _os_log_impl(&dword_182FBE000, v222, v223, v200, buf, v224);
        goto LABEL_368;
      }
      if (type == OS_LOG_TYPE_DEFAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v197 = gLogObj;
        v198 = aBlock[0];
        if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)aBlock[0]))
          goto LABEL_368;
        v220 = *(_QWORD *)(v170 + 488);
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v170;
        *(_WORD *)&buf[22] = 2048;
        *(_QWORD *)&buf[24] = v220;
        v200 = "%{public}s Connection %p already has a stream (%p), backtrace limit exceeded";
        goto LABEL_366;
      }
      v213 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v197 = gLogObj;
      v198 = aBlock[0];
      v214 = os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)aBlock[0]);
      if (!v213)
      {
        if (!v214)
          goto LABEL_368;
        v221 = *(_QWORD *)(v170 + 488);
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v170;
        *(_WORD *)&buf[22] = 2048;
        *(_QWORD *)&buf[24] = v221;
        v200 = "%{public}s Connection %p already has a stream (%p), no backtrace";
        goto LABEL_366;
      }
      if (v214)
      {
        v215 = *(_QWORD *)(v170 + 488);
        *(_DWORD *)buf = 136446978;
        *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v170;
        *(_WORD *)&buf[22] = 2048;
        *(_QWORD *)&buf[24] = v215;
        *(_WORD *)&buf[32] = 2082;
        *(_QWORD *)&buf[34] = v213;
        v216 = "%{public}s Connection %p already has a stream (%p), dumping backtrace:%{public}s";
        v217 = v197;
        v218 = v198;
        v219 = 42;
LABEL_359:
        _os_log_impl(&dword_182FBE000, v217, v218, v216, buf, v219);
        goto LABEL_360;
      }
      goto LABEL_360;
    }
    goto LABEL_368;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
  v195 = (char *)_os_log_send_and_compose_impl();
  aBlock[0] = 16;
  type = OS_LOG_TYPE_DEFAULT;
  v196 = (_BYTE *)&unk_1ECD84000;
  if (!__nwlog_fault(v195, aBlock, &type))
    goto LABEL_368;
  if (aBlock[0] == 17)
  {
    v240 = __nwlog_obj();
    v241 = aBlock[0];
    if (!os_log_type_enabled(v240, (os_log_type_t)aBlock[0]))
      goto LABEL_368;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
    v200 = "%{public}s called with null http1_stream->protocol_http1";
    goto LABEL_443;
  }
  if (type == OS_LOG_TYPE_DEFAULT)
  {
    v240 = __nwlog_obj();
    v241 = aBlock[0];
    if (!os_log_type_enabled(v240, (os_log_type_t)aBlock[0]))
      goto LABEL_368;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
    v200 = "%{public}s called with null http1_stream->protocol_http1, backtrace limit exceeded";
    goto LABEL_443;
  }
  v213 = (char *)__nw_create_backtrace_string();
  v240 = __nwlog_obj();
  v241 = aBlock[0];
  v259 = os_log_type_enabled(v240, (os_log_type_t)aBlock[0]);
  if (v213)
  {
    if (v259)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v213;
      v216 = "%{public}s called with null http1_stream->protocol_http1, dumping backtrace:%{public}s";
      v217 = v240;
      v218 = v241;
      v219 = 22;
      goto LABEL_359;
    }
LABEL_360:
    free(v213);
    if (!v195)
      goto LABEL_370;
    goto LABEL_369;
  }
  if (v259)
  {
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
    v200 = "%{public}s called with null http1_stream->protocol_http1, no backtrace";
    goto LABEL_443;
  }
LABEL_368:
  if (v195)
LABEL_369:
    free(v195);
LABEL_370:
  *(_QWORD *)(v8 + 224) = 0;
  *((_WORD *)v32 + 214) |= 4u;
  result = 1;
  if ((v32[158] & 1) == 0 && v196[1345])
  {
    v225 = __nwlog_obj();
    if (os_log_type_enabled(v225, OS_LOG_TYPE_DEBUG))
    {
      v226 = *((_QWORD *)v32 + 32);
      v227 = *(_DWORD *)(*((_QWORD *)v32 + 31) + 372);
      if (v226)
        LODWORD(v226) = *(_DWORD *)(v226 + 860);
      v228 = *((_DWORD *)v32 + 106);
      *(_DWORD *)buf = 136447746;
      *(_QWORD *)&buf[4] = "nw_protocol_http1_add_input_handler";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v32 + 74;
      *(_WORD *)&buf[22] = 2080;
      *(_QWORD *)&buf[24] = " ";
      *(_WORD *)&buf[32] = 1024;
      *(_DWORD *)&buf[34] = v227;
      *(_WORD *)&buf[38] = 1024;
      *(_DWORD *)&buf[40] = v226;
      *(_WORD *)&buf[44] = 1024;
      *(_DWORD *)&buf[46] = v228;
      *(_WORD *)&buf[50] = 2048;
      *(_QWORD *)&buf[52] = v170;
      _os_log_impl(&dword_182FBE000, v225, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> attached to connection %p which triggered new flow, pending connected", buf, 0x3Cu);
    }
    return 1;
  }
  return result;
}

void sub_18375C574(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL nw_protocol_http1_remove_input_handler(nw_protocol *a1, nw_protocol *a2, int a3)
{
  char *handle;
  int v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  NSObject *v23;
  uint64_t v24;
  int v25;
  int v26;
  const char *v27;
  NSObject *v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  int v33;
  int v34;
  char *v35;
  NSObject *v36;
  os_log_type_t v37;
  const char *v38;
  uint64_t v39;
  int v40;
  int v41;
  __int16 v42;
  uint64_t v43;
  int v44;
  int v45;
  uint64_t v46;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  uint64_t v55;
  const char *v56;
  NSObject *v57;
  uint64_t v58;
  int v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  char *v64;
  _BOOL4 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _WORD *v69;
  uint64_t v70;
  uint64_t *v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  NSObject *v77;
  os_log_type_t v78;
  uint64_t v79;
  const char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  NSObject *v96;
  os_log_type_t v97;
  uint64_t v98;
  const char *v99;
  char *v100;
  NSObject *v101;
  os_log_type_t v102;
  const char *v103;
  char *v104;
  _BOOL4 v105;
  char *v106;
  _BOOL4 v107;
  uint64_t v108;
  char *v109;
  _BOOL4 v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  int v115;
  char *v116;
  _BOOL4 v117;
  uint64_t v118;
  int v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  NSObject *v127;
  os_log_type_t v128;
  uint64_t v129;
  const char *v130;
  char *v131;
  _BOOL4 v132;
  uint64_t v133;
  int v134;
  uint64_t v135;
  char *v136;
  NSObject *v137;
  os_log_type_t v138;
  uint64_t v139;
  const char *v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  void *v144;
  void *v145;
  void *v146;
  void *v147;
  void *v148;
  int v149;
  int v150;
  char v151;
  uint64_t v152;
  __int16 v153;
  NSObject *v154;
  uint64_t v155;
  int v156;
  int v157;
  const char *v158;
  unsigned int v159;
  uint64_t v160;
  void *v161;
  _BOOL8 source;
  dispatch_time_t v163;
  uint64_t v164;
  uint64_t v165;
  char v166;
  void *v167;
  char v168;
  void *v169;
  uint64_t v170;
  uint64_t v171;
  NSObject *v172;
  uint64_t v173;
  int v174;
  int v175;
  uint64_t v176;
  uint64_t v177;
  char v178;
  uint64_t v179;
  uint64_t v180;
  char v181;
  uint64_t v182;
  uint64_t v183;
  char v184;
  void *v185;
  void *v186;
  void *v187;
  void *v188;
  void *v189;
  void *v190;
  void *v191;
  const void *v192;
  void *v193;
  char *v194;
  _BOOL4 v195;
  uint64_t v196;
  char *v197;
  NSObject *v198;
  os_log_type_t v199;
  const char *v200;
  char *v201;
  _BOOL4 v202;
  uint64_t v203;
  _QWORD *v204;
  int v205;
  uint64_t v206;
  char *v207;
  NSObject *v208;
  os_log_type_t v209;
  uint64_t v210;
  const char *v211;
  char *v212;
  _BOOL4 v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  int v217;
  uint64_t v218;
  char *v219;
  NSObject *v220;
  os_log_type_t v221;
  uint64_t v222;
  const char *v223;
  char *v224;
  _BOOL4 v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  char v230;
  void *v231;
  char v232;
  void *v233;
  char v234;
  void *v235;
  char v236;
  void *v237;
  uint64_t v238;
  uint64_t v239;
  const void *v240;
  void *v241;
  uint64_t v242;
  uint64_t v243;
  _OWORD *v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  NSObject *v249;
  int v250;
  _WORD *v251;
  char *v252;
  NSObject *v253;
  os_log_type_t v254;
  const char *v255;
  uint64_t v256;
  uint64_t v257;
  int v258;
  int v259;
  const char *v260;
  NSObject *v261;
  uint32_t v262;
  NSObject *v263;
  int v264;
  const char *v265;
  int v266;
  NSObject *v267;
  uint32_t v268;
  int v269;
  _QWORD **v270;
  unsigned __int16 *v271;
  _QWORD *v272;
  NSObject *v273;
  NSObject *v274;
  NSObject *v275;
  int v276;
  int v277;
  int v278;
  uint64_t v279;
  int v280;
  int v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  char *v285;
  NSObject *v286;
  os_log_type_t v287;
  uint64_t v288;
  const char *v289;
  char *v290;
  NSObject *v291;
  os_log_type_t v292;
  const char *v293;
  uint64_t v294;
  _QWORD *v295;
  _OWORD *v296;
  void *v297;
  void *v298;
  _OWORD *v299;
  uint64_t v300;
  void *v301;
  uint64_t v302;
  char v303;
  char v304;
  uint64_t v305;
  NSObject *v306;
  uint64_t v307;
  int v308;
  int v309;
  NSObject **v310;
  void *v311;
  void **v312;
  id v313;
  void *v314;
  id v315;
  id v316;
  id v317;
  void *v318;
  NSObject *v319;
  NSObject *v320;
  __int16 v321;
  int v322;
  id v323;
  void *v324;
  NSObject *v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  char *v329;
  NSObject *v330;
  os_log_type_t v331;
  uint64_t v332;
  const char *v333;
  NSObject *v334;
  uint64_t v335;
  int v336;
  int v337;
  char *v338;
  _BOOL4 v339;
  int v340;
  uint64_t v341;
  char *v342;
  NSObject *v343;
  os_log_type_t v344;
  uint64_t v345;
  const char *v346;
  NSObject *v347;
  int v348;
  char *v349;
  NSObject *v350;
  os_log_type_t v351;
  const char *v352;
  NSObject *v353;
  uint64_t v354;
  int v355;
  int v356;
  int v357;
  NSObject *v358;
  uint64_t v359;
  int v360;
  int v361;
  NSObject *v362;
  uint64_t v363;
  int v364;
  int v365;
  char *v366;
  _BOOL4 v367;
  uint64_t v368;
  char *v369;
  _BOOL4 v370;
  NSObject *v371;
  uint64_t v372;
  int v373;
  int v374;
  char *v375;
  _BOOL4 v376;
  uint64_t v377;
  uint64_t v378;
  _QWORD *v379;
  uint64_t v380;
  int v381;
  unsigned int v382;
  uint64_t v383;
  uint64_t v384;
  int v385;
  unsigned int v386;
  char *v387;
  NSObject *v388;
  os_log_type_t v389;
  const char *v390;
  uint64_t v391;
  _QWORD *v392;
  char *v393;
  _BOOL4 v394;
  int v395;
  uint64_t v396;
  char *v397;
  NSObject *v398;
  os_log_type_t v399;
  uint64_t v400;
  const char *v401;
  char *v402;
  _BOOL4 v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  char *v408;
  NSObject *v409;
  os_log_type_t v410;
  uint64_t v411;
  const char *v412;
  __int128 v413;
  __int128 v414;
  __int128 v415;
  __int128 v416;
  NSObject *v417;
  uint64_t v418;
  int v419;
  int v420;
  NSObject *v421;
  uint64_t v422;
  int v423;
  int v424;
  char *v425;
  _BOOL4 v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  void *v430;
  _BOOL8 result;
  char *v432;
  _BOOL4 v433;
  uint64_t v434;
  uint64_t v435;
  NSObject *v436;
  uint64_t v437;
  int v438;
  int v439;
  int v440;
  char *v441;
  _BOOL4 v442;
  uint64_t v443;
  int v444;
  uint64_t v445;
  char *v446;
  NSObject *v447;
  os_log_type_t v448;
  uint64_t v449;
  const char *v450;
  char *v451;
  NSObject *v452;
  os_log_type_t v453;
  const char *v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  char *v459;
  NSObject *v460;
  os_log_type_t v461;
  uint64_t v462;
  const char *v463;
  char *v464;
  _BOOL4 v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  char *v470;
  NSObject *v471;
  os_log_type_t v472;
  uint64_t v473;
  const char *v474;
  __int128 v475;
  __int128 v476;
  __int128 v477;
  __int128 v478;
  NSObject *v479;
  uint64_t v480;
  int v481;
  int v482;
  NSObject *v483;
  uint64_t v484;
  int v485;
  int v486;
  char *v487;
  _BOOL4 v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  NSObject *v492;
  uint64_t v493;
  int v494;
  int v495;
  void *v496;
  char *v497;
  _QWORD *v498;
  _BOOL4 v499;
  uint64_t v500;
  void *v501;
  uint64_t v502;
  void *v503;
  NSObject *v504;
  NSObject *v505;
  NSObject *v506;
  int v507;
  uint64_t v508;
  char *v509;
  NSObject *v510;
  os_log_type_t v511;
  uint64_t v512;
  const char *v513;
  char *v514;
  _BOOL4 v515;
  uint64_t v516;
  uint64_t v517;
  char *v518;
  NSObject *v519;
  os_log_type_t v520;
  const char *v521;
  uint64_t v522;
  char *v523;
  _BOOL4 v524;
  uint64_t v525;
  uint64_t v526;
  char *backtrace_string;
  _BOOL4 v528;
  char *v529;
  _BOOL4 v530;
  const char *v531;
  NSObject *v532;
  uint64_t v533;
  int v534;
  int v535;
  NSObject *v536;
  int v537;
  int v538;
  NSObject *v539;
  uint64_t v540;
  int v541;
  int v542;
  int v543;
  NSObject *v544;
  uint64_t v545;
  int v546;
  int v547;
  char *v548;
  _BOOL4 v549;
  const char *v550;
  uint64_t v551;
  void *v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  NSObject *v556;
  uint64_t v557;
  int v558;
  int v559;
  uint64_t v560;
  void *v561;
  char *v562;
  NSObject *v563;
  os_log_type_t v564;
  const char *v565;
  char *v566;
  NSObject *v567;
  os_log_type_t v568;
  const char *v569;
  uint64_t v570;
  uint64_t v571;
  char *v572;
  NSObject *v573;
  os_log_type_t v574;
  const char *v575;
  char *v576;
  NSObject *v577;
  os_log_type_t v578;
  const char *v579;
  NSObject *v580;
  uint64_t v581;
  int v582;
  int v583;
  NSObject *v584;
  uint64_t v585;
  int v586;
  int v587;
  NSObject *v588;
  uint64_t v589;
  int v590;
  int v591;
  uint64_t v592;
  NSObject *v593;
  int v594;
  int v595;
  NSObject *v596;
  uint64_t v597;
  int v598;
  int v599;
  NSObject *v600;
  uint64_t v601;
  int v602;
  int v603;
  NSObject *v604;
  NSObject *v605;
  uint64_t v606;
  int v607;
  int v608;
  NSObject *v609;
  NSObject *v610;
  uint64_t v611;
  int v612;
  int v613;
  NSObject *v614;
  char *v615;
  _BOOL4 v616;
  char *v617;
  _BOOL4 v618;
  uint64_t v619;
  void *v620;
  void *v621;
  _OWORD *v622;
  uint64_t v623;
  void *v624;
  uint64_t v625;
  char v626;
  char v627;
  uint64_t v628;
  NSObject *v629;
  uint64_t v630;
  int v631;
  int v632;
  NSObject **v633;
  void *v634;
  void **v635;
  id v636;
  void *v637;
  id v638;
  id v639;
  id v640;
  void *v641;
  NSObject *v642;
  NSObject *v643;
  __int16 v644;
  int v645;
  id v646;
  void *v647;
  NSObject *v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t v651;
  char *v652;
  NSObject *v653;
  os_log_type_t v654;
  uint64_t v655;
  const char *v656;
  uint64_t v657;
  NSObject *v658;
  _BOOL4 is_quic;
  void *v660;
  void *v661;
  NSObject *v662;
  void *v663;
  uint64_t v664;
  uint64_t v665;
  uint64_t v666;
  char *v667;
  NSObject *v668;
  os_log_type_t v669;
  uint64_t v670;
  const char *v671;
  char *v672;
  _BOOL4 v673;
  uint64_t v674;
  char *v675;
  _BOOL4 v676;
  uint64_t v677;
  uint64_t v678;
  uint64_t v679;
  uint64_t v680;
  uint64_t v681;
  uint64_t v682;
  char *v683;
  NSObject *v684;
  os_log_type_t v685;
  uint64_t v686;
  const char *v687;
  char *v688;
  _BOOL4 v689;
  uint64_t v690;
  uint64_t v691;
  uint64_t v692;
  uint64_t v693;
  char *v694;
  NSObject *v695;
  os_log_type_t v696;
  uint64_t v697;
  const char *v698;
  __int128 v699;
  __int128 v700;
  __int128 v701;
  __int128 v702;
  NSObject *v703;
  uint64_t v704;
  int v705;
  int v706;
  NSObject *v707;
  uint64_t v708;
  int v709;
  int v710;
  char *v711;
  _BOOL4 v712;
  uint64_t v713;
  uint64_t v714;
  uint64_t v715;
  NSObject *v716;
  uint64_t v717;
  int v718;
  int v719;
  void *v720;
  char *identifier;
  _QWORD *v722;
  _BOOL4 v723;
  uint64_t v724;
  void *v725;
  uint64_t v726;
  void *v727;
  NSObject *v728;
  NSObject *v729;
  NSObject *v730;
  uint64_t v731;
  uint64_t v732;
  uint64_t v733;
  void *v734;
  _BOOL4 v735;
  _BOOL4 v736;
  char *v737;
  _BOOL4 v738;
  NSObject *v739;
  uint64_t v740;
  uint64_t v741;
  int v742;
  int v743;
  NSObject *v744;
  NSObject *v745;
  uint64_t v746;
  int v747;
  int v748;
  int v749;
  NSObject *v750;
  int v751;
  int v752;
  char *v753;
  NSObject *v754;
  _BOOL4 v755;
  char *v756;
  _BOOL4 v757;
  _OWORD *v758;
  NSObject *v759;
  _BOOL4 v760;
  int v761;
  NSObject *v762;
  uint64_t v763;
  int v764;
  int v765;
  char *v766;
  NSObject *v767;
  os_log_type_t v768;
  const char *v769;
  _OWORD *v770;
  NSObject *v771;
  _BOOL4 v772;
  uint64_t v773;
  int v774;
  int v775;
  NSObject *v776;
  int v777;
  int v778;
  NSObject *v779;
  int v780;
  int v781;
  int v782;
  uint64_t v783;
  int v784;
  int v785;
  uint64_t v786;
  uint64_t v787;
  uint64_t v788;
  char *v789;
  NSObject *v790;
  os_log_type_t v791;
  uint64_t v792;
  const char *v793;
  uint64_t v794;
  int v795;
  int v796;
  char *v797;
  NSObject *v798;
  os_log_type_t v799;
  const char *v800;
  NSObject *v801;
  NSObject *v802;
  int v803;
  int v804;
  uint64_t v805;
  int v806;
  int v807;
  _BOOL4 v808;
  _BOOL4 v809;
  NSObject *v810;
  NSObject *v811;
  NSObject *v812;
  uint64_t v813;
  int v814;
  int v815;
  int v816;
  NSObject *v817;
  uint64_t v818;
  uint64_t v819;
  int v820;
  int v821;
  int v822;
  char *v823;
  _BOOL4 v824;
  NSObject *v825;
  uint64_t v826;
  int v827;
  int v828;
  char *v829;
  _BOOL4 v830;
  NSObject *v831;
  uint64_t v832;
  int v833;
  int v834;
  NSObject *v835;
  uint64_t v836;
  int v837;
  int v838;
  char *v839;
  NSObject *v840;
  os_log_type_t v841;
  const char *v842;
  char *v843;
  NSObject *v844;
  os_log_type_t v845;
  const char *v846;
  NSObject *v847;
  uint64_t v848;
  uint64_t v849;
  int v850;
  int v851;
  uint64_t v852;
  NSObject *v853;
  void *v854;
  char *v855;
  NSObject *v856;
  os_log_type_t v857;
  const char *v858;
  char *v859;
  NSObject *v860;
  os_log_type_t v861;
  const char *v862;
  char *v863;
  NSObject *v864;
  os_log_type_t v865;
  const char *v866;
  NSObject *v867;
  uint64_t v868;
  int v869;
  int v870;
  NSObject *v871;
  uint64_t v872;
  int v873;
  int v874;
  int v875;
  NSObject *v876;
  uint64_t v877;
  uint64_t v878;
  int v879;
  int v880;
  char *v881;
  NSObject *v882;
  os_log_type_t v883;
  const char *v884;
  NSObject *v885;
  uint64_t v886;
  int v887;
  int v888;
  char *v889;
  NSObject *v890;
  os_log_type_t v891;
  const char *v892;
  char *v893;
  NSObject *v894;
  os_log_type_t v895;
  const char *v896;
  NSObject *v897;
  uint64_t v898;
  uint64_t v899;
  int v900;
  int v901;
  uint64_t v902;
  char *v903;
  _BOOL4 v904;
  char *v905;
  _BOOL4 v906;
  char *v907;
  _BOOL4 v908;
  const char *v909;
  NSObject *v910;
  void *v911;
  char *v912;
  NSObject *v913;
  os_log_type_t v914;
  const char *v915;
  char *v916;
  NSObject *v917;
  os_log_type_t v918;
  const char *v919;
  char *v920;
  NSObject *v921;
  os_log_type_t v922;
  const char *v923;
  _BOOL4 v924;
  NSObject *v925;
  uint64_t v926;
  int v927;
  int v928;
  NSObject *v929;
  uint64_t v930;
  int v931;
  int v932;
  int v933;
  char *v934;
  _BOOL4 v935;
  char *v936;
  _BOOL4 v937;
  char *v938;
  _BOOL4 v939;
  uint64_t v940;
  int v941;
  int v942;
  NSObject *v943;
  uint64_t v944;
  int v945;
  int v946;
  NSObject *v947;
  int v948;
  int v949;
  char *v950;
  _BOOL4 v951;
  NSObject *v952;
  uint64_t v953;
  int v954;
  int v955;
  int v956;
  char *v957;
  _BOOL4 v958;
  uint64_t v959;
  char *v960;
  _BOOL4 v961;
  char *v962;
  _BOOL4 v963;
  char *v964;
  _BOOL4 v965;
  const char *v966;
  _BOOL4 v967;
  char *v968;
  _BOOL4 v969;
  char *v970;
  _BOOL4 v971;
  char *v972;
  _BOOL4 v973;
  NSObject *v974;
  uint64_t v975;
  uint64_t v976;
  int v977;
  int v978;
  int v979;
  NSObject *v980;
  int v981;
  char *v982;
  _BOOL4 v983;
  const char *v984;
  _BOOL4 v985;
  char *v986;
  NSObject *v987;
  os_log_type_t v988;
  const char *v989;
  char *v990;
  _BOOL4 v991;
  char *v992;
  NSObject *v993;
  os_log_type_t v994;
  const char *v995;
  char *v996;
  _BOOL4 v997;
  uint64_t v998;
  uint8_t *v999;
  uint64_t v1000;
  void *v1001;
  uint64_t v1002;
  uint64_t v1003;
  uint64_t v1004;
  NSObject *v1005;
  uint64_t v1006;
  int v1007;
  int v1008;
  uint64_t v1009;
  void *v1010;
  char *v1011;
  NSObject *v1012;
  os_log_type_t v1013;
  const char *v1014;
  char *v1015;
  _BOOL4 v1016;
  char *v1017;
  NSObject *v1018;
  os_log_type_t v1019;
  const char *v1020;
  char *v1021;
  _BOOL4 v1022;
  char *v1023;
  NSObject *v1024;
  os_log_type_t v1025;
  const char *v1026;
  NSObject *v1027;
  uint64_t v1028;
  int v1029;
  int v1030;
  char *v1031;
  _BOOL4 v1032;
  NSObject *v1033;
  uint64_t v1034;
  int v1035;
  int v1036;
  int v1037;
  char *v1038;
  _BOOL4 v1039;
  const char *v1040;
  _BOOL4 v1041;
  uint8_t *v1042;
  uint64_t v1043;
  uint64_t v1044;
  _OWORD *log;
  NSObject *loga;
  _QWORD *v1047;
  _OWORD *v1048;
  _OWORD *v1049;
  _OWORD *v1050;
  uint64_t v1051;
  uint64_t v1052;
  char v1053;
  os_log_type_t v1054;
  _QWORD v1055[6];
  uint64_t v1056;
  uint64_t *v1057;
  uint64_t v1058;
  char v1059;
  _BYTE buf[24];
  uint64_t v1061;
  _BYTE v1062[44];
  __int16 v1063;
  int v1064;
  _BYTE type[24];
  uint64_t v1066;
  _BYTE v1067[10];
  __int16 v1068;
  char *v1069;
  _BYTE aBlock[24];
  void *v1071;
  uint64_t *v1072;
  _BYTE *v1073;
  uint64_t v1074;
  _BYTE v1075[24];
  uint64_t (*v1076)(uint64_t, uint64_t);
  void (*v1077)(uint64_t);
  void *v1078;
  uint64_t v1079;
  uint64_t v1080;

  v1080 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
    v451 = (char *)_os_log_send_and_compose_impl();
    v1075[0] = 16;
    aBlock[0] = 0;
    if (!__nwlog_fault(v451, v1075, aBlock))
      goto LABEL_1296;
    if (v1075[0] == 17)
    {
      v452 = __nwlog_obj();
      v453 = v1075[0];
      if (!os_log_type_enabled(v452, (os_log_type_t)v1075[0]))
        goto LABEL_1296;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
      v454 = "%{public}s called with null protocol";
    }
    else if (aBlock[0])
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v452 = __nwlog_obj();
      v453 = v1075[0];
      v528 = os_log_type_enabled(v452, (os_log_type_t)v1075[0]);
      if (backtrace_string)
      {
        if (v528)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v452, v453, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_1296:
        if (!v451)
          goto LABEL_1298;
LABEL_1297:
        free(v451);
        goto LABEL_1298;
      }
      if (!v528)
        goto LABEL_1296;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
      v454 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      v452 = __nwlog_obj();
      v453 = v1075[0];
      if (!os_log_type_enabled(v452, (os_log_type_t)v1075[0]))
        goto LABEL_1296;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
      v454 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    goto LABEL_1295;
  }
  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
    v451 = (char *)_os_log_send_and_compose_impl();
    v1075[0] = 16;
    aBlock[0] = 0;
    if (!__nwlog_fault(v451, v1075, aBlock))
      goto LABEL_1296;
    if (v1075[0] != 17)
    {
      if (!aBlock[0])
      {
        v452 = __nwlog_obj();
        v453 = v1075[0];
        if (!os_log_type_enabled(v452, (os_log_type_t)v1075[0]))
          goto LABEL_1296;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
        v454 = "%{public}s called with null handle, backtrace limit exceeded";
        goto LABEL_1295;
      }
      v529 = (char *)__nw_create_backtrace_string();
      v452 = __nwlog_obj();
      v453 = v1075[0];
      v530 = os_log_type_enabled(v452, (os_log_type_t)v1075[0]);
      if (!v529)
      {
        if (!v530)
          goto LABEL_1296;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
        v454 = "%{public}s called with null handle, no backtrace";
        goto LABEL_1295;
      }
      if (v530)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v529;
        v531 = "%{public}s called with null handle, dumping backtrace:%{public}s";
LABEL_876:
        _os_log_impl(&dword_182FBE000, v452, v453, v531, buf, 0x16u);
      }
LABEL_877:
      free(v529);
      if (!v451)
        goto LABEL_1298;
      goto LABEL_1297;
    }
    v452 = __nwlog_obj();
    v453 = v1075[0];
    if (!os_log_type_enabled(v452, (os_log_type_t)v1075[0]))
      goto LABEL_1296;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
    v454 = "%{public}s called with null handle";
LABEL_1295:
    _os_log_impl(&dword_182FBE000, v452, v453, v454, buf, 0xCu);
    goto LABEL_1296;
  }
  v7 = *((_DWORD *)handle + 6);
  v8 = (uint64_t *)a1->handle;
  if (v7 == 1)
    goto LABEL_10;
  if (v7 != 2)
  {
    if (v7 != 3)
    {
LABEL_1298:
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http1_remove_input_handler";
      v518 = (char *)_os_log_send_and_compose_impl();
      v1075[0] = 16;
      aBlock[0] = 0;
      if (!__nwlog_fault(v518, v1075, aBlock))
        goto LABEL_1330;
      if (v1075[0] == 17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v519 = gLogObj;
        v520 = v1075[0];
        if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v1075[0]))
          goto LABEL_1330;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_http1_remove_input_handler";
        v521 = "%{public}s called with null http1";
        goto LABEL_1329;
      }
      if (!aBlock[0])
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v519 = gLogObj;
        v520 = v1075[0];
        if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v1075[0]))
          goto LABEL_1330;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_http1_remove_input_handler";
        v521 = "%{public}s called with null http1, backtrace limit exceeded";
        goto LABEL_1329;
      }
      v548 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v519 = gLogObj;
      v520 = v1075[0];
      v808 = os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v1075[0]);
      if (!v548)
      {
        if (!v808)
          goto LABEL_1330;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_http1_remove_input_handler";
        v521 = "%{public}s called with null http1, no backtrace";
        goto LABEL_1329;
      }
      if (!v808)
        goto LABEL_1324;
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_protocol_http1_remove_input_handler";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v548;
      v550 = "%{public}s called with null http1, dumping backtrace:%{public}s";
      goto LABEL_1323;
    }
    v9 = *((_QWORD *)handle + 2);
    if (v9)
    {
      v8 = (uint64_t *)(v9 + 480);
      goto LABEL_10;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
    v451 = (char *)_os_log_send_and_compose_impl();
    v1075[0] = 16;
    aBlock[0] = 0;
    if (!__nwlog_fault(v451, v1075, aBlock))
      goto LABEL_1296;
    if (v1075[0] == 17)
    {
      v452 = __nwlog_obj();
      v453 = v1075[0];
      if (!os_log_type_enabled(v452, (os_log_type_t)v1075[0]))
        goto LABEL_1296;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
      v454 = "%{public}s called with null handle->http1_connection";
      goto LABEL_1295;
    }
    if (!aBlock[0])
    {
      v452 = __nwlog_obj();
      v453 = v1075[0];
      if (!os_log_type_enabled(v452, (os_log_type_t)v1075[0]))
        goto LABEL_1296;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
      v454 = "%{public}s called with null handle->http1_connection, backtrace limit exceeded";
      goto LABEL_1295;
    }
    v529 = (char *)__nw_create_backtrace_string();
    v452 = __nwlog_obj();
    v453 = v1075[0];
    v735 = os_log_type_enabled(v452, (os_log_type_t)v1075[0]);
    if (!v529)
    {
      if (!v735)
        goto LABEL_1296;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
      v454 = "%{public}s called with null handle->http1_connection, no backtrace";
      goto LABEL_1295;
    }
    if (v735)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v529;
      v531 = "%{public}s called with null handle->http1_connection, dumping backtrace:%{public}s";
      goto LABEL_876;
    }
    goto LABEL_877;
  }
  v10 = *((_QWORD *)handle + 1);
  if (!v10)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
    v451 = (char *)_os_log_send_and_compose_impl();
    v1075[0] = 16;
    aBlock[0] = 0;
    if (!__nwlog_fault(v451, v1075, aBlock))
      goto LABEL_1296;
    if (v1075[0] == 17)
    {
      v452 = __nwlog_obj();
      v453 = v1075[0];
      if (!os_log_type_enabled(v452, (os_log_type_t)v1075[0]))
        goto LABEL_1296;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
      v454 = "%{public}s called with null handle->http1_stream";
      goto LABEL_1295;
    }
    if (!aBlock[0])
    {
      v452 = __nwlog_obj();
      v453 = v1075[0];
      if (!os_log_type_enabled(v452, (os_log_type_t)v1075[0]))
        goto LABEL_1296;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
      v454 = "%{public}s called with null handle->http1_stream, backtrace limit exceeded";
      goto LABEL_1295;
    }
    v529 = (char *)__nw_create_backtrace_string();
    v452 = __nwlog_obj();
    v453 = v1075[0];
    v736 = os_log_type_enabled(v452, (os_log_type_t)v1075[0]);
    if (!v529)
    {
      if (!v736)
        goto LABEL_1296;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
      v454 = "%{public}s called with null handle->http1_stream, no backtrace";
      goto LABEL_1295;
    }
    if (v736)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v529;
      v531 = "%{public}s called with null handle->http1_stream, dumping backtrace:%{public}s";
      goto LABEL_876;
    }
    goto LABEL_877;
  }
  v8 = (uint64_t *)(v10 + 248);
LABEL_10:
  v11 = *v8;
  if (!*v8)
    goto LABEL_1298;
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_http1_remove_input_handler";
    v518 = (char *)_os_log_send_and_compose_impl();
    v1075[0] = 16;
    aBlock[0] = 0;
    if (!__nwlog_fault(v518, v1075, aBlock))
      goto LABEL_1330;
    if (v1075[0] == 17)
    {
      v519 = __nwlog_obj();
      v520 = v1075[0];
      if (!os_log_type_enabled(v519, (os_log_type_t)v1075[0]))
        goto LABEL_1330;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http1_remove_input_handler";
      v521 = "%{public}s called with null input_protocol";
LABEL_1329:
      _os_log_impl(&dword_182FBE000, v519, v520, v521, buf, 0xCu);
      goto LABEL_1330;
    }
    if (!aBlock[0])
    {
      v519 = __nwlog_obj();
      v520 = v1075[0];
      if (!os_log_type_enabled(v519, (os_log_type_t)v1075[0]))
        goto LABEL_1330;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http1_remove_input_handler";
      v521 = "%{public}s called with null input_protocol, backtrace limit exceeded";
      goto LABEL_1329;
    }
    v548 = (char *)__nw_create_backtrace_string();
    v519 = __nwlog_obj();
    v520 = v1075[0];
    v549 = os_log_type_enabled(v519, (os_log_type_t)v1075[0]);
    if (!v548)
    {
      if (!v549)
        goto LABEL_1330;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http1_remove_input_handler";
      v521 = "%{public}s called with null input_protocol, no backtrace";
      goto LABEL_1329;
    }
    if (!v549)
      goto LABEL_1324;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "nw_protocol_http1_remove_input_handler";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v548;
    v550 = "%{public}s called with null input_protocol, dumping backtrace:%{public}s";
LABEL_1323:
    _os_log_impl(&dword_182FBE000, v519, v520, v550, buf, 0x16u);
    goto LABEL_1324;
  }
  if (v7 != 2)
  {
    if (v7 != 3)
      goto LABEL_1315;
    v12 = *((_QWORD *)handle + 2);
    if (v12)
    {
      v13 = (uint64_t *)(v12 + 488);
      goto LABEL_17;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http1_get_stream_for_protocol";
    v566 = (char *)_os_log_send_and_compose_impl();
    v1075[0] = 16;
    aBlock[0] = 0;
    if (__nwlog_fault(v566, v1075, aBlock))
    {
      if (v1075[0] == 17)
      {
        v567 = __nwlog_obj();
        v568 = v1075[0];
        if (!os_log_type_enabled(v567, (os_log_type_t)v1075[0]))
          goto LABEL_1313;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http1_get_stream_for_protocol";
        v569 = "%{public}s called with null handle->http1_connection";
        goto LABEL_1312;
      }
      if (!aBlock[0])
      {
        v567 = __nwlog_obj();
        v568 = v1075[0];
        if (!os_log_type_enabled(v567, (os_log_type_t)v1075[0]))
          goto LABEL_1313;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http1_get_stream_for_protocol";
        v569 = "%{public}s called with null handle->http1_connection, backtrace limit exceeded";
        goto LABEL_1312;
      }
      v737 = (char *)__nw_create_backtrace_string();
      v567 = __nwlog_obj();
      v568 = v1075[0];
      v738 = os_log_type_enabled(v567, (os_log_type_t)v1075[0]);
      if (v737)
      {
        if (v738)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_http1_get_stream_for_protocol";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v737;
          _os_log_impl(&dword_182FBE000, v567, v568, "%{public}s called with null handle->http1_connection, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v737);
        goto LABEL_1313;
      }
      if (v738)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http1_get_stream_for_protocol";
        v569 = "%{public}s called with null handle->http1_connection, no backtrace";
LABEL_1312:
        _os_log_impl(&dword_182FBE000, v567, v568, v569, buf, 0xCu);
      }
    }
LABEL_1313:
    if (v566)
      free(v566);
    goto LABEL_1315;
  }
  v13 = (uint64_t *)(handle + 8);
LABEL_17:
  v14 = *v13;
  if (*v13)
  {
    v15 = &unk_1ECD84000;
    if ((*(_BYTE *)(v14 + 158) & 1) == 0)
    {
      if (gLogDatapath)
      {
        v532 = __nwlog_obj();
        if (os_log_type_enabled(v532, OS_LOG_TYPE_DEBUG))
        {
          v533 = *(_QWORD *)(v14 + 256);
          v534 = *(_DWORD *)(*(_QWORD *)(v14 + 248) + 372);
          if (v533)
            LODWORD(v533) = *(_DWORD *)(v533 + 860);
          v535 = *(_DWORD *)(v14 + 424);
          *(_DWORD *)buf = 136448514;
          *(_QWORD *)&buf[4] = "nw_protocol_http1_remove_input_handler";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v14 + 74;
          *(_WORD *)&buf[22] = 2080;
          v1061 = (uint64_t)" ";
          *(_WORD *)v1062 = 1024;
          *(_DWORD *)&v1062[2] = v534;
          *(_WORD *)&v1062[6] = 1024;
          *(_DWORD *)&v1062[8] = v533;
          *(_WORD *)&v1062[12] = 1024;
          *(_DWORD *)&v1062[14] = v535;
          *(_WORD *)&v1062[18] = 2048;
          *(_QWORD *)&v1062[20] = a2;
          *(_WORD *)&v1062[28] = 1024;
          *(_DWORD *)&v1062[30] = v535;
          *(_WORD *)&v1062[34] = 2048;
          *(_QWORD *)&v1062[36] = v14;
          v1063 = 1024;
          v1064 = a3;
          _os_log_impl(&dword_182FBE000, v532, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> called with input_protocol %p, stream %u (%p), destroy: %u", buf, 0x52u);
        }
      }
    }
    nw_http_transaction_metadata_mark_end(*(void **)(v14 + 352));
    if (a2->output_handler == a1)
      nw_protocol_set_output_handler((uint64_t)a2, 0);
    a2->output_handler_context = 0;
    nw_protocol_set_input_handler(v14, 0);
    v16 = *(_QWORD *)(v14 + 256);
    v1052 = v11;
    if (v16)
    {
      v17 = *(_QWORD *)(v16 + 488);
      if (!v17 || (*(_WORD *)(v17 + 428) & 0x2000) != 0)
      {
        if ((*(_WORD *)(v16 + 872) & 4) == 0)
        {
          v22 = 0;
          if ((*(_BYTE *)(v16 + 158) & 1) != 0 || !gLogDatapath)
            goto LABEL_84;
          v23 = __nwlog_obj();
          if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
          {
            v24 = *(_QWORD *)(v16 + 488);
            v25 = *(_DWORD *)(*(_QWORD *)(v16 + 480) + 372);
            v26 = *(_DWORD *)(v16 + 860);
            if (v24)
              LODWORD(v24) = *(_DWORD *)(v24 + 424);
            *(_DWORD *)buf = 136447490;
            *(_QWORD *)&buf[4] = "nw_http1_connection_can_be_reused";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v16 + 74;
            *(_WORD *)&buf[22] = 2080;
            v1061 = (uint64_t)" ";
            *(_WORD *)v1062 = 1024;
            *(_DWORD *)&v1062[2] = v25;
            *(_WORD *)&v1062[6] = 1024;
            *(_DWORD *)&v1062[8] = v26;
            *(_WORD *)&v1062[12] = 1024;
            *(_DWORD *)&v1062[14] = v24;
            v27 = "%{public}s %{public}s%s<i%u:c%u:s%u> connection cannot be reused because the message is not complete";
            goto LABEL_1290;
          }
          goto LABEL_1539;
        }
        if ((*(_WORD *)(v16 + 872) & 0x20) == 0)
        {
          v22 = 0;
          if ((*(_BYTE *)(v16 + 158) & 1) != 0 || !gLogDatapath)
            goto LABEL_84;
          v23 = __nwlog_obj();
          if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
          {
            v32 = *(_QWORD *)(v16 + 488);
            v33 = *(_DWORD *)(*(_QWORD *)(v16 + 480) + 372);
            v34 = *(_DWORD *)(v16 + 860);
            if (v32)
              LODWORD(v32) = *(_DWORD *)(v32 + 424);
            *(_DWORD *)buf = 136447490;
            *(_QWORD *)&buf[4] = "nw_http1_connection_can_be_reused";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v16 + 74;
            *(_WORD *)&buf[22] = 2080;
            v1061 = (uint64_t)" ";
            *(_WORD *)v1062 = 1024;
            *(_DWORD *)&v1062[2] = v33;
            *(_WORD *)&v1062[6] = 1024;
            *(_DWORD *)&v1062[8] = v34;
            *(_WORD *)&v1062[12] = 1024;
            *(_DWORD *)&v1062[14] = v32;
            v27 = "%{public}s %{public}s%s<i%u:c%u:s%u> connection cannot be reused because the outbound message is not complete";
            goto LABEL_1290;
          }
          goto LABEL_1539;
        }
        if ((*(_WORD *)(v16 + 872) & 8) == 0)
        {
          v22 = 0;
          if ((*(_BYTE *)(v16 + 158) & 1) != 0 || !gLogDatapath)
            goto LABEL_84;
          v23 = __nwlog_obj();
          if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
          {
            v39 = *(_QWORD *)(v16 + 488);
            v40 = *(_DWORD *)(*(_QWORD *)(v16 + 480) + 372);
            v41 = *(_DWORD *)(v16 + 860);
            if (v39)
              LODWORD(v39) = *(_DWORD *)(v39 + 424);
            *(_DWORD *)buf = 136447490;
            *(_QWORD *)&buf[4] = "nw_http1_connection_can_be_reused";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v16 + 74;
            *(_WORD *)&buf[22] = 2080;
            v1061 = (uint64_t)" ";
            *(_WORD *)v1062 = 1024;
            *(_DWORD *)&v1062[2] = v40;
            *(_WORD *)&v1062[6] = 1024;
            *(_DWORD *)&v1062[8] = v41;
            *(_WORD *)&v1062[12] = 1024;
            *(_DWORD *)&v1062[14] = v39;
            v27 = "%{public}s %{public}s%s<i%u:c%u:s%u> connection cannot be reused because keep alive is false";
            goto LABEL_1290;
          }
          goto LABEL_1539;
        }
      }
      else if ((*(_BYTE *)(v16 + 158) & 1) == 0)
      {
        if (gLogDatapath)
        {
          v18 = __nwlog_obj();
          if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
          {
            v19 = *(_QWORD *)(v16 + 488);
            v20 = *(_DWORD *)(*(_QWORD *)(v16 + 480) + 372);
            v21 = *(_DWORD *)(v16 + 860);
            if (v19)
              LODWORD(v19) = *(_DWORD *)(v19 + 424);
            *(_DWORD *)buf = 136447490;
            *(_QWORD *)&buf[4] = "nw_http1_connection_can_be_reused";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v16 + 74;
            *(_WORD *)&buf[22] = 2080;
            v1061 = (uint64_t)" ";
            *(_WORD *)v1062 = 1024;
            *(_DWORD *)&v1062[2] = v20;
            *(_WORD *)&v1062[6] = 1024;
            *(_DWORD *)&v1062[8] = v21;
            *(_WORD *)&v1062[12] = 1024;
            *(_DWORD *)&v1062[14] = v19;
            _os_log_impl(&dword_182FBE000, v18, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> connection may be reusable because the current stream didn't use it", buf, 0x32u);
          }
        }
      }
      if ((*(_BYTE *)(*(_QWORD *)(v16 + 480) + 376) & 8) != 0)
      {
        v22 = 0;
        if ((*(_BYTE *)(v16 + 158) & 1) != 0 || !gLogDatapath)
          goto LABEL_84;
        v23 = __nwlog_obj();
        if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
        {
          v46 = *(_QWORD *)(v16 + 488);
          v47 = *(_DWORD *)(*(_QWORD *)(v16 + 480) + 372);
          v48 = *(_DWORD *)(v16 + 860);
          if (v46)
            LODWORD(v46) = *(_DWORD *)(v46 + 424);
          *(_DWORD *)buf = 136447490;
          *(_QWORD *)&buf[4] = "nw_http1_connection_can_be_reused";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v16 + 74;
          *(_WORD *)&buf[22] = 2080;
          v1061 = (uint64_t)" ";
          *(_WORD *)v1062 = 1024;
          *(_DWORD *)&v1062[2] = v47;
          *(_WORD *)&v1062[6] = 1024;
          *(_DWORD *)&v1062[8] = v48;
          *(_WORD *)&v1062[12] = 1024;
          *(_DWORD *)&v1062[14] = v46;
          v27 = "%{public}s %{public}s%s<i%u:c%u:s%u> connection cannot be reused because pool is closed for new connections";
          goto LABEL_1290;
        }
      }
      else
      {
        v42 = *(_WORD *)(v16 + 872);
        if ((v42 & 0x200) != 0)
        {
          v22 = 0;
          if ((*(_BYTE *)(v16 + 158) & 1) != 0 || !gLogDatapath)
            goto LABEL_84;
          v23 = __nwlog_obj();
          if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
          {
            v805 = *(_QWORD *)(v16 + 488);
            v806 = *(_DWORD *)(*(_QWORD *)(v16 + 480) + 372);
            v807 = *(_DWORD *)(v16 + 860);
            if (v805)
              LODWORD(v805) = *(_DWORD *)(v805 + 424);
            *(_DWORD *)buf = 136447490;
            *(_QWORD *)&buf[4] = "nw_http1_connection_can_be_reused";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v16 + 74;
            *(_WORD *)&buf[22] = 2080;
            v1061 = (uint64_t)" ";
            *(_WORD *)v1062 = 1024;
            *(_DWORD *)&v1062[2] = v806;
            *(_WORD *)&v1062[6] = 1024;
            *(_DWORD *)&v1062[8] = v807;
            *(_WORD *)&v1062[12] = 1024;
            *(_DWORD *)&v1062[14] = v805;
            v27 = "%{public}s %{public}s%s<i%u:c%u:s%u> connection cannot be reused because it was upgraded";
            goto LABEL_1290;
          }
        }
        else
        {
          if ((v42 & 0x40) == 0)
          {
            v22 = 0;
            if ((*(_BYTE *)(v16 + 158) & 1) == 0 && gLogDatapath)
            {
              v23 = __nwlog_obj();
              if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
              {
                v43 = *(_QWORD *)(v16 + 488);
                v44 = *(_DWORD *)(*(_QWORD *)(v16 + 480) + 372);
                v45 = *(_DWORD *)(v16 + 860);
                if (v43)
                  LODWORD(v43) = *(_DWORD *)(v43 + 424);
                *(_DWORD *)buf = 136447490;
                *(_QWORD *)&buf[4] = "nw_http1_connection_can_be_reused";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = v16 + 74;
                *(_WORD *)&buf[22] = 2080;
                v1061 = (uint64_t)" ";
                *(_WORD *)v1062 = 1024;
                *(_DWORD *)&v1062[2] = v44;
                *(_WORD *)&v1062[6] = 1024;
                *(_DWORD *)&v1062[8] = v45;
                *(_WORD *)&v1062[12] = 1024;
                *(_DWORD *)&v1062[14] = v43;
                v27 = "%{public}s %{public}s%s<i%u:c%u:s%u> connection cannot be reused because it was never connected";
LABEL_1290:
                _os_log_impl(&dword_182FBE000, v23, OS_LOG_TYPE_DEBUG, v27, buf, 0x32u);
                v22 = 0;
                goto LABEL_84;
              }
              goto LABEL_1539;
            }
LABEL_84:
            if (*(_QWORD *)(v14 + 248))
            {
              v49 = *(_QWORD *)(v14 + 256);
              if (v49)
              {
                if (*(_QWORD *)(v49 + 488) != v14)
                {
                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                  networkd_settings_init();
                  v50 = *(_QWORD *)(v49 + 488);
                  *(_DWORD *)buf = 136446978;
                  *(_QWORD *)&buf[4] = "nw_http1_stream_disassociate_from_connection";
                  *(_WORD *)&buf[12] = 2048;
                  *(_QWORD *)&buf[14] = v49;
                  *(_WORD *)&buf[22] = 2048;
                  v1061 = v14;
                  *(_WORD *)v1062 = 2048;
                  *(_QWORD *)&v1062[2] = v50;
                  v51 = (char *)_os_log_send_and_compose_impl();
                  v1075[0] = 16;
                  aBlock[0] = 0;
                  if (__nwlog_fault(v51, v1075, aBlock))
                  {
                    if (v1075[0] == 17)
                    {
                      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                      networkd_settings_init();
                      v53 = gLogObj;
                      v54 = v1075[0];
                      if (os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v1075[0]))
                      {
                        v55 = *(_QWORD *)(v49 + 488);
                        *(_DWORD *)buf = 136446978;
                        *(_QWORD *)&buf[4] = "nw_http1_stream_disassociate_from_connection";
                        *(_WORD *)&buf[12] = 2048;
                        *(_QWORD *)&buf[14] = v49;
                        *(_WORD *)&buf[22] = 2048;
                        v1061 = v14;
                        *(_WORD *)v1062 = 2048;
                        *(_QWORD *)&v1062[2] = v55;
                        v56 = "%{public}s Connection %p does not already have stream %p, has %p";
LABEL_110:
                        _os_log_impl(&dword_182FBE000, v53, v54, v56, buf, 0x2Au);
                      }
                    }
                    else if (aBlock[0])
                    {
                      v64 = (char *)__nw_create_backtrace_string();
                      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                      networkd_settings_init();
                      v53 = gLogObj;
                      v54 = v1075[0];
                      v65 = os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v1075[0]);
                      if (v64)
                      {
                        if (v65)
                        {
                          v66 = *(_QWORD *)(v49 + 488);
                          *(_DWORD *)buf = 136447234;
                          *(_QWORD *)&buf[4] = "nw_http1_stream_disassociate_from_connection";
                          *(_WORD *)&buf[12] = 2048;
                          *(_QWORD *)&buf[14] = v49;
                          *(_WORD *)&buf[22] = 2048;
                          v1061 = v14;
                          *(_WORD *)v1062 = 2048;
                          *(_QWORD *)&v1062[2] = v66;
                          *(_WORD *)&v1062[10] = 2082;
                          *(_QWORD *)&v1062[12] = v64;
                          _os_log_impl(&dword_182FBE000, v53, v54, "%{public}s Connection %p does not already have stream %p, has %p, dumping backtrace:%{public}s", buf, 0x34u);
                        }
                        free(v64);
                        goto LABEL_111;
                      }
                      if (v65)
                      {
                        v68 = *(_QWORD *)(v49 + 488);
                        *(_DWORD *)buf = 136446978;
                        *(_QWORD *)&buf[4] = "nw_http1_stream_disassociate_from_connection";
                        *(_WORD *)&buf[12] = 2048;
                        *(_QWORD *)&buf[14] = v49;
                        *(_WORD *)&buf[22] = 2048;
                        v1061 = v14;
                        *(_WORD *)v1062 = 2048;
                        *(_QWORD *)&v1062[2] = v68;
                        v56 = "%{public}s Connection %p does not already have stream %p, has %p, no backtrace";
                        goto LABEL_110;
                      }
                    }
                    else
                    {
                      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                      networkd_settings_init();
                      v53 = gLogObj;
                      v54 = v1075[0];
                      if (os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v1075[0]))
                      {
                        v67 = *(_QWORD *)(v49 + 488);
                        *(_DWORD *)buf = 136446978;
                        *(_QWORD *)&buf[4] = "nw_http1_stream_disassociate_from_connection";
                        *(_WORD *)&buf[12] = 2048;
                        *(_QWORD *)&buf[14] = v49;
                        *(_WORD *)&buf[22] = 2048;
                        v1061 = v14;
                        *(_WORD *)v1062 = 2048;
                        *(_QWORD *)&v1062[2] = v67;
                        v56 = "%{public}s Connection %p does not already have stream %p, has %p, backtrace limit exceeded";
                        goto LABEL_110;
                      }
                    }
                  }
LABEL_111:
                  if (v51)
                    free(v51);
                  v11 = v1052;
                  goto LABEL_114;
                }
                if ((*(_BYTE *)(v14 + 158) & 1) == 0)
                {
                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                  networkd_settings_init();
                  v57 = gLogObj;
                  if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
                  {
                    v58 = *(_QWORD *)(v14 + 256);
                    v59 = *(_DWORD *)(*(_QWORD *)(v14 + 248) + 372);
                    if (v58)
                      LODWORD(v58) = *(_DWORD *)(v58 + 860);
                    v60 = *(_DWORD *)(v14 + 424);
                    *(_DWORD *)buf = 136448002;
                    *(_QWORD *)&buf[4] = "nw_http1_stream_disassociate_from_connection";
                    *(_WORD *)&buf[12] = 2082;
                    *(_QWORD *)&buf[14] = v14 + 74;
                    *(_WORD *)&buf[22] = 2080;
                    v1061 = (uint64_t)" ";
                    *(_WORD *)v1062 = 1024;
                    *(_DWORD *)&v1062[2] = v59;
                    *(_WORD *)&v1062[6] = 1024;
                    *(_DWORD *)&v1062[8] = v58;
                    *(_WORD *)&v1062[12] = 1024;
                    *(_DWORD *)&v1062[14] = v60;
                    *(_WORD *)&v1062[18] = 2048;
                    *(_QWORD *)&v1062[20] = v14;
                    *(_WORD *)&v1062[28] = 2048;
                    *(_QWORD *)&v1062[30] = v49;
                    _os_log_impl(&dword_182FBE000, v57, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s<i%u:c%u:s%u> stream (%p) finished with connection %p", buf, 0x46u);
                  }
                }
                if (gLogDatapath)
                {
                  v744 = __nwlog_obj();
                  if (os_log_type_enabled(v744, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)buf = 136446210;
                    *(_QWORD *)&buf[4] = "nw_protocol_finalize_temp_frame_array";
                    _os_log_impl(&dword_182FBE000, v744, OS_LOG_TYPE_DEBUG, "%{public}s called", buf, 0xCu);
                  }
                }
                *(_QWORD *)buf = MEMORY[0x1E0C809B0];
                *(_QWORD *)&buf[8] = 0x40000000;
                *(_QWORD *)&buf[16] = ___ZL37nw_protocol_finalize_temp_frame_arrayP16nw_frame_array_sb_block_invoke_39647;
                v1061 = (uint64_t)&__block_descriptor_tmp_55_39648;
                *(_QWORD *)v1062 = v49 + 632;
                v1062[8] = 0;
                v61 = *(_QWORD *)(v49 + 632);
                do
                {
                  if (!v61)
                    break;
                  v62 = *(_QWORD *)(v61 + 32);
                  v63 = (*(uint64_t (**)(_BYTE *))&buf[16])(buf);
                  v61 = v62;
                }
                while ((v63 & 1) != 0);
                *(_QWORD *)(v14 + 256) = 0;
                *(_QWORD *)(v49 + 488) = 0;
                nw_protocol_set_output_handler(v14, 0);
                nw_protocol_set_input_handler(v49, 0);
LABEL_114:
                if (v22)
                {
                  v15 = &unk_1ECD84000;
                  if ((*(_BYTE *)(v16 + 158) & 1) == 0)
                  {
                    if (gLogDatapath)
                    {
                      v580 = __nwlog_obj();
                      if (os_log_type_enabled(v580, OS_LOG_TYPE_DEBUG))
                      {
                        v581 = *(_QWORD *)(v16 + 488);
                        v582 = *(_DWORD *)(*(_QWORD *)(v16 + 480) + 372);
                        v583 = *(_DWORD *)(v16 + 860);
                        if (v581)
                          LODWORD(v581) = *(_DWORD *)(v581 + 424);
                        *(_DWORD *)buf = 136447746;
                        *(_QWORD *)&buf[4] = "nw_http1_add_idle_connection";
                        *(_WORD *)&buf[12] = 2082;
                        *(_QWORD *)&buf[14] = v16 + 74;
                        *(_WORD *)&buf[22] = 2080;
                        v1061 = (uint64_t)" ";
                        *(_WORD *)v1062 = 1024;
                        *(_DWORD *)&v1062[2] = v582;
                        *(_WORD *)&v1062[6] = 1024;
                        *(_DWORD *)&v1062[8] = v583;
                        *(_WORD *)&v1062[12] = 1024;
                        *(_DWORD *)&v1062[14] = v581;
                        *(_WORD *)&v1062[18] = 2048;
                        *(_QWORD *)&v1062[20] = v16;
                        _os_log_impl(&dword_182FBE000, v580, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> called for connection (%p)", buf, 0x3Cu);
                        v11 = v1052;
                      }
                    }
                  }
                  if (((*(unsigned __int16 *)(v16 + 872) | (*(unsigned __int8 *)(v16 + 874) << 16)) & 0x80000) == 0)
                  {
                    v69 = (_WORD *)(v16 + 872);
                    v71 = (uint64_t *)(v11 + 208);
                    v70 = *(_QWORD *)(v11 + 208);
                    *(_QWORD *)(v16 + 592) = v70;
                    if (v70)
                      v72 = (_QWORD *)(v70 + 600);
                    else
                      v72 = (_QWORD *)(v11 + 216);
                    *v72 = v16 + 592;
                    *v71 = v16;
                    *(_QWORD *)(v16 + 600) = v71;
                    v73 = *(unsigned int *)(v11 + 340) + 1;
                    v74 = v73 << 31 >> 31;
                    *(_DWORD *)(v11 + 340) = v73;
                    if (v74 == v73 && (v74 & 0x8000000000000000) == 0)
                      goto LABEL_229;
                    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                    networkd_settings_init();
                    v75 = *(unsigned int *)(v11 + 340);
                    *(_DWORD *)buf = 136446978;
                    *(_QWORD *)&buf[4] = "nw_http1_add_idle_connection";
                    *(_WORD *)&buf[12] = 2082;
                    *(_QWORD *)&buf[14] = "http1->idle_connections_count";
                    *(_WORD *)&buf[22] = 2048;
                    v1061 = 1;
                    *(_WORD *)v1062 = 2048;
                    *(_QWORD *)&v1062[2] = v75;
                    v76 = (char *)_os_log_send_and_compose_impl();
                    v1075[0] = 16;
                    aBlock[0] = 0;
                    if (__nwlog_fault(v76, v1075, aBlock))
                    {
                      if (v1075[0] == 17)
                      {
                        v77 = __nwlog_obj();
                        v78 = v1075[0];
                        if (os_log_type_enabled(v77, (os_log_type_t)v1075[0]))
                        {
                          v79 = *(unsigned int *)(v11 + 340);
                          *(_DWORD *)buf = 136446978;
                          *(_QWORD *)&buf[4] = "nw_http1_add_idle_connection";
                          *(_WORD *)&buf[12] = 2082;
                          *(_QWORD *)&buf[14] = "http1->idle_connections_count";
                          *(_WORD *)&buf[22] = 2048;
                          v1061 = 1;
                          *(_WORD *)v1062 = 2048;
                          *(_QWORD *)&v1062[2] = v79;
                          v80 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_225:
                          _os_log_impl(&dword_182FBE000, v77, v78, v80, buf, 0x2Au);
                        }
                      }
                      else if (aBlock[0])
                      {
                        v109 = (char *)__nw_create_backtrace_string();
                        v77 = __nwlog_obj();
                        v78 = v1075[0];
                        v110 = os_log_type_enabled(v77, (os_log_type_t)v1075[0]);
                        if (v109)
                        {
                          if (v110)
                          {
                            v111 = *(unsigned int *)(v1052 + 340);
                            *(_DWORD *)buf = 136447234;
                            *(_QWORD *)&buf[4] = "nw_http1_add_idle_connection";
                            *(_WORD *)&buf[12] = 2082;
                            *(_QWORD *)&buf[14] = "http1->idle_connections_count";
                            *(_WORD *)&buf[22] = 2048;
                            v1061 = 1;
                            *(_WORD *)v1062 = 2048;
                            *(_QWORD *)&v1062[2] = v111;
                            *(_WORD *)&v1062[10] = 2082;
                            *(_QWORD *)&v1062[12] = v109;
                            _os_log_impl(&dword_182FBE000, v77, v78, "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
                          }
                          free(v109);
                          v11 = v1052;
                          goto LABEL_226;
                        }
                        v11 = v1052;
                        if (v110)
                        {
                          v142 = *(unsigned int *)(v1052 + 340);
                          *(_DWORD *)buf = 136446978;
                          *(_QWORD *)&buf[4] = "nw_http1_add_idle_connection";
                          *(_WORD *)&buf[12] = 2082;
                          *(_QWORD *)&buf[14] = "http1->idle_connections_count";
                          *(_WORD *)&buf[22] = 2048;
                          v1061 = 1;
                          *(_WORD *)v1062 = 2048;
                          *(_QWORD *)&v1062[2] = v142;
                          v80 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
                          goto LABEL_225;
                        }
                      }
                      else
                      {
                        v77 = __nwlog_obj();
                        v78 = v1075[0];
                        if (os_log_type_enabled(v77, (os_log_type_t)v1075[0]))
                        {
                          v121 = *(unsigned int *)(v11 + 340);
                          *(_DWORD *)buf = 136446978;
                          *(_QWORD *)&buf[4] = "nw_http1_add_idle_connection";
                          *(_WORD *)&buf[12] = 2082;
                          *(_QWORD *)&buf[14] = "http1->idle_connections_count";
                          *(_WORD *)&buf[22] = 2048;
                          v1061 = 1;
                          *(_WORD *)v1062 = 2048;
                          *(_QWORD *)&v1062[2] = v121;
                          v80 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
                          goto LABEL_225;
                        }
                      }
                    }
LABEL_226:
                    if (v76)
                      free(v76);
                    *(_DWORD *)(v11 + 340) = -1;
                    v15 = &unk_1ECD84000;
LABEL_229:
                    v143 = (*(unsigned __int16 *)(v16 + 872) | (*(unsigned __int8 *)(v16 + 874) << 16)) & 0xF7FFFA | 0x80000;
                    *v69 &= 0xFFFAu;
                    *(_BYTE *)(v16 + 874) = BYTE2(v143);
                    v144 = *(void **)(v16 + 800);
                    if (v144)
                    {
                      free(v144);
                      *(_QWORD *)(v16 + 800) = 0;
                    }
                    *(_DWORD *)(v16 + 840) = 0;
                    v145 = *(void **)(v16 + 808);
                    if (v145)
                    {
                      free(v145);
                      *(_QWORD *)(v16 + 808) = 0;
                    }
                    *(_DWORD *)(v16 + 844) = 0;
                    v146 = *(void **)(v16 + 816);
                    if (v146)
                    {
                      free(v146);
                      *(_QWORD *)(v16 + 816) = 0;
                    }
                    *(_DWORD *)(v16 + 848) = 0;
                    v147 = *(void **)(v16 + 824);
                    if (v147)
                    {
                      free(v147);
                      *(_QWORD *)(v16 + 824) = 0;
                    }
                    *(_DWORD *)(v16 + 852) = 0;
                    v148 = *(void **)(v16 + 832);
                    if (v148)
                    {
                      free(v148);
                      *(_QWORD *)(v16 + 832) = 0;
                    }
                    *(_DWORD *)(v16 + 856) = 0;
                    v149 = (unsigned __int16)*v69;
                    v150 = v149 | (*(unsigned __int8 *)(v16 + 874) << 16);
                    if ((v149 & 0x10) != 0)
                    {
                      if (*(_DWORD *)(v16 + 224) == 21)
                        *(_DWORD *)(v16 + 224) = 0;
                      v159 = v150 & 0xFFFFFFEF;
                      *v69 = v159;
                      *(_BYTE *)(v16 + 874) = BYTE2(v159);
                      if ((*(_BYTE *)(v16 + 158) & 1) != 0)
                        goto LABEL_250;
                      if (!gLogDatapath)
                        goto LABEL_250;
                      v154 = __nwlog_obj();
                      if (!os_log_type_enabled(v154, OS_LOG_TYPE_DEBUG))
                        goto LABEL_250;
                      v794 = *(_QWORD *)(v16 + 488);
                      v795 = *(_DWORD *)(*(_QWORD *)(v16 + 480) + 372);
                      v796 = *(_DWORD *)(v16 + 860);
                      if (v794)
                        LODWORD(v794) = *(_DWORD *)(v794 + 424);
                      *(_DWORD *)buf = 136447490;
                      *(_QWORD *)&buf[4] = "nw_http1_connection_reset_for_new_message";
                      *(_WORD *)&buf[12] = 2082;
                      *(_QWORD *)&buf[14] = v16 + 74;
                      *(_WORD *)&buf[22] = 2080;
                      v1061 = (uint64_t)" ";
                      *(_WORD *)v1062 = 1024;
                      *(_DWORD *)&v1062[2] = v795;
                      *(_WORD *)&v1062[6] = 1024;
                      *(_DWORD *)&v1062[8] = v796;
                      *(_WORD *)&v1062[12] = 1024;
                      *(_DWORD *)&v1062[14] = v794;
                      v158 = "%{public}s %{public}s%s<i%u:c%u:s%u> Unpausing parser, input for next stream available";
                    }
                    else
                    {
                      *(_OWORD *)(v16 + 200) = 0u;
                      v151 = *(_BYTE *)(v16 + 272);
                      v152 = *(_QWORD *)(v16 + 248);
                      v153 = *(_WORD *)(v16 + 278);
                      *(_OWORD *)(v16 + 248) = 0u;
                      *(_OWORD *)(v16 + 264) = 0u;
                      *(_OWORD *)(v16 + 216) = 0u;
                      *(_OWORD *)(v16 + 232) = 0u;
                      *(_QWORD *)(v16 + 280) = 0;
                      *(_BYTE *)(v16 + 272) = v151;
                      *(_QWORD *)(v16 + 248) = v152;
                      *(_QWORD *)(v16 + 256) = 238;
                      *(_WORD *)(v16 + 278) = v153;
                      if ((*(_BYTE *)(v16 + 158) & 1) != 0)
                        goto LABEL_250;
                      if (!gLogDatapath)
                        goto LABEL_250;
                      v154 = __nwlog_obj();
                      if (!os_log_type_enabled(v154, OS_LOG_TYPE_DEBUG))
                        goto LABEL_250;
                      v155 = *(_QWORD *)(v16 + 488);
                      v156 = *(_DWORD *)(*(_QWORD *)(v16 + 480) + 372);
                      v157 = *(_DWORD *)(v16 + 860);
                      if (v155)
                        LODWORD(v155) = *(_DWORD *)(v155 + 424);
                      *(_DWORD *)buf = 136447490;
                      *(_QWORD *)&buf[4] = "nw_http1_connection_reset_for_new_message";
                      *(_WORD *)&buf[12] = 2082;
                      *(_QWORD *)&buf[14] = v16 + 74;
                      *(_WORD *)&buf[22] = 2080;
                      v1061 = (uint64_t)" ";
                      *(_WORD *)v1062 = 1024;
                      *(_DWORD *)&v1062[2] = v156;
                      *(_WORD *)&v1062[6] = 1024;
                      *(_DWORD *)&v1062[8] = v157;
                      *(_WORD *)&v1062[12] = 1024;
                      *(_DWORD *)&v1062[14] = v155;
                      v158 = "%{public}s %{public}s%s<i%u:c%u:s%u> Resetting parser, no current available input for next stream";
                    }
                    _os_log_impl(&dword_182FBE000, v154, OS_LOG_TYPE_DEBUG, v158, buf, 0x32u);
                    v11 = v1052;
LABEL_250:
                    v160 = *(_QWORD *)(v16 + 784);
                    if (v160)
                      nw_queue_cancel_source(v160, v52);
                    v161 = *(void **)(v16 + 192);
                    *(_QWORD *)v1075 = MEMORY[0x1E0C809B0];
                    *(_QWORD *)&v1075[8] = 0x40000000;
                    *(_QWORD *)&v1075[16] = ___ZL28nw_http1_add_idle_connectionP17nw_protocol_http1P19nw_http1_connection_block_invoke;
                    v1076 = (uint64_t (*)(uint64_t, uint64_t))&__block_descriptor_tmp_92;
                    v1077 = (void (*)(uint64_t))v16;
                    v1078 = v161;
                    v1079 = v11;
                    source = nw_queue_context_create_source(0, 2, 3, 0, v1075, 0);
                    *(_QWORD *)(v16 + 784) = source;
                    v163 = dispatch_time(0x8000000000000000, 1000000 * (_QWORD)v161);
                    nw_queue_set_timer_values(source, v163, 0xFFFFFFFFFFFFFFFFLL, 1000 * (_QWORD)v161);
                    nw_queue_activate_source(*(_QWORD *)(v16 + 784), v164);
                    if ((*(_BYTE *)(v16 + 158) & 1) == 0)
                    {
                      if (gLogDatapath)
                      {
                        v745 = __nwlog_obj();
                        if (os_log_type_enabled(v745, OS_LOG_TYPE_DEBUG))
                        {
                          v746 = *(_QWORD *)(v16 + 488);
                          v747 = *(_DWORD *)(*(_QWORD *)(v16 + 480) + 372);
                          v748 = *(_DWORD *)(v16 + 860);
                          if (v746)
                            LODWORD(v746) = *(_DWORD *)(v746 + 424);
                          v11 = v1052;
                          v749 = *(_DWORD *)(v1052 + 340);
                          *(_DWORD *)buf = 136448258;
                          *(_QWORD *)&buf[4] = "nw_http1_add_idle_connection";
                          *(_WORD *)&buf[12] = 2082;
                          *(_QWORD *)&buf[14] = v16 + 74;
                          *(_WORD *)&buf[22] = 2080;
                          v1061 = (uint64_t)" ";
                          *(_WORD *)v1062 = 1024;
                          *(_DWORD *)&v1062[2] = v747;
                          *(_WORD *)&v1062[6] = 1024;
                          *(_DWORD *)&v1062[8] = v748;
                          *(_WORD *)&v1062[12] = 1024;
                          *(_DWORD *)&v1062[14] = v746;
                          *(_WORD *)&v1062[18] = 2048;
                          *(_QWORD *)&v1062[20] = v16;
                          *(_WORD *)&v1062[28] = 2048;
                          *(_QWORD *)&v1062[30] = v161;
                          *(_WORD *)&v1062[38] = 1024;
                          *(_DWORD *)&v1062[40] = v749;
                          _os_log_impl(&dword_182FBE000, v745, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> added idle connection %p and started destroy timer for %lldms, now have %u idle connections", buf, 0x4Cu);
                        }
                      }
                    }
LABEL_254:
                    v115 = 1;
                    goto LABEL_328;
                  }
                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                  networkd_settings_init();
                  *(_DWORD *)buf = 136446466;
                  *(_QWORD *)&buf[4] = "nw_http1_add_idle_connection";
                  *(_WORD *)&buf[12] = 2048;
                  *(_QWORD *)&buf[14] = v16;
                  v100 = (char *)_os_log_send_and_compose_impl();
                  v1075[0] = 16;
                  aBlock[0] = 0;
                  if (__nwlog_fault(v100, v1075, aBlock))
                  {
                    if (v1075[0] == 17)
                    {
                      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                      networkd_settings_init();
                      v101 = gLogObj;
                      v102 = v1075[0];
                      if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v1075[0]))
                        goto LABEL_181;
                      *(_DWORD *)buf = 136446466;
                      *(_QWORD *)&buf[4] = "nw_http1_add_idle_connection";
                      *(_WORD *)&buf[12] = 2048;
                      *(_QWORD *)&buf[14] = v16;
                      v103 = "%{public}s connection %p already in idle list, cannot add twice";
LABEL_180:
                      _os_log_impl(&dword_182FBE000, v101, v102, v103, buf, 0x16u);
                      goto LABEL_181;
                    }
                    if (!aBlock[0])
                    {
                      v101 = __nwlog_obj();
                      v102 = v1075[0];
                      if (!os_log_type_enabled(v101, (os_log_type_t)v1075[0]))
                        goto LABEL_181;
                      *(_DWORD *)buf = 136446466;
                      *(_QWORD *)&buf[4] = "nw_http1_add_idle_connection";
                      *(_WORD *)&buf[12] = 2048;
                      *(_QWORD *)&buf[14] = v16;
                      v103 = "%{public}s connection %p already in idle list, cannot add twice, backtrace limit exceeded";
                      goto LABEL_180;
                    }
                    v104 = (char *)__nw_create_backtrace_string();
                    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                    networkd_settings_init();
                    v101 = gLogObj;
                    v102 = v1075[0];
                    v105 = os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v1075[0]);
                    if (!v104)
                    {
                      v11 = v1052;
                      if (!v105)
                        goto LABEL_181;
                      *(_DWORD *)buf = 136446466;
                      *(_QWORD *)&buf[4] = "nw_http1_add_idle_connection";
                      *(_WORD *)&buf[12] = 2048;
                      *(_QWORD *)&buf[14] = v16;
                      v103 = "%{public}s connection %p already in idle list, cannot add twice, no backtrace";
                      goto LABEL_180;
                    }
                    if (v105)
                    {
                      *(_DWORD *)buf = 136446722;
                      *(_QWORD *)&buf[4] = "nw_http1_add_idle_connection";
                      *(_WORD *)&buf[12] = 2048;
                      *(_QWORD *)&buf[14] = v16;
                      *(_WORD *)&buf[22] = 2082;
                      v1061 = (uint64_t)v104;
                      _os_log_impl(&dword_182FBE000, v101, v102, "%{public}s connection %p already in idle list, cannot add twice, dumping backtrace:%{public}s", buf, 0x20u);
                    }
                    free(v104);
                    v11 = v1052;
                  }
LABEL_181:
                  if (v100)
                  {
                    free(v100);
                    v115 = 1;
                    goto LABEL_328;
                  }
                  goto LABEL_254;
                }
                nw_http_connection_metadata_closed(*(void **)(v16 + 768));
                v15 = &unk_1ECD84000;
                if ((*(_BYTE *)(v16 + 158) & 1) == 0)
                {
                  if (!gLogDatapath)
                    goto LABEL_129;
                  v600 = __nwlog_obj();
                  if (os_log_type_enabled(v600, OS_LOG_TYPE_DEBUG))
                  {
                    v601 = *(_QWORD *)(v16 + 488);
                    v602 = *(_DWORD *)(*(_QWORD *)(v16 + 480) + 372);
                    v603 = *(_DWORD *)(v16 + 860);
                    if (v601)
                      LODWORD(v601) = *(_DWORD *)(v601 + 424);
                    *(_DWORD *)buf = 136447490;
                    *(_QWORD *)&buf[4] = "nw_http1_tear_down_connection";
                    *(_WORD *)&buf[12] = 2082;
                    *(_QWORD *)&buf[14] = v16 + 74;
                    *(_WORD *)&buf[22] = 2080;
                    v1061 = (uint64_t)" ";
                    *(_WORD *)v1062 = 1024;
                    *(_DWORD *)&v1062[2] = v602;
                    *(_WORD *)&v1062[6] = 1024;
                    *(_DWORD *)&v1062[8] = v603;
                    *(_WORD *)&v1062[12] = 1024;
                    *(_DWORD *)&v1062[14] = v601;
                    _os_log_impl(&dword_182FBE000, v600, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> finalizing unprocessed_input_frames", buf, 0x32u);
                    v11 = v1052;
                  }
                }
                if (gLogDatapath)
                {
                  v604 = __nwlog_obj();
                  if (os_log_type_enabled(v604, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)v1075 = 136446210;
                    *(_QWORD *)&v1075[4] = "nw_protocol_finalize_temp_frame_array";
                    _os_log_impl(&dword_182FBE000, v604, OS_LOG_TYPE_DEBUG, "%{public}s called", v1075, 0xCu);
                  }
                }
LABEL_129:
                v81 = MEMORY[0x1E0C809B0];
                *(_QWORD *)buf = MEMORY[0x1E0C809B0];
                *(_QWORD *)&buf[8] = 0x40000000;
                *(_QWORD *)&buf[16] = ___ZL37nw_protocol_finalize_temp_frame_arrayP16nw_frame_array_sb_block_invoke_39647;
                v1061 = (uint64_t)&__block_descriptor_tmp_55_39648;
                *(_QWORD *)v1062 = v16 + 616;
                v1062[8] = 0;
                v82 = *(_QWORD *)(v16 + 616);
                do
                {
                  if (!v82)
                    break;
                  v83 = *(_QWORD *)(v82 + 32);
                  v84 = (*(uint64_t (**)(_BYTE *))&buf[16])(buf);
                  v82 = v83;
                }
                while ((v84 & 1) != 0);
                if ((*(_BYTE *)(v16 + 158) & 1) == 0)
                {
                  if (!gLogDatapath)
                    goto LABEL_134;
                  v605 = __nwlog_obj();
                  if (os_log_type_enabled(v605, OS_LOG_TYPE_DEBUG))
                  {
                    v606 = *(_QWORD *)(v16 + 488);
                    v607 = *(_DWORD *)(*(_QWORD *)(v16 + 480) + 372);
                    v608 = *(_DWORD *)(v16 + 860);
                    if (v606)
                      LODWORD(v606) = *(_DWORD *)(v606 + 424);
                    *(_DWORD *)buf = 136447490;
                    *(_QWORD *)&buf[4] = "nw_http1_tear_down_connection";
                    *(_WORD *)&buf[12] = 2082;
                    *(_QWORD *)&buf[14] = v16 + 74;
                    *(_WORD *)&buf[22] = 2080;
                    v1061 = (uint64_t)" ";
                    *(_WORD *)v1062 = 1024;
                    *(_DWORD *)&v1062[2] = v607;
                    *(_WORD *)&v1062[6] = 1024;
                    *(_DWORD *)&v1062[8] = v608;
                    *(_WORD *)&v1062[12] = 1024;
                    *(_DWORD *)&v1062[14] = v606;
                    _os_log_impl(&dword_182FBE000, v605, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> finalizing processed_input_frames", buf, 0x32u);
                    v11 = v1052;
                    v15 = &unk_1ECD84000;
                  }
                }
                if (gLogDatapath)
                {
                  v609 = __nwlog_obj();
                  if (os_log_type_enabled(v609, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)v1075 = 136446210;
                    *(_QWORD *)&v1075[4] = "nw_protocol_finalize_temp_frame_array";
                    _os_log_impl(&dword_182FBE000, v609, OS_LOG_TYPE_DEBUG, "%{public}s called", v1075, 0xCu);
                  }
                }
LABEL_134:
                v85 = (_QWORD *)(v16 + 632);
                *(_QWORD *)buf = v81;
                *(_QWORD *)&buf[8] = 0x40000000;
                *(_QWORD *)&buf[16] = ___ZL37nw_protocol_finalize_temp_frame_arrayP16nw_frame_array_sb_block_invoke_39647;
                v1061 = (uint64_t)&__block_descriptor_tmp_55_39648;
                *(_QWORD *)v1062 = v16 + 632;
                v1062[8] = 0;
                v86 = *(_QWORD *)(v16 + 632);
                do
                {
                  if (!v86)
                    break;
                  v87 = *(_QWORD *)(v86 + 32);
                  v88 = (*(uint64_t (**)(_BYTE *))&buf[16])(buf);
                  v86 = v87;
                }
                while ((v88 & 1) != 0);
                if ((*(_BYTE *)(v16 + 158) & 1) == 0)
                {
                  if (gLogDatapath)
                  {
                    v584 = __nwlog_obj();
                    if (os_log_type_enabled(v584, OS_LOG_TYPE_DEBUG))
                    {
                      v585 = *(_QWORD *)(v16 + 488);
                      v586 = *(_DWORD *)(*(_QWORD *)(v16 + 480) + 372);
                      v587 = *(_DWORD *)(v16 + 860);
                      if (v585)
                        LODWORD(v585) = *(_DWORD *)(v585 + 424);
                      *(_DWORD *)buf = 136447490;
                      *(_QWORD *)&buf[4] = "nw_http1_tear_down_connection";
                      *(_WORD *)&buf[12] = 2082;
                      *(_QWORD *)&buf[14] = v16 + 74;
                      *(_WORD *)&buf[22] = 2080;
                      v1061 = (uint64_t)" ";
                      *(_WORD *)v1062 = 1024;
                      *(_DWORD *)&v1062[2] = v586;
                      *(_WORD *)&v1062[6] = 1024;
                      *(_DWORD *)&v1062[8] = v587;
                      *(_WORD *)&v1062[12] = 1024;
                      *(_DWORD *)&v1062[14] = v585;
                      _os_log_impl(&dword_182FBE000, v584, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> removing pending_output_frames", buf, 0x32u);
                      v11 = v1052;
                      v15 = (_BYTE *)&unk_1ECD84000;
                    }
                  }
                }
                *(_QWORD *)v1075 = v81;
                *(_QWORD *)&v1075[8] = 0x40000000;
                *(_QWORD *)&v1075[16] = ___ZL29nw_http1_tear_down_connectionP17nw_protocol_http1P19nw_http1_connection_block_invoke;
                v1076 = (uint64_t (*)(uint64_t, uint64_t))&__block_descriptor_tmp_54_39700;
                v1077 = (void (*)(uint64_t))v16;
                v89 = *(_QWORD *)(v16 + 648);
                do
                {
                  if (!v89)
                    break;
                  v90 = *(_QWORD *)(v89 + 32);
                  v91 = (*(uint64_t (**)(_BYTE *))&v1075[16])(v1075);
                  v89 = v90;
                }
                while ((v91 & 1) != 0);
                nw_frame_cache_remove_all((uint64_t *)(v16 + 696));
                if ((*(_BYTE *)(v16 + 158) & 1) == 0)
                {
                  if (v15[1345])
                  {
                    v588 = __nwlog_obj();
                    if (os_log_type_enabled(v588, OS_LOG_TYPE_DEBUG))
                    {
                      v589 = *(_QWORD *)(v16 + 488);
                      v590 = *(_DWORD *)(*(_QWORD *)(v16 + 480) + 372);
                      v591 = *(_DWORD *)(v16 + 860);
                      if (v589)
                        LODWORD(v589) = *(_DWORD *)(v589 + 424);
                      v592 = *(_QWORD *)(v16 + 32);
                      *(_DWORD *)buf = 136447746;
                      *(_QWORD *)&buf[4] = "nw_http1_tear_down_connection";
                      *(_WORD *)&buf[12] = 2082;
                      *(_QWORD *)&buf[14] = v16 + 74;
                      *(_WORD *)&buf[22] = 2080;
                      v1061 = (uint64_t)" ";
                      *(_WORD *)v1062 = 1024;
                      *(_DWORD *)&v1062[2] = v590;
                      *(_WORD *)&v1062[6] = 1024;
                      *(_DWORD *)&v1062[8] = v591;
                      *(_WORD *)&v1062[12] = 1024;
                      *(_DWORD *)&v1062[14] = v589;
                      *(_WORD *)&v1062[18] = 2048;
                      *(_QWORD *)&v1062[20] = v592;
                      _os_log_impl(&dword_182FBE000, v588, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> calling remove input handler on output handler %p", buf, 0x3Cu);
                      v11 = v1052;
                      v15 = (_BYTE *)&unk_1ECD84000;
                    }
                  }
                }
                v92 = *(_DWORD *)(v11 + 336);
                *(_DWORD *)(v11 + 336) = v92 - 1;
                if (v92)
                {
LABEL_202:
                  if ((*(_BYTE *)(v11 + 158) & 1) == 0)
                  {
                    if (v15[1345])
                    {
                      v593 = __nwlog_obj();
                      if (os_log_type_enabled(v593, OS_LOG_TYPE_DEBUG))
                      {
                        v594 = *(_DWORD *)(v11 + 372);
                        v595 = *(_DWORD *)(v11 + 336);
                        *(_DWORD *)buf = 136447490;
                        *(_QWORD *)&buf[4] = "nw_http1_remove_connection";
                        *(_WORD *)&buf[12] = 2082;
                        *(_QWORD *)&buf[14] = v11 + 74;
                        *(_WORD *)&buf[22] = 2080;
                        v1061 = (uint64_t)" ";
                        *(_WORD *)v1062 = 1024;
                        *(_DWORD *)&v1062[2] = v594;
                        *(_WORD *)&v1062[6] = 2048;
                        *(_QWORD *)&v1062[8] = v16;
                        *(_WORD *)&v1062[16] = 1024;
                        *(_DWORD *)&v1062[18] = v595;
                        _os_log_impl(&dword_182FBE000, v593, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> removed connection %p, now have %u connections", buf, 0x36u);
                      }
                    }
                  }
                  if ((*(_WORD *)(v16 + 872) & 0x800) == 0)
                  {
LABEL_265:
                    nw_protocol_remove_input_handler(*(_QWORD *)(v16 + 32), v16);
                    nw_protocol_set_output_handler(v16, 0);
                    if ((*(_BYTE *)(v16 + 158) & 1) == 0)
                    {
                      if (v15[1345])
                      {
                        v596 = __nwlog_obj();
                        if (os_log_type_enabled(v596, OS_LOG_TYPE_DEBUG))
                        {
                          v597 = *(_QWORD *)(v16 + 488);
                          v598 = *(_DWORD *)(*(_QWORD *)(v16 + 480) + 372);
                          v599 = *(_DWORD *)(v16 + 860);
                          if (v597)
                            LODWORD(v597) = *(_DWORD *)(v597 + 424);
                          *(_DWORD *)buf = 136447746;
                          *(_QWORD *)&buf[4] = "nw_http1_connection_destroy";
                          *(_WORD *)&buf[12] = 2082;
                          *(_QWORD *)&buf[14] = v16 + 74;
                          *(_WORD *)&buf[22] = 2080;
                          v1061 = (uint64_t)" ";
                          *(_WORD *)v1062 = 1024;
                          *(_DWORD *)&v1062[2] = v598;
                          *(_WORD *)&v1062[6] = 1024;
                          *(_DWORD *)&v1062[8] = v599;
                          *(_WORD *)&v1062[12] = 1024;
                          *(_DWORD *)&v1062[14] = v597;
                          *(_WORD *)&v1062[18] = 2048;
                          *(_QWORD *)&v1062[20] = v16;
                          _os_log_impl(&dword_182FBE000, v596, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> destroying %p", buf, 0x3Cu);
                          v11 = v1052;
                          v15 = (_BYTE *)&unk_1ECD84000;
                        }
                      }
                    }
                    v166 = *(_BYTE *)(v16 + 760);
                    if ((v166 & 1) != 0)
                    {
                      v167 = *(void **)(v16 + 752);
                      if (v167)
                      {
                        os_release(v167);
                        v166 = *(_BYTE *)(v16 + 760);
                      }
                    }
                    *(_QWORD *)(v16 + 752) = 0;
                    *(_BYTE *)(v16 + 760) = v166 | 1;
                    v168 = *(_BYTE *)(v16 + 744);
                    if ((v168 & 1) != 0)
                    {
                      v169 = *(void **)(v16 + 736);
                      if (v169)
                      {
                        os_release(v169);
                        v168 = *(_BYTE *)(v16 + 744);
                      }
                    }
                    *(_QWORD *)(v16 + 736) = 0;
                    *(_BYTE *)(v16 + 744) = v168 | 1;
                    v170 = *(_QWORD *)(v16 + 488);
                    if (!v170 || *(_QWORD *)(v170 + 256) != v16)
                    {
LABEL_286:
                      *(_QWORD *)(v16 + 488) = 0;
                      if ((*(_BYTE *)(v16 + 158) & 1) == 0)
                      {
                        if (!v15[1345])
                          goto LABEL_288;
                        v610 = __nwlog_obj();
                        if (os_log_type_enabled(v610, OS_LOG_TYPE_DEBUG))
                        {
                          v611 = *(_QWORD *)(v16 + 488);
                          v612 = *(_DWORD *)(*(_QWORD *)(v16 + 480) + 372);
                          v613 = *(_DWORD *)(v16 + 860);
                          if (v611)
                            LODWORD(v611) = *(_DWORD *)(v611 + 424);
                          *(_DWORD *)buf = 136447490;
                          *(_QWORD *)&buf[4] = "nw_http1_connection_destroy";
                          *(_WORD *)&buf[12] = 2082;
                          *(_QWORD *)&buf[14] = v16 + 74;
                          *(_WORD *)&buf[22] = 2080;
                          v1061 = (uint64_t)" ";
                          *(_WORD *)v1062 = 1024;
                          *(_DWORD *)&v1062[2] = v612;
                          *(_WORD *)&v1062[6] = 1024;
                          *(_DWORD *)&v1062[8] = v613;
                          *(_WORD *)&v1062[12] = 1024;
                          *(_DWORD *)&v1062[14] = v611;
                          _os_log_impl(&dword_182FBE000, v610, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> finalizing frame arrays", buf, 0x32u);
                          v11 = v1052;
                          v15 = &unk_1ECD84000;
                        }
                      }
                      if (v15[1345])
                      {
                        v614 = __nwlog_obj();
                        if (os_log_type_enabled(v614, OS_LOG_TYPE_DEBUG))
                        {
                          *(_DWORD *)aBlock = 136446210;
                          *(_QWORD *)&aBlock[4] = "nw_protocol_finalize_master_frame_array";
                          _os_log_impl(&dword_182FBE000, v614, OS_LOG_TYPE_DEBUG, "%{public}s called", aBlock, 0xCu);
                        }
                      }
LABEL_288:
                      *(_QWORD *)buf = v81;
                      *(_QWORD *)&buf[8] = 0x40000000;
                      *(_QWORD *)&buf[16] = ___ZL39nw_protocol_finalize_master_frame_arrayP16nw_frame_array_sb_block_invoke_39725;
                      v1061 = (uint64_t)&__block_descriptor_tmp_57_39726;
                      v1062[0] = 0;
                      v179 = *(_QWORD *)(v16 + 680);
                      do
                      {
                        if (!v179)
                          break;
                        v180 = *(_QWORD *)(v179 + 16);
                        v181 = (*(uint64_t (**)(_BYTE *))&buf[16])(buf);
                        v179 = v180;
                      }
                      while ((v181 & 1) != 0);
                      if (!*(_QWORD *)(v16 + 680))
                      {
                        if (!v15[1345])
                          goto LABEL_293;
                        goto LABEL_1340;
                      }
                      v571 = v81;
                      __nwlog_obj();
                      *(_DWORD *)aBlock = 136446210;
                      *(_QWORD *)&aBlock[4] = "nw_protocol_finalize_master_frame_array";
                      v572 = (char *)_os_log_send_and_compose_impl();
                      type[0] = 16;
                      LOBYTE(v1055[0]) = 0;
                      if (__nwlog_fault(v572, type, v1055))
                      {
                        if (type[0] == 17)
                        {
                          v573 = __nwlog_obj();
                          v574 = type[0];
                          if (!os_log_type_enabled(v573, (os_log_type_t)type[0]))
                            goto LABEL_1337;
                          *(_DWORD *)aBlock = 136446210;
                          *(_QWORD *)&aBlock[4] = "nw_protocol_finalize_master_frame_array";
                          v575 = "%{public}s frame array is not empty after finalize";
LABEL_1335:
                          v810 = v573;
LABEL_1336:
                          _os_log_impl(&dword_182FBE000, v810, v574, v575, aBlock, 0xCu);
                          goto LABEL_1337;
                        }
                        if (!LOBYTE(v1055[0]))
                        {
                          v573 = __nwlog_obj();
                          v574 = type[0];
                          if (!os_log_type_enabled(v573, (os_log_type_t)type[0]))
                            goto LABEL_1337;
                          *(_DWORD *)aBlock = 136446210;
                          *(_QWORD *)&aBlock[4] = "nw_protocol_finalize_master_frame_array";
                          v575 = "%{public}s frame array is not empty after finalize, backtrace limit exceeded";
                          goto LABEL_1335;
                        }
                        v753 = (char *)__nw_create_backtrace_string();
                        v754 = __nwlog_obj();
                        v574 = type[0];
                        loga = v754;
                        v755 = os_log_type_enabled(v754, (os_log_type_t)type[0]);
                        if (v753)
                        {
                          if (v755)
                          {
                            *(_DWORD *)aBlock = 136446466;
                            *(_QWORD *)&aBlock[4] = "nw_protocol_finalize_master_frame_array";
                            *(_WORD *)&aBlock[12] = 2082;
                            *(_QWORD *)&aBlock[14] = v753;
                            _os_log_impl(&dword_182FBE000, loga, v574, "%{public}s frame array is not empty after finalize, dumping backtrace:%{public}s", aBlock, 0x16u);
                          }
                          free(v753);
                        }
                        else if (v755)
                        {
                          *(_DWORD *)aBlock = 136446210;
                          *(_QWORD *)&aBlock[4] = "nw_protocol_finalize_master_frame_array";
                          v575 = "%{public}s frame array is not empty after finalize, no backtrace";
                          v810 = loga;
                          goto LABEL_1336;
                        }
                      }
LABEL_1337:
                      if (v572)
                        free(v572);
                      v11 = v1052;
                      v15 = &unk_1ECD84000;
                      v81 = v571;
                      if (!gLogDatapath)
                      {
LABEL_293:
                        *(_QWORD *)buf = v81;
                        *(_QWORD *)&buf[8] = 0x40000000;
                        *(_QWORD *)&buf[16] = ___ZL39nw_protocol_finalize_master_frame_arrayP16nw_frame_array_sb_block_invoke_39725;
                        v1061 = (uint64_t)&__block_descriptor_tmp_57_39726;
                        v1062[0] = 0;
                        v182 = *(_QWORD *)(v16 + 664);
                        do
                        {
                          if (!v182)
                            break;
                          v183 = *(_QWORD *)(v182 + 16);
                          v184 = (*(uint64_t (**)(_BYTE *))&buf[16])(buf);
                          v182 = v183;
                        }
                        while ((v184 & 1) != 0);
                        if (!*(_QWORD *)(v16 + 664))
                        {
LABEL_297:
                          nw_frame_cache_destroy((uint64_t *)(v16 + 696));
                          v185 = *(void **)(v16 + 528);
                          if (v185)
                          {
                            v186 = *(void **)(v16 + 544);
                            if (v186)
                              nw_association_unregister(v185, v186);
                          }
                          v187 = *(void **)(v16 + 800);
                          if (v187)
                          {
                            free(v187);
                            *(_QWORD *)(v16 + 800) = 0;
                          }
                          *(_DWORD *)(v16 + 840) = 0;
                          v188 = *(void **)(v16 + 808);
                          if (v188)
                          {
                            free(v188);
                            *(_QWORD *)(v16 + 808) = 0;
                          }
                          *(_DWORD *)(v16 + 844) = 0;
                          v189 = *(void **)(v16 + 816);
                          if (v189)
                          {
                            free(v189);
                            *(_QWORD *)(v16 + 816) = 0;
                          }
                          *(_DWORD *)(v16 + 848) = 0;
                          v190 = *(void **)(v16 + 824);
                          if (v190)
                          {
                            free(v190);
                            *(_QWORD *)(v16 + 824) = 0;
                          }
                          *(_DWORD *)(v16 + 852) = 0;
                          v191 = *(void **)(v16 + 832);
                          if (v191)
                          {
                            free(v191);
                            *(_QWORD *)(v16 + 832) = 0;
                          }
                          *(_DWORD *)(v16 + 856) = 0;
                          (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v16 + 608) + 16))(*(_QWORD *)(v16 + 608), 0);
                          v192 = *(const void **)(v16 + 608);
                          if (v192)
                          {
                            _Block_release(v192);
                            *(_QWORD *)(v16 + 608) = 0;
                          }
                          nw_http1_connection::~nw_http1_connection((nw_http1_connection *)v16);
                          free(v193);
                          if (!*(_DWORD *)(v11 + 336) && !*(_DWORD *)(v11 + 344))
                            nw_protocol_http1_destroy(v11, v11);
                          goto LABEL_327;
                        }
                        __nwlog_obj();
                        *(_DWORD *)aBlock = 136446210;
                        *(_QWORD *)&aBlock[4] = "nw_protocol_finalize_master_frame_array";
                        v576 = (char *)_os_log_send_and_compose_impl();
                        type[0] = 16;
                        LOBYTE(v1055[0]) = 0;
                        if (__nwlog_fault(v576, type, v1055))
                        {
                          if (type[0] == 17)
                          {
                            v577 = __nwlog_obj();
                            v578 = type[0];
                            if (os_log_type_enabled(v577, (os_log_type_t)type[0]))
                            {
                              *(_DWORD *)aBlock = 136446210;
                              *(_QWORD *)&aBlock[4] = "nw_protocol_finalize_master_frame_array";
                              v579 = "%{public}s frame array is not empty after finalize";
LABEL_1367:
                              _os_log_impl(&dword_182FBE000, v577, v578, v579, aBlock, 0xCu);
                            }
                          }
                          else if (LOBYTE(v1055[0]))
                          {
                            v756 = (char *)__nw_create_backtrace_string();
                            v577 = __nwlog_obj();
                            v578 = type[0];
                            v757 = os_log_type_enabled(v577, (os_log_type_t)type[0]);
                            if (v756)
                            {
                              if (v757)
                              {
                                *(_DWORD *)aBlock = 136446466;
                                *(_QWORD *)&aBlock[4] = "nw_protocol_finalize_master_frame_array";
                                *(_WORD *)&aBlock[12] = 2082;
                                *(_QWORD *)&aBlock[14] = v756;
                                _os_log_impl(&dword_182FBE000, v577, v578, "%{public}s frame array is not empty after finalize, dumping backtrace:%{public}s", aBlock, 0x16u);
                              }
                              free(v756);
                              goto LABEL_1368;
                            }
                            if (v757)
                            {
                              *(_DWORD *)aBlock = 136446210;
                              *(_QWORD *)&aBlock[4] = "nw_protocol_finalize_master_frame_array";
                              v579 = "%{public}s frame array is not empty after finalize, no backtrace";
                              goto LABEL_1367;
                            }
                          }
                          else
                          {
                            v577 = __nwlog_obj();
                            v578 = type[0];
                            if (os_log_type_enabled(v577, (os_log_type_t)type[0]))
                            {
                              *(_DWORD *)aBlock = 136446210;
                              *(_QWORD *)&aBlock[4] = "nw_protocol_finalize_master_frame_array";
                              v579 = "%{public}s frame array is not empty after finalize, backtrace limit exceeded";
                              goto LABEL_1367;
                            }
                          }
                        }
LABEL_1368:
                        if (v576)
                          free(v576);
                        v11 = v1052;
                        v15 = (_BYTE *)&unk_1ECD84000;
                        goto LABEL_297;
                      }
LABEL_1340:
                      v811 = __nwlog_obj();
                      if (os_log_type_enabled(v811, OS_LOG_TYPE_DEBUG))
                      {
                        *(_DWORD *)buf = 136446210;
                        *(_QWORD *)&buf[4] = "nw_protocol_finalize_master_frame_array";
                        _os_log_impl(&dword_182FBE000, v811, OS_LOG_TYPE_DEBUG, "%{public}s called", buf, 0xCu);
                      }
                      goto LABEL_293;
                    }
                    v171 = v81;
                    if (*(_QWORD *)(v170 + 248))
                    {
                      if ((*(_BYTE *)(v170 + 158) & 1) == 0)
                      {
                        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                        networkd_settings_init();
                        v172 = gLogObj;
                        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
                        {
                          v173 = *(_QWORD *)(v170 + 256);
                          v174 = *(_DWORD *)(*(_QWORD *)(v170 + 248) + 372);
                          if (v173)
                            LODWORD(v173) = *(_DWORD *)(v173 + 860);
                          v175 = *(_DWORD *)(v170 + 424);
                          *(_DWORD *)buf = 136448002;
                          *(_QWORD *)&buf[4] = "nw_http1_stream_disassociate_from_connection";
                          *(_WORD *)&buf[12] = 2082;
                          *(_QWORD *)&buf[14] = v170 + 74;
                          *(_WORD *)&buf[22] = 2080;
                          v1061 = (uint64_t)" ";
                          *(_WORD *)v1062 = 1024;
                          *(_DWORD *)&v1062[2] = v174;
                          *(_WORD *)&v1062[6] = 1024;
                          *(_DWORD *)&v1062[8] = v173;
                          *(_WORD *)&v1062[12] = 1024;
                          *(_DWORD *)&v1062[14] = v175;
                          *(_WORD *)&v1062[18] = 2048;
                          *(_QWORD *)&v1062[20] = v170;
                          *(_WORD *)&v1062[28] = 2048;
                          *(_QWORD *)&v1062[30] = v16;
                          _os_log_impl(&dword_182FBE000, v172, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s<i%u:c%u:s%u> stream (%p) finished with connection %p", buf, 0x46u);
                        }
                      }
                      if (v15[1345])
                      {
                        v801 = __nwlog_obj();
                        if (os_log_type_enabled(v801, OS_LOG_TYPE_DEBUG))
                        {
                          *(_DWORD *)buf = 136446210;
                          *(_QWORD *)&buf[4] = "nw_protocol_finalize_temp_frame_array";
                          _os_log_impl(&dword_182FBE000, v801, OS_LOG_TYPE_DEBUG, "%{public}s called", buf, 0xCu);
                        }
                      }
                      v81 = v171;
                      *(_QWORD *)buf = v171;
                      *(_QWORD *)&buf[8] = 0x40000000;
                      *(_QWORD *)&buf[16] = ___ZL37nw_protocol_finalize_temp_frame_arrayP16nw_frame_array_sb_block_invoke_39647;
                      v1061 = (uint64_t)&__block_descriptor_tmp_55_39648;
                      *(_QWORD *)v1062 = v85;
                      v1062[8] = 0;
                      v176 = *v85;
                      do
                      {
                        if (!v176)
                          break;
                        v177 = *(_QWORD *)(v176 + 32);
                        v178 = (*(uint64_t (**)(_BYTE *))&buf[16])(buf);
                        v176 = v177;
                      }
                      while ((v178 & 1) != 0);
                      *(_QWORD *)(v170 + 256) = 0;
                      *(_QWORD *)(v16 + 488) = 0;
                      nw_protocol_set_output_handler(v170, 0);
                      nw_protocol_set_input_handler(v16, 0);
                      goto LABEL_286;
                    }
                    __nwlog_obj();
                    *(_DWORD *)buf = 136446210;
                    *(_QWORD *)&buf[4] = "nw_http1_stream_disassociate_from_connection";
                    v797 = (char *)_os_log_send_and_compose_impl();
                    aBlock[0] = 16;
                    type[0] = 0;
                    if (__nwlog_fault(v797, aBlock, type))
                    {
                      if (aBlock[0] == 17)
                      {
                        v798 = __nwlog_obj();
                        v799 = aBlock[0];
                        if (os_log_type_enabled(v798, (os_log_type_t)aBlock[0]))
                        {
                          *(_DWORD *)buf = 136446210;
                          *(_QWORD *)&buf[4] = "nw_http1_stream_disassociate_from_connection";
                          v800 = "%{public}s called with null http1_stream->protocol_http1";
LABEL_1453:
                          _os_log_impl(&dword_182FBE000, v798, v799, v800, buf, 0xCu);
                        }
                      }
                      else if (type[0])
                      {
                        v829 = (char *)__nw_create_backtrace_string();
                        v798 = __nwlog_obj();
                        v799 = aBlock[0];
                        v830 = os_log_type_enabled(v798, (os_log_type_t)aBlock[0]);
                        if (v829)
                        {
                          if (v830)
                          {
                            *(_DWORD *)buf = 136446466;
                            *(_QWORD *)&buf[4] = "nw_http1_stream_disassociate_from_connection";
                            *(_WORD *)&buf[12] = 2082;
                            *(_QWORD *)&buf[14] = v829;
                            _os_log_impl(&dword_182FBE000, v798, v799, "%{public}s called with null http1_stream->protocol_http1, dumping backtrace:%{public}s", buf, 0x16u);
                          }
                          free(v829);
                          goto LABEL_1454;
                        }
                        if (v830)
                        {
                          *(_DWORD *)buf = 136446210;
                          *(_QWORD *)&buf[4] = "nw_http1_stream_disassociate_from_connection";
                          v800 = "%{public}s called with null http1_stream->protocol_http1, no backtrace";
                          goto LABEL_1453;
                        }
                      }
                      else
                      {
                        v798 = __nwlog_obj();
                        v799 = aBlock[0];
                        if (os_log_type_enabled(v798, (os_log_type_t)aBlock[0]))
                        {
                          *(_DWORD *)buf = 136446210;
                          *(_QWORD *)&buf[4] = "nw_http1_stream_disassociate_from_connection";
                          v800 = "%{public}s called with null http1_stream->protocol_http1, backtrace limit exceeded";
                          goto LABEL_1453;
                        }
                      }
                    }
LABEL_1454:
                    if (v797)
                      free(v797);
                    v11 = v1052;
                    v15 = (_BYTE *)&unk_1ECD84000;
                    v81 = v171;
                    goto LABEL_286;
                  }
                  v123 = *(_DWORD *)(v11 + 368);
                  *(_DWORD *)(v11 + 368) = v123 - 1;
                  if (v123)
                  {
LABEL_263:
                    if ((*(_BYTE *)(v11 + 158) & 1) == 0)
                    {
                      if (v15[1345])
                      {
                        v750 = __nwlog_obj();
                        if (os_log_type_enabled(v750, OS_LOG_TYPE_DEBUG))
                        {
                          v751 = *(_DWORD *)(v11 + 372);
                          v752 = *(_DWORD *)(v11 + 368) + *(_DWORD *)(v11 + 364);
                          *(_DWORD *)buf = 136447490;
                          *(_QWORD *)&buf[4] = "nw_http1_remove_connection";
                          *(_WORD *)&buf[12] = 2082;
                          *(_QWORD *)&buf[14] = v11 + 74;
                          *(_WORD *)&buf[22] = 2080;
                          v1061 = (uint64_t)" ";
                          *(_WORD *)v1062 = 1024;
                          *(_DWORD *)&v1062[2] = v751;
                          *(_WORD *)&v1062[6] = 1024;
                          *(_DWORD *)&v1062[8] = v752;
                          *(_WORD *)&v1062[12] = 2048;
                          *(_QWORD *)&v1062[14] = v16;
                          _os_log_impl(&dword_182FBE000, v750, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> decreased connection pool width to %u after removing non-reusable connection %p", buf, 0x36u);
                        }
                      }
                    }
                    goto LABEL_265;
                  }
                  v1047 = v85;
                  v124 = v81;
                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                  networkd_settings_init();
                  v125 = *(unsigned int *)(v11 + 368);
                  *(_DWORD *)buf = 136446978;
                  *(_QWORD *)&buf[4] = "nw_http1_remove_connection";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = "http1->nonresuable_connections";
                  *(_WORD *)&buf[22] = 2048;
                  v1061 = 1;
                  *(_WORD *)v1062 = 2048;
                  *(_QWORD *)&v1062[2] = v125;
                  v126 = (char *)_os_log_send_and_compose_impl();
                  aBlock[0] = 16;
                  type[0] = 0;
                  if (__nwlog_fault(v126, aBlock, type))
                  {
                    if (aBlock[0] == 17)
                    {
                      v127 = __nwlog_obj();
                      v128 = aBlock[0];
                      if (os_log_type_enabled(v127, (os_log_type_t)aBlock[0]))
                      {
                        v129 = *(unsigned int *)(v1052 + 368);
                        *(_DWORD *)buf = 136446978;
                        *(_QWORD *)&buf[4] = "nw_http1_remove_connection";
                        *(_WORD *)&buf[12] = 2082;
                        *(_QWORD *)&buf[14] = "http1->nonresuable_connections";
                        *(_WORD *)&buf[22] = 2048;
                        v1061 = 1;
                        *(_WORD *)v1062 = 2048;
                        *(_QWORD *)&v1062[2] = v129;
                        v130 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu";
LABEL_259:
                        _os_log_impl(&dword_182FBE000, v127, v128, v130, buf, 0x2Au);
                      }
                    }
                    else if (type[0])
                    {
                      v131 = (char *)__nw_create_backtrace_string();
                      v127 = __nwlog_obj();
                      v128 = aBlock[0];
                      v132 = os_log_type_enabled(v127, (os_log_type_t)aBlock[0]);
                      if (v131)
                      {
                        if (v132)
                        {
                          v133 = *(unsigned int *)(v1052 + 368);
                          *(_DWORD *)buf = 136447234;
                          *(_QWORD *)&buf[4] = "nw_http1_remove_connection";
                          *(_WORD *)&buf[12] = 2082;
                          *(_QWORD *)&buf[14] = "http1->nonresuable_connections";
                          *(_WORD *)&buf[22] = 2048;
                          v1061 = 1;
                          *(_WORD *)v1062 = 2048;
                          *(_QWORD *)&v1062[2] = v133;
                          *(_WORD *)&v1062[10] = 2082;
                          *(_QWORD *)&v1062[12] = v131;
                          _os_log_impl(&dword_182FBE000, v127, v128, "%{public}s Underflow: %{public}s, decrement %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
                        }
                        free(v131);
                        goto LABEL_260;
                      }
                      if (v132)
                      {
                        v165 = *(unsigned int *)(v1052 + 368);
                        *(_DWORD *)buf = 136446978;
                        *(_QWORD *)&buf[4] = "nw_http1_remove_connection";
                        *(_WORD *)&buf[12] = 2082;
                        *(_QWORD *)&buf[14] = "http1->nonresuable_connections";
                        *(_WORD *)&buf[22] = 2048;
                        v1061 = 1;
                        *(_WORD *)v1062 = 2048;
                        *(_QWORD *)&v1062[2] = v165;
                        v130 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, no backtrace";
                        goto LABEL_259;
                      }
                    }
                    else
                    {
                      v127 = __nwlog_obj();
                      v128 = aBlock[0];
                      if (os_log_type_enabled(v127, (os_log_type_t)aBlock[0]))
                      {
                        v141 = *(unsigned int *)(v1052 + 368);
                        *(_DWORD *)buf = 136446978;
                        *(_QWORD *)&buf[4] = "nw_http1_remove_connection";
                        *(_WORD *)&buf[12] = 2082;
                        *(_QWORD *)&buf[14] = "http1->nonresuable_connections";
                        *(_WORD *)&buf[22] = 2048;
                        v1061 = 1;
                        *(_WORD *)v1062 = 2048;
                        *(_QWORD *)&v1062[2] = v141;
                        v130 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, backtrace limit exceeded";
                        goto LABEL_259;
                      }
                    }
                  }
LABEL_260:
                  if (v126)
                    free(v126);
                  v11 = v1052;
                  *(_DWORD *)(v1052 + 368) = 0;
                  v15 = &unk_1ECD84000;
                  v81 = v124;
                  v85 = v1047;
                  goto LABEL_263;
                }
                v93 = v81;
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                v94 = *(unsigned int *)(v11 + 336);
                *(_DWORD *)buf = 136446978;
                *(_QWORD *)&buf[4] = "nw_http1_remove_connection";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = "http1->connections_count";
                *(_WORD *)&buf[22] = 2048;
                v1061 = 1;
                *(_WORD *)v1062 = 2048;
                *(_QWORD *)&v1062[2] = v94;
                v95 = (char *)_os_log_send_and_compose_impl();
                aBlock[0] = 16;
                type[0] = 0;
                if (__nwlog_fault(v95, aBlock, type))
                {
                  if (aBlock[0] == 17)
                  {
                    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                    networkd_settings_init();
                    v96 = gLogObj;
                    v97 = aBlock[0];
                    if (os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)aBlock[0]))
                    {
                      v98 = *(unsigned int *)(v1052 + 336);
                      *(_DWORD *)buf = 136446978;
                      *(_QWORD *)&buf[4] = "nw_http1_remove_connection";
                      *(_WORD *)&buf[12] = 2082;
                      *(_QWORD *)&buf[14] = "http1->connections_count";
                      *(_WORD *)&buf[22] = 2048;
                      v1061 = 1;
                      *(_WORD *)v1062 = 2048;
                      *(_QWORD *)&v1062[2] = v98;
                      v99 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu";
LABEL_198:
                      _os_log_impl(&dword_182FBE000, v96, v97, v99, buf, 0x2Au);
                    }
                  }
                  else if (type[0])
                  {
                    v106 = (char *)__nw_create_backtrace_string();
                    v96 = __nwlog_obj();
                    v97 = aBlock[0];
                    v107 = os_log_type_enabled(v96, (os_log_type_t)aBlock[0]);
                    if (v106)
                    {
                      if (v107)
                      {
                        v108 = *(unsigned int *)(v1052 + 336);
                        *(_DWORD *)buf = 136447234;
                        *(_QWORD *)&buf[4] = "nw_http1_remove_connection";
                        *(_WORD *)&buf[12] = 2082;
                        *(_QWORD *)&buf[14] = "http1->connections_count";
                        *(_WORD *)&buf[22] = 2048;
                        v1061 = 1;
                        *(_WORD *)v1062 = 2048;
                        *(_QWORD *)&v1062[2] = v108;
                        *(_WORD *)&v1062[10] = 2082;
                        *(_QWORD *)&v1062[12] = v106;
                        _os_log_impl(&dword_182FBE000, v96, v97, "%{public}s Underflow: %{public}s, decrement %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
                      }
                      free(v106);
                      goto LABEL_199;
                    }
                    if (v107)
                    {
                      v122 = *(unsigned int *)(v1052 + 336);
                      *(_DWORD *)buf = 136446978;
                      *(_QWORD *)&buf[4] = "nw_http1_remove_connection";
                      *(_WORD *)&buf[12] = 2082;
                      *(_QWORD *)&buf[14] = "http1->connections_count";
                      *(_WORD *)&buf[22] = 2048;
                      v1061 = 1;
                      *(_WORD *)v1062 = 2048;
                      *(_QWORD *)&v1062[2] = v122;
                      v99 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, no backtrace";
                      goto LABEL_198;
                    }
                  }
                  else
                  {
                    v96 = __nwlog_obj();
                    v97 = aBlock[0];
                    if (os_log_type_enabled(v96, (os_log_type_t)aBlock[0]))
                    {
                      v114 = *(unsigned int *)(v1052 + 336);
                      *(_DWORD *)buf = 136446978;
                      *(_QWORD *)&buf[4] = "nw_http1_remove_connection";
                      *(_WORD *)&buf[12] = 2082;
                      *(_QWORD *)&buf[14] = "http1->connections_count";
                      *(_WORD *)&buf[22] = 2048;
                      v1061 = 1;
                      *(_WORD *)v1062 = 2048;
                      *(_QWORD *)&v1062[2] = v114;
                      v99 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, backtrace limit exceeded";
                      goto LABEL_198;
                    }
                  }
                }
LABEL_199:
                if (v95)
                  free(v95);
                v11 = v1052;
                *(_DWORD *)(v1052 + 336) = 0;
                v15 = &unk_1ECD84000;
                v81 = v93;
                v85 = (_QWORD *)(v16 + 632);
                goto LABEL_202;
              }
              __nwlog_obj();
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_http1_stream_disassociate_from_connection";
              v562 = (char *)_os_log_send_and_compose_impl();
              v1075[0] = 16;
              aBlock[0] = 0;
              if (!__nwlog_fault(v562, v1075, aBlock))
                goto LABEL_1282;
              if (v1075[0] == 17)
              {
                v563 = __nwlog_obj();
                v564 = v1075[0];
                if (!os_log_type_enabled(v563, (os_log_type_t)v1075[0]))
                  goto LABEL_1282;
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_http1_stream_disassociate_from_connection";
                v565 = "%{public}s called with null http1_connection";
                goto LABEL_1281;
              }
              if (!aBlock[0])
              {
                v563 = __nwlog_obj();
                v564 = v1075[0];
                if (!os_log_type_enabled(v563, (os_log_type_t)v1075[0]))
                  goto LABEL_1282;
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_http1_stream_disassociate_from_connection";
                v565 = "%{public}s called with null http1_connection, backtrace limit exceeded";
                goto LABEL_1281;
              }
              v617 = (char *)__nw_create_backtrace_string();
              v563 = __nwlog_obj();
              v564 = v1075[0];
              v618 = os_log_type_enabled(v563, (os_log_type_t)v1075[0]);
              if (v617)
              {
                if (v618)
                {
                  *(_DWORD *)buf = 136446466;
                  *(_QWORD *)&buf[4] = "nw_http1_stream_disassociate_from_connection";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = v617;
                  _os_log_impl(&dword_182FBE000, v563, v564, "%{public}s called with null http1_connection, dumping backtrace:%{public}s", buf, 0x16u);
                }
                free(v617);
                v11 = v1052;
                if (!v562)
                  goto LABEL_114;
LABEL_1283:
                free(v562);
                goto LABEL_114;
              }
              v11 = v1052;
              if (v618)
              {
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_http1_stream_disassociate_from_connection";
                v565 = "%{public}s called with null http1_connection, no backtrace";
LABEL_1281:
                _os_log_impl(&dword_182FBE000, v563, v564, v565, buf, 0xCu);
              }
            }
            else
            {
              __nwlog_obj();
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_http1_stream_disassociate_from_connection";
              v562 = (char *)_os_log_send_and_compose_impl();
              v1075[0] = 16;
              aBlock[0] = 0;
              if (!__nwlog_fault(v562, v1075, aBlock))
                goto LABEL_1282;
              if (v1075[0] == 17)
              {
                v563 = __nwlog_obj();
                v564 = v1075[0];
                if (!os_log_type_enabled(v563, (os_log_type_t)v1075[0]))
                  goto LABEL_1282;
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_http1_stream_disassociate_from_connection";
                v565 = "%{public}s called with null http1_stream->protocol_http1";
                goto LABEL_1281;
              }
              if (!aBlock[0])
              {
                v563 = __nwlog_obj();
                v564 = v1075[0];
                if (!os_log_type_enabled(v563, (os_log_type_t)v1075[0]))
                  goto LABEL_1282;
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_http1_stream_disassociate_from_connection";
                v565 = "%{public}s called with null http1_stream->protocol_http1, backtrace limit exceeded";
                goto LABEL_1281;
              }
              v615 = (char *)__nw_create_backtrace_string();
              v563 = __nwlog_obj();
              v564 = v1075[0];
              v616 = os_log_type_enabled(v563, (os_log_type_t)v1075[0]);
              if (!v615)
              {
                v11 = v1052;
                if (!v616)
                  goto LABEL_1282;
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_http1_stream_disassociate_from_connection";
                v565 = "%{public}s called with null http1_stream->protocol_http1, no backtrace";
                goto LABEL_1281;
              }
              if (v616)
              {
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = "nw_http1_stream_disassociate_from_connection";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = v615;
                _os_log_impl(&dword_182FBE000, v563, v564, "%{public}s called with null http1_stream->protocol_http1, dumping backtrace:%{public}s", buf, 0x16u);
              }
              free(v615);
              v11 = v1052;
            }
LABEL_1282:
            if (!v562)
              goto LABEL_114;
            goto LABEL_1283;
          }
          if ((*(_WORD *)(v16 + 872) & 0x100) == 0)
          {
            if (*(_DWORD *)(v16 + 864) == 4)
            {
              if (*(_BYTE *)(v16 + 158) & 1 | (gLogDatapath == 0))
              {
                v22 = 0;
                goto LABEL_84;
              }
              v23 = __nwlog_obj();
              if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
              {
                v940 = *(_QWORD *)(v16 + 488);
                v941 = *(_DWORD *)(*(_QWORD *)(v16 + 480) + 372);
                v942 = *(_DWORD *)(v16 + 860);
                if (v940)
                  LODWORD(v940) = *(_DWORD *)(v940 + 424);
                *(_DWORD *)buf = 136447490;
                *(_QWORD *)&buf[4] = "nw_http1_connection_can_be_reused";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = v16 + 74;
                *(_WORD *)&buf[22] = 2080;
                v1061 = (uint64_t)" ";
                *(_WORD *)v1062 = 1024;
                *(_DWORD *)&v1062[2] = v941;
                *(_WORD *)&v1062[6] = 1024;
                *(_DWORD *)&v1062[8] = v942;
                *(_WORD *)&v1062[12] = 1024;
                *(_DWORD *)&v1062[14] = v940;
                v27 = "%{public}s %{public}s%s<i%u:c%u:s%u> connection cannot be reused because input has finished from below";
                goto LABEL_1290;
              }
              goto LABEL_1539;
            }
            if (*(_BYTE *)(v16 + 158) & 1 | (gLogDatapath == 0))
            {
              v22 = 1;
            }
            else
            {
              v943 = __nwlog_obj();
              if (os_log_type_enabled(v943, OS_LOG_TYPE_DEBUG))
              {
                v944 = *(_QWORD *)(v16 + 488);
                v945 = *(_DWORD *)(*(_QWORD *)(v16 + 480) + 372);
                v946 = *(_DWORD *)(v16 + 860);
                if (v944)
                  LODWORD(v944) = *(_DWORD *)(v944 + 424);
                *(_DWORD *)buf = 136447490;
                *(_QWORD *)&buf[4] = "nw_http1_connection_can_be_reused";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = v16 + 74;
                *(_WORD *)&buf[22] = 2080;
                v1061 = (uint64_t)" ";
                *(_WORD *)v1062 = 1024;
                *(_DWORD *)&v1062[2] = v945;
                *(_WORD *)&v1062[6] = 1024;
                *(_DWORD *)&v1062[8] = v946;
                *(_WORD *)&v1062[12] = 1024;
                *(_DWORD *)&v1062[14] = v944;
                _os_log_impl(&dword_182FBE000, v943, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> connection can be reused", buf, 0x32u);
                v22 = 1;
              }
              else
              {
                v22 = 1;
              }
            }
            goto LABEL_84;
          }
          v22 = 0;
          if ((*(_BYTE *)(v16 + 158) & 1) != 0 || !gLogDatapath)
            goto LABEL_84;
          v23 = __nwlog_obj();
          if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
          {
            v118 = *(_QWORD *)(v16 + 488);
            v119 = *(_DWORD *)(*(_QWORD *)(v16 + 480) + 372);
            v120 = *(_DWORD *)(v16 + 860);
            if (v118)
              LODWORD(v118) = *(_DWORD *)(v118 + 424);
            *(_DWORD *)buf = 136447490;
            *(_QWORD *)&buf[4] = "nw_http1_connection_can_be_reused";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v16 + 74;
            *(_WORD *)&buf[22] = 2080;
            v1061 = (uint64_t)" ";
            *(_WORD *)v1062 = 1024;
            *(_DWORD *)&v1062[2] = v119;
            *(_WORD *)&v1062[6] = 1024;
            *(_DWORD *)&v1062[8] = v120;
            *(_WORD *)&v1062[12] = 1024;
            *(_DWORD *)&v1062[14] = v118;
            v27 = "%{public}s %{public}s%s<i%u:c%u:s%u> connection cannot be reused because it has been closed";
            goto LABEL_1290;
          }
        }
      }
LABEL_1539:
      v22 = 0;
      goto LABEL_84;
    }
    if (*(_QWORD *)(v14 + 32))
    {
      if ((*(_BYTE *)(v14 + 158) & 1) == 0)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v28 = gLogObj;
        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
        {
          v29 = *(_QWORD *)(v14 + 256);
          v30 = *(_DWORD *)(*(_QWORD *)(v14 + 248) + 372);
          if (v29)
            LODWORD(v29) = *(_DWORD *)(v29 + 860);
          v31 = *(_DWORD *)(v14 + 424);
          *(_DWORD *)buf = 136447490;
          *(_QWORD *)&buf[4] = "nw_protocol_http1_remove_input_handler";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v14 + 74;
          *(_WORD *)&buf[22] = 2080;
          v1061 = (uint64_t)" ";
          *(_WORD *)v1062 = 1024;
          *(_DWORD *)&v1062[2] = v30;
          *(_WORD *)&v1062[6] = 1024;
          *(_DWORD *)&v1062[8] = v29;
          *(_WORD *)&v1062[12] = 1024;
          *(_DWORD *)&v1062[14] = v31;
          _os_log_impl(&dword_182FBE000, v28, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u:c%u:s%u> removing the initial stream without connecting", buf, 0x32u);
        }
      }
      nw_protocol_remove_input_handler(*(_QWORD *)(v14 + 32), v14);
      goto LABEL_327;
    }
    if ((*(_WORD *)(v14 + 428) & 0x1000) == 0)
    {
LABEL_327:
      v115 = 0;
      goto LABEL_328;
    }
    if ((*(_BYTE *)(v11 + 158) & 1) == 0)
    {
      if (gLogDatapath)
      {
        v802 = __nwlog_obj();
        if (os_log_type_enabled(v802, OS_LOG_TYPE_DEBUG))
        {
          v803 = *(_DWORD *)(v11 + 372);
          v804 = *(_DWORD *)(v14 + 424);
          *(_DWORD *)buf = 136447490;
          *(_QWORD *)&buf[4] = "nw_http1_remove_pending_stream";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v11 + 74;
          *(_WORD *)&buf[22] = 2080;
          v1061 = (uint64_t)" ";
          *(_WORD *)v1062 = 1024;
          *(_DWORD *)&v1062[2] = v803;
          *(_WORD *)&v1062[6] = 1024;
          *(_DWORD *)&v1062[8] = v804;
          *(_WORD *)&v1062[12] = 2048;
          *(_QWORD *)&v1062[14] = v14;
          _os_log_impl(&dword_182FBE000, v802, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> called for stream %u (%p)", buf, 0x36u);
        }
      }
    }
    if ((*(_WORD *)(v14 + 428) & 0x1000) == 0)
    {
      __nwlog_obj();
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_http1_remove_pending_stream";
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v14;
      v35 = (char *)_os_log_send_and_compose_impl();
      v1075[0] = 16;
      aBlock[0] = 0;
      if (!__nwlog_fault(v35, v1075, aBlock))
        goto LABEL_325;
      if (v1075[0] == 17)
      {
        v36 = __nwlog_obj();
        v37 = v1075[0];
        if (!os_log_type_enabled(v36, (os_log_type_t)v1075[0]))
          goto LABEL_325;
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http1_remove_pending_stream";
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v14;
        v38 = "%{public}s stream %p not in pending list, cannot remove";
      }
      else if (aBlock[0])
      {
        v116 = (char *)__nw_create_backtrace_string();
        v36 = __nwlog_obj();
        v37 = v1075[0];
        v117 = os_log_type_enabled(v36, (os_log_type_t)v1075[0]);
        if (v116)
        {
          if (v117)
          {
            *(_DWORD *)buf = 136446722;
            *(_QWORD *)&buf[4] = "nw_http1_remove_pending_stream";
            *(_WORD *)&buf[12] = 2048;
            *(_QWORD *)&buf[14] = v14;
            *(_WORD *)&buf[22] = 2082;
            v1061 = (uint64_t)v116;
            _os_log_impl(&dword_182FBE000, v36, v37, "%{public}s stream %p not in pending list, cannot remove, dumping backtrace:%{public}s", buf, 0x20u);
          }
          free(v116);
          v11 = v1052;
          goto LABEL_325;
        }
        v11 = v1052;
        if (!v117)
        {
LABEL_325:
          if (v35)
            free(v35);
          goto LABEL_327;
        }
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http1_remove_pending_stream";
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v14;
        v38 = "%{public}s stream %p not in pending list, cannot remove, no backtrace";
      }
      else
      {
        v36 = __nwlog_obj();
        v37 = v1075[0];
        if (!os_log_type_enabled(v36, (os_log_type_t)v1075[0]))
          goto LABEL_325;
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http1_remove_pending_stream";
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v14;
        v38 = "%{public}s stream %p not in pending list, cannot remove, backtrace limit exceeded";
      }
      _os_log_impl(&dword_182FBE000, v36, v37, v38, buf, 0x16u);
      goto LABEL_325;
    }
    v112 = *(_QWORD *)(v14 + 296);
    v113 = *(_QWORD **)(v14 + 304);
    if (v112)
    {
      *(_QWORD *)(v112 + 304) = v113;
      v113 = *(_QWORD **)(v14 + 304);
    }
    else
    {
      *(_QWORD *)(v11 + 256) = v113;
    }
    *v113 = v112;
    *(_QWORD *)(v14 + 296) = 0;
    *(_QWORD *)(v14 + 304) = 0;
    v134 = *(_DWORD *)(v11 + 348);
    *(_DWORD *)(v11 + 348) = v134 - 1;
    if (v134)
    {
LABEL_737:
      v115 = 0;
      *(_WORD *)(v14 + 428) &= ~0x1000u;
      if ((*(_BYTE *)(v14 + 158) & 1) == 0 && gLogDatapath)
      {
        v436 = __nwlog_obj();
        if (os_log_type_enabled(v436, OS_LOG_TYPE_DEBUG))
        {
          v437 = *(_QWORD *)(v14 + 256);
          v438 = *(_DWORD *)(*(_QWORD *)(v14 + 248) + 372);
          if (v437)
            LODWORD(v437) = *(_DWORD *)(v437 + 860);
          v439 = *(_DWORD *)(v14 + 424);
          v11 = v1052;
          v440 = *(_DWORD *)(v1052 + 348);
          *(_DWORD *)buf = 136448258;
          *(_QWORD *)&buf[4] = "nw_http1_remove_pending_stream";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v14 + 74;
          *(_WORD *)&buf[22] = 2080;
          v1061 = (uint64_t)" ";
          *(_WORD *)v1062 = 1024;
          *(_DWORD *)&v1062[2] = v438;
          *(_WORD *)&v1062[6] = 1024;
          *(_DWORD *)&v1062[8] = v437;
          *(_WORD *)&v1062[12] = 1024;
          *(_DWORD *)&v1062[14] = v439;
          *(_WORD *)&v1062[18] = 1024;
          *(_DWORD *)&v1062[20] = v439;
          *(_WORD *)&v1062[24] = 2048;
          *(_QWORD *)&v1062[26] = v14;
          *(_WORD *)&v1062[34] = 1024;
          *(_DWORD *)&v1062[36] = v440;
          _os_log_impl(&dword_182FBE000, v436, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> removed pending stream %u (%p), now have %u pending streams", buf, 0x48u);
          goto LABEL_327;
        }
        v115 = 0;
        v11 = v1052;
      }
LABEL_328:
      if ((*(_WORD *)(v14 + 428) & 0x1000) == 0)
        goto LABEL_345;
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_protocol_http1_remove_input_handler";
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v14;
      v197 = (char *)_os_log_send_and_compose_impl();
      v1075[0] = 16;
      aBlock[0] = 0;
      if (__nwlog_fault(v197, v1075, aBlock))
      {
        if (v1075[0] == 17)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v198 = gLogObj;
          v199 = v1075[0];
          if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v1075[0]))
            goto LABEL_343;
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_protocol_http1_remove_input_handler";
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v14;
          v200 = "%{public}s http1 stream %p still in pending list";
          goto LABEL_342;
        }
        if (!aBlock[0])
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v198 = gLogObj;
          v199 = v1075[0];
          if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v1075[0]))
            goto LABEL_343;
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_protocol_http1_remove_input_handler";
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v14;
          v200 = "%{public}s http1 stream %p still in pending list, backtrace limit exceeded";
          goto LABEL_342;
        }
        v201 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v198 = gLogObj;
        v199 = v1075[0];
        v202 = os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v1075[0]);
        if (v201)
        {
          if (v202)
          {
            *(_DWORD *)buf = 136446722;
            *(_QWORD *)&buf[4] = "nw_protocol_http1_remove_input_handler";
            *(_WORD *)&buf[12] = 2048;
            *(_QWORD *)&buf[14] = v14;
            *(_WORD *)&buf[22] = 2082;
            v1061 = (uint64_t)v201;
            _os_log_impl(&dword_182FBE000, v198, v199, "%{public}s http1 stream %p still in pending list, dumping backtrace:%{public}s", buf, 0x20u);
          }
          free(v201);
          v11 = v1052;
          goto LABEL_343;
        }
        v11 = v1052;
        if (v202)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_protocol_http1_remove_input_handler";
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v14;
          v200 = "%{public}s http1 stream %p still in pending list, no backtrace";
LABEL_342:
          _os_log_impl(&dword_182FBE000, v198, v199, v200, buf, 0x16u);
        }
      }
LABEL_343:
      if (v197)
        free(v197);
LABEL_345:
      if ((*(_BYTE *)(v11 + 158) & 1) == 0)
      {
        if (v15[1345])
        {
          v536 = __nwlog_obj();
          if (os_log_type_enabled(v536, OS_LOG_TYPE_DEBUG))
          {
            v537 = *(_DWORD *)(v11 + 372);
            v538 = *(_DWORD *)(v14 + 424);
            *(_DWORD *)buf = 136447490;
            *(_QWORD *)&buf[4] = "nw_http1_remove_stream";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v11 + 74;
            *(_WORD *)&buf[22] = 2080;
            v1061 = (uint64_t)" ";
            *(_WORD *)v1062 = 1024;
            *(_DWORD *)&v1062[2] = v537;
            *(_WORD *)&v1062[6] = 1024;
            *(_DWORD *)&v1062[8] = v538;
            *(_WORD *)&v1062[12] = 2048;
            *(_QWORD *)&v1062[14] = v14;
            _os_log_impl(&dword_182FBE000, v536, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> called for stream %u (%p)", buf, 0x36u);
          }
        }
      }
      v203 = *(_QWORD *)(v14 + 280);
      v204 = *(_QWORD **)(v14 + 288);
      if (v203)
      {
        *(_QWORD *)(v203 + 288) = v204;
        v204 = *(_QWORD **)(v14 + 288);
      }
      else
      {
        *(_QWORD *)(v11 + 240) = v204;
      }
      *v204 = v203;
      *(_QWORD *)(v14 + 280) = 0;
      *(_QWORD *)(v14 + 288) = 0;
      v205 = *(_DWORD *)(v11 + 344);
      *(_DWORD *)(v11 + 344) = v205 - 1;
      if (v205)
      {
        if ((*(_WORD *)(v14 + 428) & 8) == 0)
          goto LABEL_388;
        goto LABEL_370;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v206 = *(unsigned int *)(v11 + 344);
      *(_DWORD *)buf = 136446978;
      *(_QWORD *)&buf[4] = "nw_http1_remove_stream";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = "http1->streams_count";
      *(_WORD *)&buf[22] = 2048;
      v1061 = 1;
      *(_WORD *)v1062 = 2048;
      *(_QWORD *)&v1062[2] = v206;
      v207 = (char *)_os_log_send_and_compose_impl();
      v1075[0] = 16;
      aBlock[0] = 0;
      if (__nwlog_fault(v207, v1075, aBlock))
      {
        if (v1075[0] == 17)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v208 = gLogObj;
          v209 = v1075[0];
          if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v1075[0]))
            goto LABEL_367;
          v210 = *(unsigned int *)(v11 + 344);
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_http1_remove_stream";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = "http1->streams_count";
          *(_WORD *)&buf[22] = 2048;
          v1061 = 1;
          *(_WORD *)v1062 = 2048;
          *(_QWORD *)&v1062[2] = v210;
          v211 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu";
LABEL_366:
          _os_log_impl(&dword_182FBE000, v208, v209, v211, buf, 0x2Au);
          goto LABEL_367;
        }
        if (!aBlock[0])
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v208 = gLogObj;
          v209 = v1075[0];
          if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v1075[0]))
            goto LABEL_367;
          v215 = *(unsigned int *)(v11 + 344);
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_http1_remove_stream";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = "http1->streams_count";
          *(_WORD *)&buf[22] = 2048;
          v1061 = 1;
          *(_WORD *)v1062 = 2048;
          *(_QWORD *)&v1062[2] = v215;
          v211 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, backtrace limit exceeded";
          goto LABEL_366;
        }
        v212 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v208 = gLogObj;
        v209 = v1075[0];
        v213 = os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v1075[0]);
        if (!v212)
        {
          v11 = v1052;
          if (!v213)
            goto LABEL_367;
          v216 = *(unsigned int *)(v1052 + 344);
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_http1_remove_stream";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = "http1->streams_count";
          *(_WORD *)&buf[22] = 2048;
          v1061 = 1;
          *(_WORD *)v1062 = 2048;
          *(_QWORD *)&v1062[2] = v216;
          v211 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, no backtrace";
          goto LABEL_366;
        }
        if (v213)
        {
          v214 = *(unsigned int *)(v1052 + 344);
          *(_DWORD *)buf = 136447234;
          *(_QWORD *)&buf[4] = "nw_http1_remove_stream";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = "http1->streams_count";
          *(_WORD *)&buf[22] = 2048;
          v1061 = 1;
          *(_WORD *)v1062 = 2048;
          *(_QWORD *)&v1062[2] = v214;
          *(_WORD *)&v1062[10] = 2082;
          *(_QWORD *)&v1062[12] = v212;
          _os_log_impl(&dword_182FBE000, v208, v209, "%{public}s Underflow: %{public}s, decrement %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
        }
        free(v212);
        v11 = v1052;
      }
LABEL_367:
      if (v207)
        free(v207);
      *(_DWORD *)(v11 + 344) = 0;
      v15 = (_BYTE *)&unk_1ECD84000;
      if ((*(_WORD *)(v14 + 428) & 8) == 0)
      {
LABEL_388:
        if ((*(_BYTE *)(v14 + 158) & 1) == 0)
        {
          if (v15[1345])
          {
            v539 = __nwlog_obj();
            if (os_log_type_enabled(v539, OS_LOG_TYPE_DEBUG))
            {
              v540 = *(_QWORD *)(v14 + 256);
              v541 = *(_DWORD *)(*(_QWORD *)(v14 + 248) + 372);
              if (v540)
                LODWORD(v540) = *(_DWORD *)(v540 + 860);
              v542 = *(_DWORD *)(v14 + 424);
              v543 = *(_DWORD *)(v11 + 344);
              *(_DWORD *)buf = 136448258;
              *(_QWORD *)&buf[4] = "nw_http1_remove_stream";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v14 + 74;
              *(_WORD *)&buf[22] = 2080;
              v1061 = (uint64_t)" ";
              *(_WORD *)v1062 = 1024;
              *(_DWORD *)&v1062[2] = v541;
              *(_WORD *)&v1062[6] = 1024;
              *(_DWORD *)&v1062[8] = v540;
              *(_WORD *)&v1062[12] = 1024;
              *(_DWORD *)&v1062[14] = v542;
              *(_WORD *)&v1062[18] = 1024;
              *(_DWORD *)&v1062[20] = v542;
              *(_WORD *)&v1062[24] = 2048;
              *(_QWORD *)&v1062[26] = v14;
              *(_WORD *)&v1062[34] = 1024;
              *(_DWORD *)&v1062[36] = v543;
              _os_log_impl(&dword_182FBE000, v539, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> removed stream %u (%p), now have %u streams", buf, 0x48u);
            }
          }
        }
        if (*(nw_protocol **)(v11 + 48) == a2)
        {
          nw_protocol_set_input_handler(v11, 0);
          v229 = *(_QWORD *)(v11 + 232);
          if (v229)
            nw_protocol_set_input_handler(v11, *(_QWORD *)(v229 + 48));
        }
        if ((*(_BYTE *)(v14 + 158) & 1) == 0)
        {
          if (v15[1345])
          {
            v544 = __nwlog_obj();
            if (os_log_type_enabled(v544, OS_LOG_TYPE_DEBUG))
            {
              v545 = *(_QWORD *)(v14 + 256);
              v546 = *(_DWORD *)(*(_QWORD *)(v14 + 248) + 372);
              if (v545)
                LODWORD(v545) = *(_DWORD *)(v545 + 860);
              v547 = *(_DWORD *)(v14 + 424);
              *(_DWORD *)buf = 136447746;
              *(_QWORD *)&buf[4] = "nw_http1_stream_destroy";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v14 + 74;
              *(_WORD *)&buf[22] = 2080;
              v1061 = (uint64_t)" ";
              *(_WORD *)v1062 = 1024;
              *(_DWORD *)&v1062[2] = v546;
              *(_WORD *)&v1062[6] = 1024;
              *(_DWORD *)&v1062[8] = v545;
              *(_WORD *)&v1062[12] = 1024;
              *(_DWORD *)&v1062[14] = v547;
              *(_WORD *)&v1062[18] = 2048;
              *(_QWORD *)&v1062[20] = v14;
              _os_log_impl(&dword_182FBE000, v544, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> destroying %p", buf, 0x3Cu);
            }
          }
        }
        if ((*(_WORD *)(v14 + 428) & 0x4000) != 0)
          nw_http_transaction_metadata_set_event_handler(*(void **)(v14 + 352), 0);
        v230 = *(_BYTE *)(v14 + 344);
        if ((v230 & 1) != 0)
        {
          v231 = *(void **)(v14 + 336);
          if (v231)
          {
            os_release(v231);
            v230 = *(_BYTE *)(v14 + 344);
          }
        }
        *(_QWORD *)(v14 + 336) = 0;
        *(_BYTE *)(v14 + 344) = v230 | 1;
        v232 = *(_BYTE *)(v14 + 328);
        if ((v232 & 1) != 0)
        {
          v233 = *(void **)(v14 + 320);
          if (v233)
          {
            os_release(v233);
            v232 = *(_BYTE *)(v14 + 328);
          }
        }
        *(_QWORD *)(v14 + 320) = 0;
        *(_BYTE *)(v14 + 328) = v232 | 1;
        v234 = *(_BYTE *)(v14 + 376);
        if ((v234 & 1) != 0)
        {
          v235 = *(void **)(v14 + 368);
          if (v235)
          {
            os_release(v235);
            v234 = *(_BYTE *)(v14 + 376);
          }
        }
        *(_QWORD *)(v14 + 368) = 0;
        *(_BYTE *)(v14 + 376) = v234 | 1;
        v236 = *(_BYTE *)(v14 + 392);
        if ((v236 & 1) != 0)
        {
          v237 = *(void **)(v14 + 384);
          if (v237)
          {
            os_release(v237);
            v236 = *(_BYTE *)(v14 + 392);
          }
        }
        *(_QWORD *)(v14 + 384) = 0;
        *(_BYTE *)(v14 + 392) = v236 | 1;
        v238 = *(_QWORD *)(v14 + 256);
        if (v238 && *(_QWORD *)(v238 + 488) == v14)
          *(_QWORD *)(v238 + 488) = 0;
        *(_QWORD *)(v14 + 256) = 0;
        v239 = *(_QWORD *)(v14 + 48);
        if (v239 && *(_QWORD *)(v239 + 56) == v14)
          *(_QWORD *)(v239 + 56) = 0;
        (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v14 + 312) + 16))(*(_QWORD *)(v14 + 312), 0);
        v240 = *(const void **)(v14 + 312);
        if (v240)
        {
          _Block_release(v240);
          *(_QWORD *)(v14 + 312) = 0;
        }
        nw_http1_stream::~nw_http1_stream((nw_http1_stream *)v14);
        free(v241);
        if (!v115)
          goto LABEL_715;
        if ((*(_BYTE *)(v11 + 376) & 1) == 0
          || ((*(unsigned __int16 *)(v16 + 872) | (*(unsigned __int8 *)(v16 + 874) << 16)) & 0x20000) == 0)
        {
          v243 = *(_QWORD *)(v11 + 248);
          if (v243)
          {
            v1051 = *(_QWORD *)(v11 + 248);
            if ((*(_BYTE *)(v243 + 158) & 1) == 0)
            {
              if (v15[1345])
              {
                v739 = __nwlog_obj();
                if (os_log_type_enabled(v739, OS_LOG_TYPE_DEBUG))
                {
                  v740 = v243 + 74;
                  v741 = *(_QWORD *)(v243 + 256);
                  v742 = *(_DWORD *)(*(_QWORD *)(v243 + 248) + 372);
                  if (v741)
                    LODWORD(v741) = *(_DWORD *)(v741 + 860);
                  v243 = v1051;
                  v743 = *(_DWORD *)(v1051 + 424);
                  *(_DWORD *)buf = 136448002;
                  *(_QWORD *)&buf[4] = "nw_http1_get_next_pending_stream";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = v740;
                  *(_WORD *)&buf[22] = 2080;
                  v1061 = (uint64_t)" ";
                  *(_WORD *)v1062 = 1024;
                  *(_DWORD *)&v1062[2] = v742;
                  *(_WORD *)&v1062[6] = 1024;
                  *(_DWORD *)&v1062[8] = v741;
                  *(_WORD *)&v1062[12] = 1024;
                  *(_DWORD *)&v1062[14] = v743;
                  *(_WORD *)&v1062[18] = 1024;
                  *(_DWORD *)&v1062[20] = v743;
                  *(_WORD *)&v1062[24] = 2048;
                  *(_QWORD *)&v1062[26] = v1051;
                  _os_log_impl(&dword_182FBE000, v739, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> found stream %u (%p)", buf, 0x42u);
                  v11 = v1052;
                  v15 = (_BYTE *)&unk_1ECD84000;
                }
              }
            }
            v244 = (_OWORD *)(v243 + 64);
            v245 = *(_QWORD *)(v11 + 208);
            if (v245)
            {
              v246 = 0;
              v247 = v11 + 74;
              do
              {
                v248 = v245;
                v245 = *(_QWORD *)(v245 + 592);
                if ((*(_WORD *)(v248 + 872) & 0x800) == 0)
                {
                  if ((*(_BYTE *)(v1052 + 158) & 1) != 0 || !gLogDatapath)
                  {
                    v246 = v248;
                  }
                  else
                  {
                    v1043 = v247;
                    v1048 = v244;
                    v249 = __nwlog_obj();
                    if (os_log_type_enabled(v249, OS_LOG_TYPE_DEBUG))
                    {
                      v250 = *(_DWORD *)(v1052 + 372);
                      *(_DWORD *)buf = 136447234;
                      *(_QWORD *)&buf[4] = "nw_http1_get_next_idle_connection";
                      *(_WORD *)&buf[12] = 2082;
                      *(_QWORD *)&buf[14] = v1043;
                      *(_WORD *)&buf[22] = 2080;
                      v1061 = (uint64_t)" ";
                      *(_WORD *)v1062 = 1024;
                      *(_DWORD *)&v1062[2] = v250;
                      *(_WORD *)&v1062[6] = 2048;
                      *(_QWORD *)&v1062[8] = v248;
                      _os_log_impl(&dword_182FBE000, v249, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> found idle connection connection %p", buf, 0x30u);
                      v247 = v1043;
                      v246 = v248;
                      v244 = v1048;
                    }
                    else
                    {
                      v246 = v248;
                      v244 = v1048;
                      v247 = v1043;
                    }
                  }
                }
              }
              while (v245);
              v11 = v1052;
              v15 = &unk_1ECD84000;
              v243 = v1051;
              if (v246)
              {
                v1044 = v247;
                if ((*(_BYTE *)(v246 + 158) & 1) == 0)
                {
                  if (gLogDatapath)
                  {
                    v770 = v244;
                    v771 = __nwlog_obj();
                    v772 = os_log_type_enabled(v771, OS_LOG_TYPE_DEBUG);
                    v244 = v770;
                    if (v772)
                    {
                      v773 = *(_QWORD *)(v246 + 488);
                      v774 = *(_DWORD *)(*(_QWORD *)(v246 + 480) + 372);
                      v775 = *(_DWORD *)(v246 + 860);
                      if (v773)
                        LODWORD(v773) = *(_DWORD *)(v773 + 424);
                      *(_DWORD *)buf = 136447746;
                      *(_QWORD *)&buf[4] = "nw_http1_remove_idle_connection";
                      *(_WORD *)&buf[12] = 2082;
                      *(_QWORD *)&buf[14] = v246 + 74;
                      *(_WORD *)&buf[22] = 2080;
                      v1061 = (uint64_t)" ";
                      *(_WORD *)v1062 = 1024;
                      *(_DWORD *)&v1062[2] = v774;
                      *(_WORD *)&v1062[6] = 1024;
                      *(_DWORD *)&v1062[8] = v775;
                      *(_WORD *)&v1062[12] = 1024;
                      *(_DWORD *)&v1062[14] = v773;
                      *(_WORD *)&v1062[18] = 2048;
                      *(_QWORD *)&v1062[20] = v246;
                      _os_log_impl(&dword_182FBE000, v771, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> called for connection %p", buf, 0x3Cu);
                      v11 = v1052;
                      v243 = v1051;
                      v244 = v770;
                    }
                  }
                }
                v1049 = v244;
                v251 = (_WORD *)(v246 + 872);
                if (((*(unsigned __int16 *)(v246 + 872) | (*(unsigned __int8 *)(v246 + 874) << 16)) & 0x80000) == 0)
                {
                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                  networkd_settings_init();
                  *(_DWORD *)buf = 136446466;
                  *(_QWORD *)&buf[4] = "nw_http1_remove_idle_connection";
                  *(_WORD *)&buf[12] = 2048;
                  *(_QWORD *)&buf[14] = v246;
                  v252 = (char *)_os_log_send_and_compose_impl();
                  v1075[0] = 16;
                  aBlock[0] = 0;
                  if (!__nwlog_fault(v252, v1075, aBlock))
                    goto LABEL_614;
                  if (v1075[0] == 17)
                  {
                    v253 = __nwlog_obj();
                    v254 = v1075[0];
                    if (!os_log_type_enabled(v253, (os_log_type_t)v1075[0]))
                      goto LABEL_614;
                    *(_DWORD *)buf = 136446466;
                    *(_QWORD *)&buf[4] = "nw_http1_remove_idle_connection";
                    *(_WORD *)&buf[12] = 2048;
                    *(_QWORD *)&buf[14] = v246;
                    v255 = "%{public}s connection %p not in idle list, cannot remove";
                  }
                  else if (aBlock[0])
                  {
                    v338 = (char *)__nw_create_backtrace_string();
                    v253 = __nwlog_obj();
                    v254 = v1075[0];
                    v339 = os_log_type_enabled(v253, (os_log_type_t)v1075[0]);
                    if (v338)
                    {
                      if (v339)
                      {
                        *(_DWORD *)buf = 136446722;
                        *(_QWORD *)&buf[4] = "nw_http1_remove_idle_connection";
                        *(_WORD *)&buf[12] = 2048;
                        *(_QWORD *)&buf[14] = v246;
                        *(_WORD *)&buf[22] = 2082;
                        v1061 = (uint64_t)v338;
                        _os_log_impl(&dword_182FBE000, v253, v254, "%{public}s connection %p not in idle list, cannot remove, dumping backtrace:%{public}s", buf, 0x20u);
                      }
                      free(v338);
                      v243 = v1051;
                      goto LABEL_614;
                    }
                    v243 = v1051;
                    if (!v339)
                    {
LABEL_614:
                      if (v252)
                        free(v252);
                      goto LABEL_644;
                    }
                    *(_DWORD *)buf = 136446466;
                    *(_QWORD *)&buf[4] = "nw_http1_remove_idle_connection";
                    *(_WORD *)&buf[12] = 2048;
                    *(_QWORD *)&buf[14] = v246;
                    v255 = "%{public}s connection %p not in idle list, cannot remove, no backtrace";
                  }
                  else
                  {
                    v253 = __nwlog_obj();
                    v254 = v1075[0];
                    if (!os_log_type_enabled(v253, (os_log_type_t)v1075[0]))
                      goto LABEL_614;
                    *(_DWORD *)buf = 136446466;
                    *(_QWORD *)&buf[4] = "nw_http1_remove_idle_connection";
                    *(_WORD *)&buf[12] = 2048;
                    *(_QWORD *)&buf[14] = v246;
                    v255 = "%{public}s connection %p not in idle list, cannot remove, backtrace limit exceeded";
                  }
                  _os_log_impl(&dword_182FBE000, v253, v254, v255, buf, 0x16u);
                  goto LABEL_614;
                }
                v294 = *(_QWORD *)(v246 + 592);
                v295 = *(_QWORD **)(v246 + 600);
                if (v294)
                {
                  *(_QWORD *)(v294 + 600) = v295;
                  v295 = *(_QWORD **)(v246 + 600);
                }
                else
                {
                  *(_QWORD *)(v11 + 216) = v295;
                }
                *v295 = v294;
                *(_QWORD *)(v246 + 592) = 0;
                *(_QWORD *)(v246 + 600) = 0;
                v340 = *(_DWORD *)(v11 + 340);
                *(_DWORD *)(v11 + 340) = v340 - 1;
                if (v340)
                {
LABEL_638:
                  v385 = (unsigned __int16)*v251;
                  v386 = (v385 | (*(unsigned __int8 *)(v246 + 874) << 16)) & 0xFFF7FFFF;
                  *v251 = v385;
                  *(_BYTE *)(v246 + 874) = BYTE2(v386);
                  if ((*(_BYTE *)(v246 + 158) & 1) == 0)
                  {
                    if (gLogDatapath)
                    {
                      v812 = __nwlog_obj();
                      if (os_log_type_enabled(v812, OS_LOG_TYPE_DEBUG))
                      {
                        v813 = *(_QWORD *)(v246 + 488);
                        v814 = *(_DWORD *)(*(_QWORD *)(v246 + 480) + 372);
                        v815 = *(_DWORD *)(v246 + 860);
                        if (v813)
                          LODWORD(v813) = *(_DWORD *)(v813 + 424);
                        v11 = v1052;
                        v816 = *(_DWORD *)(v1052 + 340);
                        *(_DWORD *)buf = 136448002;
                        *(_QWORD *)&buf[4] = "nw_http1_remove_idle_connection";
                        *(_WORD *)&buf[12] = 2082;
                        *(_QWORD *)&buf[14] = v246 + 74;
                        *(_WORD *)&buf[22] = 2080;
                        v1061 = (uint64_t)" ";
                        *(_WORD *)v1062 = 1024;
                        *(_DWORD *)&v1062[2] = v814;
                        *(_WORD *)&v1062[6] = 1024;
                        *(_DWORD *)&v1062[8] = v815;
                        *(_WORD *)&v1062[12] = 1024;
                        *(_DWORD *)&v1062[14] = v813;
                        *(_WORD *)&v1062[18] = 2048;
                        *(_QWORD *)&v1062[20] = v246;
                        *(_WORD *)&v1062[28] = 1024;
                        *(_DWORD *)&v1062[30] = v816;
                        _os_log_impl(&dword_182FBE000, v812, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> removed idle connection %p, now have %u idle connections", buf, 0x42u);
                        v243 = v1051;
                      }
                    }
                  }
                  if (*(_QWORD *)(v246 + 784))
                  {
                    if ((*(_BYTE *)(v246 + 158) & 1) == 0)
                    {
                      if (gLogDatapath)
                      {
                        v831 = __nwlog_obj();
                        if (os_log_type_enabled(v831, OS_LOG_TYPE_DEBUG))
                        {
                          v832 = *(_QWORD *)(v246 + 488);
                          v833 = *(_DWORD *)(*(_QWORD *)(v246 + 480) + 372);
                          v834 = *(_DWORD *)(v246 + 860);
                          if (v832)
                            LODWORD(v832) = *(_DWORD *)(v832 + 424);
                          *(_DWORD *)buf = 136447746;
                          *(_QWORD *)&buf[4] = "nw_http1_remove_idle_connection";
                          *(_WORD *)&buf[12] = 2082;
                          *(_QWORD *)&buf[14] = v246 + 74;
                          *(_WORD *)&buf[22] = 2080;
                          v1061 = (uint64_t)" ";
                          *(_WORD *)v1062 = 1024;
                          *(_DWORD *)&v1062[2] = v833;
                          *(_WORD *)&v1062[6] = 1024;
                          *(_DWORD *)&v1062[8] = v834;
                          *(_WORD *)&v1062[12] = 1024;
                          *(_DWORD *)&v1062[14] = v832;
                          *(_WORD *)&v1062[18] = 2048;
                          *(_QWORD *)&v1062[20] = v246;
                          _os_log_impl(&dword_182FBE000, v831, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> deactivating destroy timer for connection %p", buf, 0x3Cu);
                          v11 = v1052;
                          v243 = v1051;
                        }
                      }
                    }
                    nw_queue_cancel_source(*(_QWORD *)(v246 + 784), v242);
                    *(_QWORD *)(v246 + 784) = 0;
                  }
LABEL_644:
                  if ((*(_BYTE *)(v11 + 158) & 1) == 0)
                  {
                    if (gLogDatapath)
                    {
                      v776 = __nwlog_obj();
                      if (os_log_type_enabled(v776, OS_LOG_TYPE_DEBUG))
                      {
                        v777 = *(_DWORD *)(v11 + 372);
                        v778 = *(_DWORD *)(v243 + 424);
                        *(_DWORD *)buf = 136447490;
                        *(_QWORD *)&buf[4] = "nw_http1_remove_pending_stream";
                        *(_WORD *)&buf[12] = 2082;
                        *(_QWORD *)&buf[14] = v1044;
                        *(_WORD *)&buf[22] = 2080;
                        v1061 = (uint64_t)" ";
                        *(_WORD *)v1062 = 1024;
                        *(_DWORD *)&v1062[2] = v777;
                        *(_WORD *)&v1062[6] = 1024;
                        *(_DWORD *)&v1062[8] = v778;
                        *(_WORD *)&v1062[12] = 2048;
                        *(_QWORD *)&v1062[14] = v243;
                        _os_log_impl(&dword_182FBE000, v776, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> called for stream %u (%p)", buf, 0x36u);
                      }
                    }
                  }
                  if ((*(_WORD *)(v243 + 428) & 0x1000) == 0)
                  {
                    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                    networkd_settings_init();
                    *(_DWORD *)buf = 136446466;
                    *(_QWORD *)&buf[4] = "nw_http1_remove_pending_stream";
                    *(_WORD *)&buf[12] = 2048;
                    *(_QWORD *)&buf[14] = v243;
                    v387 = (char *)_os_log_send_and_compose_impl();
                    v1075[0] = 16;
                    aBlock[0] = 0;
                    if (!__nwlog_fault(v387, v1075, aBlock))
                      goto LABEL_674;
                    if (v1075[0] == 17)
                    {
                      v388 = __nwlog_obj();
                      v389 = v1075[0];
                      if (!os_log_type_enabled(v388, (os_log_type_t)v1075[0]))
                        goto LABEL_674;
                      *(_DWORD *)buf = 136446466;
                      *(_QWORD *)&buf[4] = "nw_http1_remove_pending_stream";
                      *(_WORD *)&buf[12] = 2048;
                      *(_QWORD *)&buf[14] = v243;
                      v390 = "%{public}s stream %p not in pending list, cannot remove";
                    }
                    else if (aBlock[0])
                    {
                      v393 = (char *)__nw_create_backtrace_string();
                      v388 = __nwlog_obj();
                      v389 = v1075[0];
                      v394 = os_log_type_enabled(v388, (os_log_type_t)v1075[0]);
                      if (v393)
                      {
                        if (v394)
                        {
                          *(_DWORD *)buf = 136446722;
                          *(_QWORD *)&buf[4] = "nw_http1_remove_pending_stream";
                          *(_WORD *)&buf[12] = 2048;
                          *(_QWORD *)&buf[14] = v1051;
                          *(_WORD *)&buf[22] = 2082;
                          v1061 = (uint64_t)v393;
                          _os_log_impl(&dword_182FBE000, v388, v389, "%{public}s stream %p not in pending list, cannot remove, dumping backtrace:%{public}s", buf, 0x20u);
                        }
                        free(v393);
                        v243 = v1051;
                        goto LABEL_674;
                      }
                      v243 = v1051;
                      if (!v394)
                      {
LABEL_674:
                        if (v387)
                          free(v387);
                        goto LABEL_686;
                      }
                      *(_DWORD *)buf = 136446466;
                      *(_QWORD *)&buf[4] = "nw_http1_remove_pending_stream";
                      *(_WORD *)&buf[12] = 2048;
                      *(_QWORD *)&buf[14] = v1051;
                      v390 = "%{public}s stream %p not in pending list, cannot remove, no backtrace";
                    }
                    else
                    {
                      v388 = __nwlog_obj();
                      v389 = v1075[0];
                      if (!os_log_type_enabled(v388, (os_log_type_t)v1075[0]))
                        goto LABEL_674;
                      *(_DWORD *)buf = 136446466;
                      *(_QWORD *)&buf[4] = "nw_http1_remove_pending_stream";
                      *(_WORD *)&buf[12] = 2048;
                      *(_QWORD *)&buf[14] = v243;
                      v390 = "%{public}s stream %p not in pending list, cannot remove, backtrace limit exceeded";
                    }
                    _os_log_impl(&dword_182FBE000, v388, v389, v390, buf, 0x16u);
                    goto LABEL_674;
                  }
                  v391 = *(_QWORD *)(v243 + 296);
                  v392 = *(_QWORD **)(v243 + 304);
                  if (v391)
                  {
                    *(_QWORD *)(v391 + 304) = v392;
                    v392 = *(_QWORD **)(v243 + 304);
                  }
                  else
                  {
                    *(_QWORD *)(v11 + 256) = v392;
                  }
                  *v392 = v391;
                  *(_QWORD *)(v243 + 296) = 0;
                  *(_QWORD *)(v243 + 304) = 0;
                  v395 = *(_DWORD *)(v11 + 348);
                  *(_DWORD *)(v11 + 348) = v395 - 1;
                  if (v395)
                  {
LABEL_684:
                    *(_WORD *)(v243 + 428) &= ~0x1000u;
                    if ((*(_BYTE *)(v243 + 158) & 1) == 0)
                    {
                      if (gLogDatapath)
                      {
                        v817 = __nwlog_obj();
                        if (os_log_type_enabled(v817, OS_LOG_TYPE_DEBUG))
                        {
                          v818 = v243 + 74;
                          v819 = *(_QWORD *)(v243 + 256);
                          v820 = *(_DWORD *)(*(_QWORD *)(v243 + 248) + 372);
                          if (v819)
                            LODWORD(v819) = *(_DWORD *)(v819 + 860);
                          v243 = v1051;
                          v821 = *(_DWORD *)(v1051 + 424);
                          v11 = v1052;
                          v822 = *(_DWORD *)(v1052 + 348);
                          *(_DWORD *)buf = 136448258;
                          *(_QWORD *)&buf[4] = "nw_http1_remove_pending_stream";
                          *(_WORD *)&buf[12] = 2082;
                          *(_QWORD *)&buf[14] = v818;
                          *(_WORD *)&buf[22] = 2080;
                          v1061 = (uint64_t)" ";
                          *(_WORD *)v1062 = 1024;
                          *(_DWORD *)&v1062[2] = v820;
                          *(_WORD *)&v1062[6] = 1024;
                          *(_DWORD *)&v1062[8] = v819;
                          *(_WORD *)&v1062[12] = 1024;
                          *(_DWORD *)&v1062[14] = v821;
                          *(_WORD *)&v1062[18] = 1024;
                          *(_DWORD *)&v1062[20] = v821;
                          *(_WORD *)&v1062[24] = 2048;
                          *(_QWORD *)&v1062[26] = v1051;
                          *(_WORD *)&v1062[34] = 1024;
                          *(_DWORD *)&v1062[36] = v822;
                          _os_log_impl(&dword_182FBE000, v817, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> removed pending stream %u (%p), now have %u pending streams", buf, 0x48u);
                        }
                      }
                    }
LABEL_686:
                    if (*(_QWORD *)(v243 + 248))
                    {
                      if (!*(_QWORD *)(v246 + 488))
                      {
                        *(_QWORD *)(v243 + 256) = v246;
                        *(_QWORD *)(v246 + 488) = v243;
                        nw_protocol_set_output_handler(v243, *(_QWORD *)(v246 + 32));
                        nw_protocol_set_input_handler(v246, *(_QWORD *)(v243 + 48));
                        *(_OWORD *)v243 = *(_OWORD *)v246;
                        v413 = v1049[5];
                        v415 = v1049[2];
                        v414 = v1049[3];
                        *(_OWORD *)(v246 + 128) = v1049[4];
                        *(_OWORD *)(v246 + 144) = v413;
                        *(_OWORD *)(v246 + 96) = v415;
                        *(_OWORD *)(v246 + 112) = v414;
                        v416 = v1049[1];
                        *(_OWORD *)(v246 + 64) = *v1049;
                        *(_OWORD *)(v246 + 80) = v416;
                        nw_http_transaction_metadata_set_connection_metadata(*(void **)(v243 + 352), *(void **)(v246 + 768));
                        *v251 &= 0xFFD7u;
                        *(_DWORD *)(v246 + 864) = 1;
                        if ((*(_BYTE *)(v246 + 158) & 1) == 0)
                        {
                          v417 = __nwlog_obj();
                          if (os_log_type_enabled(v417, OS_LOG_TYPE_DEBUG))
                          {
                            v418 = *(_QWORD *)(v246 + 488);
                            v419 = *(_DWORD *)(*(_QWORD *)(v246 + 480) + 372);
                            v420 = *(_DWORD *)(v246 + 860);
                            if (v418)
                              LODWORD(v418) = *(_DWORD *)(v418 + 424);
                            *(_DWORD *)buf = 136447490;
                            *(_QWORD *)&buf[4] = "nw_http1_update_connection_input_state";
                            *(_WORD *)&buf[12] = 2082;
                            *(_QWORD *)&buf[14] = v246 + 74;
                            *(_WORD *)&buf[22] = 2080;
                            v1061 = (uint64_t)" ";
                            *(_WORD *)v1062 = 1024;
                            *(_DWORD *)&v1062[2] = v419;
                            *(_WORD *)&v1062[6] = 1024;
                            *(_DWORD *)&v1062[8] = v420;
                            *(_WORD *)&v1062[12] = 1024;
                            *(_DWORD *)&v1062[14] = v418;
                            _os_log_impl(&dword_182FBE000, v417, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> connection input state: reading", buf, 0x32u);
                          }
                        }
                        if ((*(_BYTE *)(v243 + 158) & 1) == 0)
                        {
                          v421 = __nwlog_obj();
                          if (os_log_type_enabled(v421, OS_LOG_TYPE_INFO))
                          {
                            v422 = *(_QWORD *)(v243 + 256);
                            v423 = *(_DWORD *)(*(_QWORD *)(v243 + 248) + 372);
                            if (v422)
                              LODWORD(v422) = *(_DWORD *)(v422 + 860);
                            v424 = *(_DWORD *)(v243 + 424);
                            *(_DWORD *)buf = 136448002;
                            *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                            *(_WORD *)&buf[12] = 2082;
                            *(_QWORD *)&buf[14] = v243 + 74;
                            *(_WORD *)&buf[22] = 2080;
                            v1061 = (uint64_t)" ";
                            *(_WORD *)v1062 = 1024;
                            *(_DWORD *)&v1062[2] = v423;
                            *(_WORD *)&v1062[6] = 1024;
                            *(_DWORD *)&v1062[8] = v422;
                            *(_WORD *)&v1062[12] = 1024;
                            *(_DWORD *)&v1062[14] = v424;
                            *(_WORD *)&v1062[18] = 2048;
                            *(_QWORD *)&v1062[20] = v243;
                            *(_WORD *)&v1062[28] = 2048;
                            *(_QWORD *)&v1062[30] = v246;
                            _os_log_impl(&dword_182FBE000, v421, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s<i%u:c%u:s%u> stream (%p) now using connection %p", buf, 0x46u);
                          }
                        }
                        goto LABEL_714;
                      }
                      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                      networkd_settings_init();
                      v407 = *(_QWORD *)(v246 + 488);
                      *(_DWORD *)buf = 136446722;
                      *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                      *(_WORD *)&buf[12] = 2048;
                      *(_QWORD *)&buf[14] = v246;
                      *(_WORD *)&buf[22] = 2048;
                      v1061 = v407;
                      v408 = (char *)_os_log_send_and_compose_impl();
                      v1075[0] = 16;
                      aBlock[0] = 0;
                      if (__nwlog_fault(v408, v1075, aBlock))
                      {
                        if (v1075[0] == 17)
                        {
                          v409 = __nwlog_obj();
                          v410 = v1075[0];
                          if (!os_log_type_enabled(v409, (os_log_type_t)v1075[0]))
                            goto LABEL_712;
                          v411 = *(_QWORD *)(v246 + 488);
                          *(_DWORD *)buf = 136446722;
                          *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                          *(_WORD *)&buf[12] = 2048;
                          *(_QWORD *)&buf[14] = v246;
                          *(_WORD *)&buf[22] = 2048;
                          v1061 = v411;
                          v412 = "%{public}s Connection %p already has a stream (%p)";
                          goto LABEL_711;
                        }
                        if (!aBlock[0])
                        {
                          v409 = __nwlog_obj();
                          v410 = v1075[0];
                          if (!os_log_type_enabled(v409, (os_log_type_t)v1075[0]))
                            goto LABEL_712;
                          v428 = *(_QWORD *)(v246 + 488);
                          *(_DWORD *)buf = 136446722;
                          *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                          *(_WORD *)&buf[12] = 2048;
                          *(_QWORD *)&buf[14] = v246;
                          *(_WORD *)&buf[22] = 2048;
                          v1061 = v428;
                          v412 = "%{public}s Connection %p already has a stream (%p), backtrace limit exceeded";
                          goto LABEL_711;
                        }
                        v425 = (char *)__nw_create_backtrace_string();
                        v409 = __nwlog_obj();
                        v410 = v1075[0];
                        v426 = os_log_type_enabled(v409, (os_log_type_t)v1075[0]);
                        if (v425)
                        {
                          if (v426)
                          {
                            v427 = *(_QWORD *)(v246 + 488);
                            *(_DWORD *)buf = 136446978;
                            *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                            *(_WORD *)&buf[12] = 2048;
                            *(_QWORD *)&buf[14] = v246;
                            *(_WORD *)&buf[22] = 2048;
                            v1061 = v427;
                            *(_WORD *)v1062 = 2082;
                            *(_QWORD *)&v1062[2] = v425;
                            _os_log_impl(&dword_182FBE000, v409, v410, "%{public}s Connection %p already has a stream (%p), dumping backtrace:%{public}s", buf, 0x2Au);
                          }
                          free(v425);
                          v243 = v1051;
                          goto LABEL_712;
                        }
                        v243 = v1051;
                        if (v426)
                        {
                          v429 = *(_QWORD *)(v246 + 488);
                          *(_DWORD *)buf = 136446722;
                          *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                          *(_WORD *)&buf[12] = 2048;
                          *(_QWORD *)&buf[14] = v246;
                          *(_WORD *)&buf[22] = 2048;
                          v1061 = v429;
                          v412 = "%{public}s Connection %p already has a stream (%p), no backtrace";
LABEL_711:
                          _os_log_impl(&dword_182FBE000, v409, v410, v412, buf, 0x20u);
                        }
                      }
LABEL_712:
                      if (v408)
                        free(v408);
LABEL_714:
                      *(_WORD *)(v243 + 428) |= 0x4000u;
                      v430 = *(void **)(v243 + 352);
                      *(_QWORD *)buf = MEMORY[0x1E0C809B0];
                      *(_QWORD *)&buf[8] = 0x40000000;
                      *(_QWORD *)&buf[16] = ___ZL50nw_http1_match_idle_connection_with_pending_streamP17nw_protocol_http1_block_invoke;
                      v1061 = (uint64_t)&__block_descriptor_tmp_52_39794;
                      *(_QWORD *)v1062 = v243;
                      nw_http_transaction_metadata_set_event_handler(v430, buf);
                      nw_protocol_connected(*(_QWORD **)(v243 + 48), v243);
                      goto LABEL_715;
                    }
                    __nwlog_obj();
                    *(_DWORD *)buf = 136446210;
                    *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                    v766 = (char *)_os_log_send_and_compose_impl();
                    v1075[0] = 16;
                    aBlock[0] = 0;
                    if (__nwlog_fault(v766, v1075, aBlock))
                    {
                      if (v1075[0] == 17)
                      {
                        v767 = __nwlog_obj();
                        v768 = v1075[0];
                        if (os_log_type_enabled(v767, (os_log_type_t)v1075[0]))
                        {
                          *(_DWORD *)buf = 136446210;
                          *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                          v769 = "%{public}s called with null http1_stream->protocol_http1";
LABEL_1447:
                          _os_log_impl(&dword_182FBE000, v767, v768, v769, buf, 0xCu);
                        }
                      }
                      else if (aBlock[0])
                      {
                        v823 = (char *)__nw_create_backtrace_string();
                        v767 = __nwlog_obj();
                        v768 = v1075[0];
                        v824 = os_log_type_enabled(v767, (os_log_type_t)v1075[0]);
                        if (v823)
                        {
                          if (v824)
                          {
                            *(_DWORD *)buf = 136446466;
                            *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                            *(_WORD *)&buf[12] = 2082;
                            *(_QWORD *)&buf[14] = v823;
                            _os_log_impl(&dword_182FBE000, v767, v768, "%{public}s called with null http1_stream->protocol_http1, dumping backtrace:%{public}s", buf, 0x16u);
                          }
                          free(v823);
                          goto LABEL_1448;
                        }
                        if (v824)
                        {
                          *(_DWORD *)buf = 136446210;
                          *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                          v769 = "%{public}s called with null http1_stream->protocol_http1, no backtrace";
                          goto LABEL_1447;
                        }
                      }
                      else
                      {
                        v767 = __nwlog_obj();
                        v768 = v1075[0];
                        if (os_log_type_enabled(v767, (os_log_type_t)v1075[0]))
                        {
                          *(_DWORD *)buf = 136446210;
                          *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                          v769 = "%{public}s called with null http1_stream->protocol_http1, backtrace limit exceeded";
                          goto LABEL_1447;
                        }
                      }
                    }
LABEL_1448:
                    if (v766)
                      free(v766);
                    v11 = v1052;
                    v243 = v1051;
                    goto LABEL_714;
                  }
                  __nwlog_obj();
                  v396 = *(unsigned int *)(v11 + 348);
                  *(_DWORD *)buf = 136446978;
                  *(_QWORD *)&buf[4] = "nw_http1_remove_pending_stream";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = "http1->pending_stream_count";
                  *(_WORD *)&buf[22] = 2048;
                  v1061 = 1;
                  *(_WORD *)v1062 = 2048;
                  *(_QWORD *)&v1062[2] = v396;
                  v397 = (char *)_os_log_send_and_compose_impl();
                  v1075[0] = 16;
                  aBlock[0] = 0;
                  if (__nwlog_fault(v397, v1075, aBlock))
                  {
                    if (v1075[0] == 17)
                    {
                      v398 = __nwlog_obj();
                      v399 = v1075[0];
                      if (os_log_type_enabled(v398, (os_log_type_t)v1075[0]))
                      {
                        v400 = *(unsigned int *)(v1052 + 348);
                        *(_DWORD *)buf = 136446978;
                        *(_QWORD *)&buf[4] = "nw_http1_remove_pending_stream";
                        *(_WORD *)&buf[12] = 2082;
                        *(_QWORD *)&buf[14] = "http1->pending_stream_count";
                        *(_WORD *)&buf[22] = 2048;
                        v1061 = 1;
                        *(_WORD *)v1062 = 2048;
                        *(_QWORD *)&v1062[2] = v400;
                        v401 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu";
LABEL_680:
                        _os_log_impl(&dword_182FBE000, v398, v399, v401, buf, 0x2Au);
                      }
                    }
                    else if (aBlock[0])
                    {
                      v402 = (char *)__nw_create_backtrace_string();
                      v398 = __nwlog_obj();
                      v399 = v1075[0];
                      v403 = os_log_type_enabled(v398, (os_log_type_t)v1075[0]);
                      if (v402)
                      {
                        if (v403)
                        {
                          v404 = *(unsigned int *)(v1052 + 348);
                          *(_DWORD *)buf = 136447234;
                          *(_QWORD *)&buf[4] = "nw_http1_remove_pending_stream";
                          *(_WORD *)&buf[12] = 2082;
                          *(_QWORD *)&buf[14] = "http1->pending_stream_count";
                          *(_WORD *)&buf[22] = 2048;
                          v1061 = 1;
                          *(_WORD *)v1062 = 2048;
                          *(_QWORD *)&v1062[2] = v404;
                          *(_WORD *)&v1062[10] = 2082;
                          *(_QWORD *)&v1062[12] = v402;
                          _os_log_impl(&dword_182FBE000, v398, v399, "%{public}s Underflow: %{public}s, decrement %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
                        }
                        free(v402);
                        v243 = v1051;
                        goto LABEL_681;
                      }
                      v243 = v1051;
                      if (v403)
                      {
                        v406 = *(unsigned int *)(v1052 + 348);
                        *(_DWORD *)buf = 136446978;
                        *(_QWORD *)&buf[4] = "nw_http1_remove_pending_stream";
                        *(_WORD *)&buf[12] = 2082;
                        *(_QWORD *)&buf[14] = "http1->pending_stream_count";
                        *(_WORD *)&buf[22] = 2048;
                        v1061 = 1;
                        *(_WORD *)v1062 = 2048;
                        *(_QWORD *)&v1062[2] = v406;
                        v401 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, no backtrace";
                        goto LABEL_680;
                      }
                    }
                    else
                    {
                      v398 = __nwlog_obj();
                      v399 = v1075[0];
                      if (os_log_type_enabled(v398, (os_log_type_t)v1075[0]))
                      {
                        v405 = *(unsigned int *)(v1052 + 348);
                        *(_DWORD *)buf = 136446978;
                        *(_QWORD *)&buf[4] = "nw_http1_remove_pending_stream";
                        *(_WORD *)&buf[12] = 2082;
                        *(_QWORD *)&buf[14] = "http1->pending_stream_count";
                        *(_WORD *)&buf[22] = 2048;
                        v1061 = 1;
                        *(_WORD *)v1062 = 2048;
                        *(_QWORD *)&v1062[2] = v405;
                        v401 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, backtrace limit exceeded";
                        goto LABEL_680;
                      }
                    }
                  }
LABEL_681:
                  if (v397)
                    free(v397);
                  v11 = v1052;
                  *(_DWORD *)(v1052 + 348) = 0;
                  goto LABEL_684;
                }
                __nwlog_obj();
                v341 = *(unsigned int *)(v11 + 340);
                *(_DWORD *)buf = 136446978;
                *(_QWORD *)&buf[4] = "nw_http1_remove_idle_connection";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = "http1->idle_connections_count";
                *(_WORD *)&buf[22] = 2048;
                v1061 = 1;
                *(_WORD *)v1062 = 2048;
                *(_QWORD *)&v1062[2] = v341;
                v342 = (char *)_os_log_send_and_compose_impl();
                v1075[0] = 16;
                aBlock[0] = 0;
                if (__nwlog_fault(v342, v1075, aBlock))
                {
                  if (v1075[0] == 17)
                  {
                    v343 = __nwlog_obj();
                    v344 = v1075[0];
                    if (os_log_type_enabled(v343, (os_log_type_t)v1075[0]))
                    {
                      v345 = *(unsigned int *)(v1052 + 340);
                      *(_DWORD *)buf = 136446978;
                      *(_QWORD *)&buf[4] = "nw_http1_remove_idle_connection";
                      *(_WORD *)&buf[12] = 2082;
                      *(_QWORD *)&buf[14] = "http1->idle_connections_count";
                      *(_WORD *)&buf[22] = 2048;
                      v1061 = 1;
                      *(_WORD *)v1062 = 2048;
                      *(_QWORD *)&v1062[2] = v345;
                      v346 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu";
LABEL_634:
                      _os_log_impl(&dword_182FBE000, v343, v344, v346, buf, 0x2Au);
                    }
                  }
                  else if (aBlock[0])
                  {
                    v366 = (char *)__nw_create_backtrace_string();
                    v343 = __nwlog_obj();
                    v344 = v1075[0];
                    v367 = os_log_type_enabled(v343, (os_log_type_t)v1075[0]);
                    if (v366)
                    {
                      if (v367)
                      {
                        v368 = *(unsigned int *)(v1052 + 340);
                        *(_DWORD *)buf = 136447234;
                        *(_QWORD *)&buf[4] = "nw_http1_remove_idle_connection";
                        *(_WORD *)&buf[12] = 2082;
                        *(_QWORD *)&buf[14] = "http1->idle_connections_count";
                        *(_WORD *)&buf[22] = 2048;
                        v1061 = 1;
                        *(_WORD *)v1062 = 2048;
                        *(_QWORD *)&v1062[2] = v368;
                        *(_WORD *)&v1062[10] = 2082;
                        *(_QWORD *)&v1062[12] = v366;
                        _os_log_impl(&dword_182FBE000, v343, v344, "%{public}s Underflow: %{public}s, decrement %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
                      }
                      free(v366);
                      v243 = v1051;
                      goto LABEL_635;
                    }
                    v243 = v1051;
                    if (v367)
                    {
                      v384 = *(unsigned int *)(v1052 + 340);
                      *(_DWORD *)buf = 136446978;
                      *(_QWORD *)&buf[4] = "nw_http1_remove_idle_connection";
                      *(_WORD *)&buf[12] = 2082;
                      *(_QWORD *)&buf[14] = "http1->idle_connections_count";
                      *(_WORD *)&buf[22] = 2048;
                      v1061 = 1;
                      *(_WORD *)v1062 = 2048;
                      *(_QWORD *)&v1062[2] = v384;
                      v346 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, no backtrace";
                      goto LABEL_634;
                    }
                  }
                  else
                  {
                    v343 = __nwlog_obj();
                    v344 = v1075[0];
                    if (os_log_type_enabled(v343, (os_log_type_t)v1075[0]))
                    {
                      v380 = *(unsigned int *)(v1052 + 340);
                      *(_DWORD *)buf = 136446978;
                      *(_QWORD *)&buf[4] = "nw_http1_remove_idle_connection";
                      *(_WORD *)&buf[12] = 2082;
                      *(_QWORD *)&buf[14] = "http1->idle_connections_count";
                      *(_WORD *)&buf[22] = 2048;
                      v1061 = 1;
                      *(_WORD *)v1062 = 2048;
                      *(_QWORD *)&v1062[2] = v380;
                      v346 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, backtrace limit exceeded";
                      goto LABEL_634;
                    }
                  }
                }
LABEL_635:
                if (v342)
                  free(v342);
                v11 = v1052;
                *(_DWORD *)(v1052 + 340) = 0;
                goto LABEL_638;
              }
            }
            if ((*(_BYTE *)(v11 + 158) & 1) == 0)
            {
              if (v15[1345])
              {
                v758 = v244;
                v759 = __nwlog_obj();
                v760 = os_log_type_enabled(v759, OS_LOG_TYPE_DEBUG);
                v244 = v758;
                if (v760)
                {
                  v761 = *(_DWORD *)(v11 + 372);
                  *(_DWORD *)buf = 136446978;
                  *(_QWORD *)&buf[4] = "nw_http1_get_next_idle_connection";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = v11 + 74;
                  *(_WORD *)&buf[22] = 2080;
                  v1061 = (uint64_t)" ";
                  *(_WORD *)v1062 = 1024;
                  *(_DWORD *)&v1062[2] = v761;
                  _os_log_impl(&dword_182FBE000, v759, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> no idle connections", buf, 0x26u);
                  v244 = v758;
                }
              }
            }
            if (*(_QWORD *)(v243 + 256))
            {
              if ((*(_BYTE *)(v243 + 158) & 1) != 0)
                goto LABEL_450;
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v256 = gLogObj;
              if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
                goto LABEL_450;
              v257 = *(_QWORD *)(v243 + 256);
              v258 = *(_DWORD *)(*(_QWORD *)(v243 + 248) + 372);
              if (v257)
                LODWORD(v257) = *(_DWORD *)(v257 + 860);
              v259 = *(_DWORD *)(v243 + 424);
              *(_DWORD *)buf = 136447490;
              *(_QWORD *)&buf[4] = "nw_http1_create_connection_for_stream_if_allowed";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v243 + 74;
              *(_WORD *)&buf[22] = 2080;
              v1061 = (uint64_t)" ";
              *(_WORD *)v1062 = 1024;
              *(_DWORD *)&v1062[2] = v258;
              *(_WORD *)&v1062[6] = 1024;
              *(_DWORD *)&v1062[8] = v257;
              *(_WORD *)&v1062[12] = 1024;
              *(_DWORD *)&v1062[14] = v259;
              v260 = "%{public}s %{public}s%s<i%u:c%u:s%u> stream already has current connection, ignoring";
              v261 = v256;
              v262 = 50;
LABEL_449:
              _os_log_impl(&dword_182FBE000, v261, OS_LOG_TYPE_DEBUG, v260, buf, v262);
LABEL_450:
              if ((*(_BYTE *)(v11 + 158) & 1) != 0)
                goto LABEL_715;
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v263 = gLogObj;
              if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
                goto LABEL_715;
              v264 = *(_DWORD *)(v11 + 372);
              *(_DWORD *)buf = 136446978;
              *(_QWORD *)&buf[4] = "nw_http1_match_idle_connection_with_pending_stream";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v11 + 74;
              *(_WORD *)&buf[22] = 2080;
              v1061 = (uint64_t)" ";
              *(_WORD *)v1062 = 1024;
              *(_DWORD *)&v1062[2] = v264;
              v265 = "%{public}s %{public}s%s<i%u> cannot make new connection, waiting for other requests to finish";
              goto LABEL_456;
            }
            v1050 = v244;
            if ((*(_WORD *)(v243 + 428) & 8) == 0)
            {
              if (*(_DWORD *)(v11 + 336) + *(_DWORD *)(v11 + 352) >= (*(_DWORD *)(v11 + 368)
                                                                                   + *(_DWORD *)(v11 + 364)))
              {
                if ((*(_BYTE *)(v243 + 158) & 1) != 0)
                  goto LABEL_450;
                v353 = __nwlog_obj();
                if (!os_log_type_enabled(v353, OS_LOG_TYPE_DEBUG))
                  goto LABEL_450;
                v354 = *(_QWORD *)(v243 + 256);
                v355 = *(_DWORD *)(*(_QWORD *)(v243 + 248) + 372);
                if (v354)
                  LODWORD(v354) = *(_DWORD *)(v354 + 860);
                v356 = *(_DWORD *)(v243 + 424);
                v357 = *(_DWORD *)(v11 + 364);
                *(_DWORD *)buf = 136447746;
                *(_QWORD *)&buf[4] = "nw_http1_create_connection_for_stream_if_allowed";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = v243 + 74;
                *(_WORD *)&buf[22] = 2080;
                v1061 = (uint64_t)" ";
                *(_WORD *)v1062 = 1024;
                *(_DWORD *)&v1062[2] = v355;
                *(_WORD *)&v1062[6] = 1024;
                *(_DWORD *)&v1062[8] = v354;
                *(_WORD *)&v1062[12] = 1024;
                *(_DWORD *)&v1062[14] = v356;
                *(_WORD *)&v1062[18] = 1024;
                *(_DWORD *)&v1062[20] = v357;
                v260 = "%{public}s %{public}s%s<i%u:c%u:s%u> already at max connection width %u, cannot create new connection";
                v261 = v353;
                v262 = 56;
                goto LABEL_449;
              }
              if ((*(_BYTE *)(v243 + 158) & 1) == 0)
              {
                if (v15[1345])
                {
                  v876 = __nwlog_obj();
                  if (os_log_type_enabled(v876, OS_LOG_TYPE_DEBUG))
                  {
                    v877 = v243 + 74;
                    v878 = *(_QWORD *)(v243 + 256);
                    v879 = *(_DWORD *)(*(_QWORD *)(v243 + 248) + 372);
                    if (v878)
                      LODWORD(v878) = *(_DWORD *)(v878 + 860);
                    v243 = v1051;
                    v880 = *(_DWORD *)(v1051 + 424);
                    *(_DWORD *)buf = 136447490;
                    *(_QWORD *)&buf[4] = "nw_http1_create_connection_for_stream_if_allowed";
                    *(_WORD *)&buf[12] = 2082;
                    *(_QWORD *)&buf[14] = v877;
                    *(_WORD *)&buf[22] = 2080;
                    v1061 = (uint64_t)" ";
                    *(_WORD *)v1062 = 1024;
                    *(_DWORD *)&v1062[2] = v879;
                    *(_WORD *)&v1062[6] = 1024;
                    *(_DWORD *)&v1062[8] = v878;
                    *(_WORD *)&v1062[12] = 1024;
                    *(_DWORD *)&v1062[14] = v880;
                    _os_log_impl(&dword_182FBE000, v876, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> width allows new connection, creating", buf, 0x32u);
                    v11 = v1052;
                    v15 = (_BYTE *)&unk_1ECD84000;
                  }
                }
              }
              if ((*(_WORD *)(v243 + 428) & 0x1000) == 0)
              {
LABEL_1016:
                if (*(_QWORD *)(v243 + 32))
                {
                  if ((*(_BYTE *)(v243 + 158) & 1) == 0)
                  {
                    if (v15[1345])
                    {
                      v897 = __nwlog_obj();
                      if (os_log_type_enabled(v897, OS_LOG_TYPE_DEBUG))
                      {
                        v898 = v243 + 74;
                        v899 = *(_QWORD *)(v243 + 256);
                        v900 = *(_DWORD *)(*(_QWORD *)(v243 + 248) + 372);
                        if (v899)
                          LODWORD(v899) = *(_DWORD *)(v899 + 860);
                        v243 = v1051;
                        v901 = *(_DWORD *)(v1051 + 424);
                        v902 = *(_QWORD *)(v1051 + 32);
                        *(_DWORD *)buf = 136447746;
                        *(_QWORD *)&buf[4] = "nw_http1_establish_new_connection_for_stream";
                        *(_WORD *)&buf[12] = 2082;
                        *(_QWORD *)&buf[14] = v898;
                        *(_WORD *)&buf[22] = 2080;
                        v1061 = (uint64_t)" ";
                        *(_WORD *)v1062 = 1024;
                        *(_DWORD *)&v1062[2] = v900;
                        *(_WORD *)&v1062[6] = 1024;
                        *(_DWORD *)&v1062[8] = v899;
                        *(_WORD *)&v1062[12] = 1024;
                        *(_DWORD *)&v1062[14] = v901;
                        *(_WORD *)&v1062[18] = 2048;
                        *(_QWORD *)&v1062[20] = v902;
                        _os_log_impl(&dword_182FBE000, v897, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> using already established output handler %p", buf, 0x3Cu);
                        v15 = (_BYTE *)&unk_1ECD84000;
                      }
                    }
                  }
                  log = *(_OWORD **)(v243 + 32);
                  if (log)
                  {
                    v620 = *(void **)(v243 + 336);
                    if (v620)
                    {
                      v621 = *(void **)(v243 + 320);
                      if (v621)
                      {
                        v622 = malloc_type_calloc(1uLL, 0x370uLL, 0xEAFB8F1AuLL);
                        if (v622)
                          goto LABEL_1023;
                        v910 = __nwlog_obj();
                        os_log_type_enabled(v910, OS_LOG_TYPE_ERROR);
                        *(_DWORD *)buf = 136446722;
                        *(_QWORD *)&buf[4] = "strict_calloc";
                        *(_WORD *)&buf[12] = 2048;
                        *(_QWORD *)&buf[14] = 1;
                        *(_WORD *)&buf[22] = 2048;
                        v1061 = 880;
                        v911 = (void *)_os_log_send_and_compose_impl();
                        result = __nwlog_abort((uint64_t)v911);
                        if (!result)
                        {
                          free(v911);
                          v15 = (_BYTE *)&unk_1ECD84000;
LABEL_1023:
                          bzero(v622, 0x370uLL);
                          if (nw_protocol_http1_identifier::onceToken != -1)
                            dispatch_once(&nw_protocol_http1_identifier::onceToken, &__block_literal_global_39812);
                          *((_QWORD *)v622 + 2) = &nw_protocol_http1_identifier::http1_protocol_identifier;
                          if (nw_protocol_http1_get_callbacks(void)::onceToken[0] != -1)
                            dispatch_once(nw_protocol_http1_get_callbacks(void)::onceToken, &__block_literal_global_17_39614);
                          *((_QWORD *)v622 + 3) = &nw_protocol_http1_get_callbacks(void)::http1_protocol_callbacks;
                          *((_DWORD *)v622 + 46) = 3;
                          *((_QWORD *)v622 + 22) = v622;
                          *((_QWORD *)v622 + 5) = v622 + 10;
                          *((_QWORD *)v622 + 60) = v1052;
                          nw_protocol_set_output_handler((uint64_t)v622, (uint64_t)log);
                          *(_QWORD *)buf = os_retain(v620);
                          nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v622 + 47), buf);
                          *(_QWORD *)buf = os_retain(v621);
                          nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v622 + 46), buf);
                          *(_QWORD *)buf = nw_parameters_copy_context(v621);
                          nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v622 + 31), buf);
                          *((_QWORD *)v622 + 24) = *(_QWORD *)(v1052 + 192);
                          v623 = MEMORY[0x1E0C809B0];
                          v624 = (void *)*((_QWORD *)v622 + 62);
                          *(_QWORD *)v1075 = MEMORY[0x1E0C809B0];
                          *(_QWORD *)&v1075[8] = 0x40000000;
                          *(_QWORD *)&v1075[16] = ___ZL26nw_http1_connection_createP11nw_protocolP17nw_protocol_http1P11nw_endpointP13nw_parameters_block_invoke;
                          v1076 = (uint64_t (*)(uint64_t, uint64_t))&__block_descriptor_tmp_40_39813;
                          v1077 = (void (*)(uint64_t))v622;
                          *(_QWORD *)buf = nw_http_connection_create_metadata(v624, v1075, 0);
                          nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v622 + 48), buf);
                          nw_http_connection_metadata_set_version(*((void **)v622 + 96), 3);
                          nw_http_connection_metadata_set_shared_connection_pool_metadata(*((void **)v622 + 96), *(void **)(v1052 + 312));
                          *((_QWORD *)v622 + 77) = 0;
                          *((_QWORD *)v622 + 78) = (char *)v622 + 616;
                          *((_QWORD *)v622 + 79) = 0;
                          *((_QWORD *)v622 + 80) = (char *)v622 + 632;
                          *((_QWORD *)v622 + 81) = 0;
                          *((_QWORD *)v622 + 82) = (char *)v622 + 648;
                          *((_QWORD *)v622 + 83) = 0;
                          *((_QWORD *)v622 + 84) = (char *)v622 + 664;
                          *((_QWORD *)v622 + 86) = (char *)v622 + 680;
                          *((_QWORD *)v622 + 85) = 0;
                          nw_frame_cache_init((uint64_t)v622 + 696, (uint64_t)v622, 256, 0x40000, 16);
                          v625 = *((_QWORD *)v622 + 60);
                          if (v625)
                          {
                            *(_OWORD *)((char *)v622 + 360) = 0u;
                            *(_OWORD *)((char *)v622 + 376) = 0u;
                            *(_OWORD *)((char *)v622 + 392) = 0u;
                            *(_OWORD *)((char *)v622 + 408) = 0u;
                            *(_OWORD *)((char *)v622 + 424) = 0u;
                            *(_OWORD *)((char *)v622 + 440) = 0u;
                            *(_OWORD *)((char *)v622 + 328) = 0u;
                            *(_OWORD *)((char *)v622 + 344) = 0u;
                            *((_QWORD *)v622 + 59) = nw_http1_on_reset;
                            *((_QWORD *)v622 + 37) = nw_http1_on_message_begin;
                            *((_QWORD *)v622 + 38) = nw_http1_on_url;
                            *((_QWORD *)v622 + 48) = nw_http1_on_message_complete;
                            *((_QWORD *)v622 + 49) = nw_http1_on_url_complete;
                            *((_QWORD *)v622 + 39) = nw_http1_on_status;
                            *((_QWORD *)v622 + 40) = nw_http1_on_method;
                            *((_QWORD *)v622 + 50) = nw_http1_on_status_complete;
                            *((_QWORD *)v622 + 51) = nw_http1_on_method_complete;
                            *((_QWORD *)v622 + 42) = nw_http1_on_header_field;
                            *((_QWORD *)v622 + 43) = nw_http1_on_header_value;
                            *((_QWORD *)v622 + 53) = nw_http1_on_header_field_complete;
                            *((_QWORD *)v622 + 54) = nw_http1_on_header_value_complete;
                            *((_QWORD *)v622 + 46) = nw_http1_on_headers_complete;
                            *((_QWORD *)v622 + 47) = nw_http1_on_body;
                            *((_QWORD *)v622 + 57) = nw_http1_on_chunk_header;
                            *((_QWORD *)v622 + 58) = nw_http1_on_chunk_complete;
                            v626 = *(_BYTE *)(v625 + 376);
                            *(_OWORD *)((char *)v622 + 248) = 0u;
                            *(_OWORD *)((char *)v622 + 200) = 0u;
                            *(_OWORD *)((char *)v622 + 264) = 0u;
                            *(_OWORD *)((char *)v622 + 232) = 0u;
                            *(_OWORD *)((char *)v622 + 216) = 0u;
                            if ((v626 & 1) != 0)
                              v627 = 1;
                            else
                              v627 = 2;
                            *((_BYTE *)v622 + 272) = v627;
                            *((_QWORD *)v622 + 35) = 0;
                            *((_QWORD *)v622 + 36) = (char *)v622 + 296;
                            *((_WORD *)v622 + 139) = 15619;
                            *((_QWORD *)v622 + 31) = v622;
                            *((_QWORD *)v622 + 32) = 238;
                            v628 = v1051;
                            if ((*((_BYTE *)v622 + 158) & 1) == 0)
                            {
                              v629 = __nwlog_obj();
                              if (os_log_type_enabled(v629, OS_LOG_TYPE_DEBUG))
                              {
                                v630 = *((_QWORD *)v622 + 61);
                                v631 = *(_DWORD *)(*((_QWORD *)v622 + 60) + 372);
                                v632 = *((_DWORD *)v622 + 215);
                                if (v630)
                                  LODWORD(v630) = *(_DWORD *)(v630 + 424);
                                *(_DWORD *)buf = 136448258;
                                *(_QWORD *)&buf[4] = "nw_http1_connection_log_parser_version";
                                *(_WORD *)&buf[12] = 2082;
                                *(_QWORD *)&buf[14] = (char *)v622 + 74;
                                *(_WORD *)&buf[22] = 2080;
                                v1061 = (uint64_t)" ";
                                *(_WORD *)v1062 = 1024;
                                *(_DWORD *)&v1062[2] = v631;
                                *(_WORD *)&v1062[6] = 1024;
                                *(_DWORD *)&v1062[8] = v632;
                                *(_WORD *)&v1062[12] = 1024;
                                *(_DWORD *)&v1062[14] = v630;
                                *(_WORD *)&v1062[18] = 1024;
                                *(_DWORD *)&v1062[20] = 9;
                                *(_WORD *)&v1062[24] = 1024;
                                *(_DWORD *)&v1062[26] = 2;
                                *(_WORD *)&v1062[30] = 1024;
                                *(_DWORD *)&v1062[32] = 1;
                                _os_log_impl(&dword_182FBE000, v629, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> using http parser v%u.%u.%u", buf, 0x44u);
                              }
                            }
                            goto LABEL_1036;
                          }
                          __nwlog_obj();
                          *(_DWORD *)buf = 136446210;
                          *(_QWORD *)&buf[4] = "nw_http1_connection_parser_init";
                          v912 = (char *)_os_log_send_and_compose_impl();
                          type[0] = 16;
                          LOBYTE(v1055[0]) = 0;
                          if (__nwlog_fault(v912, type, v1055))
                          {
                            if (type[0] == 17)
                            {
                              v913 = __nwlog_obj();
                              v914 = type[0];
                              if (os_log_type_enabled(v913, (os_log_type_t)type[0]))
                              {
                                *(_DWORD *)buf = 136446210;
                                *(_QWORD *)&buf[4] = "nw_http1_connection_parser_init";
                                v915 = "%{public}s called with null http1_connection->protocol_http1";
LABEL_1802:
                                _os_log_impl(&dword_182FBE000, v913, v914, v915, buf, 0xCu);
                              }
                            }
                            else if (LOBYTE(v1055[0]))
                            {
                              v968 = (char *)__nw_create_backtrace_string();
                              v913 = __nwlog_obj();
                              v914 = type[0];
                              v969 = os_log_type_enabled(v913, (os_log_type_t)type[0]);
                              if (v968)
                              {
                                if (v969)
                                {
                                  *(_DWORD *)buf = 136446466;
                                  *(_QWORD *)&buf[4] = "nw_http1_connection_parser_init";
                                  *(_WORD *)&buf[12] = 2082;
                                  *(_QWORD *)&buf[14] = v968;
                                  _os_log_impl(&dword_182FBE000, v913, v914, "%{public}s called with null http1_connection->protocol_http1, dumping backtrace:%{public}s", buf, 0x16u);
                                }
                                free(v968);
                                goto LABEL_1803;
                              }
                              if (v969)
                              {
                                *(_DWORD *)buf = 136446210;
                                *(_QWORD *)&buf[4] = "nw_http1_connection_parser_init";
                                v915 = "%{public}s called with null http1_connection->protocol_http1, no backtrace";
                                goto LABEL_1802;
                              }
                            }
                            else
                            {
                              v913 = __nwlog_obj();
                              v914 = type[0];
                              if (os_log_type_enabled(v913, (os_log_type_t)type[0]))
                              {
                                *(_DWORD *)buf = 136446210;
                                *(_QWORD *)&buf[4] = "nw_http1_connection_parser_init";
                                v915 = "%{public}s called with null http1_connection->protocol_http1, backtrace limit exceeded";
                                goto LABEL_1802;
                              }
                            }
                          }
LABEL_1803:
                          if (v912)
                            free(v912);
                          v15 = (_BYTE *)&unk_1ECD84000;
                          v628 = v1051;
LABEL_1036:
                          *(_QWORD *)buf = 0;
                          *(_QWORD *)&buf[8] = buf;
                          *(_QWORD *)&buf[16] = 0x2000000000;
                          v1061 = (uint64_t)v622;
                          *(_QWORD *)aBlock = v623;
                          *(_QWORD *)&aBlock[8] = 0x40000000;
                          *(_QWORD *)&aBlock[16] = ___ZL26nw_http1_connection_createP11nw_protocolP17nw_protocol_http1P11nw_endpointP13nw_parameters_block_invoke_2;
                          v1071 = &unk_1E14A14C8;
                          v1072 = (uint64_t *)buf;
                          *((_QWORD *)v622 + 76) = _Block_copy(aBlock);
                          _Block_object_dispose(buf, 8);
                          if ((*((_BYTE *)v622 + 158) & 1) == 0)
                          {
                            if (v15[1345])
                            {
                              v925 = __nwlog_obj();
                              if (os_log_type_enabled(v925, OS_LOG_TYPE_DEBUG))
                              {
                                v926 = *((_QWORD *)v622 + 61);
                                v927 = *(_DWORD *)(*((_QWORD *)v622 + 60) + 372);
                                v928 = *((_DWORD *)v622 + 215);
                                if (v926)
                                  LODWORD(v926) = *(_DWORD *)(v926 + 424);
                                *(_DWORD *)buf = 136447746;
                                *(_QWORD *)&buf[4] = "nw_http1_connection_create";
                                *(_WORD *)&buf[12] = 2082;
                                *(_QWORD *)&buf[14] = (char *)v622 + 74;
                                *(_WORD *)&buf[22] = 2080;
                                v1061 = (uint64_t)" ";
                                *(_WORD *)v1062 = 1024;
                                *(_DWORD *)&v1062[2] = v927;
                                *(_WORD *)&v1062[6] = 1024;
                                *(_DWORD *)&v1062[8] = v928;
                                *(_WORD *)&v1062[12] = 1024;
                                *(_DWORD *)&v1062[14] = v926;
                                *(_WORD *)&v1062[18] = 2048;
                                *(_QWORD *)&v1062[20] = v622;
                                _os_log_impl(&dword_182FBE000, v925, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> created %p", buf, 0x3Cu);
                                v628 = v1051;
                              }
                            }
                          }
                          v633 = (NSObject **)(v622 + 32);
                          nw_protocol_replace_input_handler((uint64_t)log, v628, (uint64_t)v622);
                          *v622 = *log;
                          v634 = (void *)*((_QWORD *)v622 + 92);
                          v11 = v1052;
                          if (v634)
                          {
                            if (!*((_QWORD *)v622 + 66))
                            {
                              v635 = (void **)(v622 + 35);
                              v636 = nw_parameters_copy_context(*((void **)v622 + 92));
                              *(_QWORD *)buf = nw_path_copy_flow_registration(v636, (uint64_t)v622);
                              nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v622 + 35), buf);
                              v637 = (void *)*((_QWORD *)v622 + 70);
                              if (v637)
                              {
                                v638 = nw_path_flow_registration_copy_endpoint(v637);
                                v639 = nw_path_flow_registration_copy_parameters(*v635);
                                *(_QWORD *)buf = nw_endpoint_copy_association_with_evaluator(v638, v639, 0);
                                nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v622 + 33), buf);
                                if (*((_QWORD *)v622 + 66))
                                {
                                  *(_QWORD *)buf = nw_protocol_instance_stub_create((nw_protocol *)v622);
                                  nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v622 + 34), buf);
                                  nw_association_register(*((void **)v622 + 66), v634, *((void **)v622 + 68), 0, &__block_literal_global_70_39832);
                                  v640 = nw_association_copy_current_path(*((void **)v622 + 66), v639);
                                  if (v640)
                                  {
                                    v641 = v640;
                                    v642 = nw_path_copy_for_flow_registration(v640, *v635);
                                    if (v642)
                                    {
                                      v643 = v642;
                                      if (*v633 != v642)
                                      {
                                        *(_QWORD *)buf = os_retain(v642);
                                        nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v622 + 32), buf);
                                      }
                                      if (nw_path_has_flows(v643))
                                        v644 = 4096;
                                      else
                                        v644 = 0;
                                      v645 = *((_WORD *)v622 + 436) & 0xEFFF | (*((unsigned __int8 *)v622 + 874) << 16);
                                      *((_WORD *)v622 + 436) = *((_WORD *)v622 + 436) & 0xEFFF | v644;
                                      *((_BYTE *)v622 + 874) = BYTE2(v645);
                                      v646 = nw_parameters_copy_effective_proxy_config(v634);
                                      if (v646)
                                      {
                                        v647 = v646;
                                        if (nw_path_has_proxy_config(v641, v646))
                                        {
                                          *(_QWORD *)buf = os_retain(v647);
                                          nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v622 + 36), buf);
                                        }
                                        os_release(v647);
                                      }
                                      os_release(v643);
                                    }
                                    os_release(v641);
                                  }
                                }
                                if (v639)
                                  os_release(v639);
                                v11 = v1052;
                                if (v638)
                                  os_release(v638);
                              }
                              v628 = v1051;
                              if (v636)
                                os_release(v636);
                            }
                            v648 = *v633;
                            if (*v633)
                            {
LABEL_1062:
                              if (nw_path_uses_interface_type(v648, nw_interface_type_cellular))
                                *((_QWORD *)v622 + 24) = 1000;
                            }
LABEL_1064:
                            v649 = *(unsigned int *)(v11 + 336) + 1;
                            v650 = v649 << 31 >> 31;
                            *(_DWORD *)(v11 + 336) = v649;
                            if (v650 == v649 && (v650 & 0x8000000000000000) == 0)
                              goto LABEL_1102;
                            __nwlog_obj();
                            v651 = *(unsigned int *)(v11 + 336);
                            *(_DWORD *)buf = 136446978;
                            *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
                            *(_WORD *)&buf[12] = 2082;
                            *(_QWORD *)&buf[14] = "http1->connections_count";
                            *(_WORD *)&buf[22] = 2048;
                            v1061 = 1;
                            *(_WORD *)v1062 = 2048;
                            *(_QWORD *)&v1062[2] = v651;
                            v652 = (char *)_os_log_send_and_compose_impl();
                            v1075[0] = 16;
                            aBlock[0] = 0;
                            if (__nwlog_fault(v652, v1075, aBlock))
                            {
                              if (v1075[0] == 17)
                              {
                                v653 = __nwlog_obj();
                                v654 = v1075[0];
                                if (os_log_type_enabled(v653, (os_log_type_t)v1075[0]))
                                {
                                  v655 = *(unsigned int *)(v1052 + 336);
                                  *(_DWORD *)buf = 136446978;
                                  *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
                                  *(_WORD *)&buf[12] = 2082;
                                  *(_QWORD *)&buf[14] = "http1->connections_count";
                                  *(_WORD *)&buf[22] = 2048;
                                  v1061 = 1;
                                  *(_WORD *)v1062 = 2048;
                                  *(_QWORD *)&v1062[2] = v655;
                                  v656 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_1098:
                                  _os_log_impl(&dword_182FBE000, v653, v654, v656, buf, 0x2Au);
                                }
                              }
                              else if (aBlock[0])
                              {
                                v672 = (char *)__nw_create_backtrace_string();
                                v653 = __nwlog_obj();
                                v654 = v1075[0];
                                v673 = os_log_type_enabled(v653, (os_log_type_t)v1075[0]);
                                if (v672)
                                {
                                  if (v673)
                                  {
                                    v674 = *(unsigned int *)(v1052 + 336);
                                    *(_DWORD *)buf = 136447234;
                                    *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
                                    *(_WORD *)&buf[12] = 2082;
                                    *(_QWORD *)&buf[14] = "http1->connections_count";
                                    *(_WORD *)&buf[22] = 2048;
                                    v1061 = 1;
                                    *(_WORD *)v1062 = 2048;
                                    *(_QWORD *)&v1062[2] = v674;
                                    *(_WORD *)&v1062[10] = 2082;
                                    *(_QWORD *)&v1062[12] = v672;
                                    _os_log_impl(&dword_182FBE000, v653, v654, "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
                                  }
                                  free(v672);
                                  v628 = v1051;
                                  goto LABEL_1099;
                                }
                                v628 = v1051;
                                if (v673)
                                {
                                  v679 = *(unsigned int *)(v1052 + 336);
                                  *(_DWORD *)buf = 136446978;
                                  *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
                                  *(_WORD *)&buf[12] = 2082;
                                  *(_QWORD *)&buf[14] = "http1->connections_count";
                                  *(_WORD *)&buf[22] = 2048;
                                  v1061 = 1;
                                  *(_WORD *)v1062 = 2048;
                                  *(_QWORD *)&v1062[2] = v679;
                                  v656 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
                                  goto LABEL_1098;
                                }
                              }
                              else
                              {
                                v653 = __nwlog_obj();
                                v654 = v1075[0];
                                if (os_log_type_enabled(v653, (os_log_type_t)v1075[0]))
                                {
                                  v678 = *(unsigned int *)(v1052 + 336);
                                  *(_DWORD *)buf = 136446978;
                                  *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
                                  *(_WORD *)&buf[12] = 2082;
                                  *(_QWORD *)&buf[14] = "http1->connections_count";
                                  *(_WORD *)&buf[22] = 2048;
                                  v1061 = 1;
                                  *(_WORD *)v1062 = 2048;
                                  *(_QWORD *)&v1062[2] = v678;
                                  v656 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
                                  goto LABEL_1098;
                                }
                              }
                            }
LABEL_1099:
                            if (v652)
                              free(v652);
                            v11 = v1052;
                            *(_DWORD *)(v1052 + 336) = -1;
LABEL_1102:
                            v680 = *(unsigned int *)(v11 + 360) + 1;
                            v681 = v680 << 31 >> 31;
                            *(_DWORD *)(v11 + 360) = v680;
                            if (v681 == v680 && (v681 & 0x8000000000000000) == 0)
                              goto LABEL_1121;
                            __nwlog_obj();
                            v682 = *(unsigned int *)(v11 + 360);
                            *(_DWORD *)buf = 136446978;
                            *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
                            *(_WORD *)&buf[12] = 2082;
                            *(_QWORD *)&buf[14] = "http1->next_connection_log_num";
                            *(_WORD *)&buf[22] = 2048;
                            v1061 = 1;
                            *(_WORD *)v1062 = 2048;
                            *(_QWORD *)&v1062[2] = v682;
                            v683 = (char *)_os_log_send_and_compose_impl();
                            v1075[0] = 16;
                            aBlock[0] = 0;
                            if (__nwlog_fault(v683, v1075, aBlock))
                            {
                              if (v1075[0] == 17)
                              {
                                v684 = __nwlog_obj();
                                v685 = v1075[0];
                                if (os_log_type_enabled(v684, (os_log_type_t)v1075[0]))
                                {
                                  v686 = *(unsigned int *)(v1052 + 360);
                                  *(_DWORD *)buf = 136446978;
                                  *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
                                  *(_WORD *)&buf[12] = 2082;
                                  *(_QWORD *)&buf[14] = "http1->next_connection_log_num";
                                  *(_WORD *)&buf[22] = 2048;
                                  v1061 = 1;
                                  *(_WORD *)v1062 = 2048;
                                  *(_QWORD *)&v1062[2] = v686;
                                  v687 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_1117:
                                  _os_log_impl(&dword_182FBE000, v684, v685, v687, buf, 0x2Au);
                                }
                              }
                              else if (aBlock[0])
                              {
                                v688 = (char *)__nw_create_backtrace_string();
                                v684 = __nwlog_obj();
                                v685 = v1075[0];
                                v689 = os_log_type_enabled(v684, (os_log_type_t)v1075[0]);
                                if (v688)
                                {
                                  if (v689)
                                  {
                                    v690 = *(unsigned int *)(v1052 + 360);
                                    *(_DWORD *)buf = 136447234;
                                    *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
                                    *(_WORD *)&buf[12] = 2082;
                                    *(_QWORD *)&buf[14] = "http1->next_connection_log_num";
                                    *(_WORD *)&buf[22] = 2048;
                                    v1061 = 1;
                                    *(_WORD *)v1062 = 2048;
                                    *(_QWORD *)&v1062[2] = v690;
                                    *(_WORD *)&v1062[10] = 2082;
                                    *(_QWORD *)&v1062[12] = v688;
                                    _os_log_impl(&dword_182FBE000, v684, v685, "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
                                  }
                                  free(v688);
                                  v628 = v1051;
                                  goto LABEL_1118;
                                }
                                v628 = v1051;
                                if (v689)
                                {
                                  v692 = *(unsigned int *)(v1052 + 360);
                                  *(_DWORD *)buf = 136446978;
                                  *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
                                  *(_WORD *)&buf[12] = 2082;
                                  *(_QWORD *)&buf[14] = "http1->next_connection_log_num";
                                  *(_WORD *)&buf[22] = 2048;
                                  v1061 = 1;
                                  *(_WORD *)v1062 = 2048;
                                  *(_QWORD *)&v1062[2] = v692;
                                  v687 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
                                  goto LABEL_1117;
                                }
                              }
                              else
                              {
                                v684 = __nwlog_obj();
                                v685 = v1075[0];
                                if (os_log_type_enabled(v684, (os_log_type_t)v1075[0]))
                                {
                                  v691 = *(unsigned int *)(v1052 + 360);
                                  *(_DWORD *)buf = 136446978;
                                  *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
                                  *(_WORD *)&buf[12] = 2082;
                                  *(_QWORD *)&buf[14] = "http1->next_connection_log_num";
                                  *(_WORD *)&buf[22] = 2048;
                                  v1061 = 1;
                                  *(_WORD *)v1062 = 2048;
                                  *(_QWORD *)&v1062[2] = v691;
                                  v687 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
                                  goto LABEL_1117;
                                }
                              }
                            }
LABEL_1118:
                            if (v683)
                              free(v683);
                            LODWORD(v680) = -1;
                            v11 = v1052;
                            *(_DWORD *)(v1052 + 360) = -1;
LABEL_1121:
                            *((_DWORD *)v622 + 215) = v680;
                            if ((*((_BYTE *)v622 + 158) & 1) == 0)
                            {
                              if (gLogDatapath)
                              {
                                v929 = __nwlog_obj();
                                if (os_log_type_enabled(v929, OS_LOG_TYPE_DEBUG))
                                {
                                  v930 = *((_QWORD *)v622 + 61);
                                  v931 = *(_DWORD *)(*((_QWORD *)v622 + 60) + 372);
                                  v932 = *((_DWORD *)v622 + 215);
                                  if (v930)
                                    LODWORD(v930) = *(_DWORD *)(v930 + 424);
                                  v11 = v1052;
                                  v933 = *(_DWORD *)(v1052 + 336);
                                  *(_DWORD *)buf = 136448002;
                                  *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
                                  *(_WORD *)&buf[12] = 2082;
                                  *(_QWORD *)&buf[14] = (char *)v622 + 74;
                                  *(_WORD *)&buf[22] = 2080;
                                  v1061 = (uint64_t)" ";
                                  *(_WORD *)v1062 = 1024;
                                  *(_DWORD *)&v1062[2] = v931;
                                  *(_WORD *)&v1062[6] = 1024;
                                  *(_DWORD *)&v1062[8] = v932;
                                  *(_WORD *)&v1062[12] = 1024;
                                  *(_DWORD *)&v1062[14] = v930;
                                  *(_WORD *)&v1062[18] = 2048;
                                  *(_QWORD *)&v1062[20] = v622;
                                  *(_WORD *)&v1062[28] = 1024;
                                  *(_DWORD *)&v1062[30] = v933;
                                  _os_log_impl(&dword_182FBE000, v929, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> added connection %p, now have %u connections", buf, 0x42u);
                                  v628 = v1051;
                                }
                              }
                            }
                            if (*(_QWORD *)(v628 + 248))
                            {
                              if (!*((_QWORD *)v622 + 61))
                              {
                                *(_QWORD *)(v628 + 256) = v622;
                                *((_QWORD *)v622 + 61) = v628;
                                nw_protocol_set_output_handler(v628, *((_QWORD *)v622 + 4));
                                nw_protocol_set_input_handler((uint64_t)v622, *(_QWORD *)(v628 + 48));
                                *(_OWORD *)v628 = *v622;
                                v699 = v1050[5];
                                v701 = v1050[2];
                                v700 = v1050[3];
                                v622[8] = v1050[4];
                                v622[9] = v699;
                                v622[6] = v701;
                                v622[7] = v700;
                                v702 = v1050[1];
                                v622[4] = *v1050;
                                v622[5] = v702;
                                nw_http_transaction_metadata_set_connection_metadata(*(void **)(v628 + 352), *((void **)v622 + 96));
                                *((_WORD *)v622 + 436) &= 0xFFD7u;
                                *((_DWORD *)v622 + 216) = 1;
                                if ((*((_BYTE *)v622 + 158) & 1) == 0)
                                {
                                  v703 = __nwlog_obj();
                                  if (os_log_type_enabled(v703, OS_LOG_TYPE_DEBUG))
                                  {
                                    v704 = *((_QWORD *)v622 + 61);
                                    v705 = *(_DWORD *)(*((_QWORD *)v622 + 60) + 372);
                                    v706 = *((_DWORD *)v622 + 215);
                                    if (v704)
                                      LODWORD(v704) = *(_DWORD *)(v704 + 424);
                                    *(_DWORD *)buf = 136447490;
                                    *(_QWORD *)&buf[4] = "nw_http1_update_connection_input_state";
                                    *(_WORD *)&buf[12] = 2082;
                                    *(_QWORD *)&buf[14] = (char *)v622 + 74;
                                    *(_WORD *)&buf[22] = 2080;
                                    v1061 = (uint64_t)" ";
                                    *(_WORD *)v1062 = 1024;
                                    *(_DWORD *)&v1062[2] = v705;
                                    *(_WORD *)&v1062[6] = 1024;
                                    *(_DWORD *)&v1062[8] = v706;
                                    *(_WORD *)&v1062[12] = 1024;
                                    *(_DWORD *)&v1062[14] = v704;
                                    _os_log_impl(&dword_182FBE000, v703, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> connection input state: reading", buf, 0x32u);
                                  }
                                }
                                if ((*(_BYTE *)(v628 + 158) & 1) == 0)
                                {
                                  v707 = __nwlog_obj();
                                  if (os_log_type_enabled(v707, OS_LOG_TYPE_INFO))
                                  {
                                    v708 = *(_QWORD *)(v628 + 256);
                                    v709 = *(_DWORD *)(*(_QWORD *)(v628 + 248) + 372);
                                    if (v708)
                                      LODWORD(v708) = *(_DWORD *)(v708 + 860);
                                    v710 = *(_DWORD *)(v628 + 424);
                                    *(_DWORD *)buf = 136448002;
                                    *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                                    *(_WORD *)&buf[12] = 2082;
                                    *(_QWORD *)&buf[14] = v628 + 74;
                                    *(_WORD *)&buf[22] = 2080;
                                    v1061 = (uint64_t)" ";
                                    *(_WORD *)v1062 = 1024;
                                    *(_DWORD *)&v1062[2] = v709;
                                    *(_WORD *)&v1062[6] = 1024;
                                    *(_DWORD *)&v1062[8] = v708;
                                    *(_WORD *)&v1062[12] = 1024;
                                    *(_DWORD *)&v1062[14] = v710;
                                    *(_WORD *)&v1062[18] = 2048;
                                    *(_QWORD *)&v1062[20] = v628;
                                    *(_WORD *)&v1062[28] = 2048;
                                    *(_QWORD *)&v1062[30] = v622;
                                    _os_log_impl(&dword_182FBE000, v707, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s<i%u:c%u:s%u> stream (%p) now using connection %p", buf, 0x46u);
                                    if ((*(_BYTE *)(v628 + 158) & 1) != 0)
                                    {
LABEL_1157:
                                      nw_http_transaction_metadata_set_first_on_connection(*(void **)(v628 + 352));
                                      v720 = (void *)nw_protocol_boringssl_copy_definition();
                                      identifier = nw_protocol_definition_get_identifier(v720);
                                      v722 = (_QWORD *)nw_protocol_get_identifier((uint64_t)log);
                                      v723 = nw_protocols_are_equal(identifier, v722);
                                      if (v720)
                                        os_release(v720);
                                      if (v723)
                                      {
                                        v724 = nw_protocol_copy_info((uint64_t)log, 255);
                                        if (v724)
                                        {
                                          v725 = (void *)v724;
                                          v726 = *(_QWORD *)(v724 + 24);
                                          if (*(_QWORD *)(v724 + 16) != v726)
                                          {
                                            v727 = *(void **)(v726 - 8);
                                            if (v727)
                                            {
                                              v728 = os_retain(v727);
                                              if (v728)
                                              {
                                                v729 = v728;
                                                if (nw_protocol_metadata_is_tls(v728))
                                                {
                                                  v730 = v729;
                                                  nw_http_connection_metadata_set_sec_metadata(*((void **)v622 + 96), v730);
                                                  os_release(v730);
                                                }
                                                os_release(v729);
                                              }
                                            }
                                          }
                                          os_release(v725);
                                        }
                                      }
                                      if (v622)
                                      {
                                        nw_protocol_connect((uint64_t)log, (uint64_t)v622);
                                        goto LABEL_715;
                                      }
                                      __nwlog_obj();
                                      *(_DWORD *)buf = 136446210;
                                      *(_QWORD *)&buf[4] = "nw_http1_get_output_protocol";
                                      v893 = (char *)_os_log_send_and_compose_impl();
                                      v1075[0] = 16;
                                      aBlock[0] = 0;
                                      if (__nwlog_fault(v893, v1075, aBlock))
                                      {
                                        if (v1075[0] == 17)
                                        {
                                          v894 = __nwlog_obj();
                                          v895 = v1075[0];
                                          if (os_log_type_enabled(v894, (os_log_type_t)v1075[0]))
                                          {
                                            *(_DWORD *)buf = 136446210;
                                            *(_QWORD *)&buf[4] = "nw_http1_get_output_protocol";
                                            v896 = "%{public}s called with null connection";
LABEL_1754:
                                            _os_log_impl(&dword_182FBE000, v894, v895, v896, buf, 0xCu);
                                          }
                                        }
                                        else if (aBlock[0])
                                        {
                                          v962 = (char *)__nw_create_backtrace_string();
                                          v894 = __nwlog_obj();
                                          v895 = v1075[0];
                                          v963 = os_log_type_enabled(v894, (os_log_type_t)v1075[0]);
                                          if (v962)
                                          {
                                            if (v963)
                                            {
                                              *(_DWORD *)buf = 136446466;
                                              *(_QWORD *)&buf[4] = "nw_http1_get_output_protocol";
                                              *(_WORD *)&buf[12] = 2082;
                                              *(_QWORD *)&buf[14] = v962;
                                              _os_log_impl(&dword_182FBE000, v894, v895, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
                                            }
                                            free(v962);
                                            goto LABEL_1755;
                                          }
                                          if (v963)
                                          {
                                            *(_DWORD *)buf = 136446210;
                                            *(_QWORD *)&buf[4] = "nw_http1_get_output_protocol";
                                            v896 = "%{public}s called with null connection, no backtrace";
                                            goto LABEL_1754;
                                          }
                                        }
                                        else
                                        {
                                          v894 = __nwlog_obj();
                                          v895 = v1075[0];
                                          if (os_log_type_enabled(v894, (os_log_type_t)v1075[0]))
                                          {
                                            *(_DWORD *)buf = 136446210;
                                            *(_QWORD *)&buf[4] = "nw_http1_get_output_protocol";
                                            v896 = "%{public}s called with null connection, backtrace limit exceeded";
                                            goto LABEL_1754;
                                          }
                                        }
                                      }
LABEL_1755:
                                      if (v893)
                                        free(v893);
                                      nw_protocol_connect((uint64_t)log, 0);
                                      v11 = v1052;
                                      goto LABEL_715;
                                    }
LABEL_1153:
                                    v716 = __nwlog_obj();
                                    if (os_log_type_enabled(v716, OS_LOG_TYPE_DEBUG))
                                    {
                                      v717 = *(_QWORD *)(v628 + 256);
                                      v718 = *(_DWORD *)(*(_QWORD *)(v628 + 248) + 372);
                                      if (v717)
                                        LODWORD(v717) = *(_DWORD *)(v717 + 860);
                                      v719 = *(_DWORD *)(v628 + 424);
                                      *(_DWORD *)buf = 136448258;
                                      *(_QWORD *)&buf[4] = "nw_http1_start_new_connection_for_stream";
                                      *(_WORD *)&buf[12] = 2082;
                                      *(_QWORD *)&buf[14] = v628 + 74;
                                      *(_WORD *)&buf[22] = 2080;
                                      v1061 = (uint64_t)" ";
                                      *(_WORD *)v1062 = 1024;
                                      *(_DWORD *)&v1062[2] = v718;
                                      *(_WORD *)&v1062[6] = 1024;
                                      *(_DWORD *)&v1062[8] = v717;
                                      *(_WORD *)&v1062[12] = 1024;
                                      *(_DWORD *)&v1062[14] = v719;
                                      *(_WORD *)&v1062[18] = 2048;
                                      *(_QWORD *)&v1062[20] = v622;
                                      *(_WORD *)&v1062[28] = 1024;
                                      *(_DWORD *)&v1062[30] = v719;
                                      *(_WORD *)&v1062[34] = 2048;
                                      *(_QWORD *)&v1062[36] = v628;
                                      _os_log_impl(&dword_182FBE000, v716, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> created new connection %p for stream %u (%p)", buf, 0x4Cu);
                                    }
                                    goto LABEL_1157;
                                  }
                                }
LABEL_1152:
                                if ((*(_BYTE *)(v628 + 158) & 1) != 0)
                                  goto LABEL_1157;
                                goto LABEL_1153;
                              }
                              __nwlog_obj();
                              v693 = *((_QWORD *)v622 + 61);
                              *(_DWORD *)buf = 136446722;
                              *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                              *(_WORD *)&buf[12] = 2048;
                              *(_QWORD *)&buf[14] = v622;
                              *(_WORD *)&buf[22] = 2048;
                              v1061 = v693;
                              v694 = (char *)_os_log_send_and_compose_impl();
                              v1075[0] = 16;
                              aBlock[0] = 0;
                              if (__nwlog_fault(v694, v1075, aBlock))
                              {
                                if (v1075[0] == 17)
                                {
                                  v695 = __nwlog_obj();
                                  v696 = v1075[0];
                                  if (!os_log_type_enabled(v695, (os_log_type_t)v1075[0]))
                                    goto LABEL_1150;
                                  v697 = *((_QWORD *)v622 + 61);
                                  *(_DWORD *)buf = 136446722;
                                  *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                                  *(_WORD *)&buf[12] = 2048;
                                  *(_QWORD *)&buf[14] = v622;
                                  *(_WORD *)&buf[22] = 2048;
                                  v1061 = v697;
                                  v698 = "%{public}s Connection %p already has a stream (%p)";
                                  goto LABEL_1149;
                                }
                                if (!aBlock[0])
                                {
                                  v695 = __nwlog_obj();
                                  v696 = v1075[0];
                                  if (!os_log_type_enabled(v695, (os_log_type_t)v1075[0]))
                                    goto LABEL_1150;
                                  v714 = *((_QWORD *)v622 + 61);
                                  *(_DWORD *)buf = 136446722;
                                  *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                                  *(_WORD *)&buf[12] = 2048;
                                  *(_QWORD *)&buf[14] = v622;
                                  *(_WORD *)&buf[22] = 2048;
                                  v1061 = v714;
                                  v698 = "%{public}s Connection %p already has a stream (%p), backtrace limit exceeded";
                                  goto LABEL_1149;
                                }
                                v711 = (char *)__nw_create_backtrace_string();
                                v695 = __nwlog_obj();
                                v696 = v1075[0];
                                v712 = os_log_type_enabled(v695, (os_log_type_t)v1075[0]);
                                if (v711)
                                {
                                  if (v712)
                                  {
                                    v713 = *((_QWORD *)v622 + 61);
                                    *(_DWORD *)buf = 136446978;
                                    *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                                    *(_WORD *)&buf[12] = 2048;
                                    *(_QWORD *)&buf[14] = v622;
                                    *(_WORD *)&buf[22] = 2048;
                                    v1061 = v713;
                                    *(_WORD *)v1062 = 2082;
                                    *(_QWORD *)&v1062[2] = v711;
                                    _os_log_impl(&dword_182FBE000, v695, v696, "%{public}s Connection %p already has a stream (%p), dumping backtrace:%{public}s", buf, 0x2Au);
                                  }
                                  free(v711);
                                  v628 = v1051;
                                  goto LABEL_1150;
                                }
                                v628 = v1051;
                                if (v712)
                                {
                                  v715 = *((_QWORD *)v622 + 61);
                                  *(_DWORD *)buf = 136446722;
                                  *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                                  *(_WORD *)&buf[12] = 2048;
                                  *(_QWORD *)&buf[14] = v622;
                                  *(_WORD *)&buf[22] = 2048;
                                  v1061 = v715;
                                  v698 = "%{public}s Connection %p already has a stream (%p), no backtrace";
LABEL_1149:
                                  _os_log_impl(&dword_182FBE000, v695, v696, v698, buf, 0x20u);
                                }
                              }
LABEL_1150:
                              if (v694)
                                free(v694);
                              goto LABEL_1152;
                            }
                            __nwlog_obj();
                            *(_DWORD *)buf = 136446210;
                            *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                            v920 = (char *)_os_log_send_and_compose_impl();
                            v1075[0] = 16;
                            aBlock[0] = 0;
                            if (!__nwlog_fault(v920, v1075, aBlock))
                              goto LABEL_1816;
                            if (v1075[0] == 17)
                            {
                              v921 = __nwlog_obj();
                              v922 = v1075[0];
                              if (!os_log_type_enabled(v921, (os_log_type_t)v1075[0]))
                                goto LABEL_1816;
                              *(_DWORD *)buf = 136446210;
                              *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                              v923 = "%{public}s called with null http1_stream->protocol_http1";
                            }
                            else if (aBlock[0])
                            {
                              v972 = (char *)__nw_create_backtrace_string();
                              v921 = __nwlog_obj();
                              v922 = v1075[0];
                              v973 = os_log_type_enabled(v921, (os_log_type_t)v1075[0]);
                              if (v972)
                              {
                                if (v973)
                                {
                                  *(_DWORD *)buf = 136446466;
                                  *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                                  *(_WORD *)&buf[12] = 2082;
                                  *(_QWORD *)&buf[14] = v972;
                                  _os_log_impl(&dword_182FBE000, v921, v922, "%{public}s called with null http1_stream->protocol_http1, dumping backtrace:%{public}s", buf, 0x16u);
                                }
                                free(v972);
                                goto LABEL_1816;
                              }
                              if (!v973)
                              {
LABEL_1816:
                                if (v920)
                                  free(v920);
                                goto LABEL_1798;
                              }
                              *(_DWORD *)buf = 136446210;
                              *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                              v923 = "%{public}s called with null http1_stream->protocol_http1, no backtrace";
                            }
                            else
                            {
                              v921 = __nwlog_obj();
                              v922 = v1075[0];
                              if (!os_log_type_enabled(v921, (os_log_type_t)v1075[0]))
                                goto LABEL_1816;
                              *(_DWORD *)buf = 136446210;
                              *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                              v923 = "%{public}s called with null http1_stream->protocol_http1, backtrace limit exceeded";
                            }
                            _os_log_impl(&dword_182FBE000, v921, v922, v923, buf, 0xCu);
                            goto LABEL_1816;
                          }
                          __nwlog_obj();
                          *(_DWORD *)buf = 136446210;
                          *(_QWORD *)&buf[4] = "nw_protocol_http1_set_up_association";
                          v916 = (char *)_os_log_send_and_compose_impl();
                          v1075[0] = 16;
                          aBlock[0] = 0;
                          if (__nwlog_fault(v916, v1075, aBlock))
                          {
                            if (v1075[0] == 17)
                            {
                              v917 = __nwlog_obj();
                              v918 = v1075[0];
                              if (!os_log_type_enabled(v917, (os_log_type_t)v1075[0]))
                                goto LABEL_1809;
                              *(_DWORD *)buf = 136446210;
                              *(_QWORD *)&buf[4] = "nw_protocol_http1_set_up_association";
                              v919 = "%{public}s called with null parameters";
LABEL_1808:
                              _os_log_impl(&dword_182FBE000, v917, v918, v919, buf, 0xCu);
                              goto LABEL_1809;
                            }
                            if (!aBlock[0])
                            {
                              v917 = __nwlog_obj();
                              v918 = v1075[0];
                              if (!os_log_type_enabled(v917, (os_log_type_t)v1075[0]))
                                goto LABEL_1809;
                              *(_DWORD *)buf = 136446210;
                              *(_QWORD *)&buf[4] = "nw_protocol_http1_set_up_association";
                              v919 = "%{public}s called with null parameters, backtrace limit exceeded";
                              goto LABEL_1808;
                            }
                            v970 = (char *)__nw_create_backtrace_string();
                            v917 = __nwlog_obj();
                            v918 = v1075[0];
                            v971 = os_log_type_enabled(v917, (os_log_type_t)v1075[0]);
                            if (!v970)
                            {
                              if (!v971)
                                goto LABEL_1809;
                              *(_DWORD *)buf = 136446210;
                              *(_QWORD *)&buf[4] = "nw_protocol_http1_set_up_association";
                              v919 = "%{public}s called with null parameters, no backtrace";
                              goto LABEL_1808;
                            }
                            if (v971)
                            {
                              *(_DWORD *)buf = 136446466;
                              *(_QWORD *)&buf[4] = "nw_protocol_http1_set_up_association";
                              *(_WORD *)&buf[12] = 2082;
                              *(_QWORD *)&buf[14] = v970;
                              _os_log_impl(&dword_182FBE000, v917, v918, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
                            }
                            free(v970);
                          }
LABEL_1809:
                          if (v916)
                            free(v916);
                          v11 = v1052;
                          v628 = v1051;
                          v648 = *v633;
                          if (*v633)
                            goto LABEL_1062;
                          goto LABEL_1064;
                        }
LABEL_1881:
                        __break(1u);
                        return result;
                      }
                      __nwlog_obj();
                      *(_DWORD *)buf = 136446210;
                      *(_QWORD *)&buf[4] = "nw_http1_connection_create";
                      v889 = (char *)_os_log_send_and_compose_impl();
                      type[0] = 16;
                      LOBYTE(v1055[0]) = 0;
                      if (__nwlog_fault(v889, type, v1055))
                      {
                        if (type[0] == 17)
                        {
                          v890 = __nwlog_obj();
                          v891 = type[0];
                          if (!os_log_type_enabled(v890, (os_log_type_t)type[0]))
                            goto LABEL_1763;
                          *(_DWORD *)buf = 136446210;
                          *(_QWORD *)&buf[4] = "nw_http1_connection_create";
                          v892 = "%{public}s called with null parameters";
                          goto LABEL_1762;
                        }
                        if (!LOBYTE(v1055[0]))
                        {
                          v890 = __nwlog_obj();
                          v891 = type[0];
                          if (!os_log_type_enabled(v890, (os_log_type_t)type[0]))
                            goto LABEL_1763;
                          *(_DWORD *)buf = 136446210;
                          *(_QWORD *)&buf[4] = "nw_http1_connection_create";
                          v892 = "%{public}s called with null parameters, backtrace limit exceeded";
                          goto LABEL_1762;
                        }
                        v964 = (char *)__nw_create_backtrace_string();
                        v890 = __nwlog_obj();
                        v891 = type[0];
                        v967 = os_log_type_enabled(v890, (os_log_type_t)type[0]);
                        if (!v964)
                        {
                          if (!v967)
                            goto LABEL_1763;
                          *(_DWORD *)buf = 136446210;
                          *(_QWORD *)&buf[4] = "nw_http1_connection_create";
                          v892 = "%{public}s called with null parameters, no backtrace";
                          goto LABEL_1762;
                        }
                        if (v967)
                        {
                          *(_DWORD *)buf = 136446466;
                          *(_QWORD *)&buf[4] = "nw_http1_connection_create";
                          *(_WORD *)&buf[12] = 2082;
                          *(_QWORD *)&buf[14] = v964;
                          v966 = "%{public}s called with null parameters, dumping backtrace:%{public}s";
                          goto LABEL_1586;
                        }
                        goto LABEL_1587;
                      }
LABEL_1763:
                      if (!v889)
                        goto LABEL_1765;
                      goto LABEL_1764;
                    }
                    __nwlog_obj();
                    *(_DWORD *)buf = 136446210;
                    *(_QWORD *)&buf[4] = "nw_http1_connection_create";
                    v889 = (char *)_os_log_send_and_compose_impl();
                    type[0] = 16;
                    LOBYTE(v1055[0]) = 0;
                    if (!__nwlog_fault(v889, type, v1055))
                      goto LABEL_1763;
                    if (type[0] != 17)
                    {
                      if (!LOBYTE(v1055[0]))
                      {
                        v890 = __nwlog_obj();
                        v891 = type[0];
                        if (!os_log_type_enabled(v890, (os_log_type_t)type[0]))
                          goto LABEL_1763;
                        *(_DWORD *)buf = 136446210;
                        *(_QWORD *)&buf[4] = "nw_http1_connection_create";
                        v892 = "%{public}s called with null endpoint, backtrace limit exceeded";
                        goto LABEL_1762;
                      }
                      v964 = (char *)__nw_create_backtrace_string();
                      v890 = __nwlog_obj();
                      v891 = type[0];
                      v965 = os_log_type_enabled(v890, (os_log_type_t)type[0]);
                      if (!v964)
                      {
                        if (!v965)
                          goto LABEL_1763;
                        *(_DWORD *)buf = 136446210;
                        *(_QWORD *)&buf[4] = "nw_http1_connection_create";
                        v892 = "%{public}s called with null endpoint, no backtrace";
                        goto LABEL_1762;
                      }
                      if (v965)
                      {
                        *(_DWORD *)buf = 136446466;
                        *(_QWORD *)&buf[4] = "nw_http1_connection_create";
                        *(_WORD *)&buf[12] = 2082;
                        *(_QWORD *)&buf[14] = v964;
                        v966 = "%{public}s called with null endpoint, dumping backtrace:%{public}s";
LABEL_1586:
                        _os_log_impl(&dword_182FBE000, v890, v891, v966, buf, 0x16u);
                      }
LABEL_1587:
                      free(v964);
                      if (!v889)
                      {
LABEL_1765:
                        __nwlog_obj();
                        *(_DWORD *)buf = 136446210;
                        *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
                        v1011 = (char *)_os_log_send_and_compose_impl();
                        v1075[0] = 16;
                        aBlock[0] = 0;
                        if (!__nwlog_fault(v1011, v1075, aBlock))
                          goto LABEL_1779;
                        if (v1075[0] == 17)
                        {
                          v1012 = __nwlog_obj();
                          v1013 = v1075[0];
                          if (!os_log_type_enabled(v1012, (os_log_type_t)v1075[0]))
                            goto LABEL_1779;
                          *(_DWORD *)buf = 136446210;
                          *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
                          v1014 = "%{public}s called with null http1_connection";
                        }
                        else if (aBlock[0])
                        {
                          v1015 = (char *)__nw_create_backtrace_string();
                          v1012 = __nwlog_obj();
                          v1013 = v1075[0];
                          v1016 = os_log_type_enabled(v1012, (os_log_type_t)v1075[0]);
                          if (v1015)
                          {
                            if (v1016)
                            {
                              *(_DWORD *)buf = 136446466;
                              *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
                              *(_WORD *)&buf[12] = 2082;
                              *(_QWORD *)&buf[14] = v1015;
                              _os_log_impl(&dword_182FBE000, v1012, v1013, "%{public}s called with null http1_connection, dumping backtrace:%{public}s", buf, 0x16u);
                            }
                            free(v1015);
LABEL_1779:
                            if (v1011)
                              free(v1011);
                            __nwlog_obj();
                            *(_DWORD *)buf = 136446210;
                            *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                            v1017 = (char *)_os_log_send_and_compose_impl();
                            v1075[0] = 16;
                            aBlock[0] = 0;
                            if (!__nwlog_fault(v1017, v1075, aBlock))
                              goto LABEL_1795;
                            if (v1075[0] == 17)
                            {
                              v1018 = __nwlog_obj();
                              v1019 = v1075[0];
                              if (os_log_type_enabled(v1018, (os_log_type_t)v1075[0]))
                              {
                                *(_DWORD *)buf = 136446210;
                                *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                                v1020 = "%{public}s called with null http1_connection";
LABEL_1794:
                                _os_log_impl(&dword_182FBE000, v1018, v1019, v1020, buf, 0xCu);
                              }
                            }
                            else if (aBlock[0])
                            {
                              v1021 = (char *)__nw_create_backtrace_string();
                              v1018 = __nwlog_obj();
                              v1019 = v1075[0];
                              v1022 = os_log_type_enabled(v1018, (os_log_type_t)v1075[0]);
                              if (v1021)
                              {
                                if (v1022)
                                {
                                  *(_DWORD *)buf = 136446466;
                                  *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                                  *(_WORD *)&buf[12] = 2082;
                                  *(_QWORD *)&buf[14] = v1021;
                                  _os_log_impl(&dword_182FBE000, v1018, v1019, "%{public}s called with null http1_connection, dumping backtrace:%{public}s", buf, 0x16u);
                                }
                                free(v1021);
                                goto LABEL_1795;
                              }
                              if (v1022)
                              {
                                *(_DWORD *)buf = 136446210;
                                *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                                v1020 = "%{public}s called with null http1_connection, no backtrace";
                                goto LABEL_1794;
                              }
                            }
                            else
                            {
                              v1018 = __nwlog_obj();
                              v1019 = v1075[0];
                              if (os_log_type_enabled(v1018, (os_log_type_t)v1075[0]))
                              {
                                *(_DWORD *)buf = 136446210;
                                *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                                v1020 = "%{public}s called with null http1_connection, backtrace limit exceeded";
                                goto LABEL_1794;
                              }
                            }
LABEL_1795:
                            if (v1017)
                              free(v1017);
                            v622 = 0;
LABEL_1798:
                            v11 = v1052;
                            v628 = v1051;
                            if ((*(_BYTE *)(v1051 + 158) & 1) != 0)
                              goto LABEL_1157;
                            goto LABEL_1153;
                          }
                          if (!v1016)
                            goto LABEL_1779;
                          *(_DWORD *)buf = 136446210;
                          *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
                          v1014 = "%{public}s called with null http1_connection, no backtrace";
                        }
                        else
                        {
                          v1012 = __nwlog_obj();
                          v1013 = v1075[0];
                          if (!os_log_type_enabled(v1012, (os_log_type_t)v1075[0]))
                            goto LABEL_1779;
                          *(_DWORD *)buf = 136446210;
                          *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
                          v1014 = "%{public}s called with null http1_connection, backtrace limit exceeded";
                        }
                        _os_log_impl(&dword_182FBE000, v1012, v1013, v1014, buf, 0xCu);
                        goto LABEL_1779;
                      }
LABEL_1764:
                      free(v889);
                      goto LABEL_1765;
                    }
                    v890 = __nwlog_obj();
                    v891 = type[0];
                    if (!os_log_type_enabled(v890, (os_log_type_t)type[0]))
                      goto LABEL_1763;
                    *(_DWORD *)buf = 136446210;
                    *(_QWORD *)&buf[4] = "nw_http1_connection_create";
                    v892 = "%{public}s called with null endpoint";
                  }
                  else
                  {
                    __nwlog_obj();
                    *(_DWORD *)buf = 136446210;
                    *(_QWORD *)&buf[4] = "nw_http1_connection_create";
                    v889 = (char *)_os_log_send_and_compose_impl();
                    type[0] = 16;
                    LOBYTE(v1055[0]) = 0;
                    if (!__nwlog_fault(v889, type, v1055))
                      goto LABEL_1763;
                    if (type[0] != 17)
                    {
                      if (!LOBYTE(v1055[0]))
                      {
                        v890 = __nwlog_obj();
                        v891 = type[0];
                        if (!os_log_type_enabled(v890, (os_log_type_t)type[0]))
                          goto LABEL_1763;
                        *(_DWORD *)buf = 136446210;
                        *(_QWORD *)&buf[4] = "nw_http1_connection_create";
                        v892 = "%{public}s called with null output_handler, backtrace limit exceeded";
                        goto LABEL_1762;
                      }
                      v960 = (char *)__nw_create_backtrace_string();
                      v890 = __nwlog_obj();
                      v891 = type[0];
                      v961 = os_log_type_enabled(v890, (os_log_type_t)type[0]);
                      if (!v960)
                      {
                        if (!v961)
                          goto LABEL_1763;
                        *(_DWORD *)buf = 136446210;
                        *(_QWORD *)&buf[4] = "nw_http1_connection_create";
                        v892 = "%{public}s called with null output_handler, no backtrace";
                        goto LABEL_1762;
                      }
                      if (v961)
                      {
                        *(_DWORD *)buf = 136446466;
                        *(_QWORD *)&buf[4] = "nw_http1_connection_create";
                        *(_WORD *)&buf[12] = 2082;
                        *(_QWORD *)&buf[14] = v960;
                        _os_log_impl(&dword_182FBE000, v890, v891, "%{public}s called with null output_handler, dumping backtrace:%{public}s", buf, 0x16u);
                      }
                      free(v960);
                      goto LABEL_1763;
                    }
                    v890 = __nwlog_obj();
                    v891 = type[0];
                    if (!os_log_type_enabled(v890, (os_log_type_t)type[0]))
                      goto LABEL_1763;
                    *(_DWORD *)buf = 136446210;
                    *(_QWORD *)&buf[4] = "nw_http1_connection_create";
                    v892 = "%{public}s called with null output_handler";
                  }
LABEL_1762:
                  _os_log_impl(&dword_182FBE000, v890, v891, v892, buf, 0xCu);
                  goto LABEL_1763;
                }
                v274 = nw_parameters_copy_default_protocol_stack(*(nw_parameters_t *)(v243 + 320));
                v1056 = 0;
                v1057 = &v1056;
                v1058 = 0x2000000000;
                v1059 = 0;
                *(_QWORD *)v1075 = 0;
                *(_QWORD *)&v1075[8] = v1075;
                *(_QWORD *)&v1075[16] = 0x3802000000;
                v1076 = __Block_byref_object_copy__39865;
                v1077 = __Block_byref_object_dispose__39866;
                v1078 = 0;
                LOBYTE(v1079) = v1079 | 1;
                v657 = MEMORY[0x1E0C809B0];
                *(_QWORD *)aBlock = MEMORY[0x1E0C809B0];
                *(_QWORD *)&aBlock[8] = 0x40000000;
                *(_QWORD *)&aBlock[16] = ___ZL44nw_http1_establish_new_connection_for_streamP17nw_protocol_http1P15nw_http1_stream_block_invoke;
                v1071 = &unk_1E14A1688;
                v1072 = &v1056;
                v1073 = v1075;
                v1074 = v243;
                nw_protocol_stack_iterate_application_protocols(v274, aBlock);
                if (*(_QWORD *)(*(_QWORD *)&v1075[8] + 40))
                  goto LABEL_1075;
                v658 = nw_protocol_stack_copy_transport_protocol(v274);
                is_quic = nw_protocol_options_is_quic(v658);
                if (v658)
                  os_release(v658);
                if (!is_quic)
                {
LABEL_1075:
                  *(_QWORD *)buf = nw_parameters_shallow_copy(*(void **)(v243 + 320));
                  nw::retained_ptr<nw_endpoint *>::operator=(v243 + 320, buf);
                }
                else
                {
                  v660 = *(void **)(v243 + 320);
                  *(_QWORD *)buf = v657;
                  *(_QWORD *)&buf[8] = 0x40000000;
                  *(_QWORD *)&buf[16] = ___ZL44nw_http1_establish_new_connection_for_streamP17nw_protocol_http1P15nw_http1_stream_block_invoke_2;
                  v1061 = (uint64_t)&unk_1E14A16D8;
                  *(_QWORD *)v1062 = v1075;
                  *(_QWORD *)&v1062[8] = &v1056;
                  *(_QWORD *)&v1062[16] = v243;
                  *(_QWORD *)&v1062[24] = v1052;
                  nw_parameters_enumerate_transformed_parameters(v660, buf);
                }
                v661 = *(void **)(*(_QWORD *)&v1075[8] + 40);
                if (v661)
                {
                  v662 = v661;
                  sec_protocol_options_clear_tls_application_protocols();
                  sec_protocol_options_add_tls_application_protocol(v662, "http/1.1");
                  os_release(v662);
                }
                *((_BYTE *)v1057 + 24) = 0;
                v663 = *(void **)(v243 + 320);
                v1055[0] = v657;
                v1055[1] = 0x40000000;
                v1055[2] = ___ZL44nw_http1_establish_new_connection_for_streamP17nw_protocol_http1P15nw_http1_stream_block_invoke_78;
                v1055[3] = &unk_1E14A1700;
                v1055[4] = &v1056;
                v1055[5] = v243;
                nw_parameters_remove_application_protocol_options_from_protocol_stack(v663, v1055);
                *(_WORD *)(v243 + 428) |= 8u;
                v664 = *(unsigned int *)(v1052 + 352) + 1;
                v665 = v664 << 31 >> 31;
                *(_DWORD *)(v1052 + 352) = v664;
                if (v665 == v664 && (v665 & 0x8000000000000000) == 0)
                  goto LABEL_1178;
                __nwlog_obj();
                v666 = *(unsigned int *)(v1052 + 352);
                *(_DWORD *)type = 136446978;
                *(_QWORD *)&type[4] = "nw_http1_establish_new_connection_for_stream";
                *(_WORD *)&type[12] = 2082;
                *(_QWORD *)&type[14] = "http1->pending_output_handler_count";
                *(_WORD *)&type[22] = 2048;
                v1066 = 1;
                *(_WORD *)v1067 = 2048;
                *(_QWORD *)&v1067[2] = v666;
                v667 = (char *)_os_log_send_and_compose_impl();
                v1054 = OS_LOG_TYPE_ERROR;
                v1053 = 0;
                if (__nwlog_fault(v667, &v1054, &v1053))
                {
                  if (v1054 == OS_LOG_TYPE_FAULT)
                  {
                    v668 = __nwlog_obj();
                    v669 = v1054;
                    if (os_log_type_enabled(v668, v1054))
                    {
                      v670 = *(unsigned int *)(v1052 + 352);
                      *(_DWORD *)type = 136446978;
                      *(_QWORD *)&type[4] = "nw_http1_establish_new_connection_for_stream";
                      *(_WORD *)&type[12] = 2082;
                      *(_QWORD *)&type[14] = "http1->pending_output_handler_count";
                      *(_WORD *)&type[22] = 2048;
                      v1066 = 1;
                      *(_WORD *)v1067 = 2048;
                      *(_QWORD *)&v1067[2] = v670;
                      v671 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_1174:
                      _os_log_impl(&dword_182FBE000, v668, v669, v671, type, 0x2Au);
                    }
                  }
                  else if (v1053)
                  {
                    v675 = (char *)__nw_create_backtrace_string();
                    v668 = __nwlog_obj();
                    v669 = v1054;
                    v676 = os_log_type_enabled(v668, v1054);
                    if (v675)
                    {
                      if (v676)
                      {
                        v677 = *(unsigned int *)(v1052 + 352);
                        *(_DWORD *)type = 136447234;
                        *(_QWORD *)&type[4] = "nw_http1_establish_new_connection_for_stream";
                        *(_WORD *)&type[12] = 2082;
                        *(_QWORD *)&type[14] = "http1->pending_output_handler_count";
                        *(_WORD *)&type[22] = 2048;
                        v1066 = 1;
                        *(_WORD *)v1067 = 2048;
                        *(_QWORD *)&v1067[2] = v677;
                        v1068 = 2082;
                        v1069 = v675;
                        _os_log_impl(&dword_182FBE000, v668, v669, "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s", type, 0x34u);
                      }
                      free(v675);
                      v243 = v1051;
                      goto LABEL_1175;
                    }
                    v243 = v1051;
                    if (v676)
                    {
                      v732 = *(unsigned int *)(v1052 + 352);
                      *(_DWORD *)type = 136446978;
                      *(_QWORD *)&type[4] = "nw_http1_establish_new_connection_for_stream";
                      *(_WORD *)&type[12] = 2082;
                      *(_QWORD *)&type[14] = "http1->pending_output_handler_count";
                      *(_WORD *)&type[22] = 2048;
                      v1066 = 1;
                      *(_WORD *)v1067 = 2048;
                      *(_QWORD *)&v1067[2] = v732;
                      v671 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
                      goto LABEL_1174;
                    }
                  }
                  else
                  {
                    v668 = __nwlog_obj();
                    v669 = v1054;
                    if (os_log_type_enabled(v668, v1054))
                    {
                      v731 = *(unsigned int *)(v1052 + 352);
                      *(_DWORD *)type = 136446978;
                      *(_QWORD *)&type[4] = "nw_http1_establish_new_connection_for_stream";
                      *(_WORD *)&type[12] = 2082;
                      *(_QWORD *)&type[14] = "http1->pending_output_handler_count";
                      *(_WORD *)&type[22] = 2048;
                      v1066 = 1;
                      *(_WORD *)v1067 = 2048;
                      *(_QWORD *)&v1067[2] = v731;
                      v671 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
                      goto LABEL_1174;
                    }
                  }
                }
LABEL_1175:
                if (v667)
                  free(v667);
                *(_DWORD *)(v1052 + 352) = -1;
LABEL_1178:
                v733 = *(_QWORD *)(v243 + 312);
                v734 = *(void **)(v243 + 264);
                *(_QWORD *)type = v657;
                *(_QWORD *)&type[8] = 0x40000000;
                *(_QWORD *)&type[16] = ___ZL44nw_http1_establish_new_connection_for_streamP17nw_protocol_http1P15nw_http1_stream_block_invoke_81;
                v1066 = (uint64_t)&unk_1E14A1728;
                *(_QWORD *)v1067 = v733;
                nw_queue_context_async(v734, type);
                _Block_object_dispose(v1075, 8);
                if ((v1079 & 1) != 0 && v1078)
                  os_release(v1078);
                _Block_object_dispose(&v1056, 8);
                v11 = v1052;
                if (!v274)
                  goto LABEL_715;
                goto LABEL_923;
              }
              if ((*(_BYTE *)(v11 + 158) & 1) == 0)
              {
                if (v15[1345])
                {
                  v947 = __nwlog_obj();
                  if (os_log_type_enabled(v947, OS_LOG_TYPE_DEBUG))
                  {
                    v948 = *(_DWORD *)(v11 + 372);
                    v949 = *(_DWORD *)(v243 + 424);
                    *(_DWORD *)buf = 136447490;
                    *(_QWORD *)&buf[4] = "nw_http1_remove_pending_stream";
                    *(_WORD *)&buf[12] = 2082;
                    *(_QWORD *)&buf[14] = v11 + 74;
                    *(_WORD *)&buf[22] = 2080;
                    v1061 = (uint64_t)" ";
                    *(_WORD *)v1062 = 1024;
                    *(_DWORD *)&v1062[2] = v948;
                    *(_WORD *)&v1062[6] = 1024;
                    *(_DWORD *)&v1062[8] = v949;
                    *(_WORD *)&v1062[12] = 2048;
                    *(_QWORD *)&v1062[14] = v243;
                    _os_log_impl(&dword_182FBE000, v947, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> called for stream %u (%p)", buf, 0x36u);
                  }
                }
              }
              if ((*(_WORD *)(v243 + 428) & 0x1000) == 0)
              {
                __nwlog_obj();
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = "nw_http1_remove_pending_stream";
                *(_WORD *)&buf[12] = 2048;
                *(_QWORD *)&buf[14] = v243;
                v290 = (char *)_os_log_send_and_compose_impl();
                v1075[0] = 16;
                aBlock[0] = 0;
                if (!__nwlog_fault(v290, v1075, aBlock))
                  goto LABEL_896;
                if (v1075[0] == 17)
                {
                  v291 = __nwlog_obj();
                  v292 = v1075[0];
                  if (!os_log_type_enabled(v291, (os_log_type_t)v1075[0]))
                    goto LABEL_896;
                  *(_DWORD *)buf = 136446466;
                  *(_QWORD *)&buf[4] = "nw_http1_remove_pending_stream";
                  *(_WORD *)&buf[12] = 2048;
                  *(_QWORD *)&buf[14] = v243;
                  v293 = "%{public}s stream %p not in pending list, cannot remove";
                }
                else if (aBlock[0])
                {
                  v432 = (char *)__nw_create_backtrace_string();
                  v291 = __nwlog_obj();
                  v292 = v1075[0];
                  v433 = os_log_type_enabled(v291, (os_log_type_t)v1075[0]);
                  if (v432)
                  {
                    if (v433)
                    {
                      *(_DWORD *)buf = 136446722;
                      *(_QWORD *)&buf[4] = "nw_http1_remove_pending_stream";
                      *(_WORD *)&buf[12] = 2048;
                      *(_QWORD *)&buf[14] = v243;
                      *(_WORD *)&buf[22] = 2082;
                      v1061 = (uint64_t)v432;
                      _os_log_impl(&dword_182FBE000, v291, v292, "%{public}s stream %p not in pending list, cannot remove, dumping backtrace:%{public}s", buf, 0x20u);
                    }
                    free(v432);
                    goto LABEL_896;
                  }
                  if (!v433)
                  {
LABEL_896:
                    if (v290)
                      free(v290);
                    goto LABEL_1016;
                  }
                  *(_DWORD *)buf = 136446466;
                  *(_QWORD *)&buf[4] = "nw_http1_remove_pending_stream";
                  *(_WORD *)&buf[12] = 2048;
                  *(_QWORD *)&buf[14] = v243;
                  v293 = "%{public}s stream %p not in pending list, cannot remove, no backtrace";
                }
                else
                {
                  v291 = __nwlog_obj();
                  v292 = v1075[0];
                  if (!os_log_type_enabled(v291, (os_log_type_t)v1075[0]))
                    goto LABEL_896;
                  *(_DWORD *)buf = 136446466;
                  *(_QWORD *)&buf[4] = "nw_http1_remove_pending_stream";
                  *(_WORD *)&buf[12] = 2048;
                  *(_QWORD *)&buf[14] = v243;
                  v293 = "%{public}s stream %p not in pending list, cannot remove, backtrace limit exceeded";
                }
                _os_log_impl(&dword_182FBE000, v291, v292, v293, buf, 0x16u);
                goto LABEL_896;
              }
              v378 = *(_QWORD *)(v243 + 296);
              v379 = *(_QWORD **)(v243 + 304);
              if (v378)
              {
                *(_QWORD *)(v378 + 304) = v379;
                v379 = *(_QWORD **)(v243 + 304);
              }
              else
              {
                *(_QWORD *)(v11 + 256) = v379;
              }
              *v379 = v378;
              *(_QWORD *)(v243 + 296) = 0;
              *(_QWORD *)(v243 + 304) = 0;
              v444 = *(_DWORD *)(v11 + 348);
              *(_DWORD *)(v11 + 348) = v444 - 1;
              if (v444)
              {
LABEL_1014:
                *(_WORD *)(v243 + 428) &= ~0x1000u;
                if ((*(_BYTE *)(v243 + 158) & 1) == 0)
                {
                  if (v15[1345])
                  {
                    v974 = __nwlog_obj();
                    if (os_log_type_enabled(v974, OS_LOG_TYPE_DEBUG))
                    {
                      v975 = v243 + 74;
                      v976 = *(_QWORD *)(v243 + 256);
                      v977 = *(_DWORD *)(*(_QWORD *)(v243 + 248) + 372);
                      if (v976)
                        LODWORD(v976) = *(_DWORD *)(v976 + 860);
                      v243 = v1051;
                      v978 = *(_DWORD *)(v1051 + 424);
                      v979 = *(_DWORD *)(v1052 + 348);
                      *(_DWORD *)buf = 136448258;
                      *(_QWORD *)&buf[4] = "nw_http1_remove_pending_stream";
                      *(_WORD *)&buf[12] = 2082;
                      *(_QWORD *)&buf[14] = v975;
                      *(_WORD *)&buf[22] = 2080;
                      v1061 = (uint64_t)" ";
                      *(_WORD *)v1062 = 1024;
                      *(_DWORD *)&v1062[2] = v977;
                      *(_WORD *)&v1062[6] = 1024;
                      *(_DWORD *)&v1062[8] = v976;
                      *(_WORD *)&v1062[12] = 1024;
                      *(_DWORD *)&v1062[14] = v978;
                      *(_WORD *)&v1062[18] = 1024;
                      *(_DWORD *)&v1062[20] = v978;
                      *(_WORD *)&v1062[24] = 2048;
                      *(_QWORD *)&v1062[26] = v1051;
                      *(_WORD *)&v1062[34] = 1024;
                      *(_DWORD *)&v1062[36] = v979;
                      _os_log_impl(&dword_182FBE000, v974, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> removed pending stream %u (%p), now have %u pending streams", buf, 0x48u);
                      v15 = (_BYTE *)&unk_1ECD84000;
                    }
                  }
                }
                goto LABEL_1016;
              }
              __nwlog_obj();
              v445 = *(unsigned int *)(v11 + 348);
              *(_DWORD *)buf = 136446978;
              *(_QWORD *)&buf[4] = "nw_http1_remove_pending_stream";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = "http1->pending_stream_count";
              *(_WORD *)&buf[22] = 2048;
              v1061 = 1;
              *(_WORD *)v1062 = 2048;
              *(_QWORD *)&v1062[2] = v445;
              v446 = (char *)_os_log_send_and_compose_impl();
              v1075[0] = 16;
              aBlock[0] = 0;
              if (__nwlog_fault(v446, v1075, aBlock))
              {
                if (v1075[0] == 17)
                {
                  v447 = __nwlog_obj();
                  v448 = v1075[0];
                  if (os_log_type_enabled(v447, (os_log_type_t)v1075[0]))
                  {
                    v449 = *(unsigned int *)(v11 + 348);
                    *(_DWORD *)buf = 136446978;
                    *(_QWORD *)&buf[4] = "nw_http1_remove_pending_stream";
                    *(_WORD *)&buf[12] = 2082;
                    *(_QWORD *)&buf[14] = "http1->pending_stream_count";
                    *(_WORD *)&buf[22] = 2048;
                    v1061 = 1;
                    *(_WORD *)v1062 = 2048;
                    *(_QWORD *)&v1062[2] = v449;
                    v450 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu";
LABEL_1010:
                    _os_log_impl(&dword_182FBE000, v447, v448, v450, buf, 0x2Au);
                  }
                }
                else if (aBlock[0])
                {
                  v523 = (char *)__nw_create_backtrace_string();
                  v447 = __nwlog_obj();
                  v448 = v1075[0];
                  v524 = os_log_type_enabled(v447, (os_log_type_t)v1075[0]);
                  if (v523)
                  {
                    if (v524)
                    {
                      v525 = *(unsigned int *)(v11 + 348);
                      *(_DWORD *)buf = 136447234;
                      *(_QWORD *)&buf[4] = "nw_http1_remove_pending_stream";
                      *(_WORD *)&buf[12] = 2082;
                      *(_QWORD *)&buf[14] = "http1->pending_stream_count";
                      *(_WORD *)&buf[22] = 2048;
                      v1061 = 1;
                      *(_WORD *)v1062 = 2048;
                      *(_QWORD *)&v1062[2] = v525;
                      *(_WORD *)&v1062[10] = 2082;
                      *(_QWORD *)&v1062[12] = v523;
                      _os_log_impl(&dword_182FBE000, v447, v448, "%{public}s Underflow: %{public}s, decrement %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
                    }
                    free(v523);
                    goto LABEL_1011;
                  }
                  if (v524)
                  {
                    v619 = *(unsigned int *)(v11 + 348);
                    *(_DWORD *)buf = 136446978;
                    *(_QWORD *)&buf[4] = "nw_http1_remove_pending_stream";
                    *(_WORD *)&buf[12] = 2082;
                    *(_QWORD *)&buf[14] = "http1->pending_stream_count";
                    *(_WORD *)&buf[22] = 2048;
                    v1061 = 1;
                    *(_WORD *)v1062 = 2048;
                    *(_QWORD *)&v1062[2] = v619;
                    v450 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, no backtrace";
                    goto LABEL_1010;
                  }
                }
                else
                {
                  v447 = __nwlog_obj();
                  v448 = v1075[0];
                  if (os_log_type_enabled(v447, (os_log_type_t)v1075[0]))
                  {
                    v570 = *(unsigned int *)(v11 + 348);
                    *(_DWORD *)buf = 136446978;
                    *(_QWORD *)&buf[4] = "nw_http1_remove_pending_stream";
                    *(_WORD *)&buf[12] = 2082;
                    *(_QWORD *)&buf[14] = "http1->pending_stream_count";
                    *(_WORD *)&buf[22] = 2048;
                    v1061 = 1;
                    *(_WORD *)v1062 = 2048;
                    *(_QWORD *)&v1062[2] = v570;
                    v450 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, backtrace limit exceeded";
                    goto LABEL_1010;
                  }
                }
              }
LABEL_1011:
              if (v446)
                free(v446);
              *(_DWORD *)(v11 + 348) = 0;
              v243 = v1051;
              goto LABEL_1014;
            }
            if (!*(_QWORD *)(v243 + 32))
            {
              if (!(*(_BYTE *)(v243 + 158) & 1 | (v15[1345] == 0)))
              {
                v362 = __nwlog_obj();
                if (os_log_type_enabled(v362, OS_LOG_TYPE_DEBUG))
                {
                  v363 = *(_QWORD *)(v243 + 256);
                  v364 = *(_DWORD *)(*(_QWORD *)(v243 + 248) + 372);
                  if (v363)
                    LODWORD(v363) = *(_DWORD *)(v363 + 860);
                  v365 = *(_DWORD *)(v1051 + 424);
                  *(_DWORD *)buf = 136447746;
                  *(_QWORD *)&buf[4] = "nw_http1_create_connection_for_stream_if_allowed";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = v243 + 74;
                  *(_WORD *)&buf[22] = 2080;
                  v1061 = (uint64_t)" ";
                  *(_WORD *)v1062 = 1024;
                  *(_DWORD *)&v1062[2] = v364;
                  *(_WORD *)&v1062[6] = 1024;
                  *(_DWORD *)&v1062[8] = v363;
                  *(_WORD *)&v1062[12] = 1024;
                  *(_DWORD *)&v1062[14] = v365;
                  *(_WORD *)&v1062[18] = 2048;
                  *(_QWORD *)&v1062[20] = v1051;
                  _os_log_impl(&dword_182FBE000, v362, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> Stream %p still awaiting new output handler", buf, 0x3Cu);
                  v11 = v1052;
                }
              }
              goto LABEL_450;
            }
            if (!(*(_BYTE *)(v243 + 158) & 1 | (v15[1345] == 0)))
            {
              v847 = __nwlog_obj();
              if (os_log_type_enabled(v847, OS_LOG_TYPE_DEBUG))
              {
                v848 = v243 + 74;
                v849 = *(_QWORD *)(v243 + 256);
                v850 = *(_DWORD *)(*(_QWORD *)(v243 + 248) + 372);
                if (v849)
                  LODWORD(v849) = *(_DWORD *)(v849 + 860);
                v243 = v1051;
                v851 = *(_DWORD *)(v1051 + 424);
                v852 = *(_QWORD *)(v1051 + 32);
                *(_DWORD *)buf = 136448002;
                *(_QWORD *)&buf[4] = "nw_http1_create_connection_for_stream_if_allowed";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = v848;
                *(_WORD *)&buf[22] = 2080;
                v1061 = (uint64_t)" ";
                *(_WORD *)v1062 = 1024;
                *(_DWORD *)&v1062[2] = v850;
                *(_WORD *)&v1062[6] = 1024;
                *(_DWORD *)&v1062[8] = v849;
                *(_WORD *)&v1062[12] = 1024;
                *(_DWORD *)&v1062[14] = v851;
                *(_WORD *)&v1062[18] = 2048;
                *(_QWORD *)&v1062[20] = v1051;
                *(_WORD *)&v1062[28] = 2048;
                *(_QWORD *)&v1062[30] = v852;
                _os_log_impl(&dword_182FBE000, v847, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> creating connection for stream %p with new output_handler %p", buf, 0x46u);
                v15 = (_BYTE *)&unk_1ECD84000;
              }
            }
            v296 = *(_OWORD **)(v243 + 32);
            if (v296)
            {
              v297 = *(void **)(v243 + 336);
              if (v297)
              {
                v298 = *(void **)(v243 + 320);
                if (v298)
                {
                  v299 = malloc_type_calloc(1uLL, 0x370uLL, 0xEAFB8F1AuLL);
                  if (!v299)
                  {
                    v853 = __nwlog_obj();
                    os_log_type_enabled(v853, OS_LOG_TYPE_ERROR);
                    *(_DWORD *)buf = 136446722;
                    *(_QWORD *)&buf[4] = "strict_calloc";
                    *(_WORD *)&buf[12] = 2048;
                    *(_QWORD *)&buf[14] = 1;
                    *(_WORD *)&buf[22] = 2048;
                    v1061 = 880;
                    v854 = (void *)_os_log_send_and_compose_impl();
                    result = __nwlog_abort((uint64_t)v854);
                    if (result)
                      goto LABEL_1881;
                    free(v854);
                    v15 = (_BYTE *)&unk_1ECD84000;
                  }
                  bzero(v299, 0x370uLL);
                  if (nw_protocol_http1_identifier::onceToken != -1)
                    dispatch_once(&nw_protocol_http1_identifier::onceToken, &__block_literal_global_39812);
                  *((_QWORD *)v299 + 2) = &nw_protocol_http1_identifier::http1_protocol_identifier;
                  if (nw_protocol_http1_get_callbacks(void)::onceToken[0] != -1)
                    dispatch_once(nw_protocol_http1_get_callbacks(void)::onceToken, &__block_literal_global_17_39614);
                  *((_QWORD *)v299 + 3) = &nw_protocol_http1_get_callbacks(void)::http1_protocol_callbacks;
                  *((_DWORD *)v299 + 46) = 3;
                  *((_QWORD *)v299 + 22) = v299;
                  *((_QWORD *)v299 + 5) = v299 + 10;
                  *((_QWORD *)v299 + 60) = v1052;
                  nw_protocol_set_output_handler((uint64_t)v299, (uint64_t)v296);
                  *(_QWORD *)buf = os_retain(v297);
                  nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v299 + 47), buf);
                  *(_QWORD *)buf = os_retain(v298);
                  nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v299 + 46), buf);
                  *(_QWORD *)buf = nw_parameters_copy_context(v298);
                  nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v299 + 31), buf);
                  *((_QWORD *)v299 + 24) = *(_QWORD *)(v1052 + 192);
                  v300 = MEMORY[0x1E0C809B0];
                  v301 = (void *)*((_QWORD *)v299 + 62);
                  *(_QWORD *)v1075 = MEMORY[0x1E0C809B0];
                  *(_QWORD *)&v1075[8] = 0x40000000;
                  *(_QWORD *)&v1075[16] = ___ZL26nw_http1_connection_createP11nw_protocolP17nw_protocol_http1P11nw_endpointP13nw_parameters_block_invoke;
                  v1076 = (uint64_t (*)(uint64_t, uint64_t))&__block_descriptor_tmp_40_39813;
                  v1077 = (void (*)(uint64_t))v299;
                  *(_QWORD *)buf = nw_http_connection_create_metadata(v301, v1075, 0);
                  nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v299 + 48), buf);
                  nw_http_connection_metadata_set_version(*((void **)v299 + 96), 3);
                  nw_http_connection_metadata_set_shared_connection_pool_metadata(*((void **)v299 + 96), *(void **)(v1052 + 312));
                  *((_QWORD *)v299 + 77) = 0;
                  *((_QWORD *)v299 + 78) = (char *)v299 + 616;
                  *((_QWORD *)v299 + 79) = 0;
                  *((_QWORD *)v299 + 80) = (char *)v299 + 632;
                  *((_QWORD *)v299 + 81) = 0;
                  *((_QWORD *)v299 + 82) = (char *)v299 + 648;
                  *((_QWORD *)v299 + 83) = 0;
                  *((_QWORD *)v299 + 84) = (char *)v299 + 664;
                  *((_QWORD *)v299 + 86) = (char *)v299 + 680;
                  *((_QWORD *)v299 + 85) = 0;
                  nw_frame_cache_init((uint64_t)v299 + 696, (uint64_t)v299, 256, 0x40000, 16);
                  v302 = *((_QWORD *)v299 + 60);
                  if (v302)
                  {
                    *(_OWORD *)((char *)v299 + 360) = 0u;
                    *(_OWORD *)((char *)v299 + 376) = 0u;
                    *(_OWORD *)((char *)v299 + 392) = 0u;
                    *(_OWORD *)((char *)v299 + 408) = 0u;
                    *(_OWORD *)((char *)v299 + 424) = 0u;
                    *(_OWORD *)((char *)v299 + 440) = 0u;
                    *(_OWORD *)((char *)v299 + 328) = 0u;
                    *(_OWORD *)((char *)v299 + 344) = 0u;
                    *((_QWORD *)v299 + 59) = nw_http1_on_reset;
                    *((_QWORD *)v299 + 37) = nw_http1_on_message_begin;
                    *((_QWORD *)v299 + 38) = nw_http1_on_url;
                    *((_QWORD *)v299 + 48) = nw_http1_on_message_complete;
                    *((_QWORD *)v299 + 49) = nw_http1_on_url_complete;
                    *((_QWORD *)v299 + 39) = nw_http1_on_status;
                    *((_QWORD *)v299 + 40) = nw_http1_on_method;
                    *((_QWORD *)v299 + 50) = nw_http1_on_status_complete;
                    *((_QWORD *)v299 + 51) = nw_http1_on_method_complete;
                    *((_QWORD *)v299 + 42) = nw_http1_on_header_field;
                    *((_QWORD *)v299 + 43) = nw_http1_on_header_value;
                    *((_QWORD *)v299 + 53) = nw_http1_on_header_field_complete;
                    *((_QWORD *)v299 + 54) = nw_http1_on_header_value_complete;
                    *((_QWORD *)v299 + 46) = nw_http1_on_headers_complete;
                    *((_QWORD *)v299 + 47) = nw_http1_on_body;
                    *((_QWORD *)v299 + 57) = nw_http1_on_chunk_header;
                    *((_QWORD *)v299 + 58) = nw_http1_on_chunk_complete;
                    v303 = *(_BYTE *)(v302 + 376);
                    *(_OWORD *)((char *)v299 + 248) = 0u;
                    *(_OWORD *)((char *)v299 + 200) = 0u;
                    *(_OWORD *)((char *)v299 + 264) = 0u;
                    *(_OWORD *)((char *)v299 + 232) = 0u;
                    *(_OWORD *)((char *)v299 + 216) = 0u;
                    if ((v303 & 1) != 0)
                      v304 = 1;
                    else
                      v304 = 2;
                    *((_BYTE *)v299 + 272) = v304;
                    *((_QWORD *)v299 + 35) = 0;
                    *((_QWORD *)v299 + 36) = (char *)v299 + 296;
                    *((_WORD *)v299 + 139) = 15619;
                    *((_QWORD *)v299 + 31) = v299;
                    *((_QWORD *)v299 + 32) = 238;
                    v305 = v1051;
                    if ((*((_BYTE *)v299 + 158) & 1) == 0)
                    {
                      v306 = __nwlog_obj();
                      if (os_log_type_enabled(v306, OS_LOG_TYPE_DEBUG))
                      {
                        v307 = *((_QWORD *)v299 + 61);
                        v308 = *(_DWORD *)(*((_QWORD *)v299 + 60) + 372);
                        v309 = *((_DWORD *)v299 + 215);
                        if (v307)
                          LODWORD(v307) = *(_DWORD *)(v307 + 424);
                        *(_DWORD *)buf = 136448258;
                        *(_QWORD *)&buf[4] = "nw_http1_connection_log_parser_version";
                        *(_WORD *)&buf[12] = 2082;
                        *(_QWORD *)&buf[14] = (char *)v299 + 74;
                        *(_WORD *)&buf[22] = 2080;
                        v1061 = (uint64_t)" ";
                        *(_WORD *)v1062 = 1024;
                        *(_DWORD *)&v1062[2] = v308;
                        *(_WORD *)&v1062[6] = 1024;
                        *(_DWORD *)&v1062[8] = v309;
                        *(_WORD *)&v1062[12] = 1024;
                        *(_DWORD *)&v1062[14] = v307;
                        *(_WORD *)&v1062[18] = 1024;
                        *(_DWORD *)&v1062[20] = 9;
                        *(_WORD *)&v1062[24] = 1024;
                        *(_DWORD *)&v1062[26] = 2;
                        *(_WORD *)&v1062[30] = 1024;
                        *(_DWORD *)&v1062[32] = 1;
                        _os_log_impl(&dword_182FBE000, v306, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> using http parser v%u.%u.%u", buf, 0x44u);
                      }
                    }
                    goto LABEL_519;
                  }
                  __nwlog_obj();
                  *(_DWORD *)buf = 136446210;
                  *(_QWORD *)&buf[4] = "nw_http1_connection_parser_init";
                  v855 = (char *)_os_log_send_and_compose_impl();
                  type[0] = 16;
                  LOBYTE(v1055[0]) = 0;
                  if (__nwlog_fault(v855, type, v1055))
                  {
                    if (type[0] == 17)
                    {
                      v856 = __nwlog_obj();
                      v857 = type[0];
                      if (os_log_type_enabled(v856, (os_log_type_t)type[0]))
                      {
                        *(_DWORD *)buf = 136446210;
                        *(_QWORD *)&buf[4] = "nw_http1_connection_parser_init";
                        v858 = "%{public}s called with null http1_connection->protocol_http1";
LABEL_1690:
                        _os_log_impl(&dword_182FBE000, v856, v857, v858, buf, 0xCu);
                      }
                    }
                    else if (LOBYTE(v1055[0]))
                    {
                      v934 = (char *)__nw_create_backtrace_string();
                      v856 = __nwlog_obj();
                      v857 = type[0];
                      v935 = os_log_type_enabled(v856, (os_log_type_t)type[0]);
                      if (v934)
                      {
                        if (v935)
                        {
                          *(_DWORD *)buf = 136446466;
                          *(_QWORD *)&buf[4] = "nw_http1_connection_parser_init";
                          *(_WORD *)&buf[12] = 2082;
                          *(_QWORD *)&buf[14] = v934;
                          _os_log_impl(&dword_182FBE000, v856, v857, "%{public}s called with null http1_connection->protocol_http1, dumping backtrace:%{public}s", buf, 0x16u);
                        }
                        free(v934);
                        goto LABEL_1691;
                      }
                      if (v935)
                      {
                        *(_DWORD *)buf = 136446210;
                        *(_QWORD *)&buf[4] = "nw_http1_connection_parser_init";
                        v858 = "%{public}s called with null http1_connection->protocol_http1, no backtrace";
                        goto LABEL_1690;
                      }
                    }
                    else
                    {
                      v856 = __nwlog_obj();
                      v857 = type[0];
                      if (os_log_type_enabled(v856, (os_log_type_t)type[0]))
                      {
                        *(_DWORD *)buf = 136446210;
                        *(_QWORD *)&buf[4] = "nw_http1_connection_parser_init";
                        v858 = "%{public}s called with null http1_connection->protocol_http1, backtrace limit exceeded";
                        goto LABEL_1690;
                      }
                    }
                  }
LABEL_1691:
                  if (v855)
                    free(v855);
                  v15 = (_BYTE *)&unk_1ECD84000;
                  v305 = v1051;
LABEL_519:
                  *(_QWORD *)buf = 0;
                  *(_QWORD *)&buf[8] = buf;
                  *(_QWORD *)&buf[16] = 0x2000000000;
                  v1061 = (uint64_t)v299;
                  *(_QWORD *)aBlock = v300;
                  *(_QWORD *)&aBlock[8] = 0x40000000;
                  *(_QWORD *)&aBlock[16] = ___ZL26nw_http1_connection_createP11nw_protocolP17nw_protocol_http1P11nw_endpointP13nw_parameters_block_invoke_2;
                  v1071 = &unk_1E14A14C8;
                  v1072 = (uint64_t *)buf;
                  *((_QWORD *)v299 + 76) = _Block_copy(aBlock);
                  _Block_object_dispose(buf, 8);
                  if ((*((_BYTE *)v299 + 158) & 1) == 0)
                  {
                    if (v15[1345])
                    {
                      v867 = __nwlog_obj();
                      if (os_log_type_enabled(v867, OS_LOG_TYPE_DEBUG))
                      {
                        v868 = *((_QWORD *)v299 + 61);
                        v869 = *(_DWORD *)(*((_QWORD *)v299 + 60) + 372);
                        v870 = *((_DWORD *)v299 + 215);
                        if (v868)
                          LODWORD(v868) = *(_DWORD *)(v868 + 424);
                        *(_DWORD *)buf = 136447746;
                        *(_QWORD *)&buf[4] = "nw_http1_connection_create";
                        *(_WORD *)&buf[12] = 2082;
                        *(_QWORD *)&buf[14] = (char *)v299 + 74;
                        *(_WORD *)&buf[22] = 2080;
                        v1061 = (uint64_t)" ";
                        *(_WORD *)v1062 = 1024;
                        *(_DWORD *)&v1062[2] = v869;
                        *(_WORD *)&v1062[6] = 1024;
                        *(_DWORD *)&v1062[8] = v870;
                        *(_WORD *)&v1062[12] = 1024;
                        *(_DWORD *)&v1062[14] = v868;
                        *(_WORD *)&v1062[18] = 2048;
                        *(_QWORD *)&v1062[20] = v299;
                        _os_log_impl(&dword_182FBE000, v867, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> created %p", buf, 0x3Cu);
                        v305 = v1051;
                      }
                    }
                  }
                  v310 = (NSObject **)(v299 + 32);
                  nw_protocol_replace_input_handler((uint64_t)v296, v305, (uint64_t)v299);
                  *v299 = *v296;
                  v311 = (void *)*((_QWORD *)v299 + 92);
                  v11 = v1052;
                  if (v311)
                  {
                    if (!*((_QWORD *)v299 + 66))
                    {
                      v312 = (void **)(v299 + 35);
                      v313 = nw_parameters_copy_context(*((void **)v299 + 92));
                      *(_QWORD *)buf = nw_path_copy_flow_registration(v313, (uint64_t)v299);
                      nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v299 + 35), buf);
                      v314 = (void *)*((_QWORD *)v299 + 70);
                      if (v314)
                      {
                        v315 = nw_path_flow_registration_copy_endpoint(v314);
                        v316 = nw_path_flow_registration_copy_parameters(*v312);
                        *(_QWORD *)buf = nw_endpoint_copy_association_with_evaluator(v315, v316, 0);
                        nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v299 + 33), buf);
                        if (*((_QWORD *)v299 + 66))
                        {
                          *(_QWORD *)buf = nw_protocol_instance_stub_create((nw_protocol *)v299);
                          nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v299 + 34), buf);
                          nw_association_register(*((void **)v299 + 66), v311, *((void **)v299 + 68), 0, &__block_literal_global_70_39832);
                          v317 = nw_association_copy_current_path(*((void **)v299 + 66), v316);
                          if (v317)
                          {
                            v318 = v317;
                            v319 = nw_path_copy_for_flow_registration(v317, *v312);
                            if (v319)
                            {
                              v320 = v319;
                              if (*v310 != v319)
                              {
                                *(_QWORD *)buf = os_retain(v319);
                                nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v299 + 32), buf);
                              }
                              if (nw_path_has_flows(v320))
                                v321 = 4096;
                              else
                                v321 = 0;
                              v322 = *((_WORD *)v299 + 436) & 0xEFFF | (*((unsigned __int8 *)v299 + 874) << 16);
                              *((_WORD *)v299 + 436) = *((_WORD *)v299 + 436) & 0xEFFF | v321;
                              *((_BYTE *)v299 + 874) = BYTE2(v322);
                              v323 = nw_parameters_copy_effective_proxy_config(v311);
                              if (v323)
                              {
                                v324 = v323;
                                if (nw_path_has_proxy_config(v318, v323))
                                {
                                  *(_QWORD *)buf = os_retain(v324);
                                  nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v299 + 36), buf);
                                }
                                os_release(v324);
                              }
                              os_release(v320);
                            }
                            os_release(v318);
                          }
                        }
                        if (v316)
                          os_release(v316);
                        v11 = v1052;
                        if (v315)
                          os_release(v315);
                      }
                      v305 = v1051;
                      if (v313)
                        os_release(v313);
                    }
                    v325 = *v310;
                    if (*v310)
                    {
LABEL_545:
                      if (nw_path_uses_interface_type(v325, nw_interface_type_cellular))
                        *((_QWORD *)v299 + 24) = 1000;
                    }
LABEL_547:
                    v326 = *(unsigned int *)(v11 + 336) + 1;
                    v327 = v326 << 31 >> 31;
                    *(_DWORD *)(v11 + 336) = v326;
                    if (v327 == v326 && (v327 & 0x8000000000000000) == 0)
                      goto LABEL_768;
                    __nwlog_obj();
                    v328 = *(unsigned int *)(v11 + 336);
                    *(_DWORD *)buf = 136446978;
                    *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
                    *(_WORD *)&buf[12] = 2082;
                    *(_QWORD *)&buf[14] = "http1->connections_count";
                    *(_WORD *)&buf[22] = 2048;
                    v1061 = 1;
                    *(_WORD *)v1062 = 2048;
                    *(_QWORD *)&v1062[2] = v328;
                    v329 = (char *)_os_log_send_and_compose_impl();
                    v1075[0] = 16;
                    aBlock[0] = 0;
                    if (__nwlog_fault(v329, v1075, aBlock))
                    {
                      if (v1075[0] == 17)
                      {
                        v330 = __nwlog_obj();
                        v331 = v1075[0];
                        if (os_log_type_enabled(v330, (os_log_type_t)v1075[0]))
                        {
                          v332 = *(unsigned int *)(v1052 + 336);
                          *(_DWORD *)buf = 136446978;
                          *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
                          *(_WORD *)&buf[12] = 2082;
                          *(_QWORD *)&buf[14] = "http1->connections_count";
                          *(_WORD *)&buf[22] = 2048;
                          v1061 = 1;
                          *(_WORD *)v1062 = 2048;
                          *(_QWORD *)&v1062[2] = v332;
                          v333 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_764:
                          _os_log_impl(&dword_182FBE000, v330, v331, v333, buf, 0x2Au);
                        }
                      }
                      else if (aBlock[0])
                      {
                        v375 = (char *)__nw_create_backtrace_string();
                        v330 = __nwlog_obj();
                        v331 = v1075[0];
                        v376 = os_log_type_enabled(v330, (os_log_type_t)v1075[0]);
                        if (v375)
                        {
                          if (v376)
                          {
                            v377 = *(unsigned int *)(v1052 + 336);
                            *(_DWORD *)buf = 136447234;
                            *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
                            *(_WORD *)&buf[12] = 2082;
                            *(_QWORD *)&buf[14] = "http1->connections_count";
                            *(_WORD *)&buf[22] = 2048;
                            v1061 = 1;
                            *(_WORD *)v1062 = 2048;
                            *(_QWORD *)&v1062[2] = v377;
                            *(_WORD *)&v1062[10] = 2082;
                            *(_QWORD *)&v1062[12] = v375;
                            _os_log_impl(&dword_182FBE000, v330, v331, "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
                          }
                          free(v375);
                          v305 = v1051;
                          goto LABEL_765;
                        }
                        v305 = v1051;
                        if (v376)
                        {
                          v455 = *(unsigned int *)(v1052 + 336);
                          *(_DWORD *)buf = 136446978;
                          *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
                          *(_WORD *)&buf[12] = 2082;
                          *(_QWORD *)&buf[14] = "http1->connections_count";
                          *(_WORD *)&buf[22] = 2048;
                          v1061 = 1;
                          *(_WORD *)v1062 = 2048;
                          *(_QWORD *)&v1062[2] = v455;
                          v333 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
                          goto LABEL_764;
                        }
                      }
                      else
                      {
                        v330 = __nwlog_obj();
                        v331 = v1075[0];
                        if (os_log_type_enabled(v330, (os_log_type_t)v1075[0]))
                        {
                          v434 = *(unsigned int *)(v1052 + 336);
                          *(_DWORD *)buf = 136446978;
                          *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
                          *(_WORD *)&buf[12] = 2082;
                          *(_QWORD *)&buf[14] = "http1->connections_count";
                          *(_WORD *)&buf[22] = 2048;
                          v1061 = 1;
                          *(_WORD *)v1062 = 2048;
                          *(_QWORD *)&v1062[2] = v434;
                          v333 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
                          goto LABEL_764;
                        }
                      }
                    }
LABEL_765:
                    if (v329)
                      free(v329);
                    v11 = v1052;
                    *(_DWORD *)(v1052 + 336) = -1;
LABEL_768:
                    v456 = *(unsigned int *)(v11 + 360) + 1;
                    v457 = v456 << 31 >> 31;
                    *(_DWORD *)(v11 + 360) = v456;
                    if (v457 == v456 && (v457 & 0x8000000000000000) == 0)
                      goto LABEL_787;
                    __nwlog_obj();
                    v458 = *(unsigned int *)(v11 + 360);
                    *(_DWORD *)buf = 136446978;
                    *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
                    *(_WORD *)&buf[12] = 2082;
                    *(_QWORD *)&buf[14] = "http1->next_connection_log_num";
                    *(_WORD *)&buf[22] = 2048;
                    v1061 = 1;
                    *(_WORD *)v1062 = 2048;
                    *(_QWORD *)&v1062[2] = v458;
                    v459 = (char *)_os_log_send_and_compose_impl();
                    v1075[0] = 16;
                    aBlock[0] = 0;
                    if (__nwlog_fault(v459, v1075, aBlock))
                    {
                      if (v1075[0] == 17)
                      {
                        v460 = __nwlog_obj();
                        v461 = v1075[0];
                        if (os_log_type_enabled(v460, (os_log_type_t)v1075[0]))
                        {
                          v462 = *(unsigned int *)(v1052 + 360);
                          *(_DWORD *)buf = 136446978;
                          *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
                          *(_WORD *)&buf[12] = 2082;
                          *(_QWORD *)&buf[14] = "http1->next_connection_log_num";
                          *(_WORD *)&buf[22] = 2048;
                          v1061 = 1;
                          *(_WORD *)v1062 = 2048;
                          *(_QWORD *)&v1062[2] = v462;
                          v463 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_783:
                          _os_log_impl(&dword_182FBE000, v460, v461, v463, buf, 0x2Au);
                        }
                      }
                      else if (aBlock[0])
                      {
                        v464 = (char *)__nw_create_backtrace_string();
                        v460 = __nwlog_obj();
                        v461 = v1075[0];
                        v465 = os_log_type_enabled(v460, (os_log_type_t)v1075[0]);
                        if (v464)
                        {
                          if (v465)
                          {
                            v466 = *(unsigned int *)(v1052 + 360);
                            *(_DWORD *)buf = 136447234;
                            *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
                            *(_WORD *)&buf[12] = 2082;
                            *(_QWORD *)&buf[14] = "http1->next_connection_log_num";
                            *(_WORD *)&buf[22] = 2048;
                            v1061 = 1;
                            *(_WORD *)v1062 = 2048;
                            *(_QWORD *)&v1062[2] = v466;
                            *(_WORD *)&v1062[10] = 2082;
                            *(_QWORD *)&v1062[12] = v464;
                            _os_log_impl(&dword_182FBE000, v460, v461, "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
                          }
                          free(v464);
                          v305 = v1051;
                          goto LABEL_784;
                        }
                        v305 = v1051;
                        if (v465)
                        {
                          v468 = *(unsigned int *)(v1052 + 360);
                          *(_DWORD *)buf = 136446978;
                          *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
                          *(_WORD *)&buf[12] = 2082;
                          *(_QWORD *)&buf[14] = "http1->next_connection_log_num";
                          *(_WORD *)&buf[22] = 2048;
                          v1061 = 1;
                          *(_WORD *)v1062 = 2048;
                          *(_QWORD *)&v1062[2] = v468;
                          v463 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
                          goto LABEL_783;
                        }
                      }
                      else
                      {
                        v460 = __nwlog_obj();
                        v461 = v1075[0];
                        if (os_log_type_enabled(v460, (os_log_type_t)v1075[0]))
                        {
                          v467 = *(unsigned int *)(v1052 + 360);
                          *(_DWORD *)buf = 136446978;
                          *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
                          *(_WORD *)&buf[12] = 2082;
                          *(_QWORD *)&buf[14] = "http1->next_connection_log_num";
                          *(_WORD *)&buf[22] = 2048;
                          v1061 = 1;
                          *(_WORD *)v1062 = 2048;
                          *(_QWORD *)&v1062[2] = v467;
                          v463 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
                          goto LABEL_783;
                        }
                      }
                    }
LABEL_784:
                    if (v459)
                      free(v459);
                    LODWORD(v456) = -1;
                    v11 = v1052;
                    *(_DWORD *)(v1052 + 360) = -1;
LABEL_787:
                    *((_DWORD *)v299 + 215) = v456;
                    if ((*((_BYTE *)v299 + 158) & 1) == 0)
                    {
                      if (gLogDatapath)
                      {
                        v871 = __nwlog_obj();
                        if (os_log_type_enabled(v871, OS_LOG_TYPE_DEBUG))
                        {
                          v872 = *((_QWORD *)v299 + 61);
                          v873 = *(_DWORD *)(*((_QWORD *)v299 + 60) + 372);
                          v874 = *((_DWORD *)v299 + 215);
                          if (v872)
                            LODWORD(v872) = *(_DWORD *)(v872 + 424);
                          v11 = v1052;
                          v875 = *(_DWORD *)(v1052 + 336);
                          *(_DWORD *)buf = 136448002;
                          *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
                          *(_WORD *)&buf[12] = 2082;
                          *(_QWORD *)&buf[14] = (char *)v299 + 74;
                          *(_WORD *)&buf[22] = 2080;
                          v1061 = (uint64_t)" ";
                          *(_WORD *)v1062 = 1024;
                          *(_DWORD *)&v1062[2] = v873;
                          *(_WORD *)&v1062[6] = 1024;
                          *(_DWORD *)&v1062[8] = v874;
                          *(_WORD *)&v1062[12] = 1024;
                          *(_DWORD *)&v1062[14] = v872;
                          *(_WORD *)&v1062[18] = 2048;
                          *(_QWORD *)&v1062[20] = v299;
                          *(_WORD *)&v1062[28] = 1024;
                          *(_DWORD *)&v1062[30] = v875;
                          _os_log_impl(&dword_182FBE000, v871, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> added connection %p, now have %u connections", buf, 0x42u);
                          v305 = v1051;
                        }
                      }
                    }
                    if (*(_QWORD *)(v305 + 248))
                    {
                      if (!*((_QWORD *)v299 + 61))
                      {
                        *(_QWORD *)(v305 + 256) = v299;
                        *((_QWORD *)v299 + 61) = v305;
                        nw_protocol_set_output_handler(v305, *((_QWORD *)v299 + 4));
                        nw_protocol_set_input_handler((uint64_t)v299, *(_QWORD *)(v305 + 48));
                        *(_OWORD *)v305 = *v299;
                        v475 = v1050[5];
                        v477 = v1050[2];
                        v476 = v1050[3];
                        v299[8] = v1050[4];
                        v299[9] = v475;
                        v299[6] = v477;
                        v299[7] = v476;
                        v478 = v1050[1];
                        v299[4] = *v1050;
                        v299[5] = v478;
                        nw_http_transaction_metadata_set_connection_metadata(*(void **)(v305 + 352), *((void **)v299 + 96));
                        *((_WORD *)v299 + 436) &= 0xFFD7u;
                        *((_DWORD *)v299 + 216) = 1;
                        if ((*((_BYTE *)v299 + 158) & 1) == 0)
                        {
                          v479 = __nwlog_obj();
                          if (os_log_type_enabled(v479, OS_LOG_TYPE_DEBUG))
                          {
                            v480 = *((_QWORD *)v299 + 61);
                            v481 = *(_DWORD *)(*((_QWORD *)v299 + 60) + 372);
                            v482 = *((_DWORD *)v299 + 215);
                            if (v480)
                              LODWORD(v480) = *(_DWORD *)(v480 + 424);
                            *(_DWORD *)buf = 136447490;
                            *(_QWORD *)&buf[4] = "nw_http1_update_connection_input_state";
                            *(_WORD *)&buf[12] = 2082;
                            *(_QWORD *)&buf[14] = (char *)v299 + 74;
                            *(_WORD *)&buf[22] = 2080;
                            v1061 = (uint64_t)" ";
                            *(_WORD *)v1062 = 1024;
                            *(_DWORD *)&v1062[2] = v481;
                            *(_WORD *)&v1062[6] = 1024;
                            *(_DWORD *)&v1062[8] = v482;
                            *(_WORD *)&v1062[12] = 1024;
                            *(_DWORD *)&v1062[14] = v480;
                            _os_log_impl(&dword_182FBE000, v479, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> connection input state: reading", buf, 0x32u);
                          }
                        }
                        if ((*(_BYTE *)(v305 + 158) & 1) == 0)
                        {
                          v483 = __nwlog_obj();
                          if (os_log_type_enabled(v483, OS_LOG_TYPE_INFO))
                          {
                            v484 = *(_QWORD *)(v305 + 256);
                            v485 = *(_DWORD *)(*(_QWORD *)(v305 + 248) + 372);
                            if (v484)
                              LODWORD(v484) = *(_DWORD *)(v484 + 860);
                            v486 = *(_DWORD *)(v305 + 424);
                            *(_DWORD *)buf = 136448002;
                            *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                            *(_WORD *)&buf[12] = 2082;
                            *(_QWORD *)&buf[14] = v305 + 74;
                            *(_WORD *)&buf[22] = 2080;
                            v1061 = (uint64_t)" ";
                            *(_WORD *)v1062 = 1024;
                            *(_DWORD *)&v1062[2] = v485;
                            *(_WORD *)&v1062[6] = 1024;
                            *(_DWORD *)&v1062[8] = v484;
                            *(_WORD *)&v1062[12] = 1024;
                            *(_DWORD *)&v1062[14] = v486;
                            *(_WORD *)&v1062[18] = 2048;
                            *(_QWORD *)&v1062[20] = v305;
                            *(_WORD *)&v1062[28] = 2048;
                            *(_QWORD *)&v1062[30] = v299;
                            _os_log_impl(&dword_182FBE000, v483, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s<i%u:c%u:s%u> stream (%p) now using connection %p", buf, 0x46u);
                            if ((*(_BYTE *)(v305 + 158) & 1) != 0)
                            {
LABEL_823:
                              nw_http_transaction_metadata_set_first_on_connection(*(void **)(v305 + 352));
                              v496 = (void *)nw_protocol_boringssl_copy_definition();
                              v497 = nw_protocol_definition_get_identifier(v496);
                              v498 = (_QWORD *)nw_protocol_get_identifier((uint64_t)v296);
                              v499 = nw_protocols_are_equal(v497, v498);
                              if (v496)
                                os_release(v496);
                              if (v499)
                              {
                                v500 = nw_protocol_copy_info((uint64_t)v296, 255);
                                if (v500)
                                {
                                  v501 = (void *)v500;
                                  v502 = *(_QWORD *)(v500 + 24);
                                  if (*(_QWORD *)(v500 + 16) != v502)
                                  {
                                    v503 = *(void **)(v502 - 8);
                                    if (v503)
                                    {
                                      v504 = os_retain(v503);
                                      if (v504)
                                      {
                                        v505 = v504;
                                        if (nw_protocol_metadata_is_tls(v504))
                                        {
                                          v506 = v505;
                                          nw_http_connection_metadata_set_sec_metadata(*((void **)v299 + 96), v506);
                                          os_release(v506);
                                        }
                                        os_release(v505);
                                      }
                                    }
                                  }
                                  os_release(v501);
                                }
                              }
                              if (v299)
                              {
                                nw_protocol_connect((uint64_t)v296, (uint64_t)v299);
                                goto LABEL_836;
                              }
                              __nwlog_obj();
                              *(_DWORD *)buf = 136446210;
                              *(_QWORD *)&buf[4] = "nw_http1_get_output_protocol";
                              v843 = (char *)_os_log_send_and_compose_impl();
                              v1075[0] = 16;
                              aBlock[0] = 0;
                              if (__nwlog_fault(v843, v1075, aBlock))
                              {
                                if (v1075[0] == 17)
                                {
                                  v844 = __nwlog_obj();
                                  v845 = v1075[0];
                                  if (os_log_type_enabled(v844, (os_log_type_t)v1075[0]))
                                  {
                                    *(_DWORD *)buf = 136446210;
                                    *(_QWORD *)&buf[4] = "nw_http1_get_output_protocol";
                                    v846 = "%{public}s called with null connection";
LABEL_1642:
                                    _os_log_impl(&dword_182FBE000, v844, v845, v846, buf, 0xCu);
                                  }
                                }
                                else if (aBlock[0])
                                {
                                  v905 = (char *)__nw_create_backtrace_string();
                                  v844 = __nwlog_obj();
                                  v845 = v1075[0];
                                  v906 = os_log_type_enabled(v844, (os_log_type_t)v1075[0]);
                                  if (v905)
                                  {
                                    if (v906)
                                    {
                                      *(_DWORD *)buf = 136446466;
                                      *(_QWORD *)&buf[4] = "nw_http1_get_output_protocol";
                                      *(_WORD *)&buf[12] = 2082;
                                      *(_QWORD *)&buf[14] = v905;
                                      _os_log_impl(&dword_182FBE000, v844, v845, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
                                    }
                                    free(v905);
                                    goto LABEL_1643;
                                  }
                                  if (v906)
                                  {
                                    *(_DWORD *)buf = 136446210;
                                    *(_QWORD *)&buf[4] = "nw_http1_get_output_protocol";
                                    v846 = "%{public}s called with null connection, no backtrace";
                                    goto LABEL_1642;
                                  }
                                }
                                else
                                {
                                  v844 = __nwlog_obj();
                                  v845 = v1075[0];
                                  if (os_log_type_enabled(v844, (os_log_type_t)v1075[0]))
                                  {
                                    *(_DWORD *)buf = 136446210;
                                    *(_QWORD *)&buf[4] = "nw_http1_get_output_protocol";
                                    v846 = "%{public}s called with null connection, backtrace limit exceeded";
                                    goto LABEL_1642;
                                  }
                                }
                              }
LABEL_1643:
                              if (v843)
                                free(v843);
                              nw_protocol_connect((uint64_t)v296, 0);
                              v11 = v1052;
                              v305 = v1051;
LABEL_836:
                              nw_protocol_set_output_handler(v11, 0);
                              *(_WORD *)(v305 + 428) &= ~8u;
                              v507 = *(_DWORD *)(v11 + 352);
                              *(_DWORD *)(v11 + 352) = v507 - 1;
                              if (v507)
                                goto LABEL_715;
                              __nwlog_obj();
                              v508 = *(unsigned int *)(v11 + 352);
                              *(_DWORD *)buf = 136446978;
                              *(_QWORD *)&buf[4] = "nw_http1_create_connection_for_stream_if_allowed";
                              *(_WORD *)&buf[12] = 2082;
                              *(_QWORD *)&buf[14] = "http1->pending_output_handler_count";
                              *(_WORD *)&buf[22] = 2048;
                              v1061 = 1;
                              *(_WORD *)v1062 = 2048;
                              *(_QWORD *)&v1062[2] = v508;
                              v509 = (char *)_os_log_send_and_compose_impl();
                              v1075[0] = 16;
                              aBlock[0] = 0;
                              if (__nwlog_fault(v509, v1075, aBlock))
                              {
                                if (v1075[0] == 17)
                                {
                                  v510 = __nwlog_obj();
                                  v511 = v1075[0];
                                  if (os_log_type_enabled(v510, (os_log_type_t)v1075[0]))
                                  {
                                    v512 = *(unsigned int *)(v11 + 352);
                                    *(_DWORD *)buf = 136446978;
                                    *(_QWORD *)&buf[4] = "nw_http1_create_connection_for_stream_if_allowed";
                                    *(_WORD *)&buf[12] = 2082;
                                    *(_QWORD *)&buf[14] = "http1->pending_output_handler_count";
                                    *(_WORD *)&buf[22] = 2048;
                                    v1061 = 1;
                                    *(_WORD *)v1062 = 2048;
                                    *(_QWORD *)&v1062[2] = v512;
                                    v513 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu";
LABEL_854:
                                    _os_log_impl(&dword_182FBE000, v510, v511, v513, buf, 0x2Au);
                                  }
                                }
                                else if (aBlock[0])
                                {
                                  v514 = (char *)__nw_create_backtrace_string();
                                  v510 = __nwlog_obj();
                                  v511 = v1075[0];
                                  v515 = os_log_type_enabled(v510, (os_log_type_t)v1075[0]);
                                  if (v514)
                                  {
                                    if (v515)
                                    {
                                      v516 = *(unsigned int *)(v11 + 352);
                                      *(_DWORD *)buf = 136447234;
                                      *(_QWORD *)&buf[4] = "nw_http1_create_connection_for_stream_if_allowed";
                                      *(_WORD *)&buf[12] = 2082;
                                      *(_QWORD *)&buf[14] = "http1->pending_output_handler_count";
                                      *(_WORD *)&buf[22] = 2048;
                                      v1061 = 1;
                                      *(_WORD *)v1062 = 2048;
                                      *(_QWORD *)&v1062[2] = v516;
                                      *(_WORD *)&v1062[10] = 2082;
                                      *(_QWORD *)&v1062[12] = v514;
                                      _os_log_impl(&dword_182FBE000, v510, v511, "%{public}s Underflow: %{public}s, decrement %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
                                    }
                                    free(v514);
                                    goto LABEL_855;
                                  }
                                  if (v515)
                                  {
                                    v522 = *(unsigned int *)(v11 + 352);
                                    *(_DWORD *)buf = 136446978;
                                    *(_QWORD *)&buf[4] = "nw_http1_create_connection_for_stream_if_allowed";
                                    *(_WORD *)&buf[12] = 2082;
                                    *(_QWORD *)&buf[14] = "http1->pending_output_handler_count";
                                    *(_WORD *)&buf[22] = 2048;
                                    v1061 = 1;
                                    *(_WORD *)v1062 = 2048;
                                    *(_QWORD *)&v1062[2] = v522;
                                    v513 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, no backtrace";
                                    goto LABEL_854;
                                  }
                                }
                                else
                                {
                                  v510 = __nwlog_obj();
                                  v511 = v1075[0];
                                  if (os_log_type_enabled(v510, (os_log_type_t)v1075[0]))
                                  {
                                    v517 = *(unsigned int *)(v11 + 352);
                                    *(_DWORD *)buf = 136446978;
                                    *(_QWORD *)&buf[4] = "nw_http1_create_connection_for_stream_if_allowed";
                                    *(_WORD *)&buf[12] = 2082;
                                    *(_QWORD *)&buf[14] = "http1->pending_output_handler_count";
                                    *(_WORD *)&buf[22] = 2048;
                                    v1061 = 1;
                                    *(_WORD *)v1062 = 2048;
                                    *(_QWORD *)&v1062[2] = v517;
                                    v513 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, backtrace limit exceeded";
                                    goto LABEL_854;
                                  }
                                }
                              }
LABEL_855:
                              if (v509)
                                free(v509);
                              *(_DWORD *)(v11 + 352) = 0;
                              goto LABEL_715;
                            }
LABEL_819:
                            v492 = __nwlog_obj();
                            if (os_log_type_enabled(v492, OS_LOG_TYPE_DEBUG))
                            {
                              v493 = *(_QWORD *)(v305 + 256);
                              v494 = *(_DWORD *)(*(_QWORD *)(v305 + 248) + 372);
                              if (v493)
                                LODWORD(v493) = *(_DWORD *)(v493 + 860);
                              v495 = *(_DWORD *)(v305 + 424);
                              *(_DWORD *)buf = 136448258;
                              *(_QWORD *)&buf[4] = "nw_http1_start_new_connection_for_stream";
                              *(_WORD *)&buf[12] = 2082;
                              *(_QWORD *)&buf[14] = v305 + 74;
                              *(_WORD *)&buf[22] = 2080;
                              v1061 = (uint64_t)" ";
                              *(_WORD *)v1062 = 1024;
                              *(_DWORD *)&v1062[2] = v494;
                              *(_WORD *)&v1062[6] = 1024;
                              *(_DWORD *)&v1062[8] = v493;
                              *(_WORD *)&v1062[12] = 1024;
                              *(_DWORD *)&v1062[14] = v495;
                              *(_WORD *)&v1062[18] = 2048;
                              *(_QWORD *)&v1062[20] = v299;
                              *(_WORD *)&v1062[28] = 1024;
                              *(_DWORD *)&v1062[30] = v495;
                              *(_WORD *)&v1062[34] = 2048;
                              *(_QWORD *)&v1062[36] = v305;
                              _os_log_impl(&dword_182FBE000, v492, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> created new connection %p for stream %u (%p)", buf, 0x4Cu);
                            }
                            goto LABEL_823;
                          }
                        }
LABEL_818:
                        if ((*(_BYTE *)(v305 + 158) & 1) != 0)
                          goto LABEL_823;
                        goto LABEL_819;
                      }
                      __nwlog_obj();
                      v469 = *((_QWORD *)v299 + 61);
                      *(_DWORD *)buf = 136446722;
                      *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                      *(_WORD *)&buf[12] = 2048;
                      *(_QWORD *)&buf[14] = v299;
                      *(_WORD *)&buf[22] = 2048;
                      v1061 = v469;
                      v470 = (char *)_os_log_send_and_compose_impl();
                      v1075[0] = 16;
                      aBlock[0] = 0;
                      if (__nwlog_fault(v470, v1075, aBlock))
                      {
                        if (v1075[0] == 17)
                        {
                          v471 = __nwlog_obj();
                          v472 = v1075[0];
                          if (!os_log_type_enabled(v471, (os_log_type_t)v1075[0]))
                            goto LABEL_816;
                          v473 = *((_QWORD *)v299 + 61);
                          *(_DWORD *)buf = 136446722;
                          *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                          *(_WORD *)&buf[12] = 2048;
                          *(_QWORD *)&buf[14] = v299;
                          *(_WORD *)&buf[22] = 2048;
                          v1061 = v473;
                          v474 = "%{public}s Connection %p already has a stream (%p)";
                          goto LABEL_815;
                        }
                        if (!aBlock[0])
                        {
                          v471 = __nwlog_obj();
                          v472 = v1075[0];
                          if (!os_log_type_enabled(v471, (os_log_type_t)v1075[0]))
                            goto LABEL_816;
                          v490 = *((_QWORD *)v299 + 61);
                          *(_DWORD *)buf = 136446722;
                          *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                          *(_WORD *)&buf[12] = 2048;
                          *(_QWORD *)&buf[14] = v299;
                          *(_WORD *)&buf[22] = 2048;
                          v1061 = v490;
                          v474 = "%{public}s Connection %p already has a stream (%p), backtrace limit exceeded";
                          goto LABEL_815;
                        }
                        v487 = (char *)__nw_create_backtrace_string();
                        v471 = __nwlog_obj();
                        v472 = v1075[0];
                        v488 = os_log_type_enabled(v471, (os_log_type_t)v1075[0]);
                        if (v487)
                        {
                          if (v488)
                          {
                            v489 = *((_QWORD *)v299 + 61);
                            *(_DWORD *)buf = 136446978;
                            *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                            *(_WORD *)&buf[12] = 2048;
                            *(_QWORD *)&buf[14] = v299;
                            *(_WORD *)&buf[22] = 2048;
                            v1061 = v489;
                            *(_WORD *)v1062 = 2082;
                            *(_QWORD *)&v1062[2] = v487;
                            _os_log_impl(&dword_182FBE000, v471, v472, "%{public}s Connection %p already has a stream (%p), dumping backtrace:%{public}s", buf, 0x2Au);
                          }
                          free(v487);
                          v305 = v1051;
                          goto LABEL_816;
                        }
                        v305 = v1051;
                        if (v488)
                        {
                          v491 = *((_QWORD *)v299 + 61);
                          *(_DWORD *)buf = 136446722;
                          *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                          *(_WORD *)&buf[12] = 2048;
                          *(_QWORD *)&buf[14] = v299;
                          *(_WORD *)&buf[22] = 2048;
                          v1061 = v491;
                          v474 = "%{public}s Connection %p already has a stream (%p), no backtrace";
LABEL_815:
                          _os_log_impl(&dword_182FBE000, v471, v472, v474, buf, 0x20u);
                        }
                      }
LABEL_816:
                      if (v470)
                        free(v470);
                      goto LABEL_818;
                    }
                    __nwlog_obj();
                    *(_DWORD *)buf = 136446210;
                    *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                    v863 = (char *)_os_log_send_and_compose_impl();
                    v1075[0] = 16;
                    aBlock[0] = 0;
                    if (!__nwlog_fault(v863, v1075, aBlock))
                      goto LABEL_1704;
                    if (v1075[0] == 17)
                    {
                      v864 = __nwlog_obj();
                      v865 = v1075[0];
                      if (!os_log_type_enabled(v864, (os_log_type_t)v1075[0]))
                        goto LABEL_1704;
                      *(_DWORD *)buf = 136446210;
                      *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                      v866 = "%{public}s called with null http1_stream->protocol_http1";
                    }
                    else if (aBlock[0])
                    {
                      v938 = (char *)__nw_create_backtrace_string();
                      v864 = __nwlog_obj();
                      v865 = v1075[0];
                      v939 = os_log_type_enabled(v864, (os_log_type_t)v1075[0]);
                      if (v938)
                      {
                        if (v939)
                        {
                          *(_DWORD *)buf = 136446466;
                          *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                          *(_WORD *)&buf[12] = 2082;
                          *(_QWORD *)&buf[14] = v938;
                          _os_log_impl(&dword_182FBE000, v864, v865, "%{public}s called with null http1_stream->protocol_http1, dumping backtrace:%{public}s", buf, 0x16u);
                        }
                        free(v938);
                        goto LABEL_1704;
                      }
                      if (!v939)
                      {
LABEL_1704:
                        if (v863)
                          free(v863);
                        goto LABEL_1686;
                      }
                      *(_DWORD *)buf = 136446210;
                      *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                      v866 = "%{public}s called with null http1_stream->protocol_http1, no backtrace";
                    }
                    else
                    {
                      v864 = __nwlog_obj();
                      v865 = v1075[0];
                      if (!os_log_type_enabled(v864, (os_log_type_t)v1075[0]))
                        goto LABEL_1704;
                      *(_DWORD *)buf = 136446210;
                      *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                      v866 = "%{public}s called with null http1_stream->protocol_http1, backtrace limit exceeded";
                    }
                    _os_log_impl(&dword_182FBE000, v864, v865, v866, buf, 0xCu);
                    goto LABEL_1704;
                  }
                  __nwlog_obj();
                  *(_DWORD *)buf = 136446210;
                  *(_QWORD *)&buf[4] = "nw_protocol_http1_set_up_association";
                  v859 = (char *)_os_log_send_and_compose_impl();
                  v1075[0] = 16;
                  aBlock[0] = 0;
                  if (__nwlog_fault(v859, v1075, aBlock))
                  {
                    if (v1075[0] == 17)
                    {
                      v860 = __nwlog_obj();
                      v861 = v1075[0];
                      if (!os_log_type_enabled(v860, (os_log_type_t)v1075[0]))
                        goto LABEL_1697;
                      *(_DWORD *)buf = 136446210;
                      *(_QWORD *)&buf[4] = "nw_protocol_http1_set_up_association";
                      v862 = "%{public}s called with null parameters";
LABEL_1696:
                      _os_log_impl(&dword_182FBE000, v860, v861, v862, buf, 0xCu);
                      goto LABEL_1697;
                    }
                    if (!aBlock[0])
                    {
                      v860 = __nwlog_obj();
                      v861 = v1075[0];
                      if (!os_log_type_enabled(v860, (os_log_type_t)v1075[0]))
                        goto LABEL_1697;
                      *(_DWORD *)buf = 136446210;
                      *(_QWORD *)&buf[4] = "nw_protocol_http1_set_up_association";
                      v862 = "%{public}s called with null parameters, backtrace limit exceeded";
                      goto LABEL_1696;
                    }
                    v936 = (char *)__nw_create_backtrace_string();
                    v860 = __nwlog_obj();
                    v861 = v1075[0];
                    v937 = os_log_type_enabled(v860, (os_log_type_t)v1075[0]);
                    if (!v936)
                    {
                      if (!v937)
                        goto LABEL_1697;
                      *(_DWORD *)buf = 136446210;
                      *(_QWORD *)&buf[4] = "nw_protocol_http1_set_up_association";
                      v862 = "%{public}s called with null parameters, no backtrace";
                      goto LABEL_1696;
                    }
                    if (v937)
                    {
                      *(_DWORD *)buf = 136446466;
                      *(_QWORD *)&buf[4] = "nw_protocol_http1_set_up_association";
                      *(_WORD *)&buf[12] = 2082;
                      *(_QWORD *)&buf[14] = v936;
                      _os_log_impl(&dword_182FBE000, v860, v861, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
                    }
                    free(v936);
                  }
LABEL_1697:
                  if (v859)
                    free(v859);
                  v11 = v1052;
                  v305 = v1051;
                  v325 = *v310;
                  if (*v310)
                    goto LABEL_545;
                  goto LABEL_547;
                }
                __nwlog_obj();
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_http1_connection_create";
                v839 = (char *)_os_log_send_and_compose_impl();
                type[0] = 16;
                LOBYTE(v1055[0]) = 0;
                if (__nwlog_fault(v839, type, v1055))
                {
                  if (type[0] == 17)
                  {
                    v840 = __nwlog_obj();
                    v841 = type[0];
                    if (!os_log_type_enabled(v840, (os_log_type_t)type[0]))
                      goto LABEL_1651;
                    *(_DWORD *)buf = 136446210;
                    *(_QWORD *)&buf[4] = "nw_http1_connection_create";
                    v842 = "%{public}s called with null parameters";
                    goto LABEL_1650;
                  }
                  if (!LOBYTE(v1055[0]))
                  {
                    v840 = __nwlog_obj();
                    v841 = type[0];
                    if (!os_log_type_enabled(v840, (os_log_type_t)type[0]))
                      goto LABEL_1651;
                    *(_DWORD *)buf = 136446210;
                    *(_QWORD *)&buf[4] = "nw_http1_connection_create";
                    v842 = "%{public}s called with null parameters, backtrace limit exceeded";
                    goto LABEL_1650;
                  }
                  v907 = (char *)__nw_create_backtrace_string();
                  v840 = __nwlog_obj();
                  v841 = type[0];
                  v924 = os_log_type_enabled(v840, (os_log_type_t)type[0]);
                  if (!v907)
                  {
                    if (!v924)
                      goto LABEL_1651;
                    *(_DWORD *)buf = 136446210;
                    *(_QWORD *)&buf[4] = "nw_http1_connection_create";
                    v842 = "%{public}s called with null parameters, no backtrace";
                    goto LABEL_1650;
                  }
                  if (v924)
                  {
                    *(_DWORD *)buf = 136446466;
                    *(_QWORD *)&buf[4] = "nw_http1_connection_create";
                    *(_WORD *)&buf[12] = 2082;
                    *(_QWORD *)&buf[14] = v907;
                    v909 = "%{public}s called with null parameters, dumping backtrace:%{public}s";
                    goto LABEL_1509;
                  }
                  goto LABEL_1510;
                }
LABEL_1651:
                if (!v839)
                  goto LABEL_1653;
                goto LABEL_1652;
              }
              __nwlog_obj();
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_http1_connection_create";
              v839 = (char *)_os_log_send_and_compose_impl();
              type[0] = 16;
              LOBYTE(v1055[0]) = 0;
              if (!__nwlog_fault(v839, type, v1055))
                goto LABEL_1651;
              if (type[0] != 17)
              {
                if (!LOBYTE(v1055[0]))
                {
                  v840 = __nwlog_obj();
                  v841 = type[0];
                  if (!os_log_type_enabled(v840, (os_log_type_t)type[0]))
                    goto LABEL_1651;
                  *(_DWORD *)buf = 136446210;
                  *(_QWORD *)&buf[4] = "nw_http1_connection_create";
                  v842 = "%{public}s called with null endpoint, backtrace limit exceeded";
                  goto LABEL_1650;
                }
                v907 = (char *)__nw_create_backtrace_string();
                v840 = __nwlog_obj();
                v841 = type[0];
                v908 = os_log_type_enabled(v840, (os_log_type_t)type[0]);
                if (!v907)
                {
                  if (!v908)
                    goto LABEL_1651;
                  *(_DWORD *)buf = 136446210;
                  *(_QWORD *)&buf[4] = "nw_http1_connection_create";
                  v842 = "%{public}s called with null endpoint, no backtrace";
                  goto LABEL_1650;
                }
                if (v908)
                {
                  *(_DWORD *)buf = 136446466;
                  *(_QWORD *)&buf[4] = "nw_http1_connection_create";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = v907;
                  v909 = "%{public}s called with null endpoint, dumping backtrace:%{public}s";
LABEL_1509:
                  _os_log_impl(&dword_182FBE000, v840, v841, v909, buf, 0x16u);
                }
LABEL_1510:
                free(v907);
                if (!v839)
                {
LABEL_1653:
                  __nwlog_obj();
                  *(_DWORD *)buf = 136446210;
                  *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
                  v986 = (char *)_os_log_send_and_compose_impl();
                  v1075[0] = 16;
                  aBlock[0] = 0;
                  if (!__nwlog_fault(v986, v1075, aBlock))
                    goto LABEL_1667;
                  if (v1075[0] == 17)
                  {
                    v987 = __nwlog_obj();
                    v988 = v1075[0];
                    if (!os_log_type_enabled(v987, (os_log_type_t)v1075[0]))
                      goto LABEL_1667;
                    *(_DWORD *)buf = 136446210;
                    *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
                    v989 = "%{public}s called with null http1_connection";
                  }
                  else if (aBlock[0])
                  {
                    v990 = (char *)__nw_create_backtrace_string();
                    v987 = __nwlog_obj();
                    v988 = v1075[0];
                    v991 = os_log_type_enabled(v987, (os_log_type_t)v1075[0]);
                    if (v990)
                    {
                      if (v991)
                      {
                        *(_DWORD *)buf = 136446466;
                        *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
                        *(_WORD *)&buf[12] = 2082;
                        *(_QWORD *)&buf[14] = v990;
                        _os_log_impl(&dword_182FBE000, v987, v988, "%{public}s called with null http1_connection, dumping backtrace:%{public}s", buf, 0x16u);
                      }
                      free(v990);
LABEL_1667:
                      if (v986)
                        free(v986);
                      __nwlog_obj();
                      *(_DWORD *)buf = 136446210;
                      *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                      v992 = (char *)_os_log_send_and_compose_impl();
                      v1075[0] = 16;
                      aBlock[0] = 0;
                      if (!__nwlog_fault(v992, v1075, aBlock))
                        goto LABEL_1683;
                      if (v1075[0] == 17)
                      {
                        v993 = __nwlog_obj();
                        v994 = v1075[0];
                        if (os_log_type_enabled(v993, (os_log_type_t)v1075[0]))
                        {
                          *(_DWORD *)buf = 136446210;
                          *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                          v995 = "%{public}s called with null http1_connection";
LABEL_1682:
                          _os_log_impl(&dword_182FBE000, v993, v994, v995, buf, 0xCu);
                        }
                      }
                      else if (aBlock[0])
                      {
                        v996 = (char *)__nw_create_backtrace_string();
                        v993 = __nwlog_obj();
                        v994 = v1075[0];
                        v997 = os_log_type_enabled(v993, (os_log_type_t)v1075[0]);
                        if (v996)
                        {
                          if (v997)
                          {
                            *(_DWORD *)buf = 136446466;
                            *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                            *(_WORD *)&buf[12] = 2082;
                            *(_QWORD *)&buf[14] = v996;
                            _os_log_impl(&dword_182FBE000, v993, v994, "%{public}s called with null http1_connection, dumping backtrace:%{public}s", buf, 0x16u);
                          }
                          free(v996);
                          goto LABEL_1683;
                        }
                        if (v997)
                        {
                          *(_DWORD *)buf = 136446210;
                          *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                          v995 = "%{public}s called with null http1_connection, no backtrace";
                          goto LABEL_1682;
                        }
                      }
                      else
                      {
                        v993 = __nwlog_obj();
                        v994 = v1075[0];
                        if (os_log_type_enabled(v993, (os_log_type_t)v1075[0]))
                        {
                          *(_DWORD *)buf = 136446210;
                          *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                          v995 = "%{public}s called with null http1_connection, backtrace limit exceeded";
                          goto LABEL_1682;
                        }
                      }
LABEL_1683:
                      if (v992)
                        free(v992);
                      v299 = 0;
LABEL_1686:
                      v11 = v1052;
                      v305 = v1051;
                      if ((*(_BYTE *)(v1051 + 158) & 1) != 0)
                        goto LABEL_823;
                      goto LABEL_819;
                    }
                    if (!v991)
                      goto LABEL_1667;
                    *(_DWORD *)buf = 136446210;
                    *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
                    v989 = "%{public}s called with null http1_connection, no backtrace";
                  }
                  else
                  {
                    v987 = __nwlog_obj();
                    v988 = v1075[0];
                    if (!os_log_type_enabled(v987, (os_log_type_t)v1075[0]))
                      goto LABEL_1667;
                    *(_DWORD *)buf = 136446210;
                    *(_QWORD *)&buf[4] = "nw_http1_add_connection_for_output_handler";
                    v989 = "%{public}s called with null http1_connection, backtrace limit exceeded";
                  }
                  _os_log_impl(&dword_182FBE000, v987, v988, v989, buf, 0xCu);
                  goto LABEL_1667;
                }
LABEL_1652:
                free(v839);
                goto LABEL_1653;
              }
              v840 = __nwlog_obj();
              v841 = type[0];
              if (!os_log_type_enabled(v840, (os_log_type_t)type[0]))
                goto LABEL_1651;
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_http1_connection_create";
              v842 = "%{public}s called with null endpoint";
            }
            else
            {
              __nwlog_obj();
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_http1_connection_create";
              v839 = (char *)_os_log_send_and_compose_impl();
              type[0] = 16;
              LOBYTE(v1055[0]) = 0;
              if (!__nwlog_fault(v839, type, v1055))
                goto LABEL_1651;
              if (type[0] != 17)
              {
                if (!LOBYTE(v1055[0]))
                {
                  v840 = __nwlog_obj();
                  v841 = type[0];
                  if (!os_log_type_enabled(v840, (os_log_type_t)type[0]))
                    goto LABEL_1651;
                  *(_DWORD *)buf = 136446210;
                  *(_QWORD *)&buf[4] = "nw_http1_connection_create";
                  v842 = "%{public}s called with null output_handler, backtrace limit exceeded";
                  goto LABEL_1650;
                }
                v903 = (char *)__nw_create_backtrace_string();
                v840 = __nwlog_obj();
                v841 = type[0];
                v904 = os_log_type_enabled(v840, (os_log_type_t)type[0]);
                if (!v903)
                {
                  if (!v904)
                    goto LABEL_1651;
                  *(_DWORD *)buf = 136446210;
                  *(_QWORD *)&buf[4] = "nw_http1_connection_create";
                  v842 = "%{public}s called with null output_handler, no backtrace";
                  goto LABEL_1650;
                }
                if (v904)
                {
                  *(_DWORD *)buf = 136446466;
                  *(_QWORD *)&buf[4] = "nw_http1_connection_create";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = v903;
                  _os_log_impl(&dword_182FBE000, v840, v841, "%{public}s called with null output_handler, dumping backtrace:%{public}s", buf, 0x16u);
                }
                free(v903);
                goto LABEL_1651;
              }
              v840 = __nwlog_obj();
              v841 = type[0];
              if (!os_log_type_enabled(v840, (os_log_type_t)type[0]))
                goto LABEL_1651;
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_http1_connection_create";
              v842 = "%{public}s called with null output_handler";
            }
LABEL_1650:
            _os_log_impl(&dword_182FBE000, v840, v841, v842, buf, 0xCu);
            goto LABEL_1651;
          }
          if ((*(_BYTE *)(v11 + 158) & 1) != 0)
            goto LABEL_715;
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v263 = gLogObj;
          if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
            goto LABEL_715;
          v266 = *(_DWORD *)(v11 + 372);
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_http1_match_idle_connection_with_pending_stream";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v11 + 74;
          *(_WORD *)&buf[22] = 2080;
          v1061 = (uint64_t)" ";
          *(_WORD *)v1062 = 1024;
          *(_DWORD *)&v1062[2] = v266;
          v265 = "%{public}s %{public}s%s<i%u> no pending streams, nothing to do";
LABEL_456:
          v267 = v263;
          v268 = 38;
LABEL_457:
          _os_log_impl(&dword_182FBE000, v267, OS_LOG_TYPE_DEBUG, v265, buf, v268);
LABEL_715:
          if (!*(_DWORD *)(v11 + 336) && !*(_DWORD *)(v11 + 344))
            nw_protocol_http1_destroy(v11, v11);
          return 1;
        }
        if ((*(_BYTE *)(v16 + 158) & 1) == 0)
        {
          if (v15[1345])
          {
            v762 = __nwlog_obj();
            if (os_log_type_enabled(v762, OS_LOG_TYPE_DEBUG))
            {
              v763 = *(_QWORD *)(v16 + 488);
              v764 = *(_DWORD *)(*(_QWORD *)(v16 + 480) + 372);
              v765 = *(_DWORD *)(v16 + 860);
              if (v763)
                LODWORD(v763) = *(_DWORD *)(v763 + 424);
              *(_DWORD *)buf = 136447746;
              *(_QWORD *)&buf[4] = "nw_protocol_http1_remove_input_handler";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v16 + 74;
              *(_WORD *)&buf[22] = 2080;
              v1061 = (uint64_t)" ";
              *(_WORD *)v1062 = 1024;
              *(_DWORD *)&v1062[2] = v764;
              *(_WORD *)&v1062[6] = 1024;
              *(_DWORD *)&v1062[8] = v765;
              *(_WORD *)&v1062[12] = 1024;
              *(_DWORD *)&v1062[14] = v763;
              *(_WORD *)&v1062[18] = 2048;
              *(_QWORD *)&v1062[20] = v16;
              _os_log_impl(&dword_182FBE000, v762, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> triggering new flow on server connection %p, more input available", buf, 0x3Cu);
              v11 = v1052;
              v15 = (_BYTE *)&unk_1ECD84000;
            }
          }
        }
        if ((*(_BYTE *)(v11 + 376) & 1) == 0)
        {
          if ((*(_BYTE *)(v11 + 158) & 1) != 0)
            goto LABEL_715;
          if (!v15[1345])
            goto LABEL_715;
          v263 = __nwlog_obj();
          if (!os_log_type_enabled(v263, OS_LOG_TYPE_DEBUG))
            goto LABEL_715;
          v269 = *(_DWORD *)(v11 + 372);
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_http1_new_flow_valid";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v11 + 74;
          *(_WORD *)&buf[22] = 2080;
          v1061 = (uint64_t)" ";
          *(_WORD *)v1062 = 1024;
          *(_DWORD *)&v1062[2] = v269;
          v265 = "%{public}s %{public}s%s<i%u> called when not in server mode, ignoring";
          goto LABEL_456;
        }
        v270 = *(_QWORD ***)(v11 + 328);
        if (!v270)
        {
          if ((*(_BYTE *)(v16 + 158) & 1) != 0)
            goto LABEL_715;
          v334 = __nwlog_obj();
          if (!os_log_type_enabled(v334, OS_LOG_TYPE_DEBUG))
            goto LABEL_715;
          v335 = *(_QWORD *)(v16 + 488);
          v336 = *(_DWORD *)(*(_QWORD *)(v16 + 480) + 372);
          v337 = *(_DWORD *)(v16 + 860);
          if (v335)
            LODWORD(v335) = *(_DWORD *)(v335 + 424);
          *(_DWORD *)buf = 136447490;
          *(_QWORD *)&buf[4] = "nw_http1_new_flow_valid";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v16 + 74;
          *(_WORD *)&buf[22] = 2080;
          v1061 = (uint64_t)" ";
          *(_WORD *)v1062 = 1024;
          *(_DWORD *)&v1062[2] = v336;
          *(_WORD *)&v1062[6] = 1024;
          *(_DWORD *)&v1062[8] = v337;
          *(_WORD *)&v1062[12] = 1024;
          *(_DWORD *)&v1062[14] = v335;
          v265 = "%{public}s %{public}s%s<i%u:c%u:s%u> called without listen handler, ignoring";
          v267 = v334;
          v268 = 50;
          goto LABEL_457;
        }
        v271 = (unsigned __int16 *)(v16 + 872);
        v272 = *v270;
        if (v272 && *v272)
        {
          v273 = *(NSObject **)(v11 + 264);
          if (v273)
          {
            v274 = nw_parameters_copy(v273);
            *(_QWORD *)(v11 + 224) = v16;
            if ((***(unsigned int (****)(_QWORD, _QWORD, NSObject *))(v11 + 328))(*(_QWORD *)(v11 + 328), *(_QWORD *)(v11 + 280), v274)&& *(_QWORD *)(v16 + 488)&& !*(_QWORD *)(v11 + 224))
            {
              if ((*(_BYTE *)(v11 + 158) & 1) == 0)
              {
                if (v15[1345])
                {
                  v980 = __nwlog_obj();
                  if (os_log_type_enabled(v980, OS_LOG_TYPE_DEBUG))
                  {
                    v981 = *(_DWORD *)(v11 + 372);
                    *(_DWORD *)buf = 136446978;
                    *(_QWORD *)&buf[4] = "nw_http1_attempt_trigger_new_flow";
                    *(_WORD *)&buf[12] = 2082;
                    *(_QWORD *)&buf[14] = v11 + 74;
                    *(_WORD *)&buf[22] = 2080;
                    v1061 = (uint64_t)" ";
                    *(_WORD *)v1062 = 1024;
                    *(_DWORD *)&v1062[2] = v981;
                    _os_log_impl(&dword_182FBE000, v980, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> sucessfully associated new flow stream with connection, awaiting connected", buf, 0x26u);
                  }
                }
              }
              v381 = *v271;
              v382 = (v381 | (*((unsigned __int8 *)v271 + 2) << 16)) & 0xFFFDFFFF;
              *v271 = v381;
              *((_BYTE *)v271 + 2) = BYTE2(v382);
            }
            else
            {
              if ((*(_BYTE *)(v11 + 158) & 1) == 0)
              {
                v275 = __nwlog_obj();
                if (os_log_type_enabled(v275, OS_LOG_TYPE_ERROR))
                {
                  v276 = *(_DWORD *)(v11 + 372);
                  *(_DWORD *)buf = 136447234;
                  *(_QWORD *)&buf[4] = "nw_http1_attempt_trigger_new_flow";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = v11 + 74;
                  *(_WORD *)&buf[22] = 2080;
                  v1061 = (uint64_t)" ";
                  *(_WORD *)v1062 = 1024;
                  *(_DWORD *)&v1062[2] = v276;
                  *(_WORD *)&v1062[6] = 2048;
                  *(_QWORD *)&v1062[8] = v16;
                  _os_log_impl(&dword_182FBE000, v275, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u> listen handler didn't accept the new flow, closing connection %p", buf, 0x30u);
                }
              }
              v277 = *v271;
              v278 = v277 | (*(unsigned __int8 *)(v16 + 874) << 16);
              if ((v277 & 0x100) != 0)
              {
                if ((*(_BYTE *)(v16 + 158) & 1) == 0)
                {
                  if (v15[1345])
                  {
                    v358 = __nwlog_obj();
                    if (os_log_type_enabled(v358, OS_LOG_TYPE_DEBUG))
                    {
                      v359 = *(_QWORD *)(v16 + 488);
                      v360 = *(_DWORD *)(*(_QWORD *)(v16 + 480) + 372);
                      v361 = *(_DWORD *)(v16 + 860);
                      if (v359)
                        LODWORD(v359) = *(_DWORD *)(v359 + 424);
                      *(_DWORD *)buf = 136447490;
                      *(_QWORD *)&buf[4] = "nw_http1_connection_close";
                      *(_WORD *)&buf[12] = 2082;
                      *(_QWORD *)&buf[14] = v16 + 74;
                      *(_WORD *)&buf[22] = 2080;
                      v1061 = (uint64_t)" ";
                      *(_WORD *)v1062 = 1024;
                      *(_DWORD *)&v1062[2] = v360;
                      *(_WORD *)&v1062[6] = 1024;
                      *(_DWORD *)&v1062[8] = v361;
                      *(_WORD *)&v1062[12] = 1024;
                      *(_DWORD *)&v1062[14] = v359;
                      _os_log_impl(&dword_182FBE000, v358, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> already closed", buf, 0x32u);
                      v11 = v1052;
                    }
                  }
                }
              }
              else
              {
                *(_BYTE *)(v16 + 874) = BYTE2(v278);
                *v271 = v278 | 0x100;
                if ((*(_BYTE *)(v16 + 158) & 1) == 0)
                {
                  if (v15[1345])
                  {
                    v885 = __nwlog_obj();
                    if (os_log_type_enabled(v885, OS_LOG_TYPE_DEBUG))
                    {
                      v886 = *(_QWORD *)(v16 + 488);
                      v887 = *(_DWORD *)(*(_QWORD *)(v16 + 480) + 372);
                      v888 = *(_DWORD *)(v16 + 860);
                      if (v886)
                        LODWORD(v886) = *(_DWORD *)(v886 + 424);
                      *(_DWORD *)buf = 136447490;
                      *(_QWORD *)&buf[4] = "nw_http1_connection_close";
                      *(_WORD *)&buf[12] = 2082;
                      *(_QWORD *)&buf[14] = v16 + 74;
                      *(_WORD *)&buf[22] = 2080;
                      v1061 = (uint64_t)" ";
                      *(_WORD *)v1062 = 1024;
                      *(_DWORD *)&v1062[2] = v887;
                      *(_WORD *)&v1062[6] = 1024;
                      *(_DWORD *)&v1062[8] = v888;
                      *(_WORD *)&v1062[12] = 1024;
                      *(_DWORD *)&v1062[14] = v886;
                      _os_log_impl(&dword_182FBE000, v885, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> http connection closed, increasing pool width", buf, 0x32u);
                      v15 = (_BYTE *)&unk_1ECD84000;
                    }
                  }
                }
                v279 = *(_QWORD *)(v16 + 480);
                if (!v279)
                {
                  __nwlog_obj();
                  *(_DWORD *)buf = 136446210;
                  *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
                  v881 = (char *)_os_log_send_and_compose_impl();
                  v1075[0] = 16;
                  aBlock[0] = 0;
                  if (!__nwlog_fault(v881, v1075, aBlock))
                    goto LABEL_1824;
                  if (v1075[0] == 17)
                  {
                    v882 = __nwlog_obj();
                    v883 = v1075[0];
                    if (!os_log_type_enabled(v882, (os_log_type_t)v1075[0]))
                      goto LABEL_1824;
                    *(_DWORD *)buf = 136446210;
                    *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
                    v884 = "%{public}s called with null http1";
                  }
                  else if (aBlock[0])
                  {
                    v950 = (char *)__nw_create_backtrace_string();
                    v882 = __nwlog_obj();
                    v883 = v1075[0];
                    v951 = os_log_type_enabled(v882, (os_log_type_t)v1075[0]);
                    if (v950)
                    {
                      if (v951)
                      {
                        *(_DWORD *)buf = 136446466;
                        *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
                        *(_WORD *)&buf[12] = 2082;
                        *(_QWORD *)&buf[14] = v950;
                        _os_log_impl(&dword_182FBE000, v882, v883, "%{public}s called with null http1, dumping backtrace:%{public}s", buf, 0x16u);
                      }
                      free(v950);
                      goto LABEL_1824;
                    }
                    if (!v951)
                      goto LABEL_1824;
                    *(_DWORD *)buf = 136446210;
                    *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
                    v884 = "%{public}s called with null http1, no backtrace";
                  }
                  else
                  {
                    v882 = __nwlog_obj();
                    v883 = v1075[0];
                    if (!os_log_type_enabled(v882, (os_log_type_t)v1075[0]))
                      goto LABEL_1824;
                    *(_DWORD *)buf = 136446210;
                    *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
                    v884 = "%{public}s called with null http1, backtrace limit exceeded";
                  }
                  v999 = buf;
LABEL_1823:
                  _os_log_impl(&dword_182FBE000, v882, v883, v884, v999, 0xCu);
                  goto LABEL_1824;
                }
                v280 = *v271;
                v281 = v280 | (*(unsigned __int8 *)(v16 + 874) << 16);
                if ((v280 & 0x800) == 0)
                {
                  *(_BYTE *)(v16 + 874) = BYTE2(v281);
                  *v271 = v281 | 0x800;
                  v282 = *(unsigned int *)(v279 + 368) + 1;
                  v283 = v282 << 31 >> 31;
                  *(_DWORD *)(v279 + 368) = v282;
                  if (v283 == v282 && (v283 & 0x8000000000000000) == 0)
                  {
LABEL_908:
                    if ((*(_BYTE *)(v16 + 158) & 1) == 0)
                    {
                      if (v15[1345])
                      {
                        v952 = __nwlog_obj();
                        if (os_log_type_enabled(v952, OS_LOG_TYPE_DEBUG))
                        {
                          v953 = *(_QWORD *)(v16 + 488);
                          v954 = *(_DWORD *)(*(_QWORD *)(v16 + 480) + 372);
                          v955 = *(_DWORD *)(v16 + 860);
                          if (v953)
                            LODWORD(v953) = *(_DWORD *)(v953 + 424);
                          v956 = *(_DWORD *)(v279 + 368) + *(_DWORD *)(v279 + 364);
                          *(_DWORD *)buf = 136447746;
                          *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
                          *(_WORD *)&buf[12] = 2082;
                          *(_QWORD *)&buf[14] = v16 + 74;
                          *(_WORD *)&buf[22] = 2080;
                          v1061 = (uint64_t)" ";
                          *(_WORD *)v1062 = 1024;
                          *(_DWORD *)&v1062[2] = v954;
                          *(_WORD *)&v1062[6] = 1024;
                          *(_DWORD *)&v1062[8] = v955;
                          *(_WORD *)&v1062[12] = 1024;
                          *(_DWORD *)&v1062[14] = v953;
                          *(_WORD *)&v1062[18] = 1024;
                          *(_DWORD *)&v1062[20] = v956;
                          _os_log_impl(&dword_182FBE000, v952, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> connection marked as not-reusable, increased pool width to %u", buf, 0x38u);
                        }
                      }
                    }
                    v552 = *(void **)(v16 + 496);
                    if (!v552)
                    {
                      __nwlog_obj();
                      *(_DWORD *)v1075 = 136446210;
                      *(_QWORD *)&v1075[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
                      v881 = (char *)_os_log_send_and_compose_impl();
                      aBlock[0] = 16;
                      type[0] = 0;
                      if (!__nwlog_fault(v881, aBlock, type))
                        goto LABEL_1824;
                      if (aBlock[0] == 17)
                      {
                        v882 = __nwlog_obj();
                        v883 = aBlock[0];
                        if (!os_log_type_enabled(v882, (os_log_type_t)aBlock[0]))
                          goto LABEL_1824;
                        *(_DWORD *)v1075 = 136446210;
                        *(_QWORD *)&v1075[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
                        v884 = "%{public}s called with null http1_connection->context";
LABEL_1822:
                        v999 = v1075;
                        goto LABEL_1823;
                      }
                      if (!type[0])
                      {
                        v882 = __nwlog_obj();
                        v883 = aBlock[0];
                        if (!os_log_type_enabled(v882, (os_log_type_t)aBlock[0]))
                          goto LABEL_1824;
                        *(_DWORD *)v1075 = 136446210;
                        *(_QWORD *)&v1075[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
                        v884 = "%{public}s called with null http1_connection->context, backtrace limit exceeded";
                        goto LABEL_1822;
                      }
                      v982 = (char *)__nw_create_backtrace_string();
                      v882 = __nwlog_obj();
                      v883 = aBlock[0];
                      v983 = os_log_type_enabled(v882, (os_log_type_t)aBlock[0]);
                      if (!v982)
                      {
                        if (!v983)
                          goto LABEL_1824;
                        *(_DWORD *)v1075 = 136446210;
                        *(_QWORD *)&v1075[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
                        v884 = "%{public}s called with null http1_connection->context, no backtrace";
                        goto LABEL_1822;
                      }
                      if (v983)
                      {
                        *(_DWORD *)v1075 = 136446466;
                        *(_QWORD *)&v1075[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
                        *(_WORD *)&v1075[12] = 2082;
                        *(_QWORD *)&v1075[14] = v982;
                        v984 = "%{public}s called with null http1_connection->context, dumping backtrace:%{public}s";
LABEL_1633:
                        _os_log_impl(&dword_182FBE000, v882, v883, v984, v1075, 0x16u);
                      }
LABEL_1634:
                      free(v982);
                      if (!v881)
                      {
LABEL_1826:
                        v11 = v1052;
                        if (*(_QWORD *)(v16 + 488))
                          goto LABEL_922;
                        goto LABEL_914;
                      }
LABEL_1825:
                      free(v881);
                      goto LABEL_1826;
                    }
                    v553 = *(_QWORD *)(v16 + 480);
                    v11 = v1052;
                    if (v553)
                    {
                      v554 = *(_QWORD *)(v553 + 200);
                      *(_QWORD *)buf = MEMORY[0x1E0C809B0];
                      *(_QWORD *)&buf[8] = 0x40000000;
                      *(_QWORD *)&buf[16] = ___ZL56nw_http1_match_idle_connection_with_pending_stream_asyncP19nw_http1_connection_block_invoke;
                      v1061 = (uint64_t)&unk_1E14A1518;
                      *(_QWORD *)v1062 = v554;
                      nw_queue_context_async(v552, buf);
                      goto LABEL_913;
                    }
                    __nwlog_obj();
                    *(_DWORD *)v1075 = 136446210;
                    *(_QWORD *)&v1075[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
                    v881 = (char *)_os_log_send_and_compose_impl();
                    aBlock[0] = 16;
                    type[0] = 0;
                    if (__nwlog_fault(v881, aBlock, type))
                    {
                      if (aBlock[0] == 17)
                      {
                        v882 = __nwlog_obj();
                        v883 = aBlock[0];
                        if (!os_log_type_enabled(v882, (os_log_type_t)aBlock[0]))
                          goto LABEL_1824;
                        *(_DWORD *)v1075 = 136446210;
                        *(_QWORD *)&v1075[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
                        v884 = "%{public}s called with null http1";
                        goto LABEL_1822;
                      }
                      if (!type[0])
                      {
                        v882 = __nwlog_obj();
                        v883 = aBlock[0];
                        if (!os_log_type_enabled(v882, (os_log_type_t)aBlock[0]))
                          goto LABEL_1824;
                        *(_DWORD *)v1075 = 136446210;
                        *(_QWORD *)&v1075[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
                        v884 = "%{public}s called with null http1, backtrace limit exceeded";
                        goto LABEL_1822;
                      }
                      v982 = (char *)__nw_create_backtrace_string();
                      v882 = __nwlog_obj();
                      v883 = aBlock[0];
                      v985 = os_log_type_enabled(v882, (os_log_type_t)aBlock[0]);
                      if (!v982)
                      {
                        if (!v985)
                          goto LABEL_1824;
                        *(_DWORD *)v1075 = 136446210;
                        *(_QWORD *)&v1075[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
                        v884 = "%{public}s called with null http1, no backtrace";
                        goto LABEL_1822;
                      }
                      if (v985)
                      {
                        *(_DWORD *)v1075 = 136446466;
                        *(_QWORD *)&v1075[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
                        *(_WORD *)&v1075[12] = 2082;
                        *(_QWORD *)&v1075[14] = v982;
                        v984 = "%{public}s called with null http1, dumping backtrace:%{public}s";
                        goto LABEL_1633;
                      }
                      goto LABEL_1634;
                    }
LABEL_1824:
                    if (!v881)
                      goto LABEL_1826;
                    goto LABEL_1825;
                  }
                  __nwlog_obj();
                  v284 = *(unsigned int *)(v279 + 368);
                  *(_DWORD *)buf = 136446978;
                  *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = "http1->nonresuable_connections";
                  *(_WORD *)&buf[22] = 2048;
                  v1061 = 1;
                  *(_WORD *)v1062 = 2048;
                  *(_QWORD *)&v1062[2] = v284;
                  v285 = (char *)_os_log_send_and_compose_impl();
                  v1075[0] = 16;
                  aBlock[0] = 0;
                  if (__nwlog_fault(v285, v1075, aBlock))
                  {
                    if (v1075[0] == 17)
                    {
                      v286 = __nwlog_obj();
                      v287 = v1075[0];
                      if (os_log_type_enabled(v286, (os_log_type_t)v1075[0]))
                      {
                        v288 = *(unsigned int *)(v279 + 368);
                        *(_DWORD *)buf = 136446978;
                        *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
                        *(_WORD *)&buf[12] = 2082;
                        *(_QWORD *)&buf[14] = "http1->nonresuable_connections";
                        *(_WORD *)&buf[22] = 2048;
                        v1061 = 1;
                        *(_WORD *)v1062 = 2048;
                        *(_QWORD *)&v1062[2] = v288;
                        v289 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_904:
                        _os_log_impl(&dword_182FBE000, v286, v287, v289, buf, 0x2Au);
                      }
                    }
                    else if (aBlock[0])
                    {
                      v441 = (char *)__nw_create_backtrace_string();
                      v286 = __nwlog_obj();
                      v287 = v1075[0];
                      v442 = os_log_type_enabled(v286, (os_log_type_t)v1075[0]);
                      if (v441)
                      {
                        if (v442)
                        {
                          v443 = *(unsigned int *)(v279 + 368);
                          *(_DWORD *)buf = 136447234;
                          *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
                          *(_WORD *)&buf[12] = 2082;
                          *(_QWORD *)&buf[14] = "http1->nonresuable_connections";
                          *(_WORD *)&buf[22] = 2048;
                          v1061 = 1;
                          *(_WORD *)v1062 = 2048;
                          *(_QWORD *)&v1062[2] = v443;
                          *(_WORD *)&v1062[10] = 2082;
                          *(_QWORD *)&v1062[12] = v441;
                          _os_log_impl(&dword_182FBE000, v286, v287, "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
                        }
                        free(v441);
                        goto LABEL_905;
                      }
                      if (v442)
                      {
                        v551 = *(unsigned int *)(v279 + 368);
                        *(_DWORD *)buf = 136446978;
                        *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
                        *(_WORD *)&buf[12] = 2082;
                        *(_QWORD *)&buf[14] = "http1->nonresuable_connections";
                        *(_WORD *)&buf[22] = 2048;
                        v1061 = 1;
                        *(_WORD *)v1062 = 2048;
                        *(_QWORD *)&v1062[2] = v551;
                        v289 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
                        goto LABEL_904;
                      }
                    }
                    else
                    {
                      v286 = __nwlog_obj();
                      v287 = v1075[0];
                      if (os_log_type_enabled(v286, (os_log_type_t)v1075[0]))
                      {
                        v526 = *(unsigned int *)(v279 + 368);
                        *(_DWORD *)buf = 136446978;
                        *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
                        *(_WORD *)&buf[12] = 2082;
                        *(_QWORD *)&buf[14] = "http1->nonresuable_connections";
                        *(_WORD *)&buf[22] = 2048;
                        v1061 = 1;
                        *(_WORD *)v1062 = 2048;
                        *(_QWORD *)&v1062[2] = v526;
                        v289 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
                        goto LABEL_904;
                      }
                    }
                  }
LABEL_905:
                  if (v285)
                    free(v285);
                  *(_DWORD *)(v279 + 368) = -1;
                  goto LABEL_908;
                }
                v11 = v1052;
                if ((*(_BYTE *)(v16 + 158) & 1) != 0
                  || !v15[1345]
                  || (v371 = __nwlog_obj(), !os_log_type_enabled(v371, OS_LOG_TYPE_DEBUG)))
                {
LABEL_913:
                  if (*(_QWORD *)(v16 + 488))
                    goto LABEL_922;
                  goto LABEL_914;
                }
                v372 = *(_QWORD *)(v16 + 488);
                v373 = *(_DWORD *)(*(_QWORD *)(v16 + 480) + 372);
                v374 = *(_DWORD *)(v16 + 860);
                if (v372)
                  LODWORD(v372) = *(_DWORD *)(v372 + 424);
                *(_DWORD *)buf = 136447490;
                *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = v16 + 74;
                *(_WORD *)&buf[22] = 2080;
                v1061 = (uint64_t)" ";
                *(_WORD *)v1062 = 1024;
                *(_DWORD *)&v1062[2] = v373;
                *(_WORD *)&v1062[6] = 1024;
                *(_DWORD *)&v1062[8] = v374;
                *(_WORD *)&v1062[12] = 1024;
                *(_DWORD *)&v1062[14] = v372;
                _os_log_impl(&dword_182FBE000, v371, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> Connection already marked as not-reusable, ignoring", buf, 0x32u);
                v11 = v1052;
                if (!*(_QWORD *)(v16 + 488))
                {
LABEL_914:
                  v555 = *(_QWORD *)(v16 + 784);
                  if (v555)
                  {
                    nw_queue_set_timer_values(v555, 0x8000000000000000, 0xFFFFFFFFFFFFFFFFLL, 0x3B9ACA00uLL);
                  }
                  else
                  {
                    if ((*(_BYTE *)(v16 + 158) & 1) == 0)
                    {
                      v556 = __nwlog_obj();
                      if (os_log_type_enabled(v556, OS_LOG_TYPE_ERROR))
                      {
                        v557 = *(_QWORD *)(v16 + 488);
                        v558 = *(_DWORD *)(*(_QWORD *)(v16 + 480) + 372);
                        v559 = *(_DWORD *)(v16 + 860);
                        if (v557)
                          LODWORD(v557) = *(_DWORD *)(v557 + 424);
                        *(_DWORD *)buf = 136447490;
                        *(_QWORD *)&buf[4] = "nw_http1_connection_close";
                        *(_WORD *)&buf[12] = 2082;
                        *(_QWORD *)&buf[14] = v16 + 74;
                        *(_WORD *)&buf[22] = 2080;
                        v1061 = (uint64_t)" ";
                        *(_WORD *)v1062 = 1024;
                        *(_DWORD *)&v1062[2] = v558;
                        *(_WORD *)&v1062[6] = 1024;
                        *(_DWORD *)&v1062[8] = v559;
                        *(_WORD *)&v1062[12] = 1024;
                        *(_DWORD *)&v1062[14] = v557;
                        _os_log_impl(&dword_182FBE000, v556, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u:c%u:s%u> No destroy timer on HTTP/1 connection when closing", buf, 0x32u);
                      }
                    }
                    v560 = *(_QWORD *)(v16 + 608);
                    v561 = *(void **)(v16 + 496);
                    *(_QWORD *)buf = MEMORY[0x1E0C809B0];
                    *(_QWORD *)&buf[8] = 0x40000000;
                    *(_QWORD *)&buf[16] = ___ZL25nw_http1_connection_closeP19nw_http1_connection_block_invoke;
                    v1061 = (uint64_t)&unk_1E14A14F0;
                    *(_QWORD *)v1062 = v560;
                    nw_queue_context_async(v561, buf);
                  }
                }
              }
            }
LABEL_922:
            if (!v274)
              goto LABEL_715;
LABEL_923:
            os_release(v274);
            goto LABEL_715;
          }
          if ((*(_BYTE *)(v11 + 158) & 1) == 0)
          {
            v347 = __nwlog_obj();
            if (os_log_type_enabled(v347, OS_LOG_TYPE_ERROR))
            {
              v348 = *(_DWORD *)(v11 + 372);
              *(_DWORD *)buf = 136446978;
              *(_QWORD *)&buf[4] = "nw_http1_attempt_trigger_new_flow";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v11 + 74;
              *(_WORD *)&buf[22] = 2080;
              v1061 = (uint64_t)" ";
              *(_WORD *)v1062 = 1024;
              *(_DWORD *)&v1062[2] = v348;
              _os_log_impl(&dword_182FBE000, v347, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u> http1->parameters is NULL when opening responder stream", buf, 0x26u);
            }
          }
          __nwlog_obj();
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http1_attempt_trigger_new_flow";
          v349 = (char *)_os_log_send_and_compose_impl();
          v1075[0] = 16;
          aBlock[0] = 0;
          if (__nwlog_fault(v349, v1075, aBlock))
          {
            if (v1075[0] == 17)
            {
              v350 = __nwlog_obj();
              v351 = v1075[0];
              if (!os_log_type_enabled(v350, (os_log_type_t)v1075[0]))
                goto LABEL_722;
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_http1_attempt_trigger_new_flow";
              v352 = "%{public}s http1->parameters is NULL when opening responder stream";
              goto LABEL_721;
            }
            if (!aBlock[0])
            {
              v350 = __nwlog_obj();
              v351 = v1075[0];
              if (!os_log_type_enabled(v350, (os_log_type_t)v1075[0]))
                goto LABEL_722;
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_http1_attempt_trigger_new_flow";
              v352 = "%{public}s http1->parameters is NULL when opening responder stream, backtrace limit exceeded";
              goto LABEL_721;
            }
            v369 = (char *)__nw_create_backtrace_string();
            v350 = __nwlog_obj();
            v351 = v1075[0];
            v370 = os_log_type_enabled(v350, (os_log_type_t)v1075[0]);
            if (v369)
            {
              if (v370)
              {
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = "nw_http1_attempt_trigger_new_flow";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = v369;
                _os_log_impl(&dword_182FBE000, v350, v351, "%{public}s http1->parameters is NULL when opening responder stream, dumping backtrace:%{public}s", buf, 0x16u);
              }
              free(v369);
              goto LABEL_722;
            }
            if (v370)
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_http1_attempt_trigger_new_flow";
              v352 = "%{public}s http1->parameters is NULL when opening responder stream, no backtrace";
LABEL_721:
              _os_log_impl(&dword_182FBE000, v350, v351, v352, buf, 0xCu);
            }
          }
LABEL_722:
          if (v349)
            free(v349);
          goto LABEL_715;
        }
        if ((*(_BYTE *)(v11 + 158) & 1) == 0)
        {
          v779 = __nwlog_obj();
          if (os_log_type_enabled(v779, OS_LOG_TYPE_ERROR))
          {
            v780 = *(_DWORD *)(v1052 + 372);
            *(_DWORD *)buf = 136446978;
            *(_QWORD *)&buf[4] = "nw_http1_new_flow_valid";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v1052 + 74;
            *(_WORD *)&buf[22] = 2080;
            v1061 = (uint64_t)" ";
            *(_WORD *)v1062 = 1024;
            *(_DWORD *)&v1062[2] = v780;
            _os_log_impl(&dword_182FBE000, v779, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u> listen handler has no new_flow callback, ignoring incoming flow", buf, 0x26u);
          }
        }
        v781 = *v271;
        v782 = v781 | (*(unsigned __int8 *)(v16 + 874) << 16);
        if ((v781 & 0x100) != 0)
        {
          if ((*(_BYTE *)(v16 + 158) & 1) == 0)
          {
            if (gLogDatapath)
            {
              v825 = __nwlog_obj();
              if (os_log_type_enabled(v825, OS_LOG_TYPE_DEBUG))
              {
                v826 = *(_QWORD *)(v16 + 488);
                v827 = *(_DWORD *)(*(_QWORD *)(v16 + 480) + 372);
                v828 = *(_DWORD *)(v16 + 860);
                if (v826)
                  LODWORD(v826) = *(_DWORD *)(v826 + 424);
                *(_DWORD *)buf = 136447490;
                *(_QWORD *)&buf[4] = "nw_http1_connection_close";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = v16 + 74;
                *(_WORD *)&buf[22] = 2080;
                v1061 = (uint64_t)" ";
                *(_WORD *)v1062 = 1024;
                *(_DWORD *)&v1062[2] = v827;
                *(_WORD *)&v1062[6] = 1024;
                *(_DWORD *)&v1062[8] = v828;
                *(_WORD *)&v1062[12] = 1024;
                *(_DWORD *)&v1062[14] = v826;
                _os_log_impl(&dword_182FBE000, v825, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> already closed", buf, 0x32u);
                v11 = v1052;
                goto LABEL_715;
              }
            }
          }
LABEL_1737:
          v11 = v1052;
          goto LABEL_715;
        }
        *(_BYTE *)(v16 + 874) = BYTE2(v782);
        *v271 = v782 | 0x100;
        if ((*(_BYTE *)(v16 + 158) & 1) == 0)
        {
          if (gLogDatapath)
          {
            v1027 = __nwlog_obj();
            if (os_log_type_enabled(v1027, OS_LOG_TYPE_DEBUG))
            {
              v1028 = *(_QWORD *)(v16 + 488);
              v1029 = *(_DWORD *)(*(_QWORD *)(v16 + 480) + 372);
              v1030 = *(_DWORD *)(v16 + 860);
              if (v1028)
                LODWORD(v1028) = *(_DWORD *)(v1028 + 424);
              *(_DWORD *)buf = 136447490;
              *(_QWORD *)&buf[4] = "nw_http1_connection_close";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v16 + 74;
              *(_WORD *)&buf[22] = 2080;
              v1061 = (uint64_t)" ";
              *(_WORD *)v1062 = 1024;
              *(_DWORD *)&v1062[2] = v1029;
              *(_WORD *)&v1062[6] = 1024;
              *(_DWORD *)&v1062[8] = v1030;
              *(_WORD *)&v1062[12] = 1024;
              *(_DWORD *)&v1062[14] = v1028;
              _os_log_impl(&dword_182FBE000, v1027, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> http connection closed, increasing pool width", buf, 0x32u);
            }
          }
        }
        v783 = *(_QWORD *)(v16 + 480);
        if (!v783)
        {
          __nwlog_obj();
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
          v1023 = (char *)_os_log_send_and_compose_impl();
          v1075[0] = 16;
          aBlock[0] = 0;
          if (!__nwlog_fault(v1023, v1075, aBlock))
            goto LABEL_1879;
          if (v1075[0] == 17)
          {
            v1024 = __nwlog_obj();
            v1025 = v1075[0];
            if (!os_log_type_enabled(v1024, (os_log_type_t)v1075[0]))
              goto LABEL_1879;
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
            v1026 = "%{public}s called with null http1";
          }
          else if (aBlock[0])
          {
            v1031 = (char *)__nw_create_backtrace_string();
            v1024 = __nwlog_obj();
            v1025 = v1075[0];
            v1032 = os_log_type_enabled(v1024, (os_log_type_t)v1075[0]);
            if (v1031)
            {
              if (v1032)
              {
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = v1031;
                _os_log_impl(&dword_182FBE000, v1024, v1025, "%{public}s called with null http1, dumping backtrace:%{public}s", buf, 0x16u);
              }
              free(v1031);
              goto LABEL_1879;
            }
            if (!v1032)
              goto LABEL_1879;
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
            v1026 = "%{public}s called with null http1, no backtrace";
          }
          else
          {
            v1024 = __nwlog_obj();
            v1025 = v1075[0];
            if (!os_log_type_enabled(v1024, (os_log_type_t)v1075[0]))
              goto LABEL_1879;
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
            v1026 = "%{public}s called with null http1, backtrace limit exceeded";
          }
          v1042 = buf;
LABEL_1878:
          _os_log_impl(&dword_182FBE000, v1024, v1025, v1026, v1042, 0xCu);
          goto LABEL_1879;
        }
        v784 = *v271;
        v785 = v784 | (*(unsigned __int8 *)(v16 + 874) << 16);
        if ((v784 & 0x800) != 0)
        {
          if ((*(_BYTE *)(v16 + 158) & 1) == 0)
          {
            if (gLogDatapath)
            {
              v835 = __nwlog_obj();
              if (os_log_type_enabled(v835, OS_LOG_TYPE_DEBUG))
              {
                v836 = *(_QWORD *)(v16 + 488);
                v837 = *(_DWORD *)(*(_QWORD *)(v16 + 480) + 372);
                v838 = *(_DWORD *)(v16 + 860);
                if (v836)
                  LODWORD(v836) = *(_DWORD *)(v836 + 424);
                *(_DWORD *)buf = 136447490;
                *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = v16 + 74;
                *(_WORD *)&buf[22] = 2080;
                v1061 = (uint64_t)" ";
                *(_WORD *)v1062 = 1024;
                *(_DWORD *)&v1062[2] = v837;
                *(_WORD *)&v1062[6] = 1024;
                *(_DWORD *)&v1062[8] = v838;
                *(_WORD *)&v1062[12] = 1024;
                *(_DWORD *)&v1062[14] = v836;
                _os_log_impl(&dword_182FBE000, v835, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> Connection already marked as not-reusable, ignoring", buf, 0x32u);
              }
            }
          }
          goto LABEL_1736;
        }
        *(_BYTE *)(v16 + 874) = BYTE2(v785);
        *v271 = v785 | 0x800;
        v786 = *(unsigned int *)(v783 + 368) + 1;
        v787 = v786 << 31 >> 31;
        *(_DWORD *)(v783 + 368) = v786;
        if (v787 == v786 && (v787 & 0x8000000000000000) == 0)
        {
LABEL_1731:
          if ((*(_BYTE *)(v16 + 158) & 1) == 0)
          {
            if (gLogDatapath)
            {
              v1033 = __nwlog_obj();
              if (os_log_type_enabled(v1033, OS_LOG_TYPE_DEBUG))
              {
                v1034 = *(_QWORD *)(v16 + 488);
                v1035 = *(_DWORD *)(*(_QWORD *)(v16 + 480) + 372);
                v1036 = *(_DWORD *)(v16 + 860);
                if (v1034)
                  LODWORD(v1034) = *(_DWORD *)(v1034 + 424);
                v1037 = *(_DWORD *)(v783 + 368) + *(_DWORD *)(v783 + 364);
                *(_DWORD *)buf = 136447746;
                *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = v16 + 74;
                *(_WORD *)&buf[22] = 2080;
                v1061 = (uint64_t)" ";
                *(_WORD *)v1062 = 1024;
                *(_DWORD *)&v1062[2] = v1035;
                *(_WORD *)&v1062[6] = 1024;
                *(_DWORD *)&v1062[8] = v1036;
                *(_WORD *)&v1062[12] = 1024;
                *(_DWORD *)&v1062[14] = v1034;
                *(_WORD *)&v1062[18] = 1024;
                *(_DWORD *)&v1062[20] = v1037;
                _os_log_impl(&dword_182FBE000, v1033, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> connection marked as not-reusable, increased pool width to %u", buf, 0x38u);
              }
            }
          }
          v1001 = *(void **)(v16 + 496);
          if (!v1001)
          {
            __nwlog_obj();
            *(_DWORD *)v1075 = 136446210;
            *(_QWORD *)&v1075[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
            v1023 = (char *)_os_log_send_and_compose_impl();
            aBlock[0] = 16;
            type[0] = 0;
            if (!__nwlog_fault(v1023, aBlock, type))
              goto LABEL_1879;
            if (aBlock[0] == 17)
            {
              v1024 = __nwlog_obj();
              v1025 = aBlock[0];
              if (!os_log_type_enabled(v1024, (os_log_type_t)aBlock[0]))
                goto LABEL_1879;
              *(_DWORD *)v1075 = 136446210;
              *(_QWORD *)&v1075[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
              v1026 = "%{public}s called with null http1_connection->context";
LABEL_1877:
              v1042 = v1075;
              goto LABEL_1878;
            }
            if (!type[0])
            {
              v1024 = __nwlog_obj();
              v1025 = aBlock[0];
              if (!os_log_type_enabled(v1024, (os_log_type_t)aBlock[0]))
                goto LABEL_1879;
              *(_DWORD *)v1075 = 136446210;
              *(_QWORD *)&v1075[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
              v1026 = "%{public}s called with null http1_connection->context, backtrace limit exceeded";
              goto LABEL_1877;
            }
            v1038 = (char *)__nw_create_backtrace_string();
            v1024 = __nwlog_obj();
            v1025 = aBlock[0];
            v1039 = os_log_type_enabled(v1024, (os_log_type_t)aBlock[0]);
            if (!v1038)
            {
              if (!v1039)
                goto LABEL_1879;
              *(_DWORD *)v1075 = 136446210;
              *(_QWORD *)&v1075[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
              v1026 = "%{public}s called with null http1_connection->context, no backtrace";
              goto LABEL_1877;
            }
            if (!v1039)
              goto LABEL_1862;
            *(_DWORD *)v1075 = 136446466;
            *(_QWORD *)&v1075[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
            *(_WORD *)&v1075[12] = 2082;
            *(_QWORD *)&v1075[14] = v1038;
            v1040 = "%{public}s called with null http1_connection->context, dumping backtrace:%{public}s";
            goto LABEL_1861;
          }
          v1002 = *(_QWORD *)(v16 + 480);
          if (v1002)
          {
            v1003 = *(_QWORD *)(v1002 + 200);
            *(_QWORD *)buf = MEMORY[0x1E0C809B0];
            *(_QWORD *)&buf[8] = 0x40000000;
            *(_QWORD *)&buf[16] = ___ZL56nw_http1_match_idle_connection_with_pending_stream_asyncP19nw_http1_connection_block_invoke;
            v1061 = (uint64_t)&unk_1E14A1518;
            *(_QWORD *)v1062 = v1003;
            nw_queue_context_async(v1001, buf);
            goto LABEL_1736;
          }
          __nwlog_obj();
          *(_DWORD *)v1075 = 136446210;
          *(_QWORD *)&v1075[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
          v1023 = (char *)_os_log_send_and_compose_impl();
          aBlock[0] = 16;
          type[0] = 0;
          if (__nwlog_fault(v1023, aBlock, type))
          {
            if (aBlock[0] == 17)
            {
              v1024 = __nwlog_obj();
              v1025 = aBlock[0];
              if (!os_log_type_enabled(v1024, (os_log_type_t)aBlock[0]))
                goto LABEL_1879;
              *(_DWORD *)v1075 = 136446210;
              *(_QWORD *)&v1075[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
              v1026 = "%{public}s called with null http1";
              goto LABEL_1877;
            }
            if (!type[0])
            {
              v1024 = __nwlog_obj();
              v1025 = aBlock[0];
              if (!os_log_type_enabled(v1024, (os_log_type_t)aBlock[0]))
                goto LABEL_1879;
              *(_DWORD *)v1075 = 136446210;
              *(_QWORD *)&v1075[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
              v1026 = "%{public}s called with null http1, backtrace limit exceeded";
              goto LABEL_1877;
            }
            v1038 = (char *)__nw_create_backtrace_string();
            v1024 = __nwlog_obj();
            v1025 = aBlock[0];
            v1041 = os_log_type_enabled(v1024, (os_log_type_t)aBlock[0]);
            if (!v1038)
            {
              if (!v1041)
                goto LABEL_1879;
              *(_DWORD *)v1075 = 136446210;
              *(_QWORD *)&v1075[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
              v1026 = "%{public}s called with null http1, no backtrace";
              goto LABEL_1877;
            }
            if (!v1041)
              goto LABEL_1862;
            *(_DWORD *)v1075 = 136446466;
            *(_QWORD *)&v1075[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
            *(_WORD *)&v1075[12] = 2082;
            *(_QWORD *)&v1075[14] = v1038;
            v1040 = "%{public}s called with null http1, dumping backtrace:%{public}s";
LABEL_1861:
            _os_log_impl(&dword_182FBE000, v1024, v1025, v1040, v1075, 0x16u);
LABEL_1862:
            free(v1038);
            if (v1023)
LABEL_1880:
              free(v1023);
LABEL_1736:
            if (!*(_QWORD *)(v16 + 488))
            {
              v1004 = *(_QWORD *)(v16 + 784);
              if (v1004)
              {
                nw_queue_set_timer_values(v1004, 0x8000000000000000, 0xFFFFFFFFFFFFFFFFLL, 0x3B9ACA00uLL);
                v11 = v1052;
                goto LABEL_715;
              }
              if ((*(_BYTE *)(v16 + 158) & 1) == 0)
              {
                v1005 = __nwlog_obj();
                if (os_log_type_enabled(v1005, OS_LOG_TYPE_ERROR))
                {
                  v1006 = *(_QWORD *)(v16 + 488);
                  v1007 = *(_DWORD *)(*(_QWORD *)(v16 + 480) + 372);
                  v1008 = *(_DWORD *)(v16 + 860);
                  if (v1006)
                    LODWORD(v1006) = *(_DWORD *)(v1006 + 424);
                  *(_DWORD *)buf = 136447490;
                  *(_QWORD *)&buf[4] = "nw_http1_connection_close";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = v16 + 74;
                  *(_WORD *)&buf[22] = 2080;
                  v1061 = (uint64_t)" ";
                  *(_WORD *)v1062 = 1024;
                  *(_DWORD *)&v1062[2] = v1007;
                  *(_WORD *)&v1062[6] = 1024;
                  *(_DWORD *)&v1062[8] = v1008;
                  *(_WORD *)&v1062[12] = 1024;
                  *(_DWORD *)&v1062[14] = v1006;
                  _os_log_impl(&dword_182FBE000, v1005, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u:c%u:s%u> No destroy timer on HTTP/1 connection when closing", buf, 0x32u);
                }
              }
              v1009 = *(_QWORD *)(v16 + 608);
              v1010 = *(void **)(v16 + 496);
              *(_QWORD *)buf = MEMORY[0x1E0C809B0];
              *(_QWORD *)&buf[8] = 0x40000000;
              *(_QWORD *)&buf[16] = ___ZL25nw_http1_connection_closeP19nw_http1_connection_block_invoke;
              v1061 = (uint64_t)&unk_1E14A14F0;
              *(_QWORD *)v1062 = v1009;
              nw_queue_context_async(v1010, buf);
            }
            goto LABEL_1737;
          }
LABEL_1879:
          if (!v1023)
            goto LABEL_1736;
          goto LABEL_1880;
        }
        __nwlog_obj();
        v788 = *(unsigned int *)(v783 + 368);
        *(_DWORD *)buf = 136446978;
        *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = "http1->nonresuable_connections";
        *(_WORD *)&buf[22] = 2048;
        v1061 = 1;
        *(_WORD *)v1062 = 2048;
        *(_QWORD *)&v1062[2] = v788;
        v789 = (char *)_os_log_send_and_compose_impl();
        v1075[0] = 16;
        aBlock[0] = 0;
        if (__nwlog_fault(v789, v1075, aBlock))
        {
          if (v1075[0] == 17)
          {
            v790 = __nwlog_obj();
            v791 = v1075[0];
            if (os_log_type_enabled(v790, (os_log_type_t)v1075[0]))
            {
              v792 = *(unsigned int *)(v783 + 368);
              *(_DWORD *)buf = 136446978;
              *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = "http1->nonresuable_connections";
              *(_WORD *)&buf[22] = 2048;
              v1061 = 1;
              *(_WORD *)v1062 = 2048;
              *(_QWORD *)&v1062[2] = v792;
              v793 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_1727:
              _os_log_impl(&dword_182FBE000, v790, v791, v793, buf, 0x2Au);
            }
          }
          else if (aBlock[0])
          {
            v957 = (char *)__nw_create_backtrace_string();
            v790 = __nwlog_obj();
            v791 = v1075[0];
            v958 = os_log_type_enabled(v790, (os_log_type_t)v1075[0]);
            if (v957)
            {
              if (v958)
              {
                v959 = *(unsigned int *)(v783 + 368);
                *(_DWORD *)buf = 136447234;
                *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = "http1->nonresuable_connections";
                *(_WORD *)&buf[22] = 2048;
                v1061 = 1;
                *(_WORD *)v1062 = 2048;
                *(_QWORD *)&v1062[2] = v959;
                *(_WORD *)&v1062[10] = 2082;
                *(_QWORD *)&v1062[12] = v957;
                _os_log_impl(&dword_182FBE000, v790, v791, "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
              }
              free(v957);
              goto LABEL_1728;
            }
            if (v958)
            {
              v1000 = *(unsigned int *)(v783 + 368);
              *(_DWORD *)buf = 136446978;
              *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = "http1->nonresuable_connections";
              *(_WORD *)&buf[22] = 2048;
              v1061 = 1;
              *(_WORD *)v1062 = 2048;
              *(_QWORD *)&v1062[2] = v1000;
              v793 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
              goto LABEL_1727;
            }
          }
          else
          {
            v790 = __nwlog_obj();
            v791 = v1075[0];
            if (os_log_type_enabled(v790, (os_log_type_t)v1075[0]))
            {
              v998 = *(unsigned int *)(v783 + 368);
              *(_DWORD *)buf = 136446978;
              *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = "http1->nonresuable_connections";
              *(_WORD *)&buf[22] = 2048;
              v1061 = 1;
              *(_WORD *)v1062 = 2048;
              *(_QWORD *)&v1062[2] = v998;
              v793 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
              goto LABEL_1727;
            }
          }
        }
LABEL_1728:
        if (v789)
          free(v789);
        *(_DWORD *)(v783 + 368) = -1;
        goto LABEL_1731;
      }
LABEL_370:
      v217 = *(_DWORD *)(v11 + 352);
      *(_DWORD *)(v11 + 352) = v217 - 1;
      if (v217)
        goto LABEL_388;
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v218 = *(unsigned int *)(v11 + 352);
      *(_DWORD *)buf = 136446978;
      *(_QWORD *)&buf[4] = "nw_http1_remove_stream";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = "http1->pending_output_handler_count";
      *(_WORD *)&buf[22] = 2048;
      v1061 = 1;
      *(_WORD *)v1062 = 2048;
      *(_QWORD *)&v1062[2] = v218;
      v219 = (char *)_os_log_send_and_compose_impl();
      v1075[0] = 16;
      aBlock[0] = 0;
      if (!__nwlog_fault(v219, v1075, aBlock))
        goto LABEL_385;
      if (v1075[0] == 17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v220 = gLogObj;
        v221 = v1075[0];
        if (os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v1075[0]))
        {
          v222 = *(unsigned int *)(v11 + 352);
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_http1_remove_stream";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = "http1->pending_output_handler_count";
          *(_WORD *)&buf[22] = 2048;
          v1061 = 1;
          *(_WORD *)v1062 = 2048;
          *(_QWORD *)&v1062[2] = v222;
          v223 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu";
LABEL_384:
          _os_log_impl(&dword_182FBE000, v220, v221, v223, buf, 0x2Au);
        }
      }
      else if (aBlock[0])
      {
        v224 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v220 = gLogObj;
        v221 = v1075[0];
        v225 = os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v1075[0]);
        if (v224)
        {
          if (v225)
          {
            v226 = *(unsigned int *)(v1052 + 352);
            *(_DWORD *)buf = 136447234;
            *(_QWORD *)&buf[4] = "nw_http1_remove_stream";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = "http1->pending_output_handler_count";
            *(_WORD *)&buf[22] = 2048;
            v1061 = 1;
            *(_WORD *)v1062 = 2048;
            *(_QWORD *)&v1062[2] = v226;
            *(_WORD *)&v1062[10] = 2082;
            *(_QWORD *)&v1062[12] = v224;
            _os_log_impl(&dword_182FBE000, v220, v221, "%{public}s Underflow: %{public}s, decrement %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
          }
          free(v224);
          v11 = v1052;
          goto LABEL_385;
        }
        v11 = v1052;
        if (v225)
        {
          v228 = *(unsigned int *)(v1052 + 352);
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_http1_remove_stream";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = "http1->pending_output_handler_count";
          *(_WORD *)&buf[22] = 2048;
          v1061 = 1;
          *(_WORD *)v1062 = 2048;
          *(_QWORD *)&v1062[2] = v228;
          v223 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, no backtrace";
          goto LABEL_384;
        }
      }
      else
      {
        v220 = __nwlog_obj();
        v221 = v1075[0];
        if (os_log_type_enabled(v220, (os_log_type_t)v1075[0]))
        {
          v227 = *(unsigned int *)(v11 + 352);
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_http1_remove_stream";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = "http1->pending_output_handler_count";
          *(_WORD *)&buf[22] = 2048;
          v1061 = 1;
          *(_WORD *)v1062 = 2048;
          *(_QWORD *)&v1062[2] = v227;
          v223 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, backtrace limit exceeded";
          goto LABEL_384;
        }
      }
LABEL_385:
      if (v219)
        free(v219);
      *(_DWORD *)(v11 + 352) = 0;
      v15 = &unk_1ECD84000;
      goto LABEL_388;
    }
    __nwlog_obj();
    v135 = *(unsigned int *)(v11 + 348);
    *(_DWORD *)buf = 136446978;
    *(_QWORD *)&buf[4] = "nw_http1_remove_pending_stream";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = "http1->pending_stream_count";
    *(_WORD *)&buf[22] = 2048;
    v1061 = 1;
    *(_WORD *)v1062 = 2048;
    *(_QWORD *)&v1062[2] = v135;
    v136 = (char *)_os_log_send_and_compose_impl();
    v1075[0] = 16;
    aBlock[0] = 0;
    if (__nwlog_fault(v136, v1075, aBlock))
    {
      if (v1075[0] == 17)
      {
        v137 = __nwlog_obj();
        v138 = v1075[0];
        if (os_log_type_enabled(v137, (os_log_type_t)v1075[0]))
        {
          v139 = *(unsigned int *)(v11 + 348);
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_http1_remove_pending_stream";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = "http1->pending_stream_count";
          *(_WORD *)&buf[22] = 2048;
          v1061 = 1;
          *(_WORD *)v1062 = 2048;
          *(_QWORD *)&v1062[2] = v139;
          v140 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu";
LABEL_733:
          _os_log_impl(&dword_182FBE000, v137, v138, v140, buf, 0x2Au);
        }
      }
      else if (aBlock[0])
      {
        v194 = (char *)__nw_create_backtrace_string();
        v137 = __nwlog_obj();
        v138 = v1075[0];
        v195 = os_log_type_enabled(v137, (os_log_type_t)v1075[0]);
        if (v194)
        {
          if (v195)
          {
            v196 = *(unsigned int *)(v1052 + 348);
            *(_DWORD *)buf = 136447234;
            *(_QWORD *)&buf[4] = "nw_http1_remove_pending_stream";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = "http1->pending_stream_count";
            *(_WORD *)&buf[22] = 2048;
            v1061 = 1;
            *(_WORD *)v1062 = 2048;
            *(_QWORD *)&v1062[2] = v196;
            *(_WORD *)&v1062[10] = 2082;
            *(_QWORD *)&v1062[12] = v194;
            _os_log_impl(&dword_182FBE000, v137, v138, "%{public}s Underflow: %{public}s, decrement %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
          }
          free(v194);
          v11 = v1052;
          goto LABEL_734;
        }
        v11 = v1052;
        if (v195)
        {
          v435 = *(unsigned int *)(v1052 + 348);
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_http1_remove_pending_stream";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = "http1->pending_stream_count";
          *(_WORD *)&buf[22] = 2048;
          v1061 = 1;
          *(_WORD *)v1062 = 2048;
          *(_QWORD *)&v1062[2] = v435;
          v140 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, no backtrace";
          goto LABEL_733;
        }
      }
      else
      {
        v137 = __nwlog_obj();
        v138 = v1075[0];
        if (os_log_type_enabled(v137, (os_log_type_t)v1075[0]))
        {
          v383 = *(unsigned int *)(v11 + 348);
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_http1_remove_pending_stream";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = "http1->pending_stream_count";
          *(_WORD *)&buf[22] = 2048;
          v1061 = 1;
          *(_WORD *)v1062 = 2048;
          *(_QWORD *)&v1062[2] = v383;
          v140 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, backtrace limit exceeded";
          goto LABEL_733;
        }
      }
    }
LABEL_734:
    if (v136)
      free(v136);
    *(_DWORD *)(v11 + 348) = 0;
    goto LABEL_737;
  }
LABEL_1315:
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_protocol_http1_remove_input_handler";
  v518 = (char *)_os_log_send_and_compose_impl();
  v1075[0] = 16;
  aBlock[0] = 0;
  if (!__nwlog_fault(v518, v1075, aBlock))
    goto LABEL_1330;
  if (v1075[0] != 17)
  {
    if (!aBlock[0])
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v519 = gLogObj;
      v520 = v1075[0];
      if (os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v1075[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_http1_remove_input_handler";
        v521 = "%{public}s called with null http1_stream, backtrace limit exceeded";
        goto LABEL_1329;
      }
      goto LABEL_1330;
    }
    v548 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v519 = gLogObj;
    v520 = v1075[0];
    v809 = os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v1075[0]);
    if (!v548)
    {
      if (v809)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_http1_remove_input_handler";
        v521 = "%{public}s called with null http1_stream, no backtrace";
        goto LABEL_1329;
      }
      goto LABEL_1330;
    }
    if (v809)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_protocol_http1_remove_input_handler";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v548;
      v550 = "%{public}s called with null http1_stream, dumping backtrace:%{public}s";
      goto LABEL_1323;
    }
LABEL_1324:
    free(v548);
    goto LABEL_1330;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v519 = gLogObj;
  v520 = v1075[0];
  if (os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v1075[0]))
  {
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_http1_remove_input_handler";
    v521 = "%{public}s called with null http1_stream";
    goto LABEL_1329;
  }
LABEL_1330:
  if (v518)
    free(v518);
  return 0;
}

uint64_t nw_protocol_http1_replace_input_handler(nw_protocol *a1, nw_protocol *a2, nw_protocol *a3)
{
  char *handle;
  int v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  nw_protocol *default_input_handler;
  const char *v16;
  NSObject *v17;
  os_log_type_t v18;
  nw_protocol *v19;
  const char *v20;
  uint64_t v21;
  char *v23;
  _BOOL4 v24;
  nw_protocol *v25;
  nw_protocol *v26;
  nw_protocol *v27;
  char *v28;
  char *v29;
  NSObject *v30;
  os_log_type_t v31;
  const char *v32;
  const char *v33;
  NSObject *v34;
  os_log_type_t v35;
  const char *v36;
  char *backtrace_string;
  _BOOL4 v38;
  char *v39;
  _BOOL4 v40;
  const char *v41;
  NSObject *v42;
  uint64_t v43;
  int v44;
  int v45;
  char *v46;
  _BOOL4 v47;
  const char *v48;
  _BOOL4 v49;
  char *v50;
  NSObject *v51;
  os_log_type_t v52;
  const char *v53;
  _BOOL4 v54;
  _BOOL4 v55;
  char *v56;
  _BOOL4 v57;
  _BOOL4 v58;
  _BOOL4 v59;
  char v60;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v63;
  __int16 v64;
  nw_protocol *v65;
  __int16 v66;
  nw_protocol *v67;
  __int16 v68;
  _BYTE v69[10];
  __int16 v70;
  int v71;
  __int16 v72;
  uint64_t v73;
  __int16 v74;
  nw_protocol *v75;
  __int16 v76;
  nw_protocol *v77;
  uint64_t v78;

  v78 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v63 = "nw_http1_get_http1_protocol";
    v29 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v60 = 0;
    if (!__nwlog_fault(v29, &type, &v60))
      goto LABEL_137;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v30 = __nwlog_obj();
      v31 = type;
      if (!os_log_type_enabled(v30, type))
        goto LABEL_137;
      *(_DWORD *)buf = 136446210;
      v63 = "nw_http1_get_http1_protocol";
      v32 = "%{public}s called with null protocol";
    }
    else if (v60)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v30 = __nwlog_obj();
      v31 = type;
      v38 = os_log_type_enabled(v30, type);
      if (backtrace_string)
      {
        if (v38)
        {
          *(_DWORD *)buf = 136446466;
          v63 = "nw_http1_get_http1_protocol";
          v64 = 2082;
          v65 = (nw_protocol *)backtrace_string;
          _os_log_impl(&dword_182FBE000, v30, v31, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_137:
        if (!v29)
          goto LABEL_139;
LABEL_138:
        free(v29);
        goto LABEL_139;
      }
      if (!v38)
        goto LABEL_137;
      *(_DWORD *)buf = 136446210;
      v63 = "nw_http1_get_http1_protocol";
      v32 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      v30 = __nwlog_obj();
      v31 = type;
      if (!os_log_type_enabled(v30, type))
        goto LABEL_137;
      *(_DWORD *)buf = 136446210;
      v63 = "nw_http1_get_http1_protocol";
      v32 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    goto LABEL_136;
  }
  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v63 = "nw_http1_get_http1_protocol";
    v29 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v60 = 0;
    if (!__nwlog_fault(v29, &type, &v60))
      goto LABEL_137;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v60)
      {
        v30 = __nwlog_obj();
        v31 = type;
        if (!os_log_type_enabled(v30, type))
          goto LABEL_137;
        *(_DWORD *)buf = 136446210;
        v63 = "nw_http1_get_http1_protocol";
        v32 = "%{public}s called with null handle, backtrace limit exceeded";
        goto LABEL_136;
      }
      v39 = (char *)__nw_create_backtrace_string();
      v30 = __nwlog_obj();
      v31 = type;
      v40 = os_log_type_enabled(v30, type);
      if (!v39)
      {
        if (!v40)
          goto LABEL_137;
        *(_DWORD *)buf = 136446210;
        v63 = "nw_http1_get_http1_protocol";
        v32 = "%{public}s called with null handle, no backtrace";
        goto LABEL_136;
      }
      if (v40)
      {
        *(_DWORD *)buf = 136446466;
        v63 = "nw_http1_get_http1_protocol";
        v64 = 2082;
        v65 = (nw_protocol *)v39;
        v41 = "%{public}s called with null handle, dumping backtrace:%{public}s";
LABEL_110:
        _os_log_impl(&dword_182FBE000, v30, v31, v41, buf, 0x16u);
      }
LABEL_111:
      free(v39);
      if (!v29)
        goto LABEL_139;
      goto LABEL_138;
    }
    v30 = __nwlog_obj();
    v31 = type;
    if (!os_log_type_enabled(v30, type))
      goto LABEL_137;
    *(_DWORD *)buf = 136446210;
    v63 = "nw_http1_get_http1_protocol";
    v32 = "%{public}s called with null handle";
LABEL_136:
    _os_log_impl(&dword_182FBE000, v30, v31, v32, buf, 0xCu);
    goto LABEL_137;
  }
  v7 = *((_DWORD *)handle + 6);
  v8 = (uint64_t *)a1->handle;
  if (v7 == 1)
    goto LABEL_10;
  if (v7 != 2)
  {
    if (v7 != 3)
    {
LABEL_139:
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      *(_DWORD *)buf = 136446210;
      v63 = "nw_protocol_http1_replace_input_handler";
      v33 = (const char *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      v60 = 0;
      if (!__nwlog_fault(v33, &type, &v60))
        goto LABEL_171;
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v34 = gLogObj;
        v35 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type))
          goto LABEL_171;
        *(_DWORD *)buf = 136446210;
        v63 = "nw_protocol_http1_replace_input_handler";
        v36 = "%{public}s called with null http1";
        goto LABEL_170;
      }
      if (!v60)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v34 = gLogObj;
        v35 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type))
          goto LABEL_171;
        *(_DWORD *)buf = 136446210;
        v63 = "nw_protocol_http1_replace_input_handler";
        v36 = "%{public}s called with null http1, backtrace limit exceeded";
        goto LABEL_170;
      }
      v46 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v34 = gLogObj;
      v35 = type;
      v58 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (!v46)
      {
        if (!v58)
          goto LABEL_171;
        *(_DWORD *)buf = 136446210;
        v63 = "nw_protocol_http1_replace_input_handler";
        v36 = "%{public}s called with null http1, no backtrace";
        goto LABEL_170;
      }
      if (!v58)
        goto LABEL_165;
      *(_DWORD *)buf = 136446466;
      v63 = "nw_protocol_http1_replace_input_handler";
      v64 = 2082;
      v65 = (nw_protocol *)v46;
      v48 = "%{public}s called with null http1, dumping backtrace:%{public}s";
      goto LABEL_164;
    }
    v9 = *((_QWORD *)handle + 2);
    if (v9)
    {
      v8 = (uint64_t *)(v9 + 480);
      goto LABEL_10;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v63 = "nw_http1_get_http1_protocol";
    v29 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v60 = 0;
    if (!__nwlog_fault(v29, &type, &v60))
      goto LABEL_137;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v30 = __nwlog_obj();
      v31 = type;
      if (!os_log_type_enabled(v30, type))
        goto LABEL_137;
      *(_DWORD *)buf = 136446210;
      v63 = "nw_http1_get_http1_protocol";
      v32 = "%{public}s called with null handle->http1_connection";
      goto LABEL_136;
    }
    if (!v60)
    {
      v30 = __nwlog_obj();
      v31 = type;
      if (!os_log_type_enabled(v30, type))
        goto LABEL_137;
      *(_DWORD *)buf = 136446210;
      v63 = "nw_http1_get_http1_protocol";
      v32 = "%{public}s called with null handle->http1_connection, backtrace limit exceeded";
      goto LABEL_136;
    }
    v39 = (char *)__nw_create_backtrace_string();
    v30 = __nwlog_obj();
    v31 = type;
    v54 = os_log_type_enabled(v30, type);
    if (!v39)
    {
      if (!v54)
        goto LABEL_137;
      *(_DWORD *)buf = 136446210;
      v63 = "nw_http1_get_http1_protocol";
      v32 = "%{public}s called with null handle->http1_connection, no backtrace";
      goto LABEL_136;
    }
    if (v54)
    {
      *(_DWORD *)buf = 136446466;
      v63 = "nw_http1_get_http1_protocol";
      v64 = 2082;
      v65 = (nw_protocol *)v39;
      v41 = "%{public}s called with null handle->http1_connection, dumping backtrace:%{public}s";
      goto LABEL_110;
    }
    goto LABEL_111;
  }
  v10 = *((_QWORD *)handle + 1);
  if (!v10)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v63 = "nw_http1_get_http1_protocol";
    v29 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v60 = 0;
    if (!__nwlog_fault(v29, &type, &v60))
      goto LABEL_137;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v30 = __nwlog_obj();
      v31 = type;
      if (!os_log_type_enabled(v30, type))
        goto LABEL_137;
      *(_DWORD *)buf = 136446210;
      v63 = "nw_http1_get_http1_protocol";
      v32 = "%{public}s called with null handle->http1_stream";
      goto LABEL_136;
    }
    if (!v60)
    {
      v30 = __nwlog_obj();
      v31 = type;
      if (!os_log_type_enabled(v30, type))
        goto LABEL_137;
      *(_DWORD *)buf = 136446210;
      v63 = "nw_http1_get_http1_protocol";
      v32 = "%{public}s called with null handle->http1_stream, backtrace limit exceeded";
      goto LABEL_136;
    }
    v39 = (char *)__nw_create_backtrace_string();
    v30 = __nwlog_obj();
    v31 = type;
    v55 = os_log_type_enabled(v30, type);
    if (!v39)
    {
      if (!v55)
        goto LABEL_137;
      *(_DWORD *)buf = 136446210;
      v63 = "nw_http1_get_http1_protocol";
      v32 = "%{public}s called with null handle->http1_stream, no backtrace";
      goto LABEL_136;
    }
    if (v55)
    {
      *(_DWORD *)buf = 136446466;
      v63 = "nw_http1_get_http1_protocol";
      v64 = 2082;
      v65 = (nw_protocol *)v39;
      v41 = "%{public}s called with null handle->http1_stream, dumping backtrace:%{public}s";
      goto LABEL_110;
    }
    goto LABEL_111;
  }
  v8 = (uint64_t *)(v10 + 248);
LABEL_10:
  v11 = *v8;
  if (!*v8)
    goto LABEL_139;
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v63 = "nw_protocol_http1_replace_input_handler";
    v33 = (const char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v60 = 0;
    if (!__nwlog_fault(v33, &type, &v60))
      goto LABEL_171;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v34 = __nwlog_obj();
      v35 = type;
      if (!os_log_type_enabled(v34, type))
        goto LABEL_171;
      *(_DWORD *)buf = 136446210;
      v63 = "nw_protocol_http1_replace_input_handler";
      v36 = "%{public}s called with null old_input_protocol";
      goto LABEL_170;
    }
    if (!v60)
    {
      v34 = __nwlog_obj();
      v35 = type;
      if (!os_log_type_enabled(v34, type))
        goto LABEL_171;
      *(_DWORD *)buf = 136446210;
      v63 = "nw_protocol_http1_replace_input_handler";
      v36 = "%{public}s called with null old_input_protocol, backtrace limit exceeded";
      goto LABEL_170;
    }
    v46 = (char *)__nw_create_backtrace_string();
    v34 = __nwlog_obj();
    v35 = type;
    v47 = os_log_type_enabled(v34, type);
    if (!v46)
    {
      if (!v47)
        goto LABEL_171;
      *(_DWORD *)buf = 136446210;
      v63 = "nw_protocol_http1_replace_input_handler";
      v36 = "%{public}s called with null old_input_protocol, no backtrace";
      goto LABEL_170;
    }
    if (!v47)
      goto LABEL_165;
    *(_DWORD *)buf = 136446466;
    v63 = "nw_protocol_http1_replace_input_handler";
    v64 = 2082;
    v65 = (nw_protocol *)v46;
    v48 = "%{public}s called with null old_input_protocol, dumping backtrace:%{public}s";
LABEL_164:
    _os_log_impl(&dword_182FBE000, v34, v35, v48, buf, 0x16u);
    goto LABEL_165;
  }
  if (!a3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v63 = "nw_protocol_http1_replace_input_handler";
    v33 = (const char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v60 = 0;
    if (!__nwlog_fault(v33, &type, &v60))
      goto LABEL_171;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v34 = __nwlog_obj();
      v35 = type;
      if (!os_log_type_enabled(v34, type))
        goto LABEL_171;
      *(_DWORD *)buf = 136446210;
      v63 = "nw_protocol_http1_replace_input_handler";
      v36 = "%{public}s called with null new_input_protocol";
      goto LABEL_170;
    }
    if (!v60)
    {
      v34 = __nwlog_obj();
      v35 = type;
      if (!os_log_type_enabled(v34, type))
        goto LABEL_171;
      *(_DWORD *)buf = 136446210;
      v63 = "nw_protocol_http1_replace_input_handler";
      v36 = "%{public}s called with null new_input_protocol, backtrace limit exceeded";
      goto LABEL_170;
    }
    v46 = (char *)__nw_create_backtrace_string();
    v34 = __nwlog_obj();
    v35 = type;
    v49 = os_log_type_enabled(v34, type);
    if (!v46)
    {
      if (!v49)
        goto LABEL_171;
      *(_DWORD *)buf = 136446210;
      v63 = "nw_protocol_http1_replace_input_handler";
      v36 = "%{public}s called with null new_input_protocol, no backtrace";
      goto LABEL_170;
    }
    if (!v49)
      goto LABEL_165;
    *(_DWORD *)buf = 136446466;
    v63 = "nw_protocol_http1_replace_input_handler";
    v64 = 2082;
    v65 = (nw_protocol *)v46;
    v48 = "%{public}s called with null new_input_protocol, dumping backtrace:%{public}s";
    goto LABEL_164;
  }
  if (v7 != 2)
  {
    if (v7 != 3)
    {
LABEL_156:
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      *(_DWORD *)buf = 136446210;
      v63 = "nw_protocol_http1_replace_input_handler";
      v33 = (const char *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      v60 = 0;
      if (!__nwlog_fault(v33, &type, &v60))
        goto LABEL_171;
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v34 = gLogObj;
        v35 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type))
          goto LABEL_171;
        *(_DWORD *)buf = 136446210;
        v63 = "nw_protocol_http1_replace_input_handler";
        v36 = "%{public}s called with null http1_stream";
        goto LABEL_170;
      }
      if (!v60)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v34 = gLogObj;
        v35 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type))
          goto LABEL_171;
        *(_DWORD *)buf = 136446210;
        v63 = "nw_protocol_http1_replace_input_handler";
        v36 = "%{public}s called with null http1_stream, backtrace limit exceeded";
        goto LABEL_170;
      }
      v46 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v34 = gLogObj;
      v35 = type;
      v59 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (v46)
      {
        if (v59)
        {
          *(_DWORD *)buf = 136446466;
          v63 = "nw_protocol_http1_replace_input_handler";
          v64 = 2082;
          v65 = (nw_protocol *)v46;
          v48 = "%{public}s called with null http1_stream, dumping backtrace:%{public}s";
          goto LABEL_164;
        }
LABEL_165:
        free(v46);
        goto LABEL_171;
      }
      if (!v59)
        goto LABEL_171;
      *(_DWORD *)buf = 136446210;
      v63 = "nw_protocol_http1_replace_input_handler";
      v36 = "%{public}s called with null http1_stream, no backtrace";
LABEL_170:
      _os_log_impl(&dword_182FBE000, v34, v35, v36, buf, 0xCu);
LABEL_171:
      if (v33)
      {
        v28 = (char *)v33;
        goto LABEL_173;
      }
      return 0;
    }
    v12 = *((_QWORD *)handle + 2);
    if (v12)
    {
      v13 = (uint64_t *)(v12 + 488);
      goto LABEL_18;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v63 = "nw_http1_get_stream_for_protocol";
    v50 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v60 = 0;
    if (__nwlog_fault(v50, &type, &v60))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v51 = __nwlog_obj();
        v52 = type;
        if (!os_log_type_enabled(v51, type))
          goto LABEL_154;
        *(_DWORD *)buf = 136446210;
        v63 = "nw_http1_get_stream_for_protocol";
        v53 = "%{public}s called with null handle->http1_connection";
        goto LABEL_153;
      }
      if (!v60)
      {
        v51 = __nwlog_obj();
        v52 = type;
        if (!os_log_type_enabled(v51, type))
          goto LABEL_154;
        *(_DWORD *)buf = 136446210;
        v63 = "nw_http1_get_stream_for_protocol";
        v53 = "%{public}s called with null handle->http1_connection, backtrace limit exceeded";
        goto LABEL_153;
      }
      v56 = (char *)__nw_create_backtrace_string();
      v51 = __nwlog_obj();
      v52 = type;
      v57 = os_log_type_enabled(v51, type);
      if (v56)
      {
        if (v57)
        {
          *(_DWORD *)buf = 136446466;
          v63 = "nw_http1_get_stream_for_protocol";
          v64 = 2082;
          v65 = (nw_protocol *)v56;
          _os_log_impl(&dword_182FBE000, v51, v52, "%{public}s called with null handle->http1_connection, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v56);
        goto LABEL_154;
      }
      if (v57)
      {
        *(_DWORD *)buf = 136446210;
        v63 = "nw_http1_get_stream_for_protocol";
        v53 = "%{public}s called with null handle->http1_connection, no backtrace";
LABEL_153:
        _os_log_impl(&dword_182FBE000, v51, v52, v53, buf, 0xCu);
      }
    }
LABEL_154:
    if (v50)
      free(v50);
    goto LABEL_156;
  }
  v13 = (uint64_t *)(handle + 8);
LABEL_18:
  v14 = *v13;
  if (!*v13)
    goto LABEL_156;
  if ((*(_BYTE *)(v14 + 158) & 1) == 0)
  {
    if (gLogDatapath)
    {
      v42 = __nwlog_obj();
      if (os_log_type_enabled(v42, OS_LOG_TYPE_DEBUG))
      {
        v43 = *(_QWORD *)(v14 + 256);
        v44 = *(_DWORD *)(*(_QWORD *)(v14 + 248) + 372);
        if (v43)
          LODWORD(v43) = *(_DWORD *)(v43 + 860);
        v45 = *(_DWORD *)(v14 + 424);
        *(_DWORD *)buf = 136448258;
        v63 = "nw_protocol_http1_replace_input_handler";
        v64 = 2082;
        v65 = (nw_protocol *)(v14 + 74);
        v66 = 2080;
        v67 = (nw_protocol *)" ";
        v68 = 1024;
        *(_DWORD *)v69 = v44;
        *(_WORD *)&v69[4] = 1024;
        *(_DWORD *)&v69[6] = v43;
        v70 = 1024;
        v71 = v45;
        v72 = 2048;
        v73 = v14;
        v74 = 2048;
        v75 = a2;
        v76 = 2048;
        v77 = a3;
        _os_log_impl(&dword_182FBE000, v42, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> called for stream %p with old protocol: %p and new protocol: %p", buf, 0x50u);
      }
    }
  }
  if (a1->default_input_handler != a2)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    default_input_handler = a1->default_input_handler;
    *(_DWORD *)buf = 136446722;
    v63 = "nw_protocol_http1_replace_input_handler";
    v64 = 2048;
    v65 = default_input_handler;
    v66 = 2048;
    v67 = a2;
    v16 = (const char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v60 = 0;
    if (!__nwlog_fault(v16, &type, &v60))
      goto LABEL_43;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v17 = gLogObj;
      v18 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_43;
      v19 = a1->default_input_handler;
      *(_DWORD *)buf = 136446722;
      v63 = "nw_protocol_http1_replace_input_handler";
      v64 = 2048;
      v65 = v19;
      v66 = 2048;
      v67 = a2;
      v20 = "%{public}s Old input handler does not match (%p != %p)";
    }
    else if (v60)
    {
      v23 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v17 = gLogObj;
      v18 = type;
      v24 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (v23)
      {
        if (v24)
        {
          v25 = a1->default_input_handler;
          *(_DWORD *)buf = 136446978;
          v63 = "nw_protocol_http1_replace_input_handler";
          v64 = 2048;
          v65 = v25;
          v66 = 2048;
          v67 = a2;
          v68 = 2082;
          *(_QWORD *)v69 = v23;
          _os_log_impl(&dword_182FBE000, v17, v18, "%{public}s Old input handler does not match (%p != %p), dumping backtrace:%{public}s", buf, 0x2Au);
        }
        free(v23);
LABEL_43:
        if (v16)
        {
          v28 = (char *)v16;
LABEL_173:
          free(v28);
          return 0;
        }
        return 0;
      }
      if (!v24)
        goto LABEL_43;
      v27 = a1->default_input_handler;
      *(_DWORD *)buf = 136446722;
      v63 = "nw_protocol_http1_replace_input_handler";
      v64 = 2048;
      v65 = v27;
      v66 = 2048;
      v67 = a2;
      v20 = "%{public}s Old input handler does not match (%p != %p), no backtrace";
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v17 = gLogObj;
      v18 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_43;
      v26 = a1->default_input_handler;
      *(_DWORD *)buf = 136446722;
      v63 = "nw_protocol_http1_replace_input_handler";
      v64 = 2048;
      v65 = v26;
      v66 = 2048;
      v67 = a2;
      v20 = "%{public}s Old input handler does not match (%p != %p), backtrace limit exceeded";
    }
    _os_log_impl(&dword_182FBE000, v17, v18, v20, buf, 0x20u);
    goto LABEL_43;
  }
  nw_protocol_set_input_handler(v14, (uint64_t)a3);
  if (*(nw_protocol **)(v11 + 48) == a2)
    nw_protocol_set_input_handler(v11, (uint64_t)a3);
  v21 = *(_QWORD *)(v14 + 256);
  if (v21)
    nw_protocol_set_input_handler(v21, (uint64_t)a3);
  if (!a3->output_handler)
    nw_protocol_set_output_handler((uint64_t)a3, v14);
  return 1;
}

BOOL nw_protocol_http1_reset(nw_protocol *a1, nw_protocol *a2)
{
  char *handle;
  int v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  char *v16;
  NSObject *v17;
  os_log_type_t v18;
  const char *v19;
  uint64_t v20;
  _QWORD *v21;
  char *v22;
  _BOOL4 v23;
  int v24;
  uint64_t v25;
  char *v26;
  NSObject *v27;
  os_log_type_t v28;
  uint64_t v29;
  const char *v30;
  char *v31;
  NSObject *v32;
  os_log_type_t v33;
  _BOOL4 v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint64_t v39;
  char *v40;
  NSObject *v41;
  os_log_type_t v42;
  uint64_t v43;
  const char *v44;
  NSObject *v45;
  uint64_t v46;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  char *v52;
  _BOOL4 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  int v59;
  uint64_t v60;
  char *v61;
  NSObject *v62;
  os_log_type_t v63;
  uint64_t v64;
  const char *v65;
  char *v66;
  _BOOL4 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  char *v73;
  NSObject *v74;
  os_log_type_t v75;
  uint64_t v76;
  const char *v77;
  char *v78;
  NSObject *v79;
  os_log_type_t v80;
  _BOOL4 v81;
  uint64_t v82;
  uint64_t v83;
  NSObject *v84;
  os_log_type_t v85;
  char *v86;
  void *v87;
  char v88;
  void *v89;
  void *v90;
  char v91;
  void *v92;
  _QWORD *v93;
  id v94;
  char v95;
  void *v96;
  uint64_t v97;
  char v98;
  void *v99;
  unsigned __int8 *v100;
  unsigned __int8 *v101;
  void *singleton;
  char v103;
  void *v104;
  unsigned __int8 *v105;
  unsigned __int8 *v106;
  id v107;
  unsigned __int8 *v108;
  uint64_t *v109;
  unsigned __int8 *v110;
  unsigned __int8 *v111;
  id v112;
  unsigned __int8 *v113;
  unsigned __int8 *v114;
  unsigned __int8 *v115;
  unsigned __int8 *v116;
  uint64_t v117;
  int v118;
  NSObject *v119;
  uint64_t v120;
  int v121;
  int v122;
  _QWORD *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  NSObject *v128;
  os_log_type_t v129;
  uint64_t v130;
  const char *v131;
  char *v132;
  _BOOL4 v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  NSObject *v141;
  os_log_type_t v142;
  uint64_t v143;
  const char *v144;
  char *v145;
  _BOOL4 v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  int v151;
  int v152;
  const char *v153;
  NSObject *v154;
  uint32_t v155;
  uint64_t v156;
  int v157;
  int v158;
  int v159;
  uint64_t v160;
  char v161;
  void *v162;
  char v163;
  void *v164;
  char v165;
  void *v166;
  char v167;
  void *v168;
  uint64_t v169;
  uint64_t v170;
  const void *v171;
  void *v172;
  uint64_t v173;
  NSObject *v174;
  uint64_t v175;
  int v176;
  int v177;
  NSObject *v178;
  uint64_t v179;
  int v180;
  int v181;
  const char *v182;
  uint64_t v183;
  int v184;
  int v185;
  uint64_t v186;
  int v187;
  int v188;
  __int16 v189;
  uint64_t v190;
  int v191;
  int v192;
  uint64_t v193;
  int v194;
  int v195;
  uint64_t v196;
  int v197;
  int v198;
  uint64_t v199;
  int v200;
  int v201;
  uint64_t v202;
  uint64_t v203;
  void *v204;
  _BOOL8 result;
  uint64_t v206;
  unsigned __int16 *v207;
  void *v208;
  void *v209;
  void *v210;
  void *v211;
  void *v212;
  int v213;
  int v214;
  char v215;
  uint64_t v216;
  __int16 v217;
  NSObject *v218;
  uint64_t v219;
  int v220;
  int v221;
  const char *v222;
  unsigned int v223;
  uint64_t v224;
  char *v225;
  NSObject *v226;
  os_log_type_t v227;
  uint64_t v228;
  const char *v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  NSObject *v234;
  uint64_t v235;
  int v236;
  int v237;
  NSObject *v238;
  uint64_t v239;
  int v240;
  int v241;
  char *v242;
  _BOOL4 v243;
  uint64_t v244;
  const char *v245;
  NSObject *v246;
  os_log_type_t v247;
  uint32_t v248;
  char *v249;
  NSObject *v250;
  os_log_type_t v251;
  const char *v252;
  uint64_t v253;
  char *v254;
  NSObject *v255;
  os_log_type_t v256;
  const char *v257;
  uint64_t v258;
  NSObject *v259;
  os_log_type_t v260;
  uint32_t v261;
  char *backtrace_string;
  _BOOL4 v263;
  char *v264;
  _BOOL4 v265;
  const char *v266;
  void *v267;
  NSObject *v268;
  os_log_type_t v269;
  const char *v270;
  NSObject *v271;
  uint64_t v272;
  int v273;
  int v274;
  NSObject *v275;
  int v276;
  int v277;
  NSObject *v278;
  uint64_t v279;
  int v280;
  int v281;
  int v282;
  NSObject *v283;
  uint64_t v284;
  int v285;
  int v286;
  NSObject *v287;
  void *v288;
  char *v289;
  NSObject *v290;
  os_log_type_t v291;
  const char *v292;
  NSObject *v293;
  uint64_t v294;
  int v295;
  int v296;
  NSObject *v297;
  int v298;
  NSObject *v299;
  uint64_t v300;
  int v301;
  int v302;
  int v303;
  char *v304;
  _BOOL4 v305;
  const char *v306;
  char *v307;
  NSObject *v308;
  os_log_type_t v309;
  const char *v310;
  NSObject *v311;
  uint64_t v312;
  int v313;
  int v314;
  NSObject *v315;
  uint64_t v316;
  int v317;
  int v318;
  char *v319;
  NSObject *v320;
  os_log_type_t v321;
  const char *v322;
  NSObject *v323;
  int v324;
  int v325;
  char *v326;
  _BOOL4 v327;
  char *v328;
  _BOOL4 v329;
  char *v330;
  _BOOL4 v331;
  char *v332;
  _BOOL4 v333;
  _BOOL4 v334;
  _BOOL4 v335;
  char *v336;
  _BOOL4 v337;
  NSObject *v338;
  uint64_t v339;
  int v340;
  int v341;
  int v342;
  NSObject *v343;
  char *v344;
  NSObject *v345;
  os_log_type_t v346;
  const char *v347;
  char *v348;
  _BOOL4 v349;
  char *v350;
  NSObject *v351;
  os_log_type_t v352;
  const char *v353;
  char *v354;
  _BOOL4 v355;
  _BOOL4 v356;
  _BOOL4 v357;
  uint64_t v358;
  int v359;
  int v360;
  NSObject *v361;
  os_log_type_t v362;
  NSObject *v363;
  uint64_t v364;
  int v365;
  int v366;
  uint64_t v367;
  int v368;
  int v369;
  char *v370;
  _BOOL4 v371;
  _BOOL4 v372;
  void *v373;
  uint64_t v374;
  void *object;
  nw_protocol *v376;
  _QWORD v377[5];
  char v378;
  os_log_type_t type;
  uint8_t buf[80];
  _BYTE v381[10];
  __int16 v382;
  unsigned __int8 *v383;
  _BYTE aBlock[24];
  uint64_t v385;
  _BYTE v386[40];
  uint64_t v387;

  v387 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
    v249 = (char *)_os_log_send_and_compose_impl();
    aBlock[0] = 16;
    type = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v249, aBlock, &type))
      goto LABEL_613;
    if (aBlock[0] == 17)
    {
      v250 = __nwlog_obj();
      v251 = aBlock[0];
      if (!os_log_type_enabled(v250, (os_log_type_t)aBlock[0]))
        goto LABEL_613;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
      v252 = "%{public}s called with null protocol";
    }
    else if (type)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v250 = __nwlog_obj();
      v251 = aBlock[0];
      v263 = os_log_type_enabled(v250, (os_log_type_t)aBlock[0]);
      if (backtrace_string)
      {
        if (v263)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v250, v251, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_613:
        if (!v249)
          goto LABEL_615;
LABEL_614:
        free(v249);
        goto LABEL_615;
      }
      if (!v263)
        goto LABEL_613;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
      v252 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      v250 = __nwlog_obj();
      v251 = aBlock[0];
      if (!os_log_type_enabled(v250, (os_log_type_t)aBlock[0]))
        goto LABEL_613;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
      v252 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    goto LABEL_612;
  }
  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
    v249 = (char *)_os_log_send_and_compose_impl();
    aBlock[0] = 16;
    type = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v249, aBlock, &type))
      goto LABEL_613;
    if (aBlock[0] != 17)
    {
      if (type == OS_LOG_TYPE_DEFAULT)
      {
        v250 = __nwlog_obj();
        v251 = aBlock[0];
        if (!os_log_type_enabled(v250, (os_log_type_t)aBlock[0]))
          goto LABEL_613;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
        v252 = "%{public}s called with null handle, backtrace limit exceeded";
        goto LABEL_612;
      }
      v264 = (char *)__nw_create_backtrace_string();
      v250 = __nwlog_obj();
      v251 = aBlock[0];
      v265 = os_log_type_enabled(v250, (os_log_type_t)aBlock[0]);
      if (!v264)
      {
        if (!v265)
          goto LABEL_613;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
        v252 = "%{public}s called with null handle, no backtrace";
        goto LABEL_612;
      }
      if (v265)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v264;
        v266 = "%{public}s called with null handle, dumping backtrace:%{public}s";
LABEL_421:
        _os_log_impl(&dword_182FBE000, v250, v251, v266, buf, 0x16u);
      }
LABEL_422:
      free(v264);
      if (!v249)
        goto LABEL_615;
      goto LABEL_614;
    }
    v250 = __nwlog_obj();
    v251 = aBlock[0];
    if (!os_log_type_enabled(v250, (os_log_type_t)aBlock[0]))
      goto LABEL_613;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
    v252 = "%{public}s called with null handle";
LABEL_612:
    _os_log_impl(&dword_182FBE000, v250, v251, v252, buf, 0xCu);
    goto LABEL_613;
  }
  v4 = *((_DWORD *)handle + 6);
  v5 = (uint64_t *)a1->handle;
  if (v4 == 1)
    goto LABEL_10;
  if (v4 != 2)
  {
    if (v4 != 3)
    {
LABEL_615:
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http1_reset";
      v254 = (char *)_os_log_send_and_compose_impl();
      aBlock[0] = 16;
      type = OS_LOG_TYPE_DEFAULT;
      if (!__nwlog_fault(v254, aBlock, &type))
        goto LABEL_647;
      if (aBlock[0] == 17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v255 = gLogObj;
        v256 = aBlock[0];
        if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)aBlock[0]))
          goto LABEL_647;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_http1_reset";
        v257 = "%{public}s called with null http1";
        goto LABEL_646;
      }
      if (type == OS_LOG_TYPE_DEFAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v255 = gLogObj;
        v256 = aBlock[0];
        if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)aBlock[0]))
          goto LABEL_647;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_http1_reset";
        v257 = "%{public}s called with null http1, backtrace limit exceeded";
        goto LABEL_646;
      }
      v304 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v255 = gLogObj;
      v256 = aBlock[0];
      v356 = os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)aBlock[0]);
      if (!v304)
      {
        if (!v356)
          goto LABEL_647;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_http1_reset";
        v257 = "%{public}s called with null http1, no backtrace";
        goto LABEL_646;
      }
      if (!v356)
        goto LABEL_641;
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_protocol_http1_reset";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v304;
      v306 = "%{public}s called with null http1, dumping backtrace:%{public}s";
      goto LABEL_640;
    }
    v6 = *((_QWORD *)handle + 2);
    if (v6)
    {
      v5 = (uint64_t *)(v6 + 480);
      goto LABEL_10;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
    v249 = (char *)_os_log_send_and_compose_impl();
    aBlock[0] = 16;
    type = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v249, aBlock, &type))
      goto LABEL_613;
    if (aBlock[0] == 17)
    {
      v250 = __nwlog_obj();
      v251 = aBlock[0];
      if (!os_log_type_enabled(v250, (os_log_type_t)aBlock[0]))
        goto LABEL_613;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
      v252 = "%{public}s called with null handle->http1_connection";
      goto LABEL_612;
    }
    if (type == OS_LOG_TYPE_DEFAULT)
    {
      v250 = __nwlog_obj();
      v251 = aBlock[0];
      if (!os_log_type_enabled(v250, (os_log_type_t)aBlock[0]))
        goto LABEL_613;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
      v252 = "%{public}s called with null handle->http1_connection, backtrace limit exceeded";
      goto LABEL_612;
    }
    v264 = (char *)__nw_create_backtrace_string();
    v250 = __nwlog_obj();
    v251 = aBlock[0];
    v334 = os_log_type_enabled(v250, (os_log_type_t)aBlock[0]);
    if (!v264)
    {
      if (!v334)
        goto LABEL_613;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
      v252 = "%{public}s called with null handle->http1_connection, no backtrace";
      goto LABEL_612;
    }
    if (v334)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v264;
      v266 = "%{public}s called with null handle->http1_connection, dumping backtrace:%{public}s";
      goto LABEL_421;
    }
    goto LABEL_422;
  }
  v7 = *((_QWORD *)handle + 1);
  if (!v7)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
    v249 = (char *)_os_log_send_and_compose_impl();
    aBlock[0] = 16;
    type = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v249, aBlock, &type))
      goto LABEL_613;
    if (aBlock[0] == 17)
    {
      v250 = __nwlog_obj();
      v251 = aBlock[0];
      if (!os_log_type_enabled(v250, (os_log_type_t)aBlock[0]))
        goto LABEL_613;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
      v252 = "%{public}s called with null handle->http1_stream";
      goto LABEL_612;
    }
    if (type == OS_LOG_TYPE_DEFAULT)
    {
      v250 = __nwlog_obj();
      v251 = aBlock[0];
      if (!os_log_type_enabled(v250, (os_log_type_t)aBlock[0]))
        goto LABEL_613;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
      v252 = "%{public}s called with null handle->http1_stream, backtrace limit exceeded";
      goto LABEL_612;
    }
    v264 = (char *)__nw_create_backtrace_string();
    v250 = __nwlog_obj();
    v251 = aBlock[0];
    v335 = os_log_type_enabled(v250, (os_log_type_t)aBlock[0]);
    if (!v264)
    {
      if (!v335)
        goto LABEL_613;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
      v252 = "%{public}s called with null handle->http1_stream, no backtrace";
      goto LABEL_612;
    }
    if (v335)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v264;
      v266 = "%{public}s called with null handle->http1_stream, dumping backtrace:%{public}s";
      goto LABEL_421;
    }
    goto LABEL_422;
  }
  v5 = (uint64_t *)(v7 + 248);
LABEL_10:
  v8 = *v5;
  if (!*v5)
    goto LABEL_615;
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_http1_reset";
    v254 = (char *)_os_log_send_and_compose_impl();
    aBlock[0] = 16;
    type = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v254, aBlock, &type))
      goto LABEL_647;
    if (aBlock[0] == 17)
    {
      v255 = __nwlog_obj();
      v256 = aBlock[0];
      if (!os_log_type_enabled(v255, (os_log_type_t)aBlock[0]))
        goto LABEL_647;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http1_reset";
      v257 = "%{public}s called with null other_protocol";
LABEL_646:
      _os_log_impl(&dword_182FBE000, v255, v256, v257, buf, 0xCu);
      goto LABEL_647;
    }
    if (type == OS_LOG_TYPE_DEFAULT)
    {
      v255 = __nwlog_obj();
      v256 = aBlock[0];
      if (!os_log_type_enabled(v255, (os_log_type_t)aBlock[0]))
        goto LABEL_647;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http1_reset";
      v257 = "%{public}s called with null other_protocol, backtrace limit exceeded";
      goto LABEL_646;
    }
    v304 = (char *)__nw_create_backtrace_string();
    v255 = __nwlog_obj();
    v256 = aBlock[0];
    v305 = os_log_type_enabled(v255, (os_log_type_t)aBlock[0]);
    if (!v304)
    {
      if (!v305)
        goto LABEL_647;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http1_reset";
      v257 = "%{public}s called with null other_protocol, no backtrace";
      goto LABEL_646;
    }
    if (!v305)
      goto LABEL_641;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "nw_protocol_http1_reset";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v304;
    v306 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
LABEL_640:
    _os_log_impl(&dword_182FBE000, v255, v256, v306, buf, 0x16u);
    goto LABEL_641;
  }
  if (v4 != 2)
  {
    if (v4 != 3)
      goto LABEL_632;
    v9 = *((_QWORD *)handle + 2);
    if (v9)
    {
      v10 = (uint64_t *)(v9 + 488);
      goto LABEL_17;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http1_get_stream_for_protocol";
    v319 = (char *)_os_log_send_and_compose_impl();
    aBlock[0] = 16;
    type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v319, aBlock, &type))
    {
      if (aBlock[0] == 17)
      {
        v320 = __nwlog_obj();
        v321 = aBlock[0];
        if (!os_log_type_enabled(v320, (os_log_type_t)aBlock[0]))
          goto LABEL_630;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http1_get_stream_for_protocol";
        v322 = "%{public}s called with null handle->http1_connection";
        goto LABEL_629;
      }
      if (type == OS_LOG_TYPE_DEFAULT)
      {
        v320 = __nwlog_obj();
        v321 = aBlock[0];
        if (!os_log_type_enabled(v320, (os_log_type_t)aBlock[0]))
          goto LABEL_630;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http1_get_stream_for_protocol";
        v322 = "%{public}s called with null handle->http1_connection, backtrace limit exceeded";
        goto LABEL_629;
      }
      v336 = (char *)__nw_create_backtrace_string();
      v320 = __nwlog_obj();
      v321 = aBlock[0];
      v337 = os_log_type_enabled(v320, (os_log_type_t)aBlock[0]);
      if (v336)
      {
        if (v337)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_http1_get_stream_for_protocol";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v336;
          _os_log_impl(&dword_182FBE000, v320, v321, "%{public}s called with null handle->http1_connection, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v336);
        goto LABEL_630;
      }
      if (v337)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http1_get_stream_for_protocol";
        v322 = "%{public}s called with null handle->http1_connection, no backtrace";
LABEL_629:
        _os_log_impl(&dword_182FBE000, v320, v321, v322, buf, 0xCu);
      }
    }
LABEL_630:
    if (v319)
      free(v319);
    goto LABEL_632;
  }
  v10 = (uint64_t *)(handle + 8);
LABEL_17:
  v11 = *v10;
  if (*v10)
  {
    if ((*(_BYTE *)(v11 + 158) & 1) == 0)
    {
      if (gLogDatapath)
      {
        v271 = __nwlog_obj();
        if (os_log_type_enabled(v271, OS_LOG_TYPE_DEBUG))
        {
          v272 = *(_QWORD *)(v11 + 256);
          v273 = *(_DWORD *)(*(_QWORD *)(v11 + 248) + 372);
          if (v272)
            LODWORD(v272) = *(_DWORD *)(v272 + 860);
          v274 = *(_DWORD *)(v11 + 424);
          *(_DWORD *)buf = 136448002;
          *(_QWORD *)&buf[4] = "nw_protocol_http1_reset";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v11 + 74;
          *(_WORD *)&buf[22] = 2080;
          *(_QWORD *)&buf[24] = " ";
          *(_WORD *)&buf[32] = 1024;
          *(_DWORD *)&buf[34] = v273;
          *(_WORD *)&buf[38] = 1024;
          *(_DWORD *)&buf[40] = v272;
          *(_WORD *)&buf[44] = 1024;
          *(_DWORD *)&buf[46] = v274;
          *(_WORD *)&buf[50] = 2048;
          *(_QWORD *)&buf[52] = v11;
          *(_WORD *)&buf[60] = 2048;
          *(_QWORD *)&buf[62] = a2;
          _os_log_impl(&dword_182FBE000, v271, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> called for stream %p with replacement protocol: %p", buf, 0x46u);
        }
      }
    }
    a2->output_handler_context = 0;
    v376 = a2;
    nw_protocol_set_output_handler((uint64_t)a2, 0);
    nw_protocol_set_input_handler(v11, 0);
    v12 = *(void **)(v11 + 336);
    if (v12)
    {
      v13 = os_retain(v12);
      v14 = *(void **)(v11 + 320);
      if (v14)
      {
LABEL_22:
        v15 = os_retain(v14);
        goto LABEL_25;
      }
    }
    else
    {
      v13 = 0;
      v14 = *(void **)(v11 + 320);
      if (v14)
        goto LABEL_22;
    }
    v15 = 0;
LABEL_25:
    object = v15;
    if ((*(_WORD *)(v11 + 428) & 0x1000) == 0)
      goto LABEL_68;
    if ((*(_BYTE *)(v8 + 158) & 1) == 0)
    {
      if (gLogDatapath)
      {
        v323 = __nwlog_obj();
        if (os_log_type_enabled(v323, OS_LOG_TYPE_DEBUG))
        {
          v324 = *(_DWORD *)(v8 + 372);
          v325 = *(_DWORD *)(v11 + 424);
          *(_DWORD *)buf = 136447490;
          *(_QWORD *)&buf[4] = "nw_http1_remove_pending_stream";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v8 + 74;
          *(_WORD *)&buf[22] = 2080;
          *(_QWORD *)&buf[24] = " ";
          *(_WORD *)&buf[32] = 1024;
          *(_DWORD *)&buf[34] = v324;
          *(_WORD *)&buf[38] = 1024;
          *(_DWORD *)&buf[40] = v325;
          *(_WORD *)&buf[44] = 2048;
          *(_QWORD *)&buf[46] = v11;
          _os_log_impl(&dword_182FBE000, v323, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> called for stream %u (%p)", buf, 0x36u);
        }
      }
    }
    if ((*(_WORD *)(v11 + 428) & 0x1000) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_http1_remove_pending_stream";
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v11;
      v16 = (char *)_os_log_send_and_compose_impl();
      aBlock[0] = 16;
      type = OS_LOG_TYPE_DEFAULT;
      if (!__nwlog_fault(v16, aBlock, &type))
        goto LABEL_56;
      if (aBlock[0] == 17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v17 = gLogObj;
        v18 = aBlock[0];
        if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)aBlock[0]))
          goto LABEL_56;
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http1_remove_pending_stream";
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v11;
        v19 = "%{public}s stream %p not in pending list, cannot remove";
      }
      else if (type)
      {
        v22 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v17 = gLogObj;
        v18 = aBlock[0];
        v23 = os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)aBlock[0]);
        if (v22)
        {
          if (v23)
          {
            *(_DWORD *)buf = 136446722;
            *(_QWORD *)&buf[4] = "nw_http1_remove_pending_stream";
            *(_WORD *)&buf[12] = 2048;
            *(_QWORD *)&buf[14] = v11;
            *(_WORD *)&buf[22] = 2082;
            *(_QWORD *)&buf[24] = v22;
            _os_log_impl(&dword_182FBE000, v17, v18, "%{public}s stream %p not in pending list, cannot remove, dumping backtrace:%{public}s", buf, 0x20u);
          }
          free(v22);
          goto LABEL_56;
        }
        if (!v23)
        {
LABEL_56:
          if (v16)
            free(v16);
          goto LABEL_58;
        }
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http1_remove_pending_stream";
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v11;
        v19 = "%{public}s stream %p not in pending list, cannot remove, no backtrace";
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v17 = gLogObj;
        v18 = aBlock[0];
        if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)aBlock[0]))
          goto LABEL_56;
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http1_remove_pending_stream";
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v11;
        v19 = "%{public}s stream %p not in pending list, cannot remove, backtrace limit exceeded";
      }
      _os_log_impl(&dword_182FBE000, v17, v18, v19, buf, 0x16u);
      goto LABEL_56;
    }
    v20 = *(_QWORD *)(v11 + 296);
    v21 = *(_QWORD **)(v11 + 304);
    if (v20)
    {
      *(_QWORD *)(v20 + 304) = v21;
      v21 = *(_QWORD **)(v11 + 304);
    }
    else
    {
      *(_QWORD *)(v8 + 256) = v21;
    }
    *v21 = v20;
    *(_QWORD *)(v11 + 296) = 0;
    *(_QWORD *)(v11 + 304) = 0;
    v24 = *(_DWORD *)(v8 + 348);
    *(_DWORD *)(v8 + 348) = v24 - 1;
    if (v24)
    {
LABEL_66:
      *(_WORD *)(v11 + 428) &= ~0x1000u;
      if ((*(_BYTE *)(v11 + 158) & 1) != 0
        || !gLogDatapath
        || (v338 = __nwlog_obj(), !os_log_type_enabled(v338, OS_LOG_TYPE_DEBUG)))
      {
LABEL_68:
        v374 = *(_QWORD *)(v11 + 256);
        if (!v374)
          goto LABEL_98;
        if (*(_QWORD *)(v11 + 248))
        {
          if (*(_QWORD *)(v374 + 488) == v11)
          {
            if ((*(_BYTE *)(v11 + 158) & 1) == 0)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v45 = gLogObj;
              if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
              {
                v46 = *(_QWORD *)(v11 + 256);
                v47 = *(_DWORD *)(*(_QWORD *)(v11 + 248) + 372);
                if (v46)
                  LODWORD(v46) = *(_DWORD *)(v46 + 860);
                v48 = *(_DWORD *)(v11 + 424);
                *(_DWORD *)buf = 136448002;
                *(_QWORD *)&buf[4] = "nw_http1_stream_disassociate_from_connection";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = v11 + 74;
                *(_WORD *)&buf[22] = 2080;
                *(_QWORD *)&buf[24] = " ";
                *(_WORD *)&buf[32] = 1024;
                *(_DWORD *)&buf[34] = v47;
                *(_WORD *)&buf[38] = 1024;
                *(_DWORD *)&buf[40] = v46;
                *(_WORD *)&buf[44] = 1024;
                *(_DWORD *)&buf[46] = v48;
                *(_WORD *)&buf[50] = 2048;
                *(_QWORD *)&buf[52] = v11;
                *(_WORD *)&buf[60] = 2048;
                *(_QWORD *)&buf[62] = v374;
                _os_log_impl(&dword_182FBE000, v45, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s<i%u:c%u:s%u> stream (%p) finished with connection %p", buf, 0x46u);
              }
            }
            if (gLogDatapath)
            {
              v343 = __nwlog_obj();
              if (os_log_type_enabled(v343, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_protocol_finalize_temp_frame_array";
                _os_log_impl(&dword_182FBE000, v343, OS_LOG_TYPE_DEBUG, "%{public}s called", buf, 0xCu);
              }
            }
            *(_QWORD *)buf = MEMORY[0x1E0C809B0];
            *(_QWORD *)&buf[8] = 0x40000000;
            *(_QWORD *)&buf[16] = ___ZL37nw_protocol_finalize_temp_frame_arrayP16nw_frame_array_sb_block_invoke_39647;
            *(_QWORD *)&buf[24] = &__block_descriptor_tmp_55_39648;
            *(_QWORD *)&buf[32] = v374 + 632;
            buf[40] = 0;
            v49 = *(_QWORD *)(v374 + 632);
            do
            {
              if (!v49)
                break;
              v50 = *(_QWORD *)(v49 + 32);
              v51 = (*(uint64_t (**)(uint8_t *))&buf[16])(buf);
              v49 = v50;
            }
            while ((v51 & 1) != 0);
            *(_QWORD *)(v11 + 256) = 0;
            *(_QWORD *)(v374 + 488) = 0;
            nw_protocol_set_output_handler(v11, 0);
            nw_protocol_set_input_handler(v374, 0);
            goto LABEL_97;
          }
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v39 = *(_QWORD *)(v374 + 488);
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_http1_stream_disassociate_from_connection";
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v374;
          *(_WORD *)&buf[22] = 2048;
          *(_QWORD *)&buf[24] = v11;
          *(_WORD *)&buf[32] = 2048;
          *(_QWORD *)&buf[34] = v39;
          v40 = (char *)_os_log_send_and_compose_impl();
          aBlock[0] = 16;
          type = OS_LOG_TYPE_DEFAULT;
          if (__nwlog_fault(v40, aBlock, &type))
          {
            if (aBlock[0] == 17)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v41 = gLogObj;
              v42 = aBlock[0];
              if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)aBlock[0]))
                goto LABEL_95;
              v43 = *(_QWORD *)(v374 + 488);
              *(_DWORD *)buf = 136446978;
              *(_QWORD *)&buf[4] = "nw_http1_stream_disassociate_from_connection";
              *(_WORD *)&buf[12] = 2048;
              *(_QWORD *)&buf[14] = v374;
              *(_WORD *)&buf[22] = 2048;
              *(_QWORD *)&buf[24] = v11;
              *(_WORD *)&buf[32] = 2048;
              *(_QWORD *)&buf[34] = v43;
              v44 = "%{public}s Connection %p does not already have stream %p, has %p";
              goto LABEL_94;
            }
            if (type == OS_LOG_TYPE_DEFAULT)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v41 = gLogObj;
              v42 = aBlock[0];
              if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)aBlock[0]))
                goto LABEL_95;
              v55 = *(_QWORD *)(v374 + 488);
              *(_DWORD *)buf = 136446978;
              *(_QWORD *)&buf[4] = "nw_http1_stream_disassociate_from_connection";
              *(_WORD *)&buf[12] = 2048;
              *(_QWORD *)&buf[14] = v374;
              *(_WORD *)&buf[22] = 2048;
              *(_QWORD *)&buf[24] = v11;
              *(_WORD *)&buf[32] = 2048;
              *(_QWORD *)&buf[34] = v55;
              v44 = "%{public}s Connection %p does not already have stream %p, has %p, backtrace limit exceeded";
              goto LABEL_94;
            }
            v52 = (char *)__nw_create_backtrace_string();
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v41 = gLogObj;
            v42 = aBlock[0];
            v53 = os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)aBlock[0]);
            if (v52)
            {
              if (v53)
              {
                v54 = *(_QWORD *)(v374 + 488);
                *(_DWORD *)buf = 136447234;
                *(_QWORD *)&buf[4] = "nw_http1_stream_disassociate_from_connection";
                *(_WORD *)&buf[12] = 2048;
                *(_QWORD *)&buf[14] = v374;
                *(_WORD *)&buf[22] = 2048;
                *(_QWORD *)&buf[24] = v11;
                *(_WORD *)&buf[32] = 2048;
                *(_QWORD *)&buf[34] = v54;
                *(_WORD *)&buf[42] = 2082;
                *(_QWORD *)&buf[44] = v52;
                _os_log_impl(&dword_182FBE000, v41, v42, "%{public}s Connection %p does not already have stream %p, has %p, dumping backtrace:%{public}s", buf, 0x34u);
              }
              free(v52);
              goto LABEL_95;
            }
            if (v53)
            {
              v56 = *(_QWORD *)(v374 + 488);
              *(_DWORD *)buf = 136446978;
              *(_QWORD *)&buf[4] = "nw_http1_stream_disassociate_from_connection";
              *(_WORD *)&buf[12] = 2048;
              *(_QWORD *)&buf[14] = v374;
              *(_WORD *)&buf[22] = 2048;
              *(_QWORD *)&buf[24] = v11;
              *(_WORD *)&buf[32] = 2048;
              *(_QWORD *)&buf[34] = v56;
              v44 = "%{public}s Connection %p does not already have stream %p, has %p, no backtrace";
LABEL_94:
              _os_log_impl(&dword_182FBE000, v41, v42, v44, buf, 0x2Au);
            }
          }
LABEL_95:
          if (v40)
            free(v40);
LABEL_97:
          v15 = object;
          goto LABEL_98;
        }
        __nwlog_obj();
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http1_stream_disassociate_from_connection";
        v307 = (char *)_os_log_send_and_compose_impl();
        aBlock[0] = 16;
        type = OS_LOG_TYPE_DEFAULT;
        if (__nwlog_fault(v307, aBlock, &type))
        {
          if (aBlock[0] == 17)
          {
            v308 = __nwlog_obj();
            v309 = aBlock[0];
            if (!os_log_type_enabled(v308, (os_log_type_t)aBlock[0]))
              goto LABEL_606;
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_http1_stream_disassociate_from_connection";
            v310 = "%{public}s called with null http1_stream->protocol_http1";
            goto LABEL_605;
          }
          if (type == OS_LOG_TYPE_DEFAULT)
          {
            v308 = __nwlog_obj();
            v309 = aBlock[0];
            if (!os_log_type_enabled(v308, (os_log_type_t)aBlock[0]))
              goto LABEL_606;
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_http1_stream_disassociate_from_connection";
            v310 = "%{public}s called with null http1_stream->protocol_http1, backtrace limit exceeded";
            goto LABEL_605;
          }
          v332 = (char *)__nw_create_backtrace_string();
          v308 = __nwlog_obj();
          v309 = aBlock[0];
          v333 = os_log_type_enabled(v308, (os_log_type_t)aBlock[0]);
          if (v332)
          {
            if (v333)
            {
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "nw_http1_stream_disassociate_from_connection";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v332;
              _os_log_impl(&dword_182FBE000, v308, v309, "%{public}s called with null http1_stream->protocol_http1, dumping backtrace:%{public}s", buf, 0x16u);
            }
            free(v332);
            goto LABEL_606;
          }
          if (v333)
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_http1_stream_disassociate_from_connection";
            v310 = "%{public}s called with null http1_stream->protocol_http1, no backtrace";
LABEL_605:
            _os_log_impl(&dword_182FBE000, v308, v309, v310, buf, 0xCu);
          }
        }
LABEL_606:
        v15 = object;
        if (v307)
          free(v307);
LABEL_98:
        if ((*(_BYTE *)(v8 + 158) & 1) == 0)
        {
          if (gLogDatapath)
          {
            v275 = __nwlog_obj();
            if (os_log_type_enabled(v275, OS_LOG_TYPE_DEBUG))
            {
              v276 = *(_DWORD *)(v8 + 372);
              v277 = *(_DWORD *)(v11 + 424);
              *(_DWORD *)buf = 136447490;
              *(_QWORD *)&buf[4] = "nw_http1_remove_stream";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v8 + 74;
              *(_WORD *)&buf[22] = 2080;
              *(_QWORD *)&buf[24] = " ";
              *(_WORD *)&buf[32] = 1024;
              *(_DWORD *)&buf[34] = v276;
              *(_WORD *)&buf[38] = 1024;
              *(_DWORD *)&buf[40] = v277;
              *(_WORD *)&buf[44] = 2048;
              *(_QWORD *)&buf[46] = v11;
              _os_log_impl(&dword_182FBE000, v275, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> called for stream %u (%p)", buf, 0x36u);
            }
          }
        }
        v57 = *(_QWORD *)(v11 + 280);
        v58 = *(_QWORD **)(v11 + 288);
        if (v57)
        {
          *(_QWORD *)(v57 + 288) = v58;
          v58 = *(_QWORD **)(v11 + 288);
        }
        else
        {
          *(_QWORD *)(v8 + 240) = v58;
        }
        *v58 = v57;
        *(_QWORD *)(v11 + 280) = 0;
        *(_QWORD *)(v11 + 288) = 0;
        v59 = *(_DWORD *)(v8 + 344);
        *(_DWORD *)(v8 + 344) = v59 - 1;
        if (v59)
        {
          if ((*(_WORD *)(v11 + 428) & 8) == 0)
            goto LABEL_140;
          goto LABEL_123;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v60 = *(unsigned int *)(v8 + 344);
        *(_DWORD *)buf = 136446978;
        *(_QWORD *)&buf[4] = "nw_http1_remove_stream";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = "http1->streams_count";
        *(_WORD *)&buf[22] = 2048;
        *(_QWORD *)&buf[24] = 1;
        *(_WORD *)&buf[32] = 2048;
        *(_QWORD *)&buf[34] = v60;
        v61 = (char *)_os_log_send_and_compose_impl();
        aBlock[0] = 16;
        type = OS_LOG_TYPE_DEFAULT;
        if (__nwlog_fault(v61, aBlock, &type))
        {
          if (aBlock[0] == 17)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v62 = gLogObj;
            v63 = aBlock[0];
            if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)aBlock[0]))
              goto LABEL_120;
            v64 = *(unsigned int *)(v8 + 344);
            *(_DWORD *)buf = 136446978;
            *(_QWORD *)&buf[4] = "nw_http1_remove_stream";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = "http1->streams_count";
            *(_WORD *)&buf[22] = 2048;
            *(_QWORD *)&buf[24] = 1;
            *(_WORD *)&buf[32] = 2048;
            *(_QWORD *)&buf[34] = v64;
            v65 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu";
LABEL_119:
            _os_log_impl(&dword_182FBE000, v62, v63, v65, buf, 0x2Au);
            goto LABEL_120;
          }
          if (type == OS_LOG_TYPE_DEFAULT)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v62 = gLogObj;
            v63 = aBlock[0];
            if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)aBlock[0]))
              goto LABEL_120;
            v69 = *(unsigned int *)(v8 + 344);
            *(_DWORD *)buf = 136446978;
            *(_QWORD *)&buf[4] = "nw_http1_remove_stream";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = "http1->streams_count";
            *(_WORD *)&buf[22] = 2048;
            *(_QWORD *)&buf[24] = 1;
            *(_WORD *)&buf[32] = 2048;
            *(_QWORD *)&buf[34] = v69;
            v65 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, backtrace limit exceeded";
            goto LABEL_119;
          }
          v66 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v62 = gLogObj;
          v63 = aBlock[0];
          v67 = os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)aBlock[0]);
          if (!v66)
          {
            if (!v67)
              goto LABEL_120;
            v70 = *(unsigned int *)(v8 + 344);
            *(_DWORD *)buf = 136446978;
            *(_QWORD *)&buf[4] = "nw_http1_remove_stream";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = "http1->streams_count";
            *(_WORD *)&buf[22] = 2048;
            *(_QWORD *)&buf[24] = 1;
            *(_WORD *)&buf[32] = 2048;
            *(_QWORD *)&buf[34] = v70;
            v65 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, no backtrace";
            goto LABEL_119;
          }
          if (v67)
          {
            v68 = *(unsigned int *)(v8 + 344);
            *(_DWORD *)buf = 136447234;
            *(_QWORD *)&buf[4] = "nw_http1_remove_stream";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = "http1->streams_count";
            *(_WORD *)&buf[22] = 2048;
            *(_QWORD *)&buf[24] = 1;
            *(_WORD *)&buf[32] = 2048;
            *(_QWORD *)&buf[34] = v68;
            *(_WORD *)&buf[42] = 2082;
            *(_QWORD *)&buf[44] = v66;
            _os_log_impl(&dword_182FBE000, v62, v63, "%{public}s Underflow: %{public}s, decrement %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
          }
          free(v66);
        }
LABEL_120:
        if (v61)
          free(v61);
        *(_DWORD *)(v8 + 344) = 0;
        v15 = object;
        if ((*(_WORD *)(v11 + 428) & 8) == 0)
        {
LABEL_140:
          if ((*(_BYTE *)(v11 + 158) & 1) == 0)
          {
            if (gLogDatapath)
            {
              v278 = __nwlog_obj();
              if (os_log_type_enabled(v278, OS_LOG_TYPE_DEBUG))
              {
                v279 = *(_QWORD *)(v11 + 256);
                v280 = *(_DWORD *)(*(_QWORD *)(v11 + 248) + 372);
                if (v279)
                  LODWORD(v279) = *(_DWORD *)(v279 + 860);
                v281 = *(_DWORD *)(v11 + 424);
                v282 = *(_DWORD *)(v8 + 344);
                *(_DWORD *)buf = 136448258;
                *(_QWORD *)&buf[4] = "nw_http1_remove_stream";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = v11 + 74;
                *(_WORD *)&buf[22] = 2080;
                *(_QWORD *)&buf[24] = " ";
                *(_WORD *)&buf[32] = 1024;
                *(_DWORD *)&buf[34] = v280;
                *(_WORD *)&buf[38] = 1024;
                *(_DWORD *)&buf[40] = v279;
                *(_WORD *)&buf[44] = 1024;
                *(_DWORD *)&buf[46] = v281;
                *(_WORD *)&buf[50] = 1024;
                *(_DWORD *)&buf[52] = v281;
                *(_WORD *)&buf[56] = 2048;
                *(_QWORD *)&buf[58] = v11;
                *(_WORD *)&buf[66] = 1024;
                *(_DWORD *)&buf[68] = v282;
                _os_log_impl(&dword_182FBE000, v278, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> removed stream %u (%p), now have %u streams", buf, 0x48u);
              }
            }
          }
          if (v13)
          {
            if (v15)
            {
              v86 = (char *)malloc_type_calloc(1uLL, 0x1B0uLL, 0xEAFB8F1AuLL);
              if (!v86)
              {
                v287 = __nwlog_obj();
                os_log_type_enabled(v287, OS_LOG_TYPE_ERROR);
                *(_DWORD *)buf = 136446722;
                *(_QWORD *)&buf[4] = "strict_calloc";
                *(_WORD *)&buf[12] = 2048;
                *(_QWORD *)&buf[14] = 1;
                *(_WORD *)&buf[22] = 2048;
                *(_QWORD *)&buf[24] = 432;
                v288 = (void *)_os_log_send_and_compose_impl();
                result = __nwlog_abort((uint64_t)v288);
                if (result)
                {
                  __break(1u);
                  return result;
                }
                free(v288);
              }
              *((_OWORD *)v86 + 25) = 0u;
              *((_OWORD *)v86 + 26) = 0u;
              *((_OWORD *)v86 + 23) = 0u;
              *((_OWORD *)v86 + 24) = 0u;
              *((_OWORD *)v86 + 21) = 0u;
              *((_OWORD *)v86 + 22) = 0u;
              *((_OWORD *)v86 + 19) = 0u;
              *((_OWORD *)v86 + 20) = 0u;
              *((_OWORD *)v86 + 17) = 0u;
              *((_OWORD *)v86 + 18) = 0u;
              *((_OWORD *)v86 + 15) = 0u;
              *((_OWORD *)v86 + 16) = 0u;
              *((_OWORD *)v86 + 13) = 0u;
              *((_OWORD *)v86 + 14) = 0u;
              *((_OWORD *)v86 + 11) = 0u;
              *((_OWORD *)v86 + 12) = 0u;
              *((_OWORD *)v86 + 9) = 0u;
              *((_OWORD *)v86 + 10) = 0u;
              *((_OWORD *)v86 + 7) = 0u;
              *((_OWORD *)v86 + 8) = 0u;
              *((_OWORD *)v86 + 5) = 0u;
              *((_OWORD *)v86 + 6) = 0u;
              *((_OWORD *)v86 + 3) = 0u;
              *((_OWORD *)v86 + 4) = 0u;
              *((_OWORD *)v86 + 1) = 0u;
              *((_OWORD *)v86 + 2) = 0u;
              *(_OWORD *)v86 = 0u;
              *((_QWORD *)v86 + 2) = *(_QWORD *)(v8 + 16);
              if (nw_protocol_http1_get_callbacks(void)::onceToken[0] != -1)
                dispatch_once(nw_protocol_http1_get_callbacks(void)::onceToken, &__block_literal_global_17_39614);
              *((_QWORD *)v86 + 3) = &nw_protocol_http1_get_callbacks(void)::http1_protocol_callbacks;
              *((_DWORD *)v86 + 60) = 2;
              *((_QWORD *)v86 + 28) = v86;
              *((_QWORD *)v86 + 5) = v86 + 216;
              *((_QWORD *)v86 + 31) = v8;
              nw_protocol_set_input_handler((uint64_t)v86, (uint64_t)v376);
              nw_protocol_set_output_handler((uint64_t)v86, *(_QWORD *)(v8 + 32));
              *(_QWORD *)buf = 0;
              *(_QWORD *)&buf[8] = buf;
              *(_QWORD *)&buf[16] = 0x2000000000;
              *(_QWORD *)&buf[24] = v86;
              *(_QWORD *)aBlock = MEMORY[0x1E0C809B0];
              *(_QWORD *)&aBlock[8] = 0x40000000;
              *(_QWORD *)&aBlock[16] = ___ZL22nw_http1_stream_createP11nw_protocolP17nw_protocol_http1P11nw_endpointP13nw_parameters_block_invoke;
              v385 = (uint64_t)&unk_1E14A1840;
              *(_QWORD *)v386 = buf;
              *((_QWORD *)v86 + 39) = _Block_copy(aBlock);
              _Block_object_dispose(buf, 8);
              v87 = os_retain(v13);
              v88 = v86[344];
              if ((v88 & 1) != 0)
              {
                v89 = (void *)*((_QWORD *)v86 + 42);
                if (v89)
                {
                  os_release(v89);
                  v88 = v86[344];
                }
              }
              *((_QWORD *)v86 + 42) = v87;
              v86[344] = v88 | 1;
              v90 = os_retain(v15);
              v91 = v86[328];
              if ((v91 & 1) != 0)
              {
                v92 = (void *)*((_QWORD *)v86 + 40);
                if (v92)
                {
                  os_release(v92);
                  v91 = v86[328];
                }
              }
              *((_QWORD *)v86 + 40) = v90;
              v86[328] = v91 | 1;
              if ((v86[158] & 1) == 0)
              {
                if (gLogDatapath)
                {
                  v293 = __nwlog_obj();
                  if (os_log_type_enabled(v293, OS_LOG_TYPE_DEBUG))
                  {
                    v294 = *((_QWORD *)v86 + 32);
                    v295 = *(_DWORD *)(*((_QWORD *)v86 + 31) + 372);
                    if (v294)
                      LODWORD(v294) = *(_DWORD *)(v294 + 860);
                    v296 = *((_DWORD *)v86 + 106);
                    *(_DWORD *)buf = 136447746;
                    *(_QWORD *)&buf[4] = "nw_http1_stream_create";
                    *(_WORD *)&buf[12] = 2082;
                    *(_QWORD *)&buf[14] = v86 + 74;
                    *(_WORD *)&buf[22] = 2080;
                    *(_QWORD *)&buf[24] = " ";
                    *(_WORD *)&buf[32] = 1024;
                    *(_DWORD *)&buf[34] = v295;
                    *(_WORD *)&buf[38] = 1024;
                    *(_DWORD *)&buf[40] = v294;
                    *(_WORD *)&buf[44] = 1024;
                    *(_DWORD *)&buf[46] = v296;
                    *(_WORD *)&buf[50] = 2048;
                    *(_QWORD *)&buf[52] = v86;
                    _os_log_impl(&dword_182FBE000, v293, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> created %p", buf, 0x3Cu);
                  }
                }
              }
              v376->output_handler_context = v86;
              v93 = v15;
              v94 = *(id *)(v93[13] + 136);

              v95 = v86[272];
              if ((v95 & 1) != 0)
              {
                v96 = (void *)*((_QWORD *)v86 + 33);
                if (v96)
                {
                  os_release(v96);
                  v95 = v86[272];
                }
              }
              *((_QWORD *)v86 + 33) = v94;
              v86[272] = v95 | 1;
              v97 = _nw_http_parsed_fields_create();
              v98 = v86[408];
              if ((v98 & 1) != 0)
              {
                v99 = (void *)*((_QWORD *)v86 + 50);
                if (v99)
                {
                  os_release(v99);
                  v98 = v86[408];
                }
              }
              *((_QWORD *)v86 + 50) = v97;
              v86[408] = v98 | 1;
              v86[208] = *(_BYTE *)(v8 + 376) & 1;
              v100 = nw_parameters_copy_protocol_options_legacy(v93, (nw_protocol *)v8);
              v101 = v100;
              if (!v100 || (singleton = nw_http_messaging_options_copy_transaction_metadata(v100)) == 0)
              {
                if (nw_protocol_copy_http_transaction_definition_onceToken != -1)
                  dispatch_once(&nw_protocol_copy_http_transaction_definition_onceToken, &__block_literal_global_59_74256);
                singleton = nw_protocol_metadata_create_singleton((void *)nw_protocol_copy_http_transaction_definition_definition);
              }
              v103 = v86[360];
              if ((v103 & 1) != 0)
              {
                v104 = (void *)*((_QWORD *)v86 + 44);
                if (v104)
                {
                  os_release(v104);
                  v103 = v86[360];
                }
              }
              *((_QWORD *)v86 + 44) = singleton;
              v86[360] = v103 | 1;
              if (v101)
                os_release(v101);
              v105 = nw_parameters_copy_protocol_options_legacy(v93, (nw_protocol *)v11);
              if (v105)
              {
                v106 = v105;
                if ((v86[158] & 1) == 0)
                {
                  if (gLogDatapath)
                  {
                    v311 = __nwlog_obj();
                    if (os_log_type_enabled(v311, OS_LOG_TYPE_DEBUG))
                    {
                      v312 = *((_QWORD *)v86 + 32);
                      v313 = *(_DWORD *)(*((_QWORD *)v86 + 31) + 372);
                      if (v312)
                        LODWORD(v312) = *(_DWORD *)(v312 + 860);
                      v314 = *((_DWORD *)v86 + 106);
                      *(_DWORD *)buf = 136448770;
                      *(_QWORD *)&buf[4] = "nw_http1_stream_replace_protocol_instance";
                      *(_WORD *)&buf[12] = 2082;
                      *(_QWORD *)&buf[14] = v86 + 74;
                      *(_WORD *)&buf[22] = 2080;
                      *(_QWORD *)&buf[24] = " ";
                      *(_WORD *)&buf[32] = 1024;
                      *(_DWORD *)&buf[34] = v313;
                      *(_WORD *)&buf[38] = 1024;
                      *(_DWORD *)&buf[40] = v312;
                      *(_WORD *)&buf[44] = 1024;
                      *(_DWORD *)&buf[46] = v314;
                      *(_WORD *)&buf[50] = 2048;
                      *(_QWORD *)&buf[52] = v86;
                      *(_WORD *)&buf[60] = 2048;
                      *(_QWORD *)&buf[62] = v8;
                      *(_WORD *)&buf[70] = 2048;
                      *(_QWORD *)&buf[72] = v11;
                      *(_WORD *)v381 = 2048;
                      *(_QWORD *)&v381[2] = v93;
                      v382 = 2048;
                      v383 = v106;
                      _os_log_impl(&dword_182FBE000, v311, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> http1_stream protocol %p, set protocol instance to %p instead of %p in parameters %p options %p", buf, 0x64u);
                    }
                  }
                }
                if (nw_protocol_copy_http1_definition_onceToken != -1)
                  dispatch_once(&nw_protocol_copy_http1_definition_onceToken, &__block_literal_global_72242);
                v107 = (id)nw_protocol_copy_http1_definition_http1_definition;
                v108 = v106;
                *((_QWORD *)v108 + 2) = v8;

                if (v107)
                  os_release(v107);
                os_release(v108);
              }
              nw_protocol_set_input_handler((uint64_t)v86, (uint64_t)v376);
              *(_OWORD *)v86 = *(_OWORD *)v376->flow_id;
              nw_protocol_set_output_handler((uint64_t)v376, (uint64_t)v86);
              v109 = (uint64_t *)*((_QWORD *)v86 + 40);
              if (v109)
              {
                v110 = nw_parameters_copy_protocol_options_legacy(*((void **)v86 + 40), (nw_protocol *)v8);
                if (v110)
                {
                  v111 = v110;
                  if ((v86[158] & 1) == 0)
                  {
                    if (gLogDatapath)
                    {
                      v315 = __nwlog_obj();
                      if (os_log_type_enabled(v315, OS_LOG_TYPE_DEBUG))
                      {
                        v316 = *((_QWORD *)v86 + 32);
                        v317 = *(_DWORD *)(*((_QWORD *)v86 + 31) + 372);
                        if (v316)
                          LODWORD(v316) = *(_DWORD *)(v316 + 860);
                        v318 = *((_DWORD *)v86 + 106);
                        *(_DWORD *)buf = 136448770;
                        *(_QWORD *)&buf[4] = "nw_http1_stream_replace_protocol_instance";
                        *(_WORD *)&buf[12] = 2082;
                        *(_QWORD *)&buf[14] = v86 + 74;
                        *(_WORD *)&buf[22] = 2080;
                        *(_QWORD *)&buf[24] = " ";
                        *(_WORD *)&buf[32] = 1024;
                        *(_DWORD *)&buf[34] = v317;
                        *(_WORD *)&buf[38] = 1024;
                        *(_DWORD *)&buf[40] = v316;
                        *(_WORD *)&buf[44] = 1024;
                        *(_DWORD *)&buf[46] = v318;
                        *(_WORD *)&buf[50] = 2048;
                        *(_QWORD *)&buf[52] = v86;
                        *(_WORD *)&buf[60] = 2048;
                        *(_QWORD *)&buf[62] = v86;
                        *(_WORD *)&buf[70] = 2048;
                        *(_QWORD *)&buf[72] = v8;
                        *(_WORD *)v381 = 2048;
                        *(_QWORD *)&v381[2] = v109;
                        v382 = 2048;
                        v383 = v111;
                        _os_log_impl(&dword_182FBE000, v315, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> http1_stream protocol %p, set protocol instance to %p instead of %p in parameters %p options %p", buf, 0x64u);
                      }
                    }
                  }
                  if (nw_protocol_copy_http1_definition_onceToken != -1)
                    dispatch_once(&nw_protocol_copy_http1_definition_onceToken, &__block_literal_global_72242);
                  v112 = (id)nw_protocol_copy_http1_definition_http1_definition;
                  v113 = v111;
                  *((_QWORD *)v113 + 2) = v86;

                  if (v112)
                    os_release(v112);
                  os_release(v113);
                }
                *(_DWORD *)v381 = 0;
                memset(buf, 0, sizeof(buf));
                v114 = nw_parameters_copy_protocol_options_legacy(*((void **)v86 + 40), (nw_protocol *)v86);
                v115 = v114;
                if (v114)
                {
                  v116 = v114;
                  v117 = 0;
                  buf[0] = 0;
                  while (1)
                  {
                    v118 = v116[v117 + 48];
                    buf[v117] = v118;
                    if (!v118)
                      break;
                    if (++v117 == 83)
                    {
                      v381[3] = 0;
                      break;
                    }
                  }

                }
                else if ((v86[158] & 1) == 0)
                {
                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                  networkd_settings_init();
                  v119 = gLogObj;
                  if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
                  {
                    v120 = *((_QWORD *)v86 + 32);
                    v121 = *(_DWORD *)(*((_QWORD *)v86 + 31) + 372);
                    if (v120)
                      LODWORD(v120) = *(_DWORD *)(v120 + 860);
                    v122 = *((_DWORD *)v86 + 106);
                    *(_DWORD *)aBlock = 136448002;
                    *(_QWORD *)&aBlock[4] = "nw_http1_stream_add_input_handler";
                    *(_WORD *)&aBlock[12] = 2082;
                    *(_QWORD *)&aBlock[14] = v86 + 74;
                    *(_WORD *)&aBlock[22] = 2080;
                    v385 = (uint64_t)" ";
                    *(_WORD *)v386 = 1024;
                    *(_DWORD *)&v386[2] = v121;
                    *(_WORD *)&v386[6] = 1024;
                    *(_DWORD *)&v386[8] = v120;
                    *(_WORD *)&v386[12] = 1024;
                    *(_DWORD *)&v386[14] = v122;
                    *(_WORD *)&v386[18] = 2048;
                    *(_QWORD *)&v386[20] = v86;
                    *(_WORD *)&v386[28] = 2048;
                    *(_QWORD *)&v386[30] = v109;
                    _os_log_impl(&dword_182FBE000, v119, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u:c%u:s%u> Failed to access options for protocol %p, parameters %p", aBlock, 0x46u);
                  }
                }
                v373 = v13;
                if ((*(_BYTE *)(v8 + 158) & 1) == 0)
                {
                  if (gLogDatapath)
                  {
                    v297 = __nwlog_obj();
                    if (os_log_type_enabled(v297, OS_LOG_TYPE_DEBUG))
                    {
                      v298 = *(_DWORD *)(v8 + 372);
                      *(_DWORD *)aBlock = 136447234;
                      *(_QWORD *)&aBlock[4] = "nw_http1_add_stream";
                      *(_WORD *)&aBlock[12] = 2082;
                      *(_QWORD *)&aBlock[14] = v8 + 74;
                      *(_WORD *)&aBlock[22] = 2080;
                      v385 = (uint64_t)" ";
                      *(_WORD *)v386 = 1024;
                      *(_DWORD *)&v386[2] = v298;
                      *(_WORD *)&v386[6] = 2048;
                      *(_QWORD *)&v386[8] = v86;
                      _os_log_impl(&dword_182FBE000, v297, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> called for stream (%p)", aBlock, 0x30u);
                    }
                  }
                }
                *((_QWORD *)v86 + 35) = 0;
                v123 = *(_QWORD **)(v8 + 240);
                *((_QWORD *)v86 + 36) = v123;
                *v123 = v86;
                *(_QWORD *)(v8 + 240) = v86 + 280;
                v124 = *(unsigned int *)(v8 + 344) + 1;
                v125 = v124 << 31 >> 31;
                *(_DWORD *)(v8 + 344) = v124;
                if (v125 == v124 && (v125 & 0x8000000000000000) == 0)
                {
LABEL_220:
                  v137 = *(unsigned int *)(v8 + 356) + 1;
                  v138 = v137 << 31 >> 31;
                  *(_DWORD *)(v8 + 356) = v137;
                  if (v138 == v137 && (v138 & 0x8000000000000000) == 0)
                    goto LABEL_239;
                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                  networkd_settings_init();
                  v139 = *(unsigned int *)(v8 + 356);
                  *(_DWORD *)aBlock = 136446978;
                  *(_QWORD *)&aBlock[4] = "nw_http1_add_stream";
                  *(_WORD *)&aBlock[12] = 2082;
                  *(_QWORD *)&aBlock[14] = "http1->next_stream_log_num";
                  *(_WORD *)&aBlock[22] = 2048;
                  v385 = 1;
                  *(_WORD *)v386 = 2048;
                  *(_QWORD *)&v386[2] = v139;
                  v140 = (char *)_os_log_send_and_compose_impl();
                  type = OS_LOG_TYPE_ERROR;
                  v378 = 0;
                  if (__nwlog_fault(v140, &type, &v378))
                  {
                    if (type == OS_LOG_TYPE_FAULT)
                    {
                      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                      networkd_settings_init();
                      v141 = gLogObj;
                      v142 = type;
                      if (os_log_type_enabled((os_log_t)gLogObj, type))
                      {
                        v143 = *(unsigned int *)(v8 + 356);
                        *(_DWORD *)aBlock = 136446978;
                        *(_QWORD *)&aBlock[4] = "nw_http1_add_stream";
                        *(_WORD *)&aBlock[12] = 2082;
                        *(_QWORD *)&aBlock[14] = "http1->next_stream_log_num";
                        *(_WORD *)&aBlock[22] = 2048;
                        v385 = 1;
                        *(_WORD *)v386 = 2048;
                        *(_QWORD *)&v386[2] = v143;
                        v144 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_235:
                        _os_log_impl(&dword_182FBE000, v141, v142, v144, aBlock, 0x2Au);
                      }
                    }
                    else if (v378)
                    {
                      v145 = (char *)__nw_create_backtrace_string();
                      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                      networkd_settings_init();
                      v141 = gLogObj;
                      v142 = type;
                      v146 = os_log_type_enabled((os_log_t)gLogObj, type);
                      if (v145)
                      {
                        if (v146)
                        {
                          v147 = *(unsigned int *)(v8 + 356);
                          *(_DWORD *)aBlock = 136447234;
                          *(_QWORD *)&aBlock[4] = "nw_http1_add_stream";
                          *(_WORD *)&aBlock[12] = 2082;
                          *(_QWORD *)&aBlock[14] = "http1->next_stream_log_num";
                          *(_WORD *)&aBlock[22] = 2048;
                          v385 = 1;
                          *(_WORD *)v386 = 2048;
                          *(_QWORD *)&v386[2] = v147;
                          *(_WORD *)&v386[10] = 2082;
                          *(_QWORD *)&v386[12] = v145;
                          _os_log_impl(&dword_182FBE000, v141, v142, "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s", aBlock, 0x34u);
                        }
                        free(v145);
                        goto LABEL_236;
                      }
                      if (v146)
                      {
                        v149 = *(unsigned int *)(v8 + 356);
                        *(_DWORD *)aBlock = 136446978;
                        *(_QWORD *)&aBlock[4] = "nw_http1_add_stream";
                        *(_WORD *)&aBlock[12] = 2082;
                        *(_QWORD *)&aBlock[14] = "http1->next_stream_log_num";
                        *(_WORD *)&aBlock[22] = 2048;
                        v385 = 1;
                        *(_WORD *)v386 = 2048;
                        *(_QWORD *)&v386[2] = v149;
                        v144 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
                        goto LABEL_235;
                      }
                    }
                    else
                    {
                      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                      networkd_settings_init();
                      v141 = gLogObj;
                      v142 = type;
                      if (os_log_type_enabled((os_log_t)gLogObj, type))
                      {
                        v148 = *(unsigned int *)(v8 + 356);
                        *(_DWORD *)aBlock = 136446978;
                        *(_QWORD *)&aBlock[4] = "nw_http1_add_stream";
                        *(_WORD *)&aBlock[12] = 2082;
                        *(_QWORD *)&aBlock[14] = "http1->next_stream_log_num";
                        *(_WORD *)&aBlock[22] = 2048;
                        v385 = 1;
                        *(_WORD *)v386 = 2048;
                        *(_QWORD *)&v386[2] = v148;
                        v144 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
                        goto LABEL_235;
                      }
                    }
                  }
LABEL_236:
                  if (v140)
                    free(v140);
                  LODWORD(v137) = -1;
                  *(_DWORD *)(v8 + 356) = -1;
LABEL_239:
                  *((_DWORD *)v86 + 106) = v137;
                  if ((v86[158] & 1) == 0)
                  {
                    if (gLogDatapath)
                    {
                      v299 = __nwlog_obj();
                      if (os_log_type_enabled(v299, OS_LOG_TYPE_DEBUG))
                      {
                        v300 = *((_QWORD *)v86 + 32);
                        v301 = *(_DWORD *)(*((_QWORD *)v86 + 31) + 372);
                        if (v300)
                          LODWORD(v300) = *(_DWORD *)(v300 + 860);
                        v302 = *((_DWORD *)v86 + 106);
                        v303 = *(_DWORD *)(v8 + 344);
                        *(_DWORD *)aBlock = 136448258;
                        *(_QWORD *)&aBlock[4] = "nw_http1_add_stream";
                        *(_WORD *)&aBlock[12] = 2082;
                        *(_QWORD *)&aBlock[14] = v86 + 74;
                        *(_WORD *)&aBlock[22] = 2080;
                        v385 = (uint64_t)" ";
                        *(_WORD *)v386 = 1024;
                        *(_DWORD *)&v386[2] = v301;
                        *(_WORD *)&v386[6] = 1024;
                        *(_DWORD *)&v386[8] = v300;
                        *(_WORD *)&v386[12] = 1024;
                        *(_DWORD *)&v386[14] = v302;
                        *(_WORD *)&v386[18] = 1024;
                        *(_DWORD *)&v386[20] = v302;
                        *(_WORD *)&v386[24] = 2048;
                        *(_QWORD *)&v386[26] = v86;
                        *(_WORD *)&v386[34] = 1024;
                        *(_DWORD *)&v386[36] = v303;
                        _os_log_impl(&dword_182FBE000, v299, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> added stream %u (%p), now have %u streams", aBlock, 0x48u);
                      }
                    }
                  }
                  nw_protocol_plugin_name_set_name((uint64_t)(v86 + 64), (uint64_t)v86, v109);
                  if (buf[0])
                  {
                    v13 = v373;
                    if ((*(_BYTE *)(v8 + 158) & 1) == 0)
                    {
                      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                      networkd_settings_init();
                      v150 = gLogObj;
                      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEFAULT))
                      {
                        v151 = *(_DWORD *)(v8 + 372);
                        v152 = *(_DWORD *)(v8 + 344);
                        *(_DWORD *)aBlock = 136447746;
                        *(_QWORD *)&aBlock[4] = "nw_http1_stream_add_input_handler";
                        *(_WORD *)&aBlock[12] = 2082;
                        *(_QWORD *)&aBlock[14] = v8 + 74;
                        *(_WORD *)&aBlock[22] = 2080;
                        v385 = (uint64_t)" ";
                        *(_WORD *)v386 = 1024;
                        *(_DWORD *)&v386[2] = v151;
                        *(_WORD *)&v386[6] = 2048;
                        *(_QWORD *)&v386[8] = v376;
                        *(_WORD *)&v386[16] = 2082;
                        *(_QWORD *)&v386[18] = buf;
                        *(_WORD *)&v386[26] = 1024;
                        *(_DWORD *)&v386[28] = v152;
                        v153 = "%{public}s %{public}s%s<i%u> added input handler %p from %{public}s, now have %u input handlers";
                        v154 = v150;
                        v155 = 64;
LABEL_248:
                        _os_log_impl(&dword_182FBE000, v154, OS_LOG_TYPE_DEFAULT, v153, aBlock, v155);
                      }
                    }
                  }
                  else
                  {
                    v13 = v373;
                    if ((*(_BYTE *)(v8 + 158) & 1) == 0)
                    {
                      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                      networkd_settings_init();
                      v156 = gLogObj;
                      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEFAULT))
                      {
                        v157 = *(_DWORD *)(v8 + 372);
                        v158 = *(_DWORD *)(v8 + 344);
                        *(_DWORD *)aBlock = 136447490;
                        *(_QWORD *)&aBlock[4] = "nw_http1_stream_add_input_handler";
                        *(_WORD *)&aBlock[12] = 2082;
                        *(_QWORD *)&aBlock[14] = v8 + 74;
                        *(_WORD *)&aBlock[22] = 2080;
                        v385 = (uint64_t)" ";
                        *(_WORD *)v386 = 1024;
                        *(_DWORD *)&v386[2] = v157;
                        *(_WORD *)&v386[6] = 2048;
                        *(_QWORD *)&v386[8] = v376;
                        *(_WORD *)&v386[16] = 1024;
                        *(_DWORD *)&v386[18] = v158;
                        v153 = "%{public}s %{public}s%s<i%u> added input handler %p, now have %u input handlers";
                        v154 = v156;
                        v155 = 54;
                        goto LABEL_248;
                      }
                    }
                  }
                  if (v115)
                    os_release(v115);
LABEL_251:
                  v159 = 0;
                  goto LABEL_252;
                }
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                v126 = *(unsigned int *)(v8 + 344);
                *(_DWORD *)aBlock = 136446978;
                *(_QWORD *)&aBlock[4] = "nw_http1_add_stream";
                *(_WORD *)&aBlock[12] = 2082;
                *(_QWORD *)&aBlock[14] = "http1->streams_count";
                *(_WORD *)&aBlock[22] = 2048;
                v385 = 1;
                *(_WORD *)v386 = 2048;
                *(_QWORD *)&v386[2] = v126;
                v127 = (char *)_os_log_send_and_compose_impl();
                type = OS_LOG_TYPE_ERROR;
                v378 = 0;
                if (__nwlog_fault(v127, &type, &v378))
                {
                  if (type == OS_LOG_TYPE_FAULT)
                  {
                    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                    networkd_settings_init();
                    v128 = gLogObj;
                    v129 = type;
                    if (os_log_type_enabled((os_log_t)gLogObj, type))
                    {
                      v130 = *(unsigned int *)(v8 + 344);
                      *(_DWORD *)aBlock = 136446978;
                      *(_QWORD *)&aBlock[4] = "nw_http1_add_stream";
                      *(_WORD *)&aBlock[12] = 2082;
                      *(_QWORD *)&aBlock[14] = "http1->streams_count";
                      *(_WORD *)&aBlock[22] = 2048;
                      v385 = 1;
                      *(_WORD *)v386 = 2048;
                      *(_QWORD *)&v386[2] = v130;
                      v131 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_216:
                      _os_log_impl(&dword_182FBE000, v128, v129, v131, aBlock, 0x2Au);
                    }
                  }
                  else if (v378)
                  {
                    v132 = (char *)__nw_create_backtrace_string();
                    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                    networkd_settings_init();
                    v128 = gLogObj;
                    v129 = type;
                    v133 = os_log_type_enabled((os_log_t)gLogObj, type);
                    if (v132)
                    {
                      if (v133)
                      {
                        v134 = *(unsigned int *)(v8 + 344);
                        *(_DWORD *)aBlock = 136447234;
                        *(_QWORD *)&aBlock[4] = "nw_http1_add_stream";
                        *(_WORD *)&aBlock[12] = 2082;
                        *(_QWORD *)&aBlock[14] = "http1->streams_count";
                        *(_WORD *)&aBlock[22] = 2048;
                        v385 = 1;
                        *(_WORD *)v386 = 2048;
                        *(_QWORD *)&v386[2] = v134;
                        *(_WORD *)&v386[10] = 2082;
                        *(_QWORD *)&v386[12] = v132;
                        _os_log_impl(&dword_182FBE000, v128, v129, "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s", aBlock, 0x34u);
                      }
                      free(v132);
                      goto LABEL_217;
                    }
                    if (v133)
                    {
                      v136 = *(unsigned int *)(v8 + 344);
                      *(_DWORD *)aBlock = 136446978;
                      *(_QWORD *)&aBlock[4] = "nw_http1_add_stream";
                      *(_WORD *)&aBlock[12] = 2082;
                      *(_QWORD *)&aBlock[14] = "http1->streams_count";
                      *(_WORD *)&aBlock[22] = 2048;
                      v385 = 1;
                      *(_WORD *)v386 = 2048;
                      *(_QWORD *)&v386[2] = v136;
                      v131 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
                      goto LABEL_216;
                    }
                  }
                  else
                  {
                    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                    networkd_settings_init();
                    v128 = gLogObj;
                    v129 = type;
                    if (os_log_type_enabled((os_log_t)gLogObj, type))
                    {
                      v135 = *(unsigned int *)(v8 + 344);
                      *(_DWORD *)aBlock = 136446978;
                      *(_QWORD *)&aBlock[4] = "nw_http1_add_stream";
                      *(_WORD *)&aBlock[12] = 2082;
                      *(_QWORD *)&aBlock[14] = "http1->streams_count";
                      *(_WORD *)&aBlock[22] = 2048;
                      v385 = 1;
                      *(_WORD *)v386 = 2048;
                      *(_QWORD *)&v386[2] = v135;
                      v131 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
                      goto LABEL_216;
                    }
                  }
                }
LABEL_217:
                if (v127)
                  free(v127);
                *(_DWORD *)(v8 + 344) = -1;
                goto LABEL_220;
              }
              __nwlog_obj();
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_http1_stream_add_input_handler";
              v289 = (char *)_os_log_send_and_compose_impl();
              aBlock[0] = 16;
              type = OS_LOG_TYPE_DEFAULT;
              if (__nwlog_fault(v289, aBlock, &type))
              {
                if (aBlock[0] == 17)
                {
                  v290 = __nwlog_obj();
                  v291 = aBlock[0];
                  if (!os_log_type_enabled(v290, (os_log_type_t)aBlock[0]))
                    goto LABEL_595;
                  *(_DWORD *)buf = 136446210;
                  *(_QWORD *)&buf[4] = "nw_http1_stream_add_input_handler";
                  v292 = "%{public}s called with null http1_stream->parameters";
                  goto LABEL_594;
                }
                if (type == OS_LOG_TYPE_DEFAULT)
                {
                  v290 = __nwlog_obj();
                  v291 = aBlock[0];
                  if (!os_log_type_enabled(v290, (os_log_type_t)aBlock[0]))
                    goto LABEL_595;
                  *(_DWORD *)buf = 136446210;
                  *(_QWORD *)&buf[4] = "nw_http1_stream_add_input_handler";
                  v292 = "%{public}s called with null http1_stream->parameters, backtrace limit exceeded";
                  goto LABEL_594;
                }
                v330 = (char *)__nw_create_backtrace_string();
                v290 = __nwlog_obj();
                v291 = aBlock[0];
                v331 = os_log_type_enabled(v290, (os_log_type_t)aBlock[0]);
                if (v330)
                {
                  if (v331)
                  {
                    *(_DWORD *)buf = 136446466;
                    *(_QWORD *)&buf[4] = "nw_http1_stream_add_input_handler";
                    *(_WORD *)&buf[12] = 2082;
                    *(_QWORD *)&buf[14] = v330;
                    _os_log_impl(&dword_182FBE000, v290, v291, "%{public}s called with null http1_stream->parameters, dumping backtrace:%{public}s", buf, 0x16u);
                  }
                  free(v330);
                  goto LABEL_595;
                }
                if (v331)
                {
                  *(_DWORD *)buf = 136446210;
                  *(_QWORD *)&buf[4] = "nw_http1_stream_add_input_handler";
                  v292 = "%{public}s called with null http1_stream->parameters, no backtrace";
LABEL_594:
                  _os_log_impl(&dword_182FBE000, v290, v291, v292, buf, 0xCu);
                }
              }
LABEL_595:
              if (v289)
                free(v289);
              goto LABEL_251;
            }
            __nwlog_obj();
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_http1_stream_create";
            v267 = (void *)_os_log_send_and_compose_impl();
            type = OS_LOG_TYPE_ERROR;
            v378 = 0;
            if (__nwlog_fault((const char *)v267, &type, &v378))
            {
              if (type == OS_LOG_TYPE_FAULT)
              {
                v268 = __nwlog_obj();
                v269 = type;
                if (!os_log_type_enabled(v268, type))
                  goto LABEL_557;
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_http1_stream_create";
                v270 = "%{public}s called with null parameters";
                goto LABEL_556;
              }
              if (!v378)
              {
                v268 = __nwlog_obj();
                v269 = type;
                if (!os_log_type_enabled(v268, type))
                  goto LABEL_557;
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_http1_stream_create";
                v270 = "%{public}s called with null parameters, backtrace limit exceeded";
                goto LABEL_556;
              }
              v328 = (char *)__nw_create_backtrace_string();
              v268 = __nwlog_obj();
              v269 = type;
              v329 = os_log_type_enabled(v268, type);
              if (v328)
              {
                if (v329)
                {
                  *(_DWORD *)buf = 136446466;
                  *(_QWORD *)&buf[4] = "nw_http1_stream_create";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = v328;
                  _os_log_impl(&dword_182FBE000, v268, v269, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
                }
                free(v328);
                if (!v267)
                {
LABEL_559:
                  __nwlog_obj();
                  *(_DWORD *)buf = 136446210;
                  *(_QWORD *)&buf[4] = "nw_http1_stream_replace_protocol_instance";
                  v344 = (char *)_os_log_send_and_compose_impl();
                  aBlock[0] = 16;
                  type = OS_LOG_TYPE_DEFAULT;
                  if (!__nwlog_fault(v344, aBlock, &type))
                    goto LABEL_573;
                  if (aBlock[0] == 17)
                  {
                    v345 = __nwlog_obj();
                    v346 = aBlock[0];
                    if (!os_log_type_enabled(v345, (os_log_type_t)aBlock[0]))
                      goto LABEL_573;
                    *(_DWORD *)buf = 136446210;
                    *(_QWORD *)&buf[4] = "nw_http1_stream_replace_protocol_instance";
                    v347 = "%{public}s called with null http1_stream";
                  }
                  else if (type)
                  {
                    v348 = (char *)__nw_create_backtrace_string();
                    v345 = __nwlog_obj();
                    v346 = aBlock[0];
                    v349 = os_log_type_enabled(v345, (os_log_type_t)aBlock[0]);
                    if (v348)
                    {
                      if (v349)
                      {
                        *(_DWORD *)buf = 136446466;
                        *(_QWORD *)&buf[4] = "nw_http1_stream_replace_protocol_instance";
                        *(_WORD *)&buf[12] = 2082;
                        *(_QWORD *)&buf[14] = v348;
                        _os_log_impl(&dword_182FBE000, v345, v346, "%{public}s called with null http1_stream, dumping backtrace:%{public}s", buf, 0x16u);
                      }
                      free(v348);
LABEL_573:
                      if (v344)
                        free(v344);
                      __nwlog_obj();
                      *(_DWORD *)buf = 136446210;
                      *(_QWORD *)&buf[4] = "nw_http1_stream_add_input_handler";
                      v350 = (char *)_os_log_send_and_compose_impl();
                      aBlock[0] = 16;
                      type = OS_LOG_TYPE_DEFAULT;
                      if (!__nwlog_fault(v350, aBlock, &type))
                        goto LABEL_589;
                      if (aBlock[0] == 17)
                      {
                        v351 = __nwlog_obj();
                        v352 = aBlock[0];
                        if (os_log_type_enabled(v351, (os_log_type_t)aBlock[0]))
                        {
                          *(_DWORD *)buf = 136446210;
                          *(_QWORD *)&buf[4] = "nw_http1_stream_add_input_handler";
                          v353 = "%{public}s called with null http1_stream";
LABEL_588:
                          _os_log_impl(&dword_182FBE000, v351, v352, v353, buf, 0xCu);
                        }
                      }
                      else if (type)
                      {
                        v354 = (char *)__nw_create_backtrace_string();
                        v351 = __nwlog_obj();
                        v352 = aBlock[0];
                        v355 = os_log_type_enabled(v351, (os_log_type_t)aBlock[0]);
                        if (v354)
                        {
                          if (v355)
                          {
                            *(_DWORD *)buf = 136446466;
                            *(_QWORD *)&buf[4] = "nw_http1_stream_add_input_handler";
                            *(_WORD *)&buf[12] = 2082;
                            *(_QWORD *)&buf[14] = v354;
                            _os_log_impl(&dword_182FBE000, v351, v352, "%{public}s called with null http1_stream, dumping backtrace:%{public}s", buf, 0x16u);
                          }
                          free(v354);
                          goto LABEL_589;
                        }
                        if (v355)
                        {
                          *(_DWORD *)buf = 136446210;
                          *(_QWORD *)&buf[4] = "nw_http1_stream_add_input_handler";
                          v353 = "%{public}s called with null http1_stream, no backtrace";
                          goto LABEL_588;
                        }
                      }
                      else
                      {
                        v351 = __nwlog_obj();
                        v352 = aBlock[0];
                        if (os_log_type_enabled(v351, (os_log_type_t)aBlock[0]))
                        {
                          *(_DWORD *)buf = 136446210;
                          *(_QWORD *)&buf[4] = "nw_http1_stream_add_input_handler";
                          v353 = "%{public}s called with null http1_stream, backtrace limit exceeded";
                          goto LABEL_588;
                        }
                      }
LABEL_589:
                      if (v350)
                        free(v350);
                      v86 = 0;
                      v159 = 1;
LABEL_252:
                      v160 = v374;
                      if ((*(_BYTE *)(v11 + 158) & 1) == 0)
                      {
                        if (gLogDatapath)
                        {
                          v283 = __nwlog_obj();
                          if (os_log_type_enabled(v283, OS_LOG_TYPE_DEBUG))
                          {
                            v284 = *(_QWORD *)(v11 + 256);
                            v285 = *(_DWORD *)(*(_QWORD *)(v11 + 248) + 372);
                            if (v284)
                              LODWORD(v284) = *(_DWORD *)(v284 + 860);
                            v286 = *(_DWORD *)(v11 + 424);
                            *(_DWORD *)buf = 136447746;
                            *(_QWORD *)&buf[4] = "nw_http1_stream_destroy";
                            *(_WORD *)&buf[12] = 2082;
                            *(_QWORD *)&buf[14] = v11 + 74;
                            *(_WORD *)&buf[22] = 2080;
                            *(_QWORD *)&buf[24] = " ";
                            *(_WORD *)&buf[32] = 1024;
                            *(_DWORD *)&buf[34] = v285;
                            *(_WORD *)&buf[38] = 1024;
                            *(_DWORD *)&buf[40] = v284;
                            *(_WORD *)&buf[44] = 1024;
                            *(_DWORD *)&buf[46] = v286;
                            *(_WORD *)&buf[50] = 2048;
                            *(_QWORD *)&buf[52] = v11;
                            _os_log_impl(&dword_182FBE000, v283, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> destroying %p", buf, 0x3Cu);
                          }
                        }
                      }
                      if ((*(_WORD *)(v11 + 428) & 0x4000) != 0)
                        nw_http_transaction_metadata_set_event_handler(*(void **)(v11 + 352), 0);
                      v161 = *(_BYTE *)(v11 + 344);
                      if ((v161 & 1) != 0)
                      {
                        v162 = *(void **)(v11 + 336);
                        if (v162)
                        {
                          os_release(v162);
                          v161 = *(_BYTE *)(v11 + 344);
                        }
                      }
                      *(_QWORD *)(v11 + 336) = 0;
                      *(_BYTE *)(v11 + 344) = v161 | 1;
                      v163 = *(_BYTE *)(v11 + 328);
                      if ((v163 & 1) != 0)
                      {
                        v164 = *(void **)(v11 + 320);
                        if (v164)
                        {
                          os_release(v164);
                          v163 = *(_BYTE *)(v11 + 328);
                        }
                      }
                      *(_QWORD *)(v11 + 320) = 0;
                      *(_BYTE *)(v11 + 328) = v163 | 1;
                      v165 = *(_BYTE *)(v11 + 376);
                      if ((v165 & 1) != 0)
                      {
                        v166 = *(void **)(v11 + 368);
                        if (v166)
                        {
                          os_release(v166);
                          v165 = *(_BYTE *)(v11 + 376);
                        }
                      }
                      *(_QWORD *)(v11 + 368) = 0;
                      *(_BYTE *)(v11 + 376) = v165 | 1;
                      v167 = *(_BYTE *)(v11 + 392);
                      if ((v167 & 1) != 0)
                      {
                        v168 = *(void **)(v11 + 384);
                        if (v168)
                        {
                          os_release(v168);
                          v167 = *(_BYTE *)(v11 + 392);
                        }
                      }
                      *(_QWORD *)(v11 + 384) = 0;
                      *(_BYTE *)(v11 + 392) = v167 | 1;
                      v169 = *(_QWORD *)(v11 + 256);
                      if (v169 && *(_QWORD *)(v169 + 488) == v11)
                        *(_QWORD *)(v169 + 488) = 0;
                      *(_QWORD *)(v11 + 256) = 0;
                      v170 = *(_QWORD *)(v11 + 48);
                      if (v170 && *(_QWORD *)(v170 + 56) == v11)
                        *(_QWORD *)(v170 + 56) = 0;
                      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v11 + 312) + 16))(*(_QWORD *)(v11 + 312), 0);
                      v171 = *(const void **)(v11 + 312);
                      if (v171)
                      {
                        _Block_release(v171);
                        *(_QWORD *)(v11 + 312) = 0;
                      }
                      nw_http1_stream::~nw_http1_stream((nw_http1_stream *)v11);
                      free(v172);
                      if (!v374)
                        goto LABEL_339;
                      v173 = *(_QWORD *)(v374 + 488);
                      if (!v173 || (*(_WORD *)(v173 + 428) & 0x2000) != 0)
                      {
                        if ((*(_WORD *)(v374 + 872) & 4) == 0)
                        {
                          if ((*(_BYTE *)(v374 + 158) & 1) != 0)
                            goto LABEL_338;
                          if (!gLogDatapath)
                            goto LABEL_338;
                          v178 = __nwlog_obj();
                          if (!os_log_type_enabled(v178, OS_LOG_TYPE_DEBUG))
                            goto LABEL_338;
                          v179 = *(_QWORD *)(v374 + 488);
                          v180 = *(_DWORD *)(*(_QWORD *)(v374 + 480) + 372);
                          v181 = *(_DWORD *)(v374 + 860);
                          if (v179)
                            LODWORD(v179) = *(_DWORD *)(v179 + 424);
                          *(_DWORD *)buf = 136447490;
                          *(_QWORD *)&buf[4] = "nw_http1_connection_can_be_reused";
                          *(_WORD *)&buf[12] = 2082;
                          *(_QWORD *)&buf[14] = v374 + 74;
                          *(_WORD *)&buf[22] = 2080;
                          *(_QWORD *)&buf[24] = " ";
                          *(_WORD *)&buf[32] = 1024;
                          *(_DWORD *)&buf[34] = v180;
                          *(_WORD *)&buf[38] = 1024;
                          *(_DWORD *)&buf[40] = v181;
                          *(_WORD *)&buf[44] = 1024;
                          *(_DWORD *)&buf[46] = v179;
                          v182 = "%{public}s %{public}s%s<i%u:c%u:s%u> connection cannot be reused because the message is not complete";
                          goto LABEL_654;
                        }
                        if ((*(_WORD *)(v374 + 872) & 0x20) == 0)
                        {
                          if ((*(_BYTE *)(v374 + 158) & 1) != 0)
                            goto LABEL_338;
                          if (!gLogDatapath)
                            goto LABEL_338;
                          v178 = __nwlog_obj();
                          if (!os_log_type_enabled(v178, OS_LOG_TYPE_DEBUG))
                            goto LABEL_338;
                          v183 = *(_QWORD *)(v374 + 488);
                          v184 = *(_DWORD *)(*(_QWORD *)(v374 + 480) + 372);
                          v185 = *(_DWORD *)(v374 + 860);
                          if (v183)
                            LODWORD(v183) = *(_DWORD *)(v183 + 424);
                          *(_DWORD *)buf = 136447490;
                          *(_QWORD *)&buf[4] = "nw_http1_connection_can_be_reused";
                          *(_WORD *)&buf[12] = 2082;
                          *(_QWORD *)&buf[14] = v374 + 74;
                          *(_WORD *)&buf[22] = 2080;
                          *(_QWORD *)&buf[24] = " ";
                          *(_WORD *)&buf[32] = 1024;
                          *(_DWORD *)&buf[34] = v184;
                          *(_WORD *)&buf[38] = 1024;
                          *(_DWORD *)&buf[40] = v185;
                          *(_WORD *)&buf[44] = 1024;
                          *(_DWORD *)&buf[46] = v183;
                          v182 = "%{public}s %{public}s%s<i%u:c%u:s%u> connection cannot be reused because the outbound m"
                                 "essage is not complete";
                          goto LABEL_654;
                        }
                        if ((*(_WORD *)(v374 + 872) & 8) == 0)
                        {
                          if ((*(_BYTE *)(v374 + 158) & 1) != 0)
                            goto LABEL_338;
                          if (!gLogDatapath)
                            goto LABEL_338;
                          v178 = __nwlog_obj();
                          if (!os_log_type_enabled(v178, OS_LOG_TYPE_DEBUG))
                            goto LABEL_338;
                          v186 = *(_QWORD *)(v374 + 488);
                          v187 = *(_DWORD *)(*(_QWORD *)(v374 + 480) + 372);
                          v188 = *(_DWORD *)(v374 + 860);
                          if (v186)
                            LODWORD(v186) = *(_DWORD *)(v186 + 424);
                          *(_DWORD *)buf = 136447490;
                          *(_QWORD *)&buf[4] = "nw_http1_connection_can_be_reused";
                          *(_WORD *)&buf[12] = 2082;
                          *(_QWORD *)&buf[14] = v374 + 74;
                          *(_WORD *)&buf[22] = 2080;
                          *(_QWORD *)&buf[24] = " ";
                          *(_WORD *)&buf[32] = 1024;
                          *(_DWORD *)&buf[34] = v187;
                          *(_WORD *)&buf[38] = 1024;
                          *(_DWORD *)&buf[40] = v188;
                          *(_WORD *)&buf[44] = 1024;
                          *(_DWORD *)&buf[46] = v186;
                          v182 = "%{public}s %{public}s%s<i%u:c%u:s%u> connection cannot be reused because keep alive is false";
                          goto LABEL_654;
                        }
                      }
                      else if ((*(_BYTE *)(v374 + 158) & 1) == 0)
                      {
                        if (gLogDatapath)
                        {
                          v174 = __nwlog_obj();
                          if (os_log_type_enabled(v174, OS_LOG_TYPE_DEBUG))
                          {
                            v175 = *(_QWORD *)(v374 + 488);
                            v176 = *(_DWORD *)(*(_QWORD *)(v374 + 480) + 372);
                            v177 = *(_DWORD *)(v374 + 860);
                            if (v175)
                              LODWORD(v175) = *(_DWORD *)(v175 + 424);
                            *(_DWORD *)buf = 136447490;
                            *(_QWORD *)&buf[4] = "nw_http1_connection_can_be_reused";
                            *(_WORD *)&buf[12] = 2082;
                            *(_QWORD *)&buf[14] = v374 + 74;
                            *(_WORD *)&buf[22] = 2080;
                            *(_QWORD *)&buf[24] = " ";
                            *(_WORD *)&buf[32] = 1024;
                            *(_DWORD *)&buf[34] = v176;
                            *(_WORD *)&buf[38] = 1024;
                            *(_DWORD *)&buf[40] = v177;
                            *(_WORD *)&buf[44] = 1024;
                            *(_DWORD *)&buf[46] = v175;
                            _os_log_impl(&dword_182FBE000, v174, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> connection may be reusable because the current stream didn't use it", buf, 0x32u);
                            v160 = v374;
                          }
                        }
                      }
                      if ((*(_BYTE *)(*(_QWORD *)(v160 + 480) + 376) & 8) != 0)
                      {
                        if ((*(_BYTE *)(v160 + 158) & 1) != 0)
                          goto LABEL_338;
                        if (!gLogDatapath)
                          goto LABEL_338;
                        v178 = __nwlog_obj();
                        if (!os_log_type_enabled(v178, OS_LOG_TYPE_DEBUG))
                          goto LABEL_338;
                        v193 = *(_QWORD *)(v160 + 488);
                        v194 = *(_DWORD *)(*(_QWORD *)(v160 + 480) + 372);
                        v195 = *(_DWORD *)(v160 + 860);
                        if (v193)
                          LODWORD(v193) = *(_DWORD *)(v193 + 424);
                        *(_DWORD *)buf = 136447490;
                        *(_QWORD *)&buf[4] = "nw_http1_connection_can_be_reused";
                        *(_WORD *)&buf[12] = 2082;
                        *(_QWORD *)&buf[14] = v160 + 74;
                        *(_WORD *)&buf[22] = 2080;
                        *(_QWORD *)&buf[24] = " ";
                        *(_WORD *)&buf[32] = 1024;
                        *(_DWORD *)&buf[34] = v194;
                        *(_WORD *)&buf[38] = 1024;
                        *(_DWORD *)&buf[40] = v195;
                        *(_WORD *)&buf[44] = 1024;
                        *(_DWORD *)&buf[46] = v193;
                        v182 = "%{public}s %{public}s%s<i%u:c%u:s%u> connection cannot be reused because pool is closed f"
                               "or new connections";
                        goto LABEL_654;
                      }
                      v189 = *(_WORD *)(v160 + 872);
                      if ((v189 & 0x200) != 0)
                      {
                        if ((*(_BYTE *)(v160 + 158) & 1) != 0)
                          goto LABEL_338;
                        if (!gLogDatapath)
                          goto LABEL_338;
                        v178 = __nwlog_obj();
                        if (!os_log_type_enabled(v178, OS_LOG_TYPE_DEBUG))
                          goto LABEL_338;
                        v196 = *(_QWORD *)(v160 + 488);
                        v197 = *(_DWORD *)(*(_QWORD *)(v160 + 480) + 372);
                        v198 = *(_DWORD *)(v160 + 860);
                        if (v196)
                          LODWORD(v196) = *(_DWORD *)(v196 + 424);
                        *(_DWORD *)buf = 136447490;
                        *(_QWORD *)&buf[4] = "nw_http1_connection_can_be_reused";
                        *(_WORD *)&buf[12] = 2082;
                        *(_QWORD *)&buf[14] = v160 + 74;
                        *(_WORD *)&buf[22] = 2080;
                        *(_QWORD *)&buf[24] = " ";
                        *(_WORD *)&buf[32] = 1024;
                        *(_DWORD *)&buf[34] = v197;
                        *(_WORD *)&buf[38] = 1024;
                        *(_DWORD *)&buf[40] = v198;
                        *(_WORD *)&buf[44] = 1024;
                        *(_DWORD *)&buf[46] = v196;
                        v182 = "%{public}s %{public}s%s<i%u:c%u:s%u> connection cannot be reused because it was upgraded";
                        goto LABEL_654;
                      }
                      if ((v189 & 0x40) == 0)
                      {
                        if ((*(_BYTE *)(v160 + 158) & 1) != 0)
                          goto LABEL_338;
                        if (!gLogDatapath)
                          goto LABEL_338;
                        v178 = __nwlog_obj();
                        if (!os_log_type_enabled(v178, OS_LOG_TYPE_DEBUG))
                          goto LABEL_338;
                        v190 = *(_QWORD *)(v160 + 488);
                        v191 = *(_DWORD *)(*(_QWORD *)(v160 + 480) + 372);
                        v192 = *(_DWORD *)(v160 + 860);
                        if (v190)
                          LODWORD(v190) = *(_DWORD *)(v190 + 424);
                        *(_DWORD *)buf = 136447490;
                        *(_QWORD *)&buf[4] = "nw_http1_connection_can_be_reused";
                        *(_WORD *)&buf[12] = 2082;
                        *(_QWORD *)&buf[14] = v160 + 74;
                        *(_WORD *)&buf[22] = 2080;
                        *(_QWORD *)&buf[24] = " ";
                        *(_WORD *)&buf[32] = 1024;
                        *(_DWORD *)&buf[34] = v191;
                        *(_WORD *)&buf[38] = 1024;
                        *(_DWORD *)&buf[40] = v192;
                        *(_WORD *)&buf[44] = 1024;
                        *(_DWORD *)&buf[46] = v190;
                        v182 = "%{public}s %{public}s%s<i%u:c%u:s%u> connection cannot be reused because it was never connected";
LABEL_654:
                        _os_log_impl(&dword_182FBE000, v178, OS_LOG_TYPE_DEBUG, v182, buf, 0x32u);
                        v160 = v374;
LABEL_338:
                        v203 = *(_QWORD *)(v160 + 608);
                        v204 = *(void **)(v160 + 496);
                        v377[0] = MEMORY[0x1E0C809B0];
                        v377[1] = 0x40000000;
                        v377[2] = ___ZL23nw_protocol_http1_resetP11nw_protocolS0__block_invoke;
                        v377[3] = &unk_1E14A1868;
                        v377[4] = v203;
                        nw_queue_context_async(v204, v377);
LABEL_339:
                        if (object)
                          os_release(object);
                        if (v13)
                          os_release(v13);
                        return 1;
                      }
                      if ((*(_WORD *)(v160 + 872) & 0x100) != 0)
                      {
                        if ((*(_BYTE *)(v160 + 158) & 1) != 0)
                          goto LABEL_338;
                        if (!gLogDatapath)
                          goto LABEL_338;
                        v178 = __nwlog_obj();
                        if (!os_log_type_enabled(v178, OS_LOG_TYPE_DEBUG))
                          goto LABEL_338;
                        v358 = *(_QWORD *)(v160 + 488);
                        v359 = *(_DWORD *)(*(_QWORD *)(v160 + 480) + 372);
                        v360 = *(_DWORD *)(v160 + 860);
                        if (v358)
                          LODWORD(v358) = *(_DWORD *)(v358 + 424);
                        *(_DWORD *)buf = 136447490;
                        *(_QWORD *)&buf[4] = "nw_http1_connection_can_be_reused";
                        *(_WORD *)&buf[12] = 2082;
                        *(_QWORD *)&buf[14] = v160 + 74;
                        *(_WORD *)&buf[22] = 2080;
                        *(_QWORD *)&buf[24] = " ";
                        *(_WORD *)&buf[32] = 1024;
                        *(_DWORD *)&buf[34] = v359;
                        *(_WORD *)&buf[38] = 1024;
                        *(_DWORD *)&buf[40] = v360;
                        *(_WORD *)&buf[44] = 1024;
                        *(_DWORD *)&buf[46] = v358;
                        v182 = "%{public}s %{public}s%s<i%u:c%u:s%u> connection cannot be reused because it has been closed";
                        goto LABEL_654;
                      }
                      if (*(_DWORD *)(v160 + 864) == 4)
                      {
                        if (*(_BYTE *)(v160 + 158) & 1 | (gLogDatapath == 0))
                          goto LABEL_338;
                        v178 = __nwlog_obj();
                        if (!os_log_type_enabled(v178, OS_LOG_TYPE_DEBUG))
                          goto LABEL_338;
                        v199 = *(_QWORD *)(v160 + 488);
                        v200 = *(_DWORD *)(*(_QWORD *)(v160 + 480) + 372);
                        v201 = *(_DWORD *)(v160 + 860);
                        if (v199)
                          LODWORD(v199) = *(_DWORD *)(v199 + 424);
                        *(_DWORD *)buf = 136447490;
                        *(_QWORD *)&buf[4] = "nw_http1_connection_can_be_reused";
                        *(_WORD *)&buf[12] = 2082;
                        *(_QWORD *)&buf[14] = v160 + 74;
                        *(_WORD *)&buf[22] = 2080;
                        *(_QWORD *)&buf[24] = " ";
                        *(_WORD *)&buf[32] = 1024;
                        *(_DWORD *)&buf[34] = v200;
                        *(_WORD *)&buf[38] = 1024;
                        *(_DWORD *)&buf[40] = v201;
                        *(_WORD *)&buf[44] = 1024;
                        *(_DWORD *)&buf[46] = v199;
                        v182 = "%{public}s %{public}s%s<i%u:c%u:s%u> connection cannot be reused because input has finished from below";
                        goto LABEL_654;
                      }
                      v207 = (unsigned __int16 *)(v160 + 872);
                      if (!(*(_BYTE *)(v160 + 158) & 1 | (gLogDatapath == 0)))
                      {
                        v363 = __nwlog_obj();
                        if (os_log_type_enabled(v363, OS_LOG_TYPE_DEBUG))
                        {
                          v364 = *(_QWORD *)(v160 + 488);
                          v365 = *(_DWORD *)(*(_QWORD *)(v160 + 480) + 372);
                          v366 = *(_DWORD *)(v160 + 860);
                          if (v364)
                            LODWORD(v364) = *(_DWORD *)(v364 + 424);
                          *(_DWORD *)buf = 136447490;
                          *(_QWORD *)&buf[4] = "nw_http1_connection_can_be_reused";
                          *(_WORD *)&buf[12] = 2082;
                          *(_QWORD *)&buf[14] = v160 + 74;
                          *(_WORD *)&buf[22] = 2080;
                          *(_QWORD *)&buf[24] = " ";
                          *(_WORD *)&buf[32] = 1024;
                          *(_DWORD *)&buf[34] = v365;
                          *(_WORD *)&buf[38] = 1024;
                          *(_DWORD *)&buf[40] = v366;
                          *(_WORD *)&buf[44] = 1024;
                          *(_DWORD *)&buf[46] = v364;
                          _os_log_impl(&dword_182FBE000, v363, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> connection can be reused", buf, 0x32u);
                          v160 = v374;
                        }
                      }
                      *v207 &= 0xFFFAu;
                      v208 = *(void **)(v160 + 800);
                      if (v208)
                      {
                        free(v208);
                        *(_QWORD *)(v160 + 800) = 0;
                      }
                      *(_DWORD *)(v160 + 840) = 0;
                      v209 = *(void **)(v160 + 808);
                      if (v209)
                      {
                        free(v209);
                        *(_QWORD *)(v160 + 808) = 0;
                      }
                      *(_DWORD *)(v160 + 844) = 0;
                      v210 = *(void **)(v160 + 816);
                      if (v210)
                      {
                        free(v210);
                        *(_QWORD *)(v160 + 816) = 0;
                      }
                      *(_DWORD *)(v160 + 848) = 0;
                      v211 = *(void **)(v160 + 824);
                      if (v211)
                      {
                        free(v211);
                        *(_QWORD *)(v160 + 824) = 0;
                      }
                      *(_DWORD *)(v160 + 852) = 0;
                      v212 = *(void **)(v160 + 832);
                      if (v212)
                      {
                        free(v212);
                        *(_QWORD *)(v160 + 832) = 0;
                      }
                      *(_DWORD *)(v160 + 856) = 0;
                      v213 = *v207;
                      v214 = v213 | (*((unsigned __int8 *)v207 + 2) << 16);
                      if ((v213 & 0x10) != 0)
                      {
                        if (*(_DWORD *)(v160 + 224) == 21)
                          *(_DWORD *)(v160 + 224) = 0;
                        v223 = v214 & 0xFFFFFFEF;
                        *v207 = v223;
                        *((_BYTE *)v207 + 2) = BYTE2(v223);
                        if ((*(_BYTE *)(v160 + 158) & 1) == 0)
                        {
                          if (gLogDatapath)
                          {
                            v218 = __nwlog_obj();
                            if (os_log_type_enabled(v218, OS_LOG_TYPE_DEBUG))
                            {
                              v367 = *(_QWORD *)(v160 + 488);
                              v368 = *(_DWORD *)(*(_QWORD *)(v160 + 480) + 372);
                              v369 = *(_DWORD *)(v160 + 860);
                              if (v367)
                                LODWORD(v367) = *(_DWORD *)(v367 + 424);
                              *(_DWORD *)buf = 136447490;
                              *(_QWORD *)&buf[4] = "nw_http1_connection_reset_for_new_message";
                              *(_WORD *)&buf[12] = 2082;
                              *(_QWORD *)&buf[14] = v160 + 74;
                              *(_WORD *)&buf[22] = 2080;
                              *(_QWORD *)&buf[24] = " ";
                              *(_WORD *)&buf[32] = 1024;
                              *(_DWORD *)&buf[34] = v368;
                              *(_WORD *)&buf[38] = 1024;
                              *(_DWORD *)&buf[40] = v369;
                              *(_WORD *)&buf[44] = 1024;
                              *(_DWORD *)&buf[46] = v367;
                              v222 = "%{public}s %{public}s%s<i%u:c%u:s%u> Unpausing parser, input for next stream available";
                              goto LABEL_671;
                            }
                          }
                        }
                      }
                      else
                      {
                        *(_OWORD *)(v160 + 200) = 0u;
                        v215 = *(_BYTE *)(v160 + 272);
                        v216 = *(_QWORD *)(v160 + 248);
                        v217 = *(_WORD *)(v160 + 278);
                        *(_OWORD *)(v160 + 248) = 0u;
                        *(_OWORD *)(v160 + 264) = 0u;
                        *(_OWORD *)(v160 + 216) = 0u;
                        *(_OWORD *)(v160 + 232) = 0u;
                        *(_QWORD *)(v160 + 280) = 0;
                        *(_BYTE *)(v160 + 272) = v215;
                        *(_QWORD *)(v160 + 248) = v216;
                        *(_QWORD *)(v160 + 256) = 238;
                        *(_WORD *)(v160 + 278) = v217;
                        if ((*(_BYTE *)(v160 + 158) & 1) == 0)
                        {
                          if (gLogDatapath)
                          {
                            v218 = __nwlog_obj();
                            if (os_log_type_enabled(v218, OS_LOG_TYPE_DEBUG))
                            {
                              v219 = *(_QWORD *)(v160 + 488);
                              v220 = *(_DWORD *)(*(_QWORD *)(v160 + 480) + 372);
                              v221 = *(_DWORD *)(v160 + 860);
                              if (v219)
                                LODWORD(v219) = *(_DWORD *)(v219 + 424);
                              *(_DWORD *)buf = 136447490;
                              *(_QWORD *)&buf[4] = "nw_http1_connection_reset_for_new_message";
                              *(_WORD *)&buf[12] = 2082;
                              *(_QWORD *)&buf[14] = v160 + 74;
                              *(_WORD *)&buf[22] = 2080;
                              *(_QWORD *)&buf[24] = " ";
                              *(_WORD *)&buf[32] = 1024;
                              *(_DWORD *)&buf[34] = v220;
                              *(_WORD *)&buf[38] = 1024;
                              *(_DWORD *)&buf[40] = v221;
                              *(_WORD *)&buf[44] = 1024;
                              *(_DWORD *)&buf[46] = v219;
                              v222 = "%{public}s %{public}s%s<i%u:c%u:s%u> Resetting parser, no current available input for next stream";
LABEL_671:
                              _os_log_impl(&dword_182FBE000, v218, OS_LOG_TYPE_DEBUG, v222, buf, 0x32u);
                              v160 = v374;
                            }
                          }
                        }
                      }
                      if (v159)
                      {
                        __nwlog_obj();
                        *(_DWORD *)buf = 136446210;
                        *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                        v225 = (char *)_os_log_send_and_compose_impl();
                        aBlock[0] = 16;
                        type = OS_LOG_TYPE_DEFAULT;
                        if (!__nwlog_fault(v225, aBlock, &type))
                          goto LABEL_410;
                        if (aBlock[0] == 17)
                        {
                          v361 = __nwlog_obj();
                          v362 = aBlock[0];
                          if (!os_log_type_enabled(v361, (os_log_type_t)aBlock[0]))
                            goto LABEL_410;
                          *(_DWORD *)buf = 136446210;
                          *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                          v229 = "%{public}s called with null http1_stream";
                        }
                        else if (type)
                        {
                          v370 = (char *)__nw_create_backtrace_string();
                          v361 = __nwlog_obj();
                          v362 = aBlock[0];
                          v371 = os_log_type_enabled(v361, (os_log_type_t)aBlock[0]);
                          if (v370)
                          {
                            if (v371)
                            {
                              *(_DWORD *)buf = 136446466;
                              *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                              *(_WORD *)&buf[12] = 2082;
                              *(_QWORD *)&buf[14] = v370;
                              _os_log_impl(&dword_182FBE000, v361, v362, "%{public}s called with null http1_stream, dumping backtrace:%{public}s", buf, 0x16u);
                            }
                            free(v370);
                            goto LABEL_410;
                          }
                          if (!v371)
                            goto LABEL_410;
                          *(_DWORD *)buf = 136446210;
                          *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                          v229 = "%{public}s called with null http1_stream, no backtrace";
                        }
                        else
                        {
                          v361 = __nwlog_obj();
                          v362 = aBlock[0];
                          if (!os_log_type_enabled(v361, (os_log_type_t)aBlock[0]))
                            goto LABEL_410;
                          *(_DWORD *)buf = 136446210;
                          *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                          v229 = "%{public}s called with null http1_stream, backtrace limit exceeded";
                        }
                      }
                      else
                      {
                        if (*((_QWORD *)v86 + 31))
                        {
                          if (!*(_QWORD *)(v160 + 488))
                          {
                            *((_QWORD *)v86 + 32) = v160;
                            *(_QWORD *)(v160 + 488) = v86;
                            nw_protocol_set_output_handler((uint64_t)v86, *(_QWORD *)(v160 + 32));
                            nw_protocol_set_input_handler(v160, *((_QWORD *)v86 + 6));
                            *(_OWORD *)v86 = *(_OWORD *)v160;
                            v230 = *((_OWORD *)v86 + 9);
                            v232 = *((_OWORD *)v86 + 6);
                            v231 = *((_OWORD *)v86 + 7);
                            *(_OWORD *)(v160 + 128) = *((_OWORD *)v86 + 8);
                            *(_OWORD *)(v160 + 144) = v230;
                            *(_OWORD *)(v160 + 96) = v232;
                            *(_OWORD *)(v160 + 112) = v231;
                            v233 = *((_OWORD *)v86 + 5);
                            *(_OWORD *)(v160 + 64) = *((_OWORD *)v86 + 4);
                            *(_OWORD *)(v160 + 80) = v233;
                            nw_http_transaction_metadata_set_connection_metadata(*((void **)v86 + 44), *(void **)(v160 + 768));
                            *v207 &= 0xFFD7u;
                            *(_DWORD *)(v160 + 864) = 1;
                            if ((*(_BYTE *)(v160 + 158) & 1) == 0)
                            {
                              v234 = __nwlog_obj();
                              if (os_log_type_enabled(v234, OS_LOG_TYPE_DEBUG))
                              {
                                v235 = *(_QWORD *)(v160 + 488);
                                v236 = *(_DWORD *)(*(_QWORD *)(v160 + 480) + 372);
                                v237 = *(_DWORD *)(v160 + 860);
                                if (v235)
                                  LODWORD(v235) = *(_DWORD *)(v235 + 424);
                                *(_DWORD *)buf = 136447490;
                                *(_QWORD *)&buf[4] = "nw_http1_update_connection_input_state";
                                *(_WORD *)&buf[12] = 2082;
                                *(_QWORD *)&buf[14] = v160 + 74;
                                *(_WORD *)&buf[22] = 2080;
                                *(_QWORD *)&buf[24] = " ";
                                *(_WORD *)&buf[32] = 1024;
                                *(_DWORD *)&buf[34] = v236;
                                *(_WORD *)&buf[38] = 1024;
                                *(_DWORD *)&buf[40] = v237;
                                *(_WORD *)&buf[44] = 1024;
                                *(_DWORD *)&buf[46] = v235;
                                _os_log_impl(&dword_182FBE000, v234, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> connection input state: reading", buf, 0x32u);
                              }
                            }
                            if ((v86[158] & 1) == 0)
                            {
                              v238 = __nwlog_obj();
                              if (os_log_type_enabled(v238, OS_LOG_TYPE_INFO))
                              {
                                v239 = *((_QWORD *)v86 + 32);
                                v240 = *(_DWORD *)(*((_QWORD *)v86 + 31) + 372);
                                if (v239)
                                  LODWORD(v239) = *(_DWORD *)(v239 + 860);
                                v241 = *((_DWORD *)v86 + 106);
                                *(_DWORD *)buf = 136448002;
                                *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                                *(_WORD *)&buf[12] = 2082;
                                *(_QWORD *)&buf[14] = v86 + 74;
                                *(_WORD *)&buf[22] = 2080;
                                *(_QWORD *)&buf[24] = " ";
                                *(_WORD *)&buf[32] = 1024;
                                *(_DWORD *)&buf[34] = v240;
                                *(_WORD *)&buf[38] = 1024;
                                *(_DWORD *)&buf[40] = v239;
                                *(_WORD *)&buf[44] = 1024;
                                *(_DWORD *)&buf[46] = v241;
                                *(_WORD *)&buf[50] = 2048;
                                *(_QWORD *)&buf[52] = v86;
                                *(_WORD *)&buf[60] = 2048;
                                *(_QWORD *)&buf[62] = v160;
                                _os_log_impl(&dword_182FBE000, v238, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s<i%u:c%u:s%u> stream (%p) now using connection %p", buf, 0x46u);
                              }
                            }
                            goto LABEL_339;
                          }
                          __nwlog_obj();
                          v224 = *(_QWORD *)(v160 + 488);
                          *(_DWORD *)buf = 136446722;
                          *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                          *(_WORD *)&buf[12] = 2048;
                          *(_QWORD *)&buf[14] = v160;
                          *(_WORD *)&buf[22] = 2048;
                          *(_QWORD *)&buf[24] = v224;
                          v225 = (char *)_os_log_send_and_compose_impl();
                          aBlock[0] = 16;
                          type = OS_LOG_TYPE_DEFAULT;
                          if (__nwlog_fault(v225, aBlock, &type))
                          {
                            if (aBlock[0] == 17)
                            {
                              v226 = __nwlog_obj();
                              v227 = aBlock[0];
                              if (!os_log_type_enabled(v226, (os_log_type_t)aBlock[0]))
                                goto LABEL_410;
                              v228 = *(_QWORD *)(v160 + 488);
                              *(_DWORD *)buf = 136446722;
                              *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                              *(_WORD *)&buf[12] = 2048;
                              *(_QWORD *)&buf[14] = v160;
                              *(_WORD *)&buf[22] = 2048;
                              *(_QWORD *)&buf[24] = v228;
                              v229 = "%{public}s Connection %p already has a stream (%p)";
LABEL_408:
                              v259 = v226;
                              v260 = v227;
                              v261 = 32;
LABEL_409:
                              _os_log_impl(&dword_182FBE000, v259, v260, v229, buf, v261);
                              goto LABEL_410;
                            }
                            if (type == OS_LOG_TYPE_DEFAULT)
                            {
                              v226 = __nwlog_obj();
                              v227 = aBlock[0];
                              if (!os_log_type_enabled(v226, (os_log_type_t)aBlock[0]))
                                goto LABEL_410;
                              v253 = *(_QWORD *)(v160 + 488);
                              *(_DWORD *)buf = 136446722;
                              *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                              *(_WORD *)&buf[12] = 2048;
                              *(_QWORD *)&buf[14] = v160;
                              *(_WORD *)&buf[22] = 2048;
                              *(_QWORD *)&buf[24] = v253;
                              v229 = "%{public}s Connection %p already has a stream (%p), backtrace limit exceeded";
                              goto LABEL_408;
                            }
                            v242 = (char *)__nw_create_backtrace_string();
                            v226 = __nwlog_obj();
                            v227 = aBlock[0];
                            v243 = os_log_type_enabled(v226, (os_log_type_t)aBlock[0]);
                            if (!v242)
                            {
                              if (!v243)
                                goto LABEL_410;
                              v258 = *(_QWORD *)(v160 + 488);
                              *(_DWORD *)buf = 136446722;
                              *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                              *(_WORD *)&buf[12] = 2048;
                              *(_QWORD *)&buf[14] = v160;
                              *(_WORD *)&buf[22] = 2048;
                              *(_QWORD *)&buf[24] = v258;
                              v229 = "%{public}s Connection %p already has a stream (%p), no backtrace";
                              goto LABEL_408;
                            }
                            if (v243)
                            {
                              v244 = *(_QWORD *)(v160 + 488);
                              *(_DWORD *)buf = 136446978;
                              *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                              *(_WORD *)&buf[12] = 2048;
                              *(_QWORD *)&buf[14] = v160;
                              *(_WORD *)&buf[22] = 2048;
                              *(_QWORD *)&buf[24] = v244;
                              *(_WORD *)&buf[32] = 2082;
                              *(_QWORD *)&buf[34] = v242;
                              v245 = "%{public}s Connection %p already has a stream (%p), dumping backtrace:%{public}s";
                              v246 = v226;
                              v247 = v227;
                              v248 = 42;
LABEL_389:
                              _os_log_impl(&dword_182FBE000, v246, v247, v245, buf, v248);
                              goto LABEL_390;
                            }
                            goto LABEL_390;
                          }
                          goto LABEL_410;
                        }
                        __nwlog_obj();
                        *(_DWORD *)buf = 136446210;
                        *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                        v225 = (char *)_os_log_send_and_compose_impl();
                        aBlock[0] = 16;
                        type = OS_LOG_TYPE_DEFAULT;
                        if (!__nwlog_fault(v225, aBlock, &type))
                          goto LABEL_410;
                        if (aBlock[0] == 17)
                        {
                          v361 = __nwlog_obj();
                          v362 = aBlock[0];
                          if (!os_log_type_enabled(v361, (os_log_type_t)aBlock[0]))
                            goto LABEL_410;
                          *(_DWORD *)buf = 136446210;
                          *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                          v229 = "%{public}s called with null http1_stream->protocol_http1";
                        }
                        else if (type)
                        {
                          v242 = (char *)__nw_create_backtrace_string();
                          v361 = __nwlog_obj();
                          v362 = aBlock[0];
                          v372 = os_log_type_enabled(v361, (os_log_type_t)aBlock[0]);
                          if (v242)
                          {
                            if (v372)
                            {
                              *(_DWORD *)buf = 136446466;
                              *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                              *(_WORD *)&buf[12] = 2082;
                              *(_QWORD *)&buf[14] = v242;
                              v245 = "%{public}s called with null http1_stream->protocol_http1, dumping backtrace:%{public}s";
                              v246 = v361;
                              v247 = v362;
                              v248 = 22;
                              goto LABEL_389;
                            }
LABEL_390:
                            free(v242);
                            if (!v225)
                              goto LABEL_339;
                            goto LABEL_411;
                          }
                          if (!v372)
                          {
LABEL_410:
                            if (!v225)
                              goto LABEL_339;
LABEL_411:
                            free(v225);
                            goto LABEL_339;
                          }
                          *(_DWORD *)buf = 136446210;
                          *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                          v229 = "%{public}s called with null http1_stream->protocol_http1, no backtrace";
                        }
                        else
                        {
                          v361 = __nwlog_obj();
                          v362 = aBlock[0];
                          if (!os_log_type_enabled(v361, (os_log_type_t)aBlock[0]))
                            goto LABEL_410;
                          *(_DWORD *)buf = 136446210;
                          *(_QWORD *)&buf[4] = "nw_http1_stream_associate_with_connection";
                          v229 = "%{public}s called with null http1_stream->protocol_http1, backtrace limit exceeded";
                        }
                      }
                      v259 = v361;
                      v260 = v362;
                      v261 = 12;
                      goto LABEL_409;
                    }
                    if (!v349)
                      goto LABEL_573;
                    *(_DWORD *)buf = 136446210;
                    *(_QWORD *)&buf[4] = "nw_http1_stream_replace_protocol_instance";
                    v347 = "%{public}s called with null http1_stream, no backtrace";
                  }
                  else
                  {
                    v345 = __nwlog_obj();
                    v346 = aBlock[0];
                    if (!os_log_type_enabled(v345, (os_log_type_t)aBlock[0]))
                      goto LABEL_573;
                    *(_DWORD *)buf = 136446210;
                    *(_QWORD *)&buf[4] = "nw_http1_stream_replace_protocol_instance";
                    v347 = "%{public}s called with null http1_stream, backtrace limit exceeded";
                  }
                  _os_log_impl(&dword_182FBE000, v345, v346, v347, buf, 0xCu);
                  goto LABEL_573;
                }
LABEL_558:
                free(v267);
                goto LABEL_559;
              }
              if (v329)
              {
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_http1_stream_create";
                v270 = "%{public}s called with null parameters, no backtrace";
LABEL_556:
                _os_log_impl(&dword_182FBE000, v268, v269, v270, buf, 0xCu);
              }
            }
          }
          else
          {
            __nwlog_obj();
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_http1_stream_create";
            v267 = (void *)_os_log_send_and_compose_impl();
            type = OS_LOG_TYPE_ERROR;
            v378 = 0;
            if (!__nwlog_fault((const char *)v267, &type, &v378))
              goto LABEL_557;
            if (type == OS_LOG_TYPE_FAULT)
            {
              v268 = __nwlog_obj();
              v269 = type;
              if (!os_log_type_enabled(v268, type))
                goto LABEL_557;
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_http1_stream_create";
              v270 = "%{public}s called with null endpoint";
              goto LABEL_556;
            }
            if (!v378)
            {
              v268 = __nwlog_obj();
              v269 = type;
              if (!os_log_type_enabled(v268, type))
                goto LABEL_557;
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_http1_stream_create";
              v270 = "%{public}s called with null endpoint, backtrace limit exceeded";
              goto LABEL_556;
            }
            v326 = (char *)__nw_create_backtrace_string();
            v268 = __nwlog_obj();
            v269 = type;
            v327 = os_log_type_enabled(v268, type);
            if (!v326)
            {
              if (!v327)
                goto LABEL_557;
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_http1_stream_create";
              v270 = "%{public}s called with null endpoint, no backtrace";
              goto LABEL_556;
            }
            if (v327)
            {
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "nw_http1_stream_create";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v326;
              _os_log_impl(&dword_182FBE000, v268, v269, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
            }
            free(v326);
          }
LABEL_557:
          if (!v267)
            goto LABEL_559;
          goto LABEL_558;
        }
LABEL_123:
        v71 = *(_DWORD *)(v8 + 352);
        *(_DWORD *)(v8 + 352) = v71 - 1;
        if (v71)
          goto LABEL_140;
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v72 = *(unsigned int *)(v8 + 352);
        *(_DWORD *)buf = 136446978;
        *(_QWORD *)&buf[4] = "nw_http1_remove_stream";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = "http1->pending_output_handler_count";
        *(_WORD *)&buf[22] = 2048;
        *(_QWORD *)&buf[24] = 1;
        *(_WORD *)&buf[32] = 2048;
        *(_QWORD *)&buf[34] = v72;
        v73 = (char *)_os_log_send_and_compose_impl();
        aBlock[0] = 16;
        type = OS_LOG_TYPE_DEFAULT;
        if (!__nwlog_fault(v73, aBlock, &type))
          goto LABEL_137;
        if (aBlock[0] == 17)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v74 = gLogObj;
          v75 = aBlock[0];
          if (os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)aBlock[0]))
          {
            v76 = *(unsigned int *)(v8 + 352);
            *(_DWORD *)buf = 136446978;
            *(_QWORD *)&buf[4] = "nw_http1_remove_stream";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = "http1->pending_output_handler_count";
            *(_WORD *)&buf[22] = 2048;
            *(_QWORD *)&buf[24] = 1;
            *(_WORD *)&buf[32] = 2048;
            *(_QWORD *)&buf[34] = v76;
            v77 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu";
LABEL_135:
            v84 = v74;
            v85 = v75;
LABEL_136:
            _os_log_impl(&dword_182FBE000, v84, v85, v77, buf, 0x2Au);
          }
        }
        else if (type)
        {
          v78 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v79 = gLogObj;
          v80 = aBlock[0];
          v81 = os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)aBlock[0]);
          if (v78)
          {
            if (v81)
            {
              v82 = *(unsigned int *)(v8 + 352);
              *(_DWORD *)buf = 136447234;
              *(_QWORD *)&buf[4] = "nw_http1_remove_stream";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = "http1->pending_output_handler_count";
              *(_WORD *)&buf[22] = 2048;
              *(_QWORD *)&buf[24] = 1;
              *(_WORD *)&buf[32] = 2048;
              *(_QWORD *)&buf[34] = v82;
              *(_WORD *)&buf[42] = 2082;
              *(_QWORD *)&buf[44] = v78;
              _os_log_impl(&dword_182FBE000, v79, v80, "%{public}s Underflow: %{public}s, decrement %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
            }
            free(v78);
            goto LABEL_137;
          }
          if (v81)
          {
            v202 = *(unsigned int *)(v8 + 352);
            *(_DWORD *)buf = 136446978;
            *(_QWORD *)&buf[4] = "nw_http1_remove_stream";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = "http1->pending_output_handler_count";
            *(_WORD *)&buf[22] = 2048;
            *(_QWORD *)&buf[24] = 1;
            *(_WORD *)&buf[32] = 2048;
            *(_QWORD *)&buf[34] = v202;
            v77 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, no backtrace";
            v84 = v79;
            v85 = v80;
            goto LABEL_136;
          }
        }
        else
        {
          v74 = __nwlog_obj();
          v75 = aBlock[0];
          if (os_log_type_enabled(v74, (os_log_type_t)aBlock[0]))
          {
            v83 = *(unsigned int *)(v8 + 352);
            *(_DWORD *)buf = 136446978;
            *(_QWORD *)&buf[4] = "nw_http1_remove_stream";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = "http1->pending_output_handler_count";
            *(_WORD *)&buf[22] = 2048;
            *(_QWORD *)&buf[24] = 1;
            *(_WORD *)&buf[32] = 2048;
            *(_QWORD *)&buf[34] = v83;
            v77 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, backtrace limit exceeded";
            goto LABEL_135;
          }
        }
LABEL_137:
        if (v73)
          free(v73);
        *(_DWORD *)(v8 + 352) = 0;
        v15 = object;
        goto LABEL_140;
      }
      v339 = *(_QWORD *)(v11 + 256);
      v340 = *(_DWORD *)(*(_QWORD *)(v11 + 248) + 372);
      if (v339)
        LODWORD(v339) = *(_DWORD *)(v339 + 860);
      v341 = *(_DWORD *)(v11 + 424);
      v342 = *(_DWORD *)(v8 + 348);
      *(_DWORD *)buf = 136448258;
      *(_QWORD *)&buf[4] = "nw_http1_remove_pending_stream";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v11 + 74;
      *(_WORD *)&buf[22] = 2080;
      *(_QWORD *)&buf[24] = " ";
      *(_WORD *)&buf[32] = 1024;
      *(_DWORD *)&buf[34] = v340;
      *(_WORD *)&buf[38] = 1024;
      *(_DWORD *)&buf[40] = v339;
      *(_WORD *)&buf[44] = 1024;
      *(_DWORD *)&buf[46] = v341;
      *(_WORD *)&buf[50] = 1024;
      *(_DWORD *)&buf[52] = v341;
      *(_WORD *)&buf[56] = 2048;
      *(_QWORD *)&buf[58] = v11;
      *(_WORD *)&buf[66] = 1024;
      *(_DWORD *)&buf[68] = v342;
      _os_log_impl(&dword_182FBE000, v338, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> removed pending stream %u (%p), now have %u pending streams", buf, 0x48u);
LABEL_58:
      v15 = object;
      goto LABEL_68;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v25 = *(unsigned int *)(v8 + 348);
    *(_DWORD *)buf = 136446978;
    *(_QWORD *)&buf[4] = "nw_http1_remove_pending_stream";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = "http1->pending_stream_count";
    *(_WORD *)&buf[22] = 2048;
    *(_QWORD *)&buf[24] = 1;
    *(_WORD *)&buf[32] = 2048;
    *(_QWORD *)&buf[34] = v25;
    v26 = (char *)_os_log_send_and_compose_impl();
    aBlock[0] = 16;
    type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v26, aBlock, &type))
    {
      if (aBlock[0] == 17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v27 = gLogObj;
        v28 = aBlock[0];
        if (os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)aBlock[0]))
        {
          v29 = *(unsigned int *)(v8 + 348);
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_http1_remove_pending_stream";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = "http1->pending_stream_count";
          *(_WORD *)&buf[22] = 2048;
          *(_QWORD *)&buf[24] = 1;
          *(_WORD *)&buf[32] = 2048;
          *(_QWORD *)&buf[34] = v29;
          v30 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu";
LABEL_61:
          v37 = v27;
          v38 = v28;
LABEL_62:
          _os_log_impl(&dword_182FBE000, v37, v38, v30, buf, 0x2Au);
        }
      }
      else if (type)
      {
        v31 = (char *)__nw_create_backtrace_string();
        v32 = __nwlog_obj();
        v33 = aBlock[0];
        v34 = os_log_type_enabled(v32, (os_log_type_t)aBlock[0]);
        if (v31)
        {
          if (v34)
          {
            v35 = *(unsigned int *)(v8 + 348);
            *(_DWORD *)buf = 136447234;
            *(_QWORD *)&buf[4] = "nw_http1_remove_pending_stream";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = "http1->pending_stream_count";
            *(_WORD *)&buf[22] = 2048;
            *(_QWORD *)&buf[24] = 1;
            *(_WORD *)&buf[32] = 2048;
            *(_QWORD *)&buf[34] = v35;
            *(_WORD *)&buf[42] = 2082;
            *(_QWORD *)&buf[44] = v31;
            _os_log_impl(&dword_182FBE000, v32, v33, "%{public}s Underflow: %{public}s, decrement %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
          }
          free(v31);
          goto LABEL_63;
        }
        if (v34)
        {
          v206 = *(unsigned int *)(v8 + 348);
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_http1_remove_pending_stream";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = "http1->pending_stream_count";
          *(_WORD *)&buf[22] = 2048;
          *(_QWORD *)&buf[24] = 1;
          *(_WORD *)&buf[32] = 2048;
          *(_QWORD *)&buf[34] = v206;
          v30 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, no backtrace";
          v37 = v32;
          v38 = v33;
          goto LABEL_62;
        }
      }
      else
      {
        v27 = __nwlog_obj();
        v28 = aBlock[0];
        if (os_log_type_enabled(v27, (os_log_type_t)aBlock[0]))
        {
          v36 = *(unsigned int *)(v8 + 348);
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_http1_remove_pending_stream";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = "http1->pending_stream_count";
          *(_WORD *)&buf[22] = 2048;
          *(_QWORD *)&buf[24] = 1;
          *(_WORD *)&buf[32] = 2048;
          *(_QWORD *)&buf[34] = v36;
          v30 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, backtrace limit exceeded";
          goto LABEL_61;
        }
      }
    }
LABEL_63:
    if (v26)
      free(v26);
    *(_DWORD *)(v8 + 348) = 0;
    v15 = object;
    goto LABEL_66;
  }
LABEL_632:
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_protocol_http1_reset";
  v254 = (char *)_os_log_send_and_compose_impl();
  aBlock[0] = 16;
  type = OS_LOG_TYPE_DEFAULT;
  if (!__nwlog_fault(v254, aBlock, &type))
    goto LABEL_647;
  if (aBlock[0] != 17)
  {
    if (type == OS_LOG_TYPE_DEFAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v255 = gLogObj;
      v256 = aBlock[0];
      if (os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)aBlock[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_http1_reset";
        v257 = "%{public}s called with null http1_stream, backtrace limit exceeded";
        goto LABEL_646;
      }
      goto LABEL_647;
    }
    v304 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v255 = gLogObj;
    v256 = aBlock[0];
    v357 = os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)aBlock[0]);
    if (!v304)
    {
      if (v357)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_http1_reset";
        v257 = "%{public}s called with null http1_stream, no backtrace";
        goto LABEL_646;
      }
      goto LABEL_647;
    }
    if (v357)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_protocol_http1_reset";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v304;
      v306 = "%{public}s called with null http1_stream, dumping backtrace:%{public}s";
      goto LABEL_640;
    }
LABEL_641:
    free(v304);
    goto LABEL_647;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v255 = gLogObj;
  v256 = aBlock[0];
  if (os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)aBlock[0]))
  {
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_http1_reset";
    v257 = "%{public}s called with null http1_stream";
    goto LABEL_646;
  }
LABEL_647:
  if (v254)
    free(v254);
  return 0;
}

void nw_protocol_http1_input_available(nw_protocol *a1, nw_protocol *a2)
{
  char *handle;
  int v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD **v13;
  unsigned __int16 *v14;
  _QWORD *v15;
  NSObject *v16;
  uint64_t v17;
  int v18;
  int v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  nw_protocol_identifier *identifier;
  NSObject *v26;
  int v27;
  NSObject *v28;
  uint32_t v29;
  _QWORD **v30;
  _QWORD *v31;
  NSObject *v32;
  uint64_t v33;
  int v34;
  int v35;
  const char *v36;
  uint64_t v37;
  int v38;
  int v39;
  __int128 v40;
  _DWORD *v41;
  int v42;
  _QWORD *v43;
  _QWORD *v44;
  _DWORD *v45;
  uint64_t v46;
  _BOOL4 v47;
  int v48;
  int v49;
  __int128 v50;
  _DWORD *v51;
  int v52;
  _QWORD *v53;
  _QWORD *v54;
  _DWORD *v55;
  uint64_t v56;
  _BOOL4 v57;
  int v58;
  int v59;
  _DWORD *v60;
  int v61;
  _QWORD *v62;
  _DWORD *v63;
  _QWORD *v64;
  uint64_t v65;
  _QWORD *v66;
  _BOOL4 v67;
  int v68;
  int v69;
  uint64_t v70;
  int v71;
  int v72;
  _DWORD *v73;
  int v74;
  _QWORD *v75;
  _DWORD *v76;
  _QWORD *v77;
  uint64_t v78;
  _QWORD *v79;
  _BOOL4 v80;
  int v81;
  int v82;
  uint64_t v83;
  int v84;
  int v85;
  NSObject *v86;
  uint64_t v87;
  int v88;
  int v89;
  const char *v90;
  NSObject *v91;
  uint32_t v92;
  NSObject *v93;
  uint64_t v94;
  int v95;
  int v96;
  const char *v97;
  NSObject *v98;
  uint32_t v99;
  char *v100;
  NSObject *v101;
  os_log_type_t v102;
  const char *v103;
  char *v104;
  NSObject *v105;
  os_log_type_t v106;
  const char *v107;
  char *v108;
  _BOOL4 v109;
  char *v110;
  _BOOL4 v111;
  char *v112;
  NSObject *v113;
  os_log_type_t v114;
  const char *v115;
  char *v116;
  NSObject *v117;
  os_log_type_t v118;
  const char *v119;
  char *backtrace_string;
  _BOOL4 v121;
  char *v122;
  _BOOL4 v123;
  const char *v124;
  NSObject *v125;
  int v126;
  _QWORD **v127;
  unsigned __int16 *v128;
  _QWORD *v129;
  NSObject *v130;
  nw_parameters_t v131;
  NSObject *v132;
  int v133;
  int v134;
  int v135;
  uint64_t v136;
  int v137;
  int v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  NSObject *v143;
  os_log_type_t v144;
  uint64_t v145;
  const char *v146;
  uint64_t v147;
  int v148;
  int v149;
  NSObject *v150;
  int v151;
  NSObject *v152;
  uint64_t v153;
  int v154;
  int v155;
  char *v156;
  _BOOL4 v157;
  const char *v158;
  NSObject *v159;
  uint64_t v160;
  int v161;
  int v162;
  int v163;
  unsigned int v164;
  char *v165;
  _BOOL4 v166;
  uint64_t v167;
  uint64_t v168;
  _BOOL4 v169;
  char *v170;
  NSObject *v171;
  os_log_type_t v172;
  const char *v173;
  uint64_t v174;
  void *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  NSObject *v179;
  uint64_t v180;
  int v181;
  int v182;
  uint64_t v183;
  void *v184;
  _BOOL4 v185;
  _BOOL4 v186;
  char *v187;
  _BOOL4 v188;
  NSObject *v189;
  uint64_t v190;
  int v191;
  int v192;
  NSObject *v193;
  uint64_t v194;
  int v195;
  int v196;
  NSObject *v197;
  int v198;
  int v199;
  int v200;
  _WORD *v201;
  uint64_t v202;
  int v203;
  int v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  char *v208;
  NSObject *v209;
  os_log_type_t v210;
  uint64_t v211;
  const char *v212;
  NSObject *v213;
  int v214;
  int v215;
  int v216;
  uint64_t v217;
  int v218;
  int v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  char *v223;
  NSObject *v224;
  os_log_type_t v225;
  uint64_t v226;
  const char *v227;
  char *v228;
  _BOOL4 v229;
  NSObject *v230;
  int v231;
  int v232;
  int v233;
  uint64_t v234;
  int v235;
  int v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  char *v240;
  NSObject *v241;
  os_log_type_t v242;
  uint64_t v243;
  const char *v244;
  uint64_t v245;
  int v246;
  int v247;
  uint64_t v248;
  int v249;
  int v250;
  _BOOL4 v251;
  NSObject *v252;
  uint64_t v253;
  int v254;
  int v255;
  NSObject *v256;
  uint64_t v257;
  int v258;
  int v259;
  NSObject *v260;
  uint64_t v261;
  int v262;
  int v263;
  NSObject *v264;
  uint64_t v265;
  int v266;
  int v267;
  char *v268;
  NSObject *v269;
  os_log_type_t v270;
  const char *v271;
  NSObject *v272;
  uint64_t v273;
  int v274;
  int v275;
  char *v276;
  _BOOL4 v277;
  uint64_t v278;
  NSObject *v279;
  NSObject *v280;
  char *v281;
  _BOOL4 v282;
  uint64_t v283;
  NSObject *v284;
  NSObject *v285;
  NSObject *v286;
  _BOOL4 v287;
  char *v288;
  _BOOL4 v289;
  NSObject *v290;
  uint64_t v291;
  int v292;
  int v293;
  int v294;
  char *v295;
  _BOOL4 v296;
  uint64_t v297;
  NSObject *v298;
  _BOOL4 v299;
  uint64_t v300;
  uint64_t v301;
  NSObject *v302;
  int v303;
  char *v304;
  _BOOL4 v305;
  const char *v306;
  _BOOL4 v307;
  uint64_t v308;
  void *v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  NSObject *v313;
  uint64_t v314;
  int v315;
  int v316;
  uint64_t v317;
  void *v318;
  uint64_t v319;
  void *v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  NSObject *v324;
  uint64_t v325;
  int v326;
  int v327;
  uint64_t v328;
  void *v329;
  uint64_t v330;
  uint8_t *v331;
  uint64_t v332;
  char *v333;
  NSObject *v334;
  os_log_type_t v335;
  const char *v336;
  NSObject *v337;
  uint64_t v338;
  int v339;
  int v340;
  char *v341;
  NSObject *v342;
  os_log_type_t v343;
  const char *v344;
  NSObject *v345;
  uint64_t v346;
  int v347;
  int v348;
  char *v349;
  _BOOL4 v350;
  NSObject *v351;
  uint64_t v352;
  int v353;
  int v354;
  NSObject *v355;
  uint64_t v356;
  int v357;
  int v358;
  int v359;
  char *v360;
  _BOOL4 v361;
  NSObject *v362;
  uint64_t v363;
  int v364;
  int v365;
  int v366;
  char *v367;
  _BOOL4 v368;
  const char *v369;
  _BOOL4 v370;
  uint8_t *v371;
  NSObject *v372;
  uint64_t v373;
  int v374;
  int v375;
  int v376;
  char *v377;
  _BOOL4 v378;
  const char *v379;
  _BOOL4 v380;
  uint8_t *v381;
  uint8_t *v382;
  NSObject *log;
  NSObject *loga;
  NSObject *logb;
  NSObject *logc;
  __int128 v387;
  __int128 v388;
  __int128 v389;
  __int128 v390;
  __int128 v391;
  __int128 v392;
  uint64_t v393;
  os_log_type_t v394[8];
  os_log_type_t *v395;
  char v396;
  os_log_type_t type;
  _BYTE v398[22];
  _BYTE buf[60];
  uint64_t v400;

  v400 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
    v112 = (char *)_os_log_send_and_compose_impl();
    v398[0] = 16;
    v394[0] = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v112, v398, v394))
      goto LABEL_425;
    if (v398[0] != 17)
    {
      if (v394[0] == OS_LOG_TYPE_DEFAULT)
      {
        v113 = __nwlog_obj();
        v114 = v398[0];
        if (!os_log_type_enabled(v113, (os_log_type_t)v398[0]))
          goto LABEL_425;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
        v115 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_424;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v113 = __nwlog_obj();
      v114 = v398[0];
      v121 = os_log_type_enabled(v113, (os_log_type_t)v398[0]);
      if (!backtrace_string)
      {
        if (!v121)
          goto LABEL_425;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
        v115 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_424;
      }
      if (v121)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v113, v114, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_425;
    }
    v113 = __nwlog_obj();
    v114 = v398[0];
    if (!os_log_type_enabled(v113, (os_log_type_t)v398[0]))
      goto LABEL_425;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
    v115 = "%{public}s called with null protocol";
LABEL_424:
    _os_log_impl(&dword_182FBE000, v113, v114, v115, buf, 0xCu);
    goto LABEL_425;
  }
  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
    v112 = (char *)_os_log_send_and_compose_impl();
    v398[0] = 16;
    v394[0] = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v112, v398, v394))
      goto LABEL_425;
    if (v398[0] != 17)
    {
      if (v394[0] == OS_LOG_TYPE_DEFAULT)
      {
        v113 = __nwlog_obj();
        v114 = v398[0];
        if (!os_log_type_enabled(v113, (os_log_type_t)v398[0]))
          goto LABEL_425;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
        v115 = "%{public}s called with null handle, backtrace limit exceeded";
        goto LABEL_424;
      }
      v122 = (char *)__nw_create_backtrace_string();
      v113 = __nwlog_obj();
      v114 = v398[0];
      v123 = os_log_type_enabled(v113, (os_log_type_t)v398[0]);
      if (!v122)
      {
        if (!v123)
          goto LABEL_425;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
        v115 = "%{public}s called with null handle, no backtrace";
        goto LABEL_424;
      }
      if (v123)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v122;
        v124 = "%{public}s called with null handle, dumping backtrace:%{public}s";
LABEL_228:
        _os_log_impl(&dword_182FBE000, v113, v114, v124, buf, 0x16u);
      }
LABEL_229:
      free(v122);
      if (!v112)
      {
LABEL_427:
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_http1_input_available";
        v116 = (char *)_os_log_send_and_compose_impl();
        v398[0] = 16;
        v394[0] = OS_LOG_TYPE_DEFAULT;
        if (!__nwlog_fault(v116, v398, v394))
          goto LABEL_487;
        if (v398[0] == 17)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v117 = gLogObj;
          v118 = v398[0];
          if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v398[0]))
            goto LABEL_487;
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_protocol_http1_input_available";
          v119 = "%{public}s called with null http1";
        }
        else if (v394[0])
        {
          v228 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v117 = gLogObj;
          v118 = v398[0];
          v229 = os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v398[0]);
          if (v228)
          {
            if (v229)
            {
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "nw_protocol_http1_input_available";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v228;
              _os_log_impl(&dword_182FBE000, v117, v118, "%{public}s called with null http1, dumping backtrace:%{public}s", buf, 0x16u);
            }
            free(v228);
LABEL_487:
            if (!v116)
              return;
            goto LABEL_488;
          }
          if (!v229)
            goto LABEL_487;
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_protocol_http1_input_available";
          v119 = "%{public}s called with null http1, no backtrace";
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v117 = gLogObj;
          v118 = v398[0];
          if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v398[0]))
            goto LABEL_487;
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_protocol_http1_input_available";
          v119 = "%{public}s called with null http1, backtrace limit exceeded";
        }
        goto LABEL_486;
      }
LABEL_426:
      free(v112);
      goto LABEL_427;
    }
    v113 = __nwlog_obj();
    v114 = v398[0];
    if (!os_log_type_enabled(v113, (os_log_type_t)v398[0]))
      goto LABEL_425;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
    v115 = "%{public}s called with null handle";
    goto LABEL_424;
  }
  v4 = *((_DWORD *)handle + 6);
  v5 = (uint64_t *)a1->handle;
  if (v4 == 1)
    goto LABEL_10;
  if (v4 != 2)
  {
    if (v4 != 3)
      goto LABEL_427;
    v6 = *((_QWORD *)handle + 2);
    if (v6)
    {
      v5 = (uint64_t *)(v6 + 480);
      goto LABEL_10;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
    v112 = (char *)_os_log_send_and_compose_impl();
    v398[0] = 16;
    v394[0] = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v112, v398, v394))
    {
      if (v398[0] == 17)
      {
        v113 = __nwlog_obj();
        v114 = v398[0];
        if (!os_log_type_enabled(v113, (os_log_type_t)v398[0]))
          goto LABEL_425;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
        v115 = "%{public}s called with null handle->http1_connection";
        goto LABEL_424;
      }
      if (v394[0] == OS_LOG_TYPE_DEFAULT)
      {
        v113 = __nwlog_obj();
        v114 = v398[0];
        if (!os_log_type_enabled(v113, (os_log_type_t)v398[0]))
          goto LABEL_425;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
        v115 = "%{public}s called with null handle->http1_connection, backtrace limit exceeded";
        goto LABEL_424;
      }
      v122 = (char *)__nw_create_backtrace_string();
      v113 = __nwlog_obj();
      v114 = v398[0];
      v185 = os_log_type_enabled(v113, (os_log_type_t)v398[0]);
      if (!v122)
      {
        if (!v185)
          goto LABEL_425;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
        v115 = "%{public}s called with null handle->http1_connection, no backtrace";
        goto LABEL_424;
      }
      if (v185)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v122;
        v124 = "%{public}s called with null handle->http1_connection, dumping backtrace:%{public}s";
        goto LABEL_228;
      }
      goto LABEL_229;
    }
LABEL_425:
    if (!v112)
      goto LABEL_427;
    goto LABEL_426;
  }
  v7 = *((_QWORD *)handle + 1);
  if (!v7)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
    v112 = (char *)_os_log_send_and_compose_impl();
    v398[0] = 16;
    v394[0] = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v112, v398, v394))
      goto LABEL_425;
    if (v398[0] == 17)
    {
      v113 = __nwlog_obj();
      v114 = v398[0];
      if (!os_log_type_enabled(v113, (os_log_type_t)v398[0]))
        goto LABEL_425;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
      v115 = "%{public}s called with null handle->http1_stream";
      goto LABEL_424;
    }
    if (v394[0] == OS_LOG_TYPE_DEFAULT)
    {
      v113 = __nwlog_obj();
      v114 = v398[0];
      if (!os_log_type_enabled(v113, (os_log_type_t)v398[0]))
        goto LABEL_425;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
      v115 = "%{public}s called with null handle->http1_stream, backtrace limit exceeded";
      goto LABEL_424;
    }
    v122 = (char *)__nw_create_backtrace_string();
    v113 = __nwlog_obj();
    v114 = v398[0];
    v186 = os_log_type_enabled(v113, (os_log_type_t)v398[0]);
    if (!v122)
    {
      if (!v186)
        goto LABEL_425;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
      v115 = "%{public}s called with null handle->http1_stream, no backtrace";
      goto LABEL_424;
    }
    if (v186)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_http1_get_http1_protocol";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v122;
      v124 = "%{public}s called with null handle->http1_stream, dumping backtrace:%{public}s";
      goto LABEL_228;
    }
    goto LABEL_229;
  }
  v5 = (uint64_t *)(v7 + 248);
LABEL_10:
  v8 = *v5;
  if (!*v5)
    goto LABEL_427;
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_http1_input_available";
    v116 = (char *)_os_log_send_and_compose_impl();
    v398[0] = 16;
    v394[0] = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v116, v398, v394))
      goto LABEL_487;
    if (v398[0] != 17)
    {
      if (v394[0] == OS_LOG_TYPE_DEFAULT)
      {
        v117 = __nwlog_obj();
        v118 = v398[0];
        if (!os_log_type_enabled(v117, (os_log_type_t)v398[0]))
          goto LABEL_487;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_http1_input_available";
        v119 = "%{public}s called with null other_protocol, backtrace limit exceeded";
        goto LABEL_486;
      }
      v156 = (char *)__nw_create_backtrace_string();
      v117 = __nwlog_obj();
      v118 = v398[0];
      v169 = os_log_type_enabled(v117, (os_log_type_t)v398[0]);
      if (!v156)
      {
        if (!v169)
          goto LABEL_487;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_http1_input_available";
        v119 = "%{public}s called with null other_protocol, no backtrace";
        goto LABEL_486;
      }
      if (v169)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_protocol_http1_input_available";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v156;
        v158 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
        goto LABEL_479;
      }
LABEL_480:
      free(v156);
      if (!v116)
        return;
LABEL_488:
      free(v116);
      return;
    }
    v117 = __nwlog_obj();
    v118 = v398[0];
    if (!os_log_type_enabled(v117, (os_log_type_t)v398[0]))
      goto LABEL_487;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_http1_input_available";
    v119 = "%{public}s called with null other_protocol";
LABEL_486:
    _os_log_impl(&dword_182FBE000, v117, v118, v119, buf, 0xCu);
    goto LABEL_487;
  }
  if (v4 == 2)
  {
    v10 = *((_QWORD *)handle + 1);
    if (v10)
    {
      v9 = (uint64_t *)(v10 + 256);
      goto LABEL_17;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http1_get_connection_for_protocol";
    v170 = (char *)_os_log_send_and_compose_impl();
    v398[0] = 16;
    v394[0] = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v170, v398, v394))
    {
      if (v398[0] == 17)
      {
        v171 = __nwlog_obj();
        v172 = v398[0];
        if (!os_log_type_enabled(v171, (os_log_type_t)v398[0]))
          goto LABEL_469;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http1_get_connection_for_protocol";
        v173 = "%{public}s called with null handle->http1_stream";
        goto LABEL_468;
      }
      if (v394[0] == OS_LOG_TYPE_DEFAULT)
      {
        v171 = __nwlog_obj();
        v172 = v398[0];
        if (!os_log_type_enabled(v171, (os_log_type_t)v398[0]))
          goto LABEL_469;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http1_get_connection_for_protocol";
        v173 = "%{public}s called with null handle->http1_stream, backtrace limit exceeded";
        goto LABEL_468;
      }
      v187 = (char *)__nw_create_backtrace_string();
      v171 = __nwlog_obj();
      v172 = v398[0];
      v188 = os_log_type_enabled(v171, (os_log_type_t)v398[0]);
      if (v187)
      {
        if (v188)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_http1_get_connection_for_protocol";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v187;
          _os_log_impl(&dword_182FBE000, v171, v172, "%{public}s called with null handle->http1_stream, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v187);
        goto LABEL_469;
      }
      if (v188)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http1_get_connection_for_protocol";
        v173 = "%{public}s called with null handle->http1_stream, no backtrace";
LABEL_468:
        _os_log_impl(&dword_182FBE000, v171, v172, v173, buf, 0xCu);
      }
    }
LABEL_469:
    if (v170)
      free(v170);
LABEL_471:
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_http1_input_available";
    v116 = (char *)_os_log_send_and_compose_impl();
    v398[0] = 16;
    v394[0] = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v116, v398, v394))
      goto LABEL_487;
    if (v398[0] == 17)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v117 = gLogObj;
      v118 = v398[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v398[0]))
        goto LABEL_487;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http1_input_available";
      v119 = "%{public}s called with null http1_connection";
      goto LABEL_486;
    }
    if (v394[0] == OS_LOG_TYPE_DEFAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v117 = gLogObj;
      v118 = v398[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v398[0]))
        goto LABEL_487;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http1_input_available";
      v119 = "%{public}s called with null http1_connection, backtrace limit exceeded";
      goto LABEL_486;
    }
    v156 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v117 = gLogObj;
    v118 = v398[0];
    v251 = os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v398[0]);
    if (!v156)
    {
      if (!v251)
        goto LABEL_487;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http1_input_available";
      v119 = "%{public}s called with null http1_connection, no backtrace";
      goto LABEL_486;
    }
    if (v251)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_protocol_http1_input_available";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v156;
      v158 = "%{public}s called with null http1_connection, dumping backtrace:%{public}s";
      goto LABEL_479;
    }
    goto LABEL_480;
  }
  if (v4 != 3)
    goto LABEL_471;
  v9 = (uint64_t *)(handle + 16);
LABEL_17:
  v11 = *v9;
  if (!*v9)
    goto LABEL_471;
  v12 = *(_QWORD *)(v11 + 488);
  if (!v12)
  {
    if ((*(_BYTE *)(v8 + 376) & 1) == 0)
    {
      if ((*(_BYTE *)(v11 + 158) & 1) != 0)
        return;
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v21 = gLogObj;
      if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
        return;
      v22 = *(_QWORD *)(v11 + 488);
      v23 = *(_DWORD *)(*(_QWORD *)(v11 + 480) + 372);
      v24 = *(_DWORD *)(v11 + 860);
      if (v22)
        LODWORD(v22) = *(_DWORD *)(v22 + 424);
      identifier = (nw_protocol_identifier *)"invalid";
      if (a2->identifier)
        identifier = a2->identifier;
      goto LABEL_59;
    }
    if ((*(_BYTE *)(v11 + 158) & 1) == 0)
    {
      if (gLogDatapath)
      {
        v189 = __nwlog_obj();
        if (os_log_type_enabled(v189, OS_LOG_TYPE_DEBUG))
        {
          v190 = *(_QWORD *)(v11 + 488);
          v191 = *(_DWORD *)(*(_QWORD *)(v11 + 480) + 372);
          v192 = *(_DWORD *)(v11 + 860);
          if (v190)
            LODWORD(v190) = *(_DWORD *)(v190 + 424);
          *(_DWORD *)buf = 136447746;
          *(_QWORD *)&buf[4] = "nw_protocol_http1_input_available";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v11 + 74;
          *(_WORD *)&buf[22] = 2080;
          *(_QWORD *)&buf[24] = " ";
          *(_WORD *)&buf[32] = 1024;
          *(_DWORD *)&buf[34] = v191;
          *(_WORD *)&buf[38] = 1024;
          *(_DWORD *)&buf[40] = v192;
          *(_WORD *)&buf[44] = 1024;
          *(_DWORD *)&buf[46] = v190;
          *(_WORD *)&buf[50] = 2048;
          *(_QWORD *)&buf[52] = v11;
          _os_log_impl(&dword_182FBE000, v189, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> called on idle server connection %p, triggering new flow", buf, 0x3Cu);
        }
      }
    }
    if ((*(_BYTE *)(v8 + 376) & 1) == 0)
    {
      if ((*(_BYTE *)(v8 + 158) & 1) == 0)
      {
        if (gLogDatapath)
        {
          v26 = __nwlog_obj();
          if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
          {
            v27 = *(_DWORD *)(v8 + 372);
            *(_DWORD *)buf = 136446978;
            *(_QWORD *)&buf[4] = "nw_http1_new_flow_valid";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v8 + 74;
            *(_WORD *)&buf[22] = 2080;
            *(_QWORD *)&buf[24] = " ";
            *(_WORD *)&buf[32] = 1024;
            *(_DWORD *)&buf[34] = v27;
            _os_log_impl(&dword_182FBE000, v26, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> called when not in server mode, ignoring", buf, 0x26u);
          }
        }
      }
      goto LABEL_238;
    }
    v30 = *(_QWORD ***)(v8 + 328);
    if (!v30)
    {
      if ((*(_BYTE *)(v11 + 158) & 1) != 0)
        goto LABEL_238;
      v32 = __nwlog_obj();
      if (!os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
        goto LABEL_238;
      v37 = *(_QWORD *)(v11 + 488);
      v38 = *(_DWORD *)(*(_QWORD *)(v11 + 480) + 372);
      v39 = *(_DWORD *)(v11 + 860);
      if (v37)
        LODWORD(v37) = *(_DWORD *)(v37 + 424);
      *(_DWORD *)buf = 136447490;
      *(_QWORD *)&buf[4] = "nw_http1_new_flow_valid";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v11 + 74;
      *(_WORD *)&buf[22] = 2080;
      *(_QWORD *)&buf[24] = " ";
      *(_WORD *)&buf[32] = 1024;
      *(_DWORD *)&buf[34] = v38;
      *(_WORD *)&buf[38] = 1024;
      *(_DWORD *)&buf[40] = v39;
      *(_WORD *)&buf[44] = 1024;
      *(_DWORD *)&buf[46] = v37;
      v36 = "%{public}s %{public}s%s<i%u:c%u:s%u> called without listen handler, ignoring";
      goto LABEL_78;
    }
    v31 = *v30;
    if (v31 && *v31)
    {
      if (((*(unsigned __int16 *)(v11 + 872) | (*(unsigned __int8 *)(v11 + 874) << 16)) & 0x20000) != 0
        || (*(_WORD *)(v11 + 872) & 0x14) != 0 && *(_QWORD *)(v11 + 616))
      {
        if ((*(_BYTE *)(v11 + 158) & 1) != 0)
          goto LABEL_238;
        if (!gLogDatapath)
          goto LABEL_238;
        v32 = __nwlog_obj();
        if (!os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
          goto LABEL_238;
        v33 = *(_QWORD *)(v11 + 488);
        v34 = *(_DWORD *)(*(_QWORD *)(v11 + 480) + 372);
        v35 = *(_DWORD *)(v11 + 860);
        if (v33)
          LODWORD(v33) = *(_DWORD *)(v33 + 424);
        *(_DWORD *)buf = 136447490;
        *(_QWORD *)&buf[4] = "nw_http1_detect_next_request";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v11 + 74;
        *(_WORD *)&buf[22] = 2080;
        *(_QWORD *)&buf[24] = " ";
        *(_WORD *)&buf[32] = 1024;
        *(_DWORD *)&buf[34] = v34;
        *(_WORD *)&buf[38] = 1024;
        *(_DWORD *)&buf[40] = v35;
        *(_WORD *)&buf[44] = 1024;
        *(_DWORD *)&buf[46] = v33;
        v36 = "%{public}s %{public}s%s<i%u:c%u:s%u> not attempting to read more on connection awaiting a new flow, awaiti"
              "ng disconnect or remove_input_handler";
        goto LABEL_78;
      }
      *(_QWORD *)v394 = 0;
      v395 = v394;
      if (nw_protocol_get_input_frames(*(_QWORD *)(v11 + 32), v11, 1, 0xFFFFFFFFLL, 1, (uint64_t)v394))
      {
        if (!(*(_BYTE *)(v11 + 158) & 1 | (gLogDatapath == 0)))
        {
          v260 = __nwlog_obj();
          if (os_log_type_enabled(v260, OS_LOG_TYPE_DEBUG))
          {
            v261 = *(_QWORD *)(v11 + 488);
            v262 = *(_DWORD *)(*(_QWORD *)(v11 + 480) + 372);
            v263 = *(_DWORD *)(v11 + 860);
            if (v261)
              LODWORD(v261) = *(_DWORD *)(v261 + 424);
            *(_DWORD *)buf = 136447490;
            *(_QWORD *)&buf[4] = "nw_http1_detect_next_request";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v11 + 74;
            *(_WORD *)&buf[22] = 2080;
            *(_QWORD *)&buf[24] = " ";
            *(_WORD *)&buf[32] = 1024;
            *(_DWORD *)&buf[34] = v262;
            *(_WORD *)&buf[38] = 1024;
            *(_DWORD *)&buf[40] = v263;
            *(_WORD *)&buf[44] = 1024;
            *(_DWORD *)&buf[46] = v261;
            _os_log_impl(&dword_182FBE000, v260, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> received a frame for non-idle connection, deferring new flow", buf, 0x32u);
          }
        }
        v41 = *(_DWORD **)v394;
        if (!*(_QWORD *)v394)
        {
          if ((*(_BYTE *)(v11 + 158) & 1) != 0)
            goto LABEL_237;
          if (!gLogDatapath)
            goto LABEL_237;
          v86 = __nwlog_obj();
          if (!os_log_type_enabled(v86, OS_LOG_TYPE_DEBUG))
            goto LABEL_237;
          v87 = *(_QWORD *)(v11 + 488);
          v88 = *(_DWORD *)(*(_QWORD *)(v11 + 480) + 372);
          v89 = *(_DWORD *)(v11 + 860);
          if (v87)
            LODWORD(v87) = *(_DWORD *)(v87 + 424);
          *(_DWORD *)buf = 136447490;
          *(_QWORD *)&buf[4] = "nw_http1_connection_move_frame_array_to_unprocessed_input_frames";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v11 + 74;
          *(_WORD *)&buf[22] = 2080;
          *(_QWORD *)&buf[24] = " ";
          *(_WORD *)&buf[32] = 1024;
          *(_DWORD *)&buf[34] = v88;
          *(_WORD *)&buf[38] = 1024;
          *(_DWORD *)&buf[40] = v89;
          *(_WORD *)&buf[44] = 1024;
          *(_DWORD *)&buf[46] = v87;
          v90 = "%{public}s %{public}s%s<i%u:c%u:s%u> no additional body frames to move";
          v91 = v86;
          v92 = 50;
          goto LABEL_527;
        }
        if (gLogDatapath)
        {
          v279 = __nwlog_obj();
          if (os_log_type_enabled(v279, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136447746;
            *(_QWORD *)&buf[4] = "nw_http1_move_frame_array";
            *(_WORD *)&buf[12] = 2048;
            *(_QWORD *)&buf[14] = v41;
            *(_WORD *)&buf[22] = 2048;
            *(_QWORD *)&buf[24] = v394;
            *(_WORD *)&buf[32] = 2048;
            *(_QWORD *)&buf[34] = v11 + 616;
            *(_WORD *)&buf[42] = 1024;
            *(_DWORD *)&buf[44] = 1;
            *(_WORD *)&buf[48] = 1024;
            *(_DWORD *)&buf[50] = 1;
            *(_WORD *)&buf[54] = 1024;
            *(_DWORD *)&buf[56] = 1;
            _os_log_impl(&dword_182FBE000, v279, OS_LOG_TYPE_DEBUG, "%{public}s called: initial frame %p, source %p, destination %p, temp %u, forwards %u, append %u", buf, 0x3Cu);
          }
        }
        v42 = 0;
        *(_QWORD *)v398 = 0;
        *(_QWORD *)&v398[8] = v398;
        *(_QWORD *)&v40 = 136447234;
        do
        {
          v45 = (_DWORD *)*((_QWORD *)v41 + 4);
          if (!v45 && !*((_QWORD *)v41 + 5))
            v45 = 0;
          if (gLogDatapath)
          {
            v387 = v40;
            log = __nwlog_obj();
            v47 = os_log_type_enabled(log, OS_LOG_TYPE_DEBUG);
            v40 = v387;
            if (v47)
            {
              v48 = v41[13];
              if (v48)
                v48 -= v41[14] + v41[15];
              if (v45)
              {
                v49 = v45[13];
                if (v49)
                  v49 -= v45[14] + v45[15];
              }
              else
              {
                v49 = 0;
              }
              *(_DWORD *)buf = v387;
              *(_QWORD *)&buf[4] = "nw_http1_move_frame_array";
              *(_WORD *)&buf[12] = 2048;
              *(_QWORD *)&buf[14] = v41;
              *(_WORD *)&buf[22] = 1024;
              *(_DWORD *)&buf[24] = v48;
              *(_WORD *)&buf[28] = 2048;
              *(_QWORD *)&buf[30] = v45;
              *(_WORD *)&buf[38] = 1024;
              *(_DWORD *)&buf[40] = v49;
              _os_log_impl(&dword_182FBE000, log, OS_LOG_TYPE_DEBUG, "%{public}s current frame: (%p, %u bytes), next frame: (%p, %u bytes)", buf, 0x2Cu);
              v40 = v387;
            }
          }
          v46 = *((_QWORD *)v41 + 4);
          v43 = (_QWORD *)*((_QWORD *)v41 + 5);
          if (v46)
          {
            *(_QWORD *)(v46 + 40) = v43;
            v43 = (_QWORD *)*((_QWORD *)v41 + 5);
          }
          else
          {
            v395 = (os_log_type_t *)*((_QWORD *)v41 + 5);
          }
          *v43 = v46;
          v44 = *(_QWORD **)&v398[8];
          *((_QWORD *)v41 + 4) = 0;
          *((_QWORD *)v41 + 5) = v44;
          *v44 = v41;
          *(_QWORD *)&v398[8] = v41 + 8;
          ++v42;
          v41 = v45;
        }
        while (v45);
        if (!v42)
          goto LABEL_236;
        if (gLogDatapath)
        {
          v391 = v40;
          v286 = __nwlog_obj();
          v287 = os_log_type_enabled(v286, OS_LOG_TYPE_DEBUG);
          v40 = v391;
          if (v287)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_http1_move_frame_array";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v42;
            _os_log_impl(&dword_182FBE000, v286, OS_LOG_TYPE_DEBUG, "%{public}s moving %u frames from temp array to destination array", buf, 0x12u);
            v40 = v391;
          }
        }
        v60 = *(_DWORD **)v398;
        v61 = v42;
        if (*(_QWORD *)v398)
        {
          v61 = v42;
          do
          {
            v64 = v60 + 8;
            v63 = (_DWORD *)*((_QWORD *)v60 + 4);
            if (!v63 && !*((_QWORD *)v60 + 5))
              v63 = 0;
            if (gLogDatapath)
            {
              v389 = v40;
              logb = __nwlog_obj();
              v67 = os_log_type_enabled(logb, OS_LOG_TYPE_DEBUG);
              v40 = v389;
              if (v67)
              {
                v68 = v60[13];
                if (v68)
                  v68 -= v60[14] + v60[15];
                if (v63)
                {
                  v69 = v63[13];
                  if (v69)
                    v69 -= v63[14] + v63[15];
                }
                else
                {
                  v69 = 0;
                }
                *(_DWORD *)buf = v389;
                *(_QWORD *)&buf[4] = "nw_http1_move_frame_array";
                *(_WORD *)&buf[12] = 2048;
                *(_QWORD *)&buf[14] = v60;
                *(_WORD *)&buf[22] = 1024;
                *(_DWORD *)&buf[24] = v68;
                *(_WORD *)&buf[28] = 2048;
                *(_QWORD *)&buf[30] = v63;
                *(_WORD *)&buf[38] = 1024;
                *(_DWORD *)&buf[40] = v69;
                _os_log_impl(&dword_182FBE000, logb, OS_LOG_TYPE_DEBUG, "%{public}s current frame: (%p, %u bytes), next frame: (%p, %u bytes)", buf, 0x2Cu);
                v40 = v389;
              }
            }
            v65 = *((_QWORD *)v60 + 4);
            v66 = (_QWORD *)*((_QWORD *)v60 + 5);
            if (v65)
            {
              *(_QWORD *)(v65 + 40) = v66;
              v66 = (_QWORD *)*((_QWORD *)v60 + 5);
            }
            else
            {
              *(_QWORD *)&v398[8] = *((_QWORD *)v60 + 5);
            }
            *v66 = v65;
            *v64 = 0;
            *((_QWORD *)v60 + 5) = 0;
            v62 = *(_QWORD **)(v11 + 624);
            *((_QWORD *)v60 + 5) = v62;
            *v62 = v60;
            *(_QWORD *)(v11 + 624) = v64;
            --v61;
            v60 = v63;
          }
          while (v63);
          if (!v61)
          {
LABEL_236:
            if (!gLogDatapath)
              goto LABEL_237;
            v280 = __nwlog_obj();
            if (!os_log_type_enabled(v280, OS_LOG_TYPE_DEBUG))
              goto LABEL_237;
            *(_DWORD *)buf = 136446978;
            *(_QWORD *)&buf[4] = "nw_http1_move_frame_array";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v42;
            *(_WORD *)&buf[18] = 2048;
            *(_QWORD *)&buf[20] = v394;
            *(_WORD *)&buf[28] = 2048;
            *(_QWORD *)&buf[30] = v11 + 616;
            v90 = "%{public}s moved %u frames from %p to %p";
            v91 = v280;
            v92 = 38;
LABEL_527:
            _os_log_impl(&dword_182FBE000, v91, OS_LOG_TYPE_DEBUG, v90, buf, v92);
LABEL_237:
            *(_BYTE *)(v11 + 874) = (*(unsigned __int16 *)(v11 + 872) | (*(unsigned __int8 *)(v11 + 874) << 16) | 0x20000u) >> 16;
            goto LABEL_238;
          }
        }
        __nwlog_obj();
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http1_move_frame_array";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v61;
        v100 = (char *)_os_log_send_and_compose_impl();
        type = OS_LOG_TYPE_ERROR;
        v396 = 0;
        if (__nwlog_fault(v100, &type, &v396))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            v101 = __nwlog_obj();
            v102 = type;
            if (!os_log_type_enabled(v101, type))
              goto LABEL_234;
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_http1_move_frame_array";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v61;
            v103 = "%{public}s failed to deliver all temp frames, remaining %u frames";
            goto LABEL_233;
          }
          if (!v396)
          {
            v101 = __nwlog_obj();
            v102 = type;
            if (!os_log_type_enabled(v101, type))
              goto LABEL_234;
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_http1_move_frame_array";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v61;
            v103 = "%{public}s failed to deliver all temp frames, remaining %u frames, backtrace limit exceeded";
            goto LABEL_233;
          }
          v108 = (char *)__nw_create_backtrace_string();
          v101 = __nwlog_obj();
          v102 = type;
          v109 = os_log_type_enabled(v101, type);
          if (v108)
          {
            if (v109)
            {
              *(_DWORD *)buf = 136446722;
              *(_QWORD *)&buf[4] = "nw_http1_move_frame_array";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v61;
              *(_WORD *)&buf[18] = 2082;
              *(_QWORD *)&buf[20] = v108;
              _os_log_impl(&dword_182FBE000, v101, v102, "%{public}s failed to deliver all temp frames, remaining %u frames, dumping backtrace:%{public}s", buf, 0x1Cu);
            }
            free(v108);
            goto LABEL_234;
          }
          if (v109)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_http1_move_frame_array";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v61;
            v103 = "%{public}s failed to deliver all temp frames, remaining %u frames, no backtrace";
LABEL_233:
            _os_log_impl(&dword_182FBE000, v101, v102, v103, buf, 0x12u);
          }
        }
LABEL_234:
        if (v100)
          free(v100);
        goto LABEL_236;
      }
      if (*(_BYTE *)(v11 + 158) & 1 | (gLogDatapath == 0))
        goto LABEL_238;
      v32 = __nwlog_obj();
      if (!os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
        goto LABEL_238;
      v70 = *(_QWORD *)(v11 + 488);
      v71 = *(_DWORD *)(*(_QWORD *)(v11 + 480) + 372);
      v72 = *(_DWORD *)(v11 + 860);
      if (v70)
        LODWORD(v70) = *(_DWORD *)(v70 + 424);
      *(_DWORD *)buf = 136447490;
      *(_QWORD *)&buf[4] = "nw_http1_detect_next_request";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v11 + 74;
      *(_WORD *)&buf[22] = 2080;
      *(_QWORD *)&buf[24] = " ";
      *(_WORD *)&buf[32] = 1024;
      *(_DWORD *)&buf[34] = v71;
      *(_WORD *)&buf[38] = 1024;
      *(_DWORD *)&buf[40] = v72;
      *(_WORD *)&buf[44] = 1024;
      *(_DWORD *)&buf[46] = v70;
      v36 = "%{public}s %{public}s%s<i%u:c%u:s%u> read 0 frames on non-idle connection, not deferring new flow";
LABEL_78:
      _os_log_impl(&dword_182FBE000, v32, OS_LOG_TYPE_DEBUG, v36, buf, 0x32u);
      goto LABEL_238;
    }
    if ((*(_BYTE *)(v8 + 158) & 1) == 0)
    {
      v197 = __nwlog_obj();
      if (os_log_type_enabled(v197, OS_LOG_TYPE_ERROR))
      {
        v198 = *(_DWORD *)(v8 + 372);
        *(_DWORD *)buf = 136446978;
        *(_QWORD *)&buf[4] = "nw_http1_new_flow_valid";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v8 + 74;
        *(_WORD *)&buf[22] = 2080;
        *(_QWORD *)&buf[24] = " ";
        *(_WORD *)&buf[32] = 1024;
        *(_DWORD *)&buf[34] = v198;
        _os_log_impl(&dword_182FBE000, v197, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u> listen handler has no new_flow callback, ignoring incoming flow", buf, 0x26u);
      }
    }
    v199 = *(unsigned __int16 *)(v11 + 872);
    v200 = v199 | (*(unsigned __int8 *)(v11 + 874) << 16);
    if ((v199 & 0x100) != 0)
    {
      if ((*(_BYTE *)(v11 + 158) & 1) != 0)
        goto LABEL_238;
      if (!gLogDatapath)
        goto LABEL_238;
      v32 = __nwlog_obj();
      if (!os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
        goto LABEL_238;
      v248 = *(_QWORD *)(v11 + 488);
      v249 = *(_DWORD *)(*(_QWORD *)(v11 + 480) + 372);
      v250 = *(_DWORD *)(v11 + 860);
      if (v248)
        LODWORD(v248) = *(_DWORD *)(v248 + 424);
      *(_DWORD *)buf = 136447490;
      *(_QWORD *)&buf[4] = "nw_http1_connection_close";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v11 + 74;
      *(_WORD *)&buf[22] = 2080;
      *(_QWORD *)&buf[24] = " ";
      *(_WORD *)&buf[32] = 1024;
      *(_DWORD *)&buf[34] = v249;
      *(_WORD *)&buf[38] = 1024;
      *(_DWORD *)&buf[40] = v250;
      *(_WORD *)&buf[44] = 1024;
      *(_DWORD *)&buf[46] = v248;
      v36 = "%{public}s %{public}s%s<i%u:c%u:s%u> already closed";
      goto LABEL_78;
    }
    v201 = (_WORD *)(v11 + 872);
    *(_BYTE *)(v11 + 874) = BYTE2(v200);
    *(_WORD *)(v11 + 872) = v200 | 0x100;
    if ((*(_BYTE *)(v11 + 158) & 1) == 0)
    {
      if (gLogDatapath)
      {
        v337 = __nwlog_obj();
        if (os_log_type_enabled(v337, OS_LOG_TYPE_DEBUG))
        {
          v338 = *(_QWORD *)(v11 + 488);
          v339 = *(_DWORD *)(*(_QWORD *)(v11 + 480) + 372);
          v340 = *(_DWORD *)(v11 + 860);
          if (v338)
            LODWORD(v338) = *(_DWORD *)(v338 + 424);
          *(_DWORD *)buf = 136447490;
          *(_QWORD *)&buf[4] = "nw_http1_connection_close";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v11 + 74;
          *(_WORD *)&buf[22] = 2080;
          *(_QWORD *)&buf[24] = " ";
          *(_WORD *)&buf[32] = 1024;
          *(_DWORD *)&buf[34] = v339;
          *(_WORD *)&buf[38] = 1024;
          *(_DWORD *)&buf[40] = v340;
          *(_WORD *)&buf[44] = 1024;
          *(_DWORD *)&buf[46] = v338;
          _os_log_impl(&dword_182FBE000, v337, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> http connection closed, increasing pool width", buf, 0x32u);
        }
      }
    }
    v202 = *(_QWORD *)(v11 + 480);
    if (!v202)
    {
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
      v341 = (char *)_os_log_send_and_compose_impl();
      v398[0] = 16;
      v394[0] = OS_LOG_TYPE_DEFAULT;
      if (!__nwlog_fault(v341, v398, v394))
        goto LABEL_769;
      if (v398[0] == 17)
      {
        v342 = __nwlog_obj();
        v343 = v398[0];
        if (!os_log_type_enabled(v342, (os_log_type_t)v398[0]))
          goto LABEL_769;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
        v344 = "%{public}s called with null http1";
      }
      else if (v394[0])
      {
        v360 = (char *)__nw_create_backtrace_string();
        v342 = __nwlog_obj();
        v343 = v398[0];
        v361 = os_log_type_enabled(v342, (os_log_type_t)v398[0]);
        if (v360)
        {
          if (v361)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v360;
            _os_log_impl(&dword_182FBE000, v342, v343, "%{public}s called with null http1, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v360);
          goto LABEL_769;
        }
        if (!v361)
          goto LABEL_769;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
        v344 = "%{public}s called with null http1, no backtrace";
      }
      else
      {
        v342 = __nwlog_obj();
        v343 = v398[0];
        if (!os_log_type_enabled(v342, (os_log_type_t)v398[0]))
          goto LABEL_769;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
        v344 = "%{public}s called with null http1, backtrace limit exceeded";
      }
      v382 = buf;
LABEL_768:
      _os_log_impl(&dword_182FBE000, v342, v343, v344, v382, 0xCu);
      goto LABEL_769;
    }
    v203 = (unsigned __int16)*v201;
    v204 = v203 | (*(unsigned __int8 *)(v11 + 874) << 16);
    if ((v203 & 0x800) != 0)
    {
      if ((*(_BYTE *)(v11 + 158) & 1) == 0)
      {
        if (gLogDatapath)
        {
          v256 = __nwlog_obj();
          if (os_log_type_enabled(v256, OS_LOG_TYPE_DEBUG))
          {
            v257 = *(_QWORD *)(v11 + 488);
            v258 = *(_DWORD *)(*(_QWORD *)(v11 + 480) + 372);
            v259 = *(_DWORD *)(v11 + 860);
            if (v257)
              LODWORD(v257) = *(_DWORD *)(v257 + 424);
            *(_DWORD *)buf = 136447490;
            *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v11 + 74;
            *(_WORD *)&buf[22] = 2080;
            *(_QWORD *)&buf[24] = " ";
            *(_WORD *)&buf[32] = 1024;
            *(_DWORD *)&buf[34] = v258;
            *(_WORD *)&buf[38] = 1024;
            *(_DWORD *)&buf[40] = v259;
            *(_WORD *)&buf[44] = 1024;
            *(_DWORD *)&buf[46] = v257;
            _os_log_impl(&dword_182FBE000, v256, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> Connection already marked as not-reusable, ignoring", buf, 0x32u);
          }
        }
      }
      goto LABEL_592;
    }
    *(_BYTE *)(v11 + 874) = BYTE2(v204);
    *v201 = v204 | 0x800;
    v205 = *(unsigned int *)(v202 + 368) + 1;
    v206 = v205 << 31 >> 31;
    *(_DWORD *)(v202 + 368) = v205;
    if (v206 == v205 && (v206 & 0x8000000000000000) == 0)
    {
LABEL_587:
      if ((*(_BYTE *)(v11 + 158) & 1) == 0)
      {
        if (gLogDatapath)
        {
          v355 = __nwlog_obj();
          if (os_log_type_enabled(v355, OS_LOG_TYPE_DEBUG))
          {
            v356 = *(_QWORD *)(v11 + 488);
            v357 = *(_DWORD *)(*(_QWORD *)(v11 + 480) + 372);
            v358 = *(_DWORD *)(v11 + 860);
            if (v356)
              LODWORD(v356) = *(_DWORD *)(v356 + 424);
            v359 = *(_DWORD *)(v202 + 368) + *(_DWORD *)(v202 + 364);
            *(_DWORD *)buf = 136447746;
            *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v11 + 74;
            *(_WORD *)&buf[22] = 2080;
            *(_QWORD *)&buf[24] = " ";
            *(_WORD *)&buf[32] = 1024;
            *(_DWORD *)&buf[34] = v357;
            *(_WORD *)&buf[38] = 1024;
            *(_DWORD *)&buf[40] = v358;
            *(_WORD *)&buf[44] = 1024;
            *(_DWORD *)&buf[46] = v356;
            *(_WORD *)&buf[50] = 1024;
            *(_DWORD *)&buf[52] = v359;
            _os_log_impl(&dword_182FBE000, v355, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> connection marked as not-reusable, increased pool width to %u", buf, 0x38u);
          }
        }
      }
      v309 = *(void **)(v11 + 496);
      if (!v309)
      {
        __nwlog_obj();
        *(_DWORD *)v398 = 136446210;
        *(_QWORD *)&v398[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
        v341 = (char *)_os_log_send_and_compose_impl();
        v394[0] = OS_LOG_TYPE_ERROR;
        type = OS_LOG_TYPE_DEFAULT;
        if (!__nwlog_fault(v341, v394, &type))
          goto LABEL_769;
        if (v394[0] == OS_LOG_TYPE_FAULT)
        {
          v342 = __nwlog_obj();
          v343 = v394[0];
          if (!os_log_type_enabled(v342, v394[0]))
            goto LABEL_769;
          *(_DWORD *)v398 = 136446210;
          *(_QWORD *)&v398[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
          v344 = "%{public}s called with null http1_connection->context";
LABEL_767:
          v382 = v398;
          goto LABEL_768;
        }
        if (type == OS_LOG_TYPE_DEFAULT)
        {
          v342 = __nwlog_obj();
          v343 = v394[0];
          if (!os_log_type_enabled(v342, v394[0]))
            goto LABEL_769;
          *(_DWORD *)v398 = 136446210;
          *(_QWORD *)&v398[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
          v344 = "%{public}s called with null http1_connection->context, backtrace limit exceeded";
          goto LABEL_767;
        }
        v377 = (char *)__nw_create_backtrace_string();
        v342 = __nwlog_obj();
        v343 = v394[0];
        v378 = os_log_type_enabled(v342, v394[0]);
        if (!v377)
        {
          if (!v378)
            goto LABEL_769;
          *(_DWORD *)v398 = 136446210;
          *(_QWORD *)&v398[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
          v344 = "%{public}s called with null http1_connection->context, no backtrace";
          goto LABEL_767;
        }
        if (v378)
        {
          *(_DWORD *)v398 = 136446466;
          *(_QWORD *)&v398[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
          *(_WORD *)&v398[12] = 2082;
          *(_QWORD *)&v398[14] = v377;
          v379 = "%{public}s called with null http1_connection->context, dumping backtrace:%{public}s";
LABEL_734:
          _os_log_impl(&dword_182FBE000, v342, v343, v379, v398, 0x16u);
        }
LABEL_735:
        free(v377);
        if (!v341)
        {
LABEL_592:
          if (!*(_QWORD *)(v11 + 488))
          {
            v312 = *(_QWORD *)(v11 + 784);
            if (v312)
            {
              nw_queue_set_timer_values(v312, 0x8000000000000000, 0xFFFFFFFFFFFFFFFFLL, 0x3B9ACA00uLL);
            }
            else
            {
              if ((*(_BYTE *)(v11 + 158) & 1) == 0)
              {
                v313 = __nwlog_obj();
                if (os_log_type_enabled(v313, OS_LOG_TYPE_ERROR))
                {
                  v314 = *(_QWORD *)(v11 + 488);
                  v315 = *(_DWORD *)(*(_QWORD *)(v11 + 480) + 372);
                  v316 = *(_DWORD *)(v11 + 860);
                  if (v314)
                    LODWORD(v314) = *(_DWORD *)(v314 + 424);
                  *(_DWORD *)buf = 136447490;
                  *(_QWORD *)&buf[4] = "nw_http1_connection_close";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = v11 + 74;
                  *(_WORD *)&buf[22] = 2080;
                  *(_QWORD *)&buf[24] = " ";
                  *(_WORD *)&buf[32] = 1024;
                  *(_DWORD *)&buf[34] = v315;
                  *(_WORD *)&buf[38] = 1024;
                  *(_DWORD *)&buf[40] = v316;
                  *(_WORD *)&buf[44] = 1024;
                  *(_DWORD *)&buf[46] = v314;
                  _os_log_impl(&dword_182FBE000, v313, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u:c%u:s%u> No destroy timer on HTTP/1 connection when closing", buf, 0x32u);
                }
              }
              v317 = *(_QWORD *)(v11 + 608);
              v318 = *(void **)(v11 + 496);
              *(_QWORD *)buf = MEMORY[0x1E0C809B0];
              *(_QWORD *)&buf[8] = 0x40000000;
              *(_QWORD *)&buf[16] = ___ZL25nw_http1_connection_closeP19nw_http1_connection_block_invoke;
              *(_QWORD *)&buf[24] = &unk_1E14A14F0;
              *(_QWORD *)&buf[32] = v317;
              nw_queue_context_async(v318, buf);
            }
          }
LABEL_238:
          if (((*(unsigned __int16 *)(v11 + 872) | (*(unsigned __int8 *)(v11 + 874) << 16)) & 0x20000) == 0)
            return;
          if ((*(_BYTE *)(v8 + 376) & 1) == 0)
            goto LABEL_240;
          v127 = *(_QWORD ***)(v8 + 328);
          if (!v127)
            goto LABEL_265;
          v128 = (unsigned __int16 *)(v11 + 872);
          v129 = *v127;
          if (v129 && *v129)
          {
            v130 = *(NSObject **)(v8 + 264);
            if (v130)
            {
              v131 = nw_parameters_copy(v130);
              *(_QWORD *)(v8 + 224) = v11;
              if ((***(unsigned int (****)(_QWORD, _QWORD, nw_parameters_t))(v8 + 328))(*(_QWORD *)(v8 + 328), *(_QWORD *)(v8 + 280), v131)&& *(_QWORD *)(v11 + 488)&& !*(_QWORD *)(v8 + 224))
              {
                if ((*(_BYTE *)(v8 + 158) & 1) == 0)
                {
                  if (gLogDatapath)
                  {
                    v302 = __nwlog_obj();
                    if (os_log_type_enabled(v302, OS_LOG_TYPE_DEBUG))
                    {
                      v303 = *(_DWORD *)(v8 + 372);
                      *(_DWORD *)buf = 136446978;
                      *(_QWORD *)&buf[4] = "nw_http1_attempt_trigger_new_flow";
                      *(_WORD *)&buf[12] = 2082;
                      *(_QWORD *)&buf[14] = v8 + 74;
                      *(_WORD *)&buf[22] = 2080;
                      *(_QWORD *)&buf[24] = " ";
                      *(_WORD *)&buf[32] = 1024;
                      *(_DWORD *)&buf[34] = v303;
                      _os_log_impl(&dword_182FBE000, v302, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> sucessfully associated new flow stream with connection, awaiting connected", buf, 0x26u);
                    }
                  }
                }
                v163 = *v128;
                v164 = (v163 | (*((unsigned __int8 *)v128 + 2) << 16)) & 0xFFFDFFFF;
                *v128 = v163;
                *((_BYTE *)v128 + 2) = BYTE2(v164);
                goto LABEL_351;
              }
              if ((*(_BYTE *)(v8 + 158) & 1) == 0)
              {
                v132 = __nwlog_obj();
                if (os_log_type_enabled(v132, OS_LOG_TYPE_ERROR))
                {
                  v133 = *(_DWORD *)(v8 + 372);
                  *(_DWORD *)buf = 136447234;
                  *(_QWORD *)&buf[4] = "nw_http1_attempt_trigger_new_flow";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = v8 + 74;
                  *(_WORD *)&buf[22] = 2080;
                  *(_QWORD *)&buf[24] = " ";
                  *(_WORD *)&buf[32] = 1024;
                  *(_DWORD *)&buf[34] = v133;
                  *(_WORD *)&buf[38] = 2048;
                  *(_QWORD *)&buf[40] = v11;
                  _os_log_impl(&dword_182FBE000, v132, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u> listen handler didn't accept the new flow, closing connection %p", buf, 0x30u);
                }
              }
              v134 = *v128;
              v135 = v134 | (*(unsigned __int8 *)(v11 + 874) << 16);
              if ((v134 & 0x100) != 0)
              {
                if ((*(_BYTE *)(v11 + 158) & 1) == 0)
                {
                  if (gLogDatapath)
                  {
                    v152 = __nwlog_obj();
                    if (os_log_type_enabled(v152, OS_LOG_TYPE_DEBUG))
                    {
                      v153 = *(_QWORD *)(v11 + 488);
                      v154 = *(_DWORD *)(*(_QWORD *)(v11 + 480) + 372);
                      v155 = *(_DWORD *)(v11 + 860);
                      if (v153)
                        LODWORD(v153) = *(_DWORD *)(v153 + 424);
                      *(_DWORD *)buf = 136447490;
                      *(_QWORD *)&buf[4] = "nw_http1_connection_close";
                      *(_WORD *)&buf[12] = 2082;
                      *(_QWORD *)&buf[14] = v11 + 74;
                      *(_WORD *)&buf[22] = 2080;
                      *(_QWORD *)&buf[24] = " ";
                      *(_WORD *)&buf[32] = 1024;
                      *(_DWORD *)&buf[34] = v154;
                      *(_WORD *)&buf[38] = 1024;
                      *(_DWORD *)&buf[40] = v155;
                      *(_WORD *)&buf[44] = 1024;
                      *(_DWORD *)&buf[46] = v153;
                      _os_log_impl(&dword_182FBE000, v152, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> already closed", buf, 0x32u);
                    }
                  }
                }
                goto LABEL_351;
              }
              *(_BYTE *)(v11 + 874) = BYTE2(v135);
              *v128 = v135 | 0x100;
              if ((*(_BYTE *)(v11 + 158) & 1) == 0)
              {
                if (gLogDatapath)
                {
                  v272 = __nwlog_obj();
                  if (os_log_type_enabled(v272, OS_LOG_TYPE_DEBUG))
                  {
                    v273 = *(_QWORD *)(v11 + 488);
                    v274 = *(_DWORD *)(*(_QWORD *)(v11 + 480) + 372);
                    v275 = *(_DWORD *)(v11 + 860);
                    if (v273)
                      LODWORD(v273) = *(_DWORD *)(v273 + 424);
                    *(_DWORD *)buf = 136447490;
                    *(_QWORD *)&buf[4] = "nw_http1_connection_close";
                    *(_WORD *)&buf[12] = 2082;
                    *(_QWORD *)&buf[14] = v11 + 74;
                    *(_WORD *)&buf[22] = 2080;
                    *(_QWORD *)&buf[24] = " ";
                    *(_WORD *)&buf[32] = 1024;
                    *(_DWORD *)&buf[34] = v274;
                    *(_WORD *)&buf[38] = 1024;
                    *(_DWORD *)&buf[40] = v275;
                    *(_WORD *)&buf[44] = 1024;
                    *(_DWORD *)&buf[46] = v273;
                    _os_log_impl(&dword_182FBE000, v272, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> http connection closed, increasing pool width", buf, 0x32u);
                  }
                }
              }
              v136 = *(_QWORD *)(v11 + 480);
              if (!v136)
              {
                __nwlog_obj();
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
                v268 = (char *)_os_log_send_and_compose_impl();
                v398[0] = 16;
                v394[0] = OS_LOG_TYPE_DEFAULT;
                if (!__nwlog_fault(v268, v398, v394))
                  goto LABEL_652;
                if (v398[0] == 17)
                {
                  v269 = __nwlog_obj();
                  v270 = v398[0];
                  if (!os_log_type_enabled(v269, (os_log_type_t)v398[0]))
                    goto LABEL_652;
                  *(_DWORD *)buf = 136446210;
                  *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
                  v271 = "%{public}s called with null http1";
                }
                else if (v394[0])
                {
                  v288 = (char *)__nw_create_backtrace_string();
                  v269 = __nwlog_obj();
                  v270 = v398[0];
                  v289 = os_log_type_enabled(v269, (os_log_type_t)v398[0]);
                  if (v288)
                  {
                    if (v289)
                    {
                      *(_DWORD *)buf = 136446466;
                      *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
                      *(_WORD *)&buf[12] = 2082;
                      *(_QWORD *)&buf[14] = v288;
                      _os_log_impl(&dword_182FBE000, v269, v270, "%{public}s called with null http1, dumping backtrace:%{public}s", buf, 0x16u);
                    }
                    free(v288);
                    goto LABEL_652;
                  }
                  if (!v289)
                    goto LABEL_652;
                  *(_DWORD *)buf = 136446210;
                  *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
                  v271 = "%{public}s called with null http1, no backtrace";
                }
                else
                {
                  v269 = __nwlog_obj();
                  v270 = v398[0];
                  if (!os_log_type_enabled(v269, (os_log_type_t)v398[0]))
                    goto LABEL_652;
                  *(_DWORD *)buf = 136446210;
                  *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
                  v271 = "%{public}s called with null http1, backtrace limit exceeded";
                }
                v331 = buf;
LABEL_651:
                _os_log_impl(&dword_182FBE000, v269, v270, v271, v331, 0xCu);
                goto LABEL_652;
              }
              v137 = *v128;
              v138 = v137 | (*(unsigned __int8 *)(v11 + 874) << 16);
              if ((v137 & 0x800) != 0)
              {
                if ((*(_BYTE *)(v11 + 158) & 1) == 0)
                {
                  if (gLogDatapath)
                  {
                    v159 = __nwlog_obj();
                    if (os_log_type_enabled(v159, OS_LOG_TYPE_DEBUG))
                    {
                      v160 = *(_QWORD *)(v11 + 488);
                      v161 = *(_DWORD *)(*(_QWORD *)(v11 + 480) + 372);
                      v162 = *(_DWORD *)(v11 + 860);
                      if (v160)
                        LODWORD(v160) = *(_DWORD *)(v160 + 424);
                      *(_DWORD *)buf = 136447490;
                      *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
                      *(_WORD *)&buf[12] = 2082;
                      *(_QWORD *)&buf[14] = v11 + 74;
                      *(_WORD *)&buf[22] = 2080;
                      *(_QWORD *)&buf[24] = " ";
                      *(_WORD *)&buf[32] = 1024;
                      *(_DWORD *)&buf[34] = v161;
                      *(_WORD *)&buf[38] = 1024;
                      *(_DWORD *)&buf[40] = v162;
                      *(_WORD *)&buf[44] = 1024;
                      *(_DWORD *)&buf[46] = v160;
                      _os_log_impl(&dword_182FBE000, v159, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> Connection already marked as not-reusable, ignoring", buf, 0x32u);
                    }
                  }
                }
                goto LABEL_342;
              }
              *(_BYTE *)(v11 + 874) = BYTE2(v138);
              *v128 = v138 | 0x800;
              v139 = *(unsigned int *)(v136 + 368) + 1;
              v140 = v139 << 31 >> 31;
              *(_DWORD *)(v136 + 368) = v139;
              if (v140 == v139 && (v140 & 0x8000000000000000) == 0)
              {
LABEL_337:
                if ((*(_BYTE *)(v11 + 158) & 1) == 0)
                {
                  if (gLogDatapath)
                  {
                    v290 = __nwlog_obj();
                    if (os_log_type_enabled(v290, OS_LOG_TYPE_DEBUG))
                    {
                      v291 = *(_QWORD *)(v11 + 488);
                      v292 = *(_DWORD *)(*(_QWORD *)(v11 + 480) + 372);
                      v293 = *(_DWORD *)(v11 + 860);
                      if (v291)
                        LODWORD(v291) = *(_DWORD *)(v291 + 424);
                      v294 = *(_DWORD *)(v136 + 368) + *(_DWORD *)(v136 + 364);
                      *(_DWORD *)buf = 136447746;
                      *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
                      *(_WORD *)&buf[12] = 2082;
                      *(_QWORD *)&buf[14] = v11 + 74;
                      *(_WORD *)&buf[22] = 2080;
                      *(_QWORD *)&buf[24] = " ";
                      *(_WORD *)&buf[32] = 1024;
                      *(_DWORD *)&buf[34] = v292;
                      *(_WORD *)&buf[38] = 1024;
                      *(_DWORD *)&buf[40] = v293;
                      *(_WORD *)&buf[44] = 1024;
                      *(_DWORD *)&buf[46] = v291;
                      *(_WORD *)&buf[50] = 1024;
                      *(_DWORD *)&buf[52] = v294;
                      _os_log_impl(&dword_182FBE000, v290, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> connection marked as not-reusable, increased pool width to %u", buf, 0x38u);
                    }
                  }
                }
                v175 = *(void **)(v11 + 496);
                if (!v175)
                {
                  __nwlog_obj();
                  *(_DWORD *)v398 = 136446210;
                  *(_QWORD *)&v398[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
                  v268 = (char *)_os_log_send_and_compose_impl();
                  v394[0] = OS_LOG_TYPE_ERROR;
                  type = OS_LOG_TYPE_DEFAULT;
                  if (!__nwlog_fault(v268, v394, &type))
                    goto LABEL_652;
                  if (v394[0] == OS_LOG_TYPE_FAULT)
                  {
                    v269 = __nwlog_obj();
                    v270 = v394[0];
                    if (!os_log_type_enabled(v269, v394[0]))
                      goto LABEL_652;
                    *(_DWORD *)v398 = 136446210;
                    *(_QWORD *)&v398[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
                    v271 = "%{public}s called with null http1_connection->context";
LABEL_650:
                    v331 = v398;
                    goto LABEL_651;
                  }
                  if (type == OS_LOG_TYPE_DEFAULT)
                  {
                    v269 = __nwlog_obj();
                    v270 = v394[0];
                    if (!os_log_type_enabled(v269, v394[0]))
                      goto LABEL_652;
                    *(_DWORD *)v398 = 136446210;
                    *(_QWORD *)&v398[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
                    v271 = "%{public}s called with null http1_connection->context, backtrace limit exceeded";
                    goto LABEL_650;
                  }
                  v304 = (char *)__nw_create_backtrace_string();
                  v269 = __nwlog_obj();
                  v270 = v394[0];
                  v305 = os_log_type_enabled(v269, v394[0]);
                  if (!v304)
                  {
                    if (!v305)
                      goto LABEL_652;
                    *(_DWORD *)v398 = 136446210;
                    *(_QWORD *)&v398[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
                    v271 = "%{public}s called with null http1_connection->context, no backtrace";
                    goto LABEL_650;
                  }
                  if (v305)
                  {
                    *(_DWORD *)v398 = 136446466;
                    *(_QWORD *)&v398[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
                    *(_WORD *)&v398[12] = 2082;
                    *(_QWORD *)&v398[14] = v304;
                    v306 = "%{public}s called with null http1_connection->context, dumping backtrace:%{public}s";
LABEL_578:
                    _os_log_impl(&dword_182FBE000, v269, v270, v306, v398, 0x16u);
                  }
LABEL_579:
                  free(v304);
                  if (!v268)
                  {
LABEL_342:
                    if (!*(_QWORD *)(v11 + 488))
                    {
                      v178 = *(_QWORD *)(v11 + 784);
                      if (v178)
                      {
                        nw_queue_set_timer_values(v178, 0x8000000000000000, 0xFFFFFFFFFFFFFFFFLL, 0x3B9ACA00uLL);
                      }
                      else
                      {
                        if ((*(_BYTE *)(v11 + 158) & 1) == 0)
                        {
                          v179 = __nwlog_obj();
                          if (os_log_type_enabled(v179, OS_LOG_TYPE_ERROR))
                          {
                            v180 = *(_QWORD *)(v11 + 488);
                            v181 = *(_DWORD *)(*(_QWORD *)(v11 + 480) + 372);
                            v182 = *(_DWORD *)(v11 + 860);
                            if (v180)
                              LODWORD(v180) = *(_DWORD *)(v180 + 424);
                            *(_DWORD *)buf = 136447490;
                            *(_QWORD *)&buf[4] = "nw_http1_connection_close";
                            *(_WORD *)&buf[12] = 2082;
                            *(_QWORD *)&buf[14] = v11 + 74;
                            *(_WORD *)&buf[22] = 2080;
                            *(_QWORD *)&buf[24] = " ";
                            *(_WORD *)&buf[32] = 1024;
                            *(_DWORD *)&buf[34] = v181;
                            *(_WORD *)&buf[38] = 1024;
                            *(_DWORD *)&buf[40] = v182;
                            *(_WORD *)&buf[44] = 1024;
                            *(_DWORD *)&buf[46] = v180;
                            _os_log_impl(&dword_182FBE000, v179, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u:c%u:s%u> No destroy timer on HTTP/1 connection when closing", buf, 0x32u);
                          }
                        }
                        v183 = *(_QWORD *)(v11 + 608);
                        v184 = *(void **)(v11 + 496);
                        *(_QWORD *)buf = MEMORY[0x1E0C809B0];
                        *(_QWORD *)&buf[8] = 0x40000000;
                        *(_QWORD *)&buf[16] = ___ZL25nw_http1_connection_closeP19nw_http1_connection_block_invoke;
                        *(_QWORD *)&buf[24] = &unk_1E14A14F0;
                        *(_QWORD *)&buf[32] = v183;
                        nw_queue_context_async(v184, buf);
                      }
                    }
LABEL_351:
                    if (v131)
                      os_release(v131);
                    return;
                  }
LABEL_653:
                  free(v268);
                  goto LABEL_342;
                }
                v176 = *(_QWORD *)(v11 + 480);
                if (v176)
                {
                  v177 = *(_QWORD *)(v176 + 200);
                  *(_QWORD *)buf = MEMORY[0x1E0C809B0];
                  *(_QWORD *)&buf[8] = 0x40000000;
                  *(_QWORD *)&buf[16] = ___ZL56nw_http1_match_idle_connection_with_pending_stream_asyncP19nw_http1_connection_block_invoke;
                  *(_QWORD *)&buf[24] = &unk_1E14A1518;
                  *(_QWORD *)&buf[32] = v177;
                  nw_queue_context_async(v175, buf);
                  goto LABEL_342;
                }
                __nwlog_obj();
                *(_DWORD *)v398 = 136446210;
                *(_QWORD *)&v398[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
                v268 = (char *)_os_log_send_and_compose_impl();
                v394[0] = OS_LOG_TYPE_ERROR;
                type = OS_LOG_TYPE_DEFAULT;
                if (__nwlog_fault(v268, v394, &type))
                {
                  if (v394[0] == OS_LOG_TYPE_FAULT)
                  {
                    v269 = __nwlog_obj();
                    v270 = v394[0];
                    if (!os_log_type_enabled(v269, v394[0]))
                      goto LABEL_652;
                    *(_DWORD *)v398 = 136446210;
                    *(_QWORD *)&v398[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
                    v271 = "%{public}s called with null http1";
                    goto LABEL_650;
                  }
                  if (type == OS_LOG_TYPE_DEFAULT)
                  {
                    v269 = __nwlog_obj();
                    v270 = v394[0];
                    if (!os_log_type_enabled(v269, v394[0]))
                      goto LABEL_652;
                    *(_DWORD *)v398 = 136446210;
                    *(_QWORD *)&v398[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
                    v271 = "%{public}s called with null http1, backtrace limit exceeded";
                    goto LABEL_650;
                  }
                  v304 = (char *)__nw_create_backtrace_string();
                  v269 = __nwlog_obj();
                  v270 = v394[0];
                  v307 = os_log_type_enabled(v269, v394[0]);
                  if (!v304)
                  {
                    if (!v307)
                      goto LABEL_652;
                    *(_DWORD *)v398 = 136446210;
                    *(_QWORD *)&v398[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
                    v271 = "%{public}s called with null http1, no backtrace";
                    goto LABEL_650;
                  }
                  if (v307)
                  {
                    *(_DWORD *)v398 = 136446466;
                    *(_QWORD *)&v398[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
                    *(_WORD *)&v398[12] = 2082;
                    *(_QWORD *)&v398[14] = v304;
                    v306 = "%{public}s called with null http1, dumping backtrace:%{public}s";
                    goto LABEL_578;
                  }
                  goto LABEL_579;
                }
LABEL_652:
                if (!v268)
                  goto LABEL_342;
                goto LABEL_653;
              }
              __nwlog_obj();
              v141 = *(unsigned int *)(v136 + 368);
              *(_DWORD *)buf = 136446978;
              *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = "http1->nonresuable_connections";
              *(_WORD *)&buf[22] = 2048;
              *(_QWORD *)&buf[24] = 1;
              *(_WORD *)&buf[32] = 2048;
              *(_QWORD *)&buf[34] = v141;
              v142 = (char *)_os_log_send_and_compose_impl();
              v398[0] = 16;
              v394[0] = OS_LOG_TYPE_DEFAULT;
              if (__nwlog_fault(v142, v398, v394))
              {
                if (v398[0] == 17)
                {
                  v143 = __nwlog_obj();
                  v144 = v398[0];
                  if (os_log_type_enabled(v143, (os_log_type_t)v398[0]))
                  {
                    v145 = *(unsigned int *)(v136 + 368);
                    *(_DWORD *)buf = 136446978;
                    *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
                    *(_WORD *)&buf[12] = 2082;
                    *(_QWORD *)&buf[14] = "http1->nonresuable_connections";
                    *(_WORD *)&buf[22] = 2048;
                    *(_QWORD *)&buf[24] = 1;
                    *(_WORD *)&buf[32] = 2048;
                    *(_QWORD *)&buf[34] = v145;
                    v146 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_333:
                    _os_log_impl(&dword_182FBE000, v143, v144, v146, buf, 0x2Au);
                  }
                }
                else if (v394[0])
                {
                  v165 = (char *)__nw_create_backtrace_string();
                  v143 = __nwlog_obj();
                  v144 = v398[0];
                  v166 = os_log_type_enabled(v143, (os_log_type_t)v398[0]);
                  if (v165)
                  {
                    if (v166)
                    {
                      v167 = *(unsigned int *)(v136 + 368);
                      *(_DWORD *)buf = 136447234;
                      *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
                      *(_WORD *)&buf[12] = 2082;
                      *(_QWORD *)&buf[14] = "http1->nonresuable_connections";
                      *(_WORD *)&buf[22] = 2048;
                      *(_QWORD *)&buf[24] = 1;
                      *(_WORD *)&buf[32] = 2048;
                      *(_QWORD *)&buf[34] = v167;
                      *(_WORD *)&buf[42] = 2082;
                      *(_QWORD *)&buf[44] = v165;
                      _os_log_impl(&dword_182FBE000, v143, v144, "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
                    }
                    free(v165);
                    goto LABEL_334;
                  }
                  if (v166)
                  {
                    v174 = *(unsigned int *)(v136 + 368);
                    *(_DWORD *)buf = 136446978;
                    *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
                    *(_WORD *)&buf[12] = 2082;
                    *(_QWORD *)&buf[14] = "http1->nonresuable_connections";
                    *(_WORD *)&buf[22] = 2048;
                    *(_QWORD *)&buf[24] = 1;
                    *(_WORD *)&buf[32] = 2048;
                    *(_QWORD *)&buf[34] = v174;
                    v146 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
                    goto LABEL_333;
                  }
                }
                else
                {
                  v143 = __nwlog_obj();
                  v144 = v398[0];
                  if (os_log_type_enabled(v143, (os_log_type_t)v398[0]))
                  {
                    v168 = *(unsigned int *)(v136 + 368);
                    *(_DWORD *)buf = 136446978;
                    *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
                    *(_WORD *)&buf[12] = 2082;
                    *(_QWORD *)&buf[14] = "http1->nonresuable_connections";
                    *(_WORD *)&buf[22] = 2048;
                    *(_QWORD *)&buf[24] = 1;
                    *(_WORD *)&buf[32] = 2048;
                    *(_QWORD *)&buf[34] = v168;
                    v146 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
                    goto LABEL_333;
                  }
                }
              }
LABEL_334:
              if (v142)
                free(v142);
              *(_DWORD *)(v136 + 368) = -1;
              goto LABEL_337;
            }
            if ((*(_BYTE *)(v8 + 158) & 1) == 0)
            {
              v150 = __nwlog_obj();
              if (os_log_type_enabled(v150, OS_LOG_TYPE_ERROR))
              {
                v151 = *(_DWORD *)(v8 + 372);
                *(_DWORD *)buf = 136446978;
                *(_QWORD *)&buf[4] = "nw_http1_attempt_trigger_new_flow";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = v8 + 74;
                *(_WORD *)&buf[22] = 2080;
                *(_QWORD *)&buf[24] = " ";
                *(_WORD *)&buf[32] = 1024;
                *(_DWORD *)&buf[34] = v151;
                _os_log_impl(&dword_182FBE000, v150, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u> http1->parameters is NULL when opening responder stream", buf, 0x26u);
              }
            }
            __nwlog_obj();
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_http1_attempt_trigger_new_flow";
            v116 = (char *)_os_log_send_and_compose_impl();
            v398[0] = 16;
            v394[0] = OS_LOG_TYPE_DEFAULT;
            if (!__nwlog_fault(v116, v398, v394))
              goto LABEL_487;
            if (v398[0] == 17)
            {
              v117 = __nwlog_obj();
              v118 = v398[0];
              if (!os_log_type_enabled(v117, (os_log_type_t)v398[0]))
                goto LABEL_487;
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_http1_attempt_trigger_new_flow";
              v119 = "%{public}s http1->parameters is NULL when opening responder stream";
              goto LABEL_486;
            }
            if (v394[0] == OS_LOG_TYPE_DEFAULT)
            {
              v117 = __nwlog_obj();
              v118 = v398[0];
              if (!os_log_type_enabled(v117, (os_log_type_t)v398[0]))
                goto LABEL_487;
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_http1_attempt_trigger_new_flow";
              v119 = "%{public}s http1->parameters is NULL when opening responder stream, backtrace limit exceeded";
              goto LABEL_486;
            }
            v156 = (char *)__nw_create_backtrace_string();
            v117 = __nwlog_obj();
            v118 = v398[0];
            v157 = os_log_type_enabled(v117, (os_log_type_t)v398[0]);
            if (!v156)
            {
              if (!v157)
                goto LABEL_487;
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_http1_attempt_trigger_new_flow";
              v119 = "%{public}s http1->parameters is NULL when opening responder stream, no backtrace";
              goto LABEL_486;
            }
            if (v157)
            {
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "nw_http1_attempt_trigger_new_flow";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v156;
              v158 = "%{public}s http1->parameters is NULL when opening responder stream, dumping backtrace:%{public}s";
LABEL_479:
              _os_log_impl(&dword_182FBE000, v117, v118, v158, buf, 0x16u);
              goto LABEL_480;
            }
            goto LABEL_480;
          }
          if ((*(_BYTE *)(v8 + 158) & 1) == 0)
          {
            v230 = __nwlog_obj();
            if (os_log_type_enabled(v230, OS_LOG_TYPE_ERROR))
            {
              v231 = *(_DWORD *)(v8 + 372);
              *(_DWORD *)buf = 136446978;
              *(_QWORD *)&buf[4] = "nw_http1_new_flow_valid";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v8 + 74;
              *(_WORD *)&buf[22] = 2080;
              *(_QWORD *)&buf[24] = " ";
              *(_WORD *)&buf[32] = 1024;
              *(_DWORD *)&buf[34] = v231;
              _os_log_impl(&dword_182FBE000, v230, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u> listen handler has no new_flow callback, ignoring incoming flow", buf, 0x26u);
            }
          }
          v232 = *v128;
          v233 = v232 | (*(unsigned __int8 *)(v11 + 874) << 16);
          if ((v232 & 0x100) != 0)
            goto LABEL_454;
          *(_BYTE *)(v11 + 874) = BYTE2(v233);
          *v128 = v233 | 0x100;
          if ((*(_BYTE *)(v11 + 158) & 1) == 0)
          {
            if (gLogDatapath)
            {
              v351 = __nwlog_obj();
              if (os_log_type_enabled(v351, OS_LOG_TYPE_DEBUG))
              {
                v352 = *(_QWORD *)(v11 + 488);
                v353 = *(_DWORD *)(*(_QWORD *)(v11 + 480) + 372);
                v354 = *(_DWORD *)(v11 + 860);
                if (v352)
                  LODWORD(v352) = *(_DWORD *)(v352 + 424);
                *(_DWORD *)buf = 136447490;
                *(_QWORD *)&buf[4] = "nw_http1_connection_close";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = v11 + 74;
                *(_WORD *)&buf[22] = 2080;
                *(_QWORD *)&buf[24] = " ";
                *(_WORD *)&buf[32] = 1024;
                *(_DWORD *)&buf[34] = v353;
                *(_WORD *)&buf[38] = 1024;
                *(_DWORD *)&buf[40] = v354;
                *(_WORD *)&buf[44] = 1024;
                *(_DWORD *)&buf[46] = v352;
                _os_log_impl(&dword_182FBE000, v351, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> http connection closed, increasing pool width", buf, 0x32u);
              }
            }
          }
          v234 = *(_QWORD *)(v11 + 480);
          if (!v234)
          {
            __nwlog_obj();
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
            v333 = (char *)_os_log_send_and_compose_impl();
            v398[0] = 16;
            v394[0] = OS_LOG_TYPE_DEFAULT;
            if (!__nwlog_fault(v333, v398, v394))
              goto LABEL_761;
            if (v398[0] != 17)
            {
              if (v394[0])
              {
                v367 = (char *)__nw_create_backtrace_string();
                v334 = __nwlog_obj();
                v335 = v398[0];
                v350 = os_log_type_enabled(v334, (os_log_type_t)v398[0]);
                if (v367)
                {
                  if (!v350)
                    goto LABEL_724;
                  *(_DWORD *)buf = 136446466;
                  *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = v367;
                  v369 = "%{public}s called with null http1, dumping backtrace:%{public}s";
                  v371 = buf;
                  goto LABEL_723;
                }
                goto LABEL_741;
              }
              goto LABEL_737;
            }
LABEL_683:
            v334 = __nwlog_obj();
            v335 = v398[0];
            if (!os_log_type_enabled(v334, (os_log_type_t)v398[0]))
              goto LABEL_761;
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
            v336 = "%{public}s called with null http1";
LABEL_743:
            v381 = buf;
LABEL_760:
            _os_log_impl(&dword_182FBE000, v334, v335, v336, v381, 0xCu);
            goto LABEL_761;
          }
          v235 = *v128;
          v236 = v235 | (*(unsigned __int8 *)(v11 + 874) << 16);
          if ((v235 & 0x800) != 0)
            goto LABEL_490;
          *(_BYTE *)(v11 + 874) = BYTE2(v236);
          *v128 = v236 | 0x800;
          v237 = *(unsigned int *)(v234 + 368) + 1;
          v238 = v237 << 31 >> 31;
          *(_DWORD *)(v234 + 368) = v237;
          if (v238 == v237 && (v238 & 0x8000000000000000) == 0)
          {
LABEL_634:
            if ((*(_BYTE *)(v11 + 158) & 1) == 0)
            {
              if (gLogDatapath)
              {
                v372 = __nwlog_obj();
                if (os_log_type_enabled(v372, OS_LOG_TYPE_DEBUG))
                {
                  v373 = *(_QWORD *)(v11 + 488);
                  v374 = *(_DWORD *)(*(_QWORD *)(v11 + 480) + 372);
                  v375 = *(_DWORD *)(v11 + 860);
                  if (v373)
                    LODWORD(v373) = *(_DWORD *)(v373 + 424);
                  v376 = *(_DWORD *)(v234 + 368) + *(_DWORD *)(v234 + 364);
                  *(_DWORD *)buf = 136447746;
                  *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = v11 + 74;
                  *(_WORD *)&buf[22] = 2080;
                  *(_QWORD *)&buf[24] = " ";
                  *(_WORD *)&buf[32] = 1024;
                  *(_DWORD *)&buf[34] = v374;
                  *(_WORD *)&buf[38] = 1024;
                  *(_DWORD *)&buf[40] = v375;
                  *(_WORD *)&buf[44] = 1024;
                  *(_DWORD *)&buf[46] = v373;
                  *(_WORD *)&buf[50] = 1024;
                  *(_DWORD *)&buf[52] = v376;
                  _os_log_impl(&dword_182FBE000, v372, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> connection marked as not-reusable, increased pool width to %u", buf, 0x38u);
                }
              }
            }
            v320 = *(void **)(v11 + 496);
            if (v320)
            {
              v321 = *(_QWORD *)(v11 + 480);
              if (v321)
                goto LABEL_613;
              goto LABEL_638;
            }
LABEL_673:
            __nwlog_obj();
            *(_DWORD *)v398 = 136446210;
            *(_QWORD *)&v398[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
            v333 = (char *)_os_log_send_and_compose_impl();
            v394[0] = OS_LOG_TYPE_ERROR;
            type = OS_LOG_TYPE_DEFAULT;
            if (!__nwlog_fault(v333, v394, &type))
              goto LABEL_761;
            if (v394[0] == OS_LOG_TYPE_FAULT)
            {
              v334 = __nwlog_obj();
              v335 = v394[0];
              if (!os_log_type_enabled(v334, v394[0]))
                goto LABEL_761;
              *(_DWORD *)v398 = 136446210;
              *(_QWORD *)&v398[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
              v336 = "%{public}s called with null http1_connection->context";
              goto LABEL_759;
            }
            if (type == OS_LOG_TYPE_DEFAULT)
            {
              v334 = __nwlog_obj();
              v335 = v394[0];
              if (!os_log_type_enabled(v334, v394[0]))
                goto LABEL_761;
              *(_DWORD *)v398 = 136446210;
              *(_QWORD *)&v398[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
              v336 = "%{public}s called with null http1_connection->context, backtrace limit exceeded";
              goto LABEL_759;
            }
            v367 = (char *)__nw_create_backtrace_string();
            v334 = __nwlog_obj();
            v335 = v394[0];
            v370 = os_log_type_enabled(v334, v394[0]);
            if (!v367)
            {
              if (!v370)
                goto LABEL_761;
              *(_DWORD *)v398 = 136446210;
              *(_QWORD *)&v398[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
              v336 = "%{public}s called with null http1_connection->context, no backtrace";
              goto LABEL_759;
            }
            if (v370)
            {
              *(_DWORD *)v398 = 136446466;
              *(_QWORD *)&v398[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
              *(_WORD *)&v398[12] = 2082;
              *(_QWORD *)&v398[14] = v367;
              v369 = "%{public}s called with null http1_connection->context, dumping backtrace:%{public}s";
              goto LABEL_714;
            }
LABEL_724:
            free(v367);
            if (!v333)
            {
LABEL_614:
              if (!*(_QWORD *)(v11 + 488))
              {
                v323 = *(_QWORD *)(v11 + 784);
                if (v323)
                {
                  nw_queue_set_timer_values(v323, 0x8000000000000000, 0xFFFFFFFFFFFFFFFFLL, 0x3B9ACA00uLL);
                }
                else
                {
                  if ((*(_BYTE *)(v11 + 158) & 1) == 0)
                  {
                    v324 = __nwlog_obj();
                    if (os_log_type_enabled(v324, OS_LOG_TYPE_ERROR))
                    {
                      v325 = *(_QWORD *)(v11 + 488);
                      v326 = *(_DWORD *)(*(_QWORD *)(v11 + 480) + 372);
                      v327 = *(_DWORD *)(v11 + 860);
                      if (v325)
                        LODWORD(v325) = *(_DWORD *)(v325 + 424);
                      *(_DWORD *)buf = 136447490;
                      *(_QWORD *)&buf[4] = "nw_http1_connection_close";
                      *(_WORD *)&buf[12] = 2082;
                      *(_QWORD *)&buf[14] = v11 + 74;
                      *(_WORD *)&buf[22] = 2080;
                      *(_QWORD *)&buf[24] = " ";
                      *(_WORD *)&buf[32] = 1024;
                      *(_DWORD *)&buf[34] = v326;
                      *(_WORD *)&buf[38] = 1024;
                      *(_DWORD *)&buf[40] = v327;
                      *(_WORD *)&buf[44] = 1024;
                      *(_DWORD *)&buf[46] = v325;
                      _os_log_impl(&dword_182FBE000, v324, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u:c%u:s%u> No destroy timer on HTTP/1 connection when closing", buf, 0x32u);
                    }
                  }
                  v328 = *(_QWORD *)(v11 + 608);
                  v329 = *(void **)(v11 + 496);
                  *(_QWORD *)buf = MEMORY[0x1E0C809B0];
                  *(_QWORD *)&buf[8] = 0x40000000;
                  *(_QWORD *)&buf[16] = ___ZL25nw_http1_connection_closeP19nw_http1_connection_block_invoke;
                  *(_QWORD *)&buf[24] = &unk_1E14A14F0;
                  *(_QWORD *)&buf[32] = v328;
                  nw_queue_context_async(v329, buf);
                }
              }
              return;
            }
LABEL_762:
            free(v333);
            goto LABEL_614;
          }
          __nwlog_obj();
          v239 = *(unsigned int *)(v234 + 368);
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = "http1->nonresuable_connections";
          *(_WORD *)&buf[22] = 2048;
          *(_QWORD *)&buf[24] = 1;
          *(_WORD *)&buf[32] = 2048;
          *(_QWORD *)&buf[34] = v239;
          v240 = (char *)_os_log_send_and_compose_impl();
          v398[0] = 16;
          v394[0] = OS_LOG_TYPE_DEFAULT;
          if (__nwlog_fault(v240, v398, v394))
          {
            if (v398[0] == 17)
            {
              v241 = __nwlog_obj();
              v242 = v398[0];
              if (os_log_type_enabled(v241, (os_log_type_t)v398[0]))
              {
                v243 = *(unsigned int *)(v234 + 368);
                *(_DWORD *)buf = 136446978;
                *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = "http1->nonresuable_connections";
                *(_WORD *)&buf[22] = 2048;
                *(_QWORD *)&buf[24] = 1;
                *(_WORD *)&buf[32] = 2048;
                *(_QWORD *)&buf[34] = v243;
                v244 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_630:
                _os_log_impl(&dword_182FBE000, v241, v242, v244, buf, 0x2Au);
              }
            }
            else if (v394[0])
            {
              v295 = (char *)__nw_create_backtrace_string();
              v241 = __nwlog_obj();
              v242 = v398[0];
              v296 = os_log_type_enabled(v241, (os_log_type_t)v398[0]);
              if (v295)
              {
                if (v296)
                {
                  v297 = *(unsigned int *)(v234 + 368);
                  *(_DWORD *)buf = 136447234;
                  *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = "http1->nonresuable_connections";
                  *(_WORD *)&buf[22] = 2048;
                  *(_QWORD *)&buf[24] = 1;
                  *(_WORD *)&buf[32] = 2048;
                  *(_QWORD *)&buf[34] = v297;
                  *(_WORD *)&buf[42] = 2082;
                  *(_QWORD *)&buf[44] = v295;
                  _os_log_impl(&dword_182FBE000, v241, v242, "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
                }
                free(v295);
                goto LABEL_631;
              }
              if (v296)
              {
                v332 = *(unsigned int *)(v234 + 368);
                *(_DWORD *)buf = 136446978;
                *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = "http1->nonresuable_connections";
                *(_WORD *)&buf[22] = 2048;
                *(_QWORD *)&buf[24] = 1;
                *(_WORD *)&buf[32] = 2048;
                *(_QWORD *)&buf[34] = v332;
                v244 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
                goto LABEL_630;
              }
            }
            else
            {
              v241 = __nwlog_obj();
              v242 = v398[0];
              if (os_log_type_enabled(v241, (os_log_type_t)v398[0]))
              {
                v330 = *(unsigned int *)(v234 + 368);
                *(_DWORD *)buf = 136446978;
                *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = "http1->nonresuable_connections";
                *(_WORD *)&buf[22] = 2048;
                *(_QWORD *)&buf[24] = 1;
                *(_WORD *)&buf[32] = 2048;
                *(_QWORD *)&buf[34] = v330;
                v244 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
                goto LABEL_630;
              }
            }
          }
LABEL_631:
          if (v240)
            free(v240);
          *(_DWORD *)(v234 + 368) = -1;
          goto LABEL_634;
        }
LABEL_770:
        free(v341);
        goto LABEL_592;
      }
      v310 = *(_QWORD *)(v11 + 480);
      if (v310)
      {
        v311 = *(_QWORD *)(v310 + 200);
        *(_QWORD *)buf = MEMORY[0x1E0C809B0];
        *(_QWORD *)&buf[8] = 0x40000000;
        *(_QWORD *)&buf[16] = ___ZL56nw_http1_match_idle_connection_with_pending_stream_asyncP19nw_http1_connection_block_invoke;
        *(_QWORD *)&buf[24] = &unk_1E14A1518;
        *(_QWORD *)&buf[32] = v311;
        nw_queue_context_async(v309, buf);
        goto LABEL_592;
      }
      __nwlog_obj();
      *(_DWORD *)v398 = 136446210;
      *(_QWORD *)&v398[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
      v341 = (char *)_os_log_send_and_compose_impl();
      v394[0] = OS_LOG_TYPE_ERROR;
      type = OS_LOG_TYPE_DEFAULT;
      if (__nwlog_fault(v341, v394, &type))
      {
        if (v394[0] == OS_LOG_TYPE_FAULT)
        {
          v342 = __nwlog_obj();
          v343 = v394[0];
          if (!os_log_type_enabled(v342, v394[0]))
            goto LABEL_769;
          *(_DWORD *)v398 = 136446210;
          *(_QWORD *)&v398[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
          v344 = "%{public}s called with null http1";
          goto LABEL_767;
        }
        if (type == OS_LOG_TYPE_DEFAULT)
        {
          v342 = __nwlog_obj();
          v343 = v394[0];
          if (!os_log_type_enabled(v342, v394[0]))
            goto LABEL_769;
          *(_DWORD *)v398 = 136446210;
          *(_QWORD *)&v398[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
          v344 = "%{public}s called with null http1, backtrace limit exceeded";
          goto LABEL_767;
        }
        v377 = (char *)__nw_create_backtrace_string();
        v342 = __nwlog_obj();
        v343 = v394[0];
        v380 = os_log_type_enabled(v342, v394[0]);
        if (!v377)
        {
          if (!v380)
            goto LABEL_769;
          *(_DWORD *)v398 = 136446210;
          *(_QWORD *)&v398[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
          v344 = "%{public}s called with null http1, no backtrace";
          goto LABEL_767;
        }
        if (v380)
        {
          *(_DWORD *)v398 = 136446466;
          *(_QWORD *)&v398[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
          *(_WORD *)&v398[12] = 2082;
          *(_QWORD *)&v398[14] = v377;
          v379 = "%{public}s called with null http1, dumping backtrace:%{public}s";
          goto LABEL_734;
        }
        goto LABEL_735;
      }
LABEL_769:
      if (!v341)
        goto LABEL_592;
      goto LABEL_770;
    }
    __nwlog_obj();
    v207 = *(unsigned int *)(v202 + 368);
    *(_DWORD *)buf = 136446978;
    *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = "http1->nonresuable_connections";
    *(_WORD *)&buf[22] = 2048;
    *(_QWORD *)&buf[24] = 1;
    *(_WORD *)&buf[32] = 2048;
    *(_QWORD *)&buf[34] = v207;
    v208 = (char *)_os_log_send_and_compose_impl();
    v398[0] = 16;
    v394[0] = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v208, v398, v394))
    {
      if (v398[0] == 17)
      {
        v209 = __nwlog_obj();
        v210 = v398[0];
        if (os_log_type_enabled(v209, (os_log_type_t)v398[0]))
        {
          v211 = *(unsigned int *)(v202 + 368);
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = "http1->nonresuable_connections";
          *(_WORD *)&buf[22] = 2048;
          *(_QWORD *)&buf[24] = 1;
          *(_WORD *)&buf[32] = 2048;
          *(_QWORD *)&buf[34] = v211;
          v212 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_583:
          _os_log_impl(&dword_182FBE000, v209, v210, v212, buf, 0x2Au);
        }
      }
      else if (v394[0])
      {
        v276 = (char *)__nw_create_backtrace_string();
        v209 = __nwlog_obj();
        v210 = v398[0];
        v277 = os_log_type_enabled(v209, (os_log_type_t)v398[0]);
        if (v276)
        {
          if (v277)
          {
            v278 = *(unsigned int *)(v202 + 368);
            *(_DWORD *)buf = 136447234;
            *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = "http1->nonresuable_connections";
            *(_WORD *)&buf[22] = 2048;
            *(_QWORD *)&buf[24] = 1;
            *(_WORD *)&buf[32] = 2048;
            *(_QWORD *)&buf[34] = v278;
            *(_WORD *)&buf[42] = 2082;
            *(_QWORD *)&buf[44] = v276;
            _os_log_impl(&dword_182FBE000, v209, v210, "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
          }
          free(v276);
          goto LABEL_584;
        }
        if (v277)
        {
          v308 = *(unsigned int *)(v202 + 368);
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = "http1->nonresuable_connections";
          *(_WORD *)&buf[22] = 2048;
          *(_QWORD *)&buf[24] = 1;
          *(_WORD *)&buf[32] = 2048;
          *(_QWORD *)&buf[34] = v308;
          v212 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
          goto LABEL_583;
        }
      }
      else
      {
        v209 = __nwlog_obj();
        v210 = v398[0];
        if (os_log_type_enabled(v209, (os_log_type_t)v398[0]))
        {
          v300 = *(unsigned int *)(v202 + 368);
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = "http1->nonresuable_connections";
          *(_WORD *)&buf[22] = 2048;
          *(_QWORD *)&buf[24] = 1;
          *(_WORD *)&buf[32] = 2048;
          *(_QWORD *)&buf[34] = v300;
          v212 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
          goto LABEL_583;
        }
      }
    }
LABEL_584:
    if (v208)
      free(v208);
    *(_DWORD *)(v202 + 368) = -1;
    goto LABEL_587;
  }
  if ((*(_WORD *)(v11 + 872) & 0x204) != 4)
  {
    nw_protocol_input_available(*(_QWORD **)(v12 + 48), v12);
    return;
  }
  if (((*(unsigned __int16 *)(v11 + 872) | (*(unsigned __int8 *)(v11 + 874) << 16)) & 0x20000) != 0
    || (*(_BYTE *)(v8 + 376) & 1) == 0)
  {
    if ((*(_BYTE *)(v11 + 158) & 1) != 0)
      return;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v21 = gLogObj;
    if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
      return;
    v22 = *(_QWORD *)(v11 + 488);
    v23 = *(_DWORD *)(*(_QWORD *)(v11 + 480) + 372);
    v24 = *(_DWORD *)(v11 + 860);
    if (v22)
      LODWORD(v22) = *(_DWORD *)(v22 + 424);
    identifier = (nw_protocol_identifier *)"invalid";
    if (a2->identifier)
      identifier = a2->identifier;
LABEL_59:
    *(_DWORD *)buf = 136447746;
    *(_QWORD *)&buf[4] = "nw_protocol_http1_input_available";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v11 + 74;
    *(_WORD *)&buf[22] = 2080;
    *(_QWORD *)&buf[24] = " ";
    *(_WORD *)&buf[32] = 1024;
    *(_DWORD *)&buf[34] = v23;
    *(_WORD *)&buf[38] = 1024;
    *(_DWORD *)&buf[40] = v24;
    *(_WORD *)&buf[44] = 1024;
    *(_DWORD *)&buf[46] = v22;
    *(_WORD *)&buf[50] = 2080;
    *(_QWORD *)&buf[52] = identifier;
    v20 = "%{public}s %{public}s%s<i%u:c%u:s%u> ignoring input_available from %s";
    v28 = v21;
    v29 = 60;
    goto LABEL_60;
  }
  if ((*(_BYTE *)(v11 + 158) & 1) == 0)
  {
    if (gLogDatapath)
    {
      v193 = __nwlog_obj();
      if (os_log_type_enabled(v193, OS_LOG_TYPE_DEBUG))
      {
        v194 = *(_QWORD *)(v11 + 488);
        v195 = *(_DWORD *)(*(_QWORD *)(v11 + 480) + 372);
        v196 = *(_DWORD *)(v11 + 860);
        if (v194)
          LODWORD(v194) = *(_DWORD *)(v194 + 424);
        *(_DWORD *)buf = 136447746;
        *(_QWORD *)&buf[4] = "nw_protocol_http1_input_available";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v11 + 74;
        *(_WORD *)&buf[22] = 2080;
        *(_QWORD *)&buf[24] = " ";
        *(_WORD *)&buf[32] = 1024;
        *(_DWORD *)&buf[34] = v195;
        *(_WORD *)&buf[38] = 1024;
        *(_DWORD *)&buf[40] = v196;
        *(_WORD *)&buf[44] = 1024;
        *(_DWORD *)&buf[46] = v194;
        *(_WORD *)&buf[50] = 2048;
        *(_QWORD *)&buf[52] = v11;
        _os_log_impl(&dword_182FBE000, v193, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> active server connection %p got input_available after completing input, checking to defer new_flow", buf, 0x3Cu);
      }
    }
  }
  if ((*(_BYTE *)(v8 + 376) & 1) == 0)
  {
LABEL_240:
    if ((*(_BYTE *)(v8 + 158) & 1) != 0)
      return;
    if (!gLogDatapath)
      return;
    v125 = __nwlog_obj();
    if (!os_log_type_enabled(v125, OS_LOG_TYPE_DEBUG))
      return;
    v126 = *(_DWORD *)(v8 + 372);
    *(_DWORD *)buf = 136446978;
    *(_QWORD *)&buf[4] = "nw_http1_new_flow_valid";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v8 + 74;
    *(_WORD *)&buf[22] = 2080;
    *(_QWORD *)&buf[24] = " ";
    *(_WORD *)&buf[32] = 1024;
    *(_DWORD *)&buf[34] = v126;
    v20 = "%{public}s %{public}s%s<i%u> called when not in server mode, ignoring";
    v28 = v125;
    v29 = 38;
LABEL_60:
    _os_log_impl(&dword_182FBE000, v28, OS_LOG_TYPE_DEBUG, v20, buf, v29);
    return;
  }
  v13 = *(_QWORD ***)(v8 + 328);
  if (!v13)
  {
LABEL_265:
    if ((*(_BYTE *)(v11 + 158) & 1) == 0)
    {
      v16 = __nwlog_obj();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
      {
        v147 = *(_QWORD *)(v11 + 488);
        v148 = *(_DWORD *)(*(_QWORD *)(v11 + 480) + 372);
        v149 = *(_DWORD *)(v11 + 860);
        if (v147)
          LODWORD(v147) = *(_DWORD *)(v147 + 424);
        *(_DWORD *)buf = 136447490;
        *(_QWORD *)&buf[4] = "nw_http1_new_flow_valid";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v11 + 74;
        *(_WORD *)&buf[22] = 2080;
        *(_QWORD *)&buf[24] = " ";
        *(_WORD *)&buf[32] = 1024;
        *(_DWORD *)&buf[34] = v148;
        *(_WORD *)&buf[38] = 1024;
        *(_DWORD *)&buf[40] = v149;
        *(_WORD *)&buf[44] = 1024;
        *(_DWORD *)&buf[46] = v147;
        v20 = "%{public}s %{public}s%s<i%u:c%u:s%u> called without listen handler, ignoring";
        goto LABEL_270;
      }
    }
    return;
  }
  v14 = (unsigned __int16 *)(v11 + 872);
  v15 = *v13;
  if (!v15 || !*v15)
  {
    if ((*(_BYTE *)(v8 + 158) & 1) == 0)
    {
      v213 = __nwlog_obj();
      if (os_log_type_enabled(v213, OS_LOG_TYPE_ERROR))
      {
        v214 = *(_DWORD *)(v8 + 372);
        *(_DWORD *)buf = 136446978;
        *(_QWORD *)&buf[4] = "nw_http1_new_flow_valid";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v8 + 74;
        *(_WORD *)&buf[22] = 2080;
        *(_QWORD *)&buf[24] = " ";
        *(_WORD *)&buf[32] = 1024;
        *(_DWORD *)&buf[34] = v214;
        _os_log_impl(&dword_182FBE000, v213, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u> listen handler has no new_flow callback, ignoring incoming flow", buf, 0x26u);
      }
    }
    v215 = *v14;
    v216 = v215 | (*(unsigned __int8 *)(v11 + 874) << 16);
    if ((v215 & 0x100) == 0)
    {
      *(_BYTE *)(v11 + 874) = BYTE2(v216);
      *v14 = v216 | 0x100;
      if ((*(_BYTE *)(v11 + 158) & 1) == 0)
      {
        if (gLogDatapath)
        {
          v345 = __nwlog_obj();
          if (os_log_type_enabled(v345, OS_LOG_TYPE_DEBUG))
          {
            v346 = *(_QWORD *)(v11 + 488);
            v347 = *(_DWORD *)(*(_QWORD *)(v11 + 480) + 372);
            v348 = *(_DWORD *)(v11 + 860);
            if (v346)
              LODWORD(v346) = *(_DWORD *)(v346 + 424);
            *(_DWORD *)buf = 136447490;
            *(_QWORD *)&buf[4] = "nw_http1_connection_close";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v11 + 74;
            *(_WORD *)&buf[22] = 2080;
            *(_QWORD *)&buf[24] = " ";
            *(_WORD *)&buf[32] = 1024;
            *(_DWORD *)&buf[34] = v347;
            *(_WORD *)&buf[38] = 1024;
            *(_DWORD *)&buf[40] = v348;
            *(_WORD *)&buf[44] = 1024;
            *(_DWORD *)&buf[46] = v346;
            _os_log_impl(&dword_182FBE000, v345, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> http connection closed, increasing pool width", buf, 0x32u);
          }
        }
      }
      v217 = *(_QWORD *)(v11 + 480);
      if (v217)
      {
        v218 = *v14;
        v219 = v218 | (*(unsigned __int8 *)(v11 + 874) << 16);
        if ((v218 & 0x800) == 0)
        {
          *(_BYTE *)(v11 + 874) = BYTE2(v219);
          *v14 = v219 | 0x800;
          v220 = *(unsigned int *)(v217 + 368) + 1;
          v221 = v220 << 31 >> 31;
          *(_DWORD *)(v217 + 368) = v220;
          if (v221 == v220 && (v221 & 0x8000000000000000) == 0)
            goto LABEL_609;
          __nwlog_obj();
          v222 = *(unsigned int *)(v217 + 368);
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = "http1->nonresuable_connections";
          *(_WORD *)&buf[22] = 2048;
          *(_QWORD *)&buf[24] = 1;
          *(_WORD *)&buf[32] = 2048;
          *(_QWORD *)&buf[34] = v222;
          v223 = (char *)_os_log_send_and_compose_impl();
          v398[0] = 16;
          v394[0] = OS_LOG_TYPE_DEFAULT;
          if (__nwlog_fault(v223, v398, v394))
          {
            if (v398[0] == 17)
            {
              v224 = __nwlog_obj();
              v225 = v398[0];
              if (os_log_type_enabled(v224, (os_log_type_t)v398[0]))
              {
                v226 = *(unsigned int *)(v217 + 368);
                *(_DWORD *)buf = 136446978;
                *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = "http1->nonresuable_connections";
                *(_WORD *)&buf[22] = 2048;
                *(_QWORD *)&buf[24] = 1;
                *(_WORD *)&buf[32] = 2048;
                *(_QWORD *)&buf[34] = v226;
                v227 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_605:
                _os_log_impl(&dword_182FBE000, v224, v225, v227, buf, 0x2Au);
              }
            }
            else if (v394[0])
            {
              v281 = (char *)__nw_create_backtrace_string();
              v224 = __nwlog_obj();
              v225 = v398[0];
              v282 = os_log_type_enabled(v224, (os_log_type_t)v398[0]);
              if (v281)
              {
                if (v282)
                {
                  v283 = *(unsigned int *)(v217 + 368);
                  *(_DWORD *)buf = 136447234;
                  *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = "http1->nonresuable_connections";
                  *(_WORD *)&buf[22] = 2048;
                  *(_QWORD *)&buf[24] = 1;
                  *(_WORD *)&buf[32] = 2048;
                  *(_QWORD *)&buf[34] = v283;
                  *(_WORD *)&buf[42] = 2082;
                  *(_QWORD *)&buf[44] = v281;
                  _os_log_impl(&dword_182FBE000, v224, v225, "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
                }
                free(v281);
                goto LABEL_606;
              }
              if (v282)
              {
                v319 = *(unsigned int *)(v217 + 368);
                *(_DWORD *)buf = 136446978;
                *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = "http1->nonresuable_connections";
                *(_WORD *)&buf[22] = 2048;
                *(_QWORD *)&buf[24] = 1;
                *(_WORD *)&buf[32] = 2048;
                *(_QWORD *)&buf[34] = v319;
                v227 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
                goto LABEL_605;
              }
            }
            else
            {
              v224 = __nwlog_obj();
              v225 = v398[0];
              if (os_log_type_enabled(v224, (os_log_type_t)v398[0]))
              {
                v301 = *(unsigned int *)(v217 + 368);
                *(_DWORD *)buf = 136446978;
                *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = "http1->nonresuable_connections";
                *(_WORD *)&buf[22] = 2048;
                *(_QWORD *)&buf[24] = 1;
                *(_WORD *)&buf[32] = 2048;
                *(_QWORD *)&buf[34] = v301;
                v227 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
                goto LABEL_605;
              }
            }
          }
LABEL_606:
          if (v223)
            free(v223);
          *(_DWORD *)(v217 + 368) = -1;
LABEL_609:
          if ((*(_BYTE *)(v11 + 158) & 1) == 0)
          {
            if (gLogDatapath)
            {
              v362 = __nwlog_obj();
              if (os_log_type_enabled(v362, OS_LOG_TYPE_DEBUG))
              {
                v363 = *(_QWORD *)(v11 + 488);
                v364 = *(_DWORD *)(*(_QWORD *)(v11 + 480) + 372);
                v365 = *(_DWORD *)(v11 + 860);
                if (v363)
                  LODWORD(v363) = *(_DWORD *)(v363 + 424);
                v366 = *(_DWORD *)(v217 + 368) + *(_DWORD *)(v217 + 364);
                *(_DWORD *)buf = 136447746;
                *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = v11 + 74;
                *(_WORD *)&buf[22] = 2080;
                *(_QWORD *)&buf[24] = " ";
                *(_WORD *)&buf[32] = 1024;
                *(_DWORD *)&buf[34] = v364;
                *(_WORD *)&buf[38] = 1024;
                *(_DWORD *)&buf[40] = v365;
                *(_WORD *)&buf[44] = 1024;
                *(_DWORD *)&buf[46] = v363;
                *(_WORD *)&buf[50] = 1024;
                *(_DWORD *)&buf[52] = v366;
                _os_log_impl(&dword_182FBE000, v362, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> connection marked as not-reusable, increased pool width to %u", buf, 0x38u);
              }
            }
          }
          v320 = *(void **)(v11 + 496);
          if (v320)
          {
            v321 = *(_QWORD *)(v11 + 480);
            if (v321)
            {
LABEL_613:
              v322 = *(_QWORD *)(v321 + 200);
              *(_QWORD *)buf = MEMORY[0x1E0C809B0];
              *(_QWORD *)&buf[8] = 0x40000000;
              *(_QWORD *)&buf[16] = ___ZL56nw_http1_match_idle_connection_with_pending_stream_asyncP19nw_http1_connection_block_invoke;
              *(_QWORD *)&buf[24] = &unk_1E14A1518;
              *(_QWORD *)&buf[32] = v322;
              nw_queue_context_async(v320, buf);
              goto LABEL_614;
            }
LABEL_638:
            __nwlog_obj();
            *(_DWORD *)v398 = 136446210;
            *(_QWORD *)&v398[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
            v333 = (char *)_os_log_send_and_compose_impl();
            v394[0] = OS_LOG_TYPE_ERROR;
            type = OS_LOG_TYPE_DEFAULT;
            if (!__nwlog_fault(v333, v394, &type))
              goto LABEL_761;
            if (v394[0] == OS_LOG_TYPE_FAULT)
            {
              v334 = __nwlog_obj();
              v335 = v394[0];
              if (!os_log_type_enabled(v334, v394[0]))
                goto LABEL_761;
              *(_DWORD *)v398 = 136446210;
              *(_QWORD *)&v398[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
              v336 = "%{public}s called with null http1";
LABEL_759:
              v381 = v398;
              goto LABEL_760;
            }
            if (type == OS_LOG_TYPE_DEFAULT)
            {
              v334 = __nwlog_obj();
              v335 = v394[0];
              if (!os_log_type_enabled(v334, v394[0]))
                goto LABEL_761;
              *(_DWORD *)v398 = 136446210;
              *(_QWORD *)&v398[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
              v336 = "%{public}s called with null http1, backtrace limit exceeded";
              goto LABEL_759;
            }
            v367 = (char *)__nw_create_backtrace_string();
            v334 = __nwlog_obj();
            v335 = v394[0];
            v368 = os_log_type_enabled(v334, v394[0]);
            if (!v367)
            {
              if (!v368)
                goto LABEL_761;
              *(_DWORD *)v398 = 136446210;
              *(_QWORD *)&v398[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
              v336 = "%{public}s called with null http1, no backtrace";
              goto LABEL_759;
            }
            if (v368)
            {
              *(_DWORD *)v398 = 136446466;
              *(_QWORD *)&v398[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
              *(_WORD *)&v398[12] = 2082;
              *(_QWORD *)&v398[14] = v367;
              v369 = "%{public}s called with null http1, dumping backtrace:%{public}s";
LABEL_714:
              v371 = v398;
LABEL_723:
              _os_log_impl(&dword_182FBE000, v334, v335, v369, v371, 0x16u);
              goto LABEL_724;
            }
            goto LABEL_724;
          }
          goto LABEL_673;
        }
LABEL_490:
        if ((*(_BYTE *)(v11 + 158) & 1) == 0)
        {
          if (gLogDatapath)
          {
            v252 = __nwlog_obj();
            if (os_log_type_enabled(v252, OS_LOG_TYPE_DEBUG))
            {
              v253 = *(_QWORD *)(v11 + 488);
              v254 = *(_DWORD *)(*(_QWORD *)(v11 + 480) + 372);
              v255 = *(_DWORD *)(v11 + 860);
              if (v253)
                LODWORD(v253) = *(_DWORD *)(v253 + 424);
              *(_DWORD *)buf = 136447490;
              *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v11 + 74;
              *(_WORD *)&buf[22] = 2080;
              *(_QWORD *)&buf[24] = " ";
              *(_WORD *)&buf[32] = 1024;
              *(_DWORD *)&buf[34] = v254;
              *(_WORD *)&buf[38] = 1024;
              *(_DWORD *)&buf[40] = v255;
              *(_WORD *)&buf[44] = 1024;
              *(_DWORD *)&buf[46] = v253;
              _os_log_impl(&dword_182FBE000, v252, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> Connection already marked as not-reusable, ignoring", buf, 0x32u);
            }
          }
        }
        goto LABEL_614;
      }
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
      v333 = (char *)_os_log_send_and_compose_impl();
      v398[0] = 16;
      v394[0] = OS_LOG_TYPE_DEFAULT;
      if (!__nwlog_fault(v333, v398, v394))
        goto LABEL_761;
      if (v398[0] != 17)
      {
        if (v394[0])
        {
          v349 = (char *)__nw_create_backtrace_string();
          v334 = __nwlog_obj();
          v335 = v398[0];
          v350 = os_log_type_enabled(v334, (os_log_type_t)v398[0]);
          if (v349)
          {
            if (v350)
            {
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v349;
              _os_log_impl(&dword_182FBE000, v334, v335, "%{public}s called with null http1, dumping backtrace:%{public}s", buf, 0x16u);
            }
            free(v349);
LABEL_761:
            if (!v333)
              goto LABEL_614;
            goto LABEL_762;
          }
LABEL_741:
          if (!v350)
            goto LABEL_761;
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
          v336 = "%{public}s called with null http1, no backtrace";
          goto LABEL_743;
        }
LABEL_737:
        v334 = __nwlog_obj();
        v335 = v398[0];
        if (!os_log_type_enabled(v334, (os_log_type_t)v398[0]))
          goto LABEL_761;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http1_connection_mark_do_not_reuse";
        v336 = "%{public}s called with null http1, backtrace limit exceeded";
        goto LABEL_743;
      }
      goto LABEL_683;
    }
LABEL_454:
    if ((*(_BYTE *)(v11 + 158) & 1) == 0)
    {
      if (gLogDatapath)
      {
        v16 = __nwlog_obj();
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
        {
          v245 = *(_QWORD *)(v11 + 488);
          v246 = *(_DWORD *)(*(_QWORD *)(v11 + 480) + 372);
          v247 = *(_DWORD *)(v11 + 860);
          if (v245)
            LODWORD(v245) = *(_DWORD *)(v245 + 424);
          *(_DWORD *)buf = 136447490;
          *(_QWORD *)&buf[4] = "nw_http1_connection_close";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v11 + 74;
          *(_WORD *)&buf[22] = 2080;
          *(_QWORD *)&buf[24] = " ";
          *(_WORD *)&buf[32] = 1024;
          *(_DWORD *)&buf[34] = v246;
          *(_WORD *)&buf[38] = 1024;
          *(_DWORD *)&buf[40] = v247;
          *(_WORD *)&buf[44] = 1024;
          *(_DWORD *)&buf[46] = v245;
          v20 = "%{public}s %{public}s%s<i%u:c%u:s%u> already closed";
          goto LABEL_270;
        }
      }
    }
    return;
  }
  if (((*v14 | (*(unsigned __int8 *)(v11 + 874) << 16)) & 0x20000) != 0 || (*v14 & 0x14) != 0 && *(_QWORD *)(v11 + 616))
  {
    if ((*(_BYTE *)(v11 + 158) & 1) == 0)
    {
      if (gLogDatapath)
      {
        v16 = __nwlog_obj();
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
        {
          v17 = *(_QWORD *)(v11 + 488);
          v18 = *(_DWORD *)(*(_QWORD *)(v11 + 480) + 372);
          v19 = *(_DWORD *)(v11 + 860);
          if (v17)
            LODWORD(v17) = *(_DWORD *)(v17 + 424);
          *(_DWORD *)buf = 136447490;
          *(_QWORD *)&buf[4] = "nw_http1_detect_next_request";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v11 + 74;
          *(_WORD *)&buf[22] = 2080;
          *(_QWORD *)&buf[24] = " ";
          *(_WORD *)&buf[32] = 1024;
          *(_DWORD *)&buf[34] = v18;
          *(_WORD *)&buf[38] = 1024;
          *(_DWORD *)&buf[40] = v19;
          *(_WORD *)&buf[44] = 1024;
          *(_DWORD *)&buf[46] = v17;
          v20 = "%{public}s %{public}s%s<i%u:c%u:s%u> not attempting to read more on connection awaiting a new flow, awai"
                "ting disconnect or remove_input_handler";
LABEL_270:
          v28 = v16;
          v29 = 50;
          goto LABEL_60;
        }
      }
    }
    return;
  }
  *(_QWORD *)v394 = 0;
  v395 = v394;
  if (nw_protocol_get_input_frames(*(_QWORD *)(v11 + 32), v11, 1, 0xFFFFFFFFLL, 1, (uint64_t)v394))
  {
    if (!(*(_BYTE *)(v11 + 158) & 1 | (gLogDatapath == 0)))
    {
      v264 = __nwlog_obj();
      if (os_log_type_enabled(v264, OS_LOG_TYPE_DEBUG))
      {
        v265 = *(_QWORD *)(v11 + 488);
        v266 = *(_DWORD *)(*(_QWORD *)(v11 + 480) + 372);
        v267 = *(_DWORD *)(v11 + 860);
        if (v265)
          LODWORD(v265) = *(_DWORD *)(v265 + 424);
        *(_DWORD *)buf = 136447490;
        *(_QWORD *)&buf[4] = "nw_http1_detect_next_request";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v11 + 74;
        *(_WORD *)&buf[22] = 2080;
        *(_QWORD *)&buf[24] = " ";
        *(_WORD *)&buf[32] = 1024;
        *(_DWORD *)&buf[34] = v266;
        *(_WORD *)&buf[38] = 1024;
        *(_DWORD *)&buf[40] = v267;
        *(_WORD *)&buf[44] = 1024;
        *(_DWORD *)&buf[46] = v265;
        _os_log_impl(&dword_182FBE000, v264, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> received a frame for non-idle connection, deferring new flow", buf, 0x32u);
      }
    }
    v51 = *(_DWORD **)v394;
    if (!*(_QWORD *)v394)
    {
      if ((*(_BYTE *)(v11 + 158) & 1) != 0)
        goto LABEL_318;
      if (!gLogDatapath)
        goto LABEL_318;
      v93 = __nwlog_obj();
      if (!os_log_type_enabled(v93, OS_LOG_TYPE_DEBUG))
        goto LABEL_318;
      v94 = *(_QWORD *)(v11 + 488);
      v95 = *(_DWORD *)(*(_QWORD *)(v11 + 480) + 372);
      v96 = *(_DWORD *)(v11 + 860);
      if (v94)
        LODWORD(v94) = *(_DWORD *)(v94 + 424);
      *(_DWORD *)buf = 136447490;
      *(_QWORD *)&buf[4] = "nw_http1_connection_move_frame_array_to_unprocessed_input_frames";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v11 + 74;
      *(_WORD *)&buf[22] = 2080;
      *(_QWORD *)&buf[24] = " ";
      *(_WORD *)&buf[32] = 1024;
      *(_DWORD *)&buf[34] = v95;
      *(_WORD *)&buf[38] = 1024;
      *(_DWORD *)&buf[40] = v96;
      *(_WORD *)&buf[44] = 1024;
      *(_DWORD *)&buf[46] = v94;
      v97 = "%{public}s %{public}s%s<i%u:c%u:s%u> no additional body frames to move";
      v98 = v93;
      v99 = 50;
      goto LABEL_537;
    }
    v393 = v11 + 616;
    if (gLogDatapath)
    {
      v284 = __nwlog_obj();
      if (os_log_type_enabled(v284, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136447746;
        *(_QWORD *)&buf[4] = "nw_http1_move_frame_array";
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v51;
        *(_WORD *)&buf[22] = 2048;
        *(_QWORD *)&buf[24] = v394;
        *(_WORD *)&buf[32] = 2048;
        *(_QWORD *)&buf[34] = v11 + 616;
        *(_WORD *)&buf[42] = 1024;
        *(_DWORD *)&buf[44] = 1;
        *(_WORD *)&buf[48] = 1024;
        *(_DWORD *)&buf[50] = 1;
        *(_WORD *)&buf[54] = 1024;
        *(_DWORD *)&buf[56] = 1;
        _os_log_impl(&dword_182FBE000, v284, OS_LOG_TYPE_DEBUG, "%{public}s called: initial frame %p, source %p, destination %p, temp %u, forwards %u, append %u", buf, 0x3Cu);
      }
    }
    v52 = 0;
    *(_QWORD *)v398 = 0;
    *(_QWORD *)&v398[8] = v398;
    *(_QWORD *)&v50 = 136447234;
    do
    {
      v55 = (_DWORD *)*((_QWORD *)v51 + 4);
      if (!v55 && !*((_QWORD *)v51 + 5))
        v55 = 0;
      if (gLogDatapath)
      {
        v388 = v50;
        loga = __nwlog_obj();
        v57 = os_log_type_enabled(loga, OS_LOG_TYPE_DEBUG);
        v50 = v388;
        if (v57)
        {
          v58 = v51[13];
          if (v58)
            v58 -= v51[14] + v51[15];
          if (v55)
          {
            v59 = v55[13];
            if (v59)
              v59 -= v55[14] + v55[15];
          }
          else
          {
            v59 = 0;
          }
          *(_DWORD *)buf = v388;
          *(_QWORD *)&buf[4] = "nw_http1_move_frame_array";
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v51;
          *(_WORD *)&buf[22] = 1024;
          *(_DWORD *)&buf[24] = v58;
          *(_WORD *)&buf[28] = 2048;
          *(_QWORD *)&buf[30] = v55;
          *(_WORD *)&buf[38] = 1024;
          *(_DWORD *)&buf[40] = v59;
          _os_log_impl(&dword_182FBE000, loga, OS_LOG_TYPE_DEBUG, "%{public}s current frame: (%p, %u bytes), next frame: (%p, %u bytes)", buf, 0x2Cu);
          v50 = v388;
        }
      }
      v56 = *((_QWORD *)v51 + 4);
      v53 = (_QWORD *)*((_QWORD *)v51 + 5);
      if (v56)
      {
        *(_QWORD *)(v56 + 40) = v53;
        v53 = (_QWORD *)*((_QWORD *)v51 + 5);
      }
      else
      {
        v395 = (os_log_type_t *)*((_QWORD *)v51 + 5);
      }
      *v53 = v56;
      v54 = *(_QWORD **)&v398[8];
      *((_QWORD *)v51 + 4) = 0;
      *((_QWORD *)v51 + 5) = v54;
      *v54 = v51;
      *(_QWORD *)&v398[8] = v51 + 8;
      ++v52;
      v51 = v55;
    }
    while (v55);
    if (!v52)
      goto LABEL_317;
    if (gLogDatapath)
    {
      v392 = v50;
      v298 = __nwlog_obj();
      v299 = os_log_type_enabled(v298, OS_LOG_TYPE_DEBUG);
      v50 = v392;
      if (v299)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http1_move_frame_array";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v52;
        _os_log_impl(&dword_182FBE000, v298, OS_LOG_TYPE_DEBUG, "%{public}s moving %u frames from temp array to destination array", buf, 0x12u);
        v50 = v392;
      }
    }
    v73 = *(_DWORD **)v398;
    v74 = v52;
    if (*(_QWORD *)v398)
    {
      v74 = v52;
      do
      {
        v77 = v73 + 8;
        v76 = (_DWORD *)*((_QWORD *)v73 + 4);
        if (!v76 && !*((_QWORD *)v73 + 5))
          v76 = 0;
        if (gLogDatapath)
        {
          v390 = v50;
          logc = __nwlog_obj();
          v80 = os_log_type_enabled(logc, OS_LOG_TYPE_DEBUG);
          v50 = v390;
          if (v80)
          {
            v81 = v73[13];
            if (v81)
              v81 -= v73[14] + v73[15];
            if (v76)
            {
              v82 = v76[13];
              if (v82)
                v82 -= v76[14] + v76[15];
            }
            else
            {
              v82 = 0;
            }
            *(_DWORD *)buf = v390;
            *(_QWORD *)&buf[4] = "nw_http1_move_frame_array";
            *(_WORD *)&buf[12] = 2048;
            *(_QWORD *)&buf[14] = v73;
            *(_WORD *)&buf[22] = 1024;
            *(_DWORD *)&buf[24] = v81;
            *(_WORD *)&buf[28] = 2048;
            *(_QWORD *)&buf[30] = v76;
            *(_WORD *)&buf[38] = 1024;
            *(_DWORD *)&buf[40] = v82;
            _os_log_impl(&dword_182FBE000, logc, OS_LOG_TYPE_DEBUG, "%{public}s current frame: (%p, %u bytes), next frame: (%p, %u bytes)", buf, 0x2Cu);
            v50 = v390;
          }
        }
        v78 = *((_QWORD *)v73 + 4);
        v79 = (_QWORD *)*((_QWORD *)v73 + 5);
        if (v78)
        {
          *(_QWORD *)(v78 + 40) = v79;
          v79 = (_QWORD *)*((_QWORD *)v73 + 5);
        }
        else
        {
          *(_QWORD *)&v398[8] = *((_QWORD *)v73 + 5);
        }
        *v79 = v78;
        *v77 = 0;
        *((_QWORD *)v73 + 5) = 0;
        v75 = *(_QWORD **)(v11 + 624);
        *((_QWORD *)v73 + 5) = v75;
        *v75 = v73;
        *(_QWORD *)(v11 + 624) = v77;
        --v74;
        v73 = v76;
      }
      while (v76);
      if (!v74)
      {
LABEL_317:
        if (!gLogDatapath)
          goto LABEL_318;
        v285 = __nwlog_obj();
        if (!os_log_type_enabled(v285, OS_LOG_TYPE_DEBUG))
          goto LABEL_318;
        *(_DWORD *)buf = 136446978;
        *(_QWORD *)&buf[4] = "nw_http1_move_frame_array";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v52;
        *(_WORD *)&buf[18] = 2048;
        *(_QWORD *)&buf[20] = v394;
        *(_WORD *)&buf[28] = 2048;
        *(_QWORD *)&buf[30] = v393;
        v97 = "%{public}s moved %u frames from %p to %p";
        v98 = v285;
        v99 = 38;
LABEL_537:
        _os_log_impl(&dword_182FBE000, v98, OS_LOG_TYPE_DEBUG, v97, buf, v99);
LABEL_318:
        *((_BYTE *)v14 + 2) = (*v14 | (*((unsigned __int8 *)v14 + 2) << 16) | 0x20000u) >> 16;
        return;
      }
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "nw_http1_move_frame_array";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v74;
    v104 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v396 = 0;
    if (__nwlog_fault(v104, &type, &v396))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v105 = __nwlog_obj();
        v106 = type;
        if (!os_log_type_enabled(v105, type))
          goto LABEL_315;
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http1_move_frame_array";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v74;
        v107 = "%{public}s failed to deliver all temp frames, remaining %u frames";
        goto LABEL_314;
      }
      if (!v396)
      {
        v105 = __nwlog_obj();
        v106 = type;
        if (!os_log_type_enabled(v105, type))
          goto LABEL_315;
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http1_move_frame_array";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v74;
        v107 = "%{public}s failed to deliver all temp frames, remaining %u frames, backtrace limit exceeded";
        goto LABEL_314;
      }
      v110 = (char *)__nw_create_backtrace_string();
      v105 = __nwlog_obj();
      v106 = type;
      v111 = os_log_type_enabled(v105, type);
      if (v110)
      {
        if (v111)
        {
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)&buf[4] = "nw_http1_move_frame_array";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v74;
          *(_WORD *)&buf[18] = 2082;
          *(_QWORD *)&buf[20] = v110;
          _os_log_impl(&dword_182FBE000, v105, v106, "%{public}s failed to deliver all temp frames, remaining %u frames, dumping backtrace:%{public}s", buf, 0x1Cu);
        }
        free(v110);
        goto LABEL_315;
      }
      if (v111)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http1_move_frame_array";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v74;
        v107 = "%{public}s failed to deliver all temp frames, remaining %u frames, no backtrace";
LABEL_314:
        _os_log_impl(&dword_182FBE000, v105, v106, v107, buf, 0x12u);
      }
    }
LABEL_315:
    if (v104)
      free(v104);
    goto LABEL_317;
  }
  if (!(*(_BYTE *)(v11 + 158) & 1 | (gLogDatapath == 0)))
  {
    v16 = __nwlog_obj();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
    {
      v83 = *(_QWORD *)(v11 + 488);
      v84 = *(_DWORD *)(*(_QWORD *)(v11 + 480) + 372);
      v85 = *(_DWORD *)(v11 + 860);
      if (v83)
        LODWORD(v83) = *(_DWORD *)(v83 + 424);
      *(_DWORD *)buf = 136447490;
      *(_QWORD *)&buf[4] = "nw_http1_detect_next_request";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v11 + 74;
      *(_WORD *)&buf[22] = 2080;
      *(_QWORD *)&buf[24] = " ";
      *(_WORD *)&buf[32] = 1024;
      *(_DWORD *)&buf[34] = v84;
      *(_WORD *)&buf[38] = 1024;
      *(_DWORD *)&buf[40] = v85;
      *(_WORD *)&buf[44] = 1024;
      *(_DWORD *)&buf[46] = v83;
      v20 = "%{public}s %{public}s%s<i%u:c%u:s%u> read 0 frames on non-idle connection, not deferring new flow";
      goto LABEL_270;
    }
  }
}

