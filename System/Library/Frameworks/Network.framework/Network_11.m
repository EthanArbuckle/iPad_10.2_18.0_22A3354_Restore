BOOL nw_demux_option_is_equal(nw_protocol_definition *a1, void **a2, void **a3)
{
  void **v3;
  void **v4;
  int v5;
  void **v6;
  int v7;
  void **v8;
  BOOL v9;
  _BOOL8 result;
  size_t v11;

  v3 = a3;
  v4 = a2;
  v5 = -1;
  v6 = a2;
  do
  {
    v6 = (void **)*v6;
    ++v5;
  }
  while (v6);
  v7 = -1;
  v8 = a3;
  do
  {
    v8 = (void **)*v8;
    ++v7;
  }
  while (v8);
  if (v5 != v7)
    return 0;
  if (!v5)
    return 1;
  while (1)
  {
    v3 = (void **)*v3;
    v4 = (void **)*v4;
    v9 = !v4 || v3 == 0;
    result = v9;
    if (v9)
      break;
    if (*((unsigned __int16 *)v4 + 8) == *((unsigned __int16 *)v3 + 8))
    {
      v11 = *((unsigned __int16 *)v4 + 9);
      if ((_DWORD)v11 == *((unsigned __int16 *)v3 + 9)
        && !memcmp((char *)v4 + 20, (char *)v3 + 20, *((unsigned __int16 *)v4 + 9))
        && !memcmp((char *)v4 + 50, (char *)v3 + 50, v11))
      {
        continue;
      }
    }
    return 0;
  }
  return result;
}

uint64_t nw_protocol_demux_create(const nw_protocol_identifier *a1, nw_object *a2, nw_endpoint *a3, nw_parameters *a4)
{
  uint64_t result;
  NSObject *v5;
  void *v6;
  void *memptr;
  int v8;
  const char *v9;
  __int16 v10;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  memptr = 0;
  if (!malloc_type_posix_memalign(&memptr, 8uLL, 0xB0uLL, 0x68FF3B34uLL))
  {
    result = (uint64_t)memptr;
    if (memptr)
      goto LABEL_3;
  }
  v5 = __nwlog_obj();
  os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
  v8 = 136446722;
  v9 = "strict_memalign";
  v10 = 2048;
  v11 = 8;
  v12 = 2048;
  v13 = 176;
  v6 = (void *)_os_log_send_and_compose_impl();
  result = __nwlog_abort((uint64_t)v6);
  if (!(_DWORD)result)
  {
    free(v6);
    result = (uint64_t)memptr;
LABEL_3:
    *(_OWORD *)(result + 144) = 0u;
    *(_OWORD *)(result + 160) = 0u;
    *(_OWORD *)(result + 112) = 0u;
    *(_OWORD *)(result + 128) = 0u;
    *(_OWORD *)(result + 80) = 0u;
    *(_OWORD *)(result + 96) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_QWORD *)(result + 16) = &g_demux_protocol_identifier;
    *(_QWORD *)(result + 24) = &g_demux_protocol_callbacks;
    *(_QWORD *)(result + 40) = result;
    *(_QWORD *)(result + 72) = result + 64;
    return result;
  }
  __break(1u);
  return result;
}

NWConcrete_nw_protocol_options *nw_demux_create_options()
{
  void *v0;
  NWConcrete_nw_protocol_options *options;

  if (nw_protocol_demux_copy_definition::onceToken != -1)
    dispatch_once(&nw_protocol_demux_copy_definition::onceToken, &__block_literal_global_5_25927);
  if (!nw_protocol_demux_copy_definition::definition)
    return nw_protocol_create_options(0);
  v0 = os_retain((void *)nw_protocol_demux_copy_definition::definition);
  options = nw_protocol_create_options(v0);
  if (v0)
    os_release(v0);
  return options;
}

BOOL nw_protocol_options_is_demux(void *a1)
{
  void *v2;
  _BOOL8 v3;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  const char *v8;
  char *backtrace_string;
  _BOOL4 v10;
  char v11;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v14 = "nw_protocol_options_is_demux";
    v5 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v11 = 0;
    if (__nwlog_fault(v5, &type, &v11))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v6 = __nwlog_obj();
        v7 = type;
        if (os_log_type_enabled(v6, type))
        {
          *(_DWORD *)buf = 136446210;
          v14 = "nw_protocol_options_is_demux";
          v8 = "%{public}s called with null options";
LABEL_22:
          _os_log_impl(&dword_182FBE000, v6, v7, v8, buf, 0xCu);
        }
      }
      else if (v11)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        v6 = __nwlog_obj();
        v7 = type;
        v10 = os_log_type_enabled(v6, type);
        if (backtrace_string)
        {
          if (v10)
          {
            *(_DWORD *)buf = 136446466;
            v14 = "nw_protocol_options_is_demux";
            v15 = 2082;
            v16 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(backtrace_string);
          goto LABEL_23;
        }
        if (v10)
        {
          *(_DWORD *)buf = 136446210;
          v14 = "nw_protocol_options_is_demux";
          v8 = "%{public}s called with null options, no backtrace";
          goto LABEL_22;
        }
      }
      else
      {
        v6 = __nwlog_obj();
        v7 = type;
        if (os_log_type_enabled(v6, type))
        {
          *(_DWORD *)buf = 136446210;
          v14 = "nw_protocol_options_is_demux";
          v8 = "%{public}s called with null options, backtrace limit exceeded";
          goto LABEL_22;
        }
      }
    }
LABEL_23:
    if (v5)
      free(v5);
    return 0;
  }
  if (nw_protocol_demux_copy_definition::onceToken != -1)
    dispatch_once(&nw_protocol_demux_copy_definition::onceToken, &__block_literal_global_5_25927);
  if (nw_protocol_demux_copy_definition::definition)
  {
    v2 = os_retain((void *)nw_protocol_demux_copy_definition::definition);
    v3 = nw_protocol_options_matches_definition(a1, v2);
    if (v2)
      os_release(v2);
    return v3;
  }
  return nw_protocol_options_matches_definition(a1, 0);
}

void nw_demux_options_add_pattern(void *a1, __int16 a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  const char *v8;
  char *backtrace_string;
  _BOOL4 v10;
  char *v11;
  _BOOL4 v12;
  const char *v13;
  _BOOL4 v14;
  _QWORD v15[6];
  __int16 v16;
  __int16 v17;
  char v18;
  os_log_type_t v19;
  uint8_t buf[4];
  const char *v21;
  __int16 v22;
  char *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v21 = "nw_demux_options_add_pattern";
    v5 = (char *)_os_log_send_and_compose_impl();
    v19 = OS_LOG_TYPE_ERROR;
    v18 = 0;
    if (!__nwlog_fault(v5, &v19, &v18))
      goto LABEL_47;
    if (v19 != OS_LOG_TYPE_FAULT)
    {
      if (!v18)
      {
        v6 = __nwlog_obj();
        v7 = v19;
        if (!os_log_type_enabled(v6, v19))
          goto LABEL_47;
        *(_DWORD *)buf = 136446210;
        v21 = "nw_demux_options_add_pattern";
        v8 = "%{public}s called with null options, backtrace limit exceeded";
        goto LABEL_46;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v6 = __nwlog_obj();
      v7 = v19;
      v10 = os_log_type_enabled(v6, v19);
      if (!backtrace_string)
      {
        if (!v10)
          goto LABEL_47;
        *(_DWORD *)buf = 136446210;
        v21 = "nw_demux_options_add_pattern";
        v8 = "%{public}s called with null options, no backtrace";
        goto LABEL_46;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446466;
        v21 = "nw_demux_options_add_pattern";
        v22 = 2082;
        v23 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_47;
    }
    v6 = __nwlog_obj();
    v7 = v19;
    if (!os_log_type_enabled(v6, v19))
      goto LABEL_47;
    *(_DWORD *)buf = 136446210;
    v21 = "nw_demux_options_add_pattern";
    v8 = "%{public}s called with null options";
LABEL_46:
    _os_log_impl(&dword_182FBE000, v6, v7, v8, buf, 0xCu);
    goto LABEL_47;
  }
  if (a3 < 0x1F)
  {
    if (a4)
    {
      v15[0] = MEMORY[0x1E0C809B0];
      v15[1] = 0x40000000;
      v15[2] = __nw_demux_options_add_pattern_block_invoke;
      v15[3] = &__block_descriptor_tmp_7_25962;
      v16 = a2;
      v17 = a3;
      v15[4] = a4;
      v15[5] = a5;
      nw_protocol_options_access_handle(a1, v15);
      return;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v21 = "nw_demux_options_add_pattern";
    v5 = (char *)_os_log_send_and_compose_impl();
    v19 = OS_LOG_TYPE_ERROR;
    v18 = 0;
    if (__nwlog_fault(v5, &v19, &v18))
    {
      if (v19 == OS_LOG_TYPE_FAULT)
      {
        v6 = __nwlog_obj();
        v7 = v19;
        if (!os_log_type_enabled(v6, v19))
          goto LABEL_47;
        *(_DWORD *)buf = 136446210;
        v21 = "nw_demux_options_add_pattern";
        v8 = "%{public}s called with null pattern";
        goto LABEL_46;
      }
      if (!v18)
      {
        v6 = __nwlog_obj();
        v7 = v19;
        if (!os_log_type_enabled(v6, v19))
          goto LABEL_47;
        *(_DWORD *)buf = 136446210;
        v21 = "nw_demux_options_add_pattern";
        v8 = "%{public}s called with null pattern, backtrace limit exceeded";
        goto LABEL_46;
      }
      v11 = (char *)__nw_create_backtrace_string();
      v6 = __nwlog_obj();
      v7 = v19;
      v14 = os_log_type_enabled(v6, v19);
      if (!v11)
      {
        if (!v14)
          goto LABEL_47;
        *(_DWORD *)buf = 136446210;
        v21 = "nw_demux_options_add_pattern";
        v8 = "%{public}s called with null pattern, no backtrace";
        goto LABEL_46;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446466;
        v21 = "nw_demux_options_add_pattern";
        v22 = 2082;
        v23 = v11;
        v13 = "%{public}s called with null pattern, dumping backtrace:%{public}s";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
LABEL_47:
    if (v5)
      goto LABEL_48;
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v21 = "nw_demux_options_add_pattern";
  v5 = (char *)_os_log_send_and_compose_impl();
  v19 = OS_LOG_TYPE_ERROR;
  v18 = 0;
  if (!__nwlog_fault(v5, &v19, &v18))
    goto LABEL_47;
  if (v19 == OS_LOG_TYPE_FAULT)
  {
    v6 = __nwlog_obj();
    v7 = v19;
    if (!os_log_type_enabled(v6, v19))
      goto LABEL_47;
    *(_DWORD *)buf = 136446210;
    v21 = "nw_demux_options_add_pattern";
    v8 = "%{public}s called with null (pattern_length <= NW_DEMUX_MAX_PATTERN_LENGTH)";
    goto LABEL_46;
  }
  if (!v18)
  {
    v6 = __nwlog_obj();
    v7 = v19;
    if (!os_log_type_enabled(v6, v19))
      goto LABEL_47;
    *(_DWORD *)buf = 136446210;
    v21 = "nw_demux_options_add_pattern";
    v8 = "%{public}s called with null (pattern_length <= NW_DEMUX_MAX_PATTERN_LENGTH), backtrace limit exceeded";
    goto LABEL_46;
  }
  v11 = (char *)__nw_create_backtrace_string();
  v6 = __nwlog_obj();
  v7 = v19;
  v12 = os_log_type_enabled(v6, v19);
  if (!v11)
  {
    if (!v12)
      goto LABEL_47;
    *(_DWORD *)buf = 136446210;
    v21 = "nw_demux_options_add_pattern";
    v8 = "%{public}s called with null (pattern_length <= NW_DEMUX_MAX_PATTERN_LENGTH), no backtrace";
    goto LABEL_46;
  }
  if (v12)
  {
    *(_DWORD *)buf = 136446466;
    v21 = "nw_demux_options_add_pattern";
    v22 = 2082;
    v23 = v11;
    v13 = "%{public}s called with null (pattern_length <= NW_DEMUX_MAX_PATTERN_LENGTH), dumping backtrace:%{public}s";
LABEL_31:
    _os_log_impl(&dword_182FBE000, v6, v7, v13, buf, 0x16u);
  }
LABEL_32:
  free(v11);
  if (v5)
LABEL_48:
    free(v5);
}

BOOL __nw_demux_options_add_pattern_block_invoke(uint64_t a1, uint64_t a2)
{
  _WORD *v4;
  size_t v5;
  const void *v6;
  void *v7;
  size_t v8;
  const void *v9;
  void *v10;
  size_t v11;
  _QWORD *v12;
  _BOOL8 result;
  NSObject *v14;
  void *v15;

  if (!*(_QWORD *)a2)
  {
    v4 = (_WORD *)(a2 + 16);
    *(_WORD *)(a2 + 32) = *(_WORD *)(a1 + 48);
    *(_WORD *)(a2 + 34) = *(_WORD *)(a1 + 50);
    memcpy((void *)(a2 + 36), *(const void **)(a1 + 32), *(unsigned __int16 *)(a1 + 50));
    v9 = *(const void **)(a1 + 40);
    v10 = (void *)(a2 + 66);
    v11 = *(unsigned __int16 *)(a1 + 50);
    if (v9)
      memcpy(v10, v9, v11);
    else
      memset(v10, 255, v11);
    v12 = *(_QWORD **)(a2 + 8);
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = v12;
    goto LABEL_11;
  }
  v4 = malloc_type_calloc(1uLL, 0x50uLL, 0xEAFB8F1AuLL);
  if (v4)
  {
LABEL_3:
    v4[8] = *(_WORD *)(a1 + 48);
    v5 = *(unsigned __int16 *)(a1 + 50);
    v4[9] = v5;
    memcpy(v4 + 10, *(const void **)(a1 + 32), v5);
    v6 = *(const void **)(a1 + 40);
    v7 = v4 + 25;
    v8 = *(unsigned __int16 *)(a1 + 50);
    if (v6)
      memcpy(v7, v6, v8);
    else
      memset(v7, 255, v8);
    *(_QWORD *)v4 = 0;
    v12 = *(_QWORD **)(a2 + 8);
    *((_QWORD *)v4 + 1) = v12;
LABEL_11:
    *v12 = v4;
    *(_QWORD *)(a2 + 8) = v4;
    return 1;
  }
  v14 = __nwlog_obj();
  os_log_type_enabled(v14, OS_LOG_TYPE_ERROR);
  v15 = (void *)_os_log_send_and_compose_impl();
  result = __nwlog_abort((uint64_t)v15);
  if (!result)
  {
    free(v15);
    goto LABEL_3;
  }
  __break(1u);
  return result;
}

void nw_demux_options_add_pattern_data(void *a1, __int16 a2, dispatch_data_t data)
{
  size_t size;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  const char *v10;
  char *backtrace_string;
  _BOOL4 v12;
  char *v13;
  _BOOL4 v14;
  const char *v15;
  _BOOL4 v16;
  _QWORD v17[6];
  __int16 v18;
  char v19;
  os_log_type_t v20;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  char *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v22 = "nw_demux_options_add_pattern_data";
    v7 = (char *)_os_log_send_and_compose_impl();
    v20 = OS_LOG_TYPE_ERROR;
    v19 = 0;
    if (!__nwlog_fault(v7, &v20, &v19))
      goto LABEL_47;
    if (v20 != OS_LOG_TYPE_FAULT)
    {
      if (!v19)
      {
        v8 = __nwlog_obj();
        v9 = v20;
        if (!os_log_type_enabled(v8, v20))
          goto LABEL_47;
        *(_DWORD *)buf = 136446210;
        v22 = "nw_demux_options_add_pattern_data";
        v10 = "%{public}s called with null options, backtrace limit exceeded";
        goto LABEL_46;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v8 = __nwlog_obj();
      v9 = v20;
      v12 = os_log_type_enabled(v8, v20);
      if (!backtrace_string)
      {
        if (!v12)
          goto LABEL_47;
        *(_DWORD *)buf = 136446210;
        v22 = "nw_demux_options_add_pattern_data";
        v10 = "%{public}s called with null options, no backtrace";
        goto LABEL_46;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446466;
        v22 = "nw_demux_options_add_pattern_data";
        v23 = 2082;
        v24 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_47;
    }
    v8 = __nwlog_obj();
    v9 = v20;
    if (!os_log_type_enabled(v8, v20))
      goto LABEL_47;
    *(_DWORD *)buf = 136446210;
    v22 = "nw_demux_options_add_pattern_data";
    v10 = "%{public}s called with null options";
LABEL_46:
    _os_log_impl(&dword_182FBE000, v8, v9, v10, buf, 0xCu);
    goto LABEL_47;
  }
  if (data)
  {
    size = dispatch_data_get_size(data);
    if (size < 0x1F)
    {
      v17[0] = MEMORY[0x1E0C809B0];
      v17[1] = 0x40000000;
      v17[2] = __nw_demux_options_add_pattern_data_block_invoke;
      v17[3] = &__block_descriptor_tmp_8_25978;
      v18 = a2;
      v17[4] = size;
      v17[5] = data;
      nw_protocol_options_access_handle(a1, v17);
      return;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v22 = "nw_demux_options_add_pattern_data";
    v7 = (char *)_os_log_send_and_compose_impl();
    v20 = OS_LOG_TYPE_ERROR;
    v19 = 0;
    if (__nwlog_fault(v7, &v20, &v19))
    {
      if (v20 == OS_LOG_TYPE_FAULT)
      {
        v8 = __nwlog_obj();
        v9 = v20;
        if (!os_log_type_enabled(v8, v20))
          goto LABEL_47;
        *(_DWORD *)buf = 136446210;
        v22 = "nw_demux_options_add_pattern_data";
        v10 = "%{public}s called with null (pattern_length <= NW_DEMUX_MAX_PATTERN_LENGTH)";
        goto LABEL_46;
      }
      if (!v19)
      {
        v8 = __nwlog_obj();
        v9 = v20;
        if (!os_log_type_enabled(v8, v20))
          goto LABEL_47;
        *(_DWORD *)buf = 136446210;
        v22 = "nw_demux_options_add_pattern_data";
        v10 = "%{public}s called with null (pattern_length <= NW_DEMUX_MAX_PATTERN_LENGTH), backtrace limit exceeded";
        goto LABEL_46;
      }
      v13 = (char *)__nw_create_backtrace_string();
      v8 = __nwlog_obj();
      v9 = v20;
      v16 = os_log_type_enabled(v8, v20);
      if (!v13)
      {
        if (!v16)
          goto LABEL_47;
        *(_DWORD *)buf = 136446210;
        v22 = "nw_demux_options_add_pattern_data";
        v10 = "%{public}s called with null (pattern_length <= NW_DEMUX_MAX_PATTERN_LENGTH), no backtrace";
        goto LABEL_46;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446466;
        v22 = "nw_demux_options_add_pattern_data";
        v23 = 2082;
        v24 = v13;
        v15 = "%{public}s called with null (pattern_length <= NW_DEMUX_MAX_PATTERN_LENGTH), dumping backtrace:%{public}s";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
LABEL_47:
    if (v7)
      goto LABEL_48;
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v22 = "nw_demux_options_add_pattern_data";
  v7 = (char *)_os_log_send_and_compose_impl();
  v20 = OS_LOG_TYPE_ERROR;
  v19 = 0;
  if (!__nwlog_fault(v7, &v20, &v19))
    goto LABEL_47;
  if (v20 == OS_LOG_TYPE_FAULT)
  {
    v8 = __nwlog_obj();
    v9 = v20;
    if (!os_log_type_enabled(v8, v20))
      goto LABEL_47;
    *(_DWORD *)buf = 136446210;
    v22 = "nw_demux_options_add_pattern_data";
    v10 = "%{public}s called with null pattern";
    goto LABEL_46;
  }
  if (!v19)
  {
    v8 = __nwlog_obj();
    v9 = v20;
    if (!os_log_type_enabled(v8, v20))
      goto LABEL_47;
    *(_DWORD *)buf = 136446210;
    v22 = "nw_demux_options_add_pattern_data";
    v10 = "%{public}s called with null pattern, backtrace limit exceeded";
    goto LABEL_46;
  }
  v13 = (char *)__nw_create_backtrace_string();
  v8 = __nwlog_obj();
  v9 = v20;
  v14 = os_log_type_enabled(v8, v20);
  if (!v13)
  {
    if (!v14)
      goto LABEL_47;
    *(_DWORD *)buf = 136446210;
    v22 = "nw_demux_options_add_pattern_data";
    v10 = "%{public}s called with null pattern, no backtrace";
    goto LABEL_46;
  }
  if (v14)
  {
    *(_DWORD *)buf = 136446466;
    v22 = "nw_demux_options_add_pattern_data";
    v23 = 2082;
    v24 = v13;
    v15 = "%{public}s called with null pattern, dumping backtrace:%{public}s";
LABEL_31:
    _os_log_impl(&dword_182FBE000, v8, v9, v15, buf, 0x16u);
  }
LABEL_32:
  free(v13);
  if (v7)
LABEL_48:
    free(v7);
}

BOOL __nw_demux_options_add_pattern_data_block_invoke(uint64_t a1, uint64_t a2)
{
  _WORD *v4;
  uint64_t v5;
  NSObject *v6;
  _QWORD *v7;
  uint64_t v8;
  NSObject *v9;
  _BOOL8 result;
  NSObject *v11;
  void *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE applier[24];
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)a2)
  {
    v4 = (_WORD *)(a2 + 16);
    *(_WORD *)(a2 + 32) = *(_WORD *)(a1 + 48);
    v8 = *(_QWORD *)(a1 + 32);
    *(_WORD *)(a2 + 34) = v8;
    v9 = *(NSObject **)(a1 + 40);
    v17 = 0;
    v18 = &v17;
    v19 = 0x2000000000;
    v20 = 0;
    v13 = 0;
    v14 = &v13;
    v15 = 0x2000000000;
    v16 = (char *)(a2 + 36);
    if (v9)
    {
      *(_QWORD *)applier = MEMORY[0x1E0C809B0];
      *(_QWORD *)&applier[8] = 0x40000000;
      *(_QWORD *)&applier[16] = __nw_dispatch_data_copyout_block_invoke;
      v22 = (uint64_t)&unk_1E14A3448;
      v24 = &v13;
      v25 = v8;
      v23 = &v17;
      dispatch_data_apply(v9, applier);
    }
    _Block_object_dispose(&v13, 8);
    _Block_object_dispose(&v17, 8);
    memset((void *)(a2 + 66), 255, *(_QWORD *)(a1 + 32));
    v7 = *(_QWORD **)(a2 + 8);
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = v7;
    goto LABEL_9;
  }
  v4 = malloc_type_calloc(1uLL, 0x50uLL, 0xEAFB8F1AuLL);
  if (v4)
  {
LABEL_3:
    v4[8] = *(_WORD *)(a1 + 48);
    v5 = *(_QWORD *)(a1 + 32);
    v4[9] = v5;
    v6 = *(NSObject **)(a1 + 40);
    v17 = 0;
    v18 = &v17;
    v19 = 0x2000000000;
    v20 = 0;
    v13 = 0;
    v14 = &v13;
    v15 = 0x2000000000;
    v16 = (char *)(v4 + 10);
    if (v6)
    {
      *(_QWORD *)applier = MEMORY[0x1E0C809B0];
      *(_QWORD *)&applier[8] = 0x40000000;
      *(_QWORD *)&applier[16] = __nw_dispatch_data_copyout_block_invoke;
      v22 = (uint64_t)&unk_1E14A3448;
      v24 = &v13;
      v25 = v5;
      v23 = &v17;
      dispatch_data_apply(v6, applier);
    }
    _Block_object_dispose(&v13, 8);
    _Block_object_dispose(&v17, 8);
    memset(v4 + 25, 255, *(_QWORD *)(a1 + 32));
    *(_QWORD *)v4 = 0;
    v7 = *(_QWORD **)(a2 + 8);
    *((_QWORD *)v4 + 1) = v7;
LABEL_9:
    *v7 = v4;
    *(_QWORD *)(a2 + 8) = v4;
    return 1;
  }
  v11 = __nwlog_obj();
  os_log_type_enabled(v11, OS_LOG_TYPE_ERROR);
  *(_DWORD *)applier = 136446722;
  *(_QWORD *)&applier[4] = "strict_calloc";
  *(_WORD *)&applier[12] = 2048;
  *(_QWORD *)&applier[14] = 1;
  *(_WORD *)&applier[22] = 2048;
  v22 = 80;
  v12 = (void *)_os_log_send_and_compose_impl();
  result = __nwlog_abort((uint64_t)v12);
  if (!result)
  {
    free(v12);
    goto LABEL_3;
  }
  __break(1u);
  return result;
}

void nw_demux_options_enumerate_patterns(void *a1, uint64_t a2)
{
  char *v2;
  NSObject *v3;
  os_log_type_t v4;
  const char *v5;
  char *v6;
  _BOOL4 v7;
  char *backtrace_string;
  _BOOL4 v9;
  _QWORD v10[5];
  char v11;
  os_log_type_t v12;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (a2)
    {
      v10[0] = MEMORY[0x1E0C809B0];
      v10[1] = 0x40000000;
      v10[2] = __nw_demux_options_enumerate_patterns_block_invoke;
      v10[3] = &unk_1E149DF30;
      v10[4] = a2;
      nw_protocol_options_access_handle(a1, v10);
      return;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v14 = "nw_demux_options_enumerate_patterns";
    v2 = (char *)_os_log_send_and_compose_impl();
    v12 = OS_LOG_TYPE_ERROR;
    v11 = 0;
    if (__nwlog_fault(v2, &v12, &v11))
    {
      if (v12 == OS_LOG_TYPE_FAULT)
      {
        v3 = __nwlog_obj();
        v4 = v12;
        if (!os_log_type_enabled(v3, v12))
          goto LABEL_33;
        *(_DWORD *)buf = 136446210;
        v14 = "nw_demux_options_enumerate_patterns";
        v5 = "%{public}s called with null enumerate_block";
        goto LABEL_32;
      }
      if (!v11)
      {
        v3 = __nwlog_obj();
        v4 = v12;
        if (!os_log_type_enabled(v3, v12))
          goto LABEL_33;
        *(_DWORD *)buf = 136446210;
        v14 = "nw_demux_options_enumerate_patterns";
        v5 = "%{public}s called with null enumerate_block, backtrace limit exceeded";
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v3 = __nwlog_obj();
      v4 = v12;
      v9 = os_log_type_enabled(v3, v12);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          v14 = "nw_demux_options_enumerate_patterns";
          v15 = 2082;
          v16 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v3, v4, "%{public}s called with null enumerate_block, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        if (v2)
          goto LABEL_34;
        return;
      }
      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_demux_options_enumerate_patterns";
        v5 = "%{public}s called with null enumerate_block, no backtrace";
LABEL_32:
        _os_log_impl(&dword_182FBE000, v3, v4, v5, buf, 0xCu);
      }
    }
  }
  else
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v14 = "nw_demux_options_enumerate_patterns";
    v2 = (char *)_os_log_send_and_compose_impl();
    v12 = OS_LOG_TYPE_ERROR;
    v11 = 0;
    if (!__nwlog_fault(v2, &v12, &v11))
      goto LABEL_33;
    if (v12 == OS_LOG_TYPE_FAULT)
    {
      v3 = __nwlog_obj();
      v4 = v12;
      if (!os_log_type_enabled(v3, v12))
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v14 = "nw_demux_options_enumerate_patterns";
      v5 = "%{public}s called with null options";
      goto LABEL_32;
    }
    if (!v11)
    {
      v3 = __nwlog_obj();
      v4 = v12;
      if (!os_log_type_enabled(v3, v12))
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v14 = "nw_demux_options_enumerate_patterns";
      v5 = "%{public}s called with null options, backtrace limit exceeded";
      goto LABEL_32;
    }
    v6 = (char *)__nw_create_backtrace_string();
    v3 = __nwlog_obj();
    v4 = v12;
    v7 = os_log_type_enabled(v3, v12);
    if (!v6)
    {
      if (!v7)
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v14 = "nw_demux_options_enumerate_patterns";
      v5 = "%{public}s called with null options, no backtrace";
      goto LABEL_32;
    }
    if (v7)
    {
      *(_DWORD *)buf = 136446466;
      v14 = "nw_demux_options_enumerate_patterns";
      v15 = 2082;
      v16 = v6;
      _os_log_impl(&dword_182FBE000, v3, v4, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v6);
  }
LABEL_33:
  if (v2)
LABEL_34:
    free(v2);
}

uint64_t __nw_demux_options_enumerate_patterns_block_invoke(uint64_t a1, _QWORD *a2)
{
  do
    a2 = (_QWORD *)*a2;
  while (a2 && ((*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))() & 1) != 0);
  return 1;
}

void __nw_authentication_credential_storage_copy_shared_block_invoke()
{
  NWConcrete_nw_authentication_credential_storage *v0;
  void *v1;
  uint64_t v2;
  void *v3;

  v0 = objc_alloc_init(NWConcrete_nw_authentication_credential_storage);
  v1 = (void *)nw_authentication_credential_storage_copy_shared_storage;
  nw_authentication_credential_storage_copy_shared_storage = (uint64_t)v0;

  objc_msgSend(MEMORY[0x1E0C92C68], "sharedCredentialStorage");
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(void **)(nw_authentication_credential_storage_copy_shared_storage + 8);
  *(_QWORD *)(nw_authentication_credential_storage_copy_shared_storage + 8) = v2;

}

NWConcrete_nw_authentication_credential_storage *nw_authentication_credential_storage_create_ns(void *a1)
{
  NSURLCredentialStorage *v1;
  NWConcrete_nw_authentication_credential_storage *v2;
  NSURLCredentialStorage *credentialStorage;

  v1 = a1;
  v2 = objc_alloc_init(NWConcrete_nw_authentication_credential_storage);
  credentialStorage = v2->credentialStorage;
  v2->credentialStorage = v1;

  return v2;
}

_DWORD *nw_authentication_credential_storage_copy_default_credential(void *a1, void *a2)
{
  id *v3;
  id v4;
  void *v5;
  id v6;
  void *ns_protection_space;
  void *v8;
  _DWORD *v9;
  _DWORD *v10;
  void *v12;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  const char *v16;
  void *v17;
  char *backtrace_string;
  _BOOL4 v19;
  const char *v20;
  _BOOL4 v21;
  char v22;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v25;
  __int16 v26;
  char *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (v3)
  {
    if (v4)
    {
      v6 = v3[1];
      ns_protection_space = (void *)nw_authentication_challenge_get_ns_protection_space(v5);
      if (ns_protection_space)
      {
        objc_msgSend(v6, "defaultCredentialForProtectionSpace:", ns_protection_space);
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        if (v8)
        {
          v9 = -[NWConcrete_nw_authentication_credential initWithType:]([NWConcrete_nw_authentication_credential alloc], 1);
          nw_authentication_credential_apply_ns(v9, v8);
        }
        else
        {
          v9 = 0;
        }
        v10 = v9;

      }
      else
      {
        v10 = 0;
      }

      goto LABEL_10;
    }
    __nwlog_obj();
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v25 = "nw_authentication_credential_storage_copy_default_credential";
    v13 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (__nwlog_fault(v13, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v14 = objc_claimAutoreleasedReturnValue();
        v15 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)buf = 136446210;
          v25 = "nw_authentication_credential_storage_copy_default_credential";
          v16 = "%{public}s called with null challenge";
          goto LABEL_37;
        }
        goto LABEL_38;
      }
      if (!v22)
      {
        __nwlog_obj();
        v14 = objc_claimAutoreleasedReturnValue();
        v15 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)buf = 136446210;
          v25 = "nw_authentication_credential_storage_copy_default_credential";
          v16 = "%{public}s called with null challenge, backtrace limit exceeded";
          goto LABEL_37;
        }
        goto LABEL_38;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      v21 = os_log_type_enabled(v14, type);
      if (!backtrace_string)
      {
        if (v21)
        {
          *(_DWORD *)buf = 136446210;
          v25 = "nw_authentication_credential_storage_copy_default_credential";
          v16 = "%{public}s called with null challenge, no backtrace";
          goto LABEL_37;
        }
        goto LABEL_38;
      }
      if (!v21)
        goto LABEL_28;
      *(_DWORD *)buf = 136446466;
      v25 = "nw_authentication_credential_storage_copy_default_credential";
      v26 = 2082;
      v27 = backtrace_string;
      v20 = "%{public}s called with null challenge, dumping backtrace:%{public}s";
LABEL_27:
      _os_log_impl(&dword_182FBE000, v14, v15, v20, buf, 0x16u);
LABEL_28:

      free(backtrace_string);
    }
  }
  else
  {
    __nwlog_obj();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v25 = "nw_authentication_credential_storage_copy_default_credential";
    v13 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (__nwlog_fault(v13, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v14 = objc_claimAutoreleasedReturnValue();
        v15 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)buf = 136446210;
          v25 = "nw_authentication_credential_storage_copy_default_credential";
          v16 = "%{public}s called with null storage";
LABEL_37:
          _os_log_impl(&dword_182FBE000, v14, v15, v16, buf, 0xCu);
        }
LABEL_38:

        goto LABEL_39;
      }
      if (!v22)
      {
        __nwlog_obj();
        v14 = objc_claimAutoreleasedReturnValue();
        v15 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)buf = 136446210;
          v25 = "nw_authentication_credential_storage_copy_default_credential";
          v16 = "%{public}s called with null storage, backtrace limit exceeded";
          goto LABEL_37;
        }
        goto LABEL_38;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      v19 = os_log_type_enabled(v14, type);
      if (!backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446210;
          v25 = "nw_authentication_credential_storage_copy_default_credential";
          v16 = "%{public}s called with null storage, no backtrace";
          goto LABEL_37;
        }
        goto LABEL_38;
      }
      if (!v19)
        goto LABEL_28;
      *(_DWORD *)buf = 136446466;
      v25 = "nw_authentication_credential_storage_copy_default_credential";
      v26 = 2082;
      v27 = backtrace_string;
      v20 = "%{public}s called with null storage, dumping backtrace:%{public}s";
      goto LABEL_27;
    }
  }
LABEL_39:
  if (v13)
    free(v13);
  v10 = 0;
LABEL_10:

  return v10;
}

uint64_t nw_authentication_challenge_get_ns_protection_space(void *a1)
{
  id v1;
  void *v2;
  unsigned int v3;
  uint64_t v4;
  void *v5;
  void *v6;
  id *v7;
  id v8;
  NSObject *v9;
  int v10;
  const char *domain_for_policy;
  NSObject *v12;
  id *v13;
  char v14;
  const char *url_scheme;
  id *v16;
  id v17;
  const void *v18;
  void *v20;
  char *v21;
  NSObject *v22;
  os_log_type_t v23;
  char *backtrace_string;
  os_log_type_t v25;
  _BOOL4 v26;
  os_log_type_t v27;
  char v28;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v31;
  __int16 v32;
  char *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v31 = "nw_authentication_challenge_get_ns_protection_space";
    v21 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v28 = 0;
    if (__nwlog_fault(v21, &type, &v28))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v22 = objc_claimAutoreleasedReturnValue();
        v23 = type;
        if (os_log_type_enabled(v22, type))
        {
          *(_DWORD *)buf = 136446210;
          v31 = "nw_authentication_challenge_get_ns_protection_space";
          _os_log_impl(&dword_182FBE000, v22, v23, "%{public}s called with null challenge", buf, 0xCu);
        }
      }
      else if (v28)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v22 = objc_claimAutoreleasedReturnValue();
        v25 = type;
        v26 = os_log_type_enabled(v22, type);
        if (backtrace_string)
        {
          if (v26)
          {
            *(_DWORD *)buf = 136446466;
            v31 = "nw_authentication_challenge_get_ns_protection_space";
            v32 = 2082;
            v33 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v22, v25, "%{public}s called with null challenge, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_41;
        }
        if (v26)
        {
          *(_DWORD *)buf = 136446210;
          v31 = "nw_authentication_challenge_get_ns_protection_space";
          _os_log_impl(&dword_182FBE000, v22, v25, "%{public}s called with null challenge, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v22 = objc_claimAutoreleasedReturnValue();
        v27 = type;
        if (os_log_type_enabled(v22, type))
        {
          *(_DWORD *)buf = 136446210;
          v31 = "nw_authentication_challenge_get_ns_protection_space";
          _os_log_impl(&dword_182FBE000, v22, v27, "%{public}s called with null challenge, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_41:
    if (v21)
      free(v21);
    goto LABEL_4;
  }
  v3 = nw_authentication_challenge_get_type(v1) - 1;
  if (v3 > 7 || ((0xBFu >> v3) & 1) == 0)
  {
LABEL_4:
    v4 = 0;
    goto LABEL_23;
  }
  v5 = (void *)nw_authentication_challenge_copy_protection_space(v2);
  v6 = v5;
  if (v5)
  {
    v7 = v5;
    v8 = v7[1];

    if (v8 && (v9 = v8, v10 = -[NSObject type](v9, "type"), v9, v10 == 4))
    {
      domain_for_policy = (const char *)nw_endpoint_get_domain_for_policy(v9[14].isa);
      if (!domain_for_policy)
        domain_for_policy = nw_endpoint_get_hostname(v9);
      v12 = v9;
      -[NSObject port](v12, "port");

      v13 = v7;
      v14 = *((_BYTE *)v13 + 28);

      if ((v14 & 1) != 0)
      {

      }
      else
      {
        url_scheme = (const char *)nw_endpoint_get_url_scheme(v12);
        if (strcasecmp(url_scheme, "https"))
          strcasecmp(url_scheme, "wss");
      }
      v16 = v13;
      v17 = v16[2];

      if (v17)
        v17 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithCString:encoding:", v17, 5);
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", domain_for_policy);
      v18 = (const void *)CFURLProtectionSpaceCreate();
      v4 = objc_msgSend(objc_alloc(MEMORY[0x1E0C92C70]), "_initWithCFURLProtectionSpace:", v18);
      if (v18)
        CFRelease(v18);

    }
    else
    {
      v4 = 0;
    }

  }
  else
  {
    v4 = 0;
  }

LABEL_23:
  return v4;
}

void sub_1835DFFA0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_authentication_credential_apply_ns(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  unint64_t v8;
  int v9;
  _DWORD *v10;
  void *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  char *backtrace_string;
  os_log_type_t v16;
  _BOOL4 v17;
  os_log_type_t v18;
  char v19;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  char *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (v3)
  {
    objc_msgSend(v4, "user");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "password");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    nw_authentication_credential_set_username(v3, (const char *)objc_msgSend(v6, "UTF8String"));
    nw_authentication_credential_set_password(v3, (const char *)objc_msgSend(v7, "UTF8String"));
    v8 = objc_msgSend(v5, "persistence");
    if (v8 <= 3)
    {
      v9 = v8;
      v10 = v3;
      v10[3] = v9;

    }
    goto LABEL_5;
  }
  __nwlog_obj();
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v22 = "nw_authentication_credential_apply_ns";
  v12 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v19 = 0;
  if (__nwlog_fault(v12, &type, &v19))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_authentication_credential_apply_ns";
        _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s called with null credential", buf, 0xCu);
      }
    }
    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      v17 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          v22 = "nw_authentication_credential_apply_ns";
          v23 = 2082;
          v24 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v13, v16, "%{public}s called with null credential, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_authentication_credential_apply_ns";
        _os_log_impl(&dword_182FBE000, v13, v16, "%{public}s called with null credential, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v18 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_authentication_credential_apply_ns";
        _os_log_impl(&dword_182FBE000, v13, v18, "%{public}s called with null credential, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_22:
  if (v12)
    free(v12);
LABEL_5:

}

void nw_authentication_credential_storage_set_default_credential(void *a1, void *a2, void *a3)
{
  id *v5;
  id v6;
  id v7;
  void *v8;
  id v9;
  void *ns_protection_space;
  void *ns;
  void *v12;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  const char *v16;
  void *v17;
  void *v18;
  char *backtrace_string;
  _BOOL4 v20;
  char *v21;
  _BOOL4 v22;
  const char *v23;
  _BOOL4 v24;
  char v25;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v28;
  __int16 v29;
  char *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = a3;
  v8 = v7;
  if (!v5)
  {
    __nwlog_obj();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v28 = "nw_authentication_credential_storage_set_default_credential";
    v13 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v25 = 0;
    if (!__nwlog_fault(v13, &type, &v25))
      goto LABEL_50;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (v25)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v14 = objc_claimAutoreleasedReturnValue();
        v15 = type;
        v20 = os_log_type_enabled(v14, type);
        if (backtrace_string)
        {
          if (v20)
          {
            *(_DWORD *)buf = 136446466;
            v28 = "nw_authentication_credential_storage_set_default_credential";
            v29 = 2082;
            v30 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v14, v15, "%{public}s called with null storage, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
LABEL_50:
          if (!v13)
            goto LABEL_7;
LABEL_51:
          free(v13);
          goto LABEL_7;
        }
        if (v20)
        {
          *(_DWORD *)buf = 136446210;
          v28 = "nw_authentication_credential_storage_set_default_credential";
          v16 = "%{public}s called with null storage, no backtrace";
          goto LABEL_48;
        }
      }
      else
      {
        __nwlog_obj();
        v14 = objc_claimAutoreleasedReturnValue();
        v15 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)buf = 136446210;
          v28 = "nw_authentication_credential_storage_set_default_credential";
          v16 = "%{public}s called with null storage, backtrace limit exceeded";
          goto LABEL_48;
        }
      }
      goto LABEL_49;
    }
    __nwlog_obj();
    v14 = objc_claimAutoreleasedReturnValue();
    v15 = type;
    if (!os_log_type_enabled(v14, type))
      goto LABEL_49;
    *(_DWORD *)buf = 136446210;
    v28 = "nw_authentication_credential_storage_set_default_credential";
    v16 = "%{public}s called with null storage";
    goto LABEL_48;
  }
  if (!v6)
  {
    __nwlog_obj();
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v28 = "nw_authentication_credential_storage_set_default_credential";
    v13 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v25 = 0;
    if (!__nwlog_fault(v13, &type, &v25))
      goto LABEL_50;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v25)
      {
        __nwlog_obj();
        v14 = objc_claimAutoreleasedReturnValue();
        v15 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)buf = 136446210;
          v28 = "nw_authentication_credential_storage_set_default_credential";
          v16 = "%{public}s called with null challenge, backtrace limit exceeded";
          goto LABEL_48;
        }
        goto LABEL_49;
      }
      v21 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      v22 = os_log_type_enabled(v14, type);
      if (!v21)
      {
        if (v22)
        {
          *(_DWORD *)buf = 136446210;
          v28 = "nw_authentication_credential_storage_set_default_credential";
          v16 = "%{public}s called with null challenge, no backtrace";
          goto LABEL_48;
        }
        goto LABEL_49;
      }
      if (v22)
      {
        *(_DWORD *)buf = 136446466;
        v28 = "nw_authentication_credential_storage_set_default_credential";
        v29 = 2082;
        v30 = v21;
        v23 = "%{public}s called with null challenge, dumping backtrace:%{public}s";
LABEL_33:
        _os_log_impl(&dword_182FBE000, v14, v15, v23, buf, 0x16u);
      }
LABEL_34:

      free(v21);
      if (!v13)
        goto LABEL_7;
      goto LABEL_51;
    }
    __nwlog_obj();
    v14 = objc_claimAutoreleasedReturnValue();
    v15 = type;
    if (!os_log_type_enabled(v14, type))
      goto LABEL_49;
    *(_DWORD *)buf = 136446210;
    v28 = "nw_authentication_credential_storage_set_default_credential";
    v16 = "%{public}s called with null challenge";
LABEL_48:
    _os_log_impl(&dword_182FBE000, v14, v15, v16, buf, 0xCu);
    goto LABEL_49;
  }
  if (!v7)
  {
    __nwlog_obj();
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v28 = "nw_authentication_credential_storage_set_default_credential";
    v13 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v25 = 0;
    if (!__nwlog_fault(v13, &type, &v25))
      goto LABEL_50;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_authentication_credential_storage_set_default_credential";
        v16 = "%{public}s called with null credential";
        goto LABEL_48;
      }
LABEL_49:

      goto LABEL_50;
    }
    if (!v25)
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_authentication_credential_storage_set_default_credential";
        v16 = "%{public}s called with null credential, backtrace limit exceeded";
        goto LABEL_48;
      }
      goto LABEL_49;
    }
    v21 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v14 = objc_claimAutoreleasedReturnValue();
    v15 = type;
    v24 = os_log_type_enabled(v14, type);
    if (!v21)
    {
      if (v24)
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_authentication_credential_storage_set_default_credential";
        v16 = "%{public}s called with null credential, no backtrace";
        goto LABEL_48;
      }
      goto LABEL_49;
    }
    if (v24)
    {
      *(_DWORD *)buf = 136446466;
      v28 = "nw_authentication_credential_storage_set_default_credential";
      v29 = 2082;
      v30 = v21;
      v23 = "%{public}s called with null credential, dumping backtrace:%{public}s";
      goto LABEL_33;
    }
    goto LABEL_34;
  }
  v9 = v5[1];
  ns_protection_space = (void *)nw_authentication_challenge_get_ns_protection_space(v6);
  if (ns_protection_space)
  {
    ns = (void *)nw_authentication_credential_create_ns(v8);
    objc_msgSend(v9, "setDefaultCredential:forProtectionSpace:", ns, ns_protection_space);

  }
LABEL_7:

}

uint64_t nw_authentication_credential_create_ns(void *a1)
{
  _QWORD *v1;
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  _DWORD *v6;
  void *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v13;
  char *v14;
  NSObject *v15;
  os_log_type_t v16;
  id v17;
  char *v18;
  NSObject *v19;
  os_log_type_t v20;
  char *backtrace_string;
  os_log_type_t v22;
  _BOOL4 v23;
  char *v24;
  os_log_type_t v25;
  _BOOL4 v26;
  os_log_type_t v27;
  os_log_type_t v28;
  id v29;
  char *v30;
  NSObject *v31;
  os_log_type_t v32;
  char *v33;
  os_log_type_t v34;
  _BOOL4 v35;
  os_log_type_t v36;
  char v37;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v40;
  __int16 v41;
  char *v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = v1[2];

    v4 = (void *)*((_QWORD *)v2 + 3);
    goto LABEL_3;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v13 = (id)gLogObj;
  *(_DWORD *)buf = 136446210;
  v40 = "nw_authentication_credential_get_username";
  v14 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v37 = 0;
  if (__nwlog_fault(v14, &type, &v37))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v15 = (id)gLogObj;
      v16 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        v40 = "nw_authentication_credential_get_username";
        _os_log_impl(&dword_182FBE000, v15, v16, "%{public}s called with null credential", buf, 0xCu);
      }
LABEL_38:

      goto LABEL_39;
    }
    if (!v37)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v15 = (id)gLogObj;
      v27 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        v40 = "nw_authentication_credential_get_username";
        _os_log_impl(&dword_182FBE000, v15, v27, "%{public}s called with null credential, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_38;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v15 = (id)gLogObj;
    v22 = type;
    v23 = os_log_type_enabled(v15, type);
    if (!backtrace_string)
    {
      if (v23)
      {
        *(_DWORD *)buf = 136446210;
        v40 = "nw_authentication_credential_get_username";
        _os_log_impl(&dword_182FBE000, v15, v22, "%{public}s called with null credential, no backtrace", buf, 0xCu);
      }
      goto LABEL_38;
    }
    if (v23)
    {
      *(_DWORD *)buf = 136446466;
      v40 = "nw_authentication_credential_get_username";
      v41 = 2082;
      v42 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v15, v22, "%{public}s called with null credential, dumping backtrace:%{public}s", buf, 0x16u);
    }

    free(backtrace_string);
  }
LABEL_39:
  if (v14)
    free(v14);
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v29 = (id)gLogObj;
  *(_DWORD *)buf = 136446210;
  v40 = "nw_authentication_credential_get_password";
  v30 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v37 = 0;
  if (!__nwlog_fault(v30, &type, &v37))
    goto LABEL_63;
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v31 = (id)gLogObj;
    v32 = type;
    if (os_log_type_enabled(v31, type))
    {
      *(_DWORD *)buf = 136446210;
      v40 = "nw_authentication_credential_get_password";
      _os_log_impl(&dword_182FBE000, v31, v32, "%{public}s called with null credential", buf, 0xCu);
    }
  }
  else if (v37)
  {
    v33 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v31 = (id)gLogObj;
    v34 = type;
    v35 = os_log_type_enabled(v31, type);
    if (v33)
    {
      if (v35)
      {
        *(_DWORD *)buf = 136446466;
        v40 = "nw_authentication_credential_get_password";
        v41 = 2082;
        v42 = v33;
        _os_log_impl(&dword_182FBE000, v31, v34, "%{public}s called with null credential, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(v33);
      goto LABEL_63;
    }
    if (v35)
    {
      *(_DWORD *)buf = 136446210;
      v40 = "nw_authentication_credential_get_password";
      _os_log_impl(&dword_182FBE000, v31, v34, "%{public}s called with null credential, no backtrace", buf, 0xCu);
    }
  }
  else
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v31 = (id)gLogObj;
    v36 = type;
    if (os_log_type_enabled(v31, type))
    {
      *(_DWORD *)buf = 136446210;
      v40 = "nw_authentication_credential_get_password";
      _os_log_impl(&dword_182FBE000, v31, v36, "%{public}s called with null credential, backtrace limit exceeded", buf, 0xCu);
    }
  }

LABEL_63:
  if (v30)
    free(v30);
  v3 = 0;
  v4 = 0;
LABEL_3:

  v5 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithUTF8String:", v3);
  if (v4)
    v4 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithUTF8String:", v4);
  v6 = v2;
  v7 = v6;
  if (v2)
  {
    v8 = v6[3];

    v9 = (v8 - 1);
    if (v9 <= 2)
      v10 = v9 + 1;
    else
      v10 = 0;
    goto LABEL_9;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v17 = (id)gLogObj;
  *(_DWORD *)buf = 136446210;
  v40 = "nw_authentication_credential_get_persistence";
  v18 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v37 = 0;
  if (__nwlog_fault(v18, &type, &v37))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v19 = (id)gLogObj;
      v20 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        v40 = "nw_authentication_credential_get_persistence";
        _os_log_impl(&dword_182FBE000, v19, v20, "%{public}s called with null credential", buf, 0xCu);
      }
    }
    else if (v37)
    {
      v24 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v19 = (id)gLogObj;
      v25 = type;
      v26 = os_log_type_enabled(v19, type);
      if (v24)
      {
        if (v26)
        {
          *(_DWORD *)buf = 136446466;
          v40 = "nw_authentication_credential_get_persistence";
          v41 = 2082;
          v42 = v24;
          _os_log_impl(&dword_182FBE000, v19, v25, "%{public}s called with null credential, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v24);
        goto LABEL_57;
      }
      if (v26)
      {
        *(_DWORD *)buf = 136446210;
        v40 = "nw_authentication_credential_get_persistence";
        _os_log_impl(&dword_182FBE000, v19, v25, "%{public}s called with null credential, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v19 = (id)gLogObj;
      v28 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        v40 = "nw_authentication_credential_get_persistence";
        _os_log_impl(&dword_182FBE000, v19, v28, "%{public}s called with null credential, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_57:
  if (v18)
    free(v18);
  v10 = 0;
LABEL_9:
  v11 = objc_msgSend(objc_alloc(MEMORY[0x1E0C92C60]), "initWithUser:password:persistence:", v5, v4, v10);

  return v11;
}

void nw_authentication_credential_cache_entry_set_http_authentication(void *a1, const void *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  const void *v5;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  const char *v10;
  char *backtrace_string;
  _BOOL4 v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    v5 = (const void *)v3[1];
    if (v5)
    {
      CFRelease(v5);
      v4[1] = 0;
    }
    if (a2)
      v4[1] = CFRetain(a2);
    goto LABEL_6;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_authentication_credential_cache_entry_set_http_authentication";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v7, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_authentication_credential_cache_entry_set_http_authentication";
        v10 = "%{public}s called with null cache_entry";
LABEL_20:
        _os_log_impl(&dword_182FBE000, v8, v9, v10, buf, 0xCu);
      }
    }
    else
    {
      if (v13)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v8 = objc_claimAutoreleasedReturnValue();
        v9 = type;
        v12 = os_log_type_enabled(v8, type);
        if (backtrace_string)
        {
          if (v12)
          {
            *(_DWORD *)buf = 136446466;
            v16 = "nw_authentication_credential_cache_entry_set_http_authentication";
            v17 = 2082;
            v18 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null cache_entry, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_22;
        }
        if (!v12)
          goto LABEL_21;
        *(_DWORD *)buf = 136446210;
        v16 = "nw_authentication_credential_cache_entry_set_http_authentication";
        v10 = "%{public}s called with null cache_entry, no backtrace";
        goto LABEL_20;
      }
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_authentication_credential_cache_entry_set_http_authentication";
        v10 = "%{public}s called with null cache_entry, backtrace limit exceeded";
        goto LABEL_20;
      }
    }
LABEL_21:

  }
LABEL_22:
  if (v7)
    free(v7);
LABEL_6:

}

CFTypeRef nw_authentication_credential_cache_entry_get_http_authentication(void *a1)
{
  id v1;
  void *v2;
  const void *v3;
  CFTypeRef v4;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  const char *v9;
  char *backtrace_string;
  _BOOL4 v11;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v16 = "nw_authentication_credential_cache_entry_get_http_authentication";
    v6 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v13 = 0;
    if (!__nwlog_fault(v6, &type, &v13))
      goto LABEL_19;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_authentication_credential_cache_entry_get_http_authentication";
        v9 = "%{public}s called with null cache_entry";
LABEL_17:
        _os_log_impl(&dword_182FBE000, v7, v8, v9, buf, 0xCu);
      }
    }
    else
    {
      if (v13)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v7 = objc_claimAutoreleasedReturnValue();
        v8 = type;
        v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446466;
            v16 = "nw_authentication_credential_cache_entry_get_http_authentication";
            v17 = 2082;
            v18 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null cache_entry, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_19;
        }
        if (!v11)
          goto LABEL_18;
        *(_DWORD *)buf = 136446210;
        v16 = "nw_authentication_credential_cache_entry_get_http_authentication";
        v9 = "%{public}s called with null cache_entry, no backtrace";
        goto LABEL_17;
      }
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_authentication_credential_cache_entry_get_http_authentication";
        v9 = "%{public}s called with null cache_entry, backtrace limit exceeded";
        goto LABEL_17;
      }
    }
LABEL_18:

LABEL_19:
    if (v6)
      free(v6);
    goto LABEL_21;
  }
  v3 = (const void *)*((_QWORD *)v1 + 1);
  if (!v3)
  {
LABEL_21:
    v4 = 0;
    goto LABEL_22;
  }
  v4 = CFRetain(v3);
LABEL_22:

  return v4;
}

void nw_authentication_credential_cache_entry_set_credential(uint64_t a1, void *a2)
{
  id v4;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  const char *v9;
  char *backtrace_string;
  _BOOL4 v11;
  char v12;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v4 = a2;
  if (a1)
  {
    objc_storeStrong((id *)(a1 + 16), a2);
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v15 = "nw_authentication_credential_cache_entry_set_credential";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v12 = 0;
  if (__nwlog_fault(v6, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_authentication_credential_cache_entry_set_credential";
        v9 = "%{public}s called with null cache_entry";
LABEL_17:
        _os_log_impl(&dword_182FBE000, v7, v8, v9, buf, 0xCu);
      }
    }
    else
    {
      if (v12)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v7 = objc_claimAutoreleasedReturnValue();
        v8 = type;
        v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446466;
            v15 = "nw_authentication_credential_cache_entry_set_credential";
            v16 = 2082;
            v17 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null cache_entry, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_19;
        }
        if (!v11)
          goto LABEL_18;
        *(_DWORD *)buf = 136446210;
        v15 = "nw_authentication_credential_cache_entry_set_credential";
        v9 = "%{public}s called with null cache_entry, no backtrace";
        goto LABEL_17;
      }
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_authentication_credential_cache_entry_set_credential";
        v9 = "%{public}s called with null cache_entry, backtrace limit exceeded";
        goto LABEL_17;
      }
    }
LABEL_18:

  }
LABEL_19:
  if (v6)
    free(v6);
LABEL_3:

}

void nw_authentication_credential_cache_entry_set_for_proxy(uint64_t a1, char a2)
{
  void *v2;
  char *v3;
  NSObject *v4;
  os_log_type_t v5;
  const char *v6;
  char *backtrace_string;
  _BOOL4 v8;
  char v9;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v12;
  __int16 v13;
  char *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    *(_BYTE *)(a1 + 28) = a2;
    return;
  }
  __nwlog_obj();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v12 = "nw_authentication_credential_cache_entry_set_for_proxy";
  v3 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v9 = 0;
  if (__nwlog_fault(v3, &type, &v9))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v4 = objc_claimAutoreleasedReturnValue();
      v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        v12 = "nw_authentication_credential_cache_entry_set_for_proxy";
        v6 = "%{public}s called with null cache_entry";
LABEL_17:
        _os_log_impl(&dword_182FBE000, v4, v5, v6, buf, 0xCu);
      }
    }
    else
    {
      if (v9)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v4 = objc_claimAutoreleasedReturnValue();
        v5 = type;
        v8 = os_log_type_enabled(v4, type);
        if (backtrace_string)
        {
          if (v8)
          {
            *(_DWORD *)buf = 136446466;
            v12 = "nw_authentication_credential_cache_entry_set_for_proxy";
            v13 = 2082;
            v14 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v4, v5, "%{public}s called with null cache_entry, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_19;
        }
        if (!v8)
          goto LABEL_18;
        *(_DWORD *)buf = 136446210;
        v12 = "nw_authentication_credential_cache_entry_set_for_proxy";
        v6 = "%{public}s called with null cache_entry, no backtrace";
        goto LABEL_17;
      }
      __nwlog_obj();
      v4 = objc_claimAutoreleasedReturnValue();
      v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        v12 = "nw_authentication_credential_cache_entry_set_for_proxy";
        v6 = "%{public}s called with null cache_entry, backtrace limit exceeded";
        goto LABEL_17;
      }
    }
LABEL_18:

  }
LABEL_19:
  if (v3)
    free(v3);
}

void sub_1835E40C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34)
{
  void *v34;
  void *v35;
  void *v36;

  _Unwind_Resume(a1);
}

void sub_1835E4C64(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1835E5D0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

BOOL nw_endpoint_proxy_unsatisfied_handler_should_use_proxy(void *a1)
{
  id v1;
  void *v2;
  _DWORD *v3;
  int v4;
  _DWORD *v5;
  int v6;
  _BOOL8 v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  NSObject *v10;
  int v11;
  void *v12;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  char *backtrace_string;
  os_log_type_t v17;
  _BOOL4 v18;
  os_log_type_t v19;
  _QWORD v21[5];
  char v22;
  uint8_t buf[4];
  const char *v24;
  __int16 v25;
  int v26;
  _BYTE v27[24];
  char v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)v27 = 136446210;
    *(_QWORD *)&v27[4] = "nw_endpoint_proxy_unsatisfied_handler_should_use_proxy";
    v13 = (char *)_os_log_send_and_compose_impl();

    buf[0] = 16;
    v22 = 0;
    if (__nwlog_fault(v13, buf, &v22))
    {
      if (buf[0] == 17)
      {
        __nwlog_obj();
        v14 = objc_claimAutoreleasedReturnValue();
        v15 = buf[0];
        if (os_log_type_enabled(v14, (os_log_type_t)buf[0]))
        {
          *(_DWORD *)v27 = 136446210;
          *(_QWORD *)&v27[4] = "nw_endpoint_proxy_unsatisfied_handler_should_use_proxy";
          _os_log_impl(&dword_182FBE000, v14, v15, "%{public}s called with null path", v27, 0xCu);
        }
      }
      else if (v22)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v14 = objc_claimAutoreleasedReturnValue();
        v17 = buf[0];
        v18 = os_log_type_enabled(v14, (os_log_type_t)buf[0]);
        if (backtrace_string)
        {
          if (v18)
          {
            *(_DWORD *)v27 = 136446466;
            *(_QWORD *)&v27[4] = "nw_endpoint_proxy_unsatisfied_handler_should_use_proxy";
            *(_WORD *)&v27[12] = 2082;
            *(_QWORD *)&v27[14] = backtrace_string;
            _os_log_impl(&dword_182FBE000, v14, v17, "%{public}s called with null path, dumping backtrace:%{public}s", v27, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_25;
        }
        if (v18)
        {
          *(_DWORD *)v27 = 136446210;
          *(_QWORD *)&v27[4] = "nw_endpoint_proxy_unsatisfied_handler_should_use_proxy";
          _os_log_impl(&dword_182FBE000, v14, v17, "%{public}s called with null path, no backtrace", v27, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v14 = objc_claimAutoreleasedReturnValue();
        v19 = buf[0];
        if (os_log_type_enabled(v14, (os_log_type_t)buf[0]))
        {
          *(_DWORD *)v27 = 136446210;
          *(_QWORD *)&v27[4] = "nw_endpoint_proxy_unsatisfied_handler_should_use_proxy";
          _os_log_impl(&dword_182FBE000, v14, v19, "%{public}s called with null path, backtrace limit exceeded", v27, 0xCu);
        }
      }

    }
LABEL_25:
    if (v13)
      free(v13);
    goto LABEL_27;
  }
  v3 = v1;
  v4 = v3[94];

  if (v4 != 2)
  {
LABEL_27:
    v7 = 1;
    goto LABEL_28;
  }
  v5 = v3;
  v6 = v5[95];

  v7 = 1;
  if (v6 == 2)
  {
    *(_QWORD *)v27 = 0;
    *(_QWORD *)&v27[8] = v27;
    *(_QWORD *)&v27[16] = 0x2020000000;
    v28 = 1;
    v8 = (unsigned __int8 *)nw_path_copy_proxy_configs(v5);
    v9 = v8;
    if (v8)
    {
      v21[0] = MEMORY[0x1E0C809B0];
      v21[1] = 3221225472;
      v21[2] = __nw_endpoint_proxy_unsatisfied_handler_should_use_proxy_block_invoke;
      v21[3] = &unk_1E14A8DC0;
      v21[4] = v27;
      nw_array_apply(v8, (uint64_t)v21);
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v10 = (id)gLogObj;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      v11 = *(unsigned __int8 *)(*(_QWORD *)&v27[8] + 24);
      *(_DWORD *)buf = 136446466;
      v24 = "nw_endpoint_proxy_unsatisfied_handler_should_use_proxy";
      v25 = 1024;
      v26 = v11;
      _os_log_impl(&dword_182FBE000, v10, OS_LOG_TYPE_INFO, "%{public}s unsatisfied path allowed to use proxy: %d", buf, 0x12u);
    }

    v7 = *(_BYTE *)(*(_QWORD *)&v27[8] + 24) != 0;
    _Block_object_dispose(v27, 8);
  }
LABEL_28:

  return v7;
}

void sub_1835E6AB4(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  _Block_object_dispose((const void *)(v2 - 96), 8);

  _Unwind_Resume(a1);
}

uint64_t ___ZL35nw_endpoint_proxy_configs_are_equalPU22objcproto11OS_nw_array8NSObjectS1__block_invoke(uint64_t a1, unint64_t a2, void *a3)
{
  id v5;
  void *v6;
  char is_equal;
  uint64_t v8;

  v5 = a3;
  nw_array_get_object_at_index(*(_QWORD *)(a1 + 32), a2);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  is_equal = nw_proxy_config_is_equal(v5, v6);

  if ((is_equal & 1) == 0)
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 0;
  v8 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);

  return v8;
}

void sub_1835E6B5C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t __nw_endpoint_proxy_unsatisfied_handler_should_use_proxy_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  if (!nw_proxy_config_supports_unsatisfied_paths(a3))
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 0;
  return *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
}

void sub_1835E6C44(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1835E6DB8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1835E6E9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

BOOL ___ZL31nw_endpoint_proxy_check_for_pacP30NWConcrete_nw_endpoint_handlerPU22objcproto11OS_nw_array8NSObject_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  int v4;

  v4 = nw_proxy_config_get_mode(a3) & 0xFFFFFFFE;
  if (v4 == 2)
  {
    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 97) |= 2u;
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
  }
  return v4 != 2;
}

uint64_t __Block_byref_object_copy__26313(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__26314(uint64_t a1)
{

}

uint64_t ___ZL43nw_endpoint_proxy_check_for_companion_proxyPU22objcproto11OS_nw_array8NSObject_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  uint64_t v6;
  id *v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  const char *v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  id v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  if (!nw_proxy_config_get_is_companion_proxy(v5))
    goto LABEL_7;
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v8 = *(_QWORD *)(v6 + 40);
  v7 = (id *)(v6 + 40);
  if (!v8)
  {
    objc_storeStrong(v7, a3);
LABEL_7:
    v11 = 1;
    goto LABEL_8;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v9 = (id)gLogObj;
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
    v13 = 136446722;
    v14 = "nw_endpoint_proxy_check_for_companion_proxy_block_invoke";
    v15 = 2112;
    v16 = v10;
    v17 = 2112;
    v18 = v5;
    _os_log_impl(&dword_182FBE000, v9, OS_LOG_TYPE_ERROR, "%{public}s Can only have a single companion proxy, got %@ and %@", (uint8_t *)&v13, 0x20u);
  }

  v11 = 0;
LABEL_8:

  return v11;
}

CFURLRef nw_endpoint_proxy_copy_synthesized_url(void *a1, void *a2, int a3, _BYTE *a4)
{
  id v7;
  id v8;
  NSObject *v9;
  int v10;
  NSObject *v11;
  CFURLRef v12;
  const __CFAllocator *v13;
  CFMutableStringRef Mutable;
  NSObject *v15;
  NSObject *v16;
  int v17;
  _BOOL4 v18;
  char *v19;
  int address_family;
  _BOOL4 v22;
  id v23;
  char *v24;
  NSObject *v25;
  os_log_type_t v26;
  NSObject *v27;
  const char *v28;
  NSObject *v29;
  int v30;
  servent *v31;
  NSObject *v32;
  uint64_t v33;
  NSObject *v34;
  NSObject *v35;
  unsigned int v36;
  NSObject *v37;
  char *v38;
  os_log_type_t v39;
  _BOOL4 v40;
  NSObject *v41;
  os_log_type_t v43;
  void *v44;
  os_log_type_t v45;
  char *backtrace_string;
  os_log_type_t v47;
  _BOOL4 v48;
  os_log_type_t v49;
  _QWORD v50[5];
  char v51;
  uint8_t v52[4];
  const char *v53;
  __int16 v54;
  CFURLRef v55;
  _BYTE buf[24];
  char v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v7 = a1;
  v8 = a2;
  if (!v7)
  {
    __nwlog_obj();
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_endpoint_proxy_copy_synthesized_url";
    v24 = (char *)_os_log_send_and_compose_impl();

    v52[0] = 16;
    v51 = 0;
    if (!__nwlog_fault(v24, v52, &v51))
      goto LABEL_68;
    if (v52[0] == 17)
    {
      __nwlog_obj();
      v25 = objc_claimAutoreleasedReturnValue();
      v45 = v52[0];
      if (os_log_type_enabled(v25, (os_log_type_t)v52[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_endpoint_proxy_copy_synthesized_url";
        _os_log_impl(&dword_182FBE000, v25, v45, "%{public}s called with null endpoint", buf, 0xCu);
      }
    }
    else if (v51)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v25 = objc_claimAutoreleasedReturnValue();
      v47 = v52[0];
      v48 = os_log_type_enabled(v25, (os_log_type_t)v52[0]);
      if (backtrace_string)
      {
        if (v48)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_endpoint_proxy_copy_synthesized_url";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v25, v47, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_68;
      }
      if (v48)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_endpoint_proxy_copy_synthesized_url";
        _os_log_impl(&dword_182FBE000, v25, v47, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v25 = objc_claimAutoreleasedReturnValue();
      v49 = v52[0];
      if (os_log_type_enabled(v25, (os_log_type_t)v52[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_endpoint_proxy_copy_synthesized_url";
        _os_log_impl(&dword_182FBE000, v25, v49, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_67:

    goto LABEL_68;
  }
  v9 = v7;
  v10 = -[NSObject type](v9, "type");

  if ((v10 - 3) <= 0xFFFFFFFD)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v11 = (id)gLogObj;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_endpoint_proxy_copy_synthesized_url";
      _os_log_impl(&dword_182FBE000, v11, OS_LOG_TYPE_ERROR, "%{public}s Endpoint type is not an address or host, cannot synthesize URL", buf, 0xCu);
    }

    goto LABEL_6;
  }
  v13 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  if (Mutable)
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x2020000000;
    v57 = 0;
    if (v8 && a3)
    {
      v50[0] = MEMORY[0x1E0C809B0];
      v50[1] = 3221225472;
      v50[2] = __nw_endpoint_proxy_copy_synthesized_url_block_invoke;
      v50[3] = &unk_1E149FB50;
      v50[4] = buf;
      nw_parameters_internal_iterate_protocol_stack(v8, 4, 0, v50);
      if (*(_BYTE *)(*(_QWORD *)&buf[8] + 24))
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v15 = (id)gLogObj;
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)v52 = 136446210;
          v53 = "nw_endpoint_proxy_copy_synthesized_url";
          _os_log_impl(&dword_182FBE000, v15, OS_LOG_TYPE_DEBUG, "%{public}s Found TLS protocol, using https://", v52, 0xCu);
        }

        v16 = v9;
        v17 = -[NSObject port](v16, "port");

        v18 = v17 != 47873;
        if (a4 && v17 != 47873)
          *a4 = 1;
        CFStringAppend(Mutable, CFSTR("https://"));
        if (v10 != 2)
        {
LABEL_17:
          if (v10 == 1)
          {
            v19 = nw_endpoint_copy_address_string(v9);
            if (v19)
            {
              address_family = nw_endpoint_get_address_family(v9);
              v22 = address_family == 30 || address_family == 18;
              if (v18 && v22)
                CFStringAppendFormat(Mutable, 0, CFSTR("[%s]"), v19);
              else
                CFStringAppendFormat(Mutable, 0, CFSTR("%s"), v19);
              free(v19);
            }
          }
LABEL_44:
          if (v18)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v34 = (id)gLogObj;
            if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)v52 = 136446210;
              v53 = "nw_endpoint_proxy_copy_synthesized_url";
              _os_log_impl(&dword_182FBE000, v34, OS_LOG_TYPE_DEBUG, "%{public}s Overrode to https://, adding port number to URL", v52, 0xCu);
            }

            v35 = v9;
            v36 = -[NSObject port](v35, "port");

            CFStringAppendFormat(Mutable, 0, CFSTR(":%u"), __rev16(v36));
          }
          v12 = CFURLCreateWithString(v13, Mutable, 0);
          CFRelease(Mutable);
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v37 = (id)gLogObj;
          if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)v52 = 136446466;
            v53 = "nw_endpoint_proxy_copy_synthesized_url";
            v54 = 2114;
            v55 = v12;
            _os_log_impl(&dword_182FBE000, v37, OS_LOG_TYPE_DEBUG, "%{public}s Synthesized URL %{public}@", v52, 0x16u);
          }

LABEL_60:
          _Block_object_dispose(buf, 8);
          goto LABEL_61;
        }
LABEL_42:
        v32 = v9;
        v33 = -[NSObject hostname](v32, "hostname");

        if (v33)
          CFStringAppendFormat(Mutable, 0, CFSTR("%s"), v33);
        goto LABEL_44;
      }
    }
    else if (!v8)
    {
      goto LABEL_39;
    }
    if (nw_parameters_get_ip_protocol(v8) == 17)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v27 = (id)gLogObj;
      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v52 = 136446210;
        v53 = "nw_endpoint_proxy_copy_synthesized_url";
        _os_log_impl(&dword_182FBE000, v27, OS_LOG_TYPE_DEBUG, "%{public}s Using datagram service lookup for UDP", v52, 0xCu);
      }

      v28 = "udp";
LABEL_40:
      v29 = v9;
      v30 = -[NSObject port](v29, "port");

      v31 = getservbyport(v30, v28);
      if (!v31)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v41 = (id)gLogObj;
        if (os_log_type_enabled(v41, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)v52 = 136446210;
          v53 = "nw_endpoint_proxy_copy_synthesized_url";
          _os_log_impl(&dword_182FBE000, v41, OS_LOG_TYPE_DEBUG, "%{public}s Unknown service and did not find TLS protocol, cannot synthesize URL", v52, 0xCu);
        }

        CFRelease(Mutable);
        v12 = 0;
        goto LABEL_60;
      }
      CFStringAppendFormat(Mutable, 0, CFSTR("%s://"), v31->s_name);
      v18 = 0;
      if (v10 != 2)
        goto LABEL_17;
      goto LABEL_42;
    }
LABEL_39:
    v28 = "tcp";
    goto LABEL_40;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v23 = (id)gLogObj;
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_endpoint_proxy_copy_synthesized_url";
  v24 = (char *)_os_log_send_and_compose_impl();

  v52[0] = 16;
  v51 = 0;
  if (__nwlog_fault(v24, v52, &v51))
  {
    if (v52[0] == 17)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v25 = (id)gLogObj;
      v26 = v52[0];
      if (os_log_type_enabled(v25, (os_log_type_t)v52[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_endpoint_proxy_copy_synthesized_url";
        _os_log_impl(&dword_182FBE000, v25, v26, "%{public}s CFStringCreateMutable failed", buf, 0xCu);
      }
    }
    else if (v51)
    {
      v38 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v25 = (id)gLogObj;
      v39 = v52[0];
      v40 = os_log_type_enabled(v25, (os_log_type_t)v52[0]);
      if (v38)
      {
        if (v40)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_endpoint_proxy_copy_synthesized_url";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v38;
          _os_log_impl(&dword_182FBE000, v25, v39, "%{public}s CFStringCreateMutable failed, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v38);
        if (!v24)
          goto LABEL_6;
        goto LABEL_69;
      }
      if (v40)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_endpoint_proxy_copy_synthesized_url";
        _os_log_impl(&dword_182FBE000, v25, v39, "%{public}s CFStringCreateMutable failed, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v25 = (id)gLogObj;
      v43 = v52[0];
      if (os_log_type_enabled(v25, (os_log_type_t)v52[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_endpoint_proxy_copy_synthesized_url";
        _os_log_impl(&dword_182FBE000, v25, v43, "%{public}s CFStringCreateMutable failed, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_67;
  }
LABEL_68:
  if (v24)
LABEL_69:
    free(v24);
LABEL_6:
  v12 = 0;
LABEL_61:

  return v12;
}

void sub_1835E7A98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  void *v15;
  void *v16;
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

uint64_t ___ZL32nw_endpoint_proxy_process_configP30NWConcrete_nw_endpoint_handler_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;

  v4 = a3;
  if (nw_proxy_config_is_privacy_proxy(v4, 0) && !nw_proxy_config_use_over_privacy_proxy(v4))
    nw_array_append(*(_QWORD *)(a1 + 32), v4);

  return 1;
}

uint64_t ___ZL32nw_endpoint_proxy_process_configP30NWConcrete_nw_endpoint_handler_block_invoke_2(void **a1, uint64_t a2, void *a3)
{
  id v4;

  v4 = a3;
  if (nw_proxy_config_is_privacy_proxy(v4, 0))
    nw_endpoint_proxy_add_config_if_applicable(a1[4], a1[5], v4, a1[6], a1[7], 0);

  return 1;
}

void sub_1835E7BC8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZL32nw_endpoint_proxy_process_configP30NWConcrete_nw_endpoint_handler_block_invoke_3(void **a1, uint64_t a2, void *a3)
{
  id v4;

  v4 = a3;
  if ((nw_proxy_config_is_privacy_proxy(v4, 0) & 1) == 0)
    nw_endpoint_proxy_add_config_if_applicable(a1[4], a1[5], v4, a1[6], a1[7], 0);

  return 1;
}

void sub_1835E7C30(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZL32nw_endpoint_proxy_process_configP30NWConcrete_nw_endpoint_handler_block_invoke_4(void **a1, uint64_t a2, void *a3)
{
  id v4;

  v4 = a3;
  if ((nw_proxy_config_is_privacy_proxy(v4, 0) & 1) == 0)
    nw_endpoint_proxy_add_config_if_applicable(a1[4], a1[5], v4, a1[6], a1[7], 1);

  return 1;
}

void sub_1835E7C98(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZL32nw_endpoint_proxy_resolve_configP30NWConcrete_nw_endpoint_handler_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  int mode;
  int v6;
  NSObject *v7;
  NSObject *v8;
  CFTypeRef v9;
  void *v10;
  id v11;
  int effective_audit_token;
  CFAllocatorRef *v13;
  CFDataRef v14;
  NSObject *v15;
  const void *v16;
  void *v17;
  id v18;
  const void *v19;
  char v20;
  int v21;
  int v22;
  int v23;
  const char *v24;
  NWConcrete_nw_pac_resolver *v25;
  NSObject *v26;
  const char *v27;
  const char *v28;
  nw_endpoint_t v29;
  const char *v30;
  const char *v31;
  const char *v32;
  id v33;
  NSObject *v34;
  const char *v35;
  const char *v36;
  nw_endpoint_t v37;
  const char *v38;
  const char *v39;
  const char *v40;
  id v41;
  id v42;
  char *v43;
  NSObject *v44;
  os_log_type_t v45;
  int minimize_logging;
  char logging_disabled;
  NSObject *v48;
  const char *v49;
  const char *v50;
  nw_endpoint_t v51;
  const char *v52;
  const char *v53;
  const char *v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  int v60;
  char v61;
  NSObject *v62;
  const char *v63;
  const char *v64;
  nw_endpoint_t v65;
  const char *v66;
  const char *v67;
  const char *v68;
  id v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  NSObject *v74;
  const char *effective_bundle_id;
  CFStringRef v76;
  char *backtrace_string;
  NSObject *v78;
  os_log_type_t v79;
  _BOOL4 v80;
  char is_opaque;
  int https_proxy_over_tls;
  int should_trust_invalid_certificates;
  char is_dry_run;
  const char *id_string;
  uint64_t v86;
  _BOOL8 v87;
  uint64_t v88;
  void *v89;
  const char *v90;
  const char *v91;
  nw_endpoint_t v92;
  const char *logging_description;
  const char *v94;
  const char *v95;
  id v96;
  os_log_type_t v97;
  CFTypeRef v99;
  const char *v100;
  nw_endpoint_t v101;
  const char *v102;
  const char *v103;
  const char *v104;
  id v105;
  NSObject *v106;
  const char *v107;
  nw_endpoint_t v108;
  const char *v109;
  const char *v110;
  const char *v111;
  id v112;
  const void *v113;
  CFTypeRef loga;
  NSObject *logb;
  const void *log;
  const char *logc;
  const char *logd;
  NSObject *v119;
  os_log_t v120;
  NSObject *v121;
  _QWORD v122[4];
  id v123;
  id v124;
  id v125;
  char v126;
  os_log_type_t type;
  _QWORD v128[4];
  id v129;
  id v130;
  id v131;
  UInt8 bytes[32];
  __int16 v133;
  const char *v134;
  __int16 v135;
  const char *v136;
  __int16 v137;
  const char *v138;
  __int16 v139;
  id v140;
  uint64_t v141;

  v141 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  mode = nw_proxy_config_get_mode(v4);
  if ((mode & 0xFFFFFFFE) == 2)
  {
    v6 = mode;
    v121 = nw_endpoint_handler_copy_context(*(void **)(a1 + 32));
    if (v6 == 2)
    {
      v7 = nw_proxy_config_copy_endpoint(v4);
      v119 = v7;
      if (v7)
      {
        v8 = v7;
        v9 = nw_endpoint_copy_cfurl(v7);
        if (v9)
        {
          v10 = *(void **)(a1 + 32);
          if (*(_QWORD *)(*(_QWORD *)(a1 + 40) + 64))
          {
            v11 = nw_endpoint_handler_copy_parameters(v10);
            memset(bytes, 0, sizeof(bytes));
            effective_audit_token = nw_parameters_get_effective_audit_token(v11, bytes);
            v13 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
            if (effective_audit_token)
              v14 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], bytes, 32);
            else
              v14 = 0;
            log = v9;
            effective_bundle_id = (const char *)nw_parameters_get_effective_bundle_id(v11);
            if (effective_bundle_id)
              v76 = CFStringCreateWithCString(*v13, effective_bundle_id, 0x8000100u);
            else
              v76 = 0;
            v113 = *(const void **)(*(_QWORD *)(a1 + 40) + 64);
            is_opaque = nw_parameters_get_https_proxy_is_opaque(v11);
            https_proxy_over_tls = nw_parameters_get_https_proxy_over_tls(v11);
            should_trust_invalid_certificates = nw_parameters_get_should_trust_invalid_certificates(v11);
            is_dry_run = nw_endpoint_handler_is_dry_run(*(void **)(a1 + 32));
            id_string = nw_endpoint_handler_get_id_string(*(void **)(a1 + 32));
            v128[0] = MEMORY[0x1E0C809B0];
            v128[1] = 3221225472;
            v128[2] = ___ZL32nw_endpoint_proxy_resolve_configP30NWConcrete_nw_endpoint_handler_block_invoke_140;
            v128[3] = &unk_1E149E100;
            v129 = *(id *)(a1 + 32);
            v130 = *(id *)(a1 + 40);
            v131 = v4;
            v25 = nw_pac_resolver_create_with_url(log, v113, v14, v76, v121, is_opaque, https_proxy_over_tls, should_trust_invalid_certificates, is_dry_run, (uint64_t)id_string, v128);
            if (v14)
              CFRelease(v14);
            if (v76)
              CFRelease(v76);

            v9 = log;
LABEL_69:
            v74 = v119;
            CFRelease(v9);
LABEL_70:

            if (v25)
            {
              v86 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 72);
              if (v86
                || (v87 = nw_array_create(),
                    v88 = *(_QWORD *)(a1 + 40),
                    v89 = *(void **)(v88 + 72),
                    *(_QWORD *)(v88 + 72) = v87,
                    v89,
                    (v86 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 72)) != 0))
              {
                nw_array_append(v86, v25);
              }
              nw_pac_resolver_start(v25);
              v15 = v121;
              v121 = v25;
              goto LABEL_88;
            }
            if ((nw_endpoint_handler_get_logging_disabled(*(void **)(a1 + 32)) & 1) != 0)
            {
LABEL_89:

              goto LABEL_90;
            }
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v15 = (id)gconnectionLogObj;
            if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
            {
              v90 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 32));
              v91 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 32));
              v119 = v15;
              v92 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 32));
              logging_description = nw_endpoint_get_logging_description(v92);
              v94 = nw_endpoint_handler_state_string(*(void **)(a1 + 32));
              v95 = nw_endpoint_handler_mode_string(*(void **)(a1 + 32));
              v96 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 32));
              *(_DWORD *)bytes = 136447746;
              *(_QWORD *)&bytes[4] = "nw_endpoint_proxy_resolve_config_block_invoke";
              *(_WORD *)&bytes[12] = 2082;
              *(_QWORD *)&bytes[14] = v90;
              *(_WORD *)&bytes[22] = 2082;
              *(_QWORD *)&bytes[24] = v91;
              v133 = 2082;
              v134 = logging_description;
              v135 = 2082;
              v136 = v94;
              v137 = 2082;
              v138 = v95;
              v139 = 2114;
              v140 = v96;
              _os_log_impl(&dword_182FBE000, v119, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] nw_pac_resolver_create returned nil", bytes, 0x48u);

              goto LABEL_27;
            }
LABEL_88:

            goto LABEL_89;
          }
          minimize_logging = nw_endpoint_handler_get_minimize_logging(v10);
          logging_disabled = nw_endpoint_handler_get_logging_disabled(*(void **)(a1 + 32));
          if (minimize_logging)
          {
            if ((logging_disabled & 1) != 0)
              goto LABEL_40;
            v99 = v9;
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v48 = (id)gconnectionLogObj;
            if (os_log_type_enabled(v48, OS_LOG_TYPE_DEBUG))
            {
              logc = nw_endpoint_handler_get_id_string(*(void **)(a1 + 32));
              v100 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 32));
              v101 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 32));
              v102 = nw_endpoint_get_logging_description(v101);
              v103 = nw_endpoint_handler_state_string(*(void **)(a1 + 32));
              v104 = nw_endpoint_handler_mode_string(*(void **)(a1 + 32));
              v105 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 32));
              *(_DWORD *)bytes = 136447746;
              *(_QWORD *)&bytes[4] = "nw_endpoint_proxy_resolve_config_block_invoke_3";
              *(_WORD *)&bytes[12] = 2082;
              *(_QWORD *)&bytes[14] = logc;
              *(_WORD *)&bytes[22] = 2082;
              *(_QWORD *)&bytes[24] = v100;
              v133 = 2082;
              v134 = v102;
              v135 = 2082;
              v136 = v103;
              v137 = 2082;
              v138 = v104;
              v139 = 2114;
              v140 = v105;
              _os_log_impl(&dword_182FBE000, v48, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] No URL, treating proxy as resolved", bytes, 0x48u);

              v9 = v99;
            }
          }
          else
          {
            if ((logging_disabled & 1) != 0)
            {
LABEL_40:
              v56 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
              if (!v56)
              {
                v57 = nw_array_copy(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 56));
                v58 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
                v59 = *(void **)(v58 + 40);
                *(_QWORD *)(v58 + 40) = v57;

                v56 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
              }
              nw_array_remove_object(v56, (uint64_t)v4);
              v25 = 0;
              *(_BYTE *)(*(_QWORD *)(a1 + 40) + 96) |= 0x80u;
              goto LABEL_69;
            }
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v48 = (id)gconnectionLogObj;
            if (os_log_type_enabled(v48, OS_LOG_TYPE_INFO))
            {
              v49 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 32));
              v50 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 32));
              v51 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 32));
              loga = v9;
              v52 = nw_endpoint_get_logging_description(v51);
              v53 = nw_endpoint_handler_state_string(*(void **)(a1 + 32));
              v54 = nw_endpoint_handler_mode_string(*(void **)(a1 + 32));
              v55 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 32));
              *(_DWORD *)bytes = 136447746;
              *(_QWORD *)&bytes[4] = "nw_endpoint_proxy_resolve_config_block_invoke";
              *(_WORD *)&bytes[12] = 2082;
              *(_QWORD *)&bytes[14] = v49;
              *(_WORD *)&bytes[22] = 2082;
              *(_QWORD *)&bytes[24] = v50;
              v133 = 2082;
              v134 = v52;
              v135 = 2082;
              v136 = v53;
              v137 = 2082;
              v138 = v54;
              v139 = 2114;
              v140 = v55;
              _os_log_impl(&dword_182FBE000, v48, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] No URL, treating proxy as resolved", bytes, 0x48u);

              v9 = loga;
            }
          }

          goto LABEL_40;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v26 = (id)gLogObj;
        if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)bytes = 136446466;
          *(_QWORD *)&bytes[4] = "nw_endpoint_proxy_resolve_config_block_invoke";
          *(_WORD *)&bytes[12] = 2112;
          *(_QWORD *)&bytes[14] = v8;
          _os_log_impl(&dword_182FBE000, v26, OS_LOG_TYPE_ERROR, "%{public}s nw_endpoint_copy_cfurl(%@) failed", bytes, 0x16u);
        }
LABEL_26:

LABEL_27:
        v15 = v119;
        goto LABEL_88;
      }
      if ((nw_endpoint_handler_get_logging_disabled(*(void **)(a1 + 32)) & 1) == 0)
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v26 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
        {
          v27 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 32));
          v28 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 32));
          v29 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 32));
          v30 = nw_endpoint_get_logging_description(v29);
          v31 = nw_endpoint_handler_state_string(*(void **)(a1 + 32));
          v32 = nw_endpoint_handler_mode_string(*(void **)(a1 + 32));
          v33 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 32));
          *(_DWORD *)bytes = 136447746;
          *(_QWORD *)&bytes[4] = "nw_endpoint_proxy_resolve_config_block_invoke";
          *(_WORD *)&bytes[12] = 2082;
          *(_QWORD *)&bytes[14] = v27;
          *(_WORD *)&bytes[22] = 2082;
          *(_QWORD *)&bytes[24] = v28;
          v133 = 2082;
          v134 = v30;
          v135 = 2082;
          v136 = v31;
          v137 = 2082;
          v138 = v32;
          v139 = 2114;
          v140 = v33;
          _os_log_impl(&dword_182FBE000, v26, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] PAC URL missing", bytes, 0x48u);

        }
        goto LABEL_26;
      }
LABEL_23:
      v15 = 0;
      goto LABEL_88;
    }
    v15 = nw_proxy_config_copy_pac_script(v4);
    if (!v15)
    {
      if ((nw_endpoint_handler_get_logging_disabled(*(void **)(a1 + 32)) & 1) == 0)
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v34 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
        {
          v35 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 32));
          v36 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 32));
          v37 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 32));
          v38 = nw_endpoint_get_logging_description(v37);
          v39 = nw_endpoint_handler_state_string(*(void **)(a1 + 32));
          v40 = nw_endpoint_handler_mode_string(*(void **)(a1 + 32));
          v41 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 32));
          *(_DWORD *)bytes = 136447746;
          *(_QWORD *)&bytes[4] = "nw_endpoint_proxy_resolve_config_block_invoke";
          *(_WORD *)&bytes[12] = 2082;
          *(_QWORD *)&bytes[14] = v35;
          *(_WORD *)&bytes[22] = 2082;
          *(_QWORD *)&bytes[24] = v36;
          v133 = 2082;
          v134 = v38;
          v135 = 2082;
          v136 = v39;
          v137 = 2082;
          v138 = v40;
          v139 = 2114;
          v140 = v41;
          _os_log_impl(&dword_182FBE000, v34, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] PAC script missing", bytes, 0x48u);

        }
      }
      goto LABEL_23;
    }
    v16 = (const void *)_CFXPCCreateCFObjectFromXPCObject();
    if (v16)
    {
      v17 = *(void **)(a1 + 32);
      v120 = v15;
      if (*(_QWORD *)(*(_QWORD *)(a1 + 40) + 64))
      {
        v18 = nw_endpoint_handler_copy_parameters(v17);
        v19 = *(const void **)(*(_QWORD *)(a1 + 40) + 64);
        v20 = nw_parameters_get_https_proxy_is_opaque(v18);
        v21 = nw_parameters_get_https_proxy_over_tls(v18);
        v22 = nw_parameters_get_should_trust_invalid_certificates(v18);
        v23 = nw_endpoint_handler_is_dry_run(*(void **)(a1 + 32));
        v24 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 32));
        v122[0] = MEMORY[0x1E0C809B0];
        v122[1] = 3221225472;
        v122[2] = ___ZL32nw_endpoint_proxy_resolve_configP30NWConcrete_nw_endpoint_handler_block_invoke_144;
        v122[3] = &unk_1E149E100;
        v123 = *(id *)(a1 + 32);
        v124 = *(id *)(a1 + 40);
        v125 = v4;
        v25 = nw_pac_resolver_create_with_script(v16, v19, v121, v20, v21, v22, v23, (uint64_t)v24, v122);

LABEL_53:
        v74 = v120;
        CFRelease(v16);
        goto LABEL_70;
      }
      v60 = nw_endpoint_handler_get_minimize_logging(v17);
      v61 = nw_endpoint_handler_get_logging_disabled(*(void **)(a1 + 32));
      if (v60)
      {
        if ((v61 & 1) != 0)
          goto LABEL_50;
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v106 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v106, OS_LOG_TYPE_DEBUG))
        {
          logd = nw_endpoint_handler_get_id_string(*(void **)(a1 + 32));
          v107 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 32));
          v108 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 32));
          v109 = nw_endpoint_get_logging_description(v108);
          v110 = nw_endpoint_handler_state_string(*(void **)(a1 + 32));
          v111 = nw_endpoint_handler_mode_string(*(void **)(a1 + 32));
          v112 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 32));
          *(_DWORD *)bytes = 136447746;
          *(_QWORD *)&bytes[4] = "nw_endpoint_proxy_resolve_config_block_invoke_3";
          *(_WORD *)&bytes[12] = 2082;
          *(_QWORD *)&bytes[14] = logd;
          *(_WORD *)&bytes[22] = 2082;
          *(_QWORD *)&bytes[24] = v107;
          v133 = 2082;
          v134 = v109;
          v135 = 2082;
          v136 = v110;
          v137 = 2082;
          v138 = v111;
          v139 = 2114;
          v140 = v112;
          v62 = v106;
          _os_log_impl(&dword_182FBE000, v106, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] No URL, treating proxy as resolved", bytes, 0x48u);

        }
        else
        {
          v62 = v106;
        }
      }
      else
      {
        if ((v61 & 1) != 0)
        {
LABEL_50:
          v70 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
          if (!v70)
          {
            v71 = nw_array_copy(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 56));
            v72 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
            v73 = *(void **)(v72 + 40);
            *(_QWORD *)(v72 + 40) = v71;

            v70 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
          }
          nw_array_remove_object(v70, (uint64_t)v4);
          v25 = 0;
          *(_BYTE *)(*(_QWORD *)(a1 + 40) + 96) |= 0x80u;
          goto LABEL_53;
        }
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v62 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v62, OS_LOG_TYPE_INFO))
        {
          logb = v62;
          v63 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 32));
          v64 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 32));
          v65 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 32));
          v66 = nw_endpoint_get_logging_description(v65);
          v67 = nw_endpoint_handler_state_string(*(void **)(a1 + 32));
          v68 = nw_endpoint_handler_mode_string(*(void **)(a1 + 32));
          v69 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 32));
          *(_DWORD *)bytes = 136447746;
          *(_QWORD *)&bytes[4] = "nw_endpoint_proxy_resolve_config_block_invoke";
          *(_WORD *)&bytes[12] = 2082;
          *(_QWORD *)&bytes[14] = v63;
          *(_WORD *)&bytes[22] = 2082;
          *(_QWORD *)&bytes[24] = v64;
          v133 = 2082;
          v134 = v66;
          v135 = 2082;
          v136 = v67;
          v137 = 2082;
          v138 = v68;
          v139 = 2114;
          v140 = v69;
          v62 = logb;
          _os_log_impl(&dword_182FBE000, logb, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] No URL, treating proxy as resolved", bytes, 0x48u);

        }
      }

      goto LABEL_50;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v42 = (id)gLogObj;
    *(_DWORD *)bytes = 136446210;
    *(_QWORD *)&bytes[4] = "nw_endpoint_proxy_resolve_config_block_invoke";
    v43 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v126 = 0;
    if (!__nwlog_fault(v43, &type, &v126))
      goto LABEL_86;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v44 = (id)gLogObj;
      v45 = type;
      if (os_log_type_enabled(v44, type))
      {
        *(_DWORD *)bytes = 136446210;
        *(_QWORD *)&bytes[4] = "nw_endpoint_proxy_resolve_config_block_invoke";
        _os_log_impl(&dword_182FBE000, v44, v45, "%{public}s _CFXPCCreateCFObjectFromXPCObject failed", bytes, 0xCu);
      }
    }
    else
    {
      if (v126)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v78 = objc_claimAutoreleasedReturnValue();
        v79 = type;
        v80 = os_log_type_enabled(v78, type);
        if (backtrace_string)
        {
          if (v80)
          {
            *(_DWORD *)bytes = 136446466;
            *(_QWORD *)&bytes[4] = "nw_endpoint_proxy_resolve_config_block_invoke";
            *(_WORD *)&bytes[12] = 2082;
            *(_QWORD *)&bytes[14] = backtrace_string;
            _os_log_impl(&dword_182FBE000, v78, v79, "%{public}s _CFXPCCreateCFObjectFromXPCObject failed, dumping backtrace:%{public}s", bytes, 0x16u);
          }

          free(backtrace_string);
          if (!v43)
            goto LABEL_88;
          goto LABEL_87;
        }
        if (v80)
        {
          *(_DWORD *)bytes = 136446210;
          *(_QWORD *)&bytes[4] = "nw_endpoint_proxy_resolve_config_block_invoke";
          _os_log_impl(&dword_182FBE000, v78, v79, "%{public}s _CFXPCCreateCFObjectFromXPCObject failed, no backtrace", bytes, 0xCu);
        }

LABEL_86:
        if (!v43)
          goto LABEL_88;
LABEL_87:
        free(v43);
        goto LABEL_88;
      }
      __nwlog_obj();
      v44 = objc_claimAutoreleasedReturnValue();
      v97 = type;
      if (os_log_type_enabled(v44, type))
      {
        *(_DWORD *)bytes = 136446210;
        *(_QWORD *)&bytes[4] = "nw_endpoint_proxy_resolve_config_block_invoke";
        _os_log_impl(&dword_182FBE000, v44, v97, "%{public}s _CFXPCCreateCFObjectFromXPCObject failed, backtrace limit exceeded", bytes, 0xCu);
      }
    }

    goto LABEL_86;
  }
LABEL_90:

  return 1;
}

void sub_1835E8C58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17)
{
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void nw_endpoint_proxy_complete_resolve(NWConcrete_nw_endpoint_handler *a1)
{
  NWConcrete_nw_endpoint_handler *v1;
  NWConcrete_nw_endpoint_handler *v2;
  NWConcrete_nw_endpoint_handler *v3;
  uint64_t mode;
  NWConcrete_nw_endpoint_mode_handler *v5;
  id *v6;
  unsigned __int8 *v7;
  id *v8;
  _BOOL4 v9;
  NSObject *v10;
  id *v11;
  id *v12;
  _BOOL4 v13;
  const char *v14;
  nw_endpoint_t v15;
  const char *v16;
  unsigned int *v17;
  unsigned int *v18;
  uint64_t v19;
  const char *v20;
  NSObject *v21;
  const char *v22;
  NWConcrete_nw_endpoint_handler *v23;
  _BOOL4 v24;
  NWConcrete_nw_endpoint_handler *v25;
  NWConcrete_nw_endpoint_handler *v26;
  _BOOL4 v27;
  const char *v28;
  nw_endpoint_t v29;
  const char *logging_description;
  unsigned int *v31;
  unsigned int *v32;
  uint64_t v33;
  const char *v34;
  id *v35;
  _BOOL4 v36;
  NSObject *v37;
  id *v38;
  id *v39;
  _BOOL4 v40;
  const char *v41;
  nw_endpoint_t v42;
  const char *v43;
  unsigned int *v44;
  unsigned int *v45;
  uint64_t v46;
  const char *v47;
  void **v48;
  void **v49;
  const char *v50;
  id *v51;
  _BOOL4 v52;
  NSObject *v53;
  id *v54;
  id *v55;
  _BOOL4 v56;
  const char *v57;
  nw_endpoint_t v58;
  const char *v59;
  unsigned int *v60;
  unsigned int *v61;
  uint64_t v62;
  const char *v63;
  void **v64;
  const char *v65;
  void **v66;
  const char *v67;
  nw_endpoint_t v68;
  const char *v69;
  const char *v70;
  NWConcrete_nw_endpoint_mode_handler *v71;
  void **v72;
  id v73;
  void **v74;
  void **v75;
  const char *v76;
  NSObject *v77;
  nw_endpoint_t v78;
  const char *v79;
  const char *v80;
  uint64_t (*v81)(uint64_t, uint64_t);
  NWConcrete_nw_endpoint_mode_handler *v82;
  void **v83;
  id v84;
  nw_endpoint_t v85;
  os_unfair_lock_s *v86;
  uint64_t (*v87)(uint64_t, uint64_t);
  NSObject *v88;
  const char *v89;
  nw_endpoint_t v90;
  id *v91;
  NWConcrete_nw_endpoint_mode_handler *v92;
  os_unfair_lock_s *v93;
  id v94;
  os_unfair_lock_s *v95;
  const char *v96;
  NWConcrete_nw_endpoint_handler *v97;
  _BOOL4 v98;
  NSObject *v99;
  NWConcrete_nw_endpoint_handler *v100;
  NWConcrete_nw_endpoint_handler *v101;
  _BOOL4 v102;
  const char *v103;
  nw_endpoint_t v104;
  const char *v105;
  unsigned int *v106;
  unsigned int *v107;
  uint64_t v108;
  const char *v109;
  void **v110;
  const char *v111;
  NWConcrete_nw_endpoint_mode_handler *v112;
  void **v113;
  id v114;
  NWConcrete_nw_proxy_config *direct;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  BOOL v119;
  _BOOL4 v120;
  NWConcrete_nw_endpoint_handler *v121;
  _BOOL4 v122;
  NSObject *v123;
  NWConcrete_nw_endpoint_handler *v124;
  NWConcrete_nw_endpoint_handler *v125;
  _BOOL4 v126;
  const char *v127;
  nw_endpoint_t v128;
  const char *v129;
  unsigned int *v130;
  unsigned int *v131;
  uint64_t v132;
  const char *v133;
  NWConcrete_nw_endpoint_mode_handler *v134;
  unsigned __int8 *v135;
  NWConcrete_nw_endpoint_handler *v136;
  void **v137;
  const char *v138;
  NWConcrete_nw_endpoint_mode_handler *v139;
  void **v140;
  id v141;
  NWConcrete_nw_endpoint_mode_handler *v142;
  void **v143;
  id v144;
  void *v145;
  char *v146;
  NSObject *v147;
  os_log_type_t v148;
  char *backtrace_string;
  os_log_type_t v150;
  _BOOL4 v151;
  NWConcrete_nw_endpoint_mode_handler *v152;
  const char *v153;
  const char *v154;
  nw_endpoint_t v155;
  const char *v156;
  const char *v157;
  const char *v158;
  id v159;
  os_log_type_t v160;
  id *v161;
  const char *v162;
  nw_endpoint_t v163;
  const char *v164;
  const char *v165;
  const char *v166;
  id v167;
  NWConcrete_nw_endpoint_mode_handler *v168;
  NSObject *v169;
  const char *id_string;
  const char *v171;
  nw_endpoint_t v172;
  const char *v173;
  const char *v174;
  const char *v175;
  id v176;
  id *v177;
  const char *v178;
  const char *v179;
  nw_endpoint_t v180;
  const char *v181;
  const char *v182;
  const char *v183;
  id v184;
  const char *v185;
  _BOOL4 has_unresolved_proxies;
  const char *v187;
  const char *v188;
  NWConcrete_nw_endpoint_handler *v189;
  NSObject *parameters;
  nw_parameters_t parametersa;
  NWConcrete_nw_endpoint_handler *v192;
  const char *v193;
  const char *v194;
  _QWORD v195[4];
  NWConcrete_nw_endpoint_handler *v196;
  os_log_type_t *v197;
  _BYTE *v198;
  char v199;
  BOOL v200;
  _QWORD v201[5];
  os_log_type_t type[8];
  os_log_type_t *v203;
  uint64_t v204;
  char v205;
  BOOL v206;
  _BYTE buf[24];
  uint64_t (*v208)(uint64_t, uint64_t);
  _BYTE v209[20];
  __int16 v210;
  void *v211;
  __int16 v212;
  id v213;
  uint64_t v214;

  v214 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v145 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_endpoint_proxy_complete_resolve";
    v146 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    v206 = 0;
    if (__nwlog_fault(v146, type, &v206))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v147 = objc_claimAutoreleasedReturnValue();
        v148 = type[0];
        if (os_log_type_enabled(v147, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_endpoint_proxy_complete_resolve";
          _os_log_impl(&dword_182FBE000, v147, v148, "%{public}s called with null handler", buf, 0xCu);
        }
      }
      else if (v206)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v147 = objc_claimAutoreleasedReturnValue();
        v150 = type[0];
        v151 = os_log_type_enabled(v147, type[0]);
        if (backtrace_string)
        {
          if (v151)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_endpoint_proxy_complete_resolve";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = backtrace_string;
            _os_log_impl(&dword_182FBE000, v147, v150, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_171;
        }
        if (v151)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_endpoint_proxy_complete_resolve";
          _os_log_impl(&dword_182FBE000, v147, v150, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v147 = objc_claimAutoreleasedReturnValue();
        v160 = type[0];
        if (os_log_type_enabled(v147, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_endpoint_proxy_complete_resolve";
          _os_log_impl(&dword_182FBE000, v147, v160, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_171:
    if (v146)
      free(v146);
    v2 = 0;
    goto LABEL_144;
  }
  v3 = v1;
  mode = v3->mode;

  if ((_DWORD)mode == 3)
  {
    v192 = v3;
    v5 = nw_endpoint_handler_copy_proxy(v3);
    v206 = 0;
    v189 = v2;
    has_unresolved_proxies = nw_endpoint_proxy_has_unresolved_proxies(v3, &v206);
    if (!has_unresolved_proxies)
    {
      v3->event = (nw_endpoint_handler_event_s)262148;
      nw_endpoint_handler_report(v3, 0, &v3->event.domain, 0);
      v23 = v3;
      v24 = (*((_BYTE *)v23 + 268) & 0x20) == 0;

      if (!v24)
        goto LABEL_85;
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      parameters = (id)gconnectionLogObj;
      if (os_log_type_enabled(parameters, OS_LOG_TYPE_DEBUG))
      {
        v25 = v23;

        v26 = v25;
        v27 = (*((_BYTE *)v23 + 268) & 1) == 0;

        if (v27)
          v28 = "";
        else
          v28 = "dry-run ";
        v29 = nw_endpoint_handler_copy_endpoint(v26);
        logging_description = nw_endpoint_get_logging_description(v29);
        v31 = v26;
        v32 = v31;
        v33 = v31[30];
        if (v33 > 5)
          v34 = "unknown-state";
        else
          v34 = off_1E149FC48[v33];

        v48 = v32;
        v49 = v48;
        v50 = "path";
        switch(v192->mode)
        {
          case 0:
            break;
          case 1:
            v50 = "resolver";
            break;
          case 2:
            v50 = nw_endpoint_flow_mode_string(v48[31]);
            break;
          case 3:
            v50 = "proxy";
            break;
          case 4:
            v50 = "fallback";
            break;
          case 5:
            v50 = "transform";
            break;
          default:
            v50 = "unknown-mode";
            break;
        }

        v68 = v29;
        v69 = v34;
        v70 = logging_description;
        v71 = v5;
        v72 = v49;
        os_unfair_lock_lock((os_unfair_lock_t)v72 + 28);
        v73 = v72[8];
        os_unfair_lock_unlock((os_unfair_lock_t)v72 + 28);

        v5 = v71;
        *(_DWORD *)buf = 136447746;
        *(_QWORD *)&buf[4] = "nw_endpoint_proxy_complete_resolve";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v25->id_str;
        *(_WORD *)&buf[22] = 2082;
        v208 = (uint64_t (*)(uint64_t, uint64_t))v28;
        *(_WORD *)v209 = 2082;
        *(_QWORD *)&v209[2] = v70;
        *(_WORD *)&v209[10] = 2082;
        *(_QWORD *)&v209[12] = v69;
        v210 = 2082;
        v211 = (void *)v50;
        v212 = 2114;
        v213 = v73;
        _os_log_impl(&dword_182FBE000, parameters, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] resolved all proxies", buf, 0x48u);

      }
LABEL_84:

LABEL_85:
      if (!v206)
      {
LABEL_109:
        v116 = *((_QWORD *)v5 + 1);
        if (v116
          && ((v118 = v116 + 16,
               v116 = *(_QWORD *)(v116 + 16),
               v117 = *(_QWORD *)(v118 + 8),
               v119 = v117 == v116,
               LOBYTE(v116) = v117 != v116,
               !v119)
            ? (v120 = has_unresolved_proxies)
            : (v120 = 0),
              v120))
        {
          if (nw_endpoint_handler_get_minimize_logging(v192))
          {
            if ((nw_endpoint_handler_get_logging_disabled(v192) & 1) == 0)
            {
              v168 = v5;
              if (__nwlog_connection_log::onceToken != -1)
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
              v169 = (id)gconnectionLogObj;
              if (os_log_type_enabled(v169, OS_LOG_TYPE_DEBUG))
              {
                id_string = nw_endpoint_handler_get_id_string(v192);
                v171 = nw_endpoint_handler_dry_run_string(v192);
                v172 = nw_endpoint_handler_copy_endpoint(v192);
                v173 = nw_endpoint_get_logging_description(v172);
                v174 = nw_endpoint_handler_state_string(v192);
                v175 = nw_endpoint_handler_mode_string(v192);
                v176 = nw_endpoint_handler_copy_current_path(v192);
                *(_DWORD *)buf = 136447746;
                *(_QWORD *)&buf[4] = "nw_endpoint_proxy_complete_resolve";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = id_string;
                *(_WORD *)&buf[22] = 2082;
                v208 = (uint64_t (*)(uint64_t, uint64_t))v171;
                *(_WORD *)v209 = 2082;
                *(_QWORD *)&v209[2] = v173;
                *(_WORD *)&v209[10] = 2082;
                *(_QWORD *)&v209[12] = v174;
                v210 = 2082;
                v211 = (void *)v175;
                v212 = 2114;
                v213 = v176;
                _os_log_impl(&dword_182FBE000, v169, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] direct already adding, still waiting for proxy resolution", buf, 0x48u);

              }
              v5 = v168;
            }
          }
          else
          {
            v121 = v192;
            v122 = (*((_BYTE *)v121 + 268) & 0x20) == 0;

            if (v122)
            {
              if (__nwlog_connection_log::onceToken != -1)
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
              v123 = (id)gconnectionLogObj;
              if (os_log_type_enabled(v123, OS_LOG_TYPE_INFO))
              {
                v124 = v121;

                v125 = v124;
                v126 = (*((_BYTE *)v121 + 268) & 1) == 0;

                if (v126)
                  v127 = "";
                else
                  v127 = "dry-run ";
                v128 = nw_endpoint_handler_copy_endpoint(v125);
                v129 = nw_endpoint_get_logging_description(v128);
                v130 = v125;
                v131 = v130;
                v132 = v130[30];
                if (v132 > 5)
                  v133 = "unknown-state";
                else
                  v133 = off_1E149FC48[v132];

                v137 = v131;
                v138 = "path";
                switch(v192->mode)
                {
                  case 0:
                    break;
                  case 1:
                    v138 = "resolver";
                    break;
                  case 2:
                    v138 = nw_endpoint_flow_mode_string(v137[31]);
                    break;
                  case 3:
                    v138 = "proxy";
                    break;
                  case 4:
                    v138 = "fallback";
                    break;
                  case 5:
                    v138 = "transform";
                    break;
                  default:
                    v138 = "unknown-mode";
                    break;
                }
                v194 = v138;

                v139 = v5;
                v140 = v137;
                os_unfair_lock_lock((os_unfair_lock_t)v140 + 28);
                v141 = v140[8];
                os_unfair_lock_unlock((os_unfair_lock_t)v140 + 28);

                v5 = v139;
                *(_DWORD *)buf = 136447746;
                *(_QWORD *)&buf[4] = "nw_endpoint_proxy_complete_resolve";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = v124->id_str;
                *(_WORD *)&buf[22] = 2082;
                v208 = (uint64_t (*)(uint64_t, uint64_t))v127;
                *(_WORD *)v209 = 2082;
                *(_QWORD *)&v209[2] = v129;
                *(_WORD *)&v209[10] = 2082;
                *(_QWORD *)&v209[12] = v133;
                v210 = 2082;
                v211 = (void *)v194;
                v212 = 2114;
                v213 = v141;
                _os_log_impl(&dword_182FBE000, v123, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] direct already adding, still waiting for proxy resolution", buf, 0x48u);

              }
            }
          }
        }
        else
        {
          *(_QWORD *)type = 0;
          v203 = type;
          v204 = 0x2020000000;
          v205 = 0;
          *(_QWORD *)buf = 0;
          *(_QWORD *)&buf[8] = buf;
          *(_QWORD *)&buf[16] = 0x3032000000;
          v208 = __Block_byref_object_copy__26313;
          *(_QWORD *)v209 = __Block_byref_object_dispose__26314;
          *(_QWORD *)&v209[8] = 0;
          v134 = v5;
          v135 = (unsigned __int8 *)*((_QWORD *)v5 + 7);
          v195[0] = MEMORY[0x1E0C809B0];
          v195[1] = 3221225472;
          v195[2] = ___ZL34nw_endpoint_proxy_complete_resolveP30NWConcrete_nw_endpoint_handler_block_invoke_147;
          v195[3] = &unk_1E149E128;
          v199 = v116;
          v197 = type;
          v136 = v192;
          v196 = v136;
          v198 = buf;
          v200 = has_unresolved_proxies;
          nw_array_apply(v135, (uint64_t)v195);
          nw_endpoint_proxy_start_next_child(v136);

          v5 = v134;
          _Block_object_dispose(buf, 8);

          _Block_object_dispose(type, 8);
        }
        goto LABEL_143;
      }
      if (nw_endpoint_handler_get_minimize_logging(v192))
      {
        if ((nw_endpoint_handler_get_logging_disabled(v192) & 1) != 0)
          goto LABEL_106;
        v152 = v5;
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v99 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v99, OS_LOG_TYPE_DEBUG))
        {
          v153 = nw_endpoint_handler_get_id_string(v192);
          v154 = nw_endpoint_handler_dry_run_string(v192);
          v155 = nw_endpoint_handler_copy_endpoint(v192);
          v156 = nw_endpoint_get_logging_description(v155);
          v157 = nw_endpoint_handler_state_string(v192);
          v158 = nw_endpoint_handler_mode_string(v192);
          v159 = nw_endpoint_handler_copy_current_path(v192);
          *(_DWORD *)buf = 136447746;
          *(_QWORD *)&buf[4] = "nw_endpoint_proxy_complete_resolve";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v153;
          *(_WORD *)&buf[22] = 2082;
          v208 = (uint64_t (*)(uint64_t, uint64_t))v154;
          *(_WORD *)v209 = 2082;
          *(_QWORD *)&v209[2] = v156;
          *(_WORD *)&v209[10] = 2082;
          *(_QWORD *)&v209[12] = v157;
          v210 = 2082;
          v211 = (void *)v158;
          v212 = 2114;
          v213 = v159;
          _os_log_impl(&dword_182FBE000, v99, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] no resolved proxies, adding direct attempt", buf, 0x48u);

          v5 = v152;
        }
      }
      else
      {
        v97 = v192;
        v98 = (*((_BYTE *)v97 + 268) & 0x20) == 0;

        if (!v98)
        {
LABEL_106:
          direct = nw_proxy_config_create_direct();
          if (direct)
            nw_array_append(*((_QWORD *)v5 + 7), direct);

          goto LABEL_109;
        }
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v99 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v99, OS_LOG_TYPE_DEFAULT))
        {
          v100 = v97;

          v101 = v100;
          v102 = (*((_BYTE *)v97 + 268) & 1) == 0;

          if (v102)
            v103 = "";
          else
            v103 = "dry-run ";
          v104 = nw_endpoint_handler_copy_endpoint(v101);
          v105 = nw_endpoint_get_logging_description(v104);
          v106 = v101;
          v107 = v106;
          v108 = v106[30];
          if (v108 > 5)
            v109 = "unknown-state";
          else
            v109 = off_1E149FC48[v108];

          v110 = v107;
          v111 = "path";
          switch(v192->mode)
          {
            case 0:
              break;
            case 1:
              v111 = "resolver";
              break;
            case 2:
              v111 = nw_endpoint_flow_mode_string(v110[31]);
              break;
            case 3:
              v111 = "proxy";
              break;
            case 4:
              v111 = "fallback";
              break;
            case 5:
              v111 = "transform";
              break;
            default:
              v111 = "unknown-mode";
              break;
          }
          parametersa = (nw_parameters_t)v111;

          v112 = v5;
          v113 = v110;
          os_unfair_lock_lock((os_unfair_lock_t)v113 + 28);
          v114 = v113[8];
          os_unfair_lock_unlock((os_unfair_lock_t)v113 + 28);

          v5 = v112;
          *(_DWORD *)buf = 136447746;
          *(_QWORD *)&buf[4] = "nw_endpoint_proxy_complete_resolve";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v100->id_str;
          *(_WORD *)&buf[22] = 2082;
          v208 = (uint64_t (*)(uint64_t, uint64_t))v103;
          *(_WORD *)v209 = 2082;
          *(_QWORD *)&v209[2] = v105;
          *(_WORD *)&v209[10] = 2082;
          *(_QWORD *)&v209[12] = v109;
          v210 = 2082;
          v211 = parametersa;
          v212 = 2114;
          v213 = v114;
          _os_log_impl(&dword_182FBE000, v99, OS_LOG_TYPE_DEFAULT, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] no resolved proxies, adding direct attempt", buf, 0x48u);

        }
      }

      goto LABEL_106;
    }
    v6 = v3;
    parameters = v6[4];

    if (nw_parameters_get_prefer_no_proxy(parameters))
    {
      *(_QWORD *)type = 0;
      v203 = type;
      v204 = 0x2020000000;
      v205 = 0;
      v7 = (unsigned __int8 *)*((_QWORD *)v5 + 7);
      v201[0] = MEMORY[0x1E0C809B0];
      v201[1] = 3221225472;
      v201[2] = ___ZL34nw_endpoint_proxy_complete_resolveP30NWConcrete_nw_endpoint_handler_block_invoke;
      v201[3] = &unk_1E14A8DC0;
      v201[4] = type;
      nw_array_apply(v7, (uint64_t)v201);
      if (!*((_BYTE *)v203 + 24))
      {
        v51 = v6;
        v52 = (*((_BYTE *)v51 + 268) & 0x20) == 0;

        if (v52)
        {
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v53 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
          {
            v54 = v51;

            v55 = v54;
            v56 = (*((_BYTE *)v51 + 268) & 1) == 0;

            if (v56)
              v57 = "";
            else
              v57 = "dry-run ";
            v58 = nw_endpoint_handler_copy_endpoint(v55);
            v59 = nw_endpoint_get_logging_description(v58);
            v60 = v55;
            v61 = v60;
            v62 = v60[30];
            if (v62 > 5)
              v63 = "unknown-state";
            else
              v63 = off_1E149FC48[v62];
            v187 = v63;

            v74 = v61;
            v75 = v74;
            v76 = "path";
            switch(v192->mode)
            {
              case 0:
                break;
              case 1:
                v76 = "resolver";
                break;
              case 2:
                v76 = nw_endpoint_flow_mode_string(v74[31]);
                break;
              case 3:
                v76 = "proxy";
                break;
              case 4:
                v76 = "fallback";
                break;
              case 5:
                v76 = "transform";
                break;
              default:
                v76 = "unknown-mode";
                break;
            }

            v142 = v5;
            v143 = v75;
            os_unfair_lock_lock((os_unfair_lock_t)v143 + 28);
            v144 = v143[8];
            os_unfair_lock_unlock((os_unfair_lock_t)v143 + 28);

            v5 = v142;
            *(_DWORD *)buf = 136447746;
            *(_QWORD *)&buf[4] = "nw_endpoint_proxy_complete_resolve";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v54 + 21;
            *(_WORD *)&buf[22] = 2082;
            v208 = (uint64_t (*)(uint64_t, uint64_t))v57;
            *(_WORD *)v209 = 2082;
            *(_QWORD *)&v209[2] = v59;
            *(_WORD *)&v209[10] = 2082;
            *(_QWORD *)&v209[12] = v187;
            v210 = 2082;
            v211 = (void *)v76;
            v212 = 2114;
            v213 = v144;
            _os_log_impl(&dword_182FBE000, v53, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] unresolved proxies and prefer no proxy, but no direct config found", buf, 0x48u);

          }
        }
        _Block_object_dispose(type, 8);

        goto LABEL_143;
      }
      if (nw_endpoint_handler_get_minimize_logging(v6))
      {
        v177 = v6;
        if ((nw_endpoint_handler_get_logging_disabled(v6) & 1) != 0)
          goto LABEL_83;
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v10 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
        {
          v178 = nw_endpoint_handler_get_id_string(v177);
          v179 = nw_endpoint_handler_dry_run_string(v177);
          v180 = nw_endpoint_handler_copy_endpoint(v177);
          v181 = nw_endpoint_get_logging_description(v180);
          v182 = nw_endpoint_handler_state_string(v177);
          v183 = nw_endpoint_handler_mode_string(v177);
          v184 = nw_endpoint_handler_copy_current_path(v177);
          *(_DWORD *)buf = 136447746;
          *(_QWORD *)&buf[4] = "nw_endpoint_proxy_complete_resolve";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v178;
          *(_WORD *)&buf[22] = 2082;
          v208 = (uint64_t (*)(uint64_t, uint64_t))v179;
          *(_WORD *)v209 = 2082;
          *(_QWORD *)&v209[2] = v181;
          *(_WORD *)&v209[10] = 2082;
          *(_QWORD *)&v209[12] = v182;
          v210 = 2082;
          v211 = (void *)v183;
          v212 = 2114;
          v213 = v184;
          _os_log_impl(&dword_182FBE000, v10, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] unresolved proxies, but will add direct due to prefer no proxy", buf, 0x48u);

        }
      }
      else
      {
        v8 = v6;
        v9 = (*((_BYTE *)v8 + 268) & 0x20) == 0;

        if (!v9)
        {
LABEL_83:
          _Block_object_dispose(type, 8);
          goto LABEL_84;
        }
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v10 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
        {
          v11 = v8;

          v12 = v11;
          v13 = (*((_BYTE *)v8 + 268) & 1) == 0;

          if (v13)
            v14 = "";
          else
            v14 = "dry-run ";
          v15 = nw_endpoint_handler_copy_endpoint(v12);
          v16 = nw_endpoint_get_logging_description(v15);
          v17 = v12;
          v18 = v17;
          v19 = v17[30];
          if (v19 > 5)
            v20 = "unknown-state";
          else
            v20 = off_1E149FC48[v19];

          v66 = v18;
          v67 = "path";
          switch(v3->mode)
          {
            case 0:
              break;
            case 1:
              v67 = "resolver";
              break;
            case 2:
              v67 = nw_endpoint_flow_mode_string(v66[31]);
              break;
            case 3:
              v67 = "proxy";
              break;
            case 4:
              v67 = "fallback";
              break;
            case 5:
              v67 = "transform";
              break;
            default:
              v67 = "unknown-mode";
              break;
          }
          v185 = v67;

          v86 = v66;
          v87 = (uint64_t (*)(uint64_t, uint64_t))v14;
          v88 = v10;
          v89 = v16;
          v90 = v15;
          v91 = (id *)v86;
          v92 = v5;
          v93 = v86 + 28;
          os_unfair_lock_lock(v86 + 28);
          v94 = v91[8];
          v95 = v93;
          v5 = v92;
          os_unfair_lock_unlock(v95);

          v96 = v89;
          v10 = v88;
          *(_DWORD *)buf = 136447746;
          *(_QWORD *)&buf[4] = "nw_endpoint_proxy_complete_resolve";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v11 + 21;
          *(_WORD *)&buf[22] = 2082;
          v208 = v87;
          *(_WORD *)v209 = 2082;
          *(_QWORD *)&v209[2] = v96;
          *(_WORD *)&v209[10] = 2082;
          *(_QWORD *)&v209[12] = v20;
          v210 = 2082;
          v211 = (void *)v185;
          v212 = 2114;
          v213 = v94;
          _os_log_impl(&dword_182FBE000, v88, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] unresolved proxies, but will add direct due to prefer no proxy", buf, 0x48u);

        }
      }

      goto LABEL_83;
    }
    if (nw_endpoint_handler_get_minimize_logging(v6))
    {
      v161 = v6;
      if ((nw_endpoint_handler_get_logging_disabled(v6) & 1) != 0)
        goto LABEL_75;
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v37 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
      {
        v188 = nw_endpoint_handler_get_id_string(v6);
        v162 = nw_endpoint_handler_dry_run_string(v6);
        v163 = nw_endpoint_handler_copy_endpoint(v6);
        v164 = nw_endpoint_get_logging_description(v163);
        v165 = nw_endpoint_handler_state_string(v161);
        v166 = nw_endpoint_handler_mode_string(v161);
        v167 = nw_endpoint_handler_copy_current_path(v161);
        *(_DWORD *)buf = 136447746;
        *(_QWORD *)&buf[4] = "nw_endpoint_proxy_complete_resolve";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v188;
        *(_WORD *)&buf[22] = 2082;
        v208 = (uint64_t (*)(uint64_t, uint64_t))v162;
        *(_WORD *)v209 = 2082;
        *(_QWORD *)&v209[2] = v164;
        *(_WORD *)&v209[10] = 2082;
        *(_QWORD *)&v209[12] = v165;
        v210 = 2082;
        v211 = (void *)v166;
        v212 = 2114;
        v213 = v167;
        _os_log_impl(&dword_182FBE000, v37, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] unresolved proxies, waiting for resolution", buf, 0x48u);

      }
    }
    else
    {
      v35 = v6;
      v36 = (*((_BYTE *)v35 + 268) & 0x20) == 0;

      if (!v36)
      {
LABEL_75:

LABEL_143:
        v2 = v189;
        goto LABEL_144;
      }
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v37 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
      {
        v38 = v35;

        v39 = v38;
        v40 = (*((_BYTE *)v35 + 268) & 1) == 0;

        if (v40)
          v41 = "";
        else
          v41 = "dry-run ";
        v42 = nw_endpoint_handler_copy_endpoint(v39);
        v43 = nw_endpoint_get_logging_description(v42);
        v44 = v39;
        v45 = v44;
        v46 = v44[30];
        if (v46 > 5)
          v47 = "unknown-state";
        else
          v47 = off_1E149FC48[v46];

        v64 = v45;
        v65 = "path";
        switch(v192->mode)
        {
          case 0:
            break;
          case 1:
            v65 = "resolver";
            break;
          case 2:
            v65 = nw_endpoint_flow_mode_string(v64[31]);
            break;
          case 3:
            v65 = "proxy";
            break;
          case 4:
            v65 = "fallback";
            break;
          case 5:
            v65 = "transform";
            break;
          default:
            v65 = "unknown-mode";
            break;
        }
        v193 = v65;

        v77 = v37;
        v78 = v42;
        v79 = v47;
        v80 = v43;
        v81 = (uint64_t (*)(uint64_t, uint64_t))v41;
        v82 = v5;
        v83 = v64;
        os_unfair_lock_lock((os_unfair_lock_t)v83 + 28);
        v84 = v83[8];
        os_unfair_lock_unlock((os_unfair_lock_t)v83 + 28);

        v5 = v82;
        v85 = v78;
        v37 = v77;
        *(_DWORD *)buf = 136447746;
        *(_QWORD *)&buf[4] = "nw_endpoint_proxy_complete_resolve";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v38 + 21;
        *(_WORD *)&buf[22] = 2082;
        v208 = v81;
        *(_WORD *)v209 = 2082;
        *(_QWORD *)&v209[2] = v80;
        *(_WORD *)&v209[10] = 2082;
        *(_QWORD *)&v209[12] = v79;
        v210 = 2082;
        v211 = (void *)v193;
        v212 = 2114;
        v213 = v84;
        _os_log_impl(&dword_182FBE000, v77, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] unresolved proxies, waiting for resolution", buf, 0x48u);

      }
    }

    goto LABEL_75;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v21 = (id)gLogObj;
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    if (mode > 5)
      v22 = "unknown-mode";
    else
      v22 = off_1E149FC18[mode];
    *(_DWORD *)buf = 136446722;
    *(_QWORD *)&buf[4] = "nw_endpoint_proxy_complete_resolve";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v22;
    *(_WORD *)&buf[22] = 2082;
    v208 = (uint64_t (*)(uint64_t, uint64_t))"proxy";
    _os_log_impl(&dword_182FBE000, v21, OS_LOG_TYPE_DEFAULT, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
  }

LABEL_144:
}

void sub_1835EA5C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  void *v30;
  void *v31;
  void *v32;

  _Block_object_dispose(&a30, 8);
  _Unwind_Resume(a1);
}

BOOL nw_endpoint_proxy_has_unresolved_proxies(NWConcrete_nw_endpoint_handler *a1, BOOL *a2)
{
  NWConcrete_nw_endpoint_handler *v3;
  NWConcrete_nw_endpoint_mode_handler *v4;
  unsigned __int8 *v5;
  int minimize_logging;
  char logging_disabled;
  NSObject *v8;
  const char *v9;
  const char *v10;
  nw_endpoint_t v11;
  const char *v12;
  const char *v13;
  const char *v14;
  id v15;
  NSObject *v16;
  const char *v17;
  const char *v18;
  const char *v19;
  const char *v20;
  const char *v21;
  const char *v22;
  id v23;
  _BOOL8 v24;
  const char *id_string;
  const char *v27;
  nw_endpoint_t v28;
  const char *logging_description;
  const char *v30;
  const char *v31;
  id v32;
  nw_endpoint_t v33;
  _QWORD v34[6];
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  char v42;
  uint8_t buf[4];
  const char *v44;
  __int16 v45;
  const char *v46;
  __int16 v47;
  const char *v48;
  __int16 v49;
  const char *v50;
  __int16 v51;
  const char *v52;
  __int16 v53;
  const char *v54;
  __int16 v55;
  id v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v39 = 0;
  v40 = &v39;
  v41 = 0x2020000000;
  v42 = 0;
  v35 = 0;
  v36 = &v35;
  v37 = 0x2020000000;
  v38 = 0;
  v4 = nw_endpoint_handler_copy_proxy(v3);
  v5 = (unsigned __int8 *)*((_QWORD *)v4 + 7);
  v34[0] = MEMORY[0x1E0C809B0];
  v34[1] = 3221225472;
  v34[2] = ___ZL40nw_endpoint_proxy_has_unresolved_proxiesP30NWConcrete_nw_endpoint_handlerPb_block_invoke;
  v34[3] = &unk_1E14A8FF0;
  v34[4] = &v39;
  v34[5] = &v35;
  nw_array_apply(v5, (uint64_t)v34);
  if (!*((_BYTE *)v40 + 24) && !*((_BYTE *)v36 + 24))
  {
    if ((*((_BYTE *)v4 + 96) & 0xA0) == 0x20)
    {
      minimize_logging = nw_endpoint_handler_get_minimize_logging(v3);
      logging_disabled = nw_endpoint_handler_get_logging_disabled(v3);
      if (minimize_logging)
      {
        if ((logging_disabled & 1) != 0)
          goto LABEL_19;
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v8 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
        {
          id_string = nw_endpoint_handler_get_id_string(v3);
          v27 = nw_endpoint_handler_dry_run_string(v3);
          v28 = nw_endpoint_handler_copy_endpoint(v3);
          logging_description = nw_endpoint_get_logging_description(v28);
          v30 = nw_endpoint_handler_state_string(v3);
          v31 = nw_endpoint_handler_mode_string(v3);
          v32 = nw_endpoint_handler_copy_current_path(v3);
          *(_DWORD *)buf = 136447746;
          v44 = "nw_endpoint_proxy_has_unresolved_proxies";
          v45 = 2082;
          v46 = id_string;
          v47 = 2082;
          v48 = v27;
          v49 = 2082;
          v50 = logging_description;
          v51 = 2082;
          v52 = v30;
          v53 = 2082;
          v54 = v31;
          v55 = 2114;
          v56 = v32;
          _os_log_impl(&dword_182FBE000, v8, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] direct attempts prohibited, not recommending", buf, 0x48u);

        }
        goto LABEL_10;
      }
      if ((logging_disabled & 1) == 0)
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v8 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          v9 = nw_endpoint_handler_get_id_string(v3);
          v10 = nw_endpoint_handler_dry_run_string(v3);
          v11 = nw_endpoint_handler_copy_endpoint(v3);
          v12 = nw_endpoint_get_logging_description(v11);
          v13 = nw_endpoint_handler_state_string(v3);
          v14 = nw_endpoint_handler_mode_string(v3);
          v15 = nw_endpoint_handler_copy_current_path(v3);
          *(_DWORD *)buf = 136447746;
          v44 = "nw_endpoint_proxy_has_unresolved_proxies";
          v45 = 2082;
          v46 = v9;
          v47 = 2082;
          v48 = v10;
          v49 = 2082;
          v50 = v12;
          v51 = 2082;
          v52 = v13;
          v53 = 2082;
          v54 = v14;
          v55 = 2114;
          v56 = v15;
          _os_log_impl(&dword_182FBE000, v8, OS_LOG_TYPE_DEFAULT, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] direct attempts prohibited, not recommending", buf, 0x48u);

        }
LABEL_10:

      }
    }
    else if (a2)
    {
      if ((nw_endpoint_handler_get_logging_disabled(v3) & 1) == 0)
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v16 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
        {
          v17 = nw_endpoint_handler_get_id_string(v3);
          v18 = nw_endpoint_handler_dry_run_string(v3);
          v19 = v17;
          v33 = nw_endpoint_handler_copy_endpoint(v3);
          v20 = nw_endpoint_get_logging_description(v33);
          v21 = nw_endpoint_handler_state_string(v3);
          v22 = nw_endpoint_handler_mode_string(v3);
          v23 = nw_endpoint_handler_copy_current_path(v3);
          *(_DWORD *)buf = 136447746;
          v44 = "nw_endpoint_proxy_has_unresolved_proxies";
          v45 = 2082;
          v46 = v19;
          v47 = 2082;
          v48 = v18;
          v49 = 2082;
          v50 = v20;
          v51 = 2082;
          v52 = v21;
          v53 = 2082;
          v54 = v22;
          v55 = 2114;
          v56 = v23;
          _os_log_impl(&dword_182FBE000, v16, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] no resolved proxies or missing url, recommending direct attempt", buf, 0x48u);

        }
      }
      *a2 = 1;
    }
  }
LABEL_19:
  v24 = *((_BYTE *)v40 + 24) != 0;

  _Block_object_dispose(&v35, 8);
  _Block_object_dispose(&v39, 8);

  return v24;
}

void sub_1835EAC8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v14;
  va_list va;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v14 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);

  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);

  _Unwind_Resume(a1);
}

BOOL ___ZL34nw_endpoint_proxy_complete_resolveP30NWConcrete_nw_endpoint_handler_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  int mode;

  mode = nw_proxy_config_get_mode(a3);
  if (mode == 4)
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
  return mode != 4;
}

uint64_t ___ZL34nw_endpoint_proxy_complete_resolveP30NWConcrete_nw_endpoint_handler_block_invoke_147(uint64_t a1, uint64_t a2, void *a3)
{
  void *v3;
  int mode;
  int v7;
  void *v8;
  NWConcrete_nw_endpoint_handler *v9;
  id v10;
  _DWORD *v11;
  int v12;
  _DWORD *v13;
  void *v14;
  int v15;
  nw_endpoint_t v16;
  nw_endpoint_t v17;
  id *v18;
  id v19;
  NSObject *v20;
  NSObject *v21;
  const char *id_string;
  const char *v23;
  nw_endpoint_t v24;
  const char *logging_description;
  const char *v26;
  const char *v27;
  id v28;
  id v29;
  _BOOL8 v30;
  NSObject *v31;
  id v32;
  id v33;
  int v34;
  _BYTE *v35;
  BOOL v36;
  id *v37;
  _BYTE *v38;
  NWConcrete_nw_parameters *v39;
  NWConcrete_nw_parameters *v40;
  _BYTE *v41;
  BOOL v42;
  NWConcrete_nw_parameters *v43;
  NWConcrete_nw_parameters *v44;
  int v45;
  char v46;
  NSObject *inner;
  const char *v48;
  const char *v49;
  nw_endpoint_t v50;
  const char *v51;
  const char *v52;
  const char *v53;
  id v54;
  nw_protocol_definition_t v55;
  NSObject *v56;
  nw_protocol_options_t v57;
  NSObject *v58;
  id v59;
  unsigned __int8 *v60;
  void *v61;
  NSObject *v62;
  NSObject *v63;
  id *v64;
  NSObject *v65;
  _BYTE *v66;
  BOOL v67;
  id v68;
  unsigned __int8 *v69;
  _BYTE *v70;
  BOOL v71;
  _BYTE *v72;
  BOOL v73;
  _DWORD *v74;
  nw_multipath_service_t v75;
  _DWORD *v76;
  BOOL v77;
  _BOOL8 v78;
  void *v79;
  int minimize_logging;
  char logging_disabled;
  NSObject *v82;
  const char *v83;
  const char *v84;
  nw_endpoint_t v85;
  const char *v86;
  const char *v87;
  const char *v88;
  id v89;
  const char *v90;
  uint64_t v91;
  void *v93;
  char *v94;
  NSObject *v95;
  os_log_type_t v96;
  void *v97;
  char *v98;
  NSObject *v99;
  os_log_type_t v100;
  void *v101;
  char *v102;
  NSObject *v103;
  os_log_type_t v104;
  const char *v105;
  const char *v106;
  const char *v107;
  const char *v108;
  const char *v109;
  id v110;
  const char *v111;
  char *backtrace_string;
  NSObject *v113;
  os_log_type_t v114;
  _BOOL4 v115;
  char *v116;
  NSObject *v117;
  os_log_type_t v118;
  _BOOL4 v119;
  char *v120;
  NSObject *v121;
  os_log_type_t v122;
  _BOOL4 v123;
  void *v124;
  char *v125;
  NSObject *v126;
  os_log_type_t v127;
  os_log_type_t v128;
  os_log_type_t v129;
  void *v130;
  char *v131;
  NSObject *v132;
  os_log_type_t v133;
  os_log_type_t v134;
  const char *v135;
  const char *v136;
  nw_endpoint_t v137;
  const char *v138;
  const char *v139;
  const char *v140;
  id v141;
  char *v142;
  NSObject *v143;
  os_log_type_t v144;
  _BOOL4 v145;
  char *v146;
  NSObject *v147;
  os_log_type_t v148;
  _BOOL4 v149;
  os_log_type_t v150;
  os_log_type_t v151;
  void *obj;
  int v153;
  nw_endpoint_t v154;
  void *v155;
  int v156;
  uint64_t v157;
  void *v158;
  void *v159;
  nw_protocol_options_t v160;
  NSObject *options;
  NSObject *v162;
  int v163;
  nw_endpoint_t v164;
  id v165;
  nw_endpoint_t v166;
  NWConcrete_nw_endpoint_mode_handler *v167;
  id v168;
  NWConcrete_nw_endpoint_handler *v169;
  char v170;
  _QWORD iterate_block[4];
  NSObject *v172;
  NSObject *v173;
  os_log_type_t v174;
  uint8_t buf[4];
  const char *v176;
  __int16 v177;
  void *v178;
  __int16 v179;
  const char *v180;
  __int16 v181;
  const char *v182;
  __int16 v183;
  const char *v184;
  __int16 v185;
  const char *v186;
  __int16 v187;
  id v188;
  __int16 v189;
  const char *v190;
  __int128 v191;
  uint64_t v192;

  v3 = a3;
  v192 = *MEMORY[0x1E0C80C00];
  v168 = a3;
  mode = nw_proxy_config_get_mode(v168);
  if (mode != 4 && mode != 1)
    goto LABEL_101;
  v7 = mode;
  if (*(_BYTE *)(a1 + 56) && !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
    goto LABEL_98;
  v8 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
  v9 = (NWConcrete_nw_endpoint_handler *)*(id *)(a1 + 32);
  v10 = v168;
  v165 = v8;
  v169 = v9;
  v159 = v10;
  v167 = nw_endpoint_handler_copy_proxy(v9);
  v157 = a1;
  v158 = v3;
  v156 = v7;
  if (!v10)
  {
    __nwlog_obj();
    v93 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v176 = "nw_endpoint_proxy_add_child_for_config";
    v94 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(iterate_block[0]) = 16;
    LOBYTE(v191) = 0;
    if (__nwlog_fault(v94, iterate_block, &v191))
    {
      if (LOBYTE(iterate_block[0]) == 17)
      {
        __nwlog_obj();
        v95 = objc_claimAutoreleasedReturnValue();
        v96 = iterate_block[0];
        if (os_log_type_enabled(v95, iterate_block[0]))
        {
          *(_DWORD *)buf = 136446210;
          v176 = "nw_endpoint_proxy_add_child_for_config";
          _os_log_impl(&dword_182FBE000, v95, v96, "%{public}s called with null config", buf, 0xCu);
        }
      }
      else
      {
        if ((_BYTE)v191)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v113 = objc_claimAutoreleasedReturnValue();
          v114 = iterate_block[0];
          v115 = os_log_type_enabled(v113, iterate_block[0]);
          if (backtrace_string)
          {
            if (v115)
            {
              *(_DWORD *)buf = 136446466;
              v176 = "nw_endpoint_proxy_add_child_for_config";
              v177 = 2082;
              v178 = backtrace_string;
              _os_log_impl(&dword_182FBE000, v113, v114, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(backtrace_string);
          }
          else
          {
            if (v115)
            {
              *(_DWORD *)buf = 136446210;
              v176 = "nw_endpoint_proxy_add_child_for_config";
              _os_log_impl(&dword_182FBE000, v113, v114, "%{public}s called with null config, no backtrace", buf, 0xCu);
            }

          }
          goto LABEL_171;
        }
        __nwlog_obj();
        v95 = objc_claimAutoreleasedReturnValue();
        v128 = iterate_block[0];
        if (os_log_type_enabled(v95, iterate_block[0]))
        {
          *(_DWORD *)buf = 136446210;
          v176 = "nw_endpoint_proxy_add_child_for_config";
          _os_log_impl(&dword_182FBE000, v95, v128, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_171:
    if (v94)
      free(v94);
    goto LABEL_97;
  }
  v11 = v10;
  v12 = v11[38];

  v13 = v11;
  v14 = v13;
  v15 = 1;
  switch(v11[38])
  {
    case 1:
      v15 = v13[39];
      break;
    case 2:
      v15 = 1002;
      break;
    case 3:
      v15 = 1001;
      break;
    case 4:
      break;
    default:
      v15 = 0;
      break;
  }
  v153 = v15;

  v16 = nw_endpoint_handler_copy_endpoint(v169);
  v17 = v16;
  v154 = v16;
  obj = v8;
  v163 = v12;
  if (v12 == 1)
  {
    v18 = v14;
    v19 = v18[5];

    v20 = nw_endpoint_copy(v19);
    v166 = v20;
    if (v153 != 2001)
    {
      nw_endpoint_set_parent_endpoint(v20, v17, 1);
      v20 = v166;
    }
    nw_endpoint_set_do_not_redact(v20);

  }
  else if (v12 == 4)
  {
    v166 = v16;
  }
  else
  {
    if ((nw_endpoint_handler_get_logging_disabled(v169) & 1) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v21 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        id_string = nw_endpoint_handler_get_id_string(v169);
        v23 = nw_endpoint_handler_dry_run_string(v169);
        v24 = nw_endpoint_handler_copy_endpoint(v169);
        logging_description = nw_endpoint_get_logging_description(v24);
        v26 = nw_endpoint_handler_state_string(v169);
        v27 = nw_endpoint_handler_mode_string(v169);
        v28 = nw_endpoint_handler_copy_current_path(v169);
        *(_DWORD *)buf = 136448002;
        v176 = "nw_endpoint_proxy_add_child_for_config";
        v177 = 2082;
        v178 = (void *)id_string;
        v179 = 2082;
        v180 = v23;
        v181 = 2082;
        v182 = logging_description;
        v183 = 2082;
        v184 = v26;
        v185 = 2082;
        v186 = v27;
        v187 = 2114;
        v188 = v28;
        v189 = 1024;
        LODWORD(v190) = v163;
        _os_log_impl(&dword_182FBE000, v21, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] invalid proxy mode %u", buf, 0x4Eu);

      }
    }
    v166 = 0;
  }
  v29 = nw_endpoint_handler_copy_parameters(v169);
  v30 = -[NWConcrete_nw_parameters initWithParameters:stripConnected:shallowCopy:]((id *)[NWConcrete_nw_parameters alloc], v29, 0, 0);

  v31 = nw_parameters_copy_default_protocol_stack((nw_parameters_t)v30);
  options = nw_protocol_stack_copy_transport_protocol(v31);
  v162 = v31;
  v160 = nw_protocol_stack_copy_internet_protocol(v31);
  v32 = nw_endpoint_handler_copy_current_path(v169);
  v191 = 0uLL;
  v155 = v32;
  if (nw_path_get_client_id(v32, &v191))
    nw_parameters_set_parent_id_inner((NWConcrete_nw_parameters *)v30, (const unsigned __int8 *)&v191, 0);
  nw_parameters_set_proxy_applied((void *)v30, 1);
  nw_parameters_set_effective_proxy_config((void *)v30, v14);
  if (v165)
  {
    v33 = v14;
    v34 = v11[38];

    if (v34 == 4)
    {
      v35 = v165;
      v36 = (v35[171] & 0x40) == 0;

      if (!v36)
      {
        v37 = (id *)(id)v30;
        v38 = v35;
        if (v37)
        {
          objc_storeStrong(v37 + 24, obj);
LABEL_34:

          goto LABEL_35;
        }
        __nwlog_obj();
        v130 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136446210;
        v176 = "nw_parameters_set_raced_proxy_config";
        v131 = (char *)_os_log_send_and_compose_impl();

        LOBYTE(iterate_block[0]) = 16;
        v174 = OS_LOG_TYPE_DEFAULT;
        if (__nwlog_fault(v131, iterate_block, &v174))
        {
          if (LOBYTE(iterate_block[0]) == 17)
          {
            __nwlog_obj();
            v132 = objc_claimAutoreleasedReturnValue();
            v133 = iterate_block[0];
            if (os_log_type_enabled(v132, iterate_block[0]))
            {
              *(_DWORD *)buf = 136446210;
              v176 = "nw_parameters_set_raced_proxy_config";
              _os_log_impl(&dword_182FBE000, v132, v133, "%{public}s called with null parameters", buf, 0xCu);
            }
          }
          else
          {
            if (v174)
            {
              v146 = (char *)__nw_create_backtrace_string();
              __nwlog_obj();
              v147 = objc_claimAutoreleasedReturnValue();
              v148 = iterate_block[0];
              v149 = os_log_type_enabled(v147, iterate_block[0]);
              if (v146)
              {
                if (v149)
                {
                  *(_DWORD *)buf = 136446466;
                  v176 = "nw_parameters_set_raced_proxy_config";
                  v177 = 2082;
                  v178 = v146;
                  _os_log_impl(&dword_182FBE000, v147, v148, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
                }

                free(v146);
              }
              else
              {
                if (v149)
                {
                  *(_DWORD *)buf = 136446210;
                  v176 = "nw_parameters_set_raced_proxy_config";
                  _os_log_impl(&dword_182FBE000, v147, v148, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
                }

              }
              goto LABEL_202;
            }
            __nwlog_obj();
            v132 = objc_claimAutoreleasedReturnValue();
            v151 = iterate_block[0];
            if (os_log_type_enabled(v132, iterate_block[0]))
            {
              *(_DWORD *)buf = 136446210;
              v176 = "nw_parameters_set_raced_proxy_config";
              _os_log_impl(&dword_182FBE000, v132, v151, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
            }
          }

        }
LABEL_202:
        if (v131)
          free(v131);
        goto LABEL_34;
      }
    }
  }
LABEL_35:
  nw_parameters_set_preferred_netagent_classes((void *)v30, 0, 0);
  if (v163 == 1 || (*((_BYTE *)v167 + 97) & 0x40) != 0)
  {
    v39 = (NWConcrete_nw_parameters *)(id)v30;
    v40 = v39;
    if (v39)
    {
      LOWORD(v39->path_parameters->joinable_path_value.multipath_service) |= 0x2000u;
LABEL_39:

      goto LABEL_40;
    }
    __nwlog_obj();
    v101 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v176 = "nw_parameters_set_is_system_proxy_connection";
    v102 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(iterate_block[0]) = 16;
    v174 = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v102, iterate_block, &v174))
    {
      if (LOBYTE(iterate_block[0]) == 17)
      {
        __nwlog_obj();
        v103 = objc_claimAutoreleasedReturnValue();
        v104 = iterate_block[0];
        if (os_log_type_enabled(v103, iterate_block[0]))
        {
          *(_DWORD *)buf = 136446210;
          v176 = "nw_parameters_set_is_system_proxy_connection";
          _os_log_impl(&dword_182FBE000, v103, v104, "%{public}s called with null parameters", buf, 0xCu);
        }
      }
      else
      {
        if (v174)
        {
          v120 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v121 = objc_claimAutoreleasedReturnValue();
          v122 = iterate_block[0];
          v123 = os_log_type_enabled(v121, iterate_block[0]);
          if (v120)
          {
            if (v123)
            {
              *(_DWORD *)buf = 136446466;
              v176 = "nw_parameters_set_is_system_proxy_connection";
              v177 = 2082;
              v178 = v120;
              _os_log_impl(&dword_182FBE000, v121, v122, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(v120);
          }
          else
          {
            if (v123)
            {
              *(_DWORD *)buf = 136446210;
              v176 = "nw_parameters_set_is_system_proxy_connection";
              _os_log_impl(&dword_182FBE000, v121, v122, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
            }

          }
          goto LABEL_181;
        }
        __nwlog_obj();
        v103 = objc_claimAutoreleasedReturnValue();
        v134 = iterate_block[0];
        if (os_log_type_enabled(v103, iterate_block[0]))
        {
          *(_DWORD *)buf = 136446210;
          v176 = "nw_parameters_set_is_system_proxy_connection";
          _os_log_impl(&dword_182FBE000, v103, v134, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_181:
    if (v102)
      free(v102);
    goto LABEL_39;
  }
LABEL_40:
  v41 = v14;
  v42 = (v41[170] & 1) == 0;

  if (!v42)
    *((_BYTE *)v167 + 96) |= 1u;
  if (v163 != 1)
  {
LABEL_83:
    if (v166)
    {
      inner = nw_endpoint_handler_create_inner(v166, (void *)v30, nw_endpoint_proxy_receive_report, v169, v169, 0, 0);
      if (!inner)
      {
LABEL_95:

        goto LABEL_96;
      }
      if (!*((_QWORD *)v167 + 1))
      {
        v78 = nw_array_create();
        v79 = (void *)*((_QWORD *)v167 + 1);
        *((_QWORD *)v167 + 1) = v78;

      }
      minimize_logging = nw_endpoint_handler_get_minimize_logging(v169);
      logging_disabled = nw_endpoint_handler_get_logging_disabled(v169);
      if (minimize_logging)
      {
        if ((logging_disabled & 1) != 0)
          goto LABEL_94;
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v82 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v82, OS_LOG_TYPE_DEBUG))
        {
          v105 = nw_endpoint_handler_get_id_string(v169);
          v106 = nw_endpoint_handler_dry_run_string(v169);
          v164 = nw_endpoint_handler_copy_endpoint(v169);
          v107 = nw_endpoint_get_logging_description(v164);
          v108 = nw_endpoint_handler_state_string(v169);
          v109 = nw_endpoint_handler_mode_string(v169);
          v110 = nw_endpoint_handler_copy_current_path(v169);
          v111 = nw_endpoint_get_logging_description(v166);
          *(_DWORD *)buf = 136448002;
          v176 = "nw_endpoint_proxy_add_child_for_config";
          v177 = 2082;
          v178 = (void *)v105;
          v179 = 2082;
          v180 = v106;
          v181 = 2082;
          v182 = v107;
          v183 = 2082;
          v184 = v108;
          v185 = 2082;
          v186 = v109;
          v187 = 2114;
          v188 = v110;
          v189 = 2082;
          v190 = v111;
          _os_log_impl(&dword_182FBE000, v82, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] adding endpoint handler for %{public}s", buf, 0x52u);

        }
      }
      else
      {
        if ((logging_disabled & 1) != 0)
        {
LABEL_94:
          nw_array_append(*((_QWORD *)v167 + 1), inner);
          goto LABEL_95;
        }
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v82 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v82, OS_LOG_TYPE_INFO))
        {
          v83 = nw_endpoint_handler_get_id_string(v169);
          v84 = nw_endpoint_handler_dry_run_string(v169);
          v85 = nw_endpoint_handler_copy_endpoint(v169);
          v86 = nw_endpoint_get_logging_description(v85);
          v87 = nw_endpoint_handler_state_string(v169);
          v88 = nw_endpoint_handler_mode_string(v169);
          v89 = nw_endpoint_handler_copy_current_path(v169);
          v90 = nw_endpoint_get_logging_description(v166);
          *(_DWORD *)buf = 136448002;
          v176 = "nw_endpoint_proxy_add_child_for_config";
          v177 = 2082;
          v178 = (void *)v83;
          v179 = 2082;
          v180 = v84;
          v181 = 2082;
          v182 = v86;
          v183 = 2082;
          v184 = v87;
          v185 = 2082;
          v186 = v88;
          v187 = 2114;
          v188 = v89;
          v189 = 2082;
          v190 = v90;
          _os_log_impl(&dword_182FBE000, v82, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] adding endpoint handler for %{public}s", buf, 0x52u);

        }
      }

      goto LABEL_94;
    }
    __nwlog_obj();
    v97 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v176 = "nw_endpoint_proxy_add_child_for_config";
    v98 = (char *)_os_log_send_and_compose_impl();

    v174 = OS_LOG_TYPE_ERROR;
    v170 = 0;
    if (__nwlog_fault(v98, &v174, &v170))
    {
      if (v174 == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v99 = objc_claimAutoreleasedReturnValue();
        v100 = v174;
        if (os_log_type_enabled(v99, v174))
        {
          *(_DWORD *)buf = 136446210;
          v176 = "nw_endpoint_proxy_add_child_for_config";
          _os_log_impl(&dword_182FBE000, v99, v100, "%{public}s called with null child_endpoint", buf, 0xCu);
        }
      }
      else
      {
        if (v170)
        {
          v116 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v117 = objc_claimAutoreleasedReturnValue();
          v118 = v174;
          v119 = os_log_type_enabled(v117, v174);
          if (v116)
          {
            if (v119)
            {
              *(_DWORD *)buf = 136446466;
              v176 = "nw_endpoint_proxy_add_child_for_config";
              v177 = 2082;
              v178 = v116;
              _os_log_impl(&dword_182FBE000, v117, v118, "%{public}s called with null child_endpoint, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(v116);
          }
          else
          {
            if (v119)
            {
              *(_DWORD *)buf = 136446210;
              v176 = "nw_endpoint_proxy_add_child_for_config";
              _os_log_impl(&dword_182FBE000, v117, v118, "%{public}s called with null child_endpoint, no backtrace", buf, 0xCu);
            }

          }
          goto LABEL_176;
        }
        __nwlog_obj();
        v99 = objc_claimAutoreleasedReturnValue();
        v129 = v174;
        if (os_log_type_enabled(v99, v174))
        {
          *(_DWORD *)buf = 136446210;
          v176 = "nw_endpoint_proxy_add_child_for_config";
          _os_log_impl(&dword_182FBE000, v99, v129, "%{public}s called with null child_endpoint, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_176:
    if (v98)
      free(v98);
    goto LABEL_96;
  }
  if (nw_parameters_get_is_known_tracker((void *)v30))
  {
    nw_parameters_set_is_known_tracker((void *)v30, 0);
    v43 = (NWConcrete_nw_parameters *)(id)v30;
    v44 = v43;
    if (v43)
    {
      *((_QWORD *)&v43->value + 11) |= 0x80000000uLL;
LABEL_46:

      goto LABEL_47;
    }
    __nwlog_obj();
    v124 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v176 = "nw_parameters_set_parent_is_known_tracker";
    v125 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(iterate_block[0]) = 16;
    v174 = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v125, iterate_block, &v174))
    {
      if (LOBYTE(iterate_block[0]) == 17)
      {
        __nwlog_obj();
        v126 = objc_claimAutoreleasedReturnValue();
        v127 = iterate_block[0];
        if (os_log_type_enabled(v126, iterate_block[0]))
        {
          *(_DWORD *)buf = 136446210;
          v176 = "nw_parameters_set_parent_is_known_tracker";
          _os_log_impl(&dword_182FBE000, v126, v127, "%{public}s called with null parameters", buf, 0xCu);
        }
      }
      else
      {
        if (v174)
        {
          v142 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v143 = objc_claimAutoreleasedReturnValue();
          v144 = iterate_block[0];
          v145 = os_log_type_enabled(v143, iterate_block[0]);
          if (v142)
          {
            if (v145)
            {
              *(_DWORD *)buf = 136446466;
              v176 = "nw_parameters_set_parent_is_known_tracker";
              v177 = 2082;
              v178 = v142;
              _os_log_impl(&dword_182FBE000, v143, v144, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(v142);
          }
          else
          {
            if (v145)
            {
              *(_DWORD *)buf = 136446210;
              v176 = "nw_parameters_set_parent_is_known_tracker";
              _os_log_impl(&dword_182FBE000, v143, v144, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
            }

          }
          goto LABEL_197;
        }
        __nwlog_obj();
        v126 = objc_claimAutoreleasedReturnValue();
        v150 = iterate_block[0];
        if (os_log_type_enabled(v126, iterate_block[0]))
        {
          *(_DWORD *)buf = 136446210;
          v176 = "nw_parameters_set_parent_is_known_tracker";
          _os_log_impl(&dword_182FBE000, v126, v150, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_197:
    if (v125)
      free(v125);
    goto LABEL_46;
  }
LABEL_47:
  if ((v153 - 2001) > 1)
  {
    *(_DWORD *)buf = 4;
    nw_proxy_config_remove_protocols_from_stack(v41, v162);
    v55 = nw_protocol_options_copy_definition(options);
    v56 = nw_proxy_config_copy_protocol_stack(v41, v55, buf);

    if (!v56)
    {
LABEL_82:

      goto LABEL_83;
    }
    if (*(_DWORD *)buf == 2)
    {
      v58 = v162;
      nw_protocol_stack_append_application_protocol(v162, options);
      v57 = v160;
    }
    else
    {
      v57 = options;
      v58 = v162;
      if (*(_DWORD *)buf != 3)
        goto LABEL_67;
    }
    nw_protocol_stack_append_application_protocol(v58, v57);
LABEL_67:
    iterate_block[0] = MEMORY[0x1E0C809B0];
    iterate_block[1] = 3221225472;
    iterate_block[2] = ___ZL38nw_endpoint_proxy_add_child_for_configP30NWConcrete_nw_endpoint_handlerPU29objcproto18OS_nw_proxy_config8NSObjectS3__block_invoke;
    iterate_block[3] = &unk_1E14A98F8;
    v62 = (id)v30;
    v172 = v62;
    v63 = v58;
    v173 = v63;
    nw_protocol_stack_iterate_application_protocols(v56, iterate_block);
    v64 = v56;
    v65 = v64[3];

    if (v65)
    {
      nw_protocol_stack_set_original_proxied_transport_protocol(v63, options);
      nw_protocol_stack_set_transport_protocol(v63, v65);
    }
    v66 = v41;
    v67 = (v66[171] & 4) == 0;

    if (!v67)
    {
      if (nw_protocol_setup_tcp_definition(void)::onceToken != -1)
        dispatch_once(&nw_protocol_setup_tcp_definition(void)::onceToken, &__block_literal_global_62963);
      v68 = (id)g_tcp_definition;
      v69 = nw_parameters_copy_protocol_options_for_definition(v62, v68);

      if (v69)
      {
        nw_tcp_options_set_enable_fast_open((nw_protocol_options_t)v69, 1);
        v70 = v66;
        v71 = (v66[171] & 1) == 0;

        if (!v71)
          nw_tcp_options_set_fast_open_force_enable(v69, 1);
        v72 = v70;
        v73 = (v66[171] & 8) == 0;

        if (!v73)
          nw_tcp_options_set_no_fast_open_cookie(v69, 1);
      }

    }
    v74 = v66;
    v75 = v74[40];

    if (v75)
    {
      nw_parameters_set_multipath_service(v62, v75);
      v76 = v74;
      v77 = (v66[171] & 2) == 0;

      if (!v77)
        nw_parameters_set_multipath_force_enable(v62, 1);
    }

    goto LABEL_82;
  }
  if (!nw_parameters_get_no_opaque_proxy((void *)v30))
  {
    nw_parameters_set_fast_open_enabled((nw_parameters_t)v30, 0);
    if (nw_protocol_setup_tcp_definition(void)::onceToken != -1)
      dispatch_once(&nw_protocol_setup_tcp_definition(void)::onceToken, &__block_literal_global_62963);
    v59 = (id)g_tcp_definition;
    v60 = nw_parameters_copy_protocol_options_for_definition((void *)v30, v59);

    if (v60)
      nw_tcp_options_set_enable_fast_open((nw_protocol_options_t)v60, 0);
    v61 = (void *)nw_protocol_boringssl_copy_definition();
    nw_parameters_remove_definition_from_protocol_stack((void *)v30, v61);

    nw_proxy_config_remove_protocols_from_stack(v41, v162);
    goto LABEL_83;
  }
  v45 = nw_endpoint_handler_get_minimize_logging(v169);
  v46 = nw_endpoint_handler_get_logging_disabled(v169);
  if (v45)
  {
    if ((v46 & 1) != 0)
      goto LABEL_96;
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    inner = (id)gconnectionLogObj;
    if (os_log_type_enabled(inner, OS_LOG_TYPE_DEBUG))
    {
      v135 = nw_endpoint_handler_get_id_string(v169);
      v136 = nw_endpoint_handler_dry_run_string(v169);
      v137 = nw_endpoint_handler_copy_endpoint(v169);
      v138 = nw_endpoint_get_logging_description(v137);
      v139 = nw_endpoint_handler_state_string(v169);
      v140 = nw_endpoint_handler_mode_string(v169);
      v141 = nw_endpoint_handler_copy_current_path(v169);
      *(_DWORD *)buf = 136447746;
      v176 = "nw_endpoint_proxy_add_child_for_config";
      v177 = 2082;
      v178 = (void *)v135;
      v179 = 2082;
      v180 = v136;
      v181 = 2082;
      v182 = v138;
      v183 = 2082;
      v184 = v139;
      v185 = 2082;
      v186 = v140;
      v187 = 2114;
      v188 = v141;
      _os_log_impl(&dword_182FBE000, inner, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] opaque proxy not supported on connection, skipping", buf, 0x48u);

    }
    goto LABEL_95;
  }
  if ((v46 & 1) == 0)
  {
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    inner = (id)gconnectionLogObj;
    if (os_log_type_enabled(inner, OS_LOG_TYPE_INFO))
    {
      v48 = nw_endpoint_handler_get_id_string(v169);
      v49 = nw_endpoint_handler_dry_run_string(v169);
      v50 = nw_endpoint_handler_copy_endpoint(v169);
      v51 = nw_endpoint_get_logging_description(v50);
      v52 = nw_endpoint_handler_state_string(v169);
      v53 = nw_endpoint_handler_mode_string(v169);
      v54 = nw_endpoint_handler_copy_current_path(v169);
      *(_DWORD *)buf = 136447746;
      v176 = "nw_endpoint_proxy_add_child_for_config";
      v177 = 2082;
      v178 = (void *)v48;
      v179 = 2082;
      v180 = v49;
      v181 = 2082;
      v182 = v51;
      v183 = 2082;
      v184 = v52;
      v185 = 2082;
      v186 = v53;
      v187 = 2114;
      v188 = v54;
      _os_log_impl(&dword_182FBE000, inner, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] opaque proxy not supported on connection, skipping", buf, 0x48u);

    }
    goto LABEL_95;
  }
LABEL_96:

LABEL_97:
  a1 = v157;
  v3 = v158;
  v7 = v156;
LABEL_98:
  if (v7 != 4 || (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1, !*(_BYTE *)(a1 + 57)))
  {
LABEL_101:
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), v3);
    v91 = 1;
    goto LABEL_102;
  }
  v91 = 0;
LABEL_102:

  return v91;
}

void sub_1835EC524(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20,void *a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,void *a32)
{
  void *v32;
  void *v33;
  void *v34;

  _Unwind_Resume(a1);
}

void nw_endpoint_proxy_start_next_child(NWConcrete_nw_endpoint_handler *a1)
{
  NWConcrete_nw_endpoint_handler *v1;
  NWConcrete_nw_endpoint_handler *v2;
  unsigned int *v3;
  uint64_t v4;
  NWConcrete_nw_endpoint_handler *v5;
  int state;
  NWConcrete_nw_endpoint_handler *v7;
  char v8;
  NSObject *v9;
  NWConcrete_nw_endpoint_handler *v10;
  NWConcrete_nw_endpoint_handler *v11;
  char v12;
  const char *v13;
  nw_endpoint_t v14;
  char *v15;
  NWConcrete_nw_endpoint_handler *v16;
  NWConcrete_nw_endpoint_handler *v17;
  uint64_t v18;
  const char *v19;
  const char *v20;
  NWConcrete_nw_endpoint_mode_handler *v21;
  uint64_t v22;
  NWConcrete_nw_endpoint_mode_handler *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  NWConcrete_nw_endpoint_handler *v28;
  id v29;
  void *v30;
  id *v31;
  id v32;
  int is_privacy_proxy;
  _BOOL4 v34;
  _DWORD *v35;
  void **v36;
  void **v37;
  const char *v38;
  NWConcrete_nw_endpoint_handler *v39;
  char v40;
  NSObject *v41;
  NWConcrete_nw_endpoint_handler *v42;
  NWConcrete_nw_endpoint_handler *v43;
  char v44;
  const char *v45;
  nw_endpoint_t v46;
  char *id_str;
  NWConcrete_nw_endpoint_handler *v48;
  NWConcrete_nw_endpoint_handler *v49;
  uint64_t v50;
  const char *v51;
  int v52;
  void **v53;
  id v54;
  void **v55;
  void **v56;
  const char *v57;
  NWConcrete_nw_endpoint_handler *v58;
  char v59;
  void *v60;
  uint64_t v61;
  unint64_t v62;
  NWConcrete_nw_endpoint_handler *v63;
  NWConcrete_nw_endpoint_handler *v64;
  id v65;
  id v66;
  id v67;
  void *v68;
  int mode;
  void **v70;
  id v71;
  void *v72;
  char *v73;
  NSObject *v74;
  os_log_type_t v75;
  char *backtrace_string;
  os_log_type_t v77;
  _BOOL4 v78;
  NWConcrete_nw_endpoint_handler *v79;
  NSObject *v80;
  const char *v81;
  const char *v82;
  nw_endpoint_t v83;
  const char *v84;
  const char *v85;
  const char *v86;
  id v87;
  void *v88;
  char *v89;
  NSObject *v90;
  os_log_type_t v91;
  os_log_type_t v92;
  char **v93;
  int64_t v94;
  unint64_t int64_with_default;
  int v96;
  int minimize_logging;
  char logging_disabled;
  NSObject *v99;
  const char *v100;
  const char *v101;
  const char *v102;
  const char *v103;
  id v104;
  id v105;
  id *v106;
  int v107;
  int v108;
  char v109;
  NSObject *v110;
  nw_endpoint_t v111;
  const char *v112;
  const char *v113;
  const char *v114;
  id v115;
  id v116;
  uint64_t v117;
  dispatch_time_t v118;
  uint64_t v119;
  void *v120;
  char *v121;
  NSObject *v122;
  os_log_type_t v123;
  char *v124;
  os_log_type_t v125;
  _BOOL4 v126;
  char *v127;
  NSObject *v128;
  os_log_type_t v129;
  _BOOL4 v130;
  os_log_type_t v131;
  os_log_type_t v132;
  const char *v133;
  const char *v134;
  const char *v135;
  const char *v136;
  id v137;
  const char *id_string;
  const char *v139;
  const char *v140;
  const char *v141;
  id v142;
  const char *v143;
  const char *v144;
  const char *v145;
  const char *v146;
  nw_endpoint_t v147;
  const char *v148;
  nw_endpoint_t deltaa;
  unint64_t delta;
  nw_endpoint_t deltab;
  const char *v152;
  NWConcrete_nw_endpoint_handler *v153;
  const char *logging_description;
  void *v155;
  const char *v156;
  NWConcrete_nw_endpoint_handler *v157;
  _QWORD v158[4];
  NWConcrete_nw_endpoint_mode_handler *v159;
  NWConcrete_nw_endpoint_handler *v160;
  _QWORD v161[4];
  NWConcrete_nw_endpoint_handler *v162;
  char v163;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v166;
  __int16 v167;
  void *v168;
  __int16 v169;
  const char *v170;
  __int16 v171;
  const char *v172;
  __int16 v173;
  const char *v174;
  __int16 v175;
  const char *v176;
  __int16 v177;
  id v178;
  __int16 v179;
  unint64_t v180;
  uint64_t v181;

  v181 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v72 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v166 = "nw_endpoint_proxy_start_next_child";
    v73 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v163 = 0;
    if (__nwlog_fault(v73, &type, &v163))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v74 = objc_claimAutoreleasedReturnValue();
        v75 = type;
        if (os_log_type_enabled(v74, type))
        {
          *(_DWORD *)buf = 136446210;
          v166 = "nw_endpoint_proxy_start_next_child";
          _os_log_impl(&dword_182FBE000, v74, v75, "%{public}s called with null handler", buf, 0xCu);
        }
      }
      else if (v163)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v74 = objc_claimAutoreleasedReturnValue();
        v77 = type;
        v78 = os_log_type_enabled(v74, type);
        if (backtrace_string)
        {
          if (v78)
          {
            *(_DWORD *)buf = 136446466;
            v166 = "nw_endpoint_proxy_start_next_child";
            v167 = 2082;
            v168 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v74, v77, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_159;
        }
        if (v78)
        {
          *(_DWORD *)buf = 136446210;
          v166 = "nw_endpoint_proxy_start_next_child";
          _os_log_impl(&dword_182FBE000, v74, v77, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v74 = objc_claimAutoreleasedReturnValue();
        v92 = type;
        if (os_log_type_enabled(v74, type))
        {
          *(_DWORD *)buf = 136446210;
          v166 = "nw_endpoint_proxy_start_next_child";
          _os_log_impl(&dword_182FBE000, v74, v92, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_159:
    if (v73)
      free(v73);
    v2 = 0;
    goto LABEL_86;
  }
  v3 = v1;
  v4 = v3[29];

  if ((_DWORD)v4 != 3)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v9 = (id)gLogObj;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      if (v4 > 5)
        v20 = "unknown-mode";
      else
        v20 = off_1E149FC18[v4];
      *(_DWORD *)buf = 136446722;
      v166 = "nw_endpoint_proxy_start_next_child";
      v167 = 2082;
      v168 = (void *)v20;
      v169 = 2082;
      v170 = "proxy";
      _os_log_impl(&dword_182FBE000, v9, OS_LOG_TYPE_DEFAULT, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
    }
    goto LABEL_30;
  }
  v5 = v3;
  state = v5->state;

  if ((state & 0xFFFFFFFE) != 4)
  {
    v21 = nw_endpoint_handler_copy_proxy(v5);
    v23 = v21;
    v157 = v2;
    if (v21)
    {
      v24 = *((_QWORD *)v21 + 1);
      if (!v24 || (v25 = *(_QWORD *)(v24 + 24) - *(_QWORD *)(v24 + 16)) == 0)
      {
        nw_endpoint_handler_handle_failure(v5);
        v35 = -[NWConcrete_nw_error initWithDomain:code:]([NWConcrete_nw_error alloc], 1, 50);
        v5->event = (nw_endpoint_handler_event_s)327684;
        nw_endpoint_handler_report(v5, 0, &v5->event.domain, v35);

LABEL_85:
        v2 = v157;
        goto LABEL_86;
      }
      v26 = *((unsigned int *)v23 + 6);
      v27 = *((_DWORD *)v23 + 6);
      if (v26 >= v25 >> 3)
      {
        v39 = v5;
        v40 = *((_BYTE *)v39 + 268);

        if ((v40 & 0x20) == 0)
        {
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v41 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
          {
            v42 = v39;

            v43 = v42;
            v44 = *((_BYTE *)v39 + 268);

            if ((v44 & 1) != 0)
              v45 = "dry-run ";
            else
              v45 = "";
            v46 = nw_endpoint_handler_copy_endpoint(v43);
            logging_description = nw_endpoint_get_logging_description(v46);
            v152 = v45;
            id_str = v42->id_str;
            v48 = v43;
            v49 = v48;
            v50 = v5->state;
            if (v50 > 5)
              v51 = "unknown-state";
            else
              v51 = off_1E149FC48[v50];

            v55 = v49;
            v56 = v55;
            v57 = "path";
            switch(v3[29])
            {
              case 0u:
                break;
              case 1u:
                v57 = "resolver";
                break;
              case 2u:
                v57 = nw_endpoint_flow_mode_string(v55[31]);
                break;
              case 3u:
                v57 = "proxy";
                break;
              case 4u:
                v57 = "fallback";
                break;
              case 5u:
                v57 = "transform";
                break;
              default:
                v57 = "unknown-mode";
                break;
            }

            v70 = v56;
            os_unfair_lock_lock((os_unfair_lock_t)v70 + 28);
            v71 = v70[8];
            os_unfair_lock_unlock((os_unfair_lock_t)v70 + 28);

            *(_DWORD *)buf = 136448002;
            v166 = "nw_endpoint_proxy_start_next_child";
            v167 = 2082;
            v168 = id_str;
            v169 = 2082;
            v170 = v152;
            v171 = 2082;
            v172 = logging_description;
            v173 = 2082;
            v174 = v51;
            v175 = 2082;
            v176 = v57;
            v177 = 2114;
            v178 = v71;
            v179 = 1024;
            LODWORD(v180) = v27;
            _os_log_impl(&dword_182FBE000, v41, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] no child at index %u", buf, 0x4Eu);

          }
        }
        goto LABEL_85;
      }
      if (*((_QWORD *)v23 + 11))
      {
        nw_queue_cancel_source(*((_QWORD *)v23 + 11), v22);
        *((_QWORD *)v23 + 11) = 0;
        v27 = *((_DWORD *)v23 + 6);
        v24 = *((_QWORD *)v23 + 1);
      }
      *((_DWORD *)v23 + 6) = v27 + 1;
      nw_array_get_object_at_index(v24, v26);
      v28 = (NWConcrete_nw_endpoint_handler *)objc_claimAutoreleasedReturnValue();
      v29 = nw_endpoint_handler_copy_parameters(v28);
      v30 = v29;
      if (v29)
      {
        v31 = (id *)v29;
        v32 = v31[23];

        if (v32)
        {
          is_privacy_proxy = nw_proxy_config_is_privacy_proxy(v32, 0);
          v34 = nw_proxy_config_has_fallback_proxy_agent(v32) || nw_proxy_config_has_fallback_proxy_config(v32);
          v52 = nw_proxy_config_use_fast_fallback(v32);
        }
        else
        {
          v52 = 0;
          v34 = 0;
          is_privacy_proxy = 0;
        }

      }
      else
      {
        v52 = 0;
        v34 = 0;
        is_privacy_proxy = 0;
      }
      if ((*((_BYTE *)v23 + 96) & 1) != 0)
      {
        if (((is_privacy_proxy | ((*((_BYTE *)v23 + 96) & 8) >> 3)) & 1) == 0)
          goto LABEL_66;
        v59 = (*((_BYTE *)v23 + 96) & 0x18) != 0 ? is_privacy_proxy : 0;
        if ((v59 & 1) != 0)
          goto LABEL_66;
      }
      else if ((*((_BYTE *)v23 + 96) & 2) != 0)
      {
        v58 = v5;
        v58->privacy_stance = 3;

LABEL_66:
        nw_endpoint_handler_cancel(v28, 0, 1);
LABEL_67:

        goto LABEL_85;
      }
      v60 = (void *)*((_QWORD *)v23 + 10);
      *((_QWORD *)v23 + 10) = 0;

      *((_BYTE *)v23 + 97) &= 0xF3u;
      nw_endpoint_handler_start(v28);
      if (nw_endpoint_handler_get_mode(v5) != 3)
        goto LABEL_67;
      if (!(v34 | v52))
        goto LABEL_67;
      if ((*((_BYTE *)v23 + 97) & 8) != 0)
        goto LABEL_67;
      if (*((_QWORD *)v23 + 4))
        goto LABEL_67;
      v61 = *((_QWORD *)v23 + 1);
      if (!v61)
        goto LABEL_67;
      v62 = *((unsigned int *)v23 + 6);
      if (v62 >= (uint64_t)(*(_QWORD *)(v61 + 24) - *(_QWORD *)(v61 + 16)) >> 3)
        goto LABEL_67;
      nw_array_get_object_at_index(v61, v62);
      v63 = (NWConcrete_nw_endpoint_handler *)objc_claimAutoreleasedReturnValue();
      v64 = v63;
      if (!v63)
      {
LABEL_185:

        goto LABEL_67;
      }
      v65 = nw_endpoint_handler_copy_parameters(v63);
      v66 = v65;
      if (v65)
      {
        v67 = nw_parameters_copy_effective_proxy_config(v65);
        v68 = v67;
        if (v67)
          mode = nw_proxy_config_get_mode(v67);
        else
          mode = 4;

      }
      else
      {
        mode = 0;
      }
      v153 = v64;
      v155 = v66;
      if ((*((_BYTE *)v23 + 97) & 4) == 0)
      {
        v93 = &nw_setting_proxy_fast_failure_threshold;
        if (v52)
        {
          v94 = 2;
        }
        else
        {
          v93 = &nw_setting_proxy_failure_threshold;
          v94 = 5;
        }
        if ((int64_with_default = networkd_settings_get_int64_with_default(*v93, v94),
              nw_endpoint_proxy_get_success_count(v64))
          && (!nw_endpoint_proxy_get_success_count(v28)
           || int64_with_default < nw_endpoint_proxy_get_failure_count(v28))
          || (mode == 4 ? (v96 = v52) : (v96 = 0),
              v96 == 1 && int64_with_default < nw_endpoint_proxy_get_failure_count(v28)))
        {
          minimize_logging = nw_endpoint_handler_get_minimize_logging(v5);
          logging_disabled = nw_endpoint_handler_get_logging_disabled(v5);
          if (minimize_logging)
          {
            if ((logging_disabled & 1) != 0)
              goto LABEL_133;
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v99 = (id)gconnectionLogObj;
            if (os_log_type_enabled(v99, OS_LOG_TYPE_DEBUG))
            {
              id_string = nw_endpoint_handler_get_id_string(v5);
              v148 = nw_endpoint_handler_dry_run_string(v5);
              deltab = nw_endpoint_handler_copy_endpoint(v5);
              v139 = nw_endpoint_get_logging_description(deltab);
              v140 = nw_endpoint_handler_state_string(v5);
              v141 = nw_endpoint_handler_mode_string(v5);
              v142 = nw_endpoint_handler_copy_current_path(v5);
              *(_DWORD *)buf = 136447746;
              v166 = "nw_endpoint_proxy_start_next_child";
              v167 = 2082;
              v168 = (void *)id_string;
              v169 = 2082;
              v170 = v148;
              v171 = 2082;
              v172 = v139;
              v173 = 2082;
              v174 = v140;
              v175 = 2082;
              v176 = v141;
              v177 = 2114;
              v178 = v142;
              _os_log_impl(&dword_182FBE000, v99, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] starting next child endpoint immediately", buf, 0x48u);

            }
          }
          else
          {
            if ((logging_disabled & 1) != 0)
            {
LABEL_133:
              v105 = nw_endpoint_handler_copy_context(v5);
              v161[0] = MEMORY[0x1E0C809B0];
              v161[1] = 3221225472;
              v161[2] = ___ZL34nw_endpoint_proxy_start_next_childP30NWConcrete_nw_endpoint_handler_block_invoke;
              v161[3] = &unk_1E14ACFD0;
              v162 = v5;
              nw_queue_context_async(v105, v161);
              v106 = (id *)&v162;
LABEL_184:

              v64 = v153;
              goto LABEL_185;
            }
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v99 = (id)gconnectionLogObj;
            if (os_log_type_enabled(v99, OS_LOG_TYPE_INFO))
            {
              v100 = nw_endpoint_handler_get_id_string(v5);
              v145 = nw_endpoint_handler_dry_run_string(v5);
              deltaa = nw_endpoint_handler_copy_endpoint(v5);
              v101 = nw_endpoint_get_logging_description(deltaa);
              v102 = nw_endpoint_handler_state_string(v5);
              v103 = nw_endpoint_handler_mode_string(v5);
              v104 = nw_endpoint_handler_copy_current_path(v5);
              *(_DWORD *)buf = 136447746;
              v166 = "nw_endpoint_proxy_start_next_child";
              v167 = 2082;
              v168 = (void *)v100;
              v169 = 2082;
              v170 = v145;
              v171 = 2082;
              v172 = v101;
              v173 = 2082;
              v174 = v102;
              v175 = 2082;
              v176 = v103;
              v177 = 2114;
              v178 = v104;
              _os_log_impl(&dword_182FBE000, v99, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] starting next child endpoint immediately", buf, 0x48u);

            }
          }

          goto LABEL_133;
        }
      }
      if ((*((_BYTE *)v23 + 97) & 4) != 0)
        v107 = 0;
      else
        v107 = v52;
      delta = nw_endpoint_proxy_get_timeout_nanos(v28, v107);
      v108 = nw_endpoint_handler_get_minimize_logging(v5);
      v109 = nw_endpoint_handler_get_logging_disabled(v5);
      if (v108)
      {
        if ((v109 & 1) != 0)
        {
LABEL_144:
          v116 = nw_endpoint_handler_copy_context(v5);
          v158[0] = MEMORY[0x1E0C809B0];
          v158[1] = 3221225472;
          v158[2] = ___ZL34nw_endpoint_proxy_start_next_childP30NWConcrete_nw_endpoint_handler_block_invoke_153;
          v158[3] = &unk_1E14ACE68;
          v159 = v23;
          v160 = v5;
          *((_QWORD *)v23 + 11) = nw_queue_context_create_source(v116, 2, 3, 0, v158, 0);

          v117 = *((_QWORD *)v23 + 11);
          if (v117)
          {
            v118 = dispatch_time(0x8000000000000000, delta);
            nw_queue_set_timer_values(v117, v118, 0xFFFFFFFFFFFFFFFFLL, 0xF4240uLL);
            nw_queue_activate_source(*((_QWORD *)v23 + 11), v119);
LABEL_183:
            v106 = (id *)&v159;
            v105 = v160;
            goto LABEL_184;
          }
          __nwlog_obj();
          v120 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 136446210;
          v166 = "nw_endpoint_proxy_start_next_child";
          v121 = (char *)_os_log_send_and_compose_impl();

          type = OS_LOG_TYPE_ERROR;
          v163 = 0;
          if (__nwlog_fault(v121, &type, &v163))
          {
            if (type == OS_LOG_TYPE_FAULT)
            {
              __nwlog_obj();
              v122 = objc_claimAutoreleasedReturnValue();
              v123 = type;
              if (os_log_type_enabled(v122, type))
              {
                *(_DWORD *)buf = 136446210;
                v166 = "nw_endpoint_proxy_start_next_child";
                _os_log_impl(&dword_182FBE000, v122, v123, "%{public}s nw_queue_context_create_source(timer) failed", buf, 0xCu);
              }
            }
            else
            {
              if (v163)
              {
                v127 = (char *)__nw_create_backtrace_string();
                __nwlog_obj();
                v128 = objc_claimAutoreleasedReturnValue();
                v129 = type;
                v130 = os_log_type_enabled(v128, type);
                if (v127)
                {
                  if (v130)
                  {
                    *(_DWORD *)buf = 136446466;
                    v166 = "nw_endpoint_proxy_start_next_child";
                    v167 = 2082;
                    v168 = v127;
                    _os_log_impl(&dword_182FBE000, v128, v129, "%{public}s nw_queue_context_create_source(timer) failed, dumping backtrace:%{public}s", buf, 0x16u);
                  }

                  free(v127);
                }
                else
                {
                  if (v130)
                  {
                    *(_DWORD *)buf = 136446210;
                    v166 = "nw_endpoint_proxy_start_next_child";
                    _os_log_impl(&dword_182FBE000, v128, v129, "%{public}s nw_queue_context_create_source(timer) failed, no backtrace", buf, 0xCu);
                  }

                }
                goto LABEL_181;
              }
              __nwlog_obj();
              v122 = objc_claimAutoreleasedReturnValue();
              v132 = type;
              if (os_log_type_enabled(v122, type))
              {
                *(_DWORD *)buf = 136446210;
                v166 = "nw_endpoint_proxy_start_next_child";
                _os_log_impl(&dword_182FBE000, v122, v132, "%{public}s nw_queue_context_create_source(timer) failed, backtrace limit exceeded", buf, 0xCu);
              }
            }

          }
LABEL_181:
          if (v121)
            free(v121);
          goto LABEL_183;
        }
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v110 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v110, OS_LOG_TYPE_DEBUG))
        {
          v133 = nw_endpoint_handler_get_id_string(v5);
          v144 = nw_endpoint_handler_dry_run_string(v5);
          v147 = nw_endpoint_handler_copy_endpoint(v5);
          v134 = nw_endpoint_get_logging_description(v147);
          v135 = nw_endpoint_handler_state_string(v5);
          v136 = nw_endpoint_handler_mode_string(v5);
          v137 = nw_endpoint_handler_copy_current_path(v5);
          *(_DWORD *)buf = 136448002;
          v166 = "nw_endpoint_proxy_start_next_child";
          v167 = 2082;
          v168 = (void *)v133;
          v169 = 2082;
          v170 = v144;
          v171 = 2082;
          v172 = v134;
          v173 = 2082;
          v174 = v135;
          v175 = 2082;
          v176 = v136;
          v177 = 2114;
          v178 = v137;
          v179 = 2048;
          v180 = delta / 0xF4240;
          _os_log_impl(&dword_182FBE000, v110, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] starting next child endpoint in %llums", buf, 0x52u);

        }
      }
      else
      {
        if ((v109 & 1) != 0)
          goto LABEL_144;
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v110 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v110, OS_LOG_TYPE_INFO))
        {
          v146 = nw_endpoint_handler_get_id_string(v5);
          v143 = nw_endpoint_handler_dry_run_string(v5);
          v111 = nw_endpoint_handler_copy_endpoint(v5);
          v112 = nw_endpoint_get_logging_description(v111);
          v113 = nw_endpoint_handler_state_string(v5);
          v114 = nw_endpoint_handler_mode_string(v5);
          v115 = nw_endpoint_handler_copy_current_path(v5);
          *(_DWORD *)buf = 136448002;
          v166 = "nw_endpoint_proxy_start_next_child";
          v167 = 2082;
          v168 = (void *)v146;
          v169 = 2082;
          v170 = v143;
          v171 = 2082;
          v172 = v112;
          v173 = 2082;
          v174 = v113;
          v175 = 2082;
          v176 = v114;
          v177 = 2114;
          v178 = v115;
          v179 = 2048;
          v180 = delta / 0xF4240;
          _os_log_impl(&dword_182FBE000, v110, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] starting next child endpoint in %llums", buf, 0x52u);

        }
      }

      goto LABEL_144;
    }
    __nwlog_obj();
    v88 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v166 = "nw_endpoint_proxy_start_next_child";
    v89 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v163 = 0;
    if (__nwlog_fault(v89, &type, &v163))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v90 = objc_claimAutoreleasedReturnValue();
        v91 = type;
        if (os_log_type_enabled(v90, type))
        {
          *(_DWORD *)buf = 136446210;
          v166 = "nw_endpoint_proxy_start_next_child";
          _os_log_impl(&dword_182FBE000, v90, v91, "%{public}s called with null endpoint_proxy", buf, 0xCu);
        }
      }
      else if (v163)
      {
        v124 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v90 = objc_claimAutoreleasedReturnValue();
        v125 = type;
        v126 = os_log_type_enabled(v90, type);
        if (v124)
        {
          if (v126)
          {
            *(_DWORD *)buf = 136446466;
            v166 = "nw_endpoint_proxy_start_next_child";
            v167 = 2082;
            v168 = v124;
            _os_log_impl(&dword_182FBE000, v90, v125, "%{public}s called with null endpoint_proxy, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v124);
          goto LABEL_176;
        }
        if (v126)
        {
          *(_DWORD *)buf = 136446210;
          v166 = "nw_endpoint_proxy_start_next_child";
          _os_log_impl(&dword_182FBE000, v90, v125, "%{public}s called with null endpoint_proxy, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v90 = objc_claimAutoreleasedReturnValue();
        v131 = type;
        if (os_log_type_enabled(v90, type))
        {
          *(_DWORD *)buf = 136446210;
          v166 = "nw_endpoint_proxy_start_next_child";
          _os_log_impl(&dword_182FBE000, v90, v131, "%{public}s called with null endpoint_proxy, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_176:
    if (v89)
      free(v89);
    goto LABEL_85;
  }
  if (nw_endpoint_handler_get_minimize_logging(v5))
  {
    if ((nw_endpoint_handler_get_logging_disabled(v5) & 1) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v79 = v2;
      v80 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v80, OS_LOG_TYPE_DEBUG))
      {
        v81 = nw_endpoint_handler_get_id_string(v5);
        v82 = nw_endpoint_handler_dry_run_string(v5);
        v83 = nw_endpoint_handler_copy_endpoint(v5);
        v84 = nw_endpoint_get_logging_description(v83);
        v85 = nw_endpoint_handler_state_string(v5);
        v86 = nw_endpoint_handler_mode_string(v5);
        v87 = nw_endpoint_handler_copy_current_path(v5);
        *(_DWORD *)buf = 136447746;
        v166 = "nw_endpoint_proxy_start_next_child";
        v167 = 2082;
        v168 = (void *)v81;
        v169 = 2082;
        v170 = v82;
        v171 = 2082;
        v172 = v84;
        v173 = 2082;
        v174 = v85;
        v175 = 2082;
        v176 = v86;
        v177 = 2114;
        v178 = v87;
        _os_log_impl(&dword_182FBE000, v80, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] not starting next child", buf, 0x48u);

      }
      v2 = v79;
    }
  }
  else
  {
    v7 = v5;
    v8 = *((_BYTE *)v7 + 268);

    if ((v8 & 0x20) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v9 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        v10 = v7;

        v11 = v10;
        v12 = *((_BYTE *)v7 + 268);

        if ((v12 & 1) != 0)
          v13 = "dry-run ";
        else
          v13 = "";
        v14 = nw_endpoint_handler_copy_endpoint(v11);
        v156 = nw_endpoint_get_logging_description(v14);
        v15 = v10->id_str;
        v16 = v11;
        v17 = v16;
        v18 = v5->state;
        if (v18 > 5)
          v19 = "unknown-state";
        else
          v19 = off_1E149FC48[v18];

        v36 = v17;
        v37 = v36;
        v38 = "path";
        switch(v3[29])
        {
          case 0u:
            break;
          case 1u:
            v38 = "resolver";
            break;
          case 2u:
            v38 = nw_endpoint_flow_mode_string(v36[31]);
            break;
          case 3u:
            v38 = "proxy";
            break;
          case 4u:
            v38 = "fallback";
            break;
          case 5u:
            v38 = "transform";
            break;
          default:
            v38 = "unknown-mode";
            break;
        }

        v53 = v37;
        os_unfair_lock_lock((os_unfair_lock_t)v53 + 28);
        v54 = v53[8];
        os_unfair_lock_unlock((os_unfair_lock_t)v53 + 28);

        *(_DWORD *)buf = 136447746;
        v166 = "nw_endpoint_proxy_start_next_child";
        v167 = 2082;
        v168 = v15;
        v169 = 2082;
        v170 = v13;
        v171 = 2082;
        v172 = v156;
        v173 = 2082;
        v174 = v19;
        v175 = 2082;
        v176 = v38;
        v177 = 2114;
        v178 = v54;
        _os_log_impl(&dword_182FBE000, v9, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] not starting next child", buf, 0x48u);

      }
LABEL_30:

    }
  }
LABEL_86:

}

void sub_1835EDCFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, void *a17)
{
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

uint64_t nw_endpoint_proxy_get_success_count(NWConcrete_nw_endpoint_handler *a1)
{
  NWConcrete_nw_endpoint_handler *v1;
  NWConcrete_nw_endpoint_handler *v2;
  id *v3;
  id v4;
  unsigned int *cached_content_for_protocol;
  uint64_t v6;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  char *backtrace_string;
  os_log_type_t v13;
  _BOOL4 v14;
  os_log_type_t v15;
  char v16;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = v1;
    nw_endpoint_handler_initialize_association(v3);
    v4 = v3[7];

    if (!v4)
      goto LABEL_7;
    if (nw_protocol_copy_proxy_definition(void)::onceToken != -1)
      dispatch_once(&nw_protocol_copy_proxy_definition(void)::onceToken, &__block_literal_global_26363);
    cached_content_for_protocol = (unsigned int *)nw_association_get_cached_content_for_protocol(v4, (void *)nw_protocol_copy_proxy_definition(void)::proxy_definition);
    if (cached_content_for_protocol)
      v6 = *cached_content_for_protocol;
    else
LABEL_7:
      v6 = 0;

    goto LABEL_9;
  }
  __nwlog_obj();
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v19 = "nw_endpoint_proxy_get_success_count";
  v9 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v16 = 0;
  if (__nwlog_fault(v9, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_endpoint_proxy_get_success_count";
        _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null child_handler", buf, 0xCu);
      }
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      v14 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          v19 = "nw_endpoint_proxy_get_success_count";
          v20 = 2082;
          v21 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null child_handler, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_26;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_endpoint_proxy_get_success_count";
        _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null child_handler, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_endpoint_proxy_get_success_count";
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null child_handler, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_26:
  if (v9)
    free(v9);
  v6 = 0;
LABEL_9:

  return v6;
}

void sub_1835EE170(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t nw_endpoint_proxy_get_failure_count(NWConcrete_nw_endpoint_handler *a1)
{
  NWConcrete_nw_endpoint_handler *v1;
  NWConcrete_nw_endpoint_handler *v2;
  id *v3;
  id v4;
  uint64_t cached_content_for_protocol;
  uint64_t v6;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  char *backtrace_string;
  os_log_type_t v13;
  _BOOL4 v14;
  os_log_type_t v15;
  char v16;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = v1;
    nw_endpoint_handler_initialize_association(v3);
    v4 = v3[7];

    if (!v4)
      goto LABEL_7;
    if (nw_protocol_copy_proxy_definition(void)::onceToken != -1)
      dispatch_once(&nw_protocol_copy_proxy_definition(void)::onceToken, &__block_literal_global_26363);
    cached_content_for_protocol = nw_association_get_cached_content_for_protocol(v4, (void *)nw_protocol_copy_proxy_definition(void)::proxy_definition);
    if (cached_content_for_protocol)
      v6 = *(unsigned int *)(cached_content_for_protocol + 4);
    else
LABEL_7:
      v6 = 0;

    goto LABEL_9;
  }
  __nwlog_obj();
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v19 = "nw_endpoint_proxy_get_failure_count";
  v9 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v16 = 0;
  if (__nwlog_fault(v9, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_endpoint_proxy_get_failure_count";
        _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null child_handler", buf, 0xCu);
      }
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      v14 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          v19 = "nw_endpoint_proxy_get_failure_count";
          v20 = 2082;
          v21 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null child_handler, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_26;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_endpoint_proxy_get_failure_count";
        _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null child_handler, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_endpoint_proxy_get_failure_count";
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null child_handler, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_26:
  if (v9)
    free(v9);
  v6 = 0;
LABEL_9:

  return v6;
}

void sub_1835EE48C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t ___ZL34nw_endpoint_proxy_start_next_childP30NWConcrete_nw_endpoint_handler_block_invoke(uint64_t a1)
{
  return nw_endpoint_proxy_start_next_child(*(NWConcrete_nw_endpoint_handler **)(a1 + 32));
}

unint64_t nw_endpoint_proxy_get_timeout_nanos(NWConcrete_nw_endpoint_handler *a1, int a2)
{
  NWConcrete_nw_endpoint_handler *v3;
  char **v4;
  int64_t v5;
  int64_t int64_with_default;
  unint64_t v7;
  int64_t v8;

  v3 = a1;
  v4 = &nw_setting_proxy_fast_rtt_delay_factor;
  if (a2)
  {
    v5 = 1;
  }
  else
  {
    v4 = &nw_setting_proxy_rtt_delay_factor;
    v5 = 4;
  }
  int64_with_default = networkd_settings_get_int64_with_default(*v4, v5);
  if (v3)
  {
    v7 = nw_endpoint_handler_get_child_timeout_nanos(v3) * int64_with_default;
    if (!a2)
      goto LABEL_8;
  }
  else
  {
    v7 = 250000000 * int64_with_default;
    if (!a2)
      goto LABEL_8;
  }
  v8 = networkd_settings_get_int64_with_default((const char *)nw_setting_proxy_fast_max_delay_ms, 10000);
  if (v7 >= 1000000 * v8)
    v7 = 1000000 * v8;
LABEL_8:

  return v7;
}

void sub_1835EE564(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZL34nw_endpoint_proxy_start_next_childP30NWConcrete_nw_endpoint_handler_block_invoke_153(uint64_t a1)
{
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 100) |= 1u;
  return nw_endpoint_proxy_start_next_child(*(NWConcrete_nw_endpoint_handler **)(a1 + 40));
}

void ___ZL33nw_protocol_copy_proxy_definitionv_block_invoke()
{
  NWConcrete_nw_protocol_definition *named;
  void *v1;

  named = nw_protocol_definition_create_named(1, 0);
  v1 = (void *)nw_protocol_copy_proxy_definition(void)::proxy_definition;
  nw_protocol_copy_proxy_definition(void)::proxy_definition = (uint64_t)named;

  nw_protocol_definition_set_cache_entry_deallocator((void *)nw_protocol_copy_proxy_definition(void)::proxy_definition, nw_proxy_deallocate_cache_entry);
  nw_protocol_definition_set_should_flush_cache_entry((void *)nw_protocol_copy_proxy_definition(void)::proxy_definition, nw_proxy_should_flush_cache_entry);
}

void nw_proxy_deallocate_cache_entry(int a1, void *a2)
{
  if (a2)
    free(a2);
}

size_t nw_proxy_should_flush_cache_entry(uint64_t a1, uint64_t a2, char a3, void *a4, void *a5)
{
  id v7;
  id v8;
  void *v9;
  size_t v10;

  v7 = a4;
  v8 = a5;
  v9 = v8;
  if ((a3 & 1) != 0)
    v10 = 1;
  else
    v10 = nw_path_signature_changed_from_previous(v8, v7);

  return v10;
}

void sub_1835EE64C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void ___ZL38nw_endpoint_proxy_add_child_for_configP30NWConcrete_nw_endpoint_handlerPU29objcproto18OS_nw_proxy_config8NSObjectS3__block_invoke(uint64_t a1, void *a2)
{
  NWConcrete_nw_protocol_options *v3;
  NWConcrete_nw_protocol_options *options_from_serializable;
  NSObject *v5;
  void *v6;
  NWConcrete_nw_protocol_options *v7;
  _QWORD v8[3];

  v8[2] = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (nw_protocol_options_is_serializable_tls(v3))
  {
    v8[0] = 0;
    v8[1] = 0;
    options_from_serializable = nw_tls_create_options_from_serializable(v3, (uint64_t)v8, 0);

    v3 = options_from_serializable;
  }
  if (nw_protocol_options_is_tls(v3)
    && nw_parameters_get_should_trust_invalid_certificates(*(void **)(a1 + 32)))
  {
    v5 = v3;
    sec_protocol_options_set_peer_authentication_required(v5, 0);

  }
  v6 = *(void **)(a1 + 40);
  v7 = nw_protocol_options_copy(v3);
  nw_protocol_stack_append_application_protocol(v6, v7);

}

void sub_1835EE738(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL nw_endpoint_proxy_receive_report(void *a1, uint64_t a2, int a3, _WORD *a4, void *a5, void *a6)
{
  NWConcrete_nw_endpoint_handler *v9;
  id v10;
  unsigned int *v11;
  uint64_t v12;
  unsigned int *v13;
  char v14;
  NSObject *v15;
  NWConcrete_nw_endpoint_handler *v16;
  NWConcrete_nw_endpoint_handler *v17;
  char v18;
  const char *v19;
  const char *logging_description;
  unsigned int *v21;
  unsigned int *v22;
  uint64_t v23;
  const char *v24;
  NSObject *v25;
  const char *v26;
  uint64_t v27;
  void **v28;
  const char *v29;
  void **v30;
  id v31;
  id v32;
  const char *id_string;
  const char *v34;
  nw_endpoint_t v35;
  const char *v36;
  const char *v37;
  char *id_str;
  const char *v39;
  const char *v40;
  id v41;
  NWConcrete_nw_endpoint_mode_handler *v42;
  id *v43;
  _DWORD *v44;
  int v45;
  NSObject *v46;
  NSObject *v47;
  NWConcrete_nw_endpoint_handler *v48;
  _DWORD *v49;
  id v50;
  id *v51;
  void *v52;
  unsigned __int8 *v53;
  unsigned int v54;
  unsigned __int8 *v55;
  unsigned __int8 *v56;
  unsigned int v57;
  unsigned __int8 *v58;
  int v59;
  int v60;
  int v61;
  NWConcrete_nw_endpoint_handler *v62;
  NWConcrete_nw_endpoint_handler *v63;
  NWConcrete_nw_endpoint_handler *v64;
  uint64_t v65;
  BOOL v66;
  id *v67;
  id *v68;
  id *v69;
  BOOL v70;
  unsigned __int8 *v71;
  unsigned int v72;
  unsigned __int8 *v73;
  int v74;
  char v75;
  NWConcrete_nw_endpoint_handler *v76;
  int privacy_stance;
  NWConcrete_nw_endpoint_handler *v78;
  _BOOL4 v79;
  NSObject *v80;
  const char *v81;
  const char *v82;
  nw_endpoint_t v83;
  const char *v84;
  const char *v85;
  const char *v86;
  id v87;
  const char *v88;
  NWConcrete_nw_endpoint_handler *v89;
  id v90;
  NWConcrete_nw_endpoint_handler *v91;
  NWConcrete_nw_endpoint_handler *v92;
  int v93;
  int minimize_logging;
  char logging_disabled;
  NSObject *v96;
  const char *v97;
  const char *v98;
  nw_endpoint_t v99;
  const char *v100;
  const char *v101;
  const char *v102;
  id v103;
  NWConcrete_nw_endpoint_handler *v104;
  id v105;
  uint64_t v106;
  int v107;
  char v108;
  uint64_t v109;
  NSObject *v110;
  const char *v111;
  const char *v112;
  nw_endpoint_t v113;
  const char *v114;
  const char *v115;
  const char *v116;
  id v117;
  uint64_t v118;
  int v119;
  char v120;
  NSObject *v121;
  const char *v122;
  const char *v123;
  nw_endpoint_t v124;
  const char *v125;
  const char *v126;
  const char *v127;
  id v128;
  const char *v129;
  const char *v130;
  nw_endpoint_t v131;
  const char *v132;
  const char *v133;
  const char *v134;
  id v135;
  int v136;
  char v137;
  NSObject *v138;
  const char *v139;
  const char *v140;
  nw_endpoint_t v141;
  const char *v142;
  const char *v143;
  const char *v144;
  id v145;
  uint64_t v146;
  dispatch_time_t v147;
  uint64_t v148;
  NWConcrete_nw_endpoint_handler **v149;
  NWConcrete_nw_endpoint_handler **v150;
  NSObject *v151;
  _QWORD *v152;
  void *v153;
  BOOL v154;
  _QWORD *v155;
  NSObject *v156;
  id v157;
  uint64_t cached_content_for_protocol;
  NSObject *v159;
  const char *v160;
  const char *v161;
  const char *v162;
  const char *v163;
  id v164;
  id v165;
  time_t v166;
  NWConcrete_nw_endpoint_handler *v167;
  uint64_t v168;
  uint64_t isa;
  unsigned __int8 *v170;
  uint64_t v171;
  NWConcrete_nw_endpoint_handler **v172;
  NWConcrete_nw_endpoint_handler **v173;
  _BOOL8 v174;
  uint64_t *v175;
  void *v176;
  NSObject *v177;
  int error_code;
  nw_error_domain_t error_domain;
  int v180;
  NWConcrete_nw_endpoint_handler *v181;
  _BOOL4 v182;
  NSObject *v183;
  const char *v184;
  const char *v185;
  nw_endpoint_t v186;
  const char *v187;
  const char *v188;
  const char *v189;
  id v190;
  _BOOL8 result;
  int v192;
  char v193;
  NSObject *v194;
  const char *v195;
  const char *v196;
  nw_endpoint_t v197;
  const char *v198;
  const char *v199;
  const char *v200;
  id v201;
  const char *v202;
  int v203;
  int v204;
  uint64_t v205;
  uint64_t v206;
  _BOOL4 has_unresolved_proxies;
  int v208;
  char v209;
  const char *v210;
  const char *v211;
  nw_endpoint_t v212;
  const char *v213;
  const char *v214;
  const char *v215;
  id v216;
  int v217;
  char v218;
  NSObject *v219;
  const char *v220;
  const char *v221;
  nw_endpoint_t v222;
  const char *v223;
  const char *v224;
  const char *v225;
  id v226;
  int v227;
  char v228;
  NSObject *v229;
  const char *v230;
  const char *v231;
  nw_endpoint_t v232;
  const char *v233;
  const char *v234;
  const char *v235;
  id v236;
  const char *v237;
  const char *v238;
  nw_endpoint_t v239;
  const char *v240;
  const char *v241;
  const char *v242;
  id v243;
  int v244;
  char v245;
  const char *v246;
  const char *v247;
  nw_endpoint_t v248;
  const char *v249;
  const char *v250;
  const char *v251;
  id v252;
  int v253;
  char v254;
  int v255;
  int v256;
  char v257;
  NSObject *v258;
  const char *v259;
  const char *v260;
  nw_endpoint_t v261;
  const char *v262;
  const char *v263;
  const char *v264;
  id v265;
  char v266;
  const char *v267;
  const char *v268;
  int v269;
  char v270;
  const char *v271;
  const char *v272;
  nw_endpoint_t v273;
  const char *v274;
  const char *v275;
  const char *v276;
  id v277;
  char v278;
  const char *v279;
  const char *v280;
  NWConcrete_nw_endpoint_handler *v281;
  int v282;
  char v283;
  NSObject *v284;
  const char *v285;
  const char *v286;
  nw_endpoint_t v287;
  const char *v288;
  const char *v289;
  const char *v290;
  id v291;
  char v292;
  const char *v293;
  const char *v294;
  NSObject *v295;
  const char *v296;
  const char *v297;
  nw_endpoint_t v298;
  const char *v299;
  const char *v300;
  const char *v301;
  id v302;
  char v303;
  const char *v304;
  const char *v305;
  void *v306;
  char *v307;
  NSObject *v308;
  os_log_type_t v309;
  NWConcrete_nw_endpoint_handler *v310;
  int v311;
  char *backtrace_string;
  os_log_type_t v313;
  _BOOL4 v314;
  os_log_type_t v315;
  NWConcrete_nw_endpoint_handler *v316;
  const char *v317;
  const char *v318;
  nw_endpoint_t v319;
  const char *v320;
  const char *v321;
  const char *v322;
  id v323;
  const char *v324;
  const char *v325;
  nw_endpoint_t v326;
  const char *v327;
  const char *v328;
  const char *v329;
  id v330;
  const char *v331;
  const char *v332;
  nw_endpoint_t v333;
  const char *v334;
  const char *v335;
  const char *v336;
  id v337;
  const char *v338;
  const char *v339;
  nw_endpoint_t v340;
  const char *v341;
  const char *v342;
  const char *v343;
  id v344;
  const char *v345;
  const char *v346;
  nw_endpoint_t v347;
  const char *v348;
  const char *v349;
  const char *v350;
  id v351;
  const char *v352;
  const char *v353;
  nw_endpoint_t v354;
  const char *v355;
  const char *v356;
  const char *v357;
  id v358;
  const char *v359;
  const char *v360;
  nw_endpoint_t v361;
  const char *v362;
  const char *v363;
  const char *v364;
  id v365;
  const char *v366;
  nw_endpoint_t v367;
  const char *v368;
  const char *v369;
  const char *v370;
  id v371;
  const char *v372;
  const char *v373;
  nw_endpoint_t v374;
  const char *v375;
  const char *v376;
  const char *v377;
  id v378;
  const char *v379;
  const char *v380;
  nw_endpoint_t v381;
  const char *v382;
  const char *v383;
  const char *v384;
  id v385;
  const char *v386;
  const char *v387;
  nw_endpoint_t v388;
  const char *v389;
  const char *v390;
  const char *v391;
  id v392;
  const char *v393;
  const char *v394;
  const char *v395;
  nw_endpoint_t v396;
  const char *v397;
  const char *v398;
  const char *v399;
  id v400;
  char v401;
  const char *v402;
  const char *v403;
  const char *v404;
  const char *v405;
  nw_endpoint_t v406;
  const char *v407;
  const char *v408;
  const char *v409;
  id v410;
  NSObject *v411;
  void *v412;
  const char *v413;
  const char *v414;
  nw_endpoint_t v415;
  const char *v416;
  const char *v417;
  const char *v418;
  id v419;
  char v420;
  const char *v421;
  const char *v422;
  const char *v423;
  nw_endpoint_t v424;
  const char *v425;
  const char *v426;
  const char *v427;
  id v428;
  char v429;
  const char *v430;
  const char *v431;
  const char *v432;
  const char *v433;
  nw_endpoint_t v434;
  const char *v435;
  const char *v436;
  const char *v437;
  id v438;
  char v439;
  const char *v440;
  const char *v441;
  NWConcrete_nw_endpoint_handler *v442;
  NWConcrete_nw_endpoint_handler *v443;
  NSObject *v444;
  const char *v445;
  NSObject *v446;
  unint64_t timeout_nanos;
  const char *v448;
  uint64_t v449;
  void *v450;
  int v451;
  const char *v452;
  _BOOL4 v453;
  const char *v454;
  const char *v455;
  void *v456;
  const char *v457;
  int v458;
  nw_endpoint_t v459;
  nw_endpoint_t v460;
  id v461;
  id obja;
  int v464;
  os_log_t v465;
  NSObject *v466;
  const char *v467;
  NSObject *log;
  os_log_t loga;
  NWConcrete_nw_endpoint_handler *v471;
  id v472;
  void *v473;
  NWConcrete_nw_endpoint_handler *v474;
  _QWORD v475[4];
  NSObject *v476;
  NWConcrete_nw_endpoint_handler *v477;
  char v478;
  unsigned __int8 uu[16];
  uint8_t buf[4];
  const char *v481;
  __int16 v482;
  uint64_t v483;
  __int16 v484;
  uint64_t v485;
  __int16 v486;
  const char *v487;
  __int16 v488;
  const char *v489;
  __int16 v490;
  const char *v491;
  __int16 v492;
  id v493;
  __int16 v494;
  _BYTE v495[38];
  __int16 v496;
  const char *v497;
  __int16 v498;
  id v499;
  uint64_t v500;

  v500 = *MEMORY[0x1E0C80C00];
  v9 = a1;
  v472 = a5;
  v10 = a6;
  v473 = v10;
  v474 = v9;
  if (!v10)
  {
    __nwlog_obj();
    v306 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v481 = "nw_endpoint_proxy_receive_report";
    v307 = (char *)_os_log_send_and_compose_impl();

    uu[0] = 16;
    v478 = 0;
    if (__nwlog_fault(v307, uu, &v478))
    {
      if (uu[0] == 17)
      {
        __nwlog_obj();
        v308 = objc_claimAutoreleasedReturnValue();
        v309 = uu[0];
        if (os_log_type_enabled(v308, (os_log_type_t)uu[0]))
        {
          *(_DWORD *)buf = 136446210;
          v481 = "nw_endpoint_proxy_receive_report";
          _os_log_impl(&dword_182FBE000, v308, v309, "%{public}s called with null handler", buf, 0xCu);
        }
      }
      else if (v478)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v308 = objc_claimAutoreleasedReturnValue();
        v313 = uu[0];
        v314 = os_log_type_enabled(v308, (os_log_type_t)uu[0]);
        if (backtrace_string)
        {
          if (v314)
          {
            *(_DWORD *)buf = 136446466;
            v481 = "nw_endpoint_proxy_receive_report";
            v482 = 2082;
            v483 = (uint64_t)backtrace_string;
            _os_log_impl(&dword_182FBE000, v308, v313, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_355;
        }
        if (v314)
        {
          *(_DWORD *)buf = 136446210;
          v481 = "nw_endpoint_proxy_receive_report";
          _os_log_impl(&dword_182FBE000, v308, v313, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v308 = objc_claimAutoreleasedReturnValue();
        v315 = uu[0];
        if (os_log_type_enabled(v308, (os_log_type_t)uu[0]))
        {
          *(_DWORD *)buf = 136446210;
          v481 = "nw_endpoint_proxy_receive_report";
          _os_log_impl(&dword_182FBE000, v308, v315, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_355:
    if (v307)
      free(v307);
    goto LABEL_18;
  }
  v11 = (unsigned int *)v10;
  v12 = v11[29];

  if ((_DWORD)v12 != 3)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v25 = (id)gLogObj;
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      if (v12 > 5)
        v26 = "unknown-mode";
      else
        v26 = off_1E149FC18[v12];
      *(_DWORD *)buf = 136446722;
      v481 = "nw_endpoint_proxy_receive_report";
      v482 = 2082;
      v483 = (uint64_t)v26;
      v484 = 2082;
      v485 = (uint64_t)"proxy";
      _os_log_impl(&dword_182FBE000, v25, OS_LOG_TYPE_DEFAULT, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
    }

LABEL_18:
    v27 = 0;
LABEL_219:

    return v27;
  }
  v13 = v11;
  v14 = *((_BYTE *)v13 + 268);
  v471 = (NWConcrete_nw_endpoint_handler *)v13;

  v464 = a3;
  if ((v14 & 0x20) == 0)
  {
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v15 = (id)gconnectionLogObj;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
    {
      log = v15;
      v16 = v471;

      v17 = v16;
      v18 = *((_BYTE *)v471 + 268);

      if ((v18 & 1) != 0)
        v19 = "dry-run ";
      else
        v19 = "";
      v460 = nw_endpoint_handler_copy_endpoint(v17);
      logging_description = nw_endpoint_get_logging_description(v460);
      v21 = v17;
      v22 = v21;
      v23 = v21[30];
      if (v23 > 5)
        v24 = "unknown-state";
      else
        v24 = off_1E149FC48[v23];
      v455 = v24;

      v28 = v22;
      v457 = logging_description;
      v29 = "path";
      switch(v11[29])
      {
        case 0u:
          break;
        case 1u:
          v29 = "resolver";
          break;
        case 2u:
          v29 = nw_endpoint_flow_mode_string(v28[31]);
          break;
        case 3u:
          v29 = "proxy";
          break;
        case 4u:
          v29 = "fallback";
          break;
        case 5u:
          v29 = "transform";
          break;
        default:
          v29 = "unknown-mode";
          break;
      }
      v452 = v29;

      v30 = v28;
      os_unfair_lock_lock((os_unfair_lock_t)v30 + 28);
      v31 = v30[8];
      os_unfair_lock_unlock((os_unfair_lock_t)v30 + 28);

      v32 = v31;
      id_string = nw_endpoint_handler_get_id_string(v9);
      v34 = nw_endpoint_handler_dry_run_string(v9);
      v35 = nw_endpoint_handler_copy_endpoint(v9);
      v36 = v19;
      v450 = a5;
      v37 = nw_endpoint_get_logging_description(v35);
      id_str = v16->id_str;
      v39 = nw_endpoint_handler_state_string(v474);
      v40 = nw_endpoint_handler_mode_string(v474);
      v41 = nw_endpoint_handler_copy_current_path(v474);
      *(_DWORD *)buf = 136449282;
      v481 = "nw_endpoint_proxy_receive_report";
      v482 = 2082;
      v483 = (uint64_t)id_str;
      v484 = 2082;
      v485 = (uint64_t)v36;
      v486 = 2082;
      v487 = v457;
      v488 = 2082;
      v489 = v455;
      v490 = 2082;
      v491 = v452;
      v492 = 2114;
      v493 = v32;
      v494 = 2082;
      *(_QWORD *)v495 = id_string;
      *(_WORD *)&v495[8] = 2082;
      *(_QWORD *)&v495[10] = v34;
      *(_WORD *)&v495[18] = 2082;
      *(_QWORD *)&v495[20] = v37;
      *(_WORD *)&v495[28] = 2082;
      *(_QWORD *)&v495[30] = v39;
      v496 = 2082;
      v497 = v40;
      v498 = 2114;
      v499 = v41;
      v15 = log;
      _os_log_impl(&dword_182FBE000, log, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] received child report: [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] ", buf, 0x84u);

      a5 = v450;
    }

    v9 = v474;
    a3 = v464;
  }
  v42 = nw_endpoint_handler_copy_proxy(v471);
  v43 = (id *)((char *)v42 + 32);
  loga = (os_log_t)v42;
  if (*((NWConcrete_nw_endpoint_handler **)v42 + 4) == v9)
  {
    nw_endpoint_handler_report(v471, v9, a4, v472);
    v48 = v471;
    v48->state = a3;

    nw_endpoint_handler_report(v48, 0, a4, 0);
LABEL_218:

    v27 = 1;
    goto LABEL_219;
  }
  if (a4 && v472 && (*a4 & 0xFFFE) == 2)
  {
    v44 = v472;
    v45 = v44[2];

    if (v45 == 2)
    {
      v46 = nw_endpoint_handler_copy_current_path(v474);
      v47 = v46;
      if (v46
        && nw_path_has_dns(v46)
        && (nw_path_has_ipv4(v47)
         || nw_path_is_eligible_for_CrazyIvan46(v47) && nw_path_has_nat64_prefixes(v47)))
      {
        objc_storeStrong((id *)v42 + 10, a5);
      }
    }
    else
    {
      v49 = v44;
      v47 = *((_QWORD *)v42 + 10);
      *((_QWORD *)v42 + 10) = v49;
    }

    v9 = v474;
    a3 = v464;
  }
  memset(uu, 0, sizeof(uu));
  v50 = nw_endpoint_handler_copy_parameters(v9);
  v456 = v50;
  if (v50)
  {
    v51 = (id *)v50;
    v461 = v51[23];

    v52 = v461;
    if (v461)
    {
      v53 = (unsigned __int8 *)v461;
      v55 = v53 + 170;
      v54 = v53[170];

      v56 = v53;
      v57 = *v55;

      v58 = v56;
      *(_OWORD *)uu = *(_OWORD *)(v58 + 56);

      v59 = (v54 >> 1) & 1;
      if (v59)
      {
        if ((*((_BYTE *)v42 + 96) & 2) != 0)
          v59 = 0;
        LODWORD(v449) = v59;
      }
      else
      {
        LODWORD(v449) = 0;
      }
      v71 = v58;
      v72 = v71[171];

      v73 = v71;
      v74 = 1;
      switch(*((_DWORD *)v73 + 38))
      {
        case 1:
          v74 = *((_DWORD *)v73 + 39);
          break;
        case 2:
          v74 = 1002;
          break;
        case 3:
          v74 = 1001;
          break;
        case 4:
          break;
        default:
          v74 = 0;
          break;
      }

      v458 = v54 & 1;
      HIDWORD(v449) = (v57 >> 2) & 1;
      v451 = (v72 >> 6) & 1;
      v453 = v74 == 1;
      v52 = v461;
    }
    else
    {
      v449 = 0;
      v453 = 0;
      v458 = 0;
      v451 = 0;
    }

    v9 = v474;
    a3 = v464;
    if (v464 == 3)
    {
LABEL_86:
      if ((v451 | v458) == 1)
        nw_endpoint_proxy_record_result(v9, 1);
      if (v453)
      {
        if ((*((_BYTE *)v42 + 100) & 2) != 0)
        {
          v75 = 2;
        }
        else
        {
          if ((*((_BYTE *)v42 + 100) & 1) == 0)
            goto LABEL_96;
          if ((*((_BYTE *)v42 + 100) & 4) != 0)
            v75 = 4;
          else
            v75 = 3;
        }
      }
      else
      {
        v75 = 1;
      }
      *((_BYTE *)v42 + 99) = v75;
LABEL_96:
      if (v458)
      {
        v76 = v471;
        privacy_stance = v76->privacy_stance;

        v9 = v474;
        a3 = v464;
        if (privacy_stance == 2)
          goto LABEL_163;
        if (nw_endpoint_handler_get_minimize_logging(v76))
        {
          if ((nw_endpoint_handler_get_logging_disabled(v76) & 1) != 0)
            goto LABEL_105;
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v80 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v80, OS_LOG_TYPE_DEBUG))
          {
            v317 = nw_endpoint_handler_get_id_string(v76);
            v318 = nw_endpoint_handler_dry_run_string(v76);
            v319 = nw_endpoint_handler_copy_endpoint(v76);
            v320 = nw_endpoint_get_logging_description(v319);
            v321 = nw_endpoint_handler_state_string(v76);
            v322 = nw_endpoint_handler_mode_string(v76);
            v323 = nw_endpoint_handler_copy_current_path(v76);
            v324 = nw_endpoint_handler_get_id_string(v474);
            *(_DWORD *)buf = 136448258;
            v481 = "nw_endpoint_proxy_receive_report";
            v482 = 2082;
            v483 = (uint64_t)v317;
            v484 = 2082;
            v485 = (uint64_t)v318;
            v486 = 2082;
            v487 = v320;
            v488 = 2082;
            v489 = v321;
            v490 = 2082;
            v491 = v322;
            v492 = 2114;
            v493 = v323;
            v494 = 2082;
            *(_QWORD *)v495 = v324;
            *(_WORD *)&v495[8] = 2114;
            *(_QWORD *)&v495[10] = v461;
            _os_log_impl(&dword_182FBE000, v80, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Privacy proxy used ([C%{public}s] %{public}@)", buf, 0x5Cu);

          }
        }
        else
        {
          v78 = v76;
          v79 = (*((_BYTE *)v471 + 268) & 0x20) == 0;

          if (!v79)
          {
LABEL_105:
            if ((v449 & 0x100000000) == 0)
            {
              v89 = v76;
              v76->privacy_stance = 2;

            }
            v9 = v474;
            v42 = (NWConcrete_nw_endpoint_mode_handler *)loga;
            a3 = v464;
            if (uuid_is_null(uu))
              goto LABEL_163;
            v90 = nw_endpoint_handler_copy_current_path(v76);
            nw_path_report_error_to_agent(v90, uu, 0);

            goto LABEL_162;
          }
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v80 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v80, OS_LOG_TYPE_DEFAULT))
          {
            v81 = nw_endpoint_handler_get_id_string(v78);
            v82 = nw_endpoint_handler_dry_run_string(v78);
            v83 = nw_endpoint_handler_copy_endpoint(v78);
            v84 = nw_endpoint_get_logging_description(v83);
            v85 = nw_endpoint_handler_state_string(v78);
            v86 = nw_endpoint_handler_mode_string(v78);
            v87 = nw_endpoint_handler_copy_current_path(v78);
            v88 = nw_endpoint_handler_get_id_string(v474);
            *(_DWORD *)buf = 136448258;
            v481 = "nw_endpoint_proxy_receive_report";
            v482 = 2082;
            v483 = (uint64_t)v81;
            v484 = 2082;
            v485 = (uint64_t)v82;
            v486 = 2082;
            v487 = v84;
            v488 = 2082;
            v489 = v85;
            v490 = 2082;
            v491 = v86;
            v492 = 2114;
            v493 = v87;
            v494 = 2082;
            *(_QWORD *)v495 = v88;
            *(_WORD *)&v495[8] = 2114;
            *(_QWORD *)&v495[10] = v461;
            _os_log_impl(&dword_182FBE000, v80, OS_LOG_TYPE_DEFAULT, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Privacy proxy used ([C%{public}s] %{public}@)", buf, 0x5Cu);

          }
        }

        goto LABEL_105;
      }
      if ((*((_BYTE *)v42 + 96) & 1) == 0)
      {
        a3 = v464;
        if ((v449 & 0x100000000) != 0)
          goto LABEL_163;
        v91 = v471;
        v91->privacy_stance = 1;

        goto LABEL_162;
      }
      v92 = v471;
      v93 = v92->privacy_stance;

      v9 = v474;
      a3 = v464;
      if (v93 == 4)
        goto LABEL_163;
      minimize_logging = nw_endpoint_handler_get_minimize_logging(v92);
      logging_disabled = nw_endpoint_handler_get_logging_disabled(v92);
      if (minimize_logging)
      {
        if ((logging_disabled & 1) != 0)
          goto LABEL_120;
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v96 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v96, OS_LOG_TYPE_DEBUG))
        {
          v448 = nw_endpoint_handler_get_id_string(v92);
          v325 = nw_endpoint_handler_dry_run_string(v92);
          v326 = nw_endpoint_handler_copy_endpoint(v92);
          v327 = nw_endpoint_get_logging_description(v326);
          v328 = nw_endpoint_handler_state_string(v92);
          v329 = nw_endpoint_handler_mode_string(v92);
          v330 = nw_endpoint_handler_copy_current_path(v92);
          *(_DWORD *)buf = 136447746;
          v481 = "nw_endpoint_proxy_receive_report";
          v482 = 2082;
          v483 = (uint64_t)v448;
          v484 = 2082;
          v485 = (uint64_t)v325;
          v486 = 2082;
          v487 = v327;
          v488 = 2082;
          v489 = v328;
          v490 = 2082;
          v491 = v329;
          v492 = 2114;
          v493 = v330;
          _os_log_impl(&dword_182FBE000, v96, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Privacy proxy not used, connected directly", buf, 0x48u);

        }
      }
      else
      {
        if ((logging_disabled & 1) != 0)
        {
LABEL_120:
          if ((v449 & 0x100000000) == 0)
          {
            v104 = v92;
            v92->privacy_stance = 4;

            v9 = v474;
            v42 = (NWConcrete_nw_endpoint_mode_handler *)loga;
          }
          a3 = v464;
          if (uuid_is_null(uu))
            goto LABEL_163;
          v105 = nw_endpoint_handler_copy_current_path(v92);
          nw_path_report_error_to_agent(v105, uu, 1300);

          goto LABEL_162;
        }
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v96 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v96, OS_LOG_TYPE_DEFAULT))
        {
          v97 = nw_endpoint_handler_get_id_string(v92);
          v98 = nw_endpoint_handler_dry_run_string(v92);
          v446 = v96;
          v99 = nw_endpoint_handler_copy_endpoint(v92);
          v100 = nw_endpoint_get_logging_description(v99);
          v101 = nw_endpoint_handler_state_string(v92);
          v102 = nw_endpoint_handler_mode_string(v92);
          v103 = nw_endpoint_handler_copy_current_path(v92);
          *(_DWORD *)buf = 136447746;
          v481 = "nw_endpoint_proxy_receive_report";
          v482 = 2082;
          v483 = (uint64_t)v97;
          v484 = 2082;
          v485 = (uint64_t)v98;
          v486 = 2082;
          v487 = v100;
          v488 = 2082;
          v489 = v101;
          v490 = 2082;
          v491 = v102;
          v492 = 2114;
          v493 = v103;
          _os_log_impl(&dword_182FBE000, v446, OS_LOG_TYPE_DEFAULT, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Privacy proxy not used, connected directly", buf, 0x48u);

          v96 = v446;
        }
      }

      v9 = v474;
      v42 = (NWConcrete_nw_endpoint_mode_handler *)loga;
      goto LABEL_120;
    }
  }
  else
  {
    v449 = 0;
    v461 = 0;
    v453 = 0;
    v458 = 0;
    v451 = 0;
    if (a3 == 3)
      goto LABEL_86;
  }
  if (a3 != 2 || !a4 || *a4 != 3)
    goto LABEL_163;
  v60 = (unsigned __int16)a4[1];
  if (v60 == 5)
  {
LABEL_52:
    if (!v453)
      *((_BYTE *)v42 + 100) |= 4u;
    if ((*((_BYTE *)v42 + 97) & 4) != 0)
      goto LABEL_163;
    *((_BYTE *)v42 + 97) |= 4u;
    v61 = v451;
    if (!*((_QWORD *)v42 + 11))
      v61 = 0;
    if (v61 == 1)
    {
      v62 = v9;
      v63 = v62;
      if (v62)
      {
        v64 = v62;
        if (v62 != v471)
        {
          while (1)
          {
            v65 = *((_QWORD *)v42 + 1);
            v66 = !v65 || v64 == 0;
            if (!v66)
            {
              v68 = *(id **)(v65 + 16);
              v67 = *(id **)(v65 + 24);
              if (v68 != v67)
              {
                while (*v68 != v64)
                {
                  if (++v68 == v67)
                  {
                    v68 = v67;
                    break;
                  }
                }
              }
              if (v68 != v67)
                break;
            }
            v69 = v64;
            v64 = (NWConcrete_nw_endpoint_handler *)v69[9];

            if (v64)
              v70 = v64 == v471;
            else
              v70 = 1;
            v42 = (NWConcrete_nw_endpoint_mode_handler *)loga;
            if (v70)
              goto LABEL_154;
          }
          v64 = v64;

          v63 = v64;
          v42 = (NWConcrete_nw_endpoint_mode_handler *)loga;
        }
      }
      else
      {
        v64 = 0;
      }
LABEL_154:
      timeout_nanos = nw_endpoint_proxy_get_timeout_nanos(v63, 0);
      v136 = nw_endpoint_handler_get_minimize_logging(v471);
      v137 = nw_endpoint_handler_get_logging_disabled(v471);
      if (v136)
      {
        if ((v137 & 1) != 0)
          goto LABEL_161;
        v443 = v63;
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v138 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v138, OS_LOG_TYPE_DEBUG))
        {
          v445 = nw_endpoint_handler_get_id_string(v471);
          v366 = nw_endpoint_handler_dry_run_string(v471);
          v367 = nw_endpoint_handler_copy_endpoint(v471);
          v368 = nw_endpoint_get_logging_description(v367);
          v369 = nw_endpoint_handler_state_string(v471);
          v370 = nw_endpoint_handler_mode_string(v471);
          v371 = nw_endpoint_handler_copy_current_path(v471);
          *(_DWORD *)buf = 136448002;
          v481 = "nw_endpoint_proxy_receive_report";
          v482 = 2082;
          v483 = (uint64_t)v445;
          v484 = 2082;
          v485 = (uint64_t)v366;
          v486 = 2082;
          v487 = v368;
          v488 = 2082;
          v489 = v369;
          v490 = 2082;
          v491 = v370;
          v492 = 2114;
          v493 = v371;
          v494 = 2048;
          *(_QWORD *)v495 = timeout_nanos / 0xF4240;
          _os_log_impl(&dword_182FBE000, v138, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] transport finished, pushing out endpoint race by %llums", buf, 0x52u);

          v63 = v443;
        }
      }
      else
      {
        if ((v137 & 1) != 0)
        {
LABEL_161:
          v146 = *((_QWORD *)v42 + 11);
          v147 = dispatch_time(0x8000000000000000, timeout_nanos);
          nw_queue_set_timer_values(v146, v147, 0xFFFFFFFFFFFFFFFFLL, 0xF4240uLL);

LABEL_162:
          v9 = v474;
          v42 = (NWConcrete_nw_endpoint_mode_handler *)loga;
          a3 = v464;
          goto LABEL_163;
        }
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v138 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v138, OS_LOG_TYPE_INFO))
        {
          v139 = nw_endpoint_handler_get_id_string(v471);
          v140 = nw_endpoint_handler_dry_run_string(v471);
          v442 = v63;
          v444 = v138;
          v141 = nw_endpoint_handler_copy_endpoint(v471);
          v142 = nw_endpoint_get_logging_description(v141);
          v143 = nw_endpoint_handler_state_string(v471);
          v144 = nw_endpoint_handler_mode_string(v471);
          v145 = nw_endpoint_handler_copy_current_path(v471);
          *(_DWORD *)buf = 136448002;
          v481 = "nw_endpoint_proxy_receive_report";
          v482 = 2082;
          v483 = (uint64_t)v139;
          v484 = 2082;
          v485 = (uint64_t)v140;
          v486 = 2082;
          v487 = v142;
          v488 = 2082;
          v489 = v143;
          v490 = 2082;
          v491 = v144;
          v492 = 2114;
          v493 = v145;
          v494 = 2048;
          *(_QWORD *)v495 = timeout_nanos / 0xF4240;
          _os_log_impl(&dword_182FBE000, v444, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] transport finished, pushing out endpoint race by %llums", buf, 0x52u);

          v63 = v442;
          v138 = v444;
        }
      }

      v42 = (NWConcrete_nw_endpoint_mode_handler *)loga;
      goto LABEL_161;
    }
    v119 = nw_endpoint_handler_get_minimize_logging(v471);
    v120 = nw_endpoint_handler_get_logging_disabled(v471);
    if (!v119)
    {
      if ((v120 & 1) != 0)
        goto LABEL_163;
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v121 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v121, OS_LOG_TYPE_INFO))
      {
        v122 = nw_endpoint_handler_get_id_string(v471);
        v123 = nw_endpoint_handler_dry_run_string(v471);
        v124 = nw_endpoint_handler_copy_endpoint(v471);
        v125 = nw_endpoint_get_logging_description(v124);
        v126 = nw_endpoint_handler_state_string(v471);
        v127 = nw_endpoint_handler_mode_string(v471);
        v128 = nw_endpoint_handler_copy_current_path(v471);
        *(_DWORD *)buf = 136447746;
        v481 = "nw_endpoint_proxy_receive_report";
        v482 = 2082;
        v483 = (uint64_t)v122;
        v484 = 2082;
        v485 = (uint64_t)v123;
        v486 = 2082;
        v487 = v125;
        v488 = 2082;
        v489 = v126;
        v490 = 2082;
        v491 = v127;
        v492 = 2114;
        v493 = v128;
        _os_log_impl(&dword_182FBE000, v121, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] transport finished", buf, 0x48u);

      }
      goto LABEL_403;
    }
    if ((v120 & 1) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v121 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v121, OS_LOG_TYPE_DEBUG))
      {
        v359 = nw_endpoint_handler_get_id_string(v471);
        v360 = nw_endpoint_handler_dry_run_string(v471);
        v361 = nw_endpoint_handler_copy_endpoint(v471);
        v362 = nw_endpoint_get_logging_description(v361);
        v363 = nw_endpoint_handler_state_string(v471);
        v364 = nw_endpoint_handler_mode_string(v471);
        v365 = nw_endpoint_handler_copy_current_path(v471);
        *(_DWORD *)buf = 136447746;
        v481 = "nw_endpoint_proxy_receive_report";
        v482 = 2082;
        v483 = (uint64_t)v359;
        v484 = 2082;
        v485 = (uint64_t)v360;
        v486 = 2082;
        v487 = v362;
        v488 = 2082;
        v489 = v363;
        v490 = 2082;
        v491 = v364;
        v492 = 2114;
        v493 = v365;
        _os_log_impl(&dword_182FBE000, v121, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] transport finished", buf, 0x48u);

      }
LABEL_403:

      goto LABEL_162;
    }
    goto LABEL_163;
  }
  if (v60 != 14)
  {
    if (v60 != 13)
      goto LABEL_163;
    goto LABEL_52;
  }
  *((_BYTE *)v42 + 97) |= 8u;
  v106 = *((_QWORD *)v42 + 11);
  v107 = nw_endpoint_handler_get_minimize_logging(v471);
  v108 = nw_endpoint_handler_get_logging_disabled(v471);
  if (v106)
  {
    if (v107)
    {
      if ((v108 & 1) != 0)
      {
LABEL_132:
        v118 = *((_QWORD *)v42 + 11);
        if (v118)
        {
          nw_queue_cancel_source(v118, v109);
          *((_QWORD *)v42 + 11) = 0;
        }
        goto LABEL_163;
      }
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v110 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v110, OS_LOG_TYPE_DEBUG))
      {
        v331 = nw_endpoint_handler_get_id_string(v471);
        v332 = nw_endpoint_handler_dry_run_string(v471);
        v333 = nw_endpoint_handler_copy_endpoint(v471);
        v334 = nw_endpoint_get_logging_description(v333);
        v335 = nw_endpoint_handler_state_string(v471);
        v336 = nw_endpoint_handler_mode_string(v471);
        v337 = nw_endpoint_handler_copy_current_path(v471);
        *(_DWORD *)buf = 136447746;
        v481 = "nw_endpoint_proxy_receive_report";
        v482 = 2082;
        v483 = (uint64_t)v331;
        v484 = 2082;
        v485 = (uint64_t)v332;
        v486 = 2082;
        v487 = v334;
        v488 = 2082;
        v489 = v335;
        v490 = 2082;
        v491 = v336;
        v492 = 2114;
        v493 = v337;
        _os_log_impl(&dword_182FBE000, v110, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] proxy flow finished, cancelling timer for fallback attempt", buf, 0x48u);

      }
    }
    else
    {
      if ((v108 & 1) != 0)
        goto LABEL_132;
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v110 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v110, OS_LOG_TYPE_INFO))
      {
        v111 = nw_endpoint_handler_get_id_string(v471);
        v112 = nw_endpoint_handler_dry_run_string(v471);
        v113 = nw_endpoint_handler_copy_endpoint(v471);
        v114 = nw_endpoint_get_logging_description(v113);
        v115 = nw_endpoint_handler_state_string(v471);
        v116 = nw_endpoint_handler_mode_string(v471);
        v117 = nw_endpoint_handler_copy_current_path(v471);
        *(_DWORD *)buf = 136447746;
        v481 = "nw_endpoint_proxy_receive_report";
        v482 = 2082;
        v483 = (uint64_t)v111;
        v484 = 2082;
        v485 = (uint64_t)v112;
        v486 = 2082;
        v487 = v114;
        v488 = 2082;
        v489 = v115;
        v490 = 2082;
        v491 = v116;
        v492 = 2114;
        v493 = v117;
        _os_log_impl(&dword_182FBE000, v110, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] proxy flow finished, cancelling timer for fallback attempt", buf, 0x48u);

      }
    }

    v9 = v474;
    v42 = (NWConcrete_nw_endpoint_mode_handler *)loga;
    a3 = v464;
    goto LABEL_132;
  }
  if (!v107)
  {
    if ((v108 & 1) != 0)
      goto LABEL_163;
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v121 = (id)gconnectionLogObj;
    if (os_log_type_enabled(v121, OS_LOG_TYPE_INFO))
    {
      v129 = nw_endpoint_handler_get_id_string(v471);
      v130 = nw_endpoint_handler_dry_run_string(v471);
      v131 = nw_endpoint_handler_copy_endpoint(v471);
      v132 = nw_endpoint_get_logging_description(v131);
      v133 = nw_endpoint_handler_state_string(v471);
      v134 = nw_endpoint_handler_mode_string(v471);
      v135 = nw_endpoint_handler_copy_current_path(v471);
      *(_DWORD *)buf = 136447746;
      v481 = "nw_endpoint_proxy_receive_report";
      v482 = 2082;
      v483 = (uint64_t)v129;
      v484 = 2082;
      v485 = (uint64_t)v130;
      v486 = 2082;
      v487 = v132;
      v488 = 2082;
      v489 = v133;
      v490 = 2082;
      v491 = v134;
      v492 = 2114;
      v493 = v135;
      _os_log_impl(&dword_182FBE000, v121, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] proxy flow finished", buf, 0x48u);

    }
    goto LABEL_403;
  }
  if ((v108 & 1) == 0)
  {
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v121 = (id)gconnectionLogObj;
    if (os_log_type_enabled(v121, OS_LOG_TYPE_DEBUG))
    {
      v372 = nw_endpoint_handler_get_id_string(v471);
      v373 = nw_endpoint_handler_dry_run_string(v471);
      v374 = nw_endpoint_handler_copy_endpoint(v471);
      v375 = nw_endpoint_get_logging_description(v374);
      v376 = nw_endpoint_handler_state_string(v471);
      v377 = nw_endpoint_handler_mode_string(v471);
      v378 = nw_endpoint_handler_copy_current_path(v471);
      *(_DWORD *)buf = 136447746;
      v481 = "nw_endpoint_proxy_receive_report";
      v482 = 2082;
      v483 = (uint64_t)v372;
      v484 = 2082;
      v485 = (uint64_t)v373;
      v486 = 2082;
      v487 = v375;
      v488 = 2082;
      v489 = v376;
      v490 = 2082;
      v491 = v377;
      v492 = 2114;
      v493 = v378;
      _os_log_impl(&dword_182FBE000, v121, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] proxy flow finished", buf, 0x48u);

    }
    goto LABEL_403;
  }
LABEL_163:
  v148 = *((_QWORD *)v42 + 1);
  if (!v148 || !v9)
    goto LABEL_216;
  v150 = *(NWConcrete_nw_endpoint_handler ***)(v148 + 16);
  v149 = *(NWConcrete_nw_endpoint_handler ***)(v148 + 24);
  if (v150 != v149)
  {
    while (*v150 != v9)
    {
      if (++v150 == v149)
      {
        v150 = v149;
        break;
      }
    }
  }
  if (v150 == v149)
    goto LABEL_216;
  if (a3 != 3)
  {
    if (a3 == 4)
    {
      if ((v458 | v451) == 1)
        nw_endpoint_proxy_record_result(v9, 0);
      if (!v453)
        *((_BYTE *)v42 + 100) |= 2u;
      v171 = *((_QWORD *)v42 + 2);
      if (v171)
      {
        v173 = *(NWConcrete_nw_endpoint_handler ***)(v171 + 16);
        v172 = *(NWConcrete_nw_endpoint_handler ***)(v171 + 24);
        if (v173 != v172)
        {
          while (*v173 != v9)
          {
            if (++v173 == v172)
            {
              v173 = *(NWConcrete_nw_endpoint_handler ***)(v171 + 24);
              break;
            }
          }
        }
        if (v173 != v172)
          goto LABEL_229;
      }
      else
      {
        v174 = nw_array_create();
        v176 = (void *)*((_QWORD *)v42 + 2);
        v175 = (uint64_t *)((char *)v42 + 16);
        *v175 = v174;

        v171 = *v175;
        v9 = v474;
        v42 = (NWConcrete_nw_endpoint_mode_handler *)loga;
      }
      nw_array_append(v171, v9);
      if (v458)
      {
        v177 = *((_QWORD *)v42 + 10);
        if (v177)
        {
          error_code = nw_error_get_error_code(v177);
          error_domain = nw_error_get_error_domain(*((nw_error_t *)v42 + 10));
          if (error_code == 65)
            v180 = (*((unsigned __int8 *)v42 + 97) >> 2) & 1;
          else
            v180 = 0;
          if (error_code == 64 || error_domain == nw_error_domain_tls)
            v253 = (*((unsigned __int8 *)v42 + 97) >> 2) & 1;
          else
            v253 = 0;
          if (v180)
          {
            v254 = *((_BYTE *)v42 + 96);
            *((_BYTE *)v42 + 96) = v254 | 0x10;
            if (!(*((_BYTE *)v42 + 97) & 0x10 | v254 & 6))
              goto LABEL_283;
            v66 = (v254 & 2) == 0;
            v255 = HIDWORD(v449);
            if (!v66)
              v255 = 0;
            if (v255 == 1)
            {
LABEL_283:
              if (!(_DWORD)v449)
              {
                v256 = nw_endpoint_handler_get_minimize_logging(v471);
                v257 = nw_endpoint_handler_get_logging_disabled(v471);
                if (v256)
                {
                  if ((v257 & 1) != 0)
                    goto LABEL_302;
                  if (__nwlog_connection_log::onceToken != -1)
                    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                  v258 = (id)gconnectionLogObj;
                  if (os_log_type_enabled(v258, OS_LOG_TYPE_DEBUG))
                  {
                    v432 = nw_endpoint_handler_get_id_string(v471);
                    v433 = nw_endpoint_handler_dry_run_string(v471);
                    v434 = nw_endpoint_handler_copy_endpoint(v471);
                    v435 = nw_endpoint_get_logging_description(v434);
                    v436 = nw_endpoint_handler_state_string(v471);
                    v437 = nw_endpoint_handler_mode_string(v471);
                    v438 = nw_endpoint_handler_copy_current_path(v471);
                    v439 = BYTE1(loga[12].isa);
                    v440 = nw_endpoint_handler_get_id_string(v474);
                    *(_DWORD *)buf = 136448770;
                    v481 = "nw_endpoint_proxy_receive_report";
                    v441 = "";
                    v483 = (uint64_t)v432;
                    v482 = 2082;
                    if ((v439 & 4) == 0)
                      v441 = " during establishment";
                    v484 = 2082;
                    v485 = (uint64_t)v433;
                    v486 = 2082;
                    v487 = v435;
                    v488 = 2082;
                    v489 = v436;
                    v490 = 2082;
                    v491 = v437;
                    v492 = 2114;
                    v493 = v438;
                    v494 = 1024;
                    *(_DWORD *)v495 = error_code;
                    *(_WORD *)&v495[4] = 2082;
                    *(_QWORD *)&v495[6] = v441;
                    *(_WORD *)&v495[14] = 2082;
                    *(_QWORD *)&v495[16] = v440;
                    *(_WORD *)&v495[24] = 2114;
                    *(_QWORD *)&v495[26] = v461;
                    _os_log_impl(&dword_182FBE000, v258, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Privacy proxy failed with error %d%{public}s, failing open ([C%{public}s] %{public}@)", buf, 0x6Cu);

                  }
                  goto LABEL_301;
                }
                if ((v257 & 1) == 0)
                {
                  if (__nwlog_connection_log::onceToken != -1)
                    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                  v258 = (id)gconnectionLogObj;
                  if (os_log_type_enabled(v258, OS_LOG_TYPE_INFO))
                  {
                    v259 = nw_endpoint_handler_get_id_string(v471);
                    v260 = nw_endpoint_handler_dry_run_string(v471);
                    v261 = nw_endpoint_handler_copy_endpoint(v471);
                    v262 = nw_endpoint_get_logging_description(v261);
                    v263 = nw_endpoint_handler_state_string(v471);
                    v264 = nw_endpoint_handler_mode_string(v471);
                    v265 = nw_endpoint_handler_copy_current_path(v471);
                    v266 = BYTE1(loga[12].isa);
                    v267 = nw_endpoint_handler_get_id_string(v474);
                    *(_DWORD *)buf = 136448770;
                    v481 = "nw_endpoint_proxy_receive_report";
                    v268 = "";
                    v483 = (uint64_t)v259;
                    v482 = 2082;
                    if ((v266 & 4) == 0)
                      v268 = " during establishment";
                    v484 = 2082;
                    v485 = (uint64_t)v260;
                    v486 = 2082;
                    v487 = v262;
                    v488 = 2082;
                    v489 = v263;
                    v490 = 2082;
                    v491 = v264;
                    v492 = 2114;
                    v493 = v265;
                    v494 = 1024;
                    *(_DWORD *)v495 = error_code;
                    *(_WORD *)&v495[4] = 2082;
                    *(_QWORD *)&v495[6] = v268;
                    *(_WORD *)&v495[14] = 2082;
                    *(_QWORD *)&v495[16] = v267;
                    *(_WORD *)&v495[24] = 2114;
                    *(_QWORD *)&v495[26] = v461;
                    _os_log_impl(&dword_182FBE000, v258, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Privacy proxy failed with error %d%{public}s, failing open ([C%{public}s] %{public}@)", buf, 0x6Cu);

                  }
LABEL_301:

                  v9 = v474;
                  v42 = (NWConcrete_nw_endpoint_mode_handler *)loga;
                  goto LABEL_302;
                }
                goto LABEL_302;
              }
LABEL_293:
              v269 = nw_endpoint_handler_get_minimize_logging(v471);
              v270 = nw_endpoint_handler_get_logging_disabled(v471);
              if (v269)
              {
                if ((v270 & 1) != 0)
                  goto LABEL_302;
                if (__nwlog_connection_log::onceToken != -1)
                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                v258 = (id)gconnectionLogObj;
                if (os_log_type_enabled(v258, OS_LOG_TYPE_DEBUG))
                {
                  v394 = nw_endpoint_handler_get_id_string(v471);
                  v395 = nw_endpoint_handler_dry_run_string(v471);
                  v396 = nw_endpoint_handler_copy_endpoint(v471);
                  v397 = nw_endpoint_get_logging_description(v396);
                  v398 = nw_endpoint_handler_state_string(v471);
                  v399 = nw_endpoint_handler_mode_string(v471);
                  v400 = nw_endpoint_handler_copy_current_path(v471);
                  v401 = BYTE1(loga[12].isa);
                  v402 = nw_endpoint_handler_get_id_string(v474);
                  *(_DWORD *)buf = 136448770;
                  v481 = "nw_endpoint_proxy_receive_report";
                  v403 = "";
                  v483 = (uint64_t)v394;
                  v482 = 2082;
                  if ((v401 & 4) == 0)
                    v403 = " during establishment";
                  v484 = 2082;
                  v485 = (uint64_t)v395;
                  v486 = 2082;
                  v487 = v397;
                  v488 = 2082;
                  v489 = v398;
                  v490 = 2082;
                  v491 = v399;
                  v492 = 2114;
                  v493 = v400;
                  v494 = 1024;
                  *(_DWORD *)v495 = error_code;
                  *(_WORD *)&v495[4] = 2082;
                  *(_QWORD *)&v495[6] = v403;
                  *(_WORD *)&v495[14] = 2082;
                  *(_QWORD *)&v495[16] = v402;
                  *(_WORD *)&v495[24] = 2114;
                  *(_QWORD *)&v495[26] = v461;
                  _os_log_impl(&dword_182FBE000, v258, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Privacy proxy failed with error %d%{public}s, allowed to fail open ([C%{public}s] %{public}@)", buf, 0x6Cu);

                }
                goto LABEL_301;
              }
              if ((v270 & 1) == 0)
              {
                if (__nwlog_connection_log::onceToken != -1)
                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                v258 = (id)gconnectionLogObj;
                if (os_log_type_enabled(v258, OS_LOG_TYPE_INFO))
                {
                  v271 = nw_endpoint_handler_get_id_string(v471);
                  v272 = nw_endpoint_handler_dry_run_string(v471);
                  v273 = nw_endpoint_handler_copy_endpoint(v471);
                  v274 = nw_endpoint_get_logging_description(v273);
                  v275 = nw_endpoint_handler_state_string(v471);
                  v276 = nw_endpoint_handler_mode_string(v471);
                  v277 = nw_endpoint_handler_copy_current_path(v471);
                  v278 = BYTE1(loga[12].isa);
                  v279 = nw_endpoint_handler_get_id_string(v474);
                  *(_DWORD *)buf = 136448770;
                  v481 = "nw_endpoint_proxy_receive_report";
                  v280 = "";
                  v483 = (uint64_t)v271;
                  v482 = 2082;
                  if ((v278 & 4) == 0)
                    v280 = " during establishment";
                  v484 = 2082;
                  v485 = (uint64_t)v272;
                  v486 = 2082;
                  v487 = v274;
                  v488 = 2082;
                  v489 = v275;
                  v490 = 2082;
                  v491 = v276;
                  v492 = 2114;
                  v493 = v277;
                  v494 = 1024;
                  *(_DWORD *)v495 = error_code;
                  *(_WORD *)&v495[4] = 2082;
                  *(_QWORD *)&v495[6] = v280;
                  *(_WORD *)&v495[14] = 2082;
                  *(_QWORD *)&v495[16] = v279;
                  *(_WORD *)&v495[24] = 2114;
                  *(_QWORD *)&v495[26] = v461;
                  _os_log_impl(&dword_182FBE000, v258, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Privacy proxy failed with error %d%{public}s, allowed to fail open ([C%{public}s] %{public}@)", buf, 0x6Cu);

                }
                goto LABEL_301;
              }
LABEL_302:
              if ((v449 & 0x100000000) == 0)
              {
                v281 = v471;
                v281->privacy_stance = 4;

                v9 = v474;
                v42 = (NWConcrete_nw_endpoint_mode_handler *)loga;
              }
              v204 = 0;
              *((_BYTE *)v42 + 96) |= 8u;
              v203 = 1;
LABEL_305:
              if (error_code && (*((_BYTE *)v42 + 97) & 4) == 0 && !uuid_is_null(uu))
              {
                v194 = nw_endpoint_handler_copy_current_path(v471);
                nw_path_report_error_to_agent(v194, uu, error_code);
                goto LABEL_227;
              }
LABEL_230:
              nw_endpoint_handler_report(v471, v9, a4, v472);
              v205 = *((_QWORD *)v42 + 2);
              if (v205)
                v205 = (uint64_t)(*(_QWORD *)(v205 + 24) - *(_QWORD *)(v205 + 16)) >> 3;
              v206 = *((_QWORD *)v42 + 1);
              if (v206)
                v206 = (uint64_t)(*(_QWORD *)(v206 + 24) - *(_QWORD *)(v206 + 16)) >> 3;
              if (v205 == v206)
              {
                has_unresolved_proxies = nw_endpoint_proxy_has_unresolved_proxies(v471, 0);
                v208 = nw_endpoint_handler_get_minimize_logging(v471);
                v209 = nw_endpoint_handler_get_logging_disabled(v471);
                if (has_unresolved_proxies)
                {
                  if (v208)
                  {
                    if ((v209 & 1) != 0)
                      goto LABEL_217;
                    if (__nwlog_connection_log::onceToken != -1)
                      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                    v151 = (id)gconnectionLogObj;
                    if (os_log_type_enabled(v151, OS_LOG_TYPE_DEBUG))
                    {
                      v345 = nw_endpoint_handler_get_id_string(v471);
                      v346 = nw_endpoint_handler_dry_run_string(v471);
                      v347 = nw_endpoint_handler_copy_endpoint(v471);
                      v348 = nw_endpoint_get_logging_description(v347);
                      v349 = nw_endpoint_handler_state_string(v471);
                      v350 = nw_endpoint_handler_mode_string(v471);
                      v351 = nw_endpoint_handler_copy_current_path(v471);
                      *(_DWORD *)buf = 136447746;
                      v481 = "nw_endpoint_proxy_receive_report";
                      v482 = 2082;
                      v483 = (uint64_t)v345;
                      v484 = 2082;
                      v485 = (uint64_t)v346;
                      v486 = 2082;
                      v487 = v348;
                      v488 = 2082;
                      v489 = v349;
                      v490 = 2082;
                      v491 = v350;
                      v492 = 2114;
                      v493 = v351;
                      _os_log_impl(&dword_182FBE000, v151, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] all children failed, but still waiting on resolution", buf, 0x48u);

                    }
                  }
                  else
                  {
                    if ((v209 & 1) != 0)
                      goto LABEL_217;
                    if (__nwlog_connection_log::onceToken != -1)
                      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                    v151 = (id)gconnectionLogObj;
                    if (os_log_type_enabled(v151, OS_LOG_TYPE_INFO))
                    {
                      v210 = nw_endpoint_handler_get_id_string(v471);
                      v211 = nw_endpoint_handler_dry_run_string(v471);
                      v212 = nw_endpoint_handler_copy_endpoint(v471);
                      v213 = nw_endpoint_get_logging_description(v212);
                      v214 = nw_endpoint_handler_state_string(v471);
                      v215 = nw_endpoint_handler_mode_string(v471);
                      v216 = nw_endpoint_handler_copy_current_path(v471);
                      *(_DWORD *)buf = 136447746;
                      v481 = "nw_endpoint_proxy_receive_report";
                      v482 = 2082;
                      v483 = (uint64_t)v210;
                      v484 = 2082;
                      v485 = (uint64_t)v211;
                      v486 = 2082;
                      v487 = v213;
                      v488 = 2082;
                      v489 = v214;
                      v490 = 2082;
                      v491 = v215;
                      v492 = 2114;
                      v493 = v216;
                      _os_log_impl(&dword_182FBE000, v151, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] all children failed, but still waiting on resolution", buf, 0x48u);

                    }
                  }
                  goto LABEL_192;
                }
                if (v208)
                {
                  if ((v209 & 1) != 0)
                    goto LABEL_263;
                  if (__nwlog_connection_log::onceToken != -1)
                    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                  v219 = (id)gconnectionLogObj;
                  if (os_log_type_enabled(v219, OS_LOG_TYPE_DEBUG))
                  {
                    v352 = nw_endpoint_handler_get_id_string(v471);
                    v353 = nw_endpoint_handler_dry_run_string(v471);
                    v354 = nw_endpoint_handler_copy_endpoint(v471);
                    v355 = nw_endpoint_get_logging_description(v354);
                    v356 = nw_endpoint_handler_state_string(v471);
                    v357 = nw_endpoint_handler_mode_string(v471);
                    v358 = nw_endpoint_handler_copy_current_path(v471);
                    *(_DWORD *)buf = 136447746;
                    v481 = "nw_endpoint_proxy_receive_report";
                    v482 = 2082;
                    v483 = (uint64_t)v352;
                    v484 = 2082;
                    v485 = (uint64_t)v353;
                    v486 = 2082;
                    v487 = v355;
                    v488 = 2082;
                    v489 = v356;
                    v490 = 2082;
                    v491 = v357;
                    v492 = 2114;
                    v493 = v358;
                    _os_log_impl(&dword_182FBE000, v219, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] all children failed", buf, 0x48u);

                  }
                  goto LABEL_262;
                }
                if ((v209 & 1) == 0)
                {
                  if (__nwlog_connection_log::onceToken != -1)
                    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                  v219 = (id)gconnectionLogObj;
                  if (os_log_type_enabled(v219, OS_LOG_TYPE_INFO))
                  {
                    v237 = nw_endpoint_handler_get_id_string(v471);
                    v238 = nw_endpoint_handler_dry_run_string(v471);
                    v239 = nw_endpoint_handler_copy_endpoint(v471);
                    v240 = nw_endpoint_get_logging_description(v239);
                    v241 = nw_endpoint_handler_state_string(v471);
                    v242 = nw_endpoint_handler_mode_string(v471);
                    v243 = nw_endpoint_handler_copy_current_path(v471);
                    *(_DWORD *)buf = 136447746;
                    v481 = "nw_endpoint_proxy_receive_report";
                    v482 = 2082;
                    v483 = (uint64_t)v237;
                    v484 = 2082;
                    v485 = (uint64_t)v238;
                    v486 = 2082;
                    v487 = v240;
                    v488 = 2082;
                    v489 = v241;
                    v490 = 2082;
                    v491 = v242;
                    v492 = 2114;
                    v493 = v243;
                    _os_log_impl(&dword_182FBE000, v219, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] all children failed", buf, 0x48u);

                  }
LABEL_262:

                  goto LABEL_263;
                }
                goto LABEL_263;
              }
              if (v204)
              {
                v217 = nw_endpoint_handler_get_minimize_logging(v471);
                v218 = nw_endpoint_handler_get_logging_disabled(v471);
                if (v217)
                {
                  if ((v218 & 1) != 0)
                    goto LABEL_263;
                  if (__nwlog_connection_log::onceToken != -1)
                    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                  v219 = (id)gconnectionLogObj;
                  if (os_log_type_enabled(v219, OS_LOG_TYPE_DEBUG))
                  {
                    v338 = nw_endpoint_handler_get_id_string(v471);
                    v339 = nw_endpoint_handler_dry_run_string(v471);
                    v340 = nw_endpoint_handler_copy_endpoint(v471);
                    v341 = nw_endpoint_get_logging_description(v340);
                    v342 = nw_endpoint_handler_state_string(v471);
                    v343 = nw_endpoint_handler_mode_string(v471);
                    v344 = nw_endpoint_handler_copy_current_path(v471);
                    *(_DWORD *)buf = 136447746;
                    v481 = "nw_endpoint_proxy_receive_report";
                    v482 = 2082;
                    v483 = (uint64_t)v338;
                    v484 = 2082;
                    v485 = (uint64_t)v339;
                    v486 = 2082;
                    v487 = v341;
                    v488 = 2082;
                    v489 = v342;
                    v490 = 2082;
                    v491 = v343;
                    v492 = 2114;
                    v493 = v344;
                    _os_log_impl(&dword_182FBE000, v219, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] children failed, detected origin error", buf, 0x48u);

                  }
                  goto LABEL_262;
                }
                if ((v218 & 1) == 0)
                {
                  if (__nwlog_connection_log::onceToken != -1)
                    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                  v219 = (id)gconnectionLogObj;
                  if (os_log_type_enabled(v219, OS_LOG_TYPE_INFO))
                  {
                    v220 = nw_endpoint_handler_get_id_string(v471);
                    v221 = nw_endpoint_handler_dry_run_string(v471);
                    v222 = nw_endpoint_handler_copy_endpoint(v471);
                    v223 = nw_endpoint_get_logging_description(v222);
                    v224 = nw_endpoint_handler_state_string(v471);
                    v225 = nw_endpoint_handler_mode_string(v471);
                    v226 = nw_endpoint_handler_copy_current_path(v471);
                    *(_DWORD *)buf = 136447746;
                    v481 = "nw_endpoint_proxy_receive_report";
                    v482 = 2082;
                    v483 = (uint64_t)v220;
                    v484 = 2082;
                    v485 = (uint64_t)v221;
                    v486 = 2082;
                    v487 = v223;
                    v488 = 2082;
                    v489 = v224;
                    v490 = 2082;
                    v491 = v225;
                    v492 = 2114;
                    v493 = v226;
                    _os_log_impl(&dword_182FBE000, v219, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] children failed, detected origin error", buf, 0x48u);

                  }
                  goto LABEL_262;
                }
LABEL_263:
                nw_endpoint_handler_handle_failure(v471);
                v471->event = (nw_endpoint_handler_event_s)327684;
                nw_endpoint_handler_report(v471, 0, &v471->event.domain, 0);
                goto LABEL_217;
              }
              if (v205 == *((_DWORD *)v42 + 6))
              {
                v227 = nw_endpoint_handler_get_minimize_logging(v471);
                v228 = nw_endpoint_handler_get_logging_disabled(v471);
                if (v227)
                {
                  if ((v228 & 1) != 0)
                    goto LABEL_272;
                  if (__nwlog_connection_log::onceToken != -1)
                    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                  v229 = (id)gconnectionLogObj;
                  if (os_log_type_enabled(v229, OS_LOG_TYPE_DEBUG))
                  {
                    v379 = nw_endpoint_handler_get_id_string(v471);
                    v380 = nw_endpoint_handler_dry_run_string(v471);
                    v381 = nw_endpoint_handler_copy_endpoint(v471);
                    v382 = nw_endpoint_get_logging_description(v381);
                    v383 = nw_endpoint_handler_state_string(v471);
                    v384 = nw_endpoint_handler_mode_string(v471);
                    v385 = nw_endpoint_handler_copy_current_path(v471);
                    *(_DWORD *)buf = 136447746;
                    v481 = "nw_endpoint_proxy_receive_report";
                    v482 = 2082;
                    v483 = (uint64_t)v379;
                    v484 = 2082;
                    v485 = (uint64_t)v380;
                    v486 = 2082;
                    v487 = v382;
                    v488 = 2082;
                    v489 = v383;
                    v490 = 2082;
                    v491 = v384;
                    v492 = 2114;
                    v493 = v385;
                    _os_log_impl(&dword_182FBE000, v229, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] all started children failed, start next child.", buf, 0x48u);

                  }
                  goto LABEL_271;
                }
                if ((v228 & 1) == 0)
                {
                  if (__nwlog_connection_log::onceToken != -1)
                    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                  v229 = (id)gconnectionLogObj;
                  if (os_log_type_enabled(v229, OS_LOG_TYPE_INFO))
                  {
                    v230 = nw_endpoint_handler_get_id_string(v471);
                    v231 = nw_endpoint_handler_dry_run_string(v471);
                    v232 = nw_endpoint_handler_copy_endpoint(v471);
                    v233 = nw_endpoint_get_logging_description(v232);
                    v234 = nw_endpoint_handler_state_string(v471);
                    v235 = nw_endpoint_handler_mode_string(v471);
                    v236 = nw_endpoint_handler_copy_current_path(v471);
                    *(_DWORD *)buf = 136447746;
                    v481 = "nw_endpoint_proxy_receive_report";
                    v482 = 2082;
                    v483 = (uint64_t)v230;
                    v484 = 2082;
                    v485 = (uint64_t)v231;
                    v486 = 2082;
                    v487 = v233;
                    v488 = 2082;
                    v489 = v234;
                    v490 = 2082;
                    v491 = v235;
                    v492 = 2114;
                    v493 = v236;
                    _os_log_impl(&dword_182FBE000, v229, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] all started children failed, start next child.", buf, 0x48u);

                  }
LABEL_271:

                }
              }
              else
              {
                if (!v203)
                  goto LABEL_217;
                v244 = nw_endpoint_handler_get_minimize_logging(v471);
                v245 = nw_endpoint_handler_get_logging_disabled(v471);
                if (v244)
                {
                  if ((v245 & 1) != 0)
                    goto LABEL_272;
                  if (__nwlog_connection_log::onceToken != -1)
                    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                  v229 = (id)gconnectionLogObj;
                  if (os_log_type_enabled(v229, OS_LOG_TYPE_DEBUG))
                  {
                    v404 = nw_endpoint_handler_get_id_string(v471);
                    v405 = nw_endpoint_handler_dry_run_string(v471);
                    v406 = nw_endpoint_handler_copy_endpoint(v471);
                    v407 = nw_endpoint_get_logging_description(v406);
                    v408 = nw_endpoint_handler_state_string(v471);
                    v409 = nw_endpoint_handler_mode_string(v471);
                    v410 = nw_endpoint_handler_copy_current_path(v471);
                    *(_DWORD *)buf = 136447746;
                    v481 = "nw_endpoint_proxy_receive_report";
                    v482 = 2082;
                    v483 = (uint64_t)v404;
                    v484 = 2082;
                    v485 = (uint64_t)v405;
                    v486 = 2082;
                    v487 = v407;
                    v488 = 2082;
                    v489 = v408;
                    v490 = 2082;
                    v491 = v409;
                    v492 = 2114;
                    v493 = v410;
                    _os_log_impl(&dword_182FBE000, v229, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] failing open, start next child.", buf, 0x48u);

                  }
                  goto LABEL_271;
                }
                if ((v245 & 1) == 0)
                {
                  if (__nwlog_connection_log::onceToken != -1)
                    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                  v229 = (id)gconnectionLogObj;
                  if (os_log_type_enabled(v229, OS_LOG_TYPE_INFO))
                  {
                    v246 = nw_endpoint_handler_get_id_string(v471);
                    v247 = nw_endpoint_handler_dry_run_string(v471);
                    v248 = nw_endpoint_handler_copy_endpoint(v471);
                    v249 = nw_endpoint_get_logging_description(v248);
                    v250 = nw_endpoint_handler_state_string(v471);
                    v251 = nw_endpoint_handler_mode_string(v471);
                    v252 = nw_endpoint_handler_copy_current_path(v471);
                    *(_DWORD *)buf = 136447746;
                    v481 = "nw_endpoint_proxy_receive_report";
                    v482 = 2082;
                    v483 = (uint64_t)v246;
                    v484 = 2082;
                    v485 = (uint64_t)v247;
                    v486 = 2082;
                    v487 = v249;
                    v488 = 2082;
                    v489 = v250;
                    v490 = 2082;
                    v491 = v251;
                    v492 = 2114;
                    v493 = v252;
                    _os_log_impl(&dword_182FBE000, v229, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] failing open, start next child.", buf, 0x48u);

                  }
                  goto LABEL_271;
                }
              }
LABEL_272:
              nw_endpoint_proxy_start_next_child(v471);
              goto LABEL_217;
            }
          }
          else if ((_DWORD)v449)
          {
            goto LABEL_293;
          }
          v282 = nw_endpoint_handler_get_minimize_logging(v471);
          v283 = nw_endpoint_handler_get_logging_disabled(v471);
          if (v253)
          {
            if (v282)
            {
              if ((v283 & 1) != 0)
                goto LABEL_319;
              if (__nwlog_connection_log::onceToken != -1)
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
              v284 = (id)gconnectionLogObj;
              if (os_log_type_enabled(v284, OS_LOG_TYPE_DEBUG))
              {
                v413 = nw_endpoint_handler_get_id_string(v471);
                v414 = nw_endpoint_handler_dry_run_string(v471);
                v415 = nw_endpoint_handler_copy_endpoint(v471);
                v416 = nw_endpoint_get_logging_description(v415);
                v417 = nw_endpoint_handler_state_string(v471);
                v418 = nw_endpoint_handler_mode_string(v471);
                v419 = nw_endpoint_handler_copy_current_path(v471);
                v420 = BYTE1(loga[12].isa);
                v421 = nw_endpoint_handler_get_id_string(v474);
                *(_DWORD *)buf = 136448770;
                v481 = "nw_endpoint_proxy_receive_report";
                v422 = "";
                v483 = (uint64_t)v413;
                v482 = 2082;
                if ((v420 & 4) == 0)
                  v422 = " during establishment";
                v484 = 2082;
                v485 = (uint64_t)v414;
                v486 = 2082;
                v487 = v416;
                v488 = 2082;
                v489 = v417;
                v490 = 2082;
                v491 = v418;
                v492 = 2114;
                v493 = v419;
                v494 = 1024;
                *(_DWORD *)v495 = error_code;
                *(_WORD *)&v495[4] = 2082;
                *(_QWORD *)&v495[6] = v422;
                *(_WORD *)&v495[14] = 2082;
                *(_QWORD *)&v495[16] = v421;
                *(_WORD *)&v495[24] = 2114;
                *(_QWORD *)&v495[26] = v461;
                _os_log_impl(&dword_182FBE000, v284, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Privacy proxy detected origin server failure with error %d%{public}s ([C%{public}s] %{public}@)", buf, 0x6Cu);

              }
            }
            else
            {
              if ((v283 & 1) != 0)
              {
LABEL_319:
                if ((v449 & 0x100000000) != 0)
                {
                  v203 = 0;
                  v204 = 1;
                  goto LABEL_305;
                }
                v310 = v471;
                v310->privacy_stance = 2;

                v203 = 0;
                v204 = 1;
LABEL_351:
                v9 = v474;
                v42 = (NWConcrete_nw_endpoint_mode_handler *)loga;
                goto LABEL_305;
              }
              if (__nwlog_connection_log::onceToken != -1)
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
              v284 = (id)gconnectionLogObj;
              if (os_log_type_enabled(v284, OS_LOG_TYPE_DEFAULT))
              {
                v285 = nw_endpoint_handler_get_id_string(v471);
                v286 = nw_endpoint_handler_dry_run_string(v471);
                v287 = nw_endpoint_handler_copy_endpoint(v471);
                v288 = nw_endpoint_get_logging_description(v287);
                v289 = nw_endpoint_handler_state_string(v471);
                v290 = nw_endpoint_handler_mode_string(v471);
                v291 = nw_endpoint_handler_copy_current_path(v471);
                v292 = BYTE1(loga[12].isa);
                v293 = nw_endpoint_handler_get_id_string(v474);
                *(_DWORD *)buf = 136448770;
                v481 = "nw_endpoint_proxy_receive_report";
                v294 = "";
                v483 = (uint64_t)v285;
                v482 = 2082;
                if ((v292 & 4) == 0)
                  v294 = " during establishment";
                v484 = 2082;
                v485 = (uint64_t)v286;
                v486 = 2082;
                v487 = v288;
                v488 = 2082;
                v489 = v289;
                v490 = 2082;
                v491 = v290;
                v492 = 2114;
                v493 = v291;
                v494 = 1024;
                *(_DWORD *)v495 = error_code;
                *(_WORD *)&v495[4] = 2082;
                *(_QWORD *)&v495[6] = v294;
                *(_WORD *)&v495[14] = 2082;
                *(_QWORD *)&v495[16] = v293;
                *(_WORD *)&v495[24] = 2114;
                *(_QWORD *)&v495[26] = v461;
                _os_log_impl(&dword_182FBE000, v284, OS_LOG_TYPE_DEFAULT, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Privacy proxy detected origin server failure with error %d%{public}s ([C%{public}s] %{public}@)", buf, 0x6Cu);

              }
            }

            v9 = v474;
            v42 = (NWConcrete_nw_endpoint_mode_handler *)loga;
            goto LABEL_319;
          }
          if (v282)
          {
            if ((v283 & 1) != 0)
              goto LABEL_330;
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v295 = (id)gconnectionLogObj;
            if (os_log_type_enabled(v295, OS_LOG_TYPE_DEBUG))
            {
              v467 = nw_endpoint_handler_get_id_string(v471);
              v423 = nw_endpoint_handler_dry_run_string(v471);
              v424 = nw_endpoint_handler_copy_endpoint(v471);
              v425 = nw_endpoint_get_logging_description(v424);
              v426 = nw_endpoint_handler_state_string(v471);
              v427 = nw_endpoint_handler_mode_string(v471);
              v428 = nw_endpoint_handler_copy_current_path(v471);
              v429 = BYTE1(loga[12].isa);
              v430 = nw_endpoint_handler_get_id_string(v474);
              *(_DWORD *)buf = 136448770;
              v481 = "nw_endpoint_proxy_receive_report";
              v431 = "";
              v483 = (uint64_t)v467;
              v482 = 2082;
              if ((v429 & 4) == 0)
                v431 = " during establishment";
              v484 = 2082;
              v485 = (uint64_t)v423;
              v486 = 2082;
              v487 = v425;
              v488 = 2082;
              v489 = v426;
              v490 = 2082;
              v491 = v427;
              v492 = 2114;
              v493 = v428;
              v494 = 1024;
              *(_DWORD *)v495 = error_code;
              *(_WORD *)&v495[4] = 2082;
              *(_QWORD *)&v495[6] = v431;
              *(_WORD *)&v495[14] = 2082;
              *(_QWORD *)&v495[16] = v430;
              *(_WORD *)&v495[24] = 2114;
              *(_QWORD *)&v495[26] = v461;
              _os_log_impl(&dword_182FBE000, v295, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Privacy proxy failed with error %d%{public}s ([C%{public}s] %{public}@)", buf, 0x6Cu);

            }
          }
          else
          {
            if ((v283 & 1) != 0)
            {
LABEL_330:
              if ((v449 & 0x100000000) != 0)
              {
                v203 = 0;
                v204 = 0;
                goto LABEL_305;
              }
              if (v180 && (*((_BYTE *)v42 + 96) & 4) != 0)
                v311 = 5;
              else
                v311 = 3;
              v316 = v471;
              v316->privacy_stance = v311;

              v203 = 0;
              v204 = 0;
              goto LABEL_351;
            }
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v295 = (id)gconnectionLogObj;
            if (os_log_type_enabled(v295, OS_LOG_TYPE_DEFAULT))
            {
              v466 = v295;
              v296 = nw_endpoint_handler_get_id_string(v471);
              v297 = nw_endpoint_handler_dry_run_string(v471);
              v298 = nw_endpoint_handler_copy_endpoint(v471);
              v299 = nw_endpoint_get_logging_description(v298);
              v300 = nw_endpoint_handler_state_string(v471);
              v301 = nw_endpoint_handler_mode_string(v471);
              v302 = nw_endpoint_handler_copy_current_path(v471);
              v303 = BYTE1(loga[12].isa);
              v304 = nw_endpoint_handler_get_id_string(v474);
              *(_DWORD *)buf = 136448770;
              v481 = "nw_endpoint_proxy_receive_report";
              v305 = "";
              v483 = (uint64_t)v296;
              v482 = 2082;
              if ((v303 & 4) == 0)
                v305 = " during establishment";
              v484 = 2082;
              v485 = (uint64_t)v297;
              v486 = 2082;
              v487 = v299;
              v488 = 2082;
              v489 = v300;
              v490 = 2082;
              v491 = v301;
              v492 = 2114;
              v493 = v302;
              v494 = 1024;
              *(_DWORD *)v495 = error_code;
              *(_WORD *)&v495[4] = 2082;
              *(_QWORD *)&v495[6] = v305;
              *(_WORD *)&v495[14] = 2082;
              *(_QWORD *)&v495[16] = v304;
              *(_WORD *)&v495[24] = 2114;
              *(_QWORD *)&v495[26] = v461;
              _os_log_impl(&dword_182FBE000, v466, OS_LOG_TYPE_DEFAULT, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Privacy proxy failed with error %d%{public}s ([C%{public}s] %{public}@)", buf, 0x6Cu);

              v295 = v466;
            }
          }

          v9 = v474;
          v42 = (NWConcrete_nw_endpoint_mode_handler *)loga;
          goto LABEL_330;
        }
        v192 = nw_endpoint_handler_get_minimize_logging(v471);
        v193 = nw_endpoint_handler_get_logging_disabled(v471);
        if (v192)
        {
          if ((v193 & 1) != 0)
          {
            v203 = 0;
            v204 = 0;
            goto LABEL_228;
          }
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v194 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v194, OS_LOG_TYPE_DEBUG))
          {
            v386 = nw_endpoint_handler_get_id_string(v471);
            v387 = nw_endpoint_handler_dry_run_string(v471);
            v388 = nw_endpoint_handler_copy_endpoint(v471);
            v389 = nw_endpoint_get_logging_description(v388);
            v390 = nw_endpoint_handler_state_string(v471);
            v391 = nw_endpoint_handler_mode_string(v471);
            v392 = nw_endpoint_handler_copy_current_path(v471);
            v393 = nw_endpoint_handler_get_id_string(v474);
            *(_DWORD *)buf = 136448258;
            v481 = "nw_endpoint_proxy_receive_report";
            v482 = 2082;
            v483 = (uint64_t)v386;
            v484 = 2082;
            v485 = (uint64_t)v387;
            v486 = 2082;
            v487 = v389;
            v488 = 2082;
            v489 = v390;
            v490 = 2082;
            v491 = v391;
            v492 = 2114;
            v493 = v392;
            v494 = 2082;
            *(_QWORD *)v495 = v393;
            *(_WORD *)&v495[8] = 2114;
            *(_QWORD *)&v495[10] = v461;
            _os_log_impl(&dword_182FBE000, v194, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Privacy proxy failed, not reporting error ([C%{public}s] %{public}@)", buf, 0x5Cu);

          }
          goto LABEL_226;
        }
        if ((v193 & 1) == 0)
        {
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v194 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v194, OS_LOG_TYPE_DEFAULT))
          {
            v195 = nw_endpoint_handler_get_id_string(v471);
            v196 = nw_endpoint_handler_dry_run_string(v471);
            v197 = nw_endpoint_handler_copy_endpoint(v471);
            v198 = nw_endpoint_get_logging_description(v197);
            v199 = nw_endpoint_handler_state_string(v471);
            v200 = nw_endpoint_handler_mode_string(v471);
            v201 = nw_endpoint_handler_copy_current_path(v471);
            v202 = nw_endpoint_handler_get_id_string(v474);
            *(_DWORD *)buf = 136448258;
            v481 = "nw_endpoint_proxy_receive_report";
            v482 = 2082;
            v483 = (uint64_t)v195;
            v484 = 2082;
            v485 = (uint64_t)v196;
            v486 = 2082;
            v487 = v198;
            v488 = 2082;
            v489 = v199;
            v490 = 2082;
            v491 = v200;
            v492 = 2114;
            v493 = v201;
            v494 = 2082;
            *(_QWORD *)v495 = v202;
            *(_WORD *)&v495[8] = 2114;
            *(_QWORD *)&v495[10] = v461;
            _os_log_impl(&dword_182FBE000, v194, OS_LOG_TYPE_DEFAULT, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Privacy proxy failed, not reporting error ([C%{public}s] %{public}@)", buf, 0x5Cu);

          }
LABEL_226:
          v203 = 0;
          v204 = 0;
LABEL_227:

LABEL_228:
          v9 = v474;
          v42 = (NWConcrete_nw_endpoint_mode_handler *)loga;
          goto LABEL_230;
        }
      }
LABEL_229:
      v203 = 0;
      v204 = 0;
      goto LABEL_230;
    }
    v181 = v471;
    v182 = (*((_BYTE *)v471 + 268) & 0x20) == 0;

    v9 = v474;
    if (v182)
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v183 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v183, OS_LOG_TYPE_DEBUG))
      {
        v184 = nw_endpoint_handler_get_id_string(v181);
        v185 = nw_endpoint_handler_dry_run_string(v181);
        v186 = nw_endpoint_handler_copy_endpoint(v181);
        v187 = nw_endpoint_get_logging_description(v186);
        v188 = nw_endpoint_handler_state_string(v181);
        v189 = nw_endpoint_handler_mode_string(v181);
        v190 = nw_endpoint_handler_copy_current_path(v181);
        *(_DWORD *)buf = 136447746;
        v481 = "nw_endpoint_proxy_receive_report";
        v482 = 2082;
        v483 = (uint64_t)v184;
        v484 = 2082;
        v485 = (uint64_t)v185;
        v486 = 2082;
        v487 = v187;
        v488 = 2082;
        v489 = v188;
        v490 = 2082;
        v491 = v189;
        v492 = 2114;
        v493 = v190;
        _os_log_impl(&dword_182FBE000, v183, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Passing up other child report", buf, 0x48u);

      }
      v9 = v474;
    }
LABEL_216:
    nw_endpoint_handler_report(v471, v9, a4, v472);
    goto LABEL_217;
  }
  objc_storeStrong(v43, a1);
  v151 = nw_endpoint_handler_copy_endpoint(v471);
  if (!v151 || !v461)
    goto LABEL_189;
  v152 = v461;
  v153 = (void *)v152[18];
  if (!v153)
  {
LABEL_188:

    goto LABEL_189;
  }
  v154 = xpc_array_get_count(v153) == 0;

  if (v154)
  {
LABEL_189:
    nw_endpoint_handler_report(v471, v474, a4, v472);
    v167 = v471;
    v167->state = 3;

    isa = (uint64_t)loga[11].isa;
    if (isa)
    {
      nw_queue_cancel_source(isa, v168);
      loga[11].isa = 0;
    }
    nw_endpoint_handler_report(v167, 0, a4, 0);
    v170 = (unsigned __int8 *)loga[1].isa;
    v475[0] = MEMORY[0x1E0C809B0];
    v475[1] = 3221225472;
    v475[2] = ___ZL32nw_endpoint_proxy_receive_reportP30NWConcrete_nw_endpoint_handler26nw_endpoint_handler_mode_t21nw_connection_state_tP27nw_endpoint_handler_event_sPU22objcproto11OS_nw_error8NSObjectPU23objcproto12OS_nw_objectS5__block_invoke;
    v475[3] = &unk_1E14A8D20;
    v476 = loga;
    v477 = v474;
    nw_array_apply(v170, (uint64_t)v475);

LABEL_192:
LABEL_217:

    goto LABEL_218;
  }
  v155 = nw_endpoint_copy_cname_array(v151);
  v152 = v155;
  if (!v155 || v155[3] == v155[2])
    goto LABEL_188;
  v156 = nw_endpoint_handler_copy_association(v471, 0);
  if (!v156)
  {
LABEL_187:

    goto LABEL_188;
  }
  v157 = nw_protocol_copy_proxy_definition();
  v465 = v156;
  cached_content_for_protocol = nw_association_get_cached_content_for_protocol(v156, v157);

  if (cached_content_for_protocol
    || (cached_content_for_protocol = (uint64_t)malloc_type_calloc(1uLL, 8uLL, 0xEAFB8F1AuLL)) != 0)
  {
LABEL_180:
    obja = (id)(4
              * networkd_settings_get_int64_with_default((const char *)nw_setting_proxy_fallback_cache_seconds, 1800));
    if ((nw_endpoint_handler_get_logging_disabled(v471) & 1) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v159 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v159, OS_LOG_TYPE_DEBUG))
      {
        v160 = nw_endpoint_handler_get_id_string(v471);
        v454 = nw_endpoint_handler_dry_run_string(v471);
        v459 = nw_endpoint_handler_copy_endpoint(v471);
        v161 = nw_endpoint_get_logging_description(v459);
        v162 = nw_endpoint_handler_state_string(v471);
        v163 = nw_endpoint_handler_mode_string(v471);
        v164 = nw_endpoint_handler_copy_current_path(v471);
        *(_DWORD *)buf = 136448002;
        v481 = "nw_endpoint_proxy_receive_report";
        v482 = 2082;
        v483 = (uint64_t)v160;
        v484 = 2082;
        v485 = (uint64_t)v454;
        v486 = 2082;
        v487 = v161;
        v488 = 2082;
        v489 = v162;
        v490 = 2082;
        v491 = v163;
        v492 = 2114;
        v493 = v164;
        v494 = 2048;
        *(_QWORD *)v495 = obja;
        _os_log_impl(&dword_182FBE000, v159, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Endpoint has alias array, extending cache for %lld seconds", buf, 0x52u);

      }
    }
    v165 = nw_protocol_copy_proxy_definition();
    v166 = time(0);
    nw_association_set_cached_content_for_protocol(v465, v165, cached_content_for_protocol, (uint64_t)obja + v166);

    v156 = v465;
    goto LABEL_187;
  }
  __nwlog_obj();
  v411 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v411, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  v481 = "strict_calloc";
  v482 = 2048;
  v483 = 1;
  v484 = 2048;
  v485 = 8;
  v412 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v412);
  if (!result)
  {
    free(v412);
    cached_content_for_protocol = 0;
    goto LABEL_180;
  }
  __break(1u);
  return result;
}

void sub_1835F27B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,void *a25,uint64_t a26,void *a27,uint64_t a28,void *a29)
{
  void *v29;
  void *v30;

  _Unwind_Resume(a1);
}

void nw_endpoint_proxy_record_result(NWConcrete_nw_endpoint_handler *a1, int a2)
{
  NWConcrete_nw_endpoint_handler *v3;
  NWConcrete_nw_endpoint_handler *v4;
  id *v5;
  id v6;
  unsigned int *cached_content_for_protocol;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  NSObject *v11;
  uint64_t v12;
  void *v13;
  char *v14;
  NSObject *v15;
  os_log_type_t v16;
  char *backtrace_string;
  os_log_type_t v18;
  _BOOL4 v19;
  NSObject *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  int64_t int64_with_default;
  id v25;
  time_t v26;
  os_log_type_t v27;
  uint64_t v28;
  char v29;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v32;
  __int16 v33;
  char *v34;
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  uint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v32 = "nw_endpoint_proxy_record_result";
    v14 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v29 = 0;
    if (__nwlog_fault(v14, &type, &v29))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v15 = objc_claimAutoreleasedReturnValue();
        v16 = type;
        if (os_log_type_enabled(v15, type))
        {
          *(_DWORD *)buf = 136446210;
          v32 = "nw_endpoint_proxy_record_result";
          _os_log_impl(&dword_182FBE000, v15, v16, "%{public}s called with null child_handler", buf, 0xCu);
        }
      }
      else if (v29)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v15 = objc_claimAutoreleasedReturnValue();
        v18 = type;
        v19 = os_log_type_enabled(v15, type);
        if (backtrace_string)
        {
          if (v19)
          {
            *(_DWORD *)buf = 136446466;
            v32 = "nw_endpoint_proxy_record_result";
            v33 = 2082;
            v34 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v15, v18, "%{public}s called with null child_handler, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_44;
        }
        if (v19)
        {
          *(_DWORD *)buf = 136446210;
          v32 = "nw_endpoint_proxy_record_result";
          _os_log_impl(&dword_182FBE000, v15, v18, "%{public}s called with null child_handler, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v15 = objc_claimAutoreleasedReturnValue();
        v27 = type;
        if (os_log_type_enabled(v15, type))
        {
          *(_DWORD *)buf = 136446210;
          v32 = "nw_endpoint_proxy_record_result";
          _os_log_impl(&dword_182FBE000, v15, v27, "%{public}s called with null child_handler, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_44:
    if (v14)
      free(v14);
    goto LABEL_34;
  }
  v5 = v3;
  v6 = v5[7];

  if (!v6)
  {
LABEL_33:

LABEL_34:
    return;
  }
  if (nw_protocol_copy_proxy_definition(void)::onceToken != -1)
    dispatch_once(&nw_protocol_copy_proxy_definition(void)::onceToken, &__block_literal_global_26363);
  cached_content_for_protocol = (unsigned int *)nw_association_get_cached_content_for_protocol(v6, (void *)nw_protocol_copy_proxy_definition(void)::proxy_definition);
  if (cached_content_for_protocol
    || (cached_content_for_protocol = (unsigned int *)malloc_type_calloc(1uLL, 8uLL, 0xEAFB8F1AuLL)) != 0)
  {
    if (a2)
    {
LABEL_8:
      v8 = *cached_content_for_protocol + 1;
      v9 = v8 << 31 >> 31;
      *cached_content_for_protocol = v8;
      if (v9 != v8 || v9 < 0)
      {
        v10 = cached_content_for_protocol;
        if (gLogDatapath)
        {
          __nwlog_obj();
          v11 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
          {
            v12 = *cached_content_for_protocol;
            *(_DWORD *)buf = 136446978;
            v32 = "nw_endpoint_proxy_record_result";
            v33 = 2082;
            v34 = "result_cache->success_count";
            v35 = 2048;
            v36 = 1;
            v37 = 2048;
            v38 = v12;
            _os_log_impl(&dword_182FBE000, v11, OS_LOG_TYPE_DEBUG, "%{public}s Overflow: %{public}s, increment %llu, result %llu", buf, 0x2Au);
          }
          v10 = cached_content_for_protocol;
LABEL_40:

          goto LABEL_29;
        }
        goto LABEL_29;
      }
      goto LABEL_30;
    }
LABEL_26:
    v10 = cached_content_for_protocol + 1;
    v22 = cached_content_for_protocol[1] + 1;
    v23 = v22 << 31 >> 31;
    cached_content_for_protocol[1] = v22;
    if (v23 != v22 || v23 < 0)
    {
      if (gLogDatapath)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
        {
          v28 = *v10;
          *(_DWORD *)buf = 136446978;
          v32 = "nw_endpoint_proxy_record_result";
          v33 = 2082;
          v34 = "result_cache->failure_count";
          v35 = 2048;
          v36 = 1;
          v37 = 2048;
          v38 = v28;
          _os_log_impl(&dword_182FBE000, v11, OS_LOG_TYPE_DEBUG, "%{public}s Overflow: %{public}s, increment %llu, result %llu", buf, 0x2Au);
        }
        goto LABEL_40;
      }
LABEL_29:
      *v10 = -1;
    }
LABEL_30:
    int64_with_default = networkd_settings_get_int64_with_default((const char *)nw_setting_proxy_fallback_cache_seconds, 1800);
    if (nw_protocol_copy_proxy_definition(void)::onceToken != -1)
      dispatch_once(&nw_protocol_copy_proxy_definition(void)::onceToken, &__block_literal_global_26363);
    v25 = (id)nw_protocol_copy_proxy_definition(void)::proxy_definition;
    v26 = time(0);
    nw_association_set_cached_content_for_protocol(v6, v25, (uint64_t)cached_content_for_protocol, v26 + int64_with_default);

    goto LABEL_33;
  }
  __nwlog_obj();
  v20 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v20, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  v32 = "strict_calloc";
  v33 = 2048;
  v34 = (char *)1;
  v35 = 2048;
  v36 = 8;
  v21 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v21))
  {
    free(v21);
    cached_content_for_protocol = 0;
    if (a2)
      goto LABEL_8;
    goto LABEL_26;
  }
  __break(1u);
}

void sub_1835F31F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id nw_protocol_copy_proxy_definition(void)
{
  if (nw_protocol_copy_proxy_definition(void)::onceToken != -1)
    dispatch_once(&nw_protocol_copy_proxy_definition(void)::onceToken, &__block_literal_global_26363);
  return (id)nw_protocol_copy_proxy_definition(void)::proxy_definition;
}

BOOL ___ZL32nw_endpoint_proxy_receive_reportP30NWConcrete_nw_endpoint_handler26nw_endpoint_handler_mode_t21nw_connection_state_tP27nw_endpoint_handler_event_sPU22objcproto11OS_nw_error8NSObjectPU23objcproto12OS_nw_objectS5__block_invoke(uint64_t a1, unint64_t a2, void *a3)
{
  id v5;
  void *v6;
  unint64_t v7;

  v5 = a3;
  v6 = v5;
  v7 = *(unsigned int *)(*(_QWORD *)(a1 + 32) + 24);
  if (v7 > a2 && *(id *)(a1 + 40) != v5)
    nw_endpoint_handler_cancel(v5, 0, 0);

  return v7 > a2;
}

void sub_1835F32D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZL40nw_endpoint_proxy_has_unresolved_proxiesP30NWConcrete_nw_endpoint_handlerPb_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  int mode;
  uint64_t v5;

  mode = nw_proxy_config_get_mode(a3);
  if ((mode & 0xFFFFFFFE) == 2)
  {
    v5 = a1 + 32;
LABEL_5:
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)v5 + 8) + 24) = 1;
    return 1;
  }
  if (mode)
  {
    v5 = a1 + 40;
    goto LABEL_5;
  }
  return 1;
}

void ___ZL32nw_endpoint_proxy_resolve_configP30NWConcrete_nw_endpoint_handler_block_invoke_140(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  unsigned int *v5;
  uint64_t v6;
  _BOOL8 v7;
  void *v8;
  unsigned __int8 *v9;
  id v10;
  NSObject *v11;
  const char *v12;
  void *v13;
  char *v14;
  NSObject *v15;
  os_log_type_t v16;
  char *backtrace_string;
  os_log_type_t v18;
  _BOOL4 v19;
  os_log_type_t v20;
  _QWORD v21[4];
  id v22;
  id v23;
  id v24;
  char v25;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v28;
  __int16 v29;
  void *v30;
  __int16 v31;
  const char *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = *(void **)(a1 + 32);
  if (v4)
  {
    v5 = v4;
    v6 = v5[29];

    if ((_DWORD)v6 == 3)
    {
      if ((int)nw_endpoint_handler_get_state(*(void **)(a1 + 32)) <= 2)
      {
        v7 = nw_array_create();
        v8 = *(void **)(a1 + 48);
        v9 = *(unsigned __int8 **)(*(_QWORD *)(a1 + 40) + 56);
        v21[0] = MEMORY[0x1E0C809B0];
        v21[1] = 3221225472;
        v21[2] = ___ZL32nw_endpoint_proxy_resolve_configP30NWConcrete_nw_endpoint_handler_block_invoke_141;
        v21[3] = &unk_1E14AA9F0;
        v22 = v8;
        v23 = v3;
        v10 = (id)v7;
        v24 = v10;
        nw_array_apply(v9, (uint64_t)v21);
        objc_storeStrong((id *)(*(_QWORD *)(a1 + 40) + 56), (id)v7);
        nw_endpoint_proxy_complete_resolve(*(NWConcrete_nw_endpoint_handler **)(a1 + 32));

      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v11 = (id)gLogObj;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        if (v6 > 5)
          v12 = "unknown-mode";
        else
          v12 = off_1E149FC18[v6];
        *(_DWORD *)buf = 136446722;
        v28 = "nw_endpoint_proxy_resolve_config_block_invoke";
        v29 = 2082;
        v30 = (void *)v12;
        v31 = 2082;
        v32 = "proxy";
        _os_log_impl(&dword_182FBE000, v11, OS_LOG_TYPE_DEFAULT, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
      }

    }
    goto LABEL_11;
  }
  __nwlog_obj();
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v28 = "nw_endpoint_proxy_resolve_config_block_invoke";
  v14 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v25 = 0;
  if (__nwlog_fault(v14, &type, &v25))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v15 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_endpoint_proxy_resolve_config_block_invoke";
        _os_log_impl(&dword_182FBE000, v15, v16, "%{public}s called with null handler", buf, 0xCu);
      }
    }
    else if (v25)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v15 = objc_claimAutoreleasedReturnValue();
      v18 = type;
      v19 = os_log_type_enabled(v15, type);
      if (backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446466;
          v28 = "nw_endpoint_proxy_resolve_config_block_invoke";
          v29 = 2082;
          v30 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v15, v18, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_28;
      }
      if (v19)
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_endpoint_proxy_resolve_config_block_invoke";
        _os_log_impl(&dword_182FBE000, v15, v18, "%{public}s called with null handler, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v15 = objc_claimAutoreleasedReturnValue();
      v20 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_endpoint_proxy_resolve_config_block_invoke";
        _os_log_impl(&dword_182FBE000, v15, v20, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_28:
  if (v14)
    free(v14);
LABEL_11:

}

void sub_1835F3728(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, void *a19)
{
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

void ___ZL32nw_endpoint_proxy_resolve_configP30NWConcrete_nw_endpoint_handler_block_invoke_144(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  unsigned int *v5;
  uint64_t v6;
  _BOOL8 v7;
  void *v8;
  unsigned __int8 *v9;
  id v10;
  NSObject *v11;
  const char *v12;
  void *v13;
  char *v14;
  NSObject *v15;
  os_log_type_t v16;
  char *backtrace_string;
  os_log_type_t v18;
  _BOOL4 v19;
  os_log_type_t v20;
  _QWORD v21[4];
  id v22;
  id v23;
  id v24;
  char v25;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v28;
  __int16 v29;
  void *v30;
  __int16 v31;
  const char *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = *(void **)(a1 + 32);
  if (v4)
  {
    v5 = v4;
    v6 = v5[29];

    if ((_DWORD)v6 == 3)
    {
      if ((int)nw_endpoint_handler_get_state(*(void **)(a1 + 32)) <= 2)
      {
        v7 = nw_array_create();
        v8 = *(void **)(a1 + 48);
        v9 = *(unsigned __int8 **)(*(_QWORD *)(a1 + 40) + 56);
        v21[0] = MEMORY[0x1E0C809B0];
        v21[1] = 3221225472;
        v21[2] = ___ZL32nw_endpoint_proxy_resolve_configP30NWConcrete_nw_endpoint_handler_block_invoke_145;
        v21[3] = &unk_1E14AA9F0;
        v22 = v8;
        v23 = v3;
        v10 = (id)v7;
        v24 = v10;
        nw_array_apply(v9, (uint64_t)v21);
        objc_storeStrong((id *)(*(_QWORD *)(a1 + 40) + 56), (id)v7);
        nw_endpoint_proxy_complete_resolve(*(NWConcrete_nw_endpoint_handler **)(a1 + 32));

      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v11 = (id)gLogObj;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        if (v6 > 5)
          v12 = "unknown-mode";
        else
          v12 = off_1E149FC18[v6];
        *(_DWORD *)buf = 136446722;
        v28 = "nw_endpoint_proxy_resolve_config_block_invoke";
        v29 = 2082;
        v30 = (void *)v12;
        v31 = 2082;
        v32 = "proxy";
        _os_log_impl(&dword_182FBE000, v11, OS_LOG_TYPE_DEFAULT, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
      }

    }
    goto LABEL_11;
  }
  __nwlog_obj();
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v28 = "nw_endpoint_proxy_resolve_config_block_invoke";
  v14 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v25 = 0;
  if (__nwlog_fault(v14, &type, &v25))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v15 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_endpoint_proxy_resolve_config_block_invoke";
        _os_log_impl(&dword_182FBE000, v15, v16, "%{public}s called with null handler", buf, 0xCu);
      }
    }
    else if (v25)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v15 = objc_claimAutoreleasedReturnValue();
      v18 = type;
      v19 = os_log_type_enabled(v15, type);
      if (backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446466;
          v28 = "nw_endpoint_proxy_resolve_config_block_invoke";
          v29 = 2082;
          v30 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v15, v18, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_28;
      }
      if (v19)
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_endpoint_proxy_resolve_config_block_invoke";
        _os_log_impl(&dword_182FBE000, v15, v18, "%{public}s called with null handler, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v15 = objc_claimAutoreleasedReturnValue();
      v20 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_endpoint_proxy_resolve_config_block_invoke";
        _os_log_impl(&dword_182FBE000, v15, v20, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_28:
  if (v14)
    free(v14);
LABEL_11:

}

void sub_1835F3B48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, void *a19)
{
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

uint64_t ___ZL32nw_endpoint_proxy_resolve_configP30NWConcrete_nw_endpoint_handler_block_invoke_145(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  unsigned __int8 *v5;
  _QWORD v7[4];
  id v8;

  v4 = a3;
  if (*(id *)(a1 + 32) == v4)
  {
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 3221225472;
    v7[2] = ___ZL32nw_endpoint_proxy_resolve_configP30NWConcrete_nw_endpoint_handler_block_invoke_2_146;
    v7[3] = &unk_1E14AC200;
    v5 = *(unsigned __int8 **)(a1 + 40);
    v8 = *(id *)(a1 + 48);
    nw_array_apply(v5, (uint64_t)v7);

  }
  else
  {
    nw_array_append(*(_QWORD *)(a1 + 48), v4);
  }

  return 1;
}

uint64_t ___ZL32nw_endpoint_proxy_resolve_configP30NWConcrete_nw_endpoint_handler_block_invoke_2_146(uint64_t a1, int a2, void *object)
{
  nw_array_append(*(_QWORD *)(a1 + 32), object);
  return 1;
}

uint64_t ___ZL32nw_endpoint_proxy_resolve_configP30NWConcrete_nw_endpoint_handler_block_invoke_141(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  unsigned __int8 *v5;
  _QWORD v7[4];
  id v8;

  v4 = a3;
  if (*(id *)(a1 + 32) == v4)
  {
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 3221225472;
    v7[2] = ___ZL32nw_endpoint_proxy_resolve_configP30NWConcrete_nw_endpoint_handler_block_invoke_2;
    v7[3] = &unk_1E14AC200;
    v5 = *(unsigned __int8 **)(a1 + 40);
    v8 = *(id *)(a1 + 48);
    nw_array_apply(v5, (uint64_t)v7);

  }
  else
  {
    nw_array_append(*(_QWORD *)(a1 + 48), v4);
  }

  return 1;
}

uint64_t ___ZL32nw_endpoint_proxy_resolve_configP30NWConcrete_nw_endpoint_handler_block_invoke_2(uint64_t a1, int a2, void *object)
{
  nw_array_append(*(_QWORD *)(a1 + 32), object);
  return 1;
}

void nw_endpoint_proxy_add_config_if_applicable(void *a1, void *a2, void *a3, void *a4, void *a5, char a6)
{
  NWConcrete_nw_endpoint_handler *v11;
  id v12;
  id v13;
  NWConcrete_nw_endpoint_mode_handler *v14;
  int v15;
  int is_opaque;
  int v17;
  int minimize_logging;
  char logging_disabled;
  NSObject *v20;
  const char *v21;
  const char *v22;
  nw_endpoint_t v23;
  const char *v24;
  const char *v25;
  const char *v26;
  id v27;
  NWConcrete_nw_proxy_config *v28;
  void *v29;
  void *v30;
  id v31;
  void *v32;
  id v33;
  void *v34;
  NWConcrete_nw_protocol_options *options;
  _QWORD *v36;
  BOOL v37;
  NSObject *v38;
  NSObject *v39;
  const char *id_string;
  const char *v41;
  nw_endpoint_t v42;
  const char *logging_description;
  const char *v44;
  const char *v45;
  id v46;
  const char *v47;
  int v48;
  char v49;
  NSObject *v50;
  const char *v51;
  const char *v52;
  nw_endpoint_t v53;
  const char *v54;
  const char *v55;
  const char *v56;
  id v57;
  NWConcrete_nw_proxy_config *v58;
  void *v59;
  int v60;
  char v61;
  NSObject *v62;
  const char *v63;
  const char *v64;
  const char *v65;
  const char *v66;
  const char *v67;
  id v68;
  void *v69;
  const char *v70;
  void *v71;
  char *v72;
  NSObject *v73;
  os_log_type_t v74;
  void *v75;
  char *v76;
  NSObject *v77;
  os_log_type_t v78;
  char *v79;
  NSObject *v80;
  os_log_type_t v81;
  _BOOL4 v82;
  NWConcrete_nw_endpoint_mode_handler *v83;
  char *v84;
  NSObject *v85;
  os_log_type_t v86;
  _BOOL4 v87;
  os_log_type_t v88;
  os_log_type_t v89;
  const char *v90;
  const char *v91;
  nw_endpoint_t v92;
  const char *v93;
  const char *v94;
  const char *v95;
  id v96;
  void *v97;
  char *v98;
  NSObject *v99;
  os_log_type_t v100;
  NSObject *v101;
  const char *v102;
  const char *v103;
  const char *v104;
  const char *v105;
  id v106;
  void *v107;
  const char *v108;
  char *backtrace_string;
  NSObject *v110;
  os_log_type_t v111;
  _BOOL4 v112;
  const char *v113;
  const char *v114;
  nw_endpoint_t v115;
  const char *v116;
  const char *v117;
  const char *v118;
  id v119;
  os_log_type_t v120;
  _BOOL4 v121;
  NWConcrete_nw_proxy_config *merged;
  NSObject *v123;
  const char *v124;
  const char *v125;
  const char *v126;
  const char *v127;
  const char *v128;
  id v129;
  const char *v130;
  const char *v131;
  const char *v132;
  nw_endpoint_t v133;
  const char *v134;
  const char *v135;
  const char *v136;
  id v137;
  const char *v138;
  nw_endpoint_t v139;
  const char *v140;
  NSObject *log;
  nw_endpoint_t loga;
  NWConcrete_nw_endpoint_mode_handler *v143;
  NWConcrete_nw_endpoint_mode_handler *v144;
  NWConcrete_nw_endpoint_mode_handler *v145;
  NWConcrete_nw_endpoint_mode_handler *v146;
  NWConcrete_nw_endpoint_mode_handler *v147;
  NWConcrete_nw_endpoint_mode_handler *v148;
  NWConcrete_nw_endpoint_mode_handler *v149;
  NWConcrete_nw_endpoint_mode_handler *v150;
  NWConcrete_nw_endpoint_mode_handler *v151;
  char v152;
  nw_endpoint_t v153;
  nw_endpoint_t v154;
  id v155;
  void *v156;
  unsigned __int8 *object;
  id v158;
  _QWORD v159[4];
  NWConcrete_nw_endpoint_mode_handler *v160;
  NWConcrete_nw_endpoint_handler *v161;
  os_log_type_t *v162;
  os_log_type_t v163[4];
  os_log_type_t type[8];
  os_log_type_t *v165;
  uint64_t v166;
  uint64_t (*v167)(uint64_t, uint64_t);
  void (*v168)(uint64_t);
  id v169;
  char v170;
  os_log_type_t v171;
  uint8_t buf[4];
  const char *v173;
  __int16 v174;
  void *v175;
  __int16 v176;
  const char *v177;
  __int16 v178;
  const char *v179;
  __int16 v180;
  const char *v181;
  __int16 v182;
  const char *v183;
  __int16 v184;
  id v185;
  __int16 v186;
  const char *v187;
  uint64_t v188;

  v188 = *MEMORY[0x1E0C80C00];
  v11 = a1;
  v12 = a2;
  v13 = a3;
  object = a4;
  v158 = a5;
  v156 = v12;
  if (v13)
  {
    v152 = a6;
    *(_QWORD *)type = 0;
    v165 = type;
    v166 = 0x3032000000;
    v167 = __Block_byref_object_copy__26313;
    v168 = __Block_byref_object_dispose__26314;
    v169 = v13;
    v14 = nw_endpoint_handler_copy_proxy(v11);
    if (*((_QWORD *)v14 + 7))
    {
      v154 = nw_endpoint_handler_copy_endpoint(v11);
      v155 = nw_endpoint_handler_copy_current_path(v11);
      if (!nw_proxy_config_supports_connection(*((void **)v165 + 5), v154, v12, v155))
      {
        if ((nw_endpoint_handler_get_logging_disabled(v11) & 1) == 0)
        {
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v39 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG))
          {
            v144 = v14;
            id_string = nw_endpoint_handler_get_id_string(v11);
            v41 = nw_endpoint_handler_dry_run_string(v11);
            v42 = nw_endpoint_handler_copy_endpoint(v11);
            logging_description = nw_endpoint_get_logging_description(v42);
            v44 = nw_endpoint_handler_state_string(v11);
            v45 = nw_endpoint_handler_mode_string(v11);
            v46 = nw_endpoint_handler_copy_current_path(v11);
            v47 = (const char *)*((_QWORD *)v165 + 5);
            *(_DWORD *)buf = 136448002;
            v173 = "nw_endpoint_proxy_add_config_if_applicable";
            v174 = 2082;
            v175 = (void *)id_string;
            v176 = 2082;
            v177 = v41;
            v178 = 2082;
            v179 = logging_description;
            v180 = 2082;
            v181 = v44;
            v182 = 2082;
            v183 = v45;
            v184 = 2114;
            v185 = v46;
            v186 = 2114;
            v187 = v47;
            _os_log_impl(&dword_182FBE000, v39, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Skipping proxy %{public}@, not eligible", buf, 0x52u);

            v14 = v144;
          }

        }
        goto LABEL_153;
      }
      v15 = nw_proxy_config_get_type(*((void **)v165 + 5));
      is_opaque = nw_parameters_get_https_proxy_is_opaque(v12);
      if (v15 == 4001)
      {
        v17 = is_opaque;
        if (nw_parameters_get_https_proxy_over_tls(v12))
        {
          minimize_logging = nw_endpoint_handler_get_minimize_logging(v11);
          logging_disabled = nw_endpoint_handler_get_logging_disabled(v11);
          if (minimize_logging)
          {
            if ((logging_disabled & 1) != 0)
            {
LABEL_13:
              v28 = nw_proxy_config_copy(*((void **)v165 + 5));
              v29 = (void *)*((_QWORD *)v165 + 5);
              *((_QWORD *)v165 + 5) = v28;

              nw_proxy_config_set_type(*((void **)v165 + 5), 4002);
              *(_DWORD *)v163 = 4;
              v30 = (void *)*((_QWORD *)v165 + 5);
              if (nw_protocol_setup_tcp_definition(void)::onceToken != -1)
                dispatch_once(&nw_protocol_setup_tcp_definition(void)::onceToken, &__block_literal_global_62963);
              v31 = (id)g_tcp_definition;
              v32 = nw_proxy_config_copy_protocol_stack(v30, v31, v163);

              v33 = v156;
              if (v33)
              {
                v34 = (void *)nw_protocol_boringssl_copy_definition();
                options = nw_protocol_create_options(v34);

                v36 = v33;
                if ((os_variant_allows_internal_security_policies() & 1) != 0)
                {
                  v37 = (v36[12] & 0x200000000000) == 0;

                  if (!v37)
                  {
                    v38 = options;
                    sec_protocol_options_set_peer_authentication_required(v38, 0);

                    options = (NWConcrete_nw_protocol_options *)v38;
                  }
                }
                else
                {

                }
LABEL_37:

                nw_protocol_stack_append_application_protocol(v32, options);
LABEL_131:
                if ((v152 & 1) == 0)
                {
                  if (nw_proxy_config_get_mode(*((void **)v165 + 5)) == 1
                    && (v121 = nw_proxy_config_use_over_privacy_proxy(*((void **)v165 + 5)), object)
                    && v121
                    && *((_QWORD *)object + 2) != *((_QWORD *)object + 3))
                  {
                    v159[0] = MEMORY[0x1E0C809B0];
                    v159[1] = 3221225472;
                    v159[2] = ___ZL42nw_endpoint_proxy_add_config_if_applicableP30NWConcrete_nw_endpoint_handlerPU27objcproto16OS_nw_parameters8NSObjectPU29objcproto18OS_nw_proxy_configS1_PU22objcproto11OS_nw_arrayS1_S5_b_block_invoke;
                    v159[3] = &unk_1E14A51E8;
                    v162 = type;
                    v160 = v14;
                    v161 = v11;
                    nw_array_apply(object, (uint64_t)v159);

                    merged = (NWConcrete_nw_proxy_config *)v160;
                  }
                  else if (v158 && nw_proxy_config_is_privacy_proxy(*((void **)v165 + 5), 0))
                  {
                    merged = nw_proxy_config_create_merged(*((void **)v165 + 5), v158);
                    nw_array_append(*((_QWORD *)v14 + 7), merged);
                    if ((nw_endpoint_handler_get_logging_disabled(v11) & 1) == 0)
                    {
                      if (__nwlog_connection_log::onceToken != -1)
                        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                      v123 = (id)gconnectionLogObj;
                      if (os_log_type_enabled(v123, OS_LOG_TYPE_DEBUG))
                      {
                        v150 = v14;
                        v124 = nw_endpoint_handler_get_id_string(v11);
                        v125 = nw_endpoint_handler_dry_run_string(v11);
                        v153 = nw_endpoint_handler_copy_endpoint(v11);
                        v126 = nw_endpoint_get_logging_description(v153);
                        v127 = nw_endpoint_handler_state_string(v11);
                        v128 = nw_endpoint_handler_mode_string(v11);
                        v129 = nw_endpoint_handler_copy_current_path(v11);
                        v130 = (const char *)*((_QWORD *)v165 + 5);
                        *(_DWORD *)buf = 136448002;
                        v173 = "nw_endpoint_proxy_add_config_if_applicable";
                        v174 = 2082;
                        v175 = (void *)v124;
                        v176 = 2082;
                        v177 = v125;
                        v178 = 2082;
                        v179 = v126;
                        v180 = 2082;
                        v181 = v127;
                        v182 = 2082;
                        v183 = v128;
                        v184 = 2114;
                        v185 = v129;
                        v186 = 2114;
                        v187 = v130;
                        _os_log_impl(&dword_182FBE000, v123, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Adding proxy merged with companion %{public}@", buf, 0x52u);

                        v14 = v150;
                      }

                    }
                  }
                  else
                  {
                    nw_array_append(*((_QWORD *)v14 + 7), *((void **)v165 + 5));
                    if ((nw_endpoint_handler_get_logging_disabled(v11) & 1) != 0)
                      goto LABEL_151;
                    if (__nwlog_connection_log::onceToken != -1)
                      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                    merged = (NWConcrete_nw_proxy_config *)(id)gconnectionLogObj;
                    if (os_log_type_enabled(&merged->super, OS_LOG_TYPE_DEBUG))
                    {
                      v151 = v14;
                      v131 = nw_endpoint_handler_get_id_string(v11);
                      v132 = nw_endpoint_handler_dry_run_string(v11);
                      v133 = nw_endpoint_handler_copy_endpoint(v11);
                      v134 = nw_endpoint_get_logging_description(v133);
                      v135 = nw_endpoint_handler_state_string(v11);
                      v136 = nw_endpoint_handler_mode_string(v11);
                      v137 = nw_endpoint_handler_copy_current_path(v11);
                      v138 = (const char *)*((_QWORD *)v165 + 5);
                      *(_DWORD *)buf = 136448002;
                      v173 = "nw_endpoint_proxy_add_config_if_applicable";
                      v174 = 2082;
                      v175 = (void *)v131;
                      v176 = 2082;
                      v177 = v132;
                      v178 = 2082;
                      v179 = v134;
                      v180 = 2082;
                      v181 = v135;
                      v182 = 2082;
                      v183 = v136;
                      v184 = 2114;
                      v185 = v137;
                      v186 = 2114;
                      v187 = v138;
                      _os_log_impl(&dword_182FBE000, &merged->super, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Adding proxy %{public}@", buf, 0x52u);

                      v14 = v151;
                    }
                  }

LABEL_151:
                  if (nw_proxy_config_prohibits_direct(*((void **)v165 + 5)))
                    *((_BYTE *)v14 + 96) |= 0x20u;
                }
LABEL_153:

LABEL_154:
                _Block_object_dispose(type, 8);

                goto LABEL_155;
              }
              __nwlog_obj();
              v97 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 136446210;
              v173 = "nw_endpoint_proxy_copy_tls_proxy_options";
              v98 = (char *)_os_log_send_and_compose_impl();

              v171 = OS_LOG_TYPE_ERROR;
              v170 = 0;
              if (__nwlog_fault(v98, &v171, &v170))
              {
                if (v171 == OS_LOG_TYPE_FAULT)
                {
                  __nwlog_obj();
                  v99 = objc_claimAutoreleasedReturnValue();
                  v100 = v171;
                  if (os_log_type_enabled(v99, v171))
                  {
                    *(_DWORD *)buf = 136446210;
                    v173 = "nw_endpoint_proxy_copy_tls_proxy_options";
                    _os_log_impl(&dword_182FBE000, v99, v100, "%{public}s called with null parameters", buf, 0xCu);
                  }
                }
                else
                {
                  if (v170)
                  {
                    backtrace_string = (char *)__nw_create_backtrace_string();
                    __nwlog_obj();
                    v110 = objc_claimAutoreleasedReturnValue();
                    v111 = v171;
                    v112 = os_log_type_enabled(v110, v171);
                    if (backtrace_string)
                    {
                      if (v112)
                      {
                        *(_DWORD *)buf = 136446466;
                        v173 = "nw_endpoint_proxy_copy_tls_proxy_options";
                        v174 = 2082;
                        v175 = backtrace_string;
                        _os_log_impl(&dword_182FBE000, v110, v111, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
                      }

                      free(backtrace_string);
                    }
                    else
                    {
                      if (v112)
                      {
                        *(_DWORD *)buf = 136446210;
                        v173 = "nw_endpoint_proxy_copy_tls_proxy_options";
                        _os_log_impl(&dword_182FBE000, v110, v111, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
                      }

                    }
                    goto LABEL_125;
                  }
                  __nwlog_obj();
                  v99 = objc_claimAutoreleasedReturnValue();
                  v120 = v171;
                  if (os_log_type_enabled(v99, v171))
                  {
                    *(_DWORD *)buf = 136446210;
                    v173 = "nw_endpoint_proxy_copy_tls_proxy_options";
                    _os_log_impl(&dword_182FBE000, v99, v120, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
                  }
                }

              }
LABEL_125:
              if (v98)
                free(v98);
              options = 0;
              goto LABEL_37;
            }
            v147 = v14;
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v20 = (id)gconnectionLogObj;
            if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
            {
              v90 = nw_endpoint_handler_get_id_string(v11);
              v91 = nw_endpoint_handler_dry_run_string(v11);
              v92 = nw_endpoint_handler_copy_endpoint(v11);
              v93 = nw_endpoint_get_logging_description(v92);
              v94 = nw_endpoint_handler_state_string(v11);
              v95 = nw_endpoint_handler_mode_string(v11);
              v96 = nw_endpoint_handler_copy_current_path(v11);
              *(_DWORD *)buf = 136447746;
              v173 = "nw_endpoint_proxy_add_config_if_applicable";
              v174 = 2082;
              v175 = (void *)v90;
              v176 = 2082;
              v177 = v91;
              v178 = 2082;
              v179 = v93;
              v180 = 2082;
              v181 = v94;
              v182 = 2082;
              v183 = v95;
              v184 = 2114;
              v185 = v96;
              _os_log_impl(&dword_182FBE000, v20, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Running HTTP Connect proxy over TLS", buf, 0x48u);

              v14 = v147;
            }
          }
          else
          {
            if ((logging_disabled & 1) != 0)
              goto LABEL_13;
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v20 = (id)gconnectionLogObj;
            if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
            {
              v143 = v14;
              v21 = nw_endpoint_handler_get_id_string(v11);
              v22 = nw_endpoint_handler_dry_run_string(v11);
              v23 = nw_endpoint_handler_copy_endpoint(v11);
              v24 = nw_endpoint_get_logging_description(v23);
              v25 = nw_endpoint_handler_state_string(v11);
              v26 = nw_endpoint_handler_mode_string(v11);
              v27 = nw_endpoint_handler_copy_current_path(v11);
              *(_DWORD *)buf = 136447746;
              v173 = "nw_endpoint_proxy_add_config_if_applicable";
              v174 = 2082;
              v175 = (void *)v21;
              v176 = 2082;
              v177 = v22;
              v178 = 2082;
              v179 = v24;
              v180 = 2082;
              v181 = v25;
              v182 = 2082;
              v183 = v26;
              v184 = 2114;
              v185 = v27;
              _os_log_impl(&dword_182FBE000, v20, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Running HTTP Connect proxy over TLS", buf, 0x48u);

              v14 = v143;
            }
          }

          goto LABEL_13;
        }
        if (v17)
        {
          if (nw_proxy_config_override_opaque_https(*((void **)v165 + 5)))
          {
            v48 = nw_endpoint_handler_get_minimize_logging(v11);
            v49 = nw_endpoint_handler_get_logging_disabled(v11);
            if (v48)
            {
              v149 = v14;
              if ((v49 & 1) == 0)
              {
                if (__nwlog_connection_log::onceToken != -1)
                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                v50 = (id)gconnectionLogObj;
                if (os_log_type_enabled(v50, OS_LOG_TYPE_DEBUG))
                {
                  v113 = nw_endpoint_handler_get_id_string(v11);
                  v114 = nw_endpoint_handler_dry_run_string(v11);
                  v115 = nw_endpoint_handler_copy_endpoint(v11);
                  v116 = nw_endpoint_get_logging_description(v115);
                  v117 = nw_endpoint_handler_state_string(v11);
                  v118 = nw_endpoint_handler_mode_string(v11);
                  v119 = nw_endpoint_handler_copy_current_path(v11);
                  *(_DWORD *)buf = 136447746;
                  v173 = "nw_endpoint_proxy_add_config_if_applicable";
                  v174 = 2082;
                  v175 = (void *)v113;
                  v176 = 2082;
                  v177 = v114;
                  v178 = 2082;
                  v179 = v116;
                  v180 = 2082;
                  v181 = v117;
                  v182 = 2082;
                  v183 = v118;
                  v184 = 2114;
                  v185 = v119;
                  _os_log_impl(&dword_182FBE000, v50, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Client overrode HTTP Connect proxies to be transparent", buf, 0x48u);

                  v14 = v149;
                }
                goto LABEL_33;
              }
            }
            else if ((v49 & 1) == 0)
            {
              if (__nwlog_connection_log::onceToken != -1)
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
              v50 = (id)gconnectionLogObj;
              if (os_log_type_enabled(v50, OS_LOG_TYPE_INFO))
              {
                v145 = v14;
                v51 = nw_endpoint_handler_get_id_string(v11);
                v52 = nw_endpoint_handler_dry_run_string(v11);
                v53 = nw_endpoint_handler_copy_endpoint(v11);
                v54 = nw_endpoint_get_logging_description(v53);
                v55 = nw_endpoint_handler_state_string(v11);
                v56 = nw_endpoint_handler_mode_string(v11);
                v57 = nw_endpoint_handler_copy_current_path(v11);
                *(_DWORD *)buf = 136447746;
                v173 = "nw_endpoint_proxy_add_config_if_applicable";
                v174 = 2082;
                v175 = (void *)v51;
                v176 = 2082;
                v177 = v52;
                v178 = 2082;
                v179 = v54;
                v180 = 2082;
                v181 = v55;
                v182 = 2082;
                v183 = v56;
                v184 = 2114;
                v185 = v57;
                _os_log_impl(&dword_182FBE000, v50, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Client overrode HTTP Connect proxies to be transparent", buf, 0x48u);

                v14 = v145;
              }
LABEL_33:

            }
LABEL_129:
            if ((*((_BYTE *)v14 + 98) & 1) == 0 || (*((_BYTE *)v14 + 97) & 1) != 0)
              goto LABEL_153;
            goto LABEL_131;
          }
          v58 = nw_proxy_config_copy(*((void **)v165 + 5));
          v59 = (void *)*((_QWORD *)v165 + 5);
          *((_QWORD *)v165 + 5) = v58;

          v15 = 2002;
          nw_proxy_config_set_type(*((void **)v165 + 5), 2002);
        }
        else
        {
          v15 = 4001;
        }
        v60 = nw_endpoint_handler_get_minimize_logging(v11);
        v61 = nw_endpoint_handler_get_logging_disabled(v11);
        if (v60)
        {
          v148 = v14;
          if ((v61 & 1) != 0)
          {
            if (v15 == 4001)
              goto LABEL_129;
LABEL_49:
            if (v15 != 2002)
            {
              if (v15 == 2001 && (*((char *)v14 + 97) & 0x80000000) == 0)
                goto LABEL_153;
              goto LABEL_131;
            }
            goto LABEL_129;
          }
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v101 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v101, OS_LOG_TYPE_DEBUG))
          {
            v140 = nw_endpoint_handler_get_id_string(v11);
            v102 = nw_endpoint_handler_dry_run_string(v11);
            loga = nw_endpoint_handler_copy_endpoint(v11);
            v103 = nw_endpoint_get_logging_description(loga);
            v104 = nw_endpoint_handler_state_string(v11);
            v105 = nw_endpoint_handler_mode_string(v11);
            v106 = nw_endpoint_handler_copy_current_path(v11);
            v107 = v106;
            *(_DWORD *)buf = 136448002;
            v173 = "nw_endpoint_proxy_add_config_if_applicable";
            v108 = "not ";
            v175 = (void *)v140;
            v174 = 2082;
            if (v17)
              v108 = "";
            v176 = 2082;
            v177 = v102;
            v178 = 2082;
            v179 = v103;
            v180 = 2082;
            v181 = v104;
            v182 = 2082;
            v183 = v105;
            v184 = 2114;
            v185 = v106;
            v186 = 2082;
            v187 = v108;
            v62 = v101;
            _os_log_impl(&dword_182FBE000, v101, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] HTTP Connect proxies are %{public}sopaque", buf, 0x52u);

            v14 = v148;
          }
          else
          {
            v62 = v101;
          }
        }
        else
        {
          if ((v61 & 1) != 0)
            goto LABEL_48;
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v62 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v62, OS_LOG_TYPE_INFO))
          {
            v146 = v14;
            v63 = nw_endpoint_handler_get_id_string(v11);
            v64 = nw_endpoint_handler_dry_run_string(v11);
            log = v62;
            v139 = nw_endpoint_handler_copy_endpoint(v11);
            v65 = nw_endpoint_get_logging_description(v139);
            v66 = nw_endpoint_handler_state_string(v11);
            v67 = nw_endpoint_handler_mode_string(v11);
            v68 = nw_endpoint_handler_copy_current_path(v11);
            v69 = v68;
            *(_DWORD *)buf = 136448002;
            v173 = "nw_endpoint_proxy_add_config_if_applicable";
            v70 = "not ";
            v175 = (void *)v63;
            v174 = 2082;
            if (v17)
              v70 = "";
            v176 = 2082;
            v177 = v64;
            v178 = 2082;
            v179 = v65;
            v180 = 2082;
            v181 = v66;
            v182 = 2082;
            v183 = v67;
            v184 = 2114;
            v185 = v68;
            v186 = 2082;
            v187 = v70;
            v62 = log;
            _os_log_impl(&dword_182FBE000, log, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] HTTP Connect proxies are %{public}sopaque", buf, 0x52u);

            v14 = v146;
          }
        }

      }
LABEL_48:
      if (v15 == 4001)
        goto LABEL_129;
      goto LABEL_49;
    }
    __nwlog_obj();
    v75 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v173 = "nw_endpoint_proxy_add_config_if_applicable";
    v76 = (char *)_os_log_send_and_compose_impl();

    v163[0] = OS_LOG_TYPE_ERROR;
    v171 = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v76, v163, &v171))
    {
      if (v163[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v77 = objc_claimAutoreleasedReturnValue();
        v78 = v163[0];
        if (os_log_type_enabled(v77, v163[0]))
        {
          *(_DWORD *)buf = 136446210;
          v173 = "nw_endpoint_proxy_add_config_if_applicable";
          _os_log_impl(&dword_182FBE000, v77, v78, "%{public}s called with null endpoint_proxy->parsed_proxy_configs", buf, 0xCu);
        }
      }
      else
      {
        if (v171)
        {
          v83 = v14;
          v84 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v85 = objc_claimAutoreleasedReturnValue();
          v86 = v163[0];
          v87 = os_log_type_enabled(v85, v163[0]);
          if (v84)
          {
            if (v87)
            {
              *(_DWORD *)buf = 136446466;
              v173 = "nw_endpoint_proxy_add_config_if_applicable";
              v174 = 2082;
              v175 = v84;
              _os_log_impl(&dword_182FBE000, v85, v86, "%{public}s called with null endpoint_proxy->parsed_proxy_configs, dumping backtrace:%{public}s", buf, 0x16u);
            }

            v14 = v83;
            free(v84);
          }
          else
          {
            if (v87)
            {
              *(_DWORD *)buf = 136446210;
              v173 = "nw_endpoint_proxy_add_config_if_applicable";
              _os_log_impl(&dword_182FBE000, v85, v86, "%{public}s called with null endpoint_proxy->parsed_proxy_configs, no backtrace", buf, 0xCu);
            }

            v14 = v83;
          }
          goto LABEL_97;
        }
        __nwlog_obj();
        v77 = objc_claimAutoreleasedReturnValue();
        v89 = v163[0];
        if (os_log_type_enabled(v77, v163[0]))
        {
          *(_DWORD *)buf = 136446210;
          v173 = "nw_endpoint_proxy_add_config_if_applicable";
          _os_log_impl(&dword_182FBE000, v77, v89, "%{public}s called with null endpoint_proxy->parsed_proxy_configs, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_97:
    if (v76)
      free(v76);
    goto LABEL_154;
  }
  __nwlog_obj();
  v71 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v173 = "nw_endpoint_proxy_add_config_if_applicable";
  v72 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  v163[0] = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v72, type, v163))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v73 = objc_claimAutoreleasedReturnValue();
      v74 = type[0];
      if (os_log_type_enabled(v73, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v173 = "nw_endpoint_proxy_add_config_if_applicable";
        _os_log_impl(&dword_182FBE000, v73, v74, "%{public}s called with null original_config", buf, 0xCu);
      }
    }
    else
    {
      if (v163[0])
      {
        v79 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v80 = objc_claimAutoreleasedReturnValue();
        v81 = type[0];
        v82 = os_log_type_enabled(v80, type[0]);
        if (v79)
        {
          if (v82)
          {
            *(_DWORD *)buf = 136446466;
            v173 = "nw_endpoint_proxy_add_config_if_applicable";
            v174 = 2082;
            v175 = v79;
            _os_log_impl(&dword_182FBE000, v80, v81, "%{public}s called with null original_config, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v79);
        }
        else
        {
          if (v82)
          {
            *(_DWORD *)buf = 136446210;
            v173 = "nw_endpoint_proxy_add_config_if_applicable";
            _os_log_impl(&dword_182FBE000, v80, v81, "%{public}s called with null original_config, no backtrace", buf, 0xCu);
          }

        }
        goto LABEL_92;
      }
      __nwlog_obj();
      v73 = objc_claimAutoreleasedReturnValue();
      v88 = type[0];
      if (os_log_type_enabled(v73, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v173 = "nw_endpoint_proxy_add_config_if_applicable";
        _os_log_impl(&dword_182FBE000, v73, v88, "%{public}s called with null original_config, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_92:
  if (v72)
    free(v72);
LABEL_155:

}

void sub_1835F5348(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, uint64_t a17, void *a18, void *a19, uint64_t a20,void *a21,void *a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,id a37)
{
  void *v37;
  void *v38;
  void *v39;

  _Block_object_dispose(&a32, 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZL42nw_endpoint_proxy_add_config_if_applicableP30NWConcrete_nw_endpoint_handlerPU27objcproto16OS_nw_parameters8NSObjectPU29objcproto18OS_nw_proxy_configS1_PU22objcproto11OS_nw_arrayS1_S5_b_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  NWConcrete_nw_proxy_config *merged;
  NSObject *v6;
  const char *id_string;
  const char *v8;
  nw_endpoint_t v9;
  const char *logging_description;
  const char *v11;
  const char *v12;
  id v13;
  int v15;
  const char *v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  const char *v26;
  __int16 v27;
  id v28;
  __int16 v29;
  NWConcrete_nw_proxy_config *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  merged = nw_proxy_config_create_merged(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), v4);
  nw_array_append(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 56), merged);
  if ((nw_endpoint_handler_get_logging_disabled(*(void **)(a1 + 40)) & 1) == 0)
  {
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v6 = (id)gconnectionLogObj;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      id_string = nw_endpoint_handler_get_id_string(*(void **)(a1 + 40));
      v8 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 40));
      v9 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 40));
      logging_description = nw_endpoint_get_logging_description(v9);
      v11 = nw_endpoint_handler_state_string(*(void **)(a1 + 40));
      v12 = nw_endpoint_handler_mode_string(*(void **)(a1 + 40));
      v13 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 40));
      v15 = 136448002;
      v16 = "nw_endpoint_proxy_add_config_if_applicable_block_invoke";
      v17 = 2082;
      v18 = id_string;
      v19 = 2082;
      v20 = v8;
      v21 = 2082;
      v22 = logging_description;
      v23 = 2082;
      v24 = v11;
      v25 = 2082;
      v26 = v12;
      v27 = 2114;
      v28 = v13;
      v29 = 2114;
      v30 = merged;
      _os_log_impl(&dword_182FBE000, v6, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Adding merged proxy %{public}@", (uint8_t *)&v15, 0x52u);

    }
  }

  return 1;
}

void sub_1835F56E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

uint64_t __nw_endpoint_proxy_copy_synthesized_url_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  char *identifier;
  _QWORD *v5;
  _BOOL4 v6;
  uint64_t result;

  identifier = nw_protocol_definition_get_identifier(a3);
  v5 = (_QWORD *)nw_protocol_boringssl_identifier();
  if (!v5)
    return 1;
  v6 = nw_protocols_are_equal(identifier, v5);
  result = 1;
  if (v6)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
    return 0;
  }
  return result;
}

void sub_1835F5908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t nw_endpoint_proxy_match_pattern_to_endpoint(void *a1, const char *a2)
{
  id v3;
  void *v4;
  NSObject *v5;
  int v6;
  uint64_t domain_for_policy;
  const sockaddr *address;
  const char *v9;
  NSObject *v10;
  int sa_family;
  char *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  uint64_t v15;
  NSObject *v16;
  addrinfo *v17;
  uint64_t v18;
  unsigned __int8 *v19;
  int v20;
  uint64_t v22;
  size_t v23;
  int v24;
  const char *v26;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  BOOL v36;
  void *v37;
  char *v38;
  NSObject *v39;
  os_log_type_t v40;
  void *v41;
  os_log_type_t v42;
  char *backtrace_string;
  os_log_type_t v44;
  _BOOL4 v45;
  os_log_type_t v46;
  _BOOL4 v47;
  NSObject *v48;
  const char *v49;
  NSObject *v50;
  os_log_type_t v51;
  os_log_type_t v52;
  char v53;
  uint64_t v54;
  _QWORD v55[2];
  int v56;
  uint64_t __dst;
  uint64_t v58;
  uint64_t v59;
  int v60;
  _BYTE buf[22];
  __int16 v62;
  const char *v63;
  __int16 v64;
  const char *v65;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_endpoint_proxy_match_pattern_to_endpoint";
    v38 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(__dst) = 16;
    LOBYTE(v54) = 0;
    if (!__nwlog_fault(v38, &__dst, &v54))
      goto LABEL_105;
    if (__dst == 17)
    {
      __nwlog_obj();
      v39 = objc_claimAutoreleasedReturnValue();
      v40 = __dst;
      if (os_log_type_enabled(v39, (os_log_type_t)__dst))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_endpoint_proxy_match_pattern_to_endpoint";
        _os_log_impl(&dword_182FBE000, v39, v40, "%{public}s called with null endpoint", buf, 0xCu);
      }
      goto LABEL_104;
    }
    if (!(_BYTE)v54)
    {
      __nwlog_obj();
      v39 = objc_claimAutoreleasedReturnValue();
      v51 = __dst;
      if (os_log_type_enabled(v39, (os_log_type_t)__dst))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_endpoint_proxy_match_pattern_to_endpoint";
        _os_log_impl(&dword_182FBE000, v39, v51, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_104;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v39 = objc_claimAutoreleasedReturnValue();
    v44 = __dst;
    v45 = os_log_type_enabled(v39, (os_log_type_t)__dst);
    if (!backtrace_string)
    {
      if (v45)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_endpoint_proxy_match_pattern_to_endpoint";
        _os_log_impl(&dword_182FBE000, v39, v44, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
      goto LABEL_104;
    }
    if (v45)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_endpoint_proxy_match_pattern_to_endpoint";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = backtrace_string;
      _os_log_impl(&dword_182FBE000, v39, v44, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_84;
  }
  if (!a2)
  {
    __nwlog_obj();
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_endpoint_proxy_match_pattern_to_endpoint";
    v38 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(__dst) = 16;
    LOBYTE(v54) = 0;
    if (!__nwlog_fault(v38, &__dst, &v54))
      goto LABEL_105;
    if (__dst == 17)
    {
      __nwlog_obj();
      v39 = objc_claimAutoreleasedReturnValue();
      v42 = __dst;
      if (os_log_type_enabled(v39, (os_log_type_t)__dst))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_endpoint_proxy_match_pattern_to_endpoint";
        _os_log_impl(&dword_182FBE000, v39, v42, "%{public}s called with null pattern", buf, 0xCu);
      }
LABEL_104:

LABEL_105:
      if (v38)
        free(v38);
      goto LABEL_16;
    }
    if (!(_BYTE)v54)
    {
      __nwlog_obj();
      v39 = objc_claimAutoreleasedReturnValue();
      v52 = __dst;
      if (os_log_type_enabled(v39, (os_log_type_t)__dst))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_endpoint_proxy_match_pattern_to_endpoint";
        _os_log_impl(&dword_182FBE000, v39, v52, "%{public}s called with null pattern, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_104;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v39 = objc_claimAutoreleasedReturnValue();
    v46 = __dst;
    v47 = os_log_type_enabled(v39, (os_log_type_t)__dst);
    if (!backtrace_string)
    {
      if (v47)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_endpoint_proxy_match_pattern_to_endpoint";
        _os_log_impl(&dword_182FBE000, v39, v46, "%{public}s called with null pattern, no backtrace", buf, 0xCu);
      }
      goto LABEL_104;
    }
    if (v47)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_endpoint_proxy_match_pattern_to_endpoint";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = backtrace_string;
      _os_log_impl(&dword_182FBE000, v39, v46, "%{public}s called with null pattern, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_84:

    free(backtrace_string);
    goto LABEL_105;
  }
  v5 = v3;
  v6 = -[NSObject type](v5, "type");

  domain_for_policy = nw_endpoint_get_domain_for_policy(v5);
  if (v6 != 2)
  {
    if (v6 == 1)
    {
      address = nw_endpoint_get_address(v5);
      v9 = 0;
      goto LABEL_7;
    }
    if (gLogDatapath)
    {
      __nwlog_obj();
      v50 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v50, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_endpoint_proxy_match_pattern_to_endpoint";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v6;
        _os_log_impl(&dword_182FBE000, v50, OS_LOG_TYPE_DEBUG, "%{public}s Invalid proxy endpoint type %u for matching", buf, 0x12u);
      }

    }
LABEL_16:
    domain_for_policy = 0;
    goto LABEL_56;
  }
  v10 = v5;
  v9 = (const char *)-[NSObject hostname](v10, "hostname");

  address = 0;
LABEL_7:
  if (strcmp(a2, "*"))
  {
    __dst = 0;
    v58 = 0;
    v60 = 0;
    v59 = 0;
    v54 = 0;
    v55[0] = 0;
    v56 = 0;
    v55[1] = 0;
    v53 = 0;
    *(_QWORD *)buf = 0;
    if (getaddrinfo(a2, 0, &nw_string_is_ip_address::hints, (addrinfo **)buf))
    {
      if (!nw_utilities_cidr_string_to_subnet_and_mask(a2, (uint64_t)&__dst, (uint64_t)&v54, &v53))
      {
        if (v9)
        {
          v22 = nw_endpoint_proxy_string_matches_pattern(v9, a2);
        }
        else
        {
          if (domain_for_policy)
            domain_for_policy = nw_endpoint_proxy_string_matches_pattern((const char *)domain_for_policy, a2);
          if ((domain_for_policy & 1) != 0 || !address)
            goto LABEL_55;
          if (address->sa_family != 2)
            goto LABEL_54;
          *(_QWORD *)buf = 0;
          *(_QWORD *)&buf[8] = 0;
          v26 = inet_ntop(2, &address->sa_data[2], buf, 0x10u);
          if (!v26)
            goto LABEL_54;
          v22 = nw_endpoint_proxy_string_matches_pattern(v26, a2);
        }
        domain_for_policy = v22;
        goto LABEL_55;
      }
      if (address)
      {
        sa_family = address->sa_family;
        if (sa_family == BYTE1(__dst))
        {
          if (sa_family == 30)
          {
            v12 = &address->sa_data[6];
            v13 = (unsigned __int8 *)&v58;
            v14 = (unsigned __int8 *)v55;
            v15 = 16;
LABEL_58:
            v28 = v15 - 1;
            do
            {
              v30 = *v12++;
              v29 = v30;
              v32 = *v14++;
              v31 = v32;
              v33 = *v13++;
              v34 = (v33 ^ v29) & v31;
              domain_for_policy = v34 == 0;
              v36 = v28-- != 0;
            }
            while (!v34 && v36);
            goto LABEL_55;
          }
          if (sa_family == 2)
          {
            v12 = &address->sa_data[2];
            v13 = (unsigned __int8 *)&__dst + 4;
            v14 = (unsigned __int8 *)&v54 + 4;
            v15 = 4;
            goto LABEL_58;
          }
        }
      }
    }
    else
    {
      v17 = *(addrinfo **)buf;
      if (*(_QWORD *)buf)
      {
        v18 = *(_QWORD *)buf;
        while (1)
        {
          v19 = *(unsigned __int8 **)(v18 + 32);
          v20 = v19[1];
          if (v20 == 30 || v20 == 2)
            break;
          v18 = *(_QWORD *)(v18 + 40);
          if (!v18)
            goto LABEL_33;
        }
        v23 = *v19;
        if (v23 <= 0x1C)
          memcpy(&__dst, v19, v23);
LABEL_33:
        freeaddrinfo(v17);
      }
      if (address)
      {
        v24 = address->sa_family;
        if (v24 == 2 && BYTE1(__dst) == 2)
        {
          domain_for_policy = *(_DWORD *)&address->sa_data[2] == HIDWORD(__dst);
          goto LABEL_55;
        }
        domain_for_policy = 0;
        if (v24 != 30 || BYTE1(__dst) != 30)
        {
LABEL_55:
          if (gLogDatapath)
          {
            __nwlog_obj();
            v48 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v48, OS_LOG_TYPE_DEBUG))
            {
              v49 = "does not match";
              *(_QWORD *)&buf[4] = "nw_endpoint_proxy_match_pattern_to_endpoint";
              *(_WORD *)&buf[12] = 2114;
              *(_DWORD *)buf = 136446978;
              *(_QWORD *)&buf[14] = v5;
              if ((_DWORD)domain_for_policy)
                v49 = "matches";
              v62 = 2082;
              v63 = v49;
              v64 = 2082;
              v65 = a2;
              _os_log_impl(&dword_182FBE000, v48, OS_LOG_TYPE_DEBUG, "%{public}s endpoint \"%{public}@\" %{public}s pattern string \"%{public}s\"", buf, 0x2Au);
            }

          }
          goto LABEL_56;
        }
        if (*(_DWORD *)&address[1].sa_data[6] == v60)
        {
          domain_for_policy = *(_QWORD *)&address->sa_data[6] == v58 && *(_QWORD *)&address[1].sa_len == v59;
          goto LABEL_55;
        }
      }
    }
LABEL_54:
    domain_for_policy = 0;
    goto LABEL_55;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v16 = (id)gLogObj;
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136446722;
    *(_QWORD *)&buf[4] = "nw_endpoint_proxy_match_pattern_to_endpoint";
    *(_WORD *)&buf[12] = 2114;
    *(_QWORD *)&buf[14] = v5;
    v62 = 2082;
    v63 = a2;
    _os_log_impl(&dword_182FBE000, v16, OS_LOG_TYPE_DEBUG, "%{public}s endpoint \"%{public}@\" indeed matches pattern \"%{public}s\"", buf, 0x20u);
  }

  domain_for_policy = 1;
LABEL_56:

  return domain_for_policy;
}

void sub_1835F6288(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1835F6314(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t nw_endpoint_proxy_string_matches_pattern(const char *cStr, const char *a2)
{
  const __CFAllocator *v4;
  CFStringRef v5;
  const __CFString *v6;
  CFStringRef v7;
  const __CFString *v8;
  const __CFString *v9;
  const __CFString *v10;
  id v11;
  void *v12;
  NSObject *v13;
  os_log_type_t v14;
  const char *v15;
  id v16;
  char *v17;
  NSObject *v18;
  os_log_type_t v19;
  const char *v20;
  id v21;
  void *v22;
  NSObject *v23;
  os_log_type_t v24;
  const char *v25;
  char *backtrace_string;
  os_log_type_t v27;
  _BOOL4 v28;
  uint64_t v29;
  CFArrayRef ArrayBySeparatingStrings;
  const __CFArray *v31;
  const __CFString *v32;
  const __CFString *v33;
  id v34;
  void *v35;
  NSObject *v36;
  os_log_type_t v37;
  const char *v38;
  char *v39;
  os_log_type_t v40;
  _BOOL4 v41;
  NSObject *v42;
  os_log_type_t v43;
  id v44;
  void *v45;
  NSObject *v46;
  os_log_type_t v47;
  const char *v48;
  char *v49;
  os_log_type_t v50;
  _BOOL4 v51;
  NSObject *v52;
  os_log_type_t v53;
  const __CFArray *v54;
  const __CFArray *v55;
  CFIndex Count;
  CFIndex v57;
  BOOL v58;
  CFIndex v59;
  CFIndex v60;
  const __CFString *ValueAtIndex;
  const __CFString *v62;
  const __CFString *v63;
  const __CFString *v64;
  const __CFString *v65;
  char *v66;
  os_log_type_t v67;
  _BOOL4 v68;
  id v69;
  void *v70;
  NSObject *v71;
  os_log_type_t v72;
  const char *v73;
  NSObject *v74;
  os_log_type_t v75;
  char *v76;
  _BOOL4 v77;
  char *v78;
  _BOOL4 v79;
  NSObject *v80;
  os_log_type_t v81;
  char v83;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v86;
  __int16 v87;
  const char *v88;
  __int16 v89;
  char *v90;
  uint64_t v91;
  CFRange v92;
  CFRange v93;

  v91 = *MEMORY[0x1E0C80C00];
  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], cStr, 0x8000100u);
  if (!v5)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v16 = (id)gLogObj;
    *(_DWORD *)buf = 136446466;
    v86 = "nw_endpoint_proxy_string_matches_pattern";
    v87 = 2082;
    v88 = cStr;
    v17 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v83 = 0;
    if (__nwlog_fault(v17, &type, &v83))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v18 = (id)gLogObj;
        v19 = type;
        if (!os_log_type_enabled(v18, type))
          goto LABEL_43;
        *(_DWORD *)buf = 136446466;
        v86 = "nw_endpoint_proxy_string_matches_pattern";
        v87 = 2082;
        v88 = cStr;
        v20 = "%{public}s CFStringCreateWithCString(%{public}s) failed";
LABEL_41:
        v42 = v18;
        v43 = v19;
        goto LABEL_42;
      }
      if (!v83)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v18 = (id)gLogObj;
        v19 = type;
        if (!os_log_type_enabled(v18, type))
          goto LABEL_43;
        *(_DWORD *)buf = 136446466;
        v86 = "nw_endpoint_proxy_string_matches_pattern";
        v87 = 2082;
        v88 = cStr;
        v20 = "%{public}s CFStringCreateWithCString(%{public}s) failed, backtrace limit exceeded";
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v18 = (id)gLogObj;
      v27 = type;
      v28 = os_log_type_enabled(v18, type);
      if (!backtrace_string)
      {
        if (!v28)
        {
LABEL_43:

          if (!v17)
            return 0;
          goto LABEL_23;
        }
        *(_DWORD *)buf = 136446466;
        v86 = "nw_endpoint_proxy_string_matches_pattern";
        v87 = 2082;
        v88 = cStr;
        v20 = "%{public}s CFStringCreateWithCString(%{public}s) failed, no backtrace";
        v42 = v18;
        v43 = v27;
LABEL_42:
        _os_log_impl(&dword_182FBE000, v42, v43, v20, buf, 0x16u);
        goto LABEL_43;
      }
      if (v28)
      {
        *(_DWORD *)buf = 136446722;
        v86 = "nw_endpoint_proxy_string_matches_pattern";
        v87 = 2082;
        v88 = cStr;
        v89 = 2082;
        v90 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v18, v27, "%{public}s CFStringCreateWithCString(%{public}s) failed, dumping backtrace:%{public}s", buf, 0x20u);
      }

      free(backtrace_string);
    }
    if (!v17)
      return 0;
LABEL_23:
    free(v17);
    return 0;
  }
  v6 = v5;
  v7 = CFStringCreateWithCString(v4, a2, 0x8000100u);
  if (!v7)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v21 = (id)gLogObj;
    *(_DWORD *)buf = 136446466;
    v86 = "nw_endpoint_proxy_string_matches_pattern";
    v87 = 2082;
    v88 = a2;
    v22 = (void *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v83 = 0;
    if (!__nwlog_fault((const char *)v22, &type, &v83))
    {
LABEL_61:
      if (v22)
        free(v22);
      CFRelease(v6);
      return 0;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v23 = (id)gLogObj;
      v24 = type;
      if (os_log_type_enabled(v23, type))
      {
        *(_DWORD *)buf = 136446466;
        v86 = "nw_endpoint_proxy_string_matches_pattern";
        v87 = 2082;
        v88 = a2;
        v25 = "%{public}s CFStringCreateWithCString(%{public}s) failed";
LABEL_58:
        v52 = v23;
        v53 = v24;
LABEL_59:
        _os_log_impl(&dword_182FBE000, v52, v53, v25, buf, 0x16u);
      }
    }
    else
    {
      if (v83)
      {
        v39 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v23 = (id)gLogObj;
        v40 = type;
        v41 = os_log_type_enabled(v23, type);
        if (v39)
        {
          if (v41)
          {
            *(_DWORD *)buf = 136446722;
            v86 = "nw_endpoint_proxy_string_matches_pattern";
            v87 = 2082;
            v88 = a2;
            v89 = 2082;
            v90 = v39;
            _os_log_impl(&dword_182FBE000, v23, v40, "%{public}s CFStringCreateWithCString(%{public}s) failed, dumping backtrace:%{public}s", buf, 0x20u);
          }

          free(v39);
          goto LABEL_61;
        }
        if (!v41)
          goto LABEL_60;
        *(_DWORD *)buf = 136446466;
        v86 = "nw_endpoint_proxy_string_matches_pattern";
        v87 = 2082;
        v88 = a2;
        v25 = "%{public}s CFStringCreateWithCString(%{public}s) failed, no backtrace";
        v52 = v23;
        v53 = v40;
        goto LABEL_59;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v23 = (id)gLogObj;
      v24 = type;
      if (os_log_type_enabled(v23, type))
      {
        *(_DWORD *)buf = 136446466;
        v86 = "nw_endpoint_proxy_string_matches_pattern";
        v87 = 2082;
        v88 = a2;
        v25 = "%{public}s CFStringCreateWithCString(%{public}s) failed, backtrace limit exceeded";
        goto LABEL_58;
      }
    }
LABEL_60:

    goto LABEL_61;
  }
  v8 = v7;
  if (CFStringHasSuffix(v6, CFSTR(".")))
  {
    v92.length = CFStringGetLength(v6) - 1;
    v92.location = 0;
    v9 = CFStringCreateWithSubstring(v4, v6, v92);
    v10 = v9;
    if (!v9)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v11 = (id)gLogObj;
      *(_DWORD *)buf = 136446210;
      v86 = "nw_endpoint_proxy_string_matches_pattern";
      v12 = (void *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v83 = 0;
      if (!__nwlog_fault((const char *)v12, &type, &v83))
      {
LABEL_109:
        if (v12)
          free(v12);
        v29 = 0;
        v33 = 0;
        v10 = 0;
        goto LABEL_131;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v13 = (id)gLogObj;
        v14 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)buf = 136446210;
          v86 = "nw_endpoint_proxy_string_matches_pattern";
          v15 = "%{public}s CFStringCreateMutableCopy failed";
LABEL_106:
          v74 = v13;
          v75 = v14;
LABEL_107:
          _os_log_impl(&dword_182FBE000, v74, v75, v15, buf, 0xCu);
        }
      }
      else
      {
        if (v83)
        {
          v49 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v13 = (id)gLogObj;
          v50 = type;
          v51 = os_log_type_enabled(v13, type);
          if (v49)
          {
            if (v51)
            {
              *(_DWORD *)buf = 136446466;
              v86 = "nw_endpoint_proxy_string_matches_pattern";
              v87 = 2082;
              v88 = v49;
              _os_log_impl(&dword_182FBE000, v13, v50, "%{public}s CFStringCreateMutableCopy failed, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(v49);
            goto LABEL_109;
          }
          if (!v51)
            goto LABEL_108;
          *(_DWORD *)buf = 136446210;
          v86 = "nw_endpoint_proxy_string_matches_pattern";
          v15 = "%{public}s CFStringCreateMutableCopy failed, no backtrace";
          v74 = v13;
          v75 = v50;
          goto LABEL_107;
        }
        __nwlog_obj();
        v13 = objc_claimAutoreleasedReturnValue();
        v14 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)buf = 136446210;
          v86 = "nw_endpoint_proxy_string_matches_pattern";
          v15 = "%{public}s CFStringCreateMutableCopy failed, backtrace limit exceeded";
          goto LABEL_106;
        }
      }
LABEL_108:

      goto LABEL_109;
    }
  }
  else
  {
    v10 = 0;
    v9 = v6;
  }
  v29 = 1;
  if (CFStringCompare(v9, v8, 1uLL) == kCFCompareEqualTo)
  {
LABEL_130:
    v33 = 0;
LABEL_131:
    v55 = 0;
    v31 = (const __CFArray *)v6;
    goto LABEL_157;
  }
  ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings(v4, v9, CFSTR("."));
  if (!ArrayBySeparatingStrings)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v44 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v86 = "nw_endpoint_proxy_string_matches_pattern";
    v45 = (void *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v83 = 0;
    if (!__nwlog_fault((const char *)v45, &type, &v83))
    {
LABEL_127:
      if (v45)
        free(v45);
      v29 = 0;
      goto LABEL_130;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v46 = (id)gLogObj;
      v47 = type;
      if (os_log_type_enabled(v46, type))
      {
        *(_DWORD *)buf = 136446210;
        v86 = "nw_endpoint_proxy_string_matches_pattern";
        v48 = "%{public}s CFStringCreateArrayBySeparatingStrings failed";
LABEL_124:
        v80 = v46;
        v81 = v47;
LABEL_125:
        _os_log_impl(&dword_182FBE000, v80, v81, v48, buf, 0xCu);
      }
    }
    else
    {
      if (v83)
      {
        v66 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v46 = (id)gLogObj;
        v67 = type;
        v68 = os_log_type_enabled(v46, type);
        if (v66)
        {
          if (v68)
          {
            *(_DWORD *)buf = 136446466;
            v86 = "nw_endpoint_proxy_string_matches_pattern";
            v87 = 2082;
            v88 = v66;
            _os_log_impl(&dword_182FBE000, v46, v67, "%{public}s CFStringCreateArrayBySeparatingStrings failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v66);
          goto LABEL_127;
        }
        if (!v68)
          goto LABEL_126;
        *(_DWORD *)buf = 136446210;
        v86 = "nw_endpoint_proxy_string_matches_pattern";
        v48 = "%{public}s CFStringCreateArrayBySeparatingStrings failed, no backtrace";
        v80 = v46;
        v81 = v67;
        goto LABEL_125;
      }
      __nwlog_obj();
      v46 = objc_claimAutoreleasedReturnValue();
      v47 = type;
      if (os_log_type_enabled(v46, type))
      {
        *(_DWORD *)buf = 136446210;
        v86 = "nw_endpoint_proxy_string_matches_pattern";
        v48 = "%{public}s CFStringCreateArrayBySeparatingStrings failed, backtrace limit exceeded";
        goto LABEL_124;
      }
    }
LABEL_126:

    goto LABEL_127;
  }
  v31 = ArrayBySeparatingStrings;
  if (CFStringHasSuffix(v8, CFSTR(".")))
  {
    v93.length = CFStringGetLength(v8) - 1;
    v93.location = 0;
    v32 = CFStringCreateWithSubstring(v4, v8, v93);
    v33 = v32;
    if (!v32)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v34 = (id)gLogObj;
      *(_DWORD *)buf = 136446210;
      v86 = "nw_endpoint_proxy_string_matches_pattern";
      v35 = (void *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v83 = 0;
      if (!__nwlog_fault((const char *)v35, &type, &v83))
      {
LABEL_153:
        if (v35)
          free(v35);
        v55 = 0;
        v33 = 0;
        goto LABEL_156;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v36 = objc_claimAutoreleasedReturnValue();
        v37 = type;
        if (os_log_type_enabled(v36, type))
        {
          *(_DWORD *)buf = 136446210;
          v86 = "nw_endpoint_proxy_string_matches_pattern";
          v38 = "%{public}s CFStringCreateMutableCopy failed";
LABEL_151:
          _os_log_impl(&dword_182FBE000, v36, v37, v38, buf, 0xCu);
        }
      }
      else
      {
        if (v83)
        {
          v78 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v36 = objc_claimAutoreleasedReturnValue();
          v37 = type;
          v79 = os_log_type_enabled(v36, type);
          if (v78)
          {
            if (v79)
            {
              *(_DWORD *)buf = 136446466;
              v86 = "nw_endpoint_proxy_string_matches_pattern";
              v87 = 2082;
              v88 = v78;
              _os_log_impl(&dword_182FBE000, v36, v37, "%{public}s CFStringCreateMutableCopy failed, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(v78);
            goto LABEL_153;
          }
          if (!v79)
            goto LABEL_152;
          *(_DWORD *)buf = 136446210;
          v86 = "nw_endpoint_proxy_string_matches_pattern";
          v38 = "%{public}s CFStringCreateMutableCopy failed, no backtrace";
          goto LABEL_151;
        }
        __nwlog_obj();
        v36 = objc_claimAutoreleasedReturnValue();
        v37 = type;
        if (os_log_type_enabled(v36, type))
        {
          *(_DWORD *)buf = 136446210;
          v86 = "nw_endpoint_proxy_string_matches_pattern";
          v38 = "%{public}s CFStringCreateMutableCopy failed, backtrace limit exceeded";
          goto LABEL_151;
        }
      }
LABEL_152:

      goto LABEL_153;
    }
  }
  else
  {
    v33 = 0;
    v32 = v8;
  }
  v54 = CFStringCreateArrayBySeparatingStrings(v4, v32, CFSTR("."));
  if (!v54)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v69 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v86 = "nw_endpoint_proxy_string_matches_pattern";
    v70 = (void *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v83 = 0;
    if (!__nwlog_fault((const char *)v70, &type, &v83))
    {
LABEL_144:
      if (v70)
        free(v70);
      v55 = 0;
      goto LABEL_156;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v71 = objc_claimAutoreleasedReturnValue();
      v72 = type;
      if (os_log_type_enabled(v71, type))
      {
        *(_DWORD *)buf = 136446210;
        v86 = "nw_endpoint_proxy_string_matches_pattern";
        v73 = "%{public}s CFStringCreateArrayBySeparatingStrings failed";
LABEL_142:
        _os_log_impl(&dword_182FBE000, v71, v72, v73, buf, 0xCu);
      }
    }
    else
    {
      if (v83)
      {
        v76 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v71 = objc_claimAutoreleasedReturnValue();
        v72 = type;
        v77 = os_log_type_enabled(v71, type);
        if (v76)
        {
          if (v77)
          {
            *(_DWORD *)buf = 136446466;
            v86 = "nw_endpoint_proxy_string_matches_pattern";
            v87 = 2082;
            v88 = v76;
            _os_log_impl(&dword_182FBE000, v71, v72, "%{public}s CFStringCreateArrayBySeparatingStrings failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v76);
          goto LABEL_144;
        }
        if (!v77)
          goto LABEL_143;
        *(_DWORD *)buf = 136446210;
        v86 = "nw_endpoint_proxy_string_matches_pattern";
        v73 = "%{public}s CFStringCreateArrayBySeparatingStrings failed, no backtrace";
        goto LABEL_142;
      }
      __nwlog_obj();
      v71 = objc_claimAutoreleasedReturnValue();
      v72 = type;
      if (os_log_type_enabled(v71, type))
      {
        *(_DWORD *)buf = 136446210;
        v86 = "nw_endpoint_proxy_string_matches_pattern";
        v73 = "%{public}s CFStringCreateArrayBySeparatingStrings failed, backtrace limit exceeded";
        goto LABEL_142;
      }
    }
LABEL_143:

    goto LABEL_144;
  }
  v55 = v54;
  if (CFArrayGetCount(v54) < 1
    || CFArrayGetCount(v31) < 1
    || (Count = CFArrayGetCount(v31), v57 = CFArrayGetCount(v55), v58 = Count < 1, v59 = Count - 1, v58)
    || (v60 = v57 - 1, v57 < 1))
  {
LABEL_156:
    CFRelease(v6);
    v29 = 0;
    goto LABEL_157;
  }
  while (1)
  {
    ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v55, v60);
    v62 = (const __CFString *)CFArrayGetValueAtIndex(v31, v59);
    if (!v60 && (!ValueAtIndex || !CFStringGetLength(ValueAtIndex)))
      ValueAtIndex = CFSTR("*");
    if (CFStringCompare(ValueAtIndex, v62, 1uLL))
      break;
    v29 = 1;
    if (!v59 || !v60)
      goto LABEL_148;
    --v59;
    --v60;
LABEL_90:
    v29 = 0;
    if (v59 < 0 || v60 < 0)
      goto LABEL_148;
  }
  if (CFStringCompare(ValueAtIndex, CFSTR("*"), 1uLL) == kCFCompareEqualTo)
  {
    while (1)
    {
      v63 = (const __CFString *)CFArrayGetValueAtIndex(v55, v60);
      v64 = v63;
      if (!v60 && (!v63 || !CFStringGetLength(v63)))
        v64 = CFSTR("*");
      if (CFStringCompare(v64, CFSTR("*"), 1uLL))
        break;
      v58 = v60-- <= 0;
      if (v58)
      {
        v29 = 1;
        goto LABEL_148;
      }
    }
    do
    {
      v65 = (const __CFString *)CFArrayGetValueAtIndex(v31, v59);
      if (CFStringCompare(v64, v65, 1uLL) == kCFCompareEqualTo)
        goto LABEL_90;
      v58 = v59-- <= 0;
    }
    while (!v58);
  }
  v29 = 0;
LABEL_148:
  CFRelease(v6);
LABEL_157:
  CFRelease(v31);
  CFRelease(v8);
  if (v55)
    CFRelease(v55);
  if (v10)
    CFRelease(v10);
  if (v33)
    CFRelease(v33);
  return v29;
}

BOOL __nw_endpoint_proxy_handler_should_use_proxy_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  _BOOL4 v4;

  v4 = nw_proxy_config_supports_connection(a3, *(void **)(a1 + 32), *(void **)(a1 + 40), *(void **)(a1 + 48));
  if (v4)
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = 1;
  return !v4;
}

uint64_t network_proxy_get_type(void *a1)
{
  _DWORD *v1;
  int v2;
  unsigned int v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  const char *v8;
  char *backtrace_string;
  _BOOL4 v10;
  char v11;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v14 = "network_proxy_get_type";
    v5 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v11 = 0;
    if (!__nwlog_fault(v5, &type, &v11))
      goto LABEL_34;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v6 = __nwlog_obj();
      v7 = type;
      if (!os_log_type_enabled(v6, type))
        goto LABEL_34;
      *(_DWORD *)buf = 136446210;
      v14 = "network_proxy_get_type";
      v8 = "%{public}s called with null proxy";
    }
    else if (v11)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v6 = __nwlog_obj();
      v7 = type;
      v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          v14 = "network_proxy_get_type";
          v15 = 2082;
          v16 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null proxy, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_34:
        if (v5)
        {
          free(v5);
          return 0xFFFFFFFFLL;
        }
        return 0xFFFFFFFFLL;
      }
      if (!v10)
        goto LABEL_34;
      *(_DWORD *)buf = 136446210;
      v14 = "network_proxy_get_type";
      v8 = "%{public}s called with null proxy, no backtrace";
    }
    else
    {
      v6 = __nwlog_obj();
      v7 = type;
      if (!os_log_type_enabled(v6, type))
        goto LABEL_34;
      *(_DWORD *)buf = 136446210;
      v14 = "network_proxy_get_type";
      v8 = "%{public}s called with null proxy, backtrace limit exceeded";
    }
    _os_log_impl(&dword_182FBE000, v6, v7, v8, buf, 0xCu);
    goto LABEL_34;
  }
  v1 = a1;
  if (v1[38] != 1)
  {

    return 0xFFFFFFFFLL;
  }
  v2 = v1[39];

  if (v2 > 3000)
    return (v2 - 3003) < 4 || (v2 - 4001) < 2 || (v2 - 3001) <= 1;
  if (v2 <= 2000)
  {
    if (v2 >= 2 && (v2 - 1001) >= 2)
      return 0;
    return 0xFFFFFFFFLL;
  }
  if (v2 == 2002)
    v4 = 3;
  else
    v4 = 0;
  if (v2 == 2001)
    return 2;
  else
    return v4;
}

xpc_object_t network_proxy_copy_host(void *a1)
{
  id *v1;
  id v2;
  id v3;
  int v4;
  id v5;
  int v6;
  id v7;
  const char *v8;
  xpc_object_t v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  const char *v13;
  char *backtrace_string;
  _BOOL4 v15;
  char v17;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v20;
  __int16 v21;
  char *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v20 = "network_proxy_copy_host";
    v10 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v17 = 0;
    if (!__nwlog_fault(v10, &type, &v17))
      goto LABEL_23;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v11 = __nwlog_obj();
      v12 = type;
      if (!os_log_type_enabled(v11, type))
        goto LABEL_23;
      *(_DWORD *)buf = 136446210;
      v20 = "network_proxy_copy_host";
      v13 = "%{public}s called with null proxy";
    }
    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v11 = __nwlog_obj();
      v12 = type;
      v15 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          v20 = "network_proxy_copy_host";
          v21 = 2082;
          v22 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null proxy, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_23;
      }
      if (!v15)
      {
LABEL_23:
        if (v10)
          free(v10);
        return 0;
      }
      *(_DWORD *)buf = 136446210;
      v20 = "network_proxy_copy_host";
      v13 = "%{public}s called with null proxy, no backtrace";
    }
    else
    {
      v11 = __nwlog_obj();
      v12 = type;
      if (!os_log_type_enabled(v11, type))
        goto LABEL_23;
      *(_DWORD *)buf = 136446210;
      v20 = "network_proxy_copy_host";
      v13 = "%{public}s called with null proxy, backtrace limit exceeded";
    }
    _os_log_impl(&dword_182FBE000, v11, v12, v13, buf, 0xCu);
    goto LABEL_23;
  }
  v1 = a1;
  v2 = v1[5];

  if (!v2)
    return 0;
  v3 = v2;
  v4 = objc_msgSend(v3, "type");

  if ((v4 == 2 || (v5 = v3, v6 = objc_msgSend(v5, "type"), v5, v6 == 1))
    && (v7 = v3, v8 = (const char *)objc_msgSend(v7, "hostname"), v7, v8))
  {
    v9 = xpc_string_create(v8);
  }
  else
  {
    v9 = 0;
  }
  os_release(v3);
  return v9;
}

void sub_1835F7998(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t network_proxy_get_port(void *a1)
{
  id *v1;
  id v2;
  id v3;
  int v4;
  id v5;
  int v6;
  id v7;
  uint64_t v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  const char *v12;
  char *backtrace_string;
  _BOOL4 v14;
  char v16;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v19 = "network_proxy_get_port";
    v9 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v16 = 0;
    if (!__nwlog_fault(v9, &type, &v16))
      goto LABEL_22;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v10 = __nwlog_obj();
      v11 = type;
      if (!os_log_type_enabled(v10, type))
        goto LABEL_22;
      *(_DWORD *)buf = 136446210;
      v19 = "network_proxy_get_port";
      v12 = "%{public}s called with null proxy";
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v10 = __nwlog_obj();
      v11 = type;
      v14 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          v19 = "network_proxy_get_port";
          v20 = 2082;
          v21 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null proxy, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_22;
      }
      if (!v14)
      {
LABEL_22:
        if (v9)
          free(v9);
        return 0;
      }
      *(_DWORD *)buf = 136446210;
      v19 = "network_proxy_get_port";
      v12 = "%{public}s called with null proxy, no backtrace";
    }
    else
    {
      v10 = __nwlog_obj();
      v11 = type;
      if (!os_log_type_enabled(v10, type))
        goto LABEL_22;
      *(_DWORD *)buf = 136446210;
      v19 = "network_proxy_get_port";
      v12 = "%{public}s called with null proxy, backtrace limit exceeded";
    }
    _os_log_impl(&dword_182FBE000, v10, v11, v12, buf, 0xCu);
    goto LABEL_22;
  }
  v1 = a1;
  v2 = v1[5];

  if (!v2)
    return 0;
  v3 = v2;
  v4 = objc_msgSend(v3, "type");

  if (v4 == 2 || (v5 = v3, v6 = objc_msgSend(v5, "type"), v5, v6 == 1))
  {
    v7 = v3;
    v8 = objc_msgSend(v7, "port");

  }
  else
  {
    v8 = 0;
  }
  os_release(v3);
  return v8;
}

void sub_1835F7C50(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL network_proxy_is_transparent(void *a1)
{
  _DWORD *v1;
  _BOOL8 v2;
  char *v4;
  NSObject *v5;
  os_log_type_t v6;
  const char *v7;
  char *backtrace_string;
  _BOOL4 v9;
  char v10;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v1 = a1;
    v2 = v1[38] != 1 || (v1[39] - 2003) < 0xFFFFFFFE;

    return v2;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v13 = "network_proxy_is_transparent";
  v4 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v10 = 0;
  if (__nwlog_fault(v4, &type, &v10))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v5 = __nwlog_obj();
      v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        v13 = "network_proxy_is_transparent";
        v7 = "%{public}s called with null proxy";
LABEL_20:
        _os_log_impl(&dword_182FBE000, v5, v6, v7, buf, 0xCu);
      }
    }
    else if (v10)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v5 = __nwlog_obj();
      v6 = type;
      v9 = os_log_type_enabled(v5, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          v13 = "network_proxy_is_transparent";
          v14 = 2082;
          v15 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v5, v6, "%{public}s called with null proxy, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_21;
      }
      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        v13 = "network_proxy_is_transparent";
        v7 = "%{public}s called with null proxy, no backtrace";
        goto LABEL_20;
      }
    }
    else
    {
      v5 = __nwlog_obj();
      v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        v13 = "network_proxy_is_transparent";
        v7 = "%{public}s called with null proxy, backtrace limit exceeded";
        goto LABEL_20;
      }
    }
  }
LABEL_21:
  if (v4)
    free(v4);
  return 0;
}

void sub_1835F9588(_Unwind_Exception *a1)
{
  objc_destroyWeak((id *)&STACK[0x358]);
  _Unwind_Resume(a1);
}

void sub_1835F969C(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_1835F9C04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  id *v19;

  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1835F9EEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__26751(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__26752(uint64_t a1)
{

}

id nw_shoes_copy_udp_framer_definition()
{
  if (nw_shoes_copy_udp_framer_definition::onceToken != -1)
    dispatch_once(&nw_shoes_copy_udp_framer_definition::onceToken, &__block_literal_global_26791);
  return (id)nw_shoes_copy_udp_framer_definition::definition;
}

void __nw_shoes_copy_udp_framer_definition_block_invoke()
{
  nw_protocol_definition_t definition;
  void *v1;

  definition = nw_framer_create_definition("lv", 0, &__block_literal_global_3);
  v1 = (void *)nw_shoes_copy_udp_framer_definition::definition;
  nw_shoes_copy_udp_framer_definition::definition = (uint64_t)definition;

}

uint64_t __nw_shoes_copy_udp_framer_definition_block_invoke_2(uint64_t a1, void *a2)
{
  NSObject *v2;

  v2 = a2;
  nw_framer_set_input_handler(v2, &__block_literal_global_5_26793);
  nw_framer_set_output_handler(v2, &__block_literal_global_9_26794);

  return 1;
}

void __nw_shoes_copy_udp_framer_definition_block_invoke_7(uint64_t a1, void *a2, uint64_t a3, size_t a4)
{
  NSObject *v5;
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;
  uint8_t output_buffer[2];
  uint8_t buf[4];
  const char *v11;
  __int16 v12;
  size_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = v5;
  if (a4 < 0x10000)
  {
    *(_WORD *)output_buffer = bswap32(a4) >> 16;
    nw_framer_write_output(v5, output_buffer, 2uLL);
    if (gLogDatapath)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446466;
        v11 = "nw_shoes_copy_udp_framer_definition_block_invoke";
        v12 = 1024;
        LODWORD(v13) = a4;
        _os_log_impl(&dword_182FBE000, v8, OS_LOG_TYPE_DEBUG, "%{public}s Shoes LV: Writing frame of length %u", buf, 0x12u);
      }

    }
    nw_framer_write_output_no_copy(v6, a4);
  }
  else
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v7 = (id)gLogObj;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      v11 = "nw_shoes_copy_udp_framer_definition_block_invoke";
      v12 = 2048;
      v13 = a4;
      _os_log_impl(&dword_182FBE000, v7, OS_LOG_TYPE_ERROR, "%{public}s Message length exceeds maximum: %zu", buf, 0x16u);
    }

  }
}

void sub_1835FACF8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t __nw_shoes_copy_udp_framer_definition_block_invoke_3(uint64_t a1, void *a2)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  BOOL v6;
  NSObject *v7;
  int v8;
  _QWORD parse[5];
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  __int16 v14;
  uint8_t temp_buffer[2];
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v2 = a2;
  v3 = MEMORY[0x1E0C809B0];
  v4 = 2;
  while (1)
  {
    *(_WORD *)temp_buffer = 0;
    v11 = 0;
    v12 = &v11;
    v13 = 0x2020000000;
    v14 = 0;
    parse[0] = v3;
    parse[1] = 3221225472;
    parse[2] = __nw_shoes_copy_udp_framer_definition_block_invoke_4;
    parse[3] = &unk_1E149E218;
    parse[4] = &v11;
    if (!nw_framer_parse_input(v2, 2uLL, 2uLL, temp_buffer, parse))
      break;
    if (gLogDatapath)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
      {
        v8 = *((unsigned __int16 *)v12 + 12);
        *(_DWORD *)buf = 136446466;
        v17 = "nw_shoes_copy_udp_framer_definition_block_invoke_3";
        v18 = 1024;
        v19 = v8;
        _os_log_impl(&dword_182FBE000, v7, OS_LOG_TYPE_DEBUG, "%{public}s Shoes LV: Reading frame of length %u", buf, 0x12u);
      }

    }
    v5 = nw_framer_message_create(v2);
    v6 = nw_framer_deliver_input_no_copy(v2, *((unsigned __int16 *)v12 + 12), v5, 1);

    if (!v6)
    {
      v4 = 0;
      break;
    }
    _Block_object_dispose(&v11, 8);
  }
  _Block_object_dispose(&v11, 8);

  return v4;
}

void sub_1835FAED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  void *v8;
  void *v9;
  va_list va;

  va_start(va, a8);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_shoes_copy_udp_framer_definition_block_invoke_4(uint64_t a1, unsigned __int16 *a2, unint64_t a3)
{
  uint64_t result;

  result = 0;
  if (a2)
  {
    if (a3 >= 2)
    {
      *(_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = bswap32(*a2) >> 16;
      return 2;
    }
  }
  return result;
}

void nw_shoes_tlv_parser(unsigned __int8 *a1, unsigned int a2, void *a3)
{
  void (**v5)(id, _QWORD);
  unsigned __int16 v6;
  unsigned __int8 *v7;
  unsigned __int16 v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  int v12;
  const char *v13;
  NSObject *v14;
  uint32_t v15;
  int v16;
  int v17;
  const char *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  int v24;
  __int16 v25;
  int v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  if (a2 >= 3)
  {
    v6 = 0;
    v7 = a1;
    while (1)
    {
      v8 = a2 - v6;
      if ((unsigned __int16)(a2 - v6) <= 2u)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v11 = (id)gLogObj;
        if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
          goto LABEL_12;
        v12 = *a1;
        v17 = 136446978;
        v18 = "nw_shoes_tlv_parser";
        v19 = 1024;
        v20 = v8;
        v21 = 2048;
        v22 = 3;
        v23 = 1024;
        v24 = v12;
        v13 = "%{public}s Incomplete tlv buffer (%u < %zu) type %u";
        v14 = v11;
        v15 = 34;
        goto LABEL_11;
      }
      v9 = bswap32(*(unsigned __int16 *)(v7 + 1)) >> 16;
      v10 = v9 + 3;
      if (v9 + 3 > (unint64_t)v8)
        break;
      ((void (**)(id, unsigned __int8 *))v5)[2](v5, v7);
      v7 += v10;
      v6 += v10;
      if (a2 <= v6)
        goto LABEL_13;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v11 = (id)gLogObj;
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      goto LABEL_12;
    v16 = *a1;
    v17 = 136447234;
    v18 = "nw_shoes_tlv_parser";
    v19 = 1024;
    v20 = v8;
    v21 = 2048;
    v22 = 3;
    v23 = 1024;
    v24 = v9;
    v25 = 1024;
    v26 = v16;
    v13 = "%{public}s Invalid tlv buffer (%u < %zu + %u) type %u";
    v14 = v11;
    v15 = 40;
LABEL_11:
    _os_log_impl(&dword_182FBE000, v14, OS_LOG_TYPE_ERROR, v13, (uint8_t *)&v17, v15);
LABEL_12:

  }
LABEL_13:

}

void sub_1835FB15C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t nw_shoes_add_tlv(uint64_t a1, unsigned int a2, unsigned int a3, size_t __n, void *__src)
{
  unsigned __int16 v7;
  unsigned int v8;
  NSObject *v9;
  const char *v10;
  void *v12;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  char *backtrace_string;
  os_log_type_t v17;
  _BOOL4 v18;
  os_log_type_t v19;
  char v20;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v23;
  __int16 v24;
  void *v25;
  __int16 v26;
  unsigned int v27;
  __int16 v28;
  unsigned int v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v23 = "nw_shoes_add_tlv";
    v13 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v20 = 0;
    if (__nwlog_fault(v13, &type, &v20))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v14 = objc_claimAutoreleasedReturnValue();
        v15 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)buf = 136446210;
          v23 = "nw_shoes_add_tlv";
          _os_log_impl(&dword_182FBE000, v14, v15, "%{public}s called with null buffer", buf, 0xCu);
        }
      }
      else if (v20)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v14 = objc_claimAutoreleasedReturnValue();
        v17 = type;
        v18 = os_log_type_enabled(v14, type);
        if (backtrace_string)
        {
          if (v18)
          {
            *(_DWORD *)buf = 136446466;
            v23 = "nw_shoes_add_tlv";
            v24 = 2082;
            v25 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v14, v17, "%{public}s called with null buffer, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_28;
        }
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          v23 = "nw_shoes_add_tlv";
          _os_log_impl(&dword_182FBE000, v14, v17, "%{public}s called with null buffer, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v14 = objc_claimAutoreleasedReturnValue();
        v19 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)buf = 136446210;
          v23 = "nw_shoes_add_tlv";
          _os_log_impl(&dword_182FBE000, v14, v19, "%{public}s called with null buffer, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_28:
    if (v13)
      free(v13);
    return 0;
  }
  v7 = __n + 3;
  v8 = (unsigned __int16)(__n + 3);
  if (v8 > a2)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v9 = (id)gLogObj;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      if (a3 > 9)
        v10 = "unknown";
      else
        v10 = off_1E1499EB0[a3];
      *(_DWORD *)buf = 136446978;
      v23 = "nw_shoes_add_tlv";
      v24 = 2082;
      v25 = (void *)v10;
      v26 = 1024;
      v27 = a2;
      v28 = 1024;
      v29 = v8;
      _os_log_impl(&dword_182FBE000, v9, OS_LOG_TYPE_ERROR, "%{public}s Insufficient buffer length to write tlv %{public}s (%u < %u)", buf, 0x22u);
    }

    return 0;
  }
  *(_BYTE *)a1 = a3;
  *(_WORD *)(a1 + 1) = __rev16(__n);
  memcpy((void *)(a1 + 3), __src, __n);
  return v7;
}

void nw_shoes_server_set_outer_connection_handler(void *a1, const void *a2)
{
  _QWORD *v3;
  void *v4;
  void *v5;
  id v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  if (v3)
  {
    v4 = _Block_copy(a2);
    v5 = (void *)v3[12];
    v3[12] = v4;

    goto LABEL_3;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v6 = (id)gLogObj;
  *(_DWORD *)buf = 136446210;
  v17 = "nw_socks5_server_set_outer_connection_handler";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v8 = (id)gLogObj;
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_socks5_server_set_outer_connection_handler";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null server", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v8 = (id)gLogObj;
      v11 = type;
      v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_socks5_server_set_outer_connection_handler";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null server, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_socks5_server_set_outer_connection_handler";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null server, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v8 = (id)gLogObj;
      v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_socks5_server_set_outer_connection_handler";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null server, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v7)
    free(v7);
LABEL_3:

}

void nw_frame_cache_init(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  const char *v10;
  NSObject *v11;
  uint64_t v12;
  char *backtrace_string;
  _BOOL4 v14;
  char *v15;
  _BOOL4 v16;
  const char *v17;
  _BOOL4 v18;
  _BOOL4 v19;
  char v20;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v23;
  __int16 v24;
  char *v25;
  __int16 v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v23 = "nw_frame_cache_init";
    v7 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v20 = 0;
    if (!__nwlog_fault(v7, &type, &v20))
      goto LABEL_62;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v8 = __nwlog_obj();
      v9 = type;
      if (!os_log_type_enabled(v8, type))
        goto LABEL_62;
      *(_DWORD *)buf = 136446210;
      v23 = "nw_frame_cache_init";
      v10 = "%{public}s called with null frame_cache";
    }
    else if (v20)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v8 = __nwlog_obj();
      v9 = type;
      v14 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          v23 = "nw_frame_cache_init";
          v24 = 2082;
          v25 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null frame_cache, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_62:
        if (!v7)
          return;
        goto LABEL_63;
      }
      if (!v14)
        goto LABEL_62;
      *(_DWORD *)buf = 136446210;
      v23 = "nw_frame_cache_init";
      v10 = "%{public}s called with null frame_cache, no backtrace";
    }
    else
    {
      v8 = __nwlog_obj();
      v9 = type;
      if (!os_log_type_enabled(v8, type))
        goto LABEL_62;
      *(_DWORD *)buf = 136446210;
      v23 = "nw_frame_cache_init";
      v10 = "%{public}s called with null frame_cache, backtrace limit exceeded";
    }
    goto LABEL_61;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v23 = "nw_frame_cache_init";
    v7 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v20 = 0;
    if (!__nwlog_fault(v7, &type, &v20))
      goto LABEL_62;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v20)
      {
        v8 = __nwlog_obj();
        v9 = type;
        if (!os_log_type_enabled(v8, type))
          goto LABEL_62;
        *(_DWORD *)buf = 136446210;
        v23 = "nw_frame_cache_init";
        v10 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_61;
      }
      v15 = (char *)__nw_create_backtrace_string();
      v8 = __nwlog_obj();
      v9 = type;
      v16 = os_log_type_enabled(v8, type);
      if (!v15)
      {
        if (!v16)
          goto LABEL_62;
        *(_DWORD *)buf = 136446210;
        v23 = "nw_frame_cache_init";
        v10 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_61;
      }
      if (!v16)
        goto LABEL_43;
      *(_DWORD *)buf = 136446466;
      v23 = "nw_frame_cache_init";
      v24 = 2082;
      v25 = v15;
      v17 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
      goto LABEL_42;
    }
    v8 = __nwlog_obj();
    v9 = type;
    if (!os_log_type_enabled(v8, type))
      goto LABEL_62;
    *(_DWORD *)buf = 136446210;
    v23 = "nw_frame_cache_init";
    v10 = "%{public}s called with null protocol";
LABEL_61:
    _os_log_impl(&dword_182FBE000, v8, v9, v10, buf, 0xCu);
    goto LABEL_62;
  }
  if (!a3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v23 = "nw_frame_cache_init";
    v7 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v20 = 0;
    if (!__nwlog_fault(v7, &type, &v20))
      goto LABEL_62;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v8 = __nwlog_obj();
      v9 = type;
      if (!os_log_type_enabled(v8, type))
        goto LABEL_62;
      *(_DWORD *)buf = 136446210;
      v23 = "nw_frame_cache_init";
      v10 = "%{public}s called with null max_frame_count";
      goto LABEL_61;
    }
    if (!v20)
    {
      v8 = __nwlog_obj();
      v9 = type;
      if (!os_log_type_enabled(v8, type))
        goto LABEL_62;
      *(_DWORD *)buf = 136446210;
      v23 = "nw_frame_cache_init";
      v10 = "%{public}s called with null max_frame_count, backtrace limit exceeded";
      goto LABEL_61;
    }
    v15 = (char *)__nw_create_backtrace_string();
    v8 = __nwlog_obj();
    v9 = type;
    v18 = os_log_type_enabled(v8, type);
    if (!v15)
    {
      if (!v18)
        goto LABEL_62;
      *(_DWORD *)buf = 136446210;
      v23 = "nw_frame_cache_init";
      v10 = "%{public}s called with null max_frame_count, no backtrace";
      goto LABEL_61;
    }
    if (!v18)
      goto LABEL_43;
    *(_DWORD *)buf = 136446466;
    v23 = "nw_frame_cache_init";
    v24 = 2082;
    v25 = v15;
    v17 = "%{public}s called with null max_frame_count, dumping backtrace:%{public}s";
LABEL_42:
    _os_log_impl(&dword_182FBE000, v8, v9, v17, buf, 0x16u);
    goto LABEL_43;
  }
  if (!a4)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v23 = "nw_frame_cache_init";
    v7 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v20 = 0;
    if (!__nwlog_fault(v7, &type, &v20))
      goto LABEL_62;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v8 = __nwlog_obj();
      v9 = type;
      if (!os_log_type_enabled(v8, type))
        goto LABEL_62;
      *(_DWORD *)buf = 136446210;
      v23 = "nw_frame_cache_init";
      v10 = "%{public}s called with null max_byte_count";
      goto LABEL_61;
    }
    if (!v20)
    {
      v8 = __nwlog_obj();
      v9 = type;
      if (!os_log_type_enabled(v8, type))
        goto LABEL_62;
      *(_DWORD *)buf = 136446210;
      v23 = "nw_frame_cache_init";
      v10 = "%{public}s called with null max_byte_count, backtrace limit exceeded";
      goto LABEL_61;
    }
    v15 = (char *)__nw_create_backtrace_string();
    v8 = __nwlog_obj();
    v9 = type;
    v19 = os_log_type_enabled(v8, type);
    if (!v15)
    {
      if (!v19)
        goto LABEL_62;
      *(_DWORD *)buf = 136446210;
      v23 = "nw_frame_cache_init";
      v10 = "%{public}s called with null max_byte_count, no backtrace";
      goto LABEL_61;
    }
    if (v19)
    {
      *(_DWORD *)buf = 136446466;
      v23 = "nw_frame_cache_init";
      v24 = 2082;
      v25 = v15;
      v17 = "%{public}s called with null max_byte_count, dumping backtrace:%{public}s";
      goto LABEL_42;
    }
LABEL_43:
    free(v15);
    if (!v7)
      return;
LABEL_63:
    free(v7);
    return;
  }
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = a1;
  *(_QWORD *)(a1 + 16) = a2;
  *(_DWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 28) = a3;
  *(_DWORD *)(a1 + 32) = a4;
  *(_DWORD *)(a1 + 36) = a5;
  if (gLogDatapath)
  {
    v11 = __nwlog_obj();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      v12 = *(_QWORD *)(a2 + 16);
      *(_DWORD *)buf = 136446722;
      v23 = "nw_frame_cache_init";
      v24 = 2048;
      v25 = (char *)a1;
      v26 = 2080;
      v27 = v12;
      _os_log_impl(&dword_182FBE000, v11, OS_LOG_TYPE_DEBUG, "%{public}s initialized frame cache %p for protocol %s", buf, 0x20u);
    }
  }
}

void nw_frame_cache_remove_all(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  const char *v8;
  NSObject *v9;
  int v10;
  uint64_t v11;
  const char *v12;
  const char *v13;
  char *backtrace_string;
  _BOOL4 v15;
  _QWORD v16[2];
  BOOL (*v17)(uint64_t, uint64_t);
  void *v18;
  uint64_t *v19;
  char v20;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v23;
  __int16 v24;
  _BYTE v25[14];
  __int16 v26;
  const char *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (gLogDatapath)
    {
      v9 = __nwlog_obj();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        v10 = *((_DWORD *)a1 + 6);
        v11 = a1[2];
        v12 = "<null>";
        if (v11)
        {
          v13 = *(const char **)(v11 + 16);
          if (v13)
            v12 = v13;
        }
        *(_DWORD *)buf = 136446978;
        v23 = "nw_frame_cache_remove_all";
        v24 = 1024;
        *(_DWORD *)v25 = v10;
        *(_WORD *)&v25[4] = 2048;
        *(_QWORD *)&v25[6] = a1;
        v26 = 2080;
        v27 = v12;
        _os_log_impl(&dword_182FBE000, v9, OS_LOG_TYPE_DEBUG, "%{public}s purging %u frames from frame cache %p for protocol %s", buf, 0x26u);
      }
    }
    v16[0] = MEMORY[0x1E0C809B0];
    v16[1] = 0x40000000;
    v17 = __nw_frame_cache_remove_all_block_invoke;
    v18 = &__block_descriptor_tmp_26846;
    v19 = a1;
    v2 = *a1;
    do
    {
      if (!v2)
        break;
      v3 = *(_QWORD *)(v2 + 16);
      v4 = ((uint64_t (*)(_QWORD *))v17)(v16);
      v2 = v3;
    }
    while ((v4 & 1) != 0);
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v23 = "nw_frame_cache_remove_all";
  v5 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v20 = 0;
  if (__nwlog_fault(v5, &type, &v20))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v6 = __nwlog_obj();
      v7 = type;
      if (!os_log_type_enabled(v6, type))
        goto LABEL_26;
      *(_DWORD *)buf = 136446210;
      v23 = "nw_frame_cache_remove_all";
      v8 = "%{public}s called with null frame_cache";
      goto LABEL_25;
    }
    if (!v20)
    {
      v6 = __nwlog_obj();
      v7 = type;
      if (!os_log_type_enabled(v6, type))
        goto LABEL_26;
      *(_DWORD *)buf = 136446210;
      v23 = "nw_frame_cache_remove_all";
      v8 = "%{public}s called with null frame_cache, backtrace limit exceeded";
      goto LABEL_25;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v6 = __nwlog_obj();
    v7 = type;
    v15 = os_log_type_enabled(v6, type);
    if (backtrace_string)
    {
      if (v15)
      {
        *(_DWORD *)buf = 136446466;
        v23 = "nw_frame_cache_remove_all";
        v24 = 2082;
        *(_QWORD *)v25 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null frame_cache, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_26;
    }
    if (v15)
    {
      *(_DWORD *)buf = 136446210;
      v23 = "nw_frame_cache_remove_all";
      v8 = "%{public}s called with null frame_cache, no backtrace";
LABEL_25:
      _os_log_impl(&dword_182FBE000, v6, v7, v8, buf, 0xCu);
    }
  }
LABEL_26:
  if (v5)
    free(v5);
}

BOOL __nw_frame_cache_remove_all_block_invoke(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  const char *v9;
  char *backtrace_string;
  _BOOL4 v11;
  NSObject *v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    if ((*(_WORD *)(a2 + 204) & 0x100) != 0
      && g_channel_check_validity
      && !g_channel_check_validity(a2, *(_QWORD *)(a2 + 88)))
    {
      v4 = 0;
      v5 = 0;
    }
    else
    {
      v4 = *(_DWORD *)(a2 + 48);
      v5 = *(_QWORD *)(a2 + 112);
    }
    if (gLogDatapath)
    {
      v13 = __nwlog_obj();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446978;
        v17 = "nw_frame_cache_remove_all_block_invoke";
        v18 = 2048;
        v19 = (char *)a2;
        v20 = 2048;
        v21 = v5;
        v22 = 1024;
        v23 = v4;
        _os_log_impl(&dword_182FBE000, v13, OS_LOG_TYPE_DEBUG, "%{public}s destroying frame %p (buffer: %p, length %u)", buf, 0x26u);
      }
    }
    frame_cache_remove_from_cache(*(_QWORD *)(a1 + 32), (_QWORD *)a2);
    return a2 != 0;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_frame_cache_remove_all_block_invoke";
  v6 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v6, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v7 = gLogObj;
      v8 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_22;
      *(_DWORD *)buf = 136446210;
      v17 = "nw_frame_cache_remove_all_block_invoke";
      v9 = "%{public}s foreach gave null empty_frame";
      goto LABEL_21;
    }
    if (!v14)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v7 = gLogObj;
      v8 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_22;
      *(_DWORD *)buf = 136446210;
      v17 = "nw_frame_cache_remove_all_block_invoke";
      v9 = "%{public}s foreach gave null empty_frame, backtrace limit exceeded";
      goto LABEL_21;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v7 = gLogObj;
    v8 = type;
    v11 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (backtrace_string)
    {
      if (v11)
      {
        *(_DWORD *)buf = 136446466;
        v17 = "nw_frame_cache_remove_all_block_invoke";
        v18 = 2082;
        v19 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s foreach gave null empty_frame, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_22;
    }
    if (v11)
    {
      *(_DWORD *)buf = 136446210;
      v17 = "nw_frame_cache_remove_all_block_invoke";
      v9 = "%{public}s foreach gave null empty_frame, no backtrace";
LABEL_21:
      _os_log_impl(&dword_182FBE000, v7, v8, v9, buf, 0xCu);
    }
  }
LABEL_22:
  if (v6)
    free(v6);
  return a2 != 0;
}

void frame_cache_remove_from_cache(uint64_t a1, _QWORD *a2)
{
  void *finalizer_context;
  uint64_t v5;
  _QWORD *v6;
  int v7;
  uint64_t v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  const char *v13;
  char *backtrace_string;
  _BOOL4 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *buffer;
  char *v20;
  NSObject *v21;
  os_log_type_t v22;
  const char *v23;
  char *v24;
  _BOOL4 v25;
  char v26;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v29;
  __int16 v30;
  const char *v31;
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  uint64_t v35;
  __int16 v36;
  char *v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    finalizer_context = (void *)nw_frame_get_finalizer_context((uint64_t)a2);
    if (finalizer_context)
      free(finalizer_context);
    v5 = a2[2];
    v6 = (_QWORD *)a2[3];
    if (v5)
    {
      *(_QWORD *)(v5 + 24) = v6;
      v6 = (_QWORD *)a2[3];
    }
    else
    {
      *(_QWORD *)(a1 + 8) = v6;
    }
    *v6 = v5;
    a2[2] = 0;
    a2[3] = 0;
    v7 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v7 - 1;
    if (v7)
      goto LABEL_25;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v8 = *(unsigned int *)(a1 + 24);
    *(_DWORD *)buf = 136446978;
    v29 = "frame_cache_remove_from_cache";
    v30 = 2082;
    v31 = "frame_cache->empty_frames_count";
    v32 = 2048;
    v33 = 1;
    v34 = 2048;
    v35 = v8;
    v9 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v26 = 0;
    if (__nwlog_fault(v9, &type, &v26))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v10 = gLogObj;
        v11 = type;
        if (os_log_type_enabled((os_log_t)gLogObj, type))
        {
          v12 = *(unsigned int *)(a1 + 24);
          *(_DWORD *)buf = 136446978;
          v29 = "frame_cache_remove_from_cache";
          v30 = 2082;
          v31 = "frame_cache->empty_frames_count";
          v32 = 2048;
          v33 = 1;
          v34 = 2048;
          v35 = v12;
          v13 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu";
LABEL_21:
          _os_log_impl(&dword_182FBE000, v10, v11, v13, buf, 0x2Au);
        }
      }
      else if (v26)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v10 = gLogObj;
        v11 = type;
        v15 = os_log_type_enabled((os_log_t)gLogObj, type);
        if (backtrace_string)
        {
          if (v15)
          {
            v16 = *(unsigned int *)(a1 + 24);
            *(_DWORD *)buf = 136447234;
            v29 = "frame_cache_remove_from_cache";
            v30 = 2082;
            v31 = "frame_cache->empty_frames_count";
            v32 = 2048;
            v33 = 1;
            v34 = 2048;
            v35 = v16;
            v36 = 2082;
            v37 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s Underflow: %{public}s, decrement %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
          }
          free(backtrace_string);
          goto LABEL_22;
        }
        if (v15)
        {
          v18 = *(unsigned int *)(a1 + 24);
          *(_DWORD *)buf = 136446978;
          v29 = "frame_cache_remove_from_cache";
          v30 = 2082;
          v31 = "frame_cache->empty_frames_count";
          v32 = 2048;
          v33 = 1;
          v34 = 2048;
          v35 = v18;
          v13 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, no backtrace";
          goto LABEL_21;
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v10 = gLogObj;
        v11 = type;
        if (os_log_type_enabled((os_log_t)gLogObj, type))
        {
          v17 = *(unsigned int *)(a1 + 24);
          *(_DWORD *)buf = 136446978;
          v29 = "frame_cache_remove_from_cache";
          v30 = 2082;
          v31 = "frame_cache->empty_frames_count";
          v32 = 2048;
          v33 = 1;
          v34 = 2048;
          v35 = v17;
          v13 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, backtrace limit exceeded";
          goto LABEL_21;
        }
      }
    }
LABEL_22:
    if (v9)
      free(v9);
    *(_DWORD *)(a1 + 24) = 0;
LABEL_25:
    buffer = (void *)nw_frame_get_buffer((uint64_t)a2, 0);
    if (buffer)
      free(buffer);
    nw_frame_reset((uint64_t)a2, 0, 0, 0, 0);
    os_release(a2);
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v29 = "frame_cache_remove_from_cache";
  v20 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v26 = 0;
  if (__nwlog_fault(v20, &type, &v26))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v21 = __nwlog_obj();
      v22 = type;
      if (!os_log_type_enabled(v21, type))
        goto LABEL_43;
      *(_DWORD *)buf = 136446210;
      v29 = "frame_cache_remove_from_cache";
      v23 = "%{public}s called with null frame_cache";
      goto LABEL_42;
    }
    if (!v26)
    {
      v21 = __nwlog_obj();
      v22 = type;
      if (!os_log_type_enabled(v21, type))
        goto LABEL_43;
      *(_DWORD *)buf = 136446210;
      v29 = "frame_cache_remove_from_cache";
      v23 = "%{public}s called with null frame_cache, backtrace limit exceeded";
      goto LABEL_42;
    }
    v24 = (char *)__nw_create_backtrace_string();
    v21 = __nwlog_obj();
    v22 = type;
    v25 = os_log_type_enabled(v21, type);
    if (v24)
    {
      if (v25)
      {
        *(_DWORD *)buf = 136446466;
        v29 = "frame_cache_remove_from_cache";
        v30 = 2082;
        v31 = v24;
        _os_log_impl(&dword_182FBE000, v21, v22, "%{public}s called with null frame_cache, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v24);
      goto LABEL_43;
    }
    if (v25)
    {
      *(_DWORD *)buf = 136446210;
      v29 = "frame_cache_remove_from_cache";
      v23 = "%{public}s called with null frame_cache, no backtrace";
LABEL_42:
      _os_log_impl(&dword_182FBE000, v21, v22, v23, buf, 0xCu);
    }
  }
LABEL_43:
  if (v20)
    free(v20);
}

void nw_frame_cache_destroy(uint64_t *a1)
{
  char *v2;
  NSObject *v3;
  os_log_type_t v4;
  const char *v5;
  NSObject *v6;
  uint64_t v7;
  const char *v8;
  const char *v9;
  char *backtrace_string;
  _BOOL4 v11;
  char v12;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  void *v17;
  __int16 v18;
  const char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (gLogDatapath)
    {
      v6 = __nwlog_obj();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      {
        v7 = a1[2];
        v8 = "<null>";
        if (v7)
        {
          v9 = *(const char **)(v7 + 16);
          if (v9)
            v8 = v9;
        }
        *(_DWORD *)buf = 136446722;
        v15 = "nw_frame_cache_destroy";
        v16 = 2048;
        v17 = a1;
        v18 = 2080;
        v19 = v8;
        _os_log_impl(&dword_182FBE000, v6, OS_LOG_TYPE_DEBUG, "%{public}s destroying frame cache %p for protocol %s", buf, 0x20u);
      }
    }
    nw_frame_cache_remove_all(a1);
    a1[2] = 0;
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v15 = "nw_frame_cache_destroy";
  v2 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v12 = 0;
  if (__nwlog_fault(v2, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (!os_log_type_enabled(v3, type))
        goto LABEL_24;
      *(_DWORD *)buf = 136446210;
      v15 = "nw_frame_cache_destroy";
      v5 = "%{public}s called with null frame_cache";
      goto LABEL_23;
    }
    if (!v12)
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (!os_log_type_enabled(v3, type))
        goto LABEL_24;
      *(_DWORD *)buf = 136446210;
      v15 = "nw_frame_cache_destroy";
      v5 = "%{public}s called with null frame_cache, backtrace limit exceeded";
      goto LABEL_23;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v3 = __nwlog_obj();
    v4 = type;
    v11 = os_log_type_enabled(v3, type);
    if (backtrace_string)
    {
      if (v11)
      {
        *(_DWORD *)buf = 136446466;
        v15 = "nw_frame_cache_destroy";
        v16 = 2082;
        v17 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v3, v4, "%{public}s called with null frame_cache, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_24;
    }
    if (v11)
    {
      *(_DWORD *)buf = 136446210;
      v15 = "nw_frame_cache_destroy";
      v5 = "%{public}s called with null frame_cache, no backtrace";
LABEL_23:
      _os_log_impl(&dword_182FBE000, v3, v4, v5, buf, 0xCu);
    }
  }
LABEL_24:
  if (v2)
    free(v2);
}

BOOL nw_frame_cache_create_frame(uint64_t *a1, size_t size)
{
  unsigned int v2;
  uint64_t v4;
  uint64_t v5;
  char v6;
  NSObject *v7;
  uint64_t v8;
  void *v9;
  NSObject *v10;
  void *v11;
  _BOOL8 result;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  NSObject *v17;
  const char *v18;
  NSObject *v19;
  uint32_t v20;
  int v21;
  uint64_t v22;
  char *v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  const char *v27;
  char *v28;
  NSObject *v29;
  os_log_type_t v30;
  const char *v31;
  char *v32;
  _BOOL4 v33;
  uint64_t v34;
  char *v35;
  _BOOL4 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  NSObject *v41;
  os_log_type_t v42;
  const char *v43;
  NSObject *v44;
  char *backtrace_string;
  _BOOL4 v46;
  NSObject *v47;
  uint64_t v48;
  NSObject *v49;
  char v50;
  os_log_type_t type;
  _QWORD v52[2];
  BOOL (*v53)(uint64_t, uint64_t);
  void *v54;
  os_log_type_t *v55;
  uint64_t *v56;
  uint64_t *v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  os_log_type_t v63[8];
  os_log_type_t *v64;
  uint64_t v65;
  uint64_t v66;
  int buf;
  const char *v68;
  __int16 v69;
  uint64_t v70;
  __int16 v71;
  uint64_t v72;
  __int16 v73;
  uint64_t v74;
  __int16 v75;
  char *v76;
  uint64_t v77;

  v77 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    buf = 136446210;
    v68 = "nw_frame_cache_create_frame";
    v40 = (char *)_os_log_send_and_compose_impl();
    v63[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v59) = 0;
    if (__nwlog_fault(v40, v63, &v59))
    {
      if (v63[0] == OS_LOG_TYPE_FAULT)
      {
        v41 = __nwlog_obj();
        v42 = v63[0];
        if (os_log_type_enabled(v41, v63[0]))
        {
          buf = 136446210;
          v68 = "nw_frame_cache_create_frame";
          v43 = "%{public}s called with null frame_cache";
LABEL_85:
          _os_log_impl(&dword_182FBE000, v41, v42, v43, (uint8_t *)&buf, 0xCu);
        }
      }
      else if ((_BYTE)v59)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        v41 = __nwlog_obj();
        v42 = v63[0];
        v46 = os_log_type_enabled(v41, v63[0]);
        if (backtrace_string)
        {
          if (v46)
          {
            buf = 136446466;
            v68 = "nw_frame_cache_create_frame";
            v69 = 2082;
            v70 = (uint64_t)backtrace_string;
            _os_log_impl(&dword_182FBE000, v41, v42, "%{public}s called with null frame_cache, dumping backtrace:%{public}s", (uint8_t *)&buf, 0x16u);
          }
          free(backtrace_string);
          goto LABEL_86;
        }
        if (v46)
        {
          buf = 136446210;
          v68 = "nw_frame_cache_create_frame";
          v43 = "%{public}s called with null frame_cache, no backtrace";
          goto LABEL_85;
        }
      }
      else
      {
        v41 = __nwlog_obj();
        v42 = v63[0];
        if (os_log_type_enabled(v41, v63[0]))
        {
          buf = 136446210;
          v68 = "nw_frame_cache_create_frame";
          v43 = "%{public}s called with null frame_cache, backtrace limit exceeded";
          goto LABEL_85;
        }
      }
    }
LABEL_86:
    if (v40)
      free(v40);
    return 0;
  }
  v2 = size;
  *(_QWORD *)v63 = 0;
  v64 = v63;
  v65 = 0x2000000000;
  v66 = 0;
  v59 = 0;
  v60 = &v59;
  v61 = 0x2000000000;
  v62 = 0;
  if (gLogDatapath)
  {
    v44 = __nwlog_obj();
    if (os_log_type_enabled(v44, OS_LOG_TYPE_DEBUG))
    {
      buf = 136446466;
      v68 = "nw_frame_cache_create_frame";
      v69 = 1024;
      LODWORD(v70) = v2;
      _os_log_impl(&dword_182FBE000, v44, OS_LOG_TYPE_DEBUG, "%{public}s requested frame of length %u", (uint8_t *)&buf, 0x12u);
    }
  }
  v52[0] = MEMORY[0x1E0C809B0];
  v52[1] = 0x40000000;
  v53 = __nw_frame_cache_create_frame_block_invoke;
  v54 = &unk_1E149E2A0;
  v56 = &v59;
  v57 = a1;
  v58 = v2;
  v55 = v63;
  v4 = *a1;
  do
  {
    if (!v4)
      break;
    v5 = *(_QWORD *)(v4 + 16);
    v6 = ((uint64_t (*)(_QWORD *))v53)(v52);
    v4 = v5;
  }
  while ((v6 & 1) != 0);
  if (*((_QWORD *)v64 + 3))
    goto LABEL_7;
  if (!v2)
    goto LABEL_14;
  v9 = malloc_type_calloc(1uLL, v2, 0xEAFB8F1AuLL);
  if (v9)
    goto LABEL_15;
  v10 = __nwlog_obj();
  os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);
  buf = 136446722;
  v68 = "strict_calloc";
  v69 = 2048;
  v70 = 1;
  v71 = 2048;
  v72 = v2;
  v11 = (void *)_os_log_send_and_compose_impl();
  result = __nwlog_abort((uint64_t)v11);
  if (!result)
  {
    free(v11);
LABEL_14:
    v9 = 0;
LABEL_15:
    v13 = v60[3];
    if (v13)
    {
      v14 = *(_QWORD *)(v13 + 16);
      v15 = *(_QWORD **)(v13 + 24);
      if (v14)
      {
        *(_QWORD *)(v14 + 24) = v15;
        v15 = *(_QWORD **)(v13 + 24);
      }
      else
      {
        a1[1] = (uint64_t)v15;
      }
      *v15 = v14;
      *(_QWORD *)(v13 + 16) = 0;
      *(_QWORD *)(v13 + 24) = 0;
      v21 = *((_DWORD *)a1 + 6);
      *((_DWORD *)a1 + 6) = v21 - 1;
      if (v21)
        goto LABEL_51;
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v22 = *((unsigned int *)a1 + 6);
      buf = 136446978;
      v68 = "nw_frame_cache_create_frame";
      v69 = 2082;
      v70 = (uint64_t)"frame_cache->empty_frames_count";
      v71 = 2048;
      v72 = 1;
      v73 = 2048;
      v74 = v22;
      v23 = (char *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      v50 = 0;
      if (__nwlog_fault(v23, &type, &v50))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v24 = gLogObj;
          v25 = type;
          if (os_log_type_enabled((os_log_t)gLogObj, type))
          {
            v26 = *((unsigned int *)a1 + 6);
            buf = 136446978;
            v68 = "nw_frame_cache_create_frame";
            v69 = 2082;
            v70 = (uint64_t)"frame_cache->empty_frames_count";
            v71 = 2048;
            v72 = 1;
            v73 = 2048;
            v74 = v26;
            v27 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu";
LABEL_47:
            _os_log_impl(&dword_182FBE000, v24, v25, v27, (uint8_t *)&buf, 0x2Au);
          }
        }
        else if (v50)
        {
          v32 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v24 = gLogObj;
          v25 = type;
          v33 = os_log_type_enabled((os_log_t)gLogObj, type);
          if (v32)
          {
            if (v33)
            {
              v34 = *((unsigned int *)a1 + 6);
              buf = 136447234;
              v68 = "nw_frame_cache_create_frame";
              v69 = 2082;
              v70 = (uint64_t)"frame_cache->empty_frames_count";
              v71 = 2048;
              v72 = 1;
              v73 = 2048;
              v74 = v34;
              v75 = 2082;
              v76 = v32;
              _os_log_impl(&dword_182FBE000, v24, v25, "%{public}s Underflow: %{public}s, decrement %llu, result %llu, dumping backtrace:%{public}s", (uint8_t *)&buf, 0x34u);
            }
            free(v32);
            goto LABEL_48;
          }
          if (v33)
          {
            v38 = *((unsigned int *)a1 + 6);
            buf = 136446978;
            v68 = "nw_frame_cache_create_frame";
            v69 = 2082;
            v70 = (uint64_t)"frame_cache->empty_frames_count";
            v71 = 2048;
            v72 = 1;
            v73 = 2048;
            v74 = v38;
            v27 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, no backtrace";
            goto LABEL_47;
          }
        }
        else
        {
          v24 = __nwlog_obj();
          v25 = type;
          if (os_log_type_enabled(v24, type))
          {
            v37 = *((unsigned int *)a1 + 6);
            buf = 136446978;
            v68 = "nw_frame_cache_create_frame";
            v69 = 2082;
            v70 = (uint64_t)"frame_cache->empty_frames_count";
            v71 = 2048;
            v72 = 1;
            v73 = 2048;
            v74 = v37;
            v27 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, backtrace limit exceeded";
            goto LABEL_47;
          }
        }
      }
LABEL_48:
      if (v23)
        free(v23);
      *((_DWORD *)a1 + 6) = 0;
LABEL_51:
      nw_frame_reset(v60[3], (uint64_t)v9, v2, 0, 0);
      nw_frame_set_buffer_used_malloc(v60[3], 1);
      *((_QWORD *)v64 + 3) = v60[3];
      if (!gLogDatapath)
        goto LABEL_52;
      v47 = __nwlog_obj();
      if (os_log_type_enabled(v47, OS_LOG_TYPE_DEBUG))
      {
        v48 = *((_QWORD *)v64 + 3);
        buf = 136446722;
        v68 = "nw_frame_cache_create_frame";
        v69 = 2048;
        v70 = v48;
        v71 = 1024;
        LODWORD(v72) = v2;
        v18 = "%{public}s reused bufferless frame %p, allocated buffer of length %u";
        v19 = v47;
        v20 = 28;
        goto LABEL_78;
      }
      goto LABEL_7;
    }
    if (gLogDatapath)
    {
      v49 = __nwlog_obj();
      if (os_log_type_enabled(v49, OS_LOG_TYPE_DEBUG))
      {
        buf = 136446466;
        v68 = "nw_frame_cache_create_frame";
        v69 = 1024;
        LODWORD(v70) = v2;
        _os_log_impl(&dword_182FBE000, v49, OS_LOG_TYPE_DEBUG, "%{public}s no frame to reuse for length %u", (uint8_t *)&buf, 0x12u);
      }
    }
    v16 = nw_frame_create(*((_DWORD *)a1 + 9), (uint64_t)v9, v2, 0, 0);
    *((_QWORD *)v64 + 3) = v16;
    if (v16)
    {
      *(_WORD *)(v16 + 204) |= 1u;
      if (!gLogDatapath)
      {
LABEL_52:
        v39 = *((_QWORD *)v64 + 3);
LABEL_53:
        _Block_object_dispose(&v59, 8);
        _Block_object_dispose(v63, 8);
        return v39;
      }
      v17 = __nwlog_obj();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
      {
        buf = 136446466;
        v68 = "nw_frame_cache_create_frame";
        v69 = 1024;
        LODWORD(v70) = v2;
        v18 = "%{public}s allocated new frame of length %u";
        v19 = v17;
        v20 = 18;
LABEL_78:
        _os_log_impl(&dword_182FBE000, v19, OS_LOG_TYPE_DEBUG, v18, (uint8_t *)&buf, v20);
      }
LABEL_7:
      if (gLogDatapath)
      {
        v7 = __nwlog_obj();
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
        {
          v8 = *((_QWORD *)v64 + 3);
          buf = 136446722;
          v68 = "nw_frame_cache_create_frame";
          v69 = 2048;
          v70 = v8;
          v71 = 1024;
          LODWORD(v72) = v2;
          _os_log_impl(&dword_182FBE000, v7, OS_LOG_TYPE_DEBUG, "%{public}s returning frame %p for requested length %u", (uint8_t *)&buf, 0x1Cu);
        }
      }
      goto LABEL_52;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    buf = 136446210;
    v68 = "nw_frame_cache_create_frame";
    v28 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v50 = 0;
    if (__nwlog_fault(v28, &type, &v50))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v29 = gLogObj;
        v30 = type;
        if (os_log_type_enabled((os_log_t)gLogObj, type))
        {
          buf = 136446210;
          v68 = "nw_frame_cache_create_frame";
          v31 = "%{public}s nw_frame_create new frame failed";
LABEL_59:
          _os_log_impl(&dword_182FBE000, v29, v30, v31, (uint8_t *)&buf, 0xCu);
        }
      }
      else if (v50)
      {
        v35 = (char *)__nw_create_backtrace_string();
        v29 = __nwlog_obj();
        v30 = type;
        v36 = os_log_type_enabled(v29, type);
        if (v35)
        {
          if (v36)
          {
            buf = 136446466;
            v68 = "nw_frame_cache_create_frame";
            v69 = 2082;
            v70 = (uint64_t)v35;
            _os_log_impl(&dword_182FBE000, v29, v30, "%{public}s nw_frame_create new frame failed, dumping backtrace:%{public}s", (uint8_t *)&buf, 0x16u);
          }
          free(v35);
          goto LABEL_60;
        }
        if (v36)
        {
          buf = 136446210;
          v68 = "nw_frame_cache_create_frame";
          v31 = "%{public}s nw_frame_create new frame failed, no backtrace";
          goto LABEL_59;
        }
      }
      else
      {
        v29 = __nwlog_obj();
        v30 = type;
        if (os_log_type_enabled(v29, type))
        {
          buf = 136446210;
          v68 = "nw_frame_cache_create_frame";
          v31 = "%{public}s nw_frame_create new frame failed, backtrace limit exceeded";
          goto LABEL_59;
        }
      }
    }
LABEL_60:
    if (v28)
      free(v28);
    if (v9)
      free(v9);
    v39 = 0;
    goto LABEL_53;
  }
  __break(1u);
  return result;
}

BOOL __nw_frame_cache_create_frame_block_invoke(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  int v6;
  NSObject *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  const char *v15;
  char *backtrace_string;
  _BOOL4 v17;
  uint64_t v18;
  NSObject *v19;
  char *v20;
  _BOOL4 v21;
  uint64_t v22;
  NSObject *v23;
  char *v24;
  _BOOL4 v25;
  _BOOL8 result;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  char *v32;
  NSObject *v33;
  os_log_type_t v34;
  uint64_t v35;
  const char *v36;
  char *v37;
  _BOOL4 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  NSObject *v44;
  int v45;
  NSObject *v46;
  NSObject *v47;
  int v48;
  int v49;
  NSObject *v50;
  NSObject *v51;
  char v52;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v55;
  __int16 v56;
  _BYTE v57[10];
  uint64_t v58;
  __int16 v59;
  uint64_t v60;
  __int16 v61;
  char *v62;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  if (!a2)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446210;
    v55 = "nw_frame_cache_create_frame_block_invoke";
    v12 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v52 = 0;
    if (!__nwlog_fault(v12, &type, &v52))
      goto LABEL_59;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v13 = gLogObj;
      v14 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_59;
      *(_DWORD *)buf = 136446210;
      v55 = "nw_frame_cache_create_frame_block_invoke";
      v15 = "%{public}s foreach gave null candidate_frame";
    }
    else if (v52)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v13 = gLogObj;
      v14 = type;
      v17 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          v55 = "nw_frame_cache_create_frame_block_invoke";
          v56 = 2082;
          *(_QWORD *)v57 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s foreach gave null candidate_frame, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_59;
      }
      if (!v17)
      {
LABEL_59:
        if (v12)
          free(v12);
        return 0;
      }
      *(_DWORD *)buf = 136446210;
      v55 = "nw_frame_cache_create_frame_block_invoke";
      v15 = "%{public}s foreach gave null candidate_frame, no backtrace";
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v13 = gLogObj;
      v14 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_59;
      *(_DWORD *)buf = 136446210;
      v55 = "nw_frame_cache_create_frame_block_invoke";
      v15 = "%{public}s foreach gave null candidate_frame, backtrace limit exceeded";
    }
    _os_log_impl(&dword_182FBE000, v13, v14, v15, buf, 0xCu);
    goto LABEL_59;
  }
  if ((*(_WORD *)(a2 + 204) & 0x100) != 0
    && g_channel_check_validity
    && !g_channel_check_validity(a2, *(_QWORD *)(a2 + 88)))
  {
    v4 = 0;
    v5 = 0;
  }
  else
  {
    v4 = *(_DWORD *)(a2 + 48);
    v5 = *(_QWORD *)(a2 + 112);
  }
  if (gLogDatapath)
  {
    v46 = __nwlog_obj();
    if (os_log_type_enabled(v46, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446978;
      v55 = "nw_frame_cache_create_frame_block_invoke";
      v56 = 2048;
      *(_QWORD *)v57 = a2;
      *(_WORD *)&v57[8] = 2048;
      v58 = v5;
      v59 = 1024;
      LODWORD(v60) = v4;
      _os_log_impl(&dword_182FBE000, v46, OS_LOG_TYPE_DEBUG, "%{public}s existing frame %p found, buffer %p, length %u", buf, 0x26u);
    }
  }
  v6 = *(_DWORD *)(a2 + 52);
  if (v6)
    v6 -= *(_DWORD *)(a2 + 56) + *(_DWORD *)(a2 + 60);
  if (v6 != v4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446210;
    v55 = "nw_frame_cache_create_frame_block_invoke";
    v8 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v52 = 0;
    if (!__nwlog_fault(v8, &type, &v52))
      goto LABEL_71;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v9 = gLogObj;
      v10 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_71;
      *(_DWORD *)buf = 136446210;
      v55 = "nw_frame_cache_create_frame_block_invoke";
      v11 = "%{public}s candidate frame is not fully unclaimed, destroying";
      goto LABEL_70;
    }
    if (!v52)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v9 = gLogObj;
      v10 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_71;
      *(_DWORD *)buf = 136446210;
      v55 = "nw_frame_cache_create_frame_block_invoke";
      v11 = "%{public}s candidate frame is not fully unclaimed, destroying, backtrace limit exceeded";
      goto LABEL_70;
    }
    v20 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v9 = gLogObj;
    v10 = type;
    v21 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!v20)
    {
      if (!v21)
        goto LABEL_71;
      *(_DWORD *)buf = 136446210;
      v55 = "nw_frame_cache_create_frame_block_invoke";
      v11 = "%{public}s candidate frame is not fully unclaimed, destroying, no backtrace";
      goto LABEL_70;
    }
    if (v21)
    {
      *(_DWORD *)buf = 136446466;
      v55 = "nw_frame_cache_create_frame_block_invoke";
      v56 = 2082;
      *(_QWORD *)v57 = v20;
      _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s candidate frame is not fully unclaimed, destroying, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v20);
    goto LABEL_71;
  }
  if (!v5 && v4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v7 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v55 = "nw_frame_cache_create_frame_block_invoke";
      v56 = 2048;
      *(_QWORD *)v57 = a2;
      *(_WORD *)&v57[8] = 1024;
      LODWORD(v58) = v4;
      _os_log_impl(&dword_182FBE000, v7, OS_LOG_TYPE_ERROR, "%{public}s candidate frame %p has length %u, but buffer is NULL, removing", buf, 0x1Cu);
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446210;
    v55 = "nw_frame_cache_create_frame_block_invoke";
    v8 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v52 = 0;
    if (__nwlog_fault(v8, &type, &v52))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v9 = gLogObj;
        v10 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type))
          goto LABEL_71;
        *(_DWORD *)buf = 136446210;
        v55 = "nw_frame_cache_create_frame_block_invoke";
        v11 = "%{public}s candidate frame has length > 0, but buffer is NULL";
        goto LABEL_70;
      }
      if (!v52)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v9 = gLogObj;
        v10 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type))
          goto LABEL_71;
        *(_DWORD *)buf = 136446210;
        v55 = "nw_frame_cache_create_frame_block_invoke";
        v11 = "%{public}s candidate frame has length > 0, but buffer is NULL, backtrace limit exceeded";
        goto LABEL_70;
      }
      v24 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v9 = gLogObj;
      v10 = type;
      v25 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (v24)
      {
        if (v25)
        {
          *(_DWORD *)buf = 136446466;
          v55 = "nw_frame_cache_create_frame_block_invoke";
          v56 = 2082;
          *(_QWORD *)v57 = v24;
          _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s candidate frame has length > 0, but buffer is NULL, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v24);
        if (!v8)
          goto LABEL_73;
        goto LABEL_72;
      }
      if (v25)
      {
        *(_DWORD *)buf = 136446210;
        v55 = "nw_frame_cache_create_frame_block_invoke";
        v11 = "%{public}s candidate frame has length > 0, but buffer is NULL, no backtrace";
LABEL_70:
        _os_log_impl(&dword_182FBE000, v9, v10, v11, buf, 0xCu);
      }
    }
LABEL_71:
    if (!v8)
    {
LABEL_73:
      frame_cache_remove_from_cache(*(_QWORD *)(a1 + 48), (_QWORD *)a2);
      return 1;
    }
LABEL_72:
    free(v8);
    goto LABEL_73;
  }
  v18 = *(unsigned int *)(a1 + 56);
  if (*MEMORY[0x1E0C85AD8] + v18 < (unint64_t)v4)
  {
    if (gLogDatapath)
    {
      v19 = __nwlog_obj();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446722;
        v55 = "frame_cache_candidate_frame_length_is_match";
        v56 = 1024;
        *(_DWORD *)v57 = v4;
        *(_WORD *)&v57[4] = 1024;
        *(_DWORD *)&v57[6] = v18;
        _os_log_impl(&dword_182FBE000, v19, OS_LOG_TYPE_DEBUG, "%{public}s candidate frame (%u bytes) is too much larger than requested (%u bytes), skipping", buf, 0x18u);
      }
    }
    goto LABEL_41;
  }
  if (v4 < v18)
  {
LABEL_41:
    if (!v5)
    {
      v22 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
      if (!*(_QWORD *)(v22 + 24))
      {
        *(_QWORD *)(v22 + 24) = a2;
        if (gLogDatapath)
        {
          v23 = __nwlog_obj();
          if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136446466;
            v55 = "nw_frame_cache_create_frame_block_invoke";
            v56 = 2048;
            *(_QWORD *)v57 = a2;
            _os_log_impl(&dword_182FBE000, v23, OS_LOG_TYPE_DEBUG, "%{public}s reserving bufferless frame %p if better candidate not found", buf, 0x16u);
          }
        }
      }
    }
    return 1;
  }
  v27 = *(_QWORD *)(a2 + 16);
  v28 = *(_QWORD **)(a2 + 24);
  if (v27)
  {
    *(_QWORD *)(v27 + 24) = v28;
    v28 = *(_QWORD **)(a2 + 24);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) = v28;
  }
  *v28 = v27;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v29 = *(_QWORD *)(a1 + 48);
  v30 = *(_DWORD *)(v29 + 24);
  *(_DWORD *)(v29 + 24) = v30 - 1;
  if (!v30)
  {
    __nwlog_obj();
    v31 = *(unsigned int *)(*(_QWORD *)(a1 + 48) + 24);
    *(_DWORD *)buf = 136446978;
    v55 = "nw_frame_cache_create_frame_block_invoke";
    v56 = 2082;
    *(_QWORD *)v57 = "frame_cache->empty_frames_count";
    *(_WORD *)&v57[8] = 2048;
    v58 = 1;
    v59 = 2048;
    v60 = v31;
    v32 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v52 = 0;
    if (__nwlog_fault(v32, &type, &v52))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v33 = __nwlog_obj();
        v34 = type;
        if (os_log_type_enabled(v33, type))
        {
          v35 = *(unsigned int *)(*(_QWORD *)(a1 + 48) + 24);
          *(_DWORD *)buf = 136446978;
          v55 = "nw_frame_cache_create_frame_block_invoke";
          v56 = 2082;
          *(_QWORD *)v57 = "frame_cache->empty_frames_count";
          *(_WORD *)&v57[8] = 2048;
          v58 = 1;
          v59 = 2048;
          v60 = v35;
          v36 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu";
LABEL_91:
          _os_log_impl(&dword_182FBE000, v33, v34, v36, buf, 0x2Au);
        }
      }
      else if (v52)
      {
        v37 = (char *)__nw_create_backtrace_string();
        v33 = __nwlog_obj();
        v34 = type;
        v38 = os_log_type_enabled(v33, type);
        if (v37)
        {
          if (v38)
          {
            v39 = *(unsigned int *)(*(_QWORD *)(a1 + 48) + 24);
            *(_DWORD *)buf = 136447234;
            v55 = "nw_frame_cache_create_frame_block_invoke";
            v56 = 2082;
            *(_QWORD *)v57 = "frame_cache->empty_frames_count";
            *(_WORD *)&v57[8] = 2048;
            v58 = 1;
            v59 = 2048;
            v60 = v39;
            v61 = 2082;
            v62 = v37;
            _os_log_impl(&dword_182FBE000, v33, v34, "%{public}s Underflow: %{public}s, decrement %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
          }
          free(v37);
          goto LABEL_92;
        }
        if (v38)
        {
          v41 = *(unsigned int *)(*(_QWORD *)(a1 + 48) + 24);
          *(_DWORD *)buf = 136446978;
          v55 = "nw_frame_cache_create_frame_block_invoke";
          v56 = 2082;
          *(_QWORD *)v57 = "frame_cache->empty_frames_count";
          *(_WORD *)&v57[8] = 2048;
          v58 = 1;
          v59 = 2048;
          v60 = v41;
          v36 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, no backtrace";
          goto LABEL_91;
        }
      }
      else
      {
        v33 = __nwlog_obj();
        v34 = type;
        if (os_log_type_enabled(v33, type))
        {
          v40 = *(unsigned int *)(*(_QWORD *)(a1 + 48) + 24);
          *(_DWORD *)buf = 136446978;
          v55 = "nw_frame_cache_create_frame_block_invoke";
          v56 = 2082;
          *(_QWORD *)v57 = "frame_cache->empty_frames_count";
          *(_WORD *)&v57[8] = 2048;
          v58 = 1;
          v59 = 2048;
          v60 = v40;
          v36 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, backtrace limit exceeded";
          goto LABEL_91;
        }
      }
    }
LABEL_92:
    if (v32)
      free(v32);
    *(_DWORD *)(*(_QWORD *)(a1 + 48) + 24) = 0;
  }
  if (!gLogDatapath)
  {
    v42 = *(_DWORD *)(a1 + 56);
    v43 = v4 - v42;
    if (v4 == v42)
      goto LABEL_98;
    goto LABEL_97;
  }
  v47 = __nwlog_obj();
  if (os_log_type_enabled(v47, OS_LOG_TYPE_DEBUG))
  {
    v48 = *(_DWORD *)(a1 + 56);
    *(_DWORD *)buf = 136446722;
    v55 = "nw_frame_cache_create_frame_block_invoke";
    v56 = 1024;
    *(_DWORD *)v57 = v4;
    *(_WORD *)&v57[4] = 1024;
    *(_DWORD *)&v57[6] = v48;
    _os_log_impl(&dword_182FBE000, v47, OS_LOG_TYPE_DEBUG, "%{public}s reusing frame of length %u, adjusting to %u", buf, 0x18u);
  }
  v49 = *(_DWORD *)(a1 + 56);
  v43 = v4 - v49;
  if (v4 != v49)
  {
    if (gLogDatapath)
    {
      v51 = __nwlog_obj();
      if (os_log_type_enabled(v51, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446466;
        v55 = "nw_frame_cache_create_frame_block_invoke";
        v56 = 1024;
        *(_DWORD *)v57 = v43;
        _os_log_impl(&dword_182FBE000, v51, OS_LOG_TYPE_DEBUG, "%{public}s claiming %u bytes off end of frame", buf, 0x12u);
      }
    }
LABEL_97:
    nw_frame_claim(a2, a2, 0, v43);
    goto LABEL_98;
  }
  if (gLogDatapath)
  {
    v50 = __nwlog_obj();
    if (os_log_type_enabled(v50, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446210;
      v55 = "nw_frame_cache_create_frame_block_invoke";
      _os_log_impl(&dword_182FBE000, v50, OS_LOG_TYPE_DEBUG, "%{public}s frame was exact match, not modifying", buf, 0xCu);
    }
  }
LABEL_98:
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = a2;
  if (!gLogDatapath)
    return 0;
  v44 = __nwlog_obj();
  result = os_log_type_enabled(v44, OS_LOG_TYPE_DEBUG);
  if (result)
  {
    v45 = nw_frame_unclaimed_length(*(_DWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24));
    *(_DWORD *)buf = 136446466;
    v55 = "nw_frame_cache_create_frame_block_invoke";
    v56 = 1024;
    *(_DWORD *)v57 = v45;
    _os_log_impl(&dword_182FBE000, v44, OS_LOG_TYPE_DEBUG, "%{public}s returning frame with unclaimed bytes %u", buf, 0x12u);
    return 0;
  }
  return result;
}

void nw_frame_cache_return_frame(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  const char *v18;
  char *v19;
  _BOOL4 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  NSObject *v25;
  int v26;
  int v27;
  int v28;
  _QWORD *v29;
  NSObject *v30;
  int v31;
  NSObject *v32;
  int v33;
  int v34;
  char *v35;
  uint64_t v36;
  os_log_type_t v37;
  int v38;
  const char *v39;
  int v40;
  uint64_t v41;
  os_log_type_t v42;
  int v43;
  char *v44;
  _BOOL4 v45;
  int v46;
  const char *v47;
  NSObject *v48;
  os_log_type_t v49;
  uint32_t v50;
  _BOOL4 v51;
  int v52;
  int v53;
  int v54;
  int v55;
  NSObject *v56;
  os_log_type_t v57;
  uint32_t v58;
  int v59;
  char *v60;
  NSObject *v61;
  os_log_type_t v62;
  const char *v63;
  NSObject *v64;
  NSObject *v65;
  NSObject *v66;
  int v67;
  char *backtrace_string;
  _BOOL4 v69;
  char *v70;
  _BOOL4 v71;
  NSObject *v72;
  char v73;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v76;
  __int16 v77;
  _BYTE v78[20];
  _BYTE v79[18];
  uint64_t v80;

  v80 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v76 = "nw_frame_cache_return_frame";
    v60 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v73 = 0;
    if (!__nwlog_fault(v60, &type, &v73))
      goto LABEL_125;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v61 = __nwlog_obj();
      v62 = type;
      if (!os_log_type_enabled(v61, type))
        goto LABEL_125;
      *(_DWORD *)buf = 136446210;
      v76 = "nw_frame_cache_return_frame";
      v63 = "%{public}s called with null frame_cache";
    }
    else if (v73)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v61 = __nwlog_obj();
      v62 = type;
      v69 = os_log_type_enabled(v61, type);
      if (backtrace_string)
      {
        if (v69)
        {
          *(_DWORD *)buf = 136446466;
          v76 = "nw_frame_cache_return_frame";
          v77 = 2082;
          *(_QWORD *)v78 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v61, v62, "%{public}s called with null frame_cache, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_125:
        if (!v60)
          return;
LABEL_126:
        free(v60);
        return;
      }
      if (!v69)
        goto LABEL_125;
      *(_DWORD *)buf = 136446210;
      v76 = "nw_frame_cache_return_frame";
      v63 = "%{public}s called with null frame_cache, no backtrace";
    }
    else
    {
      v61 = __nwlog_obj();
      v62 = type;
      if (!os_log_type_enabled(v61, type))
        goto LABEL_125;
      *(_DWORD *)buf = 136446210;
      v76 = "nw_frame_cache_return_frame";
      v63 = "%{public}s called with null frame_cache, backtrace limit exceeded";
    }
LABEL_124:
    _os_log_impl(&dword_182FBE000, v61, v62, v63, buf, 0xCu);
    goto LABEL_125;
  }
  if (a2)
  {
    if (gLogDatapath)
    {
      v64 = __nwlog_obj();
      if (os_log_type_enabled(v64, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446466;
        v76 = "nw_frame_cache_return_frame";
        v77 = 2048;
        *(_QWORD *)v78 = a2;
        _os_log_impl(&dword_182FBE000, v64, OS_LOG_TYPE_DEBUG, "%{public}s caching frame %p", buf, 0x16u);
      }
    }
    if ((*(_WORD *)(a2 + 204) & 0x100) != 0
      && g_channel_check_validity
      && !g_channel_check_validity(a2, *(_QWORD *)(a2 + 88))
      || (v4 = *(_QWORD *)(a2 + 112)) == 0)
    {
      if (!gLogDatapath)
      {
        v4 = 0;
        v5 = 0;
        v6 = *(_QWORD *)(a2 + 88);
        goto LABEL_14;
      }
      v72 = __nwlog_obj();
      if (os_log_type_enabled(v72, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446466;
        v76 = "nw_frame_cache_return_frame";
        v77 = 2048;
        *(_QWORD *)v78 = a2;
        _os_log_impl(&dword_182FBE000, v72, OS_LOG_TYPE_DEBUG, "%{public}s frame %p no longer has buffer, setting length to 0", buf, 0x16u);
      }
      v5 = 0;
      v4 = 0;
    }
    else
    {
      v5 = *(_DWORD *)(a2 + 48);
    }
    v6 = *(_QWORD *)(a2 + 88);
    if (gLogDatapath)
    {
      v7 = __nwlog_obj();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136447234;
        v76 = "nw_frame_cache_return_frame";
        v77 = 2048;
        *(_QWORD *)v78 = a2;
        *(_WORD *)&v78[8] = 2048;
        *(_QWORD *)&v78[10] = v4;
        *(_WORD *)&v78[18] = 1024;
        *(_DWORD *)v79 = v5;
        *(_WORD *)&v79[4] = 2048;
        *(_QWORD *)&v79[6] = v6;
        _os_log_impl(&dword_182FBE000, v7, OS_LOG_TYPE_DEBUG, "%{public}s resetting frame %p to buffer %p, length %u, context %p", buf, 0x30u);
      }
    }
LABEL_14:
    nw_frame_reset(a2, v4, v5, 0, v6);
    v8 = *(_QWORD *)a1;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)a1;
    v9 = a1 + 8;
    if (v8)
      v10 = (_QWORD *)(v8 + 24);
    else
      v10 = (_QWORD *)(a1 + 8);
    *v10 = a2 + 16;
    *(_QWORD *)a1 = a2;
    *(_QWORD *)(a2 + 24) = a1;
    v11 = *(unsigned int *)(a1 + 24) + 1;
    v12 = v11 << 31 >> 31;
    *(_DWORD *)(a1 + 24) = v11;
    if (v12 == v11 && (v12 & 0x8000000000000000) == 0)
      goto LABEL_36;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v13 = *(unsigned int *)(a1 + 24);
    *(_DWORD *)buf = 136446978;
    v76 = "frame_cache_add_to_cache";
    v77 = 2082;
    *(_QWORD *)v78 = "frame_cache->empty_frames_count";
    *(_WORD *)&v78[8] = 2048;
    *(_QWORD *)&v78[10] = 1;
    *(_WORD *)&v78[18] = 2048;
    *(_QWORD *)v79 = v13;
    v14 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v73 = 0;
    if (__nwlog_fault(v14, &type, &v73))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v15 = gLogObj;
        v16 = type;
        if (os_log_type_enabled((os_log_t)gLogObj, type))
        {
          v17 = *(unsigned int *)(a1 + 24);
          *(_DWORD *)buf = 136446978;
          v76 = "frame_cache_add_to_cache";
          v77 = 2082;
          *(_QWORD *)v78 = "frame_cache->empty_frames_count";
          *(_WORD *)&v78[8] = 2048;
          *(_QWORD *)&v78[10] = 1;
          *(_WORD *)&v78[18] = 2048;
          *(_QWORD *)v79 = v17;
          v18 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_32:
          _os_log_impl(&dword_182FBE000, v15, v16, v18, buf, 0x2Au);
        }
      }
      else if (v73)
      {
        v19 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v15 = gLogObj;
        v16 = type;
        v20 = os_log_type_enabled((os_log_t)gLogObj, type);
        if (v19)
        {
          if (v20)
          {
            v21 = *(unsigned int *)(a1 + 24);
            *(_DWORD *)buf = 136447234;
            v76 = "frame_cache_add_to_cache";
            v77 = 2082;
            *(_QWORD *)v78 = "frame_cache->empty_frames_count";
            *(_WORD *)&v78[8] = 2048;
            *(_QWORD *)&v78[10] = 1;
            *(_WORD *)&v78[18] = 2048;
            *(_QWORD *)v79 = v21;
            *(_WORD *)&v79[8] = 2082;
            *(_QWORD *)&v79[10] = v19;
            _os_log_impl(&dword_182FBE000, v15, v16, "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
          }
          free(v19);
          goto LABEL_33;
        }
        if (v20)
        {
          v23 = *(unsigned int *)(a1 + 24);
          *(_DWORD *)buf = 136446978;
          v76 = "frame_cache_add_to_cache";
          v77 = 2082;
          *(_QWORD *)v78 = "frame_cache->empty_frames_count";
          *(_WORD *)&v78[8] = 2048;
          *(_QWORD *)&v78[10] = 1;
          *(_WORD *)&v78[18] = 2048;
          *(_QWORD *)v79 = v23;
          v18 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
          goto LABEL_32;
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v15 = gLogObj;
        v16 = type;
        if (os_log_type_enabled((os_log_t)gLogObj, type))
        {
          v22 = *(unsigned int *)(a1 + 24);
          *(_DWORD *)buf = 136446978;
          v76 = "frame_cache_add_to_cache";
          v77 = 2082;
          *(_QWORD *)v78 = "frame_cache->empty_frames_count";
          *(_WORD *)&v78[8] = 2048;
          *(_QWORD *)&v78[10] = 1;
          *(_WORD *)&v78[18] = 2048;
          *(_QWORD *)v79 = v22;
          v18 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
          goto LABEL_32;
        }
      }
    }
LABEL_33:
    if (v14)
      free(v14);
    *(_DWORD *)(a1 + 24) = -1;
LABEL_36:
    if (gLogDatapath)
    {
      v65 = __nwlog_obj();
      if (os_log_type_enabled(v65, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446466;
        v76 = "nw_frame_cache_return_frame";
        v77 = 1024;
        *(_DWORD *)v78 = v5;
        _os_log_impl(&dword_182FBE000, v65, OS_LOG_TYPE_DEBUG, "%{public}s reset frame of length %u, eligible for reuse", buf, 0x12u);
      }
      if (gLogDatapath)
      {
        v66 = __nwlog_obj();
        if (os_log_type_enabled(v66, OS_LOG_TYPE_DEBUG))
        {
          v67 = *(_DWORD *)(a1 + 24);
          *(_DWORD *)buf = 136446466;
          v76 = "frame_cache_purge_if_necessary";
          v77 = 1024;
          *(_DWORD *)v78 = v67;
          _os_log_impl(&dword_182FBE000, v66, OS_LOG_TYPE_DEBUG, "%{public}s total %u empty frames in cache (initial)", buf, 0x12u);
        }
      }
    }
    if (*(_DWORD *)(a1 + 24) > *(_DWORD *)(a1 + 28))
    {
      while (1)
      {
        if (gLogDatapath)
        {
          v25 = __nwlog_obj();
          if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
          {
            v26 = *(_DWORD *)(a1 + 24);
            v27 = *(_DWORD *)(a1 + 28);
            *(_DWORD *)buf = 136446722;
            v76 = "frame_cache_purge_if_necessary";
            v77 = 1024;
            *(_DWORD *)v78 = v26;
            *(_WORD *)&v78[4] = 1024;
            *(_DWORD *)&v78[6] = v27;
            _os_log_impl(&dword_182FBE000, v25, OS_LOG_TYPE_DEBUG, "%{public}s too many frames in frame cache (%u > %u), pruning", buf, 0x18u);
          }
        }
        v24 = **(_QWORD ***)(*(_QWORD *)v9 + 8);
        if (!v24)
          break;
        frame_cache_remove_from_cache(a1, v24);
        if (*(_DWORD *)(a1 + 24) <= *(_DWORD *)(a1 + 28))
          goto LABEL_44;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v34 = *(_DWORD *)(a1 + 24);
      *(_DWORD *)buf = 136446466;
      v76 = "frame_cache_purge_if_necessary";
      v77 = 1024;
      *(_DWORD *)v78 = v34;
      v35 = (char *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      v73 = 0;
      if (!__nwlog_fault(v35, &type, &v73))
        goto LABEL_83;
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v36 = gLogObj;
        v37 = type;
        if (os_log_type_enabled((os_log_t)gLogObj, type))
        {
          v38 = *(_DWORD *)(a1 + 24);
          *(_DWORD *)buf = 136446466;
          v76 = "frame_cache_purge_if_necessary";
          v77 = 1024;
          *(_DWORD *)v78 = v38;
          v39 = "%{public}s no more frames in frame cache, we thought we had %u frames";
LABEL_78:
          v56 = v36;
          v57 = v37;
          v58 = 18;
LABEL_82:
          _os_log_impl(&dword_182FBE000, v56, v57, v39, buf, v58);
          goto LABEL_83;
        }
        goto LABEL_83;
      }
      if (!v73)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v36 = gLogObj;
        v37 = type;
        if (os_log_type_enabled((os_log_t)gLogObj, type))
        {
          v53 = *(_DWORD *)(a1 + 24);
          *(_DWORD *)buf = 136446466;
          v76 = "frame_cache_purge_if_necessary";
          v77 = 1024;
          *(_DWORD *)v78 = v53;
          v39 = "%{public}s no more frames in frame cache, we thought we had %u frames, backtrace limit exceeded";
          goto LABEL_78;
        }
LABEL_83:
        if (v35)
          free(v35);
        *(_DWORD *)(a1 + 24) = 0;
        return;
      }
      v44 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v36 = gLogObj;
      v37 = type;
      v45 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (!v44)
      {
        if (v45)
        {
          v55 = *(_DWORD *)(a1 + 24);
          *(_DWORD *)buf = 136446466;
          v76 = "frame_cache_purge_if_necessary";
          v77 = 1024;
          *(_DWORD *)v78 = v55;
          v39 = "%{public}s no more frames in frame cache, we thought we had %u frames, no backtrace";
          goto LABEL_78;
        }
        goto LABEL_83;
      }
      if (v45)
      {
        v46 = *(_DWORD *)(a1 + 24);
        *(_DWORD *)buf = 136446722;
        v76 = "frame_cache_purge_if_necessary";
        v77 = 1024;
        *(_DWORD *)v78 = v46;
        *(_WORD *)&v78[4] = 2082;
        *(_QWORD *)&v78[6] = v44;
        v47 = "%{public}s no more frames in frame cache, we thought we had %u frames, dumping backtrace:%{public}s";
        v48 = v36;
        v49 = v37;
        v50 = 28;
LABEL_70:
        _os_log_impl(&dword_182FBE000, v48, v49, v47, buf, v50);
        goto LABEL_71;
      }
      goto LABEL_71;
    }
LABEL_44:
    *(_DWORD *)buf = 0;
    nw_frame_array_get_frame_count((uint64_t *)a1, 0, buf);
    v28 = *(_DWORD *)buf;
    if (*(_DWORD *)buf <= *(_DWORD *)(a1 + 32))
    {
LABEL_51:
      if (gLogDatapath)
      {
        v32 = __nwlog_obj();
        if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
        {
          v33 = *(_DWORD *)(a1 + 24);
          *(_DWORD *)buf = 136446466;
          v76 = "frame_cache_purge_if_necessary";
          v77 = 1024;
          *(_DWORD *)v78 = v33;
          _os_log_impl(&dword_182FBE000, v32, OS_LOG_TYPE_DEBUG, "%{public}s total %u empty frames in cache (final)", buf, 0x12u);
        }
      }
      return;
    }
    while (1)
    {
      if (gLogDatapath)
      {
        v30 = __nwlog_obj();
        if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
        {
          v31 = *(_DWORD *)(a1 + 32);
          *(_DWORD *)buf = 136446722;
          v76 = "frame_cache_purge_if_necessary";
          v77 = 1024;
          *(_DWORD *)v78 = v28;
          *(_WORD *)&v78[4] = 1024;
          *(_DWORD *)&v78[6] = v31;
          _os_log_impl(&dword_182FBE000, v30, OS_LOG_TYPE_DEBUG, "%{public}s too many bytes in frame cache (%u > %u), pruning", buf, 0x18u);
        }
      }
      v29 = **(_QWORD ***)(*(_QWORD *)v9 + 8);
      if (!v29)
        break;
      frame_cache_remove_from_cache(a1, v29);
      *(_DWORD *)buf = 0;
      nw_frame_array_get_frame_count((uint64_t *)a1, 0, buf);
      v28 = *(_DWORD *)buf;
      if (*(_DWORD *)buf <= *(_DWORD *)(a1 + 32))
        goto LABEL_51;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v40 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)buf = 136446722;
    v76 = "frame_cache_purge_if_necessary";
    v77 = 1024;
    *(_DWORD *)v78 = v28;
    *(_WORD *)&v78[4] = 1024;
    *(_DWORD *)&v78[6] = v40;
    v35 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v73 = 0;
    if (!__nwlog_fault(v35, &type, &v73))
      goto LABEL_83;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v41 = gLogObj;
      v42 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_83;
      v43 = *(_DWORD *)(a1 + 24);
      *(_DWORD *)buf = 136446722;
      v76 = "frame_cache_purge_if_necessary";
      v77 = 1024;
      *(_DWORD *)v78 = v28;
      *(_WORD *)&v78[4] = 1024;
      *(_DWORD *)&v78[6] = v43;
      v39 = "%{public}s no more frames in frame cache, we thought we had %u bytes in %u frames";
    }
    else if (v73)
    {
      v44 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v41 = gLogObj;
      v42 = type;
      v51 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (v44)
      {
        if (v51)
        {
          v52 = *(_DWORD *)(a1 + 24);
          *(_DWORD *)buf = 136446978;
          v76 = "frame_cache_purge_if_necessary";
          v77 = 1024;
          *(_DWORD *)v78 = v28;
          *(_WORD *)&v78[4] = 1024;
          *(_DWORD *)&v78[6] = v52;
          *(_WORD *)&v78[10] = 2082;
          *(_QWORD *)&v78[12] = v44;
          v47 = "%{public}s no more frames in frame cache, we thought we had %u bytes in %u frames, dumping backtrace:%{public}s";
          v48 = v41;
          v49 = v42;
          v50 = 34;
          goto LABEL_70;
        }
LABEL_71:
        free(v44);
        goto LABEL_83;
      }
      if (!v51)
        goto LABEL_83;
      v59 = *(_DWORD *)(a1 + 24);
      *(_DWORD *)buf = 136446722;
      v76 = "frame_cache_purge_if_necessary";
      v77 = 1024;
      *(_DWORD *)v78 = v28;
      *(_WORD *)&v78[4] = 1024;
      *(_DWORD *)&v78[6] = v59;
      v39 = "%{public}s no more frames in frame cache, we thought we had %u bytes in %u frames, no backtrace";
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v41 = gLogObj;
      v42 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_83;
      v54 = *(_DWORD *)(a1 + 24);
      *(_DWORD *)buf = 136446722;
      v76 = "frame_cache_purge_if_necessary";
      v77 = 1024;
      *(_DWORD *)v78 = v28;
      *(_WORD *)&v78[4] = 1024;
      *(_DWORD *)&v78[6] = v54;
      v39 = "%{public}s no more frames in frame cache, we thought we had %u bytes in %u frames, backtrace limit exceeded";
    }
    v56 = v41;
    v57 = v42;
    v58 = 24;
    goto LABEL_82;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v76 = "nw_frame_cache_return_frame";
  v60 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v73 = 0;
  if (!__nwlog_fault(v60, &type, &v73))
    goto LABEL_125;
  if (type == OS_LOG_TYPE_FAULT)
  {
    v61 = __nwlog_obj();
    v62 = type;
    if (!os_log_type_enabled(v61, type))
      goto LABEL_125;
    *(_DWORD *)buf = 136446210;
    v76 = "nw_frame_cache_return_frame";
    v63 = "%{public}s called with null frame";
    goto LABEL_124;
  }
  if (!v73)
  {
    v61 = __nwlog_obj();
    v62 = type;
    if (!os_log_type_enabled(v61, type))
      goto LABEL_125;
    *(_DWORD *)buf = 136446210;
    v76 = "nw_frame_cache_return_frame";
    v63 = "%{public}s called with null frame, backtrace limit exceeded";
    goto LABEL_124;
  }
  v70 = (char *)__nw_create_backtrace_string();
  v61 = __nwlog_obj();
  v62 = type;
  v71 = os_log_type_enabled(v61, type);
  if (!v70)
  {
    if (!v71)
      goto LABEL_125;
    *(_DWORD *)buf = 136446210;
    v76 = "nw_frame_cache_return_frame";
    v63 = "%{public}s called with null frame, no backtrace";
    goto LABEL_124;
  }
  if (v71)
  {
    *(_DWORD *)buf = 136446466;
    v76 = "nw_frame_cache_return_frame";
    v77 = 2082;
    *(_QWORD *)v78 = v70;
    _os_log_impl(&dword_182FBE000, v61, v62, "%{public}s called with null frame, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v70);
  if (v60)
    goto LABEL_126;
}

uint64_t nw_masque_listener_add_client_demux_pattern(void *a1, uint64_t a2, const unsigned __int8 *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  const char *v12;
  char *backtrace_string;
  _BOOL4 v14;
  char *v15;
  NSObject *v16;
  os_log_type_t v17;
  const char *v18;
  char *v19;
  _BOOL4 v20;
  _QWORD v21[6];
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  os_log_type_t type;
  os_log_type_t out[48];
  _BYTE buf[24];
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if (!nw_protocol_metadata_is_masque_listener(a1))
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_masque_listener_add_client_demux_pattern";
    v9 = (char *)_os_log_send_and_compose_impl();
    out[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v22) = 0;
    if (!__nwlog_fault(v9, out, &v22))
      goto LABEL_27;
    if (out[0] == OS_LOG_TYPE_FAULT)
    {
      v10 = __nwlog_obj();
      v11 = out[0];
      if (!os_log_type_enabled(v10, out[0]))
        goto LABEL_27;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_masque_listener_add_client_demux_pattern";
      v12 = "%{public}s called with null nw_protocol_metadata_is_masque_listener(metadata)";
    }
    else if ((_BYTE)v22)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v10 = __nwlog_obj();
      v11 = out[0];
      v14 = os_log_type_enabled(v10, out[0]);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_masque_listener_add_client_demux_pattern";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null nw_protocol_metadata_is_masque_listener(metadata), dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_27;
      }
      if (!v14)
      {
LABEL_27:
        if (v9)
          free(v9);
        return 0;
      }
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_masque_listener_add_client_demux_pattern";
      v12 = "%{public}s called with null nw_protocol_metadata_is_masque_listener(metadata), no backtrace";
    }
    else
    {
      v10 = __nwlog_obj();
      v11 = out[0];
      if (!os_log_type_enabled(v10, out[0]))
        goto LABEL_27;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_masque_listener_add_client_demux_pattern";
      v12 = "%{public}s called with null nw_protocol_metadata_is_masque_listener(metadata), backtrace limit exceeded";
    }
    _os_log_impl(&dword_182FBE000, v10, v11, v12, buf, 0xCu);
    goto LABEL_27;
  }
  if (a2 && !uuid_is_null(a3))
  {
    memset(out, 0, 37);
    uuid_unparse(a3, (char *)out);
    v22 = 0;
    v23 = &v22;
    v24 = 0x2000000000;
    v25 = 0;
    v6 = MEMORY[0x1E0C809B0];
    v21[0] = MEMORY[0x1E0C809B0];
    v21[1] = 0x40000000;
    v21[2] = __nw_masque_listener_add_client_demux_pattern_block_invoke;
    v21[3] = &unk_1E149E2C8;
    v21[4] = &v22;
    v21[5] = out;
    nw_protocol_metadata_access_handle((uint64_t)a1, (uint64_t)v21);
    v7 = v23[3];
    if (!v7)
    {
LABEL_7:
      _Block_object_dispose(&v22, 8);
      return 0;
    }
    if (nw_protocol_metadata_is_masque_listener(a1))
    {
      *(_QWORD *)buf = v6;
      *(_QWORD *)&buf[8] = 0x40000000;
      *(_QWORD *)&buf[16] = ___ZL49nw_masque_listener_add_demux_pattern_for_endpointP20nw_protocol_metadataP19nw_protocol_optionsP11nw_endpoint_block_invoke;
      v30 = &__block_descriptor_tmp_25_26973;
      v31 = a2;
      v32 = v7;
      nw_protocol_metadata_access_handle((uint64_t)a1, (uint64_t)buf);
      goto LABEL_7;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_masque_listener_add_demux_pattern_for_endpoint";
    v15 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v26 = 0;
    if (__nwlog_fault(v15, &type, &v26))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v16 = __nwlog_obj();
        v17 = type;
        if (!os_log_type_enabled(v16, type))
          goto LABEL_39;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_masque_listener_add_demux_pattern_for_endpoint";
        v18 = "%{public}s called with null nw_protocol_metadata_is_masque_listener(metadata)";
        goto LABEL_38;
      }
      if (!v26)
      {
        v16 = __nwlog_obj();
        v17 = type;
        if (!os_log_type_enabled(v16, type))
          goto LABEL_39;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_masque_listener_add_demux_pattern_for_endpoint";
        v18 = "%{public}s called with null nw_protocol_metadata_is_masque_listener(metadata), backtrace limit exceeded";
        goto LABEL_38;
      }
      v19 = (char *)__nw_create_backtrace_string();
      v16 = __nwlog_obj();
      v17 = type;
      v20 = os_log_type_enabled(v16, type);
      if (v19)
      {
        if (v20)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_masque_listener_add_demux_pattern_for_endpoint";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v19;
          _os_log_impl(&dword_182FBE000, v16, v17, "%{public}s called with null nw_protocol_metadata_is_masque_listener(metadata), dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v19);
        goto LABEL_39;
      }
      if (v20)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_masque_listener_add_demux_pattern_for_endpoint";
        v18 = "%{public}s called with null nw_protocol_metadata_is_masque_listener(metadata), no backtrace";
LABEL_38:
        _os_log_impl(&dword_182FBE000, v16, v17, v18, buf, 0xCu);
      }
    }
LABEL_39:
    if (v15)
      free(v15);
    goto LABEL_7;
  }
  return 0;
}

BOOL nw_protocol_metadata_is_masque_listener(void *a1)
{
  id *v1;
  id v2;
  void *v3;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  const char *v8;
  char *backtrace_string;
  _BOOL4 v10;
  char v11;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v1 = a1;
    v2 = v1[1];

    if (nw_protocol_masque_listener_get_definition(void)::onceToken[0] != -1)
      dispatch_once(nw_protocol_masque_listener_get_definition(void)::onceToken, &__block_literal_global_186);
    if (nw_protocol_masque_listener_get_definition(void)::definition)
      v3 = os_retain((void *)nw_protocol_masque_listener_get_definition(void)::definition);
    else
      v3 = 0;
    return nw_protocol_definition_is_equal_unsafe((uint64_t)v2, (uint64_t)v3);
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v14 = "nw_protocol_metadata_is_masque_listener";
  v5 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v11 = 0;
  if (__nwlog_fault(v5, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v6 = __nwlog_obj();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_protocol_metadata_is_masque_listener";
        v8 = "%{public}s called with null metadata";
LABEL_21:
        _os_log_impl(&dword_182FBE000, v6, v7, v8, buf, 0xCu);
      }
    }
    else if (v11)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v6 = __nwlog_obj();
      v7 = type;
      v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          v14 = "nw_protocol_metadata_is_masque_listener";
          v15 = 2082;
          v16 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_22;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_protocol_metadata_is_masque_listener";
        v8 = "%{public}s called with null metadata, no backtrace";
        goto LABEL_21;
      }
    }
    else
    {
      v6 = __nwlog_obj();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_protocol_metadata_is_masque_listener";
        v8 = "%{public}s called with null metadata, backtrace limit exceeded";
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  if (v5)
    free(v5);
  return 0;
}

uint64_t __nw_masque_listener_add_client_demux_pattern_block_invoke(uint64_t a1, os_unfair_lock_s *a2)
{
  os_unfair_lock_s *v4;
  uint64_t v5;

  v4 = a2 + 2;
  os_unfair_lock_lock(a2 + 2);
  v5 = *(_QWORD *)(*(_QWORD *)&a2->_os_unfair_lock_opaque + 488);
  if (v5)
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = nw_dictionary_copy_value(v5, *(_QWORD *)(a1 + 40));
  os_unfair_lock_unlock(v4);
  return 1;
}

BOOL ___ZL49nw_masque_listener_add_demux_pattern_for_endpointP20nw_protocol_metadataP19nw_protocol_optionsP11nw_endpoint_block_invoke(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_s *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  const sockaddr *address;
  int sa_family;
  uint64_t v10;
  size_t v11;
  int v12;
  size_t v13;
  char *v14;
  char *v15;
  void *v16;
  dispatch_data_t v17;
  id *metadata_for_capsule;
  char v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  NSObject *v24;
  os_log_type_t v25;
  uint32_t v26;
  uint64_t v27;
  const char *v28;
  _BOOL8 result;
  NSObject *v30;
  void *v31;
  NSObject *v32;
  void *v33;
  _QWORD v34[5];
  _QWORD v35[4];
  _QWORD v36[5];
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint8_t buf[4];
  const char *v42;
  __int16 v43;
  uint64_t v44;
  __int16 v45;
  const char *v46;
  __int16 v47;
  uint64_t v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v4 = (os_unfair_lock_s *)(a2 + 8);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 8));
  v5 = *(_QWORD *)a2;
  v37 = 0;
  v38 = &v37;
  v39 = 0x2000000000;
  v40 = 0;
  v6 = *(void **)(a1 + 32);
  v36[0] = MEMORY[0x1E0C809B0];
  v36[1] = 0x40000000;
  v36[2] = ___ZL49nw_masque_listener_add_demux_pattern_for_endpointP20nw_protocol_metadataP19nw_protocol_optionsP11nw_endpoint_block_invoke_2;
  v36[3] = &unk_1E149E460;
  v36[4] = &v37;
  nw_demux_options_enumerate_patterns(v6, (uint64_t)v36);
  v7 = v38[3];
  if (!v7)
  {
LABEL_26:
    _Block_object_dispose(&v37, 8);
    return 1;
  }
  address = nw_endpoint_get_address(*(nw_endpoint_t *)(a1 + 40));
  sa_family = address->sa_family;
  v10 = 28;
  if (sa_family != 30)
    v10 = 0;
  if (sa_family == 2)
    v11 = 16;
  else
    v11 = v10;
  v12 = v7 + v11;
  v13 = v7 + v11 + 8;
  if (v7 + v11 == -8)
  {
    v30 = __nwlog_obj();
    os_log_type_enabled(v30, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    v42 = "strict_calloc";
    v31 = (void *)_os_log_send_and_compose_impl();
    result = __nwlog_abort((uint64_t)v31);
    if (result)
      goto LABEL_31;
    free(v31);
  }
  v14 = (char *)malloc_type_calloc(1uLL, v13, 0xEAFB8F1AuLL);
  if (v14)
    goto LABEL_9;
  v32 = __nwlog_obj();
  os_log_type_enabled(v32, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  v42 = "strict_calloc";
  v43 = 2048;
  v44 = 1;
  v45 = 2048;
  v46 = (const char *)v13;
  v33 = (void *)_os_log_send_and_compose_impl();
  result = __nwlog_abort((uint64_t)v33);
  if (!result)
  {
    free(v33);
LABEL_9:
    v35[0] = 0;
    v35[1] = v35;
    v35[2] = 0x2000000000;
    *(_WORD *)v14 = bswap32(v12 + 6) >> 16;
    v14[2] = 2;
    *(_WORD *)(v14 + 3) = (_WORD)v11 << 8;
    memcpy(v14 + 5, address, v11);
    v15 = &v14[v11 + 5];
    *v15 = 1;
    *(_WORD *)(v15 + 1) = bswap32(*((unsigned __int16 *)v38 + 12)) >> 16;
    v35[3] = v15 + 3;
    v16 = *(void **)(a1 + 32);
    v34[0] = MEMORY[0x1E0C809B0];
    v34[1] = 0x40000000;
    v34[2] = ___ZL49nw_masque_listener_add_demux_pattern_for_endpointP20nw_protocol_metadataP19nw_protocol_optionsP11nw_endpoint_block_invoke_3;
    v34[3] = &unk_1E149E488;
    v34[4] = v35;
    nw_demux_options_enumerate_patterns(v16, (uint64_t)v34);
    v17 = dispatch_data_create(v14, v13, 0, 0);
    metadata_for_capsule = nw_http_create_metadata_for_capsule(16770306, v17);
    v19 = nw_masque_send_metadata(v5, (uint64_t)metadata_for_capsule, *(_QWORD *)(v5 + 32));
    v20 = *(_DWORD *)(v5 + 527);
    if ((v19 & 1) != 0)
    {
      if ((v20 & 0x10000) != 0)
        goto LABEL_21;
      if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
        dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
      v21 = gprivacy_proxyLogObj;
      if (!os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
        goto LABEL_21;
      v22 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)buf = 136446978;
      v42 = "nw_masque_listener_add_demux_pattern_for_endpoint_block_invoke";
      v43 = 2082;
      v44 = v5 + 531;
      v45 = 2080;
      v46 = " ";
      v47 = 2112;
      v48 = v22;
      v23 = "%{public}s %{public}s%sSent REGISTER_LISTENER_DEMUX_PATTERN capsule for endpoint %@";
      v24 = v21;
      v25 = OS_LOG_TYPE_DEBUG;
      v26 = 42;
    }
    else
    {
      if ((v20 & 0x10000) != 0)
        goto LABEL_21;
      if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
        dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
      v27 = gprivacy_proxyLogObj;
      if (!os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
        goto LABEL_21;
      v28 = *(const char **)(a1 + 40);
      *(_DWORD *)buf = 136446722;
      v42 = (const char *)(v5 + 531);
      v43 = 2080;
      v44 = (uint64_t)" ";
      v45 = 2112;
      v46 = v28;
      v23 = "%{public}s%sFailed to send REGISTER_LISTENER_DEMUX_PATTERN capsule for endpoint %@";
      v24 = v27;
      v25 = OS_LOG_TYPE_ERROR;
      v26 = 32;
    }
    _os_log_impl(&dword_182FBE000, v24, v25, v23, buf, v26);
LABEL_21:
    free(v14);
    if (v17)
      dispatch_release(v17);
    if (metadata_for_capsule)
      os_release(metadata_for_capsule);
    os_unfair_lock_unlock(v4);
    _Block_object_dispose(v35, 8);
    goto LABEL_26;
  }
LABEL_31:
  __break(1u);
  return result;
}

uint64_t ___ZL49nw_masque_listener_add_demux_pattern_for_endpointP20nw_protocol_metadataP19nw_protocol_optionsP11nw_endpoint_block_invoke_2(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) += a2 + 4;
  if (a5)
    v5 = a2 + 1;
  else
    v5 = 1;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) += v5;
  return 1;
}

uint64_t ___ZL49nw_masque_listener_add_demux_pattern_for_endpointP20nw_protocol_metadataP19nw_protocol_optionsP11nw_endpoint_block_invoke_3(uint64_t a1, size_t __n, __int16 a3, void *__src, const void *a5)
{
  size_t v7;
  _BYTE *v8;

  **(_WORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = __n;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) += 2;
  **(_WORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = a3;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) += 2;
  v7 = __n;
  memcpy(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), __src, __n);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) += v7;
  v8 = *(_BYTE **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  if (a5)
  {
    *v8 = 1;
    memcpy((void *)++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), a5, v7);
  }
  else
  {
    *v8 = 0;
    v7 = 1;
  }
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) += v7;
  return 1;
}

uint64_t nw_masque_send_metadata(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  const char *v14;
  NSObject *v15;
  char *backtrace_string;
  _BOOL4 v17;
  _QWORD v19[2];
  uint64_t (*v20)(uint64_t, uint64_t);
  void *v21;
  _BYTE *v22;
  os_log_type_t *v23;
  uint64_t v24;
  uint64_t v25;
  os_log_type_t type[8];
  os_log_type_t *v27;
  char v28;
  _BYTE buf[24];
  const char *v30;
  __int16 v31;
  int v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_masque_send_metadata";
    v11 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    v28 = 0;
    if (!__nwlog_fault(v11, type, &v28))
      goto LABEL_27;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      v12 = __nwlog_obj();
      v13 = type[0];
      if (!os_log_type_enabled(v12, type[0]))
        goto LABEL_27;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_masque_send_metadata";
      v14 = "%{public}s called with null masque";
    }
    else if (v28)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v12 = __nwlog_obj();
      v13 = type[0];
      v17 = os_log_type_enabled(v12, type[0]);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_masque_send_metadata";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v12, v13, "%{public}s called with null masque, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_27;
      }
      if (!v17)
      {
LABEL_27:
        if (v11)
          free(v11);
        return 0;
      }
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_masque_send_metadata";
      v14 = "%{public}s called with null masque, no backtrace";
    }
    else
    {
      v12 = __nwlog_obj();
      v13 = type[0];
      if (!os_log_type_enabled(v12, type[0]))
        goto LABEL_27;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_masque_send_metadata";
      v14 = "%{public}s called with null masque, backtrace limit exceeded";
    }
    _os_log_impl(&dword_182FBE000, v12, v13, v14, buf, 0xCu);
    goto LABEL_27;
  }
  *(_QWORD *)type = 0;
  v27 = type;
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, os_log_type_t *))(*(_QWORD *)(a3 + 24)
                                                                                             + 88))(a3, a1, 0, 0, 1, type);
  if ((*(_BYTE *)(a1 + 529) & 1) == 0 && gLogDatapath)
  {
    if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
      dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
    v15 = gprivacy_proxyLogObj;
    if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446978;
      *(_QWORD *)&buf[4] = "nw_masque_send_metadata";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = a1 + 531;
      *(_WORD *)&buf[22] = 2080;
      v30 = " ";
      v31 = 1024;
      v32 = v6;
      _os_log_impl(&dword_182FBE000, v15, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sGot %u output frames", buf, 0x26u);
    }
  }
  if (!v6)
    return 0;
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = buf;
  *(_QWORD *)&buf[16] = 0x2000000000;
  LOBYTE(v30) = 0;
  v19[0] = MEMORY[0x1E0C809B0];
  v19[1] = 0x40000000;
  v20 = ___ZL23nw_masque_send_metadataP9nw_masqueP20nw_protocol_metadataP11nw_protocol_block_invoke;
  v21 = &unk_1E149E4D0;
  v22 = buf;
  v23 = type;
  v24 = a1;
  v25 = a2;
  v7 = *(_QWORD *)type;
  do
  {
    if (!v7)
      break;
    v8 = *(_QWORD *)(v7 + 32);
    v9 = ((uint64_t (*)(_QWORD *))v20)(v19);
    v7 = v8;
  }
  while ((v9 & 1) != 0);
  v10 = (*(uint64_t (**)(uint64_t, os_log_type_t *))(*(_QWORD *)(a3 + 24) + 96))(a3, type);
  _Block_object_dispose(buf, 8);
  return v10;
}

uint64_t ___ZL23nw_masque_send_metadataP9nw_masqueP20nw_protocol_metadataP11nw_protocol_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  NSObject *v8;
  uint64_t v9;
  const char *v10;
  BOOL v11;
  const char *v12;
  int v13;
  const char *v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  const char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    nw_frame_finalize(a2);
    v4 = *(_QWORD *)(a2 + 32);
    v5 = *(_QWORD **)(a2 + 40);
    if (v4)
    {
      *(_QWORD *)(v4 + 40) = v5;
      v5 = *(_QWORD **)(a2 + 40);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) = v5;
    }
    *v5 = v4;
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 40) = 0;
    v6 = *(_QWORD *)(a1 + 48);
    if ((!v6 || (*(_BYTE *)(v6 + 529) & 1) == 0) && gLogDatapath)
    {
      if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
        dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
      v8 = gprivacy_proxyLogObj;
      if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
      {
        v9 = *(_QWORD *)(a1 + 48);
        v10 = "";
        v11 = v9 == 0;
        if (v9)
          v12 = (const char *)(v9 + 531);
        else
          v12 = "";
        v13 = 136446722;
        v14 = "nw_masque_send_metadata_block_invoke";
        if (!v11)
          v10 = " ";
        v15 = 2082;
        v16 = v12;
        v17 = 2080;
        v18 = v10;
        _os_log_impl(&dword_182FBE000, v8, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sDropping unneeded output frame", (uint8_t *)&v13, 0x20u);
      }
    }
  }
  else
  {
    nw_frame_collapse(a2);
    nw_frame_set_metadata(a2, *(NSObject **)(a1 + 56), 0, 0);
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
  }
  return 1;
}

BOOL ___ZL42nw_protocol_masque_listener_get_definitionv_block_invoke()
{
  if (nw_protocol_masque_listener_identifier(void)::onceToken != -1)
    dispatch_once(&nw_protocol_masque_listener_identifier(void)::onceToken, &__block_literal_global_188);
  nw_protocol_masque_listener_get_definition(void)::definition = (uint64_t)nw_protocol_definition_create_with_identifier(&nw_protocol_masque_listener_identifier(void)::g_masque_protocol_identifier);
  nw_protocol_definition_set_is_proxy((void *)nw_protocol_masque_listener_get_definition(void)::definition);
  nw_protocol_definition_set_globals_allocator((void *)nw_protocol_masque_listener_get_definition(void)::definition, nw_masque_allocate_globals, nw_masque_deallocate_globals);
  nw_protocol_definition_set_options_allocator((void *)nw_protocol_masque_listener_get_definition(void)::definition, (uint64_t)nw_masque_allocate_options, (uint64_t)nw_masque_copy_options, (uint64_t)nw_masque_deallocate_options);
  nw_protocol_definition_set_options_equality_check((void *)nw_protocol_masque_listener_get_definition(void)::definition, (uint64_t)nw_masque_option_is_equal);
  nw_protocol_definition_set_options_serializer((void *)nw_protocol_masque_listener_get_definition(void)::definition, 0, (uint64_t)nw_masque_serialize_options, (uint64_t)nw_masque_deserialize_options);
  nw_protocol_definition_set_metadata_allocator((void *)nw_protocol_masque_listener_get_definition(void)::definition, (uint64_t)nw_masque_listener_allocate_metadata, (uint64_t)nw_masque_listener_deallocate_metadata);
  nw_protocol_definition_set_metadata_comparator((void *)nw_protocol_masque_listener_get_definition(void)::definition, (uint64_t)nw_masque_listener_compare_metadata);
  return nw_protocol_register_handle((uint64_t)&nw_protocol_masque_listener_identifier(void)::g_masque_protocol_identifier, (void *)nw_protocol_masque_listener_get_definition(void)::definition, (uint64_t)nw_protocol_masque_listener_create, (uint64_t)nw_protocol_masque_listener_accept);
}

BOOL nw_masque_allocate_globals(nw_protocol_definition *a1)
{
  void *v1;
  _BOOL8 result;
  NSObject *v3;
  void *v4;

  v1 = malloc_type_calloc(1uLL, 0xCuLL, 0xEAFB8F1AuLL);
  if (v1)
    return (BOOL)v1;
  v3 = __nwlog_obj();
  os_log_type_enabled(v3, OS_LOG_TYPE_ERROR);
  v4 = (void *)_os_log_send_and_compose_impl();
  result = __nwlog_abort((uint64_t)v4);
  if (!result)
  {
    free(v4);
    return (BOOL)v1;
  }
  __break(1u);
  return result;
}

void nw_masque_deallocate_globals(nw_protocol_definition *a1, void *a2)
{
  if (a2)
    free(a2);
}

BOOL nw_masque_allocate_options(nw_protocol_definition *a1)
{
  void *v1;
  _BOOL8 result;
  NSObject *v3;
  void *v4;

  v1 = malloc_type_calloc(1uLL, 0x28uLL, 0xEAFB8F1AuLL);
  if (v1)
    return (BOOL)v1;
  v3 = __nwlog_obj();
  os_log_type_enabled(v3, OS_LOG_TYPE_ERROR);
  v4 = (void *)_os_log_send_and_compose_impl();
  result = __nwlog_abort((uint64_t)v4);
  if (!result)
  {
    free(v4);
    return (BOOL)v1;
  }
  __break(1u);
  return result;
}

BOOL nw_masque_copy_options(nw_protocol_definition *a1, _QWORD *a2)
{
  _QWORD *v3;
  void *v4;
  void *v5;
  void *v6;
  _BOOL8 result;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  const char *v11;
  NSObject *v12;
  void *v13;
  char *backtrace_string;
  _BOOL4 v15;
  char v16;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v19 = "nw_masque_copy_options";
    v8 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v16 = 0;
    if (__nwlog_fault(v8, &type, &v16))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v9 = __nwlog_obj();
        v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          v19 = "nw_masque_copy_options";
          v11 = "%{public}s called with null existing_handle";
LABEL_27:
          _os_log_impl(&dword_182FBE000, v9, v10, v11, buf, 0xCu);
        }
      }
      else if (v16)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        v9 = __nwlog_obj();
        v10 = type;
        v15 = os_log_type_enabled(v9, type);
        if (backtrace_string)
        {
          if (v15)
          {
            *(_DWORD *)buf = 136446466;
            v19 = "nw_masque_copy_options";
            v20 = 2082;
            v21 = (uint64_t)backtrace_string;
            _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null existing_handle, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(backtrace_string);
          goto LABEL_28;
        }
        if (v15)
        {
          *(_DWORD *)buf = 136446210;
          v19 = "nw_masque_copy_options";
          v11 = "%{public}s called with null existing_handle, no backtrace";
          goto LABEL_27;
        }
      }
      else
      {
        v9 = __nwlog_obj();
        v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          v19 = "nw_masque_copy_options";
          v11 = "%{public}s called with null existing_handle, backtrace limit exceeded";
          goto LABEL_27;
        }
      }
    }
LABEL_28:
    if (v8)
      free(v8);
    return 0;
  }
  v3 = malloc_type_calloc(1uLL, 0x28uLL, 0xEAFB8F1AuLL);
  if (v3)
  {
    v4 = (void *)*a2;
    if (!*a2)
    {
LABEL_5:
      *v3 = v4;
      v5 = (void *)a2[1];
      if (v5)
        v3[1] = xpc_copy(v5);
      v6 = (void *)a2[2];
      if (v6)
        v3[2] = xpc_copy(v6);
      v3[3] = a2[3];
      *((_WORD *)v3 + 16) = *((_WORD *)a2 + 16);
      return (BOOL)v3;
    }
LABEL_4:
    v4 = os_retain(v4);
    goto LABEL_5;
  }
  v12 = __nwlog_obj();
  os_log_type_enabled(v12, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  v19 = "strict_calloc";
  v20 = 2048;
  v21 = 1;
  v22 = 2048;
  v23 = 40;
  v13 = (void *)_os_log_send_and_compose_impl();
  result = __nwlog_abort((uint64_t)v13);
  if (!result)
  {
    free(v13);
    v4 = (void *)*a2;
    if (!*a2)
      goto LABEL_5;
    goto LABEL_4;
  }
  __break(1u);
  return result;
}

void nw_masque_deallocate_options(nw_protocol_definition *a1, void **a2)
{
  void *v3;
  void *v4;

  if (*a2)
  {
    os_release(*a2);
    *a2 = 0;
  }
  v3 = a2[1];
  if (v3)
  {
    xpc_release(v3);
    a2[1] = 0;
  }
  v4 = a2[2];
  if (v4)
    xpc_release(v4);
  free(a2);
}

uint64_t nw_masque_option_is_equal(nw_protocol_definition *a1, xpc_object_t *a2, xpc_object_t *a3)
{
  if (*((_DWORD *)a2 + 6) == *((_DWORD *)a3 + 6)
    && *((_DWORD *)a2 + 7) == *((_DWORD *)a3 + 7)
    && *((unsigned __int8 *)a2 + 32) == *((unsigned __int8 *)a3 + 32)
    && *((unsigned __int8 *)a2 + 33) == *((unsigned __int8 *)a3 + 33)
    && nw_endpoint_is_equal(*a2, *a3, 0)
    && nw_unordered_xpc_array_is_equal(a2[1], a3[1]))
  {
    return nw_unordered_xpc_array_is_equal(a2[2], a3[2]);
  }
  else
  {
    return 0;
  }
}

BOOL nw_masque_serialize_options(nw_protocol_definition *a1, void *a2, unint64_t *a3)
{
  void *v5;
  size_t count;
  void *v7;
  BOOL v8;
  int v9;
  size_t v10;
  size_t v11;
  const char *string;
  const char *v13;
  size_t v14;
  size_t v15;
  NSObject *v16;
  void *v17;
  _BOOL8 result;
  size_t v19;
  char *v20;
  id v21;
  unsigned int v22;
  const char *hostname;
  const char *v24;
  _BYTE *v25;
  uint64_t v26;
  int v27;
  size_t v28;
  _BYTE *v29;
  const char *v30;
  size_t v31;
  size_t v32;
  _BYTE *v33;
  uint64_t v34;
  size_t v35;
  int v36;
  const char *v37;
  size_t v38;
  size_t v39;
  _BYTE *v40;
  int v41;
  uint64_t v42;
  NSObject *v43;
  void *v44;
  NSObject *v45;
  void *v46;
  NSObject *v47;
  NSObject *v48;
  char *v49;
  NSObject *v50;
  os_log_type_t v51;
  const char *v52;
  NSObject *v53;
  void *v54;
  char *backtrace_string;
  _BOOL4 v56;
  void *v57;
  void *v58;
  char v59;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v62;
  __int16 v63;
  uint64_t v64;
  __int16 v65;
  size_t v66;
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v62 = "nw_masque_serialize_options";
    v49 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v59 = 0;
    if (__nwlog_fault(v49, &type, &v59))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v50 = __nwlog_obj();
        v51 = type;
        if (os_log_type_enabled(v50, type))
        {
          *(_DWORD *)buf = 136446210;
          v62 = "nw_masque_serialize_options";
          v52 = "%{public}s called with null existing_handle";
LABEL_77:
          _os_log_impl(&dword_182FBE000, v50, v51, v52, buf, 0xCu);
        }
      }
      else if (v59)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        v50 = __nwlog_obj();
        v51 = type;
        v56 = os_log_type_enabled(v50, type);
        if (backtrace_string)
        {
          if (v56)
          {
            *(_DWORD *)buf = 136446466;
            v62 = "nw_masque_serialize_options";
            v63 = 2082;
            v64 = (uint64_t)backtrace_string;
            _os_log_impl(&dword_182FBE000, v50, v51, "%{public}s called with null existing_handle, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(backtrace_string);
          goto LABEL_78;
        }
        if (v56)
        {
          *(_DWORD *)buf = 136446210;
          v62 = "nw_masque_serialize_options";
          v52 = "%{public}s called with null existing_handle, no backtrace";
          goto LABEL_77;
        }
      }
      else
      {
        v50 = __nwlog_obj();
        v51 = type;
        if (os_log_type_enabled(v50, type))
        {
          *(_DWORD *)buf = 136446210;
          v62 = "nw_masque_serialize_options";
          v52 = "%{public}s called with null existing_handle, backtrace limit exceeded";
          goto LABEL_77;
        }
      }
    }
LABEL_78:
    if (v49)
      free(v49);
    return 0;
  }
  v5 = (void *)*((_QWORD *)a2 + 1);
  if (v5)
  {
    count = xpc_array_get_count(v5);
    v7 = (void *)*((_QWORD *)a2 + 2);
    if (!v7)
      goto LABEL_5;
    goto LABEL_4;
  }
  count = 0;
  v7 = (void *)*((_QWORD *)a2 + 2);
  if (v7)
LABEL_4:
    v7 = (void *)xpc_array_get_count(v7);
LABEL_5:
  if (count)
    v8 = count == (_QWORD)v7;
  else
    v8 = 0;
  v9 = v8;
  if (v8)
  {
    v10 = 0;
    v11 = 0;
    do
    {
      string = xpc_array_get_string(*((xpc_object_t *)a2 + 1), v10);
      v13 = xpc_array_get_string(*((xpc_object_t *)a2 + 2), v10);
      v14 = strlen(string);
      v15 = v11 + v14 + strlen(v13);
      v11 = v15 + 2;
      ++v10;
    }
    while (count != v10);
    v19 = v15 + 78;
    if (v15 == -78)
    {
      v16 = __nwlog_obj();
      os_log_type_enabled(v16, OS_LOG_TYPE_ERROR);
      *(_DWORD *)buf = 136446210;
      v62 = "strict_calloc";
      v17 = (void *)_os_log_send_and_compose_impl();
      result = __nwlog_abort((uint64_t)v17);
      if (result)
        goto LABEL_81;
      free(v17);
      v19 = 0;
    }
  }
  else
  {
    v19 = 76;
  }
  v20 = (char *)malloc_type_calloc(1uLL, v19, 0xEAFB8F1AuLL);
  if (v20)
    goto LABEL_19;
  v53 = __nwlog_obj();
  os_log_type_enabled(v53, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  v62 = "strict_calloc";
  v63 = 2048;
  v64 = 1;
  v65 = 2048;
  v66 = v19;
  v54 = (void *)_os_log_send_and_compose_impl();
  result = __nwlog_abort((uint64_t)v54);
  if (!result)
  {
    free(v54);
LABEL_19:
    *(_QWORD *)v20 = *((_QWORD *)a2 + 3);
    *((_WORD *)v20 + 37) = *((_WORD *)a2 + 16);
    if (*(_QWORD *)a2)
    {
      v21 = *(id *)a2;
      v22 = objc_msgSend(v21, "port");

      *((_WORD *)v20 + 4) = __rev16(v22);
      hostname = nw_endpoint_get_hostname(*(nw_endpoint_t *)a2);
      if (hostname)
      {
        v24 = hostname;
        if (strlen(hostname) - 1 <= 0x3E)
        {
          v25 = v20 + 10;
          v26 = 64;
          while (1)
          {
            v27 = *(unsigned __int8 *)v24;
            *v25 = v27;
            if (!v27)
              break;
            ++v25;
            ++v24;
            if ((unint64_t)--v26 <= 1)
            {
              *v25 = 0;
              break;
            }
          }
        }
      }
    }
    if (v9)
    {
      v28 = 0;
      v29 = v20 + 76;
      do
      {
        v30 = xpc_array_get_string(*((xpc_object_t *)a2 + 1), v28);
        v31 = strlen(v30);
        if (v29)
        {
          if (v30)
            goto LABEL_31;
        }
        else
        {
          v43 = __nwlog_obj();
          os_log_type_enabled(v43, OS_LOG_TYPE_ERROR);
          *(_DWORD *)buf = 136446210;
          v62 = "_strict_strlcpy";
          v44 = (void *)_os_log_send_and_compose_impl();
          result = __nwlog_abort((uint64_t)v44);
          if (result)
            goto LABEL_81;
          free(v44);
          if (v30)
            goto LABEL_31;
        }
        v45 = __nwlog_obj();
        os_log_type_enabled(v45, OS_LOG_TYPE_ERROR);
        *(_DWORD *)buf = 136446210;
        v62 = "_strict_strlcpy";
        v46 = (void *)_os_log_send_and_compose_impl();
        result = __nwlog_abort((uint64_t)v46);
        if (result)
          goto LABEL_81;
        free(v46);
LABEL_31:
        v32 = v31 + 1;
        v33 = v29;
        v34 = v31 + 1;
        if (v31 + 1 < 2)
        {
LABEL_36:
          if (v31 != -1 && v34)
            *v33 = 0;
        }
        else
        {
          v35 = v31 + 1;
          v33 = v29;
          while (1)
          {
            v36 = *(unsigned __int8 *)v30;
            *v33 = v36;
            if (!v36)
              break;
            ++v33;
            ++v30;
            if (--v35 <= 1)
            {
              v34 = 1;
              goto LABEL_36;
            }
          }
        }
        v37 = xpc_array_get_string(*((xpc_object_t *)a2 + 2), v28);
        v38 = strlen(v37);
        if (v29)
        {
          if (!v37)
            goto LABEL_56;
        }
        else
        {
          v47 = __nwlog_obj();
          os_log_type_enabled(v47, OS_LOG_TYPE_ERROR);
          *(_DWORD *)buf = 136446210;
          v62 = "_strict_strlcpy";
          v57 = (void *)_os_log_send_and_compose_impl();
          result = __nwlog_abort((uint64_t)v57);
          if (result)
            goto LABEL_81;
          free(v57);
          if (!v37)
          {
LABEL_56:
            v48 = __nwlog_obj();
            os_log_type_enabled(v48, OS_LOG_TYPE_ERROR);
            *(_DWORD *)buf = 136446210;
            v62 = "_strict_strlcpy";
            v58 = (void *)_os_log_send_and_compose_impl();
            result = __nwlog_abort((uint64_t)v58);
            if (result)
              goto LABEL_81;
            free(v58);
          }
        }
        if (v38 + 1 < 2)
        {
          v40 = &v29[v32];
          v42 = v38 + 1;
          if (v38 != -1)
          {
LABEL_48:
            if (v42)
              *v40 = 0;
          }
        }
        else
        {
          v39 = v38 + 1;
          v40 = &v29[v32];
          while (1)
          {
            v41 = *(unsigned __int8 *)v37;
            *v40 = v41;
            if (!v41)
              break;
            ++v40;
            ++v37;
            if (--v39 <= 1)
            {
              v42 = 1;
              if (v38 != -1)
                goto LABEL_48;
              break;
            }
          }
        }
        v29 += v32 + v38 + 1;
        ++v28;
      }
      while (v28 != count);
    }
    *a3 = v19;
    return (BOOL)v20;
  }
LABEL_81:
  __break(1u);
  return result;
}

void sub_1836019BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL nw_masque_deserialize_options(nw_protocol_definition *a1, const char *a2, uint64_t a3)
{
  void *v5;
  const char *v6;
  const char *v7;
  size_t v8;
  const char *v9;
  size_t v10;
  unint64_t v11;
  _BOOL8 result;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  const char *v16;
  NSObject *v17;
  void *v18;
  char *backtrace_string;
  _BOOL4 v20;
  const char *v21;
  _BOOL4 v22;
  char v23;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  uint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v26 = "nw_masque_deserialize_options";
    v13 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (!__nwlog_fault(v13, &type, &v23))
      goto LABEL_49;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v14 = __nwlog_obj();
      v15 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_masque_deserialize_options";
        v16 = "%{public}s called with null serialized_bytes";
LABEL_48:
        _os_log_impl(&dword_182FBE000, v14, v15, v16, buf, 0xCu);
      }
LABEL_49:
      if (v13)
        free(v13);
      return 0;
    }
    if (!v23)
    {
      v14 = __nwlog_obj();
      v15 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_masque_deserialize_options";
        v16 = "%{public}s called with null serialized_bytes, backtrace limit exceeded";
        goto LABEL_48;
      }
      goto LABEL_49;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v14 = __nwlog_obj();
    v15 = type;
    v20 = os_log_type_enabled(v14, type);
    if (!backtrace_string)
    {
      if (v20)
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_masque_deserialize_options";
        v16 = "%{public}s called with null serialized_bytes, no backtrace";
        goto LABEL_48;
      }
      goto LABEL_49;
    }
    if (v20)
    {
      *(_DWORD *)buf = 136446466;
      v26 = "nw_masque_deserialize_options";
      v27 = 2082;
      v28 = (uint64_t)backtrace_string;
      v21 = "%{public}s called with null serialized_bytes, dumping backtrace:%{public}s";
LABEL_38:
      _os_log_impl(&dword_182FBE000, v14, v15, v21, buf, 0x16u);
    }
LABEL_39:
    free(backtrace_string);
    goto LABEL_49;
  }
  if ((unint64_t)a3 <= 0x4B)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v26 = "nw_masque_deserialize_options";
    v13 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (!__nwlog_fault(v13, &type, &v23))
      goto LABEL_49;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v14 = __nwlog_obj();
      v15 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_masque_deserialize_options";
        v16 = "%{public}s called with null (serialized_length >= sizeof(struct nw_masque_serialized_options))";
        goto LABEL_48;
      }
      goto LABEL_49;
    }
    if (!v23)
    {
      v14 = __nwlog_obj();
      v15 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_masque_deserialize_options";
        v16 = "%{public}s called with null (serialized_length >= sizeof(struct nw_masque_serialized_options)), backtrace limit exceeded";
        goto LABEL_48;
      }
      goto LABEL_49;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v14 = __nwlog_obj();
    v15 = type;
    v22 = os_log_type_enabled(v14, type);
    if (!backtrace_string)
    {
      if (v22)
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_masque_deserialize_options";
        v16 = "%{public}s called with null (serialized_length >= sizeof(struct nw_masque_serialized_options)), no backtrace";
        goto LABEL_48;
      }
      goto LABEL_49;
    }
    if (v22)
    {
      *(_DWORD *)buf = 136446466;
      v26 = "nw_masque_deserialize_options";
      v27 = 2082;
      v28 = (uint64_t)backtrace_string;
      v21 = "%{public}s called with null (serialized_length >= sizeof(struct nw_masque_serialized_options)), dumping back"
            "trace:%{public}s";
      goto LABEL_38;
    }
    goto LABEL_39;
  }
  v5 = malloc_type_calloc(1uLL, 0x28uLL, 0xEAFB8F1AuLL);
  if (v5)
  {
LABEL_4:
    *((_QWORD *)v5 + 3) = *(_QWORD *)a2;
    *((_WORD *)v5 + 16) = *((_WORD *)a2 + 37);
    if (*((_WORD *)a2 + 4) && a2[10])
      *(_QWORD *)v5 = nw_endpoint_create_host_with_numeric_port(a2 + 10, *((unsigned __int16 *)a2 + 4));
    if (a3 == 76)
      return (BOOL)v5;
    v6 = a2 + 76;
    if (a2[a3 - 1])
      return (BOOL)v5;
    if (*((_QWORD *)v5 + 1))
    {
      if (*((_QWORD *)v5 + 2))
        goto LABEL_11;
    }
    else
    {
      *((_QWORD *)v5 + 1) = xpc_array_create(0, 0);
      if (*((_QWORD *)v5 + 2))
      {
LABEL_11:
        if (a3 < 77)
          return (BOOL)v5;
        goto LABEL_15;
      }
    }
    *((_QWORD *)v5 + 2) = xpc_array_create(0, 0);
    if (a3 < 77)
      return (BOOL)v5;
LABEL_15:
    v7 = &a2[a3];
    do
    {
      v8 = strlen(v6);
      if (&v6[v8 + 1] >= v7)
        break;
      v9 = &v6[v8 + 1];
      v10 = strlen(v9);
      if (&v9[v10 + 1] > v7)
        break;
      v11 = (unint64_t)&v9[v10 + 1];
      xpc_array_set_string(*((xpc_object_t *)v5 + 1), 0xFFFFFFFFFFFFFFFFLL, v6);
      xpc_array_set_string(*((xpc_object_t *)v5 + 2), 0xFFFFFFFFFFFFFFFFLL, v9);
      v6 = (const char *)v11;
    }
    while (v11 < (unint64_t)v7);
    return (BOOL)v5;
  }
  v17 = __nwlog_obj();
  os_log_type_enabled(v17, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  v26 = "strict_calloc";
  v27 = 2048;
  v28 = 1;
  v29 = 2048;
  v30 = 40;
  v18 = (void *)_os_log_send_and_compose_impl();
  result = __nwlog_abort((uint64_t)v18);
  if (!result)
  {
    free(v18);
    goto LABEL_4;
  }
  __break(1u);
  return result;
}

BOOL nw_masque_listener_allocate_metadata(nw_protocol_definition *a1)
{
  void *v1;
  _BOOL8 result;
  NSObject *v3;
  void *v4;

  v1 = malloc_type_calloc(1uLL, 0x10uLL, 0xEAFB8F1AuLL);
  if (v1)
    return (BOOL)v1;
  v3 = __nwlog_obj();
  os_log_type_enabled(v3, OS_LOG_TYPE_ERROR);
  v4 = (void *)_os_log_send_and_compose_impl();
  result = __nwlog_abort((uint64_t)v4);
  if (!result)
  {
    free(v4);
    return (BOOL)v1;
  }
  __break(1u);
  return result;
}

void nw_masque_listener_deallocate_metadata(nw_protocol_definition *a1, void *a2)
{
  if (a2)
    free(a2);
}

BOOL nw_masque_listener_compare_metadata(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  char *v4;
  NSObject *v5;
  os_log_type_t v6;
  const char *v7;
  char *backtrace_string;
  _BOOL4 v9;
  const char *v10;
  _BOOL4 v11;
  char v12;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    if (a3)
      return *a2 == *a3;
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v15 = "nw_masque_listener_compare_metadata";
    v4 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v12 = 0;
    if (!__nwlog_fault(v4, &type, &v12))
      goto LABEL_32;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v5 = __nwlog_obj();
      v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_masque_listener_compare_metadata";
        v7 = "%{public}s called with null handle2";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (!v12)
    {
      v5 = __nwlog_obj();
      v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_masque_listener_compare_metadata";
        v7 = "%{public}s called with null handle2, backtrace limit exceeded";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v5 = __nwlog_obj();
    v6 = type;
    v11 = os_log_type_enabled(v5, type);
    if (!backtrace_string)
    {
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_masque_listener_compare_metadata";
        v7 = "%{public}s called with null handle2, no backtrace";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (v11)
    {
      *(_DWORD *)buf = 136446466;
      v15 = "nw_masque_listener_compare_metadata";
      v16 = 2082;
      v17 = backtrace_string;
      v10 = "%{public}s called with null handle2, dumping backtrace:%{public}s";
      goto LABEL_21;
    }
    goto LABEL_22;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v15 = "nw_masque_listener_compare_metadata";
  v4 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v12 = 0;
  if (!__nwlog_fault(v4, &type, &v12))
    goto LABEL_32;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v12)
    {
      v5 = __nwlog_obj();
      v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_masque_listener_compare_metadata";
        v7 = "%{public}s called with null handle1, backtrace limit exceeded";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v5 = __nwlog_obj();
    v6 = type;
    v9 = os_log_type_enabled(v5, type);
    if (!backtrace_string)
    {
      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_masque_listener_compare_metadata";
        v7 = "%{public}s called with null handle1, no backtrace";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (v9)
    {
      *(_DWORD *)buf = 136446466;
      v15 = "nw_masque_listener_compare_metadata";
      v16 = 2082;
      v17 = backtrace_string;
      v10 = "%{public}s called with null handle1, dumping backtrace:%{public}s";
LABEL_21:
      _os_log_impl(&dword_182FBE000, v5, v6, v10, buf, 0x16u);
    }
LABEL_22:
    free(backtrace_string);
    goto LABEL_32;
  }
  v5 = __nwlog_obj();
  v6 = type;
  if (os_log_type_enabled(v5, type))
  {
    *(_DWORD *)buf = 136446210;
    v15 = "nw_masque_listener_compare_metadata";
    v7 = "%{public}s called with null handle1";
LABEL_31:
    _os_log_impl(&dword_182FBE000, v5, v6, v7, buf, 0xCu);
  }
LABEL_32:
  if (v4)
    free(v4);
  return 0;
}

BOOL nw_protocol_masque_listener_create(const nw_protocol_identifier *a1, nw_object *a2, nw_endpoint *a3, nw_parameters *a4)
{
  char *v6;
  uint64_t v7;
  void *v8;
  uint64_t internal;
  int v10;
  void *v11;
  id *singleton;
  _BOOL8 result;
  NSObject *v14;
  void *v15;
  _QWORD aBlock[5];
  void *memptr;
  _BYTE v18[24];
  uint64_t v19;
  char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  memptr = 0;
  if (malloc_type_posix_memalign(&memptr, 8uLL, 0x270uLL, 0x68FF3B34uLL) || (v6 = (char *)memptr) == 0)
  {
    v14 = __nwlog_obj();
    os_log_type_enabled(v14, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v18 = 136446722;
    *(_QWORD *)&v18[4] = "strict_memalign";
    *(_WORD *)&v18[12] = 2048;
    *(_QWORD *)&v18[14] = 8;
    *(_WORD *)&v18[22] = 2048;
    v19 = 624;
    v15 = (void *)_os_log_send_and_compose_impl();
    result = __nwlog_abort((uint64_t)v15);
    if (result)
    {
      __break(1u);
      return result;
    }
    free(v15);
    v6 = (char *)memptr;
  }
  bzero(v6, 0x270uLL);
  *(_QWORD *)v18 = 0;
  *(_QWORD *)&v18[8] = v18;
  *(_QWORD *)&v18[16] = 0x2000000000;
  v7 = MEMORY[0x1E0C809B0];
  v19 = (uint64_t)v6;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZL34nw_protocol_masque_listener_createPK22nw_protocol_identifierP9nw_objectP11nw_endpointP13nw_parameters_block_invoke;
  aBlock[3] = &unk_1E149EC70;
  aBlock[4] = v18;
  *((_QWORD *)v6 + 62) = _Block_copy(aBlock);
  _Block_object_dispose(v18, 8);
  if (nw_protocol_masque_listener_identifier(void)::onceToken != -1)
    dispatch_once(&nw_protocol_masque_listener_identifier(void)::onceToken, &__block_literal_global_188);
  *((_QWORD *)v6 + 2) = &nw_protocol_masque_listener_identifier(void)::g_masque_protocol_identifier;
  if (nw_protocol_masque_listener_get_callbacks(void)::onceToken != -1)
    dispatch_once(&nw_protocol_masque_listener_get_callbacks(void)::onceToken, &__block_literal_global_192);
  *((_QWORD *)v6 + 3) = &nw_protocol_masque_listener_get_callbacks(void)::g_masque_listener_callbacks;
  *((_QWORD *)v6 + 5) = v6;
  *((_QWORD *)v6 + 32) = 0;
  *((_QWORD *)v6 + 33) = v6 + 256;
  if (a3)
    v8 = os_retain(a3);
  else
    v8 = 0;
  *((_QWORD *)v6 + 38) = v8;
  *((_DWORD *)v6 + 128) = 0;
  *((_QWORD *)v6 + 63) = 1;
  *(_DWORD *)(v6 + 527) |= 0x10u;
  if (!*((_QWORD *)v6 + 60))
  {
    internal = nw_hash_table_create_internal(5u, 24, (const void *(*)(const void *, unsigned int *))nw_protocol_get_key, (unsigned int (*)(const void *, unsigned int))nw_protocol_key_hash, (BOOL (*)(const void *, const void *, unsigned int))nw_protocol_matches_key, 0);
    if (internal)
      *(_DWORD *)(internal + 48) &= ~2u;
    *((_QWORD *)v6 + 60) = internal;
  }
  if (nw_parameters_get_logging_disabled((uint64_t)a4))
    v10 = 0x10000;
  else
    v10 = 0;
  *(_DWORD *)(v6 + 527) = *(_DWORD *)(v6 + 527) & 0xFFFEFFFF | v10;
  if (nw_protocol_masque_listener_get_definition(void)::onceToken[0] != -1)
    dispatch_once(nw_protocol_masque_listener_get_definition(void)::onceToken, &__block_literal_global_186);
  v11 = (void *)nw_protocol_masque_listener_get_definition(void)::definition;
  if (nw_protocol_masque_listener_get_definition(void)::definition)
    v11 = os_retain((void *)nw_protocol_masque_listener_get_definition(void)::definition);
  singleton = nw_protocol_metadata_create_singleton(v11);
  *((_QWORD *)v6 + 58) = singleton;
  *(_QWORD *)v18 = v7;
  *(_QWORD *)&v18[8] = 0x40000000;
  *(_QWORD *)&v18[16] = ___ZL32nw_masque_listener_set_callbacksP20nw_protocol_metadataPv_block_invoke;
  v19 = (uint64_t)&__block_descriptor_tmp_50;
  v20 = v6;
  nw_protocol_metadata_access_handle((uint64_t)singleton, (uint64_t)v18);
  return (BOOL)v6;
}

uint64_t nw_protocol_masque_listener_accept(nw_protocol *a1, nw_endpoint *a2, nw_parameters *a3)
{
  char *v4;
  NSObject *v5;
  os_log_type_t v6;
  const char *v7;
  char *backtrace_string;
  _BOOL4 v9;
  const char *v10;
  _BOOL4 v11;
  char *v12;
  _BOOL4 v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v17 = "nw_protocol_masque_listener_accept";
    v4 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v14 = 0;
    if (!__nwlog_fault(v4, &type, &v14))
      goto LABEL_46;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v5 = __nwlog_obj();
      v6 = type;
      if (!os_log_type_enabled(v5, type))
        goto LABEL_46;
      *(_DWORD *)buf = 136446210;
      v17 = "nw_protocol_masque_listener_accept";
      v7 = "%{public}s called with null many_to_one_handler";
LABEL_45:
      _os_log_impl(&dword_182FBE000, v5, v6, v7, buf, 0xCu);
      goto LABEL_46;
    }
    if (!v14)
    {
      v5 = __nwlog_obj();
      v6 = type;
      if (!os_log_type_enabled(v5, type))
        goto LABEL_46;
      *(_DWORD *)buf = 136446210;
      v17 = "nw_protocol_masque_listener_accept";
      v7 = "%{public}s called with null many_to_one_handler, backtrace limit exceeded";
      goto LABEL_45;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v5 = __nwlog_obj();
    v6 = type;
    v9 = os_log_type_enabled(v5, type);
    if (!backtrace_string)
    {
      if (!v9)
        goto LABEL_46;
      *(_DWORD *)buf = 136446210;
      v17 = "nw_protocol_masque_listener_accept";
      v7 = "%{public}s called with null many_to_one_handler, no backtrace";
      goto LABEL_45;
    }
    if (v9)
    {
      *(_DWORD *)buf = 136446466;
      v17 = "nw_protocol_masque_listener_accept";
      v18 = 2082;
      v19 = backtrace_string;
      v10 = "%{public}s called with null many_to_one_handler, dumping backtrace:%{public}s";
LABEL_25:
      _os_log_impl(&dword_182FBE000, v5, v6, v10, buf, 0x16u);
    }
LABEL_26:
    free(backtrace_string);
    if (!v4)
      return 0;
    goto LABEL_47;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v17 = "nw_protocol_masque_listener_accept";
    v4 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v14 = 0;
    if (!__nwlog_fault(v4, &type, &v14))
      goto LABEL_46;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v5 = __nwlog_obj();
      v6 = type;
      if (!os_log_type_enabled(v5, type))
        goto LABEL_46;
      *(_DWORD *)buf = 136446210;
      v17 = "nw_protocol_masque_listener_accept";
      v7 = "%{public}s called with null endpoint";
      goto LABEL_45;
    }
    if (!v14)
    {
      v5 = __nwlog_obj();
      v6 = type;
      if (!os_log_type_enabled(v5, type))
        goto LABEL_46;
      *(_DWORD *)buf = 136446210;
      v17 = "nw_protocol_masque_listener_accept";
      v7 = "%{public}s called with null endpoint, backtrace limit exceeded";
      goto LABEL_45;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v5 = __nwlog_obj();
    v6 = type;
    v11 = os_log_type_enabled(v5, type);
    if (!backtrace_string)
    {
      if (!v11)
        goto LABEL_46;
      *(_DWORD *)buf = 136446210;
      v17 = "nw_protocol_masque_listener_accept";
      v7 = "%{public}s called with null endpoint, no backtrace";
      goto LABEL_45;
    }
    if (v11)
    {
      *(_DWORD *)buf = 136446466;
      v17 = "nw_protocol_masque_listener_accept";
      v18 = 2082;
      v19 = backtrace_string;
      v10 = "%{public}s called with null endpoint, dumping backtrace:%{public}s";
      goto LABEL_25;
    }
    goto LABEL_26;
  }
  if (a3)
    return 1;
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_protocol_masque_listener_accept";
  v4 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v4, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v5 = __nwlog_obj();
      v6 = type;
      if (!os_log_type_enabled(v5, type))
        goto LABEL_46;
      *(_DWORD *)buf = 136446210;
      v17 = "nw_protocol_masque_listener_accept";
      v7 = "%{public}s called with null parameters";
      goto LABEL_45;
    }
    if (!v14)
    {
      v5 = __nwlog_obj();
      v6 = type;
      if (!os_log_type_enabled(v5, type))
        goto LABEL_46;
      *(_DWORD *)buf = 136446210;
      v17 = "nw_protocol_masque_listener_accept";
      v7 = "%{public}s called with null parameters, backtrace limit exceeded";
      goto LABEL_45;
    }
    v12 = (char *)__nw_create_backtrace_string();
    v5 = __nwlog_obj();
    v6 = type;
    v13 = os_log_type_enabled(v5, type);
    if (!v12)
    {
      if (!v13)
        goto LABEL_46;
      *(_DWORD *)buf = 136446210;
      v17 = "nw_protocol_masque_listener_accept";
      v7 = "%{public}s called with null parameters, no backtrace";
      goto LABEL_45;
    }
    if (v13)
    {
      *(_DWORD *)buf = 136446466;
      v17 = "nw_protocol_masque_listener_accept";
      v18 = 2082;
      v19 = v12;
      _os_log_impl(&dword_182FBE000, v5, v6, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v12);
  }
LABEL_46:
  if (v4)
LABEL_47:
    free(v4);
  return 0;
}

uint64_t ___ZL34nw_protocol_masque_listener_createPK22nw_protocol_identifierP9nw_objectP11nw_endpointP13nw_parameters_block_invoke(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0)
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 0;
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
}

uint64_t ___ZL32nw_masque_listener_set_callbacksP20nw_protocol_metadataPv_block_invoke(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_s *v4;

  v4 = (os_unfair_lock_s *)(a2 + 8);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 8));
  *(_QWORD *)a2 = *(_QWORD *)(a1 + 32);
  os_unfair_lock_unlock(v4);
  return 1;
}

void ___ZL41nw_protocol_masque_listener_get_callbacksv_block_invoke()
{
  qword_1EDCF1800 = (uint64_t)nw_protocol_default_reset;
  unk_1EDCF1808 = nw_protocol_default_input_flush;
  qword_1EDCF1790 = (uint64_t)nw_protocol_default_register_notification;
  unk_1EDCF1798 = nw_protocol_default_unregister_notification;
  nw_protocol_masque_listener_get_callbacks(void)::g_masque_listener_callbacks = (uint64_t)nw_protocol_masque_listener_add_input_handler;
  *(_QWORD *)algn_1EDCF1708 = nw_protocol_masque_remove_input_handler;
  qword_1EDCF1710 = (uint64_t)nw_protocol_masque_replace_input_handler;
  unk_1EDCF1718 = nw_protocol_masque_connect;
  qword_1EDCF1720 = (uint64_t)nw_protocol_masque_disconnect;
  unk_1EDCF1728 = nw_protocol_masque_connected;
  qword_1EDCF1730 = (uint64_t)nw_protocol_masque_disconnected;
  unk_1EDCF1738 = nw_protocol_masque_error;
  qword_1EDCF17D0 = (uint64_t)nw_protocol_default_get_output_interface;
  unk_1EDCF17D8 = nw_protocol_masque_waiting_for_output;
  qword_1EDCF1760 = (uint64_t)nw_protocol_masque_listener_finalize_output_frames;
  unk_1EDCF1768 = nw_protocol_default_link_state;
  qword_1EDCF1750 = (uint64_t)nw_protocol_masque_listener_get_input_frames;
  unk_1EDCF1758 = nw_protocol_masque_listener_get_output_frames;
  qword_1EDCF1740 = (uint64_t)nw_protocol_masque_input_available;
  unk_1EDCF1748 = nw_protocol_default_output_available;
  qword_1EDCF17B0 = (uint64_t)nw_protocol_masque_supports_external_data;
  unk_1EDCF17B8 = nw_protocol_masque_input_finished;
  qword_1EDCF1780 = (uint64_t)nw_protocol_default_get_local;
  unk_1EDCF1788 = nw_protocol_masque_get_remote_endpoint;
  qword_1EDCF1770 = (uint64_t)nw_protocol_masque_get_parameters;
  unk_1EDCF1778 = nw_protocol_default_get_path;
  qword_1EDCF17C0 = (uint64_t)nw_protocol_default_output_finished;
  unk_1EDCF17C8 = nw_protocol_masque_get_output_local_endpoint;
  qword_1EDCF17A0 = (uint64_t)nw_protocol_masque_notify;
  unk_1EDCF17A8 = nw_protocol_default_updated_path;
  qword_1EDCF17E0 = (uint64_t)nw_protocol_masque_copy_info;
  unk_1EDCF17E8 = nw_protocol_masque_add_listen_handler;
  qword_1EDCF17F0 = (uint64_t)nw_protocol_masque_remove_listen_handler;
  unk_1EDCF17F8 = nw_protocol_default_get_message_properties;
}

uint64_t nw_protocol_masque_listener_add_input_handler(nw_protocol *a1, nw_protocol *a2)
{
  char *handle;
  nw_protocol *default_input_handler;
  uint64_t remote_endpoint;
  void *v7;
  _BOOL8 v8;
  _BOOL8 v9;
  void *v10;
  _QWORD *extra;
  NSObject *v13;
  const char *v14;
  NSObject *v15;
  char *v16;
  NSObject *v17;
  os_log_type_t v18;
  const char *v19;
  char *backtrace_string;
  _BOOL4 v21;
  const char *v22;
  _BOOL4 v23;
  NSObject *v24;
  char v25;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v28;
  __int16 v29;
  const char *v30;
  __int16 v31;
  _BYTE v32[18];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v28 = "nw_protocol_masque_listener_add_input_handler";
    v16 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v25 = 0;
    if (!__nwlog_fault(v16, &type, &v25))
      goto LABEL_60;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v25)
      {
        v17 = __nwlog_obj();
        v18 = type;
        if (!os_log_type_enabled(v17, type))
          goto LABEL_60;
        *(_DWORD *)buf = 136446210;
        v28 = "nw_protocol_masque_listener_add_input_handler";
        v19 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_59;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v17 = __nwlog_obj();
      v18 = type;
      v21 = os_log_type_enabled(v17, type);
      if (!backtrace_string)
      {
        if (!v21)
          goto LABEL_60;
        *(_DWORD *)buf = 136446210;
        v28 = "nw_protocol_masque_listener_add_input_handler";
        v19 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_59;
      }
      if (v21)
      {
        *(_DWORD *)buf = 136446466;
        v28 = "nw_protocol_masque_listener_add_input_handler";
        v29 = 2082;
        v30 = backtrace_string;
        v22 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_45:
        _os_log_impl(&dword_182FBE000, v17, v18, v22, buf, 0x16u);
      }
LABEL_46:
      free(backtrace_string);
      goto LABEL_60;
    }
    v17 = __nwlog_obj();
    v18 = type;
    if (!os_log_type_enabled(v17, type))
      goto LABEL_60;
    *(_DWORD *)buf = 136446210;
    v28 = "nw_protocol_masque_listener_add_input_handler";
    v19 = "%{public}s called with null protocol";
LABEL_59:
    _os_log_impl(&dword_182FBE000, v17, v18, v19, buf, 0xCu);
LABEL_60:
    if (v16)
      free(v16);
    return 0;
  }
  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v28 = "nw_protocol_masque_listener_add_input_handler";
    v16 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v25 = 0;
    if (!__nwlog_fault(v16, &type, &v25))
      goto LABEL_60;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v17 = __nwlog_obj();
      v18 = type;
      if (!os_log_type_enabled(v17, type))
        goto LABEL_60;
      *(_DWORD *)buf = 136446210;
      v28 = "nw_protocol_masque_listener_add_input_handler";
      v19 = "%{public}s called with null masque";
      goto LABEL_59;
    }
    if (!v25)
    {
      v17 = __nwlog_obj();
      v18 = type;
      if (!os_log_type_enabled(v17, type))
        goto LABEL_60;
      *(_DWORD *)buf = 136446210;
      v28 = "nw_protocol_masque_listener_add_input_handler";
      v19 = "%{public}s called with null masque, backtrace limit exceeded";
      goto LABEL_59;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v17 = __nwlog_obj();
    v18 = type;
    v23 = os_log_type_enabled(v17, type);
    if (backtrace_string)
    {
      if (v23)
      {
        *(_DWORD *)buf = 136446466;
        v28 = "nw_protocol_masque_listener_add_input_handler";
        v29 = 2082;
        v30 = backtrace_string;
        v22 = "%{public}s called with null masque, dumping backtrace:%{public}s";
        goto LABEL_45;
      }
      goto LABEL_46;
    }
    if (!v23)
      goto LABEL_60;
    *(_DWORD *)buf = 136446210;
    v28 = "nw_protocol_masque_listener_add_input_handler";
    v19 = "%{public}s called with null masque, no backtrace";
    goto LABEL_59;
  }
  default_input_handler = a1->default_input_handler;
  if (!default_input_handler)
    return nw_protocol_masque_add_input_handler(a1, a2);
  if (default_input_handler == a2)
  {
    if ((handle[529] & 1) != 0)
      return 0;
    if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
      dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
    v13 = gprivacy_proxyLogObj;
    if (!os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
      return 0;
    *(_DWORD *)buf = 136446466;
    v28 = handle + 531;
    v29 = 2080;
    v30 = " ";
    v14 = "%{public}s%sDefault input handler is being re-added";
    goto LABEL_21;
  }
  remote_endpoint = nw_protocol_get_remote_endpoint((uint64_t)a2);
  if (remote_endpoint)
  {
    v7 = (void *)remote_endpoint;
    type = OS_LOG_TYPE_DEFAULT;
    v8 = nw_hash_table_add_object(*((_QWORD *)handle + 60), (uint64_t)a2, (char *)&type);
    v9 = type != OS_LOG_TYPE_DEFAULT;
    if (type)
    {
      v10 = (void *)v8;
      extra = (_QWORD *)nw_hash_node_get_extra(v8);
      *extra = 0;
      extra[1] = extra;
      extra[2] = os_retain(v7);
      if ((handle[529] & 1) == 0 && gLogDatapath)
      {
        if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
          dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
        v24 = gprivacy_proxyLogObj;
        if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136446978;
          v28 = "nw_protocol_masque_listener_add_input_handler";
          v29 = 2082;
          v30 = handle + 531;
          v31 = 2080;
          *(_QWORD *)v32 = " ";
          *(_WORD *)&v32[8] = 2112;
          *(_QWORD *)&v32[10] = v7;
          _os_log_impl(&dword_182FBE000, v24, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sAdded new flow for endpoint %@", buf, 0x2Au);
        }
      }
      a2->output_handler_context = v10;
      nw_protocol_set_output_handler((uint64_t)a2, (uint64_t)a1);
    }
    else if ((handle[529] & 1) == 0)
    {
      if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
        dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
      v15 = gprivacy_proxyLogObj;
      if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446978;
        v28 = handle + 531;
        v29 = 2080;
        v30 = " ";
        v31 = 1042;
        *(_DWORD *)v32 = 16;
        *(_WORD *)&v32[4] = 2098;
        *(_QWORD *)&v32[6] = a2;
        _os_log_impl(&dword_182FBE000, v15, OS_LOG_TYPE_ERROR, "%{public}s%sInput handler already registered for %{public,uuid_t}.16P", buf, 0x26u);
      }
    }
    return v9;
  }
  if ((handle[529] & 1) == 0)
  {
    if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
      dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
    v13 = gprivacy_proxyLogObj;
    if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      v28 = handle + 531;
      v29 = 2080;
      v30 = " ";
      v14 = "%{public}s%sInput handler did not provide remote endpoint";
LABEL_21:
      _os_log_impl(&dword_182FBE000, v13, OS_LOG_TYPE_ERROR, v14, buf, 0x16u);
    }
  }
  return 0;
}

uint64_t nw_protocol_masque_replace_input_handler(nw_protocol *a1, nw_protocol *a2, nw_protocol *a3)
{
  char *handle;
  char *v7;
  nw_protocol *default_input_handler;
  const char *v9;
  NSObject *v10;
  os_log_type_t v11;
  nw_protocol *v12;
  const char *v13;
  nw_protocol_callbacks *callbacks;
  uint64_t (*supports_external_data)(nw_protocol *);
  int v16;
  unsigned int *v17;
  int v18;
  unsigned int v19;
  char *v21;
  _BOOL4 v22;
  nw_protocol *v23;
  nw_protocol *v24;
  nw_protocol *v25;
  char *v26;
  const char *v27;
  NSObject *v28;
  os_log_type_t v29;
  const char *v30;
  char *backtrace_string;
  _BOOL4 v32;
  const char *v33;
  _BOOL4 v34;
  _BOOL4 v35;
  _BOOL4 v36;
  char v37;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v40;
  __int16 v41;
  char *v42;
  __int16 v43;
  const char *v44;
  __int16 v45;
  nw_protocol *v46;
  __int16 v47;
  nw_protocol *v48;
  __int16 v49;
  char *v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v40 = "nw_protocol_masque_replace_input_handler";
    v27 = (const char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v37 = 0;
    if (!__nwlog_fault(v27, &type, &v37))
      goto LABEL_94;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v37)
      {
        v28 = __nwlog_obj();
        v29 = type;
        if (os_log_type_enabled(v28, type))
        {
          *(_DWORD *)buf = 136446210;
          v40 = "nw_protocol_masque_replace_input_handler";
          v30 = "%{public}s called with null protocol, backtrace limit exceeded";
          goto LABEL_93;
        }
        goto LABEL_94;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v28 = __nwlog_obj();
      v29 = type;
      v32 = os_log_type_enabled(v28, type);
      if (!backtrace_string)
      {
        if (v32)
        {
          *(_DWORD *)buf = 136446210;
          v40 = "nw_protocol_masque_replace_input_handler";
          v30 = "%{public}s called with null protocol, no backtrace";
          goto LABEL_93;
        }
        goto LABEL_94;
      }
      if (!v32)
        goto LABEL_76;
      *(_DWORD *)buf = 136446466;
      v40 = "nw_protocol_masque_replace_input_handler";
      v41 = 2082;
      v42 = backtrace_string;
      v33 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
      goto LABEL_75;
    }
    v28 = __nwlog_obj();
    v29 = type;
    if (!os_log_type_enabled(v28, type))
      goto LABEL_94;
    *(_DWORD *)buf = 136446210;
    v40 = "nw_protocol_masque_replace_input_handler";
    v30 = "%{public}s called with null protocol";
LABEL_93:
    _os_log_impl(&dword_182FBE000, v28, v29, v30, buf, 0xCu);
    goto LABEL_94;
  }
  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v40 = "nw_protocol_masque_replace_input_handler";
    v27 = (const char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v37 = 0;
    if (!__nwlog_fault(v27, &type, &v37))
      goto LABEL_94;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v37)
      {
        v28 = __nwlog_obj();
        v29 = type;
        if (os_log_type_enabled(v28, type))
        {
          *(_DWORD *)buf = 136446210;
          v40 = "nw_protocol_masque_replace_input_handler";
          v30 = "%{public}s called with null masque, backtrace limit exceeded";
          goto LABEL_93;
        }
        goto LABEL_94;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v28 = __nwlog_obj();
      v29 = type;
      v34 = os_log_type_enabled(v28, type);
      if (!backtrace_string)
      {
        if (v34)
        {
          *(_DWORD *)buf = 136446210;
          v40 = "nw_protocol_masque_replace_input_handler";
          v30 = "%{public}s called with null masque, no backtrace";
          goto LABEL_93;
        }
        goto LABEL_94;
      }
      if (!v34)
        goto LABEL_76;
      *(_DWORD *)buf = 136446466;
      v40 = "nw_protocol_masque_replace_input_handler";
      v41 = 2082;
      v42 = backtrace_string;
      v33 = "%{public}s called with null masque, dumping backtrace:%{public}s";
      goto LABEL_75;
    }
    v28 = __nwlog_obj();
    v29 = type;
    if (!os_log_type_enabled(v28, type))
      goto LABEL_94;
    *(_DWORD *)buf = 136446210;
    v40 = "nw_protocol_masque_replace_input_handler";
    v30 = "%{public}s called with null masque";
    goto LABEL_93;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v40 = "nw_protocol_masque_replace_input_handler";
    v27 = (const char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v37 = 0;
    if (!__nwlog_fault(v27, &type, &v37))
      goto LABEL_94;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v28 = __nwlog_obj();
      v29 = type;
      if (!os_log_type_enabled(v28, type))
        goto LABEL_94;
      *(_DWORD *)buf = 136446210;
      v40 = "nw_protocol_masque_replace_input_handler";
      v30 = "%{public}s called with null old_input_handler";
      goto LABEL_93;
    }
    if (!v37)
    {
      v28 = __nwlog_obj();
      v29 = type;
      if (os_log_type_enabled(v28, type))
      {
        *(_DWORD *)buf = 136446210;
        v40 = "nw_protocol_masque_replace_input_handler";
        v30 = "%{public}s called with null old_input_handler, backtrace limit exceeded";
        goto LABEL_93;
      }
      goto LABEL_94;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v28 = __nwlog_obj();
    v29 = type;
    v35 = os_log_type_enabled(v28, type);
    if (!backtrace_string)
    {
      if (v35)
      {
        *(_DWORD *)buf = 136446210;
        v40 = "nw_protocol_masque_replace_input_handler";
        v30 = "%{public}s called with null old_input_handler, no backtrace";
        goto LABEL_93;
      }
      goto LABEL_94;
    }
    if (!v35)
      goto LABEL_76;
    *(_DWORD *)buf = 136446466;
    v40 = "nw_protocol_masque_replace_input_handler";
    v41 = 2082;
    v42 = backtrace_string;
    v33 = "%{public}s called with null old_input_handler, dumping backtrace:%{public}s";
LABEL_75:
    _os_log_impl(&dword_182FBE000, v28, v29, v33, buf, 0x16u);
    goto LABEL_76;
  }
  if (!a3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v40 = "nw_protocol_masque_replace_input_handler";
    v27 = (const char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v37 = 0;
    if (!__nwlog_fault(v27, &type, &v37))
      goto LABEL_94;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v28 = __nwlog_obj();
      v29 = type;
      if (os_log_type_enabled(v28, type))
      {
        *(_DWORD *)buf = 136446210;
        v40 = "nw_protocol_masque_replace_input_handler";
        v30 = "%{public}s called with null new_input_handler";
        goto LABEL_93;
      }
LABEL_94:
      if (!v27)
        return 0;
      v26 = (char *)v27;
      goto LABEL_40;
    }
    if (!v37)
    {
      v28 = __nwlog_obj();
      v29 = type;
      if (os_log_type_enabled(v28, type))
      {
        *(_DWORD *)buf = 136446210;
        v40 = "nw_protocol_masque_replace_input_handler";
        v30 = "%{public}s called with null new_input_handler, backtrace limit exceeded";
        goto LABEL_93;
      }
      goto LABEL_94;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v28 = __nwlog_obj();
    v29 = type;
    v36 = os_log_type_enabled(v28, type);
    if (!backtrace_string)
    {
      if (v36)
      {
        *(_DWORD *)buf = 136446210;
        v40 = "nw_protocol_masque_replace_input_handler";
        v30 = "%{public}s called with null new_input_handler, no backtrace";
        goto LABEL_93;
      }
      goto LABEL_94;
    }
    if (v36)
    {
      *(_DWORD *)buf = 136446466;
      v40 = "nw_protocol_masque_replace_input_handler";
      v41 = 2082;
      v42 = backtrace_string;
      v33 = "%{public}s called with null new_input_handler, dumping backtrace:%{public}s";
      goto LABEL_75;
    }
LABEL_76:
    free(backtrace_string);
    goto LABEL_94;
  }
  if (a1->default_input_handler != a2)
  {
    if ((handle[529] & 1) != 0)
      return 0;
    if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
      dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
    v7 = handle + 531;
    default_input_handler = a1->default_input_handler;
    *(_DWORD *)buf = 136447234;
    v40 = "nw_protocol_masque_replace_input_handler";
    v41 = 2082;
    v42 = handle + 531;
    v43 = 2080;
    v44 = " ";
    v45 = 2048;
    v46 = default_input_handler;
    v47 = 2048;
    v48 = a2;
    v9 = (const char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v37 = 0;
    if (__nwlog_fault(v9, &type, &v37))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
          dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
        v10 = gprivacy_proxyLogObj;
        v11 = type;
        if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, type))
        {
          v12 = a1->default_input_handler;
          *(_DWORD *)buf = 136447234;
          v40 = "nw_protocol_masque_replace_input_handler";
          v41 = 2082;
          v42 = handle + 531;
          v43 = 2080;
          v44 = " ";
          v45 = 2048;
          v46 = v12;
          v47 = 2048;
          v48 = a2;
          v13 = "%{public}s %{public}s%sOld input handler does not match (%p != %p)";
LABEL_37:
          _os_log_impl(&dword_182FBE000, v10, v11, v13, buf, 0x34u);
        }
      }
      else if (v37)
      {
        v21 = (char *)__nw_create_backtrace_string();
        if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
          dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
        v10 = gprivacy_proxyLogObj;
        v11 = type;
        v22 = os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, type);
        if (!v21)
        {
          if (!v22)
            goto LABEL_38;
          v25 = a1->default_input_handler;
          *(_DWORD *)buf = 136447234;
          v40 = "nw_protocol_masque_replace_input_handler";
          v41 = 2082;
          v42 = v7;
          v43 = 2080;
          v44 = " ";
          v45 = 2048;
          v46 = v25;
          v47 = 2048;
          v48 = a2;
          v13 = "%{public}s %{public}s%sOld input handler does not match (%p != %p), no backtrace";
          goto LABEL_37;
        }
        if (v22)
        {
          v23 = a1->default_input_handler;
          *(_DWORD *)buf = 136447490;
          v40 = "nw_protocol_masque_replace_input_handler";
          v41 = 2082;
          v42 = v7;
          v43 = 2080;
          v44 = " ";
          v45 = 2048;
          v46 = v23;
          v47 = 2048;
          v48 = a2;
          v49 = 2082;
          v50 = v21;
          _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s %{public}s%sOld input handler does not match (%p != %p), dumping backtrace:%{public}s", buf, 0x3Eu);
        }
        free(v21);
      }
      else
      {
        if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
          dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
        v10 = gprivacy_proxyLogObj;
        v11 = type;
        if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, type))
        {
          v24 = a1->default_input_handler;
          *(_DWORD *)buf = 136447234;
          v40 = "nw_protocol_masque_replace_input_handler";
          v41 = 2082;
          v42 = handle + 531;
          v43 = 2080;
          v44 = " ";
          v45 = 2048;
          v46 = v24;
          v47 = 2048;
          v48 = a2;
          v13 = "%{public}s %{public}s%sOld input handler does not match (%p != %p), backtrace limit exceeded";
          goto LABEL_37;
        }
      }
    }
LABEL_38:
    if (v9)
    {
      v26 = (char *)v9;
LABEL_40:
      free(v26);
    }
    return 0;
  }
  nw_protocol_set_input_handler((uint64_t)a1, (uint64_t)a3);
  *(_OWORD *)a1->flow_id = *(_OWORD *)a3->flow_id;
  if (!a3->output_handler)
    nw_protocol_set_output_handler((uint64_t)a3, (uint64_t)a1);
  callbacks = a3->callbacks;
  if (callbacks
    && (supports_external_data = (uint64_t (*)(nw_protocol *))callbacks->supports_external_data) != 0)
  {
    v16 = supports_external_data(a3);
    v17 = (unsigned int *)(handle + 527);
    if (v16)
      v18 = 64;
    else
      v18 = 0;
    v19 = *(_DWORD *)(handle + 527) & 0xFFFFFFBF | v18;
  }
  else
  {
    v17 = (unsigned int *)(handle + 527);
    v19 = *(_DWORD *)(handle + 527) & 0xFFFFFFBF;
  }
  *v17 = v19;
  return 1;
}

uint64_t nw_protocol_masque_remove_input_handler(nw_protocol *a1, nw_protocol *a2, int a3)
{
  _BYTE *handle;
  _QWORD *output_handler_context;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(void);
  uint64_t v14;
  uint64_t v15;
  void (*v16)(void);
  uint64_t v17;
  uint64_t v18;
  void (*v19)(void);
  uint64_t v20;
  uint64_t v21;
  void (*v22)(void);
  void *v23;
  uint64_t v24;
  void (*v25)(void);
  uint64_t v26;
  char *v28;
  NSObject *v29;
  os_log_type_t v30;
  const char *v31;
  NSObject *v32;
  char *backtrace_string;
  _BOOL4 v34;
  const char *v35;
  _BOOL4 v36;
  char *v37;
  NSObject *v38;
  os_log_type_t v39;
  char *v40;
  const char *v41;
  char *v42;
  _BOOL4 v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  char v48;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v51;
  __int16 v52;
  char *v53;
  __int16 v54;
  const char *v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v51 = "nw_protocol_masque_remove_input_handler";
    v28 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v48 = 0;
    if (!__nwlog_fault(v28, &type, &v48))
      goto LABEL_83;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v48)
      {
        v29 = __nwlog_obj();
        v30 = type;
        if (!os_log_type_enabled(v29, type))
          goto LABEL_83;
        *(_DWORD *)buf = 136446210;
        v51 = "nw_protocol_masque_remove_input_handler";
        v31 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_82;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v29 = __nwlog_obj();
      v30 = type;
      v34 = os_log_type_enabled(v29, type);
      if (!backtrace_string)
      {
        if (!v34)
          goto LABEL_83;
        *(_DWORD *)buf = 136446210;
        v51 = "nw_protocol_masque_remove_input_handler";
        v31 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_82;
      }
      if (v34)
      {
        *(_DWORD *)buf = 136446466;
        v51 = "nw_protocol_masque_remove_input_handler";
        v52 = 2082;
        v53 = backtrace_string;
        v35 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_63:
        _os_log_impl(&dword_182FBE000, v29, v30, v35, buf, 0x16u);
      }
LABEL_64:
      free(backtrace_string);
      goto LABEL_83;
    }
    v29 = __nwlog_obj();
    v30 = type;
    if (!os_log_type_enabled(v29, type))
      goto LABEL_83;
    *(_DWORD *)buf = 136446210;
    v51 = "nw_protocol_masque_remove_input_handler";
    v31 = "%{public}s called with null protocol";
LABEL_82:
    _os_log_impl(&dword_182FBE000, v29, v30, v31, buf, 0xCu);
LABEL_83:
    if (v28)
      free(v28);
    return 0;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v51 = "nw_protocol_masque_remove_input_handler";
    v28 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v48 = 0;
    if (!__nwlog_fault(v28, &type, &v48))
      goto LABEL_83;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v29 = __nwlog_obj();
      v30 = type;
      if (!os_log_type_enabled(v29, type))
        goto LABEL_83;
      *(_DWORD *)buf = 136446210;
      v51 = "nw_protocol_masque_remove_input_handler";
      v31 = "%{public}s called with null masque";
      goto LABEL_82;
    }
    if (!v48)
    {
      v29 = __nwlog_obj();
      v30 = type;
      if (!os_log_type_enabled(v29, type))
        goto LABEL_83;
      *(_DWORD *)buf = 136446210;
      v51 = "nw_protocol_masque_remove_input_handler";
      v31 = "%{public}s called with null masque, backtrace limit exceeded";
      goto LABEL_82;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v29 = __nwlog_obj();
    v30 = type;
    v36 = os_log_type_enabled(v29, type);
    if (backtrace_string)
    {
      if (v36)
      {
        *(_DWORD *)buf = 136446466;
        v51 = "nw_protocol_masque_remove_input_handler";
        v52 = 2082;
        v53 = backtrace_string;
        v35 = "%{public}s called with null masque, dumping backtrace:%{public}s";
        goto LABEL_63;
      }
      goto LABEL_64;
    }
    if (!v36)
      goto LABEL_83;
    *(_DWORD *)buf = 136446210;
    v51 = "nw_protocol_masque_remove_input_handler";
    v31 = "%{public}s called with null masque, no backtrace";
    goto LABEL_82;
  }
  if ((handle[529] & 1) == 0 && gLogDatapath)
  {
    if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
      dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
    v32 = gprivacy_proxyLogObj;
    if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446722;
      v51 = "nw_protocol_masque_remove_input_handler";
      v52 = 2082;
      v53 = handle + 531;
      v54 = 2080;
      v55 = " ";
      _os_log_impl(&dword_182FBE000, v32, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%scalled", buf, 0x20u);
    }
  }
  if (!a2)
    return 0;
  if (a2->output_handler == a1)
    nw_protocol_set_output_handler((uint64_t)a2, 0);
  if (a1->default_input_handler != a2)
  {
    output_handler_context = a2->output_handler_context;
    if (output_handler_context)
    {
      a2->output_handler_context = 0;
      nw_protocol_set_output_handler((uint64_t)a2, 0);
      v8 = output_handler_context[4];
      if (v8)
      {
        do
        {
          v9 = *(_QWORD *)(v8 + 32);
          nw_frame_finalize(v8);
          v8 = v9;
        }
        while (v9);
      }
      v10 = (void *)output_handler_context[6];
      if (v10)
      {
        os_release(v10);
        output_handler_context[6] = 0;
      }
      goto LABEL_37;
    }
    return 0;
  }
  nw_protocol_set_input_handler((uint64_t)a1, 0);
  nw_protocol_set_input_handler((uint64_t)(handle + 64), 0);
  v11 = *((_QWORD *)handle + 20);
  if (v11)
  {
    v12 = *(_QWORD *)(v11 + 24);
    if (v12)
    {
      v13 = *(void (**)(void))(v12 + 8);
      if (v13)
        v13();
    }
  }
  v14 = *((_QWORD *)handle + 28);
  if (v14)
  {
    v15 = *(_QWORD *)(v14 + 24);
    if (v15)
    {
      v16 = *(void (**)(void))(v15 + 8);
      if (v16)
        v16();
    }
  }
  v17 = *((_QWORD *)handle + 12);
  if (v17)
  {
    v18 = *(_QWORD *)(v17 + 24);
    if (v18)
    {
      v19 = *(void (**)(void))(v18 + 8);
      if (v19)
        v19();
    }
  }
  v20 = *((_QWORD *)handle + 4);
  if (v20)
  {
    v21 = *(_QWORD *)(v20 + 24);
    if (v21)
    {
      v22 = *(void (**)(void))(v21 + 8);
      if (v22)
        v22();
    }
  }
  v23 = (void *)*((_QWORD *)handle + 56);
  if (v23)
  {
    os_release(v23);
    *((_QWORD *)handle + 56) = 0;
  }
  v24 = *((_QWORD *)handle + 55);
  if (!v24)
    goto LABEL_37;
  if (!*(_QWORD *)v24 || (v25 = *(void (**)(void))(*(_QWORD *)v24 + 8)) == 0)
  {
    __nwlog_obj();
    v37 = (char *)*((_QWORD *)handle + 55);
    *(_DWORD *)buf = 136446466;
    v51 = "nw_protocol_masque_remove_input_handler";
    v52 = 2048;
    v53 = v37;
    type = OS_LOG_TYPE_ERROR;
    v48 = 0;
    v47 = (char *)_os_log_send_and_compose_impl();
    if (!__nwlog_fault(v47, &type, &v48))
      goto LABEL_91;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v38 = __nwlog_obj();
      v39 = type;
      if (!os_log_type_enabled(v38, type))
        goto LABEL_91;
      v40 = (char *)*((_QWORD *)handle + 55);
      *(_DWORD *)buf = 136446466;
      v51 = "nw_protocol_masque_remove_input_handler";
      v52 = 2048;
      v53 = v40;
      v41 = "%{public}s listen protocol (%p) has invalid disconnected callback";
    }
    else if (v48)
    {
      v42 = (char *)__nw_create_backtrace_string();
      v38 = __nwlog_obj();
      v39 = type;
      v43 = os_log_type_enabled(v38, type);
      if (v42)
      {
        if (v43)
        {
          v44 = (char *)*((_QWORD *)handle + 55);
          *(_DWORD *)buf = 136446722;
          v51 = "nw_protocol_masque_remove_input_handler";
          v52 = 2048;
          v53 = v44;
          v54 = 2082;
          v55 = v42;
          _os_log_impl(&dword_182FBE000, v38, v39, "%{public}s listen protocol (%p) has invalid disconnected callback, dumping backtrace:%{public}s", buf, 0x20u);
        }
        free(v42);
        goto LABEL_91;
      }
      if (!v43)
      {
LABEL_91:
        if (v47)
          free(v47);
        goto LABEL_36;
      }
      v46 = (char *)*((_QWORD *)handle + 55);
      *(_DWORD *)buf = 136446466;
      v51 = "nw_protocol_masque_remove_input_handler";
      v52 = 2048;
      v53 = v46;
      v41 = "%{public}s listen protocol (%p) has invalid disconnected callback, no backtrace";
    }
    else
    {
      v38 = __nwlog_obj();
      v39 = type;
      if (!os_log_type_enabled(v38, type))
        goto LABEL_91;
      v45 = (char *)*((_QWORD *)handle + 55);
      *(_DWORD *)buf = 136446466;
      v51 = "nw_protocol_masque_remove_input_handler";
      v52 = 2048;
      v53 = v45;
      v41 = "%{public}s listen protocol (%p) has invalid disconnected callback, backtrace limit exceeded";
    }
    _os_log_impl(&dword_182FBE000, v38, v39, v41, buf, 0x16u);
    goto LABEL_91;
  }
  v25();
LABEL_36:
  *((_QWORD *)handle + 55) = 0;
LABEL_37:
  if (a3)
  {
    if (!a1->default_input_handler)
    {
      v26 = *((_QWORD *)handle + 60);
      if (!v26 || !*(_DWORD *)(v26 + 40))
        nw_masque_protocol_destroy((uint64_t)handle);
    }
  }
  return 1;
}

uint64_t nw_protocol_masque_connect(nw_protocol *a1, nw_protocol *a2)
{
  char *handle;
  nw_protocol_callbacks *callbacks;
  void (*connected)(nw_protocol *, nw_protocol *);
  nw_protocol_callbacks *v7;
  uint64_t (*get_remote_endpoint)(nw_protocol *);
  void *v9;
  nw_protocol_callbacks *v10;
  uint64_t (*get_path)(nw_protocol *);
  void *v12;
  nw_protocol *output_handler;
  nw_protocol_callbacks *v14;
  uint64_t result;
  nw_protocol *default_input_handler;
  nw_protocol_callbacks *v17;
  void (*v18)(void);
  char *v19;
  NSObject *v20;
  os_log_type_t v21;
  const char *v22;
  nw_protocol_identifier *identifier;
  nw_protocol *v24;
  const char *v25;
  nw_protocol_identifier *v26;
  char *v27;
  NSObject *v28;
  os_log_type_t v29;
  nw_protocol *v30;
  const char *v31;
  nw_protocol_identifier *v32;
  const char *v33;
  char *backtrace_string;
  _BOOL4 v35;
  const char *v36;
  _BOOL4 v37;
  char *v38;
  NSObject *v39;
  os_log_type_t v40;
  nw_protocol_identifier *v41;
  const char *v42;
  char *v43;
  _BOOL4 v44;
  nw_protocol_identifier *v45;
  char *v46;
  _BOOL4 v47;
  nw_protocol *v48;
  const char *v49;
  nw_protocol_identifier *v50;
  nw_protocol_identifier *v51;
  nw_protocol_identifier *v52;
  nw_protocol *v53;
  const char *v54;
  nw_protocol_identifier *v55;
  nw_protocol *v56;
  const char *v57;
  nw_protocol_identifier *v58;
  char v59;
  uuid_string_t out;
  __int128 uu;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)out = 136446210;
    *(_QWORD *)&out[4] = "nw_protocol_masque_connect";
    v19 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(uu) = 16;
    v59 = 0;
    if (!__nwlog_fault(v19, &uu, &v59))
      goto LABEL_99;
    if (uu != 17)
    {
      if (!v59)
      {
        v20 = __nwlog_obj();
        v21 = uu;
        if (!os_log_type_enabled(v20, (os_log_type_t)uu))
          goto LABEL_99;
        *(_DWORD *)out = 136446210;
        *(_QWORD *)&out[4] = "nw_protocol_masque_connect";
        v22 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_98;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v20 = __nwlog_obj();
      v21 = uu;
      v35 = os_log_type_enabled(v20, (os_log_type_t)uu);
      if (!backtrace_string)
      {
        if (!v35)
          goto LABEL_99;
        *(_DWORD *)out = 136446210;
        *(_QWORD *)&out[4] = "nw_protocol_masque_connect";
        v22 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_98;
      }
      if (v35)
      {
        *(_DWORD *)out = 136446466;
        *(_QWORD *)&out[4] = "nw_protocol_masque_connect";
        *(_WORD *)&out[12] = 2082;
        *(_QWORD *)&out[14] = backtrace_string;
        v36 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_57:
        _os_log_impl(&dword_182FBE000, v20, v21, v36, (uint8_t *)out, 0x16u);
      }
LABEL_58:
      free(backtrace_string);
      goto LABEL_99;
    }
    v20 = __nwlog_obj();
    v21 = uu;
    if (!os_log_type_enabled(v20, (os_log_type_t)uu))
      goto LABEL_99;
    *(_DWORD *)out = 136446210;
    *(_QWORD *)&out[4] = "nw_protocol_masque_connect";
    v22 = "%{public}s called with null protocol";
LABEL_98:
    _os_log_impl(&dword_182FBE000, v20, v21, v22, (uint8_t *)out, 0xCu);
LABEL_99:
    if (v19)
      free(v19);
    return 0;
  }
  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)out = 136446210;
    *(_QWORD *)&out[4] = "nw_protocol_masque_connect";
    v19 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(uu) = 16;
    v59 = 0;
    if (!__nwlog_fault(v19, &uu, &v59))
      goto LABEL_99;
    if (uu == 17)
    {
      v20 = __nwlog_obj();
      v21 = uu;
      if (!os_log_type_enabled(v20, (os_log_type_t)uu))
        goto LABEL_99;
      *(_DWORD *)out = 136446210;
      *(_QWORD *)&out[4] = "nw_protocol_masque_connect";
      v22 = "%{public}s called with null masque";
      goto LABEL_98;
    }
    if (!v59)
    {
      v20 = __nwlog_obj();
      v21 = uu;
      if (!os_log_type_enabled(v20, (os_log_type_t)uu))
        goto LABEL_99;
      *(_DWORD *)out = 136446210;
      *(_QWORD *)&out[4] = "nw_protocol_masque_connect";
      v22 = "%{public}s called with null masque, backtrace limit exceeded";
      goto LABEL_98;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v20 = __nwlog_obj();
    v21 = uu;
    v37 = os_log_type_enabled(v20, (os_log_type_t)uu);
    if (backtrace_string)
    {
      if (v37)
      {
        *(_DWORD *)out = 136446466;
        *(_QWORD *)&out[4] = "nw_protocol_masque_connect";
        *(_WORD *)&out[12] = 2082;
        *(_QWORD *)&out[14] = backtrace_string;
        v36 = "%{public}s called with null masque, dumping backtrace:%{public}s";
        goto LABEL_57;
      }
      goto LABEL_58;
    }
    if (!v37)
      goto LABEL_99;
    *(_DWORD *)out = 136446210;
    *(_QWORD *)&out[4] = "nw_protocol_masque_connect";
    v22 = "%{public}s called with null masque, no backtrace";
    goto LABEL_98;
  }
  if (*((_DWORD *)handle + 127) == 4)
  {
    if (*((_QWORD *)handle + 60))
    {
      if (!*((_QWORD *)handle + 61))
        *((_QWORD *)handle + 61) = nw_dictionary_create();
      if (a2)
      {
        callbacks = a2->callbacks;
        if (callbacks)
        {
          connected = (void (*)(nw_protocol *, nw_protocol *))callbacks->connected;
          if (connected)
          {
            connected(a2, a1);
            uu = 0uLL;
            goto LABEL_11;
          }
        }
        __nwlog_obj();
        identifier = a2->identifier;
        if (!identifier)
          identifier = (nw_protocol_identifier *)"invalid";
      }
      else
      {
        __nwlog_obj();
        identifier = (nw_protocol_identifier *)"invalid";
      }
      *(_DWORD *)out = 136446466;
      *(_QWORD *)&out[4] = "nw_protocol_masque_connect";
      *(_WORD *)&out[12] = 2082;
      *(_QWORD *)&out[14] = identifier;
      v38 = (char *)_os_log_send_and_compose_impl();
      LOBYTE(uu) = 16;
      v59 = 0;
      if (__nwlog_fault(v38, &uu, &v59))
      {
        if (uu == 17)
        {
          v39 = __nwlog_obj();
          v40 = uu;
          if (!os_log_type_enabled(v39, (os_log_type_t)uu))
            goto LABEL_108;
          v41 = (nw_protocol_identifier *)"invalid";
          if (a2 && a2->identifier)
            v41 = a2->identifier;
          *(_DWORD *)out = 136446466;
          *(_QWORD *)&out[4] = "nw_protocol_masque_connect";
          *(_WORD *)&out[12] = 2082;
          *(_QWORD *)&out[14] = v41;
          v42 = "%{public}s protocol %{public}s has invalid connected callback";
LABEL_107:
          _os_log_impl(&dword_182FBE000, v39, v40, v42, (uint8_t *)out, 0x16u);
          goto LABEL_108;
        }
        if (!v59)
        {
          v39 = __nwlog_obj();
          v40 = uu;
          if (!os_log_type_enabled(v39, (os_log_type_t)uu))
            goto LABEL_108;
          v51 = (nw_protocol_identifier *)"invalid";
          if (a2 && a2->identifier)
            v51 = a2->identifier;
          *(_DWORD *)out = 136446466;
          *(_QWORD *)&out[4] = "nw_protocol_masque_connect";
          *(_WORD *)&out[12] = 2082;
          *(_QWORD *)&out[14] = v51;
          v42 = "%{public}s protocol %{public}s has invalid connected callback, backtrace limit exceeded";
          goto LABEL_107;
        }
        v43 = (char *)__nw_create_backtrace_string();
        v39 = __nwlog_obj();
        v40 = uu;
        v44 = os_log_type_enabled(v39, (os_log_type_t)uu);
        if (!v43)
        {
          if (!v44)
            goto LABEL_108;
          v52 = (nw_protocol_identifier *)"invalid";
          if (a2 && a2->identifier)
            v52 = a2->identifier;
          *(_DWORD *)out = 136446466;
          *(_QWORD *)&out[4] = "nw_protocol_masque_connect";
          *(_WORD *)&out[12] = 2082;
          *(_QWORD *)&out[14] = v52;
          v42 = "%{public}s protocol %{public}s has invalid connected callback, no backtrace";
          goto LABEL_107;
        }
        if (v44)
        {
          v45 = (nw_protocol_identifier *)"invalid";
          if (a2 && a2->identifier)
            v45 = a2->identifier;
          *(_DWORD *)out = 136446722;
          *(_QWORD *)&out[4] = "nw_protocol_masque_connect";
          *(_WORD *)&out[12] = 2082;
          *(_QWORD *)&out[14] = v45;
          *(_WORD *)&out[22] = 2082;
          *(_QWORD *)&out[24] = v43;
          _os_log_impl(&dword_182FBE000, v39, v40, "%{public}s protocol %{public}s has invalid connected callback, dumping backtrace:%{public}s", (uint8_t *)out, 0x20u);
        }
        free(v43);
      }
LABEL_108:
      if (v38)
        free(v38);
      uu = 0uLL;
      if (!a2)
        return 1;
LABEL_11:
      v7 = a2->callbacks;
      if (v7)
      {
        get_remote_endpoint = (uint64_t (*)(nw_protocol *))v7->get_remote_endpoint;
        if (get_remote_endpoint)
        {
          v9 = (void *)get_remote_endpoint(a2);
          v10 = a2->callbacks;
          if (v10)
          {
            get_path = (uint64_t (*)(nw_protocol *))v10->get_path;
            if (get_path)
              goto LABEL_15;
          }
        }
        else
        {
          v9 = 0;
          get_path = (uint64_t (*)(nw_protocol *))v7->get_path;
          if (get_path)
          {
LABEL_15:
            v12 = (void *)get_path(a2);
            nw_path_get_client_id(v12, &uu);
          }
        }
        if (v9)
        {
          if (!uuid_is_null((const unsigned __int8 *)&uu))
          {
            memset(out, 0, sizeof(out));
            uuid_unparse((const unsigned __int8 *)&uu, out);
            nw_dictionary_set_value(*((_QWORD *)handle + 61), out, v9);
          }
        }
      }
      return 1;
    }
    default_input_handler = a1->default_input_handler;
    if (default_input_handler)
    {
      v17 = default_input_handler->callbacks;
      if (v17)
      {
        v18 = (void (*)(void))v17->connected;
        if (v18)
        {
          v18();
          return 1;
        }
      }
    }
    __nwlog_obj();
    v24 = a1->default_input_handler;
    v25 = "invalid";
    if (v24)
    {
      v26 = v24->identifier;
      if (v26)
        v25 = (const char *)v26;
    }
    *(_DWORD *)out = 136446466;
    *(_QWORD *)&out[4] = "nw_protocol_masque_connect";
    *(_WORD *)&out[12] = 2082;
    *(_QWORD *)&out[14] = v25;
    v27 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(uu) = 16;
    v59 = 0;
    if (__nwlog_fault(v27, &uu, &v59))
    {
      if (uu == 17)
      {
        v28 = __nwlog_obj();
        v29 = uu;
        if (!os_log_type_enabled(v28, (os_log_type_t)uu))
          goto LABEL_123;
        v30 = a1->default_input_handler;
        v31 = "invalid";
        if (v30)
        {
          v32 = v30->identifier;
          if (v32)
            v31 = (const char *)v32;
        }
        *(_DWORD *)out = 136446466;
        *(_QWORD *)&out[4] = "nw_protocol_masque_connect";
        *(_WORD *)&out[12] = 2082;
        *(_QWORD *)&out[14] = v31;
        v33 = "%{public}s protocol %{public}s has invalid connected callback";
        goto LABEL_122;
      }
      if (!v59)
      {
        v28 = __nwlog_obj();
        v29 = uu;
        if (!os_log_type_enabled(v28, (os_log_type_t)uu))
          goto LABEL_123;
        v53 = a1->default_input_handler;
        v54 = "invalid";
        if (v53)
        {
          v55 = v53->identifier;
          if (v55)
            v54 = (const char *)v55;
        }
        *(_DWORD *)out = 136446466;
        *(_QWORD *)&out[4] = "nw_protocol_masque_connect";
        *(_WORD *)&out[12] = 2082;
        *(_QWORD *)&out[14] = v54;
        v33 = "%{public}s protocol %{public}s has invalid connected callback, backtrace limit exceeded";
        goto LABEL_122;
      }
      v46 = (char *)__nw_create_backtrace_string();
      v28 = __nwlog_obj();
      v29 = uu;
      v47 = os_log_type_enabled(v28, (os_log_type_t)uu);
      if (v46)
      {
        if (v47)
        {
          v48 = a1->default_input_handler;
          v49 = "invalid";
          if (v48)
          {
            v50 = v48->identifier;
            if (v50)
              v49 = (const char *)v50;
          }
          *(_DWORD *)out = 136446722;
          *(_QWORD *)&out[4] = "nw_protocol_masque_connect";
          *(_WORD *)&out[12] = 2082;
          *(_QWORD *)&out[14] = v49;
          *(_WORD *)&out[22] = 2082;
          *(_QWORD *)&out[24] = v46;
          _os_log_impl(&dword_182FBE000, v28, v29, "%{public}s protocol %{public}s has invalid connected callback, dumping backtrace:%{public}s", (uint8_t *)out, 0x20u);
        }
        free(v46);
        goto LABEL_123;
      }
      if (v47)
      {
        v56 = a1->default_input_handler;
        v57 = "invalid";
        if (v56)
        {
          v58 = v56->identifier;
          if (v58)
            v57 = (const char *)v58;
        }
        *(_DWORD *)out = 136446466;
        *(_QWORD *)&out[4] = "nw_protocol_masque_connect";
        *(_WORD *)&out[12] = 2082;
        *(_QWORD *)&out[14] = v57;
        v33 = "%{public}s protocol %{public}s has invalid connected callback, no backtrace";
LABEL_122:
        _os_log_impl(&dword_182FBE000, v28, v29, v33, (uint8_t *)out, 0x16u);
      }
    }
LABEL_123:
    if (v27)
      free(v27);
    return 1;
  }
  output_handler = a1->output_handler;
  if (!output_handler)
    return 1;
  v14 = output_handler->callbacks;
  if (v14 && v14->connect)
  {
    *(_DWORD *)(handle + 527) |= 1u;
    result = ((uint64_t (*)(void))a1->output_handler->callbacks->connect)();
    *(_DWORD *)(handle + 527) &= ~1u;
    return result;
  }
  return 0;
}

void nw_protocol_masque_connected(nw_protocol *a1, nw_protocol *a2)
{
  nw_protocol *handle;
  char *v5;
  NSObject *v6;
  int output_handler_context_high;
  unsigned __int8 *v8;
  void *v9;
  nw_protocol *output_handler;
  nw_protocol_callbacks *callbacks;
  uint64_t (*copy_info)(nw_protocol *, uint64_t);
  unsigned __int8 *v13;
  void *v14;
  NSObject *v15;
  nw_protocol *default_input_handler;
  nw_protocol_callbacks *v17;
  void (*connected)(nw_protocol *, nw_protocol *);
  void *v19;
  id v20;
  id v21;
  BOOL is_equal_unsafe;
  uint64_t v23;
  int v24;
  NSObject *v25;
  NSObject *v26;
  nw_protocol_callbacks *v27;
  char v28;
  nw_protocol *v29;
  void *output_handler_context;
  id v31;
  int v32;
  const char *v33;
  const char *hostname;
  unsigned int port;
  void *v36;
  id v37;
  NSObject *v38;
  NSObject *v39;
  size_t size;
  NSObject *v41;
  char *i;
  char *v43;
  char *j;
  char *v45;
  uint64_t v46;
  const char *name;
  nw_protocol *v48;
  const char *v49;
  uint64_t v50;
  nw_protocol *v51;
  nw_protocol_callbacks *v52;
  void (*v53)(nw_protocol *, nw_protocol *);
  id v54;
  id *metadata_for_request;
  NSObject *v56;
  char *v57;
  NSObject *v58;
  os_log_type_t v59;
  const char *v60;
  char *backtrace_string;
  _BOOL4 v62;
  char *v63;
  _BOOL4 v64;
  NSObject *v65;
  char *v66;
  NSObject *v67;
  os_log_type_t v68;
  const char *v69;
  char *v70;
  _BOOL4 v71;
  nw_protocol *v72;
  const char *v73;
  const char *v74;
  char *v75;
  NSObject *v76;
  os_log_type_t v77;
  nw_protocol *v78;
  const char *v79;
  const char *v80;
  const char *v81;
  void *v82;
  char *v83;
  NSObject *v84;
  os_log_type_t v85;
  char *v86;
  _BOOL4 v87;
  nw_protocol *v88;
  const char *v89;
  const char *v90;
  char *v91;
  os_log_type_t v92;
  _BOOL4 v93;
  nw_protocol *v94;
  const char *v95;
  const char *v96;
  os_log_type_t v97;
  nw_protocol *v98;
  const char *v99;
  const char *v100;
  char *v101;
  os_log_type_t type[8];
  os_log_type_t *v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  _OWORD buf[4];
  _BYTE applier[24];
  const char *v112;
  uint64_t *v113;
  os_log_type_t *v114;
  uint64_t v115;
  uint64_t v116;

  v116 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    LODWORD(buf[0]) = 136446210;
    *(_QWORD *)((char *)buf + 4) = "nw_protocol_masque_connected";
    v57 = (char *)_os_log_send_and_compose_impl();
    applier[0] = 16;
    LOBYTE(v106) = 0;
    if (!__nwlog_fault(v57, applier, &v106))
      goto LABEL_162;
    if (applier[0] == 17)
    {
      v58 = __nwlog_obj();
      v59 = applier[0];
      if (!os_log_type_enabled(v58, (os_log_type_t)applier[0]))
        goto LABEL_162;
      LODWORD(buf[0]) = 136446210;
      *(_QWORD *)((char *)buf + 4) = "nw_protocol_masque_connected";
      v60 = "%{public}s called with null protocol";
      goto LABEL_161;
    }
    if (!(_BYTE)v106)
    {
      v58 = __nwlog_obj();
      v59 = applier[0];
      if (!os_log_type_enabled(v58, (os_log_type_t)applier[0]))
        goto LABEL_162;
      LODWORD(buf[0]) = 136446210;
      *(_QWORD *)((char *)buf + 4) = "nw_protocol_masque_connected";
      v60 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_161;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v58 = __nwlog_obj();
    v59 = applier[0];
    v62 = os_log_type_enabled(v58, (os_log_type_t)applier[0]);
    if (!backtrace_string)
    {
      if (!v62)
        goto LABEL_162;
      LODWORD(buf[0]) = 136446210;
      *(_QWORD *)((char *)buf + 4) = "nw_protocol_masque_connected";
      v60 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_161;
    }
    if (v62)
    {
      LODWORD(buf[0]) = 136446466;
      *(_QWORD *)((char *)buf + 4) = "nw_protocol_masque_connected";
      WORD6(buf[0]) = 2082;
      *(_QWORD *)((char *)buf + 14) = backtrace_string;
      _os_log_impl(&dword_182FBE000, v58, v59, "%{public}s called with null protocol, dumping backtrace:%{public}s", (uint8_t *)buf, 0x16u);
    }
    free(backtrace_string);
LABEL_162:
    if (!v57)
      return;
    goto LABEL_163;
  }
  handle = (nw_protocol *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    LODWORD(buf[0]) = 136446210;
    *(_QWORD *)((char *)buf + 4) = "nw_protocol_masque_connected";
    v57 = (char *)_os_log_send_and_compose_impl();
    applier[0] = 16;
    LOBYTE(v106) = 0;
    if (!__nwlog_fault(v57, applier, &v106))
      goto LABEL_162;
    if (applier[0] == 17)
    {
      v58 = __nwlog_obj();
      v59 = applier[0];
      if (!os_log_type_enabled(v58, (os_log_type_t)applier[0]))
        goto LABEL_162;
      LODWORD(buf[0]) = 136446210;
      *(_QWORD *)((char *)buf + 4) = "nw_protocol_masque_connected";
      v60 = "%{public}s called with null masque";
      goto LABEL_161;
    }
    if (!(_BYTE)v106)
    {
      v58 = __nwlog_obj();
      v59 = applier[0];
      if (!os_log_type_enabled(v58, (os_log_type_t)applier[0]))
        goto LABEL_162;
      LODWORD(buf[0]) = 136446210;
      *(_QWORD *)((char *)buf + 4) = "nw_protocol_masque_connected";
      v60 = "%{public}s called with null masque, backtrace limit exceeded";
      goto LABEL_161;
    }
    v63 = (char *)__nw_create_backtrace_string();
    v58 = __nwlog_obj();
    v59 = applier[0];
    v64 = os_log_type_enabled(v58, (os_log_type_t)applier[0]);
    if (v63)
    {
      if (v64)
      {
        LODWORD(buf[0]) = 136446466;
        *(_QWORD *)((char *)buf + 4) = "nw_protocol_masque_connected";
        WORD6(buf[0]) = 2082;
        *(_QWORD *)((char *)buf + 14) = v63;
        _os_log_impl(&dword_182FBE000, v58, v59, "%{public}s called with null masque, dumping backtrace:%{public}s", (uint8_t *)buf, 0x16u);
      }
      free(v63);
      if (!v57)
        return;
LABEL_163:
      free(v57);
      return;
    }
    if (v64)
    {
      LODWORD(buf[0]) = 136446210;
      *(_QWORD *)((char *)buf + 4) = "nw_protocol_masque_connected";
      v60 = "%{public}s called with null masque, no backtrace";
LABEL_161:
      _os_log_impl(&dword_182FBE000, v58, v59, v60, (uint8_t *)buf, 0xCu);
      goto LABEL_162;
    }
    goto LABEL_162;
  }
  if (&handle[1] == a1)
  {
    if ((BYTE1(handle[8].identifier) & 1) == 0 && gLogDatapath)
    {
      if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
        dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
      v65 = gprivacy_proxyLogObj;
      if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(buf[0]) = 136446722;
        *(_QWORD *)((char *)buf + 4) = "nw_protocol_masque_connected";
        WORD6(buf[0]) = 2082;
        *(_QWORD *)((char *)buf + 14) = (char *)handle + 531;
        WORD3(buf[1]) = 2080;
        *((_QWORD *)&buf[1] + 1) = " ";
        _os_log_impl(&dword_182FBE000, v65, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sReceived connected event for server connect", (uint8_t *)buf, 0x20u);
      }
    }
    if (*(_DWORD *)handle[8].flow_id)
      return;
    output_handler_context = handle[4].output_handler_context;
    if (output_handler_context)
    {
      if (*(_QWORD *)&handle[6].flow_id[8])
      {
        v101 = 0;
        v31 = output_handler_context;
        v32 = objc_msgSend(v31, "type");

        if (v32 == 1 && nw_endpoint_get_address_family(handle[4].output_handler_context) == 30)
          v33 = "[%s]:%u";
        else
          v33 = "%s:%u";
        hostname = nw_endpoint_get_hostname((nw_endpoint_t)handle[4].output_handler_context);
        port = nw_endpoint_get_port((nw_endpoint_t)handle[4].output_handler_context);
        asprintf(&v101, v33, hostname, port);
        v36 = (void *)_nw_http_request_create("CONNECT-UDP", "https", v101, "/");
        if (v101)
        {
          free(v101);
          v101 = 0;
        }
        if (v36)
        {
          v37 = v36;
          _nw_http_fields_append(v37, "Datagram-Flow-Id", (char *)&handle[9].output_handler + 7);

          v38 = dispatch_data_create_with_transform();
          memset((char *)buf + 1, 0, 63);
          LOBYTE(buf[0]) = 58;
          if (dispatch_data_get_size(v38) <= 0x3D)
          {
            for (i = (char *)buf; ; i = v43 + 1)
            {
              v43 = strchr(i, 43);
              if (!v43)
                break;
              *v43 = 45;
            }
            for (j = (char *)buf; ; j = v45 + 1)
            {
              v45 = strchr(j, 47);
              if (!v45)
                break;
              *v45 = 95;
            }
            v106 = 0;
            v107 = &v106;
            v108 = 0x2000000000;
            v109 = 0;
            *(_QWORD *)type = 0;
            v103 = type;
            v104 = 0x2000000000;
            v105 = (char *)buf + 1;
            if (v38)
            {
              *(_QWORD *)applier = MEMORY[0x1E0C809B0];
              *(_QWORD *)&applier[8] = 0x40000000;
              *(_QWORD *)&applier[16] = __nw_dispatch_data_copyout_block_invoke;
              v112 = (const char *)&unk_1E14A3448;
              v114 = type;
              v115 = 61;
              v113 = &v106;
              dispatch_data_apply(v38, applier);
              v46 = v107[3];
            }
            else
            {
              v46 = 0;
            }
            _Block_object_dispose(type, 8);
            _Block_object_dispose(&v106, 8);
            *(_WORD *)((char *)buf + v46 + 1) = 58;
            v54 = v37;
            _nw_http_fields_append(v54, "Server-Connection-Id", buf);

            if (v38)
              dispatch_release(v38);
            metadata_for_request = nw_http_create_metadata_for_request(v54);
            if (nw_masque_send_metadata((uint64_t)handle, (uint64_t)metadata_for_request, (uint64_t)handle[1].output_handler))
            {
              if ((BYTE1(handle[8].identifier) & 1) == 0)
              {
                if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
                  dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
                v56 = gprivacy_proxyLogObj;
                if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)applier = 136446722;
                  *(_QWORD *)&applier[4] = "nw_masque_send_server_connect";
                  *(_WORD *)&applier[12] = 2082;
                  *(_QWORD *)&applier[14] = (char *)handle + 531;
                  *(_WORD *)&applier[22] = 2080;
                  v112 = " ";
                  _os_log_impl(&dword_182FBE000, v56, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sSent CONNECT-UDP request for server CID", applier, 0x20u);
                }
              }
              *(_DWORD *)handle[8].flow_id = 2;
            }
            if (metadata_for_request)
              os_release(metadata_for_request);
          }
          else
          {
            if ((BYTE1(handle[8].identifier) & 1) == 0)
            {
              if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
                dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
              v39 = gprivacy_proxyLogObj;
              if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
              {
                size = dispatch_data_get_size(v38);
                *(_DWORD *)applier = 136446722;
                *(_QWORD *)&applier[4] = (char *)handle + 531;
                *(_WORD *)&applier[12] = 2080;
                *(_QWORD *)&applier[14] = " ";
                *(_WORD *)&applier[22] = 2048;
                v112 = (const char *)size;
                _os_log_impl(&dword_182FBE000, v39, OS_LOG_TYPE_ERROR, "%{public}s%sBase64 data is too large: %zu", applier, 0x20u);
              }
            }
            if (v38)
              dispatch_release(v38);
          }
          os_release(v37);
        }
        else if ((BYTE1(handle[8].identifier) & 1) == 0)
        {
          if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
            dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
          v41 = gprivacy_proxyLogObj;
          if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
          {
            LODWORD(buf[0]) = 136446466;
            *(_QWORD *)((char *)buf + 4) = (char *)handle + 531;
            WORD6(buf[0]) = 2080;
            *(_QWORD *)((char *)buf + 14) = " ";
            _os_log_impl(&dword_182FBE000, v41, OS_LOG_TYPE_ERROR, "%{public}s%sFailed to create HTTP message", (uint8_t *)buf, 0x16u);
          }
        }
      }
      goto LABEL_5;
    }
    __nwlog_obj();
    LODWORD(buf[0]) = 136446210;
    *(_QWORD *)((char *)buf + 4) = "nw_masque_send_server_connect";
    v66 = (char *)_os_log_send_and_compose_impl();
    applier[0] = 16;
    LOBYTE(v106) = 0;
    if (!__nwlog_fault(v66, applier, &v106))
      goto LABEL_197;
    if (applier[0] == 17)
    {
      v67 = __nwlog_obj();
      v68 = applier[0];
      if (!os_log_type_enabled(v67, (os_log_type_t)applier[0]))
        goto LABEL_197;
      LODWORD(buf[0]) = 136446210;
      *(_QWORD *)((char *)buf + 4) = "nw_masque_send_server_connect";
      v69 = "%{public}s called with null masque->target_endpoint";
    }
    else if ((_BYTE)v106)
    {
      v70 = (char *)__nw_create_backtrace_string();
      v67 = __nwlog_obj();
      v68 = applier[0];
      v71 = os_log_type_enabled(v67, (os_log_type_t)applier[0]);
      if (v70)
      {
        if (v71)
        {
          LODWORD(buf[0]) = 136446466;
          *(_QWORD *)((char *)buf + 4) = "nw_masque_send_server_connect";
          WORD6(buf[0]) = 2082;
          *(_QWORD *)((char *)buf + 14) = v70;
          _os_log_impl(&dword_182FBE000, v67, v68, "%{public}s called with null masque->target_endpoint, dumping backtrace:%{public}s", (uint8_t *)buf, 0x16u);
        }
        free(v70);
        goto LABEL_197;
      }
      if (!v71)
      {
LABEL_197:
        if (v66)
          free(v66);
        goto LABEL_5;
      }
      LODWORD(buf[0]) = 136446210;
      *(_QWORD *)((char *)buf + 4) = "nw_masque_send_server_connect";
      v69 = "%{public}s called with null masque->target_endpoint, no backtrace";
    }
    else
    {
      v67 = __nwlog_obj();
      v68 = applier[0];
      if (!os_log_type_enabled(v67, (os_log_type_t)applier[0]))
        goto LABEL_197;
      LODWORD(buf[0]) = 136446210;
      *(_QWORD *)((char *)buf + 4) = "nw_masque_send_server_connect";
      v69 = "%{public}s called with null masque->target_endpoint, backtrace limit exceeded";
    }
    _os_log_impl(&dword_182FBE000, v67, v68, v69, (uint8_t *)buf, 0xCu);
    goto LABEL_197;
  }
  if (handle != a1)
    return;
LABEL_5:
  v5 = (char *)&nw_protocol_http_authentication_identifier::protocol_identifier + 4;
  if ((BYTE1(handle[8].identifier) & 1) == 0)
  {
    if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
      dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
    v6 = gprivacy_proxyLogObj;
    if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_INFO))
    {
      output_handler_context_high = HIDWORD(handle[7].output_handler_context);
      LODWORD(buf[0]) = 136446722;
      *(_QWORD *)((char *)buf + 4) = (char *)handle + 531;
      WORD6(buf[0]) = 2080;
      *(_QWORD *)((char *)buf + 14) = " ";
      WORD3(buf[1]) = 1024;
      DWORD2(buf[1]) = output_handler_context_high;
      _os_log_impl(&dword_182FBE000, v6, OS_LOG_TYPE_INFO, "%{public}s%sReceived connected event with state %u", (uint8_t *)buf, 0x1Cu);
    }
  }
  v8 = &handle[8].flow_id[15];
  v9 = *(void **)&handle[7].flow_id[8];
  if (!v9)
  {
    output_handler = a1->output_handler;
    if (!output_handler)
      goto LABEL_228;
    callbacks = output_handler->callbacks;
    if (!callbacks)
      goto LABEL_228;
    copy_info = (uint64_t (*)(nw_protocol *, uint64_t))callbacks->copy_info;
    if (!copy_info)
      goto LABEL_228;
    v13 = (unsigned __int8 *)copy_info(output_handler, 255);
    *(_QWORD *)applier = 0;
    *(_QWORD *)&applier[8] = applier;
    *(_QWORD *)&applier[16] = 0x2000000000;
    v112 = 0;
    *(_QWORD *)&buf[0] = MEMORY[0x1E0C809B0];
    *((_QWORD *)&buf[0] + 1) = 0x40000000;
    *(_QWORD *)&buf[1] = ___ZL34nw_masque_save_connection_metadataP9nw_masqueP11nw_protocol_block_invoke;
    *((_QWORD *)&buf[1] + 1) = &unk_1E149E698;
    *(_QWORD *)&buf[2] = applier;
    nw_array_apply(v13, (uint64_t)buf);
    v14 = *(void **)(*(_QWORD *)&applier[8] + 24);
    if (v14)
    {
      *(_QWORD *)&handle[7].flow_id[8] = os_retain(v14);
      nw_protocol_register_notification((uint64_t)a1, (uint64_t)a1->output_handler, 5);
    }
    if (v13)
      os_release(v13);
    _Block_object_dispose(applier, 8);
    v9 = *(void **)&handle[7].flow_id[8];
    if (!v9)
      goto LABEL_228;
  }
  if (!nw_http_connection_metadata_get_secondary_certificate_count(v9)
    || *(_DWORD *)&handle[8].flow_id[4]
    || HIDWORD(handle[7].output_handler_context))
  {
    goto LABEL_228;
  }
  if ((BYTE1(handle[8].identifier) & 1) == 0)
  {
    if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
      dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
    v15 = gprivacy_proxyLogObj;
    if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_INFO))
    {
      LODWORD(buf[0]) = 136446466;
      *(_QWORD *)((char *)buf + 4) = (char *)handle + 531;
      WORD6(buf[0]) = 2080;
      *(_QWORD *)((char *)buf + 14) = " ";
      _os_log_impl(&dword_182FBE000, v15, OS_LOG_TYPE_INFO, "%{public}s%sJoined HTTP with secondary certificates, checking for trusted endpoints", (uint8_t *)buf, 0x16u);
    }
  }
  if ((nw_masque_setup_reverse_proxy((uint64_t)handle) & 1) == 0)
  {
LABEL_228:
    default_input_handler = a1->default_input_handler;
    if (default_input_handler)
    {
      v17 = default_input_handler->callbacks;
      if (v17)
      {
        connected = (void (*)(nw_protocol *, nw_protocol *))v17->connected;
        if (connected)
          connected(default_input_handler, a2);
      }
    }
    if (a1->output_handler == a2 && !HIDWORD(handle[7].output_handler_context))
    {
      v19 = *(void **)&handle[7].flow_id[8];
      if (!v19)
        goto LABEL_51;
      *(_DWORD *)applier = 0;
      LODWORD(v106) = 0;
      v20 = v19;
      v21 = *((id *)v20 + 1);

      if (nw_protocol_copy_http_connection_definition_onceToken != -1)
        dispatch_once(&nw_protocol_copy_http_connection_definition_onceToken, &__block_literal_global_62);
      is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v21, nw_protocol_copy_http_connection_definition_definition);

      if (is_equal_unsafe)
      {
        *(_QWORD *)&buf[0] = MEMORY[0x1E0C809B0];
        *((_QWORD *)&buf[0] + 1) = 3221225472;
        *(_QWORD *)&buf[1] = __nw_http_connection_metadata_get_message_counts_block_invoke;
        *((_QWORD *)&buf[1] + 1) = &__block_descriptor_48_e9_B16__0_v8l;
        *(_QWORD *)&buf[2] = applier;
        *((_QWORD *)&buf[2] + 1) = &v106;
        v23 = *((_QWORD *)v20 + 4);
        if (v23)
          __nw_http_connection_metadata_get_message_counts_block_invoke((uint64_t)buf, v23);
LABEL_40:

        if (!(_DWORD)v106)
        {
          v24 = *(_DWORD *)v8;
          *(_DWORD *)v8 |= 2u;
          if ((v24 & 0x10000) == 0)
          {
            if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
              dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
            v25 = *((_QWORD *)v5 + 372);
            if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
            {
              LODWORD(buf[0]) = 136446978;
              *(_QWORD *)((char *)buf + 4) = "nw_protocol_masque_connected";
              WORD6(buf[0]) = 2082;
              *(_QWORD *)((char *)buf + 14) = (char *)handle + 531;
              WORD3(buf[1]) = 2080;
              *((_QWORD *)&buf[1] + 1) = " ";
              LOWORD(buf[2]) = 1024;
              *(_DWORD *)((char *)&buf[2] + 2) = *(_DWORD *)applier;
              _os_log_impl(&dword_182FBE000, v25, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sNew request, no responses received on connection yet (%u requests)", (uint8_t *)buf, 0x26u);
            }
          }
        }
        if ((*(_DWORD *)v8 & 0x10003) == 0)
        {
          if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
            dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
          v26 = *((_QWORD *)v5 + 372);
          if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
          {
            LODWORD(buf[0]) = 136446722;
            *(_QWORD *)((char *)buf + 4) = (char *)handle + 531;
            WORD6(buf[0]) = 2080;
            *(_QWORD *)((char *)buf + 14) = " ";
            WORD3(buf[1]) = 1024;
            DWORD2(buf[1]) = *(_DWORD *)applier;
            _os_log_impl(&dword_182FBE000, v26, OS_LOG_TYPE_INFO, "%{public}s%sRequest blocked on getting new streams after %u requests", (uint8_t *)buf, 0x1Cu);
          }
        }
LABEL_51:
        nw_protocol_masque_reset_demux_protocol(a1);
        v27 = handle[5].callbacks;
        if (v27)
        {
          v28 = nw_protocol_options_access_handle(v27, &__block_literal_global_67);
          v29 = handle->default_input_handler;
          if (!v29)
            goto LABEL_107;
        }
        else
        {
          v28 = 0;
          v29 = handle->default_input_handler;
          if (!v29)
            goto LABEL_107;
        }
        name = v29->identifier->name;
        if (!name)
        {
LABEL_93:
          v48 = v29->default_input_handler;
          if (!v48 || (v49 = v48->identifier->name) == 0 || strncmp(v49, "ohttp", 5uLL))
          {
            if ((v28 & 1) == 0
              && (!name || strcmp(name, "tls") && strcmp(name, "quic") && strcmp(name, "quic-connection")))
            {
              goto LABEL_107;
            }
LABEL_104:
            HIDWORD(handle[7].output_handler_context) = 1;
            if ((*(_DWORD *)v8 & 0x200000) != 0)
            {
              v50 = *(_QWORD *)handle[4].flow_id;
              if (v50)
              {
                *(_DWORD *)v8 &= ~0x400000u;
                *(_QWORD *)(v50 + 32) = 0;
                *(_QWORD *)(v50 + 40) = buf;
                *(_QWORD *)&buf[0] = v50;
                *((_QWORD *)&buf[0] + 1) = v50 + 32;
                nw_protocol_finalize_output_frames((uint64_t)handle, (uint64_t)buf);
                return;
              }
            }
            v51 = handle->default_input_handler;
            if (v51)
            {
              v52 = v51->callbacks;
              if (v52)
              {
                v53 = (void (*)(nw_protocol *, nw_protocol *))v52->connected;
                if (v53)
                {
                  v53(v51, handle);
                  return;
                }
              }
            }
            __nwlog_obj();
            v72 = handle->default_input_handler;
            v73 = "invalid";
            if (v72)
            {
              v74 = v72->identifier->name;
              if (v74)
                v73 = v74;
            }
            LODWORD(buf[0]) = 136446466;
            *(_QWORD *)((char *)buf + 4) = "nw_masque_wait_for_early_data";
            WORD6(buf[0]) = 2082;
            *(_QWORD *)((char *)buf + 14) = v73;
            v75 = (char *)_os_log_send_and_compose_impl();
            applier[0] = 16;
            LOBYTE(v106) = 0;
            if (!__nwlog_fault(v75, applier, &v106))
              goto LABEL_218;
            if (applier[0] == 17)
            {
              v76 = __nwlog_obj();
              v77 = applier[0];
              if (!os_log_type_enabled(v76, (os_log_type_t)applier[0]))
                goto LABEL_218;
              v78 = handle->default_input_handler;
              v79 = "invalid";
              if (v78)
              {
                v80 = v78->identifier->name;
                if (v80)
                  v79 = v80;
              }
              LODWORD(buf[0]) = 136446466;
              *(_QWORD *)((char *)buf + 4) = "nw_masque_wait_for_early_data";
              WORD6(buf[0]) = 2082;
              *(_QWORD *)((char *)buf + 14) = v79;
              v81 = "%{public}s protocol %{public}s has invalid connected callback";
            }
            else if ((_BYTE)v106)
            {
              v86 = (char *)__nw_create_backtrace_string();
              v76 = __nwlog_obj();
              v77 = applier[0];
              v87 = os_log_type_enabled(v76, (os_log_type_t)applier[0]);
              if (v86)
              {
                if (v87)
                {
                  v88 = handle->default_input_handler;
                  v89 = "invalid";
                  if (v88)
                  {
                    v90 = v88->identifier->name;
                    if (v90)
                      v89 = v90;
                  }
                  LODWORD(buf[0]) = 136446722;
                  *(_QWORD *)((char *)buf + 4) = "nw_masque_wait_for_early_data";
                  WORD6(buf[0]) = 2082;
                  *(_QWORD *)((char *)buf + 14) = v89;
                  WORD3(buf[1]) = 2082;
                  *((_QWORD *)&buf[1] + 1) = v86;
                  _os_log_impl(&dword_182FBE000, v76, v77, "%{public}s protocol %{public}s has invalid connected callback, dumping backtrace:%{public}s", (uint8_t *)buf, 0x20u);
                }
                free(v86);
                goto LABEL_218;
              }
              if (!v87)
              {
LABEL_218:
                if (v75)
                  free(v75);
                return;
              }
              v98 = handle->default_input_handler;
              v99 = "invalid";
              if (v98)
              {
                v100 = v98->identifier->name;
                if (v100)
                  v99 = v100;
              }
              LODWORD(buf[0]) = 136446466;
              *(_QWORD *)((char *)buf + 4) = "nw_masque_wait_for_early_data";
              WORD6(buf[0]) = 2082;
              *(_QWORD *)((char *)buf + 14) = v99;
              v81 = "%{public}s protocol %{public}s has invalid connected callback, no backtrace";
            }
            else
            {
              v76 = __nwlog_obj();
              v77 = applier[0];
              if (!os_log_type_enabled(v76, (os_log_type_t)applier[0]))
                goto LABEL_218;
              v94 = handle->default_input_handler;
              v95 = "invalid";
              if (v94)
              {
                v96 = v94->identifier->name;
                if (v96)
                  v95 = v96;
              }
              LODWORD(buf[0]) = 136446466;
              *(_QWORD *)((char *)buf + 4) = "nw_masque_wait_for_early_data";
              WORD6(buf[0]) = 2082;
              *(_QWORD *)((char *)buf + 14) = v95;
              v81 = "%{public}s protocol %{public}s has invalid connected callback, backtrace limit exceeded";
            }
            _os_log_impl(&dword_182FBE000, v76, v77, v81, (uint8_t *)buf, 0x16u);
            goto LABEL_218;
          }
LABEL_125:
          *(_DWORD *)v8 |= 0x3000u;
          nw_masque_mark_connected((uint64_t)handle);
          return;
        }
        if (strcmp(v29->identifier->name, "endpoint_flow") && strcmp(name, "flow_replay"))
        {
          if (!strncmp(name, "ohttp", 5uLL))
            goto LABEL_125;
          goto LABEL_93;
        }
        if (nw_parameters_get_fast_open_enabled(*(nw_parameters_t *)handle[5].flow_id))
        {
          *(_DWORD *)v8 |= 0x800u;
          goto LABEL_104;
        }
LABEL_107:
        nw_masque_send_connect((uint64_t)handle);
        return;
      }
      __nwlog_obj();
      v82 = (void *)objc_claimAutoreleasedReturnValue();
      LODWORD(buf[0]) = 136446210;
      *(_QWORD *)((char *)buf + 4) = "nw_http_connection_metadata_get_message_counts";
      v83 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(v101) = 0;
      if (__nwlog_fault(v83, type, &v101))
      {
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v84 = objc_claimAutoreleasedReturnValue();
          v85 = type[0];
          if (os_log_type_enabled(v84, type[0]))
          {
            LODWORD(buf[0]) = 136446210;
            *(_QWORD *)((char *)buf + 4) = "nw_http_connection_metadata_get_message_counts";
            _os_log_impl(&dword_182FBE000, v84, v85, "%{public}s metadata must be http_connection", (uint8_t *)buf, 0xCu);
          }
        }
        else if ((_BYTE)v101)
        {
          v91 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v84 = objc_claimAutoreleasedReturnValue();
          v92 = type[0];
          v93 = os_log_type_enabled(v84, type[0]);
          if (v91)
          {
            if (v93)
            {
              LODWORD(buf[0]) = 136446466;
              *(_QWORD *)((char *)buf + 4) = "nw_http_connection_metadata_get_message_counts";
              WORD6(buf[0]) = 2082;
              *(_QWORD *)((char *)buf + 14) = v91;
              _os_log_impl(&dword_182FBE000, v84, v92, "%{public}s metadata must be http_connection, dumping backtrace:%{public}s", (uint8_t *)buf, 0x16u);
            }

            free(v91);
            goto LABEL_223;
          }
          if (v93)
          {
            LODWORD(buf[0]) = 136446210;
            *(_QWORD *)((char *)buf + 4) = "nw_http_connection_metadata_get_message_counts";
            _os_log_impl(&dword_182FBE000, v84, v92, "%{public}s metadata must be http_connection, no backtrace", (uint8_t *)buf, 0xCu);
          }
        }
        else
        {
          __nwlog_obj();
          v84 = objc_claimAutoreleasedReturnValue();
          v97 = type[0];
          if (os_log_type_enabled(v84, type[0]))
          {
            LODWORD(buf[0]) = 136446210;
            *(_QWORD *)((char *)buf + 4) = "nw_http_connection_metadata_get_message_counts";
            _os_log_impl(&dword_182FBE000, v84, v97, "%{public}s metadata must be http_connection, backtrace limit exceeded", (uint8_t *)buf, 0xCu);
          }
        }

      }
LABEL_223:
      if (v83)
        free(v83);
      v8 = &handle[8].flow_id[15];
      v5 = (_BYTE *)(&nw_protocol_http_authentication_identifier::protocol_identifier + 4);
      goto LABEL_40;
    }
  }
}

void sub_183606724(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_protocol_masque_disconnect(nw_protocol *a1, nw_protocol *a2)
{
  char *handle;
  NSObject *v5;
  const char *logging_description;
  nw_protocol_callbacks *callbacks;
  void (*disconnected)(nw_protocol *, nw_protocol *);
  uint64_t v9;
  uint64_t v10;
  void (*v11)(void);
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  const char *v15;
  char *backtrace_string;
  _BOOL4 v17;
  char *v18;
  _BOOL4 v19;
  char v20;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  const char *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v23 = "nw_protocol_masque_disconnect";
    v12 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v20 = 0;
    if (!__nwlog_fault(v12, &type, &v20))
      goto LABEL_46;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v13 = __nwlog_obj();
      v14 = type;
      if (!os_log_type_enabled(v13, type))
        goto LABEL_46;
      *(_DWORD *)buf = 136446210;
      v23 = "nw_protocol_masque_disconnect";
      v15 = "%{public}s called with null protocol";
    }
    else if (v20)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v13 = __nwlog_obj();
      v14 = type;
      v17 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          v23 = "nw_protocol_masque_disconnect";
          v24 = 2082;
          v25 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_46:
        if (!v12)
          return;
LABEL_47:
        free(v12);
        return;
      }
      if (!v17)
        goto LABEL_46;
      *(_DWORD *)buf = 136446210;
      v23 = "nw_protocol_masque_disconnect";
      v15 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      v13 = __nwlog_obj();
      v14 = type;
      if (!os_log_type_enabled(v13, type))
        goto LABEL_46;
      *(_DWORD *)buf = 136446210;
      v23 = "nw_protocol_masque_disconnect";
      v15 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
LABEL_45:
    _os_log_impl(&dword_182FBE000, v13, v14, v15, buf, 0xCu);
    goto LABEL_46;
  }
  handle = (char *)a1->handle;
  if (handle)
  {
    if (*((_DWORD *)handle + 127) != 5)
    {
      if ((handle[529] & 1) == 0)
      {
        if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
          dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
        v5 = gprivacy_proxyLogObj;
        if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_INFO))
        {
          logging_description = nw_endpoint_get_logging_description(*((void **)handle + 39));
          *(_DWORD *)buf = 136446722;
          v23 = handle + 531;
          v24 = 2080;
          v25 = " ";
          v26 = 2082;
          v27 = logging_description;
          _os_log_impl(&dword_182FBE000, v5, OS_LOG_TYPE_INFO, "%{public}s%sClosing connection for %{public}s", buf, 0x20u);
        }
      }
      nw_protocol_remove_instance((uint64_t)a1);
      *((_DWORD *)handle + 127) = 5;
      if (a2)
      {
        callbacks = a2->callbacks;
        if (callbacks)
        {
          disconnected = (void (*)(nw_protocol *, nw_protocol *))callbacks->disconnected;
          if (disconnected)
            disconnected(a2, a1);
        }
      }
      v9 = *((_QWORD *)handle + 4);
      if (v9)
      {
        v10 = *(_QWORD *)(v9 + 24);
        if (v10)
        {
          v11 = *(void (**)(void))(v10 + 32);
          if (v11)
            v11();
        }
      }
    }
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v23 = "nw_protocol_masque_disconnect";
  v12 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v20 = 0;
  if (!__nwlog_fault(v12, &type, &v20))
    goto LABEL_46;
  if (type == OS_LOG_TYPE_FAULT)
  {
    v13 = __nwlog_obj();
    v14 = type;
    if (!os_log_type_enabled(v13, type))
      goto LABEL_46;
    *(_DWORD *)buf = 136446210;
    v23 = "nw_protocol_masque_disconnect";
    v15 = "%{public}s called with null masque";
    goto LABEL_45;
  }
  if (!v20)
  {
    v13 = __nwlog_obj();
    v14 = type;
    if (!os_log_type_enabled(v13, type))
      goto LABEL_46;
    *(_DWORD *)buf = 136446210;
    v23 = "nw_protocol_masque_disconnect";
    v15 = "%{public}s called with null masque, backtrace limit exceeded";
    goto LABEL_45;
  }
  v18 = (char *)__nw_create_backtrace_string();
  v13 = __nwlog_obj();
  v14 = type;
  v19 = os_log_type_enabled(v13, type);
  if (!v18)
  {
    if (!v19)
      goto LABEL_46;
    *(_DWORD *)buf = 136446210;
    v23 = "nw_protocol_masque_disconnect";
    v15 = "%{public}s called with null masque, no backtrace";
    goto LABEL_45;
  }
  if (v19)
  {
    *(_DWORD *)buf = 136446466;
    v23 = "nw_protocol_masque_disconnect";
    v24 = 2082;
    v25 = v18;
    _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s called with null masque, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v18);
  if (v12)
    goto LABEL_47;
}

void nw_protocol_masque_disconnected(nw_protocol *a1, nw_protocol *a2)
{
  char *handle;
  NSObject *v4;
  const char *logging_description;
  int v6;
  NSObject *v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(void);
  uint64_t v12;
  uint64_t v13;
  void (*v14)(void);
  NSObject *v15;
  const char *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(void);
  char *v21;
  NSObject *v22;
  os_log_type_t v23;
  const char *v24;
  char *backtrace_string;
  _BOOL4 v26;
  char *v27;
  _BOOL4 v28;
  char v29;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v32;
  __int16 v33;
  const char *v34;
  __int16 v35;
  const char *v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v32 = "nw_protocol_masque_disconnected";
    v21 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v29 = 0;
    if (!__nwlog_fault(v21, &type, &v29))
      goto LABEL_76;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v22 = __nwlog_obj();
      v23 = type;
      if (!os_log_type_enabled(v22, type))
        goto LABEL_76;
      *(_DWORD *)buf = 136446210;
      v32 = "nw_protocol_masque_disconnected";
      v24 = "%{public}s called with null protocol";
      goto LABEL_75;
    }
    if (!v29)
    {
      v22 = __nwlog_obj();
      v23 = type;
      if (!os_log_type_enabled(v22, type))
        goto LABEL_76;
      *(_DWORD *)buf = 136446210;
      v32 = "nw_protocol_masque_disconnected";
      v24 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_75;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v22 = __nwlog_obj();
    v23 = type;
    v26 = os_log_type_enabled(v22, type);
    if (!backtrace_string)
    {
      if (!v26)
        goto LABEL_76;
      *(_DWORD *)buf = 136446210;
      v32 = "nw_protocol_masque_disconnected";
      v24 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_75;
    }
    if (v26)
    {
      *(_DWORD *)buf = 136446466;
      v32 = "nw_protocol_masque_disconnected";
      v33 = 2082;
      v34 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v22, v23, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(backtrace_string);
LABEL_76:
    if (!v21)
      return;
    goto LABEL_77;
  }
  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v32 = "nw_protocol_masque_disconnected";
    v21 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v29 = 0;
    if (!__nwlog_fault(v21, &type, &v29))
      goto LABEL_76;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v22 = __nwlog_obj();
      v23 = type;
      if (!os_log_type_enabled(v22, type))
        goto LABEL_76;
      *(_DWORD *)buf = 136446210;
      v32 = "nw_protocol_masque_disconnected";
      v24 = "%{public}s called with null masque";
      goto LABEL_75;
    }
    if (!v29)
    {
      v22 = __nwlog_obj();
      v23 = type;
      if (!os_log_type_enabled(v22, type))
        goto LABEL_76;
      *(_DWORD *)buf = 136446210;
      v32 = "nw_protocol_masque_disconnected";
      v24 = "%{public}s called with null masque, backtrace limit exceeded";
      goto LABEL_75;
    }
    v27 = (char *)__nw_create_backtrace_string();
    v22 = __nwlog_obj();
    v23 = type;
    v28 = os_log_type_enabled(v22, type);
    if (v27)
    {
      if (v28)
      {
        *(_DWORD *)buf = 136446466;
        v32 = "nw_protocol_masque_disconnected";
        v33 = 2082;
        v34 = v27;
        _os_log_impl(&dword_182FBE000, v22, v23, "%{public}s called with null masque, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v27);
      if (!v21)
        return;
LABEL_77:
      free(v21);
      return;
    }
    if (v28)
    {
      *(_DWORD *)buf = 136446210;
      v32 = "nw_protocol_masque_disconnected";
      v24 = "%{public}s called with null masque, no backtrace";
LABEL_75:
      _os_log_impl(&dword_182FBE000, v22, v23, v24, buf, 0xCu);
      goto LABEL_76;
    }
    goto LABEL_76;
  }
  if (*((nw_protocol **)handle + 54) == a2)
  {
    if ((handle[529] & 1) == 0)
    {
      if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
        dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
      v8 = gprivacy_proxyLogObj;
      if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136446466;
        v32 = handle + 531;
        v33 = 2080;
        v34 = " ";
        _os_log_impl(&dword_182FBE000, v8, OS_LOG_TYPE_INFO, "%{public}s%sDemux protocol disconnected", buf, 0x16u);
      }
    }
    v9 = *((_QWORD *)handle + 20);
    if (v9)
    {
      v10 = *(_QWORD *)(v9 + 24);
      if (v10)
      {
        v11 = *(void (**)(void))(v10 + 8);
        if (v11)
          v11();
      }
    }
    v12 = *((_QWORD *)handle + 28);
    if (v12)
    {
      v13 = *(_QWORD *)(v12 + 24);
      if (v13)
      {
        v14 = *(void (**)(void))(v13 + 8);
        if (v14)
          v14();
      }
    }
  }
  else
  {
    if (*((nw_protocol **)handle + 4) != a2 || *((_DWORD *)handle + 127) == 5)
      return;
    if ((handle[529] & 1) == 0)
    {
      if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
        dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
      v4 = gprivacy_proxyLogObj;
      if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_INFO))
      {
        logging_description = nw_endpoint_get_logging_description(*((void **)handle + 39));
        *(_DWORD *)buf = 136446722;
        v32 = handle + 531;
        v33 = 2080;
        v34 = " ";
        v35 = 2082;
        v36 = logging_description;
        _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_INFO, "%{public}s%sDisconnected from %{public}s", buf, 0x20u);
      }
    }
    nw_protocol_remove_instance((uint64_t)a1);
    if (*((_DWORD *)handle + 127) == 2)
    {
      v6 = *((_DWORD *)handle + 130);
      if (v6)
      {
        if (v6 != 57)
        {
          if (v6 == 35)
          {
            if ((handle[529] & 1) == 0)
            {
              if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
                dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
              v7 = gprivacy_proxyLogObj;
              if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)buf = 136446466;
                v32 = handle + 531;
                v33 = 2080;
                v34 = " ";
                _os_log_impl(&dword_182FBE000, v7, OS_LOG_TYPE_INFO, "%{public}s%sConnection needs to retry, asking to rebuild", buf, 0x16u);
              }
            }
            *((_DWORD *)handle + 127) = 0;
            nw_protocol_notify(*((_QWORD **)handle + 6), (uint64_t)handle, 19);
            return;
          }
          if ((handle[529] & 1) == 0)
          {
            if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
              dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
            v15 = gprivacy_proxyLogObj;
            if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
            {
              v16 = nw_endpoint_get_logging_description(*((void **)handle + 39));
              *(_DWORD *)buf = 136446722;
              v32 = handle + 531;
              v33 = 2080;
              v34 = " ";
              v35 = 2082;
              v36 = v16;
              _os_log_impl(&dword_182FBE000, v15, OS_LOG_TYPE_ERROR, "%{public}s%sConnection disconnected from %{public}s without a reply", buf, 0x20u);
            }
          }
          if ((*(_DWORD *)(handle + 527) & 4) != 0)
            v17 = 1200;
          else
            v17 = 1100;
          nw_masque_report_error_to_proxy_agent((uint64_t)handle, v17);
        }
      }
    }
    *((_DWORD *)handle + 127) = 5;
    v18 = *((_QWORD *)handle + 6);
    if (v18)
    {
      v19 = *(_QWORD *)(v18 + 24);
      if (v19)
      {
        v20 = *(void (**)(void))(v19 + 48);
        if (v20)
          v20();
      }
    }
  }
}

void nw_protocol_masque_error(nw_protocol *a1, nw_protocol *a2, int a3)
{
  _DWORD *handle;
  int v7;
  nw_protocol *v8;
  const char *name;
  int v10;
  nw_protocol *default_input_handler;
  nw_protocol_callbacks *callbacks;
  void (*error)(void);
  char *v14;
  NSObject *v15;
  os_log_type_t v16;
  const char *v17;
  char *backtrace_string;
  _BOOL4 v19;
  char *v20;
  _BOOL4 v21;
  int v22;
  char v23;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  char *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v26 = "nw_protocol_masque_error";
    v14 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (!__nwlog_fault(v14, &type, &v23))
      goto LABEL_58;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v15 = __nwlog_obj();
      v16 = type;
      if (!os_log_type_enabled(v15, type))
        goto LABEL_58;
      *(_DWORD *)buf = 136446210;
      v26 = "nw_protocol_masque_error";
      v17 = "%{public}s called with null protocol";
    }
    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v15 = __nwlog_obj();
      v16 = type;
      v19 = os_log_type_enabled(v15, type);
      if (backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446466;
          v26 = "nw_protocol_masque_error";
          v27 = 2082;
          v28 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v15, v16, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_58:
        if (!v14)
          return;
        goto LABEL_59;
      }
      if (!v19)
        goto LABEL_58;
      *(_DWORD *)buf = 136446210;
      v26 = "nw_protocol_masque_error";
      v17 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      v15 = __nwlog_obj();
      v16 = type;
      if (!os_log_type_enabled(v15, type))
        goto LABEL_58;
      *(_DWORD *)buf = 136446210;
      v26 = "nw_protocol_masque_error";
      v17 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
LABEL_57:
    _os_log_impl(&dword_182FBE000, v15, v16, v17, buf, 0xCu);
    goto LABEL_58;
  }
  handle = a1->handle;
  if (handle)
  {
    if (a3 == 40)
    {
      if (handle[127] == 2 && (*(_DWORD *)((char *)handle + 527) & 0x600000) == 0x200000)
        return;
      handle[130] = 40;
      goto LABEL_26;
    }
    handle[130] = a3;
    if ((a3 + 9815) <= 7 && (v7 = 1, ((1 << (a3 + 87)) & 0x83) != 0))
    {
      v22 = 0;
    }
    else
    {
      if (a3 == 35)
        return;
      if (a3 != 60 || (*((_BYTE *)handle + 527) & 4) == 0)
        goto LABEL_26;
      v7 = 0;
      v22 = 1;
    }
    v8 = a1;
    while (1)
    {
      v8 = v8->output_handler;
      if (!v8)
        break;
      name = v8->identifier->name;
      if (!strcmp(name, "quic") || !strcmp(name, "quic-connection") || !strcmp(name, "tls"))
      {
        if (v8 != a2)
          break;
        if (v7)
        {
          if ((*((_BYTE *)handle + 527) & 4) != 0)
            v10 = 1206;
          else
            v10 = 1106;
        }
        else
        {
          v10 = a3;
          if (!v22)
            break;
        }
        nw_masque_report_error_to_proxy_agent((uint64_t)handle, v10);
        break;
      }
    }
LABEL_26:
    default_input_handler = a1->default_input_handler;
    if (default_input_handler)
    {
      callbacks = default_input_handler->callbacks;
      if (callbacks)
      {
        error = (void (*)(void))callbacks->error;
        if (error)
          error();
      }
    }
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v26 = "nw_protocol_masque_error";
  v14 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v23 = 0;
  if (!__nwlog_fault(v14, &type, &v23))
    goto LABEL_58;
  if (type == OS_LOG_TYPE_FAULT)
  {
    v15 = __nwlog_obj();
    v16 = type;
    if (!os_log_type_enabled(v15, type))
      goto LABEL_58;
    *(_DWORD *)buf = 136446210;
    v26 = "nw_protocol_masque_error";
    v17 = "%{public}s called with null masque";
    goto LABEL_57;
  }
  if (!v23)
  {
    v15 = __nwlog_obj();
    v16 = type;
    if (!os_log_type_enabled(v15, type))
      goto LABEL_58;
    *(_DWORD *)buf = 136446210;
    v26 = "nw_protocol_masque_error";
    v17 = "%{public}s called with null masque, backtrace limit exceeded";
    goto LABEL_57;
  }
  v20 = (char *)__nw_create_backtrace_string();
  v15 = __nwlog_obj();
  v16 = type;
  v21 = os_log_type_enabled(v15, type);
  if (!v20)
  {
    if (!v21)
      goto LABEL_58;
    *(_DWORD *)buf = 136446210;
    v26 = "nw_protocol_masque_error";
    v17 = "%{public}s called with null masque, no backtrace";
    goto LABEL_57;
  }
  if (v21)
  {
    *(_DWORD *)buf = 136446466;
    v26 = "nw_protocol_masque_error";
    v27 = 2082;
    v28 = v20;
    _os_log_impl(&dword_182FBE000, v15, v16, "%{public}s called with null masque, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v20);
  if (v14)
LABEL_59:
    free(v14);
}

uint64_t nw_protocol_masque_supports_external_data(nw_protocol *a1)
{
  unsigned __int8 *handle;
  char *v3;
  NSObject *v4;
  os_log_type_t v5;
  const char *v6;
  char *backtrace_string;
  _BOOL4 v8;
  const char *v9;
  _BOOL4 v10;
  char v11;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    handle = (unsigned __int8 *)a1->handle;
    if (handle)
      return (handle[527] >> 6) & 1;
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v14 = "nw_protocol_masque_supports_external_data";
    v3 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v11 = 0;
    if (!__nwlog_fault(v3, &type, &v11))
      goto LABEL_32;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_protocol_masque_supports_external_data";
        v6 = "%{public}s called with null masque";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (!v11)
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_protocol_masque_supports_external_data";
        v6 = "%{public}s called with null masque, backtrace limit exceeded";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v4 = __nwlog_obj();
    v5 = type;
    v10 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_protocol_masque_supports_external_data";
        v6 = "%{public}s called with null masque, no backtrace";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (v10)
    {
      *(_DWORD *)buf = 136446466;
      v14 = "nw_protocol_masque_supports_external_data";
      v15 = 2082;
      v16 = backtrace_string;
      v9 = "%{public}s called with null masque, dumping backtrace:%{public}s";
      goto LABEL_21;
    }
    goto LABEL_22;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v14 = "nw_protocol_masque_supports_external_data";
  v3 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v11 = 0;
  if (!__nwlog_fault(v3, &type, &v11))
    goto LABEL_32;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v11)
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_protocol_masque_supports_external_data";
        v6 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v4 = __nwlog_obj();
    v5 = type;
    v8 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (v8)
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_protocol_masque_supports_external_data";
        v6 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (v8)
    {
      *(_DWORD *)buf = 136446466;
      v14 = "nw_protocol_masque_supports_external_data";
      v15 = 2082;
      v16 = backtrace_string;
      v9 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_21:
      _os_log_impl(&dword_182FBE000, v4, v5, v9, buf, 0x16u);
    }
LABEL_22:
    free(backtrace_string);
    goto LABEL_32;
  }
  v4 = __nwlog_obj();
  v5 = type;
  if (os_log_type_enabled(v4, type))
  {
    *(_DWORD *)buf = 136446210;
    v14 = "nw_protocol_masque_supports_external_data";
    v6 = "%{public}s called with null protocol";
LABEL_31:
    _os_log_impl(&dword_182FBE000, v4, v5, v6, buf, 0xCu);
  }
LABEL_32:
  if (v3)
    free(v3);
  return 0;
}

BOOL nw_protocol_masque_waiting_for_output(nw_protocol *a1, nw_protocol *a2)
{
  _DWORD *handle;
  char *v4;
  NSObject *v5;
  os_log_type_t v6;
  const char *v7;
  char *backtrace_string;
  _BOOL4 v9;
  const char *v10;
  _BOOL4 v11;
  char v12;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    handle = a1->handle;
    if (handle)
      return handle[127] == 1;
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v15 = "nw_protocol_masque_waiting_for_output";
    v4 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v12 = 0;
    if (!__nwlog_fault(v4, &type, &v12))
      goto LABEL_32;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v5 = __nwlog_obj();
      v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_protocol_masque_waiting_for_output";
        v7 = "%{public}s called with null masque";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (!v12)
    {
      v5 = __nwlog_obj();
      v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_protocol_masque_waiting_for_output";
        v7 = "%{public}s called with null masque, backtrace limit exceeded";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v5 = __nwlog_obj();
    v6 = type;
    v11 = os_log_type_enabled(v5, type);
    if (!backtrace_string)
    {
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_protocol_masque_waiting_for_output";
        v7 = "%{public}s called with null masque, no backtrace";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (v11)
    {
      *(_DWORD *)buf = 136446466;
      v15 = "nw_protocol_masque_waiting_for_output";
      v16 = 2082;
      v17 = backtrace_string;
      v10 = "%{public}s called with null masque, dumping backtrace:%{public}s";
      goto LABEL_21;
    }
    goto LABEL_22;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v15 = "nw_protocol_masque_waiting_for_output";
  v4 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v12 = 0;
  if (!__nwlog_fault(v4, &type, &v12))
    goto LABEL_32;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v12)
    {
      v5 = __nwlog_obj();
      v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_protocol_masque_waiting_for_output";
        v7 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v5 = __nwlog_obj();
    v6 = type;
    v9 = os_log_type_enabled(v5, type);
    if (!backtrace_string)
    {
      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_protocol_masque_waiting_for_output";
        v7 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (v9)
    {
      *(_DWORD *)buf = 136446466;
      v15 = "nw_protocol_masque_waiting_for_output";
      v16 = 2082;
      v17 = backtrace_string;
      v10 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_21:
      _os_log_impl(&dword_182FBE000, v5, v6, v10, buf, 0x16u);
    }
LABEL_22:
    free(backtrace_string);
    goto LABEL_32;
  }
  v5 = __nwlog_obj();
  v6 = type;
  if (os_log_type_enabled(v5, type))
  {
    *(_DWORD *)buf = 136446210;
    v15 = "nw_protocol_masque_waiting_for_output";
    v7 = "%{public}s called with null protocol";
LABEL_31:
    _os_log_impl(&dword_182FBE000, v5, v6, v7, buf, 0xCu);
  }
LABEL_32:
  if (v4)
    free(v4);
  return 0;
}

uint64_t nw_protocol_masque_listener_get_output_frames(nw_protocol *a1, nw_protocol *a2, unsigned int a3, unsigned int a4, unsigned int a5, nw_frame_array_s *a6)
{
  char *handle;
  uint64_t v8;
  void **node;
  void **v12;
  NSObject *v13;
  uint64_t v14;
  const char *v15;
  NSObject *v16;
  uint32_t v17;
  uint64_t v18;
  int address_family;
  int v20;
  nw_protocol *output_handler;
  nw_frame *tqh_first;
  nw_frame *v24;
  char v25;
  uint64_t v26;
  char *v27;
  NSObject *v28;
  os_log_type_t v29;
  const char *v30;
  char *v31;
  NSObject *v32;
  os_log_type_t v33;
  const char *v34;
  char *backtrace_string;
  _BOOL4 v36;
  const char *v37;
  _BOOL4 v38;
  _BOOL4 v39;
  _BOOL4 v40;
  char *v41;
  _BOOL4 v42;
  _QWORD v44[2];
  uint64_t (*v45)(uint64_t, uint64_t);
  void *v46;
  _BYTE *v47;
  char *v48;
  nw_frame_array_s *v49;
  void **v50;
  nw_protocol *v51;
  char v52;
  char v53;
  os_log_type_t type;
  _BYTE buf[24];
  int v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_masque_listener_get_output_frames";
    v27 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v53 = 0;
    if (!__nwlog_fault(v27, &type, &v53))
      goto LABEL_98;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v28 = __nwlog_obj();
      v29 = type;
      if (!os_log_type_enabled(v28, type))
        goto LABEL_98;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_masque_listener_get_output_frames";
      v30 = "%{public}s called with null protocol";
      goto LABEL_97;
    }
    if (!v53)
    {
      v28 = __nwlog_obj();
      v29 = type;
      if (!os_log_type_enabled(v28, type))
        goto LABEL_98;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_masque_listener_get_output_frames";
      v30 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_97;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v28 = __nwlog_obj();
    v29 = type;
    v36 = os_log_type_enabled(v28, type);
    if (!backtrace_string)
    {
      if (!v36)
        goto LABEL_98;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_masque_listener_get_output_frames";
      v30 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_97;
    }
    if (!v36)
      goto LABEL_73;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "nw_protocol_masque_listener_get_output_frames";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = backtrace_string;
    v37 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_72:
    _os_log_impl(&dword_182FBE000, v28, v29, v37, buf, 0x16u);
    goto LABEL_73;
  }
  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_masque_listener_get_output_frames";
    v27 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v53 = 0;
    if (!__nwlog_fault(v27, &type, &v53))
      goto LABEL_98;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v28 = __nwlog_obj();
      v29 = type;
      if (!os_log_type_enabled(v28, type))
        goto LABEL_98;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_masque_listener_get_output_frames";
      v30 = "%{public}s called with null masque";
      goto LABEL_97;
    }
    if (!v53)
    {
      v28 = __nwlog_obj();
      v29 = type;
      if (!os_log_type_enabled(v28, type))
        goto LABEL_98;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_masque_listener_get_output_frames";
      v30 = "%{public}s called with null masque, backtrace limit exceeded";
      goto LABEL_97;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v28 = __nwlog_obj();
    v29 = type;
    v38 = os_log_type_enabled(v28, type);
    if (!backtrace_string)
    {
      if (!v38)
        goto LABEL_98;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_masque_listener_get_output_frames";
      v30 = "%{public}s called with null masque, no backtrace";
      goto LABEL_97;
    }
    if (!v38)
      goto LABEL_73;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "nw_protocol_masque_listener_get_output_frames";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = backtrace_string;
    v37 = "%{public}s called with null masque, dumping backtrace:%{public}s";
    goto LABEL_72;
  }
  if ((handle[527] & 0x10) == 0)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_masque_listener_get_output_frames";
    v27 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v53 = 0;
    if (!__nwlog_fault(v27, &type, &v53))
      goto LABEL_98;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v28 = __nwlog_obj();
      v29 = type;
      if (!os_log_type_enabled(v28, type))
        goto LABEL_98;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_masque_listener_get_output_frames";
      v30 = "%{public}s called with null masque->listen_udp";
      goto LABEL_97;
    }
    if (!v53)
    {
      v28 = __nwlog_obj();
      v29 = type;
      if (!os_log_type_enabled(v28, type))
        goto LABEL_98;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_masque_listener_get_output_frames";
      v30 = "%{public}s called with null masque->listen_udp, backtrace limit exceeded";
      goto LABEL_97;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v28 = __nwlog_obj();
    v29 = type;
    v39 = os_log_type_enabled(v28, type);
    if (!backtrace_string)
    {
      if (!v39)
        goto LABEL_98;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_masque_listener_get_output_frames";
      v30 = "%{public}s called with null masque->listen_udp, no backtrace";
      goto LABEL_97;
    }
    if (!v39)
      goto LABEL_73;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "nw_protocol_masque_listener_get_output_frames";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = backtrace_string;
    v37 = "%{public}s called with null masque->listen_udp, dumping backtrace:%{public}s";
    goto LABEL_72;
  }
  v8 = *((_QWORD *)handle + 60);
  if (!v8)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_masque_listener_get_output_frames";
    v27 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v53 = 0;
    if (!__nwlog_fault(v27, &type, &v53))
      goto LABEL_98;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v28 = __nwlog_obj();
      v29 = type;
      if (!os_log_type_enabled(v28, type))
        goto LABEL_98;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_masque_listener_get_output_frames";
      v30 = "%{public}s called with null masque->listener_flows";
      goto LABEL_97;
    }
    if (!v53)
    {
      v28 = __nwlog_obj();
      v29 = type;
      if (!os_log_type_enabled(v28, type))
        goto LABEL_98;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_masque_listener_get_output_frames";
      v30 = "%{public}s called with null masque->listener_flows, backtrace limit exceeded";
      goto LABEL_97;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v28 = __nwlog_obj();
    v29 = type;
    v40 = os_log_type_enabled(v28, type);
    if (backtrace_string)
    {
      if (v40)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_protocol_masque_listener_get_output_frames";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        v37 = "%{public}s called with null masque->listener_flows, dumping backtrace:%{public}s";
        goto LABEL_72;
      }
LABEL_73:
      free(backtrace_string);
      goto LABEL_98;
    }
    if (!v40)
      goto LABEL_98;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_masque_listener_get_output_frames";
    v30 = "%{public}s called with null masque->listener_flows, no backtrace";
LABEL_97:
    _os_log_impl(&dword_182FBE000, v28, v29, v30, buf, 0xCu);
LABEL_98:
    if (v27)
      free(v27);
    return 0;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_masque_get_listener_flow_for_input_protocol";
    v31 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v53 = 0;
    if (!__nwlog_fault(v31, &type, &v53))
      goto LABEL_105;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v32 = __nwlog_obj();
      v33 = type;
      if (!os_log_type_enabled(v32, type))
        goto LABEL_105;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_masque_get_listener_flow_for_input_protocol";
      v34 = "%{public}s called with null input_protocol";
    }
    else if (v53)
    {
      v41 = (char *)__nw_create_backtrace_string();
      v32 = __nwlog_obj();
      v33 = type;
      v42 = os_log_type_enabled(v32, type);
      if (v41)
      {
        if (v42)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_masque_get_listener_flow_for_input_protocol";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v41;
          _os_log_impl(&dword_182FBE000, v32, v33, "%{public}s called with null input_protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v41);
        goto LABEL_105;
      }
      if (!v42)
      {
LABEL_105:
        if (v31)
          free(v31);
LABEL_13:
        if ((handle[529] & 1) == 0)
        {
          if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
            dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
          v14 = gprivacy_proxyLogObj;
          if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = handle + 531;
            *(_WORD *)&buf[12] = 2080;
            *(_QWORD *)&buf[14] = " ";
            v15 = "%{public}s%sNo valid listener flow found";
            v16 = v14;
            v17 = 22;
LABEL_18:
            _os_log_impl(&dword_182FBE000, v16, OS_LOG_TYPE_ERROR, v15, buf, v17);
            return 0;
          }
        }
        return 0;
      }
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_masque_get_listener_flow_for_input_protocol";
      v34 = "%{public}s called with null input_protocol, no backtrace";
    }
    else
    {
      v32 = __nwlog_obj();
      v33 = type;
      if (!os_log_type_enabled(v32, type))
        goto LABEL_105;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_masque_get_listener_flow_for_input_protocol";
      v34 = "%{public}s called with null input_protocol, backtrace limit exceeded";
    }
    _os_log_impl(&dword_182FBE000, v32, v33, v34, buf, 0xCu);
    goto LABEL_105;
  }
  node = (void **)nw_hash_table_get_node(v8, (uint64_t)a2, 8);
  if (!node || (v12 = node, a2->output_handler_context != node))
  {
    if ((handle[529] & 1) == 0)
    {
      if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
        dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
      v13 = gprivacy_proxyLogObj;
      if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = handle + 531;
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = " ";
        _os_log_impl(&dword_182FBE000, v13, OS_LOG_TYPE_ERROR, "%{public}s%sNo valid node found", buf, 0x16u);
      }
    }
    goto LABEL_13;
  }
  address_family = nw_endpoint_get_address_family(node[6]);
  v20 = address_family;
  if (address_family != 2 && address_family != 30)
  {
    if ((handle[529] & 1) == 0)
    {
      if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
        dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
      v26 = gprivacy_proxyLogObj;
      if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = handle + 531;
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = " ";
        *(_WORD *)&buf[22] = 1024;
        v56 = v20;
        v15 = "%{public}s%sInvalid address family %u";
        v16 = v26;
        v17 = 28;
        goto LABEL_18;
      }
    }
    return 0;
  }
  output_handler = a1->output_handler;
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = buf;
  v56 = 0;
  *(_QWORD *)&buf[16] = 0x2000000000;
  v56 = ((uint64_t (*)(void))output_handler->callbacks->get_output_frames)();
  if (*(_DWORD *)(*(_QWORD *)&buf[8] + 24))
  {
    v44[0] = MEMORY[0x1E0C809B0];
    v44[1] = 0x40000000;
    v45 = ___ZL45nw_protocol_masque_listener_get_output_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke;
    v46 = &unk_1E149ECB8;
    v52 = v20;
    v47 = buf;
    v48 = handle;
    v49 = a6;
    v50 = v12 + 4;
    v51 = a1;
    tqh_first = a6->tqh_first;
    do
    {
      if (!tqh_first)
        break;
      v24 = (nw_frame *)*((_QWORD *)tqh_first + 4);
      v25 = ((uint64_t (*)(_QWORD *))v45)(v44);
      tqh_first = v24;
    }
    while ((v25 & 1) != 0);
    v18 = *(unsigned int *)(*(_QWORD *)&buf[8] + 24);
  }
  else
  {
    v18 = 0;
  }
  _Block_object_dispose(buf, 8);
  return v18;
}

uint64_t nw_protocol_masque_listener_finalize_output_frames(nw_protocol *a1, nw_frame_array_s *a2)
{
  void *handle;
  nw_frame *tqh_first;
  nw_frame *v6;
  char v7;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  const char *v12;
  char *backtrace_string;
  _BOOL4 v14;
  char *v15;
  _BOOL4 v16;
  _QWORD v17[2];
  uint64_t (*v18)(_QWORD *);
  void *v19;
  nw_protocol *v20;
  void *v21;
  char v22;
  os_log_type_t v23;
  uint8_t buf[4];
  const char *v25;
  __int16 v26;
  char *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v25 = "nw_protocol_masque_listener_finalize_output_frames";
    v9 = (char *)_os_log_send_and_compose_impl();
    v23 = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (!__nwlog_fault(v9, &v23, &v22))
      goto LABEL_35;
    if (v23 == OS_LOG_TYPE_FAULT)
    {
      v10 = __nwlog_obj();
      v11 = v23;
      if (!os_log_type_enabled(v10, v23))
        goto LABEL_35;
      *(_DWORD *)buf = 136446210;
      v25 = "nw_protocol_masque_listener_finalize_output_frames";
      v12 = "%{public}s called with null protocol";
      goto LABEL_34;
    }
    if (!v22)
    {
      v10 = __nwlog_obj();
      v11 = v23;
      if (!os_log_type_enabled(v10, v23))
        goto LABEL_35;
      *(_DWORD *)buf = 136446210;
      v25 = "nw_protocol_masque_listener_finalize_output_frames";
      v12 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_34;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v10 = __nwlog_obj();
    v11 = v23;
    v14 = os_log_type_enabled(v10, v23);
    if (!backtrace_string)
    {
      if (!v14)
        goto LABEL_35;
      *(_DWORD *)buf = 136446210;
      v25 = "nw_protocol_masque_listener_finalize_output_frames";
      v12 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_34;
    }
    if (v14)
    {
      *(_DWORD *)buf = 136446466;
      v25 = "nw_protocol_masque_listener_finalize_output_frames";
      v26 = 2082;
      v27 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(backtrace_string);
LABEL_35:
    if (!v9)
      return 0;
LABEL_36:
    free(v9);
    return 0;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v25 = "nw_protocol_masque_listener_finalize_output_frames";
    v9 = (char *)_os_log_send_and_compose_impl();
    v23 = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (!__nwlog_fault(v9, &v23, &v22))
      goto LABEL_35;
    if (v23 == OS_LOG_TYPE_FAULT)
    {
      v10 = __nwlog_obj();
      v11 = v23;
      if (!os_log_type_enabled(v10, v23))
        goto LABEL_35;
      *(_DWORD *)buf = 136446210;
      v25 = "nw_protocol_masque_listener_finalize_output_frames";
      v12 = "%{public}s called with null masque";
      goto LABEL_34;
    }
    if (!v22)
    {
      v10 = __nwlog_obj();
      v11 = v23;
      if (!os_log_type_enabled(v10, v23))
        goto LABEL_35;
      *(_DWORD *)buf = 136446210;
      v25 = "nw_protocol_masque_listener_finalize_output_frames";
      v12 = "%{public}s called with null masque, backtrace limit exceeded";
      goto LABEL_34;
    }
    v15 = (char *)__nw_create_backtrace_string();
    v10 = __nwlog_obj();
    v11 = v23;
    v16 = os_log_type_enabled(v10, v23);
    if (v15)
    {
      if (v16)
      {
        *(_DWORD *)buf = 136446466;
        v25 = "nw_protocol_masque_listener_finalize_output_frames";
        v26 = 2082;
        v27 = v15;
        _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null masque, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v15);
      if (!v9)
        return 0;
      goto LABEL_36;
    }
    if (v16)
    {
      *(_DWORD *)buf = 136446210;
      v25 = "nw_protocol_masque_listener_finalize_output_frames";
      v12 = "%{public}s called with null masque, no backtrace";
LABEL_34:
      _os_log_impl(&dword_182FBE000, v10, v11, v12, buf, 0xCu);
      goto LABEL_35;
    }
    goto LABEL_35;
  }
  v17[0] = MEMORY[0x1E0C809B0];
  v17[1] = 0x40000000;
  v18 = (uint64_t (*)(_QWORD *))___ZL50nw_protocol_masque_listener_finalize_output_framesP11nw_protocolP16nw_frame_array_s_block_invoke;
  v19 = &__block_descriptor_tmp_194;
  v20 = a1;
  v21 = handle;
  tqh_first = a2->tqh_first;
  do
  {
    if (!tqh_first)
      break;
    v6 = (nw_frame *)*((_QWORD *)tqh_first + 4);
    v7 = v18(v17);
    tqh_first = v6;
  }
  while ((v7 & 1) != 0);
  return nw_protocol_finalize_output_frames((uint64_t)a1->output_handler, (uint64_t)a2);
}

uint64_t nw_protocol_masque_listener_get_input_frames(nw_protocol *a1, nw_protocol *a2, uint64_t a3, uint64_t a4, uint64_t a5, nw_frame_array_s *a6)
{
  char *handle;
  _QWORD *output_handler_context;
  NSObject *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  const char *v13;
  char *backtrace_string;
  _BOOL4 v15;
  char *v16;
  _BOOL4 v17;
  const char *v18;
  _BOOL4 v19;
  char v20;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v23;
  __int16 v24;
  const char *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v23 = "nw_protocol_masque_listener_get_input_frames";
    v10 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v20 = 0;
    if (!__nwlog_fault(v10, &type, &v20))
      goto LABEL_55;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v11 = __nwlog_obj();
      v12 = type;
      if (!os_log_type_enabled(v11, type))
        goto LABEL_55;
      *(_DWORD *)buf = 136446210;
      v23 = "nw_protocol_masque_listener_get_input_frames";
      v13 = "%{public}s called with null protocol";
    }
    else if (v20)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v11 = __nwlog_obj();
      v12 = type;
      v15 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          v23 = "nw_protocol_masque_listener_get_input_frames";
          v24 = 2082;
          v25 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_55:
        if (!v10)
          return 0;
LABEL_56:
        free(v10);
        return 0;
      }
      if (!v15)
        goto LABEL_55;
      *(_DWORD *)buf = 136446210;
      v23 = "nw_protocol_masque_listener_get_input_frames";
      v13 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      v11 = __nwlog_obj();
      v12 = type;
      if (!os_log_type_enabled(v11, type))
        goto LABEL_55;
      *(_DWORD *)buf = 136446210;
      v23 = "nw_protocol_masque_listener_get_input_frames";
      v13 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    goto LABEL_54;
  }
  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v23 = "nw_protocol_masque_listener_get_input_frames";
    v10 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v20 = 0;
    if (!__nwlog_fault(v10, &type, &v20))
      goto LABEL_55;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v20)
      {
        v11 = __nwlog_obj();
        v12 = type;
        if (!os_log_type_enabled(v11, type))
          goto LABEL_55;
        *(_DWORD *)buf = 136446210;
        v23 = "nw_protocol_masque_listener_get_input_frames";
        v13 = "%{public}s called with null masque, backtrace limit exceeded";
        goto LABEL_54;
      }
      v16 = (char *)__nw_create_backtrace_string();
      v11 = __nwlog_obj();
      v12 = type;
      v17 = os_log_type_enabled(v11, type);
      if (!v16)
      {
        if (!v17)
          goto LABEL_55;
        *(_DWORD *)buf = 136446210;
        v23 = "nw_protocol_masque_listener_get_input_frames";
        v13 = "%{public}s called with null masque, no backtrace";
        goto LABEL_54;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        v23 = "nw_protocol_masque_listener_get_input_frames";
        v24 = 2082;
        v25 = v16;
        v18 = "%{public}s called with null masque, dumping backtrace:%{public}s";
LABEL_39:
        _os_log_impl(&dword_182FBE000, v11, v12, v18, buf, 0x16u);
      }
LABEL_40:
      free(v16);
      if (!v10)
        return 0;
      goto LABEL_56;
    }
    v11 = __nwlog_obj();
    v12 = type;
    if (!os_log_type_enabled(v11, type))
      goto LABEL_55;
    *(_DWORD *)buf = 136446210;
    v23 = "nw_protocol_masque_listener_get_input_frames";
    v13 = "%{public}s called with null masque";
LABEL_54:
    _os_log_impl(&dword_182FBE000, v11, v12, v13, buf, 0xCu);
    goto LABEL_55;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v23 = "nw_protocol_masque_listener_get_input_frames";
    v10 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v20 = 0;
    if (!__nwlog_fault(v10, &type, &v20))
      goto LABEL_55;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v11 = __nwlog_obj();
      v12 = type;
      if (!os_log_type_enabled(v11, type))
        goto LABEL_55;
      *(_DWORD *)buf = 136446210;
      v23 = "nw_protocol_masque_listener_get_input_frames";
      v13 = "%{public}s called with null input_protocol";
      goto LABEL_54;
    }
    if (!v20)
    {
      v11 = __nwlog_obj();
      v12 = type;
      if (!os_log_type_enabled(v11, type))
        goto LABEL_55;
      *(_DWORD *)buf = 136446210;
      v23 = "nw_protocol_masque_listener_get_input_frames";
      v13 = "%{public}s called with null input_protocol, backtrace limit exceeded";
      goto LABEL_54;
    }
    v16 = (char *)__nw_create_backtrace_string();
    v11 = __nwlog_obj();
    v12 = type;
    v19 = os_log_type_enabled(v11, type);
    if (!v16)
    {
      if (!v19)
        goto LABEL_55;
      *(_DWORD *)buf = 136446210;
      v23 = "nw_protocol_masque_listener_get_input_frames";
      v13 = "%{public}s called with null input_protocol, no backtrace";
      goto LABEL_54;
    }
    if (v19)
    {
      *(_DWORD *)buf = 136446466;
      v23 = "nw_protocol_masque_listener_get_input_frames";
      v24 = 2082;
      v25 = v16;
      v18 = "%{public}s called with null input_protocol, dumping backtrace:%{public}s";
      goto LABEL_39;
    }
    goto LABEL_40;
  }
  output_handler_context = a2->output_handler_context;
  if (!output_handler_context)
  {
    if ((handle[529] & 1) == 0)
    {
      if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
        dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
      v9 = gprivacy_proxyLogObj;
      if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        v23 = handle + 531;
        v24 = 2080;
        v25 = " ";
        _os_log_impl(&dword_182FBE000, v9, OS_LOG_TYPE_ERROR, "%{public}s%sNo valid node found", buf, 0x16u);
      }
    }
    return 0;
  }
  if (output_handler_context[4])
    return nw_frame_array_fill_from_pending_array(output_handler_context + 4, (uint64_t)a6, a4, a5);
  else
    return nw_protocol_masque_listener_read_input((uint64_t)handle, (uint64_t)output_handler_context, (uint64_t)a6, a3, a4, a5);
}

void nw_protocol_masque_input_available(nw_protocol *a1, nw_protocol *a2)
{
  nw_protocol *handle;
  nw_protocol *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  nw_protocol *default_input_handler;
  nw_protocol_callbacks *callbacks;
  void (*input_available)(void);
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  nw_protocol *v20;
  nw_protocol_callbacks *v21;
  void (*v22)(void);
  char *v23;
  NSObject *v24;
  os_log_type_t v25;
  const char *v26;
  nw_protocol *v27;
  const char *v28;
  const char *name;
  char *v30;
  NSObject *v31;
  os_log_type_t v32;
  nw_protocol *v33;
  const char *v34;
  const char *v35;
  const char *v36;
  char *backtrace_string;
  _BOOL4 v38;
  char *v39;
  _BOOL4 v40;
  char *v41;
  _BOOL4 v42;
  nw_protocol *v43;
  const char *v44;
  const char *v45;
  nw_protocol *v46;
  const char *v47;
  const char *v48;
  char *v49;
  NSObject *v50;
  os_log_type_t v51;
  nw_protocol *v52;
  const char *v53;
  const char *v54;
  const char *v55;
  nw_protocol *v56;
  const char *v57;
  const char *v58;
  nw_protocol *v59;
  const char *v60;
  const char *v61;
  char *v62;
  _BOOL4 v63;
  nw_protocol *v64;
  const char *v65;
  const char *v66;
  nw_protocol *v67;
  const char *v68;
  const char *v69;
  nw_protocol *v70;
  const char *v71;
  const char *v72;
  char v73;
  os_log_type_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t (*v77)(uint64_t *);
  void *v78;
  _BYTE *v79;
  nw_protocol *v80;
  int v81;
  BOOL v82;
  uint64_t v83;
  uint64_t *v84;
  os_log_type_t type[4];
  const char *v86;
  __int16 v87;
  const char *v88;
  __int16 v89;
  char *v90;
  _BYTE buf[24];
  char *v92;
  uint64_t v93;

  v93 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_masque_input_available";
    v23 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v83) = 0;
    if (!__nwlog_fault(v23, type, &v83))
      goto LABEL_95;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      v24 = __nwlog_obj();
      v25 = type[0];
      if (!os_log_type_enabled(v24, type[0]))
        goto LABEL_95;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_masque_input_available";
      v26 = "%{public}s called with null protocol";
      goto LABEL_94;
    }
    if (!(_BYTE)v83)
    {
      v24 = __nwlog_obj();
      v25 = type[0];
      if (!os_log_type_enabled(v24, type[0]))
        goto LABEL_95;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_masque_input_available";
      v26 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_94;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v24 = __nwlog_obj();
    v25 = type[0];
    v38 = os_log_type_enabled(v24, type[0]);
    if (!backtrace_string)
    {
      if (!v38)
        goto LABEL_95;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_masque_input_available";
      v26 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_94;
    }
    if (v38)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_protocol_masque_input_available";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = backtrace_string;
      _os_log_impl(&dword_182FBE000, v24, v25, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(backtrace_string);
LABEL_95:
    if (!v23)
      return;
    goto LABEL_96;
  }
  handle = (nw_protocol *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_masque_input_available";
    v23 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v83) = 0;
    if (!__nwlog_fault(v23, type, &v83))
      goto LABEL_95;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      v24 = __nwlog_obj();
      v25 = type[0];
      if (!os_log_type_enabled(v24, type[0]))
        goto LABEL_95;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_masque_input_available";
      v26 = "%{public}s called with null masque";
      goto LABEL_94;
    }
    if (!(_BYTE)v83)
    {
      v24 = __nwlog_obj();
      v25 = type[0];
      if (!os_log_type_enabled(v24, type[0]))
        goto LABEL_95;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_masque_input_available";
      v26 = "%{public}s called with null masque, backtrace limit exceeded";
      goto LABEL_94;
    }
    v39 = (char *)__nw_create_backtrace_string();
    v24 = __nwlog_obj();
    v25 = type[0];
    v40 = os_log_type_enabled(v24, type[0]);
    if (v39)
    {
      if (v40)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_protocol_masque_input_available";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v39;
        _os_log_impl(&dword_182FBE000, v24, v25, "%{public}s called with null masque, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v39);
      if (!v23)
        return;
LABEL_96:
      free(v23);
      return;
    }
    if (v40)
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_masque_input_available";
      v26 = "%{public}s called with null masque, no backtrace";
LABEL_94:
      _os_log_impl(&dword_182FBE000, v24, v25, v26, buf, 0xCu);
      goto LABEL_95;
    }
    goto LABEL_95;
  }
  v4 = handle + 1;
  v5 = 32;
  if (&handle[1] == a1)
  {
    v5 = 96;
    v6 = 512;
  }
  else
  {
    v6 = 508;
  }
  v7 = *(_DWORD *)&handle->flow_id[v6];
  if (v7 == 4)
  {
    if ((handle[8].flow_id[15] & 0x10) != 0)
    {
      nw_protocol_masque_listener_read_input((uint64_t)a1->handle, 0, 0, 1, 0xFFFFFFFFLL, 0xFFFFFFFFLL);
      return;
    }
    default_input_handler = handle->default_input_handler;
    if (default_input_handler)
    {
      callbacks = default_input_handler->callbacks;
      if (callbacks)
      {
        input_available = (void (*)(void))callbacks->input_available;
        if (input_available)
        {
          input_available();
          return;
        }
      }
    }
    __nwlog_obj();
    v27 = handle->default_input_handler;
    v28 = "invalid";
    if (v27)
    {
      name = v27->identifier->name;
      if (name)
        v28 = name;
    }
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "nw_protocol_masque_input_available";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v28;
    v30 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v83) = 0;
    if (!__nwlog_fault(v30, type, &v83))
      goto LABEL_103;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      v31 = __nwlog_obj();
      v32 = type[0];
      if (!os_log_type_enabled(v31, type[0]))
        goto LABEL_103;
      v33 = handle->default_input_handler;
      v34 = "invalid";
      if (v33)
      {
        v35 = v33->identifier->name;
        if (v35)
          v34 = v35;
      }
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_protocol_masque_input_available";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v34;
      v36 = "%{public}s protocol %{public}s has invalid input_available callback";
    }
    else if ((_BYTE)v83)
    {
      v41 = (char *)__nw_create_backtrace_string();
      v31 = __nwlog_obj();
      v32 = type[0];
      v42 = os_log_type_enabled(v31, type[0]);
      if (v41)
      {
        if (v42)
        {
          v43 = handle->default_input_handler;
          v44 = "invalid";
          if (v43)
          {
            v45 = v43->identifier->name;
            if (v45)
              v44 = v45;
          }
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)&buf[4] = "nw_protocol_masque_input_available";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v44;
          *(_WORD *)&buf[22] = 2082;
          v92 = v41;
          _os_log_impl(&dword_182FBE000, v31, v32, "%{public}s protocol %{public}s has invalid input_available callback, dumping backtrace:%{public}s", buf, 0x20u);
        }
        free(v41);
        goto LABEL_103;
      }
      if (!v42)
      {
LABEL_103:
        if (v30)
          free(v30);
        return;
      }
      v59 = handle->default_input_handler;
      v60 = "invalid";
      if (v59)
      {
        v61 = v59->identifier->name;
        if (v61)
          v60 = v61;
      }
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_protocol_masque_input_available";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v60;
      v36 = "%{public}s protocol %{public}s has invalid input_available callback, no backtrace";
    }
    else
    {
      v31 = __nwlog_obj();
      v32 = type[0];
      if (!os_log_type_enabled(v31, type[0]))
        goto LABEL_103;
      v56 = handle->default_input_handler;
      v57 = "invalid";
      if (v56)
      {
        v58 = v56->identifier->name;
        if (v58)
          v57 = v58;
      }
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_protocol_masque_input_available";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v57;
      v36 = "%{public}s protocol %{public}s has invalid input_available callback, backtrace limit exceeded";
    }
    _os_log_impl(&dword_182FBE000, v31, v32, v36, buf, 0x16u);
    goto LABEL_103;
  }
  if ((v7 & 0xFFFFFFFE) != 2)
    return;
  v11 = *(_QWORD *)&handle->flow_id[v5];
  v12 = v4 == a1;
  v13 = MEMORY[0x1E0C809B0];
  if (v4 != a1)
  {
    while (1)
    {
      v83 = 0;
      v84 = &v83;
      if (!(*(unsigned int (**)(uint64_t, nw_protocol *, _QWORD, _QWORD, uint64_t, uint64_t *))(*(_QWORD *)(v11 + 24) + 80))(v11, a1, 0, 0, 1, &v83))return;
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0x2000000000;
      LOBYTE(v92) = 0;
      v75 = v13;
      v76 = 0x40000000;
      v77 = (uint64_t (*)(uint64_t *))___ZL34nw_protocol_masque_input_availableP11nw_protocolS0__block_invoke;
      v78 = &unk_1E149E9F0;
      v79 = buf;
      v80 = handle;
      v82 = v12;
      v81 = v7;
      v14 = v83;
      do
      {
        if (!v14)
          break;
        v15 = *(_QWORD *)(v14 + 32);
        v16 = v77(&v75);
        v14 = v15;
      }
      while ((v16 & 1) != 0);
      v7 = *(_DWORD *)&handle->flow_id[v6];
      if (v7 == 4)
        break;
      _Block_object_dispose(buf, 8);
      if ((v7 & 0xFFFFFFFE) != 2)
        return;
    }
    v20 = handle->default_input_handler;
    if (v20)
    {
      v21 = v20->callbacks;
      if (v21)
      {
        v22 = (void (*)(void))v21->input_available;
        if (v22)
        {
          v22();
LABEL_32:
          _Block_object_dispose(buf, 8);
          return;
        }
      }
    }
    __nwlog_obj();
    v46 = handle->default_input_handler;
    v47 = "invalid";
    if (v46)
    {
      v48 = v46->identifier->name;
      if (v48)
        v47 = v48;
    }
    *(_DWORD *)type = 136446466;
    v86 = "nw_protocol_masque_input_available";
    v87 = 2082;
    v88 = v47;
    v49 = (char *)_os_log_send_and_compose_impl();
    v74 = OS_LOG_TYPE_ERROR;
    v73 = 0;
    if (__nwlog_fault(v49, &v74, &v73))
    {
      if (v74 == OS_LOG_TYPE_FAULT)
      {
        v50 = __nwlog_obj();
        v51 = v74;
        if (!os_log_type_enabled(v50, v74))
          goto LABEL_124;
        v52 = handle->default_input_handler;
        v53 = "invalid";
        if (v52)
        {
          v54 = v52->identifier->name;
          if (v54)
            v53 = v54;
        }
        *(_DWORD *)type = 136446466;
        v86 = "nw_protocol_masque_input_available";
        v87 = 2082;
        v88 = v53;
        v55 = "%{public}s protocol %{public}s has invalid input_available callback";
        goto LABEL_123;
      }
      if (!v73)
      {
        v50 = __nwlog_obj();
        v51 = v74;
        if (!os_log_type_enabled(v50, v74))
          goto LABEL_124;
        v67 = handle->default_input_handler;
        v68 = "invalid";
        if (v67)
        {
          v69 = v67->identifier->name;
          if (v69)
            v68 = v69;
        }
        *(_DWORD *)type = 136446466;
        v86 = "nw_protocol_masque_input_available";
        v87 = 2082;
        v88 = v68;
        v55 = "%{public}s protocol %{public}s has invalid input_available callback, backtrace limit exceeded";
        goto LABEL_123;
      }
      v62 = (char *)__nw_create_backtrace_string();
      v50 = __nwlog_obj();
      v51 = v74;
      v63 = os_log_type_enabled(v50, v74);
      if (v62)
      {
        if (v63)
        {
          v64 = handle->default_input_handler;
          v65 = "invalid";
          if (v64)
          {
            v66 = v64->identifier->name;
            if (v66)
              v65 = v66;
          }
          *(_DWORD *)type = 136446722;
          v86 = "nw_protocol_masque_input_available";
          v87 = 2082;
          v88 = v65;
          v89 = 2082;
          v90 = v62;
          _os_log_impl(&dword_182FBE000, v50, v51, "%{public}s protocol %{public}s has invalid input_available callback, dumping backtrace:%{public}s", (uint8_t *)type, 0x20u);
        }
        free(v62);
        goto LABEL_124;
      }
      if (v63)
      {
        v70 = handle->default_input_handler;
        v71 = "invalid";
        if (v70)
        {
          v72 = v70->identifier->name;
          if (v72)
            v71 = v72;
        }
        *(_DWORD *)type = 136446466;
        v86 = "nw_protocol_masque_input_available";
        v87 = 2082;
        v88 = v71;
        v55 = "%{public}s protocol %{public}s has invalid input_available callback, no backtrace";
LABEL_123:
        _os_log_impl(&dword_182FBE000, v50, v51, v55, (uint8_t *)type, 0x16u);
      }
    }
LABEL_124:
    if (v49)
      free(v49);
    goto LABEL_32;
  }
  do
  {
    v83 = 0;
    v84 = &v83;
    if (!(*(unsigned int (**)(uint64_t, nw_protocol *, _QWORD, _QWORD, uint64_t, uint64_t *))(*(_QWORD *)(v11 + 24) + 80))(v11, a1, 0, 0, 1, &v83))break;
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x2000000000;
    LOBYTE(v92) = 0;
    v75 = v13;
    v76 = 0x40000000;
    v77 = (uint64_t (*)(uint64_t *))___ZL34nw_protocol_masque_input_availableP11nw_protocolS0__block_invoke;
    v78 = &unk_1E149E9F0;
    v79 = buf;
    v80 = handle;
    v82 = v12;
    v81 = v7;
    v17 = v83;
    do
    {
      if (!v17)
        break;
      v18 = *(_QWORD *)(v17 + 32);
      v19 = v77(&v75);
      v17 = v18;
    }
    while ((v19 & 1) != 0);
    v7 = *(_DWORD *)&handle->flow_id[v6];
    _Block_object_dispose(buf, 8);
  }
  while ((v7 & 0xFFFFFFFE) == 2);
}

void nw_protocol_masque_input_finished(nw_protocol *a1, nw_protocol *a2)
{
  _BYTE *handle;
  NSObject *v4;
  nw_protocol *default_input_handler;
  nw_protocol_callbacks *callbacks;
  void (*input_finished)(void);
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  const char *v11;
  NSObject *v12;
  nw_protocol *v13;
  const char *v14;
  nw_protocol_identifier *identifier;
  NSObject *v16;
  os_log_type_t v17;
  nw_protocol *v18;
  const char *v19;
  nw_protocol_identifier *v20;
  char *backtrace_string;
  _BOOL4 v22;
  const char *v23;
  _BOOL4 v24;
  char *v25;
  _BOOL4 v26;
  nw_protocol *v27;
  const char *v28;
  nw_protocol_identifier *v29;
  NSObject *v30;
  os_log_type_t v31;
  uint32_t v32;
  nw_protocol *v33;
  const char *v34;
  nw_protocol_identifier *v35;
  nw_protocol *v36;
  const char *v37;
  nw_protocol_identifier *v38;
  char v39;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v42;
  __int16 v43;
  char *v44;
  __int16 v45;
  const char *v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v42 = "nw_protocol_masque_input_finished";
    v8 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v39 = 0;
    if (!__nwlog_fault(v8, &type, &v39))
      goto LABEL_80;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v9 = __nwlog_obj();
      v10 = type;
      if (!os_log_type_enabled(v9, type))
        goto LABEL_80;
      *(_DWORD *)buf = 136446210;
      v42 = "nw_protocol_masque_input_finished";
      v11 = "%{public}s called with null protocol";
LABEL_67:
      v30 = v9;
      v31 = v10;
      v32 = 12;
LABEL_79:
      _os_log_impl(&dword_182FBE000, v30, v31, v11, buf, v32);
      goto LABEL_80;
    }
    if (!v39)
    {
      v9 = __nwlog_obj();
      v10 = type;
      if (!os_log_type_enabled(v9, type))
        goto LABEL_80;
      *(_DWORD *)buf = 136446210;
      v42 = "nw_protocol_masque_input_finished";
      v11 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_67;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v9 = __nwlog_obj();
    v10 = type;
    v22 = os_log_type_enabled(v9, type);
    if (!backtrace_string)
    {
      if (!v22)
        goto LABEL_80;
      *(_DWORD *)buf = 136446210;
      v42 = "nw_protocol_masque_input_finished";
      v11 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_67;
    }
    if (v22)
    {
      *(_DWORD *)buf = 136446466;
      v42 = "nw_protocol_masque_input_finished";
      v43 = 2082;
      v44 = backtrace_string;
      v23 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_48:
      _os_log_impl(&dword_182FBE000, v9, v10, v23, buf, 0x16u);
    }
LABEL_49:
    free(backtrace_string);
    if (!v8)
      return;
LABEL_81:
    free(v8);
    return;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v42 = "nw_protocol_masque_input_finished";
    v8 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v39 = 0;
    if (!__nwlog_fault(v8, &type, &v39))
      goto LABEL_80;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v9 = __nwlog_obj();
      v10 = type;
      if (!os_log_type_enabled(v9, type))
        goto LABEL_80;
      *(_DWORD *)buf = 136446210;
      v42 = "nw_protocol_masque_input_finished";
      v11 = "%{public}s called with null masque";
      goto LABEL_67;
    }
    if (!v39)
    {
      v9 = __nwlog_obj();
      v10 = type;
      if (!os_log_type_enabled(v9, type))
        goto LABEL_80;
      *(_DWORD *)buf = 136446210;
      v42 = "nw_protocol_masque_input_finished";
      v11 = "%{public}s called with null masque, backtrace limit exceeded";
      goto LABEL_67;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v9 = __nwlog_obj();
    v10 = type;
    v24 = os_log_type_enabled(v9, type);
    if (!backtrace_string)
    {
      if (!v24)
        goto LABEL_80;
      *(_DWORD *)buf = 136446210;
      v42 = "nw_protocol_masque_input_finished";
      v11 = "%{public}s called with null masque, no backtrace";
      goto LABEL_67;
    }
    if (v24)
    {
      *(_DWORD *)buf = 136446466;
      v42 = "nw_protocol_masque_input_finished";
      v43 = 2082;
      v44 = backtrace_string;
      v23 = "%{public}s called with null masque, dumping backtrace:%{public}s";
      goto LABEL_48;
    }
    goto LABEL_49;
  }
  if ((handle[529] & 1) == 0 && gLogDatapath)
  {
    if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
      dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
    v12 = gprivacy_proxyLogObj;
    if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446722;
      v42 = "nw_protocol_masque_input_finished";
      v43 = 2082;
      v44 = handle + 531;
      v45 = 2080;
      v46 = " ";
      _os_log_impl(&dword_182FBE000, v12, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%scalled", buf, 0x20u);
    }
  }
  if (*((_DWORD *)handle + 127) != 2 && !*((_DWORD *)handle + 129))
  {
    default_input_handler = a1->default_input_handler;
    if (default_input_handler)
    {
      callbacks = default_input_handler->callbacks;
      if (callbacks)
      {
        input_finished = (void (*)(void))callbacks->input_finished;
        if (input_finished)
        {
          input_finished();
          return;
        }
      }
    }
    __nwlog_obj();
    v13 = a1->default_input_handler;
    v14 = "invalid";
    if (v13)
    {
      identifier = v13->identifier;
      if (identifier)
        v14 = (const char *)identifier;
    }
    *(_DWORD *)buf = 136446466;
    v42 = "nw_protocol_masque_input_finished";
    v43 = 2082;
    v44 = (char *)v14;
    v8 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v39 = 0;
    if (__nwlog_fault(v8, &type, &v39))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v16 = __nwlog_obj();
        v17 = type;
        if (!os_log_type_enabled(v16, type))
          goto LABEL_80;
        v18 = a1->default_input_handler;
        v19 = "invalid";
        if (v18)
        {
          v20 = v18->identifier;
          if (v20)
            v19 = (const char *)v20;
        }
        *(_DWORD *)buf = 136446466;
        v42 = "nw_protocol_masque_input_finished";
        v43 = 2082;
        v44 = (char *)v19;
        v11 = "%{public}s protocol %{public}s has invalid input_finished callback";
LABEL_78:
        v30 = v16;
        v31 = v17;
        v32 = 22;
        goto LABEL_79;
      }
      if (!v39)
      {
        v16 = __nwlog_obj();
        v17 = type;
        if (!os_log_type_enabled(v16, type))
          goto LABEL_80;
        v33 = a1->default_input_handler;
        v34 = "invalid";
        if (v33)
        {
          v35 = v33->identifier;
          if (v35)
            v34 = (const char *)v35;
        }
        *(_DWORD *)buf = 136446466;
        v42 = "nw_protocol_masque_input_finished";
        v43 = 2082;
        v44 = (char *)v34;
        v11 = "%{public}s protocol %{public}s has invalid input_finished callback, backtrace limit exceeded";
        goto LABEL_78;
      }
      v25 = (char *)__nw_create_backtrace_string();
      v16 = __nwlog_obj();
      v17 = type;
      v26 = os_log_type_enabled(v16, type);
      if (!v25)
      {
        if (!v26)
          goto LABEL_80;
        v36 = a1->default_input_handler;
        v37 = "invalid";
        if (v36)
        {
          v38 = v36->identifier;
          if (v38)
            v37 = (const char *)v38;
        }
        *(_DWORD *)buf = 136446466;
        v42 = "nw_protocol_masque_input_finished";
        v43 = 2082;
        v44 = (char *)v37;
        v11 = "%{public}s protocol %{public}s has invalid input_finished callback, no backtrace";
        goto LABEL_78;
      }
      if (v26)
      {
        v27 = a1->default_input_handler;
        v28 = "invalid";
        if (v27)
        {
          v29 = v27->identifier;
          if (v29)
            v28 = (const char *)v29;
        }
        *(_DWORD *)buf = 136446722;
        v42 = "nw_protocol_masque_input_finished";
        v43 = 2082;
        v44 = (char *)v28;
        v45 = 2082;
        v46 = v25;
        _os_log_impl(&dword_182FBE000, v16, v17, "%{public}s protocol %{public}s has invalid input_finished callback, dumping backtrace:%{public}s", buf, 0x20u);
      }
      free(v25);
    }
LABEL_80:
    if (!v8)
      return;
    goto LABEL_81;
  }
  if ((handle[529] & 1) == 0 && gLogDatapath)
  {
    if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
      dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
    v4 = gprivacy_proxyLogObj;
    if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446722;
      v42 = "nw_protocol_masque_input_finished";
      v43 = 2082;
      v44 = handle + 531;
      v45 = 2080;
      v46 = " ";
      _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%signoring input_finished, receiving connect", buf, 0x20u);
    }
  }
}

nw_protocol *nw_protocol_masque_get_remote_endpoint(nw_protocol *a1)
{
  void *handle;
  void *v3;
  unsigned __int8 *v4;
  int v5;
  id v6;
  void *v7;
  void *v8;
  nw_protocol *result;
  nw_protocol_callbacks *callbacks;
  uint64_t (*get_remote_endpoint)(void);
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  const char *v15;
  char *backtrace_string;
  _BOOL4 v17;
  char *v18;
  _BOOL4 v19;
  char v20;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v23;
  __int16 v24;
  char *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v23 = "nw_protocol_masque_get_remote_endpoint";
    v12 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v20 = 0;
    if (!__nwlog_fault(v12, &type, &v20))
      goto LABEL_48;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v13 = __nwlog_obj();
      v14 = type;
      if (!os_log_type_enabled(v13, type))
        goto LABEL_48;
      *(_DWORD *)buf = 136446210;
      v23 = "nw_protocol_masque_get_remote_endpoint";
      v15 = "%{public}s called with null protocol";
    }
    else
    {
      if (!v20)
      {
        v13 = __nwlog_obj();
        v14 = type;
        if (!os_log_type_enabled(v13, type))
          goto LABEL_48;
        *(_DWORD *)buf = 136446210;
        v23 = "nw_protocol_masque_get_remote_endpoint";
        v15 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_47;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v13 = __nwlog_obj();
      v14 = type;
      v17 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          v23 = "nw_protocol_masque_get_remote_endpoint";
          v24 = 2082;
          v25 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        if (!v12)
          return 0;
        goto LABEL_49;
      }
      if (!v17)
        goto LABEL_48;
      *(_DWORD *)buf = 136446210;
      v23 = "nw_protocol_masque_get_remote_endpoint";
      v15 = "%{public}s called with null protocol, no backtrace";
    }
LABEL_47:
    _os_log_impl(&dword_182FBE000, v13, v14, v15, buf, 0xCu);
    goto LABEL_48;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v23 = "nw_protocol_masque_get_remote_endpoint";
    v12 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v20 = 0;
    if (!__nwlog_fault(v12, &type, &v20))
      goto LABEL_48;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v13 = __nwlog_obj();
      v14 = type;
      if (!os_log_type_enabled(v13, type))
        goto LABEL_48;
      *(_DWORD *)buf = 136446210;
      v23 = "nw_protocol_masque_get_remote_endpoint";
      v15 = "%{public}s called with null masque";
      goto LABEL_47;
    }
    if (!v20)
    {
      v13 = __nwlog_obj();
      v14 = type;
      if (!os_log_type_enabled(v13, type))
        goto LABEL_48;
      *(_DWORD *)buf = 136446210;
      v23 = "nw_protocol_masque_get_remote_endpoint";
      v15 = "%{public}s called with null masque, backtrace limit exceeded";
      goto LABEL_47;
    }
    v18 = (char *)__nw_create_backtrace_string();
    v13 = __nwlog_obj();
    v14 = type;
    v19 = os_log_type_enabled(v13, type);
    if (!v18)
    {
      if (!v19)
        goto LABEL_48;
      *(_DWORD *)buf = 136446210;
      v23 = "nw_protocol_masque_get_remote_endpoint";
      v15 = "%{public}s called with null masque, no backtrace";
      goto LABEL_47;
    }
    if (v19)
    {
      *(_DWORD *)buf = 136446466;
      v23 = "nw_protocol_masque_get_remote_endpoint";
      v24 = 2082;
      v25 = v18;
      _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s called with null masque, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v18);
LABEL_48:
    if (!v12)
      return 0;
LABEL_49:
    free(v12);
    return 0;
  }
  v3 = (void *)*((_QWORD *)handle + 43);
  if (v3)
  {
    v4 = v3;
    if (*((_QWORD *)v4 + 3))
    {
      v5 = v4[152];

      if (v5)
      {
        v6 = nw_protocol_options_copy_proxy_endpoint_for_stack(*((void **)handle + 43));
        if (v6)
        {
          v7 = v6;
          v8 = (void *)*((_QWORD *)handle + 38);
          if (v8 != v7)
          {
            if (v8)
            {
              os_release(v8);
              *((_QWORD *)handle + 38) = 0;
            }
            *((_QWORD *)handle + 38) = os_retain(v7);
          }
          os_release(v7);
        }
      }
      result = (nw_protocol *)*((_QWORD *)handle + 38);
      if (result)
        return result;
    }
    else
    {

      result = (nw_protocol *)*((_QWORD *)handle + 38);
      if (result)
        return result;
    }
  }
  result = a1->default_input_handler;
  if (result)
  {
    callbacks = result->callbacks;
    if (callbacks)
    {
      get_remote_endpoint = (uint64_t (*)(void))callbacks->get_remote_endpoint;
      if (get_remote_endpoint)
        return (nw_protocol *)get_remote_endpoint();
    }
    return 0;
  }
  return result;
}

uint64_t nw_protocol_masque_get_parameters(nw_protocol *a1)
{
  char *handle;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(_QWORD);
  uint64_t result;
  uint64_t v6;
  void *v7;
  void *v8;
  id v9;
  _BOOL8 v10;
  uint64_t v11;
  void *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  void *v15;
  void *v16;
  _BOOL4 v17;
  uint64_t v18;
  BOOL v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  void *v22;
  void *v23;
  _BOOL4 v24;
  BOOL v25;
  char *v26;
  NSObject *v27;
  os_log_type_t v28;
  const char *v29;
  char *backtrace_string;
  _BOOL4 v31;
  const char *v32;
  _BOOL4 v33;
  _BOOL4 v34;
  NWConcrete_nw_protocol_options *v35;
  NWConcrete_nw_protocol_options *v36;
  NSObject *v37;
  void *v38;
  nw_protocol_stack_t v39;
  NWConcrete_nw_protocol_options *v40;
  uint64_t v41;
  nw_protocol_stack_t v42;
  char v43;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v46;
  __int16 v47;
  char *v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v46 = "nw_protocol_masque_get_parameters";
    v26 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v43 = 0;
    if (!__nwlog_fault(v26, &type, &v43))
      goto LABEL_77;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v27 = __nwlog_obj();
      v28 = type;
      if (!os_log_type_enabled(v27, type))
        goto LABEL_77;
      *(_DWORD *)buf = 136446210;
      v46 = "nw_protocol_masque_get_parameters";
      v29 = "%{public}s called with null protocol";
      goto LABEL_76;
    }
    if (!v43)
    {
      v27 = __nwlog_obj();
      v28 = type;
      if (!os_log_type_enabled(v27, type))
        goto LABEL_77;
      *(_DWORD *)buf = 136446210;
      v46 = "nw_protocol_masque_get_parameters";
      v29 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_76;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v27 = __nwlog_obj();
    v28 = type;
    v31 = os_log_type_enabled(v27, type);
    if (!backtrace_string)
    {
      if (!v31)
        goto LABEL_77;
      *(_DWORD *)buf = 136446210;
      v46 = "nw_protocol_masque_get_parameters";
      v29 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_76;
    }
    if (v31)
    {
      *(_DWORD *)buf = 136446466;
      v46 = "nw_protocol_masque_get_parameters";
      v47 = 2082;
      v48 = backtrace_string;
      v32 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_62:
      _os_log_impl(&dword_182FBE000, v27, v28, v32, buf, 0x16u);
    }
LABEL_63:
    free(backtrace_string);
    goto LABEL_77;
  }
  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v46 = "nw_protocol_masque_get_parameters";
    v26 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v43 = 0;
    if (!__nwlog_fault(v26, &type, &v43))
      goto LABEL_77;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v27 = __nwlog_obj();
      v28 = type;
      if (!os_log_type_enabled(v27, type))
        goto LABEL_77;
      *(_DWORD *)buf = 136446210;
      v46 = "nw_protocol_masque_get_parameters";
      v29 = "%{public}s called with null masque";
      goto LABEL_76;
    }
    if (!v43)
    {
      v27 = __nwlog_obj();
      v28 = type;
      if (!os_log_type_enabled(v27, type))
        goto LABEL_77;
      *(_DWORD *)buf = 136446210;
      v46 = "nw_protocol_masque_get_parameters";
      v29 = "%{public}s called with null masque, backtrace limit exceeded";
      goto LABEL_76;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v27 = __nwlog_obj();
    v28 = type;
    v33 = os_log_type_enabled(v27, type);
    if (!backtrace_string)
    {
      if (!v33)
        goto LABEL_77;
      *(_DWORD *)buf = 136446210;
      v46 = "nw_protocol_masque_get_parameters";
      v29 = "%{public}s called with null masque, no backtrace";
      goto LABEL_76;
    }
    if (v33)
    {
      *(_DWORD *)buf = 136446466;
      v46 = "nw_protocol_masque_get_parameters";
      v47 = 2082;
      v48 = backtrace_string;
      v32 = "%{public}s called with null masque, dumping backtrace:%{public}s";
      goto LABEL_62;
    }
    goto LABEL_63;
  }
  if (handle + 128 == (char *)a1)
  {
    if (*((_QWORD *)handle + 53))
      return *((_QWORD *)handle + 53);
    if (!*((_QWORD *)handle + 48) && !*((_QWORD *)handle + 56))
      return 0;
    v8 = (void *)*((_QWORD *)handle + 40);
    if (v8)
    {
      v9 = v8;
      v10 = -[NWConcrete_nw_parameters initWithParameters:stripConnected:shallowCopy:]((id *)[NWConcrete_nw_parameters alloc], v9, 0, 1);

      *((_QWORD *)handle + 53) = v10;
      v11 = *((_QWORD *)handle + 54);
      if (!v11)
        return *((_QWORD *)handle + 53);
      if (nw_protocol_demux_copy_definition::onceToken != -1)
        dispatch_once(&nw_protocol_demux_copy_definition::onceToken, &__block_literal_global_5_25927);
      if (nw_protocol_demux_copy_definition::definition)
        v12 = os_retain((void *)nw_protocol_demux_copy_definition::definition);
      else
        v12 = 0;
      v13 = nw_parameters_copy_protocol_options_for_definition(*((void **)handle + 53), v12);
      if (!v13)
      {
LABEL_99:
        if (v12)
          os_release(v12);
        return *((_QWORD *)handle + 53);
      }
      v14 = v13;
      if (nw_protocol_demux_copy_definition::onceToken == -1)
      {
        v15 = (void *)nw_protocol_demux_copy_definition::definition;
        if (nw_protocol_demux_copy_definition::definition)
          goto LABEL_32;
      }
      else
      {
        dispatch_once(&nw_protocol_demux_copy_definition::onceToken, &__block_literal_global_5_25927);
        v15 = (void *)nw_protocol_demux_copy_definition::definition;
        if (nw_protocol_demux_copy_definition::definition)
        {
LABEL_32:
          v16 = os_retain(v15);
          v17 = nw_protocol_options_matches_definition(v14, v16);
          v19 = v17;
          if (v16)
          {
            os_release(v16);
            if (!v19)
              goto LABEL_98;
          }
          else if (!v17)
          {
            goto LABEL_98;
          }
          goto LABEL_86;
        }
      }
      if (!nw_protocol_options_matches_definition(v14, 0))
      {
LABEL_98:
        os_release(v14);
        goto LABEL_99;
      }
LABEL_86:
      if (*((_QWORD *)handle + 48))
      {
        v35 = nw_protocol_options_copy(v14);
        v36 = v35;
        if (*((_QWORD *)handle + 50))
          v37 = *((_QWORD *)handle + 50);
        else
          v37 = *((_QWORD *)handle + 48);
        nw_demux_options_add_pattern_data(v35, 1, v37);
      }
      else
      {
        v38 = (void *)*((_QWORD *)handle + 56);
        if (v38)
          v36 = nw_protocol_options_copy(v38);
        else
          v36 = 0;
      }
      nw_parameters_set_protocol_instance(v36, v18, v11);
      nw_protocol_options_inherit_log_id(v14, v36);
      v39 = nw_parameters_copy_default_protocol_stack(*((nw_parameters_t *)handle + 53));
      nw_protocol_stack_replace_protocol(v39, v12, v36);
      if (v39)
        os_release(v39);
      if (v36)
        os_release(v36);
      goto LABEL_98;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v46 = "nw_protocol_masque_get_parameters";
    v26 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v43 = 0;
    if (__nwlog_fault(v26, &type, &v43))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v27 = __nwlog_obj();
        v28 = type;
        if (!os_log_type_enabled(v27, type))
          goto LABEL_77;
        *(_DWORD *)buf = 136446210;
        v46 = "nw_protocol_masque_get_parameters";
        v29 = "%{public}s called with null masque->parameters";
        goto LABEL_76;
      }
      if (v43)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        v27 = __nwlog_obj();
        v28 = type;
        v34 = os_log_type_enabled(v27, type);
        if (backtrace_string)
        {
          if (!v34)
            goto LABEL_63;
          *(_DWORD *)buf = 136446466;
          v46 = "nw_protocol_masque_get_parameters";
          v47 = 2082;
          v48 = backtrace_string;
          v32 = "%{public}s called with null masque->parameters, dumping backtrace:%{public}s";
          goto LABEL_62;
        }
        if (v34)
        {
          *(_DWORD *)buf = 136446210;
          v46 = "nw_protocol_masque_get_parameters";
          v29 = "%{public}s called with null masque->parameters, no backtrace";
          goto LABEL_76;
        }
      }
      else
      {
        v27 = __nwlog_obj();
        v28 = type;
        if (os_log_type_enabled(v27, type))
        {
          *(_DWORD *)buf = 136446210;
          v46 = "nw_protocol_masque_get_parameters";
          v29 = "%{public}s called with null masque->parameters, backtrace limit exceeded";
LABEL_76:
          _os_log_impl(&dword_182FBE000, v27, v28, v29, buf, 0xCu);
        }
      }
    }
LABEL_77:
    if (v26)
      free(v26);
    return 0;
  }
  if (handle + 192 == (char *)a1)
  {
    if ((handle[529] & 2) != 0)
      return *((_QWORD *)handle + 40);
    v6 = *((_QWORD *)handle + 54);
    if (!v6)
      return *((_QWORD *)handle + 40);
    if (nw_protocol_demux_copy_definition::onceToken != -1)
      dispatch_once(&nw_protocol_demux_copy_definition::onceToken, &__block_literal_global_5_25927);
    if (nw_protocol_demux_copy_definition::definition)
      v7 = os_retain((void *)nw_protocol_demux_copy_definition::definition);
    else
      v7 = 0;
    v20 = nw_parameters_copy_protocol_options_for_definition(*((void **)handle + 40), v7);
    if (!v20)
    {
LABEL_108:
      if (v7)
        os_release(v7);
      return *((_QWORD *)handle + 40);
    }
    v21 = v20;
    if (nw_protocol_demux_copy_definition::onceToken == -1)
    {
      v22 = (void *)nw_protocol_demux_copy_definition::definition;
      if (nw_protocol_demux_copy_definition::definition)
        goto LABEL_39;
    }
    else
    {
      dispatch_once(&nw_protocol_demux_copy_definition::onceToken, &__block_literal_global_5_25927);
      v22 = (void *)nw_protocol_demux_copy_definition::definition;
      if (nw_protocol_demux_copy_definition::definition)
      {
LABEL_39:
        v23 = os_retain(v22);
        v24 = nw_protocol_options_matches_definition(v21, v23);
        v25 = v24;
        if (v23)
        {
          os_release(v23);
          if (!v25)
            goto LABEL_107;
        }
        else if (!v24)
        {
          goto LABEL_107;
        }
        goto LABEL_103;
      }
    }
    if (!nw_protocol_options_matches_definition(v21, 0))
    {
LABEL_107:
      os_release(v21);
      goto LABEL_108;
    }
LABEL_103:
    v40 = nw_protocol_options_copy(v21);
    nw_parameters_set_protocol_instance(v40, v41, v6);
    nw_protocol_options_inherit_log_id(v21, v40);
    v42 = nw_parameters_copy_default_protocol_stack(*((nw_parameters_t *)handle + 40));
    nw_protocol_stack_replace_protocol(v42, v7, v40);
    *(_DWORD *)(handle + 527) |= 0x20000u;
    if (v42)
      os_release(v42);
    if (v40)
      os_release(v40);
    goto LABEL_107;
  }
  v2 = *((_QWORD *)handle + 6);
  if (handle + 64 != (char *)a1 || (result = *((_QWORD *)handle + 52)) == 0)
  {
    if (v2)
    {
      v3 = *(_QWORD *)(v2 + 24);
      if (v3)
      {
        v4 = *(uint64_t (**)(_QWORD))(v3 + 112);
        if (v4)
          return v4(*((_QWORD *)handle + 6));
      }
    }
    return 0;
  }
  return result;
}

void sub_18360B688(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t nw_protocol_masque_get_output_local_endpoint(nw_protocol *a1)
{
  _QWORD *handle;
  uint64_t v2;
  char *v4;
  NSObject *v5;
  os_log_type_t v6;
  const char *v7;
  char *backtrace_string;
  _BOOL4 v9;
  char *v10;
  _BOOL4 v11;
  char v12;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v15 = "nw_protocol_masque_get_output_local_endpoint";
    v4 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v12 = 0;
    if (!__nwlog_fault(v4, &type, &v12))
      goto LABEL_34;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v5 = __nwlog_obj();
      v6 = type;
      if (!os_log_type_enabled(v5, type))
        goto LABEL_34;
      *(_DWORD *)buf = 136446210;
      v15 = "nw_protocol_masque_get_output_local_endpoint";
      v7 = "%{public}s called with null protocol";
    }
    else
    {
      if (!v12)
      {
        v5 = __nwlog_obj();
        v6 = type;
        if (!os_log_type_enabled(v5, type))
          goto LABEL_34;
        *(_DWORD *)buf = 136446210;
        v15 = "nw_protocol_masque_get_output_local_endpoint";
        v7 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_33;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v5 = __nwlog_obj();
      v6 = type;
      v9 = os_log_type_enabled(v5, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          v15 = "nw_protocol_masque_get_output_local_endpoint";
          v16 = 2082;
          v17 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v5, v6, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        if (!v4)
          return 0;
        goto LABEL_35;
      }
      if (!v9)
        goto LABEL_34;
      *(_DWORD *)buf = 136446210;
      v15 = "nw_protocol_masque_get_output_local_endpoint";
      v7 = "%{public}s called with null protocol, no backtrace";
    }
LABEL_33:
    _os_log_impl(&dword_182FBE000, v5, v6, v7, buf, 0xCu);
    goto LABEL_34;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v15 = "nw_protocol_masque_get_output_local_endpoint";
    v4 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v12 = 0;
    if (!__nwlog_fault(v4, &type, &v12))
      goto LABEL_34;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v5 = __nwlog_obj();
      v6 = type;
      if (!os_log_type_enabled(v5, type))
        goto LABEL_34;
      *(_DWORD *)buf = 136446210;
      v15 = "nw_protocol_masque_get_output_local_endpoint";
      v7 = "%{public}s called with null masque";
      goto LABEL_33;
    }
    if (!v12)
    {
      v5 = __nwlog_obj();
      v6 = type;
      if (!os_log_type_enabled(v5, type))
        goto LABEL_34;
      *(_DWORD *)buf = 136446210;
      v15 = "nw_protocol_masque_get_output_local_endpoint";
      v7 = "%{public}s called with null masque, backtrace limit exceeded";
      goto LABEL_33;
    }
    v10 = (char *)__nw_create_backtrace_string();
    v5 = __nwlog_obj();
    v6 = type;
    v11 = os_log_type_enabled(v5, type);
    if (!v10)
    {
      if (!v11)
        goto LABEL_34;
      *(_DWORD *)buf = 136446210;
      v15 = "nw_protocol_masque_get_output_local_endpoint";
      v7 = "%{public}s called with null masque, no backtrace";
      goto LABEL_33;
    }
    if (v11)
    {
      *(_DWORD *)buf = 136446466;
      v15 = "nw_protocol_masque_get_output_local_endpoint";
      v16 = 2082;
      v17 = v10;
      _os_log_impl(&dword_182FBE000, v5, v6, "%{public}s called with null masque, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v10);
LABEL_34:
    if (!v4)
      return 0;
LABEL_35:
    free(v4);
    return 0;
  }
  v2 = handle[45];
  if (v2)
    return v2;
  return nw_protocol_get_output_local_endpoint((uint64_t)a1->output_handler);
}

uint64_t nw_protocol_masque_copy_info(uint64_t a1, int a2)
{
  unint64_t *v2;
  _BOOL8 v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t (*v12)(void);
  NWConcrete_nw_protocol_establishment_report *v14;
  char *v15;
  NSObject *v16;
  os_log_type_t v17;
  const char *v18;
  char *backtrace_string;
  _BOOL4 v20;
  const char *v21;
  _BOOL4 v22;
  char v23;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  char *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v26 = "nw_protocol_masque_copy_info";
    v15 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (!__nwlog_fault(v15, &type, &v23))
      goto LABEL_56;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v23)
      {
        v16 = __nwlog_obj();
        v17 = type;
        if (!os_log_type_enabled(v16, type))
          goto LABEL_56;
        *(_DWORD *)buf = 136446210;
        v26 = "nw_protocol_masque_copy_info";
        v18 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_55;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v16 = __nwlog_obj();
      v17 = type;
      v20 = os_log_type_enabled(v16, type);
      if (!backtrace_string)
      {
        if (!v20)
          goto LABEL_56;
        *(_DWORD *)buf = 136446210;
        v26 = "nw_protocol_masque_copy_info";
        v18 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_55;
      }
      if (v20)
      {
        *(_DWORD *)buf = 136446466;
        v26 = "nw_protocol_masque_copy_info";
        v27 = 2082;
        v28 = backtrace_string;
        v21 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_45:
        _os_log_impl(&dword_182FBE000, v16, v17, v21, buf, 0x16u);
      }
LABEL_46:
      free(backtrace_string);
      goto LABEL_56;
    }
    v16 = __nwlog_obj();
    v17 = type;
    if (!os_log_type_enabled(v16, type))
      goto LABEL_56;
    *(_DWORD *)buf = 136446210;
    v26 = "nw_protocol_masque_copy_info";
    v18 = "%{public}s called with null protocol";
LABEL_55:
    _os_log_impl(&dword_182FBE000, v16, v17, v18, buf, 0xCu);
LABEL_56:
    if (v15)
      free(v15);
    return 0;
  }
  v2 = *(unint64_t **)(a1 + 40);
  if (!v2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v26 = "nw_protocol_masque_copy_info";
    v15 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (!__nwlog_fault(v15, &type, &v23))
      goto LABEL_56;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v16 = __nwlog_obj();
      v17 = type;
      if (!os_log_type_enabled(v16, type))
        goto LABEL_56;
      *(_DWORD *)buf = 136446210;
      v26 = "nw_protocol_masque_copy_info";
      v18 = "%{public}s called with null masque";
      goto LABEL_55;
    }
    if (!v23)
    {
      v16 = __nwlog_obj();
      v17 = type;
      if (!os_log_type_enabled(v16, type))
        goto LABEL_56;
      *(_DWORD *)buf = 136446210;
      v26 = "nw_protocol_masque_copy_info";
      v18 = "%{public}s called with null masque, backtrace limit exceeded";
      goto LABEL_55;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v16 = __nwlog_obj();
    v17 = type;
    v22 = os_log_type_enabled(v16, type);
    if (backtrace_string)
    {
      if (v22)
      {
        *(_DWORD *)buf = 136446466;
        v26 = "nw_protocol_masque_copy_info";
        v27 = 2082;
        v28 = backtrace_string;
        v21 = "%{public}s called with null masque, dumping backtrace:%{public}s";
        goto LABEL_45;
      }
      goto LABEL_46;
    }
    if (!v22)
      goto LABEL_56;
    *(_DWORD *)buf = 136446210;
    v26 = "nw_protocol_masque_copy_info";
    v18 = "%{public}s called with null masque, no backtrace";
    goto LABEL_55;
  }
  if (a2 == 254)
  {
    if (v2[37])
    {
      v7 = *(_QWORD *)(a1 + 32);
      if (!v7 || (v8 = *(uint64_t (**)(void))(*(_QWORD *)(v7 + 24) + 224)) == 0 || (v4 = v8()) == 0)
        v4 = nw_array_create();
      if (nw_protocol_masque_get_definition(void)::onceToken != -1)
        dispatch_once(&nw_protocol_masque_get_definition(void)::onceToken, &__block_literal_global_27122);
      if (nw_protocol_masque_get_definition(void)::definition
        && (v9 = os_retain((void *)nw_protocol_masque_get_definition(void)::definition)) != 0)
      {
        v10 = os_retain(v9);
      }
      else
      {
        v10 = 0;
      }
      v14 = nw_protocol_establishment_report_create(v10, v2[37], v2[37]);
      nw_array_append(v4, v14);
      if (v14)
        os_release(v14);
      if (v10)
        os_release(v10);
      return v4;
    }
    goto LABEL_21;
  }
  if (a2 != 255)
  {
LABEL_21:
    v11 = *(_QWORD *)(a1 + 32);
    if (v11)
    {
      v12 = *(uint64_t (**)(void))(*(_QWORD *)(v11 + 24) + 224);
      if (v12)
        return v12();
    }
    return 0;
  }
  if (v2[58] || v2[59])
  {
    v3 = nw_array_create();
    v4 = v3;
    v5 = (void *)v2[59];
    if (v5)
      nw_array_append(v3, v5);
    v6 = (void *)v2[58];
    if (v6)
      nw_array_append(v4, v6);
    return v4;
  }
  return 0;
}

void nw_protocol_masque_notify(nw_protocol *a1, uint64_t a2, unsigned int a3)
{
  uint64_t handle;
  NSObject *v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  uint64_t v14;
  void (*v15)(void);
  uint64_t secondary_certificate_count;
  int v17;
  NSObject *v19;
  nw_protocol *v20;
  nw_protocol_callbacks *v21;
  void (*notify)(void);
  nw_protocol *output_handler;
  nw_protocol_callbacks *v24;
  nw_protocol *default_input_handler;
  nw_protocol_callbacks *callbacks;
  char *v27;
  NSObject *v28;
  os_log_type_t v29;
  const char *v30;
  char *backtrace_string;
  _BOOL4 v32;
  char *v33;
  _BOOL4 v34;
  const char *v35;
  _BOOL4 v36;
  NSObject *v37;
  char v38;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v41;
  __int16 v42;
  const char *v43;
  __int16 v44;
  const char *v45;
  __int16 v46;
  const char *v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v41 = "nw_protocol_masque_notify";
    v27 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v38 = 0;
    if (!__nwlog_fault(v27, &type, &v38))
      goto LABEL_101;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v28 = __nwlog_obj();
      v29 = type;
      if (!os_log_type_enabled(v28, type))
        goto LABEL_101;
      *(_DWORD *)buf = 136446210;
      v41 = "nw_protocol_masque_notify";
      v30 = "%{public}s called with null protocol";
    }
    else if (v38)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v28 = __nwlog_obj();
      v29 = type;
      v32 = os_log_type_enabled(v28, type);
      if (backtrace_string)
      {
        if (v32)
        {
          *(_DWORD *)buf = 136446466;
          v41 = "nw_protocol_masque_notify";
          v42 = 2082;
          v43 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v28, v29, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_101:
        if (!v27)
          return;
        goto LABEL_102;
      }
      if (!v32)
        goto LABEL_101;
      *(_DWORD *)buf = 136446210;
      v41 = "nw_protocol_masque_notify";
      v30 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      v28 = __nwlog_obj();
      v29 = type;
      if (!os_log_type_enabled(v28, type))
        goto LABEL_101;
      *(_DWORD *)buf = 136446210;
      v41 = "nw_protocol_masque_notify";
      v30 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    goto LABEL_100;
  }
  handle = (uint64_t)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v41 = "nw_protocol_masque_notify";
    v27 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v38 = 0;
    if (!__nwlog_fault(v27, &type, &v38))
      goto LABEL_101;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v38)
      {
        v28 = __nwlog_obj();
        v29 = type;
        if (!os_log_type_enabled(v28, type))
          goto LABEL_101;
        *(_DWORD *)buf = 136446210;
        v41 = "nw_protocol_masque_notify";
        v30 = "%{public}s called with null masque, backtrace limit exceeded";
        goto LABEL_100;
      }
      v33 = (char *)__nw_create_backtrace_string();
      v28 = __nwlog_obj();
      v29 = type;
      v34 = os_log_type_enabled(v28, type);
      if (!v33)
      {
        if (!v34)
          goto LABEL_101;
        *(_DWORD *)buf = 136446210;
        v41 = "nw_protocol_masque_notify";
        v30 = "%{public}s called with null masque, no backtrace";
        goto LABEL_100;
      }
      if (v34)
      {
        *(_DWORD *)buf = 136446466;
        v41 = "nw_protocol_masque_notify";
        v42 = 2082;
        v43 = v33;
        v35 = "%{public}s called with null masque, dumping backtrace:%{public}s";
LABEL_85:
        _os_log_impl(&dword_182FBE000, v28, v29, v35, buf, 0x16u);
      }
LABEL_86:
      free(v33);
      if (!v27)
        return;
LABEL_102:
      free(v27);
      return;
    }
    v28 = __nwlog_obj();
    v29 = type;
    if (!os_log_type_enabled(v28, type))
      goto LABEL_101;
    *(_DWORD *)buf = 136446210;
    v41 = "nw_protocol_masque_notify";
    v30 = "%{public}s called with null masque";
LABEL_100:
    _os_log_impl(&dword_182FBE000, v28, v29, v30, buf, 0xCu);
    goto LABEL_101;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v41 = "nw_protocol_masque_notify";
    v27 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v38 = 0;
    if (!__nwlog_fault(v27, &type, &v38))
      goto LABEL_101;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v28 = __nwlog_obj();
      v29 = type;
      if (!os_log_type_enabled(v28, type))
        goto LABEL_101;
      *(_DWORD *)buf = 136446210;
      v41 = "nw_protocol_masque_notify";
      v30 = "%{public}s called with null other_protocol";
      goto LABEL_100;
    }
    if (!v38)
    {
      v28 = __nwlog_obj();
      v29 = type;
      if (!os_log_type_enabled(v28, type))
        goto LABEL_101;
      *(_DWORD *)buf = 136446210;
      v41 = "nw_protocol_masque_notify";
      v30 = "%{public}s called with null other_protocol, backtrace limit exceeded";
      goto LABEL_100;
    }
    v33 = (char *)__nw_create_backtrace_string();
    v28 = __nwlog_obj();
    v29 = type;
    v36 = os_log_type_enabled(v28, type);
    if (!v33)
    {
      if (!v36)
        goto LABEL_101;
      *(_DWORD *)buf = 136446210;
      v41 = "nw_protocol_masque_notify";
      v30 = "%{public}s called with null other_protocol, no backtrace";
      goto LABEL_100;
    }
    if (v36)
    {
      *(_DWORD *)buf = 136446466;
      v41 = "nw_protocol_masque_notify";
      v42 = 2082;
      v43 = v33;
      v35 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
      goto LABEL_85;
    }
    goto LABEL_86;
  }
  if ((*(_BYTE *)(handle + 529) & 1) == 0)
  {
    if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
      dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
    v6 = gprivacy_proxyLogObj;
    if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
    {
      if (a3 > 0x19)
        v7 = "unknown";
      else
        v7 = off_1E14A22C8[a3];
      *(_DWORD *)buf = 136446978;
      v41 = "nw_protocol_masque_notify";
      v42 = 2082;
      v43 = (const char *)(handle + 531);
      v44 = 2080;
      v45 = " ";
      v46 = 2082;
      v47 = v7;
      _os_log_impl(&dword_182FBE000, v6, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sreceived notification %{public}s", buf, 0x2Au);
    }
  }
  switch(a3)
  {
    case 5u:
      secondary_certificate_count = nw_http_connection_metadata_get_secondary_certificate_count(*(void **)(handle + 456));
      v17 = *(_DWORD *)(handle + 516);
      if (v17 != 1 || secondary_certificate_count == 0)
      {
        if (!v17
          && secondary_certificate_count
          && *(_DWORD *)(handle + 508) == 2
          && (*(_BYTE *)(handle + 529) & 1) == 0)
        {
          if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
            dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
          v19 = gprivacy_proxyLogObj;
          if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 136446466;
            v41 = (const char *)(handle + 531);
            v42 = 2080;
            v43 = " ";
            _os_log_impl(&dword_182FBE000, v19, OS_LOG_TYPE_INFO, "%{public}s%sHave secondary certificates, not utilizing without rejection from proxy", buf, 0x16u);
          }
        }
      }
      else
      {
        if ((*(_BYTE *)(handle + 529) & 1) == 0 && gLogDatapath)
        {
          if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
            dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
          v37 = gprivacy_proxyLogObj;
          if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136446722;
            v41 = "nw_protocol_masque_notify";
            v42 = 2082;
            v43 = (const char *)(handle + 531);
            v44 = 2080;
            v45 = " ";
            _os_log_impl(&dword_182FBE000, v37, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sMASQUE waiting for secondary certs, checking to reverse proxy", buf, 0x20u);
          }
        }
        if ((nw_masque_setup_reverse_proxy(handle) & 1) != 0)
          return;
      }
      default_input_handler = a1->default_input_handler;
      if (default_input_handler)
      {
        callbacks = default_input_handler->callbacks;
        if (callbacks)
        {
          notify = (void (*)(void))callbacks->notify;
          if (notify)
            goto LABEL_58;
        }
      }
      return;
    case 7u:
    case 0x15u:
      return;
    case 0xDu:
      nw_masque_report_error_to_proxy_agent(handle, 1302);
      output_handler = a1->output_handler;
      if (output_handler)
      {
        v24 = output_handler->callbacks;
        if (v24)
        {
          notify = (void (*)(void))v24->notify;
          if (notify)
            goto LABEL_58;
        }
      }
      return;
    case 0x12u:
    case 0x18u:
      v8 = *(_QWORD *)(handle + 432);
      if (!v8 || !*(_QWORD *)(handle + 384) || !*(_QWORD *)(handle + 392))
        goto LABEL_44;
      nw_protocol_masque_reset_demux_protocol(a1);
      if (v8 != *(_QWORD *)(handle + 432))
      {
        v9 = *(void **)(handle + 424);
        if (v9)
        {
          os_release(v9);
          *(_QWORD *)(handle + 424) = 0;
        }
        *(_DWORD *)(handle + 527) &= ~0x20000u;
        v10 = *(_QWORD *)(handle + 160);
        if (v10)
        {
          v11 = *(_QWORD *)(v10 + 24);
          if (v11)
          {
            v12 = *(void (**)(void))(v11 + 8);
            if (v12)
              v12();
          }
        }
        v13 = *(_QWORD *)(handle + 224);
        if (v13)
        {
          v14 = *(_QWORD *)(v13 + 24);
          if (v14)
          {
            v15 = *(void (**)(void))(v14 + 8);
            if (v15)
              v15();
          }
        }
        nw_masque_setup_demux(handle, 1);
        nw_masque_setup_demux(handle, 0);
      }
      return;
    default:
      if (a3 - 15 > 1)
      {
LABEL_44:
        v20 = a1->default_input_handler;
        if (!v20)
          return;
      }
      else
      {
        v20 = a1->output_handler;
        if (!v20)
          return;
      }
      v21 = v20->callbacks;
      if (v21)
      {
        notify = (void (*)(void))v21->notify;
        if (notify)
LABEL_58:
          notify();
      }
      return;
  }
}

BOOL nw_protocol_masque_add_listen_handler(nw_protocol *a1, nw_listen_protocol *a2, char a3)
{
  char *handle;
  int v7;
  NSObject *v8;
  _BOOL8 result;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  const char *v13;
  NSObject *v14;
  char *backtrace_string;
  _BOOL4 v16;
  const char *v17;
  _BOOL4 v18;
  NSObject *v19;
  char v20;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  const char *v27;
  __int16 v28;
  nw_listen_protocol *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v23 = "nw_protocol_masque_add_listen_handler";
    v10 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v20 = 0;
    if (!__nwlog_fault(v10, &type, &v20))
      goto LABEL_52;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v20)
      {
        v11 = __nwlog_obj();
        v12 = type;
        if (!os_log_type_enabled(v11, type))
          goto LABEL_52;
        *(_DWORD *)buf = 136446210;
        v23 = "nw_protocol_masque_add_listen_handler";
        v13 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_51;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v11 = __nwlog_obj();
      v12 = type;
      v16 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (!v16)
          goto LABEL_52;
        *(_DWORD *)buf = 136446210;
        v23 = "nw_protocol_masque_add_listen_handler";
        v13 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_51;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446466;
        v23 = "nw_protocol_masque_add_listen_handler";
        v24 = 2082;
        v25 = backtrace_string;
        v17 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_37:
        _os_log_impl(&dword_182FBE000, v11, v12, v17, buf, 0x16u);
      }
LABEL_38:
      free(backtrace_string);
      goto LABEL_52;
    }
    v11 = __nwlog_obj();
    v12 = type;
    if (!os_log_type_enabled(v11, type))
      goto LABEL_52;
    *(_DWORD *)buf = 136446210;
    v23 = "nw_protocol_masque_add_listen_handler";
    v13 = "%{public}s called with null protocol";
LABEL_51:
    _os_log_impl(&dword_182FBE000, v11, v12, v13, buf, 0xCu);
LABEL_52:
    if (v10)
      free(v10);
    return 0;
  }
  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v23 = "nw_protocol_masque_add_listen_handler";
    v10 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v20 = 0;
    if (!__nwlog_fault(v10, &type, &v20))
      goto LABEL_52;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v11 = __nwlog_obj();
      v12 = type;
      if (!os_log_type_enabled(v11, type))
        goto LABEL_52;
      *(_DWORD *)buf = 136446210;
      v23 = "nw_protocol_masque_add_listen_handler";
      v13 = "%{public}s called with null masque";
      goto LABEL_51;
    }
    if (!v20)
    {
      v11 = __nwlog_obj();
      v12 = type;
      if (!os_log_type_enabled(v11, type))
        goto LABEL_52;
      *(_DWORD *)buf = 136446210;
      v23 = "nw_protocol_masque_add_listen_handler";
      v13 = "%{public}s called with null masque, backtrace limit exceeded";
      goto LABEL_51;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v11 = __nwlog_obj();
    v12 = type;
    v18 = os_log_type_enabled(v11, type);
    if (backtrace_string)
    {
      if (v18)
      {
        *(_DWORD *)buf = 136446466;
        v23 = "nw_protocol_masque_add_listen_handler";
        v24 = 2082;
        v25 = backtrace_string;
        v17 = "%{public}s called with null masque, dumping backtrace:%{public}s";
        goto LABEL_37;
      }
      goto LABEL_38;
    }
    if (!v18)
      goto LABEL_52;
    *(_DWORD *)buf = 136446210;
    v23 = "nw_protocol_masque_add_listen_handler";
    v13 = "%{public}s called with null masque, no backtrace";
    goto LABEL_51;
  }
  if ((handle[529] & 1) == 0 && gLogDatapath)
  {
    if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
      dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
    v14 = gprivacy_proxyLogObj;
    if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446978;
      v23 = "nw_protocol_masque_add_listen_handler";
      v24 = 2082;
      v25 = handle + 531;
      v26 = 2080;
      v27 = " ";
      v28 = 2048;
      v29 = a2;
      _os_log_impl(&dword_182FBE000, v14, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%scalled with listen_protocol %p", buf, 0x2Au);
    }
  }
  v7 = *(_DWORD *)(handle + 527);
  if (*((_QWORD *)handle + 55))
  {
    if ((v7 & 0x10000) == 0)
    {
      if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
        dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
      v8 = gprivacy_proxyLogObj;
      result = os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR);
      if (result)
      {
        *(_DWORD *)buf = 136446466;
        v23 = handle + 531;
        v24 = 2080;
        v25 = " ";
        _os_log_impl(&dword_182FBE000, v8, OS_LOG_TYPE_ERROR, "%{public}s%salready have a listen handler, ignoring add", buf, 0x16u);
        return 0;
      }
      return result;
    }
    return 0;
  }
  if ((v7 & 0x10000) == 0 && gLogDatapath)
  {
    if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
      dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
    v19 = gprivacy_proxyLogObj;
    if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446722;
      v23 = "nw_protocol_masque_add_listen_handler";
      v24 = 2082;
      v25 = handle + 531;
      v26 = 2080;
      v27 = " ";
      _os_log_impl(&dword_182FBE000, v19, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sadded protocol listen handler", buf, 0x20u);
    }
  }
  *((_QWORD *)handle + 55) = a2;
  a2->protocol_handler = a1;
  if ((a3 & 1) != 0)
    nw_protocol_remove_instance((uint64_t)a1);
  return 1;
}

uint64_t nw_protocol_masque_remove_listen_handler(nw_protocol *a1, nw_listen_protocol *a2)
{
  _BYTE *handle;
  uint64_t result;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  const char *v8;
  NSObject *v9;
  NSObject *v10;
  char *backtrace_string;
  _BOOL4 v12;
  const char *v13;
  _BOOL4 v14;
  char v15;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  char *v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  nw_listen_protocol *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    handle = a1->handle;
    if (handle)
    {
      if ((handle[529] & 1) == 0 && gLogDatapath)
      {
        if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
          dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
        v9 = gprivacy_proxyLogObj;
        if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136446978;
          v18 = "nw_protocol_masque_remove_listen_handler";
          v19 = 2082;
          v20 = handle + 531;
          v21 = 2080;
          v22 = " ";
          v23 = 2048;
          v24 = a2;
          _os_log_impl(&dword_182FBE000, v9, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%scalled with listen_protocol %p", buf, 0x2Au);
        }
      }
      if (*((nw_listen_protocol **)handle + 55) == a2)
      {
        *((_QWORD *)handle + 55) = 0;
        a2->protocol_handler = 0;
      }
      result = 1;
      if ((handle[529] & 1) == 0 && gLogDatapath)
      {
        if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
          dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
        v10 = gprivacy_proxyLogObj;
        if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136446722;
          v18 = "nw_protocol_masque_remove_listen_handler";
          v19 = 2082;
          v20 = handle + 531;
          v21 = 2080;
          v22 = " ";
          _os_log_impl(&dword_182FBE000, v10, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sremoved protocol listen handler", buf, 0x20u);
        }
        return 1;
      }
      return result;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v18 = "nw_protocol_masque_remove_listen_handler";
    v5 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v15 = 0;
    if (!__nwlog_fault(v5, &type, &v15))
      goto LABEL_46;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v6 = __nwlog_obj();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_protocol_masque_remove_listen_handler";
        v8 = "%{public}s called with null masque";
        goto LABEL_45;
      }
      goto LABEL_46;
    }
    if (!v15)
    {
      v6 = __nwlog_obj();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_protocol_masque_remove_listen_handler";
        v8 = "%{public}s called with null masque, backtrace limit exceeded";
        goto LABEL_45;
      }
      goto LABEL_46;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v6 = __nwlog_obj();
    v7 = type;
    v14 = os_log_type_enabled(v6, type);
    if (!backtrace_string)
    {
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_protocol_masque_remove_listen_handler";
        v8 = "%{public}s called with null masque, no backtrace";
        goto LABEL_45;
      }
      goto LABEL_46;
    }
    if (v14)
    {
      *(_DWORD *)buf = 136446466;
      v18 = "nw_protocol_masque_remove_listen_handler";
      v19 = 2082;
      v20 = backtrace_string;
      v13 = "%{public}s called with null masque, dumping backtrace:%{public}s";
      goto LABEL_35;
    }
    goto LABEL_36;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v18 = "nw_protocol_masque_remove_listen_handler";
  v5 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v15 = 0;
  if (!__nwlog_fault(v5, &type, &v15))
    goto LABEL_46;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v15)
    {
      v6 = __nwlog_obj();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_protocol_masque_remove_listen_handler";
        v8 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_45;
      }
      goto LABEL_46;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v6 = __nwlog_obj();
    v7 = type;
    v12 = os_log_type_enabled(v6, type);
    if (!backtrace_string)
    {
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_protocol_masque_remove_listen_handler";
        v8 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_45;
      }
      goto LABEL_46;
    }
    if (v12)
    {
      *(_DWORD *)buf = 136446466;
      v18 = "nw_protocol_masque_remove_listen_handler";
      v19 = 2082;
      v20 = backtrace_string;
      v13 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_35:
      _os_log_impl(&dword_182FBE000, v6, v7, v13, buf, 0x16u);
    }
LABEL_36:
    free(backtrace_string);
    goto LABEL_46;
  }
  v6 = __nwlog_obj();
  v7 = type;
  if (os_log_type_enabled(v6, type))
  {
    *(_DWORD *)buf = 136446210;
    v18 = "nw_protocol_masque_remove_listen_handler";
    v8 = "%{public}s called with null protocol";
LABEL_45:
    _os_log_impl(&dword_182FBE000, v6, v7, v8, buf, 0xCu);
  }
LABEL_46:
  if (v5)
    free(v5);
  return 0;
}

void nw_protocol_masque_reset_demux_protocol(nw_protocol *a1)
{
  char *handle;
  nw_protocol *output_handler;
  int v3;
  nw_protocol_identifier *identifier;
  const char *name;
  _BOOL4 v6;
  id v7;
  void *v8;
  void *v9;
  _BOOL4 v10;
  BOOL v11;
  NSObject *v12;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  const char *v16;
  char *backtrace_string;
  _BOOL4 v18;
  NSObject *v19;
  _QWORD v20[6];
  char v21;
  os_log_type_t type;
  _BYTE buf[24];
  const char *v24;
  _QWORD v25[4];

  v25[3] = *MEMORY[0x1E0C80C00];
  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_masque_reset_demux_protocol";
    v13 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v21 = 0;
    if (!__nwlog_fault(v13, &type, &v21))
      goto LABEL_48;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v14 = __nwlog_obj();
      v15 = type;
      if (!os_log_type_enabled(v14, type))
        goto LABEL_48;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_masque_reset_demux_protocol";
      v16 = "%{public}s called with null masque";
    }
    else if (v21)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v14 = __nwlog_obj();
      v15 = type;
      v18 = os_log_type_enabled(v14, type);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_protocol_masque_reset_demux_protocol";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v14, v15, "%{public}s called with null masque, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_48;
      }
      if (!v18)
      {
LABEL_48:
        if (v13)
          free(v13);
        return;
      }
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_masque_reset_demux_protocol";
      v16 = "%{public}s called with null masque, no backtrace";
    }
    else
    {
      v14 = __nwlog_obj();
      v15 = type;
      if (!os_log_type_enabled(v14, type))
        goto LABEL_48;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_masque_reset_demux_protocol";
      v16 = "%{public}s called with null masque, backtrace limit exceeded";
    }
    _os_log_impl(&dword_182FBE000, v14, v15, v16, buf, 0xCu);
    goto LABEL_48;
  }
  output_handler = a1->output_handler;
  if (!output_handler)
    return;
  v3 = 0;
  while (1)
  {
    identifier = output_handler->identifier;
    if (nw_protocol_demux_identifier::onceToken[0] != -1)
      dispatch_once(nw_protocol_demux_identifier::onceToken, &__block_literal_global_25737);
    if (nw_protocols_are_equal(identifier, &g_demux_protocol_identifier))
      break;
    name = output_handler->identifier->name;
    if (!strcmp(name, "quic"))
    {
      if ((v3 & 1) != 0)
        return;
      v3 = 1;
      output_handler = output_handler->output_handler;
      if (!output_handler)
        return;
    }
    else
    {
      v6 = strcmp(name, "quic-connection") == 0;
      if ((v6 & v3 & 1) != 0)
        return;
      v3 |= v6;
      output_handler = output_handler->output_handler;
      if (!output_handler)
        return;
    }
  }
  if ((v3 & 1) != 0)
  {
    *((_QWORD *)handle + 54) = output_handler;
    if ((handle[529] & 1) == 0 && gLogDatapath)
    {
      if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
        dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
      v19 = gprivacy_proxyLogObj;
      if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446978;
        *(_QWORD *)&buf[4] = "nw_protocol_masque_reset_demux_protocol";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = handle + 531;
        *(_WORD *)&buf[22] = 2080;
        v24 = " ";
        LOWORD(v25[0]) = 2048;
        *(_QWORD *)((char *)v25 + 2) = output_handler;
        _os_log_impl(&dword_182FBE000, v19, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sFound demux protocol %p", buf, 0x2Au);
      }
    }
    v7 = nw_parameters_copy_channel_demux_options(*((void **)handle + 40));
    if (v7)
    {
      v8 = v7;
      if (nw_protocol_demux_copy_definition::onceToken != -1)
        dispatch_once(&nw_protocol_demux_copy_definition::onceToken, &__block_literal_global_5_25927);
      if (nw_protocol_demux_copy_definition::definition)
      {
        v9 = os_retain((void *)nw_protocol_demux_copy_definition::definition);
        v10 = nw_protocol_options_matches_definition(v8, v9);
        v11 = v10;
        if (v9)
        {
          os_release(v9);
          if (!v11)
            return;
        }
        else if (!v10)
        {
          return;
        }
      }
      else if (!nw_protocol_options_matches_definition(v8, 0))
      {
        return;
      }
      v20[0] = MEMORY[0x1E0C809B0];
      v20[1] = 0x40000000;
      v20[2] = ___ZL39nw_protocol_masque_reset_demux_protocolP11nw_protocol_block_invoke;
      v20[3] = &__block_descriptor_tmp_63;
      v20[4] = handle;
      v20[5] = v8;
      *(_QWORD *)buf = MEMORY[0x1E0C809B0];
      *(_QWORD *)&buf[8] = 0x40000000;
      *(_QWORD *)&buf[16] = __nw_demux_options_enumerate_patterns_block_invoke;
      v24 = (const char *)&unk_1E149DF30;
      v25[0] = v20;
      nw_protocol_options_access_handle(v8, buf);
    }
  }
  else if ((handle[529] & 1) == 0 && gLogDatapath)
  {
    if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
      dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
    v12 = gprivacy_proxyLogObj;
    if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446978;
      *(_QWORD *)&buf[4] = "nw_protocol_masque_reset_demux_protocol";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = handle + 531;
      *(_WORD *)&buf[22] = 2080;
      v24 = " ";
      LOWORD(v25[0]) = 2048;
      *(_QWORD *)((char *)v25 + 2) = output_handler;
      _os_log_impl(&dword_182FBE000, v12, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sFound demux protocol %p, but no QUIC found. Ignoring.", buf, 0x2Au);
    }
  }
}

uint64_t nw_masque_setup_demux(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t (**v5)(void);
  uint64_t (*v6)(void);
  char v7;
  int v8;
  NSObject *v9;
  const char *v10;
  NSObject *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  const char *v15;
  char *backtrace_string;
  _BOOL4 v17;
  char v18;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v21;
  __int16 v22;
  const char *v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  const char *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v21 = "nw_masque_setup_demux";
    v12 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v18 = 0;
    if (!__nwlog_fault(v12, &type, &v18))
      goto LABEL_43;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v13 = __nwlog_obj();
      v14 = type;
      if (!os_log_type_enabled(v13, type))
        goto LABEL_43;
      *(_DWORD *)buf = 136446210;
      v21 = "nw_masque_setup_demux";
      v15 = "%{public}s called with null masque";
    }
    else if (v18)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v13 = __nwlog_obj();
      v14 = type;
      v17 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          v21 = "nw_masque_setup_demux";
          v22 = 2082;
          v23 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s called with null masque, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_43;
      }
      if (!v17)
      {
LABEL_43:
        if (v12)
          free(v12);
        return 0;
      }
      *(_DWORD *)buf = 136446210;
      v21 = "nw_masque_setup_demux";
      v15 = "%{public}s called with null masque, no backtrace";
    }
    else
    {
      v13 = __nwlog_obj();
      v14 = type;
      if (!os_log_type_enabled(v13, type))
        goto LABEL_43;
      *(_DWORD *)buf = 136446210;
      v21 = "nw_masque_setup_demux";
      v15 = "%{public}s called with null masque, backtrace limit exceeded";
    }
    _os_log_impl(&dword_182FBE000, v13, v14, v15, buf, 0xCu);
    goto LABEL_43;
  }
  if ((*(_BYTE *)(a1 + 530) & 2) != 0)
    return 1;
  result = *(_QWORD *)(a1 + 432);
  if (!result)
    return result;
  if (a2)
  {
    if (*(_QWORD *)(a1 + 384))
      goto LABEL_9;
  }
  else if (*(_QWORD *)(a1 + 392))
  {
    goto LABEL_9;
  }
  if (!*(_QWORD *)(a1 + 448))
    return 0;
LABEL_9:
  v5 = *(uint64_t (***)(void))(result + 24);
  if (!v5)
    return 0;
  v6 = *v5;
  if (!v6)
    return 0;
  v7 = v6();
  v8 = *(_DWORD *)(a1 + 527);
  if ((v7 & 1) == 0)
  {
    if ((v8 & 0x10000) == 0)
    {
      if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
        dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
      v11 = gprivacy_proxyLogObj;
      result = os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR);
      if (!(_DWORD)result)
        return result;
      *(_DWORD *)buf = 136446466;
      v21 = (const char *)(a1 + 531);
      v22 = 2080;
      v23 = " ";
      _os_log_impl(&dword_182FBE000, v11, OS_LOG_TYPE_ERROR, "%{public}s%sFailed to add demux protocol", buf, 0x16u);
    }
    return 0;
  }
  result = 1;
  if ((v8 & 0x10000) == 0 && gLogDatapath)
  {
    if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
      dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
    v9 = gprivacy_proxyLogObj;
    if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446978;
      v21 = "nw_masque_setup_demux";
      v22 = 2082;
      v23 = (const char *)(a1 + 531);
      v24 = 2080;
      v25 = " ";
      if (a2)
        v10 = "input";
      else
        v10 = "output";
      v26 = 2082;
      v27 = v10;
      _os_log_impl(&dword_182FBE000, v9, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sAdded %{public}s demux protocol", buf, 0x2Au);
    }
    return 1;
  }
  return result;
}

uint64_t nw_masque_setup_reverse_proxy(uint64_t a1)
{
  int v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _BOOL4 v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  void *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  char v15;
  void *v16;
  NSObject *v17;
  const char *v18;
  unsigned int port;
  _BOOL8 host_with_numeric_port;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  NSObject *v25;
  NSObject *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  NSObject *v32;
  os_log_type_t v33;
  uint32_t v34;
  NSObject *v35;
  NSObject *v36;
  uint64_t v37;
  const char *hostname;
  uint64_t v39;
  void *v40;
  NSObject *v42;
  NSObject *v43;
  _QWORD v44[5];
  _QWORD v45[7];
  uint8_t v46[4];
  uint64_t v47;
  __int16 v48;
  const char *v49;
  __int16 v50;
  uint64_t v51;
  _BYTE buf[24];
  const char *v53;
  __int16 v54;
  uint64_t v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  if (!nw_http_connection_metadata_get_secondary_certificate_count(*(void **)(a1 + 456)))
    return 0;
  v2 = *(_DWORD *)(a1 + 527);
  if ((v2 & 0x1000000) == 0)
  {
    if ((v2 & 0x10000) == 0)
    {
      if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
        dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
      v3 = gprivacy_proxyLogObj;
      if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = a1 + 531;
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = " ";
        _os_log_impl(&dword_182FBE000, v3, OS_LOG_TYPE_INFO, "%{public}s%sHave certificates, but no HTTP in the stack identified for forwarding", buf, 0x16u);
      }
    }
    return 0;
  }
  v5 = a1;
  while (1)
  {
    v6 = *(_QWORD **)(v5 + 16);
    if (nw_protocol_http_messaging_identifier::onceToken[0] != -1)
      dispatch_once(nw_protocol_http_messaging_identifier::onceToken, &__block_literal_global_75867);
    v7 = nw_protocols_are_equal(v6, nw_protocol_http_messaging_identifier::protocol_identifier);
    if (v7)
      break;
    v5 = *(_QWORD *)(v5 + 48);
    if (!v5)
      goto LABEL_17;
  }
  if ((*(_BYTE *)(a1 + 529) & 1) == 0 && gLogDatapath)
  {
    if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
      dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
    v42 = gprivacy_proxyLogObj;
    if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446978;
      *(_QWORD *)&buf[4] = "nw_masque_setup_reverse_proxy";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = a1 + 531;
      *(_WORD *)&buf[22] = 2080;
      v53 = " ";
      v54 = 2048;
      v55 = v5;
      _os_log_impl(&dword_182FBE000, v42, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sFound HTTP Messaging protocol %p", buf, 0x2Au);
    }
  }
LABEL_17:
  v8 = !v7;
  v9 = a1;
  do
  {
    v9 = *(_QWORD *)(v9 + 32);
    if (!v9)
    {
      v11 = 0;
      goto LABEL_27;
    }
    v10 = *(_QWORD **)(v9 + 16);
    if (nw_protocol_http3_identifier::onceToken[0] != -1)
      dispatch_once(nw_protocol_http3_identifier::onceToken, &__block_literal_global_10);
  }
  while (!nw_protocols_are_equal(v10, &nw_protocol_http3_identifier::http3_protocol_identifier));
  if ((*(_BYTE *)(a1 + 529) & 1) == 0 && gLogDatapath)
  {
    if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
      dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
    v43 = gprivacy_proxyLogObj;
    if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446978;
      *(_QWORD *)&buf[4] = "nw_masque_setup_reverse_proxy";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = a1 + 531;
      *(_WORD *)&buf[22] = 2080;
      v53 = " ";
      v54 = 2048;
      v55 = v9;
      _os_log_impl(&dword_182FBE000, v43, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sFound HTTP protocol %p", buf, 0x2Au);
    }
  }
  v11 = v9;
LABEL_27:
  v12 = *(void **)(a1 + 320);
  if (nw_protocol_copy_http_messaging_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_messaging_definition_onceToken, &__block_literal_global_57_72293);
  v13 = nw_parameters_copy_protocol_options_for_definition(v12, (id)nw_protocol_copy_http_messaging_definition_definition);
  v14 = v13;
  if (v9)
    v15 = v8;
  else
    v15 = 1;
  if ((v15 & 1) == 0 && v13)
  {
    v16 = *(void **)(a1 + 312);
    if (!v16)
    {
      if ((*(_BYTE *)(a1 + 529) & 1) == 0)
      {
        if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
          dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
        v36 = gprivacy_proxyLogObj;
        if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = a1 + 531;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = " ";
          _os_log_impl(&dword_182FBE000, v36, OS_LOG_TYPE_ERROR, "%{public}s%sNo target endpoint, not attempting to reverse proxy", buf, 0x16u);
        }
      }
      v4 = 0;
      goto LABEL_74;
    }
    v17 = v16;
    v18 = (const char *)-[NSObject hostname](v17, "hostname");

    port = nw_endpoint_get_port(*(nw_endpoint_t *)(a1 + 304));
    host_with_numeric_port = nw_endpoint_create_host_with_numeric_port(v18, port);
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x2000000000;
    LOBYTE(v53) = 0;
    v21 = *(void **)(a1 + 456);
    v22 = MEMORY[0x1E0C809B0];
    v45[0] = MEMORY[0x1E0C809B0];
    v45[1] = 0x40000000;
    v45[2] = ___ZL29nw_masque_setup_reverse_proxyP9nw_masque_block_invoke;
    v45[3] = &unk_1E149E6C0;
    v45[5] = a1;
    v45[6] = host_with_numeric_port;
    v45[4] = buf;
    nw_http_connection_metadata_enumerate_secondary_certificates(v21, v45);
    if (host_with_numeric_port)
      os_release((void *)host_with_numeric_port);
    v24 = *(_DWORD *)(a1 + 527);
    if (*(_BYTE *)(*(_QWORD *)&buf[8] + 24))
    {
      if ((v24 & 0x10000) == 0)
      {
        if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
          dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
        v25 = gprivacy_proxyLogObj;
        if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_INFO))
        {
          v26 = v17;
          v27 = -[NSObject hostname](v26, "hostname");

          *(_DWORD *)v46 = 136446722;
          v47 = a1 + 531;
          v48 = 2080;
          v49 = " ";
          v50 = 2080;
          v51 = v27;
          _os_log_impl(&dword_182FBE000, v25, OS_LOG_TYPE_INFO, "%{public}s%sFound secondary certificate for %s, attempting TLS termination and restart for reverse proxy", v46, 0x20u);
        }
      }
      v28 = *(_QWORD *)(a1 + 352);
      if (v28)
      {
        nw_queue_cancel_source(v28, v23);
        *(_QWORD *)(a1 + 352) = 0;
      }
      v29 = nw_protocol_copy_info(v11, 253);
      if (nw_http_messaging_options_override_version_specific_protocol(v14, v11, *(void **)(a1 + 456)) || v29)
      {
        v39 = *(_QWORD *)(a1 + 496);
        v40 = *(void **)(a1 + 328);
        v44[0] = v22;
        v44[1] = 0x40000000;
        v44[2] = ___ZL29nw_masque_setup_reverse_proxyP9nw_masque_block_invoke_61;
        v44[3] = &unk_1E149E6E8;
        v44[4] = v39;
        nw_queue_context_async(v40, v44);
        v4 = 1;
        goto LABEL_73;
      }
      if ((*(_BYTE *)(a1 + 529) & 1) != 0)
        goto LABEL_71;
      if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
        dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
      v30 = gprivacy_proxyLogObj;
      if (!os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
      {
LABEL_71:
        v4 = 0;
LABEL_73:
        _Block_object_dispose(buf, 8);
LABEL_74:
        os_release(v14);
        return v4;
      }
      *(_DWORD *)v46 = 136446466;
      v47 = a1 + 531;
      v48 = 2080;
      v49 = " ";
      v31 = "%{public}s%sFailed to override persistent stack HTTP with reverse-proxying HTTP";
      v32 = v30;
      v33 = OS_LOG_TYPE_ERROR;
      v34 = 22;
    }
    else
    {
      if ((v24 & 0x10000) != 0)
        goto LABEL_71;
      if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
        dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
      v37 = gprivacy_proxyLogObj;
      if (!os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_INFO))
        goto LABEL_71;
      hostname = nw_endpoint_get_hostname(v17);
      *(_DWORD *)v46 = 136446722;
      v47 = a1 + 531;
      v48 = 2080;
      v49 = " ";
      v50 = 2080;
      v51 = (uint64_t)hostname;
      v31 = "%{public}s%sNo matching secondary certificates found for %s, not reverse-proxying";
      v32 = v37;
      v33 = OS_LOG_TYPE_INFO;
      v34 = 32;
    }
    _os_log_impl(&dword_182FBE000, v32, v33, v31, v46, v34);
    goto LABEL_71;
  }
  if ((*(_BYTE *)(a1 + 529) & 1) == 0)
  {
    if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
      dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
    v35 = gprivacy_proxyLogObj;
    if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = a1 + 531;
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = " ";
      _os_log_impl(&dword_182FBE000, v35, OS_LOG_TYPE_ERROR, "%{public}s%sFailed to find HTTP protocol, proceeding without attempting to reverse proxy", buf, 0x16u);
    }
  }
  v4 = 0;
  if (v14)
    goto LABEL_74;
  return v4;
}

void sub_18360E5CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_masque_report_error_to_proxy_agent(uint64_t a1, int a2)
{
  void *v3;
  id *v5;
  id v6;
  char *v7;
  int is_null;
  int v9;
  NSObject *v10;
  NSObject *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  const char *v15;
  char *backtrace_string;
  _BOOL4 v17;
  char *v18;
  _BOOL4 v19;
  char v20;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;
  __int16 v29;
  unsigned __int8 *v30;
  os_log_type_t uu[24];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v22 = "nw_masque_report_error_to_proxy_agent";
    v12 = (char *)_os_log_send_and_compose_impl();
    uu[0] = OS_LOG_TYPE_ERROR;
    v20 = 0;
    if (!__nwlog_fault(v12, uu, &v20))
      goto LABEL_46;
    if (uu[0] == OS_LOG_TYPE_FAULT)
    {
      v13 = __nwlog_obj();
      v14 = uu[0];
      if (!os_log_type_enabled(v13, uu[0]))
        goto LABEL_46;
      *(_DWORD *)buf = 136446210;
      v22 = "nw_masque_report_error_to_proxy_agent";
      v15 = "%{public}s called with null masque";
    }
    else if (v20)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v13 = __nwlog_obj();
      v14 = uu[0];
      v17 = os_log_type_enabled(v13, uu[0]);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          v22 = "nw_masque_report_error_to_proxy_agent";
          v23 = 2082;
          v24 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s called with null masque, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_46:
        if (!v12)
          return;
LABEL_47:
        free(v12);
        return;
      }
      if (!v17)
        goto LABEL_46;
      *(_DWORD *)buf = 136446210;
      v22 = "nw_masque_report_error_to_proxy_agent";
      v15 = "%{public}s called with null masque, no backtrace";
    }
    else
    {
      v13 = __nwlog_obj();
      v14 = uu[0];
      if (!os_log_type_enabled(v13, uu[0]))
        goto LABEL_46;
      *(_DWORD *)buf = 136446210;
      v22 = "nw_masque_report_error_to_proxy_agent";
      v15 = "%{public}s called with null masque, backtrace limit exceeded";
    }
LABEL_45:
    _os_log_impl(&dword_182FBE000, v13, v14, v15, buf, 0xCu);
    goto LABEL_46;
  }
  v3 = *(void **)(a1 + 320);
  if (v3)
  {
    memset(uu, 0, 16);
    v5 = v3;
    v6 = v5[23];

    if (v6)
    {
      v7 = (char *)v6;
      *(_OWORD *)uu = *(_OWORD *)(v7 + 56);

      os_release(v7);
    }
    is_null = uuid_is_null((const unsigned __int8 *)uu);
    v9 = *(_DWORD *)(a1 + 527);
    if (is_null)
    {
      if ((v9 & 0x10000) == 0)
      {
        if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
          dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
        v10 = gprivacy_proxyLogObj;
        if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446722;
          v22 = (const char *)(a1 + 531);
          v23 = 2080;
          v24 = " ";
          v25 = 1024;
          v26 = a2;
          _os_log_impl(&dword_182FBE000, v10, OS_LOG_TYPE_ERROR, "%{public}s%sCannot report error %d, no proxy agent", buf, 0x1Cu);
        }
      }
    }
    else
    {
      if ((v9 & 0x10000) == 0)
      {
        if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
          dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
        v11 = gprivacy_proxyLogObj;
        if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136447234;
          v22 = (const char *)(a1 + 531);
          v23 = 2080;
          v24 = " ";
          v25 = 1024;
          v26 = a2;
          v27 = 1042;
          v28 = 16;
          v29 = 2098;
          v30 = (unsigned __int8 *)uu;
          _os_log_impl(&dword_182FBE000, v11, OS_LOG_TYPE_INFO, "%{public}s%sReporting error %d to proxy agent %{public, uuid_t}.16P", buf, 0x2Cu);
        }
      }
      nw_path_report_error_to_agent(*(void **)(a1 + 336), (const unsigned __int8 *)uu, a2);
    }
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v22 = "nw_masque_report_error_to_proxy_agent";
  v12 = (char *)_os_log_send_and_compose_impl();
  uu[0] = OS_LOG_TYPE_ERROR;
  v20 = 0;
  if (!__nwlog_fault(v12, uu, &v20))
    goto LABEL_46;
  if (uu[0] == OS_LOG_TYPE_FAULT)
  {
    v13 = __nwlog_obj();
    v14 = uu[0];
    if (!os_log_type_enabled(v13, uu[0]))
      goto LABEL_46;
    *(_DWORD *)buf = 136446210;
    v22 = "nw_masque_report_error_to_proxy_agent";
    v15 = "%{public}s called with null masque->parameters";
    goto LABEL_45;
  }
  if (!v20)
  {
    v13 = __nwlog_obj();
    v14 = uu[0];
    if (!os_log_type_enabled(v13, uu[0]))
      goto LABEL_46;
    *(_DWORD *)buf = 136446210;
    v22 = "nw_masque_report_error_to_proxy_agent";
    v15 = "%{public}s called with null masque->parameters, backtrace limit exceeded";
    goto LABEL_45;
  }
  v18 = (char *)__nw_create_backtrace_string();
  v13 = __nwlog_obj();
  v14 = uu[0];
  v19 = os_log_type_enabled(v13, uu[0]);
  if (!v18)
  {
    if (!v19)
      goto LABEL_46;
    *(_DWORD *)buf = 136446210;
    v22 = "nw_masque_report_error_to_proxy_agent";
    v15 = "%{public}s called with null masque->parameters, no backtrace";
    goto LABEL_45;
  }
  if (v19)
  {
    *(_DWORD *)buf = 136446466;
    v22 = "nw_masque_report_error_to_proxy_agent";
    v23 = 2082;
    v24 = v18;
    _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s called with null masque->parameters, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v18);
  if (v12)
    goto LABEL_47;
}

uint64_t ___ZL29nw_masque_setup_reverse_proxyP9nw_masque_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v4;
  int is_equal;
  NSObject *v7;
  uint64_t v8;
  BOOL v9;
  const char *v10;
  const char *v11;
  int v12;
  const char *v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  void *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 40);
  if ((!v4 || (*(_BYTE *)(v4 + 529) & 1) == 0) && gLogDatapath)
  {
    if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
      dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
    v7 = gprivacy_proxyLogObj;
    if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
    {
      v8 = *(_QWORD *)(a1 + 40);
      v9 = v8 == 0;
      if (v8)
        v10 = (const char *)(v8 + 531);
      else
        v10 = "";
      v12 = 136446978;
      v13 = "nw_masque_setup_reverse_proxy_block_invoke";
      v14 = 2082;
      v15 = v10;
      if (v9)
        v11 = "";
      else
        v11 = " ";
      v16 = 2080;
      v17 = v11;
      v18 = 2112;
      v19 = a2;
      _os_log_impl(&dword_182FBE000, v7, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sChecking secondary certificate %@ to join for reverse-proxying", (uint8_t *)&v12, 0x2Au);
    }
  }
  is_equal = nw_endpoint_is_equal(a2, *(void **)(a1 + 48), 0);
  if (is_equal)
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
  return is_equal ^ 1u;
}

void ___ZL29nw_masque_setup_reverse_proxyP9nw_masque_block_invoke_61(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  int v4;
  const char *v5;
  __int16 v6;
  uint64_t v7;
  __int16 v8;
  const char *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v1 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  if (v1)
  {
    v2 = v1;
    if ((*(_BYTE *)(v1 + 529) & 1) == 0 && gLogDatapath)
    {
      if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
        dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
      v3 = gprivacy_proxyLogObj;
      if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
      {
        v4 = 136446722;
        v5 = "nw_masque_setup_reverse_proxy_block_invoke";
        v6 = 2082;
        v7 = v2 + 531;
        v8 = 2080;
        v9 = " ";
        _os_log_impl(&dword_182FBE000, v3, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sRestarting HTTP request stack for reverse proxy", (uint8_t *)&v4, 0x20u);
      }
    }
    nw_protocol_notify(*(_QWORD **)(v2 + 48), v2, 25);
  }
}

BOOL ___ZL39nw_protocol_masque_reset_demux_protocolP11nw_protocol_block_invoke(uint64_t a1, int a2)
{
  if (a2)
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 448) = nw_protocol_options_copy(*(void **)(a1 + 40));
  return a2 == 0;
}

BOOL ___ZL33nw_protocol_masque_get_definitionv_block_invoke()
{
  if (nw_protocol_masque_identifier(void)::onceToken != -1)
    dispatch_once(&nw_protocol_masque_identifier(void)::onceToken, &__block_literal_global_35);
  nw_protocol_masque_get_definition(void)::definition = (uint64_t)nw_protocol_definition_create_with_identifier((__int128 *)nw_protocol_masque_identifier(void)::g_masque_protocol_identifier);
  nw_protocol_definition_set_is_proxy((void *)nw_protocol_masque_get_definition(void)::definition);
  nw_protocol_definition_set_globals_allocator((void *)nw_protocol_masque_get_definition(void)::definition, nw_masque_allocate_globals, nw_masque_deallocate_globals);
  nw_protocol_definition_set_options_allocator((void *)nw_protocol_masque_get_definition(void)::definition, (uint64_t)nw_masque_allocate_options, (uint64_t)nw_masque_copy_options, (uint64_t)nw_masque_deallocate_options);
  nw_protocol_definition_set_options_equality_check((void *)nw_protocol_masque_get_definition(void)::definition, (uint64_t)nw_masque_option_is_equal);
  nw_protocol_definition_set_options_serializer((void *)nw_protocol_masque_get_definition(void)::definition, 0, (uint64_t)nw_masque_serialize_options, (uint64_t)nw_masque_deserialize_options);
  nw_protocol_definition_set_metadata_allocator((void *)nw_protocol_masque_get_definition(void)::definition, (uint64_t)nw_masque_allocate_metadata, (uint64_t)nw_masque_deallocate_metadata);
  nw_protocol_definition_set_metadata_comparator((void *)nw_protocol_masque_get_definition(void)::definition, (uint64_t)nw_masque_compare_metadata);
  return nw_protocol_register_handle((uint64_t)nw_protocol_masque_identifier(void)::g_masque_protocol_identifier, (void *)nw_protocol_masque_get_definition(void)::definition, (uint64_t)nw_protocol_masque_create, 0);
}

BOOL nw_masque_allocate_metadata(nw_protocol_definition *a1)
{
  void *v1;
  _BOOL8 result;
  NSObject *v3;
  void *v4;

  v1 = malloc_type_calloc(1uLL, 0x10uLL, 0xEAFB8F1AuLL);
  if (v1)
    return (BOOL)v1;
  v3 = __nwlog_obj();
  os_log_type_enabled(v3, OS_LOG_TYPE_ERROR);
  v4 = (void *)_os_log_send_and_compose_impl();
  result = __nwlog_abort((uint64_t)v4);
  if (!result)
  {
    free(v4);
    return (BOOL)v1;
  }
  __break(1u);
  return result;
}

void nw_masque_deallocate_metadata(nw_protocol_definition *a1, void *a2)
{
  if (a2)
    free(a2);
}

BOOL nw_masque_compare_metadata(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  char *v4;
  NSObject *v5;
  os_log_type_t v6;
  const char *v7;
  char *backtrace_string;
  _BOOL4 v9;
  const char *v10;
  _BOOL4 v11;
  char v12;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    if (a3)
      return *a2 == *a3;
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v15 = "nw_masque_compare_metadata";
    v4 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v12 = 0;
    if (!__nwlog_fault(v4, &type, &v12))
      goto LABEL_32;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v5 = __nwlog_obj();
      v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_masque_compare_metadata";
        v7 = "%{public}s called with null handle2";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (!v12)
    {
      v5 = __nwlog_obj();
      v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_masque_compare_metadata";
        v7 = "%{public}s called with null handle2, backtrace limit exceeded";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v5 = __nwlog_obj();
    v6 = type;
    v11 = os_log_type_enabled(v5, type);
    if (!backtrace_string)
    {
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_masque_compare_metadata";
        v7 = "%{public}s called with null handle2, no backtrace";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (v11)
    {
      *(_DWORD *)buf = 136446466;
      v15 = "nw_masque_compare_metadata";
      v16 = 2082;
      v17 = backtrace_string;
      v10 = "%{public}s called with null handle2, dumping backtrace:%{public}s";
      goto LABEL_21;
    }
    goto LABEL_22;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v15 = "nw_masque_compare_metadata";
  v4 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v12 = 0;
  if (!__nwlog_fault(v4, &type, &v12))
    goto LABEL_32;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v12)
    {
      v5 = __nwlog_obj();
      v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_masque_compare_metadata";
        v7 = "%{public}s called with null handle1, backtrace limit exceeded";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v5 = __nwlog_obj();
    v6 = type;
    v9 = os_log_type_enabled(v5, type);
    if (!backtrace_string)
    {
      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_masque_compare_metadata";
        v7 = "%{public}s called with null handle1, no backtrace";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (v9)
    {
      *(_DWORD *)buf = 136446466;
      v15 = "nw_masque_compare_metadata";
      v16 = 2082;
      v17 = backtrace_string;
      v10 = "%{public}s called with null handle1, dumping backtrace:%{public}s";
LABEL_21:
      _os_log_impl(&dword_182FBE000, v5, v6, v10, buf, 0x16u);
    }
LABEL_22:
    free(backtrace_string);
    goto LABEL_32;
  }
  v5 = __nwlog_obj();
  v6 = type;
  if (os_log_type_enabled(v5, type))
  {
    *(_DWORD *)buf = 136446210;
    v15 = "nw_masque_compare_metadata";
    v7 = "%{public}s called with null handle1";
LABEL_31:
    _os_log_impl(&dword_182FBE000, v5, v6, v7, buf, 0xCu);
  }
LABEL_32:
  if (v4)
    free(v4);
  return 0;
}

BOOL nw_protocol_masque_create(const nw_protocol_identifier *a1, nw_object *a2, nw_endpoint *a3, nw_parameters *a4)
{
  char *v6;
  uint64_t v7;
  void *v8;
  int v9;
  void *v10;
  id *singleton;
  _BOOL8 result;
  NSObject *v13;
  void *v14;
  _QWORD aBlock[5];
  void *memptr;
  _BYTE v17[24];
  uint64_t v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  memptr = 0;
  if (malloc_type_posix_memalign(&memptr, 8uLL, 0x270uLL, 0x68FF3B34uLL) || (v6 = (char *)memptr) == 0)
  {
    v13 = __nwlog_obj();
    os_log_type_enabled(v13, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v17 = 136446722;
    *(_QWORD *)&v17[4] = "strict_memalign";
    *(_WORD *)&v17[12] = 2048;
    *(_QWORD *)&v17[14] = 8;
    *(_WORD *)&v17[22] = 2048;
    v18 = 624;
    v14 = (void *)_os_log_send_and_compose_impl();
    result = __nwlog_abort((uint64_t)v14);
    if (result)
    {
      __break(1u);
      return result;
    }
    free(v14);
    v6 = (char *)memptr;
  }
  bzero(v6, 0x270uLL);
  *(_QWORD *)v17 = 0;
  *(_QWORD *)&v17[8] = v17;
  *(_QWORD *)&v17[16] = 0x2000000000;
  v7 = MEMORY[0x1E0C809B0];
  v18 = (uint64_t)v6;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZL25nw_protocol_masque_createPK22nw_protocol_identifierP9nw_objectP11nw_endpointP13nw_parameters_block_invoke;
  aBlock[3] = &unk_1E149E5A8;
  aBlock[4] = v17;
  *((_QWORD *)v6 + 62) = _Block_copy(aBlock);
  _Block_object_dispose(v17, 8);
  if (nw_protocol_masque_identifier(void)::onceToken != -1)
    dispatch_once(&nw_protocol_masque_identifier(void)::onceToken, &__block_literal_global_35);
  *((_QWORD *)v6 + 2) = nw_protocol_masque_identifier(void)::g_masque_protocol_identifier;
  if (nw_protocol_masque_get_callbacks(void)::onceToken[0] != -1)
    dispatch_once(nw_protocol_masque_get_callbacks(void)::onceToken, &__block_literal_global_40);
  *((_QWORD *)v6 + 3) = &nw_protocol_masque_get_callbacks(void)::g_masque_protocol_callbacks;
  *((_QWORD *)v6 + 5) = v6;
  if (nw_protocol_masque_identifier(void)::onceToken != -1)
    dispatch_once(&nw_protocol_masque_identifier(void)::onceToken, &__block_literal_global_35);
  *((_QWORD *)v6 + 18) = nw_protocol_masque_identifier(void)::g_masque_protocol_identifier;
  if (nw_protocol_masque_get_callbacks(void)::onceToken[0] != -1)
    dispatch_once(nw_protocol_masque_get_callbacks(void)::onceToken, &__block_literal_global_40);
  *((_QWORD *)v6 + 19) = &nw_protocol_masque_get_callbacks(void)::g_masque_protocol_callbacks;
  *((_QWORD *)v6 + 21) = v6;
  if (nw_protocol_masque_identifier(void)::onceToken != -1)
    dispatch_once(&nw_protocol_masque_identifier(void)::onceToken, &__block_literal_global_35);
  *((_QWORD *)v6 + 26) = nw_protocol_masque_identifier(void)::g_masque_protocol_identifier;
  if (nw_protocol_masque_get_callbacks(void)::onceToken[0] != -1)
    dispatch_once(nw_protocol_masque_get_callbacks(void)::onceToken, &__block_literal_global_40);
  *((_QWORD *)v6 + 27) = &nw_protocol_masque_get_callbacks(void)::g_masque_protocol_callbacks;
  *((_QWORD *)v6 + 29) = v6;
  if (nw_protocol_masque_identifier(void)::onceToken != -1)
    dispatch_once(&nw_protocol_masque_identifier(void)::onceToken, &__block_literal_global_35);
  *((_QWORD *)v6 + 10) = nw_protocol_masque_identifier(void)::g_masque_protocol_identifier;
  if (nw_protocol_masque_get_callbacks(void)::onceToken[0] != -1)
    dispatch_once(nw_protocol_masque_get_callbacks(void)::onceToken, &__block_literal_global_40);
  *((_QWORD *)v6 + 11) = &nw_protocol_masque_get_callbacks(void)::g_masque_protocol_callbacks;
  *((_QWORD *)v6 + 13) = v6;
  *((_QWORD *)v6 + 32) = 0;
  *((_QWORD *)v6 + 33) = v6 + 256;
  if (a3)
    v8 = os_retain(a3);
  else
    v8 = 0;
  *((_QWORD *)v6 + 38) = v8;
  *((_DWORD *)v6 + 128) = 0;
  *((_QWORD *)v6 + 63) = 1;
  if (nw_parameters_get_logging_disabled((uint64_t)a4))
    v9 = 0x10000;
  else
    v9 = 0;
  *(_DWORD *)(v6 + 527) = *(_DWORD *)(v6 + 527) & 0xFFFEFFFF | v9;
  if (nw_protocol_masque_get_definition(void)::onceToken != -1)
    dispatch_once(&nw_protocol_masque_get_definition(void)::onceToken, &__block_literal_global_27122);
  v10 = (void *)nw_protocol_masque_get_definition(void)::definition;
  if (nw_protocol_masque_get_definition(void)::definition)
    v10 = os_retain((void *)nw_protocol_masque_get_definition(void)::definition);
  singleton = nw_protocol_metadata_create_singleton(v10);
  *((_QWORD *)v6 + 59) = singleton;
  *(_QWORD *)v17 = v7;
  *(_QWORD *)&v17[8] = 0x40000000;
  *(_QWORD *)&v17[16] = ___ZL23nw_masque_set_callbacksP20nw_protocol_metadataPv_block_invoke;
  v18 = (uint64_t)&__block_descriptor_tmp_184;
  v19 = v6;
  nw_protocol_metadata_access_handle((uint64_t)singleton, (uint64_t)v17);
  return (BOOL)v6;
}

uint64_t ___ZL25nw_protocol_masque_createPK22nw_protocol_identifierP9nw_objectP11nw_endpointP13nw_parameters_block_invoke(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0)
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 0;
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
}

uint64_t ___ZL23nw_masque_set_callbacksP20nw_protocol_metadataPv_block_invoke(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_s *v4;

  v4 = (os_unfair_lock_s *)(a2 + 8);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 8));
  *(_QWORD *)a2 = *(_QWORD *)(a1 + 32);
  os_unfair_lock_unlock(v4);
  return 1;
}

void ___ZL32nw_protocol_masque_get_callbacksv_block_invoke()
{
  qword_1EDCE4A98 = (uint64_t)nw_protocol_default_reset;
  unk_1EDCE4AA0 = nw_protocol_default_input_flush;
  qword_1EDCE4A28 = (uint64_t)nw_protocol_default_register_notification;
  unk_1EDCE4A30 = nw_protocol_default_unregister_notification;
  qword_1EDCE4A88 = (uint64_t)nw_protocol_default_remove_listen_handler;
  unk_1EDCE4A90 = nw_protocol_default_get_message_properties;
  nw_protocol_masque_get_callbacks(void)::g_masque_protocol_callbacks = (uint64_t)nw_protocol_masque_add_input_handler;
  unk_1EDCE49A0 = nw_protocol_masque_remove_input_handler;
  qword_1EDCE49A8 = (uint64_t)nw_protocol_masque_replace_input_handler;
  unk_1EDCE49B0 = nw_protocol_masque_connect;
  qword_1EDCE49B8 = (uint64_t)nw_protocol_masque_disconnect;
  unk_1EDCE49C0 = nw_protocol_masque_connected;
  qword_1EDCE49C8 = (uint64_t)nw_protocol_masque_disconnected;
  unk_1EDCE49D0 = nw_protocol_masque_error;
  qword_1EDCE4A68 = (uint64_t)nw_protocol_default_get_output_interface;
  unk_1EDCE4A70 = nw_protocol_masque_waiting_for_output;
  qword_1EDCE49F8 = (uint64_t)nw_protocol_masque_finalize_output_frames;
  unk_1EDCE4A00 = nw_protocol_default_link_state;
  qword_1EDCE49E8 = (uint64_t)nw_protocol_masque_get_input_frames;
  unk_1EDCE49F0 = nw_protocol_masque_get_output_frames;
  qword_1EDCE49D8 = (uint64_t)nw_protocol_masque_input_available;
  unk_1EDCE49E0 = nw_protocol_default_output_available;
  qword_1EDCE4A48 = (uint64_t)nw_protocol_masque_supports_external_data;
  unk_1EDCE4A50 = nw_protocol_masque_input_finished;
  qword_1EDCE4A18 = (uint64_t)nw_protocol_default_get_local;
  unk_1EDCE4A20 = nw_protocol_masque_get_remote_endpoint;
  qword_1EDCE4A08 = (uint64_t)nw_protocol_masque_get_parameters;
  unk_1EDCE4A10 = nw_protocol_default_get_path;
  qword_1EDCE4A58 = (uint64_t)nw_protocol_default_output_finished;
  unk_1EDCE4A60 = nw_protocol_masque_get_output_local_endpoint;
  qword_1EDCE4A78 = (uint64_t)nw_protocol_masque_copy_info;
  unk_1EDCE4A80 = nw_protocol_default_add_listen_handler;
  qword_1EDCE4A38 = (uint64_t)nw_protocol_masque_notify;
  unk_1EDCE4A40 = nw_protocol_default_updated_path;
}

uint64_t nw_protocol_masque_add_input_handler(nw_protocol *a1, nw_protocol *a2)
{
  char *handle;
  const char *v4;
  char *v5;
  uint64_t v6;
  os_log_type_t v7;
  const char *v8;
  nw_protocol_callbacks *callbacks;
  uint64_t (*get_parameters)(nw_protocol *);
  void *v12;
  void *v13;
  uint64_t (*get_path)(nw_protocol *);
  void *v15;
  void *v16;
  unsigned __int8 *v17;
  void *v18;
  int v19;
  char *v20;
  void *v21;
  int v22;
  char *v23;
  NSObject *v24;
  os_log_type_t v25;
  _BOOL4 v26;
  NSObject *v27;
  os_log_type_t v28;
  uint32_t v29;
  void *v31;
  nw_protocol_identifier *identifier;
  nw_protocol_stack_t v33;
  nw_protocol_stack_t v34;
  NSObject *v35;
  NSObject *v36;
  NSObject *v37;
  os_log_type_t v38;
  char *backtrace_string;
  _BOOL4 v40;
  const char *v41;
  _BOOL4 v42;
  char *v43;
  NSObject *v44;
  os_log_type_t v45;
  const char *v46;
  char *v47;
  _BOOL4 v48;
  char *v49;
  NSObject *v50;
  os_log_type_t v51;
  const char *v52;
  char *v53;
  _BOOL4 v54;
  nw_protocol_identifier *v55;
  int *quic_stream_protocol_identifier;
  nw_protocol_identifier *v57;
  __int128 *quic_connection_protocol_identifier;
  nw_protocol_identifier *v59;
  nw_protocol *default_input_handler;
  nw_protocol_identifier *v61;
  int *v62;
  nw_protocol_identifier *v63;
  __int128 *v64;
  nw_protocol_stack_t v65;
  NSObject *v66;
  id v67;
  unsigned __int16 *v68;
  int v69;
  void *v70;
  void *v71;
  unsigned __int16 *globals_for_protocol;
  NSObject *v73;
  nw_protocol_callbacks *v74;
  unsigned int (*supports_external_data)(nw_protocol *);
  int v76;
  char *v77;
  NSObject *v78;
  os_log_type_t v79;
  const char *v80;
  char *v81;
  _BOOL4 v82;
  char *v83;
  _BOOL4 v84;
  char v85;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v88;
  __int16 v89;
  const char *v90;
  __int16 v91;
  const char *v92;
  __int16 v93;
  char *v94;
  uint64_t v95;

  v95 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v88 = "nw_protocol_masque_add_input_handler";
    v5 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v85 = 0;
    if (!__nwlog_fault(v5, &type, &v85))
      goto LABEL_53;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v37 = __nwlog_obj();
      v38 = type;
      if (!os_log_type_enabled(v37, type))
        goto LABEL_53;
      *(_DWORD *)buf = 136446210;
      v88 = "nw_protocol_masque_add_input_handler";
      v8 = "%{public}s called with null protocol";
      goto LABEL_98;
    }
    if (v85)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v37 = __nwlog_obj();
      v38 = type;
      v40 = os_log_type_enabled(v37, type);
      if (backtrace_string)
      {
        if (v40)
        {
          *(_DWORD *)buf = 136446466;
          v88 = "nw_protocol_masque_add_input_handler";
          v89 = 2082;
          v90 = backtrace_string;
          v41 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_84:
          _os_log_impl(&dword_182FBE000, v37, v38, v41, buf, 0x16u);
        }
LABEL_85:
        free(backtrace_string);
        goto LABEL_53;
      }
      if (!v40)
        goto LABEL_53;
      *(_DWORD *)buf = 136446210;
      v88 = "nw_protocol_masque_add_input_handler";
      v8 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      v37 = __nwlog_obj();
      v38 = type;
      if (!os_log_type_enabled(v37, type))
        goto LABEL_53;
      *(_DWORD *)buf = 136446210;
      v88 = "nw_protocol_masque_add_input_handler";
      v8 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
LABEL_98:
    v27 = v37;
    v28 = v38;
    v29 = 12;
    goto LABEL_52;
  }
  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v88 = "nw_protocol_masque_add_input_handler";
    v5 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v85 = 0;
    if (!__nwlog_fault(v5, &type, &v85))
      goto LABEL_53;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v37 = __nwlog_obj();
      v38 = type;
      if (!os_log_type_enabled(v37, type))
        goto LABEL_53;
      *(_DWORD *)buf = 136446210;
      v88 = "nw_protocol_masque_add_input_handler";
      v8 = "%{public}s called with null masque";
      goto LABEL_98;
    }
    if (v85)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v37 = __nwlog_obj();
      v38 = type;
      v42 = os_log_type_enabled(v37, type);
      if (backtrace_string)
      {
        if (v42)
        {
          *(_DWORD *)buf = 136446466;
          v88 = "nw_protocol_masque_add_input_handler";
          v89 = 2082;
          v90 = backtrace_string;
          v41 = "%{public}s called with null masque, dumping backtrace:%{public}s";
          goto LABEL_84;
        }
        goto LABEL_85;
      }
      if (!v42)
        goto LABEL_53;
      *(_DWORD *)buf = 136446210;
      v88 = "nw_protocol_masque_add_input_handler";
      v8 = "%{public}s called with null masque, no backtrace";
    }
    else
    {
      v37 = __nwlog_obj();
      v38 = type;
      if (!os_log_type_enabled(v37, type))
        goto LABEL_53;
      *(_DWORD *)buf = 136446210;
      v88 = "nw_protocol_masque_add_input_handler";
      v8 = "%{public}s called with null masque, backtrace limit exceeded";
    }
    goto LABEL_98;
  }
  if (a1->default_input_handler)
  {
    if ((handle[529] & 1) != 0)
      return 0;
    if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
      dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
    v4 = handle + 531;
    *(_DWORD *)buf = 136446722;
    v88 = "nw_protocol_masque_add_input_handler";
    v89 = 2082;
    v90 = handle + 531;
    v91 = 2080;
    v92 = " ";
    v5 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v85 = 0;
    if (__nwlog_fault(v5, &type, &v85))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
          dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
        v6 = gprivacy_proxyLogObj;
        v7 = type;
        if (!os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, type))
          goto LABEL_53;
        *(_DWORD *)buf = 136446722;
        v88 = "nw_protocol_masque_add_input_handler";
        v89 = 2082;
        v90 = v4;
        v91 = 2080;
        v92 = " ";
        v8 = "%{public}s %{public}s%sProtocol instance already has default input handler";
        goto LABEL_50;
      }
      if (!v85)
      {
        if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
          dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
        v6 = gprivacy_proxyLogObj;
        v7 = type;
        if (!os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, type))
          goto LABEL_53;
        *(_DWORD *)buf = 136446722;
        v88 = "nw_protocol_masque_add_input_handler";
        v89 = 2082;
        v90 = v4;
        v91 = 2080;
        v92 = " ";
        v8 = "%{public}s %{public}s%sProtocol instance already has default input handler, backtrace limit exceeded";
LABEL_50:
        v27 = v6;
        v28 = v7;
LABEL_51:
        v29 = 32;
LABEL_52:
        _os_log_impl(&dword_182FBE000, v27, v28, v8, buf, v29);
        goto LABEL_53;
      }
      v23 = (char *)__nw_create_backtrace_string();
      if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
        dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
      v24 = gprivacy_proxyLogObj;
      v25 = type;
      v26 = os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, type);
      if (v23)
      {
        if (v26)
        {
          *(_DWORD *)buf = 136446978;
          v88 = "nw_protocol_masque_add_input_handler";
          v89 = 2082;
          v90 = v4;
          v91 = 2080;
          v92 = " ";
          v93 = 2082;
          v94 = v23;
          _os_log_impl(&dword_182FBE000, v24, v25, "%{public}s %{public}s%sProtocol instance already has default input handler, dumping backtrace:%{public}s", buf, 0x2Au);
        }
        free(v23);
        goto LABEL_53;
      }
      if (v26)
      {
        *(_DWORD *)buf = 136446722;
        v88 = "nw_protocol_masque_add_input_handler";
        v89 = 2082;
        v90 = v4;
        v91 = 2080;
        v92 = " ";
        v8 = "%{public}s %{public}s%sProtocol instance already has default input handler, no backtrace";
        v27 = v24;
        v28 = v25;
        goto LABEL_51;
      }
    }
LABEL_53:
    if (v5)
      free(v5);
    return 0;
  }
  nw_protocol_set_input_handler((uint64_t)a1, (uint64_t)a2);
  if (a2)
  {
    *(_OWORD *)a1->flow_id = *(_OWORD *)a2->flow_id;
    if (!a2->output_handler)
      nw_protocol_set_output_handler((uint64_t)a2, (uint64_t)a1);
    callbacks = a2->callbacks;
    if (callbacks)
    {
      get_parameters = (uint64_t (*)(nw_protocol *))callbacks->get_parameters;
      if (!get_parameters)
        goto LABEL_21;
      v12 = (void *)get_parameters(a2);
      v13 = v12;
      if (v12)
        v12 = os_retain(v12);
      *((_QWORD *)handle + 40) = v12;
      *((_QWORD *)handle + 41) = nw_parameters_copy_context(v13);
      callbacks = a2->callbacks;
      if (callbacks)
      {
LABEL_21:
        get_path = (uint64_t (*)(nw_protocol *))callbacks->get_path;
        if (get_path)
        {
          v15 = (void *)get_path(a2);
          if (v15)
            v15 = os_retain(v15);
          *((_QWORD *)handle + 42) = v15;
        }
      }
    }
  }
  v16 = (void *)*((_QWORD *)handle + 40);
  if (v16)
  {
    v17 = nw_parameters_copy_protocol_options_legacy(v16, (nw_protocol *)handle);
    *((_QWORD *)handle + 43) = v17;
    nw_protocol_options_get_log_id_str(v17, handle + 531, 84);
    *((_DWORD *)handle + 126) = nw_masque_options_get_version(*((void **)handle + 43));
    v18 = (void *)*((_QWORD *)handle + 43);
    if (v18)
    {
      if (nw_protocol_options_access_handle(v18, &__block_literal_global_42_27467))
        v19 = 0;
      else
        v19 = 4;
      goto LABEL_30;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v88 = "nw_masque_options_has_target_endpoint";
    v43 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v85 = 0;
    if (__nwlog_fault(v43, &type, &v85))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v44 = __nwlog_obj();
        v45 = type;
        if (os_log_type_enabled(v44, type))
        {
          *(_DWORD *)buf = 136446210;
          v88 = "nw_masque_options_has_target_endpoint";
          v46 = "%{public}s called with null options";
LABEL_112:
          _os_log_impl(&dword_182FBE000, v44, v45, v46, buf, 0xCu);
        }
      }
      else if (v85)
      {
        v47 = (char *)__nw_create_backtrace_string();
        v44 = __nwlog_obj();
        v45 = type;
        v48 = os_log_type_enabled(v44, type);
        if (v47)
        {
          if (v48)
          {
            *(_DWORD *)buf = 136446466;
            v88 = "nw_masque_options_has_target_endpoint";
            v89 = 2082;
            v90 = v47;
            _os_log_impl(&dword_182FBE000, v44, v45, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v47);
          goto LABEL_113;
        }
        if (v48)
        {
          *(_DWORD *)buf = 136446210;
          v88 = "nw_masque_options_has_target_endpoint";
          v46 = "%{public}s called with null options, no backtrace";
          goto LABEL_112;
        }
      }
      else
      {
        v44 = __nwlog_obj();
        v45 = type;
        if (os_log_type_enabled(v44, type))
        {
          *(_DWORD *)buf = 136446210;
          v88 = "nw_masque_options_has_target_endpoint";
          v46 = "%{public}s called with null options, backtrace limit exceeded";
          goto LABEL_112;
        }
      }
    }
LABEL_113:
    if (v43)
      free(v43);
    v19 = 4;
LABEL_30:
    v20 = handle + 527;
    *(_DWORD *)(handle + 527) = *(_DWORD *)(handle + 527) & 0xFFFFFFFB | v19;
    v21 = (void *)*((_QWORD *)handle + 40);
    if (nw_protocol_http_messaging_identifier::onceToken[0] != -1)
      dispatch_once(nw_protocol_http_messaging_identifier::onceToken, &__block_literal_global_75867);
    if (nw_parameters_has_protocol_in_stack(v21, nw_protocol_http_messaging_identifier::protocol_identifier))
      v22 = 0x1000000;
    else
      v22 = 0;
    *(_DWORD *)v20 = *(_DWORD *)v20 & 0xFEFFFFFF | v22;
    if (nw_masque_options_get_forced_protocol(*((nw_protocol_options **)handle + 43)) == 2)
      goto LABEL_36;
    if (nw_masque_options_get_forced_protocol(*((nw_protocol_options **)handle + 43)) == 1)
    {
      *(_DWORD *)v20 &= ~8u;
      goto LABEL_144;
    }
    if (!a2)
      goto LABEL_137;
    v31 = (void *)*((_QWORD *)handle + 43);
    if (v31)
    {
      if (nw_protocol_options_access_handle(v31, &__block_literal_global_45))
      {
        identifier = a2->identifier;
        if (nw_protocol_ip_identifier::onceToken != -1)
          dispatch_once(&nw_protocol_ip_identifier::onceToken, &__block_literal_global_85105);
        if (nw_protocols_are_equal(identifier, &nw_protocol_ip_identifier::identifier))
        {
          *(_DWORD *)v20 |= 0x20u;
          v33 = nw_parameters_copy_default_protocol_stack(*((nw_parameters_t *)handle + 40));
          if (!v33)
            goto LABEL_144;
          v34 = v33;
          v35 = nw_protocol_stack_copy_original_proxied_transport_protocol(v33);
          if (!v35)
            goto LABEL_143;
          v36 = v35;
          if (nw_protocol_options_is_custom_ip(v35))
            handle[526] = nw_custom_ip_options_get_protocol(v36);
          goto LABEL_142;
        }
      }
      goto LABEL_129;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v88 = "nw_masque_options_get_allow_connect_ip";
    v49 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v85 = 0;
    if (__nwlog_fault(v49, &type, &v85))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v50 = __nwlog_obj();
        v51 = type;
        if (os_log_type_enabled(v50, type))
        {
          *(_DWORD *)buf = 136446210;
          v88 = "nw_masque_options_get_allow_connect_ip";
          v52 = "%{public}s called with null options";
LABEL_125:
          _os_log_impl(&dword_182FBE000, v50, v51, v52, buf, 0xCu);
        }
      }
      else if (v85)
      {
        v53 = (char *)__nw_create_backtrace_string();
        v50 = __nwlog_obj();
        v51 = type;
        v54 = os_log_type_enabled(v50, type);
        if (v53)
        {
          if (v54)
          {
            *(_DWORD *)buf = 136446466;
            v88 = "nw_masque_options_get_allow_connect_ip";
            v89 = 2082;
            v90 = v53;
            _os_log_impl(&dword_182FBE000, v50, v51, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v53);
          goto LABEL_126;
        }
        if (v54)
        {
          *(_DWORD *)buf = 136446210;
          v88 = "nw_masque_options_get_allow_connect_ip";
          v52 = "%{public}s called with null options, no backtrace";
          goto LABEL_125;
        }
      }
      else
      {
        v50 = __nwlog_obj();
        v51 = type;
        if (os_log_type_enabled(v50, type))
        {
          *(_DWORD *)buf = 136446210;
          v88 = "nw_masque_options_get_allow_connect_ip";
          v52 = "%{public}s called with null options, backtrace limit exceeded";
          goto LABEL_125;
        }
      }
    }
LABEL_126:
    if (v49)
      free(v49);
    v20 = handle + 527;
LABEL_129:
    v55 = a2->identifier;
    quic_stream_protocol_identifier = nw_protocol_get_quic_stream_protocol_identifier();
    if (nw_protocols_are_equal(v55, quic_stream_protocol_identifier))
      goto LABEL_36;
    v57 = a2->identifier;
    quic_connection_protocol_identifier = nw_protocol_get_quic_connection_protocol_identifier();
    if (nw_protocols_are_equal(v57, quic_connection_protocol_identifier))
      goto LABEL_36;
    v59 = a2->identifier;
    if (nw_protocol_demux_identifier::onceToken[0] != -1)
      dispatch_once(nw_protocol_demux_identifier::onceToken, &__block_literal_global_25737);
    if (nw_protocols_are_equal(v59, &g_demux_protocol_identifier))
    {
      default_input_handler = a2->default_input_handler;
      if (default_input_handler)
      {
        v61 = default_input_handler->identifier;
        v62 = nw_protocol_get_quic_stream_protocol_identifier();
        if (nw_protocols_are_equal(v61, v62)
          || (v63 = a2->default_input_handler->identifier,
              v64 = nw_protocol_get_quic_connection_protocol_identifier(),
              nw_protocols_are_equal(v63, v64)))
        {
LABEL_36:
          *(_DWORD *)v20 |= 8u;
          goto LABEL_144;
        }
      }
    }
LABEL_137:
    v65 = nw_parameters_copy_default_protocol_stack(*((nw_parameters_t *)handle + 40));
    if (!v65)
      goto LABEL_144;
    v34 = v65;
    v66 = nw_protocol_stack_copy_original_proxied_transport_protocol(v65);
    if (!v66)
    {
LABEL_143:
      os_release(v34);
LABEL_144:
      v67 = nw_parameters_copy_effective_proxy_config(*((void **)handle + 40));
      if (!v67)
        goto LABEL_160;
      v68 = (unsigned __int16 *)v67;
      v69 = v68[84];

      if (!v69)
        goto LABEL_159;
      *((_WORD *)handle + 262) = v69;
      v70 = (void *)*((_QWORD *)handle + 41);
      if (v70)
      {
        if (nw_protocol_masque_get_definition(void)::onceToken != -1)
          dispatch_once(&nw_protocol_masque_get_definition(void)::onceToken, &__block_literal_global_27122);
        if (nw_protocol_masque_get_definition(void)::definition)
          v71 = os_retain((void *)nw_protocol_masque_get_definition(void)::definition);
        else
          v71 = 0;
        globals_for_protocol = (unsigned __int16 *)nw_context_get_globals_for_protocol(v70, v71);
        if (globals_for_protocol)
        {
          if (*globals_for_protocol != v69)
          {
            *globals_for_protocol = v69;
            globals_for_protocol[1] = 0;
            if ((v20[2] & 1) == 0)
            {
              if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
                dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
              v73 = gprivacy_proxyLogObj;
              if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)buf = 136446722;
                v88 = handle + 531;
                v89 = 2080;
                v90 = " ";
                v91 = 1024;
                LODWORD(v92) = v69;
                _os_log_impl(&dword_182FBE000, v73, OS_LOG_TYPE_INFO, "%{public}s%sSaving config epoch value: %u", buf, 0x1Cu);
              }
            }
          }
          goto LABEL_159;
        }
        __nwlog_obj();
        *(_DWORD *)buf = 136446210;
        v88 = "nw_masque_set_config_epoch_value";
        v77 = (char *)_os_log_send_and_compose_impl();
        type = OS_LOG_TYPE_ERROR;
        v85 = 0;
        if (__nwlog_fault(v77, &type, &v85))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            v78 = __nwlog_obj();
            v79 = type;
            if (!os_log_type_enabled(v78, type))
              goto LABEL_196;
            *(_DWORD *)buf = 136446210;
            v88 = "nw_masque_set_config_epoch_value";
            v80 = "%{public}s called with null globals";
            goto LABEL_195;
          }
          if (!v85)
          {
            v78 = __nwlog_obj();
            v79 = type;
            if (!os_log_type_enabled(v78, type))
              goto LABEL_196;
            *(_DWORD *)buf = 136446210;
            v88 = "nw_masque_set_config_epoch_value";
            v80 = "%{public}s called with null globals, backtrace limit exceeded";
            goto LABEL_195;
          }
          v83 = (char *)__nw_create_backtrace_string();
          v78 = __nwlog_obj();
          v79 = type;
          v84 = os_log_type_enabled(v78, type);
          if (v83)
          {
            if (v84)
            {
              *(_DWORD *)buf = 136446466;
              v88 = "nw_masque_set_config_epoch_value";
              v89 = 2082;
              v90 = v83;
              _os_log_impl(&dword_182FBE000, v78, v79, "%{public}s called with null globals, dumping backtrace:%{public}s", buf, 0x16u);
            }
            free(v83);
            if (!v77)
              goto LABEL_159;
            goto LABEL_197;
          }
          if (v84)
          {
            *(_DWORD *)buf = 136446210;
            v88 = "nw_masque_set_config_epoch_value";
            v80 = "%{public}s called with null globals, no backtrace";
LABEL_195:
            _os_log_impl(&dword_182FBE000, v78, v79, v80, buf, 0xCu);
          }
        }
      }
      else
      {
        __nwlog_obj();
        *(_DWORD *)buf = 136446210;
        v88 = "nw_masque_set_config_epoch_value";
        v77 = (char *)_os_log_send_and_compose_impl();
        type = OS_LOG_TYPE_ERROR;
        v85 = 0;
        if (!__nwlog_fault(v77, &type, &v85))
          goto LABEL_196;
        if (type == OS_LOG_TYPE_FAULT)
        {
          v78 = __nwlog_obj();
          v79 = type;
          if (!os_log_type_enabled(v78, type))
            goto LABEL_196;
          *(_DWORD *)buf = 136446210;
          v88 = "nw_masque_set_config_epoch_value";
          v80 = "%{public}s called with null masque->context";
          goto LABEL_195;
        }
        if (!v85)
        {
          v78 = __nwlog_obj();
          v79 = type;
          if (!os_log_type_enabled(v78, type))
            goto LABEL_196;
          *(_DWORD *)buf = 136446210;
          v88 = "nw_masque_set_config_epoch_value";
          v80 = "%{public}s called with null masque->context, backtrace limit exceeded";
          goto LABEL_195;
        }
        v81 = (char *)__nw_create_backtrace_string();
        v78 = __nwlog_obj();
        v79 = type;
        v82 = os_log_type_enabled(v78, type);
        if (!v81)
        {
          if (!v82)
            goto LABEL_196;
          *(_DWORD *)buf = 136446210;
          v88 = "nw_masque_set_config_epoch_value";
          v80 = "%{public}s called with null masque->context, no backtrace";
          goto LABEL_195;
        }
        if (v82)
        {
          *(_DWORD *)buf = 136446466;
          v88 = "nw_masque_set_config_epoch_value";
          v89 = 2082;
          v90 = v81;
          _os_log_impl(&dword_182FBE000, v78, v79, "%{public}s called with null masque->context, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v81);
      }
LABEL_196:
      if (!v77)
      {
LABEL_159:
        os_release(v68);
        goto LABEL_160;
      }
LABEL_197:
      free(v77);
      goto LABEL_159;
    }
    v36 = v66;
    if (nw_protocol_options_is_quic(v66) || nw_protocol_options_is_udp(v36))
      *(_DWORD *)v20 |= 8u;
LABEL_142:
    os_release(v36);
    goto LABEL_143;
  }
LABEL_160:
  if (a2)
  {
    v74 = a2->callbacks;
    if (v74)
    {
      supports_external_data = (unsigned int (*)(nw_protocol *))v74->supports_external_data;
      if (supports_external_data)
      {
        if (supports_external_data(a2))
          v76 = 64;
        else
          v76 = 0;
        *(_DWORD *)(handle + 527) = *(_DWORD *)(handle + 527) & 0xFFFFFFBF | v76;
      }
    }
  }
  return 1;
}

uint64_t nw_protocol_masque_get_output_frames(nw_protocol *a1, nw_protocol *a2, uint64_t a3, uint64_t a4, uint64_t a5, nw_frame_array_s *a6)
{
  _DWORD *handle;
  int v9;
  int v10;
  BOOL v11;
  nw_protocol *v12;
  size_t v13;
  _BOOL8 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  nw_frame **v18;
  int v19;
  unsigned int v20;
  size_t v21;
  _BOOL8 v22;
  int v23;
  NSObject *v24;
  nw_protocol *output_handler;
  uint64_t v27;
  uint64_t *v28;
  nw_frame **tqh_last;
  NSObject *v30;
  char *v31;
  NSObject *v32;
  os_log_type_t v33;
  const char *v34;
  char *backtrace_string;
  _BOOL4 v36;
  char *v37;
  _BOOL4 v38;
  char v39;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v42;
  __int16 v43;
  char *v44;
  __int16 v45;
  const char *v46;
  __int16 v47;
  int v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v42 = "nw_protocol_masque_get_output_frames";
    v31 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v39 = 0;
    if (!__nwlog_fault(v31, &type, &v39))
      goto LABEL_78;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v32 = __nwlog_obj();
      v33 = type;
      if (!os_log_type_enabled(v32, type))
        goto LABEL_78;
      *(_DWORD *)buf = 136446210;
      v42 = "nw_protocol_masque_get_output_frames";
      v34 = "%{public}s called with null protocol";
      goto LABEL_77;
    }
    if (!v39)
    {
      v32 = __nwlog_obj();
      v33 = type;
      if (!os_log_type_enabled(v32, type))
        goto LABEL_78;
      *(_DWORD *)buf = 136446210;
      v42 = "nw_protocol_masque_get_output_frames";
      v34 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_77;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v32 = __nwlog_obj();
    v33 = type;
    v36 = os_log_type_enabled(v32, type);
    if (!backtrace_string)
    {
      if (!v36)
        goto LABEL_78;
      *(_DWORD *)buf = 136446210;
      v42 = "nw_protocol_masque_get_output_frames";
      v34 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_77;
    }
    if (v36)
    {
      *(_DWORD *)buf = 136446466;
      v42 = "nw_protocol_masque_get_output_frames";
      v43 = 2082;
      v44 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v32, v33, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(backtrace_string);
LABEL_78:
    if (!v31)
      return 0;
LABEL_79:
    free(v31);
    return 0;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v42 = "nw_protocol_masque_get_output_frames";
    v31 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v39 = 0;
    if (!__nwlog_fault(v31, &type, &v39))
      goto LABEL_78;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v32 = __nwlog_obj();
      v33 = type;
      if (!os_log_type_enabled(v32, type))
        goto LABEL_78;
      *(_DWORD *)buf = 136446210;
      v42 = "nw_protocol_masque_get_output_frames";
      v34 = "%{public}s called with null masque";
      goto LABEL_77;
    }
    if (!v39)
    {
      v32 = __nwlog_obj();
      v33 = type;
      if (!os_log_type_enabled(v32, type))
        goto LABEL_78;
      *(_DWORD *)buf = 136446210;
      v42 = "nw_protocol_masque_get_output_frames";
      v34 = "%{public}s called with null masque, backtrace limit exceeded";
      goto LABEL_77;
    }
    v37 = (char *)__nw_create_backtrace_string();
    v32 = __nwlog_obj();
    v33 = type;
    v38 = os_log_type_enabled(v32, type);
    if (v37)
    {
      if (v38)
      {
        *(_DWORD *)buf = 136446466;
        v42 = "nw_protocol_masque_get_output_frames";
        v43 = 2082;
        v44 = v37;
        _os_log_impl(&dword_182FBE000, v32, v33, "%{public}s called with null masque, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v37);
      if (!v31)
        return 0;
      goto LABEL_79;
    }
    if (v38)
    {
      *(_DWORD *)buf = 136446210;
      v42 = "nw_protocol_masque_get_output_frames";
      v34 = "%{public}s called with null masque, no backtrace";
LABEL_77:
      _os_log_impl(&dword_182FBE000, v32, v33, v34, buf, 0xCu);
      goto LABEL_78;
    }
    goto LABEL_78;
  }
  v9 = handle[127];
  if (v9 == 1)
    goto LABEL_20;
  if (v9 == 2)
  {
    v19 = *(_DWORD *)((char *)handle + 527);
    if ((v19 & 0x600000) != 0x200000)
      goto LABEL_30;
LABEL_20:
    if (!*((_QWORD *)handle + 32))
    {
      if ((*((_BYTE *)handle + 527) & 0x28) != 0)
        v20 = a3;
      else
        v20 = a4;
      if (v20 >= 0x7D0)
        v21 = 2000;
      else
        v21 = v20;
      if ((_DWORD)v21)
      {
        v22 = nw_calloc_type<unsigned char>(v21);
        v23 = v21;
      }
      else
      {
        v22 = 0;
        v23 = 0;
      }
      v27 = nw_frame_create(0, v22, v23, (uint64_t)nw_protocol_masque_frame_finalizer, (uint64_t)handle);
      v16 = 1;
      nw_frame_set_buffer_used_malloc(v27, 1);
      *(_QWORD *)(v27 + 16) = 0;
      v28 = (uint64_t *)*((_QWORD *)handle + 33);
      *(_QWORD *)(v27 + 24) = v28;
      *v28 = v27;
      *((_QWORD *)handle + 33) = v27 + 16;
      *(_QWORD *)(v27 + 32) = 0;
      tqh_last = a6->tqh_last;
      *(_QWORD *)(v27 + 40) = tqh_last;
      *tqh_last = (nw_frame *)v27;
      a6->tqh_last = (nw_frame **)(v27 + 32);
      if ((*((_BYTE *)handle + 529) & 1) == 0)
      {
        if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
          dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
        v30 = gprivacy_proxyLogObj;
        if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136446978;
          v42 = "nw_protocol_masque_get_output_frames";
          v43 = 2082;
          v44 = (char *)handle + 531;
          v45 = 2080;
          v46 = " ";
          v47 = 1024;
          v48 = v21;
          _os_log_impl(&dword_182FBE000, v30, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sMASQUE waiting for early data, returning 1 frame with %u bytes", buf, 0x26u);
        }
      }
      return v16;
    }
    return 0;
  }
  if (v9 != 4)
  {
    v19 = *(_DWORD *)((char *)handle + 527);
LABEL_30:
    if ((v19 & 0x10000) == 0)
    {
      if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
        dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
      v24 = gprivacy_proxyLogObj;
      if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446722;
        v42 = "nw_protocol_masque_get_output_frames";
        v43 = 2082;
        v44 = (char *)handle + 531;
        v45 = 2080;
        v46 = " ";
        _os_log_impl(&dword_182FBE000, v24, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sMASQUE not yet connected, returning 0 frames", buf, 0x20u);
      }
    }
    return 0;
  }
  v10 = *(_DWORD *)((char *)handle + 527);
  if ((v10 & 0x800000) != 0)
  {
    v12 = (nw_protocol *)*((_QWORD *)handle + 28);
LABEL_38:
    if (v12)
      output_handler = v12;
    else
      output_handler = a1->output_handler;
    return ((uint64_t (*)(nw_protocol *, nw_protocol *, uint64_t, uint64_t, uint64_t, nw_frame_array_s *))output_handler->callbacks->get_output_frames)(output_handler, a1, a3, a4, a5, a6);
  }
  v11 = (v10 & 0x500) == 0 || (v10 & 0x100000) == 0;
  if (!v11 || handle[128] == 4)
  {
    v12 = (nw_protocol *)*((_QWORD *)handle + 28);
    if (v12)
    {
      if (*((_QWORD *)handle + 32))
      {
        if (a3 >= 0x7D0)
          v13 = 2000;
        else
          v13 = a3;
        v14 = nw_calloc_type<unsigned char>(v13);
        v15 = nw_frame_create(0, v14, v13, (uint64_t)nw_protocol_masque_frame_finalizer, (uint64_t)handle);
        v16 = 1;
        nw_frame_set_buffer_used_malloc(v15, 1);
        *(_QWORD *)(v15 + 16) = 0;
        v17 = (uint64_t *)*((_QWORD *)handle + 33);
        *(_QWORD *)(v15 + 24) = v17;
        *v17 = v15;
        *((_QWORD *)handle + 33) = v15 + 16;
        *(_QWORD *)(v15 + 32) = 0;
        v18 = a6->tqh_last;
        *(_QWORD *)(v15 + 40) = v18;
        *v18 = (nw_frame *)v15;
        a6->tqh_last = (nw_frame **)(v15 + 32);
        return v16;
      }
      *(_DWORD *)((char *)handle + 527) = v10 | 0x800000;
      goto LABEL_38;
    }
  }
  output_handler = a1->output_handler;
  return ((uint64_t (*)(nw_protocol *, nw_protocol *, uint64_t, uint64_t, uint64_t, nw_frame_array_s *))output_handler->callbacks->get_output_frames)(output_handler, a1, a3, a4, a5, a6);
}

uint64_t nw_protocol_masque_finalize_output_frames(nw_protocol *a1, nw_frame_array_s *a2)
{
  _DWORD *handle;
  nw_frame *tqh_first;
  nw_frame **tqh_last;
  uint64_t v6;
  int v7;
  nw_frame *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  nw_frame *v12;
  uint64_t v13;
  char *v15;
  NSObject *v16;
  os_log_type_t v17;
  const char *v18;
  char *backtrace_string;
  _BOOL4 v20;
  const char *v21;
  _BOOL4 v22;
  _QWORD v23[2];
  uint64_t (*v24)(uint64_t, uint64_t);
  void *v25;
  _DWORD *v26;
  _BYTE *v27;
  nw_protocol *v28;
  _QWORD *v29;
  _QWORD v30[2];
  _QWORD v31[2];
  uint64_t (*v32)(_QWORD *);
  void *v33;
  _BYTE *v34;
  _DWORD *v35;
  nw_protocol *v36;
  nw_frame *v37;
  nw_frame **v38;
  _BYTE buf[24];
  char v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    handle = a1->handle;
    if (handle)
    {
      v37 = 0;
      v38 = &v37;
      tqh_first = a2->tqh_first;
      if (a2->tqh_first)
      {
        *((_QWORD *)tqh_first + 5) = &v37;
        tqh_last = a2->tqh_last;
        v37 = tqh_first;
        v38 = tqh_last;
        a2->tqh_first = 0;
        a2->tqh_last = &a2->tqh_first;
      }
      v6 = MEMORY[0x1E0C809B0];
      if (*((_QWORD *)handle + 32))
      {
        v7 = handle[127];
        if (v7 == 1 || v7 == 2 && (*(_DWORD *)((char *)handle + 527) & 0x600000) == 0x200000)
        {
          *(_QWORD *)buf = 0;
          *(_QWORD *)&buf[8] = buf;
          *(_QWORD *)&buf[16] = 0x2000000000;
          v40 = 0;
          v31[0] = MEMORY[0x1E0C809B0];
          v31[1] = 0x40000000;
          v32 = (uint64_t (*)(_QWORD *))___ZL41nw_protocol_masque_finalize_output_framesP11nw_protocolP16nw_frame_array_s_block_invoke;
          v33 = &unk_1E149E848;
          v34 = buf;
          v35 = handle;
          v36 = a1;
          do
          {
            v8 = v37;
            if (!v37)
              break;
            v9 = *((_QWORD *)v37 + 4);
            v10 = (_QWORD *)*((_QWORD *)v37 + 5);
            if (v9)
            {
              *(_QWORD *)(v9 + 40) = v10;
              v10 = (_QWORD *)*((_QWORD *)v8 + 5);
            }
            else
            {
              v38 = (nw_frame **)*((_QWORD *)v37 + 5);
            }
            *v10 = v9;
            *((_QWORD *)v8 + 4) = 0;
            *((_QWORD *)v8 + 5) = 0;
          }
          while ((v32(v31) & 1) != 0);
          _Block_object_dispose(buf, 8);
        }
      }
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      v30[0] = 0;
      v30[1] = v30;
      v23[0] = v6;
      v23[1] = 0x40000000;
      v24 = ___ZL41nw_protocol_masque_finalize_output_framesP11nw_protocolP16nw_frame_array_s_block_invoke_118;
      v25 = &__block_descriptor_tmp_123;
      v26 = handle;
      v27 = buf;
      v28 = a1;
      v29 = v30;
      do
      {
        v12 = v37;
        if (!v37)
          break;
        v13 = *((_QWORD *)v37 + 4);
        v11 = (_QWORD *)*((_QWORD *)v37 + 5);
        if (v13)
        {
          *(_QWORD *)(v13 + 40) = v11;
          v11 = (_QWORD *)*((_QWORD *)v12 + 5);
        }
        else
        {
          v38 = (nw_frame **)*((_QWORD *)v37 + 5);
        }
        *v11 = v13;
        *((_QWORD *)v12 + 4) = 0;
        *((_QWORD *)v12 + 5) = 0;
      }
      while ((((uint64_t (*)(_QWORD *))v24)(v23) & 1) != 0);
      if (v30[0])
        (*(void (**)(void))(*(_QWORD *)(*((_QWORD *)handle + 28) + 24) + 96))();
      if (*(_QWORD *)buf)
        ((void (*)(void))a1->output_handler->callbacks->finalize_output_frames)();
      return 1;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_masque_finalize_output_frames";
    v15 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(v37) = 16;
    LOBYTE(v30[0]) = 0;
    if (!__nwlog_fault(v15, &v37, v30))
      goto LABEL_55;
    if (v37 == 17)
    {
      v16 = __nwlog_obj();
      v17 = v37;
      if (os_log_type_enabled(v16, (os_log_type_t)v37))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_masque_finalize_output_frames";
        v18 = "%{public}s called with null masque";
        goto LABEL_54;
      }
      goto LABEL_55;
    }
    if (!LOBYTE(v30[0]))
    {
      v16 = __nwlog_obj();
      v17 = v37;
      if (os_log_type_enabled(v16, (os_log_type_t)v37))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_masque_finalize_output_frames";
        v18 = "%{public}s called with null masque, backtrace limit exceeded";
        goto LABEL_54;
      }
      goto LABEL_55;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v16 = __nwlog_obj();
    v17 = v37;
    v22 = os_log_type_enabled(v16, (os_log_type_t)v37);
    if (!backtrace_string)
    {
      if (v22)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_masque_finalize_output_frames";
        v18 = "%{public}s called with null masque, no backtrace";
        goto LABEL_54;
      }
      goto LABEL_55;
    }
    if (v22)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_protocol_masque_finalize_output_frames";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = backtrace_string;
      v21 = "%{public}s called with null masque, dumping backtrace:%{public}s";
      goto LABEL_44;
    }
    goto LABEL_45;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_protocol_masque_finalize_output_frames";
  v15 = (char *)_os_log_send_and_compose_impl();
  LOBYTE(v37) = 16;
  LOBYTE(v30[0]) = 0;
  if (!__nwlog_fault(v15, &v37, v30))
    goto LABEL_55;
  if (v37 != 17)
  {
    if (!LOBYTE(v30[0]))
    {
      v16 = __nwlog_obj();
      v17 = v37;
      if (os_log_type_enabled(v16, (os_log_type_t)v37))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_masque_finalize_output_frames";
        v18 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_54;
      }
      goto LABEL_55;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v16 = __nwlog_obj();
    v17 = v37;
    v20 = os_log_type_enabled(v16, (os_log_type_t)v37);
    if (!backtrace_string)
    {
      if (v20)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_masque_finalize_output_frames";
        v18 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_54;
      }
      goto LABEL_55;
    }
    if (v20)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_protocol_masque_finalize_output_frames";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = backtrace_string;
      v21 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_44:
      _os_log_impl(&dword_182FBE000, v16, v17, v21, buf, 0x16u);
    }
LABEL_45:
    free(backtrace_string);
    goto LABEL_55;
  }
  v16 = __nwlog_obj();
  v17 = v37;
  if (os_log_type_enabled(v16, (os_log_type_t)v37))
  {
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_masque_finalize_output_frames";
    v18 = "%{public}s called with null protocol";
LABEL_54:
    _os_log_impl(&dword_182FBE000, v16, v17, v18, buf, 0xCu);
  }
LABEL_55:
  if (v15)
    free(v15);
  return 0;
}

uint64_t nw_protocol_masque_get_input_frames(nw_protocol *a1, nw_protocol *a2, unsigned int a3, unsigned int a4, unsigned int a5, nw_frame_array_s *a6)
{
  void *handle;
  nw_protocol *output_handler;
  id v11;
  nw_frame *tqh_first;
  nw_frame *v13;
  char v14;
  uint64_t v15;
  nw_frame *v16;
  unsigned __int8 *v17;
  unsigned int v18;
  unint64_t v20;
  unint64_t v21;
  unsigned __int8 *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  nw_frame **v31;
  dispatch_data_s *v32;
  dispatch_data_s *v33;
  int v34;
  char *v35;
  NSObject *v36;
  os_log_type_t v37;
  const char *v38;
  char *backtrace_string;
  _BOOL4 v40;
  const char *v41;
  _BOOL4 v42;
  _BOOL8 connection_id_capsule;
  char v44;
  int v45;
  uint64_t v46;
  const char *v47;
  NSObject *v48;
  os_log_type_t v49;
  uint32_t v50;
  NSObject *v52;
  uint64_t v53;
  NSObject *v54;
  _QWORD v55[2];
  uint64_t (*v56)(uint64_t, uint64_t);
  void *v57;
  void *v58;
  uint64_t v59;
  nw_frame **v60;
  _QWORD v61[2];
  uint64_t (*v62)(_QWORD *);
  void *v63;
  os_log_type_t *v64;
  id v65;
  void *v66;
  nw_frame_array_s *v67;
  os_log_type_t type[8];
  os_log_type_t *v69;
  uint64_t v70;
  int v71;
  uint8_t buf[4];
  const char *v73;
  __int16 v74;
  const char *v75;
  __int16 v76;
  const char *v77;
  __int16 v78;
  int v79;
  uint64_t v80;

  v80 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v73 = "nw_protocol_masque_get_input_frames";
    v35 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v59) = 0;
    if (!__nwlog_fault(v35, type, &v59))
      goto LABEL_85;
    if (type[0] != OS_LOG_TYPE_FAULT)
    {
      if (!(_BYTE)v59)
      {
        v36 = __nwlog_obj();
        v37 = type[0];
        if (!os_log_type_enabled(v36, type[0]))
          goto LABEL_85;
        *(_DWORD *)buf = 136446210;
        v73 = "nw_protocol_masque_get_input_frames";
        v38 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_84;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v36 = __nwlog_obj();
      v37 = type[0];
      v40 = os_log_type_enabled(v36, type[0]);
      if (!backtrace_string)
      {
        if (!v40)
          goto LABEL_85;
        *(_DWORD *)buf = 136446210;
        v73 = "nw_protocol_masque_get_input_frames";
        v38 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_84;
      }
      if (v40)
      {
        *(_DWORD *)buf = 136446466;
        v73 = "nw_protocol_masque_get_input_frames";
        v74 = 2082;
        v75 = backtrace_string;
        v41 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_68:
        _os_log_impl(&dword_182FBE000, v36, v37, v41, buf, 0x16u);
      }
LABEL_69:
      free(backtrace_string);
      goto LABEL_85;
    }
    v36 = __nwlog_obj();
    v37 = type[0];
    if (!os_log_type_enabled(v36, type[0]))
      goto LABEL_85;
    *(_DWORD *)buf = 136446210;
    v73 = "nw_protocol_masque_get_input_frames";
    v38 = "%{public}s called with null protocol";
LABEL_84:
    _os_log_impl(&dword_182FBE000, v36, v37, v38, buf, 0xCu);
LABEL_85:
    if (v35)
      free(v35);
    return 0;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v73 = "nw_protocol_masque_get_input_frames";
    v35 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v59) = 0;
    if (!__nwlog_fault(v35, type, &v59))
      goto LABEL_85;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      v36 = __nwlog_obj();
      v37 = type[0];
      if (!os_log_type_enabled(v36, type[0]))
        goto LABEL_85;
      *(_DWORD *)buf = 136446210;
      v73 = "nw_protocol_masque_get_input_frames";
      v38 = "%{public}s called with null masque";
      goto LABEL_84;
    }
    if (!(_BYTE)v59)
    {
      v36 = __nwlog_obj();
      v37 = type[0];
      if (!os_log_type_enabled(v36, type[0]))
        goto LABEL_85;
      *(_DWORD *)buf = 136446210;
      v73 = "nw_protocol_masque_get_input_frames";
      v38 = "%{public}s called with null masque, backtrace limit exceeded";
      goto LABEL_84;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v36 = __nwlog_obj();
    v37 = type[0];
    v42 = os_log_type_enabled(v36, type[0]);
    if (backtrace_string)
    {
      if (v42)
      {
        *(_DWORD *)buf = 136446466;
        v73 = "nw_protocol_masque_get_input_frames";
        v74 = 2082;
        v75 = backtrace_string;
        v41 = "%{public}s called with null masque, dumping backtrace:%{public}s";
        goto LABEL_68;
      }
      goto LABEL_69;
    }
    if (!v42)
      goto LABEL_85;
    *(_DWORD *)buf = 136446210;
    v73 = "nw_protocol_masque_get_input_frames";
    v38 = "%{public}s called with null masque, no backtrace";
    goto LABEL_84;
  }
  if (*((_DWORD *)handle + 127) != 4)
    return 0;
  output_handler = a1->output_handler;
  *(_QWORD *)type = 0;
  v69 = type;
  v71 = 0;
  v70 = 0x2000000000;
  v71 = ((uint64_t (*)(void))output_handler->callbacks->get_input_frames)();
  if (*((_DWORD *)v69 + 6))
  {
    if ((*(_DWORD *)((_BYTE *)handle + 527) & 0x9000) == 0x1000 || (*(_DWORD *)((_BYTE *)handle + 527) & 0x28) != 0)
    {
      if (nw_protocol_copy_http_definition_onceToken != -1)
        dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_11_72660);
      v11 = (id)nw_protocol_copy_http_definition_http_definition;
      v61[0] = MEMORY[0x1E0C809B0];
      v61[1] = 0x40000000;
      v62 = (uint64_t (*)(_QWORD *))___ZL35nw_protocol_masque_get_input_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke;
      v63 = &unk_1E149E980;
      v66 = handle;
      v67 = a6;
      v64 = type;
      v65 = v11;
      tqh_first = a6->tqh_first;
      do
      {
        if (!tqh_first)
          break;
        v13 = (nw_frame *)*((_QWORD *)tqh_first + 4);
        v14 = v62(v61);
        tqh_first = v13;
      }
      while ((v14 & 1) != 0);
      if (v11)
        os_release(v11);
    }
  }
  v15 = *((unsigned int *)v69 + 6);
  if (!(_DWORD)v15
    || (~*(_DWORD *)((char *)handle + 527) & 0x100008) != 0
    || !*((_QWORD *)handle + 54)
    || *((_QWORD *)handle + 49))
  {
    goto LABEL_34;
  }
  v16 = a6->tqh_first;
  LODWORD(v59) = 0;
  v17 = (unsigned __int8 *)nw_frame_unclaimed_bytes((uint64_t)v16, &v59);
  if (v59 >= 7)
  {
    v18 = *v17;
    if (v18 >= 0xC0 && (v18 & 0x30) == 0)
    {
      v20 = v17[5];
      if (v20 <= 0x14)
      {
        v21 = v20 + 7;
        if (v20 + 7 < v59)
        {
          v22 = &v17[v20];
          v23 = v22[6];
          v24 = v21 + v23;
          if ((v23 - 1) <= 0x13 && v24 < v59)
          {
            *((_QWORD *)handle + 49) = dispatch_data_create(v22 + 7, v22[6], 0, 0);
            if ((*((_BYTE *)handle + 529) & 1) == 0 && gLogDatapath)
            {
              if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
                dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
              v54 = gprivacy_proxyLogObj;
              if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 136446978;
                v73 = "nw_protocol_masque_get_input_frames";
                v74 = 2082;
                v75 = (char *)handle + 531;
                v76 = 2080;
                v77 = " ";
                v78 = 1024;
                v79 = v23;
                _os_log_impl(&dword_182FBE000, v54, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sDetected a server CID of length %u", buf, 0x26u);
              }
            }
            if (nw_masque_setup_demux((uint64_t)handle, 0))
            {
              v34 = *((_DWORD *)handle + 126);
              if (v34 != 2)
              {
                if (v34 == 1)
                  nw_masque_setup_server_connect((uint64_t)handle);
                goto LABEL_33;
              }
              connection_id_capsule = nw_masque_create_connection_id_capsule(*((NSObject **)handle + 49), v32, v33);
              v44 = nw_masque_send_metadata((uint64_t)handle, connection_id_capsule, *((_QWORD *)handle + 4));
              v45 = *(_DWORD *)((char *)handle + 527);
              if ((v44 & 1) != 0)
              {
                if ((v45 & 0x10000) != 0)
                  goto LABEL_99;
                if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
                  dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
                v46 = gprivacy_proxyLogObj;
                if (!os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
                  goto LABEL_99;
                *(_DWORD *)buf = 136446722;
                v73 = "nw_protocol_masque_get_input_frames";
                v74 = 2082;
                v75 = (char *)handle + 531;
                v76 = 2080;
                v77 = " ";
                v47 = "%{public}s %{public}s%sSent REGISTER_TARGET_CID capsule";
                v48 = v46;
                v49 = OS_LOG_TYPE_DEBUG;
                v50 = 32;
              }
              else
              {
                if ((v45 & 0x10000) != 0)
                  goto LABEL_99;
                if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
                  dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
                v53 = gprivacy_proxyLogObj;
                if (!os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
                  goto LABEL_99;
                *(_DWORD *)buf = 136446466;
                v73 = (char *)handle + 531;
                v74 = 2080;
                v75 = " ";
                v47 = "%{public}s%sFailed to send REGISTER_TARGET_CID capsule";
                v48 = v53;
                v49 = OS_LOG_TYPE_ERROR;
                v50 = 22;
              }
              _os_log_impl(&dword_182FBE000, v48, v49, v47, buf, v50);
LABEL_99:
              if (connection_id_capsule)
                os_release((void *)connection_id_capsule);
            }
          }
        }
      }
    }
  }
LABEL_33:
  v15 = *((unsigned int *)v69 + 6);
LABEL_34:
  if (a5 > v15)
  {
    v26 = *((_QWORD *)handle + 20);
    if (v26)
    {
      v59 = 0;
      v60 = (nw_frame **)&v59;
      v27 = (*(uint64_t (**)(void))(*(_QWORD *)(v26 + 24) + 80))();
      if (v27 && (*((_BYTE *)handle + 529) & 1) == 0 && gLogDatapath)
      {
        if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
          dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
        v52 = gprivacy_proxyLogObj;
        if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136446978;
          v73 = "nw_protocol_masque_get_input_frames";
          v74 = 2082;
          v75 = (char *)handle + 531;
          v76 = 2080;
          v77 = " ";
          v78 = 1024;
          v79 = v27;
          _os_log_impl(&dword_182FBE000, v52, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sReceived %u frames directly from demux", buf, 0x26u);
        }
      }
      v55[0] = MEMORY[0x1E0C809B0];
      v55[1] = 0x40000000;
      v56 = ___ZL35nw_protocol_masque_get_input_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke_134;
      v57 = &__block_descriptor_tmp_135;
      v58 = handle;
      v28 = v59;
      do
      {
        if (!v28)
          break;
        v29 = *(_QWORD *)(v28 + 32);
        v30 = ((uint64_t (*)(_QWORD *))v56)(v55);
        v28 = v29;
      }
      while ((v30 & 1) != 0);
      if (v59)
      {
        *a6->tqh_last = (nw_frame *)v59;
        v31 = v60;
        *(_QWORD *)(v59 + 40) = a6->tqh_last;
        a6->tqh_last = v31;
      }
      v15 = (*((_DWORD *)v69 + 6) + v27);
      *((_DWORD *)v69 + 6) = v15;
    }
  }
  _Block_object_dispose(type, 8);
  return v15;
}

uint64_t ___ZL35nw_protocol_masque_get_input_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke(_QWORD *a1, uint64_t a2)
{
  void *v4;
  void *v5;
  _BOOL4 is_capsule;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _BYTE *v10;
  id v11;
  id v12;
  int status_code;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  NSObject *v22;
  os_log_type_t v23;
  uint32_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  char *v28;
  NSObject *v29;
  os_log_type_t v30;
  uint64_t v31;
  const char *v32;
  int v33;
  NSObject *v34;
  void *v35;
  char *backtrace_string;
  _BOOL4 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  char *v45;
  NSObject *v46;
  os_log_type_t v47;
  const char *v48;
  char *v49;
  _BOOL4 v50;
  char *v51;
  _BOOL4 v52;
  char v53;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v56;
  __int16 v57;
  const char *v58;
  __int16 v59;
  uint64_t v60;
  __int16 v61;
  uint64_t v62;
  __int16 v63;
  char *v64;
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  v4 = nw_frame_copy_metadata_for_protocol(a2, a1[5]);
  if (v4)
  {
    v5 = v4;
    is_capsule = nw_http_metadata_is_capsule(v4);
    v7 = a1[6];
    if (is_capsule)
    {
      nw_masque_handle_capsule(a1[6], v5);
      v8 = *(_QWORD *)(a2 + 32);
      v9 = *(_QWORD **)(a2 + 40);
      if (v8)
      {
        *(_QWORD *)(v8 + 40) = v9;
        v9 = *(_QWORD **)(a2 + 40);
      }
      else
      {
        *(_QWORD *)(a1[7] + 8) = v9;
      }
      *v9 = v8;
      *(_QWORD *)(a2 + 32) = 0;
      *(_QWORD *)(a2 + 40) = 0;
      v25 = *(_QWORD *)(a1[4] + 8);
      v26 = *(_DWORD *)(v25 + 24);
      *(_DWORD *)(v25 + 24) = v26 - 1;
      if (v26)
      {
LABEL_65:
        nw_frame_finalize(a2);
        goto LABEL_66;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v27 = *(unsigned int *)(*(_QWORD *)(a1[4] + 8) + 24);
      *(_DWORD *)buf = 136446978;
      v56 = "nw_protocol_masque_get_input_frames_block_invoke";
      v57 = 2082;
      v58 = "count";
      v59 = 2048;
      v60 = 1;
      v61 = 2048;
      v62 = v27;
      v28 = (char *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      v53 = 0;
      if (__nwlog_fault(v28, &type, &v53))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v29 = gLogObj;
          v30 = type;
          if (os_log_type_enabled((os_log_t)gLogObj, type))
          {
            v31 = *(unsigned int *)(*(_QWORD *)(a1[4] + 8) + 24);
            *(_DWORD *)buf = 136446978;
            v56 = "nw_protocol_masque_get_input_frames_block_invoke";
            v57 = 2082;
            v58 = "count";
            v59 = 2048;
            v60 = 1;
            v61 = 2048;
            v62 = v31;
            v32 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu";
LABEL_61:
            _os_log_impl(&dword_182FBE000, v29, v30, v32, buf, 0x2Au);
          }
        }
        else if (v53)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v29 = gLogObj;
          v30 = type;
          v37 = os_log_type_enabled((os_log_t)gLogObj, type);
          if (backtrace_string)
          {
            if (v37)
            {
              v38 = *(unsigned int *)(*(_QWORD *)(a1[4] + 8) + 24);
              *(_DWORD *)buf = 136447234;
              v56 = "nw_protocol_masque_get_input_frames_block_invoke";
              v57 = 2082;
              v58 = "count";
              v59 = 2048;
              v60 = 1;
              v61 = 2048;
              v62 = v38;
              v63 = 2082;
              v64 = backtrace_string;
              _os_log_impl(&dword_182FBE000, v29, v30, "%{public}s Underflow: %{public}s, decrement %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
            }
            free(backtrace_string);
            goto LABEL_62;
          }
          if (v37)
          {
            v43 = *(unsigned int *)(*(_QWORD *)(a1[4] + 8) + 24);
            *(_DWORD *)buf = 136446978;
            v56 = "nw_protocol_masque_get_input_frames_block_invoke";
            v57 = 2082;
            v58 = "count";
            v59 = 2048;
            v60 = 1;
            v61 = 2048;
            v62 = v43;
            v32 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, no backtrace";
            goto LABEL_61;
          }
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v29 = gLogObj;
          v30 = type;
          if (os_log_type_enabled((os_log_t)gLogObj, type))
          {
            v42 = *(unsigned int *)(*(_QWORD *)(a1[4] + 8) + 24);
            *(_DWORD *)buf = 136446978;
            v56 = "nw_protocol_masque_get_input_frames_block_invoke";
            v57 = 2082;
            v58 = "count";
            v59 = 2048;
            v60 = 1;
            v61 = 2048;
            v62 = v42;
            v32 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, backtrace limit exceeded";
            goto LABEL_61;
          }
        }
      }
LABEL_62:
      if (v28)
        free(v28);
      *(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = 0;
      goto LABEL_65;
    }
    v10 = (_BYTE *)(v7 + 527);
    if ((*(_DWORD *)(v7 + 527) & 0x9000) != 0x1000)
    {
LABEL_66:
      os_release(v5);
      return 1;
    }
    if (nw_protocol_metadata_is_http(v5))
    {
      v11 = nw_http_metadata_copy_response(v5);
      if (v11)
      {
        v12 = v11;
        status_code = _nw_http_response_get_status_code();

        if ((status_code - 200) <= 0x63)
        {
          if ((*v10 & 2) != 0 && !uuid_is_null((const unsigned __int8 *)(v7 + 272)))
          {
            v14 = *(void **)(v7 + 456);
            if (v14)
              nw_http_connection_metadata_set_cached_token(v14, 0, 0);
            nw_path_report_error_to_agent(*(void **)(v7 + 336), (const unsigned __int8 *)(v7 + 272), 0);
          }
          v15 = *(_QWORD *)(v7 + 288);
          v16 = mach_continuous_time();
          if (v16 <= 1)
            v17 = 1;
          else
            v17 = v16;
          v18 = nw_delta_nanos(v15, v17);
          v19 = (v18 / 0xF4240);
          if (v18 > 0xF423FFFFFFFFFLL)
            v19 = 0xFFFFFFFFLL;
          *(_QWORD *)(v7 + 296) = v19;
          if ((*(_BYTE *)(v7 + 529) & 1) != 0)
            goto LABEL_55;
          if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
            dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
          v20 = gprivacy_proxyLogObj;
          if (!os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_INFO))
            goto LABEL_55;
          *(_DWORD *)buf = 136446466;
          v56 = (const char *)(v7 + 531);
          v57 = 2080;
          v58 = " ";
          v21 = "%{public}s%sReceived 200 OK for proxied message";
          v22 = v20;
          v23 = OS_LOG_TYPE_INFO;
          v24 = 22;
          goto LABEL_51;
        }
        v33 = *(_DWORD *)v10;
        if (!status_code)
        {
          if ((v33 & 0x10000) != 0)
            goto LABEL_55;
          if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
            dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
          v39 = gprivacy_proxyLogObj;
          if (!os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
            goto LABEL_55;
          *(_DWORD *)buf = 136446722;
          v56 = "nw_masque_handle_message_response";
          v57 = 2082;
          v58 = (const char *)(v7 + 531);
          v59 = 2080;
          v60 = (uint64_t)" ";
          v21 = "%{public}s %{public}s%sReceived no response code, ignoring";
          v22 = v39;
          v23 = OS_LOG_TYPE_DEBUG;
          v24 = 32;
LABEL_51:
          _os_log_impl(&dword_182FBE000, v22, v23, v21, buf, v24);
LABEL_55:
          *(_DWORD *)v10 |= 0x8000u;
LABEL_56:
          os_release(v12);
          goto LABEL_66;
        }
        if ((v33 & 0x10000) == 0)
        {
          if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
            dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
          v34 = gprivacy_proxyLogObj;
          if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446722;
            v56 = (const char *)(v7 + 531);
            v57 = 2080;
            v58 = " ";
            v59 = 1024;
            LODWORD(v60) = status_code;
            _os_log_impl(&dword_182FBE000, v34, OS_LOG_TYPE_ERROR, "%{public}s%sReceived response code %u for proxied message", buf, 0x1Cu);
          }
        }
        if (status_code == 401)
        {
          if (!uuid_is_null((const unsigned __int8 *)(v7 + 272)))
          {
            v35 = *(void **)(v7 + 456);
            if (v35)
              nw_http_connection_metadata_mark_cached_token_failed(v35);
            nw_path_report_error_to_agent(*(void **)(v7 + 336), (const unsigned __int8 *)(v7 + 272), 80);
            nw_masque_mark_failed_with_error(v7, 80);
            goto LABEL_56;
          }
        }
        else if ((status_code - 400) > 0x63)
        {
          v40 = v7;
          if ((status_code - 500) > 0x63)
            v41 = 1101;
          else
            v41 = 1105;
          goto LABEL_54;
        }
        v40 = v7;
        v41 = 1104;
LABEL_54:
        nw_masque_report_error_to_proxy_agent(v40, v41);
        goto LABEL_55;
      }
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      v56 = "nw_masque_handle_message_response";
      v45 = (char *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      v53 = 0;
      if (!__nwlog_fault(v45, &type, &v53))
        goto LABEL_99;
      if (type == OS_LOG_TYPE_FAULT)
      {
        v46 = __nwlog_obj();
        v47 = type;
        if (!os_log_type_enabled(v46, type))
          goto LABEL_99;
        *(_DWORD *)buf = 136446210;
        v56 = "nw_masque_handle_message_response";
        v48 = "%{public}s called with null response";
        goto LABEL_98;
      }
      if (!v53)
      {
        v46 = __nwlog_obj();
        v47 = type;
        if (!os_log_type_enabled(v46, type))
          goto LABEL_99;
        *(_DWORD *)buf = 136446210;
        v56 = "nw_masque_handle_message_response";
        v48 = "%{public}s called with null response, backtrace limit exceeded";
        goto LABEL_98;
      }
      v51 = (char *)__nw_create_backtrace_string();
      v46 = __nwlog_obj();
      v47 = type;
      v52 = os_log_type_enabled(v46, type);
      if (v51)
      {
        if (v52)
        {
          *(_DWORD *)buf = 136446466;
          v56 = "nw_masque_handle_message_response";
          v57 = 2082;
          v58 = v51;
          _os_log_impl(&dword_182FBE000, v46, v47, "%{public}s called with null response, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v51);
        if (!v45)
          goto LABEL_66;
        goto LABEL_100;
      }
      if (v52)
      {
        *(_DWORD *)buf = 136446210;
        v56 = "nw_masque_handle_message_response";
        v48 = "%{public}s called with null response, no backtrace";
LABEL_98:
        _os_log_impl(&dword_182FBE000, v46, v47, v48, buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      v56 = "nw_masque_handle_message_response";
      v45 = (char *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      v53 = 0;
      if (!__nwlog_fault(v45, &type, &v53))
        goto LABEL_99;
      if (type == OS_LOG_TYPE_FAULT)
      {
        v46 = __nwlog_obj();
        v47 = type;
        if (!os_log_type_enabled(v46, type))
          goto LABEL_99;
        *(_DWORD *)buf = 136446210;
        v56 = "nw_masque_handle_message_response";
        v48 = "%{public}s called with null nw_protocol_metadata_is_http(metadata)";
        goto LABEL_98;
      }
      if (!v53)
      {
        v46 = __nwlog_obj();
        v47 = type;
        if (!os_log_type_enabled(v46, type))
          goto LABEL_99;
        *(_DWORD *)buf = 136446210;
        v56 = "nw_masque_handle_message_response";
        v48 = "%{public}s called with null nw_protocol_metadata_is_http(metadata), backtrace limit exceeded";
        goto LABEL_98;
      }
      v49 = (char *)__nw_create_backtrace_string();
      v46 = __nwlog_obj();
      v47 = type;
      v50 = os_log_type_enabled(v46, type);
      if (!v49)
      {
        if (!v50)
          goto LABEL_99;
        *(_DWORD *)buf = 136446210;
        v56 = "nw_masque_handle_message_response";
        v48 = "%{public}s called with null nw_protocol_metadata_is_http(metadata), no backtrace";
        goto LABEL_98;
      }
      if (v50)
      {
        *(_DWORD *)buf = 136446466;
        v56 = "nw_masque_handle_message_response";
        v57 = 2082;
        v58 = v49;
        _os_log_impl(&dword_182FBE000, v46, v47, "%{public}s called with null nw_protocol_metadata_is_http(metadata), dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v49);
    }
LABEL_99:
    if (!v45)
      goto LABEL_66;
LABEL_100:
    free(v45);
    goto LABEL_66;
  }
  return 1;
}

void nw_masque_setup_server_connect(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  id v6;
  _BOOL8 v7;
  char v8;
  int v9;
  NSObject *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  const char *v15;
  char *backtrace_string;
  _BOOL4 v17;
  NSObject *v18;
  NSObject *v19;
  uint64_t v20;
  char v21;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v24;
  __int16 v25;
  const char *v26;
  __int16 v27;
  const char *v28;
  __int16 v29;
  _QWORD *v30;
  __int16 v31;
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 320))
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v24 = "nw_masque_setup_server_connect";
    v12 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v21 = 0;
    if (!__nwlog_fault(v12, &type, &v21))
      goto LABEL_54;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v13 = __nwlog_obj();
      v14 = type;
      if (!os_log_type_enabled(v13, type))
        goto LABEL_54;
      *(_DWORD *)buf = 136446210;
      v24 = "nw_masque_setup_server_connect";
      v15 = "%{public}s called with null masque->parameters";
    }
    else if (v21)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v13 = __nwlog_obj();
      v14 = type;
      v17 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          v24 = "nw_masque_setup_server_connect";
          v25 = 2082;
          v26 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s called with null masque->parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_54;
      }
      if (!v17)
      {
LABEL_54:
        if (v12)
          free(v12);
        return;
      }
      *(_DWORD *)buf = 136446210;
      v24 = "nw_masque_setup_server_connect";
      v15 = "%{public}s called with null masque->parameters, no backtrace";
    }
    else
    {
      v13 = __nwlog_obj();
      v14 = type;
      if (!os_log_type_enabled(v13, type))
        goto LABEL_54;
      *(_DWORD *)buf = 136446210;
      v24 = "nw_masque_setup_server_connect";
      v15 = "%{public}s called with null masque->parameters, backtrace limit exceeded";
    }
    _os_log_impl(&dword_182FBE000, v13, v14, v15, buf, 0xCu);
    goto LABEL_54;
  }
  if (!*(_QWORD *)(a1 + 392) || *(_DWORD *)(a1 + 512))
    return;
  v2 = (_QWORD *)a1;
  while (1)
  {
    v2 = (_QWORD *)v2[4];
    if (!v2)
      break;
    v3 = (_QWORD *)v2[2];
    if (nw_protocol_http3_identifier::onceToken[0] != -1)
      dispatch_once(nw_protocol_http3_identifier::onceToken, &__block_literal_global_10);
    if (!nw_protocols_are_equal(v3, &nw_protocol_http3_identifier::http3_protocol_identifier))
    {
      v4 = (_QWORD *)v2[2];
      if (nw_protocol_http2_identifier::onceToken[0] != -1)
        dispatch_once(nw_protocol_http2_identifier::onceToken, &__block_literal_global_83230);
      if (!nw_protocols_are_equal(v4, &nw_protocol_http2_identifier::http2_protocol_identifier))
        continue;
    }
    if ((*(_BYTE *)(a1 + 529) & 1) == 0 && gLogDatapath)
    {
      if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
        dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
      v18 = gprivacy_proxyLogObj;
      if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446978;
        v24 = "nw_masque_setup_server_connect";
        v25 = 2082;
        v26 = (const char *)(a1 + 531);
        v27 = 2080;
        v28 = " ";
        v29 = 2048;
        v30 = v2;
        _os_log_impl(&dword_182FBE000, v18, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sFound HTTP protocol %p", buf, 0x2Au);
      }
    }
    v5 = (_QWORD *)v2[3];
    if (v5 && *v5 && v5[3])
    {
      if (!*(_QWORD *)(a1 + 416) && v5[14])
      {
        v6 = (id)nw_protocol_get_parameters((uint64_t)v2);
        v7 = -[NWConcrete_nw_parameters initWithParameters:stripConnected:shallowCopy:]((id *)[NWConcrete_nw_parameters alloc], v6, 0, 1);

        *(_QWORD *)(a1 + 416) = v7;
      }
      nw_protocol_set_input_handler(a1 + 64, *(_QWORD *)(a1 + 48));
      *(_OWORD *)(a1 + 64) = *(_OWORD *)a1;
      v8 = (*(uint64_t (**)(_QWORD *, uint64_t))v2[3])(v2, a1 + 64);
      v9 = *(_DWORD *)(a1 + 527);
      if ((v8 & 1) != 0)
      {
        if ((v9 & 0x10000) == 0 && gLogDatapath)
        {
          if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
            dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
          v19 = gprivacy_proxyLogObj;
          if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
          {
            v20 = *(_QWORD *)(a1 + 96);
            *(_DWORD *)buf = 136447234;
            v24 = "nw_masque_setup_server_connect";
            v25 = 2082;
            v26 = (const char *)(a1 + 531);
            v27 = 2080;
            v28 = " ";
            v29 = 2048;
            v30 = (_QWORD *)(a1 + 64);
            v31 = 2048;
            v32 = v20;
            _os_log_impl(&dword_182FBE000, v19, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sserver_connect_protocol %p output_handler %p", buf, 0x34u);
          }
        }
        (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 24) + 24))();
        return;
      }
      if ((v9 & 0x10000) == 0)
      {
        if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
          dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
        v10 = gprivacy_proxyLogObj;
        if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446466;
          v24 = (const char *)(a1 + 531);
          v25 = 2080;
          v26 = " ";
          v11 = "%{public}s%sFailed to add server connect stream";
          goto LABEL_35;
        }
      }
    }
    return;
  }
  if ((*(_BYTE *)(a1 + 529) & 1) == 0)
  {
    if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
      dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
    v10 = gprivacy_proxyLogObj;
    if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      v24 = (const char *)(a1 + 531);
      v25 = 2080;
      v26 = " ";
      v11 = "%{public}s%sFailed to find HTTP protocol";
LABEL_35:
      _os_log_impl(&dword_182FBE000, v10, OS_LOG_TYPE_ERROR, v11, buf, 0x16u);
    }
  }
}

void sub_18361324C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL nw_masque_create_connection_id_capsule(NSObject *a1, dispatch_data_s *a2, dispatch_data_s *a3)
{
  size_t size;
  size_t v5;
  size_t v6;
  void *v7;
  _BOOL8 result;
  NSObject *alloc;
  id *metadata_for_capsule;
  unint64_t __src;
  _QWORD v12[4];
  _QWORD v13[4];
  _BYTE applier[24];
  void *v15;
  _QWORD *v16;
  _QWORD *v17;
  size_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  size = dispatch_data_get_size(a1);
  v5 = size;
  __src = 0;
  if (size > 0x3F)
  {
    if (size >> 14)
    {
      if (size >> 30)
      {
        if (size >> 62)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
          *(_DWORD *)applier = 136446466;
          *(_QWORD *)&applier[4] = "_http_vle_encode";
          *(_WORD *)&applier[12] = 2048;
          *(_QWORD *)&applier[14] = v5;
          v7 = (void *)_os_log_send_and_compose_impl();
          result = __nwlog_abort((uint64_t)v7);
          if (result)
          {
            __break(1u);
            return result;
          }
          free(v7);
          v6 = 0;
        }
        else
        {
          __src = bswap64(size | 0xC000000000000000);
          v6 = 8;
        }
      }
      else
      {
        __src = bswap32(size | 0x80000000);
        v6 = 4;
      }
    }
    else
    {
      __src = bswap32(size | 0x4000) >> 16;
      v6 = 2;
    }
  }
  else
  {
    __src = size;
    v6 = 1;
  }
  alloc = dispatch_data_create_alloc();
  memcpy(0, &__src, v6);
  v13[0] = 0;
  v13[1] = v13;
  v13[2] = 0x2000000000;
  v13[3] = 0;
  v12[0] = 0;
  v12[1] = v12;
  v12[2] = 0x2000000000;
  v12[3] = v6;
  if (a1)
  {
    *(_QWORD *)applier = MEMORY[0x1E0C809B0];
    *(_QWORD *)&applier[8] = 0x40000000;
    *(_QWORD *)&applier[16] = __nw_dispatch_data_copyout_block_invoke;
    v15 = &unk_1E14A3448;
    v17 = v12;
    v18 = v5;
    v16 = v13;
    dispatch_data_apply(a1, applier);
  }
  _Block_object_dispose(v12, 8);
  _Block_object_dispose(v13, 8);
  *(_BYTE *)(v6 + v5) = 0;
  metadata_for_capsule = nw_http_create_metadata_for_capsule(16770049, alloc);
  if (alloc)
    dispatch_release(alloc);
  return (BOOL)metadata_for_capsule;
}

uint64_t ___ZL35nw_protocol_masque_get_input_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke_134(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  NSObject *v7;
  NSObject *v8;
  size_t size;
  size_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  NSObject *v15;
  uint64_t v16;
  const char *v17;
  BOOL v18;
  const char *v19;
  unsigned int v20;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  const char *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v20 = 0;
  v3 = nw_frame_unclaimed_bytes(a2, &v20);
  if (v3)
  {
    v4 = v20;
    if (v20)
    {
      v5 = (_BYTE *)v3;
      v6 = *(_QWORD *)(a1 + 32);
      v7 = *(NSObject **)(v6 + 384);
      if (v7)
      {
        v8 = *(NSObject **)(v6 + 400);
        if (v8)
        {
          size = dispatch_data_get_size(v7);
          if (size + 1 < v4)
          {
            v10 = size;
            if (dispatch_data_get_size(v8) == size && (*v5 & 0xC0) == 0x40)
            {
              v11 = (uint64_t)(v5 + 1);
              v12 = dispatch_data_create(v5 + 1, v10, 0, (dispatch_block_t)*MEMORY[0x1E0C80CF0]);
              if (nw_dispatch_data_is_equal(v12, *(NSObject **)(*(_QWORD *)(a1 + 32) + 400)))
              {
                nw_dispatch_data_copyout(*(NSObject **)(*(_QWORD *)(a1 + 32) + 384), v11, v10);
                v13 = *(_QWORD *)(a1 + 32);
                if (!v13 || (*(_BYTE *)(v13 + 529) & 1) == 0)
                {
                  if (gLogDatapath)
                  {
                    if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
                      dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
                    v15 = gprivacy_proxyLogObj;
                    if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
                    {
                      v16 = *(_QWORD *)(a1 + 32);
                      v17 = "";
                      v18 = v16 == 0;
                      if (v16)
                        v19 = (const char *)(v16 + 531);
                      else
                        v19 = "";
                      *(_DWORD *)buf = 136446722;
                      v22 = "nw_protocol_masque_get_input_frames_block_invoke";
                      if (!v18)
                        v17 = " ";
                      v23 = 2082;
                      v24 = v19;
                      v25 = 2080;
                      v26 = v17;
                      _os_log_impl(&dword_182FBE000, v15, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sReplacing with real client CID before processing", buf, 0x20u);
                    }
                  }
                }
              }
              if (v12)
                dispatch_release(v12);
            }
          }
        }
      }
    }
  }
  return 1;
}

void nw_masque_handle_capsule(uint64_t a1, void *a2)
{
  uint64_t capsule_type;
  NSObject *v5;
  NSObject *v6;
  uint64_t v7;
  const char *v8;
  NSObject *v9;
  os_log_type_t v10;
  NSObject *v11;
  const char *v12;
  NSObject *v13;
  void *v14;
  uint64_t v15;
  NSObject *v16;
  const char *v17;
  uint64_t v18;
  NSObject *v19;
  size_t size;
  int v21;
  _DWORD *v22;
  int v23;
  size_t v24;
  unint64_t v25;
  NSObject *subrange;
  NSObject *v27;
  BOOL is_equal;
  int v29;
  NSObject *v30;
  size_t v31;
  size_t v32;
  NSObject *v33;
  NSObject *v34;
  NSObject *v35;
  uint64_t v36;
  size_t v37;
  size_t v38;
  NSObject *v39;
  dispatch_data_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  size_t v44;
  unint64_t v45;
  nw_endpoint_t v46;
  NSObject *v47;
  const char *logging_description;
  void *v49;
  nw_endpoint_t v50;
  NSObject *v51;
  const char *v52;
  void *v53;
  NSObject *v54;
  NSObject *v55;
  uint64_t v56;
  char *v57;
  size_t v58;
  NSObject *v59;
  size_t v60;
  dispatch_data_t v61;
  size_t v62;
  nw_endpoint_t v63;
  nw_endpoint_t v64;
  NSObject *v65;
  const char *v66;
  const char *v67;
  void *v68;
  void *v69;
  nw_endpoint_t v70;
  nw_endpoint_t v71;
  NSObject *v72;
  const char *v73;
  const char *v74;
  void *v75;
  void *v76;
  uint64_t v77;
  const char *v78;
  NSObject *v79;
  uint32_t v80;
  NSObject *v81;
  NSObject *v82;
  uint64_t v83;
  NSObject *v84;
  char *v85;
  NSObject *v86;
  os_log_type_t sa_len;
  const char *v88;
  char *backtrace_string;
  _BOOL4 v90;
  char *v91;
  _BOOL4 v92;
  const char *v93;
  _BOOL4 v94;
  _BOOL4 v95;
  NSObject *v96;
  uint64_t v97;
  _QWORD v98[8];
  sockaddr length[2];
  __int16 v100;
  _BYTE buf[24];
  const char *v102;
  __int128 v103;
  uint64_t v104;
  _BYTE *v105;
  _BYTE v106[24];
  sockaddr *v107;
  uint64_t address;
  sockaddr address_8;
  uint64_t *v110;
  uint64_t v111;

  v111 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_masque_handle_capsule";
    v85 = (char *)_os_log_send_and_compose_impl();
    length[0].sa_len = 16;
    LOBYTE(address) = 0;
    if (!__nwlog_fault(v85, length, &address))
      goto LABEL_327;
    if (length[0].sa_len != 17)
    {
      if (!(_BYTE)address)
      {
        v86 = __nwlog_obj();
        sa_len = length[0].sa_len;
        if (!os_log_type_enabled(v86, (os_log_type_t)length[0].sa_len))
          goto LABEL_327;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_masque_handle_capsule";
        v88 = "%{public}s called with null masque, backtrace limit exceeded";
        goto LABEL_326;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v86 = __nwlog_obj();
      sa_len = length[0].sa_len;
      v90 = os_log_type_enabled(v86, (os_log_type_t)length[0].sa_len);
      if (!backtrace_string)
      {
        if (!v90)
          goto LABEL_327;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_masque_handle_capsule";
        v88 = "%{public}s called with null masque, no backtrace";
        goto LABEL_326;
      }
      if (v90)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_masque_handle_capsule";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v86, sa_len, "%{public}s called with null masque, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
LABEL_327:
      if (v85)
        goto LABEL_328;
      return;
    }
    v86 = __nwlog_obj();
    sa_len = length[0].sa_len;
    if (!os_log_type_enabled(v86, (os_log_type_t)length[0].sa_len))
      goto LABEL_327;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_masque_handle_capsule";
    v88 = "%{public}s called with null masque";
    goto LABEL_326;
  }
  if (!nw_protocol_metadata_is_http(a2))
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_masque_handle_capsule";
    v85 = (char *)_os_log_send_and_compose_impl();
    length[0].sa_len = 16;
    LOBYTE(address) = 0;
    if (!__nwlog_fault(v85, length, &address))
      goto LABEL_327;
    if (length[0].sa_len != 17)
    {
      if (!(_BYTE)address)
      {
        v86 = __nwlog_obj();
        sa_len = length[0].sa_len;
        if (!os_log_type_enabled(v86, (os_log_type_t)length[0].sa_len))
          goto LABEL_327;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_masque_handle_capsule";
        v88 = "%{public}s called with null nw_protocol_metadata_is_http(metadata), backtrace limit exceeded";
        goto LABEL_326;
      }
      v91 = (char *)__nw_create_backtrace_string();
      v86 = __nwlog_obj();
      sa_len = length[0].sa_len;
      v92 = os_log_type_enabled(v86, (os_log_type_t)length[0].sa_len);
      if (!v91)
      {
        if (!v92)
          goto LABEL_327;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_masque_handle_capsule";
        v88 = "%{public}s called with null nw_protocol_metadata_is_http(metadata), no backtrace";
        goto LABEL_326;
      }
      if (!v92)
        goto LABEL_308;
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_masque_handle_capsule";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v91;
      v93 = "%{public}s called with null nw_protocol_metadata_is_http(metadata), dumping backtrace:%{public}s";
      goto LABEL_307;
    }
    v86 = __nwlog_obj();
    sa_len = length[0].sa_len;
    if (!os_log_type_enabled(v86, (os_log_type_t)length[0].sa_len))
      goto LABEL_327;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_masque_handle_capsule";
    v88 = "%{public}s called with null nw_protocol_metadata_is_http(metadata)";
LABEL_326:
    _os_log_impl(&dword_182FBE000, v86, sa_len, v88, buf, 0xCu);
    goto LABEL_327;
  }
  if (!nw_http_metadata_is_capsule(a2))
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_masque_handle_capsule";
    v85 = (char *)_os_log_send_and_compose_impl();
    length[0].sa_len = 16;
    LOBYTE(address) = 0;
    if (!__nwlog_fault(v85, length, &address))
      goto LABEL_327;
    if (length[0].sa_len == 17)
    {
      v86 = __nwlog_obj();
      sa_len = length[0].sa_len;
      if (!os_log_type_enabled(v86, (os_log_type_t)length[0].sa_len))
        goto LABEL_327;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_masque_handle_capsule";
      v88 = "%{public}s called with null nw_http_metadata_is_capsule(metadata)";
      goto LABEL_326;
    }
    if (!(_BYTE)address)
    {
      v86 = __nwlog_obj();
      sa_len = length[0].sa_len;
      if (!os_log_type_enabled(v86, (os_log_type_t)length[0].sa_len))
        goto LABEL_327;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_masque_handle_capsule";
      v88 = "%{public}s called with null nw_http_metadata_is_capsule(metadata), backtrace limit exceeded";
      goto LABEL_326;
    }
    v91 = (char *)__nw_create_backtrace_string();
    v86 = __nwlog_obj();
    sa_len = length[0].sa_len;
    v94 = os_log_type_enabled(v86, (os_log_type_t)length[0].sa_len);
    if (!v91)
    {
      if (!v94)
        goto LABEL_327;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_masque_handle_capsule";
      v88 = "%{public}s called with null nw_http_metadata_is_capsule(metadata), no backtrace";
      goto LABEL_326;
    }
    if (!v94)
      goto LABEL_308;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "nw_masque_handle_capsule";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v91;
    v93 = "%{public}s called with null nw_http_metadata_is_capsule(metadata), dumping backtrace:%{public}s";
LABEL_307:
    _os_log_impl(&dword_182FBE000, v86, sa_len, v93, buf, 0x16u);
    goto LABEL_308;
  }
  capsule_type = nw_http_metadata_get_capsule_type(a2);
  v5 = nw_http_metadata_copy_capsule_data(a2);
  if (v5)
  {
    v6 = v5;
    if (capsule_type > 16770303)
    {
      if (capsule_type == 16770304)
      {
        if ((*(_BYTE *)(a1 + 529) & 1) == 0)
        {
          if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
            dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
          v11 = gprivacy_proxyLogObj;
          if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = a1 + 531;
            *(_WORD *)&buf[12] = 2080;
            *(_QWORD *)&buf[14] = " ";
            v12 = "%{public}s%sReceived unexpected REGISTER_DEMUX_PATTERN capsule";
LABEL_26:
            _os_log_impl(&dword_182FBE000, v11, OS_LOG_TYPE_ERROR, v12, buf, 0x16u);
          }
        }
LABEL_27:
        nw_masque_mark_failed_with_error(a1, 94);
        goto LABEL_266;
      }
      if (capsule_type != 16770305)
      {
        if (capsule_type == 16770307)
        {
          if ((*(_BYTE *)(a1 + 529) & 1) != 0)
            goto LABEL_266;
          if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
            dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
          v7 = gprivacy_proxyLogObj;
          if (!os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
            goto LABEL_266;
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)&buf[4] = "nw_masque_handle_capsule";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = a1 + 531;
          *(_WORD *)&buf[22] = 2080;
          v102 = " ";
          v8 = "%{public}s %{public}s%sReceived ACK_LISTENER_DEMUX capsule, ignoring";
LABEL_14:
          v9 = v7;
          v10 = OS_LOG_TYPE_DEBUG;
          goto LABEL_61;
        }
LABEL_43:
        if ((*(_BYTE *)(a1 + 529) & 1) != 0)
          goto LABEL_266;
        if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
          dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
        v15 = gprivacy_proxyLogObj;
        if (!os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
          goto LABEL_266;
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = a1 + 531;
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = " ";
        *(_WORD *)&buf[22] = 2048;
        v102 = (const char *)capsule_type;
        v8 = "%{public}s%sUnknown capsule type %llx";
LABEL_48:
        v9 = v15;
LABEL_60:
        v10 = OS_LOG_TYPE_ERROR;
LABEL_61:
        _os_log_impl(&dword_182FBE000, v9, v10, v8, buf, 0x20u);
        goto LABEL_266;
      }
      if ((*(_BYTE *)(a1 + 529) & 1) == 0)
      {
        if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
          dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
        v13 = gprivacy_proxyLogObj;
        if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)&buf[4] = "nw_masque_handle_capsule";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = a1 + 531;
          *(_WORD *)&buf[22] = 2080;
          v102 = " ";
          _os_log_impl(&dword_182FBE000, v13, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sReceived ACK_DEMUX capsule", buf, 0x20u);
        }
      }
      v14 = *(void **)(a1 + 448);
      if (v14)
      {
        if (!dispatch_data_get_size(v6))
        {
          if ((*(_BYTE *)(a1 + 529) & 1) != 0)
            goto LABEL_266;
          if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
            dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
          v18 = gprivacy_proxyLogObj;
          if (!os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
            goto LABEL_266;
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)&buf[4] = a1 + 531;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = " ";
          *(_WORD *)&buf[22] = 2048;
          v102 = 0;
          v8 = "%{public}s%sReceived short ACK_DEMUX_PATTERN capsule (%zu bytes)";
LABEL_59:
          v9 = v18;
          goto LABEL_60;
        }
        *(_QWORD *)&length[0].sa_len = 0;
        *(_QWORD *)&length[0].sa_data[6] = length;
        length[1] = (sockaddr)0x2000000000uLL;
        v98[0] = MEMORY[0x1E0C809B0];
        v98[1] = 0x40000000;
        v98[2] = ___ZL24nw_masque_handle_capsuleP9nw_masqueP20nw_protocol_metadata_block_invoke;
        v98[3] = &unk_1E149E9C8;
        v98[4] = length;
        v98[5] = v6;
        v98[6] = a1;
        *(_QWORD *)buf = MEMORY[0x1E0C809B0];
        *(_QWORD *)&buf[8] = 0x40000000;
        *(_QWORD *)&buf[16] = __nw_demux_options_enumerate_patterns_block_invoke;
        v102 = (const char *)&unk_1E149DF30;
        *(_QWORD *)&v103 = v98;
        nw_protocol_options_access_handle(v14, buf);
        *(_DWORD *)(a1 + 527) |= 0x100400u;
        _Block_object_dispose(length, 8);
LABEL_266:
        dispatch_release(v6);
        goto LABEL_267;
      }
      if ((*(_BYTE *)(a1 + 529) & 1) != 0)
        goto LABEL_266;
      if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
        dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
      v16 = gprivacy_proxyLogObj;
      if (!os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
        goto LABEL_266;
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = a1 + 531;
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = " ";
      v17 = "%{public}s%sReceived ACK_DEMUX_PATTERN capsule without a stored client demux options, ignoring";
LABEL_252:
      _os_log_impl(&dword_182FBE000, v16, OS_LOG_TYPE_ERROR, v17, buf, 0x16u);
      goto LABEL_266;
    }
    switch(capsule_type)
    {
      case 16770048:
        if ((*(_BYTE *)(a1 + 529) & 1) != 0)
          goto LABEL_27;
        if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
          dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
        v11 = gprivacy_proxyLogObj;
        if (!os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
          goto LABEL_27;
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = a1 + 531;
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = " ";
        v12 = "%{public}s%sReceived unexpected REGISTER_CLIENT_CID capsule";
        goto LABEL_26;
      case 16770049:
        if ((*(_BYTE *)(a1 + 529) & 1) != 0)
          goto LABEL_27;
        if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
          dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
        v11 = gprivacy_proxyLogObj;
        if (!os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
          goto LABEL_27;
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = a1 + 531;
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = " ";
        v12 = "%{public}s%sReceived unexpected REGISTER_TARGET_CID capsule";
        goto LABEL_26;
      case 16770050:
        v19 = *(NSObject **)(a1 + 384);
        if (!v19)
        {
          if ((*(_BYTE *)(a1 + 529) & 1) == 0)
          {
            if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
              dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
            v16 = gprivacy_proxyLogObj;
            if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = a1 + 531;
              *(_WORD *)&buf[12] = 2080;
              *(_QWORD *)&buf[14] = " ";
              v17 = "%{public}s%sReceived ACK_CLIENT_CID capsule without a stored client CID, ignoring";
              goto LABEL_252;
            }
          }
          goto LABEL_266;
        }
        if (v19 != v5)
        {
          size = dispatch_data_get_size(*(dispatch_data_t *)(a1 + 384));
          if (size == dispatch_data_get_size(v6))
          {
            *(_QWORD *)&length[0].sa_len = 0;
            *(_QWORD *)&length[0].sa_data[6] = length;
            *(_QWORD *)&length[1].sa_len = 0x2000000000;
            length[1].sa_data[6] = 1;
            *(_QWORD *)buf = MEMORY[0x1E0C809B0];
            *(_QWORD *)&buf[8] = 0x40000000;
            *(_QWORD *)&buf[16] = __nw_dispatch_data_is_equal_block_invoke;
            v102 = (const char *)&unk_1E14A3500;
            *(_QWORD *)&v103 = length;
            *((_QWORD *)&v103 + 1) = v6;
            dispatch_data_apply(v19, buf);
            v21 = *(unsigned __int8 *)(*(_QWORD *)&length[0].sa_data[6] + 24);
            _Block_object_dispose(length, 8);
            v22 = (_DWORD *)(a1 + 527);
            v23 = *(_DWORD *)(a1 + 527);
            if (v21)
            {
              if ((v23 & 0x10000) != 0)
                goto LABEL_219;
              goto LABEL_215;
            }
            if ((v23 & 0x10000) != 0)
              goto LABEL_266;
          }
          else if ((*(_BYTE *)(a1 + 529) & 1) != 0)
          {
            goto LABEL_266;
          }
          if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
            dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
          v16 = gprivacy_proxyLogObj;
          if (!os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
            goto LABEL_266;
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = a1 + 531;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = " ";
          v17 = "%{public}s%sReceived ACK_CLIENT_CID capsule with mismatched CID, ignoring";
          goto LABEL_252;
        }
        v22 = (_DWORD *)(a1 + 527);
        if ((*(_BYTE *)(a1 + 529) & 1) != 0)
        {
LABEL_219:
          *v22 |= 0x80u;
          goto LABEL_266;
        }
LABEL_215:
        if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
          dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
        v82 = gprivacy_proxyLogObj;
        if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)&buf[4] = "nw_masque_handle_capsule";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = a1 + 531;
          *(_WORD *)&buf[22] = 2080;
          v102 = " ";
          _os_log_impl(&dword_182FBE000, v82, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sReceived ACK_CLIENT_CID capsule, server supports forwarding", buf, 0x20u);
        }
        goto LABEL_219;
      case 16770051:
        if (*(_QWORD *)(a1 + 392))
        {
          v24 = dispatch_data_get_size(v5);
          if (v24)
          {
            v25 = v24;
            v106[0] = 0;
            *(_QWORD *)&length[0].sa_len = 0;
            *(_QWORD *)&length[0].sa_data[6] = length;
            length[1] = (sockaddr)0x2000000000uLL;
            address = 0;
            *(_QWORD *)&address_8.sa_len = &address;
            *(_QWORD *)&address_8.sa_data[6] = 0x2000000000;
            v110 = 0;
            *(_QWORD *)buf = MEMORY[0x1E0C809B0];
            *(_QWORD *)&buf[8] = 0x40000000;
            *(_QWORD *)&buf[16] = __nw_dispatch_data_copyout_from_offset_block_invoke;
            v102 = (const char *)&unk_1E14A3470;
            *(_QWORD *)&v103 = &address;
            *((_QWORD *)&v103 + 1) = length;
            v104 = 1;
            v105 = v106;
            dispatch_data_apply(v6, buf);
            _Block_object_dispose(&address, 8);
            _Block_object_dispose(length, 8);
            if (v25 <= v106[0])
            {
              if ((*(_BYTE *)(a1 + 529) & 1) == 0)
              {
                if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
                  dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
                v15 = gprivacy_proxyLogObj;
                if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 136446722;
                  *(_QWORD *)&buf[4] = a1 + 531;
                  *(_WORD *)&buf[12] = 2080;
                  *(_QWORD *)&buf[14] = " ";
                  *(_WORD *)&buf[22] = 2048;
                  v102 = (const char *)v25;
                  v8 = "%{public}s%sReceived short ACK_TARGET_CID capsule (%zu bytes)";
                  goto LABEL_48;
                }
              }
            }
            else
            {
              subrange = dispatch_data_create_subrange(v6, 1uLL, v106[0]);
              if (subrange)
              {
                v27 = subrange;
                is_equal = nw_dispatch_data_is_equal(*(dispatch_data_t *)(a1 + 392), subrange);
                dispatch_release(v27);
                v29 = *(_DWORD *)(a1 + 527);
                if (is_equal)
                {
                  if ((v29 & 0x10000) == 0)
                  {
                    if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
                      dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
                    v30 = gprivacy_proxyLogObj;
                    if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
                    {
                      *(_DWORD *)buf = 136446722;
                      *(_QWORD *)&buf[4] = "nw_masque_handle_capsule";
                      *(_WORD *)&buf[12] = 2082;
                      *(_QWORD *)&buf[14] = a1 + 531;
                      *(_WORD *)&buf[22] = 2080;
                      v102 = " ";
                      _os_log_impl(&dword_182FBE000, v30, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sReceived ACK_TARGET_CID capsule, forwarding allowed", buf, 0x20u);
                    }
                  }
                  *(_DWORD *)(a1 + 527) |= 0x100u;
                  length[0].sa_len = 0;
                  nw_dispatch_data_copyout_from_offset(v6, (uint64_t)length, 1, v106[0] + 1);
                  v31 = v106[0] + 2;
                  v32 = length[0].sa_len;
                  if (v25 >= v31 + length[0].sa_len)
                  {
                    v33 = *(NSObject **)(a1 + 408);
                    if (v33)
                    {
                      dispatch_release(v33);
                      *(_QWORD *)(a1 + 408) = 0;
                      v32 = length[0].sa_len;
                      v31 = v106[0] + 2;
                    }
                    *(_QWORD *)(a1 + 408) = dispatch_data_create_subrange(v6, v31, v32);
                    if ((*(_BYTE *)(a1 + 529) & 1) == 0)
                    {
                      if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
                        dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
                      v34 = gprivacy_proxyLogObj;
                      if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
                      {
                        *(_DWORD *)buf = 136446978;
                        *(_QWORD *)&buf[4] = "nw_masque_handle_capsule";
                        *(_WORD *)&buf[12] = 2082;
                        *(_QWORD *)&buf[14] = a1 + 531;
                        *(_WORD *)&buf[22] = 2080;
                        v102 = " ";
                        LOWORD(v103) = 1024;
                        *(_DWORD *)((char *)&v103 + 2) = length[0].sa_len;
                        _os_log_impl(&dword_182FBE000, v34, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sReceived ACK_TARGET_CID virtual CID of length %u", buf, 0x26u);
                      }
                    }
                  }
                }
                else if ((v29 & 0x10000) == 0)
                {
                  if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
                    dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
                  v16 = gprivacy_proxyLogObj;
                  if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)buf = 136446466;
                    *(_QWORD *)&buf[4] = a1 + 531;
                    *(_WORD *)&buf[12] = 2080;
                    *(_QWORD *)&buf[14] = " ";
                    v17 = "%{public}s%sReceived ACK_TARGET_CID capsule with mismatched CID, ignoring";
                    goto LABEL_252;
                  }
                }
              }
              else if ((*(_BYTE *)(a1 + 529) & 1) == 0)
              {
                if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
                  dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
                v15 = gprivacy_proxyLogObj;
                if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 136446722;
                  *(_QWORD *)&buf[4] = a1 + 531;
                  *(_WORD *)&buf[12] = 2080;
                  *(_QWORD *)&buf[14] = " ";
                  *(_WORD *)&buf[22] = 2048;
                  v102 = (const char *)v25;
                  v8 = "%{public}s%sFailed to parse ACK_TARGET_CID capsule (%zu bytes)";
                  goto LABEL_48;
                }
              }
            }
          }
          else if ((*(_BYTE *)(a1 + 529) & 1) == 0)
          {
            if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
              dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
            v18 = gprivacy_proxyLogObj;
            if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136446722;
              *(_QWORD *)&buf[4] = a1 + 531;
              *(_WORD *)&buf[12] = 2080;
              *(_QWORD *)&buf[14] = " ";
              *(_WORD *)&buf[22] = 2048;
              v102 = 0;
              v8 = "%{public}s%sReceived short ACK_TARGET_CID capsule (%zu bytes)";
              goto LABEL_59;
            }
          }
        }
        else if ((*(_BYTE *)(a1 + 529) & 1) == 0)
        {
          if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
            dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
          v16 = gprivacy_proxyLogObj;
          if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = a1 + 531;
            *(_WORD *)&buf[12] = 2080;
            *(_QWORD *)&buf[14] = " ";
            v17 = "%{public}s%sReceived ACK_TARGET_CID capsule without a stored server CID, ignoring";
            goto LABEL_252;
          }
        }
        goto LABEL_266;
      case 16770052:
        if ((*(_BYTE *)(a1 + 529) & 1) != 0 || !gLogDatapath)
          goto LABEL_266;
        if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
          dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
        v7 = gprivacy_proxyLogObj;
        if (!os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
          goto LABEL_266;
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = "nw_masque_handle_capsule";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = a1 + 531;
        *(_WORD *)&buf[22] = 2080;
        v102 = " ";
        v8 = "%{public}s %{public}s%sReceived CLOSE_CLIENT_CID capsule, ignoring";
        goto LABEL_14;
      case 16770053:
        if ((*(_BYTE *)(a1 + 529) & 1) == 0 && gLogDatapath)
        {
          if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
            dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
          v96 = gprivacy_proxyLogObj;
          if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136446722;
            *(_QWORD *)&buf[4] = "nw_masque_handle_capsule";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = a1 + 531;
            *(_WORD *)&buf[22] = 2080;
            v102 = " ";
            _os_log_impl(&dword_182FBE000, v96, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sReceived CLOSE_TARGET_CID capsule", buf, 0x20u);
          }
        }
        v35 = *(NSObject **)(a1 + 392);
        if (v35)
        {
          dispatch_release(v35);
          *(_QWORD *)(a1 + 392) = 0;
        }
        goto LABEL_266;
      default:
        switch(capsule_type)
        {
          case 0:
            if ((*(_BYTE *)(a1 + 529) & 1) != 0 || !gLogDatapath)
              goto LABEL_266;
            if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
              dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
            v7 = gprivacy_proxyLogObj;
            if (!os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
              goto LABEL_266;
            *(_DWORD *)buf = 136446722;
            *(_QWORD *)&buf[4] = "nw_masque_handle_capsule";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = a1 + 531;
            *(_WORD *)&buf[22] = 2080;
            v102 = " ";
            v8 = "%{public}s %{public}s%sReceived DATAGRAM capsule";
            goto LABEL_14;
          case 1:
            memset(v106, 0, 18);
            v36 = MEMORY[0x1E0C809B0];
            while (2)
            {
              v97 = 0;
              *(_QWORD *)&length[0].sa_len = 0;
              *(_QWORD *)&length[0].sa_data[6] = length;
              length[1] = (sockaddr)0x2000000000uLL;
              address = 0;
              *(_QWORD *)&address_8.sa_len = &address;
              *(_QWORD *)&address_8.sa_data[6] = 0x2000000000;
              v110 = &v97;
              *(_QWORD *)buf = v36;
              *(_QWORD *)&buf[8] = 0x40000000;
              *(_QWORD *)&buf[16] = __nw_dispatch_data_copyout_block_invoke;
              v102 = (const char *)&unk_1E14A3448;
              *((_QWORD *)&v103 + 1) = &address;
              v104 = 8;
              *(_QWORD *)&v103 = length;
              dispatch_data_apply(v6, buf);
              v41 = *(_QWORD *)(*(_QWORD *)&length[0].sa_data[6] + 24);
              _Block_object_dispose(&address, 8);
              _Block_object_dispose(length, 8);
              if (v41)
              {
                v42 = v97;
                if (v97 > 0x3Fu)
                {
                  if (v97 >> 6 == 2)
                  {
                    if (v41 < 4)
                      break;
                    v42 = bswap32(v97 & 0xFFFFFF7F);
                    v43 = 4;
                  }
                  else if (v97 >> 6 == 1)
                  {
                    if (v41 < 2)
                      break;
                    v42 = bswap32(v97 & 0xFFBF) >> 16;
                    v43 = 2;
                  }
                  else
                  {
                    if (v41 < 8)
                      break;
                    v42 = bswap64(v97 & 0xFFFFFFFFFFFFFF3FLL);
                    v43 = 8;
                  }
                }
                else
                {
                  v43 = 1;
                }
                if ((*(_BYTE *)(a1 + 529) & 1) == 0 && gLogDatapath)
                {
                  if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
                    dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
                  v55 = gprivacy_proxyLogObj;
                  if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)buf = 136446978;
                    *(_QWORD *)&buf[4] = "nw_masque_handle_capsule";
                    *(_WORD *)&buf[12] = 2082;
                    *(_QWORD *)&buf[14] = a1 + 531;
                    *(_WORD *)&buf[22] = 2080;
                    v102 = " ";
                    LOWORD(v103) = 2048;
                    *(_QWORD *)((char *)&v103 + 2) = v42;
                    _os_log_impl(&dword_182FBE000, v55, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sADDRESS_ASSIGN capsule contains request ID %llu", buf, 0x2Au);
                  }
                }
                v44 = dispatch_data_get_size(v6);
                v45 = v43 + 6;
                if (v44 < v43 + 6)
                {
                  if ((*(_BYTE *)(a1 + 529) & 1) != 0)
                    goto LABEL_265;
                  if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
                    dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
                  v83 = gprivacy_proxyLogObj;
                  if (!os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
                    goto LABEL_265;
                }
                else
                {
                  *(_QWORD *)&length[0].sa_len = 0;
                  *(_QWORD *)&length[0].sa_data[6] = length;
                  length[1] = (sockaddr)0x2000000000uLL;
                  address = 0;
                  *(_QWORD *)&address_8.sa_len = &address;
                  *(_QWORD *)&address_8.sa_data[6] = 0x2000000000;
                  v110 = (uint64_t *)v43;
                  *(_QWORD *)buf = v36;
                  *(_QWORD *)&buf[8] = 0x40000000;
                  *(_QWORD *)&buf[16] = __nw_dispatch_data_copyout_from_offset_block_invoke;
                  v102 = (const char *)&unk_1E14A3470;
                  *(_QWORD *)&v103 = &address;
                  *((_QWORD *)&v103 + 1) = length;
                  v104 = 1;
                  v105 = v106;
                  dispatch_data_apply(v6, buf);
                  _Block_object_dispose(&address, 8);
                  _Block_object_dispose(length, 8);
                  if (v106[0] != 6)
                  {
                    if (v106[0] != 4)
                    {
                      if ((*(_BYTE *)(a1 + 529) & 1) == 0)
                      {
                        if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
                          dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
                        v54 = gprivacy_proxyLogObj;
                        if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
                        {
                          *(_DWORD *)buf = 136446722;
                          *(_QWORD *)&buf[4] = a1 + 531;
                          *(_WORD *)&buf[12] = 2080;
                          *(_QWORD *)&buf[14] = " ";
                          *(_WORD *)&buf[22] = 1024;
                          LODWORD(v102) = v106[0];
                          _os_log_impl(&dword_182FBE000, v54, OS_LOG_TYPE_ERROR, "%{public}s%sUnknown ADDRESS_ASSIGN version %u", buf, 0x1Cu);
                        }
                      }
                      if (!v6)
                        goto LABEL_265;
                      continue;
                    }
                    *(_QWORD *)&length[0].sa_len = 0;
                    *(_QWORD *)&length[0].sa_data[6] = length;
                    length[1] = (sockaddr)0x2000000000uLL;
                    address = 0;
                    *(_QWORD *)&address_8.sa_len = &address;
                    *(_QWORD *)&address_8.sa_data[6] = 0x2000000000;
                    v110 = (uint64_t *)v43;
                    *(_QWORD *)buf = v36;
                    *(_QWORD *)&buf[8] = 0x40000000;
                    *(_QWORD *)&buf[16] = __nw_dispatch_data_copyout_from_offset_block_invoke;
                    v102 = (const char *)&unk_1E14A3470;
                    *(_QWORD *)&v103 = &address;
                    *((_QWORD *)&v103 + 1) = length;
                    v104 = 6;
                    v105 = v106;
                    dispatch_data_apply(v6, buf);
                    _Block_object_dispose(&address, 8);
                    _Block_object_dispose(length, 8);
                    *(_DWORD *)&length[0].sa_len = 528;
                    *(_DWORD *)&length[0].sa_data[2] = *(_DWORD *)&v106[1];
                    *(_QWORD *)&length[0].sa_data[6] = 0;
                    v46 = nw_endpoint_create_address(length);
                    if ((*(_BYTE *)(a1 + 529) & 1) == 0)
                    {
                      if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
                        dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
                      v47 = gprivacy_proxyLogObj;
                      if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_INFO))
                      {
                        logging_description = nw_endpoint_get_logging_description(v46);
                        *(_DWORD *)buf = 136446722;
                        *(_QWORD *)&buf[4] = a1 + 531;
                        *(_WORD *)&buf[12] = 2080;
                        *(_QWORD *)&buf[14] = " ";
                        *(_WORD *)&buf[22] = 2082;
                        v102 = logging_description;
                        _os_log_impl(&dword_182FBE000, v47, OS_LOG_TYPE_INFO, "%{public}s%sReceived ADDRESS_ASSIGN capsule for %{public}s", buf, 0x20u);
                      }
                    }
                    if (v46)
                    {
                      v49 = *(void **)(a1 + 360);
                      if (v49)
                        os_release(v49);
                      *(_QWORD *)(a1 + 360) = v46;
                    }
                    nw_protocol_notify(*(_QWORD **)(a1 + 48), a1, 17);
                    v38 = v44 - v45;
                    if (v44 > v45)
                    {
                      v39 = v6;
                      v37 = v45;
LABEL_105:
                      v40 = dispatch_data_create_subrange(v39, v37, v38);
                      dispatch_release(v6);
                      v6 = v40;
                      if (!v40)
                        goto LABEL_265;
                      continue;
                    }
                    goto LABEL_265;
                  }
                  if (v44 > 0x11)
                  {
                    *(_QWORD *)&length[0].sa_len = 0;
                    *(_QWORD *)&length[0].sa_data[6] = length;
                    length[1] = (sockaddr)0x2000000000uLL;
                    address = 0;
                    *(_QWORD *)&address_8.sa_len = &address;
                    *(_QWORD *)&address_8.sa_data[6] = 0x2000000000;
                    v110 = (uint64_t *)v43;
                    *(_QWORD *)buf = v36;
                    *(_QWORD *)&buf[8] = 0x40000000;
                    *(_QWORD *)&buf[16] = __nw_dispatch_data_copyout_from_offset_block_invoke;
                    v102 = (const char *)&unk_1E14A3470;
                    *(_QWORD *)&v103 = &address;
                    *((_QWORD *)&v103 + 1) = length;
                    v104 = 18;
                    v105 = v106;
                    dispatch_data_apply(v6, buf);
                    _Block_object_dispose(&address, 8);
                    _Block_object_dispose(length, 8);
                    *(_QWORD *)&length[0].sa_len = 7708;
                    *(sockaddr *)&length[0].sa_data[6] = *(sockaddr *)&v106[1];
                    *(_DWORD *)&length[1].sa_data[6] = 0;
                    v50 = nw_endpoint_create_address(length);
                    if ((*(_BYTE *)(a1 + 529) & 1) == 0)
                    {
                      if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
                        dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
                      v51 = gprivacy_proxyLogObj;
                      if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_INFO))
                      {
                        v52 = nw_endpoint_get_logging_description(v50);
                        *(_DWORD *)buf = 136446722;
                        *(_QWORD *)&buf[4] = a1 + 531;
                        *(_WORD *)&buf[12] = 2080;
                        *(_QWORD *)&buf[14] = " ";
                        *(_WORD *)&buf[22] = 2082;
                        v102 = v52;
                        _os_log_impl(&dword_182FBE000, v51, OS_LOG_TYPE_INFO, "%{public}s%sReceived ADDRESS_ASSIGN capsule for %{public}s", buf, 0x20u);
                      }
                    }
                    if (v50)
                    {
                      v53 = *(void **)(a1 + 360);
                      if (v53)
                        os_release(v53);
                      *(_QWORD *)(a1 + 360) = v50;
                    }
                    nw_protocol_notify(*(_QWORD **)(a1 + 48), a1, 17);
                    v37 = v43 + 18;
                    v38 = v44 - (v43 + 18);
                    if (v44 > v43 + 18)
                    {
                      v39 = v6;
                      goto LABEL_105;
                    }
LABEL_265:
                    if (!v6)
                    {
LABEL_267:
                      nw_masque_mark_connected(a1);
                      return;
                    }
                    goto LABEL_266;
                  }
                  if ((*(_BYTE *)(a1 + 529) & 1) != 0)
                    goto LABEL_265;
                  if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
                    dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
                  v83 = gprivacy_proxyLogObj;
                  if (!os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
                    goto LABEL_265;
                }
                *(_DWORD *)buf = 136446722;
                *(_QWORD *)&buf[4] = a1 + 531;
                *(_WORD *)&buf[12] = 2080;
                *(_QWORD *)&buf[14] = " ";
                *(_WORD *)&buf[22] = 2048;
                v102 = (const char *)v44;
                v78 = "%{public}s%sADDRESS_ASSIGN capsule too short: %zu bytes";
                v79 = v83;
                goto LABEL_263;
              }
              break;
            }
            if ((*(_BYTE *)(a1 + 529) & 1) != 0)
              goto LABEL_265;
            if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
              dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
            v77 = gprivacy_proxyLogObj;
            if (!os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
              goto LABEL_265;
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = a1 + 531;
            *(_WORD *)&buf[12] = 2080;
            *(_QWORD *)&buf[14] = " ";
            v78 = "%{public}s%sADDRESS_ASSIGN capsule failed to decode request ID";
            v79 = v77;
            v80 = 22;
            goto LABEL_264;
          case 2:
            if ((*(_BYTE *)(a1 + 529) & 1) != 0)
              goto LABEL_266;
            if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
              dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
            v16 = gprivacy_proxyLogObj;
            if (!os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
              goto LABEL_266;
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = a1 + 531;
            *(_WORD *)&buf[12] = 2080;
            *(_QWORD *)&buf[14] = " ";
            v17 = "%{public}s%sADDRESS_REQUEST capsules not supported";
            goto LABEL_252;
          case 3:
            v100 = 0;
            v56 = MEMORY[0x1E0C809B0];
            memset(length, 0, sizeof(length));
            v57 = (_BYTE *)(&nw_protocol_http_authentication_identifier::protocol_identifier + 4);
            while (2)
            {
              v62 = dispatch_data_get_size(v6);
              if (v62 <= 9)
              {
                if ((*(_BYTE *)(a1 + 529) & 1) != 0)
                  goto LABEL_265;
                if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
                  dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
                v81 = *((_QWORD *)v57 + 372);
                if (!os_log_type_enabled(v81, OS_LOG_TYPE_ERROR))
                  goto LABEL_265;
              }
              else
              {
                address = 0;
                *(_QWORD *)&address_8.sa_len = &address;
                *(_QWORD *)&address_8.sa_data[6] = 0x2000000000;
                v110 = 0;
                *(_QWORD *)v106 = 0;
                *(_QWORD *)&v106[8] = v106;
                *(_QWORD *)&v106[16] = 0x2000000000;
                v107 = length;
                *(_QWORD *)buf = v56;
                *(_QWORD *)&buf[8] = 0x40000000;
                *(_QWORD *)&buf[16] = __nw_dispatch_data_copyout_block_invoke;
                v102 = (const char *)&unk_1E14A3448;
                *((_QWORD *)&v103 + 1) = v106;
                v104 = 1;
                *(_QWORD *)&v103 = &address;
                dispatch_data_apply(v6, buf);
                _Block_object_dispose(v106, 8);
                _Block_object_dispose(&address, 8);
                if (length[0].sa_len != 6)
                {
                  if (length[0].sa_len != 4)
                  {
                    if ((*(_BYTE *)(a1 + 529) & 1) != 0)
                      goto LABEL_265;
                    if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
                      dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
                    v84 = *((_QWORD *)v57 + 372);
                    if (!os_log_type_enabled(v84, OS_LOG_TYPE_ERROR))
                      goto LABEL_265;
                    *(_DWORD *)buf = 136446722;
                    *(_QWORD *)&buf[4] = a1 + 531;
                    *(_WORD *)&buf[12] = 2080;
                    *(_QWORD *)&buf[14] = " ";
                    *(_WORD *)&buf[22] = 1024;
                    LODWORD(v102) = length[0].sa_len;
                    v78 = "%{public}s%sUnknown ROUTE_ADVERTISEMENT version %u";
                    v79 = v84;
                    v80 = 28;
LABEL_264:
                    _os_log_impl(&dword_182FBE000, v79, OS_LOG_TYPE_ERROR, v78, buf, v80);
                    goto LABEL_265;
                  }
                  address = 0;
                  *(_QWORD *)&address_8.sa_len = &address;
                  *(_QWORD *)&address_8.sa_data[6] = 0x2000000000;
                  v110 = 0;
                  *(_QWORD *)v106 = 0;
                  *(_QWORD *)&v106[8] = v106;
                  *(_QWORD *)&v106[16] = 0x2000000000;
                  v107 = length;
                  *(_QWORD *)buf = v56;
                  *(_QWORD *)&buf[8] = 0x40000000;
                  *(_QWORD *)&buf[16] = __nw_dispatch_data_copyout_block_invoke;
                  v102 = (const char *)&unk_1E14A3448;
                  *((_QWORD *)&v103 + 1) = v106;
                  v104 = 10;
                  *(_QWORD *)&v103 = &address;
                  dispatch_data_apply(v6, buf);
                  _Block_object_dispose(v106, 8);
                  _Block_object_dispose(&address, 8);
                  LODWORD(address) = 528;
                  HIDWORD(address) = *(_DWORD *)&length[0].sa_family;
                  *(_QWORD *)&address_8.sa_len = 0;
                  *(_DWORD *)v106 = 528;
                  *(_DWORD *)&v106[4] = *(_DWORD *)&length[0].sa_family;
                  *(_QWORD *)&v106[8] = 0;
                  v63 = nw_endpoint_create_address((const sockaddr *)&address);
                  v64 = nw_endpoint_create_address((const sockaddr *)v106);
                  if ((*(_BYTE *)(a1 + 529) & 1) == 0)
                  {
                    if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
                      dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
                    v65 = *((_QWORD *)v57 + 372);
                    if (os_log_type_enabled(v65, OS_LOG_TYPE_INFO))
                    {
                      v66 = nw_endpoint_get_logging_description(v63);
                      v67 = nw_endpoint_get_logging_description(v64);
                      *(_DWORD *)buf = 136446978;
                      *(_QWORD *)&buf[4] = a1 + 531;
                      *(_WORD *)&buf[12] = 2080;
                      *(_QWORD *)&buf[14] = " ";
                      *(_WORD *)&buf[22] = 2082;
                      v102 = v66;
                      v57 = (char *)&nw_protocol_http_authentication_identifier::protocol_identifier + 4;
                      LOWORD(v103) = 2082;
                      *(_QWORD *)((char *)&v103 + 2) = v67;
                      _os_log_impl(&dword_182FBE000, v65, OS_LOG_TYPE_INFO, "%{public}s%sReceived ROUTE_ADVERTISEMENT capsule for %{public}s-%{public}s", buf, 0x2Au);
                    }
                  }
                  if (v63)
                  {
                    v68 = *(void **)(a1 + 368);
                    if (v68)
                      os_release(v68);
                    *(_QWORD *)(a1 + 368) = v63;
                  }
                  if (v64)
                  {
                    v69 = *(void **)(a1 + 376);
                    if (v69)
                      os_release(v69);
                    *(_QWORD *)(a1 + 376) = v64;
                  }
                  if (v62 < 0xB)
                    goto LABEL_265;
                  v58 = v62 - 10;
                  v59 = v6;
                  v60 = 10;
LABEL_162:
                  v61 = dispatch_data_create_subrange(v59, v60, v58);
                  dispatch_release(v6);
                  v6 = v61;
                  v56 = MEMORY[0x1E0C809B0];
                  if (!v61)
                    goto LABEL_265;
                  continue;
                }
                if (v62 > 0x21)
                {
                  address = 0;
                  *(_QWORD *)&address_8.sa_len = &address;
                  *(_QWORD *)&address_8.sa_data[6] = 0x2000000000;
                  v110 = 0;
                  *(_QWORD *)v106 = 0;
                  *(_QWORD *)&v106[8] = v106;
                  *(_QWORD *)&v106[16] = 0x2000000000;
                  v107 = length;
                  *(_QWORD *)buf = v56;
                  *(_QWORD *)&buf[8] = 0x40000000;
                  *(_QWORD *)&buf[16] = __nw_dispatch_data_copyout_block_invoke;
                  v102 = (const char *)&unk_1E14A3448;
                  *((_QWORD *)&v103 + 1) = v106;
                  v104 = 34;
                  *(_QWORD *)&v103 = &address;
                  dispatch_data_apply(v6, buf);
                  _Block_object_dispose(v106, 8);
                  _Block_object_dispose(&address, 8);
                  address = 7708;
                  address_8 = *(sockaddr *)&length[0].sa_family;
                  LODWORD(v110) = 0;
                  *(_QWORD *)v106 = 7708;
                  *(sockaddr *)&v106[8] = *(sockaddr *)&length[0].sa_family;
                  LODWORD(v107) = 0;
                  v70 = nw_endpoint_create_address((const sockaddr *)&address);
                  v71 = nw_endpoint_create_address((const sockaddr *)v106);
                  if ((*(_BYTE *)(a1 + 529) & 1) == 0)
                  {
                    if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
                      dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
                    v72 = *((_QWORD *)v57 + 372);
                    if (os_log_type_enabled(v72, OS_LOG_TYPE_INFO))
                    {
                      v73 = nw_endpoint_get_logging_description(v70);
                      v74 = nw_endpoint_get_logging_description(v71);
                      *(_DWORD *)buf = 136446978;
                      *(_QWORD *)&buf[4] = a1 + 531;
                      *(_WORD *)&buf[12] = 2080;
                      *(_QWORD *)&buf[14] = " ";
                      *(_WORD *)&buf[22] = 2082;
                      v102 = v73;
                      v57 = (_BYTE *)(&nw_protocol_http_authentication_identifier::protocol_identifier + 4);
                      LOWORD(v103) = 2082;
                      *(_QWORD *)((char *)&v103 + 2) = v74;
                      _os_log_impl(&dword_182FBE000, v72, OS_LOG_TYPE_INFO, "%{public}s%sReceived ROUTE_ADVERTISEMENT capsule for %{public}s-%{public}s", buf, 0x2Au);
                    }
                  }
                  if (v70)
                  {
                    v75 = *(void **)(a1 + 368);
                    if (v75)
                      os_release(v75);
                    *(_QWORD *)(a1 + 368) = v70;
                  }
                  if (v71)
                  {
                    v76 = *(void **)(a1 + 376);
                    if (v76)
                      os_release(v76);
                    *(_QWORD *)(a1 + 376) = v71;
                  }
                  if (v62 < 0x23)
                    goto LABEL_265;
                  v58 = v62 - 34;
                  v59 = v6;
                  v60 = 34;
                  goto LABEL_162;
                }
                if ((*(_BYTE *)(a1 + 529) & 1) != 0)
                  goto LABEL_265;
                if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
                  dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
                v81 = *((_QWORD *)v57 + 372);
                if (!os_log_type_enabled(v81, OS_LOG_TYPE_ERROR))
                  goto LABEL_265;
              }
              break;
            }
            *(_DWORD *)buf = 136446722;
            *(_QWORD *)&buf[4] = a1 + 531;
            *(_WORD *)&buf[12] = 2080;
            *(_QWORD *)&buf[14] = " ";
            *(_WORD *)&buf[22] = 2048;
            v102 = (const char *)v62;
            v78 = "%{public}s%sROUTE_ADVERTISEMENT capsule too short: %zu bytes";
            v79 = v81;
LABEL_263:
            v80 = 32;
            goto LABEL_264;
          default:
            goto LABEL_43;
        }
    }
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_masque_handle_capsule";
  v85 = (char *)_os_log_send_and_compose_impl();
  length[0].sa_len = 16;
  LOBYTE(address) = 0;
  if (!__nwlog_fault(v85, length, &address))
    goto LABEL_327;
  if (length[0].sa_len == 17)
  {
    v86 = __nwlog_obj();
    sa_len = length[0].sa_len;
    if (!os_log_type_enabled(v86, (os_log_type_t)length[0].sa_len))
      goto LABEL_327;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_masque_handle_capsule";
    v88 = "%{public}s called with null capsule_data";
    goto LABEL_326;
  }
  if (!(_BYTE)address)
  {
    v86 = __nwlog_obj();
    sa_len = length[0].sa_len;
    if (!os_log_type_enabled(v86, (os_log_type_t)length[0].sa_len))
      goto LABEL_327;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_masque_handle_capsule";
    v88 = "%{public}s called with null capsule_data, backtrace limit exceeded";
    goto LABEL_326;
  }
  v91 = (char *)__nw_create_backtrace_string();
  v86 = __nwlog_obj();
  sa_len = length[0].sa_len;
  v95 = os_log_type_enabled(v86, (os_log_type_t)length[0].sa_len);
  if (!v91)
  {
    if (!v95)
      goto LABEL_327;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_masque_handle_capsule";
    v88 = "%{public}s called with null capsule_data, no backtrace";
    goto LABEL_326;
  }
  if (v95)
  {
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "nw_masque_handle_capsule";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v91;
    v93 = "%{public}s called with null capsule_data, dumping backtrace:%{public}s";
    goto LABEL_307;
  }
LABEL_308:
  free(v91);
  if (v85)
LABEL_328:
    free(v85);
}

void nw_masque_mark_failed_with_error(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  uint64_t v10;
  void (*v11)(void);
  uint64_t v12;
  uint64_t v13;
  void (*v14)(void);
  uint64_t v15;
  const char *v16;
  const char *v17;
  const char *v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  const char *v22;
  const char *v23;
  const char *v24;
  const char *v25;
  NSObject *v26;
  os_log_type_t v27;
  const char *v28;
  char *backtrace_string;
  _BOOL4 v30;
  uint64_t v31;
  const char *v32;
  const char *v33;
  char *v34;
  _BOOL4 v35;
  uint64_t v36;
  const char *v37;
  const char *v38;
  uint64_t v39;
  const char *v40;
  const char *v41;
  char *v42;
  char v43;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v46;
  __int16 v47;
  const char *v48;
  __int16 v49;
  char *v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (*(_DWORD *)(a1 + 508) == 5)
      return;
    if ((*(_BYTE *)(a1 + 529) & 1) == 0)
    {
      if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
        dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
      v4 = gprivacy_proxyLogObj;
      if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136446722;
        v46 = (const char *)(a1 + 531);
        v47 = 2080;
        v48 = " ";
        v49 = 1024;
        LODWORD(v50) = a2;
        _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_INFO, "%{public}s%sClosing connection with error %{darwin.errno}d", buf, 0x1Cu);
      }
    }
    *(_DWORD *)(a1 + 508) = 5;
    v5 = *(_QWORD *)(a1 + 256);
    if (v5)
    {
      do
      {
        v6 = *(_QWORD *)(v5 + 16);
        nw_frame_finalize(v5);
        v5 = v6;
      }
      while (v6);
    }
    v7 = *(_QWORD *)(a1 + 48);
    if (v7)
    {
      v8 = *(_QWORD *)(v7 + 24);
      if (v8)
      {
        v9 = *(void (**)(void))(v8 + 56);
        if (!v9 || (v9(), (v10 = *(_QWORD *)(a1 + 48)) != 0) && (v8 = *(_QWORD *)(v10 + 24)) != 0)
        {
          v11 = *(void (**)(void))(v8 + 48);
          if (v11)
            v11();
        }
      }
    }
    v12 = *(_QWORD *)(a1 + 32);
    if (v12)
    {
      v13 = *(_QWORD *)(v12 + 24);
      if (v13)
      {
        v14 = *(void (**)(void))(v13 + 32);
        if (v14)
        {
          v14();
          return;
        }
      }
    }
    __nwlog_obj();
    v15 = *(_QWORD *)(a1 + 32);
    v16 = "invalid";
    if (v15)
    {
      v17 = *(const char **)(v15 + 16);
      if (v17)
        v16 = v17;
    }
    *(_DWORD *)buf = 136446466;
    v46 = "nw_masque_mark_failed_with_error";
    v47 = 2082;
    v48 = v16;
    v18 = (const char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v43 = 0;
    if (__nwlog_fault(v18, &type, &v43))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v19 = __nwlog_obj();
        v20 = type;
        if (!os_log_type_enabled(v19, type))
          goto LABEL_62;
        v21 = *(_QWORD *)(a1 + 32);
        v22 = "invalid";
        if (v21)
        {
          v23 = *(const char **)(v21 + 16);
          if (v23)
            v22 = v23;
        }
        *(_DWORD *)buf = 136446466;
        v46 = "nw_masque_mark_failed_with_error";
        v47 = 2082;
        v48 = v22;
        v24 = "%{public}s protocol %{public}s has invalid disconnect callback";
LABEL_61:
        _os_log_impl(&dword_182FBE000, v19, v20, v24, buf, 0x16u);
        goto LABEL_62;
      }
      if (!v43)
      {
        v19 = __nwlog_obj();
        v20 = type;
        if (!os_log_type_enabled(v19, type))
          goto LABEL_62;
        v36 = *(_QWORD *)(a1 + 32);
        v37 = "invalid";
        if (v36)
        {
          v38 = *(const char **)(v36 + 16);
          if (v38)
            v37 = v38;
        }
        *(_DWORD *)buf = 136446466;
        v46 = "nw_masque_mark_failed_with_error";
        v47 = 2082;
        v48 = v37;
        v24 = "%{public}s protocol %{public}s has invalid disconnect callback, backtrace limit exceeded";
        goto LABEL_61;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v19 = __nwlog_obj();
      v20 = type;
      v30 = os_log_type_enabled(v19, type);
      if (!backtrace_string)
      {
        if (!v30)
          goto LABEL_62;
        v39 = *(_QWORD *)(a1 + 32);
        v40 = "invalid";
        if (v39)
        {
          v41 = *(const char **)(v39 + 16);
          if (v41)
            v40 = v41;
        }
        *(_DWORD *)buf = 136446466;
        v46 = "nw_masque_mark_failed_with_error";
        v47 = 2082;
        v48 = v40;
        v24 = "%{public}s protocol %{public}s has invalid disconnect callback, no backtrace";
        goto LABEL_61;
      }
      if (v30)
      {
        v31 = *(_QWORD *)(a1 + 32);
        v32 = "invalid";
        if (v31)
        {
          v33 = *(const char **)(v31 + 16);
          if (v33)
            v32 = v33;
        }
        *(_DWORD *)buf = 136446722;
        v46 = "nw_masque_mark_failed_with_error";
        v47 = 2082;
        v48 = v32;
        v49 = 2082;
        v50 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v19, v20, "%{public}s protocol %{public}s has invalid disconnect callback, dumping backtrace:%{public}s", buf, 0x20u);
      }
      free(backtrace_string);
    }
LABEL_62:
    if (v18)
    {
      v42 = (char *)v18;
LABEL_69:
      free(v42);
      return;
    }
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v46 = "nw_masque_mark_failed_with_error";
  v25 = (const char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v43 = 0;
  if (__nwlog_fault(v25, &type, &v43))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v26 = __nwlog_obj();
      v27 = type;
      if (!os_log_type_enabled(v26, type))
        goto LABEL_67;
      *(_DWORD *)buf = 136446210;
      v46 = "nw_masque_mark_failed_with_error";
      v28 = "%{public}s called with null masque";
LABEL_66:
      _os_log_impl(&dword_182FBE000, v26, v27, v28, buf, 0xCu);
      goto LABEL_67;
    }
    if (!v43)
    {
      v26 = __nwlog_obj();
      v27 = type;
      if (!os_log_type_enabled(v26, type))
        goto LABEL_67;
      *(_DWORD *)buf = 136446210;
      v46 = "nw_masque_mark_failed_with_error";
      v28 = "%{public}s called with null masque, backtrace limit exceeded";
      goto LABEL_66;
    }
    v34 = (char *)__nw_create_backtrace_string();
    v26 = __nwlog_obj();
    v27 = type;
    v35 = os_log_type_enabled(v26, type);
    if (!v34)
    {
      if (!v35)
        goto LABEL_67;
      *(_DWORD *)buf = 136446210;
      v46 = "nw_masque_mark_failed_with_error";
      v28 = "%{public}s called with null masque, no backtrace";
      goto LABEL_66;
    }
    if (v35)
    {
      *(_DWORD *)buf = 136446466;
      v46 = "nw_masque_mark_failed_with_error";
      v47 = 2082;
      v48 = v34;
      _os_log_impl(&dword_182FBE000, v26, v27, "%{public}s called with null masque, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v34);
  }
LABEL_67:
  if (v25)
  {
    v42 = (char *)v25;
    goto LABEL_69;
  }
}

BOOL ___ZL24nw_masque_handle_capsuleP9nw_masqueP20nw_protocol_metadata_block_invoke(uint64_t a1, unsigned int a2, unsigned int a3, const void *a4, const void *a5)
{
  NSObject *subrange;
  void *v11;
  NSObject *v12;
  BOOL is_equal;
  NSObject *v14;
  NSObject *v15;
  BOOL v16;
  _BOOL8 result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  const char *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  const char *v27;
  NSObject *v28;
  uint32_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  const char *v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  const char *v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  char v44;
  unsigned __int16 v45;
  unsigned __int16 v46;
  uint8_t buf[4];
  const char *v48;
  __int16 v49;
  const char *v50;
  __int16 v51;
  int v52;
  __int16 v53;
  unsigned int v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v46 = 0;
  nw_dispatch_data_copyout_from_offset(*(NSObject **)(a1 + 40), (uint64_t)&v46, 2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24));
  if (v46 != a2)
  {
    v18 = *(_QWORD *)(a1 + 48);
    if (v18 && (*(_BYTE *)(v18 + 529) & 1) != 0)
      return 0;
    if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
      dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
    v19 = gprivacy_proxyLogObj;
    result = os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    v20 = *(_QWORD *)(a1 + 48);
    v21 = (const char *)(v20 + 531);
    v22 = "";
    if (!v20)
      v21 = "";
    *(_DWORD *)buf = 136446978;
    if (v20)
      v22 = " ";
    v48 = v21;
    v49 = 2080;
    v50 = v22;
    v51 = 1024;
    v52 = v46;
    v53 = 1024;
    v54 = a2;
    v23 = "%{public}s%sReceived pattern length (%u bytes) does not match actual pattern length (%u bytes)";
    goto LABEL_37;
  }
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) += 2;
  v45 = 0;
  nw_dispatch_data_copyout_from_offset(*(NSObject **)(a1 + 40), (uint64_t)&v45, 2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24));
  if (v45 != a3)
  {
    v24 = *(_QWORD *)(a1 + 48);
    if (v24 && (*(_BYTE *)(v24 + 529) & 1) != 0)
      return 0;
    if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
      dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
    v19 = gprivacy_proxyLogObj;
    result = os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    v25 = *(_QWORD *)(a1 + 48);
    v26 = (const char *)(v25 + 531);
    v27 = "";
    if (!v25)
      v26 = "";
    *(_DWORD *)buf = 136446978;
    if (v25)
      v27 = " ";
    v48 = v26;
    v49 = 2080;
    v50 = v27;
    v51 = 1024;
    v52 = v45;
    v53 = 1024;
    v54 = a3;
    v23 = "%{public}s%sReceived pattern offset (%u bytes) does not match actual pattern offset (%u bytes)";
LABEL_37:
    v28 = v19;
    v29 = 34;
LABEL_72:
    _os_log_impl(&dword_182FBE000, v28, OS_LOG_TYPE_ERROR, v23, buf, v29);
    return 0;
  }
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) += 2;
  subrange = dispatch_data_create_subrange(*(dispatch_data_t *)(a1 + 40), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), a2);
  v11 = (void *)*MEMORY[0x1E0C80CF0];
  v12 = dispatch_data_create(a4, a2, 0, (dispatch_block_t)*MEMORY[0x1E0C80CF0]);
  is_equal = nw_dispatch_data_is_equal(subrange, v12);
  if (subrange)
    dispatch_release(subrange);
  if (v12)
    dispatch_release(v12);
  if (is_equal)
  {
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) += a2;
    v44 = 0;
    nw_dispatch_data_copyout_from_offset(*(NSObject **)(a1 + 40), (uint64_t)&v44, 1, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24));
    if (v44 == (a5 != 0))
    {
      ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
      if (!a5)
        return 1;
      v14 = dispatch_data_create_subrange(*(dispatch_data_t *)(a1 + 40), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), a2);
      v15 = dispatch_data_create(a5, a2, 0, v11);
      v16 = nw_dispatch_data_is_equal(v14, v15);
      if (v14)
        dispatch_release(v14);
      if (v15)
        dispatch_release(v15);
      if (v16)
      {
        *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) += a2;
        return 1;
      }
      v41 = *(_QWORD *)(a1 + 48);
      if (v41 && (*(_BYTE *)(v41 + 529) & 1) != 0)
        return 0;
      if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
        dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
      v31 = gprivacy_proxyLogObj;
      result = os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR);
      if (result)
      {
        v42 = *(_QWORD *)(a1 + 48);
        v43 = v42 == 0;
        if (v42)
          v39 = (const char *)(v42 + 531);
        else
          v39 = "";
        v40 = " ";
        if (v43)
          v40 = "";
LABEL_70:
        *(_DWORD *)buf = 136446466;
        v48 = v39;
        v49 = 2080;
        v50 = v40;
        v23 = "%{public}s%sReceived pattern mask does not match actual pattern mask";
LABEL_71:
        v28 = v31;
        v29 = 22;
        goto LABEL_72;
      }
    }
    else
    {
      v36 = *(_QWORD *)(a1 + 48);
      if (v36 && (*(_BYTE *)(v36 + 529) & 1) != 0)
        return 0;
      if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
        dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
      v31 = gprivacy_proxyLogObj;
      result = os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR);
      if (result)
      {
        v37 = *(_QWORD *)(a1 + 48);
        v38 = v37 == 0;
        if (v37)
          v39 = (const char *)(v37 + 531);
        else
          v39 = "";
        v40 = " ";
        if (v38)
          v40 = "";
        goto LABEL_70;
      }
    }
  }
  else
  {
    v30 = *(_QWORD *)(a1 + 48);
    if (v30 && (*(_BYTE *)(v30 + 529) & 1) != 0)
      return 0;
    if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
      dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
    v31 = gprivacy_proxyLogObj;
    result = os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR);
    if (result)
    {
      v32 = *(_QWORD *)(a1 + 48);
      v33 = v32 == 0;
      if (v32)
        v34 = (const char *)(v32 + 531);
      else
        v34 = "";
      v35 = " ";
      if (v33)
        v35 = "";
      *(_DWORD *)buf = 136446466;
      v48 = v34;
      v49 = 2080;
      v50 = v35;
      v23 = "%{public}s%sReceived pattern does not match actual pattern";
      goto LABEL_71;
    }
  }
  return result;
}

void nw_masque_mark_connected(uint64_t a1)
{
  int v2;
  uint64_t v3;
  const char *v4;
  NSObject *v5;
  os_log_type_t v6;
  uint32_t v7;
  uint64_t v8;
  _DWORD *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(void);
  uint64_t v14;
  void (*v15)(void);
  NSObject *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  const char *v21;
  __int16 v22;
  const char *v23;
  __int16 v24;
  const char *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v2 = *(_DWORD *)(a1 + 508);
  if (v2 == 5)
  {
    if ((*(_BYTE *)(a1 + 529) & 1) == 0)
    {
      if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
        dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
      v8 = gprivacy_proxyLogObj;
      if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
      {
        v20 = 136446466;
        v21 = (const char *)(a1 + 531);
        v22 = 2080;
        v23 = " ";
        v4 = "%{public}s%sAlready in the disconnected state";
        v5 = v8;
        v6 = OS_LOG_TYPE_ERROR;
        v7 = 22;
        goto LABEL_14;
      }
    }
  }
  else
  {
    if (v2 != 4)
    {
      v9 = (_DWORD *)(a1 + 527);
      v10 = *(_DWORD *)(a1 + 527);
      if ((v10 & 0x20) == 0 || *(_QWORD *)(a1 + 360) && *(_QWORD *)(a1 + 368) && *(_QWORD *)(a1 + 376))
      {
        if ((v10 & 8) == 0 || (v10 & 0x200) != 0 || (v17 = *(void **)(a1 + 448)) == 0)
        {
          *(_DWORD *)(a1 + 508) = 4;
          if ((v10 & 0x400000) != 0)
          {
            v18 = *(_QWORD *)(a1 + 256);
            if (v18)
            {
              do
              {
                v19 = *(_QWORD *)(v18 + 16);
                nw_frame_finalize(v18);
                v18 = v19;
              }
              while (v19);
            }
          }
          v11 = *(_QWORD *)(a1 + 48);
          if (v11)
          {
            v12 = *(_QWORD *)(v11 + 24);
            if (v12)
            {
              v13 = *(void (**)(void))(v12 + 40);
              if (!v13 || (v13(), (v14 = *(_QWORD *)(a1 + 48)) != 0) && (v12 = *(_QWORD *)(v14 + 24)) != 0)
              {
                v15 = *(void (**)(void))(v12 + 72);
                if (v15)
                  v15();
              }
            }
          }
          return;
        }
        if (nw_masque_send_demux_options(a1, v17, 1))
          *v9 |= 0x200u;
      }
      else if ((v10 & 0x10000) == 0)
      {
        if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
          dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
        v16 = gprivacy_proxyLogObj;
        if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_INFO))
        {
          v20 = 136446466;
          v21 = (const char *)(a1 + 531);
          v22 = 2080;
          v23 = " ";
          _os_log_impl(&dword_182FBE000, v16, OS_LOG_TYPE_INFO, "%{public}s%sCONNECT-IP waiting for addresses, not marking ready yet", (uint8_t *)&v20, 0x16u);
        }
      }
      *(_DWORD *)(a1 + 508) = 3;
      return;
    }
    if ((*(_BYTE *)(a1 + 529) & 1) == 0 && gLogDatapath)
    {
      if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
        dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
      v3 = gprivacy_proxyLogObj;
      if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
      {
        v20 = 136446722;
        v21 = "nw_masque_mark_connected";
        v22 = 2082;
        v23 = (const char *)(a1 + 531);
        v24 = 2080;
        v25 = " ";
        v4 = "%{public}s %{public}s%sAlready in the connected state";
        v5 = v3;
        v6 = OS_LOG_TYPE_DEBUG;
        v7 = 32;
LABEL_14:
        _os_log_impl(&dword_182FBE000, v5, v6, v4, (uint8_t *)&v20, v7);
      }
    }
  }
}

uint64_t nw_masque_send_demux_options(uint64_t a1, void *a2, char a3)
{
  int v5;
  NSObject *v6;
  int *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *alloc;
  id *metadata_for_capsule;
  int v13;
  uint64_t v14;
  const char *v15;
  NSObject *v16;
  os_log_type_t v17;
  uint32_t v18;
  uint64_t v19;
  char *v21;
  NSObject *v22;
  os_log_type_t v23;
  const char *v24;
  char *backtrace_string;
  _BOOL4 v26;
  const char *v27;
  _BOOL4 v28;
  _QWORD v29[5];
  _QWORD v30[5];
  _QWORD v31[5];
  os_log_type_t type[8];
  os_log_type_t *v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE buf[24];
  const char *v37;
  _QWORD *v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_masque_send_demux_options";
    v21 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v30[0]) = 0;
    if (!__nwlog_fault(v21, type, v30))
      goto LABEL_62;
    if (type[0] != OS_LOG_TYPE_FAULT)
    {
      if (!LOBYTE(v30[0]))
      {
        v22 = __nwlog_obj();
        v23 = type[0];
        if (!os_log_type_enabled(v22, type[0]))
          goto LABEL_62;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_masque_send_demux_options";
        v24 = "%{public}s called with null masque, backtrace limit exceeded";
        goto LABEL_61;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v22 = __nwlog_obj();
      v23 = type[0];
      v26 = os_log_type_enabled(v22, type[0]);
      if (!backtrace_string)
      {
        if (!v26)
          goto LABEL_62;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_masque_send_demux_options";
        v24 = "%{public}s called with null masque, no backtrace";
        goto LABEL_61;
      }
      if (v26)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_masque_send_demux_options";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        v27 = "%{public}s called with null masque, dumping backtrace:%{public}s";
LABEL_51:
        _os_log_impl(&dword_182FBE000, v22, v23, v27, buf, 0x16u);
      }
LABEL_52:
      free(backtrace_string);
      goto LABEL_62;
    }
    v22 = __nwlog_obj();
    v23 = type[0];
    if (!os_log_type_enabled(v22, type[0]))
      goto LABEL_62;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_masque_send_demux_options";
    v24 = "%{public}s called with null masque";
LABEL_61:
    _os_log_impl(&dword_182FBE000, v22, v23, v24, buf, 0xCu);
LABEL_62:
    if (v21)
      free(v21);
    return 0;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_masque_send_demux_options";
    v21 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v30[0]) = 0;
    if (!__nwlog_fault(v21, type, v30))
      goto LABEL_62;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      v22 = __nwlog_obj();
      v23 = type[0];
      if (!os_log_type_enabled(v22, type[0]))
        goto LABEL_62;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_masque_send_demux_options";
      v24 = "%{public}s called with null demux_options";
      goto LABEL_61;
    }
    if (!LOBYTE(v30[0]))
    {
      v22 = __nwlog_obj();
      v23 = type[0];
      if (!os_log_type_enabled(v22, type[0]))
        goto LABEL_62;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_masque_send_demux_options";
      v24 = "%{public}s called with null demux_options, backtrace limit exceeded";
      goto LABEL_61;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v22 = __nwlog_obj();
    v23 = type[0];
    v28 = os_log_type_enabled(v22, type[0]);
    if (backtrace_string)
    {
      if (v28)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_masque_send_demux_options";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        v27 = "%{public}s called with null demux_options, dumping backtrace:%{public}s";
        goto LABEL_51;
      }
      goto LABEL_52;
    }
    if (!v28)
      goto LABEL_62;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_masque_send_demux_options";
    v24 = "%{public}s called with null demux_options, no backtrace";
    goto LABEL_61;
  }
  v5 = *(_DWORD *)(a1 + 508);
  if ((a3 & 1) != 0)
  {
    if (v5 == 5)
    {
      if ((*(_BYTE *)(a1 + 529) & 1) == 0)
      {
        if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
          dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
        v6 = gprivacy_proxyLogObj;
        if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = a1 + 531;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = " ";
          _os_log_impl(&dword_182FBE000, v6, OS_LOG_TYPE_ERROR, "%{public}s%sCannot send demux options in disconnected state", buf, 0x16u);
        }
      }
      return 0;
    }
  }
  else if (v5 != 4)
  {
    return 0;
  }
  v7 = (int *)(a1 + 527);
  v8 = *(_DWORD *)(a1 + 527);
  if ((v8 & 8) == 0)
    return 0;
  if ((v8 & 0x2000000) == 0 && nw_masque_setup_demux(a1, 1) && nw_masque_setup_demux(a1, 0))
    *v7 |= 0x2000000u;
  *(_QWORD *)type = 0;
  v33 = type;
  v34 = 0x2000000000;
  v35 = 0;
  v10 = MEMORY[0x1E0C809B0];
  v31[0] = MEMORY[0x1E0C809B0];
  v31[1] = 0x40000000;
  v31[2] = ___ZL28nw_masque_send_demux_optionsP9nw_masqueP19nw_protocol_optionsb_block_invoke;
  v31[3] = &unk_1E149E4F8;
  v31[4] = type;
  *(_QWORD *)buf = MEMORY[0x1E0C809B0];
  *(_QWORD *)&buf[8] = 0x40000000;
  *(_QWORD *)&buf[16] = __nw_demux_options_enumerate_patterns_block_invoke;
  v37 = (const char *)&unk_1E149DF30;
  v38 = v31;
  nw_protocol_options_access_handle(a2, buf);
  v30[4] = 0;
  alloc = dispatch_data_create_alloc();
  v30[0] = 0;
  v30[1] = v30;
  v30[2] = 0x2000000000;
  v30[3] = 0;
  v29[0] = v10;
  v29[1] = 0x40000000;
  v29[2] = ___ZL28nw_masque_send_demux_optionsP9nw_masqueP19nw_protocol_optionsb_block_invoke_2;
  v29[3] = &unk_1E149E520;
  v29[4] = v30;
  *(_QWORD *)buf = v10;
  *(_QWORD *)&buf[8] = 0x40000000;
  *(_QWORD *)&buf[16] = __nw_demux_options_enumerate_patterns_block_invoke;
  v37 = (const char *)&unk_1E149DF30;
  v38 = v29;
  nw_protocol_options_access_handle(a2, buf);
  metadata_for_capsule = nw_http_create_metadata_for_capsule(16770304, alloc);
  v9 = nw_masque_send_metadata(a1, (uint64_t)metadata_for_capsule, *(_QWORD *)(a1 + 32));
  v13 = *v7;
  if ((v9 & 1) != 0)
  {
    if ((v13 & 0x10000) != 0)
      goto LABEL_29;
    if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
      dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
    v14 = gprivacy_proxyLogObj;
    if (!os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
      goto LABEL_29;
    *(_DWORD *)buf = 136446722;
    *(_QWORD *)&buf[4] = "nw_masque_send_demux_options";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = a1 + 531;
    *(_WORD *)&buf[22] = 2080;
    v37 = " ";
    v15 = "%{public}s %{public}s%sSent REGISTER_DEMUX_PATTERN capsule";
    v16 = v14;
    v17 = OS_LOG_TYPE_DEBUG;
    v18 = 32;
  }
  else
  {
    if ((v13 & 0x10000) != 0)
      goto LABEL_29;
    if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
      dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
    v19 = gprivacy_proxyLogObj;
    if (!os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
      goto LABEL_29;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = a1 + 531;
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = " ";
    v15 = "%{public}s%sFailed to send REGISTER_DEMUX_PATTERN capsule";
    v16 = v19;
    v17 = OS_LOG_TYPE_ERROR;
    v18 = 22;
  }
  _os_log_impl(&dword_182FBE000, v16, v17, v15, buf, v18);
LABEL_29:
  if (alloc)
    dispatch_release(alloc);
  if (metadata_for_capsule)
    os_release(metadata_for_capsule);
  _Block_object_dispose(v30, 8);
  _Block_object_dispose(type, 8);
  return v9;
}

uint64_t ___ZL28nw_masque_send_demux_optionsP9nw_masqueP19nw_protocol_optionsb_block_invoke(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) += a2 + 4;
  if (a5)
    v5 = a2 + 1;
  else
    v5 = 1;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) += v5;
  return 1;
}

uint64_t ___ZL28nw_masque_send_demux_optionsP9nw_masqueP19nw_protocol_optionsb_block_invoke_2(uint64_t a1, size_t __n, __int16 a3, void *__src, const void *a5)
{
  size_t v7;
  _BYTE *v8;

  **(_WORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = __n;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) += 2;
  **(_WORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = a3;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) += 2;
  v7 = __n;
  memcpy(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), __src, __n);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) += v7;
  v8 = *(_BYTE **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  if (a5)
  {
    *v8 = 1;
    memcpy((void *)++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), a5, v7);
  }
  else
  {
    *v8 = 0;
    v7 = 1;
  }
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) += v7;
  return 1;
}

uint64_t ___ZL41nw_protocol_masque_finalize_output_framesP11nw_protocolP16nw_frame_array_s_block_invoke(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t finalizer_context;
  NSObject *v6;
  uint64_t v7;
  BOOL v8;
  const char *v9;
  const char *v10;
  uint64_t v11;
  unsigned __int8 *v13;
  uint64_t v14;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  void *v21;
  void *v22;
  NSObject *v23;
  NSObject *v24;
  NSObject *v25;
  NSObject *v26;
  const char *hostname;
  int port;
  NSObject *v29;
  NSObject *v30;
  NSObject *v31;
  const char *v32;
  uint64_t v33;
  const char *logging_description;
  const char *v35;
  NSObject *v36;
  uint32_t v37;
  uint64_t v38;
  void *v39;
  int v40;
  int v41;
  uint64_t v44;
  char is_metadata_complete;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  _BOOL4 v54;
  BOOL v55;
  const char *v56;
  const char *v57;
  unsigned int v58;
  unint64_t v59;
  unint64_t v60;
  unsigned __int8 *v61;
  size_t v62;
  uint64_t v63;
  uint64_t url_scheme;
  NSObject *v65;
  NSObject *v66;
  _BOOL4 v67;
  const char *v68;
  const char *v69;
  NSObject *v70;
  _BOOL4 v71;
  BOOL v72;
  const char *v73;
  const char *v74;
  char *v75;
  NSObject *v76;
  os_log_type_t v77;
  const char *v78;
  NSObject *v79;
  _BOOL4 v80;
  const char *v81;
  const char *v82;
  char *backtrace_string;
  _BOOL4 v84;
  NSObject *v85;
  _BOOL4 v86;
  const char *v87;
  const char *v88;
  _QWORD v89[2];
  uint64_t (*v90)(uint64_t, uint64_t);
  void *v91;
  uint64_t v92;
  os_log_type_t *v93;
  unsigned __int8 *v94;
  uint64_t v95;
  uint64_t v96;
  unsigned int v97;
  char v98;
  char v99;
  unsigned int v100;
  os_log_type_t type[8];
  uint64_t v102;
  void (*v103)(uint64_t, uint64_t);
  void *v104;
  _BYTE *v105;
  char *v106;
  char *v107;
  uint8_t v108[4];
  const char *v109;
  __int16 v110;
  uint64_t v111;
  __int16 v112;
  const char *v113;
  _BYTE buf[24];
  uint64_t (*v115)(uint64_t, uint64_t);
  void (*v116)(uint64_t);
  uint64_t v117;
  char v118;
  uint64_t v119;

  v119 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24))
  {
    v4 = a1[5];
    goto LABEL_4;
  }
  finalizer_context = nw_frame_get_finalizer_context(a2);
  v4 = a1[5];
  if (finalizer_context != v4)
  {
LABEL_4:
    if (!v4 || (*(_BYTE *)(v4 + 529) & 1) == 0)
    {
      if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
        dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
      v6 = gprivacy_proxyLogObj;
      if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
      {
        v7 = a1[5];
        v8 = v7 == 0;
        if (v7)
          v9 = (const char *)(v7 + 531);
        else
          v9 = "";
        v10 = " ";
        if (v8)
          v10 = "";
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = v9;
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = v10;
        _os_log_impl(&dword_182FBE000, v6, OS_LOG_TYPE_ERROR, "%{public}s%sReceived invalid early output frame", buf, 0x16u);
      }
    }
    v11 = a2;
    goto LABEL_16;
  }
  *(_DWORD *)(finalizer_context + 527) |= 0x200000u;
  *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = 1;
  v100 = 0;
  v13 = (unsigned __int8 *)nw_frame_unclaimed_bytes(a2, &v100);
  v14 = a1[5];
  if (*(_DWORD *)(v14 + 508) == 1)
  {
    if ((*(_BYTE *)(v14 + 528) & 8) == 0)
      goto LABEL_85;
    if (nw_protocol_copy_http_definition_onceToken != -1)
      dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_11_72660);
    v15 = (id)nw_protocol_copy_http_definition_http_definition;
    v16 = nw_frame_copy_metadata_for_protocol(a2, (uint64_t)v15);
    if (v15)
      os_release(v15);
    v14 = a1[5];
    if (!v16)
      goto LABEL_85;
    if ((!v14 || (*(_BYTE *)(v14 + 529) & 1) == 0) && gLogDatapath)
    {
      if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
        dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
      v79 = gprivacy_proxyLogObj;
      v80 = os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG);
      v14 = a1[5];
      if (v80)
      {
        v81 = (const char *)(v14 + 531);
        if (!v14)
          v81 = "";
        *(_DWORD *)buf = 136446978;
        *(_QWORD *)&buf[4] = "nw_protocol_masque_finalize_output_frames_block_invoke";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v81;
        if (v14)
          v82 = " ";
        else
          v82 = "";
        *(_WORD *)&buf[22] = 2080;
        v115 = (uint64_t (*)(uint64_t, uint64_t))v82;
        LOWORD(v116) = 1024;
        *(_DWORD *)((char *)&v116 + 2) = v100;
        _os_log_impl(&dword_182FBE000, v79, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sReceived HTTP message to proxy, with %u bytes", buf, 0x26u);
        v14 = a1[5];
      }
    }
    *(_DWORD *)(v14 + 527) |= 0x1000u;
    v17 = a1[5];
    if (v17)
    {
      v18 = mach_continuous_time();
      if (v18 <= 1)
        v19 = 1;
      else
        v19 = v18;
      *(_QWORD *)(v17 + 288) = v19;
      v20 = nw_http_metadata_copy_request(v16);
      if (!v20)
      {
        if ((*(_BYTE *)(v17 + 529) & 1) == 0)
        {
          if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
            dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
          v29 = gprivacy_proxyLogObj;
          if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = v17 + 531;
            *(_WORD *)&buf[12] = 2080;
            *(_QWORD *)&buf[14] = " ";
            _os_log_impl(&dword_182FBE000, v29, OS_LOG_TYPE_ERROR, "%{public}s%sHTTP message is not a request", buf, 0x16u);
          }
        }
        nw_masque_mark_failed_with_error(v17, 22);
        goto LABEL_84;
      }
      v21 = v20;
      if (!nw_http_request_has_method(v20, (uint64_t)"POST"))
      {
        if ((*(_BYTE *)(v17 + 529) & 1) == 0)
        {
          if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
            dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
          v30 = gprivacy_proxyLogObj;
          if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = v17 + 531;
            *(_WORD *)&buf[12] = 2080;
            *(_QWORD *)&buf[14] = " ";
            _os_log_impl(&dword_182FBE000, v30, OS_LOG_TYPE_ERROR, "%{public}s%sUnsupported method", buf, 0x16u);
          }
        }
        nw_masque_mark_failed_with_error(v17, 45);
        goto LABEL_83;
      }
      if (*(_QWORD *)(v17 + 320))
      {
        v22 = *(void **)(v17 + 344);
        if (v22)
        {
          v23 = nw_protocol_options_copy_proxy_endpoint(v22);
          if (v23)
          {
            v24 = v23;
            if (nw_endpoint_get_type(v23) == nw_endpoint_type_url)
            {
              v25 = nw_parameters_copy_url_endpoint(*(void **)(v17 + 320));
              if (v25)
              {
                v26 = v25;
                v107 = 0;
                hostname = nw_endpoint_get_hostname(v24);
                port = nw_endpoint_get_port(v24);
                asprintf(&v107, "%s:%u", hostname, port);
                v106 = 0;
                nw_endpoint_get_url_path(v24);
                nw_endpoint_get_url_path(v26);
                if (nw_endpoint_get_port(v26) == 443)
                {
                  nw_endpoint_get_hostname(v26);
                  asprintf(&v106, "%s?targethost=%s&targetpath=%s");
                }
                else
                {
                  nw_endpoint_get_hostname(v26);
                  asprintf(&v106, "%s?targethost=%s:%u&targetpath=%s");
                }
                url_scheme = nw_endpoint_get_url_scheme(v26);
                *(_QWORD *)buf = 0;
                *(_QWORD *)&buf[8] = buf;
                *(_QWORD *)&buf[16] = 0x3802000000;
                v115 = __Block_byref_object_copy__27297;
                v116 = __Block_byref_object_dispose__27298;
                v117 = _nw_http_request_create("POST", url_scheme, v107, v106);
                v118 |= 1u;
                if (v107)
                {
                  free(v107);
                  v107 = 0;
                }
                if (v106)
                {
                  free(v106);
                  v106 = 0;
                }
                os_release(v26);
                os_release(v24);
                *(_QWORD *)type = MEMORY[0x1E0C809B0];
                v102 = 0x40000000;
                v103 = ___ZL30nw_masque_send_proxied_messageP9nw_masqueP20nw_protocol_metadata_block_invoke;
                v104 = &unk_1E149E8E0;
                v105 = buf;
                nw_http_request_access_extended_connect_protocol(v21, type);
                nw_http_request_set_header_fields(*(void **)(*(_QWORD *)&buf[8] + 40), v21);
                if (nw_masque_add_extra_headers_to_request(v17, *(void **)(*(_QWORD *)&buf[8] + 40)))
                {
                  nw_http_metadata_set_request(v16, *(void **)(*(_QWORD *)&buf[8] + 40));
                  if ((nw_masque_send_metadata(v17, (uint64_t)v16, *(_QWORD *)(v17 + 32)) & 1) != 0)
                  {
                    if ((*(_BYTE *)(v17 + 529) & 1) == 0)
                    {
                      if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
                        dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
                      v65 = gprivacy_proxyLogObj;
                      if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
                      {
                        *(_DWORD *)v108 = 136446722;
                        v109 = "nw_masque_send_proxied_message";
                        v110 = 2082;
                        v111 = v17 + 531;
                        v112 = 2080;
                        v113 = " ";
                        _os_log_impl(&dword_182FBE000, v65, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sSent request", v108, 0x20u);
                      }
                    }
                    nw_masque_mark_connected(v17);
                  }
                  else
                  {
                    nw_masque_mark_failed_with_error(v17, 12);
                  }
                }
                _Block_object_dispose(buf, 8);
                if ((v118 & 1) == 0)
                  goto LABEL_83;
                v39 = (void *)v117;
                if (!v117)
                  goto LABEL_83;
                goto LABEL_82;
              }
              if ((*(_BYTE *)(v17 + 529) & 1) != 0)
                goto LABEL_81;
              if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
                dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
              v38 = gprivacy_proxyLogObj;
              if (!os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
              {
LABEL_81:
                nw_masque_mark_failed_with_error(v17, 22);
                v39 = v24;
LABEL_82:
                os_release(v39);
                goto LABEL_83;
              }
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = v17 + 531;
              *(_WORD *)&buf[12] = 2080;
              *(_QWORD *)&buf[14] = " ";
              v35 = "%{public}s%sURL endpoint not found";
              v36 = v38;
              v37 = 22;
            }
            else
            {
              if ((*(_BYTE *)(v17 + 529) & 1) != 0)
                goto LABEL_81;
              if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
                dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
              v33 = gprivacy_proxyLogObj;
              if (!os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
                goto LABEL_81;
              logging_description = nw_endpoint_get_logging_description(v24);
              *(_DWORD *)buf = 136446722;
              *(_QWORD *)&buf[4] = v17 + 531;
              *(_WORD *)&buf[12] = 2080;
              *(_QWORD *)&buf[14] = " ";
              *(_WORD *)&buf[22] = 2082;
              v115 = (uint64_t (*)(uint64_t, uint64_t))logging_description;
              v35 = "%{public}s%sProxy endpoint %{public}s is not of type URL";
              v36 = v33;
              v37 = 32;
            }
            _os_log_impl(&dword_182FBE000, v36, OS_LOG_TYPE_ERROR, v35, buf, v37);
            goto LABEL_81;
          }
          if ((*(_BYTE *)(v17 + 529) & 1) != 0)
            goto LABEL_69;
          if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
            dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
          v31 = gprivacy_proxyLogObj;
          if (!os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
          {
LABEL_69:
            nw_masque_mark_failed_with_error(v17, 22);
LABEL_83:
            os_release(v21);
LABEL_84:
            os_release(v16);
            v14 = a1[5];
LABEL_85:
            v40 = *(_DWORD *)(v14 + 527);
            if ((v40 & 0x1000) == 0)
            {
              if ((v40 & 0x10000) == 0 && gLogDatapath)
              {
                if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
                  dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
                v66 = gprivacy_proxyLogObj;
                v67 = os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG);
                v14 = a1[5];
                if (v67)
                {
                  v68 = (const char *)(v14 + 531);
                  if (!v14)
                    v68 = "";
                  *(_DWORD *)buf = 136446978;
                  *(_QWORD *)&buf[4] = "nw_protocol_masque_finalize_output_frames_block_invoke";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = v68;
                  if (v14)
                    v69 = " ";
                  else
                    v69 = "";
                  *(_WORD *)&buf[22] = 2080;
                  v115 = (uint64_t (*)(uint64_t, uint64_t))v69;
                  LOWORD(v116) = 1024;
                  *(_DWORD *)((char *)&v116 + 2) = v100;
                  _os_log_impl(&dword_182FBE000, v66, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sReceived early output %u bytes", buf, 0x26u);
                  v14 = a1[5];
                }
              }
              if (v100 >= 7 && !*(_QWORD *)(v14 + 384))
              {
                v58 = *v13;
                if (v58 >= 0xC0 && (v58 & 0x30) == 0)
                {
                  v59 = v13[5];
                  if (v59 <= 0x14)
                  {
                    v60 = v59 + 7;
                    if (v59 + 7 < v100)
                    {
                      v61 = &v13[v59];
                      v62 = v61[6];
                      if ((v62 - 1) <= 0x13 && v60 + v62 < v100)
                      {
                        *(_QWORD *)(a1[5] + 384) = dispatch_data_create(v61 + 7, v61[6], 0, 0);
                        v63 = a1[5];
                        if (*(_DWORD *)(v63 + 504) == 2
                          && (*(_QWORD *)buf = 0,
                              *(_QWORD *)(a1[5] + 400) = dispatch_data_create_alloc(),
                              arc4random_buf(*(void **)buf, v62),
                              (v63 = a1[5]) == 0)
                          || (*(_BYTE *)(v63 + 529) & 1) == 0)
                        {
                          if (gLogDatapath)
                          {
                            if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
                              dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
                            v85 = gprivacy_proxyLogObj;
                            v86 = os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG);
                            v63 = a1[5];
                            if (v86)
                            {
                              v87 = (const char *)(v63 + 531);
                              if (!v63)
                                v87 = "";
                              *(_DWORD *)buf = 136446978;
                              *(_QWORD *)&buf[4] = "nw_protocol_masque_finalize_output_frames_block_invoke";
                              *(_WORD *)&buf[12] = 2082;
                              *(_QWORD *)&buf[14] = v87;
                              v88 = " ";
                              if (!v63)
                                v88 = "";
                              *(_WORD *)&buf[22] = 2080;
                              v115 = (uint64_t (*)(uint64_t, uint64_t))v88;
                              LOWORD(v116) = 1024;
                              *(_DWORD *)((char *)&v116 + 2) = v62;
                              _os_log_impl(&dword_182FBE000, v85, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sDetected a client CID of length %u", buf, 0x26u);
                              v63 = a1[5];
                            }
                          }
                        }
                        nw_masque_setup_demux(v63, 1);
                        v14 = a1[5];
                      }
                    }
                  }
                }
              }
              nw_masque_send_connect(v14);
              v14 = a1[5];
            }
            goto LABEL_91;
          }
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = v17 + 531;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = " ";
          v32 = "%{public}s%sProxy endpoint not found";
        }
        else
        {
          if ((*(_BYTE *)(v17 + 529) & 1) != 0)
            goto LABEL_69;
          if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
            dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
          v31 = gprivacy_proxyLogObj;
          if (!os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
            goto LABEL_69;
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = v17 + 531;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = " ";
          v32 = "%{public}s%sOptions not found";
        }
      }
      else
      {
        if ((*(_BYTE *)(v17 + 529) & 1) != 0)
          goto LABEL_69;
        if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
          dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
        v31 = gprivacy_proxyLogObj;
        if (!os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
          goto LABEL_69;
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = v17 + 531;
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = " ";
        v32 = "%{public}s%sParameters not found";
      }
      _os_log_impl(&dword_182FBE000, v31, OS_LOG_TYPE_ERROR, v32, buf, 0x16u);
      goto LABEL_69;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_masque_send_proxied_message";
    v75 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    v108[0] = 0;
    if (__nwlog_fault(v75, type, v108))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        v76 = __nwlog_obj();
        v77 = type[0];
        if (!os_log_type_enabled(v76, type[0]))
          goto LABEL_193;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_masque_send_proxied_message";
        v78 = "%{public}s called with null masque";
        goto LABEL_192;
      }
      if (!v108[0])
      {
        v76 = __nwlog_obj();
        v77 = type[0];
        if (!os_log_type_enabled(v76, type[0]))
          goto LABEL_193;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_masque_send_proxied_message";
        v78 = "%{public}s called with null masque, backtrace limit exceeded";
        goto LABEL_192;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v76 = __nwlog_obj();
      v77 = type[0];
      v84 = os_log_type_enabled(v76, type[0]);
      if (backtrace_string)
      {
        if (v84)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_masque_send_proxied_message";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v76, v77, "%{public}s called with null masque, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_193;
      }
      if (v84)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_masque_send_proxied_message";
        v78 = "%{public}s called with null masque, no backtrace";
LABEL_192:
        _os_log_impl(&dword_182FBE000, v76, v77, v78, buf, 0xCu);
      }
    }
LABEL_193:
    if (v75)
      free(v75);
    goto LABEL_84;
  }
LABEL_91:
  v41 = *(_DWORD *)(v14 + 508);
  if (v41 != 5 && v100 != 0 && v13 != 0)
  {
    *(_QWORD *)type = 0;
    v102 = (uint64_t)type;
    v44 = *(_QWORD *)(a1[6] + 32);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)(v44 + 24) + 88))(v44))
    {
      is_metadata_complete = nw_frame_is_metadata_complete(a2);
      v46 = *(unsigned __int8 *)(a2 + 186) >> 7;
      v89[0] = MEMORY[0x1E0C809B0];
      v89[1] = 0x40000000;
      v90 = ___ZL41nw_protocol_masque_finalize_output_framesP11nw_protocolP16nw_frame_array_s_block_invoke_115;
      v91 = &__block_descriptor_tmp_116;
      v97 = v100;
      v47 = a1[6];
      v92 = a1[5];
      v93 = type;
      v94 = v13;
      v95 = a2;
      v96 = v47;
      v98 = v46;
      v99 = is_metadata_complete;
      v48 = *(_QWORD *)type;
      do
      {
        if (!v48)
          break;
        v49 = *(_QWORD *)(v48 + 32);
        v50 = ((uint64_t (*)(_QWORD *))v90)(v89);
        v48 = v49;
      }
      while ((v50 & 1) != 0);
      if (*(_QWORD *)type)
      {
        v51 = a1[5];
        if ((!v51 || (*(_BYTE *)(v51 + 529) & 1) == 0) && gLogDatapath)
        {
          if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
            dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
          v70 = gprivacy_proxyLogObj;
          v71 = os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG);
          v51 = a1[5];
          if (v71)
          {
            v72 = v51 == 0;
            if (v51)
              v73 = (const char *)(v51 + 531);
            else
              v73 = "";
            *(_DWORD *)buf = 136446978;
            *(_QWORD *)&buf[4] = "nw_protocol_masque_finalize_output_frames_block_invoke";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v73;
            if (v72)
              v74 = "";
            else
              v74 = " ";
            *(_WORD *)&buf[22] = 2080;
            v115 = (uint64_t (*)(uint64_t, uint64_t))v74;
            LOWORD(v116) = 1024;
            *(_DWORD *)((char *)&v116 + 2) = v100;
            _os_log_impl(&dword_182FBE000, v70, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sSending %u early bytes", buf, 0x26u);
            v51 = a1[5];
          }
        }
        *(_DWORD *)(v51 + 527) |= 0x400000u;
        (*(void (**)(uint64_t, os_log_type_t *))(*(_QWORD *)(v44 + 24) + 96))(v44, type);
      }
    }
    else
    {
      v52 = a1[5];
      if (!v52 || (*(_BYTE *)(v52 + 529) & 1) == 0)
      {
        if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
          dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
        v53 = gprivacy_proxyLogObj;
        v54 = os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR);
        v52 = a1[5];
        if (v54)
        {
          v55 = v52 == 0;
          if (v52)
            v56 = (const char *)(v52 + 531);
          else
            v56 = "";
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)&buf[4] = v56;
          v57 = " ";
          if (v55)
            v57 = "";
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = v57;
          *(_WORD *)&buf[22] = 1024;
          LODWORD(v115) = v100;
          _os_log_impl(&dword_182FBE000, v53, OS_LOG_TYPE_ERROR, "%{public}s%sUnable to send %u early bytes", buf, 0x1Cu);
          v52 = a1[5];
        }
      }
      if ((*(_BYTE *)(v52 + 527) & 8) != 0)
        nw_frame_finalize(a2);
    }
    v41 = *(_DWORD *)(a1[5] + 508);
  }
  if (v41 == 4)
  {
    v11 = a2;
LABEL_16:
    nw_frame_finalize(v11);
  }
  return 1;
}

uint64_t ___ZL41nw_protocol_masque_finalize_output_framesP11nw_protocolP16nw_frame_array_s_block_invoke_118(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  uint64_t finalizer_context;
  uint64_t v6;
  int v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  id v15;
  char has_method;
  void *v17;
  NSObject *v18;
  NSObject *v19;
  uint64_t v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  size_t size;
  size_t v27;
  NSObject *v28;
  NSObject *v29;
  uint64_t v30;
  NSObject *v31;
  NSObject *v32;
  size_t v33;
  size_t v34;
  NSObject *v35;
  NSObject *v36;
  _BOOL4 is_equal;
  BOOL v38;
  uint64_t v39;
  NSObject *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  void *v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  NSObject *v52;
  uint64_t v53;
  const char *v54;
  BOOL v55;
  const char *v56;
  unsigned int v57;
  void *v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  BOOL v69;
  NSObject *v70;
  NSObject *v71;
  NSObject *v72;
  const char *v73;
  NSObject *v74;
  const char *logging_description;
  NSObject *v76;
  NSObject *v77;
  uint64_t *v78;
  char *v80;
  NSObject *v81;
  os_log_type_t v82;
  const char *v83;
  NSObject *v84;
  _BOOL4 v85;
  const char *v86;
  BOOL v87;
  const char *v88;
  char *backtrace_string;
  _BOOL4 v90;
  NSObject *v91;
  _BOOL4 v92;
  BOOL v93;
  const char *v94;
  const char *v95;
  NSObject *v96;
  _BOOL4 v97;
  BOOL v98;
  const char *v99;
  const char *v100;
  NSObject *v101;
  _BOOL4 v102;
  BOOL v103;
  const char *v104;
  const char *v105;
  NSObject *v106;
  _BOOL4 v107;
  const char *v108;
  BOOL v109;
  const char *v110;
  NSObject *v111;
  uint64_t v112;
  const char *v113;
  const char *v114;
  NSObject *v115;
  uint64_t v116;
  const char *v117;
  BOOL v118;
  const char *v119;
  _QWORD v120[2];
  uint64_t (*v121)(uint64_t, uint64_t);
  void *v122;
  _BYTE *v123;
  os_log_type_t *v124;
  uint64_t v125;
  _BYTE *v126;
  int8x16_t v127;
  unsigned int v128;
  _QWORD v129[2];
  uint64_t (*v130)(uint64_t, uint64_t);
  void *v131;
  _BYTE *v132;
  _BYTE *v133;
  uint64_t v134;
  _BYTE *v135;
  uint64_t v136;
  uint64_t v137;
  unsigned int v138;
  unsigned int v139;
  os_log_type_t type[8];
  uint64_t v141;
  uint64_t v142;
  void *v143;
  uint64_t *v144;
  _BYTE *v145;
  NSObject *v146;
  uint64_t v147;
  uint64_t *v148;
  uint64_t v149;
  char v150;
  uint8_t buf[4];
  const char *v152;
  __int16 v153;
  uint64_t v154;
  __int16 v155;
  const char *v156;
  _BYTE v157[24];
  void *v158;
  _BYTE *v159;
  _BYTE v160[24];
  uint64_t (*v161)(uint64_t, uint64_t);
  os_log_type_t *v162;
  unint64_t v163;
  _BYTE *v164;
  uint64_t v165;

  v165 = *MEMORY[0x1E0C80C00];
  v139 = 0;
  v4 = (_BYTE *)nw_frame_unclaimed_bytes(a2, &v139);
  finalizer_context = nw_frame_get_finalizer_context(a2);
  v6 = *(_QWORD *)(a1 + 32);
  if (finalizer_context == v6)
  {
    v22 = finalizer_context;
    *(_QWORD *)v157 = 0;
    *(_QWORD *)&v157[8] = v157;
    v23 = *(_QWORD *)(a1 + 40);
    v24 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 32);
    if (*(_QWORD *)(finalizer_context + 224))
    {
      v25 = *(NSObject **)(finalizer_context + 392);
      if (v25)
      {
        size = dispatch_data_get_size(v25);
        if (size + 1 < v139)
        {
          v27 = size;
          v28 = *(NSObject **)(v22 + 408);
          if ((!v28 || dispatch_data_get_size(v28) == v27) && (*v4 & 0xC0) == 0x40)
          {
            v29 = dispatch_data_create(v4 + 1, v27, 0, (dispatch_block_t)*MEMORY[0x1E0C80CF0]);
            if (nw_dispatch_data_is_equal(v29, *(NSObject **)(*(_QWORD *)(a1 + 32) + 392)))
            {
              v30 = *(_QWORD *)(a1 + 32);
              if ((!v30 || (*(_BYTE *)(v30 + 529) & 1) == 0) && gLogDatapath)
              {
                if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
                  dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
                v91 = gprivacy_proxyLogObj;
                v92 = os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG);
                v30 = *(_QWORD *)(a1 + 32);
                if (v92)
                {
                  v93 = v30 == 0;
                  if (v30)
                    v94 = (const char *)(v30 + 531);
                  else
                    v94 = "";
                  *(_DWORD *)v160 = 136446978;
                  *(_QWORD *)&v160[4] = "nw_protocol_masque_finalize_output_frames_block_invoke";
                  *(_WORD *)&v160[12] = 2082;
                  *(_QWORD *)&v160[14] = v94;
                  if (v93)
                    v95 = "";
                  else
                    v95 = " ";
                  *(_WORD *)&v160[22] = 2080;
                  v161 = (uint64_t (*)(uint64_t, uint64_t))v95;
                  LOWORD(v162) = 1024;
                  *(_DWORD *)((char *)&v162 + 2) = v139;
                  _os_log_impl(&dword_182FBE000, v91, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sDetected packet of length %u to forward directly to demux", v160, 0x26u);
                  v30 = *(_QWORD *)(a1 + 32);
                }
              }
              v31 = *(NSObject **)(v30 + 408);
              if (v31)
              {
                nw_dispatch_data_copyout(v31, (uint64_t)(v4 + 1), v27);
                v30 = *(_QWORD *)(a1 + 32);
                if (!v30 || (*(_BYTE *)(v30 + 529) & 1) == 0)
                {
                  if (gLogDatapath)
                  {
                    if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
                      dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
                    v106 = gprivacy_proxyLogObj;
                    v107 = os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG);
                    v30 = *(_QWORD *)(a1 + 32);
                    if (v107)
                    {
                      v108 = "";
                      v109 = v30 == 0;
                      if (v30)
                        v110 = (const char *)(v30 + 531);
                      else
                        v110 = "";
                      *(_DWORD *)v160 = 136446722;
                      *(_QWORD *)&v160[4] = "nw_protocol_masque_finalize_output_frames_block_invoke";
                      if (!v109)
                        v108 = " ";
                      *(_WORD *)&v160[12] = 2082;
                      *(_QWORD *)&v160[14] = v110;
                      *(_WORD *)&v160[22] = 2080;
                      v161 = (uint64_t (*)(uint64_t, uint64_t))v108;
                      _os_log_impl(&dword_182FBE000, v106, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sReplacing with virtual CID before forwarding", v160, 0x20u);
                      v30 = *(_QWORD *)(a1 + 32);
                    }
                  }
                }
              }
              v24 = *(_QWORD *)(v30 + 224);
              v23 = *(_QWORD *)(a1 + 56);
            }
            if (v29)
              dispatch_release(v29);
          }
        }
      }
      else if ((*(_BYTE *)(v22 + 528) & 4) != 0)
      {
        v44 = *(void **)(v22 + 448);
        if (v44)
        {
          if (v4)
          {
            if (v139)
            {
              *(_QWORD *)type = 0;
              v141 = (uint64_t)type;
              v142 = 0x2000000000;
              LOBYTE(v143) = 0;
              *(_QWORD *)v160 = MEMORY[0x1E0C809B0];
              *(_QWORD *)&v160[8] = 0x40000000;
              *(_QWORD *)&v160[16] = ___ZL29nw_masque_match_demux_patternPKhmP19nw_protocol_options_block_invoke;
              v161 = (uint64_t (*)(uint64_t, uint64_t))&unk_1E149E908;
              v163 = v139;
              v164 = v4;
              v162 = type;
              nw_demux_options_enumerate_patterns(v44, (uint64_t)v160);
              v45 = *(unsigned __int8 *)(v141 + 24);
              _Block_object_dispose(type, 8);
              if (v45)
              {
                v46 = *(_QWORD *)(a1 + 32);
                if ((!v46 || (*(_BYTE *)(v46 + 529) & 1) == 0) && gLogDatapath)
                {
                  if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
                    dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
                  v101 = gprivacy_proxyLogObj;
                  v102 = os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG);
                  v46 = *(_QWORD *)(a1 + 32);
                  if (v102)
                  {
                    v103 = v46 == 0;
                    if (v46)
                      v104 = (const char *)(v46 + 531);
                    else
                      v104 = "";
                    *(_DWORD *)v160 = 136446978;
                    *(_QWORD *)&v160[4] = "nw_protocol_masque_finalize_output_frames_block_invoke";
                    *(_WORD *)&v160[12] = 2082;
                    *(_QWORD *)&v160[14] = v104;
                    if (v103)
                      v105 = "";
                    else
                      v105 = " ";
                    *(_WORD *)&v160[22] = 2080;
                    v161 = (uint64_t (*)(uint64_t, uint64_t))v105;
                    LOWORD(v162) = 1024;
                    *(_DWORD *)((char *)&v162 + 2) = v139;
                    _os_log_impl(&dword_182FBE000, v101, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sDetected packet of length %u to forward directly to demux (fast path)", v160, 0x26u);
                    v46 = *(_QWORD *)(a1 + 32);
                  }
                }
                v24 = *(_QWORD *)(v46 + 224);
                v23 = *(_QWORD *)(a1 + 56);
              }
            }
          }
        }
      }
    }
    if ((*(unsigned int (**)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t, _BYTE *))(*(_QWORD *)(v24 + 24) + 88))(v24, *(_QWORD *)(a1 + 48), v139, v139, 1, v157))
    {
      *(_QWORD *)v160 = 0;
      *(_QWORD *)&v160[8] = v160;
      *(_QWORD *)&v160[16] = 0x2000000000;
      LOBYTE(v161) = 0;
      v129[0] = MEMORY[0x1E0C809B0];
      v129[1] = 0x40000000;
      v130 = ___ZL41nw_protocol_masque_finalize_output_framesP11nw_protocolP16nw_frame_array_s_block_invoke_119;
      v131 = &unk_1E149E870;
      v138 = v139;
      v47 = *(_QWORD *)(a1 + 32);
      v132 = v160;
      v133 = v157;
      v134 = v47;
      v135 = v4;
      v136 = *(_QWORD *)(a1 + 48);
      v137 = v23;
      v48 = *(_QWORD *)v157;
      do
      {
        if (!v48)
          break;
        v49 = *(_QWORD *)(v48 + 32);
        v50 = ((uint64_t (*)(_QWORD *))v130)(v129);
        v48 = v49;
      }
      while ((v50 & 1) != 0);
      goto LABEL_102;
    }
    v51 = *(_QWORD *)(a1 + 32);
    if (v51 && (*(_BYTE *)(v51 + 529) & 1) != 0)
      goto LABEL_114;
    if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
      dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
    v52 = gprivacy_proxyLogObj;
    if (!os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
      goto LABEL_114;
    v53 = *(_QWORD *)(a1 + 32);
    v54 = "";
    v55 = v53 == 0;
    if (v53)
      v56 = (const char *)(v53 + 531);
    else
      v56 = "";
    v57 = v139;
    *(_DWORD *)v160 = 136446722;
    if (!v55)
      v54 = " ";
LABEL_113:
    *(_QWORD *)&v160[4] = v56;
    *(_WORD *)&v160[12] = 2080;
    *(_QWORD *)&v160[14] = v54;
    *(_WORD *)&v160[22] = 1024;
    LODWORD(v161) = v57;
    _os_log_impl(&dword_182FBE000, v52, OS_LOG_TYPE_ERROR, "%{public}s%sUnable to send %u bytes", v160, 0x1Cu);
    goto LABEL_114;
  }
  v7 = *(_DWORD *)(v6 + 527);
  if ((v7 & 0x800000) == 0)
  {
    if ((*(_DWORD *)(v6 + 527) & 0x6000) != 0x2000)
      goto LABEL_156;
    if (nw_protocol_copy_http_definition_onceToken != -1)
      dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_11_72660);
    v8 = (id)nw_protocol_copy_http_definition_http_definition;
    v9 = nw_frame_copy_metadata_for_protocol(a2, (uint64_t)v8);
    if (v8)
      os_release(v8);
    if (!v9)
      goto LABEL_156;
    v10 = *(_QWORD *)(a1 + 32);
    if ((!v10 || (*(_BYTE *)(v10 + 529) & 1) == 0) && gLogDatapath)
    {
      if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
        dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
      v84 = gprivacy_proxyLogObj;
      v85 = os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG);
      v10 = *(_QWORD *)(a1 + 32);
      if (v85)
      {
        v86 = "";
        v87 = v10 == 0;
        if (v10)
          v88 = (const char *)(v10 + 531);
        else
          v88 = "";
        *(_DWORD *)v160 = 136446722;
        *(_QWORD *)&v160[4] = "nw_protocol_masque_finalize_output_frames_block_invoke";
        if (!v87)
          v86 = " ";
        *(_WORD *)&v160[12] = 2082;
        *(_QWORD *)&v160[14] = v88;
        *(_WORD *)&v160[22] = 2080;
        v161 = (uint64_t (*)(uint64_t, uint64_t))v86;
        _os_log_impl(&dword_182FBE000, v84, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sSending oblivious HTTP message to proxy", v160, 0x20u);
        v10 = *(_QWORD *)(a1 + 32);
      }
    }
    *(_DWORD *)(v10 + 527) |= 0x4000u;
    v11 = *(_QWORD *)(a1 + 32);
    if (v11)
    {
      v12 = mach_continuous_time();
      if (v12 <= 1)
        v13 = 1;
      else
        v13 = v12;
      *(_QWORD *)(v11 + 288) = v13;
      v14 = nw_http_metadata_copy_request(v9);
      if (!v14)
      {
        if ((*(_BYTE *)(v11 + 529) & 1) == 0)
        {
          if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
            dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
          v70 = gprivacy_proxyLogObj;
          if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v160 = 136446466;
            *(_QWORD *)&v160[4] = v11 + 531;
            *(_WORD *)&v160[12] = 2080;
            *(_QWORD *)&v160[14] = " ";
            _os_log_impl(&dword_182FBE000, v70, OS_LOG_TYPE_ERROR, "%{public}s%sHTTP message is not a request", v160, 0x16u);
          }
        }
        nw_masque_mark_failed_with_error(v11, 22);
        goto LABEL_155;
      }
      v15 = v14;
      has_method = _nw_http_request_has_method((uint64_t)v15);

      if ((has_method & 1) == 0)
      {
        if ((*(_BYTE *)(v11 + 529) & 1) == 0)
        {
          if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
            dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
          v71 = gprivacy_proxyLogObj;
          if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v160 = 136446466;
            *(_QWORD *)&v160[4] = v11 + 531;
            *(_WORD *)&v160[12] = 2080;
            *(_QWORD *)&v160[14] = " ";
            _os_log_impl(&dword_182FBE000, v71, OS_LOG_TYPE_ERROR, "%{public}s%sUnsupported method", v160, 0x16u);
          }
        }
        nw_masque_mark_failed_with_error(v11, 45);
        goto LABEL_154;
      }
      v17 = *(void **)(v11 + 344);
      if (v17)
      {
        v18 = nw_protocol_options_copy_proxy_endpoint(v17);
        if (v18)
        {
          v19 = v18;
          if (nw_endpoint_get_type(v18) == nw_endpoint_type_url)
          {
            *(_QWORD *)v160 = 0;
            *(_QWORD *)&v160[8] = v160;
            *(_QWORD *)&v160[16] = 0x3802000000;
            v161 = __Block_byref_object_copy__27297;
            v162 = (os_log_type_t *)__Block_byref_object_dispose__27298;
            v163 = 0;
            LOBYTE(v164) = -1;
            v147 = 0;
            v148 = &v147;
            v149 = 0x2000000000;
            v150 = 0;
            v20 = MEMORY[0x1E0C809B0];
            *(_QWORD *)type = MEMORY[0x1E0C809B0];
            v141 = 0x40000000;
            v142 = (uint64_t)___ZL42nw_masque_modify_proxied_oblivious_messageP9nw_masqueP20nw_protocol_metadata_block_invoke;
            v143 = &unk_1E149E930;
            v145 = v160;
            v146 = v19;
            v144 = &v147;
            nw_http_request_access_path(v15, type);
            if (*((_BYTE *)v148 + 24))
            {
              *(_QWORD *)v157 = v20;
              *(_QWORD *)&v157[8] = 0x40000000;
              *(_QWORD *)&v157[16] = ___ZL42nw_masque_modify_proxied_oblivious_messageP9nw_masqueP20nw_protocol_metadata_block_invoke_130;
              v158 = &unk_1E149E958;
              v159 = v160;
              nw_http_request_access_extended_connect_protocol(v15, v157);
              nw_http_request_set_header_fields(*(void **)(*(_QWORD *)&v160[8] + 40), v15);
              if (nw_masque_add_extra_headers_to_request(v11, *(void **)(*(_QWORD *)&v160[8] + 40)))
              {
                nw_http_metadata_set_request(v9, *(void **)(*(_QWORD *)&v160[8] + 40));
                os_release(v19);
                if ((*(_BYTE *)(v11 + 529) & 1) == 0)
                {
                  if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
                    dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
                  v21 = gprivacy_proxyLogObj;
                  if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)buf = 136446722;
                    v152 = "nw_masque_modify_proxied_oblivious_message";
                    v153 = 2082;
                    v154 = v11 + 531;
                    v155 = 2080;
                    v156 = " ";
                    _os_log_impl(&dword_182FBE000, v21, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sModified oblivious request", buf, 0x20u);
                  }
                }
              }
            }
            else
            {
              if ((*(_BYTE *)(v11 + 529) & 1) == 0)
              {
                if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
                  dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
                v77 = gprivacy_proxyLogObj;
                if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)v157 = 136446466;
                  *(_QWORD *)&v157[4] = v11 + 531;
                  *(_WORD *)&v157[12] = 2080;
                  *(_QWORD *)&v157[14] = " ";
                  _os_log_impl(&dword_182FBE000, v77, OS_LOG_TYPE_ERROR, "%{public}s%sPath missing from message", v157, 0x16u);
                }
              }
              nw_masque_mark_failed_with_error(v11, 22);
              os_release(v19);
            }
            _Block_object_dispose(&v147, 8);
            _Block_object_dispose(v160, 8);
            if ((v164 & 1) == 0)
              goto LABEL_154;
            v76 = v163;
            if (!v163)
              goto LABEL_154;
          }
          else
          {
            if ((*(_BYTE *)(v11 + 529) & 1) == 0)
            {
              if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
                dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
              v74 = gprivacy_proxyLogObj;
              if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
              {
                logging_description = nw_endpoint_get_logging_description(v19);
                *(_DWORD *)v160 = 136446722;
                *(_QWORD *)&v160[4] = v11 + 531;
                *(_WORD *)&v160[12] = 2080;
                *(_QWORD *)&v160[14] = " ";
                *(_WORD *)&v160[22] = 2082;
                v161 = (uint64_t (*)(uint64_t, uint64_t))logging_description;
                _os_log_impl(&dword_182FBE000, v74, OS_LOG_TYPE_ERROR, "%{public}s%sProxy endpoint %{public}s is not of type URL", v160, 0x20u);
              }
            }
            nw_masque_mark_failed_with_error(v11, 22);
            v76 = v19;
          }
          os_release(v76);
LABEL_154:
          os_release(v15);
LABEL_155:
          os_release(v9);
LABEL_156:
          v61 = *(_QWORD *)(a1 + 40);
LABEL_157:
          *(_QWORD *)(a2 + 32) = 0;
          v78 = *(uint64_t **)(v61 + 8);
          *(_QWORD *)(a2 + 40) = v78;
          *v78 = a2;
          *(_QWORD *)(v61 + 8) = a2 + 32;
          return 1;
        }
        if ((*(_BYTE *)(v11 + 529) & 1) != 0)
          goto LABEL_138;
        if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
          dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
        v72 = gprivacy_proxyLogObj;
        if (!os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
        {
LABEL_138:
          nw_masque_mark_failed_with_error(v11, 22);
          goto LABEL_154;
        }
        *(_DWORD *)v160 = 136446466;
        *(_QWORD *)&v160[4] = v11 + 531;
        *(_WORD *)&v160[12] = 2080;
        *(_QWORD *)&v160[14] = " ";
        v73 = "%{public}s%sProxy endpoint not found";
      }
      else
      {
        if ((*(_BYTE *)(v11 + 529) & 1) != 0)
          goto LABEL_138;
        if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
          dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
        v72 = gprivacy_proxyLogObj;
        if (!os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
          goto LABEL_138;
        *(_DWORD *)v160 = 136446466;
        *(_QWORD *)&v160[4] = v11 + 531;
        *(_WORD *)&v160[12] = 2080;
        *(_QWORD *)&v160[14] = " ";
        v73 = "%{public}s%sOptions not found";
      }
      _os_log_impl(&dword_182FBE000, v72, OS_LOG_TYPE_ERROR, v73, v160, 0x16u);
      goto LABEL_138;
    }
    __nwlog_obj();
    *(_DWORD *)v160 = 136446210;
    *(_QWORD *)&v160[4] = "nw_masque_modify_proxied_oblivious_message";
    v80 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    v157[0] = 0;
    if (__nwlog_fault(v80, type, v157))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        v81 = __nwlog_obj();
        v82 = type[0];
        if (!os_log_type_enabled(v81, type[0]))
          goto LABEL_192;
        *(_DWORD *)v160 = 136446210;
        *(_QWORD *)&v160[4] = "nw_masque_modify_proxied_oblivious_message";
        v83 = "%{public}s called with null masque";
        goto LABEL_191;
      }
      if (!v157[0])
      {
        v81 = __nwlog_obj();
        v82 = type[0];
        if (!os_log_type_enabled(v81, type[0]))
          goto LABEL_192;
        *(_DWORD *)v160 = 136446210;
        *(_QWORD *)&v160[4] = "nw_masque_modify_proxied_oblivious_message";
        v83 = "%{public}s called with null masque, backtrace limit exceeded";
        goto LABEL_191;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v81 = __nwlog_obj();
      v82 = type[0];
      v90 = os_log_type_enabled(v81, type[0]);
      if (backtrace_string)
      {
        if (v90)
        {
          *(_DWORD *)v160 = 136446466;
          *(_QWORD *)&v160[4] = "nw_masque_modify_proxied_oblivious_message";
          *(_WORD *)&v160[12] = 2082;
          *(_QWORD *)&v160[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v81, v82, "%{public}s called with null masque, dumping backtrace:%{public}s", v160, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_192;
      }
      if (v90)
      {
        *(_DWORD *)v160 = 136446210;
        *(_QWORD *)&v160[4] = "nw_masque_modify_proxied_oblivious_message";
        v83 = "%{public}s called with null masque, no backtrace";
LABEL_191:
        _os_log_impl(&dword_182FBE000, v81, v82, v83, v160, 0xCu);
      }
    }
LABEL_192:
    if (v80)
      free(v80);
    goto LABEL_155;
  }
  if (!*(_QWORD *)(v6 + 224))
    goto LABEL_98;
  v32 = *(NSObject **)(v6 + 392);
  if (!v32)
  {
    if ((v7 & 0x400) != 0)
    {
      v58 = *(void **)(v6 + 448);
      if (v58)
      {
        if (v4)
        {
          if (v139)
          {
            *(_QWORD *)type = 0;
            v141 = (uint64_t)type;
            v142 = 0x2000000000;
            LOBYTE(v143) = 0;
            *(_QWORD *)v160 = MEMORY[0x1E0C809B0];
            *(_QWORD *)&v160[8] = 0x40000000;
            *(_QWORD *)&v160[16] = ___ZL29nw_masque_match_demux_patternPKhmP19nw_protocol_options_block_invoke;
            v161 = (uint64_t (*)(uint64_t, uint64_t))&unk_1E149E908;
            v163 = v139;
            v164 = v4;
            v162 = type;
            nw_demux_options_enumerate_patterns(v58, (uint64_t)v160);
            v59 = *(unsigned __int8 *)(v141 + 24);
            _Block_object_dispose(type, 8);
            if (v59)
            {
              v60 = *(_QWORD *)(a1 + 32);
              if ((!v60 || (*(_BYTE *)(v60 + 529) & 1) == 0) && gLogDatapath)
              {
                if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
                  dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
                v111 = gprivacy_proxyLogObj;
                if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
                {
                  v112 = *(_QWORD *)(a1 + 32);
                  v113 = (const char *)(v112 + 531);
                  v114 = "";
                  if (!v112)
                    v113 = "";
                  *(_QWORD *)&v160[4] = "nw_protocol_masque_finalize_output_frames_block_invoke";
                  *(_WORD *)&v160[12] = 2082;
                  *(_DWORD *)v160 = 136446978;
                  if (v112)
                    v114 = " ";
                  *(_QWORD *)&v160[14] = v113;
                  *(_WORD *)&v160[22] = 2080;
                  v161 = (uint64_t (*)(uint64_t, uint64_t))v114;
                  LOWORD(v162) = 1024;
                  *(_DWORD *)((char *)&v162 + 2) = v139;
                  _os_log_impl(&dword_182FBE000, v111, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sDetected packet of length %u to forward directly to demux (fast path)", v160, 0x26u);
                }
              }
              v61 = *(_QWORD *)(a1 + 56);
              goto LABEL_157;
            }
          }
        }
      }
    }
    goto LABEL_98;
  }
  v33 = dispatch_data_get_size(v32);
  if (v33 + 1 >= v139)
    goto LABEL_98;
  v34 = v33;
  v35 = *(NSObject **)(v6 + 408);
  if (v35)
  {
    if (dispatch_data_get_size(v35) != v34)
      goto LABEL_98;
  }
  if ((*v4 & 0xC0) != 0x40)
    goto LABEL_98;
  v36 = dispatch_data_create(v4 + 1, v34, 0, (dispatch_block_t)*MEMORY[0x1E0C80CF0]);
  is_equal = nw_dispatch_data_is_equal(v36, *(NSObject **)(*(_QWORD *)(a1 + 32) + 392));
  v38 = is_equal;
  if (is_equal)
  {
    v39 = *(_QWORD *)(a1 + 32);
    if ((!v39 || (*(_BYTE *)(v39 + 529) & 1) == 0) && gLogDatapath)
    {
      if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
        dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
      v96 = gprivacy_proxyLogObj;
      v97 = os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG);
      v39 = *(_QWORD *)(a1 + 32);
      if (v97)
      {
        v98 = v39 == 0;
        if (v39)
          v99 = (const char *)(v39 + 531);
        else
          v99 = "";
        *(_DWORD *)v160 = 136446978;
        *(_QWORD *)&v160[4] = "nw_protocol_masque_finalize_output_frames_block_invoke";
        *(_WORD *)&v160[12] = 2082;
        *(_QWORD *)&v160[14] = v99;
        if (v98)
          v100 = "";
        else
          v100 = " ";
        *(_WORD *)&v160[22] = 2080;
        v161 = (uint64_t (*)(uint64_t, uint64_t))v100;
        LOWORD(v162) = 1024;
        *(_DWORD *)((char *)&v162 + 2) = v139;
        _os_log_impl(&dword_182FBE000, v96, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sDetected packet of length %u to forward directly to demux (fast path)", v160, 0x26u);
        v39 = *(_QWORD *)(a1 + 32);
      }
    }
    v40 = *(NSObject **)(v39 + 408);
    if (v40)
    {
      nw_dispatch_data_copyout(v40, (uint64_t)(v4 + 1), v34);
      v41 = *(_QWORD *)(a1 + 32);
      if (!v41 || (*(_BYTE *)(v41 + 529) & 1) == 0)
      {
        if (gLogDatapath)
        {
          if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
            dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
          v115 = gprivacy_proxyLogObj;
          if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
          {
            v116 = *(_QWORD *)(a1 + 32);
            v117 = "";
            v118 = v116 == 0;
            if (v116)
              v119 = (const char *)(v116 + 531);
            else
              v119 = "";
            *(_DWORD *)v160 = 136446722;
            *(_QWORD *)&v160[4] = "nw_protocol_masque_finalize_output_frames_block_invoke";
            if (!v118)
              v117 = " ";
            *(_WORD *)&v160[12] = 2082;
            *(_QWORD *)&v160[14] = v119;
            *(_WORD *)&v160[22] = 2080;
            v161 = (uint64_t (*)(uint64_t, uint64_t))v117;
            _os_log_impl(&dword_182FBE000, v115, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sReplacing with virtual CID before forwarding", v160, 0x20u);
          }
        }
      }
    }
    v42 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a2 + 32) = 0;
    v43 = *(uint64_t **)(v42 + 8);
    *(_QWORD *)(a2 + 40) = v43;
    *v43 = a2;
    *(_QWORD *)(v42 + 8) = a2 + 32;
  }
  if (v36)
    dispatch_release(v36);
  if (!v38)
  {
LABEL_98:
    v62 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 32);
    *(_QWORD *)type = 0;
    v141 = (uint64_t)type;
    if ((*(unsigned int (**)(void))(*(_QWORD *)(v62 + 24) + 88))())
    {
      *(_QWORD *)v160 = 0;
      *(_QWORD *)&v160[8] = v160;
      *(_QWORD *)&v160[16] = 0x2000000000;
      LOBYTE(v161) = 0;
      v120[0] = MEMORY[0x1E0C809B0];
      v120[1] = 0x40000000;
      v121 = ___ZL41nw_protocol_masque_finalize_output_framesP11nw_protocolP16nw_frame_array_s_block_invoke_121;
      v122 = &unk_1E149E898;
      v128 = v139;
      v63 = *(_QWORD *)(a1 + 32);
      v123 = v160;
      v124 = type;
      v125 = v63;
      v126 = v4;
      v127 = vextq_s8(*(int8x16_t *)(a1 + 40), *(int8x16_t *)(a1 + 40), 8uLL);
      v64 = *(_QWORD *)type;
      do
      {
        if (!v64)
          break;
        v65 = *(_QWORD *)(v64 + 32);
        v66 = ((uint64_t (*)(_QWORD *))v121)(v120);
        v64 = v65;
      }
      while ((v66 & 1) != 0);
LABEL_102:
      _Block_object_dispose(v160, 8);
LABEL_114:
      nw_frame_finalize(a2);
      return 1;
    }
    v67 = *(_QWORD *)(a1 + 32);
    if (v67 && (*(_BYTE *)(v67 + 529) & 1) != 0)
      goto LABEL_114;
    if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
      dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
    v52 = gprivacy_proxyLogObj;
    if (!os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
      goto LABEL_114;
    v68 = *(_QWORD *)(a1 + 32);
    v54 = "";
    v69 = v68 == 0;
    if (v68)
      v56 = (const char *)(v68 + 531);
    else
      v56 = "";
    v57 = v139;
    *(_DWORD *)v160 = 136446722;
    if (!v69)
      v54 = " ";
    goto LABEL_113;
  }
  return 1;
}

uint64_t ___ZL29nw_masque_match_demux_patternPKhmP19nw_protocol_options_block_invoke(_QWORD *a1, unsigned int a2, unsigned int a3, unsigned __int8 *a4, unsigned __int8 *a5)
{
  uint64_t v5;
  unsigned __int8 *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  _BOOL8 v14;
  char v15;
  int v16;
  int v17;
  int v18;
  BOOL v19;

  v5 = a2;
  if (a1[5] < a2 + (unint64_t)a3)
    return 1;
  if (a2)
  {
    v7 = (unsigned __int8 *)a1[6];
    if (a5)
    {
      while (1)
      {
        v9 = *v7++;
        v8 = v9;
        v11 = *a5++;
        v10 = v11;
        v12 = *a4++;
        v13 = (v8 ^ v12) & v10;
        v14 = v13 != 0;
        if (v13)
          break;
        if (!--v5)
          goto LABEL_7;
      }
    }
    else
    {
      while (1)
      {
        v17 = *v7++;
        v16 = v17;
        v18 = *a4++;
        v19 = v16 == v18;
        v14 = v16 != v18;
        if (!v19)
          break;
        if (!--v5)
          goto LABEL_7;
      }
    }
    v15 = 0;
  }
  else
  {
LABEL_7:
    v14 = 0;
    v15 = 1;
  }
  *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = v15;
  return v14;
}

uint64_t ___ZL41nw_protocol_masque_finalize_output_framesP11nw_protocolP16nw_frame_array_s_block_invoke_119(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  const char *v16;
  BOOL v17;
  const char *v18;
  int v19;
  unsigned int v21;
  uint8_t buf[4];
  const char *v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  int v27;
  __int16 v28;
  unsigned int v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v21 = 0;
  v4 = (void *)nw_frame_unclaimed_bytes(a2, &v21);
  v5 = *(_QWORD *)(a2 + 32);
  v6 = *(_QWORD **)(a2 + 40);
  v7 = (_QWORD *)(a2 + 32);
  if (v5)
  {
    *(_QWORD *)(v5 + 40) = v6;
    v6 = *(_QWORD **)(a2 + 40);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) = v6;
  }
  *v6 = v5;
  *v7 = 0;
  *(_QWORD *)(a2 + 40) = 0;
  v8 = *(unsigned int *)(a1 + 80);
  if (v21 >= v8 && v4)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
    memcpy(v4, *(const void **)(a1 + 56), v8);
    nw_frame_claim(a2, v9, *(_DWORD *)(a1 + 80), 0);
    nw_frame_collapse(a2);
    nw_frame_unclaim(a2, v10, *(_DWORD *)(a1 + 80), 0);
    v11 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a2 + 32) = 0;
    v12 = *(uint64_t **)(v11 + 8);
    *(_QWORD *)(a2 + 40) = v12;
    *v12 = a2;
    *(_QWORD *)(v11 + 8) = v7;
  }
  else
  {
    v13 = *(_QWORD *)(a1 + 48);
    if (!v13 || (*(_BYTE *)(v13 + 529) & 1) == 0)
    {
      if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
        dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
      v14 = gprivacy_proxyLogObj;
      if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
      {
        v15 = *(_QWORD *)(a1 + 48);
        v16 = (const char *)(v15 + 531);
        v17 = v15 == 0;
        v18 = " ";
        v19 = *(_DWORD *)(a1 + 80);
        if (v17)
        {
          v16 = "";
          v18 = "";
        }
        *(_DWORD *)buf = 136446978;
        v23 = v16;
        v24 = 2080;
        v25 = v18;
        v26 = 1024;
        v27 = v19;
        v28 = 1024;
        v29 = v21;
        _os_log_impl(&dword_182FBE000, v14, OS_LOG_TYPE_ERROR, "%{public}s%sUnable to send %u bytes, only received %u bytes", buf, 0x22u);
      }
    }
    nw_frame_finalize(a2);
  }
  return 1;
}

uint64_t ___ZL41nw_protocol_masque_finalize_output_framesP11nw_protocolP16nw_frame_array_s_block_invoke_121(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  const char *v16;
  BOOL v17;
  const char *v18;
  int v19;
  unsigned int v21;
  uint8_t buf[4];
  const char *v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  int v27;
  __int16 v28;
  unsigned int v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v21 = 0;
  v4 = (void *)nw_frame_unclaimed_bytes(a2, &v21);
  v5 = *(_QWORD *)(a2 + 32);
  v6 = *(_QWORD **)(a2 + 40);
  v7 = (_QWORD *)(a2 + 32);
  if (v5)
  {
    *(_QWORD *)(v5 + 40) = v6;
    v6 = *(_QWORD **)(a2 + 40);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) = v6;
  }
  *v6 = v5;
  *v7 = 0;
  *(_QWORD *)(a2 + 40) = 0;
  v8 = *(unsigned int *)(a1 + 80);
  if (v21 >= v8 && v4)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
    memcpy(v4, *(const void **)(a1 + 56), v8);
    nw_frame_claim(a2, v9, *(_DWORD *)(a1 + 80), 0);
    nw_frame_collapse(a2);
    nw_frame_unclaim(a2, v10, *(_DWORD *)(a1 + 80), 0);
    v11 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a2 + 32) = 0;
    v12 = *(uint64_t **)(v11 + 8);
    *(_QWORD *)(a2 + 40) = v12;
    *v12 = a2;
    *(_QWORD *)(v11 + 8) = v7;
  }
  else
  {
    v13 = *(_QWORD *)(a1 + 48);
    if (!v13 || (*(_BYTE *)(v13 + 529) & 1) == 0)
    {
      if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
        dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
      v14 = gprivacy_proxyLogObj;
      if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
      {
        v15 = *(_QWORD *)(a1 + 48);
        v16 = (const char *)(v15 + 531);
        v17 = v15 == 0;
        v18 = " ";
        v19 = *(_DWORD *)(a1 + 80);
        if (v17)
        {
          v16 = "";
          v18 = "";
        }
        *(_DWORD *)buf = 136446978;
        v23 = v16;
        v24 = 2080;
        v25 = v18;
        v26 = 1024;
        v27 = v19;
        v28 = 1024;
        v29 = v21;
        _os_log_impl(&dword_182FBE000, v14, OS_LOG_TYPE_ERROR, "%{public}s%sUnable to send %u bytes, only received %u bytes", buf, 0x22u);
      }
    }
    nw_frame_finalize(a2);
  }
  return 1;
}

uint64_t __Block_byref_object_copy__27297(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(result + 48) = *(_BYTE *)(result + 48) & 0xFE | *(_BYTE *)(a2 + 48) & 1;
  *(_QWORD *)(a2 + 40) = 0;
  *(_BYTE *)(a2 + 48) &= ~1u;
  return result;
}

void __Block_byref_object_dispose__27298(uint64_t a1)
{
  void *v2;

  if ((*(_BYTE *)(a1 + 48) & 1) != 0)
  {
    v2 = *(void **)(a1 + 40);
    if (v2)
      os_release(v2);
  }
  *(_QWORD *)(a1 + 40) = 0;
}

void ___ZL42nw_masque_modify_proxied_oblivious_messageP9nw_masqueP20nw_protocol_metadata_block_invoke(uint64_t a1, uint64_t a2)
{
  int port;
  void *hostname;
  int v6;
  const char *v7;
  uint64_t url_scheme;
  uint64_t v9;
  uint64_t v10;
  char v11;
  void *v12;
  char *v13;

  if (a2)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
    v13 = 0;
    port = nw_endpoint_get_port(*(nw_endpoint_t *)(a1 + 48));
    if (port == 443)
    {
      hostname = (void *)nw_endpoint_get_hostname(*(nw_endpoint_t *)(a1 + 48));
    }
    else
    {
      v6 = port;
      v7 = nw_endpoint_get_hostname(*(nw_endpoint_t *)(a1 + 48));
      asprintf(&v13, "%s:%u", v7, v6);
      hostname = v13;
    }
    url_scheme = nw_endpoint_get_url_scheme(*(void **)(a1 + 48));
    v9 = _nw_http_request_create("POST", url_scheme, hostname, a2);
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v11 = *(_BYTE *)(v10 + 48);
    if ((v11 & 1) != 0)
    {
      v12 = *(void **)(v10 + 40);
      if (v12)
      {
        os_release(v12);
        v11 = *(_BYTE *)(v10 + 48);
      }
    }
    *(_QWORD *)(v10 + 40) = v9;
    *(_BYTE *)(v10 + 48) = v11 | 1;
    if (v13)
      free(v13);
  }
}

void ___ZL42nw_masque_modify_proxied_oblivious_messageP9nw_masqueP20nw_protocol_metadata_block_invoke_130(uint64_t a1, uint64_t a2)
{
  nw_http_request_set_extended_connect_protocol(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
}

BOOL nw_masque_add_extra_headers_to_request(uint64_t a1, void *a2)
{
  void *v4;
  void *v5;
  NWConcrete_nw_path *v6;
  int effective_traffic_class;
  _BOOL8 v8;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  const char *v13;
  char *backtrace_string;
  _BOOL4 v15;
  _QWORD v16[7];
  os_log_type_t type[8];
  os_log_type_t *v18;
  uint64_t v19;
  char v20;
  char v21;
  _BYTE buf[24];
  void *v23;
  _QWORD *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    *(_QWORD *)type = 0;
    v18 = type;
    v19 = 0x2000000000;
    v20 = 0;
    v4 = *(void **)(a1 + 344);
    if (v4)
    {
      v16[0] = MEMORY[0x1E0C809B0];
      v16[1] = 0x40000000;
      v16[2] = ___ZL38nw_masque_add_extra_headers_to_requestP9nw_masqueP14nw_http_fields_block_invoke;
      v16[3] = &unk_1E149E770;
      v16[4] = type;
      v16[5] = a1;
      v16[6] = a2;
      *(_QWORD *)buf = MEMORY[0x1E0C809B0];
      *(_QWORD *)&buf[8] = 0x40000000;
      *(_QWORD *)&buf[16] = ___ZL41nw_masque_options_enumerate_extra_headersP19nw_protocol_optionsU13block_pointerFbPKcS2_E_block_invoke;
      v23 = &unk_1E149E798;
      v24 = v16;
      nw_protocol_options_access_handle(v4, buf);
    }
    v5 = *(void **)(a1 + 336);
    if (!v5)
      goto LABEL_11;
    v6 = v5;
    if (nw_path_network_is_satisfied_update_reason(v6, 0))
    {
      effective_traffic_class = v6->effective_traffic_class;
      if (!effective_traffic_class)
        effective_traffic_class = nw_parameters_get_traffic_class(v6->parameters);

      if ((effective_traffic_class - 1) > 0xC7)
        goto LABEL_11;
      v6 = a2;
      _nw_http_fields_append(v6, "Sec-CH-Background", "?1");
    }

LABEL_11:
    v8 = *((_BYTE *)v18 + 24) == 0;
    _Block_object_dispose(type, 8);
    return v8;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_masque_add_extra_headers_to_request";
  v10 = (char *)_os_log_send_and_compose_impl();
  type[0] = OS_LOG_TYPE_ERROR;
  v21 = 0;
  if (__nwlog_fault(v10, type, &v21))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      v11 = __nwlog_obj();
      v12 = type[0];
      if (os_log_type_enabled(v11, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_masque_add_extra_headers_to_request";
        v13 = "%{public}s called with null request";
LABEL_26:
        _os_log_impl(&dword_182FBE000, v11, v12, v13, buf, 0xCu);
      }
    }
    else if (v21)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v11 = __nwlog_obj();
      v12 = type[0];
      v15 = os_log_type_enabled(v11, type[0]);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_masque_add_extra_headers_to_request";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null request, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_27;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_masque_add_extra_headers_to_request";
        v13 = "%{public}s called with null request, no backtrace";
        goto LABEL_26;
      }
    }
    else
    {
      v11 = __nwlog_obj();
      v12 = type[0];
      if (os_log_type_enabled(v11, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_masque_add_extra_headers_to_request";
        v13 = "%{public}s called with null request, backtrace limit exceeded";
        goto LABEL_26;
      }
    }
  }
LABEL_27:
  if (v10)
    free(v10);
  return 0;
}

void sub_18361A364(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL ___ZL38nw_masque_add_extra_headers_to_requestP9nw_masqueP14nw_http_fields_block_invoke(uint64_t a1, const char *a2, char *__s1)
{
  char *v3;
  char *v6;
  char *v7;
  size_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  size_t v18;
  int64_t v19;
  _BOOL4 v22;
  uint64_t v23;
  NSObject *v24;
  _BOOL4 v25;
  const char *v26;
  const char *v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  void *v38;
  NSObject *v39;
  NSObject *v40;
  BOOL is_equal;
  uint64_t isa;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  _BOOL4 v46;
  const char *v47;
  const char *v48;
  const char *v49;
  uint64_t v50;
  NSObject *v51;
  _BOOL4 v52;
  const char *v53;
  const char *v54;
  void *v55;
  uint64_t v56;
  NSObject *v57;
  uint64_t v58;
  BOOL v59;
  const char *v60;
  const char *v61;
  uint64_t v62;
  NSObject *v63;
  uint64_t v64;
  BOOL v65;
  const char *v66;
  const char *v67;
  _BOOL4 v68;
  const char *v69;
  const char *v70;
  _BOOL8 result;
  uint64_t v72;
  void *v73;
  int traffic_class;
  char **v75;
  const char *v76;
  int v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  void *v81;
  unsigned int v82;
  uint64_t v83;
  NSObject *v84;
  _BOOL4 v85;
  const char *v86;
  const char *v87;
  void *v88;
  size_t v89;
  char *v90;
  NSObject *v91;
  NSObject *v92;
  char *v93;
  size_t size;
  _BOOL8 v95;
  NSObject *v96;
  _BOOL4 v97;
  const char *v98;
  const char *v99;
  uint64_t v100;
  NSObject *v101;
  _BOOL4 v102;
  const char *v103;
  BOOL v104;
  const char *v105;
  uint64_t v106;
  void *v107;
  id v108;
  void *v109;
  uint64_t v110;
  _BOOL4 prohibit_expensive;
  BOOL v112;
  const char *v113;
  _BOOL4 prohibit_constrained;
  BOOL v115;
  uint64_t v116;
  uint64_t v117;
  const char *v118;
  void *v119;
  void *v120;
  char *i;
  char *v122;
  char *j;
  char *v124;
  uint64_t globals_for_protocol;
  uint64_t v126;
  NSObject *v127;
  uint64_t v128;
  void *v129;
  _BYTE *v130;
  uint64_t v131;
  unint64_t v132;
  _BYTE *v133;
  uint64_t v134;
  int v135;
  unint64_t v136;
  const char *v137;
  uint64_t v138;
  int v139;
  _BYTE *v140;
  unint64_t v141;
  _BYTE *v142;
  NSObject *v143;
  void *v144;
  uint64_t v145;
  int v146;
  unint64_t v147;
  _BYTE *v148;
  unint64_t v149;
  _BYTE *v150;
  uint64_t v151;
  unint64_t v152;
  int v153;
  unint64_t v154;
  _BYTE *v155;
  unint64_t v156;
  _BYTE *v157;
  uint64_t v158;
  unint64_t v159;
  int v160;
  void *v161;
  char *v162;
  NSObject *v163;
  os_log_type_t v164;
  NSObject *v165;
  uint64_t v166;
  BOOL v167;
  const char *v168;
  const char *v169;
  char *backtrace_string;
  _BOOL4 v171;
  void *v172;
  NSObject *v173;
  os_log_type_t v174;
  const char *v175;
  NSObject *v176;
  uint64_t v177;
  BOOL v178;
  const char *v179;
  const char *v180;
  os_log_type_t v181;
  char *v182;
  _BOOL4 v183;
  const char *v184;
  _BOOL4 v185;
  _BOOL4 v186;
  NSObject *v187;
  void *v188;
  NSObject *v189;
  void *v190;
  size_t __n;
  os_log_type_t __na;
  _BOOL4 v193;
  unsigned __int8 v194;
  _QWORD applier[8];
  __int128 v196;
  __int128 v197;
  char v198;
  char *__dst[2];
  __int128 v200;
  char v201;
  __int128 uu;
  uint64_t v203;
  uint64_t v204;
  _BYTE v205[12];
  _BYTE buf[56];
  uint64_t v207;

  v3 = __s1;
  v207 = *MEMORY[0x1E0C80C00];
  v6 = strstr(__s1, "<token=");
  if (v6)
  {
    v7 = v6;
    v8 = strlen(v3);
    v9 = v7 + 7;
    v10 = strchr(v7 + 7, 62);
    v11 = strstr(v3, "{domain=");
    v12 = strstr(v3, "[type=");
    uu = 0uLL;
    if (!((unint64_t)v11 | (unint64_t)v12))
    {
      if (!v10 || v10 - v9 != 36)
      {
        v50 = *(_QWORD *)(a1 + 40);
        if (!v50 || (*(_BYTE *)(v50 + 529) & 1) == 0)
        {
          if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
            dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
          v51 = gprivacy_proxyLogObj;
          v52 = os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR);
          v50 = *(_QWORD *)(a1 + 40);
          if (v52)
          {
            v53 = (const char *)(v50 + 531);
            if (!v50)
              v53 = "";
            *(_DWORD *)buf = 136446978;
            *(_QWORD *)&buf[4] = v53;
            *(_WORD *)&buf[12] = 2080;
            v54 = " ";
            if (!v50)
              v54 = "";
            *(_QWORD *)&buf[14] = v54;
            *(_WORD *)&buf[22] = 2082;
            *(_QWORD *)&buf[24] = "<token=";
            *(_WORD *)&buf[32] = 2082;
            *(_QWORD *)&buf[34] = v3;
            _os_log_impl(&dword_182FBE000, v51, OS_LOG_TYPE_ERROR, "%{public}s%sValue included \"%{public}s\", but token UUID cannot be read: %{public}s", buf, 0x2Au);
            v50 = *(_QWORD *)(a1 + 40);
          }
        }
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
        nw_masque_mark_failed_with_error(v50, 22);
        return 1;
      }
      buf[36] = 0;
      v35 = *(_OWORD *)v9;
      v36 = *(_OWORD *)(v7 + 23);
      *(_DWORD *)&buf[32] = *(_DWORD *)(v7 + 39);
      *(_OWORD *)buf = v35;
      *(_OWORD *)&buf[16] = v36;
      uuid_parse(buf, (unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 272));
LABEL_41:
      *(_QWORD *)v205 = 0;
      v194 = 0;
      v37 = *(_QWORD *)(a1 + 40);
      v38 = *(void **)(v37 + 456);
      if (!v38)
      {
        v43 = 0;
LABEL_139:
        if ((*(_BYTE *)(v37 + 527) & 2) != 0 || v43 || (_DWORD)v38)
        {
          if (!v43)
          {
            v43 = nw_path_copy_token_from_agent(*(void **)(v37 + 336), (const unsigned __int8 *)(v37 + 272), v205);
            v37 = *(_QWORD *)(a1 + 40);
          }
          if (v43 && *(_QWORD *)v205)
          {
            if (!v37 || (*(_BYTE *)(v37 + 529) & 1) == 0)
            {
              if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
                dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
              v84 = gprivacy_proxyLogObj;
              v85 = os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG);
              v37 = *(_QWORD *)(a1 + 40);
              if (v85)
              {
                v86 = (const char *)(v37 + 531);
                *(_DWORD *)buf = 136447234;
                *(_QWORD *)&buf[4] = "nw_masque_add_extra_headers_to_request_block_invoke";
                if (!v37)
                  v86 = "";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = v86;
                *(_WORD *)&buf[22] = 2080;
                v87 = " ";
                if (!v37)
                  v87 = "";
                *(_QWORD *)&buf[24] = v87;
                *(_WORD *)&buf[32] = 1042;
                *(_DWORD *)&buf[34] = 16;
                *(_WORD *)&buf[38] = 2098;
                *(_QWORD *)&buf[40] = v37 + 272;
                _os_log_impl(&dword_182FBE000, v84, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sFetched token from %{public, uuid_t}.16P", buf, 0x30u);
                v37 = *(_QWORD *)(a1 + 40);
              }
            }
            v88 = *(void **)(v37 + 456);
            v89 = *(_QWORD *)v205;
            if (v88)
            {
              nw_http_connection_metadata_set_cached_token(v88, v43, *(uint64_t *)v205);
              v89 = *(_QWORD *)v205;
            }
            v90 = &v3[v8];
            v91 = dispatch_data_create((const void *)v43, v89, 0, (dispatch_block_t)*MEMORY[0x1E0C80CE0]);
            v92 = dispatch_data_create_with_transform();
            if (v91)
              dispatch_release(v91);
            v93 = v10 + 1;
            size = dispatch_data_get_size(v92);
            __n = v90 - (v10 + 1);
            v95 = nw_calloc_type<unsigned char>(v7 - v3 + v90 - v10 + size);
            __dst[0] = 0;
            __dst[1] = (char *)__dst;
            v200 = 0x2000000000uLL;
            *(_QWORD *)&v196 = 0;
            *((_QWORD *)&v196 + 1) = &v196;
            *(_QWORD *)&v197 = 0x2000000000;
            *((_QWORD *)&v197 + 1) = v95 + v7 - v3;
            if (v92)
            {
              *(_QWORD *)buf = MEMORY[0x1E0C809B0];
              *(_QWORD *)&buf[8] = 0x40000000;
              *(_QWORD *)&buf[16] = __nw_dispatch_data_copyout_block_invoke;
              *(_QWORD *)&buf[24] = &unk_1E14A3448;
              *(_QWORD *)&buf[40] = &v196;
              *(_QWORD *)&buf[48] = size;
              *(_QWORD *)&buf[32] = __dst;
              dispatch_data_apply(v92, buf);
              _Block_object_dispose(&v196, 8);
              _Block_object_dispose(__dst, 8);
              dispatch_release(v92);
            }
            else
            {
              _Block_object_dispose(&v196, 8);
              _Block_object_dispose(__dst, 8);
            }
            for (i = (char *)(v95 + v7 - v3); ; i = v122 + 1)
            {
              v122 = strchr(i, 43);
              if (!v122)
                break;
              *v122 = 45;
            }
            for (j = (char *)(v95 + v7 - v3); ; j = v124 + 1)
            {
              v124 = strchr(j, 47);
              if (!v124)
                break;
              *v124 = 95;
            }
            if (v7 != v3)
              memcpy((void *)v95, v3, v7 - v3);
            if (v90 != v93)
              memcpy((void *)(v95 + v7 - v3 + size), v93, __n);
            nw_http_fields_append(*(void **)(a1 + 48), (uint64_t)a2, v95);
            if (v95)
              free((void *)v95);
          }
          else
          {
            if (!v37 || (*(_BYTE *)(v37 + 529) & 1) == 0)
            {
              if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
                dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
              v96 = gprivacy_proxyLogObj;
              v97 = os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR);
              v37 = *(_QWORD *)(a1 + 40);
              if (v97)
              {
                v98 = "";
                v99 = (const char *)(v37 + 531);
                if (!v37)
                  v99 = "";
                *(_DWORD *)buf = 136446978;
                *(_QWORD *)&buf[4] = v99;
                *(_WORD *)&buf[12] = 2080;
                if (v37)
                  v98 = " ";
                *(_QWORD *)&buf[14] = v98;
                *(_WORD *)&buf[22] = 1042;
                *(_DWORD *)&buf[24] = 16;
                *(_WORD *)&buf[28] = 2098;
                *(_QWORD *)&buf[30] = v37 + 272;
                _os_log_impl(&dword_182FBE000, v96, OS_LOG_TYPE_ERROR, "%{public}s%sFailed to fetch token from %{public, uuid_t}.16P", buf, 0x26u);
                v37 = *(_QWORD *)(a1 + 40);
              }
            }
            nw_path_report_error_to_agent(*(void **)(v37 + 336), (const unsigned __int8 *)(v37 + 272), 81);
            *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
            nw_masque_mark_failed_with_error(*(_QWORD *)(a1 + 40), 2);
          }
        }
        return 1;
      }
      v39 = v38;
      v40 = nw_protocol_metadata_copy_definition(v39);
      if (nw_protocol_copy_http_connection_definition_onceToken != -1)
        dispatch_once(&nw_protocol_copy_http_connection_definition_onceToken, &__block_literal_global_62);
      is_equal = nw_protocol_definition_is_equal(v40, (nw_protocol_definition_t)nw_protocol_copy_http_connection_definition_definition);

      if (is_equal)
      {
        __dst[0] = 0;
        __dst[1] = (char *)__dst;
        v200 = 0x2020000000uLL;
        *(_QWORD *)buf = MEMORY[0x1E0C809B0];
        *(_QWORD *)&buf[8] = 3221225472;
        *(_QWORD *)&buf[16] = __nw_http_connection_metadata_copy_cached_token_block_invoke;
        *(_QWORD *)&buf[24] = &unk_1E14AA3B8;
        *(_QWORD *)&buf[32] = __dst;
        *(_QWORD *)&buf[40] = &v194;
        *(_QWORD *)&buf[48] = v205;
        isa = (uint64_t)v39[4].isa;
        if (isa)
        {
          __nw_http_connection_metadata_copy_cached_token_block_invoke((uint64_t)buf, isa);
          v43 = *((_QWORD *)__dst[1] + 3);
        }
        else
        {
          v43 = 0;
        }
        _Block_object_dispose(__dst, 8);
LABEL_138:

        v37 = *(_QWORD *)(a1 + 40);
        LODWORD(v38) = v194;
        goto LABEL_139;
      }
      __nwlog_obj();
      v161 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http_connection_metadata_copy_cached_token";
      v162 = (char *)_os_log_send_and_compose_impl();

      LOBYTE(__dst[0]) = 16;
      LOBYTE(v196) = 0;
      if (__nwlog_fault(v162, __dst, &v196))
      {
        if (LOBYTE(__dst[0]) == 17)
        {
          __nwlog_obj();
          v163 = objc_claimAutoreleasedReturnValue();
          v164 = (os_log_type_t)__dst[0];
          if (os_log_type_enabled(v163, (os_log_type_t)__dst[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_http_connection_metadata_copy_cached_token";
            _os_log_impl(&dword_182FBE000, v163, v164, "%{public}s metadata must be http_connection", buf, 0xCu);
          }
        }
        else if ((_BYTE)v196)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v163 = objc_claimAutoreleasedReturnValue();
          __na = (os_log_type_t)__dst[0];
          v171 = os_log_type_enabled(v163, (os_log_type_t)__dst[0]);
          if (backtrace_string)
          {
            if (v171)
            {
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "nw_http_connection_metadata_copy_cached_token";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = backtrace_string;
              _os_log_impl(&dword_182FBE000, v163, __na, "%{public}s metadata must be http_connection, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(backtrace_string);
            goto LABEL_399;
          }
          if (v171)
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_http_connection_metadata_copy_cached_token";
            _os_log_impl(&dword_182FBE000, v163, __na, "%{public}s metadata must be http_connection, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          __nwlog_obj();
          v163 = objc_claimAutoreleasedReturnValue();
          v181 = (os_log_type_t)__dst[0];
          if (os_log_type_enabled(v163, (os_log_type_t)__dst[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_http_connection_metadata_copy_cached_token";
            _os_log_impl(&dword_182FBE000, v163, v181, "%{public}s metadata must be http_connection, backtrace limit exceeded", buf, 0xCu);
          }
        }

      }
LABEL_399:
      if (v162)
        free(v162);
      v43 = 0;
      goto LABEL_138;
    }
    if (v11 && (v13 = v12) != 0)
    {
      v14 = v11 + 8;
      v15 = strchr(v14, 125);
      v16 = v13 + 6;
      v17 = strchr(v16, 93);
      if (v15 && v17)
      {
        v18 = v15 - v14;
        v19 = v17 - v16;
        v22 = v18 > 0x20 || v19 < 0 || v19 > 32;
        v193 = v22;
        if (v22)
        {
          v23 = *(_QWORD *)(a1 + 40);
          if (!v23 || (*(_BYTE *)(v23 + 529) & 1) == 0)
          {
            if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
              dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
            v24 = gprivacy_proxyLogObj;
            v25 = os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR);
            v23 = *(_QWORD *)(a1 + 40);
            if (v25)
            {
              v26 = (const char *)(v23 + 531);
              if (!v23)
                v26 = "";
              *(_DWORD *)buf = 136446978;
              *(_QWORD *)&buf[4] = v26;
              *(_WORD *)&buf[12] = 2080;
              v27 = " ";
              if (!v23)
                v27 = "";
              *(_QWORD *)&buf[14] = v27;
              *(_WORD *)&buf[22] = 2048;
              *(_QWORD *)&buf[24] = v18;
              *(_WORD *)&buf[32] = 2048;
              *(_QWORD *)&buf[34] = v19;
              _os_log_impl(&dword_182FBE000, v24, OS_LOG_TYPE_ERROR, "%{public}s%sInvalid agent domain/type length (%zu/%zu)", buf, 0x2Au);
              v23 = *(_QWORD *)(a1 + 40);
            }
          }
          nw_masque_mark_failed_with_error(v23, 22);
          return !v193;
        }
        v201 = 0;
        v200 = 0u;
        *(_OWORD *)__dst = 0u;
        v198 = 0;
        v196 = 0u;
        v197 = 0u;
        memcpy(__dst, v14, v18);
        memcpy(&v196, v16, v19);
        v100 = *(_QWORD *)(a1 + 40);
        if (!v100 || (*(_BYTE *)(v100 + 529) & 1) == 0)
        {
          if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
            dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
          v101 = gprivacy_proxyLogObj;
          v102 = os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG);
          v100 = *(_QWORD *)(a1 + 40);
          if (v102)
          {
            v103 = "";
            *(_DWORD *)buf = 136447234;
            *(_QWORD *)&buf[4] = "nw_masque_add_extra_headers_to_request_block_invoke";
            v104 = v100 == 0;
            if (v100)
              v105 = (const char *)(v100 + 531);
            else
              v105 = "";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v105;
            *(_WORD *)&buf[22] = 2080;
            if (!v104)
              v103 = " ";
            *(_QWORD *)&buf[24] = v103;
            *(_WORD *)&buf[32] = 2080;
            *(_QWORD *)&buf[34] = __dst;
            *(_WORD *)&buf[42] = 2080;
            *(_QWORD *)&buf[44] = &v196;
            _os_log_impl(&dword_182FBE000, v101, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sFinding token agent with domain '%s' type '%s'", buf, 0x34u);
            v100 = *(_QWORD *)(a1 + 40);
          }
        }
        v106 = *(_QWORD *)(v100 + 336);
        if (v106)
        {
          v107 = *(void **)(v106 + 224);
          if (v107)
          {
            v108 = v107;
            applier[0] = MEMORY[0x1E0C809B0];
            applier[1] = 0x40000000;
            applier[2] = ___ZL38nw_masque_add_extra_headers_to_requestP9nw_masqueP14nw_http_fields_block_invoke_91;
            applier[3] = &__block_descriptor_tmp_94;
            applier[4] = __dst;
            applier[5] = &v196;
            applier[6] = *(_QWORD *)(a1 + 40);
            applier[7] = &uu;
            xpc_dictionary_apply(v108, applier);
            xpc_release(v108);
          }
        }
        if (uuid_is_null((const unsigned __int8 *)&uu))
          return !v193;
        *(_OWORD *)(*(_QWORD *)(a1 + 40) + 272) = uu;
        goto LABEL_41;
      }
      v44 = *(_QWORD *)(a1 + 40);
      if (v44 && (*(_BYTE *)(v44 + 529) & 1) != 0)
        goto LABEL_109;
      if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
        dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
      v45 = gprivacy_proxyLogObj;
      v68 = os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR);
      v44 = *(_QWORD *)(a1 + 40);
      if (!v68)
      {
LABEL_109:
        nw_masque_mark_failed_with_error(v44, 22);
        return 0;
      }
      v69 = (const char *)(v44 + 531);
      v70 = "";
      if (v44)
        v70 = " ";
      else
        v69 = "";
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = v69;
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = v70;
      v49 = "%{public}s%sInvalid agent type suffix";
    }
    else
    {
      v44 = *(_QWORD *)(a1 + 40);
      if (v44 && (*(_BYTE *)(v44 + 529) & 1) != 0)
        goto LABEL_109;
      if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
        dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
      v45 = gprivacy_proxyLogObj;
      v46 = os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR);
      v44 = *(_QWORD *)(a1 + 40);
      if (!v46)
        goto LABEL_109;
      v47 = (const char *)(v44 + 531);
      v48 = "";
      if (v44)
        v48 = " ";
      else
        v47 = "";
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = v47;
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = v48;
      v49 = "%{public}s%sInvalid agent type configuration";
    }
    _os_log_impl(&dword_182FBE000, v45, OS_LOG_TYPE_ERROR, v49, buf, 0x16u);
    v44 = *(_QWORD *)(a1 + 40);
    goto LABEL_109;
  }
  v28 = strcasecmp(a2, "Sec-CH-Geohash");
  v29 = strcasecmp(a2, "Priority");
  v30 = strcasecmp(a2, "Require-Interface");
  v31 = strcasecmp(a2, "Prohibit-Interface");
  v32 = strcasecmp(a2, "Client-Application");
  v33 = strcasecmp(a2, "Multipath");
  if (!v28)
  {
    v55 = *(void **)(*(_QWORD *)(a1 + 40) + 320);
    if (v55
      && ((nw_parameters_get_is_known_tracker(v55) & 1) != 0
       || (nw_parameters_get_parent_is_known_tracker(*(void **)(*(_QWORD *)(a1 + 40) + 320)) & 1) != 0
       || (nw_parameters_get_use_enhanced_privacy_mode(*(void **)(*(_QWORD *)(a1 + 40) + 320)) & 1) != 0))
    {
      return 1;
    }
    if (v3)
    {
      v56 = *(_QWORD *)(a1 + 40);
      if (*v3)
      {
        if ((!v56 || (*(_BYTE *)(v56 + 529) & 1) == 0) && gLogDatapath)
        {
          if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
            dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
          v57 = gprivacy_proxyLogObj;
          if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
          {
            v58 = *(_QWORD *)(a1 + 40);
            v59 = v58 == 0;
            if (v58)
              v60 = (const char *)(v58 + 531);
            else
              v60 = "";
            *(_DWORD *)buf = 136446978;
            *(_QWORD *)&buf[4] = "nw_masque_add_extra_headers_to_request_block_invoke";
            *(_QWORD *)&buf[14] = v60;
            v61 = " ";
            *(_WORD *)&buf[12] = 2082;
            if (v59)
              v61 = "";
            *(_WORD *)&buf[22] = 2080;
            *(_QWORD *)&buf[24] = v61;
            *(_WORD *)&buf[32] = 2082;
            *(_QWORD *)&buf[34] = v3;
            _os_log_impl(&dword_182FBE000, v57, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sReceived geohash hint %{public}s", buf, 0x2Au);
          }
        }
LABEL_232:
        if (!*v3)
          return 1;
        goto LABEL_233;
      }
    }
    else
    {
      v56 = *(_QWORD *)(a1 + 40);
    }
    if (v56)
    {
      v119 = *(void **)(v56 + 328);
      if (v119)
      {
        if (nw_protocol_masque_get_definition(void)::onceToken != -1)
          dispatch_once(&nw_protocol_masque_get_definition(void)::onceToken, &__block_literal_global_27122);
        if (nw_protocol_masque_get_definition(void)::definition)
          v120 = os_retain((void *)nw_protocol_masque_get_definition(void)::definition);
        else
          v120 = 0;
        globals_for_protocol = nw_context_get_globals_for_protocol(v119, v120);
        if (globals_for_protocol)
        {
          v3 = (char *)(globals_for_protocol + 4);
          *(_BYTE *)(globals_for_protocol + 10) = 0;
          v126 = *(_QWORD *)(a1 + 40);
          if (v126)
            goto LABEL_229;
          goto LABEL_230;
        }
        __nwlog_obj();
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_masque_get_cached_geohash_value";
        v172 = (void *)_os_log_send_and_compose_impl();
        LOBYTE(__dst[0]) = 16;
        LOBYTE(v196) = 0;
        if (!__nwlog_fault((const char *)v172, __dst, &v196))
        {
LABEL_418:
          if (v172)
            free(v172);
          v3 = 0;
          v126 = *(_QWORD *)(a1 + 40);
          if (v126)
          {
LABEL_229:
            if ((*(_BYTE *)(v126 + 529) & 1) != 0)
              goto LABEL_231;
          }
LABEL_230:
          if (gLogDatapath)
          {
            if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
              dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
            v176 = gprivacy_proxyLogObj;
            if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
            {
              v177 = *(_QWORD *)(a1 + 40);
              v178 = v177 == 0;
              if (v177)
                v179 = (const char *)(v177 + 531);
              else
                v179 = "";
              *(_DWORD *)buf = 136446978;
              *(_QWORD *)&buf[4] = "nw_masque_add_extra_headers_to_request_block_invoke";
              *(_QWORD *)&buf[14] = v179;
              v180 = " ";
              *(_WORD *)&buf[12] = 2082;
              if (v178)
                v180 = "";
              *(_WORD *)&buf[22] = 2080;
              *(_QWORD *)&buf[24] = v180;
              *(_WORD *)&buf[32] = 2082;
              *(_QWORD *)&buf[34] = v3;
              _os_log_impl(&dword_182FBE000, v176, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sUsing cached geohash hint %{public}s", buf, 0x2Au);
            }
          }
LABEL_231:
          if (!v3)
            return 1;
          goto LABEL_232;
        }
        if (LOBYTE(__dst[0]) == 17)
        {
          v173 = __nwlog_obj();
          v174 = (os_log_type_t)__dst[0];
          if (!os_log_type_enabled(v173, (os_log_type_t)__dst[0]))
            goto LABEL_418;
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_masque_get_cached_geohash_value";
          v175 = "%{public}s called with null globals";
          goto LABEL_417;
        }
        if (!(_BYTE)v196)
        {
          v173 = __nwlog_obj();
          v174 = (os_log_type_t)__dst[0];
          if (!os_log_type_enabled(v173, (os_log_type_t)__dst[0]))
            goto LABEL_418;
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_masque_get_cached_geohash_value";
          v175 = "%{public}s called with null globals, backtrace limit exceeded";
          goto LABEL_417;
        }
        v182 = (char *)__nw_create_backtrace_string();
        v173 = __nwlog_obj();
        v174 = (os_log_type_t)__dst[0];
        v186 = os_log_type_enabled(v173, (os_log_type_t)__dst[0]);
        if (!v182)
        {
          if (!v186)
            goto LABEL_418;
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_masque_get_cached_geohash_value";
          v175 = "%{public}s called with null globals, no backtrace";
          goto LABEL_417;
        }
        if (v186)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_masque_get_cached_geohash_value";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v182;
          v184 = "%{public}s called with null globals, dumping backtrace:%{public}s";
          goto LABEL_394;
        }
LABEL_395:
        free(v182);
        goto LABEL_418;
      }
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_masque_get_cached_geohash_value";
      v172 = (void *)_os_log_send_and_compose_impl();
      LOBYTE(__dst[0]) = 16;
      LOBYTE(v196) = 0;
      if (!__nwlog_fault((const char *)v172, __dst, &v196))
        goto LABEL_418;
      if (LOBYTE(__dst[0]) == 17)
      {
        v173 = __nwlog_obj();
        v174 = (os_log_type_t)__dst[0];
        if (!os_log_type_enabled(v173, (os_log_type_t)__dst[0]))
          goto LABEL_418;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_masque_get_cached_geohash_value";
        v175 = "%{public}s called with null masque->context";
        goto LABEL_417;
      }
      if (!(_BYTE)v196)
      {
        v173 = __nwlog_obj();
        v174 = (os_log_type_t)__dst[0];
        if (!os_log_type_enabled(v173, (os_log_type_t)__dst[0]))
          goto LABEL_418;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_masque_get_cached_geohash_value";
        v175 = "%{public}s called with null masque->context, backtrace limit exceeded";
        goto LABEL_417;
      }
      v182 = (char *)__nw_create_backtrace_string();
      v173 = __nwlog_obj();
      v174 = (os_log_type_t)__dst[0];
      v185 = os_log_type_enabled(v173, (os_log_type_t)__dst[0]);
      if (!v182)
      {
        if (!v185)
          goto LABEL_418;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_masque_get_cached_geohash_value";
        v175 = "%{public}s called with null masque->context, no backtrace";
        goto LABEL_417;
      }
      if (!v185)
        goto LABEL_395;
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_masque_get_cached_geohash_value";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v182;
      v184 = "%{public}s called with null masque->context, dumping backtrace:%{public}s";
    }
    else
    {
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_masque_get_cached_geohash_value";
      v172 = (void *)_os_log_send_and_compose_impl();
      LOBYTE(__dst[0]) = 16;
      LOBYTE(v196) = 0;
      if (!__nwlog_fault((const char *)v172, __dst, &v196))
        goto LABEL_418;
      if (LOBYTE(__dst[0]) == 17)
      {
        v173 = __nwlog_obj();
        v174 = (os_log_type_t)__dst[0];
        if (!os_log_type_enabled(v173, (os_log_type_t)__dst[0]))
          goto LABEL_418;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_masque_get_cached_geohash_value";
        v175 = "%{public}s called with null masque";
LABEL_417:
        _os_log_impl(&dword_182FBE000, v173, v174, v175, buf, 0xCu);
        goto LABEL_418;
      }
      if (!(_BYTE)v196)
      {
        v173 = __nwlog_obj();
        v174 = (os_log_type_t)__dst[0];
        if (!os_log_type_enabled(v173, (os_log_type_t)__dst[0]))
          goto LABEL_418;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_masque_get_cached_geohash_value";
        v175 = "%{public}s called with null masque, backtrace limit exceeded";
        goto LABEL_417;
      }
      v182 = (char *)__nw_create_backtrace_string();
      v173 = __nwlog_obj();
      v174 = (os_log_type_t)__dst[0];
      v183 = os_log_type_enabled(v173, (os_log_type_t)__dst[0]);
      if (!v182)
      {
        if (!v183)
          goto LABEL_418;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_masque_get_cached_geohash_value";
        v175 = "%{public}s called with null masque, no backtrace";
        goto LABEL_417;
      }
      if (!v183)
        goto LABEL_395;
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_masque_get_cached_geohash_value";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v182;
      v184 = "%{public}s called with null masque, dumping backtrace:%{public}s";
    }
LABEL_394:
    _os_log_impl(&dword_182FBE000, v173, v174, v184, buf, 0x16u);
    goto LABEL_395;
  }
  v34 = v33;
  if (!strcasecmp(a2, "User-Agent"))
  {
    __dst[0] = 0;
    if (v3 && *v3)
    {
      v62 = *(_QWORD *)(a1 + 40);
      if ((!v62 || (*(_BYTE *)(v62 + 529) & 1) == 0) && gLogDatapath)
      {
        if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
          dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
        v63 = gprivacy_proxyLogObj;
        if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
        {
          v64 = *(_QWORD *)(a1 + 40);
          v65 = v64 == 0;
          if (v64)
            v66 = (const char *)(v64 + 531);
          else
            v66 = "";
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_masque_add_extra_headers_to_request_block_invoke";
          *(_QWORD *)&buf[14] = v66;
          v67 = " ";
          *(_WORD *)&buf[12] = 2082;
          if (v65)
            v67 = "";
          *(_WORD *)&buf[22] = 2080;
          *(_QWORD *)&buf[24] = v67;
          *(_WORD *)&buf[32] = 2082;
          *(_QWORD *)&buf[34] = v3;
          _os_log_impl(&dword_182FBE000, v63, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sReceived user agent \"%{public}s\"", buf, 0x2Au);
        }
      }
LABEL_127:
      if (*v3)
        nw_http_fields_append(*(void **)(a1 + 48), (uint64_t)a2, (uint64_t)v3);
LABEL_129:
      v79 = __dst[0];
      if (!__dst[0])
        return 1;
LABEL_130:
      free(v79);
      return 1;
    }
    if (nw_utilities_get_user_agent::onceToken != -1)
      dispatch_once(&nw_utilities_get_user_agent::onceToken, &__block_literal_global_9_44031);
    v3 = (char *)nw_utilities_get_user_agent::user_agent_string;
    v77 = *(_DWORD *)(*(_QWORD *)(a1 + 40) + 527);
    if ((v77 & 0x1000000) != 0)
    {
      asprintf(__dst, "%s (nwhttp)", (const char *)nw_utilities_get_user_agent::user_agent_string);
      v3 = __dst[0];
      v78 = *(_QWORD *)(a1 + 40);
      if (!v78)
      {
LABEL_125:
        if (gLogDatapath)
        {
          if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
            dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
          v165 = gprivacy_proxyLogObj;
          if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
          {
            v166 = *(_QWORD *)(a1 + 40);
            v167 = v166 == 0;
            if (v166)
              v168 = (const char *)(v166 + 531);
            else
              v168 = "";
            *(_DWORD *)buf = 136446978;
            *(_QWORD *)&buf[4] = "nw_masque_add_extra_headers_to_request_block_invoke";
            *(_QWORD *)&buf[14] = v168;
            v169 = " ";
            *(_WORD *)&buf[12] = 2082;
            if (v167)
              v169 = "";
            *(_WORD *)&buf[22] = 2080;
            *(_QWORD *)&buf[24] = v169;
            *(_WORD *)&buf[32] = 2082;
            *(_QWORD *)&buf[34] = v3;
            _os_log_impl(&dword_182FBE000, v165, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sUsing process user agent \"%{public}s\"", buf, 0x2Au);
          }
        }
LABEL_126:
        if (!v3)
          goto LABEL_129;
        goto LABEL_127;
      }
      v77 = *(_DWORD *)(v78 + 527);
    }
    if ((v77 & 0x10000) != 0)
      goto LABEL_126;
    goto LABEL_125;
  }
  if (v29 || v3 && *v3)
  {
    if (!v30 && (!v3 || !*v3))
    {
      v80 = *(_QWORD *)(a1 + 40);
      v81 = *(void **)(a1 + 48);
      v82 = nw_parameters_get_companion_proxy_required_interface_type(*(_QWORD *)(v80 + 320)) - 1;
      if (v82 <= 2)
      {
        v83 = (uint64_t)*off_1E149ECF8[v82];
        if (v83)
          nw_http_fields_append(v81, (uint64_t)"Require-Interface", v83);
      }
      return 1;
    }
    if (!v31 && (!v3 || !*v3))
    {
      v110 = *(_QWORD *)(a1 + 40);
      v109 = *(void **)(a1 + 48);
      __dst[0] = 0;
      __dst[1] = (char *)__dst;
      v200 = 0x2000000000uLL;
      *(_QWORD *)&v196 = 0;
      *((_QWORD *)&v196 + 1) = &v196;
      v197 = 0x2000000000uLL;
      *(_QWORD *)&uu = 0;
      *((_QWORD *)&uu + 1) = &uu;
      v203 = 0x2000000000;
      v204 = 0;
      prohibit_expensive = nw_parameters_get_prohibit_expensive(*(nw_parameters_t *)(v110 + 320));
      v112 = prohibit_expensive;
      v113 = 0;
      if (prohibit_expensive)
      {
        *(_QWORD *)(*((_QWORD *)&uu + 1) + 24) += 9;
        v113 = "expensive";
      }
      prohibit_constrained = nw_parameters_get_prohibit_constrained(*(nw_parameters_t *)(v110 + 320));
      v115 = prohibit_constrained;
      if (prohibit_constrained)
      {
        v116 = *((_QWORD *)&uu + 1);
        v117 = *(_QWORD *)(*((_QWORD *)&uu + 1) + 24);
        if (v117)
          *(_QWORD *)(*((_QWORD *)&uu + 1) + 24) = ++v117;
        *(_QWORD *)(v116 + 24) = v117 + 11;
        v118 = "constrained";
      }
      else
      {
        v118 = 0;
      }
      v127 = *(NSObject **)(v110 + 320);
      *(_QWORD *)buf = MEMORY[0x1E0C809B0];
      *(_QWORD *)&buf[8] = 0x40000000;
      *(_QWORD *)&buf[16] = ___ZL50nw_masque_add_prohibit_interface_header_to_requestP9nw_masqueP14nw_http_fields_block_invoke;
      *(_QWORD *)&buf[24] = &unk_1E149E7C0;
      *(_QWORD *)&buf[32] = &uu;
      *(_QWORD *)&buf[40] = &v196;
      *(_QWORD *)&buf[48] = __dst;
      nw_parameters_iterate_prohibited_interface_types(v127, buf);
      v128 = *(_QWORD *)(*((_QWORD *)&uu + 1) + 24);
      if (!v128)
        goto LABEL_336;
      *(_QWORD *)(*((_QWORD *)&uu + 1) + 24) = v128 + 1;
      v129 = (void *)nw_calloc_type<unsigned char>(v128 + 1);
      v130 = v129;
      *(_BYTE *)v129 = 0;
      v131 = *(_QWORD *)(*((_QWORD *)&v196 + 1) + 24);
      if (v131)
      {
        v132 = *(_QWORD *)(*((_QWORD *)&uu + 1) + 24);
        if (v132)
        {
          v133 = v129;
          while (*v133)
          {
            ++v133;
            if (!--v132)
              goto LABEL_268;
          }
          if (v132 < 2)
          {
LABEL_267:
            *v133 = 0;
          }
          else
          {
            v138 = 0;
            while (1)
            {
              v139 = *(unsigned __int8 *)(v131 + v138);
              v133[v138] = v139;
              if (!v139)
                break;
              --v132;
              ++v138;
              if (v132 <= 1)
              {
                v133 += v138;
                goto LABEL_267;
              }
            }
          }
        }
LABEL_268:
        v134 = *((_QWORD *)__dst[1] + 3);
        if (!v134)
          goto LABEL_295;
        v136 = *(_QWORD *)(*((_QWORD *)&uu + 1) + 24);
        if (!v136)
          goto LABEL_295;
        v140 = v129;
        v141 = *(_QWORD *)(*((_QWORD *)&uu + 1) + 24);
        while (*v140)
        {
          ++v140;
          if (!--v141)
            goto LABEL_280;
        }
        if (v141 >= 2)
          *v140++ = 44;
        *v140 = 0;
        v134 = *((_QWORD *)__dst[1] + 3);
        v136 = *(_QWORD *)(*((_QWORD *)&uu + 1) + 24);
LABEL_280:
        if (v134)
        {
          v135 = 0;
          if (v136)
          {
LABEL_282:
            v142 = v130;
            while (*v142)
            {
              ++v142;
              if (!--v136)
                goto LABEL_285;
            }
            if (!v135)
            {
              if (v136 >= 2)
                goto LABEL_290;
LABEL_294:
              *v142 = 0;
              goto LABEL_295;
            }
            v189 = __nwlog_obj();
            os_log_type_enabled(v189, OS_LOG_TYPE_ERROR);
            *(_DWORD *)v205 = 136446210;
            *(_QWORD *)&v205[4] = "_strict_strlcpy";
            v190 = (void *)_os_log_send_and_compose_impl();
            result = __nwlog_abort((uint64_t)v190);
            if (!(_DWORD)result)
            {
              free(v190);
              if (v136 >= 2)
              {
LABEL_290:
                v145 = 0;
                while (1)
                {
                  v146 = *(unsigned __int8 *)(v134 + v145);
                  v142[v145] = v146;
                  if (!v146)
                    goto LABEL_295;
                  --v136;
                  ++v145;
                  if (v136 <= 1)
                  {
                    v142 += v145;
                    goto LABEL_294;
                  }
                }
              }
              goto LABEL_294;
            }
LABEL_425:
            __break(1u);
            return result;
          }
        }
        else
        {
          v187 = __nwlog_obj();
          os_log_type_enabled(v187, OS_LOG_TYPE_ERROR);
          *(_DWORD *)v205 = 136446210;
          *(_QWORD *)&v205[4] = "_strict_strlcat";
          v188 = (void *)_os_log_send_and_compose_impl();
          result = __nwlog_abort((uint64_t)v188);
          if ((_DWORD)result)
            goto LABEL_425;
          free(v188);
          v134 = 0;
          v135 = 1;
          if (v136)
            goto LABEL_282;
        }
      }
      else
      {
        v134 = *((_QWORD *)__dst[1] + 3);
        if (!v134)
        {
          if (!v112)
          {
            if (v115)
            {
LABEL_324:
              v156 = *(_QWORD *)(*((_QWORD *)&uu + 1) + 24);
              if (v156)
              {
                v157 = v130;
                while (*v157)
                {
                  ++v157;
                  if (!--v156)
                    goto LABEL_335;
                }
                if (v156 < 2)
                {
LABEL_334:
                  *v157 = 0;
                }
                else
                {
                  v158 = 0;
                  v159 = v156 - 1;
                  while (1)
                  {
                    v160 = v118[v158];
                    v157[v158] = v160;
                    if (!v160)
                      break;
                    if (v159 == ++v158)
                    {
                      v157 += v158;
                      goto LABEL_334;
                    }
                  }
                }
              }
            }
LABEL_335:
            nw_http_fields_append(v109, (uint64_t)"Prohibit-Interface", (uint64_t)v130);
            free(v130);
LABEL_336:
            _Block_object_dispose(&uu, 8);
            _Block_object_dispose(&v196, 8);
            _Block_object_dispose(__dst, 8);
            return 1;
          }
          goto LABEL_304;
        }
        v135 = 0;
        v136 = *(_QWORD *)(*((_QWORD *)&uu + 1) + 24);
        if (v136)
          goto LABEL_282;
      }
LABEL_285:
      if (v135)
      {
        v143 = __nwlog_obj();
        os_log_type_enabled(v143, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v205 = 136446210;
        *(_QWORD *)&v205[4] = "_strict_strlcpy";
        v144 = (void *)_os_log_send_and_compose_impl();
        result = __nwlog_abort((uint64_t)v144);
        if ((_DWORD)result)
          goto LABEL_425;
        free(v144);
      }
LABEL_295:
      if (!v112)
        goto LABEL_315;
      v147 = *(_QWORD *)(*((_QWORD *)&uu + 1) + 24);
      if (v147)
      {
        v148 = v130;
        while (*v148)
        {
          ++v148;
          if (!--v147)
            goto LABEL_304;
        }
        if (v147 >= 2)
          *v148++ = 44;
        *v148 = 0;
      }
LABEL_304:
      v149 = *(_QWORD *)(*((_QWORD *)&uu + 1) + 24);
      if (v149)
      {
        v150 = v130;
        while (*v150)
        {
          ++v150;
          if (!--v149)
            goto LABEL_315;
        }
        if (v149 < 2)
        {
LABEL_314:
          *v150 = 0;
        }
        else
        {
          v151 = 0;
          v152 = v149 - 1;
          while (1)
          {
            v153 = v113[v151];
            v150[v151] = v153;
            if (!v153)
              break;
            if (v152 == ++v151)
            {
              v150 += v151;
              goto LABEL_314;
            }
          }
        }
      }
LABEL_315:
      if (v115)
      {
        v154 = *(_QWORD *)(*((_QWORD *)&uu + 1) + 24);
        if (v154)
        {
          v155 = v130;
          while (*v155)
          {
            ++v155;
            if (!--v154)
              goto LABEL_324;
          }
          if (v154 >= 2)
            *v155++ = 44;
          *v155 = 0;
        }
        goto LABEL_324;
      }
      goto LABEL_335;
    }
    if (!v32 && (!v3 || !*v3))
    {
      nw_masque_add_client_application_header_to_request(*(void **)(*(_QWORD *)(a1 + 40) + 320), *(void **)(a1 + 48));
      return 1;
    }
    if (!v34 && (!v3 || !*v3))
    {
      nw_masque_add_multipath_header_to_request(*(_QWORD *)(a1 + 40), *(void **)(a1 + 48));
      return 1;
    }
LABEL_233:
    nw_http_fields_append(*(void **)(a1 + 48), (uint64_t)a2, (uint64_t)v3);
    return 1;
  }
  v72 = *(_QWORD *)(a1 + 40);
  v73 = *(void **)(a1 + 48);
  traffic_class = nw_parameters_get_traffic_class(*(void **)(v72 + 320));
  result = 1;
  if (traffic_class <= 499)
  {
    if (traffic_class <= 199)
    {
      if (!traffic_class)
      {
        v75 = nw_http_priority_traffic_class_best_effort;
        v76 = "u=6";
        goto LABEL_259;
      }
      if (traffic_class != 100)
        return result;
      v75 = nw_http_priority_traffic_class_background_system;
    }
    else
    {
      if (traffic_class != 200)
      {
        if (traffic_class == 300)
        {
          v75 = nw_http_priority_traffic_class_responsive_data;
          v76 = "u=5";
        }
        else
        {
          if (traffic_class != 400)
            return result;
          v75 = nw_http_priority_traffic_class_oam;
          v76 = "u=4";
        }
        goto LABEL_259;
      }
      v75 = nw_http_priority_traffic_class_background_user;
    }
    v76 = "u=7";
    goto LABEL_259;
  }
  if (traffic_class > 699)
  {
    switch(traffic_class)
    {
      case 700:
        v75 = nw_http_priority_traffic_class_video;
        break;
      case 900:
        v75 = nw_http_priority_traffic_class_network_control;
        v76 = "u=0";
        goto LABEL_259;
      case 800:
        v75 = nw_http_priority_traffic_class_voice;
        break;
      default:
        return result;
    }
    v76 = "u=1";
    goto LABEL_259;
  }
  if (traffic_class == 500)
  {
    v75 = nw_http_priority_traffic_class_av_streaming;
    v76 = "u=3";
  }
  else
  {
    if (traffic_class != 600)
      return result;
    v75 = nw_http_priority_traffic_class_responsive_av;
    v76 = "u=2";
  }
LABEL_259:
  v137 = *v75;
  if (!v137)
    return result;
  *(_QWORD *)buf = 0;
  asprintf((char **)buf, "%s,%s", v76, v137);
  nw_http_fields_append(v73, (uint64_t)"Priority", *(uint64_t *)buf);
  v79 = *(char **)buf;
  if (*(_QWORD *)buf)
    goto LABEL_130;
  return 1;
}

void sub_18361C32C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  _Block_object_dispose(&a31, 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZL41nw_masque_options_enumerate_extra_headersP19nw_protocol_optionsU13block_pointerFbPKcS2_E_block_invoke(uint64_t a1, uint64_t a2)
{
  void *v4;
  size_t count;
  void *v6;
  size_t v7;
  size_t v8;
  uint64_t v9;
  const char *string;
  const char *v11;
  BOOL v12;

  v4 = *(void **)(a2 + 8);
  if (!v4)
  {
    count = 0;
    v6 = *(void **)(a2 + 16);
    if (!v6)
      goto LABEL_4;
    goto LABEL_3;
  }
  count = xpc_array_get_count(v4);
  v6 = *(void **)(a2 + 16);
  if (v6)
LABEL_3:
    v6 = (void *)xpc_array_get_count(v6);
LABEL_4:
  if (count && (void *)count == v6)
  {
    v7 = 0;
    v8 = count - 1;
    do
    {
      v9 = *(_QWORD *)(a1 + 32);
      string = xpc_array_get_string(*(xpc_object_t *)(a2 + 8), v7);
      v11 = xpc_array_get_string(*(xpc_object_t *)(a2 + 16), v7);
      if ((*(unsigned int (**)(uint64_t, const char *, const char *))(v9 + 16))(v9, string, v11))
        v12 = v8 == v7;
      else
        v12 = 1;
      ++v7;
    }
    while (!v12);
  }
  return 1;
}

__n128 ___ZL38nw_masque_add_extra_headers_to_requestP9nw_masqueP14nw_http_fields_block_invoke_91(uint64_t a1, int a2, xpc_object_t xdict)
{
  __n128 *data;
  __n128 result;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  BOOL v9;
  const char *v10;
  const char *v11;
  size_t length;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  __n128 *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  length = 0;
  data = (__n128 *)xpc_dictionary_get_data(xdict, "data", &length);
  if (!strcmp((const char *)&data[1], *(const char **)(a1 + 32))
    && !strcmp((const char *)&data[3], *(const char **)(a1 + 40)))
  {
    v6 = *(_QWORD *)(a1 + 48);
    if (!v6 || (*(_BYTE *)(v6 + 529) & 1) == 0)
    {
      if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
        dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
      v7 = gprivacy_proxyLogObj;
      if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
      {
        v8 = *(_QWORD *)(a1 + 48);
        v9 = v8 == 0;
        *(_DWORD *)buf = 136447234;
        v14 = "nw_masque_add_extra_headers_to_request_block_invoke";
        if (v8)
          v10 = (const char *)(v8 + 531);
        else
          v10 = "";
        v15 = 2082;
        v16 = v10;
        if (v9)
          v11 = "";
        else
          v11 = " ";
        v17 = 2080;
        v18 = v11;
        v19 = 1042;
        v20 = 16;
        v21 = 2098;
        v22 = data;
        _os_log_impl(&dword_182FBE000, v7, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sFound token agent %{public, uuid_t}.16P", buf, 0x30u);
      }
    }
    result = *data;
    *(__n128 *)*(_QWORD *)(a1 + 56) = *data;
  }
  return result;
}

uint64_t ___ZL50nw_masque_add_prohibit_interface_header_to_requestP9nw_masqueP14nw_http_fields_block_invoke(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;

  if (a2 == 2)
  {
    v2 = a1 + 32;
    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v8 = *(_QWORD *)(v7 + 24);
    if (v8)
      *(_QWORD *)(v7 + 24) = v8 + 1;
    v5 = a1 + 48;
    v6 = "cellular";
    goto LABEL_9;
  }
  if (a2 == 1)
  {
    v2 = a1 + 32;
    v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v4 = *(_QWORD *)(v3 + 24);
    if (v4)
      *(_QWORD *)(v3 + 24) = v4 + 1;
    v5 = a1 + 40;
    v6 = "wifi";
LABEL_9:
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v5 + 8) + 24) = v6;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v2 + 8) + 24) += strlen(*(const char **)(*(_QWORD *)(*(_QWORD *)v5 + 8)
                                                                                  + 24));
  }
  return 1;
}

void nw_masque_add_client_application_header_to_request(void *a1, void *a2)
{
  uint64_t effective_bundle_id;

  effective_bundle_id = nw_parameters_get_effective_bundle_id(a1);
  if (effective_bundle_id)
    goto LABEL_5;
  if (nw_utilities_get_self_bundle_id::onceToken != -1)
    dispatch_once(&nw_utilities_get_self_bundle_id::onceToken, &__block_literal_global_7);
  effective_bundle_id = nw_utilities_get_self_bundle_id::bundle_identifier_string;
  if (nw_utilities_get_self_bundle_id::bundle_identifier_string)
LABEL_5:
    nw_http_fields_append(a2, (uint64_t)"Client-Application", effective_bundle_id);
}

void nw_masque_add_multipath_header_to_request(uint64_t a1, void *a2)
{
  _BOOL8 v4;
  int alternate_port;
  char *v6;

  if (nw_parameters_get_multipath(*(void **)(a1 + 320)))
  {
    if (nw_masque_is_multipath_allowed(void)::onceToken != -1)
      dispatch_once(&nw_masque_is_multipath_allowed(void)::onceToken, &__block_literal_global_113);
    if (nw_masque_is_multipath_allowed(void)::isAllowed == 1)
    {
      v4 = nw_endpoint_copy_proxy_original_endpoint(*(void **)(a1 + 312));
      v6 = 0;
      alternate_port = nw_endpoint_get_alternate_port((void *)v4);
      asprintf(&v6, "%s;port=%u", "interactive", alternate_port);
      nw_http_fields_append(a2, (uint64_t)"Multipath", (uint64_t)v6);
      if (v6)
        free(v6);
    }
  }
}

void ___ZL30nw_masque_is_multipath_allowedv_block_invoke()
{
  void *v0;
  void *v1;

  v0 = (void *)nw_utilities_copy_local_entitlement_value("com.apple.developer.networking.multipath_extended");
  if (v0)
  {
    v1 = v0;
    if (object_getClass(v0) == (Class)MEMORY[0x1E0C812D0] && xpc_BOOL_get_value(v1))
      nw_masque_is_multipath_allowed(void)::isAllowed = 1;
    xpc_release(v1);
  }
}

void ___ZL30nw_masque_send_proxied_messageP9nw_masqueP20nw_protocol_metadata_block_invoke(uint64_t a1, uint64_t a2)
{
  nw_http_request_set_extended_connect_protocol(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
}

void nw_masque_send_connect(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  void *v9;
  void *v10;
  const sockaddr *v11;
  const sockaddr *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  nw_endpoint_t v16;
  NSObject *v17;
  const char *logging_description;
  const char *v19;
  void *v20;
  _BYTE *v21;
  int v22;
  NSObject *v23;
  const char *v24;
  const char *v25;
  char **v26;
  NSObject *v27;
  void *v28;
  id *v29;
  id v30;
  id v31;
  uint64_t v32;
  id v33;
  unsigned int v34;
  unsigned int v35;
  NSObject *v36;
  NSObject *v37;
  const char *v38;
  void *v39;
  id *v40;
  id v41;
  id v42;
  uint64_t v43;
  id v44;
  unsigned int v45;
  unsigned int v46;
  NSObject *v47;
  const char *v48;
  void *v49;
  id *v50;
  id v51;
  id v52;
  uint64_t v53;
  id v54;
  unsigned int v55;
  unsigned int v56;
  NSObject *v57;
  const char *v58;
  const char *v59;
  const char *v60;
  const char *hostname;
  unsigned int port;
  int v63;
  const char *v64;
  char *v65;
  char v66;
  char *v67;
  const char *v68;
  int v69;
  const char *v70;
  const __CFAllocator *v71;
  CFStringRef v72;
  CFStringRef v73;
  const __CFCharacterSet *URLPathAllowedCharacterSet;
  __CFCharacterSet *MutableCopy;
  __CFCharacterSet *v76;
  const __CFString *v77;
  const __CFString *v78;
  CFIndex Length;
  size_t v80;
  char *v81;
  int v82;
  char *v83;
  BOOL v84;
  int v85;
  NSObject *v86;
  void *v87;
  int v88;
  NSObject *v89;
  NSObject *v90;
  size_t size;
  id *metadata_for_request;
  id *v93;
  dispatch_data_s *v94;
  dispatch_data_s *v95;
  int v96;
  NSObject *v97;
  _BOOL4 v98;
  const char *v99;
  const char *v100;
  NSObject *v101;
  NSObject *v102;
  _BOOL8 virtual_connection_id_capsule;
  char v104;
  int v105;
  uint64_t v106;
  const char *v107;
  NSObject *v108;
  os_log_type_t v109;
  uint32_t v110;
  uint64_t v111;
  int v112;
  void *v113;
  unint64_t next_connect_ip_request_id;
  unint64_t v115;
  size_t v116;
  NSObject *v117;
  void *v118;
  size_t v119;
  NSObject *v120;
  void *v121;
  NSObject *alloc;
  char *v123;
  char *v124;
  id *metadata_for_capsule;
  char v126;
  int v127;
  uint64_t v128;
  const char *v129;
  NSObject *v130;
  os_log_type_t v131;
  uint32_t v132;
  uint64_t v133;
  char *v134;
  NSObject *v135;
  os_log_type_t v136;
  const char *v137;
  char *backtrace_string;
  _BOOL4 v139;
  NSObject *v140;
  void *v141;
  NSObject *v142;
  NSObject *v143;
  void *v144;
  NSObject *v145;
  void *v146;
  unint64_t __src;
  char *v148;
  char *v149;
  sockaddr buf[4];
  _BYTE address[24];
  size_t v152;
  uint64_t v153;

  v153 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)&buf[0].sa_len = 136446210;
    *(_QWORD *)&buf[0].sa_data[2] = "nw_masque_send_connect";
    v134 = (char *)_os_log_send_and_compose_impl();
    address[0] = 16;
    LOBYTE(v149) = 0;
    if (!__nwlog_fault(v134, address, &v149))
      goto LABEL_294;
    if (address[0] == 17)
    {
      v135 = __nwlog_obj();
      v136 = address[0];
      if (!os_log_type_enabled(v135, (os_log_type_t)address[0]))
        goto LABEL_294;
      *(_DWORD *)&buf[0].sa_len = 136446210;
      *(_QWORD *)&buf[0].sa_data[2] = "nw_masque_send_connect";
      v137 = "%{public}s called with null masque";
    }
    else if ((_BYTE)v149)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v135 = __nwlog_obj();
      v136 = address[0];
      v139 = os_log_type_enabled(v135, (os_log_type_t)address[0]);
      if (backtrace_string)
      {
        if (v139)
        {
          *(_DWORD *)&buf[0].sa_len = 136446466;
          *(_QWORD *)&buf[0].sa_data[2] = "nw_masque_send_connect";
          *(_WORD *)&buf[0].sa_data[10] = 2082;
          *(_QWORD *)&buf[0].sa_data[12] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v135, v136, "%{public}s called with null masque, dumping backtrace:%{public}s", &buf[0].sa_len, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_294;
      }
      if (!v139)
      {
LABEL_294:
        if (v134)
          free(v134);
        return;
      }
      *(_DWORD *)&buf[0].sa_len = 136446210;
      *(_QWORD *)&buf[0].sa_data[2] = "nw_masque_send_connect";
      v137 = "%{public}s called with null masque, no backtrace";
    }
    else
    {
      v135 = __nwlog_obj();
      v136 = address[0];
      if (!os_log_type_enabled(v135, (os_log_type_t)address[0]))
        goto LABEL_294;
      *(_DWORD *)&buf[0].sa_len = 136446210;
      *(_QWORD *)&buf[0].sa_data[2] = "nw_masque_send_connect";
      v137 = "%{public}s called with null masque, backtrace limit exceeded";
    }
    _os_log_impl(&dword_182FBE000, v135, v136, v137, &buf[0].sa_len, 0xCu);
    goto LABEL_294;
  }
  v2 = mach_continuous_time();
  if (v2 <= 1)
    v3 = 1;
  else
    v3 = v2;
  *(_QWORD *)(a1 + 288) = v3;
  v4 = *(void **)(a1 + 344);
  if (!v4)
    goto LABEL_7;
  *(_QWORD *)address = 0;
  *(_QWORD *)&address[8] = address;
  *(_QWORD *)&address[16] = 0x2000000000;
  v152 = 0;
  *(_QWORD *)&buf[0].sa_len = MEMORY[0x1E0C809B0];
  *(_QWORD *)&buf[0].sa_data[6] = 0x40000000;
  *(_QWORD *)&buf[1].sa_len = __nw_masque_options_copy_target_endpoint_block_invoke;
  *(_QWORD *)&buf[1].sa_data[6] = &unk_1E149E330;
  *(_QWORD *)&buf[2].sa_len = address;
  nw_protocol_options_access_handle(v4, buf);
  v5 = *(void **)(*(_QWORD *)&address[8] + 24);
  _Block_object_dispose(address, 8);
  if (!v5)
  {
LABEL_7:
    v6 = *(_QWORD *)(a1 + 48);
    if (v6 && (v7 = *(_QWORD *)(v6 + 24)) != 0 && (v8 = *(uint64_t (**)(void))(v7 + 136)) != 0)
    {
      v9 = (void *)v8();
      if (!v9)
        goto LABEL_109;
    }
    else
    {
      v9 = *(void **)(a1 + 304);
      if (!v9)
        goto LABEL_109;
    }
    v5 = os_retain(v9);
    if (v5)
      goto LABEL_12;
LABEL_109:
    nw_masque_mark_failed_with_error(a1, 22);
    return;
  }
LABEL_12:
  v10 = *(void **)(a1 + 312);
  if (v10)
  {
    os_release(v10);
    *(_QWORD *)(a1 + 312) = 0;
  }
  *(_QWORD *)(a1 + 312) = nw_endpoint_copy_original_endpoint(v5, 2);
  os_release(v5);
  if (nw_endpoint_get_type(*(nw_endpoint_t *)(a1 + 312)) == nw_endpoint_type_address)
  {
    v11 = nw_endpoint_get_address(*(nw_endpoint_t *)(a1 + 312));
    if (v11->sa_family == 30)
    {
      v12 = v11;
      v149 = 0;
      v13 = nw_nat64_copy_prefixes(0, &v149);
      if (v13 >= 1)
      {
        v14 = 0;
        v15 = 16 * v13;
        while (1)
        {
          LODWORD(v148) = 0;
          if (nw_nat64_extract_v4((unsigned int *)&v149[v14], &v12->sa_data[6], (uint64_t)&v148))
            break;
          v14 += 16;
          if (v15 == v14)
            goto LABEL_29;
        }
        *(_QWORD *)&address[8] = 0;
        *(_QWORD *)address = 528;
        *(_WORD *)&address[2] = *(_WORD *)v12->sa_data;
        *(_DWORD *)&address[4] = (_DWORD)v148;
        *(_QWORD *)&address[8] = 0;
        v16 = nw_endpoint_create_address((const sockaddr *)address);
        if ((*(_BYTE *)(a1 + 529) & 1) == 0)
        {
          if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
            dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
          v17 = gprivacy_proxyLogObj;
          if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
          {
            logging_description = nw_endpoint_get_logging_description(v16);
            v19 = nw_endpoint_get_logging_description(*(void **)(a1 + 312));
            *(_DWORD *)&buf[0].sa_len = 136447234;
            *(_QWORD *)&buf[0].sa_data[2] = "nw_masque_send_connect";
            *(_QWORD *)&buf[0].sa_data[12] = a1 + 531;
            *(_WORD *)&buf[1].sa_data[4] = 2080;
            *(_WORD *)&buf[0].sa_data[10] = 2082;
            *(_QWORD *)&buf[1].sa_data[6] = " ";
            *(_WORD *)&buf[2].sa_len = 2082;
            *(_QWORD *)buf[2].sa_data = logging_description;
            *(_WORD *)&buf[2].sa_data[8] = 2082;
            *(_QWORD *)&buf[2].sa_data[10] = v19;
            _os_log_impl(&dword_182FBE000, v17, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sExtracted address %{public}s from %{public}s", &buf[0].sa_len, 0x34u);
          }
        }
        v20 = *(void **)(a1 + 312);
        if (v20)
          os_release(v20);
        *(_QWORD *)(a1 + 312) = v16;
      }
    }
  }
LABEL_29:
  v148 = 0;
  v149 = 0;
  v21 = (_BYTE *)(a1 + 527);
  v22 = *(_DWORD *)(a1 + 527);
  if ((v22 & 0x10) != 0)
  {
    if ((v22 & 0x10000) == 0)
    {
      if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
        dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
      v27 = gprivacy_proxyLogObj;
      if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)&buf[0].sa_len = 136446466;
        *(_QWORD *)&buf[0].sa_data[2] = a1 + 531;
        *(_WORD *)&buf[0].sa_data[10] = 2080;
        *(_QWORD *)&buf[0].sa_data[12] = " ";
        _os_log_impl(&dword_182FBE000, v27, OS_LOG_TYPE_INFO, "%{public}s%sCreating CONNECT (connect-udp) request for listening", &buf[0].sa_len, 0x16u);
      }
    }
    v28 = *(void **)(a1 + 344);
    if (v28)
    {
      v29 = v28;
      v30 = v29[3];

      if (v30)
      {
        v31 = v30;
        v32 = objc_msgSend(v31, "hostname");

        v33 = v31;
        v34 = objc_msgSend(v33, "port");

        os_release(v33);
        if (v32)
        {
          v35 = __rev16(v34);
          if (v35 != 443 && v35)
            asprintf(&v149, "%s:%u");
          else
            asprintf(&v149, "%s");
          v63 = 0;
          goto LABEL_113;
        }
        if ((*(_BYTE *)(a1 + 529) & 1) != 0)
          goto LABEL_109;
        if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
          dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
        v36 = gprivacy_proxyLogObj;
        if (!os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
          goto LABEL_109;
LABEL_107:
        *(_DWORD *)&buf[0].sa_len = 136446466;
        *(_QWORD *)&buf[0].sa_data[2] = a1 + 531;
        *(_WORD *)&buf[0].sa_data[10] = 2080;
        *(_QWORD *)&buf[0].sa_data[12] = " ";
        v68 = "%{public}s%sProxy hostname not found";
        goto LABEL_108;
      }
    }
    if ((*(_BYTE *)(a1 + 529) & 1) != 0)
      goto LABEL_109;
    if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
      dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
    v36 = gprivacy_proxyLogObj;
    if (!os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
      goto LABEL_109;
LABEL_102:
    *(_DWORD *)&buf[0].sa_len = 136446466;
    *(_QWORD *)&buf[0].sa_data[2] = a1 + 531;
    *(_WORD *)&buf[0].sa_data[10] = 2080;
    *(_QWORD *)&buf[0].sa_data[12] = " ";
    v68 = "%{public}s%sProxy endpoint not found";
LABEL_108:
    _os_log_impl(&dword_182FBE000, v36, OS_LOG_TYPE_ERROR, v68, &buf[0].sa_len, 0x16u);
    goto LABEL_109;
  }
  if ((v22 & 8) != 0)
  {
    if (*(_DWORD *)(a1 + 504) != 2)
    {
      if ((v22 & 0x10000) == 0)
      {
        if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
          dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
        v57 = gprivacy_proxyLogObj;
        if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_INFO))
        {
          v58 = nw_endpoint_get_logging_description(*(void **)(a1 + 312));
          *(_DWORD *)&buf[0].sa_len = 136446722;
          *(_QWORD *)&buf[0].sa_data[2] = a1 + 531;
          *(_WORD *)&buf[0].sa_data[10] = 2080;
          *(_QWORD *)&buf[0].sa_data[12] = " ";
          *(_WORD *)&buf[1].sa_data[4] = 2082;
          *(_QWORD *)&buf[1].sa_data[6] = v58;
          _os_log_impl(&dword_182FBE000, v57, OS_LOG_TYPE_INFO, "%{public}s%sCreating CONNECT-UDP request for %{public}s", &buf[0].sa_len, 0x20u);
        }
      }
      v25 = "https";
      v26 = nw_http_request_method_connect_udp;
LABEL_83:
      v59 = *v26;
      if (nw_endpoint_get_type(*(nw_endpoint_t *)(a1 + 312)) == nw_endpoint_type_address
        && nw_endpoint_get_address_family(*(void **)(a1 + 312)) == 30)
      {
        v60 = "[%s]:%u";
      }
      else
      {
        v60 = "%s:%u";
      }
      hostname = nw_endpoint_get_hostname(*(nw_endpoint_t *)(a1 + 312));
      port = nw_endpoint_get_port(*(nw_endpoint_t *)(a1 + 312));
      asprintf(&v149, v60, hostname, port);
      if ((*v21 & 8) != 0)
      {
        v65 = strdup("/");
        if (!v65)
        {
          v140 = __nwlog_obj();
          os_log_type_enabled(v140, OS_LOG_TYPE_ERROR);
          *(_DWORD *)&buf[0].sa_len = 136446210;
          *(_QWORD *)&buf[0].sa_data[2] = "strict_strdup";
          v141 = (void *)_os_log_send_and_compose_impl();
          if (__nwlog_abort((uint64_t)v141))
            goto LABEL_306;
          free(v141);
        }
        v63 = 0;
        v64 = 0;
        v148 = v65;
      }
      else
      {
        v63 = 0;
        v64 = 0;
      }
      v66 = 1;
      v67 = v149;
      if (!v149)
      {
LABEL_172:
        v87 = (void *)nw_http_request_create((uint64_t)v59, (uint64_t)v25, (uint64_t)v67, (uint64_t)v148);
        if (v149)
        {
          free(v149);
          v149 = 0;
        }
        if (v148)
        {
          free(v148);
          v148 = 0;
        }
        if ((v66 & 1) != 0)
        {
          if (v63)
            goto LABEL_178;
        }
        else
        {
          nw_http_request_set_extended_connect_protocol(v87, (uint64_t)v64);
          if (v63)
          {
LABEL_178:
            nw_http_fields_append(v87, (uint64_t)"Proxy-QUIC-Forwarding", (uint64_t)"?1");
            v88 = *(_DWORD *)v21;
            if ((*(_DWORD *)v21 & 0x40000) != 0)
              goto LABEL_179;
            goto LABEL_183;
          }
        }
        v88 = *(_DWORD *)v21;
        if ((*(_DWORD *)v21 & 0x40000) != 0)
        {
LABEL_179:
          nw_http_fields_append(v87, (uint64_t)"Capsule-Protocol", (uint64_t)"?1");
          if ((*(_DWORD *)v21 & 0x10) == 0)
          {
LABEL_185:
            nw_http_fields_append(v87, (uint64_t)"Priority", (uint64_t)"i");
            if (!nw_masque_add_extra_headers_to_request(a1, v87))
            {
LABEL_276:
              if (v87)
                os_release(v87);
              return;
            }
            if (*(_QWORD *)(a1 + 384) && *(_DWORD *)(a1 + 504) == 1)
            {
              v89 = dispatch_data_create_with_transform();
              memset(&buf[0].sa_family, 0, 63);
              buf[0].sa_len = 58;
              if (dispatch_data_get_size(v89) < 0x3E)
              {
                nw_masque_change_base64_to_base64url((char *)buf);
                *(_WORD *)(&buf[0].sa_family + nw_dispatch_data_copyout(v89, (uint64_t)&buf[0].sa_family, 61)) = 58;
                nw_http_fields_append(v87, (uint64_t)"Client-Connection-Id", (uint64_t)buf);
              }
              else if ((v21[2] & 1) == 0)
              {
                if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
                  dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
                v90 = gprivacy_proxyLogObj;
                if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
                {
                  size = dispatch_data_get_size(v89);
                  *(_DWORD *)address = 136446722;
                  *(_QWORD *)&address[4] = a1 + 531;
                  *(_WORD *)&address[12] = 2080;
                  *(_QWORD *)&address[14] = " ";
                  *(_WORD *)&address[22] = 2048;
                  v152 = size;
                  _os_log_impl(&dword_182FBE000, v90, OS_LOG_TYPE_ERROR, "%{public}s%sBase64 data is too large: %zu", address, 0x20u);
                }
              }
              if (v89)
                dispatch_release(v89);
            }
            metadata_for_request = nw_http_create_metadata_for_request(v87);
            v93 = metadata_for_request;
            if ((*v21 & 0x10) != 0)
              nw_http_metadata_set_datagram_context_id(metadata_for_request, 2);
            if ((nw_masque_send_metadata(a1, (uint64_t)v93, *(_QWORD *)(a1 + 32)) & 1) == 0)
            {
              nw_masque_mark_failed_with_error(a1, 12);
              goto LABEL_274;
            }
            v96 = *(_DWORD *)v21;
            if ((*(_DWORD *)v21 & 0x10000) == 0)
            {
              if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
                dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
              v97 = gprivacy_proxyLogObj;
              v98 = os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG);
              v96 = *(_DWORD *)v21;
              if (v98)
              {
                v99 = "-IP";
                if ((v96 & 0x20) == 0)
                  v99 = "";
                *(_DWORD *)&buf[0].sa_len = 136446978;
                *(_QWORD *)&buf[0].sa_data[2] = "nw_masque_send_connect";
                *(_WORD *)&buf[0].sa_data[10] = 2082;
                *(_QWORD *)&buf[0].sa_data[12] = a1 + 531;
                *(_WORD *)&buf[1].sa_data[4] = 2080;
                *(_QWORD *)&buf[1].sa_data[6] = " ";
                if ((v96 & 8) != 0)
                  v100 = "-UDP";
                else
                  v100 = v99;
                *(_WORD *)&buf[2].sa_len = 2080;
                *(_QWORD *)buf[2].sa_data = v100;
                _os_log_impl(&dword_182FBE000, v97, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sSent CONNECT%s request", &buf[0].sa_len, 0x2Au);
                v96 = *(_DWORD *)v21;
              }
            }
            *(_DWORD *)(a1 + 508) = 2;
            if ((v96 & 8) == 0
              || (v101 = *(NSObject **)(a1 + 384)) == 0
              || *(_DWORD *)(a1 + 504) != 2
              || !*(_QWORD *)(a1 + 432))
            {
LABEL_232:
              v112 = *(_DWORD *)v21;
              if ((*(_DWORD *)v21 & 0x20) != 0)
              {
                v113 = *(void **)(a1 + 456);
                if (v113)
                {
                  next_connect_ip_request_id = nw_http_connection_metadata_get_next_connect_ip_request_id(v113);
                  v115 = nw_http_connection_metadata_get_next_connect_ip_request_id(*(void **)(a1 + 456));
                  v112 = *(_DWORD *)v21;
                }
                else
                {
                  next_connect_ip_request_id = 0;
                  v115 = 0;
                }
                if ((v112 & 0x10000) == 0 && gLogDatapath)
                {
                  if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
                    dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
                  v142 = gprivacy_proxyLogObj;
                  if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)&buf[0].sa_len = 136447234;
                    *(_QWORD *)&buf[0].sa_data[2] = "nw_masque_send_connect";
                    *(_WORD *)&buf[0].sa_data[10] = 2082;
                    *(_QWORD *)&buf[0].sa_data[12] = a1 + 531;
                    *(_WORD *)&buf[1].sa_data[4] = 2080;
                    *(_QWORD *)&buf[1].sa_data[6] = " ";
                    *(_WORD *)&buf[2].sa_len = 2048;
                    *(_QWORD *)buf[2].sa_data = next_connect_ip_request_id;
                    *(_WORD *)&buf[2].sa_data[8] = 2048;
                    *(_QWORD *)&buf[2].sa_data[10] = v115;
                    _os_log_impl(&dword_182FBE000, v142, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sADDRESS_REQUEST capsule v4 request ID: %llu, v6 request ID %llu", &buf[0].sa_len, 0x34u);
                  }
                }
                *(_QWORD *)address = 0;
                if (next_connect_ip_request_id > 0x3F)
                {
                  if (next_connect_ip_request_id >> 14)
                  {
                    if (next_connect_ip_request_id >> 30)
                    {
                      if (next_connect_ip_request_id >> 62)
                      {
                        v117 = __nwlog_obj();
                        os_log_type_enabled(v117, OS_LOG_TYPE_ERROR);
                        *(_DWORD *)&buf[0].sa_len = 136446466;
                        *(_QWORD *)&buf[0].sa_data[2] = "_http_vle_encode";
                        *(_WORD *)&buf[0].sa_data[10] = 2048;
                        *(_QWORD *)&buf[0].sa_data[12] = next_connect_ip_request_id;
                        v118 = (void *)_os_log_send_and_compose_impl();
                        if (__nwlog_abort((uint64_t)v118))
                          goto LABEL_306;
                        free(v118);
                        v116 = 0;
                      }
                      else
                      {
                        *(_QWORD *)address = bswap64(next_connect_ip_request_id | 0xC000000000000000);
                        v116 = 8;
                      }
                    }
                    else
                    {
                      *(_QWORD *)address = bswap32(next_connect_ip_request_id | 0x80000000);
                      v116 = 4;
                    }
                  }
                  else
                  {
                    *(_QWORD *)address = bswap32(next_connect_ip_request_id | 0x4000) >> 16;
                    v116 = 2;
                  }
                }
                else
                {
                  *(_QWORD *)address = next_connect_ip_request_id;
                  v116 = 1;
                }
                __src = 0;
                if (v115 <= 0x3F)
                {
                  __src = v115;
                  v119 = 1;
                  goto LABEL_258;
                }
                if (!(v115 >> 14))
                {
                  __src = bswap32(v115 | 0x4000) >> 16;
                  v119 = 2;
                  goto LABEL_258;
                }
                if (!(v115 >> 30))
                {
                  __src = bswap32(v115 | 0x80000000);
                  v119 = 4;
                  goto LABEL_258;
                }
                if (!(v115 >> 62))
                {
                  __src = bswap64(v115 | 0xC000000000000000);
                  v119 = 8;
                  goto LABEL_258;
                }
                v120 = __nwlog_obj();
                os_log_type_enabled(v120, OS_LOG_TYPE_ERROR);
                *(_DWORD *)&buf[0].sa_len = 136446466;
                *(_QWORD *)&buf[0].sa_data[2] = "_http_vle_encode";
                *(_WORD *)&buf[0].sa_data[10] = 2048;
                *(_QWORD *)&buf[0].sa_data[12] = v115;
                v121 = (void *)_os_log_send_and_compose_impl();
                if (!__nwlog_abort((uint64_t)v121))
                {
                  free(v121);
                  v119 = 0;
LABEL_258:
                  alloc = dispatch_data_create_alloc();
                  memcpy(0, address, v116);
                  *(_BYTE *)v116 = 4;
                  *(_DWORD *)(v116 + 1) = 0;
                  *(_BYTE *)(v116 + 5) = 32;
                  v123 = (char *)(v116 + 6);
                  memcpy(v123, &__src, v119);
                  v124 = &v123[v119];
                  *v124 = 6;
                  *(_QWORD *)(v124 + 9) = 0;
                  *(_QWORD *)(v124 + 1) = 0;
                  v124[17] = 0x80;
                  metadata_for_capsule = nw_http_create_metadata_for_capsule(2, alloc);
                  if (alloc)
                    dispatch_release(alloc);
                  v126 = nw_masque_send_metadata(a1, (uint64_t)metadata_for_capsule, *(_QWORD *)(a1 + 32));
                  v127 = *(_DWORD *)v21;
                  if ((v126 & 1) != 0)
                  {
                    if ((v127 & 0x10000) != 0)
                      goto LABEL_272;
                    if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
                      dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
                    v128 = gprivacy_proxyLogObj;
                    if (!os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
                      goto LABEL_272;
                    *(_DWORD *)&buf[0].sa_len = 136446722;
                    *(_QWORD *)&buf[0].sa_data[2] = "nw_masque_send_connect";
                    *(_WORD *)&buf[0].sa_data[10] = 2082;
                    *(_QWORD *)&buf[0].sa_data[12] = a1 + 531;
                    *(_WORD *)&buf[1].sa_data[4] = 2080;
                    *(_QWORD *)&buf[1].sa_data[6] = " ";
                    v129 = "%{public}s %{public}s%sSent ADDRESS_REQUEST capsule";
                    v130 = v128;
                    v131 = OS_LOG_TYPE_DEBUG;
                    v132 = 32;
                  }
                  else
                  {
                    if ((v127 & 0x10000) != 0)
                      goto LABEL_272;
                    if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
                      dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
                    v133 = gprivacy_proxyLogObj;
                    if (!os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
                      goto LABEL_272;
                    *(_DWORD *)&buf[0].sa_len = 136446466;
                    *(_QWORD *)&buf[0].sa_data[2] = a1 + 531;
                    *(_WORD *)&buf[0].sa_data[10] = 2080;
                    *(_QWORD *)&buf[0].sa_data[12] = " ";
                    v129 = "%{public}s%sFailed to send ADDRESS_REQUEST capsule";
                    v130 = v133;
                    v131 = OS_LOG_TYPE_ERROR;
                    v132 = 22;
                  }
                  _os_log_impl(&dword_182FBE000, v130, v131, v129, &buf[0].sa_len, v132);
LABEL_272:
                  if (metadata_for_capsule)
                    os_release(metadata_for_capsule);
                  goto LABEL_274;
                }
LABEL_306:
                __break(1u);
                return;
              }
LABEL_274:
              if (v93)
                os_release(v93);
              goto LABEL_276;
            }
            if (*(_QWORD *)(a1 + 400))
              v102 = *(NSObject **)(a1 + 400);
            else
              v102 = *(NSObject **)(a1 + 384);
            virtual_connection_id_capsule = nw_masque_create_virtual_connection_id_capsule(v101, v102, v94, v95);
            v104 = nw_masque_send_metadata(a1, virtual_connection_id_capsule, *(_QWORD *)(a1 + 32));
            v105 = *(_DWORD *)v21;
            if ((v104 & 1) != 0)
            {
              if ((v105 & 0x10000) != 0)
                goto LABEL_230;
              if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
                dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
              v106 = gprivacy_proxyLogObj;
              if (!os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
                goto LABEL_230;
              *(_DWORD *)&buf[0].sa_len = 136446722;
              *(_QWORD *)&buf[0].sa_data[2] = "nw_masque_send_connect";
              *(_WORD *)&buf[0].sa_data[10] = 2082;
              *(_QWORD *)&buf[0].sa_data[12] = a1 + 531;
              *(_WORD *)&buf[1].sa_data[4] = 2080;
              *(_QWORD *)&buf[1].sa_data[6] = " ";
              v107 = "%{public}s %{public}s%sSent REGISTER_CLIENT_CID capsule";
              v108 = v106;
              v109 = OS_LOG_TYPE_DEBUG;
              v110 = 32;
            }
            else
            {
              if ((v105 & 0x10000) != 0)
                goto LABEL_230;
              if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
                dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
              v111 = gprivacy_proxyLogObj;
              if (!os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
                goto LABEL_230;
              *(_DWORD *)&buf[0].sa_len = 136446466;
              *(_QWORD *)&buf[0].sa_data[2] = a1 + 531;
              *(_WORD *)&buf[0].sa_data[10] = 2080;
              *(_QWORD *)&buf[0].sa_data[12] = " ";
              v107 = "%{public}s%sFailed to send REGISTER_CLIENT_CID capsule";
              v108 = v111;
              v109 = OS_LOG_TYPE_ERROR;
              v110 = 22;
            }
            _os_log_impl(&dword_182FBE000, v108, v109, v107, &buf[0].sa_len, v110);
LABEL_230:
            if (virtual_connection_id_capsule)
              os_release((void *)virtual_connection_id_capsule);
            goto LABEL_232;
          }
LABEL_184:
          nw_http_fields_append(v87, (uint64_t)"Connect-UDP-Bind", (uint64_t)"2");
          goto LABEL_185;
        }
LABEL_183:
        if ((v88 & 0x10) == 0)
          goto LABEL_185;
        goto LABEL_184;
      }
      goto LABEL_149;
    }
    if ((v22 & 0x10000) == 0)
    {
      if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
        dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
      v37 = gprivacy_proxyLogObj;
      if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_INFO))
      {
        v38 = nw_endpoint_get_logging_description(*(void **)(a1 + 312));
        *(_DWORD *)&buf[0].sa_len = 136446722;
        *(_QWORD *)&buf[0].sa_data[2] = a1 + 531;
        *(_WORD *)&buf[0].sa_data[10] = 2080;
        *(_QWORD *)&buf[0].sa_data[12] = " ";
        *(_WORD *)&buf[1].sa_data[4] = 2082;
        *(_QWORD *)&buf[1].sa_data[6] = v38;
        _os_log_impl(&dword_182FBE000, v37, OS_LOG_TYPE_INFO, "%{public}s%sCreating CONNECT (connect-udp) request for %{public}s", &buf[0].sa_len, 0x20u);
      }
    }
    v39 = *(void **)(a1 + 344);
    if (v39)
    {
      v40 = v39;
      v41 = v40[3];

      if (v41)
      {
        v42 = v41;
        v43 = objc_msgSend(v42, "hostname");

        v44 = v42;
        v45 = objc_msgSend(v44, "port");

        os_release(v44);
        if (v43)
        {
          v46 = __rev16(v45);
          if (v46 != 443 && v46)
            asprintf(&v149, "%s:%u");
          else
            asprintf(&v149, "%s");
          v63 = 1;
LABEL_113:
          v64 = "connect-udp";
          goto LABEL_114;
        }
        if ((*(_BYTE *)(a1 + 529) & 1) != 0)
          goto LABEL_109;
        if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
          dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
        v36 = gprivacy_proxyLogObj;
        if (!os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
          goto LABEL_109;
        goto LABEL_107;
      }
    }
    if ((*(_BYTE *)(a1 + 529) & 1) != 0)
      goto LABEL_109;
    if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
      dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
    v36 = gprivacy_proxyLogObj;
    if (!os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
      goto LABEL_109;
    goto LABEL_102;
  }
  if ((v22 & 0x20) == 0)
  {
    if ((v22 & 0x10000) == 0)
    {
      if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
        dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
      v23 = gprivacy_proxyLogObj;
      if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_INFO))
      {
        v24 = nw_endpoint_get_logging_description(*(void **)(a1 + 312));
        *(_DWORD *)&buf[0].sa_len = 136446722;
        *(_QWORD *)&buf[0].sa_data[2] = a1 + 531;
        *(_WORD *)&buf[0].sa_data[10] = 2080;
        *(_QWORD *)&buf[0].sa_data[12] = " ";
        *(_WORD *)&buf[1].sa_data[4] = 2082;
        *(_QWORD *)&buf[1].sa_data[6] = v24;
        _os_log_impl(&dword_182FBE000, v23, OS_LOG_TYPE_INFO, "%{public}s%sCreating CONNECT request for %{public}s", &buf[0].sa_len, 0x20u);
      }
    }
    v25 = 0;
    v26 = nw_http_request_method_connect;
    goto LABEL_83;
  }
  if ((v22 & 0x10000) == 0)
  {
    if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
      dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
    v47 = gprivacy_proxyLogObj;
    if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_INFO))
    {
      v48 = nw_endpoint_get_logging_description(*(void **)(a1 + 312));
      *(_DWORD *)&buf[0].sa_len = 136446722;
      *(_QWORD *)&buf[0].sa_data[2] = a1 + 531;
      *(_WORD *)&buf[0].sa_data[10] = 2080;
      *(_QWORD *)&buf[0].sa_data[12] = " ";
      *(_WORD *)&buf[1].sa_data[4] = 2082;
      *(_QWORD *)&buf[1].sa_data[6] = v48;
      _os_log_impl(&dword_182FBE000, v47, OS_LOG_TYPE_INFO, "%{public}s%sCreating CONNECT (connect-ip) request for %{public}s", &buf[0].sa_len, 0x20u);
    }
  }
  v49 = *(void **)(a1 + 344);
  if (!v49 || (v50 = v49, v51 = v50[3], v50, !v51))
  {
    if ((*(_BYTE *)(a1 + 529) & 1) != 0)
      goto LABEL_109;
    if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
      dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
    v36 = gprivacy_proxyLogObj;
    if (!os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
      goto LABEL_109;
    goto LABEL_102;
  }
  v52 = v51;
  v53 = objc_msgSend(v52, "hostname");

  v54 = v52;
  v55 = objc_msgSend(v54, "port");

  os_release(v54);
  if (!v53)
  {
    if ((*(_BYTE *)(a1 + 529) & 1) != 0)
      goto LABEL_109;
    if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
      dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
    v36 = gprivacy_proxyLogObj;
    if (!os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
      goto LABEL_109;
    goto LABEL_107;
  }
  v56 = __rev16(v55);
  if (v56 != 443 && v56)
    asprintf(&v149, "%s:%u");
  else
    asprintf(&v149, "%s");
  v63 = 0;
  v64 = "connect-ip";
LABEL_114:
  v69 = *(_DWORD *)v21;
  *(_DWORD *)v21 |= 0x40000u;
  if ((v69 & 0x10) != 0)
  {
    asprintf(&v148, "/.well-known/masque/udp/*/*/");
  }
  else if ((v69 & 0x28) != 0)
  {
    v70 = nw_endpoint_get_hostname(*(nw_endpoint_t *)(a1 + 312));
    v71 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v72 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v70, 0x8000100u);
    if (v72)
    {
      v73 = v72;
      URLPathAllowedCharacterSet = (const __CFCharacterSet *)_CFURLComponentsGetURLPathAllowedCharacterSet();
      MutableCopy = CFCharacterSetCreateMutableCopy(v71, URLPathAllowedCharacterSet);
      if (MutableCopy)
      {
        v76 = MutableCopy;
        CFCharacterSetRemoveCharactersInString(MutableCopy, CFSTR(":"));
        v77 = (const __CFString *)_CFStringCreateByAddingPercentEncodingWithAllowedCharacters();
        if (v77)
        {
          v78 = v77;
          Length = CFStringGetLength(v77);
          v80 = Length + 1;
          if (Length == -1)
          {
            v143 = __nwlog_obj();
            os_log_type_enabled(v143, OS_LOG_TYPE_ERROR);
            *(_DWORD *)&buf[0].sa_len = 136446210;
            *(_QWORD *)&buf[0].sa_data[2] = "strict_calloc";
            v144 = (void *)_os_log_send_and_compose_impl();
            if (__nwlog_abort((uint64_t)v144))
              goto LABEL_306;
            free(v144);
          }
          v81 = (char *)malloc_type_calloc(1uLL, v80, 0xEAFB8F1AuLL);
          if (!v81)
          {
            v145 = __nwlog_obj();
            os_log_type_enabled(v145, OS_LOG_TYPE_ERROR);
            *(_DWORD *)&buf[0].sa_len = 136446722;
            *(_QWORD *)&buf[0].sa_data[2] = "strict_calloc";
            *(_WORD *)&buf[0].sa_data[10] = 2048;
            *(_QWORD *)&buf[0].sa_data[12] = 1;
            *(_WORD *)&buf[1].sa_data[4] = 2048;
            *(_QWORD *)&buf[1].sa_data[6] = v80;
            v146 = (void *)_os_log_send_and_compose_impl();
            if (__nwlog_abort((uint64_t)v146))
              goto LABEL_306;
            free(v146);
            v21 = (_BYTE *)(a1 + 527);
          }
          CFStringGetCString(v78, v81, v80, 0x8000100u);
          CFRelease(v78);
        }
        else
        {
          v81 = 0;
        }
        CFRelease(v76);
      }
      else
      {
        v81 = 0;
      }
      CFRelease(v73);
    }
    else
    {
      v81 = 0;
    }
    if ((*(_DWORD *)v21 & 8) != 0)
    {
      nw_endpoint_get_port(*(nw_endpoint_t *)(a1 + 312));
      asprintf(&v148, "/.well-known/masque/udp/%s/%u/");
    }
    else if ((*(_DWORD *)v21 & 0x20) != 0)
    {
      asprintf(&v148, "/.well-known/masque/ip/%s/%u/");
    }
    if (v81)
      free(v81);
  }
  v66 = 0;
  v59 = "CONNECT";
  v25 = "https";
  v67 = v149;
  if (!v149)
    goto LABEL_172;
LABEL_149:
  v82 = *v67;
  if (v82 != 32 && v82 != 9)
  {
    if (!*v67)
      goto LABEL_172;
    v83 = v67 - 1;
    while (1)
    {
      v84 = (v82 - 33) < 0x5E || v82 == 9;
      if (!v84 && v82 != 32 && (v82 & 0x80) == 0)
        break;
      v82 = v83[2];
      ++v83;
      if (!v82)
      {
        v85 = *v83;
        if (v85 != 9 && v85 != 32)
          goto LABEL_172;
        break;
      }
    }
  }
  if ((v21[2] & 1) == 0)
  {
    if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
      dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
    v86 = gprivacy_proxyLogObj;
    if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)&buf[0].sa_len = 136446722;
      *(_QWORD *)&buf[0].sa_data[2] = a1 + 531;
      *(_WORD *)&buf[0].sa_data[10] = 2080;
      *(_QWORD *)&buf[0].sa_data[12] = " ";
      *(_WORD *)&buf[1].sa_data[4] = 2080;
      *(_QWORD *)&buf[1].sa_data[6] = v149;
      _os_log_impl(&dword_182FBE000, v86, OS_LOG_TYPE_ERROR, "%{public}s%sInvalid characters in authority: %s", &buf[0].sa_len, 0x20u);
    }
  }
  nw_masque_mark_failed_with_error(a1, 22);
  if (v149)
  {
    free(v149);
    v149 = 0;
  }
  if (v148)
    free(v148);
}

void sub_18361E3A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZL41nw_protocol_masque_finalize_output_framesP11nw_protocolP16nw_frame_array_s_block_invoke_115(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  size_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  const char *v11;
  BOOL v12;
  int v13;
  NSObject *v14;
  void *v15;
  size_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  const char *v22;
  int v23;
  uint64_t v24;
  _QWORD *v25;
  NSObject *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v30;
  uint8_t buf[4];
  const char *v32;
  __int16 v33;
  const char *v34;
  __int16 v35;
  int v36;
  __int16 v37;
  unsigned int v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  if (!nw_frame_uses_external_data(a2))
  {
    v30 = 0;
    v15 = (void *)nw_frame_unclaimed_bytes(a2, &v30);
    v16 = *(unsigned int *)(a1 + 72);
    if (v30 < v16 || v15 == 0)
    {
      v18 = *(_QWORD *)(a1 + 32);
      if (v18 && (*(_BYTE *)(v18 + 529) & 1) != 0)
        goto LABEL_27;
      if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
        dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
      v19 = gprivacy_proxyLogObj;
      if (!os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
        goto LABEL_27;
      v20 = *(_QWORD *)(a1 + 32);
      v21 = (const char *)(v20 + 531);
      v12 = v20 == 0;
      v22 = " ";
      v23 = *(_DWORD *)(a1 + 72);
      if (v12)
      {
        v21 = "";
        v22 = "";
      }
      *(_DWORD *)buf = 136446978;
      v32 = v21;
      v33 = 2080;
      v34 = v22;
      v35 = 1024;
      v36 = v23;
      v37 = 1024;
      v38 = v30;
      v14 = v19;
      goto LABEL_26;
    }
    memcpy(v15, *(const void **)(a1 + 48), v16);
LABEL_31:
    nw_frame_claim(a2, v27, *(_DWORD *)(a1 + 72), 0);
    nw_frame_collapse(a2);
    nw_frame_unclaim(a2, v28, *(_DWORD *)(a1 + 72), 0);
    *(_BYTE *)(a2 + 186) = *(_BYTE *)(a2 + 186) & 0x7F | ((*(_BYTE *)(a1 + 76) != 0) << 7);
    nw_frame_set_metadata(a2, 0, 0, *(unsigned __int8 *)(a1 + 77));
    return 1;
  }
  v4 = nw_frame_unclaimed_length((_DWORD *)a2);
  v5 = *(unsigned int *)(a1 + 72);
  if (v4 >= v5)
  {
    v26 = dispatch_data_create(*(const void **)(a1 + 48), v5, 0, (dispatch_block_t)*MEMORY[0x1E0C80CE0]);
    nw_frame_will_free_buffer_externally(*(_QWORD *)(a1 + 56));
    nw_frame_set_external_data(a2, v26, 0);
    if (v26)
      os_release(v26);
    goto LABEL_31;
  }
  v6 = v4;
  v7 = *(_QWORD *)(a1 + 32);
  if (v7 && (*(_BYTE *)(v7 + 529) & 1) != 0)
    goto LABEL_27;
  if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
    dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
  v8 = gprivacy_proxyLogObj;
  if (!os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
    goto LABEL_27;
  v9 = *(_QWORD *)(a1 + 32);
  v10 = (const char *)(v9 + 531);
  v11 = "";
  v12 = v9 == 0;
  v13 = *(_DWORD *)(a1 + 72);
  if (v12)
    v10 = "";
  *(_DWORD *)buf = 136446978;
  if (!v12)
    v11 = " ";
  v32 = v10;
  v33 = 2080;
  v34 = v11;
  v35 = 1024;
  v36 = v13;
  v37 = 1024;
  v38 = v6;
  v14 = v8;
LABEL_26:
  _os_log_impl(&dword_182FBE000, v14, OS_LOG_TYPE_ERROR, "%{public}s%sUnable to send %u early bytes, only received %u bytes", buf, 0x22u);
LABEL_27:
  v24 = *(_QWORD *)(a2 + 32);
  v25 = *(_QWORD **)(a2 + 40);
  if (v24)
  {
    *(_QWORD *)(v24 + 40) = v25;
    v25 = *(_QWORD **)(a2 + 40);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) = v25;
  }
  *v25 = v24;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  nw_frame_finalize(a2);
  return 1;
}

uint64_t __nw_masque_options_copy_target_endpoint_block_invoke(uint64_t a1, void **a2)
{
  void *v3;

  v3 = *a2;
  if (*a2)
    v3 = os_retain(v3);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v3;
  return 1;
}

char *nw_masque_change_base64_to_base64url(char *a1)
{
  char *v1;
  char *v2;
  char *result;

  v1 = a1;
  while (1)
  {
    v2 = strchr(a1, 43);
    if (!v2)
      break;
    *v2 = 45;
    a1 = v2 + 1;
  }
  while (1)
  {
    result = strchr(v1, 47);
    if (!result)
      break;
    *result = 95;
    v1 = result + 1;
  }
  return result;
}

BOOL nw_masque_create_virtual_connection_id_capsule(NSObject *a1, NSObject *a2, dispatch_data_s *a3, dispatch_data_s *a4)
{
  size_t size;
  size_t v7;
  size_t v8;
  void *v9;
  _BOOL8 result;
  size_t v11;
  size_t v12;
  size_t v13;
  void *v14;
  NSObject *alloc;
  uint64_t v16;
  char *v17;
  id *metadata_for_capsule;
  unint64_t v19;
  unint64_t __src;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE applier[24];
  void *v30;
  uint64_t *v31;
  uint64_t *v32;
  size_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  size = dispatch_data_get_size(a1);
  v7 = size;
  __src = 0;
  if (size > 0x3F)
  {
    if (size >> 14)
    {
      if (size >> 30)
      {
        if (size >> 62)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
          *(_DWORD *)applier = 136446466;
          *(_QWORD *)&applier[4] = "_http_vle_encode";
          *(_WORD *)&applier[12] = 2048;
          *(_QWORD *)&applier[14] = v7;
          v9 = (void *)_os_log_send_and_compose_impl();
          result = __nwlog_abort((uint64_t)v9);
          if (result)
            goto LABEL_28;
          free(v9);
          v8 = 0;
        }
        else
        {
          __src = bswap64(size | 0xC000000000000000);
          v8 = 8;
        }
      }
      else
      {
        __src = bswap32(size | 0x80000000);
        v8 = 4;
      }
    }
    else
    {
      __src = bswap32(size | 0x4000) >> 16;
      v8 = 2;
    }
  }
  else
  {
    __src = size;
    v8 = 1;
  }
  v11 = dispatch_data_get_size(a2);
  v12 = v11;
  v19 = 0;
  if (v11 > 0x3F)
  {
    if (!(v11 >> 14))
    {
      v19 = bswap32(v11 | 0x4000) >> 16;
      v13 = 2;
      goto LABEL_21;
    }
    if (!(v11 >> 30))
    {
      v19 = bswap32(v11 | 0x80000000);
      v13 = 4;
      goto LABEL_21;
    }
    if (!(v11 >> 62))
    {
      v19 = bswap64(v11 | 0xC000000000000000);
      v13 = 8;
      goto LABEL_21;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
    *(_DWORD *)applier = 136446466;
    *(_QWORD *)&applier[4] = "_http_vle_encode";
    *(_WORD *)&applier[12] = 2048;
    *(_QWORD *)&applier[14] = v12;
    v14 = (void *)_os_log_send_and_compose_impl();
    result = __nwlog_abort((uint64_t)v14);
    if (!result)
    {
      free(v14);
      v13 = 0;
      goto LABEL_21;
    }
LABEL_28:
    __break(1u);
    return result;
  }
  v19 = v11;
  v13 = 1;
LABEL_21:
  alloc = dispatch_data_create_alloc();
  memcpy(0, &__src, v8);
  v25 = 0;
  v26 = &v25;
  v27 = 0x2000000000;
  v28 = 0;
  v21 = 0;
  v22 = &v21;
  v23 = 0x2000000000;
  v16 = MEMORY[0x1E0C809B0];
  v24 = (char *)v8;
  if (a1)
  {
    *(_QWORD *)applier = MEMORY[0x1E0C809B0];
    *(_QWORD *)&applier[8] = 0x40000000;
    *(_QWORD *)&applier[16] = __nw_dispatch_data_copyout_block_invoke;
    v30 = &unk_1E14A3448;
    v32 = &v21;
    v33 = v7;
    v31 = &v25;
    dispatch_data_apply(a1, applier);
  }
  _Block_object_dispose(&v21, 8);
  _Block_object_dispose(&v25, 8);
  v17 = (char *)(v8 + v7);
  memcpy(v17, &v19, v13);
  v25 = 0;
  v26 = &v25;
  v27 = 0x2000000000;
  v28 = 0;
  v21 = 0;
  v22 = &v21;
  v23 = 0x2000000000;
  v24 = &v17[v13];
  if (a2)
  {
    *(_QWORD *)applier = v16;
    *(_QWORD *)&applier[8] = 0x40000000;
    *(_QWORD *)&applier[16] = __nw_dispatch_data_copyout_block_invoke;
    v30 = &unk_1E14A3448;
    v32 = &v21;
    v33 = v12;
    v31 = &v25;
    dispatch_data_apply(a2, applier);
  }
  _Block_object_dispose(&v21, 8);
  _Block_object_dispose(&v25, 8);
  v17[v13 + v12] = 0;
  metadata_for_capsule = nw_http_create_metadata_for_capsule(16770048, alloc);
  if (alloc)
    dispatch_release(alloc);
  return (BOOL)metadata_for_capsule;
}

void nw_protocol_masque_frame_finalizer(nw_frame *a1, BOOL a2, _QWORD *a3)
{
  void *buffer;
  uint64_t v6;
  _QWORD *v7;

  buffer = (void *)nw_frame_get_buffer((uint64_t)a1, 0);
  if (buffer)
    free(buffer);
  v6 = *((_QWORD *)a1 + 2);
  v7 = (_QWORD *)*((_QWORD *)a1 + 3);
  if (v6)
  {
    *(_QWORD *)(v6 + 24) = v7;
    v7 = (_QWORD *)*((_QWORD *)a1 + 3);
  }
  else
  {
    a3[33] = v7;
  }
  *v7 = v6;
  *((_QWORD *)a1 + 2) = 0;
  *((_QWORD *)a1 + 3) = 0;
  os_release(a1);
}

uint64_t nw_masque_options_get_version(void *a1)
{
  uint64_t v1;
  char *v3;
  NSObject *v4;
  os_log_type_t v5;
  const char *v6;
  char *backtrace_string;
  _BOOL4 v8;
  _QWORD v9[5];
  char v10;
  os_log_type_t type;
  _BYTE buf[24];
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    v13 = 1;
    *(_QWORD *)&buf[16] = 0x2000000000;
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 0x40000000;
    v9[2] = __nw_masque_options_get_version_block_invoke;
    v9[3] = &unk_1E149E3F8;
    v9[4] = buf;
    nw_protocol_options_access_handle(a1, v9);
    v1 = *(unsigned int *)(*(_QWORD *)&buf[8] + 24);
    _Block_object_dispose(buf, 8);
    return v1;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_masque_options_get_version";
  v3 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v10 = 0;
  if (__nwlog_fault(v3, &type, &v10))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_masque_options_get_version";
        v6 = "%{public}s called with null options";
LABEL_17:
        _os_log_impl(&dword_182FBE000, v4, v5, v6, buf, 0xCu);
      }
    }
    else if (v10)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v4 = __nwlog_obj();
      v5 = type;
      v8 = os_log_type_enabled(v4, type);
      if (backtrace_string)
      {
        if (v8)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_masque_options_get_version";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v4, v5, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_18;
      }
      if (v8)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_masque_options_get_version";
        v6 = "%{public}s called with null options, no backtrace";
        goto LABEL_17;
      }
    }
    else
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_masque_options_get_version";
        v6 = "%{public}s called with null options, backtrace limit exceeded";
        goto LABEL_17;
      }
    }
  }
LABEL_18:
  if (v3)
    free(v3);
  return 1;
}

uint64_t nw_masque_options_get_forced_protocol(nw_protocol_options *a1)
{
  uint64_t v1;
  char *v3;
  NSObject *v4;
  os_log_type_t v5;
  const char *v6;
  char *backtrace_string;
  _BOOL4 v8;
  _QWORD v9[5];
  char v10;
  os_log_type_t type;
  _BYTE buf[24];
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    v13 = 0;
    *(_QWORD *)&buf[16] = 0x2000000000;
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 0x40000000;
    v9[2] = ___ZL37nw_masque_options_get_forced_protocolP19nw_protocol_options_block_invoke;
    v9[3] = &unk_1E149E610;
    v9[4] = buf;
    nw_protocol_options_access_handle(a1, v9);
    v1 = *(unsigned int *)(*(_QWORD *)&buf[8] + 24);
    _Block_object_dispose(buf, 8);
    return v1;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_masque_options_get_forced_protocol";
  v3 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v10 = 0;
  if (__nwlog_fault(v3, &type, &v10))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_masque_options_get_forced_protocol";
        v6 = "%{public}s called with null options";
LABEL_17:
        _os_log_impl(&dword_182FBE000, v4, v5, v6, buf, 0xCu);
      }
    }
    else if (v10)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v4 = __nwlog_obj();
      v5 = type;
      v8 = os_log_type_enabled(v4, type);
      if (backtrace_string)
      {
        if (v8)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_masque_options_get_forced_protocol";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v4, v5, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_18;
      }
      if (v8)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_masque_options_get_forced_protocol";
        v6 = "%{public}s called with null options, no backtrace";
        goto LABEL_17;
      }
    }
    else
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_masque_options_get_forced_protocol";
        v6 = "%{public}s called with null options, backtrace limit exceeded";
        goto LABEL_17;
      }
    }
  }
LABEL_18:
  if (v3)
    free(v3);
  return 0;
}

uint64_t ___ZL38nw_masque_options_get_allow_connect_ipP19nw_protocol_options_block_invoke(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(a2 + 32);
}

uint64_t ___ZL37nw_masque_options_get_forced_protocolP19nw_protocol_options_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *(_DWORD *)(a2 + 28);
  return 1;
}

BOOL ___ZL37nw_masque_options_has_target_endpointP19nw_protocol_options_block_invoke(uint64_t a1, _QWORD *a2)
{
  return *a2 != 0;
}

uint64_t __nw_masque_options_get_version_block_invoke(uint64_t a1, uint64_t a2)
{
  int v2;

  v2 = *(_DWORD *)(a2 + 24);
  if (v2)
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v2;
  return 1;
}

double ___ZL29nw_protocol_masque_identifierv_block_invoke()
{
  double result;

  unk_1EDCE4B47 = 0;
  unk_1EDCE4B3F = 0;
  byte_1EDCE4B57 = 0;
  unk_1EDCE4B4F = 0;
  strcpy((char *)nw_protocol_masque_identifier(void)::g_masque_protocol_identifier, "masque");
  *(_QWORD *)&result = 0x100000005;
  qword_1EDCE4B58 = 0x100000005;
  return result;
}

uint64_t ___ZL34nw_protocol_masque_input_availableP11nw_protocolS0__block_invoke(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  BOOL v7;
  const char *v8;
  const char *v9;
  const char *v10;
  int v11;
  int v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  BOOL v16;
  const char *v17;
  const char *v18;
  id v19;
  void *v20;
  uint64_t v21;
  id v22;
  id v23;
  int status_code;
  id v25;
  char have_field_with_name;
  id v27;
  _BYTE *v28;
  int v29;
  NSObject *v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  const char *v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  NSObject *v39;
  os_log_type_t v40;
  uint32_t v41;
  id v42;
  int v43;
  int *v44;
  int v45;
  uint64_t v46;
  int v47;
  NSObject *v48;
  NSObject *v49;
  NSObject *v50;
  const char *v51;
  uint64_t v52;
  NSObject *v53;
  const char *v54;
  const char *v55;
  const char *v56;
  const char *v57;
  const char *v58;
  const char *v59;
  int v60;
  int v61;
  void *v62;
  _DWORD *v63;
  _DWORD *v64;
  uint64_t v65;
  NSObject *v66;
  uint64_t v67;
  _BOOL8 source;
  dispatch_time_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  os_log_type_t *v74;
  uint64_t v75;
  _BYTE *v76;
  void *v77;
  void *v78;
  uint64_t v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  _BOOL8 v84;
  uint64_t v85;
  unsigned int v86;
  void *v87;
  void *v88;
  void *v89;
  unsigned __int16 *globals_for_protocol;
  NSObject *v91;
  void *v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  NSObject *v99;
  const char *logging_description;
  uint64_t v101;
  uint64_t v102;
  void (*v103)(uint64_t, uint64_t);
  BOOL v104;
  int v105;
  int v106;
  int v107;
  char *v109;
  NSObject *v110;
  os_log_type_t v111;
  const char *v112;
  char *v113;
  _BOOL4 v114;
  char *backtrace_string;
  _BOOL4 v116;
  const char *v117;
  _BOOL4 v118;
  _BOOL4 v119;
  _BOOL4 v120;
  _BOOL4 v121;
  char *v122;
  NSObject *v123;
  os_log_type_t v124;
  const char *v125;
  char *v126;
  NSObject *v127;
  os_log_type_t v128;
  const char *v129;
  NSObject *v130;
  uint64_t v131;
  NSObject *v132;
  uint64_t v133;
  NSObject *v134;
  int v135;
  char *v136;
  NSObject *v137;
  _BOOL4 v138;
  const char *v139;
  char *v140;
  NSObject *v141;
  _BOOL4 v142;
  const char *v143;
  NSObject *v144;
  _BOOL4 v145;
  NSObject *v146;
  _BOOL4 v147;
  NSObject *v148;
  NSObject *v149;
  NSObject *log;
  NSObject *loga;
  _QWORD v152[5];
  __int16 v153;
  os_log_type_t v154[8];
  os_log_type_t *v155;
  uint64_t v156;
  int v157;
  _QWORD v158[5];
  os_log_type_t type[8];
  uint64_t v160;
  uint64_t v161;
  void *v162;
  os_log_type_t *v163;
  uint64_t *v164;
  uint64_t *v165;
  uint64_t *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t *v177;
  uint64_t v178;
  int v179;
  uint64_t v180;
  uint64_t *v181;
  uint64_t v182;
  char v183;
  os_log_type_t v184[8];
  os_log_type_t *v185;
  uint64_t v186;
  char v187;
  _QWORD v188[5];
  _QWORD v189[5];
  _QWORD v190[5];
  char v191;
  _BYTE v192[24];
  _BYTE v193[24];
  __int16 v194;
  const char *v195;
  __int16 v196;
  const char *v197;
  __int16 v198;
  const char *v199;
  __int16 v200;
  const char *v201;
  _BYTE buf[24];
  void *v203;
  os_log_type_t *v204;
  os_log_type_t *v205;
  os_log_type_t *v206;
  uint64_t *v207;
  uint64_t *v208;
  uint64_t *v209;
  uint64_t v210;
  _BYTE v211[24];
  void *v212;
  uint64_t *v213;
  uint64_t v214;
  uint64_t v215;

  v215 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    v4 = *(_QWORD *)(a1 + 40);
    if (!v4 || (*(_BYTE *)(v4 + 529) & 1) == 0)
    {
      if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
        dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
      v5 = gprivacy_proxyLogObj;
      if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
      {
        v6 = *(_QWORD *)(a1 + 40);
        v7 = v6 == 0;
        if (v6)
          v8 = (const char *)(v6 + 531);
        else
          v8 = "";
        v9 = " ";
        if (v7)
          v9 = "";
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = v8;
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = v9;
        v10 = "%{public}s%sReceived unexpected input frame when not waiting for a response";
LABEL_13:
        _os_log_impl(&dword_182FBE000, v5, OS_LOG_TYPE_ERROR, v10, buf, 0x16u);
        goto LABEL_242;
      }
    }
    goto LABEL_242;
  }
  v11 = nw_frame_unclaimed_length(a2);
  if (v11)
  {
    v12 = v11;
    v13 = *(_QWORD *)(a1 + 40);
    if (!v13 || (*(_BYTE *)(v13 + 529) & 1) == 0)
    {
      if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
        dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
      v14 = gprivacy_proxyLogObj;
      if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
      {
        v15 = *(_QWORD *)(a1 + 40);
        v16 = v15 == 0;
        if (v15)
          v17 = (const char *)(v15 + 531);
        else
          v17 = "";
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = v17;
        v18 = " ";
        if (v16)
          v18 = "";
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = v18;
        *(_WORD *)&buf[22] = 1024;
        LODWORD(v203) = v12;
        _os_log_impl(&dword_182FBE000, v14, OS_LOG_TYPE_ERROR, "%{public}s%sReceived unexpected input frame of length %u", buf, 0x1Cu);
      }
    }
  }
  if (nw_protocol_copy_http_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_11_72660);
  v19 = (id)nw_protocol_copy_http_definition_http_definition;
  v20 = nw_frame_copy_metadata_for_protocol((uint64_t)a2, (uint64_t)v19);
  if (v19)
    os_release(v19);
  if (v20)
  {
    if (*(_BYTE *)(a1 + 52))
    {
      v21 = *(_QWORD *)(a1 + 40);
      if (v21)
      {
        if (nw_protocol_metadata_is_http(v20))
        {
          v22 = nw_http_metadata_copy_response(v20);
          if (v22)
          {
            v23 = v22;
            status_code = _nw_http_response_get_status_code();

            if (!status_code)
              goto LABEL_240;
            if (status_code == 200)
            {
              v25 = v23;
              have_field_with_name = _nw_http_fields_have_field_with_name((uint64_t)v25, (unint64_t)"Server-Connection-Id");

              *(_QWORD *)v192 = 0;
              *(_QWORD *)&v192[8] = v192;
              *(_QWORD *)&v192[16] = 0x2000000000;
              v193[0] = 0;
              *(_QWORD *)type = 0;
              v160 = (uint64_t)type;
              v161 = 0x2000000000;
              LOBYTE(v162) = 0;
              *(_QWORD *)buf = MEMORY[0x1E0C809B0];
              *(_QWORD *)&buf[8] = 0x40000000;
              *(_QWORD *)&buf[16] = ___ZL40nw_masque_handle_server_connect_responseP9nw_masqueP20nw_protocol_metadata_block_invoke;
              v203 = &unk_1E149EAB0;
              v204 = (os_log_type_t *)v192;
              v205 = type;
              v206 = (os_log_type_t *)v21;
              v27 = v25;
              v28 = buf;
              _nw_http_fields_access_value_by_name((uint64_t)v27, (unint64_t)"Datagram-Flow-Id", v28);

              if ((have_field_with_name & 1) != 0)
              {
                if (*(_BYTE *)(*(_QWORD *)&v192[8] + 24))
                {
                  v29 = *(_DWORD *)(v21 + 527);
                  if (*(_BYTE *)(v160 + 24))
                  {
                    if ((v29 & 0x10000) == 0)
                    {
                      if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
                        dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
                      v30 = gprivacy_proxyLogObj;
                      if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_INFO))
                      {
                        *(_DWORD *)v211 = 136446466;
                        *(_QWORD *)&v211[4] = v21 + 531;
                        *(_WORD *)&v211[12] = 2080;
                        *(_QWORD *)&v211[14] = " ";
                        _os_log_impl(&dword_182FBE000, v30, OS_LOG_TYPE_INFO, "%{public}s%sReceived 200 OK, forwarding allowed", v211, 0x16u);
                      }
                    }
                    *(_DWORD *)(v21 + 512) = 4;
                    goto LABEL_143;
                  }
                  if ((v29 & 0x10000) != 0)
                    goto LABEL_142;
                  if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
                    dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
                  v50 = gprivacy_proxyLogObj;
                  if (!os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
                  {
LABEL_142:
                    nw_masque_mark_failed_with_error(v21, 94);
LABEL_143:
                    _Block_object_dispose(type, 8);
                    v74 = (os_log_type_t *)v192;
LABEL_239:
                    _Block_object_dispose(v74, 8);
                    goto LABEL_240;
                  }
                  *(_DWORD *)v211 = 136446466;
                  *(_QWORD *)&v211[4] = v21 + 531;
                  *(_WORD *)&v211[12] = 2080;
                  *(_QWORD *)&v211[14] = " ";
                  v51 = "%{public}s%sReceived response without invalid datagram flow ID";
                }
                else
                {
                  if ((*(_BYTE *)(v21 + 529) & 1) != 0)
                    goto LABEL_142;
                  if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
                    dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
                  v50 = gprivacy_proxyLogObj;
                  if (!os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
                    goto LABEL_142;
                  *(_DWORD *)v211 = 136446466;
                  *(_QWORD *)&v211[4] = v21 + 531;
                  *(_WORD *)&v211[12] = 2080;
                  *(_QWORD *)&v211[14] = " ";
                  v51 = "%{public}s%sReceived response without datagram flow ID";
                }
              }
              else
              {
                if ((*(_BYTE *)(v21 + 529) & 1) != 0)
                  goto LABEL_142;
                if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
                  dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
                v50 = gprivacy_proxyLogObj;
                if (!os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
                  goto LABEL_142;
                *(_DWORD *)v211 = 136446466;
                *(_QWORD *)&v211[4] = v21 + 531;
                *(_WORD *)&v211[12] = 2080;
                *(_QWORD *)&v211[14] = " ";
                v51 = "%{public}s%sReceived response without server Connection ID";
              }
              _os_log_impl(&dword_182FBE000, v50, OS_LOG_TYPE_ERROR, v51, v211, 0x16u);
              goto LABEL_142;
            }
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v37 = gLogObj;
            if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
            {
LABEL_240:
              os_release(v23);
              goto LABEL_241;
            }
            *(_DWORD *)v192 = 136446466;
            *(_QWORD *)&v192[4] = "nw_masque_handle_server_connect_response";
            *(_WORD *)&v192[12] = 1024;
            *(_DWORD *)&v192[14] = status_code;
            v38 = "%{public}s Received response code %u, forwarding not allowed";
            v39 = v37;
            v40 = OS_LOG_TYPE_ERROR;
            v41 = 18;
LABEL_61:
            _os_log_impl(&dword_182FBE000, v39, v40, v38, v192, v41);
            goto LABEL_240;
          }
          __nwlog_obj();
          *(_DWORD *)v192 = 136446210;
          *(_QWORD *)&v192[4] = "nw_masque_handle_server_connect_response";
          v109 = (char *)_os_log_send_and_compose_impl();
          type[0] = OS_LOG_TYPE_ERROR;
          v211[0] = 0;
          if (!__nwlog_fault(v109, type, v211))
            goto LABEL_367;
          if (type[0] == OS_LOG_TYPE_FAULT)
          {
            v110 = __nwlog_obj();
            v111 = type[0];
            if (!os_log_type_enabled(v110, type[0]))
              goto LABEL_367;
            *(_DWORD *)v192 = 136446210;
            *(_QWORD *)&v192[4] = "nw_masque_handle_server_connect_response";
            v112 = "%{public}s called with null response";
            goto LABEL_366;
          }
          if (!v211[0])
          {
            v110 = __nwlog_obj();
            v111 = type[0];
            if (!os_log_type_enabled(v110, type[0]))
              goto LABEL_367;
            *(_DWORD *)v192 = 136446210;
            *(_QWORD *)&v192[4] = "nw_masque_handle_server_connect_response";
            v112 = "%{public}s called with null response, backtrace limit exceeded";
            goto LABEL_366;
          }
          backtrace_string = (char *)__nw_create_backtrace_string();
          v110 = __nwlog_obj();
          v111 = type[0];
          v118 = os_log_type_enabled(v110, type[0]);
          if (!backtrace_string)
          {
            if (!v118)
              goto LABEL_367;
            *(_DWORD *)v192 = 136446210;
            *(_QWORD *)&v192[4] = "nw_masque_handle_server_connect_response";
            v112 = "%{public}s called with null response, no backtrace";
            goto LABEL_366;
          }
          if (v118)
          {
            *(_DWORD *)v192 = 136446466;
            *(_QWORD *)&v192[4] = "nw_masque_handle_server_connect_response";
            *(_WORD *)&v192[12] = 2082;
            *(_QWORD *)&v192[14] = backtrace_string;
            v117 = "%{public}s called with null response, dumping backtrace:%{public}s";
            goto LABEL_303;
          }
          goto LABEL_304;
        }
        __nwlog_obj();
        *(_DWORD *)v192 = 136446210;
        *(_QWORD *)&v192[4] = "nw_masque_handle_server_connect_response";
        v109 = (char *)_os_log_send_and_compose_impl();
        type[0] = OS_LOG_TYPE_ERROR;
        v211[0] = 0;
        if (!__nwlog_fault(v109, type, v211))
          goto LABEL_367;
        if (type[0] != OS_LOG_TYPE_FAULT)
        {
          if (!v211[0])
          {
            v110 = __nwlog_obj();
            v111 = type[0];
            if (!os_log_type_enabled(v110, type[0]))
              goto LABEL_367;
            *(_DWORD *)v192 = 136446210;
            *(_QWORD *)&v192[4] = "nw_masque_handle_server_connect_response";
            v112 = "%{public}s called with null nw_protocol_metadata_is_http(metadata), backtrace limit exceeded";
            goto LABEL_366;
          }
          backtrace_string = (char *)__nw_create_backtrace_string();
          v110 = __nwlog_obj();
          v111 = type[0];
          v116 = os_log_type_enabled(v110, type[0]);
          if (!backtrace_string)
          {
            if (!v116)
              goto LABEL_367;
            *(_DWORD *)v192 = 136446210;
            *(_QWORD *)&v192[4] = "nw_masque_handle_server_connect_response";
            v112 = "%{public}s called with null nw_protocol_metadata_is_http(metadata), no backtrace";
            goto LABEL_366;
          }
          if (v116)
          {
            *(_DWORD *)v192 = 136446466;
            *(_QWORD *)&v192[4] = "nw_masque_handle_server_connect_response";
            *(_WORD *)&v192[12] = 2082;
            *(_QWORD *)&v192[14] = backtrace_string;
            v117 = "%{public}s called with null nw_protocol_metadata_is_http(metadata), dumping backtrace:%{public}s";
LABEL_303:
            _os_log_impl(&dword_182FBE000, v110, v111, v117, v192, 0x16u);
          }
LABEL_304:
          free(backtrace_string);
          if (!v109)
            goto LABEL_241;
          goto LABEL_368;
        }
        v110 = __nwlog_obj();
        v111 = type[0];
        if (!os_log_type_enabled(v110, type[0]))
          goto LABEL_367;
        *(_DWORD *)v192 = 136446210;
        *(_QWORD *)&v192[4] = "nw_masque_handle_server_connect_response";
        v112 = "%{public}s called with null nw_protocol_metadata_is_http(metadata)";
      }
      else
      {
        __nwlog_obj();
        *(_DWORD *)v192 = 136446210;
        *(_QWORD *)&v192[4] = "nw_masque_handle_server_connect_response";
        v109 = (char *)_os_log_send_and_compose_impl();
        type[0] = OS_LOG_TYPE_ERROR;
        v211[0] = 0;
        if (!__nwlog_fault(v109, type, v211))
          goto LABEL_367;
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          v110 = __nwlog_obj();
          v111 = type[0];
          if (!os_log_type_enabled(v110, type[0]))
            goto LABEL_367;
          *(_DWORD *)v192 = 136446210;
          *(_QWORD *)&v192[4] = "nw_masque_handle_server_connect_response";
          v112 = "%{public}s called with null masque";
        }
        else if (v211[0])
        {
          v113 = (char *)__nw_create_backtrace_string();
          v110 = __nwlog_obj();
          v111 = type[0];
          v114 = os_log_type_enabled(v110, type[0]);
          if (v113)
          {
            if (v114)
            {
              *(_DWORD *)v192 = 136446466;
              *(_QWORD *)&v192[4] = "nw_masque_handle_server_connect_response";
              *(_WORD *)&v192[12] = 2082;
              *(_QWORD *)&v192[14] = v113;
              _os_log_impl(&dword_182FBE000, v110, v111, "%{public}s called with null masque, dumping backtrace:%{public}s", v192, 0x16u);
            }
            free(v113);
LABEL_367:
            if (!v109)
              goto LABEL_241;
LABEL_368:
            free(v109);
            goto LABEL_241;
          }
          if (!v114)
            goto LABEL_367;
          *(_DWORD *)v192 = 136446210;
          *(_QWORD *)&v192[4] = "nw_masque_handle_server_connect_response";
          v112 = "%{public}s called with null masque, no backtrace";
        }
        else
        {
          v110 = __nwlog_obj();
          v111 = type[0];
          if (!os_log_type_enabled(v110, type[0]))
            goto LABEL_367;
          *(_DWORD *)v192 = 136446210;
          *(_QWORD *)&v192[4] = "nw_masque_handle_server_connect_response";
          v112 = "%{public}s called with null masque, backtrace limit exceeded";
        }
      }
LABEL_366:
      _os_log_impl(&dword_182FBE000, v110, v111, v112, v192, 0xCu);
      goto LABEL_367;
    }
    v36 = *(_QWORD *)(a1 + 40);
    if (*(_DWORD *)(a1 + 48) == 3)
    {
      nw_masque_handle_capsule(*(_QWORD *)(a1 + 40), v20);
LABEL_241:
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
      os_release(v20);
      goto LABEL_242;
    }
    if (!v36)
    {
      __nwlog_obj();
      *(_DWORD *)v192 = 136446210;
      *(_QWORD *)&v192[4] = "nw_masque_handle_connect_response";
      v109 = (char *)_os_log_send_and_compose_impl();
      v184[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(v180) = 0;
      if (!__nwlog_fault(v109, v184, &v180))
        goto LABEL_367;
      if (v184[0] == OS_LOG_TYPE_FAULT)
      {
        v110 = __nwlog_obj();
        v111 = v184[0];
        if (!os_log_type_enabled(v110, v184[0]))
          goto LABEL_367;
        *(_DWORD *)v192 = 136446210;
        *(_QWORD *)&v192[4] = "nw_masque_handle_connect_response";
        v112 = "%{public}s called with null masque";
        goto LABEL_366;
      }
      if (!(_BYTE)v180)
      {
        v110 = __nwlog_obj();
        v111 = v184[0];
        if (!os_log_type_enabled(v110, v184[0]))
          goto LABEL_367;
        *(_DWORD *)v192 = 136446210;
        *(_QWORD *)&v192[4] = "nw_masque_handle_connect_response";
        v112 = "%{public}s called with null masque, backtrace limit exceeded";
        goto LABEL_366;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v110 = __nwlog_obj();
      v111 = v184[0];
      v119 = os_log_type_enabled(v110, v184[0]);
      if (!backtrace_string)
      {
        if (!v119)
          goto LABEL_367;
        *(_DWORD *)v192 = 136446210;
        *(_QWORD *)&v192[4] = "nw_masque_handle_connect_response";
        v112 = "%{public}s called with null masque, no backtrace";
        goto LABEL_366;
      }
      if (v119)
      {
        *(_DWORD *)v192 = 136446466;
        *(_QWORD *)&v192[4] = "nw_masque_handle_connect_response";
        *(_WORD *)&v192[12] = 2082;
        *(_QWORD *)&v192[14] = backtrace_string;
        v117 = "%{public}s called with null masque, dumping backtrace:%{public}s";
        goto LABEL_303;
      }
      goto LABEL_304;
    }
    if (!nw_protocol_metadata_is_http(v20))
    {
      __nwlog_obj();
      *(_DWORD *)v192 = 136446210;
      *(_QWORD *)&v192[4] = "nw_masque_handle_connect_response";
      v109 = (char *)_os_log_send_and_compose_impl();
      v184[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(v180) = 0;
      if (!__nwlog_fault(v109, v184, &v180))
        goto LABEL_367;
      if (v184[0] == OS_LOG_TYPE_FAULT)
      {
        v110 = __nwlog_obj();
        v111 = v184[0];
        if (!os_log_type_enabled(v110, v184[0]))
          goto LABEL_367;
        *(_DWORD *)v192 = 136446210;
        *(_QWORD *)&v192[4] = "nw_masque_handle_connect_response";
        v112 = "%{public}s called with null nw_protocol_metadata_is_http(metadata)";
        goto LABEL_366;
      }
      if (!(_BYTE)v180)
      {
        v110 = __nwlog_obj();
        v111 = v184[0];
        if (!os_log_type_enabled(v110, v184[0]))
          goto LABEL_367;
        *(_DWORD *)v192 = 136446210;
        *(_QWORD *)&v192[4] = "nw_masque_handle_connect_response";
        v112 = "%{public}s called with null nw_protocol_metadata_is_http(metadata), backtrace limit exceeded";
        goto LABEL_366;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v110 = __nwlog_obj();
      v111 = v184[0];
      v120 = os_log_type_enabled(v110, v184[0]);
      if (!backtrace_string)
      {
        if (!v120)
          goto LABEL_367;
        *(_DWORD *)v192 = 136446210;
        *(_QWORD *)&v192[4] = "nw_masque_handle_connect_response";
        v112 = "%{public}s called with null nw_protocol_metadata_is_http(metadata), no backtrace";
        goto LABEL_366;
      }
      if (v120)
      {
        *(_DWORD *)v192 = 136446466;
        *(_QWORD *)&v192[4] = "nw_masque_handle_connect_response";
        *(_WORD *)&v192[12] = 2082;
        *(_QWORD *)&v192[14] = backtrace_string;
        v117 = "%{public}s called with null nw_protocol_metadata_is_http(metadata), dumping backtrace:%{public}s";
        goto LABEL_303;
      }
      goto LABEL_304;
    }
    v42 = nw_http_metadata_copy_response(v20);
    if (!v42)
    {
      __nwlog_obj();
      *(_DWORD *)v192 = 136446210;
      *(_QWORD *)&v192[4] = "nw_masque_handle_connect_response";
      v109 = (char *)_os_log_send_and_compose_impl();
      v184[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(v180) = 0;
      if (!__nwlog_fault(v109, v184, &v180))
        goto LABEL_367;
      if (v184[0] == OS_LOG_TYPE_FAULT)
      {
        v110 = __nwlog_obj();
        v111 = v184[0];
        if (!os_log_type_enabled(v110, v184[0]))
          goto LABEL_367;
        *(_DWORD *)v192 = 136446210;
        *(_QWORD *)&v192[4] = "nw_masque_handle_connect_response";
        v112 = "%{public}s called with null response";
        goto LABEL_366;
      }
      if (!(_BYTE)v180)
      {
        v110 = __nwlog_obj();
        v111 = v184[0];
        if (!os_log_type_enabled(v110, v184[0]))
          goto LABEL_367;
        *(_DWORD *)v192 = 136446210;
        *(_QWORD *)&v192[4] = "nw_masque_handle_connect_response";
        v112 = "%{public}s called with null response, backtrace limit exceeded";
        goto LABEL_366;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v110 = __nwlog_obj();
      v111 = v184[0];
      v121 = os_log_type_enabled(v110, v184[0]);
      if (!backtrace_string)
      {
        if (!v121)
          goto LABEL_367;
        *(_DWORD *)v192 = 136446210;
        *(_QWORD *)&v192[4] = "nw_masque_handle_connect_response";
        v112 = "%{public}s called with null response, no backtrace";
        goto LABEL_366;
      }
      if (v121)
      {
        *(_DWORD *)v192 = 136446466;
        *(_QWORD *)&v192[4] = "nw_masque_handle_connect_response";
        *(_WORD *)&v192[12] = 2082;
        *(_QWORD *)&v192[14] = backtrace_string;
        v117 = "%{public}s called with null response, dumping backtrace:%{public}s";
        goto LABEL_303;
      }
      goto LABEL_304;
    }
    v23 = v42;
    v43 = _nw_http_response_get_status_code();

    if ((v43 - 200) <= 0x63)
    {
      v44 = (int *)(v36 + 527);
      v45 = *(_DWORD *)(v36 + 527);
      if ((v45 & 8) != 0)
      {
        v46 = MEMORY[0x1E0C809B0];
        v190[0] = MEMORY[0x1E0C809B0];
        v190[1] = 0x40000000;
        v190[2] = ___ZL33nw_masque_handle_connect_responseP9nw_masqueP20nw_protocol_metadata_block_invoke;
        v190[3] = &__block_descriptor_tmp_146;
        v190[4] = v36;
        nw_http_fields_access_value_by_name(v23, (unint64_t)"Datagram-Flow-Id", v190);
        if (nw_http_fields_have_field_with_name(v23, (unint64_t)"Client-Connection-Id"))
        {
          v47 = *v44;
          *v44 |= 0x100080u;
          if ((v47 & 0x10000) == 0)
          {
            if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
              dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
            v48 = gprivacy_proxyLogObj;
            if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)v192 = 136446466;
              *(_QWORD *)&v192[4] = v36 + 531;
              *(_WORD *)&v192[12] = 2080;
              *(_QWORD *)&v192[14] = " ";
              _os_log_impl(&dword_182FBE000, v48, OS_LOG_TYPE_INFO, "%{public}s%sReceived acked client CID, server supports forwarding", v192, 0x16u);
            }
          }
        }
        v189[0] = v46;
        v189[1] = 0x40000000;
        v189[2] = ___ZL33nw_masque_handle_connect_responseP9nw_masqueP20nw_protocol_metadata_block_invoke_147;
        v189[3] = &__block_descriptor_tmp_148;
        v189[4] = v36;
        nw_http_fields_access_value_by_name(v23, (unint64_t)"Proxy-QUIC-Forwarding", v189);
        if (*(_DWORD *)(v36 + 504) == 1)
        {
          v45 = *v44;
          if (!*(_BYTE *)(v36 + 615))
          {
            if ((v45 & 0x10000) == 0)
            {
              if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
                dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
              v49 = gprivacy_proxyLogObj;
              if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)v192 = 136446466;
                *(_QWORD *)&v192[4] = v36 + 531;
                *(_WORD *)&v192[12] = 2080;
                *(_QWORD *)&v192[14] = " ";
                _os_log_impl(&dword_182FBE000, v49, OS_LOG_TYPE_ERROR, "%{public}s%sReceived response without datagram flow ID", v192, 0x16u);
              }
            }
            nw_masque_mark_failed_with_error(v36, 94);
            goto LABEL_240;
          }
        }
        else
        {
          v45 = *v44;
        }
      }
      if ((v45 & 0x40000) != 0)
      {
        v188[0] = MEMORY[0x1E0C809B0];
        v188[1] = 0x40000000;
        v188[2] = ___ZL33nw_masque_handle_connect_responseP9nw_masqueP20nw_protocol_metadata_block_invoke_149;
        v188[3] = &__block_descriptor_tmp_150_27648;
        v188[4] = v36;
        nw_http_fields_access_value_by_name(v23, (unint64_t)"Capsule-Protocol", v188);
      }
      *(_QWORD *)v184 = 0;
      v185 = v184;
      v186 = 0x2000000000;
      v187 = 0;
      v180 = 0;
      v181 = &v180;
      v182 = 0x2000000000;
      v183 = 0;
      v176 = 0;
      v177 = &v176;
      v179 = 0;
      v178 = 0x2000000000;
      v172 = 0;
      v173 = &v172;
      v174 = 0x2000000000;
      v175 = 0;
      v168 = 0;
      v169 = &v168;
      v170 = 0x2000000000;
      v171 = 0;
      v75 = MEMORY[0x1E0C809B0];
      *(_QWORD *)type = MEMORY[0x1E0C809B0];
      v160 = 0x40000000;
      v161 = (uint64_t)___ZL33nw_masque_handle_connect_responseP9nw_masqueP20nw_protocol_metadata_block_invoke_2;
      v162 = &unk_1E149EB38;
      v163 = v184;
      v164 = &v180;
      v166 = &v168;
      v167 = v36;
      v165 = &v172;
      nw_http_fields_access_value_by_name(v23, (unint64_t)"Proxy-Status", type);
      v158[0] = v75;
      v158[1] = 0x40000000;
      v158[2] = ___ZL33nw_masque_handle_connect_responseP9nw_masqueP20nw_protocol_metadata_block_invoke_3;
      v158[3] = &__block_descriptor_tmp_154;
      v158[4] = v36;
      nw_http_fields_access_value_by_name(v23, (unint64_t)"Client-Geohash", v158);
      *(_QWORD *)v211 = v75;
      *(_QWORD *)&v211[8] = 0x40000000;
      *(_QWORD *)&v211[16] = ___ZL33nw_masque_handle_connect_responseP9nw_masqueP20nw_protocol_metadata_block_invoke_4;
      v212 = &unk_1E149EB80;
      v213 = &v176;
      v214 = v36;
      nw_http_fields_access_value_by_name(v23, (unint64_t)&unk_183C6EABC, v211);
      v76 = (_BYTE *)(v36 + 527);
      if (v173[3] && (*(_BYTE *)(v36 + 529) & 1) == 0 && gLogDatapath)
      {
        if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
          dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
        v130 = gprivacy_proxyLogObj;
        v76 = (_BYTE *)(v36 + 527);
        if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
        {
          v131 = v173[3];
          *(_DWORD *)v192 = 136446978;
          *(_QWORD *)&v192[4] = "nw_masque_handle_connect_response";
          *(_WORD *)&v192[12] = 2082;
          *(_QWORD *)&v192[14] = v36 + 531;
          *(_WORD *)&v192[22] = 2080;
          *(_QWORD *)v193 = " ";
          *(_WORD *)&v193[8] = 2112;
          *(_QWORD *)&v193[10] = v131;
          _os_log_impl(&dword_182FBE000, v130, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sReceived next hop: %@", v192, 0x2Au);
        }
      }
      if (v169[3] && (v76[2] & 1) == 0 && gLogDatapath)
      {
        if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
          dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
        v132 = gprivacy_proxyLogObj;
        v76 = (_BYTE *)(v36 + 527);
        if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
        {
          v133 = v169[3];
          *(_DWORD *)v192 = 136446978;
          *(_QWORD *)&v192[4] = "nw_masque_handle_connect_response";
          *(_WORD *)&v192[12] = 2082;
          *(_QWORD *)&v192[14] = v36 + 531;
          *(_WORD *)&v192[22] = 2080;
          *(_QWORD *)v193 = " ";
          *(_WORD *)&v193[8] = 2112;
          *(_QWORD *)&v193[10] = v133;
          _os_log_impl(&dword_182FBE000, v132, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sReceived next hop aliases: %@", v192, 0x2Au);
        }
      }
      v77 = *(void **)(v36 + 312);
      if (v77)
      {
        v78 = (void *)v169[3];
        v79 = v173[3];
        if (v78)
        {
          if (v79)
          {
            nw_array_append(v169[3], (void *)v173[3]);
            v77 = *(void **)(v36 + 312);
            v78 = (void *)v169[3];
          }
          nw_endpoint_set_cname_array(v77, v78);
        }
        else if (v79)
        {
          v84 = nw_array_create();
          nw_array_append(v84, (void *)v173[3]);
          nw_endpoint_set_cname_array(*(void **)(v36 + 312), (void *)v84);
          if (v84)
            os_release((void *)v84);
        }
      }
      v80 = (void *)v173[3];
      if (v80)
      {
        os_release(v80);
        v173[3] = 0;
      }
      v81 = (void *)v169[3];
      if (v81)
      {
        os_release(v81);
        v169[3] = 0;
      }
      if (!*((_BYTE *)v185 + 24))
      {
LABEL_174:
        if (*((_BYTE *)v181 + 24))
          nw_masque_report_error_to_proxy_agent(v36, 1303);
        v86 = *((_DWORD *)v177 + 6);
        if (!v86)
        {
LABEL_201:
          if ((*v76 & 2) == 0)
          {
LABEL_209:
            v94 = *(_QWORD *)(v36 + 288);
            v95 = mach_continuous_time();
            if (v95 <= 1)
              v96 = 1;
            else
              v96 = v95;
            v97 = nw_delta_nanos(v94, v96);
            v98 = (v97 / 0xF4240);
            if (v97 > 0xF423FFFFFFFFFLL)
              v98 = 0xFFFFFFFFLL;
            *(_QWORD *)(v36 + 296) = v98;
            if ((v76[2] & 1) == 0)
            {
              if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
                dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
              v99 = gprivacy_proxyLogObj;
              if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_INFO))
              {
                logging_description = nw_endpoint_get_logging_description(*(void **)(v36 + 312));
                *(_DWORD *)v192 = 136446722;
                *(_QWORD *)&v192[4] = v36 + 531;
                *(_WORD *)&v192[12] = 2080;
                *(_QWORD *)&v192[14] = " ";
                *(_WORD *)&v192[22] = 2082;
                *(_QWORD *)v193 = logging_description;
                _os_log_impl(&dword_182FBE000, v99, OS_LOG_TYPE_INFO, "%{public}s%sReceived 200 OK, connected to %{public}s", v192, 0x20u);
              }
            }
            if (*(_DWORD *)(v36 + 516) && (v76[2] & 1) == 0 && gLogDatapath)
            {
              if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
                dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
              v134 = gprivacy_proxyLogObj;
              if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
              {
                v135 = *(_DWORD *)(v36 + 516);
                *(_DWORD *)v192 = 136446978;
                *(_QWORD *)&v192[4] = "nw_masque_clear_reverse_proxy_state";
                *(_WORD *)&v192[12] = 2082;
                *(_QWORD *)&v192[14] = v36 + 531;
                *(_WORD *)&v192[22] = 2080;
                *(_QWORD *)v193 = " ";
                *(_WORD *)&v193[8] = 1024;
                *(_DWORD *)&v193[10] = v135;
                _os_log_impl(&dword_182FBE000, v134, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sClearing reverse proxy state from %u", v192, 0x26u);
              }
            }
            *(_DWORD *)(v36 + 516) = 0;
            v101 = *(_QWORD *)(v36 + 32);
            if (v101)
            {
              v102 = *(_QWORD *)(v101 + 24);
              if (v102)
              {
                v103 = *(void (**)(uint64_t, uint64_t))(v102 + 152);
                if (v103)
                  v103(v101, v36);
              }
            }
            nw_masque_mark_connected(v36);
            goto LABEL_238;
          }
LABEL_202:
          if (!uuid_is_null((const unsigned __int8 *)(v36 + 272)))
          {
            v92 = *(void **)(v36 + 456);
            if (v92)
              nw_http_connection_metadata_set_cached_token(v92, 0, 0);
            if (*((_BYTE *)v185 + 24))
              v93 = 1001;
            else
              v93 = 0;
            nw_path_report_error_to_agent(*(void **)(v36 + 336), (const unsigned __int8 *)(v36 + 272), v93);
          }
          goto LABEL_209;
        }
        v87 = *(void **)(v36 + 328);
        if (v87)
        {
          if (v86 - 0x10000 < 0xFFFF0001 || !*(_WORD *)(v36 + 524))
            goto LABEL_201;
          if (nw_protocol_masque_get_definition(void)::onceToken != -1)
            dispatch_once(&nw_protocol_masque_get_definition(void)::onceToken, &__block_literal_global_27122);
          if (nw_protocol_masque_get_definition(void)::definition)
            v88 = os_retain((void *)nw_protocol_masque_get_definition(void)::definition);
          else
            v88 = 0;
          globals_for_protocol = (unsigned __int16 *)nw_context_get_globals_for_protocol(v87, v88);
          if (globals_for_protocol)
          {
            if (*globals_for_protocol && v86 > *globals_for_protocol && v86 > globals_for_protocol[1])
            {
              globals_for_protocol[1] = v86;
              if ((v76[2] & 1) == 0)
              {
                if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
                  dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
                v91 = gprivacy_proxyLogObj;
                if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_INFO))
                {
                  *(_DWORD *)v192 = 136446722;
                  *(_QWORD *)&v192[4] = v36 + 531;
                  *(_WORD *)&v192[12] = 2080;
                  *(_QWORD *)&v192[14] = " ";
                  *(_WORD *)&v192[22] = 1024;
                  *(_DWORD *)v193 = v86;
                  _os_log_impl(&dword_182FBE000, v91, OS_LOG_TYPE_INFO, "%{public}s%sReporting new epoch value: %u", v192, 0x1Cu);
                }
              }
              nw_masque_report_error_to_proxy_agent(v36, v86 | 0xFF0000);
            }
            goto LABEL_201;
          }
          __nwlog_obj();
          *(_DWORD *)v192 = 136446210;
          *(_QWORD *)&v192[4] = "nw_masque_handle_received_epoch_value";
          v126 = (char *)_os_log_send_and_compose_impl();
          v154[0] = OS_LOG_TYPE_ERROR;
          v191 = 0;
          if (!__nwlog_fault(v126, v154, &v191))
            goto LABEL_397;
          if (v154[0] == OS_LOG_TYPE_FAULT)
          {
            v127 = __nwlog_obj();
            v128 = v154[0];
            if (!os_log_type_enabled(v127, v154[0]))
              goto LABEL_397;
            *(_DWORD *)v192 = 136446210;
            *(_QWORD *)&v192[4] = "nw_masque_handle_received_epoch_value";
            v129 = "%{public}s called with null globals";
            goto LABEL_395;
          }
          if (!v191)
          {
            v127 = __nwlog_obj();
            v128 = v154[0];
            if (!os_log_type_enabled(v127, v154[0]))
              goto LABEL_397;
            *(_DWORD *)v192 = 136446210;
            *(_QWORD *)&v192[4] = "nw_masque_handle_received_epoch_value";
            v129 = "%{public}s called with null globals, backtrace limit exceeded";
            goto LABEL_395;
          }
          v140 = (char *)__nw_create_backtrace_string();
          v146 = __nwlog_obj();
          v128 = v154[0];
          loga = v146;
          v147 = os_log_type_enabled(v146, v154[0]);
          if (v140)
          {
            if (v147)
            {
              *(_DWORD *)v192 = 136446466;
              *(_QWORD *)&v192[4] = "nw_masque_handle_received_epoch_value";
              *(_WORD *)&v192[12] = 2082;
              *(_QWORD *)&v192[14] = v140;
              v143 = "%{public}s called with null globals, dumping backtrace:%{public}s";
              goto LABEL_373;
            }
            goto LABEL_374;
          }
          if (!v147)
          {
LABEL_397:
            if (v126)
              free(v126);
            v76 = (_BYTE *)(v36 + 527);
            if ((*(_BYTE *)(v36 + 527) & 2) == 0)
              goto LABEL_209;
            goto LABEL_202;
          }
          *(_DWORD *)v192 = 136446210;
          *(_QWORD *)&v192[4] = "nw_masque_handle_received_epoch_value";
          v129 = "%{public}s called with null globals, no backtrace";
        }
        else
        {
          __nwlog_obj();
          *(_DWORD *)v192 = 136446210;
          *(_QWORD *)&v192[4] = "nw_masque_handle_received_epoch_value";
          v126 = (char *)_os_log_send_and_compose_impl();
          v154[0] = OS_LOG_TYPE_ERROR;
          v191 = 0;
          if (!__nwlog_fault(v126, v154, &v191))
            goto LABEL_397;
          if (v154[0] == OS_LOG_TYPE_FAULT)
          {
            v127 = __nwlog_obj();
            v128 = v154[0];
            if (!os_log_type_enabled(v127, v154[0]))
              goto LABEL_397;
            *(_DWORD *)v192 = 136446210;
            *(_QWORD *)&v192[4] = "nw_masque_handle_received_epoch_value";
            v129 = "%{public}s called with null masque->context";
LABEL_395:
            v149 = v127;
LABEL_396:
            _os_log_impl(&dword_182FBE000, v149, v128, v129, v192, 0xCu);
            goto LABEL_397;
          }
          if (!v191)
          {
            v127 = __nwlog_obj();
            v128 = v154[0];
            if (!os_log_type_enabled(v127, v154[0]))
              goto LABEL_397;
            *(_DWORD *)v192 = 136446210;
            *(_QWORD *)&v192[4] = "nw_masque_handle_received_epoch_value";
            v129 = "%{public}s called with null masque->context, backtrace limit exceeded";
            goto LABEL_395;
          }
          v140 = (char *)__nw_create_backtrace_string();
          v141 = __nwlog_obj();
          v128 = v154[0];
          loga = v141;
          v142 = os_log_type_enabled(v141, v154[0]);
          if (v140)
          {
            if (v142)
            {
              *(_DWORD *)v192 = 136446466;
              *(_QWORD *)&v192[4] = "nw_masque_handle_received_epoch_value";
              *(_WORD *)&v192[12] = 2082;
              *(_QWORD *)&v192[14] = v140;
              v143 = "%{public}s called with null masque->context, dumping backtrace:%{public}s";
LABEL_373:
              _os_log_impl(&dword_182FBE000, loga, v128, v143, v192, 0x16u);
            }
LABEL_374:
            free(v140);
            goto LABEL_397;
          }
          if (!v142)
            goto LABEL_397;
          *(_DWORD *)v192 = 136446210;
          *(_QWORD *)&v192[4] = "nw_masque_handle_received_epoch_value";
          v129 = "%{public}s called with null masque->context, no backtrace";
        }
        v149 = loga;
        goto LABEL_396;
      }
      v82 = *(void **)(v36 + 328);
      if (v82)
      {
        if (nw_protocol_masque_get_definition(void)::onceToken != -1)
          dispatch_once(&nw_protocol_masque_get_definition(void)::onceToken, &__block_literal_global_27122);
        if (nw_protocol_masque_get_definition(void)::definition)
          v83 = os_retain((void *)nw_protocol_masque_get_definition(void)::definition);
        else
          v83 = 0;
        v85 = nw_context_get_globals_for_protocol(v82, v83);
        if (v85)
        {
          *(_DWORD *)(v85 + 7) = 0;
          *(_DWORD *)(v85 + 4) = 0;
          goto LABEL_174;
        }
        __nwlog_obj();
        *(_DWORD *)v192 = 136446210;
        *(_QWORD *)&v192[4] = "nw_masque_clear_cached_geohash_value";
        v122 = (char *)_os_log_send_and_compose_impl();
        v154[0] = OS_LOG_TYPE_ERROR;
        v191 = 0;
        if (!__nwlog_fault(v122, v154, &v191))
          goto LABEL_383;
        if (v154[0] == OS_LOG_TYPE_FAULT)
        {
          v123 = __nwlog_obj();
          v124 = v154[0];
          if (os_log_type_enabled(v123, v154[0]))
          {
            *(_DWORD *)v192 = 136446210;
            *(_QWORD *)&v192[4] = "nw_masque_clear_cached_geohash_value";
            v125 = "%{public}s called with null globals";
            goto LABEL_381;
          }
          goto LABEL_383;
        }
        if (!v191)
        {
          v123 = __nwlog_obj();
          v124 = v154[0];
          if (os_log_type_enabled(v123, v154[0]))
          {
            *(_DWORD *)v192 = 136446210;
            *(_QWORD *)&v192[4] = "nw_masque_clear_cached_geohash_value";
            v125 = "%{public}s called with null globals, backtrace limit exceeded";
            goto LABEL_381;
          }
          goto LABEL_383;
        }
        v136 = (char *)__nw_create_backtrace_string();
        v144 = __nwlog_obj();
        v124 = v154[0];
        log = v144;
        v145 = os_log_type_enabled(v144, v154[0]);
        if (v136)
        {
          if (v145)
          {
            *(_DWORD *)v192 = 136446466;
            *(_QWORD *)&v192[4] = "nw_masque_clear_cached_geohash_value";
            *(_WORD *)&v192[12] = 2082;
            *(_QWORD *)&v192[14] = v136;
            v139 = "%{public}s called with null globals, dumping backtrace:%{public}s";
            goto LABEL_358;
          }
          goto LABEL_359;
        }
        if (!v145)
          goto LABEL_383;
        *(_DWORD *)v192 = 136446210;
        *(_QWORD *)&v192[4] = "nw_masque_clear_cached_geohash_value";
        v125 = "%{public}s called with null globals, no backtrace";
      }
      else
      {
        __nwlog_obj();
        *(_DWORD *)v192 = 136446210;
        *(_QWORD *)&v192[4] = "nw_masque_clear_cached_geohash_value";
        v122 = (char *)_os_log_send_and_compose_impl();
        v154[0] = OS_LOG_TYPE_ERROR;
        v191 = 0;
        if (!__nwlog_fault(v122, v154, &v191))
          goto LABEL_383;
        if (v154[0] == OS_LOG_TYPE_FAULT)
        {
          v123 = __nwlog_obj();
          v124 = v154[0];
          if (os_log_type_enabled(v123, v154[0]))
          {
            *(_DWORD *)v192 = 136446210;
            *(_QWORD *)&v192[4] = "nw_masque_clear_cached_geohash_value";
            v125 = "%{public}s called with null masque->context";
LABEL_381:
            v148 = v123;
LABEL_382:
            _os_log_impl(&dword_182FBE000, v148, v124, v125, v192, 0xCu);
          }
LABEL_383:
          if (v122)
            free(v122);
          v76 = (_BYTE *)(v36 + 527);
          goto LABEL_174;
        }
        if (!v191)
        {
          v123 = __nwlog_obj();
          v124 = v154[0];
          if (os_log_type_enabled(v123, v154[0]))
          {
            *(_DWORD *)v192 = 136446210;
            *(_QWORD *)&v192[4] = "nw_masque_clear_cached_geohash_value";
            v125 = "%{public}s called with null masque->context, backtrace limit exceeded";
            goto LABEL_381;
          }
          goto LABEL_383;
        }
        v136 = (char *)__nw_create_backtrace_string();
        v137 = __nwlog_obj();
        v124 = v154[0];
        log = v137;
        v138 = os_log_type_enabled(v137, v154[0]);
        if (v136)
        {
          if (v138)
          {
            *(_DWORD *)v192 = 136446466;
            *(_QWORD *)&v192[4] = "nw_masque_clear_cached_geohash_value";
            *(_WORD *)&v192[12] = 2082;
            *(_QWORD *)&v192[14] = v136;
            v139 = "%{public}s called with null masque->context, dumping backtrace:%{public}s";
LABEL_358:
            _os_log_impl(&dword_182FBE000, log, v124, v139, v192, 0x16u);
          }
LABEL_359:
          free(v136);
          goto LABEL_383;
        }
        if (!v138)
          goto LABEL_383;
        *(_DWORD *)v192 = 136446210;
        *(_QWORD *)&v192[4] = "nw_masque_clear_cached_geohash_value";
        v125 = "%{public}s called with null masque->context, no backtrace";
      }
      v148 = log;
      goto LABEL_382;
    }
    if (!v43)
    {
      if ((*(_BYTE *)(v36 + 529) & 1) != 0)
        goto LABEL_240;
      if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
        dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
      v71 = gprivacy_proxyLogObj;
      if (!os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
        goto LABEL_240;
      *(_DWORD *)v192 = 136446722;
      *(_QWORD *)&v192[4] = "nw_masque_handle_connect_response";
      *(_WORD *)&v192[12] = 2082;
      *(_QWORD *)&v192[14] = v36 + 531;
      *(_WORD *)&v192[22] = 2080;
      *(_QWORD *)v193 = " ";
      v38 = "%{public}s %{public}s%sReceived no response code, ignoring";
      v39 = v71;
      v40 = OS_LOG_TYPE_DEBUG;
      v41 = 32;
      goto LABEL_61;
    }
    *(_QWORD *)v184 = 0;
    v185 = v184;
    v186 = 0x2000000000;
    v187 = 0;
    v180 = 0;
    v181 = &v180;
    v182 = 0x2000000000;
    v183 = 0;
    v176 = 0;
    v177 = &v176;
    v178 = 0x2000000000;
    LOBYTE(v179) = 0;
    v172 = 0;
    v173 = &v172;
    v174 = 0x2000000000;
    LOBYTE(v175) = 0;
    v168 = 0;
    v169 = &v168;
    v170 = 0x2000000000;
    LOBYTE(v171) = 0;
    *(_QWORD *)v154 = 0;
    v155 = v154;
    v157 = 0;
    v52 = MEMORY[0x1E0C809B0];
    v156 = 0x2000000000;
    *(_QWORD *)buf = MEMORY[0x1E0C809B0];
    *(_QWORD *)&buf[8] = 0x40000000;
    *(_QWORD *)&buf[16] = ___ZL33nw_masque_handle_connect_responseP9nw_masqueP20nw_protocol_metadata_block_invoke_156;
    v203 = &unk_1E149EBA8;
    v204 = v184;
    v205 = (os_log_type_t *)&v172;
    v210 = v36;
    v206 = v154;
    v207 = &v180;
    v208 = &v168;
    v209 = &v176;
    nw_http_fields_access_value_by_name(v23, (unint64_t)"Proxy-Status", buf);
    if (*((_BYTE *)v185 + 24))
      nw_masque_report_error_to_proxy_agent(v36, 1303);
    if ((*(_BYTE *)(v36 + 529) & 1) == 0)
    {
      if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
        dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
      v53 = gprivacy_proxyLogObj;
      if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
      {
        v54 = nw_endpoint_get_logging_description(*(void **)(v36 + 312));
        v55 = "";
        if (*((_BYTE *)v169 + 24))
          v56 = ", attempt to reverse proxy with certificates";
        else
          v56 = "";
        if (*((_BYTE *)v181 + 24))
          v57 = ", unreachable through proxy";
        else
          v57 = "";
        if (*((_BYTE *)v177 + 24))
          v58 = ", origin server failed";
        else
          v58 = "";
        if (*((_BYTE *)v173 + 24))
          v59 = ", has received status";
        else
          v59 = "";
        v60 = *((_DWORD *)v155 + 6);
        *(_DWORD *)v192 = 136448258;
        if (v60)
          v55 = ", has dns failure reason";
        *(_QWORD *)&v192[4] = v36 + 531;
        v52 = MEMORY[0x1E0C809B0];
        *(_WORD *)&v192[12] = 2080;
        *(_QWORD *)&v192[14] = " ";
        *(_WORD *)&v192[22] = 1024;
        *(_DWORD *)v193 = v43;
        *(_WORD *)&v193[4] = 2082;
        *(_QWORD *)&v193[6] = v54;
        *(_WORD *)&v193[14] = 2082;
        *(_QWORD *)&v193[16] = v56;
        v194 = 2082;
        v195 = v57;
        v196 = 2082;
        v197 = v58;
        v198 = 2082;
        v199 = v59;
        v200 = 2082;
        v201 = v55;
        _os_log_impl(&dword_182FBE000, v53, OS_LOG_TYPE_ERROR, "%{public}s%sReceived response code %u for %{public}s%{public}s%{public}s%{public}s%{public}s%{public}s", v192, 0x58u);
      }
    }
    v61 = *((_DWORD *)v155 + 6);
    if (v61)
    {
      v62 = *(void **)(v36 + 312);
      if (v62)
      {
        v63 = v62;
        v63[56] = v61;

      }
    }
    v64 = (_DWORD *)(v36 + 527);
    if ((v43 - 400) <= 0x63 && *((_BYTE *)v169 + 24))
    {
      if (!nw_http_connection_metadata_get_secondary_certificate_count(*(void **)(v36 + 456))
        || (nw_masque_setup_reverse_proxy(v36) & 1) == 0)
      {
        if ((*(_BYTE *)(v36 + 529) & 1) == 0)
        {
          if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
            dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
          v66 = gprivacy_proxyLogObj;
          if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)v192 = 136446466;
            *(_QWORD *)&v192[4] = v36 + 531;
            *(_WORD *)&v192[12] = 2080;
            *(_QWORD *)&v192[14] = " ";
            _os_log_impl(&dword_182FBE000, v66, OS_LOG_TYPE_INFO, "%{public}s%sCONNECT response indicates that secondary certificates will be sent, waiting", v192, 0x16u);
          }
        }
        *(_DWORD *)(v36 + 516) = 1;
        v67 = *(_QWORD *)(v36 + 352);
        if (v67)
          nw_queue_cancel_source(v67, v65);
        v152[0] = v52;
        v152[1] = 0x40000000;
        v152[2] = ___ZL33nw_masque_handle_connect_responseP9nw_masqueP20nw_protocol_metadata_block_invoke_172;
        v152[3] = &__block_descriptor_tmp_173;
        v152[4] = v36;
        v153 = v43;
        source = nw_queue_context_create_source(0, 2, 3, 0, v152, 0);
        *(_QWORD *)(v36 + 352) = source;
        v69 = dispatch_time(0x8000000000000000, 10000000000);
        nw_queue_set_timer_values(source, v69, 0xFFFFFFFFFFFFFFFFLL, 0x989680uLL);
        nw_queue_activate_source(*(_QWORD *)(v36 + 352), v70);
      }
      goto LABEL_237;
    }
    if ((v43 - 500) > 0x63)
    {
      if (v43 == 401)
      {
        if (!*((_BYTE *)v173 + 24) && !uuid_is_null((const unsigned __int8 *)(v36 + 272)))
        {
          v89 = *(void **)(v36 + 456);
          if (v89)
            nw_http_connection_metadata_mark_cached_token_failed(v89);
          nw_path_report_error_to_agent(*(void **)(v36 + 336), (const unsigned __int8 *)(v36 + 272), 80);
          goto LABEL_235;
        }
        goto LABEL_230;
      }
    }
    else
    {
      if (*((_BYTE *)v181 + 24))
      {
        v72 = v36;
        v73 = 65;
LABEL_236:
        nw_masque_mark_failed_with_error(v72, v73);
LABEL_237:
        _Block_object_dispose(v154, 8);
LABEL_238:
        _Block_object_dispose(&v168, 8);
        _Block_object_dispose(&v172, 8);
        _Block_object_dispose(&v176, 8);
        _Block_object_dispose(&v180, 8);
        v74 = v184;
        goto LABEL_239;
      }
      if (*((_BYTE *)v177 + 24))
      {
        v72 = v36;
        v73 = 64;
        goto LABEL_236;
      }
    }
    if ((v43 - 400) > 0x63)
    {
      if (v43 == 502)
      {
        v104 = (*v64 & 4) == 0;
        v105 = 1207;
        v106 = 1107;
      }
      else
      {
        v104 = (*v64 & 4) == 0;
        if ((v43 - 500) > 0x63)
        {
          v105 = 1201;
          v106 = 1101;
        }
        else
        {
          v105 = 1205;
          v106 = 1105;
        }
      }
LABEL_231:
      if (v104)
        v107 = v106;
      else
        v107 = v105;
      nw_masque_report_error_to_proxy_agent(v36, v107);
LABEL_235:
      v72 = v36;
      v73 = 61;
      goto LABEL_236;
    }
LABEL_230:
    v104 = (*v64 & 4) == 0;
    v105 = 1204;
    v106 = 1104;
    goto LABEL_231;
  }
  v31 = *(_QWORD *)(a1 + 40);
  if (!v31 || (*(_BYTE *)(v31 + 529) & 1) == 0)
  {
    if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
      dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
    v5 = gprivacy_proxyLogObj;
    if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
    {
      v32 = *(_QWORD *)(a1 + 40);
      v33 = v32 == 0;
      if (v32)
        v34 = (const char *)(v32 + 531);
      else
        v34 = "";
      v35 = " ";
      if (v33)
        v35 = "";
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = v34;
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = v35;
      v10 = "%{public}s%sReceived unexpected input frame without HTTP metadata";
      goto LABEL_13;
    }
  }
LABEL_242:
  nw_frame_finalize((uint64_t)a2);
  return 1;
}

uint64_t nw_protocol_masque_listener_read_input(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v7;
  int v8;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char *v16;
  uint64_t v17;
  char *v18;
  NSObject *v19;
  os_log_type_t v20;
  const char *v21;
  char *backtrace_string;
  _BOOL4 v23;
  _QWORD v25[5];
  _QWORD v26[2];
  uint64_t (*v27)(uint64_t, uint64_t);
  void *v28;
  os_log_type_t *v29;
  _BYTE *v30;
  id v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  os_log_type_t type[8];
  os_log_type_t *v37;
  uint64_t v38;
  int v39;
  _QWORD v40[2];
  _BYTE buf[24];
  char v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  if ((*(_BYTE *)(a1 + 527) & 0x10) == 0)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_masque_listener_read_input";
    v18 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v40[0]) = 0;
    if (!__nwlog_fault(v18, type, v40))
      goto LABEL_35;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      v19 = __nwlog_obj();
      v20 = type[0];
      if (!os_log_type_enabled(v19, type[0]))
        goto LABEL_35;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_masque_listener_read_input";
      v21 = "%{public}s called with null (masque->listen_udp)";
    }
    else if (LOBYTE(v40[0]))
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v19 = __nwlog_obj();
      v20 = type[0];
      v23 = os_log_type_enabled(v19, type[0]);
      if (backtrace_string)
      {
        if (v23)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_protocol_masque_listener_read_input";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v19, v20, "%{public}s called with null (masque->listen_udp), dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_35;
      }
      if (!v23)
      {
LABEL_35:
        if (v18)
          free(v18);
        return 0;
      }
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_masque_listener_read_input";
      v21 = "%{public}s called with null (masque->listen_udp), no backtrace";
    }
    else
    {
      v19 = __nwlog_obj();
      v20 = type[0];
      if (!os_log_type_enabled(v19, type[0]))
        goto LABEL_35;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_masque_listener_read_input";
      v21 = "%{public}s called with null (masque->listen_udp), backtrace limit exceeded";
    }
    _os_log_impl(&dword_182FBE000, v19, v20, v21, buf, 0xCu);
    goto LABEL_35;
  }
  if (*(_DWORD *)(a1 + 508) != 4)
    return 0;
  v7 = a6;
  v8 = a5;
  v40[0] = 0;
  v40[1] = v40;
  nw_protocol_get_input_frames(*(_QWORD *)(a1 + 32), a1, a4, a5, a6, (uint64_t)v40);
  if (!v40[0])
    return 0;
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = buf;
  *(_QWORD *)&buf[16] = 0x2000000000;
  v42 = 0;
  *(_QWORD *)type = 0;
  v37 = type;
  v39 = 0;
  v38 = 0x2000000000;
  if (nw_protocol_copy_http_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_11_72660);
  v11 = (id)nw_protocol_copy_http_definition_http_definition;
  v12 = MEMORY[0x1E0C809B0];
  v26[0] = MEMORY[0x1E0C809B0];
  v26[1] = 0x40000000;
  v27 = ___ZL38nw_protocol_masque_listener_read_inputP9nw_masqueP12nw_hash_nodeP16nw_frame_array_sjjj_block_invoke;
  v28 = &unk_1E149EA68;
  v31 = v11;
  v32 = a1;
  v33 = v40;
  v34 = a2;
  v35 = a3;
  v29 = type;
  v30 = buf;
  v13 = v40[0];
  do
  {
    if (!v13)
      break;
    v14 = *(_QWORD *)(v13 + 32);
    v15 = ((uint64_t (*)(_QWORD *))v27)(v26);
    v13 = v14;
  }
  while ((v15 & 1) != 0);
  if (v11)
    os_release(v11);
  if (*(_BYTE *)(*(_QWORD *)&buf[8] + 24))
  {
    v16 = *(char **)(a1 + 480);
    v25[0] = v12;
    v25[1] = 0x40000000;
    v25[2] = ___ZL38nw_protocol_masque_listener_read_inputP9nw_masqueP12nw_hash_nodeP16nw_frame_array_sjjj_block_invoke_143;
    v25[3] = &__block_descriptor_tmp_144;
    v25[4] = a1;
    nw_hash_table_apply(v16, (uint64_t)v25);
  }
  if (a2)
  {
    v17 = *((unsigned int *)v37 + 6);
    if (!(_DWORD)v17)
    {
      if (*(_BYTE *)(*(_QWORD *)&buf[8] + 24) && *(_QWORD *)(a2 + 32))
        v17 = nw_frame_array_fill_from_pending_array((_QWORD *)(a2 + 32), a3, v8, v7);
      else
        v17 = 0;
    }
  }
  else
  {
    v17 = *((unsigned int *)v37 + 6);
  }
  _Block_object_dispose(type, 8);
  _Block_object_dispose(buf, 8);
  return v17;
}

uint64_t ___ZL38nw_protocol_masque_listener_read_inputP9nw_masqueP12nw_hash_nodeP16nw_frame_array_sjjj_block_invoke(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  NSObject *v7;
  _BOOL4 v8;
  const char *v9;
  const char *v10;
  uint64_t v11;
  _QWORD *v12;
  unsigned __int8 *v13;
  uint64_t v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  nw_endpoint_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t v23;
  const char *v24;
  BOOL v25;
  const char *v26;
  const char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  uint64_t v33;
  BOOL v34;
  const char *v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  const char *v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  const char *v44;
  BOOL v45;
  const char *v46;
  uint8_t *v47;
  uint64_t v49;
  uint64_t v50;
  const char *v51;
  BOOL v52;
  const char *v53;
  uint64_t v54;
  _QWORD **v55;
  _QWORD *v56;
  nw_parameters_t v57;
  char v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  NSObject *v62;
  uint64_t v63;
  BOOL v64;
  const char *v65;
  const char *v66;
  const char *v67;
  uint64_t v68;
  uint64_t v69;
  BOOL v70;
  const char *v71;
  const char *v72;
  NSObject *v73;
  _BOOL4 v74;
  BOOL v75;
  const char *v76;
  const char *v77;
  _QWORD v78[9];
  _QWORD v79[5];
  __int128 v80;
  nw_endpoint_t v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int v85;
  uint8_t buf[4];
  _BYTE v87[28];
  __int16 v88;
  nw_endpoint_t v89;
  _BYTE address[24];
  unsigned int v91;
  uint64_t v92;

  v92 = *MEMORY[0x1E0C80C00];
  v4 = nw_frame_copy_metadata_for_protocol(a2, *(_QWORD *)(a1 + 48));
  if (v4)
  {
    v5 = v4;
    if (nw_http_metadata_is_capsule(v4))
    {
      v6 = *(_QWORD *)(a1 + 56);
      if (!v6 || (*(_BYTE *)(v6 + 529) & 1) == 0)
      {
        if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
          dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
        v7 = gprivacy_proxyLogObj;
        v8 = os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_INFO);
        v6 = *(_QWORD *)(a1 + 56);
        if (v8)
        {
          v9 = (const char *)(v6 + 531);
          v10 = "";
          if (v6)
            v10 = " ";
          else
            v9 = "";
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)v87 = v9;
          *(_WORD *)&v87[8] = 2080;
          *(_QWORD *)&v87[10] = v10;
          _os_log_impl(&dword_182FBE000, v7, OS_LOG_TYPE_INFO, "%{public}s%sReceived HTTP Capsule for listener", buf, 0x16u);
          v6 = *(_QWORD *)(a1 + 56);
        }
      }
      nw_masque_handle_capsule(v6, v5);
      v11 = *(_QWORD *)(a2 + 32);
      v12 = *(_QWORD **)(a2 + 40);
      if (v11)
      {
        *(_QWORD *)(v11 + 40) = v12;
        v12 = *(_QWORD **)(a2 + 40);
      }
      else
      {
        *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) = v12;
      }
      *v12 = v11;
      *(_QWORD *)(a2 + 32) = 0;
      *(_QWORD *)(a2 + 40) = 0;
      nw_frame_finalize(a2);
    }
    os_release(v5);
    return 1;
  }
  v85 = 0;
  v13 = (unsigned __int8 *)nw_frame_unclaimed_bytes(a2, &v85);
  v14 = *(_QWORD *)(a2 + 32);
  v15 = *(_QWORD **)(a2 + 40);
  if (v14)
  {
    *(_QWORD *)(v14 + 40) = v15;
    v15 = *(_QWORD **)(a2 + 40);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) = v15;
  }
  *v15 = v14;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  if (!v85)
  {
    v21 = *(_QWORD *)(a1 + 56);
    if (v21 && (*(_BYTE *)(v21 + 529) & 1) != 0)
      goto LABEL_79;
    if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
      dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
    v22 = gprivacy_proxyLogObj;
    if (!os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_INFO))
      goto LABEL_79;
    v23 = *(_QWORD *)(a1 + 56);
    v24 = "";
    v25 = v23 == 0;
    if (v23)
      v26 = (const char *)(v23 + 531);
    else
      v26 = "";
    *(_DWORD *)buf = 136446722;
    if (!v25)
      v24 = " ";
    *(_QWORD *)v87 = v26;
    *(_WORD *)&v87[8] = 2080;
    *(_QWORD *)&v87[10] = v24;
    *(_WORD *)&v87[18] = 1024;
    *(_DWORD *)&v87[20] = v85;
    v27 = "%{public}s%sReceived datagram is too short (length %u)";
LABEL_77:
    v47 = buf;
LABEL_78:
    _os_log_impl(&dword_182FBE000, v22, OS_LOG_TYPE_INFO, v27, v47, 0x1Cu);
    goto LABEL_79;
  }
  v16 = *v13;
  if (v16 != 6)
  {
    if (v16 == 4)
    {
      *(_QWORD *)&address[8] = 0;
      if (v85 > 6)
      {
        *(_WORD *)address = 528;
        *(_DWORD *)&address[4] = *(_DWORD *)(v13 + 1);
        *(_WORD *)&address[2] = *(_WORD *)(v13 + 5);
        v18 = nw_endpoint_create_address((const sockaddr *)address);
        v19 = a2;
        v20 = 7;
        goto LABEL_38;
      }
      v42 = *(_QWORD *)(a1 + 56);
      if (v42 && (*(_BYTE *)(v42 + 529) & 1) != 0)
        goto LABEL_79;
      if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
        dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
      v22 = gprivacy_proxyLogObj;
      if (!os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_INFO))
      {
LABEL_79:
        nw_frame_finalize(a2);
        return 1;
      }
      v43 = *(_QWORD *)(a1 + 56);
      v44 = "";
      v45 = v43 == 0;
      if (v43)
        v46 = (const char *)(v43 + 531);
      else
        v46 = "";
      *(_DWORD *)buf = 136446722;
      if (!v45)
        v44 = " ";
      *(_QWORD *)v87 = v46;
      *(_WORD *)&v87[8] = 2080;
      *(_QWORD *)&v87[10] = v44;
      *(_WORD *)&v87[18] = 1024;
      *(_DWORD *)&v87[20] = v85;
      v27 = "%{public}s%sReceived datagram is too short for IPv4 (length %u)";
    }
    else
    {
      v37 = *(_QWORD *)(a1 + 56);
      if (v37 && (*(_BYTE *)(v37 + 529) & 1) != 0)
        goto LABEL_79;
      if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
        dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
      v22 = gprivacy_proxyLogObj;
      if (!os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_INFO))
        goto LABEL_79;
      v38 = *(_QWORD *)(a1 + 56);
      v39 = v38 == 0;
      if (v38)
        v40 = (const char *)(v38 + 531);
      else
        v40 = "";
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)v87 = v40;
      v41 = " ";
      if (v39)
        v41 = "";
      *(_WORD *)&v87[8] = 2080;
      *(_QWORD *)&v87[10] = v41;
      *(_WORD *)&v87[18] = 1024;
      *(_DWORD *)&v87[20] = v16;
      v27 = "%{public}s%sReceived datagram with unsupported IP version %u";
    }
    goto LABEL_77;
  }
  memset(v87, 0, 24);
  if (v85 <= 0x12)
  {
    v49 = *(_QWORD *)(a1 + 56);
    if (v49 && (*(_BYTE *)(v49 + 529) & 1) != 0)
      goto LABEL_79;
    if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
      dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
    v22 = gprivacy_proxyLogObj;
    if (!os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_INFO))
      goto LABEL_79;
    v50 = *(_QWORD *)(a1 + 56);
    v51 = "";
    v52 = v50 == 0;
    if (v50)
      v53 = (const char *)(v50 + 531);
    else
      v53 = "";
    *(_DWORD *)address = 136446722;
    if (!v52)
      v51 = " ";
    *(_QWORD *)&address[4] = v53;
    *(_WORD *)&address[12] = 2080;
    *(_QWORD *)&address[14] = v51;
    *(_WORD *)&address[22] = 1024;
    v91 = v85;
    v27 = "%{public}s%sReceived datagram is too short for IPv6 (length %u)";
    v47 = address;
    goto LABEL_78;
  }
  *(_WORD *)buf = 7708;
  *(_OWORD *)&v87[4] = *(_OWORD *)(v13 + 1);
  *(_WORD *)&buf[2] = *(_WORD *)(v13 + 17);
  v18 = nw_endpoint_create_address((const sockaddr *)buf);
  v19 = a2;
  v20 = 19;
LABEL_38:
  nw_frame_claim(v19, v17, v20, 0);
  *(_QWORD *)address = 0;
  *(_QWORD *)&address[8] = address;
  *(_QWORD *)&address[16] = 0x2000000000;
  LOBYTE(v91) = 0;
  v28 = *(_QWORD *)(a1 + 56);
  v29 = *(char **)(v28 + 480);
  v30 = MEMORY[0x1E0C809B0];
  v79[0] = MEMORY[0x1E0C809B0];
  v79[1] = 0x40000000;
  v79[2] = ___ZL38nw_protocol_masque_listener_read_inputP9nw_masqueP12nw_hash_nodeP16nw_frame_array_sjjj_block_invoke_138;
  v79[3] = &unk_1E149EA18;
  v79[4] = address;
  v82 = *(_OWORD *)(a1 + 72);
  v81 = v18;
  v83 = a2;
  v84 = v28;
  v80 = *(_OWORD *)(a1 + 32);
  nw_hash_table_apply(v29, (uint64_t)v79);
  if (!*(_BYTE *)(*(_QWORD *)&address[8] + 24))
  {
    v54 = *(_QWORD *)(a1 + 56);
    v55 = *(_QWORD ***)(v54 + 440);
    if (v55 && (v56 = *v55) != 0 && *v56)
    {
      if ((*(_BYTE *)(v54 + 529) & 1) == 0 && gLogDatapath)
      {
        if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
          dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
        v73 = gprivacy_proxyLogObj;
        v74 = os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG);
        v54 = *(_QWORD *)(a1 + 56);
        if (v74)
        {
          v75 = v54 == 0;
          if (v54)
            v76 = (const char *)(v54 + 531);
          else
            v76 = "";
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)v87 = "nw_protocol_masque_listener_read_input_block_invoke";
          *(_WORD *)&v87[8] = 2082;
          *(_QWORD *)&v87[10] = v76;
          v77 = " ";
          if (v75)
            v77 = "";
          *(_WORD *)&v87[18] = 2080;
          *(_QWORD *)&v87[20] = v77;
          v88 = 2112;
          v89 = v18;
          _os_log_impl(&dword_182FBE000, v73, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sFound new frame for %@, creating a new flow", buf, 0x2Au);
          v54 = *(_QWORD *)(a1 + 56);
        }
      }
      v57 = nw_parameters_copy(*(nw_parameters_t *)(v54 + 320));
      v58 = (***(uint64_t (****)(_QWORD, nw_endpoint_t, nw_parameters_t))(*(_QWORD *)(a1 + 56) + 440))(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 440), v18, v57);
      if (v57)
        os_release(v57);
      if ((v58 & 1) != 0)
      {
        *(_BYTE *)(*(_QWORD *)&address[8] + 24) = 0;
        v59 = *(_QWORD *)(a1 + 56);
        v60 = *(char **)(v59 + 480);
        v78[0] = v30;
        v78[1] = 0x40000000;
        v78[2] = ___ZL38nw_protocol_masque_listener_read_inputP9nw_masqueP12nw_hash_nodeP16nw_frame_array_sjjj_block_invoke_140;
        v78[3] = &unk_1E149EA40;
        v78[6] = v18;
        v78[7] = a2;
        v78[8] = v59;
        v61 = *(_QWORD *)(a1 + 40);
        v78[4] = address;
        v78[5] = v61;
        nw_hash_table_apply(v60, (uint64_t)v78);
        goto LABEL_39;
      }
      v68 = *(_QWORD *)(a1 + 56);
      if (v68 && (*(_BYTE *)(v68 + 529) & 1) != 0)
        goto LABEL_39;
      if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
        dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
      v62 = gprivacy_proxyLogObj;
      if (!os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
        goto LABEL_39;
      v69 = *(_QWORD *)(a1 + 56);
      v70 = v69 == 0;
      if (v69)
        v71 = (const char *)(v69 + 531);
      else
        v71 = "";
      v72 = " ";
      if (v70)
        v72 = "";
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)v87 = v71;
      *(_WORD *)&v87[8] = 2080;
      *(_QWORD *)&v87[10] = v72;
      v67 = "%{public}s%sFailed to accept new flow";
    }
    else
    {
      if ((*(_BYTE *)(v54 + 529) & 1) != 0)
        goto LABEL_39;
      if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
        dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
      v62 = gprivacy_proxyLogObj;
      if (!os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
        goto LABEL_39;
      v63 = *(_QWORD *)(a1 + 56);
      v64 = v63 == 0;
      if (v63)
        v65 = (const char *)(v63 + 531);
      else
        v65 = "";
      v66 = " ";
      if (v64)
        v66 = "";
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)v87 = v65;
      *(_WORD *)&v87[8] = 2080;
      *(_QWORD *)&v87[10] = v66;
      v67 = "%{public}s%sReceived datagram for new flow, but no listen protocol is able to receive the new flow";
    }
    _os_log_impl(&dword_182FBE000, v62, OS_LOG_TYPE_ERROR, v67, buf, 0x16u);
  }
LABEL_39:
  if (!*(_BYTE *)(*(_QWORD *)&address[8] + 24))
  {
    v31 = *(_QWORD *)(a1 + 56);
    if (!v31 || (*(_BYTE *)(v31 + 529) & 1) == 0)
    {
      if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
        dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
      v32 = gprivacy_proxyLogObj;
      if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
      {
        v33 = *(_QWORD *)(a1 + 56);
        v34 = v33 == 0;
        if (v33)
          v35 = (const char *)(v33 + 531);
        else
          v35 = "";
        v36 = " ";
        if (v34)
          v36 = "";
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)v87 = v35;
        *(_WORD *)&v87[8] = 2080;
        *(_QWORD *)&v87[10] = v36;
        _os_log_impl(&dword_182FBE000, v32, OS_LOG_TYPE_ERROR, "%{public}s%sFailed to find a flow to accept inbound packet, dropping", buf, 0x16u);
      }
    }
    nw_frame_finalize(a2);
  }
  if (v18)
    os_release(v18);
  _Block_object_dispose(address, 8);
  return 1;
}

uint64_t ___ZL38nw_protocol_masque_listener_read_inputP9nw_masqueP12nw_hash_nodeP16nw_frame_array_sjjj_block_invoke_143(uint64_t a1, uint64_t a2)
{
  uint64_t object;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, _QWORD);
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  const char *v13;
  const char *v14;
  char *backtrace_string;
  _BOOL4 v16;
  const char *v17;
  const char *v18;
  const char *v19;
  char v20;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  char *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)nw_hash_node_get_extra(a2))
    return 1;
  object = nw_hash_node_get_object(a2);
  v5 = object;
  if (object)
  {
    v6 = *(_QWORD *)(object + 24);
    if (v6)
    {
      v7 = *(void (**)(uint64_t, _QWORD))(v6 + 64);
      if (v7)
      {
        v7(object, *(_QWORD *)(a1 + 32));
        return 1;
      }
    }
    __nwlog_obj();
    v9 = *(const char **)(v5 + 16);
    if (!v9)
      v9 = "invalid";
  }
  else
  {
    __nwlog_obj();
    v9 = "invalid";
  }
  *(_DWORD *)buf = 136446466;
  v23 = "nw_protocol_masque_listener_read_input_block_invoke";
  v24 = 2082;
  v25 = v9;
  v10 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v20 = 0;
  if (__nwlog_fault(v10, &type, &v20))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v11 = __nwlog_obj();
      v12 = type;
      if (!os_log_type_enabled(v11, type))
        goto LABEL_37;
      v13 = "invalid";
      if (v5 && *(_QWORD *)(v5 + 16))
        v13 = *(const char **)(v5 + 16);
      *(_DWORD *)buf = 136446466;
      v23 = "nw_protocol_masque_listener_read_input_block_invoke";
      v24 = 2082;
      v25 = v13;
      v14 = "%{public}s protocol %{public}s has invalid input_available callback";
      goto LABEL_36;
    }
    if (!v20)
    {
      v11 = __nwlog_obj();
      v12 = type;
      if (!os_log_type_enabled(v11, type))
        goto LABEL_37;
      v18 = "invalid";
      if (v5 && *(_QWORD *)(v5 + 16))
        v18 = *(const char **)(v5 + 16);
      *(_DWORD *)buf = 136446466;
      v23 = "nw_protocol_masque_listener_read_input_block_invoke";
      v24 = 2082;
      v25 = v18;
      v14 = "%{public}s protocol %{public}s has invalid input_available callback, backtrace limit exceeded";
      goto LABEL_36;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v11 = __nwlog_obj();
    v12 = type;
    v16 = os_log_type_enabled(v11, type);
    if (backtrace_string)
    {
      if (v16)
      {
        v17 = "invalid";
        if (v5 && *(_QWORD *)(v5 + 16))
          v17 = *(const char **)(v5 + 16);
        *(_DWORD *)buf = 136446722;
        v23 = "nw_protocol_masque_listener_read_input_block_invoke";
        v24 = 2082;
        v25 = v17;
        v26 = 2082;
        v27 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s protocol %{public}s has invalid input_available callback, dumping backtrace:%{public}s", buf, 0x20u);
      }
      free(backtrace_string);
      goto LABEL_37;
    }
    if (v16)
    {
      v19 = "invalid";
      if (v5 && *(_QWORD *)(v5 + 16))
        v19 = *(const char **)(v5 + 16);
      *(_DWORD *)buf = 136446466;
      v23 = "nw_protocol_masque_listener_read_input_block_invoke";
      v24 = 2082;
      v25 = v19;
      v14 = "%{public}s protocol %{public}s has invalid input_available callback, no backtrace";
LABEL_36:
      _os_log_impl(&dword_182FBE000, v11, v12, v14, buf, 0x16u);
    }
  }
LABEL_37:
  if (v10)
    free(v10);
  return 1;
}

BOOL ___ZL38nw_protocol_masque_listener_read_inputP9nw_masqueP12nw_hash_nodeP16nw_frame_array_sjjj_block_invoke_138(uint64_t a1, uint64_t a2)
{
  uint64_t extra;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  NSObject *v15;
  uint64_t v16;
  const char *v17;
  BOOL v18;
  const char *v19;
  NSObject *v20;
  uint64_t v21;
  const char *v22;
  BOOL v23;
  const char *v24;
  int v25;
  const char *v26;
  __int16 v27;
  const char *v28;
  __int16 v29;
  const char *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  extra = nw_hash_node_get_extra(a2);
  v5 = *(void **)(extra + 16);
  if (v5)
  {
    v6 = extra;
    if (nw_endpoint_is_equal(*(void **)(a1 + 56), v5, 0))
    {
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
      if (*(_QWORD *)(a1 + 64) == a2)
      {
        v10 = *(_QWORD *)(a1 + 72);
        v11 = *(_QWORD *)(a1 + 80);
        *(_QWORD *)(v11 + 32) = 0;
        v12 = *(_QWORD **)(v10 + 8);
        *(_QWORD *)(v11 + 40) = v12;
        *v12 = v11;
        *(_QWORD *)(v10 + 8) = v11 + 32;
        v13 = *(_QWORD *)(a1 + 88);
        if ((!v13 || (*(_BYTE *)(v13 + 529) & 1) == 0) && gLogDatapath)
        {
          if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
            dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
          v20 = gprivacy_proxyLogObj;
          if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
          {
            v21 = *(_QWORD *)(a1 + 88);
            v22 = "";
            v23 = v21 == 0;
            if (v21)
              v24 = (const char *)(v21 + 531);
            else
              v24 = "";
            v25 = 136446722;
            v26 = "nw_protocol_masque_listener_read_input_block_invoke";
            if (!v23)
              v22 = " ";
            v27 = 2082;
            v28 = v24;
            v29 = 2080;
            v30 = v22;
            _os_log_impl(&dword_182FBE000, v20, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sFound frame matching remote address", (uint8_t *)&v25, 0x20u);
          }
        }
        ++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
      }
      else
      {
        v7 = *(_QWORD *)(a1 + 80);
        *(_QWORD *)(v7 + 32) = 0;
        v8 = *(_QWORD **)(v6 + 8);
        *(_QWORD *)(v7 + 40) = v8;
        *v8 = v7;
        *(_QWORD *)(v6 + 8) = v7 + 32;
        v9 = *(_QWORD *)(a1 + 88);
        if ((!v9 || (*(_BYTE *)(v9 + 529) & 1) == 0) && gLogDatapath)
        {
          if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
            dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
          v15 = gprivacy_proxyLogObj;
          if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
          {
            v16 = *(_QWORD *)(a1 + 88);
            v17 = "";
            v18 = v16 == 0;
            if (v16)
              v19 = (const char *)(v16 + 531);
            else
              v19 = "";
            v25 = 136446722;
            v26 = "nw_protocol_masque_listener_read_input_block_invoke";
            if (!v18)
              v17 = " ";
            v27 = 2082;
            v28 = v19;
            v29 = 2080;
            v30 = v17;
            _os_log_impl(&dword_182FBE000, v15, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sFound frame matching remote address, pending", (uint8_t *)&v25, 0x20u);
          }
        }
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 1;
      }
    }
  }
  return *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) == 0;
}

BOOL ___ZL38nw_protocol_masque_listener_read_inputP9nw_masqueP12nw_hash_nodeP16nw_frame_array_sjjj_block_invoke_140(uint64_t a1, uint64_t a2)
{
  uint64_t extra;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  NSObject *v10;
  uint64_t v11;
  const char *v12;
  BOOL v13;
  const char *v14;
  int v15;
  const char *v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  const char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  extra = nw_hash_node_get_extra(a2);
  v4 = *(void **)(extra + 16);
  if (v4)
  {
    v5 = extra;
    if (nw_endpoint_is_equal(*(void **)(a1 + 48), v4, 0))
    {
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
      v6 = *(_QWORD *)(a1 + 56);
      *(_QWORD *)(v6 + 32) = 0;
      v7 = *(_QWORD **)(v5 + 8);
      *(_QWORD *)(v6 + 40) = v7;
      *v7 = v6;
      *(_QWORD *)(v5 + 8) = v6 + 32;
      v8 = *(_QWORD *)(a1 + 64);
      if ((!v8 || (*(_BYTE *)(v8 + 529) & 1) == 0) && gLogDatapath)
      {
        if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
          dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
        v10 = gprivacy_proxyLogObj;
        if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
        {
          v11 = *(_QWORD *)(a1 + 64);
          v12 = "";
          v13 = v11 == 0;
          if (v11)
            v14 = (const char *)(v11 + 531);
          else
            v14 = "";
          v15 = 136446722;
          v16 = "nw_protocol_masque_listener_read_input_block_invoke";
          if (!v13)
            v12 = " ";
          v17 = 2082;
          v18 = v14;
          v19 = 2080;
          v20 = v12;
          _os_log_impl(&dword_182FBE000, v10, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sFound new flow matching remote address, pending", (uint8_t *)&v15, 0x20u);
        }
      }
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
    }
  }
  return *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) == 0;
}

unint64_t ___ZL40nw_masque_handle_server_connect_responseP9nw_masqueP20nw_protocol_metadata_block_invoke(unint64_t result, char *__s)
{
  _QWORD *v3;

  if (__s)
  {
    v3 = (_QWORD *)result;
    result = strlen(__s);
    if (result <= 7)
    {
      *(_BYTE *)(*(_QWORD *)(v3[4] + 8) + 24) = 1;
      result = strcmp((const char *)(v3[6] + 615), __s);
      *(_BYTE *)(*(_QWORD *)(v3[5] + 8) + 24) = (_DWORD)result == 0;
    }
  }
  return result;
}

size_t ___ZL33nw_masque_handle_connect_responseP9nw_masqueP20nw_protocol_metadata_block_invoke(size_t result, char *__s)
{
  uint64_t v3;
  _BYTE *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;

  if (__s)
  {
    v3 = result;
    result = strlen(__s);
    if (result <= 7)
    {
      v4 = *(_BYTE **)(v3 + 32);
      v5 = *__s;
      v4[615] = v5;
      if (v5)
      {
        v6 = __s[1];
        v4[616] = v6;
        if (v6)
        {
          v7 = __s[2];
          v4[617] = v7;
          if (v7)
          {
            v8 = __s[3];
            v4[618] = v8;
            if (v8)
            {
              v9 = __s[4];
              v4[619] = v9;
              if (v9)
              {
                v10 = __s[5];
                v4[620] = v10;
                if (v10)
                {
                  v11 = __s[6];
                  v4[621] = v11;
                  if (v11)
                    v4[622] = 0;
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void ___ZL33nw_masque_handle_connect_responseP9nw_masqueP20nw_protocol_metadata_block_invoke_147(uint64_t a1, char *__s1)
{
  uint64_t v3;
  NSObject *v4;
  _BOOL4 v5;
  BOOL v6;
  const char *v7;
  const char *v8;
  int v9;
  const char *v10;
  __int16 v11;
  const char *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (__s1 && !strcmp(__s1, "?1"))
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (!v3 || (*(_BYTE *)(v3 + 529) & 1) == 0)
    {
      if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
        dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
      v4 = gprivacy_proxyLogObj;
      v5 = os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_INFO);
      v3 = *(_QWORD *)(a1 + 32);
      if (v5)
      {
        v6 = v3 == 0;
        if (v3)
          v7 = (const char *)(v3 + 531);
        else
          v7 = "";
        v8 = " ";
        if (v6)
          v8 = "";
        v9 = 136446466;
        v10 = v7;
        v11 = 2080;
        v12 = v8;
        _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_INFO, "%{public}s%sServer supports forwarding", (uint8_t *)&v9, 0x16u);
        v3 = *(_QWORD *)(a1 + 32);
      }
    }
    *(_DWORD *)(v3 + 527) |= 0x100000u;
  }
}

uint64_t ___ZL33nw_masque_handle_connect_responseP9nw_masqueP20nw_protocol_metadata_block_invoke_149(uint64_t result, char *__s1)
{
  uint64_t v2;
  int v3;

  v2 = result;
  if (__s1)
  {
    result = strcmp(__s1, "?1");
    v3 = ((_DWORD)result == 0) << 19;
  }
  else
  {
    v3 = 0;
  }
  *(_DWORD *)(*(_QWORD *)(v2 + 32) + 527) = *(_DWORD *)(*(_QWORD *)(v2 + 32) + 527) & 0xFFF7FFFF | v3;
  return result;
}

void ___ZL33nw_masque_handle_connect_responseP9nw_masqueP20nw_protocol_metadata_block_invoke_2(_QWORD *a1, char *__s1)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  const char *v10;
  uint64_t v11;
  _BOOL8 v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  size_t v17;
  size_t v18;
  nw_endpoint_t url;
  nw_endpoint_t v20;
  unsigned int url_port;
  NSObject *v22;
  const char *v23;
  _BOOL8 host_with_numeric_port;
  char *v25;
  unsigned int v26;
  char *v27;
  NSObject *v28;
  os_log_type_t v29;
  const char *v30;
  char *v31;
  _BOOL4 v32;
  uint64_t v33;
  char *v34;
  const char *v35;
  char *v36;
  char *v37;
  _BOOL8 v38;
  size_t v39;
  char *v40;
  char *v41;
  unsigned int port;
  _BOOL8 v43;
  void *v44;
  char *v45;
  NSObject *v46;
  os_log_type_t v47;
  const char *v48;
  char *backtrace_string;
  _BOOL4 v50;
  char v51;
  os_log_type_t type;
  char __s[32];
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  if (__s1)
  {
    *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = strstr(__s1, "invalid geohash") != 0;
    *(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 24) = strstr(__s1, "expired routing") != 0;
    v4 = strlen(__s1);
    v5 = v4;
    v6 = a1[8];
    if (v6)
    {
      if (*(_QWORD *)(v6 + 312))
      {
        v7 = v4;
        v8 = strnstr(__s1, "next-hop=\"", v4);
        v9 = v8;
        if (v8)
        {
          v10 = "\";";
          v11 = 10;
        }
        else
        {
          v8 = strnstr(__s1, "next-hop=", v5);
          if (!v8)
            goto LABEL_38;
          v10 = ";";
          v11 = 9;
        }
        v12 = v9 != 0;
        v13 = &v8[v11];
        v14 = &__s1[v7];
        v15 = strnstr(&v8[v11], v10, v14 - &v8[v11]);
        if (v15)
          v16 = v15;
        else
          v16 = &v14[-v12];
        v17 = v16 - v13;
        if (v16 > v13)
        {
          if (*v13 == 91 || (v25 = strnstr(v13, ":", v16 - v13)) != 0 && !strnstr(v25 + 1, ":", v16 - (v25 + 1)))
          {
            v64 = xmmword_183BA8D1C;
            v65 = unk_183BA8D2C;
            v66 = xmmword_183BA8D3C;
            v67 = unk_183BA8D4C;
            v60 = xmmword_183BA8CDC;
            v61 = unk_183BA8CEC;
            v62 = xmmword_183BA8CFC;
            v63 = unk_183BA8D0C;
            v56 = xmmword_183BA8C9C;
            v57 = unk_183BA8CAC;
            v58 = xmmword_183BA8CBC;
            v59 = unk_183BA8CCC;
            *(_OWORD *)__s = *(_OWORD *)"https://";
            *(_OWORD *)&__s[16] = unk_183BA8C6C;
            v54 = xmmword_183BA8C7C;
            v55 = unk_183BA8C8C;
            v18 = strlen(__s);
            if (v18 + v17 <= 0xFF)
            {
              memcpy(&__s[v18], v13, v17);
              url = nw_endpoint_create_url(__s);
              if (url)
              {
                v20 = url;
                url_port = nw_endpoint_get_url_port(url, 0);
                v22 = v20;
                v23 = (const char *)-[NSObject hostname](v22, "hostname");

                if (!url_port)
                  url_port = nw_endpoint_get_port(*(nw_endpoint_t *)(v6 + 312));
                host_with_numeric_port = nw_endpoint_create_host_with_numeric_port(v23, url_port);
                os_release(v22);
LABEL_39:
                *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24) = host_with_numeric_port;
                v33 = a1[8];
                if (v33)
                {
                  if (*(_QWORD *)(v33 + 312))
                  {
                    v34 = strnstr(__s1, "next-hop-aliases=\"", v5);
                    if (v34)
                    {
                      v35 = v34 + 18;
                      v36 = strnstr(v34 + 18, "\"", &__s1[v5] - (v34 + 18));
                      if (v36)
                      {
                        v37 = v36;
                        v38 = 0;
                        do
                        {
                          if (v35 >= v37)
                            break;
                          v66 = 0u;
                          v67 = 0u;
                          v64 = 0u;
                          v65 = 0u;
                          v62 = 0u;
                          v63 = 0u;
                          v60 = 0u;
                          v61 = 0u;
                          v58 = 0u;
                          v59 = 0u;
                          v56 = 0u;
                          v57 = 0u;
                          v54 = 0u;
                          v55 = 0u;
                          v39 = v37 - v35;
                          memset(__s, 0, sizeof(__s));
                          v40 = strnstr(v35, ",", v37 - v35);
                          v41 = v40;
                          if (v40)
                            v39 = v40 - v35;
                          if (v39 - 1 <= 0xFE)
                          {
                            if (!v38)
                              v38 = nw_array_create();
                            memcpy(__s, v35, v39);
                            port = nw_endpoint_get_port(*(nw_endpoint_t *)(v33 + 312));
                            v43 = nw_endpoint_create_host_with_numeric_port(__s, port);
                            if (v43)
                            {
                              v44 = (void *)v43;
                              nw_array_append(v38, (void *)v43);
                              os_release(v44);
                            }
                          }
                          v35 = v41 + 1;
                        }
                        while (v41);
                        goto LABEL_70;
                      }
                    }
                  }
LABEL_69:
                  v38 = 0;
LABEL_70:
                  *(_QWORD *)(*(_QWORD *)(a1[7] + 8) + 24) = v38;
                  return;
                }
                __nwlog_obj();
                *(_DWORD *)__s = 136446210;
                *(_QWORD *)&__s[4] = "nw_masque_copy_next_hop_aliases_from_proxy_status";
                v45 = (char *)_os_log_send_and_compose_impl();
                type = OS_LOG_TYPE_ERROR;
                v51 = 0;
                if (__nwlog_fault(v45, &type, &v51))
                {
                  if (type == OS_LOG_TYPE_FAULT)
                  {
                    v46 = __nwlog_obj();
                    v47 = type;
                    if (!os_log_type_enabled(v46, type))
                      goto LABEL_67;
                    *(_DWORD *)__s = 136446210;
                    *(_QWORD *)&__s[4] = "nw_masque_copy_next_hop_aliases_from_proxy_status";
                    v48 = "%{public}s called with null masque";
                    goto LABEL_66;
                  }
                  if (!v51)
                  {
                    v46 = __nwlog_obj();
                    v47 = type;
                    if (!os_log_type_enabled(v46, type))
                      goto LABEL_67;
                    *(_DWORD *)__s = 136446210;
                    *(_QWORD *)&__s[4] = "nw_masque_copy_next_hop_aliases_from_proxy_status";
                    v48 = "%{public}s called with null masque, backtrace limit exceeded";
                    goto LABEL_66;
                  }
                  backtrace_string = (char *)__nw_create_backtrace_string();
                  v46 = __nwlog_obj();
                  v47 = type;
                  v50 = os_log_type_enabled(v46, type);
                  if (backtrace_string)
                  {
                    if (v50)
                    {
                      *(_DWORD *)__s = 136446466;
                      *(_QWORD *)&__s[4] = "nw_masque_copy_next_hop_aliases_from_proxy_status";
                      *(_WORD *)&__s[12] = 2082;
                      *(_QWORD *)&__s[14] = backtrace_string;
                      _os_log_impl(&dword_182FBE000, v46, v47, "%{public}s called with null masque, dumping backtrace:%{public}s", (uint8_t *)__s, 0x16u);
                    }
                    free(backtrace_string);
                    goto LABEL_67;
                  }
                  if (v50)
                  {
                    *(_DWORD *)__s = 136446210;
                    *(_QWORD *)&__s[4] = "nw_masque_copy_next_hop_aliases_from_proxy_status";
                    v48 = "%{public}s called with null masque, no backtrace";
LABEL_66:
                    _os_log_impl(&dword_182FBE000, v46, v47, v48, (uint8_t *)__s, 0xCu);
                  }
                }
LABEL_67:
                if (v45)
                  free(v45);
                goto LABEL_69;
              }
            }
          }
          else if (v17 <= 0xFF)
          {
            v66 = 0u;
            v67 = 0u;
            v64 = 0u;
            v65 = 0u;
            v62 = 0u;
            v63 = 0u;
            v60 = 0u;
            v61 = 0u;
            v58 = 0u;
            v59 = 0u;
            v56 = 0u;
            v57 = 0u;
            v54 = 0u;
            v55 = 0u;
            memset(__s, 0, sizeof(__s));
            memcpy(__s, v13, v16 - v13);
            v26 = nw_endpoint_get_port(*(nw_endpoint_t *)(v6 + 312));
            host_with_numeric_port = nw_endpoint_create_host_with_numeric_port(__s, v26);
            goto LABEL_39;
          }
        }
      }
LABEL_38:
      host_with_numeric_port = 0;
      goto LABEL_39;
    }
    __nwlog_obj();
    *(_DWORD *)__s = 136446210;
    *(_QWORD *)&__s[4] = "nw_masque_copy_next_hop_from_proxy_status";
    v27 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v51 = 0;
    if (__nwlog_fault(v27, &type, &v51))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v28 = __nwlog_obj();
        v29 = type;
        if (!os_log_type_enabled(v28, type))
          goto LABEL_36;
        *(_DWORD *)__s = 136446210;
        *(_QWORD *)&__s[4] = "nw_masque_copy_next_hop_from_proxy_status";
        v30 = "%{public}s called with null masque";
        goto LABEL_35;
      }
      if (!v51)
      {
        v28 = __nwlog_obj();
        v29 = type;
        if (!os_log_type_enabled(v28, type))
          goto LABEL_36;
        *(_DWORD *)__s = 136446210;
        *(_QWORD *)&__s[4] = "nw_masque_copy_next_hop_from_proxy_status";
        v30 = "%{public}s called with null masque, backtrace limit exceeded";
        goto LABEL_35;
      }
      v31 = (char *)__nw_create_backtrace_string();
      v28 = __nwlog_obj();
      v29 = type;
      v32 = os_log_type_enabled(v28, type);
      if (v31)
      {
        if (v32)
        {
          *(_DWORD *)__s = 136446466;
          *(_QWORD *)&__s[4] = "nw_masque_copy_next_hop_from_proxy_status";
          *(_WORD *)&__s[12] = 2082;
          *(_QWORD *)&__s[14] = v31;
          _os_log_impl(&dword_182FBE000, v28, v29, "%{public}s called with null masque, dumping backtrace:%{public}s", (uint8_t *)__s, 0x16u);
        }
        free(v31);
        goto LABEL_36;
      }
      if (v32)
      {
        *(_DWORD *)__s = 136446210;
        *(_QWORD *)&__s[4] = "nw_masque_copy_next_hop_from_proxy_status";
        v30 = "%{public}s called with null masque, no backtrace";
LABEL_35:
        _os_log_impl(&dword_182FBE000, v28, v29, v30, (uint8_t *)__s, 0xCu);
      }
    }
LABEL_36:
    if (v27)
      free(v27);
    goto LABEL_38;
  }
}

void sub_1836237AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZL33nw_masque_handle_connect_responseP9nw_masqueP20nw_protocol_metadata_block_invoke_3(uint64_t a1, char *__s)
{
  uint64_t v4;
  void *v5;
  void *v6;
  _BYTE *globals_for_protocol;
  int v8;
  _BYTE *v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  char *v15;
  NSObject *v16;
  os_log_type_t v17;
  const char *v18;
  NSObject *v19;
  char *backtrace_string;
  _BOOL4 v21;
  char *v22;
  _BOOL4 v23;
  const char *v24;
  _BOOL4 v25;
  char v26;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v29;
  __int16 v30;
  char *v31;
  __int16 v32;
  const char *v33;
  __int16 v34;
  _BYTE *v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  if (!__s || strlen(__s) > 6)
    return;
  v4 = *(_QWORD *)(a1 + 32);
  if (!v4)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v29 = "nw_masque_store_cached_geohash_value";
    v15 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v26 = 0;
    if (!__nwlog_fault(v15, &type, &v26))
      goto LABEL_66;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v16 = __nwlog_obj();
      v17 = type;
      if (!os_log_type_enabled(v16, type))
        goto LABEL_66;
      *(_DWORD *)buf = 136446210;
      v29 = "nw_masque_store_cached_geohash_value";
      v18 = "%{public}s called with null masque";
    }
    else if (v26)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v16 = __nwlog_obj();
      v17 = type;
      v21 = os_log_type_enabled(v16, type);
      if (backtrace_string)
      {
        if (v21)
        {
          *(_DWORD *)buf = 136446466;
          v29 = "nw_masque_store_cached_geohash_value";
          v30 = 2082;
          v31 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v16, v17, "%{public}s called with null masque, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_66:
        if (!v15)
          return;
        goto LABEL_67;
      }
      if (!v21)
        goto LABEL_66;
      *(_DWORD *)buf = 136446210;
      v29 = "nw_masque_store_cached_geohash_value";
      v18 = "%{public}s called with null masque, no backtrace";
    }
    else
    {
      v16 = __nwlog_obj();
      v17 = type;
      if (!os_log_type_enabled(v16, type))
        goto LABEL_66;
      *(_DWORD *)buf = 136446210;
      v29 = "nw_masque_store_cached_geohash_value";
      v18 = "%{public}s called with null masque, backtrace limit exceeded";
    }
    goto LABEL_65;
  }
  v5 = *(void **)(v4 + 328);
  if (!v5)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v29 = "nw_masque_store_cached_geohash_value";
    v15 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v26 = 0;
    if (!__nwlog_fault(v15, &type, &v26))
      goto LABEL_66;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v26)
      {
        v16 = __nwlog_obj();
        v17 = type;
        if (!os_log_type_enabled(v16, type))
          goto LABEL_66;
        *(_DWORD *)buf = 136446210;
        v29 = "nw_masque_store_cached_geohash_value";
        v18 = "%{public}s called with null masque->context, backtrace limit exceeded";
        goto LABEL_65;
      }
      v22 = (char *)__nw_create_backtrace_string();
      v16 = __nwlog_obj();
      v17 = type;
      v23 = os_log_type_enabled(v16, type);
      if (!v22)
      {
        if (!v23)
          goto LABEL_66;
        *(_DWORD *)buf = 136446210;
        v29 = "nw_masque_store_cached_geohash_value";
        v18 = "%{public}s called with null masque->context, no backtrace";
        goto LABEL_65;
      }
      if (v23)
      {
        *(_DWORD *)buf = 136446466;
        v29 = "nw_masque_store_cached_geohash_value";
        v30 = 2082;
        v31 = v22;
        v24 = "%{public}s called with null masque->context, dumping backtrace:%{public}s";
LABEL_50:
        _os_log_impl(&dword_182FBE000, v16, v17, v24, buf, 0x16u);
      }
LABEL_51:
      free(v22);
      if (!v15)
        return;
LABEL_67:
      free(v15);
      return;
    }
    v16 = __nwlog_obj();
    v17 = type;
    if (!os_log_type_enabled(v16, type))
      goto LABEL_66;
    *(_DWORD *)buf = 136446210;
    v29 = "nw_masque_store_cached_geohash_value";
    v18 = "%{public}s called with null masque->context";
LABEL_65:
    _os_log_impl(&dword_182FBE000, v16, v17, v18, buf, 0xCu);
    goto LABEL_66;
  }
  if (nw_protocol_masque_get_definition(void)::onceToken != -1)
    dispatch_once(&nw_protocol_masque_get_definition(void)::onceToken, &__block_literal_global_27122);
  if (nw_protocol_masque_get_definition(void)::definition)
    v6 = os_retain((void *)nw_protocol_masque_get_definition(void)::definition);
  else
    v6 = 0;
  globals_for_protocol = (_BYTE *)nw_context_get_globals_for_protocol(v5, v6);
  if (!globals_for_protocol)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v29 = "nw_masque_store_cached_geohash_value";
    v15 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v26 = 0;
    if (!__nwlog_fault(v15, &type, &v26))
      goto LABEL_66;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v16 = __nwlog_obj();
      v17 = type;
      if (!os_log_type_enabled(v16, type))
        goto LABEL_66;
      *(_DWORD *)buf = 136446210;
      v29 = "nw_masque_store_cached_geohash_value";
      v18 = "%{public}s called with null globals";
      goto LABEL_65;
    }
    if (!v26)
    {
      v16 = __nwlog_obj();
      v17 = type;
      if (!os_log_type_enabled(v16, type))
        goto LABEL_66;
      *(_DWORD *)buf = 136446210;
      v29 = "nw_masque_store_cached_geohash_value";
      v18 = "%{public}s called with null globals, backtrace limit exceeded";
      goto LABEL_65;
    }
    v22 = (char *)__nw_create_backtrace_string();
    v16 = __nwlog_obj();
    v17 = type;
    v25 = os_log_type_enabled(v16, type);
    if (!v22)
    {
      if (!v25)
        goto LABEL_66;
      *(_DWORD *)buf = 136446210;
      v29 = "nw_masque_store_cached_geohash_value";
      v18 = "%{public}s called with null globals, no backtrace";
      goto LABEL_65;
    }
    if (v25)
    {
      *(_DWORD *)buf = 136446466;
      v29 = "nw_masque_store_cached_geohash_value";
      v30 = 2082;
      v31 = v22;
      v24 = "%{public}s called with null globals, dumping backtrace:%{public}s";
      goto LABEL_50;
    }
    goto LABEL_51;
  }
  v8 = *__s;
  globals_for_protocol[4] = v8;
  v9 = globals_for_protocol + 4;
  if (v8)
  {
    v10 = __s[1];
    globals_for_protocol[5] = v10;
    if (v10)
    {
      v11 = __s[2];
      globals_for_protocol[6] = v11;
      if (v11)
      {
        v12 = __s[3];
        globals_for_protocol[7] = v12;
        if (v12)
        {
          v13 = __s[4];
          globals_for_protocol[8] = v13;
          if (v13)
          {
            v14 = __s[5];
            globals_for_protocol[9] = v14;
            if (v14)
              globals_for_protocol[10] = 0;
          }
        }
      }
    }
  }
  if ((*(_BYTE *)(v4 + 529) & 1) == 0 && gLogDatapath)
  {
    if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
      dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
    v19 = gprivacy_proxyLogObj;
    if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446978;
      v29 = "nw_masque_store_cached_geohash_value";
      v30 = 2082;
      v31 = (char *)(v4 + 531);
      v32 = 2080;
      v33 = " ";
      v34 = 2082;
      v35 = v9;
      _os_log_impl(&dword_182FBE000, v19, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sStoring geohash hint %{public}s", buf, 0x2Au);
    }
  }
}

void ___ZL33nw_masque_handle_connect_responseP9nw_masqueP20nw_protocol_metadata_block_invoke_4(uint64_t a1, char *__s)
{
  uint64_t v4;
  NSObject *v5;
  const char *v6;
  uint64_t v7;
  BOOL v8;
  const char *v9;
  int v10;
  int v11;
  const char *v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  int v16;
  char v17[8];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)v17 = 0;
  if (__s && strlen(__s) <= 7)
  {
    v17[0] = *__s;
    if (v17[0])
    {
      v17[1] = __s[1];
      if (v17[1])
      {
        v17[2] = __s[2];
        if (v17[2])
        {
          v17[3] = __s[3];
          if (v17[3])
          {
            v17[4] = __s[4];
            if (v17[4])
            {
              v17[5] = __s[5];
              if (v17[5])
              {
                v17[6] = __s[6];
                if (v17[6])
                  v17[7] = 0;
              }
            }
          }
        }
      }
    }
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = atoi(v17);
    v4 = *(_QWORD *)(a1 + 40);
    if (!v4 || (*(_BYTE *)(v4 + 529) & 1) == 0)
    {
      if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
        dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
      v5 = gprivacy_proxyLogObj;
      if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_INFO))
      {
        v6 = "";
        v7 = *(_QWORD *)(a1 + 40);
        v8 = v7 == 0;
        if (v7)
          v9 = (const char *)(v7 + 531);
        else
          v9 = "";
        if (!v8)
          v6 = " ";
        v10 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
        v11 = 136446722;
        v12 = v9;
        v13 = 2080;
        v14 = v6;
        v15 = 1024;
        v16 = v10;
        _os_log_impl(&dword_182FBE000, v5, OS_LOG_TYPE_INFO, "%{public}s%sReceived epoch value of %d", (uint8_t *)&v11, 0x1Cu);
      }
    }
  }
}

void ___ZL33nw_masque_handle_connect_responseP9nw_masqueP20nw_protocol_metadata_block_invoke_172(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  _BOOL4 v4;
  const char *v5;
  int v6;
  const char *v7;
  int v8;
  const char *v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  if (!v2 || (*(_BYTE *)(v2 + 529) & 1) == 0)
  {
    if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
      dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
    v3 = gprivacy_proxyLogObj;
    v4 = os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR);
    v2 = *(_QWORD *)(a1 + 32);
    if (v4)
    {
      v5 = (const char *)(v2 + 531);
      if (!v2)
        v5 = "";
      v6 = *(unsigned __int16 *)(a1 + 40);
      v8 = 136446722;
      v9 = v5;
      v7 = " ";
      if (!v2)
        v7 = "";
      v10 = 2080;
      v11 = v7;
      v12 = 1024;
      v13 = v6;
      _os_log_impl(&dword_182FBE000, v3, OS_LOG_TYPE_ERROR, "%{public}s%sCONNECT response %u timed out waiting for certificates, failing", (uint8_t *)&v8, 0x1Cu);
      v2 = *(_QWORD *)(a1 + 32);
    }
  }
  nw_masque_mark_failed_with_error(v2, 61);
}

uint64_t ___ZL50nw_protocol_masque_listener_finalize_output_framesP11nw_protocolP16nw_frame_array_s_block_invoke(uint64_t a1, _DWORD *a2)
{
  int v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  const char *v14;
  const char *v15;
  const char *v16;
  NSObject *v17;
  uint32_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  const char *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  const char *v28;
  int v29;
  int v30;
  int v31;
  uint8_t buf[4];
  const char *v33;
  __int16 v34;
  const char *v35;
  __int16 v36;
  int v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v4 = nw_frame_unclaimed_length(a2);
  v31 = 0;
  nw_frame_get_buffer((uint64_t)a2, &v31);
  v6 = v31 - v4;
  if (v31 - v4 == 19 || v6 == 7)
  {
    nw_frame_unclaim((uint64_t)a2, v5, v6, 0);
    return 1;
  }
  if (!nw_frame_unclaim((uint64_t)a2, v5, 7u, 0))
  {
    v19 = *(_QWORD *)(a1 + 40);
    if (v19 && (*(_BYTE *)(v19 + 529) & 1) != 0)
      return 1;
    if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
      dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
    v20 = gprivacy_proxyLogObj;
    if (!os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
      return 1;
    v21 = *(_QWORD *)(a1 + 40);
    if (v21)
      v22 = (const char *)(v21 + 531);
    else
      v22 = "";
    if (v21)
      v23 = " ";
    else
      v23 = "";
    v24 = nw_frame_unclaimed_length(a2);
    *(_DWORD *)buf = 136446722;
    v33 = v22;
    v34 = 2080;
    v35 = v23;
    v36 = 1024;
    v37 = v24;
    v16 = "%{public}s%sFrame is too short for header (%u)";
LABEL_47:
    v17 = v20;
    v18 = 28;
LABEL_48:
    _os_log_impl(&dword_182FBE000, v17, OS_LOG_TYPE_ERROR, v16, buf, v18);
    return 1;
  }
  v30 = 0;
  if (*(_BYTE *)nw_frame_unclaimed_bytes((uint64_t)a2, &v30) == 4)
    return 1;
  if (!nw_frame_unclaim((uint64_t)a2, v9, 0xCu, 0))
  {
    v25 = *(_QWORD *)(a1 + 40);
    if (v25 && (*(_BYTE *)(v25 + 529) & 1) != 0)
      return 1;
    if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
      dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
    v20 = gprivacy_proxyLogObj;
    if (!os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
      return 1;
    v26 = *(_QWORD *)(a1 + 40);
    if (v26)
      v27 = (const char *)(v26 + 531);
    else
      v27 = "";
    if (v26)
      v28 = " ";
    else
      v28 = "";
    v29 = nw_frame_unclaimed_length(a2);
    *(_DWORD *)buf = 136446722;
    v33 = v27;
    v34 = 2080;
    v35 = v28;
    v36 = 1024;
    v37 = v29;
    v16 = "%{public}s%sFrame did not contain expected IP version, too short for IPv6 (%u)";
    goto LABEL_47;
  }
  if (*(_BYTE *)nw_frame_unclaimed_bytes((uint64_t)a2, &v30) != 6)
  {
    v10 = *(_QWORD *)(a1 + 40);
    if (!v10 || (*(_BYTE *)(v10 + 529) & 1) == 0)
    {
      if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
        dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
      v11 = gprivacy_proxyLogObj;
      if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
      {
        v12 = *(_QWORD *)(a1 + 40);
        v13 = v12 == 0;
        if (v12)
          v14 = (const char *)(v12 + 531);
        else
          v14 = "";
        v15 = " ";
        if (v13)
          v15 = "";
        *(_DWORD *)buf = 136446466;
        v33 = v14;
        v34 = 2080;
        v35 = v15;
        v16 = "%{public}s%sFrame did not contain expected IP version";
        v17 = v11;
        v18 = 22;
        goto LABEL_48;
      }
    }
  }
  return 1;
}

uint64_t ___ZL45nw_protocol_masque_listener_get_output_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  const char *v10;
  BOOL v11;
  const char *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  _QWORD *v21;
  const sockaddr *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  const sockaddr *address;
  unsigned int v28;
  uint8_t buf[4];
  const char *v30;
  __int16 v31;
  const char *v32;
  __int16 v33;
  unsigned int v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v28 = 0;
  v4 = (_BYTE *)nw_frame_unclaimed_bytes(a2, &v28);
  v5 = v4;
  v6 = *(unsigned __int8 *)(a1 + 72);
  if (v6 == 2)
  {
    if (v28 <= 6)
    {
      v14 = *(_QWORD *)(a1 + 40);
      if (v14 && (*(_BYTE *)(v14 + 529) & 1) != 0)
        goto LABEL_38;
      if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
        dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
      v8 = gprivacy_proxyLogObj;
      if (!os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
        goto LABEL_38;
      v15 = *(_QWORD *)(a1 + 40);
      v10 = "";
      v16 = v15 == 0;
      if (v15)
        v12 = (const char *)(v15 + 531);
      else
        v12 = "";
      v13 = v28;
      *(_DWORD *)buf = 136446722;
      if (!v16)
        v10 = " ";
      goto LABEL_37;
    }
    *v4 = 4;
    address = nw_endpoint_get_address(*(nw_endpoint_t *)(*(_QWORD *)(a1 + 56) + 16));
    *(_DWORD *)(v5 + 1) = *(_DWORD *)&address->sa_data[2];
    *(_WORD *)(v5 + 5) = *(_WORD *)address->sa_data;
    v24 = a2;
    v25 = 7;
LABEL_44:
    nw_frame_claim(v24, v23, v25, 0);
    return 1;
  }
  if (v6 != 30)
  {
    v17 = *(_QWORD *)(a1 + 40);
    if (v17 && (*(_BYTE *)(v17 + 529) & 1) != 0)
      goto LABEL_38;
    if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
      dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
    v8 = gprivacy_proxyLogObj;
    if (!os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
      goto LABEL_38;
    v18 = *(_QWORD *)(a1 + 40);
    v10 = "";
    v19 = v18 == 0;
    if (v18)
      v12 = (const char *)(v18 + 531);
    else
      v12 = "";
    v13 = v28;
    *(_DWORD *)buf = 136446722;
    if (!v19)
      v10 = " ";
    goto LABEL_37;
  }
  if (v28 > 0x12)
  {
    *v4 = 6;
    v22 = nw_endpoint_get_address(*(nw_endpoint_t *)(*(_QWORD *)(a1 + 56) + 16));
    *(sockaddr *)(v5 + 1) = *(sockaddr *)&v22->sa_data[6];
    *(_WORD *)(v5 + 17) = *(_WORD *)v22->sa_data;
    v24 = a2;
    v25 = 19;
    goto LABEL_44;
  }
  v7 = *(_QWORD *)(a1 + 40);
  if (v7 && (*(_BYTE *)(v7 + 529) & 1) != 0)
    goto LABEL_38;
  if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
    dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
  v8 = gprivacy_proxyLogObj;
  if (!os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
    goto LABEL_38;
  v9 = *(_QWORD *)(a1 + 40);
  v10 = "";
  v11 = v9 == 0;
  if (v9)
    v12 = (const char *)(v9 + 531);
  else
    v12 = "";
  v13 = v28;
  *(_DWORD *)buf = 136446722;
  if (!v11)
    v10 = " ";
LABEL_37:
  v30 = v12;
  v31 = 2080;
  v32 = v10;
  v33 = 1024;
  v34 = v13;
  _os_log_impl(&dword_182FBE000, v8, OS_LOG_TYPE_ERROR, "%{public}s%sFrame is too short for header (%u)", buf, 0x1Cu);
LABEL_38:
  v20 = *(_QWORD *)(a2 + 32);
  v21 = *(_QWORD **)(a2 + 40);
  if (v20)
  {
    *(_QWORD *)(v20 + 40) = v21;
    v21 = *(_QWORD **)(a2 + 40);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) = v21;
  }
  *v21 = v20;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  --*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return 1;
}

uint64_t ___ZL34nw_masque_save_connection_metadataP9nw_masqueP11nw_protocol_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  if (nw_protocol_metadata_is_http_connection(a3))
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = a3;
  return 1;
}

uint64_t ___ZL31nw_masque_options_get_fast_openP19nw_protocol_options_block_invoke(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(a2 + 33);
}

void nw_masque_protocol_destroy(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  os_unfair_lock_s *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  NSObject *v29;
  NSObject *v30;
  NSObject *v31;
  NSObject *v32;
  const void *v33;
  NSObject *v34;
  _QWORD v35[5];
  _BYTE buf[24];
  const char *v37;
  uint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a1 + 40) != a1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_masque_protocol_destroy";
    v2 = (void *)_os_log_send_and_compose_impl();
    if (__nwlog_abort((uint64_t)v2))
    {
      __break(1u);
LABEL_63:
      dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44213);
      goto LABEL_60;
    }
    free(v2);
  }
  if ((*(_BYTE *)(a1 + 529) & 1) != 0 || !gLogDatapath)
    goto LABEL_6;
  if (__nwlog_privacy_proxy_log::onceToken[0] != -1)
    goto LABEL_63;
LABEL_60:
  v34 = gprivacy_proxyLogObj;
  if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136446722;
    *(_QWORD *)&buf[4] = "nw_masque_protocol_destroy";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = a1 + 531;
    *(_WORD *)&buf[22] = 2080;
    v37 = " ";
    _os_log_impl(&dword_182FBE000, v34, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sDestroying protocol", buf, 0x20u);
  }
LABEL_6:
  nw_protocol_remove_instance(a1);
  v4 = *(_QWORD *)(a1 + 352);
  if (v4)
  {
    nw_queue_cancel_source(v4, v3);
    *(_QWORD *)(a1 + 352) = 0;
  }
  v5 = *(_QWORD *)(a1 + 256);
  if (v5)
  {
    do
    {
      v6 = *(_QWORD *)(v5 + 16);
      nw_frame_finalize(v5);
      v5 = v6;
    }
    while (v6);
  }
  v7 = *(char **)(a1 + 480);
  v8 = MEMORY[0x1E0C809B0];
  if (v7)
  {
    v35[0] = MEMORY[0x1E0C809B0];
    v35[1] = 0x40000000;
    v35[2] = ___ZL26nw_masque_protocol_destroyP9nw_masque_block_invoke_2;
    v35[3] = &__block_descriptor_tmp_49_27939;
    v35[4] = a1;
    nw_hash_table_apply(v7, (uint64_t)v35);
    v10 = *(os_unfair_lock_s **)(a1 + 480);
    if (v10)
    {
      _nw_hash_table_release(v10, v9);
      *(_QWORD *)(a1 + 480) = 0;
    }
  }
  v11 = *(_QWORD *)(a1 + 464);
  if (v11)
  {
    *(_QWORD *)buf = v8;
    *(_QWORD *)&buf[8] = 0x40000000;
    *(_QWORD *)&buf[16] = ___ZL32nw_masque_listener_set_callbacksP20nw_protocol_metadataPv_block_invoke;
    v37 = (const char *)&__block_descriptor_tmp_50;
    v38 = 0;
    v12 = *(_QWORD *)(v11 + 32);
    if (v12)
      ___ZL32nw_masque_listener_set_callbacksP20nw_protocol_metadataPv_block_invoke((uint64_t)buf, v12);
  }
  v13 = *(_QWORD **)(a1 + 472);
  if (v13)
  {
    *(_QWORD *)buf = v8;
    *(_QWORD *)&buf[8] = 0x40000000;
    *(_QWORD *)&buf[16] = ___ZL23nw_masque_set_callbacksP20nw_protocol_metadataPv_block_invoke;
    v37 = (const char *)&__block_descriptor_tmp_184;
    v38 = 0;
    v14 = v13[4];
    if (!v14
      || (___ZL23nw_masque_set_callbacksP20nw_protocol_metadataPv_block_invoke((uint64_t)buf, v14),
          (v13 = *(_QWORD **)(a1 + 472)) != 0))
    {
      os_release(v13);
      *(_QWORD *)(a1 + 472) = 0;
    }
  }
  v15 = *(void **)(a1 + 488);
  if (v15)
  {
    os_release(v15);
    *(_QWORD *)(a1 + 488) = 0;
  }
  v16 = *(void **)(a1 + 464);
  if (v16)
  {
    os_release(v16);
    *(_QWORD *)(a1 + 464) = 0;
  }
  v17 = *(void **)(a1 + 304);
  if (v17)
  {
    os_release(v17);
    *(_QWORD *)(a1 + 304) = 0;
  }
  v18 = *(void **)(a1 + 312);
  if (v18)
  {
    os_release(v18);
    *(_QWORD *)(a1 + 312) = 0;
  }
  v19 = *(void **)(a1 + 320);
  if (v19)
  {
    os_release(v19);
    *(_QWORD *)(a1 + 320) = 0;
  }
  v20 = *(void **)(a1 + 328);
  if (v20)
  {
    os_release(v20);
    *(_QWORD *)(a1 + 328) = 0;
  }
  v21 = *(void **)(a1 + 336);
  if (v21)
  {
    os_release(v21);
    *(_QWORD *)(a1 + 336) = 0;
  }
  v22 = *(void **)(a1 + 344);
  if (v22)
  {
    os_release(v22);
    *(_QWORD *)(a1 + 344) = 0;
  }
  v23 = *(void **)(a1 + 424);
  if (v23)
  {
    os_release(v23);
    *(_QWORD *)(a1 + 424) = 0;
  }
  v24 = *(void **)(a1 + 416);
  if (v24)
  {
    os_release(v24);
    *(_QWORD *)(a1 + 416) = 0;
  }
  v25 = *(void **)(a1 + 456);
  if (v25)
  {
    os_release(v25);
    *(_QWORD *)(a1 + 456) = 0;
  }
  v26 = *(void **)(a1 + 360);
  if (v26)
  {
    os_release(v26);
    *(_QWORD *)(a1 + 360) = 0;
  }
  v27 = *(void **)(a1 + 368);
  if (v27)
  {
    os_release(v27);
    *(_QWORD *)(a1 + 368) = 0;
  }
  v28 = *(void **)(a1 + 376);
  if (v28)
  {
    os_release(v28);
    *(_QWORD *)(a1 + 376) = 0;
  }
  v29 = *(NSObject **)(a1 + 384);
  if (v29)
  {
    dispatch_release(v29);
    *(_QWORD *)(a1 + 384) = 0;
  }
  v30 = *(NSObject **)(a1 + 392);
  if (v30)
  {
    dispatch_release(v30);
    *(_QWORD *)(a1 + 392) = 0;
  }
  v31 = *(NSObject **)(a1 + 400);
  if (v31)
  {
    dispatch_release(v31);
    *(_QWORD *)(a1 + 400) = 0;
  }
  v32 = *(NSObject **)(a1 + 408);
  if (v32)
  {
    dispatch_release(v32);
    *(_QWORD *)(a1 + 408) = 0;
  }
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 496) + 16))(*(_QWORD *)(a1 + 496), 0);
  v33 = *(const void **)(a1 + 496);
  if (v33)
    _Block_release(v33);
  free((void *)a1);
}

uint64_t ___ZL26nw_masque_protocol_destroyP9nw_masque_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t *extra;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  extra = (uint64_t *)nw_hash_node_get_extra(a2);
  v3 = *extra;
  if (*extra)
  {
    do
    {
      v4 = *(_QWORD *)(v3 + 32);
      nw_frame_finalize(v3);
      v3 = v4;
    }
    while (v4);
  }
  v5 = (void *)extra[2];
  if (v5)
  {
    os_release(v5);
    extra[2] = 0;
  }
  return 1;
}

double ___ZL38nw_protocol_masque_listener_identifierv_block_invoke()
{
  double result;

  qword_1EDCE4B70 = 0;
  unk_1EDCE4B78 = 0;
  strcpy((char *)&nw_protocol_masque_listener_identifier(void)::g_masque_protocol_identifier, "masque_listener");
  *(_QWORD *)&result = 0x200000005;
  qword_1EDCE4B80 = 0x200000005;
  return result;
}

BOOL nw_masque_add_additional_demux_pattern(void *a1, uint64_t a2)
{
  _BOOL8 is_masque;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  const char *v9;
  char *backtrace_string;
  _BOOL4 v11;
  _QWORD v12[5];
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  is_masque = nw_protocol_metadata_is_masque(a1);
  if (is_masque)
  {
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 0x40000000;
    v12[2] = __nw_masque_add_additional_demux_pattern_block_invoke;
    v12[3] = &__block_descriptor_tmp_3_28019;
    v12[4] = a2;
    nw_protocol_metadata_access_handle((uint64_t)a1, (uint64_t)v12);
    return is_masque;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_masque_add_additional_demux_pattern";
  v6 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v7 = __nwlog_obj();
      v8 = type;
      if (!os_log_type_enabled(v7, type))
        goto LABEL_18;
      *(_DWORD *)buf = 136446210;
      v16 = "nw_masque_add_additional_demux_pattern";
      v9 = "%{public}s called with null nw_protocol_metadata_is_masque(metadata)";
      goto LABEL_17;
    }
    if (!v13)
    {
      v7 = __nwlog_obj();
      v8 = type;
      if (!os_log_type_enabled(v7, type))
        goto LABEL_18;
      *(_DWORD *)buf = 136446210;
      v16 = "nw_masque_add_additional_demux_pattern";
      v9 = "%{public}s called with null nw_protocol_metadata_is_masque(metadata), backtrace limit exceeded";
      goto LABEL_17;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v7 = __nwlog_obj();
    v8 = type;
    v11 = os_log_type_enabled(v7, type);
    if (backtrace_string)
    {
      if (v11)
      {
        *(_DWORD *)buf = 136446466;
        v16 = "nw_masque_add_additional_demux_pattern";
        v17 = 2082;
        v18 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null nw_protocol_metadata_is_masque(metadata), dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_18;
    }
    if (v11)
    {
      *(_DWORD *)buf = 136446210;
      v16 = "nw_masque_add_additional_demux_pattern";
      v9 = "%{public}s called with null nw_protocol_metadata_is_masque(metadata), no backtrace";
LABEL_17:
      _os_log_impl(&dword_182FBE000, v7, v8, v9, buf, 0xCu);
    }
  }
LABEL_18:
  if (v6)
    free(v6);
  return is_masque;
}

BOOL nw_protocol_metadata_is_masque(void *a1)
{
  id *v1;
  id v2;
  void *v3;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  const char *v8;
  char *backtrace_string;
  _BOOL4 v10;
  char v11;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v1 = a1;
    v2 = v1[1];

    if (nw_protocol_masque_get_definition(void)::onceToken != -1)
      dispatch_once(&nw_protocol_masque_get_definition(void)::onceToken, &__block_literal_global_27122);
    if (nw_protocol_masque_get_definition(void)::definition)
      v3 = os_retain((void *)nw_protocol_masque_get_definition(void)::definition);
    else
      v3 = 0;
    return nw_protocol_definition_is_equal_unsafe((uint64_t)v2, (uint64_t)v3);
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v14 = "nw_protocol_metadata_is_masque";
  v5 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v11 = 0;
  if (__nwlog_fault(v5, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v6 = __nwlog_obj();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_protocol_metadata_is_masque";
        v8 = "%{public}s called with null metadata";
LABEL_21:
        _os_log_impl(&dword_182FBE000, v6, v7, v8, buf, 0xCu);
      }
    }
    else if (v11)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v6 = __nwlog_obj();
      v7 = type;
      v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          v14 = "nw_protocol_metadata_is_masque";
          v15 = 2082;
          v16 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_22;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_protocol_metadata_is_masque";
        v8 = "%{public}s called with null metadata, no backtrace";
        goto LABEL_21;
      }
    }
    else
    {
      v6 = __nwlog_obj();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_protocol_metadata_is_masque";
        v8 = "%{public}s called with null metadata, backtrace limit exceeded";
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  if (v5)
    free(v5);
  return 0;
}

uint64_t __nw_masque_add_additional_demux_pattern_block_invoke(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_s *v4;

  v4 = (os_unfair_lock_s *)(a2 + 8);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 8));
  nw_masque_send_demux_options(*(_QWORD *)a2, *(void **)(a1 + 32), 0);
  os_unfair_lock_unlock(v4);
  return 1;
}

void *nw_protocol_masque_copy_definition()
{
  void *v0;

  if (nw_protocol_masque_get_definition(void)::onceToken != -1)
    dispatch_once(&nw_protocol_masque_get_definition(void)::onceToken, &__block_literal_global_27122);
  if (nw_protocol_masque_get_definition(void)::definition
    && (v0 = os_retain((void *)nw_protocol_masque_get_definition(void)::definition)) != 0)
  {
    return os_retain(v0);
  }
  else
  {
    return 0;
  }
}

void *nw_protocol_masque_listener_copy_definition()
{
  void *v0;

  if (nw_protocol_masque_listener_get_definition(void)::onceToken[0] != -1)
    dispatch_once(nw_protocol_masque_listener_get_definition(void)::onceToken, &__block_literal_global_186);
  if (nw_protocol_masque_listener_get_definition(void)::definition
    && (v0 = os_retain((void *)nw_protocol_masque_listener_get_definition(void)::definition)) != 0)
  {
    return os_retain(v0);
  }
  else
  {
    return 0;
  }
}

BOOL nw_protocol_options_is_masque(void *a1)
{
  void *v2;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  const char *v8;
  char *backtrace_string;
  _BOOL4 v10;
  char v11;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (nw_protocol_masque_get_definition(void)::onceToken != -1)
      dispatch_once(&nw_protocol_masque_get_definition(void)::onceToken, &__block_literal_global_27122);
    if (nw_protocol_masque_get_definition(void)::definition)
      v2 = os_retain((void *)nw_protocol_masque_get_definition(void)::definition);
    else
      v2 = 0;
    if (nw_protocol_options_matches_definition(a1, v2))
      return 1;
    if (nw_protocol_masque_listener_get_definition(void)::onceToken[0] != -1)
      dispatch_once(nw_protocol_masque_listener_get_definition(void)::onceToken, &__block_literal_global_186);
    if (nw_protocol_masque_listener_get_definition(void)::definition)
      v4 = os_retain((void *)nw_protocol_masque_listener_get_definition(void)::definition);
    else
      v4 = 0;
    return nw_protocol_options_matches_definition(a1, v4);
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v14 = "nw_protocol_options_is_masque";
  v5 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v11 = 0;
  if (__nwlog_fault(v5, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v6 = __nwlog_obj();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_protocol_options_is_masque";
        v8 = "%{public}s called with null options";
LABEL_28:
        _os_log_impl(&dword_182FBE000, v6, v7, v8, buf, 0xCu);
      }
    }
    else if (v11)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v6 = __nwlog_obj();
      v7 = type;
      v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          v14 = "nw_protocol_options_is_masque";
          v15 = 2082;
          v16 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_29;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_protocol_options_is_masque";
        v8 = "%{public}s called with null options, no backtrace";
        goto LABEL_28;
      }
    }
    else
    {
      v6 = __nwlog_obj();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_protocol_options_is_masque";
        v8 = "%{public}s called with null options, backtrace limit exceeded";
        goto LABEL_28;
      }
    }
  }
LABEL_29:
  if (v5)
    free(v5);
  return 0;
}

void nw_masque_options_set_target_endpoint(void *a1, uint64_t a2)
{
  char *v2;
  NSObject *v3;
  os_log_type_t v4;
  const char *v5;
  char *backtrace_string;
  _BOOL4 v7;
  _QWORD v8[5];
  char v9;
  os_log_type_t v10;
  uint8_t buf[4];
  const char *v12;
  __int16 v13;
  char *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v8[0] = MEMORY[0x1E0C809B0];
    v8[1] = 0x40000000;
    v8[2] = __nw_masque_options_set_target_endpoint_block_invoke;
    v8[3] = &__block_descriptor_tmp_4_28039;
    v8[4] = a2;
    nw_protocol_options_access_handle(a1, v8);
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v12 = "nw_masque_options_set_target_endpoint";
  v2 = (char *)_os_log_send_and_compose_impl();
  v10 = OS_LOG_TYPE_ERROR;
  v9 = 0;
  if (__nwlog_fault(v2, &v10, &v9))
  {
    if (v10 == OS_LOG_TYPE_FAULT)
    {
      v3 = __nwlog_obj();
      v4 = v10;
      if (!os_log_type_enabled(v3, v10))
        goto LABEL_18;
      *(_DWORD *)buf = 136446210;
      v12 = "nw_masque_options_set_target_endpoint";
      v5 = "%{public}s called with null options";
      goto LABEL_17;
    }
    if (!v9)
    {
      v3 = __nwlog_obj();
      v4 = v10;
      if (!os_log_type_enabled(v3, v10))
        goto LABEL_18;
      *(_DWORD *)buf = 136446210;
      v12 = "nw_masque_options_set_target_endpoint";
      v5 = "%{public}s called with null options, backtrace limit exceeded";
      goto LABEL_17;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v3 = __nwlog_obj();
    v4 = v10;
    v7 = os_log_type_enabled(v3, v10);
    if (backtrace_string)
    {
      if (v7)
      {
        *(_DWORD *)buf = 136446466;
        v12 = "nw_masque_options_set_target_endpoint";
        v13 = 2082;
        v14 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v3, v4, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_18;
    }
    if (v7)
    {
      *(_DWORD *)buf = 136446210;
      v12 = "nw_masque_options_set_target_endpoint";
      v5 = "%{public}s called with null options, no backtrace";
LABEL_17:
      _os_log_impl(&dword_182FBE000, v3, v4, v5, buf, 0xCu);
    }
  }
LABEL_18:
  if (v2)
    free(v2);
}

uint64_t __nw_masque_options_set_target_endpoint_block_invoke(uint64_t a1, _QWORD *a2)
{
  void *v3;

  v3 = *(void **)(a1 + 32);
  if (v3)
    v3 = os_retain(v3);
  *a2 = v3;
  return 1;
}

uint64_t nw_masque_options_copy_target_endpoint(void *a1)
{
  uint64_t v1;
  char *v3;
  NSObject *v4;
  os_log_type_t v5;
  const char *v6;
  char *backtrace_string;
  _BOOL4 v8;
  _QWORD v9[5];
  char v10;
  os_log_type_t type;
  _BYTE buf[24];
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x2000000000;
    v13 = 0;
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 0x40000000;
    v9[2] = __nw_masque_options_copy_target_endpoint_block_invoke;
    v9[3] = &unk_1E149E330;
    v9[4] = buf;
    nw_protocol_options_access_handle(a1, v9);
    v1 = *(_QWORD *)(*(_QWORD *)&buf[8] + 24);
    _Block_object_dispose(buf, 8);
    return v1;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_masque_options_copy_target_endpoint";
  v3 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v10 = 0;
  if (__nwlog_fault(v3, &type, &v10))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_masque_options_copy_target_endpoint";
        v6 = "%{public}s called with null options";
LABEL_17:
        _os_log_impl(&dword_182FBE000, v4, v5, v6, buf, 0xCu);
      }
    }
    else if (v10)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v4 = __nwlog_obj();
      v5 = type;
      v8 = os_log_type_enabled(v4, type);
      if (backtrace_string)
      {
        if (v8)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_masque_options_copy_target_endpoint";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v4, v5, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_18;
      }
      if (v8)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_masque_options_copy_target_endpoint";
        v6 = "%{public}s called with null options, no backtrace";
        goto LABEL_17;
      }
    }
    else
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_masque_options_copy_target_endpoint";
        v6 = "%{public}s called with null options, backtrace limit exceeded";
        goto LABEL_17;
      }
    }
  }
LABEL_18:
  if (v3)
    free(v3);
  return 0;
}

void nw_masque_options_set_forced_protocol(void *a1, int a2)
{
  char *v2;
  NSObject *v3;
  os_log_type_t v4;
  const char *v5;
  char *backtrace_string;
  _BOOL4 v7;
  _QWORD v8[4];
  int v9;
  char v10;
  os_log_type_t v11;
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v8[0] = MEMORY[0x1E0C809B0];
    v8[1] = 0x40000000;
    v8[2] = __nw_masque_options_set_forced_protocol_block_invoke;
    v8[3] = &__block_descriptor_tmp_6_28050;
    v9 = a2;
    nw_protocol_options_access_handle(a1, v8);
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v13 = "nw_masque_options_set_forced_protocol";
  v2 = (char *)_os_log_send_and_compose_impl();
  v11 = OS_LOG_TYPE_ERROR;
  v10 = 0;
  if (__nwlog_fault(v2, &v11, &v10))
  {
    if (v11 == OS_LOG_TYPE_FAULT)
    {
      v3 = __nwlog_obj();
      v4 = v11;
      if (!os_log_type_enabled(v3, v11))
        goto LABEL_18;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_masque_options_set_forced_protocol";
      v5 = "%{public}s called with null options";
      goto LABEL_17;
    }
    if (!v10)
    {
      v3 = __nwlog_obj();
      v4 = v11;
      if (!os_log_type_enabled(v3, v11))
        goto LABEL_18;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_masque_options_set_forced_protocol";
      v5 = "%{public}s called with null options, backtrace limit exceeded";
      goto LABEL_17;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v3 = __nwlog_obj();
    v4 = v11;
    v7 = os_log_type_enabled(v3, v11);
    if (backtrace_string)
    {
      if (v7)
      {
        *(_DWORD *)buf = 136446466;
        v13 = "nw_masque_options_set_forced_protocol";
        v14 = 2082;
        v15 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v3, v4, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_18;
    }
    if (v7)
    {
      *(_DWORD *)buf = 136446210;
      v13 = "nw_masque_options_set_forced_protocol";
      v5 = "%{public}s called with null options, no backtrace";
LABEL_17:
      _os_log_impl(&dword_182FBE000, v3, v4, v5, buf, 0xCu);
    }
  }
LABEL_18:
  if (v2)
    free(v2);
}

uint64_t __nw_masque_options_set_forced_protocol_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 28) = *(_DWORD *)(a1 + 32);
  return 1;
}

void nw_masque_options_set_allow_connect_ip(void *a1, char a2)
{
  char *v2;
  NSObject *v3;
  os_log_type_t v4;
  const char *v5;
  char *backtrace_string;
  _BOOL4 v7;
  _QWORD v8[4];
  char v9;
  char v10;
  os_log_type_t v11;
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v8[0] = MEMORY[0x1E0C809B0];
    v8[1] = 0x40000000;
    v8[2] = __nw_masque_options_set_allow_connect_ip_block_invoke;
    v8[3] = &__block_descriptor_tmp_7_28056;
    v9 = a2;
    nw_protocol_options_access_handle(a1, v8);
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v13 = "nw_masque_options_set_allow_connect_ip";
  v2 = (char *)_os_log_send_and_compose_impl();
  v11 = OS_LOG_TYPE_ERROR;
  v10 = 0;
  if (__nwlog_fault(v2, &v11, &v10))
  {
    if (v11 == OS_LOG_TYPE_FAULT)
    {
      v3 = __nwlog_obj();
      v4 = v11;
      if (!os_log_type_enabled(v3, v11))
        goto LABEL_18;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_masque_options_set_allow_connect_ip";
      v5 = "%{public}s called with null options";
      goto LABEL_17;
    }
    if (!v10)
    {
      v3 = __nwlog_obj();
      v4 = v11;
      if (!os_log_type_enabled(v3, v11))
        goto LABEL_18;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_masque_options_set_allow_connect_ip";
      v5 = "%{public}s called with null options, backtrace limit exceeded";
      goto LABEL_17;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v3 = __nwlog_obj();
    v4 = v11;
    v7 = os_log_type_enabled(v3, v11);
    if (backtrace_string)
    {
      if (v7)
      {
        *(_DWORD *)buf = 136446466;
        v13 = "nw_masque_options_set_allow_connect_ip";
        v14 = 2082;
        v15 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v3, v4, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_18;
    }
    if (v7)
    {
      *(_DWORD *)buf = 136446210;
      v13 = "nw_masque_options_set_allow_connect_ip";
      v5 = "%{public}s called with null options, no backtrace";
LABEL_17:
      _os_log_impl(&dword_182FBE000, v3, v4, v5, buf, 0xCu);
    }
  }
LABEL_18:
  if (v2)
    free(v2);
}

uint64_t __nw_masque_options_set_allow_connect_ip_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 32) = *(_BYTE *)(a1 + 32);
  return 1;
}

void nw_masque_options_set_fast_open(void *a1, char a2)
{
  char *v2;
  NSObject *v3;
  os_log_type_t v4;
  const char *v5;
  char *backtrace_string;
  _BOOL4 v7;
  _QWORD v8[4];
  char v9;
  char v10;
  os_log_type_t v11;
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v8[0] = MEMORY[0x1E0C809B0];
    v8[1] = 0x40000000;
    v8[2] = __nw_masque_options_set_fast_open_block_invoke;
    v8[3] = &__block_descriptor_tmp_8_28062;
    v9 = a2;
    nw_protocol_options_access_handle(a1, v8);
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v13 = "nw_masque_options_set_fast_open";
  v2 = (char *)_os_log_send_and_compose_impl();
  v11 = OS_LOG_TYPE_ERROR;
  v10 = 0;
  if (__nwlog_fault(v2, &v11, &v10))
  {
    if (v11 == OS_LOG_TYPE_FAULT)
    {
      v3 = __nwlog_obj();
      v4 = v11;
      if (!os_log_type_enabled(v3, v11))
        goto LABEL_18;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_masque_options_set_fast_open";
      v5 = "%{public}s called with null options";
      goto LABEL_17;
    }
    if (!v10)
    {
      v3 = __nwlog_obj();
      v4 = v11;
      if (!os_log_type_enabled(v3, v11))
        goto LABEL_18;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_masque_options_set_fast_open";
      v5 = "%{public}s called with null options, backtrace limit exceeded";
      goto LABEL_17;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v3 = __nwlog_obj();
    v4 = v11;
    v7 = os_log_type_enabled(v3, v11);
    if (backtrace_string)
    {
      if (v7)
      {
        *(_DWORD *)buf = 136446466;
        v13 = "nw_masque_options_set_fast_open";
        v14 = 2082;
        v15 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v3, v4, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_18;
    }
    if (v7)
    {
      *(_DWORD *)buf = 136446210;
      v13 = "nw_masque_options_set_fast_open";
      v5 = "%{public}s called with null options, no backtrace";
LABEL_17:
      _os_log_impl(&dword_182FBE000, v3, v4, v5, buf, 0xCu);
    }
  }
LABEL_18:
  if (v2)
    free(v2);
}

uint64_t __nw_masque_options_set_fast_open_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 33) = *(_BYTE *)(a1 + 32);
  return 1;
}

void nw_masque_options_add_extra_header(void *a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  NSObject *v4;
  os_log_type_t v5;
  const char *v6;
  char *backtrace_string;
  _BOOL4 v8;
  char *v9;
  _BOOL4 v10;
  const char *v11;
  _BOOL4 v12;
  _QWORD v13[6];
  char v14;
  os_log_type_t v15;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v17 = "nw_masque_options_add_extra_header";
    v3 = (char *)_os_log_send_and_compose_impl();
    v15 = OS_LOG_TYPE_ERROR;
    v14 = 0;
    if (!__nwlog_fault(v3, &v15, &v14))
      goto LABEL_47;
    if (v15 != OS_LOG_TYPE_FAULT)
    {
      if (!v14)
      {
        v4 = __nwlog_obj();
        v5 = v15;
        if (!os_log_type_enabled(v4, v15))
          goto LABEL_47;
        *(_DWORD *)buf = 136446210;
        v17 = "nw_masque_options_add_extra_header";
        v6 = "%{public}s called with null options, backtrace limit exceeded";
        goto LABEL_46;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v4 = __nwlog_obj();
      v5 = v15;
      v8 = os_log_type_enabled(v4, v15);
      if (!backtrace_string)
      {
        if (!v8)
          goto LABEL_47;
        *(_DWORD *)buf = 136446210;
        v17 = "nw_masque_options_add_extra_header";
        v6 = "%{public}s called with null options, no backtrace";
        goto LABEL_46;
      }
      if (v8)
      {
        *(_DWORD *)buf = 136446466;
        v17 = "nw_masque_options_add_extra_header";
        v18 = 2082;
        v19 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v4, v5, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_47;
    }
    v4 = __nwlog_obj();
    v5 = v15;
    if (!os_log_type_enabled(v4, v15))
      goto LABEL_47;
    *(_DWORD *)buf = 136446210;
    v17 = "nw_masque_options_add_extra_header";
    v6 = "%{public}s called with null options";
LABEL_46:
    _os_log_impl(&dword_182FBE000, v4, v5, v6, buf, 0xCu);
    goto LABEL_47;
  }
  if (a2)
  {
    if (a3)
    {
      v13[0] = MEMORY[0x1E0C809B0];
      v13[1] = 0x40000000;
      v13[2] = __nw_masque_options_add_extra_header_block_invoke;
      v13[3] = &__block_descriptor_tmp_9_28078;
      v13[4] = a2;
      v13[5] = a3;
      nw_protocol_options_access_handle(a1, v13);
      return;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v17 = "nw_masque_options_add_extra_header";
    v3 = (char *)_os_log_send_and_compose_impl();
    v15 = OS_LOG_TYPE_ERROR;
    v14 = 0;
    if (__nwlog_fault(v3, &v15, &v14))
    {
      if (v15 == OS_LOG_TYPE_FAULT)
      {
        v4 = __nwlog_obj();
        v5 = v15;
        if (!os_log_type_enabled(v4, v15))
          goto LABEL_47;
        *(_DWORD *)buf = 136446210;
        v17 = "nw_masque_options_add_extra_header";
        v6 = "%{public}s called with null value";
        goto LABEL_46;
      }
      if (!v14)
      {
        v4 = __nwlog_obj();
        v5 = v15;
        if (!os_log_type_enabled(v4, v15))
          goto LABEL_47;
        *(_DWORD *)buf = 136446210;
        v17 = "nw_masque_options_add_extra_header";
        v6 = "%{public}s called with null value, backtrace limit exceeded";
        goto LABEL_46;
      }
      v9 = (char *)__nw_create_backtrace_string();
      v4 = __nwlog_obj();
      v5 = v15;
      v12 = os_log_type_enabled(v4, v15);
      if (!v9)
      {
        if (!v12)
          goto LABEL_47;
        *(_DWORD *)buf = 136446210;
        v17 = "nw_masque_options_add_extra_header";
        v6 = "%{public}s called with null value, no backtrace";
        goto LABEL_46;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446466;
        v17 = "nw_masque_options_add_extra_header";
        v18 = 2082;
        v19 = v9;
        v11 = "%{public}s called with null value, dumping backtrace:%{public}s";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
LABEL_47:
    if (v3)
      goto LABEL_48;
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_masque_options_add_extra_header";
  v3 = (char *)_os_log_send_and_compose_impl();
  v15 = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (!__nwlog_fault(v3, &v15, &v14))
    goto LABEL_47;
  if (v15 == OS_LOG_TYPE_FAULT)
  {
    v4 = __nwlog_obj();
    v5 = v15;
    if (!os_log_type_enabled(v4, v15))
      goto LABEL_47;
    *(_DWORD *)buf = 136446210;
    v17 = "nw_masque_options_add_extra_header";
    v6 = "%{public}s called with null header";
    goto LABEL_46;
  }
  if (!v14)
  {
    v4 = __nwlog_obj();
    v5 = v15;
    if (!os_log_type_enabled(v4, v15))
      goto LABEL_47;
    *(_DWORD *)buf = 136446210;
    v17 = "nw_masque_options_add_extra_header";
    v6 = "%{public}s called with null header, backtrace limit exceeded";
    goto LABEL_46;
  }
  v9 = (char *)__nw_create_backtrace_string();
  v4 = __nwlog_obj();
  v5 = v15;
  v10 = os_log_type_enabled(v4, v15);
  if (!v9)
  {
    if (!v10)
      goto LABEL_47;
    *(_DWORD *)buf = 136446210;
    v17 = "nw_masque_options_add_extra_header";
    v6 = "%{public}s called with null header, no backtrace";
    goto LABEL_46;
  }
  if (v10)
  {
    *(_DWORD *)buf = 136446466;
    v17 = "nw_masque_options_add_extra_header";
    v18 = 2082;
    v19 = v9;
    v11 = "%{public}s called with null header, dumping backtrace:%{public}s";
LABEL_31:
    _os_log_impl(&dword_182FBE000, v4, v5, v11, buf, 0x16u);
  }
LABEL_32:
  free(v9);
  if (v3)
LABEL_48:
    free(v3);
}

uint64_t __nw_masque_options_add_extra_header_block_invoke(uint64_t a1, uint64_t a2)
{
  xpc_object_t v4;

  v4 = *(xpc_object_t *)(a2 + 8);
  if (!v4)
  {
    v4 = xpc_array_create(0, 0);
    *(_QWORD *)(a2 + 8) = v4;
    if (*(_QWORD *)(a2 + 16))
      goto LABEL_3;
LABEL_5:
    *(_QWORD *)(a2 + 16) = xpc_array_create(0, 0);
    v4 = *(xpc_object_t *)(a2 + 8);
    goto LABEL_3;
  }
  if (!*(_QWORD *)(a2 + 16))
    goto LABEL_5;
LABEL_3:
  xpc_array_set_string(v4, 0xFFFFFFFFFFFFFFFFLL, *(const char **)(a1 + 32));
  xpc_array_set_string(*(xpc_object_t *)(a2 + 16), 0xFFFFFFFFFFFFFFFFLL, *(const char **)(a1 + 40));
  return 1;
}

void nw_masque_options_set_version(void *a1, int a2)
{
  char *v2;
  NSObject *v3;
  os_log_type_t v4;
  const char *v5;
  char *v6;
  _BOOL4 v7;
  char *backtrace_string;
  _BOOL4 v9;
  _QWORD v10[4];
  int v11;
  char v12;
  os_log_type_t v13;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if ((a2 - 3) > 0xFFFFFFFD)
    {
      v10[0] = MEMORY[0x1E0C809B0];
      v10[1] = 0x40000000;
      v10[2] = __nw_masque_options_set_version_block_invoke;
      v10[3] = &__block_descriptor_tmp_10_28089;
      v11 = a2;
      nw_protocol_options_access_handle(a1, v10);
      return;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v15 = "nw_masque_options_set_version";
    v2 = (char *)_os_log_send_and_compose_impl();
    v13 = OS_LOG_TYPE_ERROR;
    v12 = 0;
    if (__nwlog_fault(v2, &v13, &v12))
    {
      if (v13 == OS_LOG_TYPE_FAULT)
      {
        v3 = __nwlog_obj();
        v4 = v13;
        if (!os_log_type_enabled(v3, v13))
          goto LABEL_33;
        *(_DWORD *)buf = 136446210;
        v15 = "nw_masque_options_set_version";
        v5 = "%{public}s called with null (version == nw_masque_version_draft_03 || version == nw_masque_version_rfc9298)";
        goto LABEL_32;
      }
      if (!v12)
      {
        v3 = __nwlog_obj();
        v4 = v13;
        if (!os_log_type_enabled(v3, v13))
          goto LABEL_33;
        *(_DWORD *)buf = 136446210;
        v15 = "nw_masque_options_set_version";
        v5 = "%{public}s called with null (version == nw_masque_version_draft_03 || version == nw_masque_version_rfc9298)"
             ", backtrace limit exceeded";
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v3 = __nwlog_obj();
      v4 = v13;
      v9 = os_log_type_enabled(v3, v13);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          v15 = "nw_masque_options_set_version";
          v16 = 2082;
          v17 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v3, v4, "%{public}s called with null (version == nw_masque_version_draft_03 || version == nw_masque_version_rfc9298), dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        if (v2)
          goto LABEL_34;
        return;
      }
      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_masque_options_set_version";
        v5 = "%{public}s called with null (version == nw_masque_version_draft_03 || version == nw_masque_version_rfc9298), no backtrace";
LABEL_32:
        _os_log_impl(&dword_182FBE000, v3, v4, v5, buf, 0xCu);
      }
    }
  }
  else
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v15 = "nw_masque_options_set_version";
    v2 = (char *)_os_log_send_and_compose_impl();
    v13 = OS_LOG_TYPE_ERROR;
    v12 = 0;
    if (!__nwlog_fault(v2, &v13, &v12))
      goto LABEL_33;
    if (v13 == OS_LOG_TYPE_FAULT)
    {
      v3 = __nwlog_obj();
      v4 = v13;
      if (!os_log_type_enabled(v3, v13))
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v15 = "nw_masque_options_set_version";
      v5 = "%{public}s called with null options";
      goto LABEL_32;
    }
    if (!v12)
    {
      v3 = __nwlog_obj();
      v4 = v13;
      if (!os_log_type_enabled(v3, v13))
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v15 = "nw_masque_options_set_version";
      v5 = "%{public}s called with null options, backtrace limit exceeded";
      goto LABEL_32;
    }
    v6 = (char *)__nw_create_backtrace_string();
    v3 = __nwlog_obj();
    v4 = v13;
    v7 = os_log_type_enabled(v3, v13);
    if (!v6)
    {
      if (!v7)
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v15 = "nw_masque_options_set_version";
      v5 = "%{public}s called with null options, no backtrace";
      goto LABEL_32;
    }
    if (v7)
    {
      *(_DWORD *)buf = 136446466;
      v15 = "nw_masque_options_set_version";
      v16 = 2082;
      v17 = v6;
      _os_log_impl(&dword_182FBE000, v3, v4, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v6);
  }
LABEL_33:
  if (v2)
LABEL_34:
    free(v2);
}

uint64_t __nw_masque_options_set_version_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 24) = *(_DWORD *)(a1 + 32);
  return 1;
}

NWConcrete_nw_protocol_options *nw_masque_options_copy_listener_options(void *a1)
{
  void *v2;
  NWConcrete_nw_protocol_options *options;
  id *v4;
  id v5;
  id *v6;
  char v7;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  const char *v12;
  char *backtrace_string;
  _BOOL4 v14;
  _QWORD v15[5];
  char v16;
  os_log_type_t v17;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (nw_protocol_masque_listener_get_definition(void)::onceToken[0] != -1)
      dispatch_once(nw_protocol_masque_listener_get_definition(void)::onceToken, &__block_literal_global_186);
    v2 = (void *)nw_protocol_masque_listener_get_definition(void)::definition;
    if (nw_protocol_masque_listener_get_definition(void)::definition)
    {
      v2 = os_retain((void *)nw_protocol_masque_listener_get_definition(void)::definition);
      if (v2)
        v2 = os_retain(v2);
    }
    options = nw_proxy_create_options(v2);
    v15[0] = MEMORY[0x1E0C809B0];
    v15[1] = 0x40000000;
    v15[2] = __nw_masque_options_copy_listener_options_block_invoke;
    v15[3] = &__block_descriptor_tmp_13_28095;
    v15[4] = options;
    nw_protocol_options_access_handle(a1, v15);
    v4 = a1;
    v5 = v4[3];

    v6 = v4;
    if (v4[3])
      v7 = *((_BYTE *)v6 + 152) != 0;
    else
      v7 = 0;

    nw_protocol_options_set_proxy_endpoint(options, v5, v7);
    return options;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v19 = "nw_masque_options_copy_listener_options";
  v9 = (char *)_os_log_send_and_compose_impl();
  v17 = OS_LOG_TYPE_ERROR;
  v16 = 0;
  if (__nwlog_fault(v9, &v17, &v16))
  {
    if (v17 == OS_LOG_TYPE_FAULT)
    {
      v10 = __nwlog_obj();
      v11 = v17;
      if (os_log_type_enabled(v10, v17))
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_masque_options_copy_listener_options";
        v12 = "%{public}s called with null options";
LABEL_25:
        _os_log_impl(&dword_182FBE000, v10, v11, v12, buf, 0xCu);
      }
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v10 = __nwlog_obj();
      v11 = v17;
      v14 = os_log_type_enabled(v10, v17);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          v19 = "nw_masque_options_copy_listener_options";
          v20 = 2082;
          v21 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_26;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_masque_options_copy_listener_options";
        v12 = "%{public}s called with null options, no backtrace";
        goto LABEL_25;
      }
    }
    else
    {
      v10 = __nwlog_obj();
      v11 = v17;
      if (os_log_type_enabled(v10, v17))
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_masque_options_copy_listener_options";
        v12 = "%{public}s called with null options, backtrace limit exceeded";
        goto LABEL_25;
      }
    }
  }
LABEL_26:
  if (v9)
    free(v9);
  return 0;
}

uint64_t __nw_masque_options_copy_listener_options_block_invoke(uint64_t a1, uint64_t a2)
{
  void *v2;
  _QWORD v4[5];

  v2 = *(void **)(a1 + 32);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = __nw_masque_options_copy_listener_options_block_invoke_2;
  v4[3] = &__block_descriptor_tmp_12_28096;
  v4[4] = a2;
  return nw_protocol_options_access_handle(v2, v4);
}

uint64_t __nw_masque_options_copy_listener_options_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(void **)v3;
  if (*(_QWORD *)v3)
    v4 = os_retain(v4);
  *(_QWORD *)a2 = v4;
  v5 = *(void **)(v3 + 8);
  if (v5)
    *(_QWORD *)(a2 + 8) = xpc_copy(v5);
  v6 = *(void **)(v3 + 16);
  if (v6)
    *(_QWORD *)(a2 + 16) = xpc_copy(v6);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(v3 + 24);
  *(_WORD *)(a2 + 32) = *(_WORD *)(v3 + 32);
  return 1;
}

void sub_183627680(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18362773C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1836278B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_183628FF0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_183629090(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_183629138(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1836291D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__28238(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__28239(uint64_t a1)
{

}

void sub_18362A39C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_18362A700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL nw_protocol_http_security_create(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  char *v5;
  id v6;
  char v7;
  void *v8;
  char server_mode;
  id v10;
  _BOOL8 result;
  NSObject *v12;
  void *v13;
  NSObject *v14;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v5 = (char *)malloc_type_calloc(1uLL, 0x268uLL, 0xEAFB8F1AuLL);
  if (!v5)
  {
    v12 = __nwlog_obj();
    os_log_type_enabled(v12, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446722;
    v16 = "strict_calloc";
    v17 = 2048;
    v18 = 1;
    v19 = 2048;
    v20 = 616;
    v13 = (void *)_os_log_send_and_compose_impl();
    result = __nwlog_abort((uint64_t)v13);
    if (result)
    {
      __break(1u);
      return result;
    }
    free(v13);
  }
  bzero(v5, 0x268uLL);
  if (gLogDatapath)
  {
    v14 = __nwlog_obj();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446722;
      v16 = "nw_protocol_http_security_create";
      v17 = 2082;
      v18 = (uint64_t)(v5 + 114);
      v19 = 2080;
      v20 = (uint64_t)" ";
      _os_log_impl(&dword_182FBE000, v14, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%scalled", buf, 0x20u);
    }
  }
  if (nw_protocol_http_security_identifier::onceToken != -1)
    dispatch_once(&nw_protocol_http_security_identifier::onceToken, &__block_literal_global_28368);
  *((_QWORD *)v5 + 2) = nw_protocol_http_security_identifier::protocol_identifier;
  if (nw_protocol_http_security_get_callbacks(void)::onceToken != -1)
    dispatch_once(&nw_protocol_http_security_get_callbacks(void)::onceToken, &__block_literal_global_55);
  *((_QWORD *)v5 + 3) = &nw_protocol_http_security_get_callbacks(void)::protocol_callbacks;
  *((_QWORD *)v5 + 5) = v5;
  v6 = nw_parameters_copy_context(a4);
  v7 = v5[600];
  if ((v7 & 1) != 0)
  {
    v8 = (void *)*((_QWORD *)v5 + 74);
    if (v8)
    {
      os_release(v8);
      v7 = v5[600];
    }
  }
  *((_QWORD *)v5 + 74) = v6;
  v5[600] = v7 | 1;
  server_mode = nw_parameters_get_server_mode(a4);
  *((_QWORD *)v5 + 25) = 0;
  v5[608] = v5[608] & 0xFE | server_mode;
  *((_QWORD *)v5 + 9) = v5 + 200;
  *((_QWORD *)v5 + 26) = v5 + 200;
  *((_QWORD *)v5 + 27) = 0;
  *((_QWORD *)v5 + 28) = v5 + 216;
  *((_QWORD *)v5 + 29) = 0;
  *((_QWORD *)v5 + 30) = v5 + 232;
  v5[340] = 2;
  if (nw_protocol_copy_http_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_11_72660);
  v10 = (id)nw_protocol_copy_http_definition_http_definition;
  nw_protocol_plugin_metadata_set_callbacks((uint64_t)v5, v10, (uint64_t)nw_protocol_http_security_create::$_0::__invoke, (uint64_t)nw_protocol_http_security_create::$_1::__invoke);
  if (v10)
    os_release(v10);
  *((_QWORD *)v5 + 11) = v5 + 344;
  nw_protocol_plugin_retry_set_callbacks((uint64_t)v5, (uint64_t)nw_protocol_http_security_create::$_2::__invoke, (uint64_t)nw_protocol_http_security_create::$_3::__invoke, (uint64_t)nw_protocol_http_security_create::$_4::__invoke, (uint64_t)nw_protocol_http_security_create::$_5::__invoke);
  *((_QWORD *)v5 + 8) = v5 + 104;
  nw_protocol_plugin_name_set_callbacks((uint64_t)v5, (uint64_t)nw_protocol_http_security_create::$_6::__invoke);
  return (BOOL)v5;
}

void nw_protocol_http_security_create::$_0::__invoke(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  void *v8;
  id v9;
  int have_field_with_name;
  void *parameters;
  unsigned __int8 *v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  void *v16;
  NSObject *v17;
  char *v18;
  NSObject *v19;
  os_log_type_t v20;
  const char *v21;
  char *backtrace_string;
  _BOOL4 v23;
  char *v24;
  _BOOL4 v25;
  const char *v26;
  _BOOL4 v27;
  _BOOL4 v28;
  _BOOL4 v29;
  NSObject *v30;
  char *v31;
  NSObject *v32;
  os_log_type_t v33;
  const char *v34;
  char *v35;
  _BOOL4 v36;
  char *v37;
  NSObject *v38;
  os_log_type_t v39;
  const char *v40;
  char *v41;
  _BOOL4 v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t (*v46)(uint64_t, uint64_t);
  void (*v47)(uint64_t);
  dispatch_object_t object;
  char v49;
  os_log_type_t v50[8];
  os_log_type_t *v51;
  uint64_t v52;
  uint64_t (*v53)(uint64_t, uint64_t);
  void (*v54)(uint64_t);
  void *v55;
  char v56;
  _QWORD v57[6];
  _QWORD v58[5];
  os_log_type_t type[8];
  os_log_type_t *v60;
  uint64_t v61;
  uint64_t (*v62)(uint64_t, uint64_t);
  void (*v63)(uint64_t);
  void *v64;
  char v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t (*v69)(uint64_t, uint64_t);
  void (*v70)(uint64_t);
  id v71;
  char v72;
  _BYTE block[24];
  const char *v74;
  _QWORD *v75;
  os_log_type_t *v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)block = 136446210;
    *(_QWORD *)&block[4] = "operator()";
    v18 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(v66) = 16;
    type[0] = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v18, &v66, type))
      goto LABEL_104;
    if (v66 != 17)
    {
      if (type[0] == OS_LOG_TYPE_DEFAULT)
      {
        v19 = __nwlog_obj();
        v20 = v66;
        if (!os_log_type_enabled(v19, (os_log_type_t)v66))
          goto LABEL_104;
        *(_DWORD *)block = 136446210;
        *(_QWORD *)&block[4] = "operator()";
        v21 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_103;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v19 = __nwlog_obj();
      v20 = v66;
      v23 = os_log_type_enabled(v19, (os_log_type_t)v66);
      if (!backtrace_string)
      {
        if (!v23)
          goto LABEL_104;
        *(_DWORD *)block = 136446210;
        *(_QWORD *)&block[4] = "operator()";
        v21 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_103;
      }
      if (v23)
      {
        *(_DWORD *)block = 136446466;
        *(_QWORD *)&block[4] = "operator()";
        *(_WORD *)&block[12] = 2082;
        *(_QWORD *)&block[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v19, v20, "%{public}s called with null protocol, dumping backtrace:%{public}s", block, 0x16u);
      }
      free(backtrace_string);
LABEL_104:
      if (v18)
        goto LABEL_105;
      return;
    }
    v19 = __nwlog_obj();
    v20 = v66;
    if (!os_log_type_enabled(v19, (os_log_type_t)v66))
      goto LABEL_104;
    *(_DWORD *)block = 136446210;
    *(_QWORD *)&block[4] = "operator()";
    v21 = "%{public}s called with null protocol";
    goto LABEL_103;
  }
  v5 = *(_QWORD *)(a1 + 40);
  if (!v5)
  {
    __nwlog_obj();
    *(_DWORD *)block = 136446210;
    *(_QWORD *)&block[4] = "operator()";
    v18 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(v66) = 16;
    type[0] = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v18, &v66, type))
      goto LABEL_104;
    if (v66 != 17)
    {
      if (type[0] == OS_LOG_TYPE_DEFAULT)
      {
        v19 = __nwlog_obj();
        v20 = v66;
        if (!os_log_type_enabled(v19, (os_log_type_t)v66))
          goto LABEL_104;
        *(_DWORD *)block = 136446210;
        *(_QWORD *)&block[4] = "operator()";
        v21 = "%{public}s called with null http_security, backtrace limit exceeded";
        goto LABEL_103;
      }
      v24 = (char *)__nw_create_backtrace_string();
      v19 = __nwlog_obj();
      v20 = v66;
      v25 = os_log_type_enabled(v19, (os_log_type_t)v66);
      if (!v24)
      {
        if (!v25)
          goto LABEL_104;
        *(_DWORD *)block = 136446210;
        *(_QWORD *)&block[4] = "operator()";
        v21 = "%{public}s called with null http_security, no backtrace";
        goto LABEL_103;
      }
      if (!v25)
        goto LABEL_79;
      *(_DWORD *)block = 136446466;
      *(_QWORD *)&block[4] = "operator()";
      *(_WORD *)&block[12] = 2082;
      *(_QWORD *)&block[14] = v24;
      v26 = "%{public}s called with null http_security, dumping backtrace:%{public}s";
      goto LABEL_78;
    }
    v19 = __nwlog_obj();
    v20 = v66;
    if (!os_log_type_enabled(v19, (os_log_type_t)v66))
      goto LABEL_104;
    *(_DWORD *)block = 136446210;
    *(_QWORD *)&block[4] = "operator()";
    v21 = "%{public}s called with null http_security";
LABEL_103:
    _os_log_impl(&dword_182FBE000, v19, v20, v21, block, 0xCu);
    goto LABEL_104;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)block = 136446210;
    *(_QWORD *)&block[4] = "operator()";
    v18 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(v66) = 16;
    type[0] = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v18, &v66, type))
      goto LABEL_104;
    if (v66 != 17)
    {
      if (type[0] == OS_LOG_TYPE_DEFAULT)
      {
        v19 = __nwlog_obj();
        v20 = v66;
        if (!os_log_type_enabled(v19, (os_log_type_t)v66))
          goto LABEL_104;
        *(_DWORD *)block = 136446210;
        *(_QWORD *)&block[4] = "operator()";
        v21 = "%{public}s called with null other_protocol, backtrace limit exceeded";
        goto LABEL_103;
      }
      v24 = (char *)__nw_create_backtrace_string();
      v19 = __nwlog_obj();
      v20 = v66;
      v27 = os_log_type_enabled(v19, (os_log_type_t)v66);
      if (!v24)
      {
        if (!v27)
          goto LABEL_104;
        *(_DWORD *)block = 136446210;
        *(_QWORD *)&block[4] = "operator()";
        v21 = "%{public}s called with null other_protocol, no backtrace";
        goto LABEL_103;
      }
      if (!v27)
        goto LABEL_79;
      *(_DWORD *)block = 136446466;
      *(_QWORD *)&block[4] = "operator()";
      *(_WORD *)&block[12] = 2082;
      *(_QWORD *)&block[14] = v24;
      v26 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
      goto LABEL_78;
    }
    v19 = __nwlog_obj();
    v20 = v66;
    if (!os_log_type_enabled(v19, (os_log_type_t)v66))
      goto LABEL_104;
    *(_DWORD *)block = 136446210;
    *(_QWORD *)&block[4] = "operator()";
    v21 = "%{public}s called with null other_protocol";
    goto LABEL_103;
  }
  if (!a3)
  {
    __nwlog_obj();
    *(_DWORD *)block = 136446210;
    *(_QWORD *)&block[4] = "operator()";
    v18 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(v66) = 16;
    type[0] = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v18, &v66, type))
      goto LABEL_104;
    if (v66 == 17)
    {
      v19 = __nwlog_obj();
      v20 = v66;
      if (!os_log_type_enabled(v19, (os_log_type_t)v66))
        goto LABEL_104;
      *(_DWORD *)block = 136446210;
      *(_QWORD *)&block[4] = "operator()";
      v21 = "%{public}s called with null metadata";
      goto LABEL_103;
    }
    if (type[0] == OS_LOG_TYPE_DEFAULT)
    {
      v19 = __nwlog_obj();
      v20 = v66;
      if (!os_log_type_enabled(v19, (os_log_type_t)v66))
        goto LABEL_104;
      *(_DWORD *)block = 136446210;
      *(_QWORD *)&block[4] = "operator()";
      v21 = "%{public}s called with null metadata, backtrace limit exceeded";
      goto LABEL_103;
    }
    v24 = (char *)__nw_create_backtrace_string();
    v19 = __nwlog_obj();
    v20 = v66;
    v28 = os_log_type_enabled(v19, (os_log_type_t)v66);
    if (!v24)
    {
      if (!v28)
        goto LABEL_104;
      *(_DWORD *)block = 136446210;
      *(_QWORD *)&block[4] = "operator()";
      v21 = "%{public}s called with null metadata, no backtrace";
      goto LABEL_103;
    }
    if (!v28)
      goto LABEL_79;
    *(_DWORD *)block = 136446466;
    *(_QWORD *)&block[4] = "operator()";
    *(_WORD *)&block[12] = 2082;
    *(_QWORD *)&block[14] = v24;
    v26 = "%{public}s called with null metadata, dumping backtrace:%{public}s";
LABEL_78:
    _os_log_impl(&dword_182FBE000, v19, v20, v26, block, 0x16u);
    goto LABEL_79;
  }
  if (a5)
  {
    if ((*(_BYTE *)(v5 + 608) & 1) != 0)
      goto LABEL_35;
    if ((*(_BYTE *)(v5 + 198) & 1) == 0)
    {
      if (gLogDatapath)
      {
        v30 = __nwlog_obj();
        if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)block = 136446722;
          *(_QWORD *)&block[4] = "nw_http_security_process_response";
          *(_WORD *)&block[12] = 2082;
          *(_QWORD *)&block[14] = v5 + 114;
          *(_WORD *)&block[22] = 2080;
          v74 = " ";
          _os_log_impl(&dword_182FBE000, v30, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%scalled", block, 0x20u);
        }
      }
    }
    if (!*(_QWORD *)(v5 + 560) || !*(_QWORD *)(v5 + 576) || nw_http_metadata_get_type(a3) == 3)
      goto LABEL_35;
    v66 = 0;
    v67 = &v66;
    v68 = 0x3802000000;
    v69 = __Block_byref_object_copy__28464;
    v70 = __Block_byref_object_dispose__28465;
    v71 = nw_http_metadata_copy_response(a3);
    v72 |= 1u;
    v8 = (void *)v67[5];
    if (v8)
    {
      v9 = v8;
      have_field_with_name = _nw_http_fields_have_field_with_name((uint64_t)v9, (unint64_t)"Strict-Transport-Security");

      if (!have_field_with_name
        || (parameters = (void *)nw_protocol_get_parameters(v5),
            (nw_parameters_is_third_party_web_content(parameters) & 1) != 0))
      {
LABEL_32:
        _Block_object_dispose(&v66, 8);
        if ((v72 & 1) != 0)
        {
          if (v71)
            os_release(v71);
        }
LABEL_35:
        (*(void (**)(uint64_t, uint64_t, void *))(a5 + 16))(a5, 1, a3);
        return;
      }
      v12 = (unsigned __int8 *)nw_protocol_copy_info(*(_QWORD *)(v5 + 32), 255);
      *(_QWORD *)type = 0;
      v60 = type;
      v61 = 0x3802000000;
      v62 = __Block_byref_object_copy__12_28471;
      v63 = __Block_byref_object_dispose__13_28472;
      v64 = 0;
      v13 = MEMORY[0x1E0C809B0];
      v65 |= 1u;
      v58[0] = MEMORY[0x1E0C809B0];
      v58[1] = 0x40000000;
      v58[2] = ___ZL33nw_http_security_process_responseP25nw_protocol_http_securityP20nw_protocol_metadata_block_invoke;
      v58[3] = &unk_1E149EFD8;
      v58[4] = type;
      nw_array_apply(v12, (uint64_t)v58);
      if (!*((_QWORD *)v60 + 5))
      {
LABEL_27:
        _Block_object_dispose(type, 8);
        if ((v65 & 1) != 0 && v64)
          os_release(v64);
        if (v12)
          os_release(v12);
        goto LABEL_32;
      }
      v14 = nw_parameters_copy_protocol_options_legacy(parameters, (nw_protocol *)v5);
      if (v14)
      {
        v15 = v14;
        v57[0] = v13;
        v57[1] = 0x40000000;
        v57[2] = ___ZL33nw_http_security_process_responseP25nw_protocol_http_securityP20nw_protocol_metadata_block_invoke_16;
        v57[3] = &unk_1E149F020;
        v57[4] = &v66;
        v57[5] = v5;
        if (nw_http_security_options_get_save_hsts_with_untrusted_root_cert(v14))
        {
          v16 = (void *)v67[5];
          *(_QWORD *)block = v13;
          *(_QWORD *)&block[8] = 0x40000000;
          *(_QWORD *)&block[16] = ___ZL33nw_http_security_process_responseP25nw_protocol_http_securityP20nw_protocol_metadata_block_invoke_2;
          v74 = (const char *)&__block_descriptor_tmp_18_28480;
          v75 = (_QWORD *)v5;
          nw_http_fields_enumerate_by_name(v16, (unint64_t)"Strict-Transport-Security", block);
        }
        else
        {
          *(_QWORD *)v50 = 0;
          v51 = v50;
          v52 = 0x3802000000;
          v53 = __Block_byref_object_copy__20;
          v54 = __Block_byref_object_dispose__21;
          v55 = (void *)sec_protocol_metadata_copy_sec_trust();
          v56 |= 1u;
          if (*((_QWORD *)v51 + 5))
          {
            v43 = 0;
            v44 = &v43;
            v45 = 0x3802000000;
            v46 = __Block_byref_object_copy__22;
            v47 = __Block_byref_object_dispose__23;
            object = dispatch_queue_create("http_security", 0);
            v49 |= 1u;
            nw_queue_context_target_dispatch_queue(*(void **)(v5 + 592), (void *)v44[5]);
            nw_protocol_plugin_retry_begin_async(v5 + 344);
            v17 = v44[5];
            *(_QWORD *)block = v13;
            *(_QWORD *)&block[8] = 0x40000000;
            *(_QWORD *)&block[16] = ___ZL33nw_http_security_process_responseP25nw_protocol_http_securityP20nw_protocol_metadata_block_invoke_24;
            v74 = (const char *)&unk_1E149F070;
            v75 = v57;
            v76 = v50;
            v77 = &v43;
            v78 = v5;
            dispatch_async(v17, block);
            _Block_object_dispose(&v43, 8);
            if ((v49 & 1) != 0)
            {
              if (object)
                dispatch_release(object);
            }
          }
          _Block_object_dispose(v50, 8);
          if ((v56 & 1) != 0 && v55)
            os_release(v55);
        }
        os_release(v15);
        goto LABEL_27;
      }
      __nwlog_obj();
      *(_DWORD *)block = 136446210;
      *(_QWORD *)&block[4] = "nw_http_security_process_response";
      v37 = (char *)_os_log_send_and_compose_impl();
      v50[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(v43) = 0;
      if (__nwlog_fault(v37, v50, &v43))
      {
        if (v50[0] == OS_LOG_TYPE_FAULT)
        {
          v38 = __nwlog_obj();
          v39 = v50[0];
          if (!os_log_type_enabled(v38, v50[0]))
            goto LABEL_136;
          *(_DWORD *)block = 136446210;
          *(_QWORD *)&block[4] = "nw_http_security_process_response";
          v40 = "%{public}s called with null protocol_options";
          goto LABEL_135;
        }
        if (!(_BYTE)v43)
        {
          v38 = __nwlog_obj();
          v39 = v50[0];
          if (!os_log_type_enabled(v38, v50[0]))
            goto LABEL_136;
          *(_DWORD *)block = 136446210;
          *(_QWORD *)&block[4] = "nw_http_security_process_response";
          v40 = "%{public}s called with null protocol_options, backtrace limit exceeded";
          goto LABEL_135;
        }
        v41 = (char *)__nw_create_backtrace_string();
        v38 = __nwlog_obj();
        v39 = v50[0];
        v42 = os_log_type_enabled(v38, v50[0]);
        if (v41)
        {
          if (v42)
          {
            *(_DWORD *)block = 136446466;
            *(_QWORD *)&block[4] = "nw_http_security_process_response";
            *(_WORD *)&block[12] = 2082;
            *(_QWORD *)&block[14] = v41;
            _os_log_impl(&dword_182FBE000, v38, v39, "%{public}s called with null protocol_options, dumping backtrace:%{public}s", block, 0x16u);
          }
          free(v41);
          goto LABEL_136;
        }
        if (v42)
        {
          *(_DWORD *)block = 136446210;
          *(_QWORD *)&block[4] = "nw_http_security_process_response";
          v40 = "%{public}s called with null protocol_options, no backtrace";
LABEL_135:
          _os_log_impl(&dword_182FBE000, v38, v39, v40, block, 0xCu);
        }
      }
LABEL_136:
      if (v37)
        free(v37);
      goto LABEL_27;
    }
    __nwlog_obj();
    *(_DWORD *)block = 136446210;
    *(_QWORD *)&block[4] = "nw_http_security_process_response";
    v31 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    v50[0] = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v31, type, v50))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        v32 = __nwlog_obj();
        v33 = type[0];
        if (!os_log_type_enabled(v32, type[0]))
          goto LABEL_124;
        *(_DWORD *)block = 136446210;
        *(_QWORD *)&block[4] = "nw_http_security_process_response";
        v34 = "%{public}s called with null response";
        goto LABEL_123;
      }
      if (v50[0] == OS_LOG_TYPE_DEFAULT)
      {
        v32 = __nwlog_obj();
        v33 = type[0];
        if (!os_log_type_enabled(v32, type[0]))
          goto LABEL_124;
        *(_DWORD *)block = 136446210;
        *(_QWORD *)&block[4] = "nw_http_security_process_response";
        v34 = "%{public}s called with null response, backtrace limit exceeded";
        goto LABEL_123;
      }
      v35 = (char *)__nw_create_backtrace_string();
      v32 = __nwlog_obj();
      v33 = type[0];
      v36 = os_log_type_enabled(v32, type[0]);
      if (v35)
      {
        if (v36)
        {
          *(_DWORD *)block = 136446466;
          *(_QWORD *)&block[4] = "nw_http_security_process_response";
          *(_WORD *)&block[12] = 2082;
          *(_QWORD *)&block[14] = v35;
          _os_log_impl(&dword_182FBE000, v32, v33, "%{public}s called with null response, dumping backtrace:%{public}s", block, 0x16u);
        }
        free(v35);
        goto LABEL_124;
      }
      if (v36)
      {
        *(_DWORD *)block = 136446210;
        *(_QWORD *)&block[4] = "nw_http_security_process_response";
        v34 = "%{public}s called with null response, no backtrace";
LABEL_123:
        _os_log_impl(&dword_182FBE000, v32, v33, v34, block, 0xCu);
      }
    }
LABEL_124:
    if (v31)
      free(v31);
    goto LABEL_32;
  }
  __nwlog_obj();
  *(_DWORD *)block = 136446210;
  *(_QWORD *)&block[4] = "operator()";
  v18 = (char *)_os_log_send_and_compose_impl();
  LOBYTE(v66) = 16;
  type[0] = OS_LOG_TYPE_DEFAULT;
  if (!__nwlog_fault(v18, &v66, type))
    goto LABEL_104;
  if (v66 == 17)
  {
    v19 = __nwlog_obj();
    v20 = v66;
    if (!os_log_type_enabled(v19, (os_log_type_t)v66))
      goto LABEL_104;
    *(_DWORD *)block = 136446210;
    *(_QWORD *)&block[4] = "operator()";
    v21 = "%{public}s called with null completion";
    goto LABEL_103;
  }
  if (type[0] == OS_LOG_TYPE_DEFAULT)
  {
    v19 = __nwlog_obj();
    v20 = v66;
    if (!os_log_type_enabled(v19, (os_log_type_t)v66))
      goto LABEL_104;
    *(_DWORD *)block = 136446210;
    *(_QWORD *)&block[4] = "operator()";
    v21 = "%{public}s called with null completion, backtrace limit exceeded";
    goto LABEL_103;
  }
  v24 = (char *)__nw_create_backtrace_string();
  v19 = __nwlog_obj();
  v20 = v66;
  v29 = os_log_type_enabled(v19, (os_log_type_t)v66);
  if (!v24)
  {
    if (!v29)
      goto LABEL_104;
    *(_DWORD *)block = 136446210;
    *(_QWORD *)&block[4] = "operator()";
    v21 = "%{public}s called with null completion, no backtrace";
    goto LABEL_103;
  }
  if (v29)
  {
    *(_DWORD *)block = 136446466;
    *(_QWORD *)&block[4] = "operator()";
    *(_WORD *)&block[12] = 2082;
    *(_QWORD *)&block[14] = v24;
    v26 = "%{public}s called with null completion, dumping backtrace:%{public}s";
    goto LABEL_78;
  }
LABEL_79:
  free(v24);
  if (v18)
LABEL_105:
    free(v18);
}

void nw_protocol_http_security_create::$_1::__invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  const char *v8;
  char *backtrace_string;
  _BOOL4 v10;
  char *v11;
  _BOOL4 v12;
  const char *v13;
  _BOOL4 v14;
  _BOOL4 v15;
  char v16;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v19 = "operator()";
    v5 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v16 = 0;
    if (!__nwlog_fault(v5, &type, &v16))
      goto LABEL_59;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v16)
      {
        v6 = __nwlog_obj();
        v7 = type;
        if (!os_log_type_enabled(v6, type))
          goto LABEL_59;
        *(_DWORD *)buf = 136446210;
        v19 = "operator()";
        v8 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_58;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v6 = __nwlog_obj();
      v7 = type;
      v10 = os_log_type_enabled(v6, type);
      if (!backtrace_string)
      {
        if (!v10)
          goto LABEL_59;
        *(_DWORD *)buf = 136446210;
        v19 = "operator()";
        v8 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_58;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446466;
        v19 = "operator()";
        v20 = 2082;
        v21 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
LABEL_59:
      if (!v5)
        return;
      goto LABEL_60;
    }
    v6 = __nwlog_obj();
    v7 = type;
    if (!os_log_type_enabled(v6, type))
      goto LABEL_59;
    *(_DWORD *)buf = 136446210;
    v19 = "operator()";
    v8 = "%{public}s called with null protocol";
    goto LABEL_58;
  }
  if (!*(_QWORD *)(a1 + 40))
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v19 = "operator()";
    v5 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v16 = 0;
    if (!__nwlog_fault(v5, &type, &v16))
      goto LABEL_59;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v16)
      {
        v6 = __nwlog_obj();
        v7 = type;
        if (!os_log_type_enabled(v6, type))
          goto LABEL_59;
        *(_DWORD *)buf = 136446210;
        v19 = "operator()";
        v8 = "%{public}s called with null http_security, backtrace limit exceeded";
        goto LABEL_58;
      }
      v11 = (char *)__nw_create_backtrace_string();
      v6 = __nwlog_obj();
      v7 = type;
      v12 = os_log_type_enabled(v6, type);
      if (!v11)
      {
        if (!v12)
          goto LABEL_59;
        *(_DWORD *)buf = 136446210;
        v19 = "operator()";
        v8 = "%{public}s called with null http_security, no backtrace";
        goto LABEL_58;
      }
      if (!v12)
        goto LABEL_40;
      *(_DWORD *)buf = 136446466;
      v19 = "operator()";
      v20 = 2082;
      v21 = v11;
      v13 = "%{public}s called with null http_security, dumping backtrace:%{public}s";
      goto LABEL_39;
    }
    v6 = __nwlog_obj();
    v7 = type;
    if (!os_log_type_enabled(v6, type))
      goto LABEL_59;
    *(_DWORD *)buf = 136446210;
    v19 = "operator()";
    v8 = "%{public}s called with null http_security";
LABEL_58:
    _os_log_impl(&dword_182FBE000, v6, v7, v8, buf, 0xCu);
    goto LABEL_59;
  }
  if (!a3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v19 = "operator()";
    v5 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v16 = 0;
    if (!__nwlog_fault(v5, &type, &v16))
      goto LABEL_59;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v6 = __nwlog_obj();
      v7 = type;
      if (!os_log_type_enabled(v6, type))
        goto LABEL_59;
      *(_DWORD *)buf = 136446210;
      v19 = "operator()";
      v8 = "%{public}s called with null metadata";
      goto LABEL_58;
    }
    if (!v16)
    {
      v6 = __nwlog_obj();
      v7 = type;
      if (!os_log_type_enabled(v6, type))
        goto LABEL_59;
      *(_DWORD *)buf = 136446210;
      v19 = "operator()";
      v8 = "%{public}s called with null metadata, backtrace limit exceeded";
      goto LABEL_58;
    }
    v11 = (char *)__nw_create_backtrace_string();
    v6 = __nwlog_obj();
    v7 = type;
    v14 = os_log_type_enabled(v6, type);
    if (!v11)
    {
      if (!v14)
        goto LABEL_59;
      *(_DWORD *)buf = 136446210;
      v19 = "operator()";
      v8 = "%{public}s called with null metadata, no backtrace";
      goto LABEL_58;
    }
    if (!v14)
      goto LABEL_40;
    *(_DWORD *)buf = 136446466;
    v19 = "operator()";
    v20 = 2082;
    v21 = v11;
    v13 = "%{public}s called with null metadata, dumping backtrace:%{public}s";
LABEL_39:
    _os_log_impl(&dword_182FBE000, v6, v7, v13, buf, 0x16u);
    goto LABEL_40;
  }
  if (a5)
  {
    (*(void (**)(uint64_t, uint64_t))(a5 + 16))(a5, 1);
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v19 = "operator()";
  v5 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v16 = 0;
  if (!__nwlog_fault(v5, &type, &v16))
    goto LABEL_59;
  if (type == OS_LOG_TYPE_FAULT)
  {
    v6 = __nwlog_obj();
    v7 = type;
    if (!os_log_type_enabled(v6, type))
      goto LABEL_59;
    *(_DWORD *)buf = 136446210;
    v19 = "operator()";
    v8 = "%{public}s called with null completion";
    goto LABEL_58;
  }
  if (!v16)
  {
    v6 = __nwlog_obj();
    v7 = type;
    if (!os_log_type_enabled(v6, type))
      goto LABEL_59;
    *(_DWORD *)buf = 136446210;
    v19 = "operator()";
    v8 = "%{public}s called with null completion, backtrace limit exceeded";
    goto LABEL_58;
  }
  v11 = (char *)__nw_create_backtrace_string();
  v6 = __nwlog_obj();
  v7 = type;
  v15 = os_log_type_enabled(v6, type);
  if (!v11)
  {
    if (!v15)
      goto LABEL_59;
    *(_DWORD *)buf = 136446210;
    v19 = "operator()";
    v8 = "%{public}s called with null completion, no backtrace";
    goto LABEL_58;
  }
  if (v15)
  {
    *(_DWORD *)buf = 136446466;
    v19 = "operator()";
    v20 = 2082;
    v21 = v11;
    v13 = "%{public}s called with null completion, dumping backtrace:%{public}s";
    goto LABEL_39;
  }
LABEL_40:
  free(v11);
  if (v5)
LABEL_60:
    free(v5);
}

uint64_t nw_protocol_http_security_create::$_2::__invoke(nw_protocol_http_security_create::$_2 *this, nw_protocol *a2, nw_protocol *a3)
{
  return 0;
}

uint64_t nw_protocol_http_security_create::$_3::__invoke(nw_protocol_http_security_create::$_3 *this, nw_protocol *a2, nw_protocol *a3)
{
  uint64_t v3;
  NSObject *parameters;
  void *v5;
  CFTypeRef v6;
  char v7;
  const void *v8;
  const char *hostname;
  const char *url_scheme;
  const char *v11;
  BOOL v12;
  uint64_t v13;
  unsigned __int8 *v14;
  NSObject *v15;
  NSObject *v16;
  char *v17;
  BOOL is_equal;
  id v19;
  char v20;
  void *v21;
  NSObject *v22;
  nw_protocol_options_t v23;
  NSObject *v24;
  char *v25;
  const char *v26;
  sec_protocol_options_t v27;
  sec_protocol_options_t v28;
  uint64_t v29;
  char v30;
  char *v31;
  void *v32;
  void *v33;
  int v34;
  int v35;
  void *v36;
  NSObject *v37;
  NSObject *v38;
  NSObject *v39;
  BOOL v40;
  _BOOL4 v41;
  id *v42;
  id *v43;
  __CFString *v44;
  int v45;
  char v46;
  NSObject *v47;
  NSObject *v48;
  char *v50;
  NSObject *v51;
  os_log_type_t v52;
  const char *v53;
  char *backtrace_string;
  _BOOL4 v55;
  const char *v56;
  _BOOL4 v57;
  char *v58;
  NSObject *v59;
  os_log_type_t v60;
  const char *v61;
  _BOOL4 v62;
  void *v63;
  char *v64;
  NSObject *v65;
  os_log_type_t v66;
  char *v67;
  _BOOL4 v68;
  char *v69;
  NSObject *v70;
  os_log_type_t v71;
  _BOOL4 v72;
  void *v73;
  char *v74;
  NSObject *v75;
  os_log_type_t v76;
  os_log_type_t v77;
  char *v78;
  NSObject *v79;
  _BOOL4 v80;
  void *v81;
  char *v82;
  NSObject *v83;
  os_log_type_t v84;
  os_log_type_t v85;
  char *v86;
  os_log_type_t v87;
  _BOOL4 v88;
  os_log_type_t v89;
  BOOL v90;
  os_log_type_t v91;
  NSObject *v92;
  const char *v93;
  _QWORD iterate_block[7];
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  char v98;
  os_log_type_t v99[8];
  uint64_t v100;
  uint64_t v101;
  uint64_t (*v102)(uint64_t, uint64_t);
  void (*v103)(uint64_t);
  void *object;
  char v105;
  os_log_type_t type[8];
  os_log_type_t *v107;
  uint64_t v108;
  uint64_t (*v109)(uint64_t, uint64_t);
  void (*v110)(uint64_t);
  void *v111;
  char v112;
  char v113;
  os_log_type_t v114;
  _BYTE buf[24];
  uint64_t (*v116)(uint64_t, uint64_t);
  void (*v117)(uint64_t);
  os_log_type_t *v118;
  uint64_t v119;
  char v120;
  _BYTE v121[24];
  uint64_t (*v122)(uint64_t, uint64_t);
  void (*v123)(uint64_t);
  void *v124;
  char v125;
  uint64_t v126;

  v126 = *MEMORY[0x1E0C80C00];
  if (!this)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "operator()";
    v50 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    v99[0] = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v50, type, v99))
      goto LABEL_145;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      v51 = __nwlog_obj();
      v52 = type[0];
      if (!os_log_type_enabled(v51, type[0]))
        goto LABEL_145;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "operator()";
      v53 = "%{public}s called with null protocol";
LABEL_144:
      _os_log_impl(&dword_182FBE000, v51, v52, v53, buf, 0xCu);
      goto LABEL_145;
    }
    if (v99[0] == OS_LOG_TYPE_DEFAULT)
    {
      v51 = __nwlog_obj();
      v52 = type[0];
      if (os_log_type_enabled(v51, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "operator()";
        v53 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_144;
      }
      goto LABEL_145;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v51 = __nwlog_obj();
    v52 = type[0];
    v55 = os_log_type_enabled(v51, type[0]);
    if (!backtrace_string)
    {
      if (v55)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "operator()";
        v53 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_144;
      }
      goto LABEL_145;
    }
    if (!v55)
      goto LABEL_111;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "operator()";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = backtrace_string;
    v56 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_110:
    _os_log_impl(&dword_182FBE000, v51, v52, v56, buf, 0x16u);
    goto LABEL_111;
  }
  v3 = *((_QWORD *)this + 5);
  if (!v3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "operator()";
    v50 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    v99[0] = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v50, type, v99))
      goto LABEL_145;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      v51 = __nwlog_obj();
      v52 = type[0];
      if (!os_log_type_enabled(v51, type[0]))
        goto LABEL_145;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "operator()";
      v53 = "%{public}s called with null http_security";
      goto LABEL_144;
    }
    if (v99[0] == OS_LOG_TYPE_DEFAULT)
    {
      v51 = __nwlog_obj();
      v52 = type[0];
      if (os_log_type_enabled(v51, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "operator()";
        v53 = "%{public}s called with null http_security, backtrace limit exceeded";
        goto LABEL_144;
      }
      goto LABEL_145;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v51 = __nwlog_obj();
    v52 = type[0];
    v57 = os_log_type_enabled(v51, type[0]);
    if (!backtrace_string)
    {
      if (v57)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "operator()";
        v53 = "%{public}s called with null http_security, no backtrace";
        goto LABEL_144;
      }
      goto LABEL_145;
    }
    if (!v57)
      goto LABEL_111;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "operator()";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = backtrace_string;
    v56 = "%{public}s called with null http_security, dumping backtrace:%{public}s";
    goto LABEL_110;
  }
  if (a2)
  {
    if ((*(_BYTE *)(v3 + 608) & 2) != 0)
      return 1;
    *(_BYTE *)(v3 + 608) |= 2u;
    parameters = nw_protocol_get_parameters((uint64_t)a2);
    *(_QWORD *)type = 0;
    v107 = type;
    v108 = 0x3802000000;
    v109 = __Block_byref_object_copy__29;
    v110 = __Block_byref_object_dispose__30;
    v111 = nw_parameters_copy_url_endpoint(parameters);
    v112 |= 1u;
    v5 = (void *)*((_QWORD *)v107 + 5);
    if (v5)
    {
      v6 = nw_endpoint_copy_cfurl(v5);
      v7 = *(_BYTE *)(v3 + 568);
      if ((v7 & 1) != 0)
      {
        v8 = *(const void **)(v3 + 560);
        if (v8)
        {
          CFRelease(v8);
          v7 = *(_BYTE *)(v3 + 568);
        }
      }
      *(_QWORD *)(v3 + 560) = v6;
      *(_BYTE *)(v3 + 568) = v7 | 1;
      hostname = nw_endpoint_get_hostname(*((nw_endpoint_t *)v107 + 5));
      url_scheme = (const char *)nw_endpoint_get_url_scheme(*((void **)v107 + 5));
      v12 = 1;
      if (strcasecmp(url_scheme, "https"))
      {
        v11 = (const char *)nw_endpoint_get_url_scheme(*((void **)v107 + 5));
        if (strcasecmp(v11, "wss"))
          v12 = 0;
      }
    }
    else
    {
      v12 = 0;
      hostname = 0;
    }
    v14 = nw_parameters_copy_protocol_options_legacy(parameters, (nw_protocol *)v3);
    if (v14)
    {
      v15 = v14;
      v16 = nw_protocol_options_copy_definition(v15);
      v17 = (char *)&nw_protocol_http_authentication_identifier::protocol_identifier + 4;
      if (nw_protocol_copy_http_security_definition_onceToken != -1)
        dispatch_once(&nw_protocol_copy_http_security_definition_onceToken, &__block_literal_global_33_73134);
      is_equal = nw_protocol_definition_is_equal(v16, (nw_protocol_definition_t)nw_protocol_copy_http_security_definition_http_security_definition);

      if (is_equal)
      {
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = buf;
        *(_QWORD *)&buf[16] = 0x3032000000;
        v116 = __Block_byref_object_copy__4;
        v117 = __Block_byref_object_dispose__5;
        v118 = 0;
        *(_QWORD *)v99 = MEMORY[0x1E0C809B0];
        v100 = 3221225472;
        v101 = (uint64_t)__nw_http_security_options_copy_hsts_storage_block_invoke;
        v102 = (uint64_t (*)(uint64_t, uint64_t))&unk_1E14A9D68;
        v103 = (void (*)(uint64_t))buf;
        nw_protocol_options_access_handle(v15, v99);
        v19 = *(id *)(*(_QWORD *)&buf[8] + 40);
        _Block_object_dispose(buf, 8);

        goto LABEL_20;
      }
      __nwlog_obj();
      v63 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http_security_options_copy_hsts_storage";
      v93 = (const char *)_os_log_send_and_compose_impl();

      v99[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(iterate_block[0]) = 0;
      v64 = (char *)v93;
      if (!__nwlog_fault(v93, v99, iterate_block))
      {
LABEL_168:
        if (v64)
          free(v64);
        v19 = 0;
LABEL_20:

        v20 = *(_BYTE *)(v3 + 584);
        if ((v20 & 1) != 0)
        {
          v21 = *(void **)(v3 + 576);
          if (v21)
          {
            os_release(v21);
            v20 = *(_BYTE *)(v3 + 584);
          }
        }
        *(_QWORD *)(v3 + 576) = v19;
        *(_BYTE *)(v3 + 584) = v20 | 1;
        *(_QWORD *)v99 = 0;
        v100 = (uint64_t)v99;
        v101 = 0x3802000000;
        v102 = __Block_byref_object_copy__33;
        v103 = __Block_byref_object_dispose__34;
        object = 0;
        v105 |= 1u;
        v95 = 0;
        v96 = &v95;
        v97 = 0x2000000000;
        v98 = 0;
        v22 = nw_parameters_copy_default_protocol_stack(parameters);
        iterate_block[0] = MEMORY[0x1E0C809B0];
        iterate_block[1] = 0x40000000;
        iterate_block[2] = ___ZL24nw_http_security_connectP25nw_protocol_http_securityP11nw_protocol_block_invoke;
        iterate_block[3] = &unk_1E149F098;
        iterate_block[4] = &v95;
        iterate_block[5] = v99;
        iterate_block[6] = v3;
        nw_protocol_stack_iterate_application_protocols(v22, iterate_block);
        if (!*((_BYTE *)v96 + 24))
        {
LABEL_35:
          v33 = (void *)sec_protocol_configuration_copy_singleton();
          if (sec_protocol_configuration_tls_required() && hostname)
          {
            v34 = sec_protocol_configuration_tls_required_for_host();
            if (v12)
            {
              if (*(_QWORD *)(v100 + 40))
                v35 = v34;
              else
                v35 = 0;
              if (v35 == 1)
              {
                v36 = (void *)sec_protocol_configuration_copy_transformed_options_for_host();
                if (v36)
                {
                  os_release(v36);
                  v13 = 1;
                  if (!v33)
                    goto LABEL_72;
                  goto LABEL_71;
                }
              }
              goto LABEL_198;
            }
            if (v34)
            {
              if ((*(_BYTE *)(v3 + 198) & 1) == 0)
              {
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                v37 = gLogObj;
                if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 136446722;
                  *(_QWORD *)&buf[4] = "nw_http_security_connect";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = v3 + 114;
                  *(_WORD *)&buf[22] = 2080;
                  v116 = (uint64_t (*)(uint64_t, uint64_t))" ";
                  _os_log_impl(&dword_182FBE000, v37, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sATS requires TLS but is not currently enforced", buf, 0x20u);
                }
              }
            }
          }
          else if (v12)
          {
            goto LABEL_198;
          }
          v13 = 1;
          if (!*(_QWORD *)(v3 + 576) || !hostname)
            goto LABEL_70;
          v38 = v15;
          v39 = nw_protocol_options_copy_definition(v38);
          if (*((_QWORD *)v17 + 202) != -1)
            dispatch_once(&nw_protocol_copy_http_security_definition_onceToken, &__block_literal_global_33_73134);
          v40 = nw_protocol_definition_is_equal(v39, (nw_protocol_definition_t)nw_protocol_copy_http_security_definition_http_security_definition);

          if (v40)
          {
            *(_QWORD *)v121 = 0;
            *(_QWORD *)&v121[8] = v121;
            *(_QWORD *)&v121[16] = 0x2020000000;
            LOBYTE(v122) = 0;
            *(_QWORD *)buf = MEMORY[0x1E0C809B0];
            *(_QWORD *)&buf[8] = 3221225472;
            *(_QWORD *)&buf[16] = __nw_http_security_options_get_skip_hsts_lookup_block_invoke;
            v116 = (uint64_t (*)(uint64_t, uint64_t))&unk_1E14A9D68;
            v117 = (void (*)(uint64_t))v121;
            nw_protocol_options_access_handle(v38, buf);
            v41 = *(_BYTE *)(*(_QWORD *)&v121[8] + 24) == 0;
            _Block_object_dispose(v121, 8);

            if (!v41)
              goto LABEL_198;
LABEL_57:
            v42 = (id *)*(id *)(v3 + 576);
            if (v42)
            {
              v43 = v42;
              v44 = (__CFString *)CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], hostname, 0x600u);
              buf[0] = 0;
              v45 = objc_msgSend(v43[1], "shouldPromoteHostToHTTPS:isPreload:", v44, buf);
              v46 = buf[0];

              if (v45)
              {
                *(_QWORD *)v121 = 0;
                *(_QWORD *)&v121[8] = v121;
                *(_QWORD *)&v121[16] = 0x3802000000;
                v122 = __Block_byref_object_copy__37;
                v123 = __Block_byref_object_dispose__38;
                v124 = nw_http_security_options_copy_handler(v38);
                v125 |= 1u;
                v47 = nw_http_security_options_copy_handler_queue(v38);
                v48 = v47;
                if (*(_QWORD *)(*(_QWORD *)&v121[8] + 40))
                {
                  if (!v47)
                    goto LABEL_66;
                  nw_protocol_plugin_retry_begin_async(v3 + 344);
                  *(_QWORD *)buf = MEMORY[0x1E0C809B0];
                  *(_QWORD *)&buf[8] = 0x40000000;
                  *(_QWORD *)&buf[16] = ___ZL24nw_http_security_connectP25nw_protocol_http_securityP11nw_protocol_block_invoke_39;
                  v116 = (uint64_t (*)(uint64_t, uint64_t))&unk_1E149F180;
                  v117 = (void (*)(uint64_t))v121;
                  v118 = type;
                  v120 = v46;
                  v119 = v3;
                  dispatch_async(v48, buf);
                }
                else if (!v47)
                {
                  goto LABEL_66;
                }
                dispatch_release(v48);
LABEL_66:
                _Block_object_dispose(v121, 8);
                if ((v125 & 1) != 0 && v124)
                  _Block_release(v124);
                v13 = 0;
LABEL_70:
                if (!v33)
                {
LABEL_72:
                  if (v22)
                    os_release(v22);
                  _Block_object_dispose(&v95, 8);
                  _Block_object_dispose(v99, 8);
                  if ((v105 & 1) != 0 && object)
                    os_release(object);
                  os_release(v15);
LABEL_78:
                  _Block_object_dispose(type, 8);
                  if ((v112 & 1) != 0 && v111)
                    os_release(v111);
                  return v13;
                }
LABEL_71:
                os_release(v33);
                goto LABEL_72;
              }
LABEL_198:
              v13 = 1;
              if (!v33)
                goto LABEL_72;
              goto LABEL_71;
            }
            __nwlog_obj();
            v81 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_hsts_storage_should_upgrade";
            v82 = (char *)_os_log_send_and_compose_impl();

            v121[0] = 16;
            v114 = OS_LOG_TYPE_DEFAULT;
            if (__nwlog_fault(v82, v121, &v114))
            {
              if (v121[0] == 17)
              {
                __nwlog_obj();
                v83 = objc_claimAutoreleasedReturnValue();
                v84 = v121[0];
                if (os_log_type_enabled(v83, (os_log_type_t)v121[0]))
                {
                  *(_DWORD *)buf = 136446210;
                  *(_QWORD *)&buf[4] = "nw_hsts_storage_should_upgrade";
                  _os_log_impl(&dword_182FBE000, v83, v84, "%{public}s called with null storage", buf, 0xCu);
                }
              }
              else if (v114)
              {
                v86 = (char *)__nw_create_backtrace_string();
                __nwlog_obj();
                v83 = objc_claimAutoreleasedReturnValue();
                v87 = v121[0];
                v88 = os_log_type_enabled(v83, (os_log_type_t)v121[0]);
                if (v86)
                {
                  if (v88)
                  {
                    *(_DWORD *)buf = 136446466;
                    *(_QWORD *)&buf[4] = "nw_hsts_storage_should_upgrade";
                    *(_WORD *)&buf[12] = 2082;
                    *(_QWORD *)&buf[14] = v86;
                    _os_log_impl(&dword_182FBE000, v83, v87, "%{public}s called with null storage, dumping backtrace:%{public}s", buf, 0x16u);
                  }

                  free(v86);
                  goto LABEL_196;
                }
                if (v88)
                {
                  *(_DWORD *)buf = 136446210;
                  *(_QWORD *)&buf[4] = "nw_hsts_storage_should_upgrade";
                  _os_log_impl(&dword_182FBE000, v83, v87, "%{public}s called with null storage, no backtrace", buf, 0xCu);
                }
              }
              else
              {
                __nwlog_obj();
                v83 = objc_claimAutoreleasedReturnValue();
                v89 = v121[0];
                if (os_log_type_enabled(v83, (os_log_type_t)v121[0]))
                {
                  *(_DWORD *)buf = 136446210;
                  *(_QWORD *)&buf[4] = "nw_hsts_storage_should_upgrade";
                  _os_log_impl(&dword_182FBE000, v83, v89, "%{public}s called with null storage, backtrace limit exceeded", buf, 0xCu);
                }
              }

            }
LABEL_196:
            if (v82)
              free(v82);
            goto LABEL_198;
          }
          __nwlog_obj();
          v73 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)v121 = 136446210;
          *(_QWORD *)&v121[4] = "nw_http_security_options_get_skip_hsts_lookup";
          v74 = (char *)_os_log_send_and_compose_impl();

          v114 = OS_LOG_TYPE_ERROR;
          v113 = 0;
          if (__nwlog_fault(v74, &v114, &v113))
          {
            if (v114 == OS_LOG_TYPE_FAULT)
            {
              __nwlog_obj();
              v75 = objc_claimAutoreleasedReturnValue();
              v76 = v114;
              if (os_log_type_enabled(v75, v114))
              {
                *(_DWORD *)v121 = 136446210;
                *(_QWORD *)&v121[4] = "nw_http_security_options_get_skip_hsts_lookup";
                _os_log_impl(&dword_182FBE000, v75, v76, "%{public}s protocol options are not http security", v121, 0xCu);
              }
            }
            else
            {
              if (v113)
              {
                v78 = (char *)__nw_create_backtrace_string();
                __nwlog_obj();
                v79 = objc_claimAutoreleasedReturnValue();
                v91 = v114;
                v80 = os_log_type_enabled(v79, v114);
                if (v78)
                {
                  if (v80)
                  {
                    *(_DWORD *)v121 = 136446466;
                    *(_QWORD *)&v121[4] = "nw_http_security_options_get_skip_hsts_lookup";
                    *(_WORD *)&v121[12] = 2082;
                    *(_QWORD *)&v121[14] = v78;
                    _os_log_impl(&dword_182FBE000, v79, v91, "%{public}s protocol options are not http security, dumping backtrace:%{public}s", v121, 0x16u);
                  }

                  free(v78);
                }
                else
                {
                  if (v80)
                  {
                    *(_DWORD *)v121 = 136446210;
                    *(_QWORD *)&v121[4] = "nw_http_security_options_get_skip_hsts_lookup";
                    _os_log_impl(&dword_182FBE000, v79, v91, "%{public}s protocol options are not http security, no backtrace", v121, 0xCu);
                  }

                }
                goto LABEL_187;
              }
              __nwlog_obj();
              v75 = objc_claimAutoreleasedReturnValue();
              v85 = v114;
              if (os_log_type_enabled(v75, v114))
              {
                *(_DWORD *)v121 = 136446210;
                *(_QWORD *)&v121[4] = "nw_http_security_options_get_skip_hsts_lookup";
                _os_log_impl(&dword_182FBE000, v75, v85, "%{public}s protocol options are not http security, backtrace limit exceeded", v121, 0xCu);
              }
            }

          }
LABEL_187:
          if (v74)
            free(v74);

          goto LABEL_57;
        }
        v23 = nw_protocol_stack_copy_transport_protocol(v22);
        if (nw_protocol_options_is_tls(v23))
        {
          v90 = v12;
          v92 = v22;
          v24 = v15;
          v25 = v17;
          v26 = hostname;
          v27 = v23;
        }
        else
        {
          if (!nw_protocol_options_is_quic(v23))
          {
            if (!nw_protocol_options_is_tcp(v23))
            {
LABEL_33:
              if (v23)
                os_release(v23);
              goto LABEL_35;
            }
LABEL_32:
            *((_BYTE *)v96 + 24) = 0;
            goto LABEL_33;
          }
          v90 = v12;
          v92 = v22;
          v24 = v15;
          v25 = v17;
          v26 = hostname;
          v27 = nw_quic_copy_sec_protocol_options(v23);
        }
        v28 = v27;
        v29 = v100;
        v31 = (char *)(v100 + 48);
        v30 = *(_BYTE *)(v100 + 48);
        if ((v30 & 1) != 0)
        {
          v32 = *(void **)(v100 + 40);
          if (v32)
          {
            os_release(v32);
            v30 = *v31;
          }
        }
        *(_QWORD *)(v29 + 40) = v28;
        *v31 = v30 | 1;
        hostname = v26;
        v17 = v25;
        v15 = v24;
        v22 = v92;
        v12 = v90;
        goto LABEL_32;
      }
      if (v99[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v65 = objc_claimAutoreleasedReturnValue();
        v66 = v99[0];
        if (os_log_type_enabled(v65, v99[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_security_options_copy_hsts_storage";
          _os_log_impl(&dword_182FBE000, v65, v66, "%{public}s protocol options are not http security", buf, 0xCu);
        }
      }
      else
      {
        if (LOBYTE(iterate_block[0]))
        {
          v69 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v70 = objc_claimAutoreleasedReturnValue();
          v71 = v99[0];
          v72 = os_log_type_enabled(v70, v99[0]);
          if (v69)
          {
            if (v72)
            {
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "nw_http_security_options_copy_hsts_storage";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v69;
              _os_log_impl(&dword_182FBE000, v70, v71, "%{public}s protocol options are not http security, dumping backtrace:%{public}s", buf, 0x16u);
            }

            v17 = (_BYTE *)(&nw_protocol_http_authentication_identifier::protocol_identifier + 4);
            free(v69);
          }
          else
          {
            if (v72)
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_http_security_options_copy_hsts_storage";
              _os_log_impl(&dword_182FBE000, v70, v71, "%{public}s protocol options are not http security, no backtrace", buf, 0xCu);
            }

            v17 = (_BYTE *)(&nw_protocol_http_authentication_identifier::protocol_identifier + 4);
          }
          goto LABEL_167;
        }
        __nwlog_obj();
        v65 = objc_claimAutoreleasedReturnValue();
        v77 = v99[0];
        if (os_log_type_enabled(v65, v99[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_security_options_copy_hsts_storage";
          _os_log_impl(&dword_182FBE000, v65, v77, "%{public}s protocol options are not http security, backtrace limit exceeded", buf, 0xCu);
        }
      }

LABEL_167:
      v64 = (char *)v93;
      goto LABEL_168;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_security_connect";
    v58 = (char *)_os_log_send_and_compose_impl();
    v99[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(iterate_block[0]) = 0;
    if (__nwlog_fault(v58, v99, iterate_block))
    {
      if (v99[0] == OS_LOG_TYPE_FAULT)
      {
        v59 = __nwlog_obj();
        v60 = v99[0];
        if (os_log_type_enabled(v59, v99[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_security_connect";
          v61 = "%{public}s called with null protocol_options";
LABEL_160:
          _os_log_impl(&dword_182FBE000, v59, v60, v61, buf, 0xCu);
        }
      }
      else if (LOBYTE(iterate_block[0]))
      {
        v67 = (char *)__nw_create_backtrace_string();
        v59 = __nwlog_obj();
        v60 = v99[0];
        v68 = os_log_type_enabled(v59, v99[0]);
        if (v67)
        {
          if (v68)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_http_security_connect";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v67;
            _os_log_impl(&dword_182FBE000, v59, v60, "%{public}s called with null protocol_options, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v67);
          goto LABEL_161;
        }
        if (v68)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_security_connect";
          v61 = "%{public}s called with null protocol_options, no backtrace";
          goto LABEL_160;
        }
      }
      else
      {
        v59 = __nwlog_obj();
        v60 = v99[0];
        if (os_log_type_enabled(v59, v99[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_security_connect";
          v61 = "%{public}s called with null protocol_options, backtrace limit exceeded";
          goto LABEL_160;
        }
      }
    }
LABEL_161:
    if (v58)
      free(v58);
    v13 = 0;
    goto LABEL_78;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "operator()";
  v50 = (char *)_os_log_send_and_compose_impl();
  type[0] = OS_LOG_TYPE_ERROR;
  v99[0] = OS_LOG_TYPE_DEFAULT;
  if (!__nwlog_fault(v50, type, v99))
    goto LABEL_145;
  if (type[0] != OS_LOG_TYPE_FAULT)
  {
    if (v99[0] == OS_LOG_TYPE_DEFAULT)
    {
      v51 = __nwlog_obj();
      v52 = type[0];
      if (os_log_type_enabled(v51, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "operator()";
        v53 = "%{public}s called with null other_protocol, backtrace limit exceeded";
        goto LABEL_144;
      }
      goto LABEL_145;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v51 = __nwlog_obj();
    v52 = type[0];
    v62 = os_log_type_enabled(v51, type[0]);
    if (!backtrace_string)
    {
      if (v62)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "operator()";
        v53 = "%{public}s called with null other_protocol, no backtrace";
        goto LABEL_144;
      }
      goto LABEL_145;
    }
    if (v62)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "operator()";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = backtrace_string;
      v56 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
      goto LABEL_110;
    }
LABEL_111:
    free(backtrace_string);
    goto LABEL_145;
  }
  v51 = __nwlog_obj();
  v52 = type[0];
  if (os_log_type_enabled(v51, type[0]))
  {
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "operator()";
    v53 = "%{public}s called with null other_protocol";
    goto LABEL_144;
  }
LABEL_145:
  if (v50)
    free(v50);
  return 0;
}

void sub_18362DD2C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Unwind_Resume(a1);
}

uint64_t nw_protocol_http_security_create::$_4::__invoke(nw_protocol_http_security_create::$_4 *this, nw_protocol *a2, nw_protocol *a3)
{
  return 1;
}

uint64_t nw_protocol_http_security_create::$_5::__invoke(nw_protocol_http_security_create::$_5 *this, nw_protocol *a2, nw_protocol *a3)
{
  return 1;
}

uint64_t nw_protocol_http_security_create::$_6::__invoke(nw_protocol_http_security_create::$_6 *this, nw_protocol *a2, nw_protocol *a3)
{
  return 1;
}

uint64_t __Block_byref_object_copy__29(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(result + 48) = *(_BYTE *)(result + 48) & 0xFE | *(_BYTE *)(a2 + 48) & 1;
  *(_QWORD *)(a2 + 40) = 0;
  *(_BYTE *)(a2 + 48) &= ~1u;
  return result;
}

void __Block_byref_object_dispose__30(uint64_t a1)
{
  void *v2;

  if ((*(_BYTE *)(a1 + 48) & 1) != 0)
  {
    v2 = *(void **)(a1 + 40);
    if (v2)
      os_release(v2);
  }
  *(_QWORD *)(a1 + 40) = 0;
}

uint64_t __Block_byref_object_copy__33(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(result + 48) = *(_BYTE *)(result + 48) & 0xFE | *(_BYTE *)(a2 + 48) & 1;
  *(_QWORD *)(a2 + 40) = 0;
  *(_BYTE *)(a2 + 48) &= ~1u;
  return result;
}

void __Block_byref_object_dispose__34(uint64_t a1)
{
  void *v2;

  if ((*(_BYTE *)(a1 + 48) & 1) != 0)
  {
    v2 = *(void **)(a1 + 40);
    if (v2)
      os_release(v2);
  }
  *(_QWORD *)(a1 + 40) = 0;
}

void ___ZL24nw_http_security_connectP25nw_protocol_http_securityP11nw_protocol_block_invoke(_QWORD *a1, NSObject *a2)
{
  uint64_t protocol_handle;
  sec_protocol_options_t v5;
  sec_protocol_options_t v6;
  uint64_t v7;
  char v8;
  char *v9;
  void *v10;

  protocol_handle = nw_protocol_options_get_protocol_handle(a2);
  if (!*(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24))
    goto LABEL_11;
  if (nw_protocol_options_is_tls(a2))
  {
    v5 = a2;
  }
  else
  {
    if (!nw_protocol_options_is_quic(a2))
    {
      if (!nw_protocol_options_is_tcp(a2) && !nw_protocol_options_is_masque(a2))
        goto LABEL_11;
      goto LABEL_10;
    }
    v5 = nw_quic_copy_sec_protocol_options(a2);
  }
  v6 = v5;
  v7 = *(_QWORD *)(a1[5] + 8);
  v9 = (char *)(v7 + 48);
  v8 = *(_BYTE *)(v7 + 48);
  if ((v8 & 1) != 0)
  {
    v10 = *(void **)(v7 + 40);
    if (v10)
    {
      os_release(v10);
      v8 = *v9;
    }
  }
  *(_QWORD *)(v7 + 40) = v6;
  *v9 = v8 | 1;
LABEL_10:
  *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = 0;
LABEL_11:
  if (a1[6] == protocol_handle)
    *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = 1;
}

uint64_t __Block_byref_object_copy__37(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(result + 48) = *(_BYTE *)(result + 48) & 0xFE | *(_BYTE *)(a2 + 48) & 1;
  *(_QWORD *)(a2 + 40) = 0;
  *(_BYTE *)(a2 + 48) &= ~1u;
  return result;
}

void __Block_byref_object_dispose__38(uint64_t a1)
{
  const void *v2;

  if ((*(_BYTE *)(a1 + 48) & 1) != 0)
  {
    v2 = *(const void **)(a1 + 40);
    if (v2)
      _Block_release(v2);
  }
  *(_QWORD *)(a1 + 40) = 0;
}

uint64_t ___ZL24nw_http_security_connectP25nw_protocol_http_securityP11nw_protocol_block_invoke_39(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[5];

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZL24nw_http_security_connectP25nw_protocol_http_securityP11nw_protocol_block_invoke_2;
  v4[3] = &__block_descriptor_tmp_52_28400;
  v4[4] = *(_QWORD *)(a1 + 48);
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD *))(*(_QWORD *)(v1 + 40) + 16))(*(_QWORD *)(v1 + 40), *(_QWORD *)(v2 + 40), *(unsigned __int8 *)(a1 + 56), v4);
}

void ___ZL24nw_http_security_connectP25nw_protocol_http_securityP11nw_protocol_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  void *v4;
  _QWORD v5[7];

  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(void **)(v3 + 592);
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 0x40000000;
  v5[2] = ___ZL24nw_http_security_connectP25nw_protocol_http_securityP11nw_protocol_block_invoke_3;
  v5[3] = &__block_descriptor_tmp_50_28402;
  v5[4] = v3;
  v5[5] = a2;
  v5[6] = a3;
  nw_queue_context_async_if_needed(v4, v5);
}

void ___ZL24nw_http_security_connectP25nw_protocol_http_securityP11nw_protocol_block_invoke_3(uint64_t *a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  NSObject *v7;
  _BOOL4 v8;
  _QWORD v9[5];
  uint8_t buf[4];
  const char *v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  const char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (nw_protocol_plugin_retry_end_async(a1[4] + 344))
  {
    v2 = (void *)a1[5];
    if (v2 && (v3 = (void *)a1[6]) != 0)
    {
      v4 = a1[4];
      v5 = *(void **)(v4 + 592);
      v9[0] = MEMORY[0x1E0C809B0];
      v9[1] = 0x40000000;
      v9[2] = ___ZL24nw_http_security_connectP25nw_protocol_http_securityP11nw_protocol_block_invoke_3_48;
      v9[3] = &__block_descriptor_tmp_49_28404;
      v9[4] = v4;
      nw_protocol_plugin_retry_reissue_output_frames(v4 + 344, v4, v5, v2, v3, 2, 0, &__block_literal_global_43, &__block_literal_global_47_28405, (uint64_t)v9);
    }
    else
    {
      nw_protocol_error(*(_QWORD **)(a1[4] + 48), a1[4]);
      nw_protocol_disconnected(*(_QWORD **)(a1[4] + 48), a1[4]);
    }
  }
  else
  {
    v6 = a1[4];
    if ((*(_BYTE *)(v6 + 198) & 1) == 0)
    {
      if (gLogDatapath)
      {
        v7 = __nwlog_obj();
        v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG);
        v6 = a1[4];
        if (v8)
        {
          *(_DWORD *)buf = 136446722;
          v11 = "nw_http_security_connect_block_invoke_3";
          v12 = 2082;
          v13 = v6 + 114;
          v14 = 2080;
          v15 = " ";
          _os_log_impl(&dword_182FBE000, v7, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sDeferred destroy when coming back from callout", buf, 0x20u);
          v6 = a1[4];
        }
      }
    }
    nw_http_security_destroy(v6);
  }
}

void nw_http_security_destroy(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  void *v4;
  const void *v5;
  void *v6;
  void *v7;
  void *v8;
  NSObject *v9;
  int v10;
  const char *v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  const char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if ((*(_BYTE *)(a1 + 198) & 1) == 0)
  {
    if (gLogDatapath)
    {
      v9 = __nwlog_obj();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        v10 = 136446722;
        v11 = "nw_http_security_destroy";
        v12 = 2082;
        v13 = a1 + 114;
        v14 = 2080;
        v15 = " ";
        _os_log_impl(&dword_182FBE000, v9, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%scalled", (uint8_t *)&v10, 0x20u);
      }
    }
  }
  if (*(_DWORD *)(a1 + 552))
  {
    *(_BYTE *)(a1 + 556) |= 0x40u;
    if ((*(_BYTE *)(a1 + 198) & 1) == 0 && gLogDatapath)
    {
      v2 = __nwlog_obj();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
      {
        v10 = 136446722;
        v11 = "nw_http_security_destroy";
        v12 = 2082;
        v13 = a1 + 114;
        v14 = 2080;
        v15 = " ";
        _os_log_impl(&dword_182FBE000, v2, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sdeferring destroy because the request is being reissued", (uint8_t *)&v10, 0x20u);
      }
    }
  }
  else
  {
    if ((*(_BYTE *)(a1 + 600) & 1) != 0)
    {
      v3 = *(void **)(a1 + 592);
      if (v3)
        os_release(v3);
    }
    *(_QWORD *)(a1 + 592) = 0;
    if ((*(_BYTE *)(a1 + 584) & 1) != 0)
    {
      v4 = *(void **)(a1 + 576);
      if (v4)
        os_release(v4);
    }
    *(_QWORD *)(a1 + 576) = 0;
    if ((*(_BYTE *)(a1 + 568) & 1) != 0)
    {
      v5 = *(const void **)(a1 + 560);
      if (v5)
        CFRelease(v5);
    }
    *(_QWORD *)(a1 + 560) = 0;
    nw_protocol_plugin_retry::~nw_protocol_plugin_retry((nw_protocol_plugin_retry *)(a1 + 344));
    if ((*(_BYTE *)(a1 + 288) & 1) != 0)
    {
      v6 = *(void **)(a1 + 280);
      if (v6)
        os_release(v6);
    }
    *(_QWORD *)(a1 + 280) = 0;
    if ((*(_BYTE *)(a1 + 272) & 1) != 0)
    {
      v7 = *(void **)(a1 + 264);
      if (v7)
        os_release(v7);
    }
    *(_QWORD *)(a1 + 264) = 0;
    if ((*(_BYTE *)(a1 + 256) & 1) != 0)
    {
      v8 = *(void **)(a1 + 248);
      if (v8)
        os_release(v8);
    }
    free((void *)a1);
  }
}

void ___ZL24nw_http_security_connectP25nw_protocol_http_securityP11nw_protocol_block_invoke_3_48(uint64_t a1)
{
  nw_http_security_destroy(*(_QWORD *)(a1 + 32));
}

uint64_t ___ZL24nw_http_security_connectP25nw_protocol_http_securityP11nw_protocol_block_invoke_2_44()
{
  return 1;
}

uint64_t ___ZL24nw_http_security_connectP25nw_protocol_http_securityP11nw_protocol_block_invoke_40()
{
  return 1;
}

uint64_t __Block_byref_object_copy__28464(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(result + 48) = *(_BYTE *)(result + 48) & 0xFE | *(_BYTE *)(a2 + 48) & 1;
  *(_QWORD *)(a2 + 40) = 0;
  *(_BYTE *)(a2 + 48) &= ~1u;
  return result;
}

void __Block_byref_object_dispose__28465(uint64_t a1)
{
  void *v2;

  if ((*(_BYTE *)(a1 + 48) & 1) != 0)
  {
    v2 = *(void **)(a1 + 40);
    if (v2)
      os_release(v2);
  }
  *(_QWORD *)(a1 + 40) = 0;
}

uint64_t __Block_byref_object_copy__12_28471(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(result + 48) = *(_BYTE *)(result + 48) & 0xFE | *(_BYTE *)(a2 + 48) & 1;
  *(_QWORD *)(a2 + 40) = 0;
  *(_BYTE *)(a2 + 48) &= ~1u;
  return result;
}

void __Block_byref_object_dispose__13_28472(uint64_t a1)
{
  void *v2;

  if ((*(_BYTE *)(a1 + 48) & 1) != 0)
  {
    v2 = *(void **)(a1 + 40);
    if (v2)
      os_release(v2);
  }
  *(_QWORD *)(a1 + 40) = 0;
}

uint64_t ___ZL33nw_http_security_process_responseP25nw_protocol_http_securityP20nw_protocol_metadata_block_invoke(uint64_t a1, int a2, nw_protocol_metadata_t metadata)
{
  _BOOL4 is_tls;
  NSObject *v6;
  sec_protocol_metadata_t v7;
  _BOOL4 is_quic_stream;
  uint64_t v9;
  char v10;
  char *v11;
  void *v12;
  uint64_t result;

  is_tls = nw_protocol_metadata_is_tls(metadata);
  v6 = metadata;
  v7 = v6;
  if (!is_tls)
  {
    if (nw_protocol_metadata_is_quic_connection(v6))
    {

    }
    else
    {
      is_quic_stream = nw_protocol_metadata_is_quic_stream(v7);

      if (!is_quic_stream)
        return 1;
    }
    v7 = nw_quic_copy_sec_protocol_metadata(v7);
  }
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v11 = (char *)(v9 + 48);
  v10 = *(_BYTE *)(v9 + 48);
  if ((v10 & 1) != 0)
  {
    v12 = *(void **)(v9 + 40);
    if (v12)
    {
      os_release(v12);
      v10 = *v11;
    }
  }
  *(_QWORD *)(v9 + 40) = v7;
  result = 0;
  *v11 = v10 | 1;
  return result;
}

void sub_18362E5A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL ___ZL33nw_http_security_process_responseP25nw_protocol_http_securityP20nw_protocol_metadata_block_invoke_16(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  _QWORD v4[5];

  v1 = *(_QWORD *)(a1 + 40);
  v2 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZL33nw_http_security_process_responseP25nw_protocol_http_securityP20nw_protocol_metadata_block_invoke_2;
  v4[3] = &__block_descriptor_tmp_18_28480;
  v4[4] = v1;
  return nw_http_fields_enumerate_by_name(v2, (unint64_t)"Strict-Transport-Security", v4);
}

uint64_t ___ZL33nw_http_security_process_responseP25nw_protocol_http_securityP20nw_protocol_metadata_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t v5;
  uint64_t v6;
  id *v7;
  __CFString *v8;
  id v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  const char *v14;
  id v15;
  id v16;
  char *backtrace_string;
  os_log_type_t v18;
  _BOOL4 v19;
  char *v20;
  _BOOL4 v21;
  const char *v22;
  _BOOL4 v23;
  NSObject *v24;
  os_log_type_t v25;
  char v26;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v29;
  __int16 v30;
  char *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(v5 + 560);
  v7 = (id *)*(id *)(v5 + 576);
  if (!v7)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v10 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v29 = "nw_hsts_storage_parse_and_set";
    v11 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v26 = 0;
    if (!__nwlog_fault(v11, &type, &v26))
      goto LABEL_43;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v26)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v12 = (id)gLogObj;
        v13 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          v29 = "nw_hsts_storage_parse_and_set";
          v14 = "%{public}s called with null storage, backtrace limit exceeded";
          goto LABEL_40;
        }
        goto LABEL_42;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v12 = (id)gLogObj;
      v18 = type;
      v19 = os_log_type_enabled(v12, type);
      if (backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446466;
          v29 = "nw_hsts_storage_parse_and_set";
          v30 = 2082;
          v31 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v12, v18, "%{public}s called with null storage, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_43:
        if (!v11)
          goto LABEL_5;
LABEL_44:
        free(v11);
        goto LABEL_5;
      }
      if (!v19)
        goto LABEL_42;
      *(_DWORD *)buf = 136446210;
      v29 = "nw_hsts_storage_parse_and_set";
      v14 = "%{public}s called with null storage, no backtrace";
      goto LABEL_51;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v12 = (id)gLogObj;
    v13 = type;
    if (!os_log_type_enabled(v12, type))
      goto LABEL_42;
    *(_DWORD *)buf = 136446210;
    v29 = "nw_hsts_storage_parse_and_set";
    v14 = "%{public}s called with null storage";
    goto LABEL_40;
  }
  if (!v6)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v15 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v29 = "nw_hsts_storage_parse_and_set";
    v11 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v26 = 0;
    if (!__nwlog_fault(v11, &type, &v26))
      goto LABEL_43;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v26)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v12 = (id)gLogObj;
        v13 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          v29 = "nw_hsts_storage_parse_and_set";
          v14 = "%{public}s called with null url, backtrace limit exceeded";
          goto LABEL_40;
        }
        goto LABEL_42;
      }
      v20 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v12 = (id)gLogObj;
      v18 = type;
      v21 = os_log_type_enabled(v12, type);
      if (v20)
      {
        if (!v21)
          goto LABEL_32;
        *(_DWORD *)buf = 136446466;
        v29 = "nw_hsts_storage_parse_and_set";
        v30 = 2082;
        v31 = v20;
        v22 = "%{public}s called with null url, dumping backtrace:%{public}s";
        goto LABEL_31;
      }
      if (!v21)
        goto LABEL_42;
      *(_DWORD *)buf = 136446210;
      v29 = "nw_hsts_storage_parse_and_set";
      v14 = "%{public}s called with null url, no backtrace";
LABEL_51:
      v24 = v12;
      v25 = v18;
      goto LABEL_41;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v12 = (id)gLogObj;
    v13 = type;
    if (!os_log_type_enabled(v12, type))
      goto LABEL_42;
    *(_DWORD *)buf = 136446210;
    v29 = "nw_hsts_storage_parse_and_set";
    v14 = "%{public}s called with null url";
LABEL_40:
    v24 = v12;
    v25 = v13;
LABEL_41:
    _os_log_impl(&dword_182FBE000, v24, v25, v14, buf, 0xCu);
    goto LABEL_42;
  }
  if (!a4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v16 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v29 = "nw_hsts_storage_parse_and_set";
    v11 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v26 = 0;
    if (!__nwlog_fault(v11, &type, &v26))
      goto LABEL_43;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v12 = (id)gLogObj;
      v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_hsts_storage_parse_and_set";
        v14 = "%{public}s called with null sts_header";
        goto LABEL_40;
      }
LABEL_42:

      goto LABEL_43;
    }
    if (!v26)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v12 = (id)gLogObj;
      v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_hsts_storage_parse_and_set";
        v14 = "%{public}s called with null sts_header, backtrace limit exceeded";
        goto LABEL_40;
      }
      goto LABEL_42;
    }
    v20 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v12 = (id)gLogObj;
    v18 = type;
    v23 = os_log_type_enabled(v12, type);
    if (v20)
    {
      if (!v23)
        goto LABEL_32;
      *(_DWORD *)buf = 136446466;
      v29 = "nw_hsts_storage_parse_and_set";
      v30 = 2082;
      v31 = v20;
      v22 = "%{public}s called with null sts_header, dumping backtrace:%{public}s";
LABEL_31:
      _os_log_impl(&dword_182FBE000, v12, v18, v22, buf, 0x16u);
LABEL_32:

      free(v20);
      if (!v11)
        goto LABEL_5;
      goto LABEL_44;
    }
    if (!v23)
      goto LABEL_42;
    *(_DWORD *)buf = 136446210;
    v29 = "nw_hsts_storage_parse_and_set";
    v14 = "%{public}s called with null sts_header, no backtrace";
    goto LABEL_51;
  }
  v8 = (__CFString *)CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a4, 0x201u);
  objc_msgSend(v7[1], "handleSTSHeader:forURL:", v8, v6);

LABEL_5:
  return 0;
}

uint64_t __Block_byref_object_copy__20(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(result + 48) = *(_BYTE *)(result + 48) & 0xFE | *(_BYTE *)(a2 + 48) & 1;
  *(_QWORD *)(a2 + 40) = 0;
  *(_BYTE *)(a2 + 48) &= ~1u;
  return result;
}

void __Block_byref_object_dispose__21(uint64_t a1)
{
  void *v2;

  if ((*(_BYTE *)(a1 + 48) & 1) != 0)
  {
    v2 = *(void **)(a1 + 40);
    if (v2)
      os_release(v2);
  }
  *(_QWORD *)(a1 + 40) = 0;
}

uint64_t __Block_byref_object_copy__22(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(result + 48) = *(_BYTE *)(result + 48) & 0xFE | *(_BYTE *)(a2 + 48) & 1;
  *(_QWORD *)(a2 + 40) = 0;
  *(_BYTE *)(a2 + 48) &= ~1u;
  return result;
}

void __Block_byref_object_dispose__23(uint64_t a1)
{
  NSObject *v2;

  if ((*(_BYTE *)(a1 + 48) & 1) != 0)
  {
    v2 = *(NSObject **)(a1 + 40);
    if (v2)
      dispatch_release(v2);
  }
  *(_QWORD *)(a1 + 40) = 0;
}

void ___ZL33nw_http_security_process_responseP25nw_protocol_http_securityP20nw_protocol_metadata_block_invoke_24(_QWORD *a1)
{
  __SecTrust *v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  _QWORD v6[6];

  v2 = sec_trust_copy_ref(*(sec_trust_t *)(*(_QWORD *)(a1[5] + 8) + 40));
  v3 = a1[7];
  v4 = *(_QWORD *)(a1[6] + 8);
  v6[0] = MEMORY[0x1E0C809B0];
  v6[2] = ___ZL33nw_http_security_process_responseP25nw_protocol_http_securityP20nw_protocol_metadata_block_invoke_2_25;
  v6[3] = &unk_1E149F048;
  v5 = *(NSObject **)(v4 + 40);
  v6[1] = 0x40000000;
  v6[4] = a1[4];
  v6[5] = v3;
  SecTrustEvaluateAsyncWithError(v2, v5, v6);
  if (v2)
    os_release(v2);
}

void ___ZL33nw_http_security_process_responseP25nw_protocol_http_securityP20nw_protocol_metadata_block_invoke_2_25(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4;
  NSObject *v5;
  _BOOL4 v6;
  int v7;
  const char *v8;
  __int16 v9;
  uint64_t v10;
  __int16 v11;
  const char *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (a3)
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  if (!nw_protocol_plugin_retry_end_async(*(_QWORD *)(a1 + 40) + 344))
  {
    v4 = *(_QWORD *)(a1 + 40);
    if ((*(_BYTE *)(v4 + 198) & 1) == 0 && gLogDatapath)
    {
      v5 = __nwlog_obj();
      v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG);
      v4 = *(_QWORD *)(a1 + 40);
      if (v6)
      {
        v7 = 136446722;
        v8 = "nw_http_security_process_response_block_invoke_2";
        v9 = 2082;
        v10 = v4 + 114;
        v11 = 2080;
        v12 = " ";
        _os_log_impl(&dword_182FBE000, v5, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sDeferred destroy when coming back from callout", (uint8_t *)&v7, 0x20u);
        v4 = *(_QWORD *)(a1 + 40);
      }
    }
    nw_http_security_destroy(v4);
  }
}

void ___ZL39nw_protocol_http_security_get_callbacksv_block_invoke()
{
  qword_1EDCE4588 = (uint64_t)nw_protocol_common_get_input_frames;
  unk_1EDCE4590 = nw_protocol_common_get_output_frames;
  qword_1EDCE45A8 = (uint64_t)nw_protocol_common_get_parameters;
  unk_1EDCE45B0 = nw_protocol_common_get_path;
  qword_1EDCE45B8 = (uint64_t)nw_protocol_common_get_local_endpoint;
  unk_1EDCE45C0 = nw_protocol_common_get_remote_endpoint;
  qword_1EDCE4548 = (uint64_t)nw_protocol_common_replace_input_handler;
  unk_1EDCE4550 = nw_protocol_common_connect;
  qword_1EDCE4558 = (uint64_t)nw_protocol_common_disconnect;
  unk_1EDCE4560 = nw_protocol_common_connected;
  qword_1EDCE4578 = (uint64_t)nw_protocol_common_input_available;
  unk_1EDCE4580 = nw_protocol_common_output_available;
  qword_1EDCE45F8 = (uint64_t)nw_protocol_common_output_finished;
  unk_1EDCE4600 = nw_protocol_common_get_output_local_endpoint;
  qword_1EDCE4640 = (uint64_t)nw_protocol_common_input_flush;
  qword_1EDCE4568 = (uint64_t)nw_protocol_common_disconnected;
  unk_1EDCE4570 = nw_protocol_common_error;
  qword_1EDCE4630 = (uint64_t)nw_protocol_common_get_message_properties;
  unk_1EDCE4638 = nw_protocol_common_reset;
  qword_1EDCE4618 = (uint64_t)nw_protocol_common_copy_info;
  qword_1EDCE45E8 = (uint64_t)nw_protocol_common_supports_external_data;
  unk_1EDCE45F0 = nw_protocol_common_input_finished;
  qword_1EDCE4608 = (uint64_t)nw_protocol_common_get_output_interface;
  unk_1EDCE4610 = nw_protocol_common_waiting_for_output;
  qword_1EDCE45C8 = (uint64_t)nw_protocol_common_register_notification;
  unk_1EDCE45D0 = nw_protocol_common_unregister_notification;
  qword_1EDCE45D8 = (uint64_t)nw_protocol_common_notify;
  unk_1EDCE45E0 = nw_protocol_common_updated_path;
  qword_1EDCE4598 = (uint64_t)nw_protocol_common_finalize_output_frames;
  unk_1EDCE45A0 = nw_protocol_common_link_state;
  nw_protocol_http_security_get_callbacks(void)::protocol_callbacks = (uint64_t)nw_protocol_common_add_input_handler;
  unk_1EDCE4540 = nw_protocol_http_security_remove_input_handler;
}

uint64_t nw_protocol_http_security_remove_input_handler(nw_protocol *a1, nw_protocol *a2, uint64_t a3)
{
  _BYTE *handle;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  const char *v11;
  NSObject *v12;
  char *backtrace_string;
  _BOOL4 v14;
  const char *v15;
  _BOOL4 v16;
  _QWORD v17[5];
  char v18;
  _QWORD v19[5];
  char v20;
  os_log_type_t v21;
  uint8_t buf[4];
  const char *v23;
  __int16 v24;
  char *v25;
  __int16 v26;
  const char *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    handle = a1->handle;
    if (handle)
    {
      if ((handle[198] & 1) == 0 && gLogDatapath)
      {
        v12 = __nwlog_obj();
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136446722;
          v23 = "nw_protocol_http_security_remove_input_handler";
          v24 = 2082;
          v25 = handle + 114;
          v26 = 2080;
          v27 = " ";
          _os_log_impl(&dword_182FBE000, v12, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%scalled", buf, 0x20u);
        }
      }
      v19[0] = MEMORY[0x1E0C809B0];
      v19[1] = 0x40000000;
      v19[2] = ___ZL46nw_protocol_http_security_remove_input_handlerP11nw_protocolS0_b_block_invoke;
      v19[3] = &__block_descriptor_tmp_56;
      v19[4] = handle;
      v17[0] = MEMORY[0x1E0C809B0];
      v17[1] = 0x40000000;
      v17[2] = ___ZL46nw_protocol_http_security_remove_input_handlerP11nw_protocolS0_b_block_invoke_2;
      v17[3] = &__block_descriptor_tmp_57_28504;
      v18 = a3;
      v17[4] = handle;
      return nw_protocol_common_remove_input_handler_with_cleanup_blocks(a1, a2, a3, (uint64_t)v19, (uint64_t)v17);
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v23 = "nw_protocol_http_security_remove_input_handler";
    v8 = (char *)_os_log_send_and_compose_impl();
    v21 = OS_LOG_TYPE_ERROR;
    v20 = 0;
    if (!__nwlog_fault(v8, &v21, &v20))
      goto LABEL_36;
    if (v21 == OS_LOG_TYPE_FAULT)
    {
      v9 = __nwlog_obj();
      v10 = v21;
      if (os_log_type_enabled(v9, v21))
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_protocol_http_security_remove_input_handler";
        v11 = "%{public}s called with null http_security";
        goto LABEL_35;
      }
      goto LABEL_36;
    }
    if (!v20)
    {
      v9 = __nwlog_obj();
      v10 = v21;
      if (os_log_type_enabled(v9, v21))
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_protocol_http_security_remove_input_handler";
        v11 = "%{public}s called with null http_security, backtrace limit exceeded";
        goto LABEL_35;
      }
      goto LABEL_36;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v9 = __nwlog_obj();
    v10 = v21;
    v16 = os_log_type_enabled(v9, v21);
    if (!backtrace_string)
    {
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_protocol_http_security_remove_input_handler";
        v11 = "%{public}s called with null http_security, no backtrace";
        goto LABEL_35;
      }
      goto LABEL_36;
    }
    if (v16)
    {
      *(_DWORD *)buf = 136446466;
      v23 = "nw_protocol_http_security_remove_input_handler";
      v24 = 2082;
      v25 = backtrace_string;
      v15 = "%{public}s called with null http_security, dumping backtrace:%{public}s";
      goto LABEL_25;
    }
    goto LABEL_26;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v23 = "nw_protocol_http_security_remove_input_handler";
  v8 = (char *)_os_log_send_and_compose_impl();
  v21 = OS_LOG_TYPE_ERROR;
  v20 = 0;
  if (!__nwlog_fault(v8, &v21, &v20))
    goto LABEL_36;
  if (v21 != OS_LOG_TYPE_FAULT)
  {
    if (!v20)
    {
      v9 = __nwlog_obj();
      v10 = v21;
      if (os_log_type_enabled(v9, v21))
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_protocol_http_security_remove_input_handler";
        v11 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_35;
      }
      goto LABEL_36;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v9 = __nwlog_obj();
    v10 = v21;
    v14 = os_log_type_enabled(v9, v21);
    if (!backtrace_string)
    {
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_protocol_http_security_remove_input_handler";
        v11 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_35;
      }
      goto LABEL_36;
    }
    if (v14)
    {
      *(_DWORD *)buf = 136446466;
      v23 = "nw_protocol_http_security_remove_input_handler";
      v24 = 2082;
      v25 = backtrace_string;
      v15 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_25:
      _os_log_impl(&dword_182FBE000, v9, v10, v15, buf, 0x16u);
    }
LABEL_26:
    free(backtrace_string);
    goto LABEL_36;
  }
  v9 = __nwlog_obj();
  v10 = v21;
  if (os_log_type_enabled(v9, v21))
  {
    *(_DWORD *)buf = 136446210;
    v23 = "nw_protocol_http_security_remove_input_handler";
    v11 = "%{public}s called with null protocol";
LABEL_35:
    _os_log_impl(&dword_182FBE000, v9, v10, v11, buf, 0xCu);
  }
LABEL_36:
  if (v8)
    free(v8);
  return 0;
}

void ___ZL46nw_protocol_http_security_remove_input_handlerP11nw_protocolS0_b_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  const void *v5;
  char v6;
  const void *v7;
  NSObject *v8;
  int v9;
  const char *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  if (gLogDatapath)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v8 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
    {
      v9 = 136446210;
      v10 = "nw_protocol_plugin_metadata_teardown";
      _os_log_impl(&dword_182FBE000, v8, OS_LOG_TYPE_DEBUG, "%{public}s called", (uint8_t *)&v9, 0xCu);
    }
  }
  nw_protocol_plugin_metadata_reset((uint64_t *)(v2 + 200));
  *(_QWORD *)(v2 + 328) = 0;
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_BYTE *)(v3 + 464);
  if ((v4 & 1) != 0)
  {
    v5 = *(const void **)(v3 + 456);
    if (v5)
    {
      _Block_release(v5);
      v4 = *(_BYTE *)(v3 + 464);
    }
  }
  *(_QWORD *)(v3 + 456) = 0;
  *(_BYTE *)(v3 + 464) = v4 | 1;
  v6 = *(_BYTE *)(v3 + 512);
  if ((v6 & 1) != 0)
  {
    v7 = *(const void **)(v3 + 504);
    if (v7)
    {
      _Block_release(v7);
      v6 = *(_BYTE *)(v3 + 512);
    }
  }
  *(_QWORD *)(v3 + 504) = 0;
  *(_BYTE *)(v3 + 512) = v6 | 1;
}

void ___ZL46nw_protocol_http_security_remove_input_handlerP11nw_protocolS0_b_block_invoke_2(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 40))
    nw_http_security_destroy(*(_QWORD *)(a1 + 32));
}

double __nw_protocol_http_security_identifier_block_invoke()
{
  double result;

  strcpy((char *)nw_protocol_http_security_identifier::protocol_identifier, "http_security");
  *(_QWORD *)&result = 0x100000005;
  qword_1EDCE3D68 = 0x100000005;
  return result;
}

double __nw_protocol_oblivious_http_identifier_block_invoke()
{
  double result;

  strcpy((char *)&nw_protocol_oblivious_http_identifier::ohttp_protocol_identifier, "ohttp");
  *(_QWORD *)&result = 0x100000004;
  qword_1EDCE5260 = 0x100000004;
  return result;
}

double __nw_protocol_oblivious_http_contexts_identifier_block_invoke()
{
  double result;

  strcpy((char *)nw_protocol_oblivious_http_contexts_identifier::ohttp_protocol_identifier, "ohttp-contexts");
  *(_QWORD *)&result = 0x200000004;
  qword_1EDCE4B30 = 0x200000004;
  return result;
}

BOOL nw_protocol_oblivious_http_create(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t *v6;
  _BOOL8 result;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  const char *v11;
  NSObject *v12;
  void *v13;
  char *backtrace_string;
  _BOOL4 v15;
  char v16;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (!a4)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v19 = "nw_protocol_oblivious_http_create";
    v8 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v16 = 0;
    if (__nwlog_fault(v8, &type, &v16))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v9 = __nwlog_obj();
        v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          v19 = "nw_protocol_oblivious_http_create";
          v11 = "%{public}s called with null parameters";
LABEL_31:
          _os_log_impl(&dword_182FBE000, v9, v10, v11, buf, 0xCu);
        }
      }
      else if (v16)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        v9 = __nwlog_obj();
        v10 = type;
        v15 = os_log_type_enabled(v9, type);
        if (backtrace_string)
        {
          if (v15)
          {
            *(_DWORD *)buf = 136446466;
            v19 = "nw_protocol_oblivious_http_create";
            v20 = 2082;
            v21 = (uint64_t)backtrace_string;
            _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(backtrace_string);
          goto LABEL_32;
        }
        if (v15)
        {
          *(_DWORD *)buf = 136446210;
          v19 = "nw_protocol_oblivious_http_create";
          v11 = "%{public}s called with null parameters, no backtrace";
          goto LABEL_31;
        }
      }
      else
      {
        v9 = __nwlog_obj();
        v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          v19 = "nw_protocol_oblivious_http_create";
          v11 = "%{public}s called with null parameters, backtrace limit exceeded";
          goto LABEL_31;
        }
      }
    }
LABEL_32:
    if (v8)
      free(v8);
    return 0;
  }
  v5 = malloc_type_calloc(1uLL, 0x1B8uLL, 0xEAFB8F1AuLL);
  if (v5)
  {
LABEL_3:
    if (nw_protocol_oblivious_http_contexts_identifier::onceToken[0] != -1)
      dispatch_once(nw_protocol_oblivious_http_contexts_identifier::onceToken, &__block_literal_global_3_28514);
    if (nw_protocols_are_equal(a1, nw_protocol_oblivious_http_contexts_identifier::ohttp_protocol_identifier))
    {
      if (nw_protocol_oblivious_http_contexts_identifier::onceToken[0] != -1)
        dispatch_once(nw_protocol_oblivious_http_contexts_identifier::onceToken, &__block_literal_global_3_28514);
      v6 = nw_protocol_oblivious_http_contexts_identifier::ohttp_protocol_identifier;
    }
    else
    {
      if (nw_protocol_oblivious_http_identifier::onceToken != -1)
        dispatch_once(&nw_protocol_oblivious_http_identifier::onceToken, &__block_literal_global_28508);
      v6 = (uint64_t *)&nw_protocol_oblivious_http_identifier::ohttp_protocol_identifier;
    }
    v5[2] = v6;
    if (nw_protocol_ohttp_get_callbacks(void)::onceToken[0] != -1)
      dispatch_once(nw_protocol_ohttp_get_callbacks(void)::onceToken, &__block_literal_global_6);
    v5[3] = &nw_protocol_ohttp_get_callbacks(void)::ohttp_protocol_callbacks;
    v5[41] = 0;
    v5[42] = v5 + 41;
    v5[9] = 0;
    v5[10] = v5 + 9;
    v5[11] = 0;
    v5[5] = v5;
    v5[12] = v5 + 11;
    v5[13] = 0;
    v5[14] = v5 + 13;
    return (BOOL)v5;
  }
  v12 = __nwlog_obj();
  os_log_type_enabled(v12, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  v19 = "strict_calloc";
  v20 = 2048;
  v21 = 1;
  v22 = 2048;
  v23 = 440;
  v13 = (void *)_os_log_send_and_compose_impl();
  result = __nwlog_abort((uint64_t)v13);
  if (!result)
  {
    free(v13);
    goto LABEL_3;
  }
  __break(1u);
  return result;
}

void ___ZL31nw_protocol_ohttp_get_callbacksv_block_invoke()
{
  qword_1EDCE3000 = (uint64_t)nw_protocol_common_get_parameters;
  unk_1EDCE3008 = nw_protocol_common_get_path;
  qword_1EDCE3010 = (uint64_t)nw_protocol_common_get_local_endpoint;
  unk_1EDCE3018 = nw_protocol_common_get_remote_endpoint;
  qword_1EDCE3050 = (uint64_t)nw_protocol_common_output_finished;
  unk_1EDCE3058 = nw_protocol_common_get_output_local_endpoint;
  qword_1EDCE3090 = (uint64_t)nw_protocol_common_reset;
  unk_1EDCE3098 = nw_protocol_common_input_flush;
  qword_1EDCE3088 = (uint64_t)nw_protocol_common_get_message_properties;
  qword_1EDCE3060 = (uint64_t)nw_protocol_common_get_output_interface;
  unk_1EDCE3068 = nw_protocol_common_waiting_for_output;
  qword_1EDCE3020 = (uint64_t)nw_protocol_common_register_notification;
  unk_1EDCE3028 = nw_protocol_common_unregister_notification;
  qword_1EDCE3030 = (uint64_t)nw_protocol_common_notify;
  unk_1EDCE3038 = nw_protocol_common_updated_path;
  nw_protocol_ohttp_get_callbacks(void)::ohttp_protocol_callbacks = (uint64_t)nw_protocol_ohttp_add_input_handler;
  *(_QWORD *)algn_1EDCE2F98 = nw_protocol_ohttp_remove_input_handler;
  qword_1EDCE3040 = (uint64_t)nw_protocol_common_supports_external_data;
  unk_1EDCE3048 = nw_protocol_ohttp_input_finished;
  qword_1EDCE2FE0 = (uint64_t)nw_protocol_ohttp_get_input_frames;
  unk_1EDCE2FE8 = nw_protocol_ohttp_get_output_frames;
  qword_1EDCE2FF0 = (uint64_t)nw_protocol_ohttp_finalize_output_frames;
  unk_1EDCE2FF8 = nw_protocol_common_link_state;
  qword_1EDCE2FD0 = (uint64_t)nw_protocol_ohttp_input_available;
  unk_1EDCE2FD8 = nw_protocol_ohttp_output_available;
  qword_1EDCE3070 = (uint64_t)nw_protocol_ohttp_copy_info;
  qword_1EDCE2FA0 = (uint64_t)nw_protocol_common_replace_input_handler;
  unk_1EDCE2FA8 = nw_protocol_ohttp_connect;
  qword_1EDCE2FB0 = (uint64_t)nw_protocol_ohttp_disconnect;
  unk_1EDCE2FB8 = nw_protocol_ohttp_connected;
  qword_1EDCE2FC0 = (uint64_t)nw_protocol_ohttp_disconnected;
  unk_1EDCE2FC8 = nw_protocol_ohttp_error;
}

BOOL nw_protocol_ohttp_add_input_handler(nw_protocol *a1, nw_protocol *a2)
{
  char *handle;
  nw_protocol *default_input_handler;
  void *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  uint64_t context_id;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  NSObject *v14;
  uint32_t v15;
  uint64_t parameters;
  void *v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  char v24;
  char v25;
  const char *media_type;
  char *v27;
  uint64_t request_path;
  void *v29;
  void *v30;
  const char *v31;
  _BOOL8 v32;
  NSObject *v33;
  uint64_t v34;
  _BOOL8 result;
  uint64_t internal;
  _BOOL8 v37;
  void *v38;
  uint64_t extra;
  const char *v40;
  char *v41;
  _QWORD *v42;
  NSObject *v43;
  char *v44;
  NSObject *v45;
  os_log_type_t v46;
  const char *v47;
  char *backtrace_string;
  _BOOL4 v49;
  const char *v50;
  _BOOL4 v51;
  NSObject *v52;
  void *v53;
  _BOOL4 v54;
  _BOOL4 v55;
  _BOOL4 v56;
  _BOOL4 v57;
  _BOOL4 v58;
  _BOOL4 v59;
  NSObject *v60;
  void *v61;
  char v62;
  os_log_type_t type[8];
  os_log_type_t *v64;
  uint64_t v65;
  uint64_t v66;
  _BYTE buf[24];
  const char *v68;
  __int128 v69;
  uint64_t v70;

  v70 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_ohttp_add_input_handler";
    v44 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    v62 = 0;
    if (!__nwlog_fault(v44, type, &v62))
      goto LABEL_163;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      v45 = __nwlog_obj();
      v46 = type[0];
      if (!os_log_type_enabled(v45, type[0]))
        goto LABEL_163;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_ohttp_add_input_handler";
      v47 = "%{public}s called with null protocol";
      goto LABEL_162;
    }
    if (!v62)
    {
      v45 = __nwlog_obj();
      v46 = type[0];
      if (!os_log_type_enabled(v45, type[0]))
        goto LABEL_163;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_ohttp_add_input_handler";
      v47 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_162;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v45 = __nwlog_obj();
    v46 = type[0];
    v49 = os_log_type_enabled(v45, type[0]);
    if (!backtrace_string)
    {
      if (!v49)
        goto LABEL_163;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_ohttp_add_input_handler";
      v47 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_162;
    }
    if (!v49)
      goto LABEL_79;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "nw_protocol_ohttp_add_input_handler";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = backtrace_string;
    v50 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_78:
    _os_log_impl(&dword_182FBE000, v45, v46, v50, buf, 0x16u);
    goto LABEL_79;
  }
  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_ohttp_add_input_handler";
    v44 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    v62 = 0;
    if (!__nwlog_fault(v44, type, &v62))
      goto LABEL_163;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      v45 = __nwlog_obj();
      v46 = type[0];
      if (!os_log_type_enabled(v45, type[0]))
        goto LABEL_163;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_ohttp_add_input_handler";
      v47 = "%{public}s called with null ohttp";
      goto LABEL_162;
    }
    if (!v62)
    {
      v45 = __nwlog_obj();
      v46 = type[0];
      if (!os_log_type_enabled(v45, type[0]))
        goto LABEL_163;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_ohttp_add_input_handler";
      v47 = "%{public}s called with null ohttp, backtrace limit exceeded";
      goto LABEL_162;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v45 = __nwlog_obj();
    v46 = type[0];
    v51 = os_log_type_enabled(v45, type[0]);
    if (!backtrace_string)
    {
      if (!v51)
        goto LABEL_163;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_ohttp_add_input_handler";
      v47 = "%{public}s called with null ohttp, no backtrace";
      goto LABEL_162;
    }
    if (!v51)
      goto LABEL_79;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "nw_protocol_ohttp_add_input_handler";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = backtrace_string;
    v50 = "%{public}s called with null ohttp, dumping backtrace:%{public}s";
    goto LABEL_78;
  }
  default_input_handler = a1->default_input_handler;
  if (!default_input_handler)
  {
    if ((nw_protocol_common_add_input_handler((uint64_t)a1, (uint64_t)a2) & 1) == 0)
    {
      if ((handle[348] & 1) == 0)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v33 = gLogObj;
        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)&buf[4] = "nw_protocol_ohttp_add_input_handler";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = handle + 349;
          *(_WORD *)&buf[22] = 2080;
          v68 = " ";
          _os_log_impl(&dword_182FBE000, v33, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sfailed to add input handler", buf, 0x20u);
        }
      }
      return 0;
    }
    *((_DWORD *)handle + 86) = 0;
    *((_DWORD *)handle + 72) = 0;
    parameters = nw_protocol_get_parameters((uint64_t)a2);
    if (!parameters)
    {
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_ohttp_add_input_handler";
      v44 = (char *)_os_log_send_and_compose_impl();
      type[0] = OS_LOG_TYPE_ERROR;
      v62 = 0;
      if (!__nwlog_fault(v44, type, &v62))
        goto LABEL_163;
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        v45 = __nwlog_obj();
        v46 = type[0];
        if (!os_log_type_enabled(v45, type[0]))
          goto LABEL_163;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_ohttp_add_input_handler";
        v47 = "%{public}s called with null parameters";
        goto LABEL_162;
      }
      if (!v62)
      {
        v45 = __nwlog_obj();
        v46 = type[0];
        if (!os_log_type_enabled(v45, type[0]))
          goto LABEL_163;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_ohttp_add_input_handler";
        v47 = "%{public}s called with null parameters, backtrace limit exceeded";
        goto LABEL_162;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v45 = __nwlog_obj();
      v46 = type[0];
      v56 = os_log_type_enabled(v45, type[0]);
      if (!backtrace_string)
      {
        if (!v56)
          goto LABEL_163;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_ohttp_add_input_handler";
        v47 = "%{public}s called with null parameters, no backtrace";
        goto LABEL_162;
      }
      if (!v56)
        goto LABEL_79;
LABEL_117:
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_protocol_ohttp_add_input_handler";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = backtrace_string;
      v50 = "%{public}s called with null parameters, dumping backtrace:%{public}s";
      goto LABEL_78;
    }
    v17 = (void *)parameters;
    handle[348] = handle[348] & 0xFE | nw_path_parameters_get_logging_disabled(*(_QWORD *)(parameters + 104));
    v18 = nw_parameters_copy_protocol_options_legacy(v17, a1);
    if (!v18)
    {
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_ohttp_add_input_handler";
      v44 = (char *)_os_log_send_and_compose_impl();
      type[0] = OS_LOG_TYPE_ERROR;
      v62 = 0;
      if (!__nwlog_fault(v44, type, &v62))
        goto LABEL_163;
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        v45 = __nwlog_obj();
        v46 = type[0];
        if (!os_log_type_enabled(v45, type[0]))
          goto LABEL_163;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_ohttp_add_input_handler";
        v47 = "%{public}s called with null ohttp_options";
        goto LABEL_162;
      }
      if (!v62)
      {
        v45 = __nwlog_obj();
        v46 = type[0];
        if (!os_log_type_enabled(v45, type[0]))
          goto LABEL_163;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_ohttp_add_input_handler";
        v47 = "%{public}s called with null ohttp_options, backtrace limit exceeded";
        goto LABEL_162;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v45 = __nwlog_obj();
      v46 = type[0];
      v57 = os_log_type_enabled(v45, type[0]);
      if (!backtrace_string)
      {
        if (!v57)
          goto LABEL_163;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_ohttp_add_input_handler";
        v47 = "%{public}s called with null ohttp_options, no backtrace";
        goto LABEL_162;
      }
      if (v57)
      {
LABEL_121:
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_protocol_ohttp_add_input_handler";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        v50 = "%{public}s called with null ohttp_options, dumping backtrace:%{public}s";
        goto LABEL_78;
      }
LABEL_79:
      free(backtrace_string);
      goto LABEL_163;
    }
    v19 = v18;
    v20 = v19;
    handle[349] = 0;
    v21 = 84;
    v22 = 349;
    while (1)
    {
      v23 = v19[v22 - 301];
      handle[v22] = v23;
      if (!v23)
        break;
      --v21;
      ++v22;
      if (v21 <= 1)
      {
        handle[v22] = 0;
        break;
      }
    }

    if (nw_oblivious_http_get_use_chunks(v20))
      v24 = 2;
    else
      v24 = 0;
    handle[348] = handle[348] & 0xFD | v24;
    if (nw_oblivious_http_get_use_context_ids(v20))
      v25 = 4;
    else
      v25 = 0;
    handle[348] = handle[348] & 0xFB | v25;
    *((_QWORD *)handle + 19) = nw_oblivious_http_copy_config(v20);
    *((_QWORD *)handle + 8) = nw_oblivious_http_get_context_id(v20);
    handle[292] = handle[292] & 0xFE | nw_oblivious_http_get_config_is_standalone_aead(v20);
    media_type = (const char *)nw_oblivious_http_get_media_type(v20);
    if (media_type)
    {
      v27 = strdup(media_type);
      if (!v27)
      {
        v52 = __nwlog_obj();
        os_log_type_enabled(v52, OS_LOG_TYPE_ERROR);
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "strict_strdup";
        v53 = (void *)_os_log_send_and_compose_impl();
        result = __nwlog_abort((uint64_t)v53);
        if (result)
          goto LABEL_167;
        free(v53);
      }
      *((_QWORD *)handle + 35) = v27;
    }
    request_path = nw_oblivious_http_get_request_path(v20);
    v29 = (void *)_nw_http_request_create("POST", 0, 0, request_path);
    v30 = v29;
    if ((handle[348] & 2) != 0)
      v31 = "message/ohttp-chunked-req";
    else
      v31 = "message/ohttp-req";
    nw_http_fields_append(v29, (uint64_t)"Content-Type", (uint64_t)v31);
    *((_QWORD *)handle + 38) = nw_http_create_metadata_for_request(v30);
    if (v30)
      os_release(v30);
    os_release(v20);
    if (!*((_QWORD *)handle + 19))
    {
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_ohttp_add_input_handler";
      v44 = (char *)_os_log_send_and_compose_impl();
      type[0] = OS_LOG_TYPE_ERROR;
      v62 = 0;
      if (!__nwlog_fault(v44, type, &v62))
        goto LABEL_163;
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        v45 = __nwlog_obj();
        v46 = type[0];
        if (!os_log_type_enabled(v45, type[0]))
          goto LABEL_163;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_ohttp_add_input_handler";
        v47 = "%{public}s called with null ohttp->default_context.config";
        goto LABEL_162;
      }
      if (!v62)
      {
        v45 = __nwlog_obj();
        v46 = type[0];
        if (!os_log_type_enabled(v45, type[0]))
          goto LABEL_163;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_ohttp_add_input_handler";
        v47 = "%{public}s called with null ohttp->default_context.config, backtrace limit exceeded";
        goto LABEL_162;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v45 = __nwlog_obj();
      v46 = type[0];
      v58 = os_log_type_enabled(v45, type[0]);
      if (!backtrace_string)
      {
        if (!v58)
          goto LABEL_163;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_ohttp_add_input_handler";
        v47 = "%{public}s called with null ohttp->default_context.config, no backtrace";
        goto LABEL_162;
      }
      if (v58)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_protocol_ohttp_add_input_handler";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        v50 = "%{public}s called with null ohttp->default_context.config, dumping backtrace:%{public}s";
        goto LABEL_78;
      }
      goto LABEL_79;
    }
    if (*((_QWORD *)handle + 38))
      return 1;
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_ohttp_add_input_handler";
    v44 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    v62 = 0;
    if (!__nwlog_fault(v44, type, &v62))
      goto LABEL_163;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      v45 = __nwlog_obj();
      v46 = type[0];
      if (!os_log_type_enabled(v45, type[0]))
        goto LABEL_163;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_ohttp_add_input_handler";
      v47 = "%{public}s called with null ohttp->oblivious_request_metadata";
      goto LABEL_162;
    }
    if (!v62)
    {
      v45 = __nwlog_obj();
      v46 = type[0];
      if (!os_log_type_enabled(v45, type[0]))
        goto LABEL_163;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_ohttp_add_input_handler";
      v47 = "%{public}s called with null ohttp->oblivious_request_metadata, backtrace limit exceeded";
      goto LABEL_162;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v45 = __nwlog_obj();
    v46 = type[0];
    v59 = os_log_type_enabled(v45, type[0]);
    if (backtrace_string)
    {
      if (!v59)
        goto LABEL_79;
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_protocol_ohttp_add_input_handler";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = backtrace_string;
      v50 = "%{public}s called with null ohttp->oblivious_request_metadata, dumping backtrace:%{public}s";
      goto LABEL_78;
    }
    if (!v59)
      goto LABEL_163;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_ohttp_add_input_handler";
    v47 = "%{public}s called with null ohttp->oblivious_request_metadata, no backtrace";
LABEL_162:
    _os_log_impl(&dword_182FBE000, v45, v46, v47, buf, 0xCu);
LABEL_163:
    if (v44)
      free(v44);
    return 0;
  }
  if (default_input_handler == a2 || (~handle[348] & 6) != 0)
    return 0;
  v6 = (void *)nw_protocol_get_parameters((uint64_t)a2);
  if (!v6)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_ohttp_add_input_handler";
    v44 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    v62 = 0;
    if (!__nwlog_fault(v44, type, &v62))
      goto LABEL_163;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      v45 = __nwlog_obj();
      v46 = type[0];
      if (!os_log_type_enabled(v45, type[0]))
        goto LABEL_163;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_ohttp_add_input_handler";
      v47 = "%{public}s called with null parameters";
      goto LABEL_162;
    }
    if (!v62)
    {
      v45 = __nwlog_obj();
      v46 = type[0];
      if (!os_log_type_enabled(v45, type[0]))
        goto LABEL_163;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_ohttp_add_input_handler";
      v47 = "%{public}s called with null parameters, backtrace limit exceeded";
      goto LABEL_162;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v45 = __nwlog_obj();
    v46 = type[0];
    v54 = os_log_type_enabled(v45, type[0]);
    if (!backtrace_string)
    {
      if (!v54)
        goto LABEL_163;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_ohttp_add_input_handler";
      v47 = "%{public}s called with null parameters, no backtrace";
      goto LABEL_162;
    }
    if (!v54)
      goto LABEL_79;
    goto LABEL_117;
  }
  v7 = nw_parameters_copy_protocol_options_legacy(v6, a1);
  if (!v7)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_ohttp_add_input_handler";
    v44 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    v62 = 0;
    if (!__nwlog_fault(v44, type, &v62))
      goto LABEL_163;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      v45 = __nwlog_obj();
      v46 = type[0];
      if (!os_log_type_enabled(v45, type[0]))
        goto LABEL_163;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_ohttp_add_input_handler";
      v47 = "%{public}s called with null ohttp_options";
      goto LABEL_162;
    }
    if (!v62)
    {
      v45 = __nwlog_obj();
      v46 = type[0];
      if (!os_log_type_enabled(v45, type[0]))
        goto LABEL_163;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_ohttp_add_input_handler";
      v47 = "%{public}s called with null ohttp_options, backtrace limit exceeded";
      goto LABEL_162;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v45 = __nwlog_obj();
    v46 = type[0];
    v55 = os_log_type_enabled(v45, type[0]);
    if (!backtrace_string)
    {
      if (!v55)
        goto LABEL_163;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_ohttp_add_input_handler";
      v47 = "%{public}s called with null ohttp_options, no backtrace";
      goto LABEL_162;
    }
    if (v55)
      goto LABEL_121;
    goto LABEL_79;
  }
  v8 = v7;
  if ((nw_oblivious_http_get_use_context_ids(v7) & 1) == 0)
  {
    if ((handle[348] & 1) != 0)
      goto LABEL_46;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v34 = gLogObj;
    if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      goto LABEL_46;
    *(_DWORD *)buf = 136446722;
    *(_QWORD *)&buf[4] = "nw_protocol_ohttp_add_input_handler";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = handle + 349;
    *(_WORD *)&buf[22] = 2080;
    v68 = " ";
    v13 = "%{public}s %{public}s%sOptions do not enable using context IDs";
    v14 = v34;
    v15 = 32;
    goto LABEL_45;
  }
  context_id = nw_oblivious_http_get_context_id(v8);
  if (*((_QWORD *)handle + 8) == context_id)
  {
LABEL_12:
    if ((handle[348] & 1) != 0)
      goto LABEL_46;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v12 = gLogObj;
    if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      goto LABEL_46;
    *(_DWORD *)buf = 136446978;
    *(_QWORD *)&buf[4] = "nw_protocol_ohttp_add_input_handler";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = handle + 349;
    *(_WORD *)&buf[22] = 2080;
    v68 = " ";
    LOWORD(v69) = 2048;
    *(_QWORD *)((char *)&v69 + 2) = context_id;
    v13 = "%{public}s %{public}s%sContext already added for ID %llu";
    v14 = v12;
    v15 = 42;
LABEL_45:
    _os_log_impl(&dword_182FBE000, v14, OS_LOG_TYPE_ERROR, v13, buf, v15);
LABEL_46:
    os_release(v8);
    return 0;
  }
  v10 = (char *)*((_QWORD *)handle + 37);
  if (!v10)
    goto LABEL_50;
  *(_QWORD *)type = 0;
  v64 = type;
  v65 = 0x2000000000;
  v66 = 0;
  *(_QWORD *)buf = MEMORY[0x1E0C809B0];
  *(_QWORD *)&buf[8] = 0x40000000;
  *(_QWORD *)&buf[16] = ___ZL44nw_protocol_ohttp_get_context_for_context_idP17nw_protocol_ohttpy_block_invoke;
  v68 = (const char *)&unk_1E149F2C8;
  *(_QWORD *)&v69 = type;
  *((_QWORD *)&v69 + 1) = context_id;
  nw_hash_table_apply(v10, (uint64_t)buf);
  v11 = *((_QWORD *)v64 + 3);
  _Block_object_dispose(type, 8);
  if (v11)
    goto LABEL_12;
  internal = *((_QWORD *)handle + 37);
  if (!internal)
  {
LABEL_50:
    internal = nw_hash_table_create_internal(5u, 232, (const void *(*)(const void *, unsigned int *))nw_protocol_get_key, (unsigned int (*)(const void *, unsigned int))nw_protocol_key_hash, (BOOL (*)(const void *, const void *, unsigned int))nw_protocol_matches_key, 0);
    if (internal)
      *(_DWORD *)(internal + 48) &= ~2u;
    *((_QWORD *)handle + 37) = internal;
  }
  type[0] = OS_LOG_TYPE_DEFAULT;
  v37 = nw_hash_table_add_object(internal, (uint64_t)a2, (char *)type);
  v32 = type[0] != OS_LOG_TYPE_DEFAULT;
  if (type[0] == OS_LOG_TYPE_DEFAULT)
  {
    if ((handle[348] & 1) == 0)
    {
      v43 = __nwlog_obj();
      if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136447234;
        *(_QWORD *)&buf[4] = "nw_protocol_ohttp_add_input_handler";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = handle + 349;
        *(_WORD *)&buf[22] = 2080;
        v68 = " ";
        LOWORD(v69) = 1042;
        *(_DWORD *)((char *)&v69 + 2) = 16;
        WORD3(v69) = 2098;
        *((_QWORD *)&v69 + 1) = a2;
        _os_log_impl(&dword_182FBE000, v43, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sInput handler already registered for %{public,uuid_t}.16P", buf, 0x30u);
      }
    }
    os_release(v8);
    return v32;
  }
  v38 = (void *)v37;
  extra = nw_hash_node_get_extra(v37);
  *(_DWORD *)(extra + 224) = 0;
  *(_QWORD *)(extra + 88) = nw_oblivious_http_copy_config(v8);
  *(_BYTE *)(extra + 228) = *(_BYTE *)(extra + 228) & 0xFE | nw_oblivious_http_get_config_is_standalone_aead(v8);
  *(_QWORD *)extra = context_id;
  v40 = (const char *)nw_oblivious_http_get_media_type(v8);
  if (!v40)
  {
LABEL_57:
    *(_QWORD *)(extra + 8) = 0;
    v42 = (_QWORD *)(extra + 8);
    v42[2] = 0;
    v42[1] = v42;
    v42[3] = v42 + 2;
    v42[4] = 0;
    v42[5] = v42 + 4;
    os_release(v8);
    a2->output_handler_context = v38;
    nw_protocol_set_output_handler((uint64_t)a2, (uint64_t)a1);
    return v32;
  }
  v41 = strdup(v40);
  if (v41)
  {
LABEL_56:
    *(_QWORD *)(extra + 216) = v41;
    goto LABEL_57;
  }
  v60 = __nwlog_obj();
  os_log_type_enabled(v60, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "strict_strdup";
  v61 = (void *)_os_log_send_and_compose_impl();
  result = __nwlog_abort((uint64_t)v61);
  if (!result)
  {
    free(v61);
    goto LABEL_56;
  }
LABEL_167:
  __break(1u);
  return result;
}

uint64_t nw_protocol_ohttp_remove_input_handler(nw_protocol *a1, nw_protocol *a2, int a3)
{
  _QWORD *handle;
  void *output_handler_context;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  nw_protocol *output_handler;
  uint64_t v14;
  char *v16;
  NSObject *v17;
  os_log_type_t v18;
  const char *v19;
  char *backtrace_string;
  _BOOL4 v21;
  const char *v22;
  _BOOL4 v23;
  NSObject *v24;
  _QWORD v25[5];
  char v26;
  os_log_type_t type;
  _BYTE buf[24];
  void *v29;
  _QWORD *v30;
  char v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_ohttp_remove_input_handler";
    v16 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v26 = 0;
    if (!__nwlog_fault(v16, &type, &v26))
      goto LABEL_53;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v26)
      {
        v17 = __nwlog_obj();
        v18 = type;
        if (!os_log_type_enabled(v17, type))
          goto LABEL_53;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_ohttp_remove_input_handler";
        v19 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_52;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v17 = __nwlog_obj();
      v18 = type;
      v21 = os_log_type_enabled(v17, type);
      if (!backtrace_string)
      {
        if (!v21)
          goto LABEL_53;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_ohttp_remove_input_handler";
        v19 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_52;
      }
      if (v21)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_protocol_ohttp_remove_input_handler";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        v22 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_40:
        _os_log_impl(&dword_182FBE000, v17, v18, v22, buf, 0x16u);
      }
LABEL_41:
      free(backtrace_string);
      goto LABEL_53;
    }
    v17 = __nwlog_obj();
    v18 = type;
    if (!os_log_type_enabled(v17, type))
      goto LABEL_53;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_ohttp_remove_input_handler";
    v19 = "%{public}s called with null protocol";
LABEL_52:
    _os_log_impl(&dword_182FBE000, v17, v18, v19, buf, 0xCu);
LABEL_53:
    if (v16)
      free(v16);
    return 0;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_ohttp_remove_input_handler";
    v16 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v26 = 0;
    if (!__nwlog_fault(v16, &type, &v26))
      goto LABEL_53;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v17 = __nwlog_obj();
      v18 = type;
      if (!os_log_type_enabled(v17, type))
        goto LABEL_53;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_ohttp_remove_input_handler";
      v19 = "%{public}s called with null ohttp";
      goto LABEL_52;
    }
    if (!v26)
    {
      v17 = __nwlog_obj();
      v18 = type;
      if (!os_log_type_enabled(v17, type))
        goto LABEL_53;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_ohttp_remove_input_handler";
      v19 = "%{public}s called with null ohttp, backtrace limit exceeded";
      goto LABEL_52;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v17 = __nwlog_obj();
    v18 = type;
    v23 = os_log_type_enabled(v17, type);
    if (backtrace_string)
    {
      if (v23)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_protocol_ohttp_remove_input_handler";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        v22 = "%{public}s called with null ohttp, dumping backtrace:%{public}s";
        goto LABEL_40;
      }
      goto LABEL_41;
    }
    if (!v23)
      goto LABEL_53;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_ohttp_remove_input_handler";
    v19 = "%{public}s called with null ohttp, no backtrace";
    goto LABEL_52;
  }
  if (a2->output_handler == a1)
    nw_protocol_set_output_handler((uint64_t)a2, 0);
  if (a1->default_input_handler == a2)
  {
    nw_protocol_set_input_handler((uint64_t)a1, 0);
    if (gLogDatapath)
    {
      v24 = __nwlog_obj();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_finalize_temp_frame_array";
        _os_log_impl(&dword_182FBE000, v24, OS_LOG_TYPE_DEBUG, "%{public}s called", buf, 0xCu);
      }
    }
    v9 = MEMORY[0x1E0C809B0];
    *(_QWORD *)buf = MEMORY[0x1E0C809B0];
    *(_QWORD *)&buf[8] = 0x40000000;
    *(_QWORD *)&buf[16] = ___ZL37nw_protocol_finalize_temp_frame_arrayP16nw_frame_array_sb_block_invoke_28754;
    v29 = &__block_descriptor_tmp_15_28755;
    v30 = handle + 41;
    v31 = 0;
    v10 = handle[41];
    do
    {
      if (!v10)
        break;
      v11 = *(_QWORD *)(v10 + 32);
      v12 = (*(uint64_t (**)(_BYTE *))&buf[16])(buf);
      v10 = v11;
    }
    while ((v12 & 1) != 0);
    nw_protocol_remove_input_handler((uint64_t)a1->output_handler, (uint64_t)a1);
    output_handler = a1->output_handler;
    if (output_handler)
    {
      nw_protocol_remove_input_handler((uint64_t)output_handler, (uint64_t)a1);
      nw_protocol_set_output_handler((uint64_t)a1, 0);
    }
    if (!a3)
      return 1;
    v14 = handle[37];
    if (v14 && *(_DWORD *)(v14 + 40))
    {
      v25[0] = v9;
      v25[1] = 0x40000000;
      v25[2] = ___ZL38nw_protocol_ohttp_remove_input_handlerP11nw_protocolS0_b_block_invoke;
      v25[3] = &__block_descriptor_tmp_13_29002;
      v25[4] = handle;
      nw_hash_table_apply((char *)v14, (uint64_t)v25);
      return 1;
    }
LABEL_22:
    nw_protocol_ohttp_destroy(handle);
    return 1;
  }
  output_handler_context = a2->output_handler_context;
  if (output_handler_context)
  {
    a2->output_handler_context = 0;
    nw_protocol_set_output_handler((uint64_t)a2, 0);
    nw_protocol_ohttp_context_destroy_node((uint64_t)handle, (uint64_t)output_handler_context);
    if (!a3)
      return 1;
    if (a1->default_input_handler)
      return 1;
    v8 = handle[37];
    if (v8)
    {
      if (*(_DWORD *)(v8 + 40))
        return 1;
    }
    goto LABEL_22;
  }
  return 0;
}

uint64_t nw_protocol_ohttp_get_input_frames(nw_protocol *a1, nw_protocol *a2, unsigned int a3, unsigned int a4, unsigned int a5, nw_frame_array_s *a6)
{
  _BYTE *handle;
  uint64_t context_for_protocol;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v15;
  BOOL v16;
  size_t v17;
  _BOOL8 v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  NSObject *v22;
  os_log_type_t v23;
  uint32_t v24;
  uint64_t v25;
  NSObject *v26;
  int v27;
  NSObject *v28;
  uint64_t v29;
  uint64_t *v30;
  nw_frame **v31;
  NSObject *v32;
  const char *v33;
  NSObject *v34;
  uint32_t v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  NSObject *v39;
  uint32_t v40;
  _BOOL8 v41;
  uint64_t v42;
  uint64_t *v43;
  nw_frame **tqh_last;
  NSObject *v45;
  NSObject *v46;
  uint64_t v47;
  uint64_t *v48;
  nw_frame **v49;
  nw_protocol *v50;
  uint64_t v51;
  char *v52;
  NSObject *v53;
  os_log_type_t v54;
  const char *v55;
  char *backtrace_string;
  _BOOL4 v57;
  const char *v58;
  _BOOL4 v59;
  _BOOL4 v60;
  char v62;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v65;
  __int16 v66;
  char *v67;
  __int16 v68;
  const char *v69;
  __int16 v70;
  nw_protocol *v71;
  __int16 v72;
  uint64_t v73;
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v65 = "nw_protocol_ohttp_get_input_frames";
    v52 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v62 = 0;
    if (!__nwlog_fault(v52, &type, &v62))
      goto LABEL_98;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v53 = __nwlog_obj();
      v54 = type;
      if (!os_log_type_enabled(v53, type))
        goto LABEL_98;
      *(_DWORD *)buf = 136446210;
      v65 = "nw_protocol_ohttp_get_input_frames";
      v55 = "%{public}s called with null protocol";
      goto LABEL_97;
    }
    if (!v62)
    {
      v53 = __nwlog_obj();
      v54 = type;
      if (!os_log_type_enabled(v53, type))
        goto LABEL_98;
      *(_DWORD *)buf = 136446210;
      v65 = "nw_protocol_ohttp_get_input_frames";
      v55 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_97;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v53 = __nwlog_obj();
    v54 = type;
    v57 = os_log_type_enabled(v53, type);
    if (!backtrace_string)
    {
      if (!v57)
        goto LABEL_98;
      *(_DWORD *)buf = 136446210;
      v65 = "nw_protocol_ohttp_get_input_frames";
      v55 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_97;
    }
    if (!v57)
      goto LABEL_84;
    *(_DWORD *)buf = 136446466;
    v65 = "nw_protocol_ohttp_get_input_frames";
    v66 = 2082;
    v67 = backtrace_string;
    v58 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_83:
    _os_log_impl(&dword_182FBE000, v53, v54, v58, buf, 0x16u);
    goto LABEL_84;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v65 = "nw_protocol_ohttp_get_input_frames";
    v52 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v62 = 0;
    if (!__nwlog_fault(v52, &type, &v62))
      goto LABEL_98;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v53 = __nwlog_obj();
      v54 = type;
      if (!os_log_type_enabled(v53, type))
        goto LABEL_98;
      *(_DWORD *)buf = 136446210;
      v65 = "nw_protocol_ohttp_get_input_frames";
      v55 = "%{public}s called with null ohttp";
      goto LABEL_97;
    }
    if (!v62)
    {
      v53 = __nwlog_obj();
      v54 = type;
      if (!os_log_type_enabled(v53, type))
        goto LABEL_98;
      *(_DWORD *)buf = 136446210;
      v65 = "nw_protocol_ohttp_get_input_frames";
      v55 = "%{public}s called with null ohttp, backtrace limit exceeded";
      goto LABEL_97;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v53 = __nwlog_obj();
    v54 = type;
    v59 = os_log_type_enabled(v53, type);
    if (!backtrace_string)
    {
      if (!v59)
        goto LABEL_98;
      *(_DWORD *)buf = 136446210;
      v65 = "nw_protocol_ohttp_get_input_frames";
      v55 = "%{public}s called with null ohttp, no backtrace";
      goto LABEL_97;
    }
    if (!v59)
      goto LABEL_84;
    *(_DWORD *)buf = 136446466;
    v65 = "nw_protocol_ohttp_get_input_frames";
    v66 = 2082;
    v67 = backtrace_string;
    v58 = "%{public}s called with null ohttp, dumping backtrace:%{public}s";
    goto LABEL_83;
  }
  if (!a6)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v65 = "nw_protocol_ohttp_get_input_frames";
    v52 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v62 = 0;
    if (!__nwlog_fault(v52, &type, &v62))
      goto LABEL_98;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v53 = __nwlog_obj();
      v54 = type;
      if (!os_log_type_enabled(v53, type))
        goto LABEL_98;
      *(_DWORD *)buf = 136446210;
      v65 = "nw_protocol_ohttp_get_input_frames";
      v55 = "%{public}s called with null return_array";
      goto LABEL_97;
    }
    if (!v62)
    {
      v53 = __nwlog_obj();
      v54 = type;
      if (!os_log_type_enabled(v53, type))
        goto LABEL_98;
      *(_DWORD *)buf = 136446210;
      v65 = "nw_protocol_ohttp_get_input_frames";
      v55 = "%{public}s called with null return_array, backtrace limit exceeded";
      goto LABEL_97;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v53 = __nwlog_obj();
    v54 = type;
    v60 = os_log_type_enabled(v53, type);
    if (backtrace_string)
    {
      if (v60)
      {
        *(_DWORD *)buf = 136446466;
        v65 = "nw_protocol_ohttp_get_input_frames";
        v66 = 2082;
        v67 = backtrace_string;
        v58 = "%{public}s called with null return_array, dumping backtrace:%{public}s";
        goto LABEL_83;
      }
LABEL_84:
      free(backtrace_string);
      goto LABEL_98;
    }
    if (!v60)
      goto LABEL_98;
    *(_DWORD *)buf = 136446210;
    v65 = "nw_protocol_ohttp_get_input_frames";
    v55 = "%{public}s called with null return_array, no backtrace";
LABEL_97:
    _os_log_impl(&dword_182FBE000, v53, v54, v55, buf, 0xCu);
LABEL_98:
    if (v52)
      free(v52);
    return 0;
  }
  context_for_protocol = nw_protocol_ohttp_get_context_for_protocol((uint64_t)a1->handle, (uint64_t)a2);
  if (!context_for_protocol)
  {
    if ((handle[348] & 1) != 0)
      return 0;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v20 = gLogObj;
    if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      return 0;
    *(_DWORD *)buf = 136446978;
    v65 = "nw_protocol_ohttp_get_input_frames";
    v66 = 2082;
    v67 = handle + 349;
    v68 = 2080;
    v69 = " ";
    v70 = 2048;
    v71 = a2;
    v21 = "%{public}s %{public}s%sfailed to find context for %p";
    v22 = v20;
    v23 = OS_LOG_TYPE_ERROR;
    v24 = 42;
    goto LABEL_22;
  }
  v11 = context_for_protocol;
  if (*(_DWORD *)(context_for_protocol + 224) != 4)
  {
    v25 = 0;
    if ((handle[348] & 1) != 0 || !gLogDatapath)
      return v25;
    v26 = __nwlog_obj();
    if (!os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
      return 0;
    v27 = *(_DWORD *)(v11 + 224);
    *(_DWORD *)buf = 136446978;
    v65 = "nw_ohttp_context_get_input_frames";
    v66 = 2082;
    v67 = handle + 349;
    v68 = 2080;
    v69 = " ";
    v70 = 1024;
    LODWORD(v71) = v27;
    v21 = "%{public}s %{public}s%sskipping, state %u";
    v22 = v26;
    v23 = OS_LOG_TYPE_DEBUG;
    v24 = 38;
LABEL_22:
    _os_log_impl(&dword_182FBE000, v22, v23, v21, buf, v24);
    return 0;
  }
  v13 = *(_QWORD *)(context_for_protocol + 168);
  v12 = *(_QWORD *)(context_for_protocol + 176);
  if ((*(_BYTE *)(context_for_protocol + 228) & 0x44) == 0x40 && v13 == v12)
  {
    v25 = 0;
    if ((handle[348] & 1) != 0 || !gLogDatapath)
      return v25;
    v28 = __nwlog_obj();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446722;
      v65 = "nw_ohttp_context_get_input_frames";
      v66 = 2082;
      v67 = handle + 349;
      v68 = 2080;
      v69 = " ";
      v21 = "%{public}s %{public}s%sskipping, no new bytes to read";
      v22 = v28;
      v23 = OS_LOG_TYPE_DEBUG;
      v24 = 32;
      goto LABEL_22;
    }
    return 0;
  }
  v15 = a4;
  if (v12)
    v16 = 1;
  else
    v16 = v13 > a4;
  if (v16)
  {
    v17 = v13 - v12;
    if (v13 - v12 <= a4)
    {
      if (v13 == v12)
      {
        v36 = 0;
      }
      else
      {
        v41 = nw_calloc_type<unsigned char>(v13 - v12);
        v36 = v41;
        if (v41)
          memcpy((void *)v41, (const void *)(*(_QWORD *)(v11 + 160) + *(_QWORD *)(v11 + 176)), v17);
      }
      v42 = nw_frame_create(0, v36, v17, (uint64_t)nw_protocol_ohttp_input_frame_finalizer, v11);
      nw_frame_set_buffer_used_malloc(v42, 1);
      *(_QWORD *)(v11 + 176) += v17;
      nw_frame_set_metadata(v42, *(NSObject **)(v11 + 80), 1, (*(unsigned __int8 *)(v11 + 228) >> 2) & 1);
      *(_BYTE *)(v11 + 228) |= 0x40u;
      *(_QWORD *)(v42 + 16) = 0;
      v43 = *(uint64_t **)(v11 + 48);
      *(_QWORD *)(v42 + 24) = v43;
      *v43 = v42;
      *(_QWORD *)(v11 + 48) = v42 + 16;
      *(_QWORD *)(v42 + 32) = 0;
      tqh_last = a6->tqh_last;
      *(_QWORD *)(v42 + 40) = tqh_last;
      *tqh_last = (nw_frame *)v42;
      a6->tqh_last = (nw_frame **)(v42 + 32);
      if ((*(_BYTE *)(v11 + 228) & 4) != 0)
      {
        *(_DWORD *)(v11 + 224) = 5;
        if ((handle[348] & 1) != 0)
          return 1;
        v46 = __nwlog_obj();
        if (!os_log_type_enabled(v46, OS_LOG_TYPE_DEBUG))
          return 1;
        *(_DWORD *)buf = 136446722;
        v65 = "nw_ohttp_context_get_input_frames";
        v66 = 2082;
        v67 = handle + 349;
        v68 = 2080;
        v69 = " ";
        v38 = "%{public}s %{public}s%sDelivered end of response";
        v39 = v46;
        v40 = 32;
        goto LABEL_51;
      }
      v25 = 1;
      if ((handle[348] & 1) != 0)
        return v25;
      if (!gLogDatapath)
        return v25;
      v45 = __nwlog_obj();
      if (!os_log_type_enabled(v45, OS_LOG_TYPE_DEBUG))
        return v25;
    }
    else
    {
      if (a4)
      {
        v18 = nw_calloc_type<unsigned char>(a4);
        v19 = v18;
        if (v18)
          memcpy((void *)v18, (const void *)(*(_QWORD *)(v11 + 160) + *(_QWORD *)(v11 + 176)), a4);
      }
      else
      {
        v19 = 0;
      }
      v47 = nw_frame_create(0, v19, a4, (uint64_t)nw_protocol_ohttp_input_frame_finalizer, v11);
      v25 = 1;
      nw_frame_set_buffer_used_malloc(v47, 1);
      *(_QWORD *)(v11 + 176) += v15;
      nw_frame_set_metadata(v47, *(NSObject **)(v11 + 80), 1, 0);
      *(_BYTE *)(v11 + 228) |= 0x40u;
      *(_QWORD *)(v47 + 16) = 0;
      v48 = *(uint64_t **)(v11 + 48);
      *(_QWORD *)(v47 + 24) = v48;
      *v48 = v47;
      *(_QWORD *)(v11 + 48) = v47 + 16;
      *(_QWORD *)(v47 + 32) = 0;
      v49 = a6->tqh_last;
      *(_QWORD *)(v47 + 40) = v49;
      *v49 = (nw_frame *)v47;
      a6->tqh_last = (nw_frame **)(v47 + 32);
      if ((handle[348] & 1) != 0)
        return v25;
      if (!gLogDatapath)
        return v25;
      v45 = __nwlog_obj();
      if (!os_log_type_enabled(v45, OS_LOG_TYPE_DEBUG))
        return v25;
    }
    v51 = *(_QWORD *)(v11 + 168);
    v50 = *(nw_protocol **)(v11 + 176);
    *(_DWORD *)buf = 136447234;
    v65 = "nw_ohttp_context_get_input_frames";
    v66 = 2082;
    v67 = handle + 349;
    v68 = 2080;
    v69 = " ";
    v70 = 2048;
    v71 = v50;
    v72 = 2048;
    v73 = v51;
    v33 = "%{public}s %{public}s%sDelivered partial response (%zu/%zu)";
    v34 = v45;
    v35 = 52;
    goto LABEL_58;
  }
  v29 = nw_frame_create(0, *(_QWORD *)(context_for_protocol + 160), *(_QWORD *)(context_for_protocol + 168), (uint64_t)nw_protocol_ohttp_input_frame_finalizer, context_for_protocol);
  nw_frame_set_buffer_used_malloc(v29, 1);
  *(_QWORD *)(v11 + 160) = 0;
  *(_QWORD *)(v11 + 168) = 0;
  *(_QWORD *)(v11 + 176) = 0;
  nw_frame_set_metadata(v29, *(NSObject **)(v11 + 80), 1, (*(unsigned __int8 *)(v11 + 228) >> 2) & 1);
  *(_BYTE *)(v11 + 228) |= 0x40u;
  *(_QWORD *)(v29 + 16) = 0;
  v30 = *(uint64_t **)(v11 + 48);
  *(_QWORD *)(v29 + 24) = v30;
  *v30 = v29;
  *(_QWORD *)(v11 + 48) = v29 + 16;
  *(_QWORD *)(v29 + 32) = 0;
  v31 = a6->tqh_last;
  *(_QWORD *)(v29 + 40) = v31;
  *v31 = (nw_frame *)v29;
  a6->tqh_last = (nw_frame **)(v29 + 32);
  if ((*(_BYTE *)(v11 + 228) & 4) != 0)
  {
    *(_DWORD *)(v11 + 224) = 5;
    if ((handle[348] & 1) != 0)
      return 1;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v37 = gLogObj;
    if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
      return 1;
    *(_DWORD *)buf = 136446978;
    v65 = "nw_ohttp_context_get_input_frames";
    v66 = 2082;
    v67 = handle + 349;
    v68 = 2080;
    v69 = " ";
    v70 = 2048;
    v71 = (nw_protocol *)v13;
    v38 = "%{public}s %{public}s%sDelivered complete response (%zu)";
    v39 = v37;
    v40 = 42;
LABEL_51:
    _os_log_impl(&dword_182FBE000, v39, OS_LOG_TYPE_DEBUG, v38, buf, v40);
    return 1;
  }
  v25 = 1;
  if ((handle[348] & 1) == 0)
  {
    if (gLogDatapath)
    {
      v32 = __nwlog_obj();
      if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446978;
        v65 = "nw_ohttp_context_get_input_frames";
        v66 = 2082;
        v67 = handle + 349;
        v68 = 2080;
        v69 = " ";
        v70 = 2048;
        v71 = (nw_protocol *)v13;
        v33 = "%{public}s %{public}s%sDelivered partial response (%zu)";
        v34 = v32;
        v35 = 42;
LABEL_58:
        _os_log_impl(&dword_182FBE000, v34, OS_LOG_TYPE_DEBUG, v33, buf, v35);
      }
    }
  }
  return v25;
}

void nw_protocol_ohttp_input_available(nw_protocol *a1, nw_protocol *a2)
{
  void *handle;
  char *v3;
  NSObject *v4;
  os_log_type_t v5;
  const char *v6;
  char *backtrace_string;
  _BOOL4 v8;
  char *v9;
  _BOOL4 v10;
  char v11;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v14 = "nw_protocol_ohttp_input_available";
    v3 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v11 = 0;
    if (!__nwlog_fault(v3, &type, &v11))
      goto LABEL_32;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (!os_log_type_enabled(v4, type))
        goto LABEL_32;
      *(_DWORD *)buf = 136446210;
      v14 = "nw_protocol_ohttp_input_available";
      v6 = "%{public}s called with null protocol";
LABEL_31:
      _os_log_impl(&dword_182FBE000, v4, v5, v6, buf, 0xCu);
      goto LABEL_32;
    }
    if (!v11)
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (!os_log_type_enabled(v4, type))
        goto LABEL_32;
      *(_DWORD *)buf = 136446210;
      v14 = "nw_protocol_ohttp_input_available";
      v6 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_31;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v4 = __nwlog_obj();
    v5 = type;
    v8 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (!v8)
        goto LABEL_32;
      *(_DWORD *)buf = 136446210;
      v14 = "nw_protocol_ohttp_input_available";
      v6 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_31;
    }
    if (v8)
    {
      *(_DWORD *)buf = 136446466;
      v14 = "nw_protocol_ohttp_input_available";
      v15 = 2082;
      v16 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v4, v5, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(backtrace_string);
LABEL_32:
    if (!v3)
      return;
    goto LABEL_33;
  }
  handle = a1->handle;
  if (handle)
  {
    nw_protocol_ohttp_read_response((uint64_t)handle);
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v14 = "nw_protocol_ohttp_input_available";
  v3 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v11 = 0;
  if (!__nwlog_fault(v3, &type, &v11))
    goto LABEL_32;
  if (type == OS_LOG_TYPE_FAULT)
  {
    v4 = __nwlog_obj();
    v5 = type;
    if (!os_log_type_enabled(v4, type))
      goto LABEL_32;
    *(_DWORD *)buf = 136446210;
    v14 = "nw_protocol_ohttp_input_available";
    v6 = "%{public}s called with null ohttp";
    goto LABEL_31;
  }
  if (!v11)
  {
    v4 = __nwlog_obj();
    v5 = type;
    if (!os_log_type_enabled(v4, type))
      goto LABEL_32;
    *(_DWORD *)buf = 136446210;
    v14 = "nw_protocol_ohttp_input_available";
    v6 = "%{public}s called with null ohttp, backtrace limit exceeded";
    goto LABEL_31;
  }
  v9 = (char *)__nw_create_backtrace_string();
  v4 = __nwlog_obj();
  v5 = type;
  v10 = os_log_type_enabled(v4, type);
  if (!v9)
  {
    if (!v10)
      goto LABEL_32;
    *(_DWORD *)buf = 136446210;
    v14 = "nw_protocol_ohttp_input_available";
    v6 = "%{public}s called with null ohttp, no backtrace";
    goto LABEL_31;
  }
  if (v10)
  {
    *(_DWORD *)buf = 136446466;
    v14 = "nw_protocol_ohttp_input_available";
    v15 = 2082;
    v16 = v9;
    _os_log_impl(&dword_182FBE000, v4, v5, "%{public}s called with null ohttp, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v9);
  if (v3)
LABEL_33:
    free(v3);
}

void nw_protocol_ohttp_input_finished(nw_protocol *a1, nw_protocol *a2)
{
  _BYTE *handle;
  NSObject *v3;
  char *v4;
  NSObject *v5;
  os_log_type_t v6;
  const char *v7;
  char *backtrace_string;
  _BOOL4 v9;
  char *v10;
  _BOOL4 v11;
  NSObject *v12;
  int v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v17 = "nw_protocol_ohttp_input_finished";
    v4 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v14 = 0;
    if (!__nwlog_fault(v4, &type, &v14))
      goto LABEL_41;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v5 = __nwlog_obj();
      v6 = type;
      if (!os_log_type_enabled(v5, type))
        goto LABEL_41;
      *(_DWORD *)buf = 136446210;
      v17 = "nw_protocol_ohttp_input_finished";
      v7 = "%{public}s called with null protocol";
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v5 = __nwlog_obj();
      v6 = type;
      v9 = os_log_type_enabled(v5, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_protocol_ohttp_input_finished";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v5, v6, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_41:
        if (!v4)
          return;
LABEL_42:
        free(v4);
        return;
      }
      if (!v9)
        goto LABEL_41;
      *(_DWORD *)buf = 136446210;
      v17 = "nw_protocol_ohttp_input_finished";
      v7 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      v5 = __nwlog_obj();
      v6 = type;
      if (!os_log_type_enabled(v5, type))
        goto LABEL_41;
      *(_DWORD *)buf = 136446210;
      v17 = "nw_protocol_ohttp_input_finished";
      v7 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
LABEL_40:
    _os_log_impl(&dword_182FBE000, v5, v6, v7, buf, 0xCu);
    goto LABEL_41;
  }
  handle = a1->handle;
  if (handle)
  {
    if (*((_DWORD *)handle + 86) == 1)
    {
      if ((handle[348] & 1) == 0)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v3 = gLogObj;
        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136446722;
          v17 = "nw_protocol_ohttp_input_finished";
          v18 = 2082;
          v19 = handle + 349;
          v20 = 2080;
          v21 = " ";
          _os_log_impl(&dword_182FBE000, v3, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sReceived input finished", buf, 0x20u);
        }
      }
      nw_protocol_ohttp_read_response((uint64_t)handle);
    }
    else if ((handle[348] & 1) == 0)
    {
      if (gLogDatapath)
      {
        v12 = __nwlog_obj();
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
        {
          v13 = *((_DWORD *)handle + 86);
          *(_DWORD *)buf = 136446978;
          v17 = "nw_protocol_ohttp_input_finished";
          v18 = 2082;
          v19 = handle + 349;
          v20 = 2080;
          v21 = " ";
          v22 = 1024;
          v23 = v13;
          _os_log_impl(&dword_182FBE000, v12, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sskipping, state %u", buf, 0x26u);
        }
      }
    }
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_protocol_ohttp_input_finished";
  v4 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (!__nwlog_fault(v4, &type, &v14))
    goto LABEL_41;
  if (type == OS_LOG_TYPE_FAULT)
  {
    v5 = __nwlog_obj();
    v6 = type;
    if (!os_log_type_enabled(v5, type))
      goto LABEL_41;
    *(_DWORD *)buf = 136446210;
    v17 = "nw_protocol_ohttp_input_finished";
    v7 = "%{public}s called with null ohttp";
    goto LABEL_40;
  }
  if (!v14)
  {
    v5 = __nwlog_obj();
    v6 = type;
    if (!os_log_type_enabled(v5, type))
      goto LABEL_41;
    *(_DWORD *)buf = 136446210;
    v17 = "nw_protocol_ohttp_input_finished";
    v7 = "%{public}s called with null ohttp, backtrace limit exceeded";
    goto LABEL_40;
  }
  v10 = (char *)__nw_create_backtrace_string();
  v5 = __nwlog_obj();
  v6 = type;
  v11 = os_log_type_enabled(v5, type);
  if (!v10)
  {
    if (!v11)
      goto LABEL_41;
    *(_DWORD *)buf = 136446210;
    v17 = "nw_protocol_ohttp_input_finished";
    v7 = "%{public}s called with null ohttp, no backtrace";
    goto LABEL_40;
  }
  if (v11)
  {
    *(_DWORD *)buf = 136446466;
    v17 = "nw_protocol_ohttp_input_finished";
    v18 = 2082;
    v19 = v10;
    _os_log_impl(&dword_182FBE000, v5, v6, "%{public}s called with null ohttp, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v10);
  if (v4)
    goto LABEL_42;
}

uint64_t nw_protocol_ohttp_get_output_frames(nw_protocol *a1, nw_protocol *a2, unsigned int a3, int a4, unsigned int a5, nw_frame_array_s *a6)
{
  void *handle;
  size_t v8;
  uint64_t context_for_protocol;
  uint64_t v10;
  _BOOL8 v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  nw_frame **tqh_last;
  char *v17;
  NSObject *v18;
  os_log_type_t v19;
  const char *v20;
  char *backtrace_string;
  _BOOL4 v22;
  const char *v23;
  _BOOL4 v24;
  _BOOL4 v25;
  char v27;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v30;
  __int16 v31;
  char *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v30 = "nw_protocol_ohttp_get_output_frames";
    v17 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v27 = 0;
    if (!__nwlog_fault(v17, &type, &v27))
      goto LABEL_51;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v18 = __nwlog_obj();
      v19 = type;
      if (!os_log_type_enabled(v18, type))
        goto LABEL_51;
      *(_DWORD *)buf = 136446210;
      v30 = "nw_protocol_ohttp_get_output_frames";
      v20 = "%{public}s called with null protocol";
      goto LABEL_50;
    }
    if (!v27)
    {
      v18 = __nwlog_obj();
      v19 = type;
      if (!os_log_type_enabled(v18, type))
        goto LABEL_51;
      *(_DWORD *)buf = 136446210;
      v30 = "nw_protocol_ohttp_get_output_frames";
      v20 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_50;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v18 = __nwlog_obj();
    v19 = type;
    v22 = os_log_type_enabled(v18, type);
    if (!backtrace_string)
    {
      if (!v22)
        goto LABEL_51;
      *(_DWORD *)buf = 136446210;
      v30 = "nw_protocol_ohttp_get_output_frames";
      v20 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_50;
    }
    if (!v22)
      goto LABEL_37;
    *(_DWORD *)buf = 136446466;
    v30 = "nw_protocol_ohttp_get_output_frames";
    v31 = 2082;
    v32 = backtrace_string;
    v23 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_36:
    _os_log_impl(&dword_182FBE000, v18, v19, v23, buf, 0x16u);
    goto LABEL_37;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v30 = "nw_protocol_ohttp_get_output_frames";
    v17 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v27 = 0;
    if (!__nwlog_fault(v17, &type, &v27))
      goto LABEL_51;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v18 = __nwlog_obj();
      v19 = type;
      if (!os_log_type_enabled(v18, type))
        goto LABEL_51;
      *(_DWORD *)buf = 136446210;
      v30 = "nw_protocol_ohttp_get_output_frames";
      v20 = "%{public}s called with null ohttp";
      goto LABEL_50;
    }
    if (!v27)
    {
      v18 = __nwlog_obj();
      v19 = type;
      if (!os_log_type_enabled(v18, type))
        goto LABEL_51;
      *(_DWORD *)buf = 136446210;
      v30 = "nw_protocol_ohttp_get_output_frames";
      v20 = "%{public}s called with null ohttp, backtrace limit exceeded";
      goto LABEL_50;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v18 = __nwlog_obj();
    v19 = type;
    v24 = os_log_type_enabled(v18, type);
    if (!backtrace_string)
    {
      if (!v24)
        goto LABEL_51;
      *(_DWORD *)buf = 136446210;
      v30 = "nw_protocol_ohttp_get_output_frames";
      v20 = "%{public}s called with null ohttp, no backtrace";
      goto LABEL_50;
    }
    if (!v24)
      goto LABEL_37;
    *(_DWORD *)buf = 136446466;
    v30 = "nw_protocol_ohttp_get_output_frames";
    v31 = 2082;
    v32 = backtrace_string;
    v23 = "%{public}s called with null ohttp, dumping backtrace:%{public}s";
    goto LABEL_36;
  }
  if (!a6)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v30 = "nw_protocol_ohttp_get_output_frames";
    v17 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v27 = 0;
    if (!__nwlog_fault(v17, &type, &v27))
      goto LABEL_51;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v18 = __nwlog_obj();
      v19 = type;
      if (!os_log_type_enabled(v18, type))
        goto LABEL_51;
      *(_DWORD *)buf = 136446210;
      v30 = "nw_protocol_ohttp_get_output_frames";
      v20 = "%{public}s called with null return_array";
      goto LABEL_50;
    }
    if (!v27)
    {
      v18 = __nwlog_obj();
      v19 = type;
      if (!os_log_type_enabled(v18, type))
        goto LABEL_51;
      *(_DWORD *)buf = 136446210;
      v30 = "nw_protocol_ohttp_get_output_frames";
      v20 = "%{public}s called with null return_array, backtrace limit exceeded";
      goto LABEL_50;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v18 = __nwlog_obj();
    v19 = type;
    v25 = os_log_type_enabled(v18, type);
    if (backtrace_string)
    {
      if (v25)
      {
        *(_DWORD *)buf = 136446466;
        v30 = "nw_protocol_ohttp_get_output_frames";
        v31 = 2082;
        v32 = backtrace_string;
        v23 = "%{public}s called with null return_array, dumping backtrace:%{public}s";
        goto LABEL_36;
      }
LABEL_37:
      free(backtrace_string);
      goto LABEL_51;
    }
    if (!v25)
      goto LABEL_51;
    *(_DWORD *)buf = 136446210;
    v30 = "nw_protocol_ohttp_get_output_frames";
    v20 = "%{public}s called with null return_array, no backtrace";
LABEL_50:
    _os_log_impl(&dword_182FBE000, v18, v19, v20, buf, 0xCu);
LABEL_51:
    if (v17)
      free(v17);
    return 0;
  }
  LODWORD(v8) = a4;
  context_for_protocol = nw_protocol_ohttp_get_context_for_protocol((uint64_t)handle, (uint64_t)a2);
  if (!context_for_protocol)
    return 0;
  v10 = context_for_protocol;
  if (v8 >= 0xFFFF)
    v8 = 0xFFFFLL;
  else
    v8 = v8;
  if ((_DWORD)v8)
  {
    v11 = nw_calloc_type<unsigned char>(v8);
    v12 = v8;
  }
  else
  {
    v11 = 0;
    v12 = 0;
  }
  v13 = nw_frame_create(0, v11, v12, (uint64_t)nw_protocol_ohttp_output_frame_finalizer, v10);
  v14 = 1;
  nw_frame_set_buffer_used_malloc(v13, 1);
  *(_QWORD *)(v13 + 16) = 0;
  v15 = *(uint64_t **)(v10 + 16);
  *(_QWORD *)(v13 + 24) = v15;
  *v15 = v13;
  *(_QWORD *)(v10 + 16) = v13 + 16;
  *(_QWORD *)(v13 + 32) = 0;
  tqh_last = a6->tqh_last;
  *(_QWORD *)(v13 + 40) = tqh_last;
  *tqh_last = (nw_frame *)v13;
  a6->tqh_last = (nw_frame **)(v13 + 32);
  return v14;
}

uint64_t nw_protocol_ohttp_finalize_output_frames(nw_protocol *a1, nw_frame_array_s *a2)
{
  void *handle;
  nw_frame *tqh_first;
  nw_frame *v4;
  char v5;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  const char *v10;
  char *backtrace_string;
  _BOOL4 v12;
  const char *v13;
  _BOOL4 v14;
  _QWORD v15[2];
  uint64_t (*v16)(_QWORD *);
  void *v17;
  nw_frame_array_s *v18;
  void *v19;
  char v20;
  os_log_type_t v21;
  uint8_t buf[4];
  const char *v23;
  __int16 v24;
  char *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    handle = a1->handle;
    if (handle)
    {
      v15[0] = MEMORY[0x1E0C809B0];
      v15[1] = 0x40000000;
      v16 = (uint64_t (*)(_QWORD *))___ZL40nw_protocol_ohttp_finalize_output_framesP11nw_protocolP16nw_frame_array_s_block_invoke;
      v17 = &__block_descriptor_tmp_31_28904;
      v18 = a2;
      v19 = handle;
      tqh_first = a2->tqh_first;
      do
      {
        if (!tqh_first)
          break;
        v4 = (nw_frame *)*((_QWORD *)tqh_first + 4);
        v5 = v16(v15);
        tqh_first = v4;
      }
      while ((v5 & 1) != 0);
      return 1;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v23 = "nw_protocol_ohttp_finalize_output_frames";
    v7 = (char *)_os_log_send_and_compose_impl();
    v21 = OS_LOG_TYPE_ERROR;
    v20 = 0;
    if (!__nwlog_fault(v7, &v21, &v20))
      goto LABEL_35;
    if (v21 == OS_LOG_TYPE_FAULT)
    {
      v8 = __nwlog_obj();
      v9 = v21;
      if (os_log_type_enabled(v8, v21))
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_protocol_ohttp_finalize_output_frames";
        v10 = "%{public}s called with null ohttp";
        goto LABEL_34;
      }
      goto LABEL_35;
    }
    if (!v20)
    {
      v8 = __nwlog_obj();
      v9 = v21;
      if (os_log_type_enabled(v8, v21))
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_protocol_ohttp_finalize_output_frames";
        v10 = "%{public}s called with null ohttp, backtrace limit exceeded";
        goto LABEL_34;
      }
      goto LABEL_35;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v8 = __nwlog_obj();
    v9 = v21;
    v14 = os_log_type_enabled(v8, v21);
    if (!backtrace_string)
    {
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_protocol_ohttp_finalize_output_frames";
        v10 = "%{public}s called with null ohttp, no backtrace";
        goto LABEL_34;
      }
      goto LABEL_35;
    }
    if (v14)
    {
      *(_DWORD *)buf = 136446466;
      v23 = "nw_protocol_ohttp_finalize_output_frames";
      v24 = 2082;
      v25 = backtrace_string;
      v13 = "%{public}s called with null ohttp, dumping backtrace:%{public}s";
      goto LABEL_24;
    }
    goto LABEL_25;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v23 = "nw_protocol_ohttp_finalize_output_frames";
  v7 = (char *)_os_log_send_and_compose_impl();
  v21 = OS_LOG_TYPE_ERROR;
  v20 = 0;
  if (!__nwlog_fault(v7, &v21, &v20))
    goto LABEL_35;
  if (v21 != OS_LOG_TYPE_FAULT)
  {
    if (!v20)
    {
      v8 = __nwlog_obj();
      v9 = v21;
      if (os_log_type_enabled(v8, v21))
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_protocol_ohttp_finalize_output_frames";
        v10 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_34;
      }
      goto LABEL_35;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v8 = __nwlog_obj();
    v9 = v21;
    v12 = os_log_type_enabled(v8, v21);
    if (!backtrace_string)
    {
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_protocol_ohttp_finalize_output_frames";
        v10 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_34;
      }
      goto LABEL_35;
    }
    if (v12)
    {
      *(_DWORD *)buf = 136446466;
      v23 = "nw_protocol_ohttp_finalize_output_frames";
      v24 = 2082;
      v25 = backtrace_string;
      v13 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_24:
      _os_log_impl(&dword_182FBE000, v8, v9, v13, buf, 0x16u);
    }
LABEL_25:
    free(backtrace_string);
    goto LABEL_35;
  }
  v8 = __nwlog_obj();
  v9 = v21;
  if (os_log_type_enabled(v8, v21))
  {
    *(_DWORD *)buf = 136446210;
    v23 = "nw_protocol_ohttp_finalize_output_frames";
    v10 = "%{public}s called with null protocol";
LABEL_34:
    _os_log_impl(&dword_182FBE000, v8, v9, v10, buf, 0xCu);
  }
LABEL_35:
  if (v7)
    free(v7);
  return 0;
}

void nw_protocol_ohttp_output_available(nw_protocol *a1, nw_protocol *a2)
{
  void *handle;
  char *v3;
  NSObject *v4;
  os_log_type_t v5;
  const char *v6;
  char *backtrace_string;
  _BOOL4 v8;
  char *v9;
  _BOOL4 v10;
  char v11;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v14 = "nw_protocol_ohttp_output_available";
    v3 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v11 = 0;
    if (!__nwlog_fault(v3, &type, &v11))
      goto LABEL_32;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (!os_log_type_enabled(v4, type))
        goto LABEL_32;
      *(_DWORD *)buf = 136446210;
      v14 = "nw_protocol_ohttp_output_available";
      v6 = "%{public}s called with null protocol";
LABEL_31:
      _os_log_impl(&dword_182FBE000, v4, v5, v6, buf, 0xCu);
      goto LABEL_32;
    }
    if (!v11)
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (!os_log_type_enabled(v4, type))
        goto LABEL_32;
      *(_DWORD *)buf = 136446210;
      v14 = "nw_protocol_ohttp_output_available";
      v6 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_31;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v4 = __nwlog_obj();
    v5 = type;
    v8 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (!v8)
        goto LABEL_32;
      *(_DWORD *)buf = 136446210;
      v14 = "nw_protocol_ohttp_output_available";
      v6 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_31;
    }
    if (v8)
    {
      *(_DWORD *)buf = 136446466;
      v14 = "nw_protocol_ohttp_output_available";
      v15 = 2082;
      v16 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v4, v5, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(backtrace_string);
LABEL_32:
    if (!v3)
      return;
    goto LABEL_33;
  }
  handle = a1->handle;
  if (handle)
  {
    nw_protocol_ohttp_send_request((uint64_t)handle);
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v14 = "nw_protocol_ohttp_output_available";
  v3 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v11 = 0;
  if (!__nwlog_fault(v3, &type, &v11))
    goto LABEL_32;
  if (type == OS_LOG_TYPE_FAULT)
  {
    v4 = __nwlog_obj();
    v5 = type;
    if (!os_log_type_enabled(v4, type))
      goto LABEL_32;
    *(_DWORD *)buf = 136446210;
    v14 = "nw_protocol_ohttp_output_available";
    v6 = "%{public}s called with null ohttp";
    goto LABEL_31;
  }
  if (!v11)
  {
    v4 = __nwlog_obj();
    v5 = type;
    if (!os_log_type_enabled(v4, type))
      goto LABEL_32;
    *(_DWORD *)buf = 136446210;
    v14 = "nw_protocol_ohttp_output_available";
    v6 = "%{public}s called with null ohttp, backtrace limit exceeded";
    goto LABEL_31;
  }
  v9 = (char *)__nw_create_backtrace_string();
  v4 = __nwlog_obj();
  v5 = type;
  v10 = os_log_type_enabled(v4, type);
  if (!v9)
  {
    if (!v10)
      goto LABEL_32;
    *(_DWORD *)buf = 136446210;
    v14 = "nw_protocol_ohttp_output_available";
    v6 = "%{public}s called with null ohttp, no backtrace";
    goto LABEL_31;
  }
  if (v10)
  {
    *(_DWORD *)buf = 136446466;
    v14 = "nw_protocol_ohttp_output_available";
    v15 = 2082;
    v16 = v9;
    _os_log_impl(&dword_182FBE000, v4, v5, "%{public}s called with null ohttp, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v9);
  if (v3)
LABEL_33:
    free(v3);
}

uint64_t nw_protocol_ohttp_copy_info(uint64_t a1, int a2)
{
  char *v3;
  NSObject *v4;
  os_log_type_t v5;
  const char *v6;
  char *backtrace_string;
  _BOOL4 v8;
  char *v9;
  _BOOL4 v10;
  char v11;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v14 = "nw_protocol_ohttp_copy_info";
    v3 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v11 = 0;
    if (!__nwlog_fault(v3, &type, &v11))
      goto LABEL_34;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (!os_log_type_enabled(v4, type))
        goto LABEL_34;
      *(_DWORD *)buf = 136446210;
      v14 = "nw_protocol_ohttp_copy_info";
      v6 = "%{public}s called with null protocol";
      goto LABEL_33;
    }
    if (!v11)
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (!os_log_type_enabled(v4, type))
        goto LABEL_34;
      *(_DWORD *)buf = 136446210;
      v14 = "nw_protocol_ohttp_copy_info";
      v6 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_33;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v4 = __nwlog_obj();
    v5 = type;
    v8 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (!v8)
        goto LABEL_34;
      *(_DWORD *)buf = 136446210;
      v14 = "nw_protocol_ohttp_copy_info";
      v6 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_33;
    }
    if (v8)
    {
      *(_DWORD *)buf = 136446466;
      v14 = "nw_protocol_ohttp_copy_info";
      v15 = 2082;
      v16 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v4, v5, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(backtrace_string);
LABEL_34:
    if (!v3)
      return 0;
LABEL_35:
    free(v3);
    return 0;
  }
  if (!*(_QWORD *)(a1 + 40))
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v14 = "nw_protocol_ohttp_copy_info";
    v3 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v11 = 0;
    if (!__nwlog_fault(v3, &type, &v11))
      goto LABEL_34;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (!os_log_type_enabled(v4, type))
        goto LABEL_34;
      *(_DWORD *)buf = 136446210;
      v14 = "nw_protocol_ohttp_copy_info";
      v6 = "%{public}s called with null ohttp";
      goto LABEL_33;
    }
    if (!v11)
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (!os_log_type_enabled(v4, type))
        goto LABEL_34;
      *(_DWORD *)buf = 136446210;
      v14 = "nw_protocol_ohttp_copy_info";
      v6 = "%{public}s called with null ohttp, backtrace limit exceeded";
      goto LABEL_33;
    }
    v9 = (char *)__nw_create_backtrace_string();
    v4 = __nwlog_obj();
    v5 = type;
    v10 = os_log_type_enabled(v4, type);
    if (v9)
    {
      if (v10)
      {
        *(_DWORD *)buf = 136446466;
        v14 = "nw_protocol_ohttp_copy_info";
        v15 = 2082;
        v16 = v9;
        _os_log_impl(&dword_182FBE000, v4, v5, "%{public}s called with null ohttp, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v9);
      if (!v3)
        return 0;
      goto LABEL_35;
    }
    if (v10)
    {
      *(_DWORD *)buf = 136446210;
      v14 = "nw_protocol_ohttp_copy_info";
      v6 = "%{public}s called with null ohttp, no backtrace";
LABEL_33:
      _os_log_impl(&dword_182FBE000, v4, v5, v6, buf, 0xCu);
      goto LABEL_34;
    }
    goto LABEL_34;
  }
  if (a2 == 253)
    return 0;
  return nw_protocol_common_copy_info(a1, a2);
}

uint64_t nw_protocol_ohttp_connect(nw_protocol *a1, nw_protocol *a2)
{
  _BYTE *handle;
  char *v4;
  NSObject *v5;
  os_log_type_t v6;
  const char *v7;
  char *backtrace_string;
  _BOOL4 v9;
  const char *v10;
  _BOOL4 v11;
  char v12;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    handle = a1->handle;
    if (handle)
    {
      if ((handle[348] & 8) == 0)
        return nw_protocol_connect((uint64_t)a1->output_handler, (uint64_t)a1);
      nw_protocol_connected(a2, (uint64_t)a1);
      return 1;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v15 = "nw_protocol_ohttp_connect";
    v4 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v12 = 0;
    if (!__nwlog_fault(v4, &type, &v12))
      goto LABEL_34;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v5 = __nwlog_obj();
      v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_protocol_ohttp_connect";
        v7 = "%{public}s called with null ohttp";
        goto LABEL_33;
      }
      goto LABEL_34;
    }
    if (!v12)
    {
      v5 = __nwlog_obj();
      v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_protocol_ohttp_connect";
        v7 = "%{public}s called with null ohttp, backtrace limit exceeded";
        goto LABEL_33;
      }
      goto LABEL_34;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v5 = __nwlog_obj();
    v6 = type;
    v11 = os_log_type_enabled(v5, type);
    if (!backtrace_string)
    {
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_protocol_ohttp_connect";
        v7 = "%{public}s called with null ohttp, no backtrace";
        goto LABEL_33;
      }
      goto LABEL_34;
    }
    if (v11)
    {
      *(_DWORD *)buf = 136446466;
      v15 = "nw_protocol_ohttp_connect";
      v16 = 2082;
      v17 = backtrace_string;
      v10 = "%{public}s called with null ohttp, dumping backtrace:%{public}s";
      goto LABEL_23;
    }
    goto LABEL_24;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v15 = "nw_protocol_ohttp_connect";
  v4 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v12 = 0;
  if (!__nwlog_fault(v4, &type, &v12))
    goto LABEL_34;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v12)
    {
      v5 = __nwlog_obj();
      v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_protocol_ohttp_connect";
        v7 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_33;
      }
      goto LABEL_34;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v5 = __nwlog_obj();
    v6 = type;
    v9 = os_log_type_enabled(v5, type);
    if (!backtrace_string)
    {
      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_protocol_ohttp_connect";
        v7 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_33;
      }
      goto LABEL_34;
    }
    if (v9)
    {
      *(_DWORD *)buf = 136446466;
      v15 = "nw_protocol_ohttp_connect";
      v16 = 2082;
      v17 = backtrace_string;
      v10 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_23:
      _os_log_impl(&dword_182FBE000, v5, v6, v10, buf, 0x16u);
    }
LABEL_24:
    free(backtrace_string);
    goto LABEL_34;
  }
  v5 = __nwlog_obj();
  v6 = type;
  if (os_log_type_enabled(v5, type))
  {
    *(_DWORD *)buf = 136446210;
    v15 = "nw_protocol_ohttp_connect";
    v7 = "%{public}s called with null protocol";
LABEL_33:
    _os_log_impl(&dword_182FBE000, v5, v6, v7, buf, 0xCu);
  }
LABEL_34:
  if (v4)
    free(v4);
  return 0;
}

void nw_protocol_ohttp_connected(nw_protocol *a1, nw_protocol *a2)
{
  void *handle;
  char *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  const char *v9;
  char *backtrace_string;
  _BOOL4 v11;
  char *v12;
  _BOOL4 v13;
  _QWORD v14[5];
  char v15;
  os_log_type_t v16;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v18 = "nw_protocol_ohttp_connected";
    v6 = (char *)_os_log_send_and_compose_impl();
    v16 = OS_LOG_TYPE_ERROR;
    v15 = 0;
    if (!__nwlog_fault(v6, &v16, &v15))
      goto LABEL_36;
    if (v16 == OS_LOG_TYPE_FAULT)
    {
      v7 = __nwlog_obj();
      v8 = v16;
      if (!os_log_type_enabled(v7, v16))
        goto LABEL_36;
      *(_DWORD *)buf = 136446210;
      v18 = "nw_protocol_ohttp_connected";
      v9 = "%{public}s called with null protocol";
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v7 = __nwlog_obj();
      v8 = v16;
      v11 = os_log_type_enabled(v7, v16);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v18 = "nw_protocol_ohttp_connected";
          v19 = 2082;
          v20 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_36:
        if (!v6)
          return;
LABEL_37:
        free(v6);
        return;
      }
      if (!v11)
        goto LABEL_36;
      *(_DWORD *)buf = 136446210;
      v18 = "nw_protocol_ohttp_connected";
      v9 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      v7 = __nwlog_obj();
      v8 = v16;
      if (!os_log_type_enabled(v7, v16))
        goto LABEL_36;
      *(_DWORD *)buf = 136446210;
      v18 = "nw_protocol_ohttp_connected";
      v9 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
LABEL_35:
    _os_log_impl(&dword_182FBE000, v7, v8, v9, buf, 0xCu);
    goto LABEL_36;
  }
  handle = a1->handle;
  if (handle)
  {
    *((_BYTE *)handle + 348) |= 8u;
    nw_protocol_connected(a1->default_input_handler->flow_id, (uint64_t)a2);
    if (a1->output_handler == a2)
      nw_protocol_connected(a1->default_input_handler->flow_id, (uint64_t)a1);
    v5 = (char *)*((_QWORD *)handle + 37);
    if (v5)
    {
      v14[0] = MEMORY[0x1E0C809B0];
      v14[1] = 0x40000000;
      v14[2] = ___ZL27nw_protocol_ohttp_connectedP11nw_protocolS0__block_invoke;
      v14[3] = &__block_descriptor_tmp_42_28567;
      v14[4] = a1;
      nw_hash_table_apply(v5, (uint64_t)v14);
    }
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v18 = "nw_protocol_ohttp_connected";
  v6 = (char *)_os_log_send_and_compose_impl();
  v16 = OS_LOG_TYPE_ERROR;
  v15 = 0;
  if (!__nwlog_fault(v6, &v16, &v15))
    goto LABEL_36;
  if (v16 == OS_LOG_TYPE_FAULT)
  {
    v7 = __nwlog_obj();
    v8 = v16;
    if (!os_log_type_enabled(v7, v16))
      goto LABEL_36;
    *(_DWORD *)buf = 136446210;
    v18 = "nw_protocol_ohttp_connected";
    v9 = "%{public}s called with null ohttp";
    goto LABEL_35;
  }
  if (!v15)
  {
    v7 = __nwlog_obj();
    v8 = v16;
    if (!os_log_type_enabled(v7, v16))
      goto LABEL_36;
    *(_DWORD *)buf = 136446210;
    v18 = "nw_protocol_ohttp_connected";
    v9 = "%{public}s called with null ohttp, backtrace limit exceeded";
    goto LABEL_35;
  }
  v12 = (char *)__nw_create_backtrace_string();
  v7 = __nwlog_obj();
  v8 = v16;
  v13 = os_log_type_enabled(v7, v16);
  if (!v12)
  {
    if (!v13)
      goto LABEL_36;
    *(_DWORD *)buf = 136446210;
    v18 = "nw_protocol_ohttp_connected";
    v9 = "%{public}s called with null ohttp, no backtrace";
    goto LABEL_35;
  }
  if (v13)
  {
    *(_DWORD *)buf = 136446466;
    v18 = "nw_protocol_ohttp_connected";
    v19 = 2082;
    v20 = v12;
    _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null ohttp, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v12);
  if (v6)
    goto LABEL_37;
}

void nw_protocol_ohttp_disconnect(nw_protocol *a1, nw_protocol *a2)
{
  char *v2;
  NSObject *v3;
  os_log_type_t v4;
  const char *v5;
  char *backtrace_string;
  _BOOL4 v7;
  char *v8;
  _BOOL4 v9;
  char v10;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v13 = "nw_protocol_ohttp_disconnect";
    v2 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v10 = 0;
    if (!__nwlog_fault(v2, &type, &v10))
      goto LABEL_34;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (!os_log_type_enabled(v3, type))
        goto LABEL_34;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_protocol_ohttp_disconnect";
      v5 = "%{public}s called with null protocol";
    }
    else if (v10)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v3 = __nwlog_obj();
      v4 = type;
      v7 = os_log_type_enabled(v3, type);
      if (backtrace_string)
      {
        if (v7)
        {
          *(_DWORD *)buf = 136446466;
          v13 = "nw_protocol_ohttp_disconnect";
          v14 = 2082;
          v15 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v3, v4, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_34:
        if (!v2)
          return;
LABEL_35:
        free(v2);
        return;
      }
      if (!v7)
        goto LABEL_34;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_protocol_ohttp_disconnect";
      v5 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (!os_log_type_enabled(v3, type))
        goto LABEL_34;
      *(_DWORD *)buf = 136446210;
      v13 = "nw_protocol_ohttp_disconnect";
      v5 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
LABEL_33:
    _os_log_impl(&dword_182FBE000, v3, v4, v5, buf, 0xCu);
    goto LABEL_34;
  }
  if (a1->handle)
  {
    if (a1->default_input_handler == a2)
      nw_protocol_disconnect(a1->output_handler->flow_id, (uint64_t)a1);
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v13 = "nw_protocol_ohttp_disconnect";
  v2 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v10 = 0;
  if (!__nwlog_fault(v2, &type, &v10))
    goto LABEL_34;
  if (type == OS_LOG_TYPE_FAULT)
  {
    v3 = __nwlog_obj();
    v4 = type;
    if (!os_log_type_enabled(v3, type))
      goto LABEL_34;
    *(_DWORD *)buf = 136446210;
    v13 = "nw_protocol_ohttp_disconnect";
    v5 = "%{public}s called with null ohttp";
    goto LABEL_33;
  }
  if (!v10)
  {
    v3 = __nwlog_obj();
    v4 = type;
    if (!os_log_type_enabled(v3, type))
      goto LABEL_34;
    *(_DWORD *)buf = 136446210;
    v13 = "nw_protocol_ohttp_disconnect";
    v5 = "%{public}s called with null ohttp, backtrace limit exceeded";
    goto LABEL_33;
  }
  v8 = (char *)__nw_create_backtrace_string();
  v3 = __nwlog_obj();
  v4 = type;
  v9 = os_log_type_enabled(v3, type);
  if (!v8)
  {
    if (!v9)
      goto LABEL_34;
    *(_DWORD *)buf = 136446210;
    v13 = "nw_protocol_ohttp_disconnect";
    v5 = "%{public}s called with null ohttp, no backtrace";
    goto LABEL_33;
  }
  if (v9)
  {
    *(_DWORD *)buf = 136446466;
    v13 = "nw_protocol_ohttp_disconnect";
    v14 = 2082;
    v15 = v8;
    _os_log_impl(&dword_182FBE000, v3, v4, "%{public}s called with null ohttp, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v8);
  if (v2)
    goto LABEL_35;
}

void nw_protocol_ohttp_disconnected(nw_protocol *a1, nw_protocol *a2)
{
  void *handle;
  char *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  const char *v8;
  char *backtrace_string;
  _BOOL4 v10;
  char *v11;
  _BOOL4 v12;
  _QWORD v13[5];
  char v14;
  os_log_type_t v15;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v17 = "nw_protocol_ohttp_disconnected";
    v5 = (char *)_os_log_send_and_compose_impl();
    v15 = OS_LOG_TYPE_ERROR;
    v14 = 0;
    if (!__nwlog_fault(v5, &v15, &v14))
      goto LABEL_34;
    if (v15 == OS_LOG_TYPE_FAULT)
    {
      v6 = __nwlog_obj();
      v7 = v15;
      if (!os_log_type_enabled(v6, v15))
        goto LABEL_34;
      *(_DWORD *)buf = 136446210;
      v17 = "nw_protocol_ohttp_disconnected";
      v8 = "%{public}s called with null protocol";
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v6 = __nwlog_obj();
      v7 = v15;
      v10 = os_log_type_enabled(v6, v15);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_protocol_ohttp_disconnected";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_34:
        if (!v5)
          return;
LABEL_35:
        free(v5);
        return;
      }
      if (!v10)
        goto LABEL_34;
      *(_DWORD *)buf = 136446210;
      v17 = "nw_protocol_ohttp_disconnected";
      v8 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      v6 = __nwlog_obj();
      v7 = v15;
      if (!os_log_type_enabled(v6, v15))
        goto LABEL_34;
      *(_DWORD *)buf = 136446210;
      v17 = "nw_protocol_ohttp_disconnected";
      v8 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
LABEL_33:
    _os_log_impl(&dword_182FBE000, v6, v7, v8, buf, 0xCu);
    goto LABEL_34;
  }
  handle = a1->handle;
  if (handle)
  {
    nw_protocol_disconnected(a1->default_input_handler->flow_id, (uint64_t)a1);
    v4 = (char *)*((_QWORD *)handle + 37);
    if (v4)
    {
      v13[0] = MEMORY[0x1E0C809B0];
      v13[1] = 0x40000000;
      v13[2] = ___ZL30nw_protocol_ohttp_disconnectedP11nw_protocolS0__block_invoke;
      v13[3] = &__block_descriptor_tmp_43_28546;
      v13[4] = a1;
      nw_hash_table_apply(v4, (uint64_t)v13);
    }
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_protocol_ohttp_disconnected";
  v5 = (char *)_os_log_send_and_compose_impl();
  v15 = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (!__nwlog_fault(v5, &v15, &v14))
    goto LABEL_34;
  if (v15 == OS_LOG_TYPE_FAULT)
  {
    v6 = __nwlog_obj();
    v7 = v15;
    if (!os_log_type_enabled(v6, v15))
      goto LABEL_34;
    *(_DWORD *)buf = 136446210;
    v17 = "nw_protocol_ohttp_disconnected";
    v8 = "%{public}s called with null ohttp";
    goto LABEL_33;
  }
  if (!v14)
  {
    v6 = __nwlog_obj();
    v7 = v15;
    if (!os_log_type_enabled(v6, v15))
      goto LABEL_34;
    *(_DWORD *)buf = 136446210;
    v17 = "nw_protocol_ohttp_disconnected";
    v8 = "%{public}s called with null ohttp, backtrace limit exceeded";
    goto LABEL_33;
  }
  v11 = (char *)__nw_create_backtrace_string();
  v6 = __nwlog_obj();
  v7 = v15;
  v12 = os_log_type_enabled(v6, v15);
  if (!v11)
  {
    if (!v12)
      goto LABEL_34;
    *(_DWORD *)buf = 136446210;
    v17 = "nw_protocol_ohttp_disconnected";
    v8 = "%{public}s called with null ohttp, no backtrace";
    goto LABEL_33;
  }
  if (v12)
  {
    *(_DWORD *)buf = 136446466;
    v17 = "nw_protocol_ohttp_disconnected";
    v18 = 2082;
    v19 = v11;
    _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null ohttp, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v11);
  if (v5)
    goto LABEL_35;
}

void nw_protocol_ohttp_error(nw_protocol *a1, nw_protocol *a2, int a3)
{
  void *handle;
  char *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  const char *v10;
  char *backtrace_string;
  _BOOL4 v12;
  char *v13;
  _BOOL4 v14;
  _QWORD v15[5];
  int v16;
  char v17;
  os_log_type_t v18;
  uint8_t buf[4];
  const char *v20;
  __int16 v21;
  char *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v20 = "nw_protocol_ohttp_error";
    v7 = (char *)_os_log_send_and_compose_impl();
    v18 = OS_LOG_TYPE_ERROR;
    v17 = 0;
    if (!__nwlog_fault(v7, &v18, &v17))
      goto LABEL_34;
    if (v18 == OS_LOG_TYPE_FAULT)
    {
      v8 = __nwlog_obj();
      v9 = v18;
      if (!os_log_type_enabled(v8, v18))
        goto LABEL_34;
      *(_DWORD *)buf = 136446210;
      v20 = "nw_protocol_ohttp_error";
      v10 = "%{public}s called with null protocol";
    }
    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v8 = __nwlog_obj();
      v9 = v18;
      v12 = os_log_type_enabled(v8, v18);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          v20 = "nw_protocol_ohttp_error";
          v21 = 2082;
          v22 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_34:
        if (!v7)
          return;
LABEL_35:
        free(v7);
        return;
      }
      if (!v12)
        goto LABEL_34;
      *(_DWORD *)buf = 136446210;
      v20 = "nw_protocol_ohttp_error";
      v10 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      v8 = __nwlog_obj();
      v9 = v18;
      if (!os_log_type_enabled(v8, v18))
        goto LABEL_34;
      *(_DWORD *)buf = 136446210;
      v20 = "nw_protocol_ohttp_error";
      v10 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
LABEL_33:
    _os_log_impl(&dword_182FBE000, v8, v9, v10, buf, 0xCu);
    goto LABEL_34;
  }
  handle = a1->handle;
  if (handle)
  {
    nw_protocol_error(a1->default_input_handler->flow_id, (uint64_t)a2);
    v6 = (char *)*((_QWORD *)handle + 37);
    if (v6)
    {
      v15[0] = MEMORY[0x1E0C809B0];
      v15[1] = 0x40000000;
      v15[2] = ___ZL23nw_protocol_ohttp_errorP11nw_protocolS0_i_block_invoke;
      v15[3] = &__block_descriptor_tmp_44_28534;
      v15[4] = a2;
      v16 = a3;
      nw_hash_table_apply(v6, (uint64_t)v15);
    }
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v20 = "nw_protocol_ohttp_error";
  v7 = (char *)_os_log_send_and_compose_impl();
  v18 = OS_LOG_TYPE_ERROR;
  v17 = 0;
  if (!__nwlog_fault(v7, &v18, &v17))
    goto LABEL_34;
  if (v18 == OS_LOG_TYPE_FAULT)
  {
    v8 = __nwlog_obj();
    v9 = v18;
    if (!os_log_type_enabled(v8, v18))
      goto LABEL_34;
    *(_DWORD *)buf = 136446210;
    v20 = "nw_protocol_ohttp_error";
    v10 = "%{public}s called with null ohttp";
    goto LABEL_33;
  }
  if (!v17)
  {
    v8 = __nwlog_obj();
    v9 = v18;
    if (!os_log_type_enabled(v8, v18))
      goto LABEL_34;
    *(_DWORD *)buf = 136446210;
    v20 = "nw_protocol_ohttp_error";
    v10 = "%{public}s called with null ohttp, backtrace limit exceeded";
    goto LABEL_33;
  }
  v13 = (char *)__nw_create_backtrace_string();
  v8 = __nwlog_obj();
  v9 = v18;
  v14 = os_log_type_enabled(v8, v18);
  if (!v13)
  {
    if (!v14)
      goto LABEL_34;
    *(_DWORD *)buf = 136446210;
    v20 = "nw_protocol_ohttp_error";
    v10 = "%{public}s called with null ohttp, no backtrace";
    goto LABEL_33;
  }
  if (v14)
  {
    *(_DWORD *)buf = 136446466;
    v20 = "nw_protocol_ohttp_error";
    v21 = 2082;
    v22 = v13;
    _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null ohttp, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v13);
  if (v7)
    goto LABEL_35;
}

uint64_t ___ZL23nw_protocol_ohttp_errorP11nw_protocolS0_i_block_invoke(uint64_t a1, uint64_t a2)
{
  _QWORD *object;

  object = (_QWORD *)nw_hash_node_get_object(a2);
  nw_protocol_error(object, *(_QWORD *)(a1 + 32));
  return 1;
}

uint64_t ___ZL30nw_protocol_ohttp_disconnectedP11nw_protocolS0__block_invoke(uint64_t a1, uint64_t a2)
{
  _QWORD *object;

  object = (_QWORD *)nw_hash_node_get_object(a2);
  nw_protocol_disconnected(object, *(_QWORD *)(a1 + 32));
  return 1;
}

uint64_t ___ZL27nw_protocol_ohttp_connectedP11nw_protocolS0__block_invoke(uint64_t a1, uint64_t a2)
{
  _QWORD *object;

  object = (_QWORD *)nw_hash_node_get_object(a2);
  nw_protocol_connected(object, *(_QWORD *)(a1 + 32));
  return 1;
}

void nw_protocol_ohttp_send_request(uint64_t a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v5;
  NSObject *v6;
  _QWORD v7[5];
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE buf[24];
  const char *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 320);
  if (!v2)
  {
LABEL_6:
    if (*(_DWORD *)(a1 + 288) != 1 || (nw_protocol_ohttp_context_send_request(a1, a1 + 64), !*(_QWORD *)(a1 + 320)))
    {
      v5 = *(char **)(a1 + 296);
      if (v5)
      {
        v7[0] = MEMORY[0x1E0C809B0];
        v7[1] = 0x40000000;
        v7[2] = ___ZL30nw_protocol_ohttp_send_requestP17nw_protocol_ohttp_block_invoke;
        v7[3] = &__block_descriptor_tmp_38_28600;
        v7[4] = a1;
        nw_hash_table_apply(v5, (uint64_t)v7);
      }
    }
    return;
  }
  if (a1 + 64 == v2)
  {
    if (*(_QWORD *)(a1 + 48))
    {
LABEL_5:
      nw_protocol_ohttp_context_send_request(a1, *(_QWORD *)(a1 + 320));
      goto LABEL_6;
    }
  }
  else
  {
    v3 = *(char **)(a1 + 296);
    if (v3)
    {
      v8 = 0;
      v9 = &v8;
      v10 = 0x2000000000;
      v11 = 0;
      *(_QWORD *)buf = MEMORY[0x1E0C809B0];
      *(_QWORD *)&buf[8] = 0x40000000;
      *(_QWORD *)&buf[16] = ___ZL42nw_protocol_ohttp_get_protocol_for_contextP17nw_protocol_ohttpP16nw_ohttp_context_block_invoke;
      v13 = (const char *)&unk_1E149F3D0;
      v14 = &v8;
      v15 = v2;
      nw_hash_table_apply(v3, (uint64_t)buf);
      v4 = v9[3];
      _Block_object_dispose(&v8, 8);
      if (v4)
        goto LABEL_5;
    }
  }
  if ((*(_BYTE *)(a1 + 348) & 1) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v6 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = "nw_protocol_ohttp_send_request";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = a1 + 349;
      *(_WORD *)&buf[22] = 2080;
      v13 = " ";
      _os_log_impl(&dword_182FBE000, v6, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sPending request context is no longer valid", buf, 0x20u);
    }
  }
  nw_ohttp_mark_failed_with_error(a1, 22);
}

void nw_ohttp_mark_failed_with_error(uint64_t a1, int a2)
{
  NSObject *v4;
  char *v5;
  void *path;
  id *v7;
  id v8;
  id *v9;
  id v10;
  char *v11;
  NSObject *v12;
  NSObject *v13;
  _QWORD v14[5];
  int v15;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  int v23;
  __int16 v24;
  int v25;
  __int16 v26;
  unsigned __int8 *v27;
  unsigned __int8 uu[24];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a1 + 344) != 2)
  {
    if ((*(_BYTE *)(a1 + 348) & 1) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v4 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136446978;
        v17 = "nw_ohttp_mark_failed_with_error";
        v18 = 2082;
        v19 = a1 + 349;
        v20 = 2080;
        v21 = " ";
        v22 = 1024;
        v23 = a2;
        _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_INFO, "%{public}s %{public}s%sFailing connection with error %{darwin.errno}d", buf, 0x26u);
      }
    }
    *(_DWORD *)(a1 + 344) = 2;
    *(_DWORD *)(a1 + 288) = 6;
    v5 = *(char **)(a1 + 296);
    if (v5)
    {
      v14[0] = MEMORY[0x1E0C809B0];
      v14[1] = 0x40000000;
      v14[2] = ___ZL31nw_ohttp_mark_failed_with_errorP17nw_protocol_ohttpi_block_invoke;
      v14[3] = &__block_descriptor_tmp_28_28876;
      v14[4] = a1;
      v15 = a2;
      nw_hash_table_apply(v5, (uint64_t)v14);
    }
    path = (void *)nw_protocol_get_path(a1);
    if (path)
    {
      v7 = path;
      v8 = v7[2];

      if (v8)
      {
        memset(uu, 0, 16);
        v9 = (id *)v8;
        v10 = v9[23];

        if (v10)
        {
          v11 = (char *)v10;
          *(_OWORD *)uu = *(_OWORD *)(v11 + 56);

          os_release(v11);
        }
        os_release(v9);
        if (uuid_is_null(uu))
        {
          if ((*(_BYTE *)(a1 + 348) & 1) == 0)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v12 = gLogObj;
            if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136446978;
              v17 = "nw_ohttp_report_error_to_proxy_agent";
              v18 = 2082;
              v19 = a1 + 349;
              v20 = 2080;
              v21 = " ";
              v22 = 1024;
              v23 = a2;
              _os_log_impl(&dword_182FBE000, v12, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sCannot report error %d, no proxy agent", buf, 0x26u);
            }
          }
        }
        else
        {
          if ((*(_BYTE *)(a1 + 348) & 1) == 0)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v13 = gLogObj;
            if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 136447490;
              v17 = "nw_ohttp_report_error_to_proxy_agent";
              v18 = 2082;
              v19 = a1 + 349;
              v20 = 2080;
              v21 = " ";
              v22 = 1024;
              v23 = a2;
              v24 = 1042;
              v25 = 16;
              v26 = 2098;
              v27 = uu;
              _os_log_impl(&dword_182FBE000, v13, OS_LOG_TYPE_INFO, "%{public}s %{public}s%sReporting error %d to proxy agent %{public, uuid_t}.16P", buf, 0x36u);
            }
          }
          nw_path_report_error_to_agent(v7, uu, a2);
        }
      }
    }
    nw_protocol_error(*(_QWORD **)(a1 + 48), a1);
    nw_protocol_disconnected(*(_QWORD **)(a1 + 48), a1);
    nw_protocol_disconnect(*(_QWORD **)(a1 + 32), a1);
  }
}

void nw_protocol_ohttp_context_send_request(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  BOOL v5;
  NSObject *v6;
  const char *v7;
  int v8;
  int v9;
  int output_frames;
  uint64_t v11;
  uint64_t v12;
  char v13;
  NSObject *v14;
  NSObject *v15;
  int v16;
  void *v17;
  NSObject *v18;
  char *v19;
  char *v20;
  NSObject *v21;
  os_log_type_t v22;
  const char *v23;
  char *backtrace_string;
  _BOOL4 v25;
  NSObject *log;
  uint64_t v27;
  _QWORD v28[5];
  _QWORD v29[2];
  uint64_t (*v30)(_QWORD *);
  void *v31;
  uint64_t *v32;
  _QWORD *v33;
  uint64_t *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[2];
  _QWORD v40[3];
  int v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  char v49;
  uint8_t buf[4];
  const char *v51;
  __int16 v52;
  char *v53;
  __int16 v54;
  const char *v55;
  __int16 v56;
  int v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v51 = "nw_protocol_ohttp_context_send_request";
    v20 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(v46) = 16;
    LOBYTE(v42) = 0;
    if (!__nwlog_fault(v20, &v46, &v42))
      goto LABEL_74;
    if (v46 == 17)
    {
      v21 = __nwlog_obj();
      v22 = v46;
      if (!os_log_type_enabled(v21, (os_log_type_t)v46))
        goto LABEL_74;
      *(_DWORD *)buf = 136446210;
      v51 = "nw_protocol_ohttp_context_send_request";
      v23 = "%{public}s called with null ohttp";
    }
    else if ((_BYTE)v42)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v21 = __nwlog_obj();
      v22 = v46;
      v25 = os_log_type_enabled(v21, (os_log_type_t)v46);
      if (backtrace_string)
      {
        if (v25)
        {
          *(_DWORD *)buf = 136446466;
          v51 = "nw_protocol_ohttp_context_send_request";
          v52 = 2082;
          v53 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v21, v22, "%{public}s called with null ohttp, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_74;
      }
      if (!v25)
      {
LABEL_74:
        if (v20)
          free(v20);
        return;
      }
      *(_DWORD *)buf = 136446210;
      v51 = "nw_protocol_ohttp_context_send_request";
      v23 = "%{public}s called with null ohttp, no backtrace";
    }
    else
    {
      v21 = __nwlog_obj();
      v22 = v46;
      if (!os_log_type_enabled(v21, (os_log_type_t)v46))
        goto LABEL_74;
      *(_DWORD *)buf = 136446210;
      v51 = "nw_protocol_ohttp_context_send_request";
      v23 = "%{public}s called with null ohttp, backtrace limit exceeded";
    }
    _os_log_impl(&dword_182FBE000, v21, v22, v23, buf, 0xCu);
    goto LABEL_74;
  }
  v4 = *(_QWORD *)(a1 + 320);
  if (v4)
    v5 = v4 == a2;
  else
    v5 = 1;
  if (v5)
  {
    if (*(_QWORD *)(a2 + 136) == *(_QWORD *)(a2 + 144))
    {
      if ((*(_BYTE *)(a1 + 348) & 1) == 0)
      {
        if (gLogDatapath)
        {
          v6 = __nwlog_obj();
          if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136446722;
            v51 = "nw_protocol_ohttp_context_send_request";
            v52 = 2082;
            v53 = (char *)(a1 + 349);
            v54 = 2080;
            v55 = " ";
            v7 = "%{public}s %{public}s%signoring write, no pending bytes";
LABEL_16:
            _os_log_impl(&dword_182FBE000, v6, OS_LOG_TYPE_DEBUG, v7, buf, 0x20u);
          }
        }
      }
    }
    else
    {
      v27 = a1 + 349;
      v46 = 0;
      v47 = &v46;
      v48 = 0x2000000000;
      v49 = 0;
      v42 = 0;
      v43 = &v42;
      v44 = 0x2000000000;
      v45 = 0;
      while (1)
      {
        if (*(_DWORD *)(a2 + 224) != 1)
        {
          if ((*(_BYTE *)(a1 + 348) & 1) == 0)
          {
            if (gLogDatapath)
            {
              v15 = __nwlog_obj();
              if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
              {
                v16 = *(_DWORD *)(a2 + 224);
                *(_DWORD *)buf = 136446978;
                v51 = "nw_protocol_ohttp_context_send_request";
                v52 = 2082;
                v53 = (char *)v27;
                v54 = 2080;
                v55 = " ";
                v56 = 1024;
                v57 = v16;
                _os_log_impl(&dword_182FBE000, v15, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sskipping, state %u", buf, 0x26u);
              }
            }
          }
          goto LABEL_58;
        }
        v40[0] = 0;
        v40[1] = v40;
        v40[2] = 0x2000000000;
        v8 = *(_DWORD *)(a2 + 136);
        v9 = *(_DWORD *)(a2 + 144);
        v41 = v8 - v9;
        if (v8 == v9)
          break;
        v39[0] = 0;
        v39[1] = v39;
        output_frames = nw_protocol_get_output_frames(*(_QWORD *)(a1 + 32), a1, 1, (v8 - v9), 0xFFFFFFFFLL, (uint64_t)v39);
        if ((*(_BYTE *)(a1 + 348) & 1) == 0)
        {
          if (gLogDatapath)
          {
            log = __nwlog_obj();
            if (os_log_type_enabled(log, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136446978;
              v51 = "nw_protocol_ohttp_context_send_request";
              v52 = 2082;
              v53 = (char *)v27;
              v54 = 2080;
              v55 = " ";
              v56 = 1024;
              v57 = output_frames;
              _os_log_impl(&dword_182FBE000, log, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sGot %u output frames", buf, 0x26u);
            }
          }
        }
        if (!output_frames)
        {
          _Block_object_dispose(v40, 8);
          goto LABEL_58;
        }
        v29[0] = MEMORY[0x1E0C809B0];
        v29[1] = 0x40000000;
        v30 = (uint64_t (*)(_QWORD *))___ZL38nw_protocol_ohttp_context_send_requestP17nw_protocol_ohttpP16nw_ohttp_context_block_invoke;
        v31 = &unk_1E149F538;
        v32 = &v46;
        v33 = v40;
        v36 = a1;
        v37 = a2;
        v38 = a1;
        v34 = &v42;
        v35 = v39;
        v11 = v39[0];
        do
        {
          if (!v11)
            break;
          v12 = *(_QWORD *)(v11 + 32);
          v13 = v30(v29);
          v11 = v12;
        }
        while ((v13 & 1) != 0);
        nw_protocol_finalize_output_frames(*(_QWORD *)(a1 + 32), (uint64_t)v39);
        if (*((_BYTE *)v43 + 24) && !*(_DWORD *)(a1 + 344))
        {
          if ((*(_BYTE *)(a1 + 348) & 1) == 0)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v14 = gLogObj;
            if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136446722;
              v51 = "nw_protocol_ohttp_context_send_request";
              v52 = 2082;
              v53 = (char *)v27;
              v54 = 2080;
              v55 = " ";
              _os_log_impl(&dword_182FBE000, v14, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sSent outer request", buf, 0x20u);
            }
          }
          *(_DWORD *)(a1 + 344) = 1;
        }
        _Block_object_dispose(v40, 8);
        if (*((_BYTE *)v47 + 24))
          goto LABEL_40;
      }
      _Block_object_dispose(v40, 8);
LABEL_40:
      if (*(_QWORD *)(a2 + 136) == *(_QWORD *)(a2 + 144))
      {
        *(_QWORD *)(a2 + 136) = 0;
        *(_QWORD *)(a2 + 144) = 0;
        v17 = *(void **)(a2 + 128);
        if (v17)
        {
          free(v17);
          *(_QWORD *)(a2 + 128) = 0;
        }
      }
      if (*((_BYTE *)v47 + 24))
      {
        if ((*(_BYTE *)(a1 + 348) & 1) == 0)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v18 = gLogObj;
          if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136446722;
            v51 = "nw_protocol_ohttp_context_send_request";
            v52 = 2082;
            v53 = (char *)v27;
            v54 = 2080;
            v55 = " ";
            _os_log_impl(&dword_182FBE000, v18, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sSent complete request", buf, 0x20u);
          }
        }
        *(_QWORD *)(a1 + 320) = 0;
        if ((*(_BYTE *)(a2 + 228) & 0x82) == 2)
          *(_DWORD *)(a2 + 224) = 2;
      }
      else
      {
        if (!*((_BYTE *)v43 + 24))
          goto LABEL_58;
        *(_QWORD *)(a1 + 320) = a2;
      }
      nw_protocol_ohttp_read_response(a1);
      if (*((_BYTE *)v43 + 24))
      {
        if (*(_QWORD *)a2)
        {
          if ((*(_BYTE *)(a2 + 228) & 1) == 0 && (*(_BYTE *)(a1 + 348) & 0x20) == 0)
          {
            *(_BYTE *)(a1 + 348) |= 0x20u;
            v19 = *(char **)(a1 + 296);
            if (v19)
            {
              v28[0] = MEMORY[0x1E0C809B0];
              v28[1] = 0x40000000;
              v28[2] = ___ZL38nw_protocol_ohttp_context_send_requestP17nw_protocol_ohttpP16nw_ohttp_context_block_invoke_40;
              v28[3] = &__block_descriptor_tmp_41_28613;
              v28[4] = a1;
              nw_hash_table_apply(v19, (uint64_t)v28);
            }
          }
        }
      }
LABEL_58:
      _Block_object_dispose(&v42, 8);
      _Block_object_dispose(&v46, 8);
    }
  }
  else if ((*(_BYTE *)(a1 + 348) & 1) == 0)
  {
    if (gLogDatapath)
    {
      v6 = __nwlog_obj();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446722;
        v51 = "nw_protocol_ohttp_context_send_request";
        v52 = 2082;
        v53 = (char *)(a1 + 349);
        v54 = 2080;
        v55 = " ";
        v7 = "%{public}s %{public}s%signoring write, pending finishing another context";
        goto LABEL_16;
      }
    }
  }
}

BOOL ___ZL30nw_protocol_ohttp_send_requestP17nw_protocol_ohttp_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t extra;
  _BOOL8 result;

  extra = nw_hash_node_get_extra(a2);
  result = 1;
  if (*(_DWORD *)(extra + 224) == 1)
  {
    nw_protocol_ohttp_context_send_request(*(_QWORD *)(a1 + 32), extra);
    if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 320))
      return 0;
  }
  return result;
}

uint64_t ___ZL38nw_protocol_ohttp_context_send_requestP17nw_protocol_ohttpP16nw_ohttp_context_block_invoke(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  unsigned int v7;
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL4 v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  const char *v16;
  BOOL v17;
  const char *v18;
  unsigned int v20;
  const char *v21;
  __int16 v22;
  const char *v23;
  __int16 v24;
  const char *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24))
  {
    nw_frame_finalize(a2);
    v4 = *(_QWORD *)(a2 + 32);
    v5 = *(_QWORD **)(a2 + 40);
    if (v4)
    {
      *(_QWORD *)(v4 + 40) = v5;
      v5 = *(_QWORD **)(a2 + 40);
    }
    else
    {
      *(_QWORD *)(a1[7] + 8) = v5;
    }
    *v5 = v4;
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 40) = 0;
    v13 = a1[8];
    if (!v13 || (*(_BYTE *)(v13 + 348) & 1) == 0)
    {
      if (gLogDatapath)
      {
        v14 = __nwlog_obj();
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
        {
          v15 = a1[8];
          v16 = "";
          v17 = v15 == 0;
          if (v15)
            v18 = (const char *)(v15 + 349);
          else
            v18 = "";
          v20 = 136446722;
          v21 = "nw_protocol_ohttp_context_send_request_block_invoke";
          if (!v17)
            v16 = " ";
          v22 = 2082;
          v23 = v18;
          v24 = 2080;
          v25 = v16;
          _os_log_impl(&dword_182FBE000, v14, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sDropping unneeded output frame", (uint8_t *)&v20, 0x20u);
        }
      }
    }
  }
  else
  {
    v20 = 0;
    v6 = (void *)nw_frame_unclaimed_bytes(a2, &v20);
    v7 = *(_DWORD *)(*(_QWORD *)(a1[5] + 8) + 24);
    if (v20 >= v7)
      v8 = v7;
    else
      v8 = v20;
    memcpy(v6, (const void *)(*(_QWORD *)(a1[9] + 128) + *(_QWORD *)(a1[9] + 144)), v8);
    nw_frame_claim(a2, v9, v8, 0);
    *(_QWORD *)(a1[9] + 144) += v8;
    *(_DWORD *)(*(_QWORD *)(a1[5] + 8) + 24) -= v8;
    nw_frame_collapse(a2);
    nw_frame_unclaim(a2, v10, v8, 0);
    v11 = 0;
    *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = *(_DWORD *)(*(_QWORD *)(a1[5] + 8) + 24) == 0;
    v12 = a1[8];
    if ((*(_BYTE *)(v12 + 348) & 4) == 0)
    {
      if (*(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24))
        v11 = (*(_BYTE *)(a1[9] + 228) & 0x82) == 2;
      else
        v11 = 0;
    }
    *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) = 1;
    nw_frame_set_metadata(a2, *(NSObject **)(v12 + 304), 0, v11);
  }
  return 1;
}

void nw_protocol_ohttp_read_response(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int input_frames;
  uint64_t v5;
  uint64_t v6;
  char v7;
  NSObject *v8;
  int v9;
  NSObject *log;
  _QWORD v11[2];
  uint64_t (*v12)(uint64_t, uint64_t);
  void *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD v16[2];
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  int v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v2 = a1 + 349;
  v3 = MEMORY[0x1E0C809B0];
  while (*(_DWORD *)(a1 + 344) == 1)
  {
    v16[0] = 0;
    v16[1] = v16;
    input_frames = nw_protocol_get_input_frames(*(_QWORD *)(a1 + 32), a1, 1, 0xFFFFFFFFLL, 0xFFFFFFFFLL, (uint64_t)v16);
    if ((*(_BYTE *)(a1 + 348) & 1) == 0)
    {
      if (gLogDatapath)
      {
        log = __nwlog_obj();
        if (os_log_type_enabled(log, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136446978;
          v18 = "nw_protocol_ohttp_read_response";
          v19 = 2082;
          v20 = v2;
          v21 = 2080;
          v22 = " ";
          v23 = 1024;
          v24 = input_frames;
          _os_log_impl(&dword_182FBE000, log, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sGot %u input frames", buf, 0x26u);
        }
      }
    }
    if (input_frames)
    {
      v11[0] = v3;
      v11[1] = 0x40000000;
      v12 = ___ZL31nw_protocol_ohttp_read_responseP17nw_protocol_ohttp_block_invoke;
      v13 = &__block_descriptor_tmp_20_28736;
      v14 = v16;
      v15 = a1;
      v5 = v16[0];
      do
      {
        if (!v5)
          break;
        v6 = *(_QWORD *)(v5 + 32);
        v7 = ((uint64_t (*)(_QWORD *))v12)(v11);
        v5 = v6;
      }
      while ((v7 & 1) != 0);
      if ((*(_BYTE *)(a1 + 348) & 0x10) == 0)
        continue;
    }
    if (*(_QWORD *)(a1 + 312))
    {
      if ((*(_BYTE *)(a1 + 348) & 0x12) != 0)
        nw_protocol_ohttp_process_response(a1);
    }
    return;
  }
  if ((*(_BYTE *)(a1 + 348) & 1) == 0)
  {
    if (gLogDatapath)
    {
      v8 = __nwlog_obj();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
        v9 = *(_DWORD *)(a1 + 344);
        *(_DWORD *)buf = 136446978;
        v18 = "nw_protocol_ohttp_read_response";
        v19 = 2082;
        v20 = v2;
        v21 = 2080;
        v22 = " ";
        v23 = 1024;
        v24 = v9;
        _os_log_impl(&dword_182FBE000, v8, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sskipping, state %u", buf, 0x26u);
      }
    }
  }
}

uint64_t ___ZL38nw_protocol_ohttp_context_send_requestP17nw_protocol_ohttpP16nw_ohttp_context_block_invoke_40(uint64_t a1, uint64_t a2)
{
  uint64_t extra;

  extra = nw_hash_node_get_extra(a2);
  if (*(char *)(extra + 228) < 0 && *(_DWORD *)(extra + 224) == 1)
    nw_protocol_ohttp_prepare_request(*(_QWORD *)(a1 + 32), extra);
  return 1;
}

void nw_protocol_ohttp_prepare_request(uint64_t a1, uint64_t a2)
{
  int v4;
  unsigned int v5;
  NSObject *v6;
  int v7;
  uint64_t v8;
  const char *v9;
  NSObject *v10;
  os_log_type_t v11;
  NSObject *v12;
  size_t length;
  unsigned __int16 *bytes_ptr;
  uint64_t *v15;
  size_t v16;
  unint64_t int64_with_default;
  unint64_t v18;
  uint64_t v19;
  const unsigned __int8 *v20;
  unsigned __int8 *v21;
  const unsigned __int8 *v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  char *v27;
  unint64_t v28;
  NSObject *v29;
  void *v30;
  uint64_t v31;
  size_t v32;
  void *v33;
  int v34;
  _BOOL8 v35;
  NSObject *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  NSObject *v43;
  os_log_type_t v44;
  uint64_t v45;
  const char *v46;
  char *v47;
  _BOOL4 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  size_t v54;
  NSObject *v55;
  void *v56;
  unint64_t v57;
  size_t v58;
  char *v59;
  char *v60;
  char *v61;
  char *v62;
  size_t v63;
  void *v64;
  uint64_t v65;
  BOOL v66;
  size_t v67;
  char *v68;
  NSObject *v69;
  size_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  id v78;
  char *v79;
  NSObject *v80;
  os_log_type_t v81;
  const char *v82;
  char *backtrace_string;
  _BOOL4 v84;
  char *v85;
  NSObject *v86;
  os_log_type_t v87;
  const char *v88;
  NSObject *v89;
  void *v90;
  NSObject *v91;
  void *v92;
  NSObject *v93;
  void *v94;
  NSObject *v95;
  void *v96;
  NSObject *v97;
  void *v98;
  char *v99;
  _BOOL4 v100;
  char *v101;
  NSObject *v102;
  os_log_type_t v103;
  const char *v104;
  char *v105;
  _BOOL4 v106;
  void *v107;
  NSObject *v108;
  void *v109;
  NSObject *v110;
  uint64_t v111;
  char *v112;
  _BOOL4 v113;
  NSObject *v114;
  unsigned __int8 *v115;
  size_t __n;
  size_t v117;
  _QWORD v118[2];
  uint64_t (*v119)(_QWORD *);
  void *v120;
  uint64_t v121;
  _QWORD v122[2];
  uint64_t (*v123)(_QWORD *);
  void *v124;
  _BYTE *v125;
  size_t v126;
  uint64_t v127;
  uint64_t v128;
  size_t v129;
  _QWORD v130[2];
  uint64_t (*v131)(_QWORD *);
  void *v132;
  _BYTE *v133;
  size_t v134;
  const unsigned __int8 *v135;
  unint64_t __src;
  char v137;
  size_t v138;
  unint64_t v139;
  _BYTE buf[24];
  uint64_t v141;
  __int16 v142;
  uint64_t v143;
  __int16 v144;
  char *v145;
  uint64_t v146;

  v146 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_ohttp_prepare_request";
    v79 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(v139) = 16;
    LOBYTE(v138) = 0;
    if (!__nwlog_fault(v79, &v139, &v138))
      goto LABEL_154;
    if (v139 == 17)
    {
      v80 = __nwlog_obj();
      v81 = v139;
      if (!os_log_type_enabled(v80, (os_log_type_t)v139))
        goto LABEL_154;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_ohttp_prepare_request";
      v82 = "%{public}s called with null ohttp";
    }
    else if ((_BYTE)v138)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v80 = __nwlog_obj();
      v81 = v139;
      v84 = os_log_type_enabled(v80, (os_log_type_t)v139);
      if (backtrace_string)
      {
        if (v84)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_protocol_ohttp_prepare_request";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v80, v81, "%{public}s called with null ohttp, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_154;
      }
      if (!v84)
      {
LABEL_154:
        if (v79)
          free(v79);
        return;
      }
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_ohttp_prepare_request";
      v82 = "%{public}s called with null ohttp, no backtrace";
    }
    else
    {
      v80 = __nwlog_obj();
      v81 = v139;
      if (!os_log_type_enabled(v80, (os_log_type_t)v139))
        goto LABEL_154;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_ohttp_prepare_request";
      v82 = "%{public}s called with null ohttp, backtrace limit exceeded";
    }
    _os_log_impl(&dword_182FBE000, v80, v81, v82, buf, 0xCu);
    goto LABEL_154;
  }
  v4 = *(unsigned __int8 *)(a1 + 348);
  v5 = *(_DWORD *)(a2 + 224);
  if ((v4 & 2) != 0)
  {
    if (v5 >= 2)
      goto LABEL_4;
  }
  else if (v5)
  {
LABEL_4:
    if ((v4 & 1) == 0 && gLogDatapath)
    {
      v6 = __nwlog_obj();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      {
        v7 = *(_DWORD *)(a2 + 224);
        *(_DWORD *)buf = 136446978;
        *(_QWORD *)&buf[4] = "nw_protocol_ohttp_prepare_request";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = a1 + 349;
        *(_WORD *)&buf[22] = 2080;
        v141 = (uint64_t)" ";
        v142 = 1024;
        LODWORD(v143) = v7;
        _os_log_impl(&dword_182FBE000, v6, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sskipping, state %u", buf, 0x26u);
      }
    }
    return;
  }
  if (!*(_QWORD *)(a2 + 72) && !*(_QWORD *)(a2 + 216) && (*(_BYTE *)(a2 + 228) & 1) == 0)
  {
    if ((v4 & 1) != 0)
      return;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v8 = gLogObj;
    if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      return;
    *(_DWORD *)buf = 136446722;
    *(_QWORD *)&buf[4] = "nw_protocol_ohttp_prepare_request";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = a1 + 349;
    *(_WORD *)&buf[22] = 2080;
    v141 = (uint64_t)" ";
    v9 = "%{public}s %{public}s%sskipping, request doesn't have necessary metadata";
    v10 = v8;
    v11 = OS_LOG_TYPE_ERROR;
LABEL_15:
    _os_log_impl(&dword_182FBE000, v10, v11, v9, buf, 0x20u);
    return;
  }
  if (((*(unsigned __int8 *)(a2 + 228) | v4) & 2) == 0)
  {
    if ((v4 & 1) != 0)
      return;
    if (!gLogDatapath)
      return;
    v12 = __nwlog_obj();
    if (!os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      return;
    *(_DWORD *)buf = 136446722;
    *(_QWORD *)&buf[4] = "nw_protocol_ohttp_prepare_request";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = a1 + 349;
    *(_WORD *)&buf[22] = 2080;
    v141 = (uint64_t)" ";
    v9 = "%{public}s %{public}s%sskipping, request not ready";
LABEL_21:
    v10 = v12;
    v11 = OS_LOG_TYPE_DEBUG;
    goto LABEL_15;
  }
  length = xpc_data_get_length(*(xpc_object_t *)(a2 + 88));
  bytes_ptr = (unsigned __int16 *)xpc_data_get_bytes_ptr(*(xpc_object_t *)(a2 + 88));
  v15 = (uint64_t *)(a2 + 24);
  *(_DWORD *)buf = 0;
  nw_frame_array_get_frame_count((uint64_t *)(a2 + 24), 0, buf);
  v16 = *(unsigned int *)buf;
  v117 = *(unsigned int *)buf;
  if ((*(_BYTE *)(a2 + 228) & 1) == 0 || (*(_BYTE *)(a1 + 348) & 0x20) != 0)
  {
    *(_BYTE *)(a2 + 228) &= ~0x80u;
  }
  else
  {
    int64_with_default = networkd_settings_get_int64_with_default((const char *)nw_setting_ohttp_standalone_aead_threshold, 3000);
    v18 = *(_QWORD *)(a2 + 152);
    if (v18 + v16 > int64_with_default)
    {
      *(_BYTE *)(a2 + 228) |= 0x80u;
      v16 = int64_with_default - v18;
      if (int64_with_default <= v18)
      {
        if ((*(_BYTE *)(a1 + 348) & 1) != 0)
          return;
        if (!gLogDatapath)
          return;
        v12 = __nwlog_obj();
        if (!os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
          return;
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = "nw_protocol_ohttp_prepare_request";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = a1 + 349;
        *(_WORD *)&buf[22] = 2080;
        v141 = (uint64_t)" ";
        v9 = "%{public}s %{public}s%sskipping, nothing to send, hit threshold";
        goto LABEL_21;
      }
    }
  }
  v19 = *v15;
  if (v16 == nw_frame_unclaimed_length((_DWORD *)*v15))
  {
    v20 = (const unsigned __int8 *)nw_frame_unclaimed_bytes(v19, 0);
    v21 = 0;
  }
  else if (v16)
  {
    v22 = (const unsigned __int8 *)malloc_type_calloc(1uLL, v16, 0xEAFB8F1AuLL);
    if (!v22)
    {
      v97 = __nwlog_obj();
      os_log_type_enabled(v97, OS_LOG_TYPE_ERROR);
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = "strict_calloc";
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = 1;
      *(_WORD *)&buf[22] = 2048;
      v141 = v16;
      v98 = (void *)_os_log_send_and_compose_impl();
      if (__nwlog_abort((uint64_t)v98))
        goto LABEL_220;
      free(v98);
      v22 = 0;
    }
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x2000000000;
    v141 = 0;
    v130[0] = MEMORY[0x1E0C809B0];
    v130[1] = 0x40000000;
    v131 = (uint64_t (*)(_QWORD *))___ZL33nw_protocol_ohttp_prepare_requestP17nw_protocol_ohttpP16nw_ohttp_context_block_invoke;
    v132 = &unk_1E149F4A8;
    v133 = buf;
    v134 = v16;
    v20 = v22;
    v135 = v22;
    v23 = *v15;
    do
    {
      if (!v23)
        break;
      v24 = *(_QWORD *)(v23 + 16);
      v25 = v131(v130);
      v23 = v24;
    }
    while ((v25 & 1) != 0);
    _Block_object_dispose(buf, 8);
    v21 = (unsigned __int8 *)v20;
  }
  else
  {
    v21 = 0;
    v20 = 0;
  }
  v129 = 0;
  v26 = *(unsigned __int8 *)(a2 + 228);
  if ((v26 & 1) != 0)
  {
    if (bytes_ptr)
    {
      if (length)
      {
        v115 = v21;
        if (!v16 || v20)
        {
          v28 = *(_QWORD *)a2;
          v139 = 0;
          if (v28 > 0x3F)
          {
            if (v28 >> 14)
            {
              if (v28 >> 30)
              {
                if (v28 >> 62)
                {
                  v29 = __nwlog_obj();
                  os_log_type_enabled(v29, OS_LOG_TYPE_ERROR);
                  *(_DWORD *)buf = 136446466;
                  *(_QWORD *)&buf[4] = "_http_vle_encode";
                  *(_WORD *)&buf[12] = 2048;
                  *(_QWORD *)&buf[14] = v28;
                  v30 = (void *)_os_log_send_and_compose_impl();
                  if (__nwlog_abort((uint64_t)v30))
                    goto LABEL_220;
                  free(v30);
                  __n = 0;
                }
                else
                {
                  v139 = bswap64(v28 | 0xC000000000000000);
                  __n = 8;
                }
              }
              else
              {
                v139 = bswap32(v28 | 0x80000000);
                __n = 4;
              }
            }
            else
            {
              v139 = bswap32(v28 | 0x4000) >> 16;
              __n = 2;
            }
          }
          else
          {
            v139 = v28;
            __n = 1;
          }
          v31 = *(_QWORD *)(a2 + 184);
          if (!v31)
          {
            cchpke_params_x25519_AESGCM128_HKDF_SHA256();
            v32 = cchpke_params_sizeof_aead_nonce();
            *(_QWORD *)(a2 + 192) = v32;
            if (!v32)
            {
              v114 = __nwlog_obj();
              os_log_type_enabled(v114, OS_LOG_TYPE_ERROR);
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "strict_malloc";
              v107 = (void *)_os_log_send_and_compose_impl();
              if (__nwlog_abort((uint64_t)v107))
                goto LABEL_220;
              free(v107);
            }
            v33 = malloc_type_malloc(v32, 0xF2B69DE5uLL);
            if (!v33)
            {
              v108 = __nwlog_obj();
              os_log_type_enabled(v108, OS_LOG_TYPE_ERROR);
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "strict_malloc";
              *(_WORD *)&buf[12] = 2048;
              *(_QWORD *)&buf[14] = v32;
              v109 = (void *)_os_log_send_and_compose_impl();
              if (__nwlog_abort((uint64_t)v109))
                goto LABEL_220;
              free(v109);
              v33 = 0;
            }
            *(_QWORD *)(a2 + 184) = v33;
            arc4random_buf(v33, *(_QWORD *)(a2 + 192));
            *(_QWORD *)(a2 + 200) = 0;
          }
          v34 = v26 & 0x82;
          v138 = 0;
          if (v16)
          {
            v35 = nw_http_encrypt_standalone_aead_chunk((uint64_t)v20, v16, *(_QWORD *)(a2 + 200), v34 == 2, (uint64_t)bytes_ptr, length, *(const void **)(a2 + 184), *(_QWORD *)(a2 + 192), &v138);
            if (!v35)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v36 = gLogObj;
              if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_http_create_standalone_aead_request";
                _os_log_impl(&dword_182FBE000, v36, OS_LOG_TYPE_ERROR, "%{public}s Failed to fill out AEAD chunk", buf, 0xCu);
              }
              v27 = 0;
              v21 = v115;
              goto LABEL_111;
            }
          }
          else
          {
            v35 = 0;
          }
          v37 = *(_QWORD *)(a2 + 200);
          v38 = v37 + 1;
          v39 = v37 == -1;
          v40 = v39 << 63 >> 63;
          *(_QWORD *)(a2 + 200) = v38;
          if (v40 == v39 && (v40 & 0x8000000000000000) == 0)
          {
LABEL_85:
            if (v31)
              v52 = 0;
            else
              v52 = *(_QWORD *)(a2 + 192) + 2;
            v53 = v52 + __n + v138;
            __src = 0;
            if (v53 > 0x3F)
            {
              if (v53 >> 14)
              {
                if (v53 >> 30)
                {
                  if (v53 >> 62)
                  {
                    v55 = __nwlog_obj();
                    os_log_type_enabled(v55, OS_LOG_TYPE_ERROR);
                    *(_DWORD *)buf = 136446466;
                    *(_QWORD *)&buf[4] = "_http_vle_encode";
                    *(_WORD *)&buf[12] = 2048;
                    *(_QWORD *)&buf[14] = v53;
                    v56 = (void *)_os_log_send_and_compose_impl();
                    if (__nwlog_abort((uint64_t)v56))
                      goto LABEL_220;
                    free(v56);
                    v54 = 0;
                  }
                  else
                  {
                    __src = bswap64(v53 | 0xC000000000000000);
                    v54 = 8;
                  }
                }
                else
                {
                  __src = bswap32(v53 | 0x80000000);
                  v54 = 4;
                }
              }
              else
              {
                __src = bswap32(v53 | 0x4000) >> 16;
                v54 = 2;
              }
            }
            else
            {
              __src = v52 + __n + v138;
              v54 = 1;
            }
            if (v34 == 2)
              v57 = v53 + 1;
            else
              v57 = v53;
            v58 = v57 + v54;
            v129 = v57 + v54;
            if (!(v57 + v54))
            {
              v93 = __nwlog_obj();
              os_log_type_enabled(v93, OS_LOG_TYPE_ERROR);
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "strict_calloc";
              v94 = (void *)_os_log_send_and_compose_impl();
              if (__nwlog_abort((uint64_t)v94))
                goto LABEL_220;
              free(v94);
            }
            v27 = (char *)malloc_type_calloc(1uLL, v58, 0xEAFB8F1AuLL);
            if (!v27)
            {
              v95 = __nwlog_obj();
              os_log_type_enabled(v95, OS_LOG_TYPE_ERROR);
              *(_DWORD *)buf = 136446722;
              *(_QWORD *)&buf[4] = "strict_calloc";
              *(_WORD *)&buf[12] = 2048;
              *(_QWORD *)&buf[14] = 1;
              *(_WORD *)&buf[22] = 2048;
              v141 = v58;
              v96 = (void *)_os_log_send_and_compose_impl();
              if (__nwlog_abort((uint64_t)v96))
                goto LABEL_220;
              free(v96);
            }
            v59 = v27;
            if (v34 == 2)
            {
              *v27 = 0;
              v59 = v27 + 1;
            }
            memcpy(v59, &__src, v54);
            v60 = &v59[v54];
            memcpy(v60, &v139, __n);
            v61 = &v60[__n];
            if (!v31)
            {
              *(_WORD *)v61 = 256;
              v62 = v61 + 2;
              v63 = *(_QWORD *)(a2 + 192);
              memcpy(v62, *(const void **)(a2 + 184), v63);
              v61 = &v62[v63];
            }
            v21 = v115;
            if (v138)
              memcpy(v61, (const void *)v35, v138);
            if (v35)
              free((void *)v35);
            goto LABEL_111;
          }
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v41 = *(_QWORD *)(a2 + 200);
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_http_create_standalone_aead_request";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = "ohttp_context->aead_chunk_index";
          *(_WORD *)&buf[22] = 2048;
          v141 = 1;
          v142 = 2048;
          v143 = v41;
          v42 = (char *)_os_log_send_and_compose_impl();
          LOBYTE(__src) = 16;
          v137 = 0;
          if (__nwlog_fault(v42, &__src, &v137))
          {
            if (__src == 17)
            {
              v43 = __nwlog_obj();
              v44 = __src;
              if (os_log_type_enabled(v43, (os_log_type_t)__src))
              {
                v45 = *(_QWORD *)(a2 + 200);
                *(_DWORD *)buf = 136446978;
                *(_QWORD *)&buf[4] = "nw_http_create_standalone_aead_request";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = "ohttp_context->aead_chunk_index";
                *(_WORD *)&buf[22] = 2048;
                v141 = 1;
                v142 = 2048;
                v143 = v45;
                v46 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_81:
                _os_log_impl(&dword_182FBE000, v43, v44, v46, buf, 0x2Au);
              }
            }
            else if (v137)
            {
              v47 = (char *)__nw_create_backtrace_string();
              v43 = __nwlog_obj();
              v44 = __src;
              v48 = os_log_type_enabled(v43, (os_log_type_t)__src);
              if (v47)
              {
                if (v48)
                {
                  v49 = *(_QWORD *)(a2 + 200);
                  *(_DWORD *)buf = 136447234;
                  *(_QWORD *)&buf[4] = "nw_http_create_standalone_aead_request";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = "ohttp_context->aead_chunk_index";
                  *(_WORD *)&buf[22] = 2048;
                  v141 = 1;
                  v142 = 2048;
                  v143 = v49;
                  v144 = 2082;
                  v145 = v47;
                  _os_log_impl(&dword_182FBE000, v43, v44, "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
                }
                free(v47);
                goto LABEL_82;
              }
              if (v48)
              {
                v51 = *(_QWORD *)(a2 + 200);
                *(_DWORD *)buf = 136446978;
                *(_QWORD *)&buf[4] = "nw_http_create_standalone_aead_request";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = "ohttp_context->aead_chunk_index";
                *(_WORD *)&buf[22] = 2048;
                v141 = 1;
                v142 = 2048;
                v143 = v51;
                v46 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
                goto LABEL_81;
              }
            }
            else
            {
              v43 = __nwlog_obj();
              v44 = __src;
              if (os_log_type_enabled(v43, (os_log_type_t)__src))
              {
                v50 = *(_QWORD *)(a2 + 200);
                *(_DWORD *)buf = 136446978;
                *(_QWORD *)&buf[4] = "nw_http_create_standalone_aead_request";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = "ohttp_context->aead_chunk_index";
                *(_WORD *)&buf[22] = 2048;
                v141 = 1;
                v142 = 2048;
                v143 = v50;
                v46 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
                goto LABEL_81;
              }
            }
          }
LABEL_82:
          if (v42)
            free(v42);
          *(_QWORD *)(a2 + 200) = -1;
          goto LABEL_85;
        }
        __nwlog_obj();
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http_create_standalone_aead_request";
        v101 = (char *)_os_log_send_and_compose_impl();
        LOBYTE(v139) = 16;
        LOBYTE(v138) = 0;
        if (__nwlog_fault(v101, &v139, &v138))
        {
          if (v139 == 17)
          {
            v102 = __nwlog_obj();
            v103 = v139;
            if (os_log_type_enabled(v102, (os_log_type_t)v139))
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_http_create_standalone_aead_request";
              v104 = "%{public}s called with null body_content";
LABEL_216:
              _os_log_impl(&dword_182FBE000, v102, v103, v104, buf, 0xCu);
            }
          }
          else if ((_BYTE)v138)
          {
            v112 = (char *)__nw_create_backtrace_string();
            v102 = __nwlog_obj();
            v103 = v139;
            v113 = os_log_type_enabled(v102, (os_log_type_t)v139);
            if (v112)
            {
              if (v113)
              {
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = "nw_http_create_standalone_aead_request";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = v112;
                _os_log_impl(&dword_182FBE000, v102, v103, "%{public}s called with null body_content, dumping backtrace:%{public}s", buf, 0x16u);
              }
              free(v112);
              goto LABEL_217;
            }
            if (v113)
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_http_create_standalone_aead_request";
              v104 = "%{public}s called with null body_content, no backtrace";
              goto LABEL_216;
            }
          }
          else
          {
            v102 = __nwlog_obj();
            v103 = v139;
            if (os_log_type_enabled(v102, (os_log_type_t)v139))
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_http_create_standalone_aead_request";
              v104 = "%{public}s called with null body_content, backtrace limit exceeded";
              goto LABEL_216;
            }
          }
        }
LABEL_217:
        if (v101)
          free(v101);
        v27 = 0;
        goto LABEL_111;
      }
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http_create_standalone_aead_request";
      v85 = (char *)_os_log_send_and_compose_impl();
      LOBYTE(v139) = 16;
      LOBYTE(v138) = 0;
      if (__nwlog_fault(v85, &v139, &v138))
      {
        if (v139 == 17)
        {
          v86 = __nwlog_obj();
          v87 = v139;
          if (!os_log_type_enabled(v86, (os_log_type_t)v139))
            goto LABEL_209;
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_create_standalone_aead_request";
          v88 = "%{public}s called with null aead_key_length";
          goto LABEL_208;
        }
        if (!(_BYTE)v138)
        {
          v86 = __nwlog_obj();
          v87 = v139;
          if (!os_log_type_enabled(v86, (os_log_type_t)v139))
            goto LABEL_209;
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_create_standalone_aead_request";
          v88 = "%{public}s called with null aead_key_length, backtrace limit exceeded";
          goto LABEL_208;
        }
        v105 = (char *)__nw_create_backtrace_string();
        v86 = __nwlog_obj();
        v87 = v139;
        v106 = os_log_type_enabled(v86, (os_log_type_t)v139);
        if (v105)
        {
          if (v106)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_http_create_standalone_aead_request";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v105;
            _os_log_impl(&dword_182FBE000, v86, v87, "%{public}s called with null aead_key_length, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v105);
          if (!v85)
            goto LABEL_211;
          goto LABEL_210;
        }
        if (v106)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_create_standalone_aead_request";
          v88 = "%{public}s called with null aead_key_length, no backtrace";
LABEL_208:
          _os_log_impl(&dword_182FBE000, v86, v87, v88, buf, 0xCu);
        }
      }
    }
    else
    {
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http_create_standalone_aead_request";
      v85 = (char *)_os_log_send_and_compose_impl();
      LOBYTE(v139) = 16;
      LOBYTE(v138) = 0;
      if (!__nwlog_fault(v85, &v139, &v138))
        goto LABEL_209;
      if (v139 == 17)
      {
        v86 = __nwlog_obj();
        v87 = v139;
        if (!os_log_type_enabled(v86, (os_log_type_t)v139))
          goto LABEL_209;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http_create_standalone_aead_request";
        v88 = "%{public}s called with null aead_key_buffer";
        goto LABEL_208;
      }
      if (!(_BYTE)v138)
      {
        v86 = __nwlog_obj();
        v87 = v139;
        if (!os_log_type_enabled(v86, (os_log_type_t)v139))
          goto LABEL_209;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http_create_standalone_aead_request";
        v88 = "%{public}s called with null aead_key_buffer, backtrace limit exceeded";
        goto LABEL_208;
      }
      v99 = (char *)__nw_create_backtrace_string();
      v86 = __nwlog_obj();
      v87 = v139;
      v100 = os_log_type_enabled(v86, (os_log_type_t)v139);
      if (!v99)
      {
        if (!v100)
          goto LABEL_209;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http_create_standalone_aead_request";
        v88 = "%{public}s called with null aead_key_buffer, no backtrace";
        goto LABEL_208;
      }
      if (v100)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http_create_standalone_aead_request";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v99;
        _os_log_impl(&dword_182FBE000, v86, v87, "%{public}s called with null aead_key_buffer, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v99);
    }
LABEL_209:
    if (!v85)
    {
LABEL_211:
      v27 = 0;
      goto LABEL_111;
    }
LABEL_210:
    free(v85);
    goto LABEL_211;
  }
  v27 = (char *)nw_http_create_oblivious_request(a2, (*(unsigned __int8 *)(a1 + 348) >> 1) & 1, (*(unsigned __int8 *)(a1 + 348) >> 2) & 1, v20, v16, (v26 >> 1) & 1, bytes_ptr, length, &v129);
LABEL_111:
  if (v21)
    free(v21);
  if (v27)
  {
    v64 = *(void **)(a2 + 128);
    if (!v64)
    {
      v70 = v129;
      *(_QWORD *)(a2 + 128) = v27;
      *(_QWORD *)(a2 + 136) = v70;
      *(_QWORD *)(a2 + 144) = 0;
      goto LABEL_123;
    }
    v65 = *(_QWORD *)(a2 + 136);
    v67 = v129 + v65;
    v66 = v129 + v65 == 0;
    *(_QWORD *)(a2 + 136) = v129 + v65;
    if (v66)
    {
      v89 = __nwlog_obj();
      os_log_type_enabled(v89, OS_LOG_TYPE_ERROR);
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "_strict_reallocf";
      v90 = (void *)_os_log_send_and_compose_impl();
      if (__nwlog_abort((uint64_t)v90))
        goto LABEL_220;
      free(v90);
      v64 = *(void **)(a2 + 128);
    }
    v68 = (char *)reallocf(v64, v67);
    if (v68)
    {
LABEL_117:
      *(_QWORD *)(a2 + 128) = v68;
      memcpy(&v68[v65], v27, v129);
LABEL_123:
      if (v16 >= v117)
      {
        v118[0] = MEMORY[0x1E0C809B0];
        v118[1] = 0x40000000;
        v119 = (uint64_t (*)(_QWORD *))___ZL33nw_protocol_ohttp_prepare_requestP17nw_protocol_ohttpP16nw_ohttp_context_block_invoke_2;
        v120 = &__block_descriptor_tmp_36_28659;
        v121 = a2;
        v75 = *(_QWORD *)(a2 + 24);
        do
        {
          if (!v75)
            break;
          v76 = *(_QWORD *)(v75 + 16);
          v77 = v119(v118);
          v75 = v76;
        }
        while ((v77 & 1) != 0);
      }
      else
      {
        v71 = *(_QWORD *)(a2 + 152);
        *(_QWORD *)(a2 + 152) = v71 + v16;
        if (__CFADD__(v71, v16))
        {
          if (gLogDatapath)
          {
            v110 = __nwlog_obj();
            if (os_log_type_enabled(v110, OS_LOG_TYPE_DEBUG))
            {
              v111 = *(_QWORD *)(a2 + 152);
              *(_DWORD *)buf = 136446978;
              *(_QWORD *)&buf[4] = "nw_protocol_ohttp_prepare_request";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = "ohttp_context->cumulative_request_length";
              *(_WORD *)&buf[22] = 2048;
              v141 = v16;
              v142 = 2048;
              v143 = v111;
              _os_log_impl(&dword_182FBE000, v110, OS_LOG_TYPE_DEBUG, "%{public}s Overflow: %{public}s, increment %llu, result %llu", buf, 0x2Au);
            }
          }
          *(_QWORD *)(a2 + 152) = -1;
        }
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = buf;
        LODWORD(v141) = 0;
        *(_QWORD *)&buf[16] = 0x2000000000;
        v122[0] = MEMORY[0x1E0C809B0];
        v122[1] = 0x40000000;
        v123 = (uint64_t (*)(_QWORD *))___ZL33nw_protocol_ohttp_prepare_requestP17nw_protocol_ohttpP16nw_ohttp_context_block_invoke_34;
        v124 = &unk_1E149F4D0;
        v125 = buf;
        v126 = v16;
        v127 = a2;
        v128 = a1;
        v72 = *(_QWORD *)(a2 + 24);
        do
        {
          if (!v72)
            break;
          v73 = *(_QWORD *)(v72 + 16);
          v74 = v123(v122);
          v72 = v73;
        }
        while ((v74 & 1) != 0);
        _Block_object_dispose(buf, 8);
      }
      if ((*(_BYTE *)(a1 + 348) & 2) == 0)
      {
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = 0;
        snprintf(buf, 0x10uLL, "%zu", *(_QWORD *)(a2 + 136));
        v78 = nw_http_metadata_copy_request(*(void **)(a1 + 304));
        nw_http_fields_append(v78, (uint64_t)"Content-Length", (uint64_t)buf);
        if (v78)
          os_release(v78);
      }
      *(_DWORD *)(a2 + 224) = 1;
      nw_protocol_ohttp_send_request(a1);
      return;
    }
    v91 = __nwlog_obj();
    os_log_type_enabled(v91, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "_strict_reallocf";
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v67;
    v92 = (void *)_os_log_send_and_compose_impl();
    if (!__nwlog_abort((uint64_t)v92))
    {
      free(v92);
      goto LABEL_117;
    }
LABEL_220:
    __break(1u);
    return;
  }
  if ((*(_BYTE *)(a1 + 348) & 1) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v69 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = "nw_protocol_ohttp_prepare_request";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = a1 + 349;
      *(_WORD *)&buf[22] = 2080;
      v141 = (uint64_t)" ";
      _os_log_impl(&dword_182FBE000, v69, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sFailed to prepare request", buf, 0x20u);
    }
  }
  nw_ohttp_mark_failed_with_error(a1, 22);
}

BOOL ___ZL33nw_protocol_ohttp_prepare_requestP17nw_protocol_ohttpP16nw_ohttp_context_block_invoke(_QWORD *a1, uint64_t a2)
{
  const void *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  size_t __n;

  LODWORD(__n) = 0;
  v3 = (const void *)nw_frame_unclaimed_bytes(a2, &__n);
  v4 = a1[5];
  v5 = *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24);
  v6 = v5 + __n;
  if (v6 <= v4)
  {
    memcpy((void *)(a1[6] + v5), v3, __n);
    v7 = __n;
LABEL_5:
    *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) += v7;
    return v6 <= v4;
  }
  v7 = v4 - v5;
  if (v4 != v5)
  {
    memcpy((void *)(a1[6] + v5), v3, v4 - v5);
    goto LABEL_5;
  }
  return v6 <= v4;
}

BOOL nw_http_create_oblivious_request(uint64_t a1, int a2, int a3, const unsigned __int8 *a4, unint64_t a5, uint64_t a6, unsigned __int16 *a7, uint64_t a8, size_t *a9)
{
  nw_protocol_metadata *v10;
  const char *v11;
  uint64_t v12;
  unsigned __int16 *v13;
  uint64_t v14;
  size_t v15;
  const unsigned __int8 *v16;
  size_t v18;
  unsigned __int8 *v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  _BOOL8 binary_message_length_inner;
  uint64_t v25;
  unsigned __int8 *v26;
  _BOOL8 v27;
  unint64_t indeterminate_binary_message_chunk_length;
  size_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  NSObject *v33;
  const char *v34;
  char *v35;
  _BOOL8 v36;
  _BOOL8 v37;
  unsigned __int8 *v38;
  size_t v39;
  char *v40;
  unsigned __int8 *v41;
  size_t v42;
  size_t v43;
  void *v44;
  _BOOL8 result;
  _BOOL8 v46;
  size_t v47;
  size_t v48;
  size_t v49;
  size_t v50;
  NSObject *v51;
  void *v52;
  size_t v53;
  char *v54;
  char *v55;
  char *v56;
  char *v57;
  size_t v58;
  size_t v59;
  char *v60;
  NSObject *v61;
  void *v62;
  size_t v63;
  char *v64;
  NSObject *v65;
  os_log_type_t v66;
  const char *v67;
  char *backtrace_string;
  _BOOL4 v69;
  const char *v70;
  _BOOL4 v71;
  _BOOL4 v72;
  _BOOL4 v73;
  NSObject *v74;
  void *v75;
  NSObject *v76;
  void *v77;
  _BOOL4 v78;
  _BOOL4 v79;
  _BOOL4 v80;
  NSObject *v81;
  NSObject *v82;
  void *v83;
  NSObject *v84;
  void *v85;
  _BOOL4 v86;
  NSObject *v87;
  void *v88;
  NSObject *v89;
  void *v90;
  NSObject *v91;
  _BOOL4 v92;
  NSObject *v93;
  void *v94;
  NSObject *v95;
  NSObject *v96;
  void *v97;
  NSObject *v98;
  void *v99;
  _BOOL4 v100;
  _BOOL4 v101;
  _BOOL4 v102;
  unint64_t v103;
  unsigned int v104;
  int v105;
  unsigned __int16 *v107;
  uint64_t v109;
  size_t __src;
  size_t v111;
  size_t __n;
  size_t v113;
  uint8_t buf[4];
  const char *v115;
  __int16 v116;
  uint64_t v117;
  __int16 v118;
  size_t v119;
  uint64_t v120;

  v120 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v115 = "nw_http_create_oblivious_request";
    v64 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(v113) = 16;
    LOBYTE(__n) = 0;
    if (!__nwlog_fault(v64, &v113, &__n))
      goto LABEL_312;
    if (v113 != 17)
    {
      if (!(_BYTE)__n)
      {
        v65 = __nwlog_obj();
        v66 = v113;
        if (!os_log_type_enabled(v65, (os_log_type_t)v113))
          goto LABEL_312;
        *(_DWORD *)buf = 136446210;
        v115 = "nw_http_create_oblivious_request";
        v67 = "%{public}s called with null ohttp_context, backtrace limit exceeded";
        goto LABEL_311;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v65 = __nwlog_obj();
      v66 = v113;
      v69 = os_log_type_enabled(v65, (os_log_type_t)v113);
      if (!backtrace_string)
      {
        if (!v69)
          goto LABEL_312;
        *(_DWORD *)buf = 136446210;
        v115 = "nw_http_create_oblivious_request";
        v67 = "%{public}s called with null ohttp_context, no backtrace";
        goto LABEL_311;
      }
      if (!v69)
        goto LABEL_296;
      *(_DWORD *)buf = 136446466;
      v115 = "nw_http_create_oblivious_request";
      v116 = 2082;
      v117 = (uint64_t)backtrace_string;
      v70 = "%{public}s called with null ohttp_context, dumping backtrace:%{public}s";
      goto LABEL_295;
    }
    v65 = __nwlog_obj();
    v66 = v113;
    if (!os_log_type_enabled(v65, (os_log_type_t)v113))
      goto LABEL_312;
    *(_DWORD *)buf = 136446210;
    v115 = "nw_http_create_oblivious_request";
    v67 = "%{public}s called with null ohttp_context";
LABEL_311:
    _os_log_impl(&dword_182FBE000, v65, v66, v67, buf, 0xCu);
    goto LABEL_312;
  }
  v10 = *(nw_protocol_metadata **)(a1 + 72);
  v11 = *(const char **)(a1 + 216);
  if (!((unint64_t)v11 | (unint64_t)v10))
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v115 = "nw_http_create_oblivious_request";
    v64 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(v113) = 16;
    LOBYTE(__n) = 0;
    if (!__nwlog_fault(v64, &v113, &__n))
      goto LABEL_312;
    if (v113 != 17)
    {
      if (!(_BYTE)__n)
      {
        v65 = __nwlog_obj();
        v66 = v113;
        if (!os_log_type_enabled(v65, (os_log_type_t)v113))
          goto LABEL_312;
        *(_DWORD *)buf = 136446210;
        v115 = "nw_http_create_oblivious_request";
        v67 = "%{public}s called with null metadata, backtrace limit exceeded";
        goto LABEL_311;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v65 = __nwlog_obj();
      v66 = v113;
      v78 = os_log_type_enabled(v65, (os_log_type_t)v113);
      if (!backtrace_string)
      {
        if (!v78)
          goto LABEL_312;
        *(_DWORD *)buf = 136446210;
        v115 = "nw_http_create_oblivious_request";
        v67 = "%{public}s called with null metadata, no backtrace";
        goto LABEL_311;
      }
      if (!v78)
        goto LABEL_296;
      *(_DWORD *)buf = 136446466;
      v115 = "nw_http_create_oblivious_request";
      v116 = 2082;
      v117 = (uint64_t)backtrace_string;
      v70 = "%{public}s called with null metadata, dumping backtrace:%{public}s";
      goto LABEL_295;
    }
    v65 = __nwlog_obj();
    v66 = v113;
    if (!os_log_type_enabled(v65, (os_log_type_t)v113))
      goto LABEL_312;
    *(_DWORD *)buf = 136446210;
    v115 = "nw_http_create_oblivious_request";
    v67 = "%{public}s called with null metadata";
    goto LABEL_311;
  }
  v12 = a8;
  v13 = a7;
  v14 = a6;
  v15 = a5;
  v16 = a4;
  v18 = *(_QWORD *)a1;
  if ((a2 & 1) == 0 && (a6 & 1) == 0)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v115 = "nw_http_create_oblivious_request";
    v64 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(v113) = 16;
    LOBYTE(__n) = 0;
    if (!__nwlog_fault(v64, &v113, &__n))
      goto LABEL_312;
    if (v113 != 17)
    {
      if (!(_BYTE)__n)
      {
        v65 = __nwlog_obj();
        v66 = v113;
        if (!os_log_type_enabled(v65, (os_log_type_t)v113))
          goto LABEL_312;
        *(_DWORD *)buf = 136446210;
        v115 = "nw_http_create_oblivious_request";
        v67 = "%{public}s called with null is_complete, backtrace limit exceeded";
        goto LABEL_311;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v65 = __nwlog_obj();
      v66 = v113;
      v79 = os_log_type_enabled(v65, (os_log_type_t)v113);
      if (!backtrace_string)
      {
        if (!v79)
          goto LABEL_312;
        *(_DWORD *)buf = 136446210;
        v115 = "nw_http_create_oblivious_request";
        v67 = "%{public}s called with null is_complete, no backtrace";
        goto LABEL_311;
      }
      if (!v79)
        goto LABEL_296;
      *(_DWORD *)buf = 136446466;
      v115 = "nw_http_create_oblivious_request";
      v116 = 2082;
      v117 = (uint64_t)backtrace_string;
      v70 = "%{public}s called with null is_complete, dumping backtrace:%{public}s";
      goto LABEL_295;
    }
    v65 = __nwlog_obj();
    v66 = v113;
    if (!os_log_type_enabled(v65, (os_log_type_t)v113))
      goto LABEL_312;
    *(_DWORD *)buf = 136446210;
    v115 = "nw_http_create_oblivious_request";
    v67 = "%{public}s called with null is_complete";
    goto LABEL_311;
  }
  if (!a7)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v115 = "nw_http_create_oblivious_request";
    v64 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(v113) = 16;
    LOBYTE(__n) = 0;
    if (!__nwlog_fault(v64, &v113, &__n))
      goto LABEL_312;
    if (v113 != 17)
    {
      if (!(_BYTE)__n)
      {
        v65 = __nwlog_obj();
        v66 = v113;
        if (!os_log_type_enabled(v65, (os_log_type_t)v113))
          goto LABEL_312;
        *(_DWORD *)buf = 136446210;
        v115 = "nw_http_create_oblivious_request";
        v67 = "%{public}s called with null oblivious_config_buffer, backtrace limit exceeded";
        goto LABEL_311;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v65 = __nwlog_obj();
      v66 = v113;
      v71 = os_log_type_enabled(v65, (os_log_type_t)v113);
      if (!backtrace_string)
      {
        if (!v71)
          goto LABEL_312;
        *(_DWORD *)buf = 136446210;
        v115 = "nw_http_create_oblivious_request";
        v67 = "%{public}s called with null oblivious_config_buffer, no backtrace";
        goto LABEL_311;
      }
      if (!v71)
        goto LABEL_296;
      *(_DWORD *)buf = 136446466;
      v115 = "nw_http_create_oblivious_request";
      v116 = 2082;
      v117 = (uint64_t)backtrace_string;
      v70 = "%{public}s called with null oblivious_config_buffer, dumping backtrace:%{public}s";
      goto LABEL_295;
    }
    v65 = __nwlog_obj();
    v66 = v113;
    if (!os_log_type_enabled(v65, (os_log_type_t)v113))
      goto LABEL_312;
    *(_DWORD *)buf = 136446210;
    v115 = "nw_http_create_oblivious_request";
    v67 = "%{public}s called with null oblivious_config_buffer";
    goto LABEL_311;
  }
  if (!a8)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v115 = "nw_http_create_oblivious_request";
    v64 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(v113) = 16;
    LOBYTE(__n) = 0;
    if (!__nwlog_fault(v64, &v113, &__n))
      goto LABEL_312;
    if (v113 != 17)
    {
      if (!(_BYTE)__n)
      {
        v65 = __nwlog_obj();
        v66 = v113;
        if (!os_log_type_enabled(v65, (os_log_type_t)v113))
          goto LABEL_312;
        *(_DWORD *)buf = 136446210;
        v115 = "nw_http_create_oblivious_request";
        v67 = "%{public}s called with null oblivious_config_length, backtrace limit exceeded";
        goto LABEL_311;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v65 = __nwlog_obj();
      v66 = v113;
      v72 = os_log_type_enabled(v65, (os_log_type_t)v113);
      if (!backtrace_string)
      {
        if (!v72)
          goto LABEL_312;
        *(_DWORD *)buf = 136446210;
        v115 = "nw_http_create_oblivious_request";
        v67 = "%{public}s called with null oblivious_config_length, no backtrace";
        goto LABEL_311;
      }
      if (!v72)
        goto LABEL_296;
      *(_DWORD *)buf = 136446466;
      v115 = "nw_http_create_oblivious_request";
      v116 = 2082;
      v117 = (uint64_t)backtrace_string;
      v70 = "%{public}s called with null oblivious_config_length, dumping backtrace:%{public}s";
      goto LABEL_295;
    }
    v65 = __nwlog_obj();
    v66 = v113;
    if (!os_log_type_enabled(v65, (os_log_type_t)v113))
      goto LABEL_312;
    *(_DWORD *)buf = 136446210;
    v115 = "nw_http_create_oblivious_request";
    v67 = "%{public}s called with null oblivious_config_length";
    goto LABEL_311;
  }
  if (!a9)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v115 = "nw_http_create_oblivious_request";
    v64 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(v113) = 16;
    LOBYTE(__n) = 0;
    if (!__nwlog_fault(v64, &v113, &__n))
      goto LABEL_312;
    if (v113 != 17)
    {
      if (!(_BYTE)__n)
      {
        v65 = __nwlog_obj();
        v66 = v113;
        if (!os_log_type_enabled(v65, (os_log_type_t)v113))
          goto LABEL_312;
        *(_DWORD *)buf = 136446210;
        v115 = "nw_http_create_oblivious_request";
        v67 = "%{public}s called with null out_message_length, backtrace limit exceeded";
        goto LABEL_311;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v65 = __nwlog_obj();
      v66 = v113;
      v73 = os_log_type_enabled(v65, (os_log_type_t)v113);
      if (!backtrace_string)
      {
        if (!v73)
          goto LABEL_312;
        *(_DWORD *)buf = 136446210;
        v115 = "nw_http_create_oblivious_request";
        v67 = "%{public}s called with null out_message_length, no backtrace";
        goto LABEL_311;
      }
      if (!v73)
        goto LABEL_296;
      *(_DWORD *)buf = 136446466;
      v115 = "nw_http_create_oblivious_request";
      v116 = 2082;
      v117 = (uint64_t)backtrace_string;
      v70 = "%{public}s called with null out_message_length, dumping backtrace:%{public}s";
      goto LABEL_295;
    }
    v65 = __nwlog_obj();
    v66 = v113;
    if (!os_log_type_enabled(v65, (os_log_type_t)v113))
      goto LABEL_312;
    *(_DWORD *)buf = 136446210;
    v115 = "nw_http_create_oblivious_request";
    v67 = "%{public}s called with null out_message_length";
    goto LABEL_311;
  }
  if (!a4 && a5)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v115 = "nw_http_create_oblivious_request";
    v64 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(v113) = 16;
    LOBYTE(__n) = 0;
    if (!__nwlog_fault(v64, &v113, &__n))
      goto LABEL_312;
    if (v113 == 17)
    {
      v65 = __nwlog_obj();
      v66 = v113;
      if (!os_log_type_enabled(v65, (os_log_type_t)v113))
        goto LABEL_312;
      *(_DWORD *)buf = 136446210;
      v115 = "nw_http_create_oblivious_request";
      v67 = "%{public}s called with null body_content";
      goto LABEL_311;
    }
    if (!(_BYTE)__n)
    {
      v65 = __nwlog_obj();
      v66 = v113;
      if (!os_log_type_enabled(v65, (os_log_type_t)v113))
        goto LABEL_312;
      *(_DWORD *)buf = 136446210;
      v115 = "nw_http_create_oblivious_request";
      v67 = "%{public}s called with null body_content, backtrace limit exceeded";
      goto LABEL_311;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v65 = __nwlog_obj();
    v66 = v113;
    v80 = os_log_type_enabled(v65, (os_log_type_t)v113);
    if (!backtrace_string)
    {
      if (!v80)
        goto LABEL_312;
      *(_DWORD *)buf = 136446210;
      v115 = "nw_http_create_oblivious_request";
      v67 = "%{public}s called with null body_content, no backtrace";
      goto LABEL_311;
    }
    if (!v80)
      goto LABEL_296;
    *(_DWORD *)buf = 136446466;
    v115 = "nw_http_create_oblivious_request";
    v116 = 2082;
    v117 = (uint64_t)backtrace_string;
    v70 = "%{public}s called with null body_content, dumping backtrace:%{public}s";
LABEL_295:
    _os_log_impl(&dword_182FBE000, v65, v66, v70, buf, 0x16u);
    goto LABEL_296;
  }
  if (v11)
  {
    v19 = 0;
    v20 = 0;
    if (a5 || (a2 & 1) != 0)
    {
      if (!a2)
        goto LABEL_55;
      goto LABEL_14;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v115 = "nw_http_create_oblivious_request";
    v64 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(v113) = 16;
    LOBYTE(__n) = 0;
    if (!__nwlog_fault(v64, &v113, &__n))
    {
LABEL_312:
      if (v64)
        free(v64);
      return 0;
    }
    if (v113 == 17)
    {
      v65 = __nwlog_obj();
      v66 = v113;
      if (!os_log_type_enabled(v65, (os_log_type_t)v113))
        goto LABEL_312;
      *(_DWORD *)buf = 136446210;
      v115 = "nw_http_create_oblivious_request";
      v67 = "%{public}s called with null body_length";
      goto LABEL_311;
    }
    if (!(_BYTE)__n)
    {
      v65 = __nwlog_obj();
      v66 = v113;
      if (!os_log_type_enabled(v65, (os_log_type_t)v113))
        goto LABEL_312;
      *(_DWORD *)buf = 136446210;
      v115 = "nw_http_create_oblivious_request";
      v67 = "%{public}s called with null body_length, backtrace limit exceeded";
      goto LABEL_311;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v65 = __nwlog_obj();
    v66 = v113;
    v86 = os_log_type_enabled(v65, (os_log_type_t)v113);
    if (!backtrace_string)
    {
      if (!v86)
        goto LABEL_312;
      *(_DWORD *)buf = 136446210;
      v115 = "nw_http_create_oblivious_request";
      v67 = "%{public}s called with null body_length, no backtrace";
      goto LABEL_311;
    }
    if (v86)
    {
      *(_DWORD *)buf = 136446466;
      v115 = "nw_http_create_oblivious_request";
      v116 = 2082;
      v117 = (uint64_t)backtrace_string;
      v70 = "%{public}s called with null body_length, dumping backtrace:%{public}s";
      goto LABEL_295;
    }
LABEL_296:
    free(backtrace_string);
    goto LABEL_312;
  }
  v23 = *(_QWORD *)(a1 + 112);
  v105 = a3;
  if (!v23 && (_DWORD)a6)
  {
    v104 = a6;
    binary_message_length_inner = nw_http_get_binary_message_length_inner(v10, 0, a5);
    if (binary_message_length_inner)
    {
      v25 = binary_message_length_inner;
      if (gLogDatapath)
      {
        v81 = __nwlog_obj();
        if (os_log_type_enabled(v81, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136446466;
          v115 = "nw_http_create_oblivious_request";
          v116 = 2048;
          v117 = v25;
          _os_log_impl(&dword_182FBE000, v81, OS_LOG_TYPE_DEBUG, "%{public}s Creating binary request with length %zu", buf, 0x16u);
        }
      }
      v20 = arc4random_uniform(0x10u);
      if (!(v25 + v20))
      {
        v82 = __nwlog_obj();
        os_log_type_enabled(v82, OS_LOG_TYPE_ERROR);
        *(_DWORD *)buf = 136446210;
        v115 = "strict_calloc";
        v83 = (void *)_os_log_send_and_compose_impl();
        result = __nwlog_abort((uint64_t)v83);
        if (result)
          goto LABEL_316;
        free(v83);
      }
      v26 = (unsigned __int8 *)malloc_type_calloc(1uLL, v25 + v20, 0xEAFB8F1AuLL);
      if (v26)
      {
        v19 = v26;
        if (nw_http_fillout_binary_message_inner(v10, 0, v16, v15, v26, v25))
        {
          v11 = "message/bhttp";
          v16 = v19;
          v15 = v25;
LABEL_37:
          v14 = v104;
          goto LABEL_54;
        }
        free(v19);
LABEL_45:
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v33 = gLogObj;
        if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
          return 0;
        *(_DWORD *)buf = 136446210;
        v115 = "nw_http_create_oblivious_request";
        v34 = "%{public}s Failed to fill out binary message";
        goto LABEL_131;
      }
      v84 = __nwlog_obj();
      os_log_type_enabled(v84, OS_LOG_TYPE_ERROR);
      *(_DWORD *)buf = 136446722;
      v115 = "strict_calloc";
      v116 = 2048;
      v117 = 1;
      v118 = 2048;
      v119 = v25 + v20;
      v85 = (void *)_os_log_send_and_compose_impl();
      result = __nwlog_abort((uint64_t)v85);
      if (result)
        goto LABEL_316;
      free(v85);
      if (!nw_http_fillout_binary_message_inner(v10, 0, v16, v15, 0, v25))
        goto LABEL_45;
      v19 = 0;
      v16 = 0;
      v15 = v25;
LABEL_36:
      v11 = "message/bhttp";
      goto LABEL_37;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v115 = "nw_http_create_oblivious_request";
    v64 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(v113) = 16;
    LOBYTE(__n) = 0;
    if (!__nwlog_fault(v64, &v113, &__n))
      goto LABEL_312;
    if (v113 == 17)
    {
      v65 = __nwlog_obj();
      v66 = v113;
      if (!os_log_type_enabled(v65, (os_log_type_t)v113))
        goto LABEL_312;
      *(_DWORD *)buf = 136446210;
      v115 = "nw_http_create_oblivious_request";
      v67 = "%{public}s called with null encoded_body_length";
      goto LABEL_311;
    }
    if (!(_BYTE)__n)
    {
      v65 = __nwlog_obj();
      v66 = v113;
      if (!os_log_type_enabled(v65, (os_log_type_t)v113))
        goto LABEL_312;
      *(_DWORD *)buf = 136446210;
      v115 = "nw_http_create_oblivious_request";
      v67 = "%{public}s called with null encoded_body_length, backtrace limit exceeded";
      goto LABEL_311;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v65 = __nwlog_obj();
    v66 = v113;
    v100 = os_log_type_enabled(v65, (os_log_type_t)v113);
    if (!backtrace_string)
    {
      if (!v100)
        goto LABEL_312;
      *(_DWORD *)buf = 136446210;
      v115 = "nw_http_create_oblivious_request";
      v67 = "%{public}s called with null encoded_body_length, no backtrace";
      goto LABEL_311;
    }
    if (!v100)
      goto LABEL_296;
LABEL_294:
    *(_DWORD *)buf = 136446466;
    v115 = "nw_http_create_oblivious_request";
    v116 = 2082;
    v117 = (uint64_t)backtrace_string;
    v70 = "%{public}s called with null encoded_body_length, dumping backtrace:%{public}s";
    goto LABEL_295;
  }
  if (!v23 && (a6 & 1) == 0)
  {
    v104 = a6;
    v27 = nw_http_get_binary_message_length_inner(v10, 1, 0);
    indeterminate_binary_message_chunk_length = nw_http_get_indeterminate_binary_message_chunk_length(v15, 0, 0);
    v29 = indeterminate_binary_message_chunk_length + v27;
    if (!(indeterminate_binary_message_chunk_length + v27))
    {
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      v115 = "nw_http_create_oblivious_request";
      v64 = (char *)_os_log_send_and_compose_impl();
      LOBYTE(v113) = 16;
      LOBYTE(__n) = 0;
      if (!__nwlog_fault(v64, &v113, &__n))
        goto LABEL_312;
      if (v113 == 17)
      {
        v65 = __nwlog_obj();
        v66 = v113;
        if (!os_log_type_enabled(v65, (os_log_type_t)v113))
          goto LABEL_312;
        *(_DWORD *)buf = 136446210;
        v115 = "nw_http_create_oblivious_request";
        v67 = "%{public}s called with null encoded_body_length";
        goto LABEL_311;
      }
      if (!(_BYTE)__n)
      {
        v65 = __nwlog_obj();
        v66 = v113;
        if (!os_log_type_enabled(v65, (os_log_type_t)v113))
          goto LABEL_312;
        *(_DWORD *)buf = 136446210;
        v115 = "nw_http_create_oblivious_request";
        v67 = "%{public}s called with null encoded_body_length, backtrace limit exceeded";
        goto LABEL_311;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v65 = __nwlog_obj();
      v66 = v113;
      v101 = os_log_type_enabled(v65, (os_log_type_t)v113);
      if (!backtrace_string)
      {
        if (!v101)
          goto LABEL_312;
        *(_DWORD *)buf = 136446210;
        v115 = "nw_http_create_oblivious_request";
        v67 = "%{public}s called with null encoded_body_length, no backtrace";
        goto LABEL_311;
      }
      if (!v101)
        goto LABEL_296;
      goto LABEL_294;
    }
    v30 = indeterminate_binary_message_chunk_length;
    v103 = indeterminate_binary_message_chunk_length + v27;
    if (gLogDatapath)
    {
      v91 = __nwlog_obj();
      v92 = os_log_type_enabled(v91, OS_LOG_TYPE_DEBUG);
      v29 = v103;
      if (v92)
      {
        *(_DWORD *)buf = 136446466;
        v115 = "nw_http_create_oblivious_request";
        v116 = 2048;
        v117 = v103;
        _os_log_impl(&dword_182FBE000, v91, OS_LOG_TYPE_DEBUG, "%{public}s Creating partial binary request with length %zu", buf, 0x16u);
        v29 = v103;
      }
    }
    v19 = (unsigned __int8 *)malloc_type_calloc(1uLL, v29, 0xEAFB8F1AuLL);
    if (v19)
    {
      if (nw_http_fillout_binary_message_inner(v10, 1, 0, 0, v19, v27))
      {
LABEL_33:
        if (v30 && !nw_http_fillout_indeterminate_binary_message_body_chunk(v16, v15, 0, 0, (char *)&v19[v27], v30))
        {
          if (v19)
            free(v19);
          v33 = __nwlog_obj();
          if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446210;
            v115 = "nw_http_create_oblivious_request";
            v34 = "%{public}s Failed to fill out binary message chunk";
            goto LABEL_131;
          }
          return 0;
        }
        v20 = 0;
        v16 = v19;
        v15 = v103;
        goto LABEL_36;
      }
      free(v19);
    }
    else
    {
      v93 = __nwlog_obj();
      os_log_type_enabled(v93, OS_LOG_TYPE_ERROR);
      *(_DWORD *)buf = 136446722;
      v115 = "strict_calloc";
      v116 = 2048;
      v117 = 1;
      v118 = 2048;
      v119 = v103;
      v94 = (void *)_os_log_send_and_compose_impl();
      result = __nwlog_abort((uint64_t)v94);
      if (result)
        goto LABEL_316;
      free(v94);
      if (nw_http_fillout_binary_message_inner(v10, 1, 0, 0, 0, v27))
        goto LABEL_33;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v33 = gLogObj;
    if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      return 0;
    *(_DWORD *)buf = 136446210;
    v115 = "nw_http_create_oblivious_request";
    v34 = "%{public}s Failed to fill out binary message header";
    goto LABEL_131;
  }
  v31 = nw_http_get_indeterminate_binary_message_chunk_length(a5, a6, 0);
  if (!v31)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v115 = "nw_http_create_oblivious_request";
    v64 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(v113) = 16;
    LOBYTE(__n) = 0;
    if (!__nwlog_fault(v64, &v113, &__n))
      goto LABEL_312;
    if (v113 == 17)
    {
      v65 = __nwlog_obj();
      v66 = v113;
      if (!os_log_type_enabled(v65, (os_log_type_t)v113))
        goto LABEL_312;
      *(_DWORD *)buf = 136446210;
      v115 = "nw_http_create_oblivious_request";
      v67 = "%{public}s called with null encoded_body_length";
      goto LABEL_311;
    }
    if (!(_BYTE)__n)
    {
      v65 = __nwlog_obj();
      v66 = v113;
      if (!os_log_type_enabled(v65, (os_log_type_t)v113))
        goto LABEL_312;
      *(_DWORD *)buf = 136446210;
      v115 = "nw_http_create_oblivious_request";
      v67 = "%{public}s called with null encoded_body_length, backtrace limit exceeded";
      goto LABEL_311;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v65 = __nwlog_obj();
    v66 = v113;
    v102 = os_log_type_enabled(v65, (os_log_type_t)v113);
    if (!backtrace_string)
    {
      if (!v102)
        goto LABEL_312;
      *(_DWORD *)buf = 136446210;
      v115 = "nw_http_create_oblivious_request";
      v67 = "%{public}s called with null encoded_body_length, no backtrace";
      goto LABEL_311;
    }
    if (!v102)
      goto LABEL_296;
    goto LABEL_294;
  }
  v32 = v31;
  if (gLogDatapath)
  {
    v95 = __nwlog_obj();
    if (os_log_type_enabled(v95, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446466;
      v115 = "nw_http_create_oblivious_request";
      v116 = 2048;
      v117 = v32;
      _os_log_impl(&dword_182FBE000, v95, OS_LOG_TYPE_DEBUG, "%{public}s Creating partial binary request with length %zu", buf, 0x16u);
    }
  }
  if ((_DWORD)v14)
    v20 = arc4random_uniform(0x10u);
  else
    v20 = 0;
  if (!(v20 + v32))
  {
    v96 = __nwlog_obj();
    os_log_type_enabled(v96, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    v115 = "strict_calloc";
    v97 = (void *)_os_log_send_and_compose_impl();
    result = __nwlog_abort((uint64_t)v97);
    if (result)
      goto LABEL_316;
    free(v97);
  }
  v35 = (char *)malloc_type_calloc(1uLL, v20 + v32, 0xEAFB8F1AuLL);
  if (v35)
  {
    v19 = (unsigned __int8 *)v35;
    if (nw_http_fillout_indeterminate_binary_message_body_chunk(v16, v15, v14, 0, v35, v32))
    {
      v11 = "message/bhttp";
      v16 = v19;
      v15 = v32;
      goto LABEL_54;
    }
    free(v19);
LABEL_75:
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v33 = gLogObj;
    if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      return 0;
    *(_DWORD *)buf = 136446210;
    v115 = "nw_http_create_oblivious_request";
    v34 = "%{public}s Failed to fill out binary message chunk";
    goto LABEL_131;
  }
  v98 = __nwlog_obj();
  os_log_type_enabled(v98, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  v115 = "strict_calloc";
  v116 = 2048;
  v117 = 1;
  v118 = 2048;
  v119 = v20 + v32;
  v99 = (void *)_os_log_send_and_compose_impl();
  result = __nwlog_abort((uint64_t)v99);
  if (result)
    goto LABEL_316;
  free(v99);
  if (!nw_http_fillout_indeterminate_binary_message_body_chunk(v16, v15, v14, 0, 0, v32))
    goto LABEL_75;
  v19 = 0;
  v16 = 0;
  v15 = v32;
  v11 = "message/bhttp";
LABEL_54:
  v13 = a7;
  v12 = a8;
  a3 = v105;
  if (!a2)
  {
LABEL_55:
    if (!a2)
    {
      v40 = (char *)nw_http_encrypt_oblivious_request(v16, v20 + v15, v11, v13, v12, (char **)(a1 + 112), (_QWORD *)(a1 + 120), (_QWORD *)(a1 + 96), (size_t *)(a1 + 104), a9);
      if (v19)
      {
        v41 = v19;
LABEL_147:
        free(v41);
      }
      return (BOOL)v40;
    }
    v36 = 0;
    v113 = 0;
    if (*(_QWORD *)(a1 + 112)
      || (v36 = nw_http_encrypt_chunked_oblivious_request_header(v11, v13, v12, (char **)(a1 + 112), (_QWORD *)(a1 + 120), (_QWORD *)(a1 + 96), (size_t *)(a1 + 104), &v113)))
    {
      __n = 0;
      if (!v15)
      {
        v39 = 0;
        v38 = 0;
LABEL_64:
        if ((_DWORD)v14)
          v42 = 0;
        else
          v42 = v39;
        v111 = 0;
        if (v42 > 0x3F)
        {
          if (v42 >> 14)
          {
            if (v42 >> 30)
            {
              if (v42 >> 62)
              {
                v61 = __nwlog_obj();
                os_log_type_enabled(v61, OS_LOG_TYPE_ERROR);
                *(_DWORD *)buf = 136446466;
                v115 = "_http_vle_encode";
                v116 = 2048;
                v117 = v42;
                v62 = (void *)_os_log_send_and_compose_impl();
                result = __nwlog_abort((uint64_t)v62);
                if (result)
                  goto LABEL_316;
                free(v62);
                v43 = 0;
                v39 = __n;
              }
              else
              {
                v111 = bswap64(v42 | 0xC000000000000000);
                v43 = 8;
              }
            }
            else
            {
              v111 = bswap32(v42 | 0x80000000);
              v43 = 4;
            }
          }
          else
          {
            v111 = bswap32(v42 | 0x4000) >> 16;
            v43 = 2;
          }
        }
        else
        {
          v111 = v42;
          v43 = 1;
        }
        v63 = v113 + v43 + v39;
        *a9 = v63;
        if (!v63)
        {
          v87 = __nwlog_obj();
          os_log_type_enabled(v87, OS_LOG_TYPE_ERROR);
          *(_DWORD *)buf = 136446210;
          v115 = "strict_calloc";
          v88 = (void *)_os_log_send_and_compose_impl();
          result = __nwlog_abort((uint64_t)v88);
          if (result)
            goto LABEL_316;
          free(v88);
        }
        v40 = (char *)malloc_type_calloc(1uLL, v63, 0xEAFB8F1AuLL);
        if (v40)
        {
          if (v36)
LABEL_137:
            memcpy(v40, (const void *)v36, v113);
        }
        else
        {
          v89 = __nwlog_obj();
          os_log_type_enabled(v89, OS_LOG_TYPE_ERROR);
          *(_DWORD *)buf = 136446722;
          v115 = "strict_calloc";
          v116 = 2048;
          v117 = 1;
          v118 = 2048;
          v119 = v63;
          v90 = (void *)_os_log_send_and_compose_impl();
          result = __nwlog_abort((uint64_t)v90);
          if (result)
            goto LABEL_316;
          free(v90);
          if (v36)
            goto LABEL_137;
        }
        memcpy(&v40[v113], &v111, v43);
        v59 = __n;
        if (!__n)
        {
LABEL_141:
          if (v19)
            free(v19);
          if (v36)
            free((void *)v36);
          if (!v38)
            return (BOOL)v40;
          v41 = v38;
          goto LABEL_147;
        }
        v60 = &v40[v113 + v43];
LABEL_140:
        memcpy(v60, v38, v59);
        goto LABEL_141;
      }
      v37 = nw_http_encrypt_chunked_oblivious_request_chunk(v16, v20 + v15, v14, *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), &__n);
      if (v37)
      {
        v38 = (unsigned __int8 *)v37;
        v39 = __n;
        goto LABEL_64;
      }
      if (v19)
        free(v19);
      if (v36)
        free((void *)v36);
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v33 = gLogObj;
      if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
        return 0;
      *(_DWORD *)buf = 136446210;
      v115 = "nw_http_create_oblivious_request";
      v34 = "%{public}s Failed to fill out OHTTP chunk";
    }
    else
    {
      if (v19)
        free(v19);
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v33 = gLogObj;
      if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
        return 0;
      *(_DWORD *)buf = 136446210;
      v115 = "nw_http_create_oblivious_request";
      v34 = "%{public}s Failed to fill out OHTTP header";
    }
LABEL_131:
    _os_log_impl(&dword_182FBE000, v33, OS_LOG_TYPE_ERROR, v34, buf, 0xCu);
    return 0;
  }
LABEL_14:
  if (!a3)
    goto LABEL_55;
  v113 = 0;
  if (v18 > 0x3F)
  {
    if (v18 >> 14)
    {
      if (v18 >> 30)
      {
        if (v18 >> 62)
        {
          v107 = v13;
          v109 = v12;
          v21 = v14;
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
          *(_DWORD *)buf = 136446466;
          v115 = "_http_vle_encode";
          v116 = 2048;
          v117 = v18;
          v44 = (void *)_os_log_send_and_compose_impl();
          result = __nwlog_abort((uint64_t)v44);
          if (result)
            goto LABEL_316;
          free(v44);
          v22 = 0;
          v13 = v107;
          v12 = v109;
        }
        else
        {
          v21 = v14;
          v113 = bswap64(v18 | 0xC000000000000000);
          v22 = 8;
        }
      }
      else
      {
        v21 = v14;
        v113 = bswap32(v18 | 0x80000000);
        v22 = 4;
      }
    }
    else
    {
      v21 = v14;
      v113 = bswap32(v18 | 0x4000) >> 16;
      v22 = 2;
    }
  }
  else
  {
    v21 = v14;
    v113 = v18;
    v22 = 1;
  }
  v36 = 0;
  __n = 0;
  if (!*(_QWORD *)(a1 + 112))
  {
    v36 = nw_http_encrypt_chunked_oblivious_request_header(v11, v13, v12, (char **)(a1 + 112), (_QWORD *)(a1 + 120), (_QWORD *)(a1 + 96), (size_t *)(a1 + 104), &__n);
    if (!v36)
    {
      if (v19)
        free(v19);
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v33 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446210;
        v115 = "nw_http_create_oblivious_request";
        v34 = "%{public}s Failed to fill out OHTTP header";
        goto LABEL_131;
      }
      return 0;
    }
  }
  v111 = 0;
  if (!v15)
  {
    v47 = 0;
    v38 = 0;
    goto LABEL_97;
  }
  v46 = nw_http_encrypt_chunked_oblivious_request_chunk(v16, v20 + v15, v21, *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), &v111);
  if (!v46)
  {
    if (v19)
      free(v19);
    if (v36)
      free((void *)v36);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v33 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      v115 = "nw_http_create_oblivious_request";
      v34 = "%{public}s Failed to fill out OHTTP chunk";
      goto LABEL_131;
    }
    return 0;
  }
  v38 = (unsigned __int8 *)v46;
  v47 = v111;
LABEL_97:
  v48 = __n;
  v49 = __n + v22 + v47;
  __src = 0;
  if (v49 > 0x3F)
  {
    if (v49 >> 14)
    {
      if (v49 >> 30)
      {
        if (v49 >> 62)
        {
          v51 = __nwlog_obj();
          os_log_type_enabled(v51, OS_LOG_TYPE_ERROR);
          *(_DWORD *)buf = 136446466;
          v115 = "_http_vle_encode";
          v116 = 2048;
          v117 = v49;
          v52 = (void *)_os_log_send_and_compose_impl();
          result = __nwlog_abort((uint64_t)v52);
          if (result)
            goto LABEL_316;
          free(v52);
          v50 = 0;
          v47 = v111;
          v48 = __n;
        }
        else
        {
          __src = bswap64(v49 | 0xC000000000000000);
          v50 = 8;
        }
      }
      else
      {
        __src = bswap32(v49 | 0x80000000);
        v50 = 4;
      }
    }
    else
    {
      __src = bswap32(v49 | 0x4000) >> 16;
      v50 = 2;
    }
  }
  else
  {
    __src = __n + v22 + v47;
    v50 = 1;
  }
  v53 = v22 + v21 + v47 + v50 + v48;
  *a9 = v53;
  if (!v53)
  {
    v74 = __nwlog_obj();
    os_log_type_enabled(v74, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    v115 = "strict_calloc";
    v75 = (void *)_os_log_send_and_compose_impl();
    result = __nwlog_abort((uint64_t)v75);
    if (result)
      goto LABEL_316;
    free(v75);
  }
  v54 = (char *)malloc_type_calloc(1uLL, v53, 0xEAFB8F1AuLL);
  v40 = v54;
  if (v54)
  {
    v55 = v54;
    if (!(_DWORD)v21)
    {
LABEL_123:
      memcpy(v55, &__src, v50);
      v56 = &v55[v50];
      memcpy(v56, &v113, v22);
      v57 = &v56[v22];
      if (v36)
      {
        v58 = __n;
        memcpy(v57, (const void *)v36, __n);
        v57 += v58;
      }
      v59 = v111;
      if (!v111)
        goto LABEL_141;
      v60 = v57;
      goto LABEL_140;
    }
LABEL_122:
    *v40 = 0;
    v55 = v40 + 1;
    goto LABEL_123;
  }
  v76 = __nwlog_obj();
  os_log_type_enabled(v76, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  v115 = "strict_calloc";
  v116 = 2048;
  v117 = 1;
  v118 = 2048;
  v119 = v53;
  v77 = (void *)_os_log_send_and_compose_impl();
  result = __nwlog_abort((uint64_t)v77);
  if (!result)
  {
    free(v77);
    v55 = 0;
    if (!(_DWORD)v21)
      goto LABEL_123;
    goto LABEL_122;
  }
LABEL_316:
  __break(1u);
  return result;
}

BOOL ___ZL33nw_protocol_ohttp_prepare_requestP17nw_protocol_ohttpP16nw_ohttp_context_block_invoke_34(_QWORD *a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  _QWORD *v11;
  void *buffer;
  _BOOL8 result;

  v4 = nw_frame_unclaimed_length((_DWORD *)a2);
  v6 = a1[5];
  v7 = *(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24);
  v8 = (v7 + v4);
  if (v6 < v8)
  {
    v9 = v6 - v7;
    nw_frame_claim(a2, v5, v6 - v7, 0);
  }
  else
  {
    v9 = v4;
    v10 = *(_QWORD *)(a2 + 16);
    v11 = *(_QWORD **)(a2 + 24);
    if (v10)
    {
      *(_QWORD *)(v10 + 24) = v11;
      v11 = *(_QWORD **)(a2 + 24);
    }
    else
    {
      *(_QWORD *)(a1[6] + 32) = v11;
    }
    *v11 = v10;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    buffer = (void *)nw_frame_get_buffer(a2, 0);
    if (buffer)
      free(buffer);
    os_release((void *)a2);
  }
  result = v6 >= v8;
  *(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24) += v9;
  return result;
}

uint64_t ___ZL33nw_protocol_ohttp_prepare_requestP17nw_protocol_ohttpP16nw_ohttp_context_block_invoke_2(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  _QWORD *v4;
  void *buffer;

  v3 = a2[2];
  v4 = (_QWORD *)a2[3];
  if (v3)
  {
    *(_QWORD *)(v3 + 24) = v4;
    v4 = (_QWORD *)a2[3];
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32) = v4;
  }
  *v4 = v3;
  a2[2] = 0;
  a2[3] = 0;
  buffer = (void *)nw_frame_get_buffer((uint64_t)a2, 0);
  if (buffer)
    free(buffer);
  os_release(a2);
  return 1;
}

uint64_t ___ZL31nw_protocol_ohttp_read_responseP17nw_protocol_ohttp_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  int is_metadata_complete;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  const char *v14;
  BOOL v15;
  const char *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  BOOL v21;
  const char *v22;
  id v23;
  void *v24;
  id v25;
  id v26;
  int status_code;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  uint64_t v31;
  const char *v32;
  BOOL v33;
  const char *v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  BOOL v39;
  const char *v40;
  uint64_t v41;
  char *v42;
  NSObject *v44;
  _BOOL4 v45;
  const char *v46;
  const char *v47;
  int v48;
  const char *v49;
  NSObject *v50;
  _BOOL4 v51;
  BOOL v52;
  const char *v53;
  const char *v54;
  char *v55;
  NSObject *v56;
  os_log_type_t v57;
  const char *v58;
  char *backtrace_string;
  _BOOL4 v60;
  char v61;
  os_log_type_t type;
  _BYTE buf[24];
  const char *v64;
  uint64_t v65;
  const char *v66;
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD **)(a2 + 40);
  v6 = (_QWORD *)(a2 + 32);
  if (v4)
  {
    *(_QWORD *)(v4 + 40) = v5;
    v5 = *(_QWORD **)(a2 + 40);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) = v5;
  }
  *v5 = v4;
  *v6 = 0;
  *(_QWORD *)(a2 + 40) = 0;
  v7 = *(_QWORD *)(a1 + 40);
  if ((*(_BYTE *)(v7 + 348) & 0x10) == 0)
  {
    if (*(_QWORD *)(v7 + 312))
      goto LABEL_6;
    if (nw_protocol_copy_http_definition_onceToken != -1)
      dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_11_72660);
    v23 = (id)nw_protocol_copy_http_definition_http_definition;
    v24 = nw_frame_copy_metadata_for_protocol(a2, (uint64_t)v23);
    if (v23)
      os_release(v23);
    if (v24)
    {
      v25 = nw_http_metadata_copy_response(v24);
      if (v25)
      {
        v26 = v25;
        status_code = _nw_http_response_get_status_code();

        v28 = *(_QWORD *)(a1 + 40);
        if (!v28 || (*(_BYTE *)(v28 + 348) & 1) == 0)
        {
          if (gLogDatapath)
          {
            v50 = __nwlog_obj();
            v51 = os_log_type_enabled(v50, OS_LOG_TYPE_DEBUG);
            v28 = *(_QWORD *)(a1 + 40);
            if (v51)
            {
              v52 = v28 == 0;
              if (v28)
                v53 = (const char *)(v28 + 349);
              else
                v53 = "";
              *(_DWORD *)buf = 136446978;
              *(_QWORD *)&buf[4] = "nw_protocol_ohttp_read_response_block_invoke";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v53;
              v54 = " ";
              if (v52)
                v54 = "";
              *(_WORD *)&buf[22] = 2080;
              v64 = v54;
              LOWORD(v65) = 1024;
              *(_DWORD *)((char *)&v65 + 2) = status_code;
              _os_log_impl(&dword_182FBE000, v50, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sRecieved status %u", buf, 0x26u);
              v28 = *(_QWORD *)(a1 + 40);
            }
          }
        }
        if (status_code == 200)
        {
          *(_QWORD *)(v28 + 312) = v24;
          os_release(v26);
LABEL_6:
          is_metadata_complete = nw_frame_is_metadata_complete(a2);
          v9 = *(_QWORD *)(a1 + 40);
          if (!v9 || (*(_BYTE *)(v9 + 348) & 1) == 0)
          {
            if (gLogDatapath)
            {
              v44 = __nwlog_obj();
              v45 = os_log_type_enabled(v44, OS_LOG_TYPE_DEBUG);
              v9 = *(_QWORD *)(a1 + 40);
              if (v45)
              {
                if (v9)
                  v46 = (const char *)(v9 + 349);
                else
                  v46 = "";
                if (v9)
                  v47 = " ";
                else
                  v47 = "";
                v48 = nw_frame_unclaimed_length((_DWORD *)a2);
                *(_QWORD *)&buf[4] = "nw_protocol_ohttp_read_response_block_invoke";
                *(_WORD *)&buf[12] = 2082;
                v49 = ", complete";
                *(_DWORD *)buf = 136447234;
                if (!is_metadata_complete)
                  v49 = "";
                *(_QWORD *)&buf[14] = v46;
                *(_WORD *)&buf[22] = 2080;
                v64 = v47;
                LOWORD(v65) = 1024;
                *(_DWORD *)((char *)&v65 + 2) = v48;
                HIWORD(v65) = 2080;
                v66 = v49;
                _os_log_impl(&dword_182FBE000, v44, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sReceived %u bytes%s", buf, 0x30u);
                v9 = *(_QWORD *)(a1 + 40);
              }
            }
          }
          *(_QWORD *)(a2 + 32) = 0;
          v10 = *(uint64_t **)(v9 + 336);
          *(_QWORD *)(a2 + 40) = v10;
          *v10 = a2;
          *(_QWORD *)(v9 + 336) = v6;
          if (is_metadata_complete)
          {
            *(_BYTE *)(*(_QWORD *)(a1 + 40) + 348) |= 0x10u;
            v11 = *(_QWORD *)(a1 + 40);
            if (!v11 || (*(_BYTE *)(v11 + 348) & 1) == 0)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v12 = gLogObj;
              if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
              {
                v13 = *(_QWORD *)(a1 + 40);
                v14 = "";
                v15 = v13 == 0;
                if (v13)
                  v16 = (const char *)(v13 + 349);
                else
                  v16 = "";
                *(_DWORD *)buf = 136446722;
                *(_QWORD *)&buf[4] = "nw_protocol_ohttp_read_response_block_invoke";
                if (!v15)
                  v14 = " ";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = v16;
                *(_WORD *)&buf[22] = 2080;
                v64 = v14;
                v17 = "%{public}s %{public}s%sReceived complete response";
LABEL_19:
                _os_log_impl(&dword_182FBE000, v12, OS_LOG_TYPE_DEBUG, v17, buf, 0x20u);
                return 1;
              }
            }
          }
          return 1;
        }
        *(_BYTE *)(v28 + 348) |= 0x10u;
        v41 = *(_QWORD *)(a1 + 40);
        if (v41)
        {
          *(_QWORD *)(v41 + 144) = os_retain(v24);
          *(_BYTE *)(v41 + 292) |= 4u;
          *(_DWORD *)(v41 + 288) = 4;
          nw_protocol_ohttp_deliver_response(v41, v41 + 64);
          v42 = *(char **)(v41 + 296);
          if (v42)
          {
            *(_QWORD *)buf = MEMORY[0x1E0C809B0];
            *(_QWORD *)&buf[8] = 0x40000000;
            *(_QWORD *)&buf[16] = ___ZL41nw_protocol_ohttp_deliver_failure_messageP17nw_protocol_ohttpP20nw_protocol_metadata_block_invoke;
            v64 = (const char *)&__block_descriptor_tmp_21_28855;
            v65 = v41;
            v66 = (const char *)v24;
            nw_hash_table_apply(v42, (uint64_t)buf);
          }
LABEL_64:
          os_release(v24);
          nw_frame_finalize(a2);
          os_release(v26);
          return 1;
        }
        __nwlog_obj();
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_ohttp_deliver_failure_message";
        v55 = (char *)_os_log_send_and_compose_impl();
        type = OS_LOG_TYPE_ERROR;
        v61 = 0;
        if (__nwlog_fault(v55, &type, &v61))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            v56 = __nwlog_obj();
            v57 = type;
            if (!os_log_type_enabled(v56, type))
              goto LABEL_97;
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_protocol_ohttp_deliver_failure_message";
            v58 = "%{public}s called with null ohttp";
            goto LABEL_96;
          }
          if (!v61)
          {
            v56 = __nwlog_obj();
            v57 = type;
            if (!os_log_type_enabled(v56, type))
              goto LABEL_97;
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_protocol_ohttp_deliver_failure_message";
            v58 = "%{public}s called with null ohttp, backtrace limit exceeded";
            goto LABEL_96;
          }
          backtrace_string = (char *)__nw_create_backtrace_string();
          v56 = __nwlog_obj();
          v57 = type;
          v60 = os_log_type_enabled(v56, type);
          if (backtrace_string)
          {
            if (v60)
            {
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "nw_protocol_ohttp_deliver_failure_message";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = backtrace_string;
              _os_log_impl(&dword_182FBE000, v56, v57, "%{public}s called with null ohttp, dumping backtrace:%{public}s", buf, 0x16u);
            }
            free(backtrace_string);
            goto LABEL_97;
          }
          if (v60)
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_protocol_ohttp_deliver_failure_message";
            v58 = "%{public}s called with null ohttp, no backtrace";
LABEL_96:
            _os_log_impl(&dword_182FBE000, v56, v57, v58, buf, 0xCu);
          }
        }
LABEL_97:
        if (v55)
          free(v55);
        goto LABEL_64;
      }
      v36 = *(_QWORD *)(a1 + 40);
      if (v36 && (*(_BYTE *)(v36 + 348) & 1) != 0
        || (pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once),
            networkd_settings_init(),
            v30 = gLogObj,
            !os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR)))
      {
LABEL_60:
        nw_frame_finalize(a2);
        return 1;
      }
      v37 = *(_QWORD *)(a1 + 40);
      v38 = "";
      v39 = v37 == 0;
      if (v37)
        v40 = (const char *)(v37 + 349);
      else
        v40 = "";
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = "nw_protocol_ohttp_read_response_block_invoke";
      if (!v39)
        v38 = " ";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v40;
      *(_WORD *)&buf[22] = 2080;
      v64 = v38;
      v35 = "%{public}s %{public}s%sNo HTTP response in metadata";
    }
    else
    {
      v29 = *(_QWORD *)(a1 + 40);
      if (v29 && (*(_BYTE *)(v29 + 348) & 1) != 0)
        goto LABEL_60;
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v30 = gLogObj;
      if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
        goto LABEL_60;
      v31 = *(_QWORD *)(a1 + 40);
      v32 = "";
      v33 = v31 == 0;
      if (v31)
        v34 = (const char *)(v31 + 349);
      else
        v34 = "";
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = "nw_protocol_ohttp_read_response_block_invoke";
      if (!v33)
        v32 = " ";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v34;
      *(_WORD *)&buf[22] = 2080;
      v64 = v32;
      v35 = "%{public}s %{public}s%sNo HTTP metadata in input frame";
    }
    _os_log_impl(&dword_182FBE000, v30, OS_LOG_TYPE_ERROR, v35, buf, 0x20u);
    goto LABEL_60;
  }
  nw_frame_finalize(a2);
  v18 = *(_QWORD *)(a1 + 40);
  if (!v18 || (*(_BYTE *)(v18 + 348) & 1) == 0)
  {
    if (gLogDatapath)
    {
      v12 = __nwlog_obj();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      {
        v19 = *(_QWORD *)(a1 + 40);
        v20 = "";
        v21 = v19 == 0;
        if (v19)
          v22 = (const char *)(v19 + 349);
        else
          v22 = "";
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = "nw_protocol_ohttp_read_response_block_invoke";
        if (!v21)
          v20 = " ";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v22;
        *(_WORD *)&buf[22] = 2080;
        v64 = v20;
        v17 = "%{public}s %{public}s%sDropping unneeded input frame";
        goto LABEL_19;
      }
    }
  }
  return 1;
}

void nw_protocol_ohttp_process_response(uint64_t a1)
{
  uint64_t *v2;
  size_t v3;
  uint64_t v4;
  char *v5;
  char *v6;
  const char *v7;
  _BOOL8 v8;
  unint64_t v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  _QWORD *v17;
  char v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  size_t v26;
  BOOL v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  unsigned int v32;
  unsigned int v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  unsigned int v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  char *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  size_t v46;
  void *v47;
  const char *v48;
  _BOOL8 v49;
  _DWORD *v50;
  unint64_t v51;
  NSObject *v52;
  NSObject *v53;
  NSObject *v54;
  int v55;
  NSObject *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  size_t v62;
  void *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  os_log_type_t v69;
  uint64_t v70;
  NSObject *v71;
  os_log_type_t v72;
  const char *v73;
  char *v74;
  NSObject *v75;
  os_log_type_t v76;
  _BOOL4 v77;
  uint64_t v78;
  NSObject *v79;
  os_log_type_t v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  NSObject *v84;
  _DWORD *v85;
  NSObject *v86;
  char v87;
  size_t v88;
  void *v89;
  NSObject *v90;
  NSObject *v91;
  char v92;
  id *v93;
  unint64_t v94;
  unint64_t v95;
  char *v96;
  uint64_t v97;
  void *v98;
  NSObject *v99;
  size_t v100;
  void *v101;
  uint64_t v102;
  size_t v103;
  char *v104;
  void *v105;
  NSObject *v106;
  void *v107;
  void *v108;
  void *v109;
  dispatch_data_t subrange;
  NSObject *v111;
  NSObject *v112;
  NSObject *v113;
  NSObject *v114;
  NSObject *v115;
  NSObject *v116;
  void *v117;
  NSObject *v118;
  void *v119;
  NSObject *v120;
  void *v121;
  NSObject *v122;
  void *v123;
  unint64_t v124;
  char *v125;
  NSObject *v126;
  os_log_type_t v127;
  NSObject *v128;
  os_log_type_t v129;
  const char *v130;
  void *v131;
  char *v132;
  NSObject *v133;
  os_log_type_t v134;
  _BOOL4 v135;
  NSObject *v136;
  os_log_type_t v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char v141;
  void *v142;
  unint64_t v143;
  char *v144;
  NSObject *v145;
  os_log_type_t v146;
  NSObject *v147;
  os_log_type_t v148;
  const char *v149;
  NSObject *v150;
  void *v151;
  NSObject *v152;
  void *v153;
  unint64_t v154;
  NSObject *v155;
  void *v156;
  NSObject *v157;
  void *v158;
  char *v159;
  NSObject *v160;
  os_log_type_t v161;
  _BOOL4 v162;
  NSObject *v163;
  void *v164;
  NSObject *v165;
  os_log_type_t v166;
  NSObject *v167;
  void *v168;
  NSObject *v169;
  void *v170;
  uint64_t v171;
  uint64_t v172;
  const void *v173;
  size_t v174;
  _BOOL8 v175;
  _DWORD *v176;
  id *v177;
  id *v178;
  size_t v179;
  char *v180;
  BOOL v181;
  size_t v182;
  NSObject *v183;
  const char *v184;
  NSObject *v185;
  const char *v186;
  NSObject *v187;
  NSObject *v188;
  uint64_t v189;
  uint64_t v190;
  char v191;
  char *v192;
  NSObject *v193;
  const char *v194;
  NSObject *v195;
  char *v196;
  uint64_t v197;
  uint64_t v198;
  char v199;
  NSObject *v200;
  uint64_t v201;
  uint64_t v202;
  char v203;
  NSObject *v204;
  uint64_t v205;
  uint64_t v206;
  char v207;
  NSObject *v208;
  NSObject *v209;
  os_log_type_t v210;
  NSObject *v211;
  uint64_t v212;
  uint64_t v213;
  char v214;
  NSObject *v215;
  uint64_t v216;
  uint64_t v217;
  char v218;
  char *v219;
  NSObject *v220;
  os_log_type_t v221;
  const char *v222;
  NSObject *v223;
  void *v224;
  NSObject *v225;
  void *v226;
  char *v227;
  _BOOL4 v228;
  NSObject *v229;
  NSObject *v230;
  os_log_type_t v231;
  const char *v232;
  char *v233;
  char *v234;
  _BOOL4 v235;
  char *backtrace_string;
  _BOOL4 v237;
  const char *v238;
  _BOOL4 v239;
  _BOOL4 v240;
  _BOOL4 v241;
  _BOOL4 v242;
  NSObject *v243;
  void *v244;
  _BOOL4 v245;
  NSObject *v246;
  NSObject *v247;
  NSObject *v248;
  NSObject *v249;
  NSObject *v250;
  NSObject *v251;
  size_t v252;
  void *v253;
  void *v254;
  dispatch_block_t destructor;
  unint64_t v256;
  unint64_t v257;
  unint64_t v258;
  unint64_t v259;
  unint64_t v260;
  uint64_t *v261;
  char *v262;
  _BOOL4 v263;
  NSObject *v264;
  NSObject *v265;
  unint64_t v266;
  _QWORD v267[5];
  size_t size;
  _QWORD v269[2];
  uint64_t (*v270)(uint64_t, uint64_t);
  void *v271;
  _BYTE *v272;
  char *v273;
  size_t v274[4];
  size_t v275;
  unint64_t *v276;
  uint64_t v277;
  uint64_t v278;
  unint64_t v279;
  char v280;
  _BYTE buf[24];
  uint64_t v282;
  _BYTE v283[24];
  char v284;
  uint64_t v285;

  v285 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 312) || (*(_BYTE *)(a1 + 348) & 0x12) == 0)
  {
    nw_ohttp_mark_failed_with_error(a1, 94);
    return;
  }
  if (*(_QWORD *)(a1 + 328))
  {
    v2 = (uint64_t *)(a1 + 328);
    *(_DWORD *)buf = 0;
    nw_frame_array_get_frame_count((uint64_t *)(a1 + 328), 1, buf);
    v3 = *(unsigned int *)buf;
    v4 = *v2;
    if (nw_frame_unclaimed_length((_DWORD *)*v2) == (_DWORD)v3)
    {
      v5 = (char *)nw_frame_unclaimed_bytes(v4, 0);
      v6 = 0;
      if ((*(_BYTE *)(a1 + 348) & 2) == 0)
        goto LABEL_6;
    }
    else
    {
      if (!(_DWORD)v3)
      {
        v223 = __nwlog_obj();
        os_log_type_enabled(v223, OS_LOG_TYPE_ERROR);
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "strict_calloc";
        v224 = (void *)_os_log_send_and_compose_impl();
        if (__nwlog_abort((uint64_t)v224))
          goto LABEL_537;
        free(v224);
      }
      v6 = (char *)malloc_type_calloc(1uLL, v3, 0xEAFB8F1AuLL);
      if (!v6)
      {
        v225 = __nwlog_obj();
        os_log_type_enabled(v225, OS_LOG_TYPE_ERROR);
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = "strict_calloc";
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = 1;
        *(_WORD *)&buf[22] = 2048;
        v282 = v3;
        v226 = (void *)_os_log_send_and_compose_impl();
        if (__nwlog_abort((uint64_t)v226))
          goto LABEL_537;
        free(v226);
      }
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0x2000000000;
      v282 = 0;
      v269[0] = MEMORY[0x1E0C809B0];
      v269[1] = 0x40000000;
      v270 = ___ZL34nw_protocol_ohttp_process_responseP17nw_protocol_ohttp_block_invoke;
      v271 = &unk_1E149F3F8;
      v272 = buf;
      v273 = v6;
      v14 = *v2;
      do
      {
        if (!v14)
          break;
        v15 = *(_QWORD *)(v14 + 32);
        v16 = ((uint64_t (*)(_QWORD *))v270)(v269);
        v14 = v15;
      }
      while ((v16 & 1) != 0);
      _Block_object_dispose(buf, 8);
      v5 = v6;
      if ((*(_BYTE *)(a1 + 348) & 2) == 0)
      {
LABEL_6:
        v7 = *(const char **)(a1 + 280);
        if (v7)
        {
          v275 = 0;
          v8 = nw_http_decrypt_oblivious_response(v5, v3, v7, *(_QWORD *)(a1 + 176), *(_QWORD *)(a1 + 184), *(const void **)(a1 + 160), *(_QWORD *)(a1 + 168), &v275);
          if (v8)
          {
            v9 = v275;
            *(_QWORD *)(a1 + 224) = v8;
            *(_QWORD *)(a1 + 232) = v9;
            goto LABEL_9;
          }
          if ((*(_BYTE *)(a1 + 348) & 1) != 0
            || (pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once),
                networkd_settings_init(),
                v183 = gLogObj,
                !os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR)))
          {
LABEL_374:
            nw_ohttp_mark_failed_with_error(a1, 80);
            return;
          }
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)&buf[4] = "nw_protocol_ohttp_process_response";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = a1 + 349;
          *(_WORD *)&buf[22] = 2080;
          v282 = (uint64_t)" ";
          v184 = "%{public}s %{public}s%sFailed to decrypt oblivious response";
LABEL_373:
          _os_log_impl(&dword_182FBE000, v183, OS_LOG_TYPE_ERROR, v184, buf, 0x20u);
          goto LABEL_374;
        }
        if (v5)
        {
          if ((_DWORD)v3)
          {
            v171 = *(_QWORD *)(a1 + 176);
            if (v171)
            {
              v172 = *(_QWORD *)(a1 + 184);
              if (v172)
              {
                v173 = *(const void **)(a1 + 160);
                if (v173)
                {
                  v174 = *(_QWORD *)(a1 + 168);
                  if (v174)
                  {
                    v275 = 0;
                    v175 = nw_http_decrypt_oblivious_response(v5, v3, "message/bhttp", v171, v172, v173, v174, &v275);
                    if (v175)
                    {
                      v176 = (_DWORD *)v175;
                      if (v275)
                      {
                        v274[0] = 0;
                        v177 = nw_http_copy_metadata_from_binary_message((_DWORD *)v175, v275, v274, 0);
                        if (v177)
                        {
                          v178 = v177;
                          v179 = v274[0];
                          if (!v274[0])
                          {
                            free(v176);
                            v182 = 0;
                            v180 = 0;
                            goto LABEL_356;
                          }
                          v180 = (char *)malloc_type_calloc(1uLL, v274[0], 0xEAFB8F1AuLL);
                          if (v180)
                          {
                            v181 = nw_http_fillout_body_from_binary_message(v176, v275, v180, v274[0], v274);
                            free(v176);
                            if (v181)
                            {
LABEL_324:
                              v182 = v274[0];
LABEL_356:
                              *(_QWORD *)(a1 + 224) = v180;
                              *(_QWORD *)(a1 + 232) = v182;
                              *(_QWORD *)(a1 + 144) = v178;
LABEL_9:
                              if ((*(_BYTE *)(a1 + 348) & 1) == 0)
                              {
                                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                                networkd_settings_init();
                                v10 = gLogObj;
                                if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
                                {
                                  *(_DWORD *)buf = 136446722;
                                  *(_QWORD *)&buf[4] = "nw_protocol_ohttp_process_response";
                                  *(_WORD *)&buf[12] = 2082;
                                  *(_QWORD *)&buf[14] = a1 + 349;
                                  *(_WORD *)&buf[22] = 2080;
                                  v282 = (uint64_t)" ";
                                  _os_log_impl(&dword_182FBE000, v10, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sProcessed response", buf, 0x20u);
                                }
                              }
                              *(_BYTE *)(a1 + 292) |= 4u;
                              *(_DWORD *)(a1 + 288) = 4;
                              *(_QWORD *)(a1 + 240) = 0;
                              nw_protocol_ohttp_deliver_response(a1, a1 + 64);
                              if (gLogDatapath)
                              {
                                v229 = __nwlog_obj();
                                if (os_log_type_enabled(v229, OS_LOG_TYPE_DEBUG))
                                {
                                  *(_DWORD *)buf = 136446210;
                                  *(_QWORD *)&buf[4] = "nw_protocol_finalize_temp_frame_array";
                                  _os_log_impl(&dword_182FBE000, v229, OS_LOG_TYPE_DEBUG, "%{public}s called", buf, 0xCu);
                                }
                              }
                              *(_QWORD *)buf = MEMORY[0x1E0C809B0];
                              *(_QWORD *)&buf[8] = 0x40000000;
                              *(_QWORD *)&buf[16] = ___ZL37nw_protocol_finalize_temp_frame_arrayP16nw_frame_array_sb_block_invoke_28754;
                              v282 = (uint64_t)&__block_descriptor_tmp_15_28755;
                              *(_QWORD *)v283 = v2;
                              v283[8] = 1;
                              v11 = *v2;
                              do
                              {
                                if (!v11)
                                  break;
                                v12 = *(_QWORD *)(v11 + 32);
                                v13 = (*(uint64_t (**)(_BYTE *))&buf[16])(buf);
                                v11 = v12;
                              }
                              while ((v13 & 1) != 0);
                              goto LABEL_464;
                            }
                            free(v180);
                            goto LABEL_367;
                          }
                          v243 = __nwlog_obj();
                          os_log_type_enabled(v243, OS_LOG_TYPE_ERROR);
                          *(_DWORD *)buf = 136446722;
                          *(_QWORD *)&buf[4] = "strict_calloc";
                          *(_WORD *)&buf[12] = 2048;
                          *(_QWORD *)&buf[14] = 1;
                          *(_WORD *)&buf[22] = 2048;
                          v282 = v179;
                          v244 = (void *)_os_log_send_and_compose_impl();
                          if (!__nwlog_abort((uint64_t)v244))
                          {
                            free(v244);
                            v245 = nw_http_fillout_body_from_binary_message(v176, v275, 0, v274[0], v274);
                            free(v176);
                            if (v245)
                              goto LABEL_324;
LABEL_367:
                            os_release(v178);
                            v185 = __nwlog_obj();
                            if (!os_log_type_enabled(v185, OS_LOG_TYPE_ERROR))
                              goto LABEL_370;
                            *(_DWORD *)buf = 136446210;
                            *(_QWORD *)&buf[4] = "nw_http_create_message_from_oblivious_response";
                            v186 = "%{public}s Failed to fill out body content";
                            goto LABEL_369;
                          }
LABEL_537:
                          __break(1u);
                          return;
                        }
                        v187 = __nwlog_obj();
                        if (os_log_type_enabled(v187, OS_LOG_TYPE_ERROR))
                        {
                          *(_DWORD *)buf = 136446210;
                          *(_QWORD *)&buf[4] = "nw_http_create_message_from_oblivious_response";
                          _os_log_impl(&dword_182FBE000, v187, OS_LOG_TYPE_ERROR, "%{public}s Failed to extract HTTP metadata", buf, 0xCu);
                        }
LABEL_334:
                        free(v176);
                        goto LABEL_370;
                      }
                      free((void *)v175);
                      v185 = __nwlog_obj();
                      if (!os_log_type_enabled(v185, OS_LOG_TYPE_ERROR))
                        goto LABEL_370;
                      *(_DWORD *)buf = 136446210;
                      *(_QWORD *)&buf[4] = "nw_http_create_message_from_oblivious_response";
                      v186 = "%{public}s Binary message is empty";
                    }
                    else
                    {
                      v185 = __nwlog_obj();
                      if (!os_log_type_enabled(v185, OS_LOG_TYPE_ERROR))
                        goto LABEL_370;
                      *(_DWORD *)buf = 136446210;
                      *(_QWORD *)&buf[4] = "nw_http_create_message_from_oblivious_response";
                      v186 = "%{public}s Failed to decrypt oblivious response";
                    }
LABEL_369:
                    _os_log_impl(&dword_182FBE000, v185, OS_LOG_TYPE_ERROR, v186, buf, 0xCu);
                    goto LABEL_370;
                  }
                  __nwlog_obj();
                  *(_DWORD *)buf = 136446210;
                  *(_QWORD *)&buf[4] = "nw_http_create_message_from_oblivious_response";
                  v176 = (_DWORD *)_os_log_send_and_compose_impl();
                  LOBYTE(v275) = 16;
                  LOBYTE(v274[0]) = 0;
                  if (!__nwlog_fault((const char *)v176, &v275, v274))
                    goto LABEL_527;
                  if (v275 == 17)
                  {
                    v230 = __nwlog_obj();
                    v231 = v275;
                    if (!os_log_type_enabled(v230, (os_log_type_t)v275))
                      goto LABEL_527;
                    *(_DWORD *)buf = 136446210;
                    *(_QWORD *)&buf[4] = "nw_http_create_message_from_oblivious_response";
                    v232 = "%{public}s called with null request_enc_length";
                    goto LABEL_526;
                  }
                  if (!LOBYTE(v274[0]))
                  {
                    v230 = __nwlog_obj();
                    v231 = v275;
                    if (!os_log_type_enabled(v230, (os_log_type_t)v275))
                      goto LABEL_527;
                    *(_DWORD *)buf = 136446210;
                    *(_QWORD *)&buf[4] = "nw_http_create_message_from_oblivious_response";
                    v232 = "%{public}s called with null request_enc_length, backtrace limit exceeded";
                    goto LABEL_526;
                  }
                  backtrace_string = (char *)__nw_create_backtrace_string();
                  v230 = __nwlog_obj();
                  v231 = v275;
                  v242 = os_log_type_enabled(v230, (os_log_type_t)v275);
                  if (!backtrace_string)
                  {
                    if (!v242)
                      goto LABEL_527;
                    *(_DWORD *)buf = 136446210;
                    *(_QWORD *)&buf[4] = "nw_http_create_message_from_oblivious_response";
                    v232 = "%{public}s called with null request_enc_length, no backtrace";
                    goto LABEL_526;
                  }
                  if (v242)
                  {
                    *(_DWORD *)buf = 136446466;
                    *(_QWORD *)&buf[4] = "nw_http_create_message_from_oblivious_response";
                    *(_WORD *)&buf[12] = 2082;
                    *(_QWORD *)&buf[14] = backtrace_string;
                    v238 = "%{public}s called with null request_enc_length, dumping backtrace:%{public}s";
                    goto LABEL_492;
                  }
LABEL_493:
                  free(backtrace_string);
                  if (v176)
                    goto LABEL_334;
LABEL_370:
                  *(_QWORD *)(a1 + 144) = 0;
                  if ((*(_BYTE *)(a1 + 348) & 1) != 0)
                    goto LABEL_374;
                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                  networkd_settings_init();
                  v183 = gLogObj;
                  if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
                    goto LABEL_374;
                  *(_DWORD *)buf = 136446722;
                  *(_QWORD *)&buf[4] = "nw_protocol_ohttp_process_response";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = a1 + 349;
                  *(_WORD *)&buf[22] = 2080;
                  v282 = (uint64_t)" ";
                  v184 = "%{public}s %{public}s%sFailed to process response";
                  goto LABEL_373;
                }
                __nwlog_obj();
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_http_create_message_from_oblivious_response";
                v176 = (_DWORD *)_os_log_send_and_compose_impl();
                LOBYTE(v275) = 16;
                LOBYTE(v274[0]) = 0;
                if (!__nwlog_fault((const char *)v176, &v275, v274))
                  goto LABEL_527;
                if (v275 == 17)
                {
                  v230 = __nwlog_obj();
                  v231 = v275;
                  if (!os_log_type_enabled(v230, (os_log_type_t)v275))
                    goto LABEL_527;
                  *(_DWORD *)buf = 136446210;
                  *(_QWORD *)&buf[4] = "nw_http_create_message_from_oblivious_response";
                  v232 = "%{public}s called with null request_enc";
                  goto LABEL_526;
                }
                if (!LOBYTE(v274[0]))
                {
                  v230 = __nwlog_obj();
                  v231 = v275;
                  if (!os_log_type_enabled(v230, (os_log_type_t)v275))
                    goto LABEL_527;
                  *(_DWORD *)buf = 136446210;
                  *(_QWORD *)&buf[4] = "nw_http_create_message_from_oblivious_response";
                  v232 = "%{public}s called with null request_enc, backtrace limit exceeded";
                  goto LABEL_526;
                }
                backtrace_string = (char *)__nw_create_backtrace_string();
                v230 = __nwlog_obj();
                v231 = v275;
                v241 = os_log_type_enabled(v230, (os_log_type_t)v275);
                if (!backtrace_string)
                {
                  if (!v241)
                    goto LABEL_527;
                  *(_DWORD *)buf = 136446210;
                  *(_QWORD *)&buf[4] = "nw_http_create_message_from_oblivious_response";
                  v232 = "%{public}s called with null request_enc, no backtrace";
                  goto LABEL_526;
                }
                if (!v241)
                  goto LABEL_493;
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = "nw_http_create_message_from_oblivious_response";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = backtrace_string;
                v238 = "%{public}s called with null request_enc, dumping backtrace:%{public}s";
LABEL_492:
                _os_log_impl(&dword_182FBE000, v230, v231, v238, buf, 0x16u);
                goto LABEL_493;
              }
              __nwlog_obj();
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_http_create_message_from_oblivious_response";
              v176 = (_DWORD *)_os_log_send_and_compose_impl();
              LOBYTE(v275) = 16;
              LOBYTE(v274[0]) = 0;
              if (!__nwlog_fault((const char *)v176, &v275, v274))
                goto LABEL_527;
              if (v275 != 17)
              {
                if (!LOBYTE(v274[0]))
                {
                  v230 = __nwlog_obj();
                  v231 = v275;
                  if (!os_log_type_enabled(v230, (os_log_type_t)v275))
                    goto LABEL_527;
                  *(_DWORD *)buf = 136446210;
                  *(_QWORD *)&buf[4] = "nw_http_create_message_from_oblivious_response";
                  v232 = "%{public}s called with null request_context_length, backtrace limit exceeded";
                  goto LABEL_526;
                }
                backtrace_string = (char *)__nw_create_backtrace_string();
                v230 = __nwlog_obj();
                v231 = v275;
                v240 = os_log_type_enabled(v230, (os_log_type_t)v275);
                if (!backtrace_string)
                {
                  if (!v240)
                    goto LABEL_527;
                  *(_DWORD *)buf = 136446210;
                  *(_QWORD *)&buf[4] = "nw_http_create_message_from_oblivious_response";
                  v232 = "%{public}s called with null request_context_length, no backtrace";
                  goto LABEL_526;
                }
                if (!v240)
                  goto LABEL_493;
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = "nw_http_create_message_from_oblivious_response";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = backtrace_string;
                v238 = "%{public}s called with null request_context_length, dumping backtrace:%{public}s";
                goto LABEL_492;
              }
              v230 = __nwlog_obj();
              v231 = v275;
              if (!os_log_type_enabled(v230, (os_log_type_t)v275))
                goto LABEL_527;
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_http_create_message_from_oblivious_response";
              v232 = "%{public}s called with null request_context_length";
            }
            else
            {
              __nwlog_obj();
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_http_create_message_from_oblivious_response";
              v176 = (_DWORD *)_os_log_send_and_compose_impl();
              LOBYTE(v275) = 16;
              LOBYTE(v274[0]) = 0;
              if (!__nwlog_fault((const char *)v176, &v275, v274))
                goto LABEL_527;
              if (v275 != 17)
              {
                if (!LOBYTE(v274[0]))
                {
                  v230 = __nwlog_obj();
                  v231 = v275;
                  if (!os_log_type_enabled(v230, (os_log_type_t)v275))
                    goto LABEL_527;
                  *(_DWORD *)buf = 136446210;
                  *(_QWORD *)&buf[4] = "nw_http_create_message_from_oblivious_response";
                  v232 = "%{public}s called with null request_context, backtrace limit exceeded";
                  goto LABEL_526;
                }
                backtrace_string = (char *)__nw_create_backtrace_string();
                v230 = __nwlog_obj();
                v231 = v275;
                v239 = os_log_type_enabled(v230, (os_log_type_t)v275);
                if (!backtrace_string)
                {
                  if (!v239)
                    goto LABEL_527;
                  *(_DWORD *)buf = 136446210;
                  *(_QWORD *)&buf[4] = "nw_http_create_message_from_oblivious_response";
                  v232 = "%{public}s called with null request_context, no backtrace";
                  goto LABEL_526;
                }
                if (!v239)
                  goto LABEL_493;
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = "nw_http_create_message_from_oblivious_response";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = backtrace_string;
                v238 = "%{public}s called with null request_context, dumping backtrace:%{public}s";
                goto LABEL_492;
              }
              v230 = __nwlog_obj();
              v231 = v275;
              if (!os_log_type_enabled(v230, (os_log_type_t)v275))
                goto LABEL_527;
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_http_create_message_from_oblivious_response";
              v232 = "%{public}s called with null request_context";
            }
          }
          else
          {
            __nwlog_obj();
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_http_create_message_from_oblivious_response";
            v176 = (_DWORD *)_os_log_send_and_compose_impl();
            LOBYTE(v275) = 16;
            LOBYTE(v274[0]) = 0;
            if (!__nwlog_fault((const char *)v176, &v275, v274))
              goto LABEL_527;
            if (v275 != 17)
            {
              if (!LOBYTE(v274[0]))
              {
                v230 = __nwlog_obj();
                v231 = v275;
                if (!os_log_type_enabled(v230, (os_log_type_t)v275))
                  goto LABEL_527;
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_http_create_message_from_oblivious_response";
                v232 = "%{public}s called with null response_length, backtrace limit exceeded";
                goto LABEL_526;
              }
              backtrace_string = (char *)__nw_create_backtrace_string();
              v230 = __nwlog_obj();
              v231 = v275;
              v237 = os_log_type_enabled(v230, (os_log_type_t)v275);
              if (!backtrace_string)
              {
                if (!v237)
                  goto LABEL_527;
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_http_create_message_from_oblivious_response";
                v232 = "%{public}s called with null response_length, no backtrace";
                goto LABEL_526;
              }
              if (!v237)
                goto LABEL_493;
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "nw_http_create_message_from_oblivious_response";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = backtrace_string;
              v238 = "%{public}s called with null response_length, dumping backtrace:%{public}s";
              goto LABEL_492;
            }
            v230 = __nwlog_obj();
            v231 = v275;
            if (!os_log_type_enabled(v230, (os_log_type_t)v275))
              goto LABEL_527;
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_http_create_message_from_oblivious_response";
            v232 = "%{public}s called with null response_length";
          }
        }
        else
        {
          __nwlog_obj();
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_create_message_from_oblivious_response";
          v176 = (_DWORD *)_os_log_send_and_compose_impl();
          LOBYTE(v275) = 16;
          LOBYTE(v274[0]) = 0;
          if (!__nwlog_fault((const char *)v176, &v275, v274))
            goto LABEL_527;
          if (v275 == 17)
          {
            v230 = __nwlog_obj();
            v231 = v275;
            if (!os_log_type_enabled(v230, (os_log_type_t)v275))
              goto LABEL_527;
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_http_create_message_from_oblivious_response";
            v232 = "%{public}s called with null response_buffer";
          }
          else if (LOBYTE(v274[0]))
          {
            v234 = (char *)__nw_create_backtrace_string();
            v230 = __nwlog_obj();
            v231 = v275;
            v235 = os_log_type_enabled(v230, (os_log_type_t)v275);
            if (v234)
            {
              if (v235)
              {
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = "nw_http_create_message_from_oblivious_response";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = v234;
                _os_log_impl(&dword_182FBE000, v230, v231, "%{public}s called with null response_buffer, dumping backtrace:%{public}s", buf, 0x16u);
              }
              free(v234);
LABEL_527:
              if (v176)
                goto LABEL_334;
              goto LABEL_370;
            }
            if (!v235)
              goto LABEL_527;
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_http_create_message_from_oblivious_response";
            v232 = "%{public}s called with null response_buffer, no backtrace";
          }
          else
          {
            v230 = __nwlog_obj();
            v231 = v275;
            if (!os_log_type_enabled(v230, (os_log_type_t)v275))
              goto LABEL_527;
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_http_create_message_from_oblivious_response";
            v232 = "%{public}s called with null response_buffer, backtrace limit exceeded";
          }
        }
LABEL_526:
        _os_log_impl(&dword_182FBE000, v230, v231, v232, buf, 0xCu);
        goto LABEL_527;
      }
    }
    if (!v5 || !(_DWORD)v3)
      goto LABEL_460;
    v17 = (_QWORD *)(a1 + 64);
    destructor = (dispatch_block_t)*MEMORY[0x1E0C80CE0];
    v261 = (uint64_t *)(a1 + 328);
    v262 = v6;
    while (1)
    {
      v18 = *(_BYTE *)(a1 + 348);
      if ((v18 & 4) != 0)
      {
        v19 = *v5;
        if (v19 >= 0x40)
          goto LABEL_52;
      }
      else
      {
        if (*(_QWORD *)(a1 + 248))
        {
          v19 = *v5;
          if (v19 < 0x40)
            goto LABEL_31;
LABEL_47:
          v32 = v19 >> 6;
          if (v32 == 2)
          {
            if (v3 < 4)
              goto LABEL_455;
            v20 = bswap32(*(_DWORD *)v5 & 0xFFFFFF7F);
            v21 = 4;
          }
          else if (v32 == 1)
          {
            if (v3 < 2)
              goto LABEL_455;
            v20 = bswap32(*(_WORD *)v5 & 0xFFBF) >> 16;
            v21 = 2;
          }
          else
          {
            if (v3 < 8)
              goto LABEL_455;
            v20 = bswap64(*(_QWORD *)v5 & 0xFFFFFFFFFFFFFF3FLL);
            v21 = 8;
          }
          goto LABEL_75;
        }
        cchpke_params_x25519_AESGCM128_HKDF_SHA256();
        v24 = cchpke_params_sizeof_aead_key();
        v25 = cchpke_params_sizeof_aead_nonce();
        if (v24 <= v25)
          v26 = v25;
        else
          v26 = v24;
        v27 = v3 >= v26;
        v3 -= v26;
        if (!v27)
        {
          if ((*(_BYTE *)(a1 + 348) & 1) == 0)
          {
            v208 = __nwlog_obj();
            if (os_log_type_enabled(v208, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136446722;
              *(_QWORD *)&buf[4] = "nw_protocol_ohttp_process_response";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = a1 + 349;
              *(_WORD *)&buf[22] = 2080;
              v282 = (uint64_t)" ";
              v194 = "%{public}s %{public}s%sNot enough bytes for nonce length";
              v209 = v208;
              v210 = OS_LOG_TYPE_ERROR;
              goto LABEL_459;
            }
          }
          goto LABEL_460;
        }
        if (!v26)
        {
          v116 = __nwlog_obj();
          os_log_type_enabled(v116, OS_LOG_TYPE_ERROR);
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "strict_calloc";
          v117 = (void *)_os_log_send_and_compose_impl();
          if (__nwlog_abort((uint64_t)v117))
            goto LABEL_537;
          free(v117);
        }
        v28 = malloc_type_calloc(1uLL, v26, 0xEAFB8F1AuLL);
        if (!v28)
        {
          v118 = __nwlog_obj();
          os_log_type_enabled(v118, OS_LOG_TYPE_ERROR);
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)&buf[4] = "strict_calloc";
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = 1;
          *(_WORD *)&buf[22] = 2048;
          v282 = v26;
          v119 = (void *)_os_log_send_and_compose_impl();
          if (__nwlog_abort((uint64_t)v119))
            goto LABEL_537;
          free(v119);
        }
        *(_QWORD *)(a1 + 248) = v28;
        memcpy(v28, v5, v26);
        *(_QWORD *)(a1 + 256) = v26;
        v275 = 0;
        v276 = &v275;
        v277 = 0x2000000000;
        LODWORD(v278) = v26;
        *(_QWORD *)buf = MEMORY[0x1E0C809B0];
        *(_QWORD *)&buf[8] = 0x40000000;
        *(_QWORD *)&buf[16] = ___ZL45nw_protocol_finalize_partial_temp_frame_arrayP16nw_frame_array_sjP11nw_protocolb_block_invoke;
        v282 = (uint64_t)&unk_1E149F460;
        *(_QWORD *)v283 = &v275;
        *(_QWORD *)&v283[8] = v2;
        v284 = 1;
        *(_QWORD *)&v283[16] = a1;
        v29 = *(_QWORD *)(a1 + 328);
        do
        {
          if (!v29)
            break;
          v30 = *(_QWORD *)(v29 + 32);
          v31 = (*(uint64_t (**)(_BYTE *))&buf[16])(buf);
          v29 = v30;
        }
        while ((v31 & 1) != 0);
        _Block_object_dispose(&v275, 8);
        v17 = (_QWORD *)(a1 + 64);
        if (!v3)
        {
          __nwlog_obj();
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_parse_chunk_length";
          v219 = (char *)_os_log_send_and_compose_impl();
          LOBYTE(v275) = 16;
          LOBYTE(v274[0]) = 0;
          if (!__nwlog_fault(v219, &v275, v274))
            goto LABEL_452;
          if (v275 == 17)
          {
            v220 = __nwlog_obj();
            v221 = v275;
            if (os_log_type_enabled(v220, (os_log_type_t)v275))
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_http_parse_chunk_length";
              v222 = "%{public}s called with null response_length";
              goto LABEL_451;
            }
            goto LABEL_452;
          }
          if (!LOBYTE(v274[0]))
          {
            v220 = __nwlog_obj();
            v221 = v275;
            if (!os_log_type_enabled(v220, (os_log_type_t)v275))
              goto LABEL_452;
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_http_parse_chunk_length";
            v222 = "%{public}s called with null response_length, backtrace limit exceeded";
LABEL_451:
            _os_log_impl(&dword_182FBE000, v220, v221, v222, buf, 0xCu);
            goto LABEL_452;
          }
          v227 = (char *)__nw_create_backtrace_string();
          v220 = __nwlog_obj();
          v221 = v275;
          v228 = os_log_type_enabled(v220, (os_log_type_t)v275);
          if (v227)
          {
            if (v228)
            {
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "nw_http_parse_chunk_length";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v227;
              _os_log_impl(&dword_182FBE000, v220, v221, "%{public}s called with null response_length, dumping backtrace:%{public}s", buf, 0x16u);
            }
            free(v227);
            goto LABEL_452;
          }
          if (v228)
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_http_parse_chunk_length";
            v222 = "%{public}s called with null response_length, no backtrace";
            goto LABEL_451;
          }
LABEL_452:
          if (v219)
            free(v219);
          v18 = *(_BYTE *)(a1 + 348);
LABEL_455:
          if ((v18 & 1) == 0)
          {
            v193 = __nwlog_obj();
            if (os_log_type_enabled(v193, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136446722;
              *(_QWORD *)&buf[4] = "nw_protocol_ohttp_process_response";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = a1 + 349;
              *(_WORD *)&buf[22] = 2080;
              v282 = (uint64_t)" ";
              v194 = "%{public}s %{public}s%sFailed to parse chunk";
LABEL_458:
              v209 = v193;
              v210 = OS_LOG_TYPE_DEBUG;
LABEL_459:
              _os_log_impl(&dword_182FBE000, v209, v210, v194, buf, 0x20u);
            }
          }
LABEL_460:
          if ((*(_BYTE *)(a1 + 292) & 0x20) != 0)
          {
            *(_BYTE *)(a1 + 292) &= ~0x20u;
            nw_protocol_ohttp_deliver_response(a1, a1 + 64);
          }
          v233 = *(char **)(a1 + 296);
          if (v233)
          {
            v267[0] = MEMORY[0x1E0C809B0];
            v267[1] = 0x40000000;
            v267[2] = ___ZL34nw_protocol_ohttp_process_responseP17nw_protocol_ohttp_block_invoke_26;
            v267[3] = &__block_descriptor_tmp_27_28770;
            v267[4] = a1;
            nw_hash_table_apply(v233, (uint64_t)v267);
          }
LABEL_464:
          if (v6)
            free(v6);
          return;
        }
        v18 = *(_BYTE *)(a1 + 348);
        v5 += v26;
        v19 = *v5;
        if ((v18 & 4) == 0)
        {
          if (v19 > 0x3F)
            goto LABEL_47;
LABEL_31:
          v20 = v19;
          v21 = 1;
LABEL_75:
          if (v20 > v3 - v21)
            goto LABEL_455;
          v38 = 0;
          v263 = v20 == 0;
          goto LABEL_96;
        }
        if (v19 > 0x3F)
        {
LABEL_52:
          v33 = v19 >> 6;
          if (v33 == 2)
          {
            if (v3 < 4)
              goto LABEL_455;
            v22 = bswap32(*(_DWORD *)v5 & 0xFFFFFF7F);
            v23 = 4;
          }
          else if (v33 == 1)
          {
            if (v3 < 2)
              goto LABEL_455;
            v22 = bswap32(*(_WORD *)v5 & 0xFFBF) >> 16;
            v23 = 2;
          }
          else
          {
            if (v3 < 8)
              goto LABEL_455;
            v22 = bswap64(*(_QWORD *)v5 & 0xFFFFFFFFFFFFFF3FLL);
            v23 = 8;
          }
          goto LABEL_60;
        }
      }
      v22 = v19;
      v23 = 1;
LABEL_60:
      v34 = v3 - v23;
      if (v22 > v3 - v23)
        goto LABEL_455;
      v35 = &v5[v23];
      if (v22)
      {
        v263 = 0;
        if (!v34)
          goto LABEL_455;
      }
      else
      {
        if (!v34)
          goto LABEL_455;
        v22 = *v35;
        if (v22 > 0x3F)
        {
          v37 = v22 >> 6;
          if (v37 == 2)
          {
            if (v34 < 4)
              goto LABEL_455;
            v22 = bswap32(*(_DWORD *)v35 & 0xFFFFFF7F);
            v36 = 4;
          }
          else if (v37 == 1)
          {
            if (v34 < 2)
              goto LABEL_455;
            v22 = bswap32(*(_WORD *)v35 & 0xFFBF) >> 16;
            v36 = 2;
          }
          else
          {
            if (v34 < 8)
              goto LABEL_455;
            v22 = bswap64(*(_QWORD *)v35 & 0xFFFFFFFFFFFFFF3FLL);
            v36 = 8;
          }
        }
        else
        {
          v36 = 1;
        }
        v34 -= v36;
        if (v22 > v34)
          goto LABEL_455;
        v35 += v36;
        v23 += v36;
        v263 = 1;
        if (!v34)
          goto LABEL_455;
      }
      v38 = *v35;
      if (v38 > 0x3F)
      {
        if (v38 >> 6 == 2)
        {
          if (v34 < 4)
            goto LABEL_455;
          v38 = bswap32(*(_DWORD *)v35 & 0xFFFFFF7F);
          v39 = 4;
        }
        else if (v38 >> 6 == 1)
        {
          if (v34 < 2)
            goto LABEL_455;
          v38 = bswap32(*(_WORD *)v35 & 0xFFBF) >> 16;
          v39 = 2;
        }
        else
        {
          if (v34 < 8)
            goto LABEL_455;
          v38 = bswap64(*(_QWORD *)v35 & 0xFFFFFFFFFFFFFF3FLL);
          v39 = 8;
        }
      }
      else
      {
        v39 = 1;
      }
      v20 = v22 - v39;
      if (v22 < v39 || v38 > v34 - v39)
        goto LABEL_455;
      v21 = v39 + v23;
LABEL_96:
      if (v3 < v21)
      {
        if ((v18 & 1) == 0)
        {
          v188 = __nwlog_obj();
          if (os_log_type_enabled(v188, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446722;
            *(_QWORD *)&buf[4] = "nw_protocol_ohttp_process_response";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = a1 + 349;
            *(_WORD *)&buf[22] = 2080;
            v282 = (uint64_t)" ";
            _os_log_impl(&dword_182FBE000, v188, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sFailed to parse chunk (fatal)", buf, 0x20u);
          }
        }
        if (gLogDatapath)
        {
          v246 = __nwlog_obj();
          if (os_log_type_enabled(v246, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_protocol_finalize_temp_frame_array";
            _os_log_impl(&dword_182FBE000, v246, OS_LOG_TYPE_DEBUG, "%{public}s called", buf, 0xCu);
          }
        }
        *(_QWORD *)buf = MEMORY[0x1E0C809B0];
        *(_QWORD *)&buf[8] = 0x40000000;
        *(_QWORD *)&buf[16] = ___ZL37nw_protocol_finalize_temp_frame_arrayP16nw_frame_array_sb_block_invoke_28754;
        v282 = (uint64_t)&__block_descriptor_tmp_15_28755;
        *(_QWORD *)v283 = v2;
        v283[8] = 1;
        v189 = *v2;
        do
        {
          if (!v189)
            break;
          v190 = *(_QWORD *)(v189 + 32);
          v191 = (*(uint64_t (**)(_BYTE *))&buf[16])(buf);
          v189 = v190;
        }
        while ((v191 & 1) != 0);
        if (v6)
        {
          v192 = v6;
          goto LABEL_406;
        }
LABEL_407:
        nw_ohttp_mark_failed_with_error(a1, 22);
        return;
      }
      if ((v18 & 4) == 0 && !v20)
      {
        if ((v18 & 0x10) == 0)
        {
          if ((v18 & 1) == 0)
          {
            v193 = __nwlog_obj();
            if (os_log_type_enabled(v193, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136446722;
              *(_QWORD *)&buf[4] = "nw_protocol_ohttp_process_response";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = a1 + 349;
              *(_WORD *)&buf[22] = 2080;
              v282 = (uint64_t)" ";
              v194 = "%{public}s %{public}s%sNot enough bytes to parse final chunk";
              goto LABEL_458;
            }
          }
          goto LABEL_460;
        }
        v20 = v3 - v21;
      }
      if (v20 + v21 > v3)
      {
        if ((v18 & 1) == 0)
        {
          v193 = __nwlog_obj();
          if (os_log_type_enabled(v193, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136446722;
            *(_QWORD *)&buf[4] = "nw_protocol_ohttp_process_response";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = a1 + 349;
            *(_WORD *)&buf[22] = 2080;
            v282 = (uint64_t)" ";
            v194 = "%{public}s %{public}s%sNot enough bytes to parse complete chunk";
            goto LABEL_458;
          }
        }
        goto LABEL_460;
      }
      if ((v18 & 4) != 0 && *v17 != v38)
      {
        v41 = *(char **)(a1 + 296);
        if (!v41)
          goto LABEL_540;
        v275 = 0;
        v276 = &v275;
        v277 = 0x2000000000;
        v278 = 0;
        *(_QWORD *)buf = MEMORY[0x1E0C809B0];
        *(_QWORD *)&buf[8] = 0x40000000;
        *(_QWORD *)&buf[16] = ___ZL44nw_protocol_ohttp_get_context_for_context_idP17nw_protocol_ohttpy_block_invoke;
        v282 = (uint64_t)&unk_1E149F2C8;
        *(_QWORD *)v283 = &v275;
        *(_QWORD *)&v283[8] = v38;
        nw_hash_table_apply(v41, (uint64_t)buf);
        v40 = (_QWORD *)v276[3];
        _Block_object_dispose(&v275, 8);
        v18 = *(_BYTE *)(a1 + 348);
        if (!v40)
        {
LABEL_540:
          if ((v18 & 1) == 0)
          {
            v204 = __nwlog_obj();
            if (os_log_type_enabled(v204, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136446978;
              *(_QWORD *)&buf[4] = "nw_protocol_ohttp_process_response";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = a1 + 349;
              *(_WORD *)&buf[22] = 2080;
              v282 = (uint64_t)" ";
              *(_WORD *)v283 = 2048;
              *(_QWORD *)&v283[2] = v38;
              _os_log_impl(&dword_182FBE000, v204, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sFailed to find context for ID %llu", buf, 0x2Au);
            }
          }
          v196 = v262;
          if (gLogDatapath)
          {
            v249 = __nwlog_obj();
            if (os_log_type_enabled(v249, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_protocol_finalize_temp_frame_array";
              _os_log_impl(&dword_182FBE000, v249, OS_LOG_TYPE_DEBUG, "%{public}s called", buf, 0xCu);
            }
          }
          *(_QWORD *)buf = MEMORY[0x1E0C809B0];
          *(_QWORD *)&buf[8] = 0x40000000;
          *(_QWORD *)&buf[16] = ___ZL37nw_protocol_finalize_temp_frame_arrayP16nw_frame_array_sb_block_invoke_28754;
          v282 = (uint64_t)&__block_descriptor_tmp_15_28755;
          *(_QWORD *)v283 = a1 + 328;
          v283[8] = 1;
          v205 = *v261;
          do
          {
            if (!v205)
              break;
            v206 = *(_QWORD *)(v205 + 32);
            v207 = (*(uint64_t (**)(_BYTE *))&buf[16])(buf);
            v205 = v206;
          }
          while ((v207 & 1) != 0);
LABEL_404:
          if (v196)
          {
            v192 = v196;
LABEL_406:
            free(v192);
          }
          goto LABEL_407;
        }
      }
      else
      {
        v40 = v17;
      }
      if ((*((_BYTE *)v40 + 228) & 1) != 0)
      {
        if ((v18 & 1) == 0)
        {
          v195 = __nwlog_obj();
          if (os_log_type_enabled(v195, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446978;
            *(_QWORD *)&buf[4] = "nw_protocol_ohttp_process_response";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = a1 + 349;
            *(_WORD *)&buf[22] = 2080;
            v282 = (uint64_t)" ";
            *(_WORD *)v283 = 2048;
            *(_QWORD *)&v283[2] = v38;
            _os_log_impl(&dword_182FBE000, v195, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sContext ID %llu is used for standalone AEAD, cannot receive responses", buf, 0x2Au);
          }
        }
        v196 = v262;
        if (gLogDatapath)
        {
          v247 = __nwlog_obj();
          if (os_log_type_enabled(v247, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_protocol_finalize_temp_frame_array";
            _os_log_impl(&dword_182FBE000, v247, OS_LOG_TYPE_DEBUG, "%{public}s called", buf, 0xCu);
          }
        }
        *(_QWORD *)buf = MEMORY[0x1E0C809B0];
        *(_QWORD *)&buf[8] = 0x40000000;
        *(_QWORD *)&buf[16] = ___ZL37nw_protocol_finalize_temp_frame_arrayP16nw_frame_array_sb_block_invoke_28754;
        v282 = (uint64_t)&__block_descriptor_tmp_15_28755;
        *(_QWORD *)v283 = a1 + 328;
        v283[8] = 1;
        v197 = *v261;
        do
        {
          if (!v197)
            break;
          v198 = *(_QWORD *)(v197 + 32);
          v199 = (*(uint64_t (**)(_BYTE *))&buf[16])(buf);
          v197 = v198;
        }
        while ((v199 & 1) != 0);
        goto LABEL_404;
      }
      if ((v18 & 4) != 0 && !v40[23])
      {
        if (v40[25])
        {
          if ((v18 & 1) == 0)
          {
            v211 = __nwlog_obj();
            if (os_log_type_enabled(v211, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136446722;
              *(_QWORD *)&buf[4] = "nw_protocol_ohttp_process_response";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = a1 + 349;
              *(_WORD *)&buf[22] = 2080;
              v282 = (uint64_t)" ";
              _os_log_impl(&dword_182FBE000, v211, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sNo nonce parsed before non-initial chunk", buf, 0x20u);
            }
          }
          v196 = v262;
          if (gLogDatapath)
          {
            v250 = __nwlog_obj();
            if (os_log_type_enabled(v250, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_protocol_finalize_temp_frame_array";
              _os_log_impl(&dword_182FBE000, v250, OS_LOG_TYPE_DEBUG, "%{public}s called", buf, 0xCu);
            }
          }
          *(_QWORD *)buf = MEMORY[0x1E0C809B0];
          *(_QWORD *)&buf[8] = 0x40000000;
          *(_QWORD *)&buf[16] = ___ZL37nw_protocol_finalize_temp_frame_arrayP16nw_frame_array_sb_block_invoke_28754;
          v282 = (uint64_t)&__block_descriptor_tmp_15_28755;
          *(_QWORD *)v283 = a1 + 328;
          v283[8] = 1;
          v212 = *v261;
          do
          {
            if (!v212)
              break;
            v213 = *(_QWORD *)(v212 + 32);
            v214 = (*(uint64_t (**)(_BYTE *))&buf[16])(buf);
            v212 = v213;
          }
          while ((v214 & 1) != 0);
          goto LABEL_404;
        }
        v42 = v21;
        cchpke_params_x25519_AESGCM128_HKDF_SHA256();
        v43 = v20;
        v44 = cchpke_params_sizeof_aead_key();
        v45 = cchpke_params_sizeof_aead_nonce();
        if (v44 <= v45)
          v46 = v45;
        else
          v46 = v44;
        v20 = v43 - v46;
        if (v43 < v46)
        {
          if ((*(_BYTE *)(a1 + 348) & 1) == 0)
          {
            v215 = __nwlog_obj();
            if (os_log_type_enabled(v215, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136446722;
              *(_QWORD *)&buf[4] = "nw_protocol_ohttp_process_response";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = a1 + 349;
              *(_WORD *)&buf[22] = 2080;
              v282 = (uint64_t)" ";
              _os_log_impl(&dword_182FBE000, v215, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sChunk is too small for nonce length", buf, 0x20u);
            }
          }
          v196 = v262;
          if (gLogDatapath)
          {
            v251 = __nwlog_obj();
            if (os_log_type_enabled(v251, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_protocol_finalize_temp_frame_array";
              _os_log_impl(&dword_182FBE000, v251, OS_LOG_TYPE_DEBUG, "%{public}s called", buf, 0xCu);
            }
          }
          *(_QWORD *)buf = MEMORY[0x1E0C809B0];
          *(_QWORD *)&buf[8] = 0x40000000;
          *(_QWORD *)&buf[16] = ___ZL37nw_protocol_finalize_temp_frame_arrayP16nw_frame_array_sb_block_invoke_28754;
          v282 = (uint64_t)&__block_descriptor_tmp_15_28755;
          *(_QWORD *)v283 = a1 + 328;
          v283[8] = 1;
          v216 = *v261;
          do
          {
            if (!v216)
              break;
            v217 = *(_QWORD *)(v216 + 32);
            v218 = (*(uint64_t (**)(_BYTE *))&buf[16])(buf);
            v216 = v217;
          }
          while ((v218 & 1) != 0);
          goto LABEL_404;
        }
        if (!v46)
        {
          v150 = __nwlog_obj();
          os_log_type_enabled(v150, OS_LOG_TYPE_ERROR);
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "strict_calloc";
          v151 = (void *)_os_log_send_and_compose_impl();
          if (__nwlog_abort((uint64_t)v151))
            goto LABEL_537;
          free(v151);
          v20 = v43;
        }
        v47 = malloc_type_calloc(1uLL, v46, 0xEAFB8F1AuLL);
        if (!v47)
        {
          v259 = v20;
          v152 = __nwlog_obj();
          os_log_type_enabled(v152, OS_LOG_TYPE_ERROR);
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)&buf[4] = "strict_calloc";
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = 1;
          *(_WORD *)&buf[22] = 2048;
          v282 = v46;
          v153 = (void *)_os_log_send_and_compose_impl();
          if (__nwlog_abort((uint64_t)v153))
            goto LABEL_537;
          free(v153);
          v20 = v259;
        }
        v40[23] = v47;
        memcpy(v47, &v5[v42], v46);
        v40[24] = v46;
        v21 = v46 + v42;
        v17 = (_QWORD *)(a1 + 64);
      }
      if (!v20)
        goto LABEL_275;
      v266 = v21;
      if ((*(_BYTE *)(a1 + 348) & 1) == 0)
      {
        if (gLogDatapath)
        {
          v115 = __nwlog_obj();
          if (os_log_type_enabled(v115, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136447234;
            *(_QWORD *)&buf[4] = "nw_protocol_ohttp_process_response";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = a1 + 349;
            *(_WORD *)&buf[22] = 2080;
            v282 = (uint64_t)" ";
            *(_WORD *)v283 = 2048;
            *(_QWORD *)&v283[2] = v20;
            *(_WORD *)&v283[10] = 2048;
            *(_QWORD *)&v283[12] = v38;
            _os_log_impl(&dword_182FBE000, v115, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sParsing chunk of length %llu for context %llu", buf, 0x34u);
          }
        }
      }
      if (v40[27])
        v48 = (const char *)v40[27];
      else
        v48 = "message/bhttp";
      size = 0;
      v49 = nw_http_decrypt_chunked_oblivious_response_chunk((uint64_t)&v5[v266], v20, v48, v40[25], v263, v40[14], v40[15], (const void *)v40[12], v40[13], (const void *)v40[23], v40[24], &size);
      if (!v49)
      {
        if ((*(_BYTE *)(a1 + 348) & 1) == 0)
        {
          v200 = __nwlog_obj();
          if (os_log_type_enabled(v200, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446722;
            *(_QWORD *)&buf[4] = "nw_protocol_ohttp_process_response";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = a1 + 349;
            *(_WORD *)&buf[22] = 2080;
            v282 = (uint64_t)" ";
            _os_log_impl(&dword_182FBE000, v200, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sFailed to decrypt oblivious response chunk", buf, 0x20u);
          }
        }
        if (gLogDatapath)
        {
          v248 = __nwlog_obj();
          if (os_log_type_enabled(v248, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_protocol_finalize_temp_frame_array";
            _os_log_impl(&dword_182FBE000, v248, OS_LOG_TYPE_DEBUG, "%{public}s called", buf, 0xCu);
          }
        }
        *(_QWORD *)buf = MEMORY[0x1E0C809B0];
        *(_QWORD *)&buf[8] = 0x40000000;
        *(_QWORD *)&buf[16] = ___ZL37nw_protocol_finalize_temp_frame_arrayP16nw_frame_array_sb_block_invoke_28754;
        v282 = (uint64_t)&__block_descriptor_tmp_15_28755;
        *(_QWORD *)v283 = a1 + 328;
        v283[8] = 1;
        v201 = *v261;
        do
        {
          if (!v201)
            break;
          v202 = *(_QWORD *)(v201 + 32);
          v203 = (*(uint64_t (**)(_BYTE *))&buf[16])(buf);
          v201 = v202;
        }
        while ((v203 & 1) != 0);
        if (v262)
          free(v262);
        goto LABEL_374;
      }
      v50 = (_DWORD *)v49;
      if (size)
      {
        v51 = v20;
        v52 = dispatch_data_create((const void *)v49, size, 0, destructor);
        v53 = v52;
        v54 = v40[26];
        if (v54)
        {
          v40[26] = dispatch_data_create_concat((dispatch_data_t)v40[26], v52);
          dispatch_release(v54);
          if (v53)
            dispatch_release(v53);
          v55 = 0;
        }
        else
        {
          v40[26] = v52;
          v55 = 1;
        }
        v20 = v51;
      }
      else
      {
        if ((*(_BYTE *)(a1 + 348) & 1) == 0)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v56 = gLogObj;
          if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136446722;
            *(_QWORD *)&buf[4] = "nw_protocol_ohttp_process_response";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = a1 + 349;
            *(_WORD *)&buf[22] = 2080;
            v282 = (uint64_t)" ";
            _os_log_impl(&dword_182FBE000, v56, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sSuccessfully read empty chunk", buf, 0x20u);
          }
        }
        free(v50);
        v50 = 0;
        v55 = 0;
      }
      v57 = v40[25];
      v58 = v57 + 1;
      v59 = v57 == -1;
      v60 = v59 << 63 >> 63;
      v40[25] = v58;
      if (v60 == v59 && (v60 & 0x8000000000000000) == 0)
      {
        if (v55)
          goto LABEL_139;
        goto LABEL_170;
      }
      v256 = v20;
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v66 = v40[25];
      *(_DWORD *)buf = 136446978;
      *(_QWORD *)&buf[4] = "nw_protocol_ohttp_process_response";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = "ohttp_context->aead_chunk_index";
      *(_WORD *)&buf[22] = 2048;
      v282 = 1;
      *(_WORD *)v283 = 2048;
      *(_QWORD *)&v283[2] = v66;
      v67 = (char *)_os_log_send_and_compose_impl();
      LOBYTE(v275) = 16;
      LOBYTE(v274[0]) = 0;
      if (__nwlog_fault(v67, &v275, v274))
      {
        if (v275 == 17)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v68 = gLogObj;
          v69 = v275;
          if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v275))
            goto LABEL_167;
          v70 = v40[25];
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_protocol_ohttp_process_response";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = "ohttp_context->aead_chunk_index";
          *(_WORD *)&buf[22] = 2048;
          v282 = 1;
          *(_WORD *)v283 = 2048;
          *(_QWORD *)&v283[2] = v70;
          v71 = v68;
          v72 = v69;
          v73 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_166:
          _os_log_impl(&dword_182FBE000, v71, v72, v73, buf, 0x2Au);
          goto LABEL_167;
        }
        if (!LOBYTE(v274[0]))
        {
          v79 = __nwlog_obj();
          v80 = v275;
          if (!os_log_type_enabled(v79, (os_log_type_t)v275))
            goto LABEL_167;
          v81 = v40[25];
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_protocol_ohttp_process_response";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = "ohttp_context->aead_chunk_index";
          *(_WORD *)&buf[22] = 2048;
          v282 = 1;
          *(_WORD *)v283 = 2048;
          *(_QWORD *)&v283[2] = v81;
          v71 = v79;
          v72 = v80;
          v73 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
          goto LABEL_166;
        }
        v74 = (char *)__nw_create_backtrace_string();
        v75 = __nwlog_obj();
        v76 = v275;
        v77 = os_log_type_enabled(v75, (os_log_type_t)v275);
        if (!v74)
        {
          if (!v77)
            goto LABEL_167;
          v83 = v40[25];
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_protocol_ohttp_process_response";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = "ohttp_context->aead_chunk_index";
          *(_WORD *)&buf[22] = 2048;
          v282 = 1;
          *(_WORD *)v283 = 2048;
          *(_QWORD *)&v283[2] = v83;
          v71 = v75;
          v72 = v76;
          v73 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
          goto LABEL_166;
        }
        if (v77)
        {
          v78 = v40[25];
          *(_DWORD *)buf = 136447234;
          *(_QWORD *)&buf[4] = "nw_protocol_ohttp_process_response";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = "ohttp_context->aead_chunk_index";
          *(_WORD *)&buf[22] = 2048;
          v282 = 1;
          *(_WORD *)v283 = 2048;
          *(_QWORD *)&v283[2] = v78;
          *(_WORD *)&v283[10] = 2082;
          *(_QWORD *)&v283[12] = v74;
          _os_log_impl(&dword_182FBE000, v75, v76, "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
        }
        free(v74);
      }
LABEL_167:
      if (v67)
        free(v67);
      v40[25] = -1;
      v20 = v256;
      if (v55)
      {
LABEL_139:
        v61 = 0;
        v62 = size;
        v21 = v266;
        if (!v40[27])
          goto LABEL_176;
        goto LABEL_140;
      }
LABEL_170:
      v84 = v40[26];
      v21 = v266;
      if (!v84)
      {
        v61 = 0;
        v17 = (_QWORD *)(a1 + 64);
        if (!v40[27])
          goto LABEL_255;
        goto LABEL_187;
      }
      v62 = dispatch_data_get_size(v84);
      if (!v62)
      {
        v120 = __nwlog_obj();
        os_log_type_enabled(v120, OS_LOG_TYPE_ERROR);
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "strict_malloc";
        v121 = (void *)_os_log_send_and_compose_impl();
        if (__nwlog_abort((uint64_t)v121))
          goto LABEL_537;
        free(v121);
        v21 = v266;
      }
      v85 = malloc_type_malloc(v62, 0xF2B69DE5uLL);
      if (!v85)
      {
        v122 = __nwlog_obj();
        os_log_type_enabled(v122, OS_LOG_TYPE_ERROR);
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "strict_malloc";
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v62;
        v123 = (void *)_os_log_send_and_compose_impl();
        if (__nwlog_abort((uint64_t)v123))
          goto LABEL_537;
        free(v123);
        nw_dispatch_data_copyout(v40[26], 0, v62);
        v61 = 0;
        v17 = (_QWORD *)(a1 + 64);
        v21 = v266;
        if (!v40[27])
        {
LABEL_255:
          v124 = v20;
          __nwlog_obj();
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_protocol_ohttp_parse_binary_http_response";
          v125 = (char *)_os_log_send_and_compose_impl();
          LOBYTE(v275) = 16;
          LOBYTE(v274[0]) = 0;
          if (!__nwlog_fault(v125, &v275, v274))
            goto LABEL_269;
          if (v275 != 17)
          {
            if (LOBYTE(v274[0]))
            {
              v131 = v61;
              v132 = (char *)__nw_create_backtrace_string();
              v133 = __nwlog_obj();
              v134 = v275;
              v135 = os_log_type_enabled(v133, (os_log_type_t)v275);
              if (v132)
              {
                if (v135)
                {
                  *(_DWORD *)buf = 136446466;
                  *(_QWORD *)&buf[4] = "nw_protocol_ohttp_parse_binary_http_response";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = v132;
                  _os_log_impl(&dword_182FBE000, v133, v134, "%{public}s called with null response_bytes, dumping backtrace:%{public}s", buf, 0x16u);
                }
                free(v132);
                v61 = v131;
                goto LABEL_269;
              }
              v61 = v131;
              if (!v135)
                goto LABEL_269;
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_protocol_ohttp_parse_binary_http_response";
              v128 = v133;
              v129 = v134;
              v130 = "%{public}s called with null response_bytes, no backtrace";
            }
            else
            {
              v136 = __nwlog_obj();
              v137 = v275;
              if (!os_log_type_enabled(v136, (os_log_type_t)v275))
                goto LABEL_269;
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_protocol_ohttp_parse_binary_http_response";
              v128 = v136;
              v129 = v137;
              v130 = "%{public}s called with null response_bytes, backtrace limit exceeded";
            }
LABEL_268:
            _os_log_impl(&dword_182FBE000, v128, v129, v130, buf, 0xCu);
            goto LABEL_269;
          }
          v126 = __nwlog_obj();
          v127 = v275;
          if (os_log_type_enabled(v126, (os_log_type_t)v275))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_protocol_ohttp_parse_binary_http_response";
            v128 = v126;
            v129 = v127;
            v130 = "%{public}s called with null response_bytes";
            goto LABEL_268;
          }
LABEL_269:
          if (v125)
            free(v125);
          v17 = (_QWORD *)(a1 + 64);
          v20 = v124;
LABEL_272:
          v21 = v266;
LABEL_273:
          if (!v61)
            goto LABEL_275;
          goto LABEL_274;
        }
        goto LABEL_187;
      }
      v50 = v85;
      v86 = v40[26];
      v275 = 0;
      v276 = &v275;
      v277 = 0x2000000000;
      v278 = 0;
      v274[0] = 0;
      v274[1] = (size_t)v274;
      v274[2] = 0x2000000000;
      v274[3] = (size_t)v50;
      if (v86)
      {
        *(_QWORD *)buf = MEMORY[0x1E0C809B0];
        *(_QWORD *)&buf[8] = 0x40000000;
        *(_QWORD *)&buf[16] = __nw_dispatch_data_copyout_block_invoke;
        v282 = (uint64_t)&unk_1E14A3448;
        *(_QWORD *)&v283[8] = v274;
        *(_QWORD *)&v283[16] = v62;
        *(_QWORD *)v283 = &v275;
        dispatch_data_apply(v86, buf);
      }
      _Block_object_dispose(v274, 8);
      _Block_object_dispose(&v275, 8);
      v61 = v50;
      if (!v40[27])
      {
LABEL_176:
        if (!v50)
          goto LABEL_255;
        if (!v62)
        {
          v142 = v61;
          v143 = v20;
          __nwlog_obj();
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_protocol_ohttp_parse_binary_http_response";
          v144 = (char *)_os_log_send_and_compose_impl();
          LOBYTE(v275) = 16;
          LOBYTE(v274[0]) = 0;
          if (!__nwlog_fault(v144, &v275, v274))
            goto LABEL_308;
          if (v275 == 17)
          {
            v145 = __nwlog_obj();
            v146 = v275;
            if (os_log_type_enabled(v145, (os_log_type_t)v275))
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_protocol_ohttp_parse_binary_http_response";
              v147 = v145;
              v148 = v146;
              v149 = "%{public}s called with null response_length";
              goto LABEL_307;
            }
            goto LABEL_308;
          }
          if (!LOBYTE(v274[0]))
          {
            v165 = __nwlog_obj();
            v166 = v275;
            if (!os_log_type_enabled(v165, (os_log_type_t)v275))
              goto LABEL_308;
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_protocol_ohttp_parse_binary_http_response";
            v147 = v165;
            v148 = v166;
            v149 = "%{public}s called with null response_length, backtrace limit exceeded";
LABEL_307:
            _os_log_impl(&dword_182FBE000, v147, v148, v149, buf, 0xCu);
            goto LABEL_308;
          }
          v159 = (char *)__nw_create_backtrace_string();
          v160 = __nwlog_obj();
          v161 = v275;
          v162 = os_log_type_enabled(v160, (os_log_type_t)v275);
          if (v159)
          {
            if (v162)
            {
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "nw_protocol_ohttp_parse_binary_http_response";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v159;
              _os_log_impl(&dword_182FBE000, v160, v161, "%{public}s called with null response_length, dumping backtrace:%{public}s", buf, 0x16u);
            }
            free(v159);
            goto LABEL_308;
          }
          if (v162)
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_protocol_ohttp_parse_binary_http_response";
            v147 = v160;
            v148 = v161;
            v149 = "%{public}s called with null response_length, no backtrace";
            goto LABEL_307;
          }
LABEL_308:
          if (v144)
            free(v144);
          v17 = (_QWORD *)(a1 + 64);
          v20 = v143;
          v21 = v266;
          v61 = v142;
          if (!v142)
            goto LABEL_275;
LABEL_274:
          free(v61);
          goto LABEL_275;
        }
        if (!v40[10])
        {
          v275 = 0;
          LOBYTE(v274[0]) = 0;
          v93 = nw_http_copy_metadata_from_binary_message(v50, v62, &v275, (BOOL *)v274);
          if (!v93)
          {
            if ((*(_BYTE *)(a1 + 348) & 1) == 0)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v112 = gLogObj;
              if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 136446722;
                *(_QWORD *)&buf[4] = "nw_protocol_ohttp_parse_binary_http_response";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = a1 + 349;
                *(_WORD *)&buf[22] = 2080;
                v282 = (uint64_t)" ";
                _os_log_impl(&dword_182FBE000, v112, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sUnable to parse metadata", buf, 0x20u);
              }
            }
            v17 = (_QWORD *)(a1 + 64);
            goto LABEL_272;
          }
          v40[10] = v93;
          v94 = v275;
          v87 = *((_BYTE *)v40 + 228) & 0xF7 | (8 * LOBYTE(v274[0]));
          *((_BYTE *)v40 + 228) = v87;
          *((_DWORD *)v40 + 56) = 4;
          v40[21] = v94;
          v40[22] = 0;
          if ((v87 & 8) != 0)
            goto LABEL_194;
LABEL_180:
          v257 = v20;
          v88 = v40[21];
          v275 = v88;
          if (v88)
          {
            v89 = malloc_type_calloc(1uLL, v88, 0xEAFB8F1AuLL);
            if (v89)
            {
              if (!nw_http_fillout_body_from_binary_message(v50, v62, (char *)v89, v88, &v275))
              {
                free(v89);
LABEL_235:
                v17 = (_QWORD *)(a1 + 64);
                v20 = v257;
                if ((*(_BYTE *)(a1 + 348) & 1) == 0)
                {
                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                  networkd_settings_init();
                  v113 = gLogObj;
                  if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)buf = 136446722;
                    *(_QWORD *)&buf[4] = "nw_protocol_ohttp_parse_binary_http_response";
                    *(_WORD *)&buf[12] = 2082;
                    *(_QWORD *)&buf[14] = a1 + 349;
                    *(_WORD *)&buf[22] = 2080;
                    v282 = (uint64_t)" ";
                    _os_log_impl(&dword_182FBE000, v113, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sFailed to fill out body content", buf, 0x20u);
                  }
                }
                goto LABEL_272;
              }
            }
            else
            {
              v163 = __nwlog_obj();
              os_log_type_enabled(v163, OS_LOG_TYPE_ERROR);
              *(_DWORD *)buf = 136446722;
              *(_QWORD *)&buf[4] = "strict_calloc";
              *(_WORD *)&buf[12] = 2048;
              *(_QWORD *)&buf[14] = 1;
              *(_WORD *)&buf[22] = 2048;
              v282 = v88;
              v164 = (void *)_os_log_send_and_compose_impl();
              if (__nwlog_abort((uint64_t)v164))
                goto LABEL_537;
              free(v164);
              if (!nw_http_fillout_body_from_binary_message(v50, v62, 0, v275, &v275))
                goto LABEL_235;
            }
            v40[20] = v89;
            v87 = *((_BYTE *)v40 + 228);
          }
          v254 = v61;
          v87 |= 4u;
          *((_BYTE *)v40 + 228) = v87;
          v90 = v40[26];
          v17 = (_QWORD *)(a1 + 64);
          v20 = v257;
          if (v90)
          {
            dispatch_release(v90);
            v40[26] = 0;
            v87 = *((_BYTE *)v40 + 228);
          }
LABEL_229:
          v21 = v266;
LABEL_243:
          *((_BYTE *)v40 + 228) = v87 | 0x20;
          v61 = v254;
          if (v254)
            goto LABEL_274;
          goto LABEL_275;
        }
        v87 = *((_BYTE *)v40 + 228);
        if ((v87 & 8) == 0)
          goto LABEL_180;
LABEL_194:
        v254 = v61;
        if ((v87 & 4) != 0)
        {
          v17 = (_QWORD *)(a1 + 64);
        }
        else
        {
          v258 = v20;
          v95 = v62;
          v252 = v62;
          do
          {
            v280 = 0;
            v275 = 0;
            v274[0] = 0;
            v279 = 0;
            v96 = nw_http_access_body_chunk_from_indeterminate_binary_message(v50, v95, (v87 & 0x10) == 0, &v275, &v280, (char **)v274, &v279);
            v50 = (_DWORD *)v274[0];
            v95 = v279;
            if (v280)
            {
              *((_BYTE *)v40 + 228) |= 4u;
              v97 = nw_http_copy_trailer_fields_from_indeterminate_binary_message((char *)v50, v95);
              if (v97)
              {
                v98 = (void *)v97;
                if ((*(_BYTE *)(a1 + 348) & 1) == 0)
                {
                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                  networkd_settings_init();
                  v99 = gLogObj;
                  if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)buf = 136446722;
                    *(_QWORD *)&buf[4] = "nw_protocol_ohttp_parse_binary_http_response";
                    *(_WORD *)&buf[12] = 2082;
                    *(_QWORD *)&buf[14] = a1 + 349;
                    *(_WORD *)&buf[22] = 2080;
                    v282 = (uint64_t)" ";
                    _os_log_impl(&dword_182FBE000, v99, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sReceived trailer fields from binary HTTP", buf, 0x20u);
                  }
                }
                nw_http_metadata_set_trailer_fields((void *)v40[10], v98);
                os_release(v98);
              }
            }
            v100 = v275;
            if (v280 || v275)
            {
              *((_BYTE *)v40 + 228) |= 0x10u;
              if (v96)
              {
                if (v100)
                {
                  v101 = (void *)v40[20];
                  if (v101)
                  {
                    v102 = v40[21];
                    v103 = v102 + v100;
                    v40[21] = v102 + v100;
                    if (!(v102 + v100))
                    {
                      v106 = __nwlog_obj();
                      os_log_type_enabled(v106, OS_LOG_TYPE_ERROR);
                      *(_DWORD *)buf = 136446210;
                      *(_QWORD *)&buf[4] = "_strict_reallocf";
                      v107 = (void *)_os_log_send_and_compose_impl();
                      if (__nwlog_abort((uint64_t)v107))
                        goto LABEL_537;
                      free(v107);
                      v101 = (void *)v40[20];
                    }
                    v104 = (char *)reallocf(v101, v103);
                    if (!v104)
                    {
                      v264 = __nwlog_obj();
                      os_log_type_enabled(v264, OS_LOG_TYPE_ERROR);
                      *(_DWORD *)buf = 136446466;
                      *(_QWORD *)&buf[4] = "_strict_reallocf";
                      *(_WORD *)&buf[12] = 2048;
                      *(_QWORD *)&buf[14] = v103;
                      v108 = (void *)_os_log_send_and_compose_impl();
                      if (__nwlog_abort((uint64_t)v108))
                        goto LABEL_537;
                      free(v108);
                    }
                    v40[20] = v104;
                    memcpy(&v104[v102], v96, v275);
                    v62 = v252;
                  }
                  else
                  {
                    v40[21] = v100;
                    v105 = malloc_type_malloc(v100, 0xF2B69DE5uLL);
                    if (!v105)
                    {
                      v265 = __nwlog_obj();
                      os_log_type_enabled(v265, OS_LOG_TYPE_ERROR);
                      *(_DWORD *)buf = 136446466;
                      *(_QWORD *)&buf[4] = "strict_malloc";
                      *(_WORD *)&buf[12] = 2048;
                      *(_QWORD *)&buf[14] = v100;
                      v109 = (void *)_os_log_send_and_compose_impl();
                      if (__nwlog_abort((uint64_t)v109))
                        goto LABEL_537;
                      free(v109);
                    }
                    v40[20] = v105;
                    memcpy(v105, v96, v275);
                  }
                }
              }
            }
            v87 = *((_BYTE *)v40 + 228);
          }
          while ((v87 & 4) == 0 && v50 && v95);
          if ((*((_BYTE *)v40 + 228) & 4) == 0)
          {
            v17 = (_QWORD *)(a1 + 64);
            v20 = v258;
            v21 = v266;
            if (v95)
            {
              if (v62 > v95)
              {
                subrange = dispatch_data_create_subrange((dispatch_data_t)v40[26], v62 - v95, v95);
                v111 = v40[26];
                if (v111)
                  dispatch_release(v111);
                v40[26] = subrange;
                v87 = *((_BYTE *)v40 + 228) | 0x10;
                goto LABEL_229;
              }
              goto LABEL_243;
            }
LABEL_240:
            v114 = v40[26];
            if (v114)
            {
              dispatch_release(v114);
              v40[26] = 0;
              v87 = *((_BYTE *)v40 + 228);
            }
            v87 |= 0x10u;
            goto LABEL_243;
          }
          v17 = (_QWORD *)(a1 + 64);
          v20 = v258;
        }
        v21 = v266;
        goto LABEL_240;
      }
LABEL_140:
      v63 = (void *)v40[20];
      if (v63)
      {
        if (v50)
        {
          v253 = v61;
          v64 = v40[21];
          v40[21] = v64 + v62;
          if (!(v64 + v62))
          {
            v154 = v20;
            v155 = __nwlog_obj();
            os_log_type_enabled(v155, OS_LOG_TYPE_ERROR);
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "_strict_reallocf";
            v156 = (void *)_os_log_send_and_compose_impl();
            if (__nwlog_abort((uint64_t)v156))
              goto LABEL_537;
            free(v156);
            v63 = (void *)v40[20];
            v20 = v154;
          }
          v65 = (char *)reallocf(v63, v64 + v62);
          if (!v65)
          {
            v157 = __nwlog_obj();
            os_log_type_enabled(v157, OS_LOG_TYPE_ERROR);
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "_strict_reallocf";
            *(_WORD *)&buf[12] = 2048;
            *(_QWORD *)&buf[14] = v64 + v62;
            v158 = (void *)_os_log_send_and_compose_impl();
            if (__nwlog_abort((uint64_t)v158))
              goto LABEL_537;
            free(v158);
          }
          v40[20] = v65;
          memcpy(&v65[v64], v50, v62);
          v17 = (_QWORD *)(a1 + 64);
          v21 = v266;
          v61 = v253;
          goto LABEL_187;
        }
      }
      else
      {
        if (v61)
        {
          v40[20] = v61;
          v40[21] = v62;
        }
        else if (v50)
        {
          v40[21] = v62;
          if (!v62)
          {
            v167 = __nwlog_obj();
            os_log_type_enabled(v167, OS_LOG_TYPE_ERROR);
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "strict_malloc";
            v168 = (void *)_os_log_send_and_compose_impl();
            if (__nwlog_abort((uint64_t)v168))
              goto LABEL_537;
            free(v168);
          }
          v82 = malloc_type_malloc(v62, 0xF2B69DE5uLL);
          if (!v82)
          {
            v260 = v20;
            v169 = __nwlog_obj();
            os_log_type_enabled(v169, OS_LOG_TYPE_ERROR);
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "strict_malloc";
            *(_WORD *)&buf[12] = 2048;
            *(_QWORD *)&buf[14] = v62;
            v170 = (void *)_os_log_send_and_compose_impl();
            if (__nwlog_abort((uint64_t)v170))
              goto LABEL_537;
            free(v170);
            v20 = v260;
          }
          v40[20] = v82;
          memcpy(v82, v50, v62);
          v61 = 0;
          v17 = (_QWORD *)(a1 + 64);
          v21 = v266;
          goto LABEL_187;
        }
        v61 = 0;
      }
      v17 = (_QWORD *)(a1 + 64);
LABEL_187:
      v91 = v40[26];
      if (v91)
      {
        dispatch_release(v91);
        v40[26] = 0;
      }
      *((_DWORD *)v40 + 56) = 4;
      v40[22] = 0;
      v92 = *((_BYTE *)v40 + 228);
      *((_BYTE *)v40 + 228) = v92 | 0x20;
      if (!v263)
        goto LABEL_273;
      *((_BYTE *)v40 + 228) = v92 | 0x24;
      if (v61)
        goto LABEL_274;
LABEL_275:
      v138 = v21 + v20;
      v275 = 0;
      v276 = &v275;
      v277 = 0x2000000000;
      LODWORD(v278) = v138;
      *(_QWORD *)buf = MEMORY[0x1E0C809B0];
      *(_QWORD *)&buf[8] = 0x40000000;
      *(_QWORD *)&buf[16] = ___ZL45nw_protocol_finalize_partial_temp_frame_arrayP16nw_frame_array_sjP11nw_protocolb_block_invoke;
      v282 = (uint64_t)&unk_1E149F460;
      v2 = (uint64_t *)(a1 + 328);
      *(_QWORD *)v283 = &v275;
      *(_QWORD *)&v283[8] = a1 + 328;
      v284 = 1;
      *(_QWORD *)&v283[16] = a1;
      v139 = *(_QWORD *)(a1 + 328);
      do
      {
        if (!v139)
          break;
        v140 = *(_QWORD *)(v139 + 32);
        v141 = (*(uint64_t (**)(_BYTE *))&buf[16])(buf);
        v139 = v140;
      }
      while ((v141 & 1) != 0);
      _Block_object_dispose(&v275, 8);
      v5 += v138;
      v3 -= v138;
      v6 = v262;
      if (!v3)
        goto LABEL_460;
    }
  }
}

uint64_t ___ZL34nw_protocol_ohttp_process_responseP17nw_protocol_ohttp_block_invoke(uint64_t a1, uint64_t a2)
{
  const void *v3;
  size_t __n;

  LODWORD(__n) = 0;
  v3 = (const void *)nw_frame_unclaimed_bytes(a2, &__n);
  memcpy((void *)(*(_QWORD *)(a1 + 40) + *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24)), v3, __n);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) += __n;
  return 1;
}

BOOL ___ZL45nw_protocol_finalize_partial_temp_frame_arrayP16nw_frame_array_sjP11nw_protocolb_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  _QWORD *v9;

  v5 = nw_frame_unclaimed_length((_DWORD *)a2);
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v7 = *(_DWORD *)(v6 + 24);
  if (v7 <= v5)
  {
    nw_frame_claim(a2, v4, *(_DWORD *)(v6 + 24), 0);
  }
  else
  {
    *(_DWORD *)(v6 + 24) = v7 - v5;
    v8 = *(_QWORD *)(a2 + 32);
    v9 = *(_QWORD **)(a2 + 40);
    if (v8)
    {
      *(_QWORD *)(v8 + 40) = v9;
      v9 = *(_QWORD **)(a2 + 40);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) = v9;
    }
    *v9 = v8;
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 40) = 0;
    nw_frame_finalize(a2);
  }
  return v7 > v5;
}

uint64_t ___ZL37nw_protocol_finalize_temp_frame_arrayP16nw_frame_array_sb_block_invoke_28754(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(a2 + 32);
  v3 = *(_QWORD **)(a2 + 40);
  if (v2)
  {
    *(_QWORD *)(v2 + 40) = v3;
    v3 = *(_QWORD **)(a2 + 40);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) = v3;
  }
  *v3 = v2;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  nw_frame_finalize(a2);
  return 1;
}

void nw_protocol_ohttp_deliver_response(uint64_t a1, uint64_t a2)
{
  char *v4;
  _QWORD *v5;
  NSObject *v6;
  int v7;
  const char *v8;
  NSObject *v9;
  os_log_type_t v10;
  uint32_t v11;
  uint64_t v12;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  const char *v16;
  char *backtrace_string;
  _BOOL4 v18;
  char *v19;
  _BOOL4 v20;
  char v21;
  os_log_type_t type[8];
  os_log_type_t *v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE buf[24];
  const char *v27;
  os_log_type_t *v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_ohttp_deliver_response";
    v13 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    v21 = 0;
    if (!__nwlog_fault(v13, type, &v21))
      goto LABEL_46;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      v14 = __nwlog_obj();
      v15 = type[0];
      if (!os_log_type_enabled(v14, type[0]))
        goto LABEL_46;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_ohttp_deliver_response";
      v16 = "%{public}s called with null ohttp";
      goto LABEL_45;
    }
    if (!v21)
    {
      v14 = __nwlog_obj();
      v15 = type[0];
      if (!os_log_type_enabled(v14, type[0]))
        goto LABEL_46;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_ohttp_deliver_response";
      v16 = "%{public}s called with null ohttp, backtrace limit exceeded";
      goto LABEL_45;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v14 = __nwlog_obj();
    v15 = type[0];
    v18 = os_log_type_enabled(v14, type[0]);
    if (!backtrace_string)
    {
      if (!v18)
        goto LABEL_46;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_ohttp_deliver_response";
      v16 = "%{public}s called with null ohttp, no backtrace";
      goto LABEL_45;
    }
    if (v18)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_protocol_ohttp_deliver_response";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = backtrace_string;
      _os_log_impl(&dword_182FBE000, v14, v15, "%{public}s called with null ohttp, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(backtrace_string);
LABEL_46:
    if (!v13)
      return;
    goto LABEL_47;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_ohttp_deliver_response";
    v13 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    v21 = 0;
    if (!__nwlog_fault(v13, type, &v21))
      goto LABEL_46;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      v14 = __nwlog_obj();
      v15 = type[0];
      if (!os_log_type_enabled(v14, type[0]))
        goto LABEL_46;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_ohttp_deliver_response";
      v16 = "%{public}s called with null ohttp_context";
      goto LABEL_45;
    }
    if (!v21)
    {
      v14 = __nwlog_obj();
      v15 = type[0];
      if (!os_log_type_enabled(v14, type[0]))
        goto LABEL_46;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_ohttp_deliver_response";
      v16 = "%{public}s called with null ohttp_context, backtrace limit exceeded";
      goto LABEL_45;
    }
    v19 = (char *)__nw_create_backtrace_string();
    v14 = __nwlog_obj();
    v15 = type[0];
    v20 = os_log_type_enabled(v14, type[0]);
    if (v19)
    {
      if (v20)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_protocol_ohttp_deliver_response";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v19;
        _os_log_impl(&dword_182FBE000, v14, v15, "%{public}s called with null ohttp_context, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v19);
      if (!v13)
        return;
LABEL_47:
      free(v13);
      return;
    }
    if (v20)
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_ohttp_deliver_response";
      v16 = "%{public}s called with null ohttp_context, no backtrace";
LABEL_45:
      _os_log_impl(&dword_182FBE000, v14, v15, v16, buf, 0xCu);
      goto LABEL_46;
    }
    goto LABEL_46;
  }
  if (*(_DWORD *)(a2 + 224) == 4)
  {
    if (a1 + 64 == a2)
    {
      v5 = *(_QWORD **)(a1 + 48);
      if (v5)
      {
LABEL_7:
        nw_protocol_input_available(v5, a1);
        return;
      }
    }
    else
    {
      v4 = *(char **)(a1 + 296);
      if (v4)
      {
        *(_QWORD *)type = 0;
        v23 = type;
        v24 = 0x2000000000;
        v25 = 0;
        *(_QWORD *)buf = MEMORY[0x1E0C809B0];
        *(_QWORD *)&buf[8] = 0x40000000;
        *(_QWORD *)&buf[16] = ___ZL42nw_protocol_ohttp_get_protocol_for_contextP17nw_protocol_ohttpP16nw_ohttp_context_block_invoke;
        v27 = (const char *)&unk_1E149F3D0;
        v28 = type;
        v29 = a2;
        nw_hash_table_apply(v4, (uint64_t)buf);
        v5 = (_QWORD *)*((_QWORD *)v23 + 3);
        _Block_object_dispose(type, 8);
        if (v5)
          goto LABEL_7;
      }
    }
    if ((*(_BYTE *)(a1 + 348) & 1) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v12 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = "nw_protocol_ohttp_deliver_response";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = a1 + 349;
        *(_WORD *)&buf[22] = 2080;
        v27 = " ";
        v8 = "%{public}s %{public}s%sfailed to find protocol for delivering responses";
        v9 = v12;
        v10 = OS_LOG_TYPE_ERROR;
        v11 = 32;
        goto LABEL_16;
      }
    }
  }
  else if ((*(_BYTE *)(a1 + 348) & 1) == 0)
  {
    if (gLogDatapath)
    {
      v6 = __nwlog_obj();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      {
        v7 = *(_DWORD *)(a2 + 224);
        *(_DWORD *)buf = 136446978;
        *(_QWORD *)&buf[4] = "nw_protocol_ohttp_deliver_response";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = a1 + 349;
        *(_WORD *)&buf[22] = 2080;
        v27 = " ";
        LOWORD(v28) = 1024;
        *(_DWORD *)((char *)&v28 + 2) = v7;
        v8 = "%{public}s %{public}s%sskipping, state %u";
        v9 = v6;
        v10 = OS_LOG_TYPE_DEBUG;
        v11 = 38;
LABEL_16:
        _os_log_impl(&dword_182FBE000, v9, v10, v8, buf, v11);
      }
    }
  }
}

uint64_t ___ZL34nw_protocol_ohttp_process_responseP17nw_protocol_ohttp_block_invoke_26(uint64_t a1, uint64_t a2)
{
  uint64_t extra;

  extra = nw_hash_node_get_extra(a2);
  if ((*(_BYTE *)(extra + 228) & 0x20) != 0)
  {
    *(_BYTE *)(extra + 228) &= ~0x20u;
    nw_protocol_ohttp_deliver_response(*(_QWORD *)(a1 + 32), extra);
  }
  return 1;
}

BOOL ___ZL42nw_protocol_ohttp_get_protocol_for_contextP17nw_protocol_ohttpP16nw_ohttp_context_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t extra;
  uint64_t v5;

  extra = nw_hash_node_get_extra(a2);
  v5 = *(_QWORD *)(a1 + 40);
  if (v5 == extra)
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = nw_hash_node_get_object(a2);
  return v5 != extra;
}

BOOL ___ZL44nw_protocol_ohttp_get_context_for_context_idP17nw_protocol_ohttpy_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t *extra;
  uint64_t v4;
  uint64_t v5;

  extra = (uint64_t *)nw_hash_node_get_extra(a2);
  v4 = *extra;
  v5 = *(_QWORD *)(a1 + 40);
  if (*extra == v5)
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = extra;
  return v4 != v5;
}

void nw_protocol_ohttp_context_deliver_failure_message(uint64_t a1, uint64_t a2, void *object)
{
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  const char *v8;
  char *backtrace_string;
  _BOOL4 v10;
  char *v11;
  _BOOL4 v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v16 = "nw_protocol_ohttp_context_deliver_failure_message";
    v5 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v13 = 0;
    if (!__nwlog_fault(v5, &type, &v13))
      goto LABEL_32;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v6 = __nwlog_obj();
      v7 = type;
      if (!os_log_type_enabled(v6, type))
        goto LABEL_32;
      *(_DWORD *)buf = 136446210;
      v16 = "nw_protocol_ohttp_context_deliver_failure_message";
      v8 = "%{public}s called with null ohttp_context";
LABEL_31:
      _os_log_impl(&dword_182FBE000, v6, v7, v8, buf, 0xCu);
      goto LABEL_32;
    }
    if (!v13)
    {
      v6 = __nwlog_obj();
      v7 = type;
      if (!os_log_type_enabled(v6, type))
        goto LABEL_32;
      *(_DWORD *)buf = 136446210;
      v16 = "nw_protocol_ohttp_context_deliver_failure_message";
      v8 = "%{public}s called with null ohttp_context, backtrace limit exceeded";
      goto LABEL_31;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v6 = __nwlog_obj();
    v7 = type;
    v10 = os_log_type_enabled(v6, type);
    if (!backtrace_string)
    {
      if (!v10)
        goto LABEL_32;
      *(_DWORD *)buf = 136446210;
      v16 = "nw_protocol_ohttp_context_deliver_failure_message";
      v8 = "%{public}s called with null ohttp_context, no backtrace";
      goto LABEL_31;
    }
    if (v10)
    {
      *(_DWORD *)buf = 136446466;
      v16 = "nw_protocol_ohttp_context_deliver_failure_message";
      v17 = 2082;
      v18 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null ohttp_context, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(backtrace_string);
LABEL_32:
    if (!v5)
      return;
    goto LABEL_33;
  }
  if (object)
  {
    *(_QWORD *)(a2 + 80) = os_retain(object);
    *(_BYTE *)(a2 + 228) |= 4u;
    *(_DWORD *)(a2 + 224) = 4;
    nw_protocol_ohttp_deliver_response(a1, a2);
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_protocol_ohttp_context_deliver_failure_message";
  v5 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (!__nwlog_fault(v5, &type, &v13))
    goto LABEL_32;
  if (type == OS_LOG_TYPE_FAULT)
  {
    v6 = __nwlog_obj();
    v7 = type;
    if (!os_log_type_enabled(v6, type))
      goto LABEL_32;
    *(_DWORD *)buf = 136446210;
    v16 = "nw_protocol_ohttp_context_deliver_failure_message";
    v8 = "%{public}s called with null http_metadata";
    goto LABEL_31;
  }
  if (!v13)
  {
    v6 = __nwlog_obj();
    v7 = type;
    if (!os_log_type_enabled(v6, type))
      goto LABEL_32;
    *(_DWORD *)buf = 136446210;
    v16 = "nw_protocol_ohttp_context_deliver_failure_message";
    v8 = "%{public}s called with null http_metadata, backtrace limit exceeded";
    goto LABEL_31;
  }
  v11 = (char *)__nw_create_backtrace_string();
  v6 = __nwlog_obj();
  v7 = type;
  v12 = os_log_type_enabled(v6, type);
  if (!v11)
  {
    if (!v12)
      goto LABEL_32;
    *(_DWORD *)buf = 136446210;
    v16 = "nw_protocol_ohttp_context_deliver_failure_message";
    v8 = "%{public}s called with null http_metadata, no backtrace";
    goto LABEL_31;
  }
  if (v12)
  {
    *(_DWORD *)buf = 136446466;
    v16 = "nw_protocol_ohttp_context_deliver_failure_message";
    v17 = 2082;
    v18 = v11;
    _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null http_metadata, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v11);
  if (v5)
LABEL_33:
    free(v5);
}

uint64_t ___ZL41nw_protocol_ohttp_deliver_failure_messageP17nw_protocol_ohttpP20nw_protocol_metadata_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t extra;

  extra = nw_hash_node_get_extra(a2);
  nw_protocol_ohttp_context_deliver_failure_message(*(_QWORD *)(a1 + 32), extra, *(void **)(a1 + 40));
  return 1;
}

uint64_t ___ZL31nw_ohttp_mark_failed_with_errorP17nw_protocol_ohttpi_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t extra;
  _QWORD *object;

  extra = nw_hash_node_get_extra(a2);
  object = (_QWORD *)nw_hash_node_get_object(a2);
  *(_DWORD *)(extra + 224) = 6;
  nw_protocol_error(object, *(_QWORD *)(a1 + 32));
  nw_protocol_disconnected(object, *(_QWORD *)(a1 + 32));
  return 1;
}

uint64_t ___ZL40nw_protocol_ohttp_finalize_output_framesP11nw_protocolP16nw_frame_array_s_block_invoke(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  const char *v12;
  NSObject *v13;
  uint32_t v14;
  NSObject *v15;
  char v17;
  uint64_t v18;
  int v19;
  id v20;
  void *v21;
  void *v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  char *v27;
  NSObject *v28;
  os_log_type_t v29;
  const char *v30;
  char *backtrace_string;
  _BOOL4 v32;
  char v33;
  _BYTE buf[24];
  const char *v35;
  unsigned __int8 *v36;
  uint64_t v37;
  unsigned __int8 uu[16];
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v3 = a2[4];
  v4 = (_QWORD *)a2[5];
  if (v3)
  {
    *(_QWORD *)(v3 + 40) = v4;
    v4 = (_QWORD *)a2[5];
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) = v4;
  }
  *v4 = v3;
  a2[4] = 0;
  a2[5] = 0;
  v5 = *(_QWORD *)(a1 + 40);
  if (v5)
  {
    v6 = a2[11];
    if (v6)
    {
      if (v5 + 64 == v6)
      {
        if (*(_QWORD *)(v5 + 48))
          goto LABEL_9;
      }
      else
      {
        v7 = *(char **)(v5 + 296);
        if (v7)
        {
          *(_QWORD *)uu = 0;
          *(_QWORD *)&uu[8] = uu;
          v39 = 0x2000000000;
          v40 = 0;
          *(_QWORD *)buf = MEMORY[0x1E0C809B0];
          *(_QWORD *)&buf[8] = 0x40000000;
          *(_QWORD *)&buf[16] = ___ZL42nw_protocol_ohttp_get_protocol_for_contextP17nw_protocol_ohttpP16nw_ohttp_context_block_invoke;
          v35 = (const char *)&unk_1E149F3D0;
          v36 = uu;
          v37 = v6;
          nw_hash_table_apply(v7, (uint64_t)buf);
          v8 = *(_QWORD *)(*(_QWORD *)&uu[8] + 24);
          _Block_object_dispose(uu, 8);
          if (v8)
          {
LABEL_9:
            v9 = *(_DWORD *)(v6 + 224);
            if ((*(_BYTE *)(v5 + 348) & 2) != 0)
            {
              if (v9 >= 2)
              {
LABEL_11:
                if ((*(_BYTE *)(v5 + 348) & 1) != 0)
                  goto LABEL_20;
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                v10 = gLogObj;
                if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
                  goto LABEL_20;
                v11 = *(_DWORD *)(v6 + 224);
                *(_DWORD *)buf = 136446978;
                *(_QWORD *)&buf[4] = "nw_ohttp_context_finalize_output_frame";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = v5 + 349;
                *(_WORD *)&buf[22] = 2080;
                v35 = " ";
                LOWORD(v36) = 1024;
                *(_DWORD *)((char *)&v36 + 2) = v11;
                v12 = "%{public}s %{public}s%sState is not valid for sending: %u";
                v13 = v10;
                v14 = 38;
LABEL_19:
                _os_log_impl(&dword_182FBE000, v13, OS_LOG_TYPE_ERROR, v12, buf, v14);
LABEL_20:
                nw_frame_finalize((uint64_t)a2);
                return 1;
              }
            }
            else if (v9)
            {
              goto LABEL_11;
            }
            v17 = *(_BYTE *)(v6 + 228);
            if ((v17 & 2) != 0)
            {
              if ((*(_BYTE *)(v5 + 348) & 1) != 0)
                goto LABEL_20;
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v15 = gLogObj;
              if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
                goto LABEL_20;
              *(_DWORD *)buf = 136446722;
              *(_QWORD *)&buf[4] = "nw_ohttp_context_finalize_output_frame";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v5 + 349;
              *(_WORD *)&buf[22] = 2080;
              v35 = " ";
              v12 = "%{public}s %{public}s%sRequest is already complete";
            }
            else
            {
              memset(uu, 0, sizeof(uu));
              v18 = a2[8];
              if (v18)
              {
                v19 = (*(unsigned __int8 *)(v18 + 66) >> 6) & 1;
                if (*(_QWORD *)(v18 + 48))
                  *(_OWORD *)uu = *(_OWORD *)(v18 + 16);
              }
              else
              {
                LOBYTE(v19) = 0;
              }
              if (*(_QWORD *)(v6 + 216) || (v17 & 1) != 0)
              {
LABEL_50:
                *(_BYTE *)(v6 + 228) = *(_BYTE *)(v6 + 228) & 0xFD | (2 * v19);
                v24 = a2[2];
                v25 = (_QWORD *)a2[3];
                v23 = a2 + 2;
                if (v24)
                {
                  *(_QWORD *)(v24 + 24) = v25;
                  v25 = (_QWORD *)a2[3];
                }
                else
                {
                  *(_QWORD *)(v6 + 16) = v25;
                }
                *v25 = v24;
                *v23 = 0;
                a2[3] = 0;
                v26 = *(_QWORD **)(v6 + 32);
                a2[3] = v26;
                *v26 = a2;
                *(_QWORD *)(v6 + 32) = v23;
                nw_protocol_ohttp_prepare_request(v5, v6);
                return 1;
              }
              if (uuid_is_null(uu))
              {
                if ((*(_BYTE *)(v5 + 348) & 1) != 0)
                  goto LABEL_20;
                v15 = __nwlog_obj();
                if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
                  goto LABEL_20;
                *(_DWORD *)buf = 136446722;
                *(_QWORD *)&buf[4] = "nw_ohttp_context_finalize_output_frame";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = v5 + 349;
                *(_WORD *)&buf[22] = 2080;
                v35 = " ";
                v12 = "%{public}s %{public}s%sNo request UUID in output frame";
                goto LABEL_18;
              }
              v20 = nw_protocol_copy_http_definition();
              v21 = nw_frame_copy_metadata_for_protocol((uint64_t)a2, (uint64_t)v20);
              if (v20)
                os_release(v20);
              if (v21)
              {
                v22 = *(void **)(v6 + 72);
                if (v22)
                {
                  os_release(v21);
                  if (v22 != v21 && !uuid_compare((const unsigned __int8 *)(v6 + 56), uu))
                  {
                    if ((*(_BYTE *)(v5 + 348) & 1) != 0)
                      goto LABEL_20;
                    v15 = __nwlog_obj();
                    if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
                      goto LABEL_20;
                    *(_DWORD *)buf = 136446722;
                    *(_QWORD *)&buf[4] = "nw_ohttp_context_finalize_output_frame";
                    *(_WORD *)&buf[12] = 2082;
                    *(_QWORD *)&buf[14] = v5 + 349;
                    *(_WORD *)&buf[22] = 2080;
                    v35 = " ";
                    v12 = "%{public}s %{public}s%sInvalid request UUID in output frame";
                    goto LABEL_18;
                  }
                }
                else
                {
                  *(_QWORD *)(v6 + 72) = v21;
                  *(_OWORD *)(v6 + 56) = *(_OWORD *)uu;
                }
                goto LABEL_50;
              }
              if ((*(_BYTE *)(v5 + 348) & 1) != 0)
                goto LABEL_20;
              v15 = __nwlog_obj();
              if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
                goto LABEL_20;
              *(_DWORD *)buf = 136446722;
              *(_QWORD *)&buf[4] = "nw_ohttp_context_finalize_output_frame";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v5 + 349;
              *(_WORD *)&buf[22] = 2080;
              v35 = " ";
              v12 = "%{public}s %{public}s%sNo HTTP request in output frame";
            }
LABEL_18:
            v13 = v15;
            v14 = 32;
            goto LABEL_19;
          }
        }
      }
    }
    if ((*(_BYTE *)(v5 + 348) & 1) != 0)
      goto LABEL_20;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v15 = gLogObj;
    if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      goto LABEL_20;
    *(_DWORD *)buf = 136446722;
    *(_QWORD *)&buf[4] = "nw_ohttp_context_finalize_output_frame";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v5 + 349;
    *(_WORD *)&buf[22] = 2080;
    v35 = " ";
    v12 = "%{public}s %{public}s%sReceived invalid output frame";
    goto LABEL_18;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_ohttp_context_finalize_output_frame";
  v27 = (char *)_os_log_send_and_compose_impl();
  uu[0] = 16;
  v33 = 0;
  if (__nwlog_fault(v27, uu, &v33))
  {
    if (uu[0] == 17)
    {
      v28 = __nwlog_obj();
      v29 = uu[0];
      if (!os_log_type_enabled(v28, (os_log_type_t)uu[0]))
        goto LABEL_68;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_ohttp_context_finalize_output_frame";
      v30 = "%{public}s called with null ohttp";
      goto LABEL_67;
    }
    if (!v33)
    {
      v28 = __nwlog_obj();
      v29 = uu[0];
      if (!os_log_type_enabled(v28, (os_log_type_t)uu[0]))
        goto LABEL_68;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_ohttp_context_finalize_output_frame";
      v30 = "%{public}s called with null ohttp, backtrace limit exceeded";
      goto LABEL_67;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v28 = __nwlog_obj();
    v29 = uu[0];
    v32 = os_log_type_enabled(v28, (os_log_type_t)uu[0]);
    if (backtrace_string)
    {
      if (v32)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_ohttp_context_finalize_output_frame";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v28, v29, "%{public}s called with null ohttp, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_68;
    }
    if (v32)
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_ohttp_context_finalize_output_frame";
      v30 = "%{public}s called with null ohttp, no backtrace";
LABEL_67:
      _os_log_impl(&dword_182FBE000, v28, v29, v30, buf, 0xCu);
    }
  }
LABEL_68:
  if (v27)
    free(v27);
  return 1;
}

uint64_t nw_protocol_ohttp_get_context_for_protocol(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t node;
  NSObject *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  const char *v10;
  char *backtrace_string;
  _BOOL4 v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  __int16 v19;
  const char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v16 = "nw_protocol_ohttp_get_context_for_protocol";
    v7 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v13 = 0;
    if (!__nwlog_fault(v7, &type, &v13))
      goto LABEL_25;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v8 = __nwlog_obj();
      v9 = type;
      if (!os_log_type_enabled(v8, type))
        goto LABEL_25;
      *(_DWORD *)buf = 136446210;
      v16 = "nw_protocol_ohttp_get_context_for_protocol";
      v10 = "%{public}s called with null input_protocol";
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v8 = __nwlog_obj();
      v9 = type;
      v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_protocol_ohttp_get_context_for_protocol";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null input_protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_25;
      }
      if (!v12)
      {
LABEL_25:
        if (v7)
          free(v7);
        return 0;
      }
      *(_DWORD *)buf = 136446210;
      v16 = "nw_protocol_ohttp_get_context_for_protocol";
      v10 = "%{public}s called with null input_protocol, no backtrace";
    }
    else
    {
      v8 = __nwlog_obj();
      v9 = type;
      if (!os_log_type_enabled(v8, type))
        goto LABEL_25;
      *(_DWORD *)buf = 136446210;
      v16 = "nw_protocol_ohttp_get_context_for_protocol";
      v10 = "%{public}s called with null input_protocol, backtrace limit exceeded";
    }
    _os_log_impl(&dword_182FBE000, v8, v9, v10, buf, 0xCu);
    goto LABEL_25;
  }
  if (*(_QWORD *)(a1 + 48) == a2)
    return a1 + 64;
  result = *(_QWORD *)(a1 + 296);
  if (!result)
    return result;
  node = nw_hash_table_get_node(result, a2, 8);
  if (node && *(_QWORD *)(a2 + 56) == node)
    return node + 32;
  if ((*(_BYTE *)(a1 + 348) & 1) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v6 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v16 = "nw_protocol_ohttp_get_context_for_protocol";
      v17 = 2082;
      v18 = (char *)(a1 + 349);
      v19 = 2080;
      v20 = " ";
      _os_log_impl(&dword_182FBE000, v6, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sNo valid node found", buf, 0x20u);
      return 0;
    }
  }
  return 0;
}

void nw_protocol_ohttp_output_frame_finalizer(nw_frame *a1, BOOL a2, _QWORD *a3)
{
  uint64_t v4;
  _QWORD *v5;
  void *buffer;

  v4 = *((_QWORD *)a1 + 2);
  v5 = (_QWORD *)*((_QWORD *)a1 + 3);
  if (v4)
  {
    *(_QWORD *)(v4 + 24) = v5;
    v5 = (_QWORD *)*((_QWORD *)a1 + 3);
  }
  else
  {
    a3[2] = v5;
  }
  *v5 = v4;
  *((_QWORD *)a1 + 2) = 0;
  *((_QWORD *)a1 + 3) = 0;
  buffer = (void *)nw_frame_get_buffer((uint64_t)a1, 0);
  if (buffer)
    free(buffer);
  os_release(a1);
}

void nw_protocol_ohttp_input_frame_finalizer(nw_frame *a1, BOOL a2, _QWORD *a3)
{
  uint64_t v4;
  _QWORD *v5;
  void *buffer;

  v4 = *((_QWORD *)a1 + 2);
  v5 = (_QWORD *)*((_QWORD *)a1 + 3);
  if (v4)
  {
    *(_QWORD *)(v4 + 24) = v5;
    v5 = (_QWORD *)*((_QWORD *)a1 + 3);
  }
  else
  {
    a3[6] = v5;
  }
  *v5 = v4;
  *((_QWORD *)a1 + 2) = 0;
  *((_QWORD *)a1 + 3) = 0;
  buffer = (void *)nw_frame_get_buffer((uint64_t)a1, 0);
  if (buffer)
    free(buffer);
  os_release(a1);
}

void nw_protocol_ohttp_destroy(_QWORD *a1)
{
  void *v2;
  void *v3;
  char *v4;
  uint64_t v5;
  os_unfair_lock_s *v6;
  _QWORD v7[5];

  v2 = (void *)a1[38];
  if (v2)
  {
    os_release(v2);
    a1[38] = 0;
  }
  v3 = (void *)a1[39];
  if (v3)
  {
    os_release(v3);
    a1[39] = 0;
  }
  v4 = (char *)a1[37];
  if (v4)
  {
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 0x40000000;
    v7[2] = ___ZL25nw_protocol_ohttp_destroyP17nw_protocol_ohttp_block_invoke;
    v7[3] = &__block_descriptor_tmp_16_29032;
    v7[4] = a1;
    nw_hash_table_apply(v4, (uint64_t)v7);
    v6 = (os_unfair_lock_s *)a1[37];
    if (v6)
    {
      _nw_hash_table_release(v6, v5);
      a1[37] = 0;
    }
  }
  nw_protocol_ohttp_context_destroy(a1 + 8);
  free(a1);
}

uint64_t ___ZL38nw_protocol_ohttp_remove_input_handlerP11nw_protocolS0_b_block_invoke(uint64_t a1, uint64_t a2)
{
  _QWORD *object;

  object = (_QWORD *)nw_hash_node_get_object(a2);
  nw_protocol_disconnected(object, *(_QWORD *)(a1 + 32));
  return 1;
}

void nw_protocol_ohttp_context_destroy_node(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  const char *v8;
  char *backtrace_string;
  _BOOL4 v10;
  char *v11;
  _BOOL4 v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  __int16 v19;
  const char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v16 = "nw_protocol_ohttp_context_destroy_node";
    v5 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v13 = 0;
    if (!__nwlog_fault(v5, &type, &v13))
      goto LABEL_36;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v6 = __nwlog_obj();
      v7 = type;
      if (!os_log_type_enabled(v6, type))
        goto LABEL_36;
      *(_DWORD *)buf = 136446210;
      v16 = "nw_protocol_ohttp_context_destroy_node";
      v8 = "%{public}s called with null ohttp";
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v6 = __nwlog_obj();
      v7 = type;
      v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_protocol_ohttp_context_destroy_node";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null ohttp, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_36:
        if (!v5)
          return;
LABEL_37:
        free(v5);
        return;
      }
      if (!v10)
        goto LABEL_36;
      *(_DWORD *)buf = 136446210;
      v16 = "nw_protocol_ohttp_context_destroy_node";
      v8 = "%{public}s called with null ohttp, no backtrace";
    }
    else
    {
      v6 = __nwlog_obj();
      v7 = type;
      if (!os_log_type_enabled(v6, type))
        goto LABEL_36;
      *(_DWORD *)buf = 136446210;
      v16 = "nw_protocol_ohttp_context_destroy_node";
      v8 = "%{public}s called with null ohttp, backtrace limit exceeded";
    }
LABEL_35:
    _os_log_impl(&dword_182FBE000, v6, v7, v8, buf, 0xCu);
    goto LABEL_36;
  }
  if (a2)
  {
    nw_protocol_ohttp_context_destroy((_QWORD *)(a2 + 32));
    if (!nw_hash_table_remove_node(*(_QWORD *)(a1 + 296), a2) && (*(_BYTE *)(a1 + 348) & 1) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v4 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446722;
        v16 = "nw_protocol_ohttp_context_destroy_node";
        v17 = 2082;
        v18 = (char *)(a1 + 349);
        v19 = 2080;
        v20 = " ";
        _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%snw_hash_table_remove_node failed", buf, 0x20u);
      }
    }
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_protocol_ohttp_context_destroy_node";
  v5 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (!__nwlog_fault(v5, &type, &v13))
    goto LABEL_36;
  if (type == OS_LOG_TYPE_FAULT)
  {
    v6 = __nwlog_obj();
    v7 = type;
    if (!os_log_type_enabled(v6, type))
      goto LABEL_36;
    *(_DWORD *)buf = 136446210;
    v16 = "nw_protocol_ohttp_context_destroy_node";
    v8 = "%{public}s called with null node";
    goto LABEL_35;
  }
  if (!v13)
  {
    v6 = __nwlog_obj();
    v7 = type;
    if (!os_log_type_enabled(v6, type))
      goto LABEL_36;
    *(_DWORD *)buf = 136446210;
    v16 = "nw_protocol_ohttp_context_destroy_node";
    v8 = "%{public}s called with null node, backtrace limit exceeded";
    goto LABEL_35;
  }
  v11 = (char *)__nw_create_backtrace_string();
  v6 = __nwlog_obj();
  v7 = type;
  v12 = os_log_type_enabled(v6, type);
  if (!v11)
  {
    if (!v12)
      goto LABEL_36;
    *(_DWORD *)buf = 136446210;
    v16 = "nw_protocol_ohttp_context_destroy_node";
    v8 = "%{public}s called with null node, no backtrace";
    goto LABEL_35;
  }
  if (v12)
  {
    *(_DWORD *)buf = 136446466;
    v16 = "nw_protocol_ohttp_context_destroy_node";
    v17 = 2082;
    v18 = v11;
    _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null node, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v11);
  if (v5)
    goto LABEL_37;
}

void nw_protocol_ohttp_context_destroy(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  NSObject *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char *v22;
  NSObject *v23;
  os_log_type_t v24;
  const char *v25;
  NSObject *v26;
  char *v27;
  NSObject *v28;
  os_log_type_t v29;
  const char *v30;
  NSObject *v31;
  char *v32;
  NSObject *v33;
  os_log_type_t v34;
  const char *v35;
  char *v36;
  _BOOL4 v37;
  char *v38;
  _BOOL4 v39;
  char *backtrace_string;
  _BOOL4 v41;
  _QWORD v42[2];
  uint64_t (*v43)(_QWORD *);
  void *v44;
  _QWORD *v45;
  char v46;
  os_log_type_t v47;
  os_log_type_t type[4];
  const char *v49;
  __int16 v50;
  char *v51;
  _BYTE buf[24];
  void *v53;
  char v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v2 = (void *)a1[11];
    if (v2)
    {
      xpc_release(v2);
      a1[11] = 0;
    }
    v3 = (void *)a1[16];
    if (v3)
    {
      free(v3);
      a1[16] = 0;
    }
    v4 = (void *)a1[20];
    if (v4)
    {
      free(v4);
      a1[20] = 0;
    }
    v5 = (void *)a1[12];
    if (v5)
    {
      free(v5);
      a1[12] = 0;
    }
    v6 = (void *)a1[14];
    if (v6)
    {
      free(v6);
      a1[14] = 0;
    }
    v7 = (void *)a1[23];
    if (v7)
    {
      free(v7);
      a1[23] = 0;
    }
    v8 = (void *)a1[9];
    if (v8)
    {
      os_release(v8);
      a1[9] = 0;
    }
    v9 = (void *)a1[10];
    if (v9)
    {
      os_release(v9);
      a1[10] = 0;
    }
    v10 = a1[26];
    if (v10)
    {
      dispatch_release(v10);
      a1[26] = 0;
    }
    v11 = (void *)a1[27];
    if (v11)
    {
      free(v11);
      a1[27] = 0;
    }
    if (gLogDatapath)
    {
      v26 = __nwlog_obj();
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_finalize_master_frame_array";
        _os_log_impl(&dword_182FBE000, v26, OS_LOG_TYPE_DEBUG, "%{public}s called", buf, 0xCu);
      }
    }
    v12 = MEMORY[0x1E0C809B0];
    *(_QWORD *)buf = MEMORY[0x1E0C809B0];
    *(_QWORD *)&buf[8] = 0x40000000;
    *(_QWORD *)&buf[16] = ___ZL39nw_protocol_finalize_master_frame_arrayP16nw_frame_array_sb_block_invoke;
    v53 = &__block_descriptor_tmp_18_29020;
    v54 = 0;
    v13 = a1[1];
    do
    {
      if (!v13)
        break;
      v14 = *(_QWORD *)(v13 + 16);
      v15 = (*(uint64_t (**)(_BYTE *))&buf[16])(buf);
      v13 = v14;
    }
    while ((v15 & 1) != 0);
    if (!a1[1])
    {
LABEL_27:
      if (gLogDatapath)
      {
        v31 = __nwlog_obj();
        if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_protocol_finalize_master_frame_array";
          _os_log_impl(&dword_182FBE000, v31, OS_LOG_TYPE_DEBUG, "%{public}s called", buf, 0xCu);
        }
      }
      *(_QWORD *)buf = v12;
      *(_QWORD *)&buf[8] = 0x40000000;
      *(_QWORD *)&buf[16] = ___ZL39nw_protocol_finalize_master_frame_arrayP16nw_frame_array_sb_block_invoke;
      v53 = &__block_descriptor_tmp_18_29020;
      v54 = 0;
      v16 = a1[5];
      do
      {
        if (!v16)
          break;
        v17 = *(_QWORD *)(v16 + 16);
        v18 = (*(uint64_t (**)(_BYTE *))&buf[16])(buf);
        v16 = v17;
      }
      while ((v18 & 1) != 0);
      if (!a1[5])
        goto LABEL_32;
      __nwlog_obj();
      *(_DWORD *)type = 136446210;
      v49 = "nw_protocol_finalize_master_frame_array";
      v32 = (char *)_os_log_send_and_compose_impl();
      v47 = OS_LOG_TYPE_ERROR;
      v46 = 0;
      if (__nwlog_fault(v32, &v47, &v46))
      {
        if (v47 == OS_LOG_TYPE_FAULT)
        {
          v33 = __nwlog_obj();
          v34 = v47;
          if (!os_log_type_enabled(v33, v47))
            goto LABEL_86;
          *(_DWORD *)type = 136446210;
          v49 = "nw_protocol_finalize_master_frame_array";
          v35 = "%{public}s frame array is not empty after finalize";
          goto LABEL_85;
        }
        if (!v46)
        {
          v33 = __nwlog_obj();
          v34 = v47;
          if (!os_log_type_enabled(v33, v47))
            goto LABEL_86;
          *(_DWORD *)type = 136446210;
          v49 = "nw_protocol_finalize_master_frame_array";
          v35 = "%{public}s frame array is not empty after finalize, backtrace limit exceeded";
          goto LABEL_85;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        v33 = __nwlog_obj();
        v34 = v47;
        v41 = os_log_type_enabled(v33, v47);
        if (backtrace_string)
        {
          if (v41)
          {
            *(_DWORD *)type = 136446466;
            v49 = "nw_protocol_finalize_master_frame_array";
            v50 = 2082;
            v51 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v33, v34, "%{public}s frame array is not empty after finalize, dumping backtrace:%{public}s", (uint8_t *)type, 0x16u);
          }
          free(backtrace_string);
          goto LABEL_86;
        }
        if (v41)
        {
          *(_DWORD *)type = 136446210;
          v49 = "nw_protocol_finalize_master_frame_array";
          v35 = "%{public}s frame array is not empty after finalize, no backtrace";
LABEL_85:
          _os_log_impl(&dword_182FBE000, v33, v34, v35, (uint8_t *)type, 0xCu);
        }
      }
LABEL_86:
      if (v32)
        free(v32);
LABEL_32:
      v42[0] = v12;
      v42[1] = 0x40000000;
      v43 = (uint64_t (*)(_QWORD *))___ZL33nw_protocol_ohttp_context_destroyP16nw_ohttp_context_block_invoke;
      v44 = &__block_descriptor_tmp_17_29026;
      v45 = a1;
      v19 = a1[3];
      do
      {
        if (!v19)
          break;
        v20 = *(_QWORD *)(v19 + 16);
        v21 = v43(v42);
        v19 = v20;
      }
      while ((v21 & 1) != 0);
      return;
    }
    __nwlog_obj();
    *(_DWORD *)type = 136446210;
    v49 = "nw_protocol_finalize_master_frame_array";
    v27 = (char *)_os_log_send_and_compose_impl();
    v47 = OS_LOG_TYPE_ERROR;
    v46 = 0;
    if (__nwlog_fault(v27, &v47, &v46))
    {
      if (v47 == OS_LOG_TYPE_FAULT)
      {
        v28 = __nwlog_obj();
        v29 = v47;
        if (!os_log_type_enabled(v28, v47))
          goto LABEL_81;
        *(_DWORD *)type = 136446210;
        v49 = "nw_protocol_finalize_master_frame_array";
        v30 = "%{public}s frame array is not empty after finalize";
        goto LABEL_80;
      }
      if (!v46)
      {
        v28 = __nwlog_obj();
        v29 = v47;
        if (!os_log_type_enabled(v28, v47))
          goto LABEL_81;
        *(_DWORD *)type = 136446210;
        v49 = "nw_protocol_finalize_master_frame_array";
        v30 = "%{public}s frame array is not empty after finalize, backtrace limit exceeded";
        goto LABEL_80;
      }
      v38 = (char *)__nw_create_backtrace_string();
      v28 = __nwlog_obj();
      v29 = v47;
      v39 = os_log_type_enabled(v28, v47);
      if (v38)
      {
        if (v39)
        {
          *(_DWORD *)type = 136446466;
          v49 = "nw_protocol_finalize_master_frame_array";
          v50 = 2082;
          v51 = v38;
          _os_log_impl(&dword_182FBE000, v28, v29, "%{public}s frame array is not empty after finalize, dumping backtrace:%{public}s", (uint8_t *)type, 0x16u);
        }
        free(v38);
        goto LABEL_81;
      }
      if (v39)
      {
        *(_DWORD *)type = 136446210;
        v49 = "nw_protocol_finalize_master_frame_array";
        v30 = "%{public}s frame array is not empty after finalize, no backtrace";
LABEL_80:
        _os_log_impl(&dword_182FBE000, v28, v29, v30, (uint8_t *)type, 0xCu);
      }
    }
LABEL_81:
    if (v27)
      free(v27);
    goto LABEL_27;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_protocol_ohttp_context_destroy";
  v22 = (char *)_os_log_send_and_compose_impl();
  type[0] = OS_LOG_TYPE_ERROR;
  v47 = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v22, type, &v47))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      v23 = __nwlog_obj();
      v24 = type[0];
      if (!os_log_type_enabled(v23, type[0]))
        goto LABEL_76;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_ohttp_context_destroy";
      v25 = "%{public}s called with null ohttp_context";
      goto LABEL_75;
    }
    if (v47 == OS_LOG_TYPE_DEFAULT)
    {
      v23 = __nwlog_obj();
      v24 = type[0];
      if (!os_log_type_enabled(v23, type[0]))
        goto LABEL_76;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_ohttp_context_destroy";
      v25 = "%{public}s called with null ohttp_context, backtrace limit exceeded";
      goto LABEL_75;
    }
    v36 = (char *)__nw_create_backtrace_string();
    v23 = __nwlog_obj();
    v24 = type[0];
    v37 = os_log_type_enabled(v23, type[0]);
    if (v36)
    {
      if (v37)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_protocol_ohttp_context_destroy";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v36;
        _os_log_impl(&dword_182FBE000, v23, v24, "%{public}s called with null ohttp_context, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v36);
      goto LABEL_76;
    }
    if (v37)
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_ohttp_context_destroy";
      v25 = "%{public}s called with null ohttp_context, no backtrace";
LABEL_75:
      _os_log_impl(&dword_182FBE000, v23, v24, v25, buf, 0xCu);
    }
  }
LABEL_76:
  if (v22)
    free(v22);
}

uint64_t ___ZL39nw_protocol_finalize_master_frame_arrayP16nw_frame_array_sb_block_invoke(uint64_t a1, uint64_t a2)
{
  nw_frame_finalize(a2);
  return 1;
}

uint64_t ___ZL33nw_protocol_ohttp_context_destroyP16nw_ohttp_context_block_invoke(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  _QWORD *v4;
  void *buffer;

  v3 = a2[2];
  v4 = (_QWORD *)a2[3];
  if (v3)
  {
    *(_QWORD *)(v3 + 24) = v4;
    v4 = (_QWORD *)a2[3];
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32) = v4;
  }
  *v4 = v3;
  a2[2] = 0;
  a2[3] = 0;
  buffer = (void *)nw_frame_get_buffer((uint64_t)a2, 0);
  if (buffer)
    free(buffer);
  os_release(a2);
  return 1;
}

uint64_t ___ZL25nw_protocol_ohttp_destroyP17nw_protocol_ohttp_block_invoke(uint64_t a1, uint64_t a2)
{
  nw_protocol_ohttp_context_destroy_node(*(_QWORD *)(a1 + 32), a2);
  return 1;
}

void sub_183640D50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)NWConcrete_nw_masque_connection_pair;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void nw_masque_connection_pair_cancel_waiting_timer(NWConcrete_nw_masque_connection_pair *a1)
{
  NWConcrete_nw_masque_connection_pair *v1;
  NWConcrete_nw_masque_connection_pair *v2;
  NSObject *v3;
  char *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  char *backtrace_string;
  os_log_type_t v12;
  _BOOL4 v13;
  os_log_type_t v14;
  char v15;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  char *v20;
  __int16 v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    if (*((_QWORD *)v1 + 35))
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v3 = (id)gLogObj;
      if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
      {
        v4 = (char *)*((_QWORD *)v2 + 2);
        v5 = *((_QWORD *)v2 + 6);
        *(_DWORD *)buf = 136446722;
        v18 = "nw_masque_connection_pair_cancel_waiting_timer";
        v19 = 2114;
        v20 = v4;
        v21 = 2112;
        v22 = v5;
        _os_log_impl(&dword_182FBE000, v3, OS_LOG_TYPE_INFO, "%{public}s %{public}@ cancelling wait timer for %@", buf, 0x20u);
      }

      dispatch_source_cancel(*((dispatch_source_t *)v2 + 35));
      v6 = (void *)*((_QWORD *)v2 + 35);
      *((_QWORD *)v2 + 35) = 0;

    }
    goto LABEL_6;
  }
  __nwlog_obj();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v18 = "nw_masque_connection_pair_cancel_waiting_timer";
  v8 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_masque_connection_pair_cancel_waiting_timer";
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null pair", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          v18 = "nw_masque_connection_pair_cancel_waiting_timer";
          v19 = 2082;
          v20 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null pair, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_masque_connection_pair_cancel_waiting_timer";
        _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null pair, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_masque_connection_pair_cancel_waiting_timer";
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null pair, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_23:
  if (v8)
    free(v8);
LABEL_6:

}

void sub_18364121C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)NWConcrete_nw_masque_listener_pair;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1836416CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void __nw_masque_connection_start_block_invoke(uint64_t a1)
{
  nw_connection_t *v1;
  nw_connection_t v2;
  uint64_t v3;
  nw_connection_t *v4;
  NSObject *v5;
  dispatch_queue_t *v6;
  dispatch_queue_t *v7;
  nw_connection_t v8;
  NSObject *v9;
  _QWORD v10[4];
  dispatch_queue_t *v11;
  _QWORD v12[4];
  nw_connection_t *v13;
  _BYTE buf[24];
  void *v15;
  dispatch_queue_t *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v1 = (nw_connection_t *)*(id *)(a1 + 32);
  v2 = v1[6];
  v3 = MEMORY[0x1E0C809B0];
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = ___ZL35nw_masque_connection_start_on_queueP31NWConcrete_nw_masque_connection_block_invoke;
  v12[3] = &unk_1E14ACFD0;
  v4 = v1;
  v13 = v4;
  nw_connection_set_read_close_handler(v2, v12);
  v5 = v1[6];
  v10[0] = v3;
  v10[1] = 3221225472;
  v10[2] = ___ZL35nw_masque_connection_start_on_queueP31NWConcrete_nw_masque_connection_block_invoke_187;
  v10[3] = &unk_1E14ACF48;
  v6 = v4;
  v11 = v6;
  nw_connection_set_state_changed_handler(v5, v10);
  nw_connection_set_queue(v1[6], v6[4]);
  v7 = v6;
  v8 = v1[6];
  *(_QWORD *)buf = v3;
  *(_QWORD *)&buf[8] = 3221225472;
  *(_QWORD *)&buf[16] = ___ZL37nw_masque_read_inner_request_on_queueP31NWConcrete_nw_masque_connection_block_invoke;
  v15 = &unk_1E14A3048;
  v16 = v7;
  nw_connection_receive_internal(v8, 0, 0, 0, buf);

  nw_connection_start(v1[6]);
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v9 = (id)gLogObj;
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "nw_masque_connection_start_on_queue";
    *(_WORD *)&buf[12] = 2114;
    *(_QWORD *)&buf[14] = v7;
    _os_log_impl(&dword_182FBE000, v9, OS_LOG_TYPE_INFO, "%{public}s %{public}@ started connection", buf, 0x16u);
  }

}

void sub_183641A3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  void *v23;

  _Unwind_Resume(a1);
}

void ___ZL35nw_masque_connection_start_on_queueP31NWConcrete_nw_masque_connection_block_invoke(uint64_t a1)
{
  unsigned __int8 *v2;
  int v3;
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  int v8;
  const char *v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = *(unsigned __int8 **)(a1 + 32);
  v3 = v2[112];
  if (v3 == 200)
  {
    if (gLogDatapath)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      {
        v7 = *(_QWORD *)(a1 + 32);
        v8 = 136446466;
        v9 = "nw_masque_connection_start_on_queue_block_invoke";
        v10 = 2114;
        v11 = v7;
        _os_log_impl(&dword_182FBE000, v6, OS_LOG_TYPE_DEBUG, "%{public}s %{public}@ ignoring in connection read close event", (uint8_t *)&v8, 0x16u);
      }

    }
  }
  else if (v3 != 255)
  {
    if (gLogDatapath)
    {
      __nwlog_obj();
      v4 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
      {
        v5 = *(_QWORD *)(a1 + 32);
        v8 = 136446466;
        v9 = "nw_masque_connection_start_on_queue_block_invoke";
        v10 = 2114;
        v11 = v5;
        _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_DEBUG, "%{public}s %{public}@ in connection read close before proxy connection ready, cancelling", (uint8_t *)&v8, 0x16u);
      }

      v2 = *(unsigned __int8 **)(a1 + 32);
    }
    nw_masque_connection_cancel_on_queue(v2, 0);
  }
}

void ___ZL35nw_masque_connection_start_on_queueP31NWConcrete_nw_masque_connection_block_invoke_187(uint64_t a1, unsigned int a2, void *a3)
{
  id v5;
  NSObject *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  int v12;
  const char *v13;
  __int16 v14;
  uint64_t v15;
  __int16 v16;
  const char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  if (*(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 112) != 255)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v6 = (id)gLogObj;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      if (a2 > 5)
        v7 = "unknown";
      else
        v7 = off_1E149DE10[a2];
      v8 = *(_QWORD *)(a1 + 32);
      v12 = 136446722;
      v13 = "nw_masque_connection_start_on_queue_block_invoke";
      v14 = 2114;
      v15 = v8;
      v16 = 2082;
      v17 = v7;
      _os_log_impl(&dword_182FBE000, v6, OS_LOG_TYPE_INFO, "%{public}s %{public}@ in connection event %{public}s", (uint8_t *)&v12, 0x20u);
    }

    if (a2 == 3)
    {
      v9 = *(_QWORD *)(a1 + 32);
      if (*(_BYTE *)(v9 + 112) == 1)
      {
        *(_BYTE *)(v9 + 112) = 2;
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v10 = (id)gLogObj;
        if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
        {
          v11 = *(_QWORD *)(a1 + 32);
          v12 = 136446466;
          v13 = "nw_masque_connection_start_on_queue_block_invoke";
          v14 = 2114;
          v15 = v11;
          _os_log_impl(&dword_182FBE000, v10, OS_LOG_TYPE_INFO, "%{public}s %{public}@ connection masque connected", (uint8_t *)&v12, 0x16u);
        }

      }
    }
    else if (a2 == 4)
    {
      nw_masque_connection_cancel_on_queue(*(void **)(a1 + 32), v5);
    }
  }

}

void sub_183641DD0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZL37nw_masque_read_inner_request_on_queueP31NWConcrete_nw_masque_connection_block_invoke(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  NSObject *v7;
  id v8;
  NSObject *v9;
  nw_protocol_metadata_t v10;
  id v11;
  id v12;
  _QWORD *v13;
  id v14;
  _QWORD *v15;
  id v16;
  _QWORD *v17;
  id v18;
  _QWORD *v19;
  id v20;
  _QWORD *v21;
  id v22;
  _QWORD *v23;
  id v24;
  _QWORD *v25;
  uint64_t v26;
  os_unfair_lock_s *v27;
  os_unfair_lock_s *v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  NSObject *v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  NSObject *v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  uint64_t v47;
  id v48;
  int has_method;
  void *v50;
  uint64_t v51;
  NSObject *v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  uint64_t v61;
  os_unfair_lock_s *v62;
  os_unfair_lock_s *v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  NSObject *v71;
  id v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t i;
  void *v76;
  void *v77;
  int v78;
  uint64_t v79;
  void *v80;
  void *v81;
  int v82;
  uint64_t v83;
  NSObject *v84;
  uint64_t v85;
  void *v86;
  id v87;
  uint64_t v88;
  void *v89;
  void *v90;
  id v91;
  unsigned int v92;
  void *v93;
  void *v94;
  void *v95;
  void *v96;
  void *v97;
  void *v98;
  void *v99;
  void *v100;
  NSObject *v101;
  NSObject *v102;
  _QWORD *v103;
  NSObject *v104;
  nw_endpoint_t v105;
  id v106;
  _WORD *v107;
  void *options;
  NSObject *v109;
  NSObject *v110;
  NSObject *v111;
  NSObject *v112;
  uint64_t v113;
  uint64_t well_known;
  NSObject *host;
  NSObject *v116;
  _QWORD *v117;
  NSObject *v118;
  os_unfair_lock_s *v119;
  void *v120;
  NSObject *v121;
  uint64_t v122;
  uint64_t v123;
  void *v124;
  NSObject *v125;
  NSObject *v126;
  _QWORD *v127;
  NSObject *v128;
  void *v129;
  NSObject *v130;
  NSObject *v131;
  _QWORD *v132;
  NSObject *v133;
  unsigned __int8 v134;
  void *v135;
  NSObject *metadata_for_response;
  NSObject *v137;
  _QWORD *v138;
  NSObject *v139;
  NSObject *v140;
  uint64_t v141;
  _QWORD *v142;
  NSObject *v143;
  os_unfair_lock_s *v144;
  os_unfair_lock_s *v145;
  int v146;
  int v147;
  int v148;
  int v149;
  int v150;
  int v151;
  int v152;
  NSObject *v153;
  NSObject *v154;
  uint64_t v155;
  NSObject *v156;
  NSObject *v157;
  NSObject *v158;
  _QWORD *v159;
  NSObject *v160;
  NSObject *v161;
  uint64_t v162;
  NSObject *v163;
  uint64_t v164;
  int os_unfair_lock_opaque_low;
  NSObject *v166;
  uint64_t v167;
  uint64_t v168;
  void *v169;
  char *v170;
  NSObject *v171;
  os_log_type_t v172;
  char *backtrace_string;
  os_log_type_t v174;
  _BOOL4 v175;
  os_log_type_t v176;
  NSObject *v177;
  uint64_t v178;
  uint64_t v179;
  NSObject *v180;
  uint64_t v181;
  int v182;
  NSObject *v183;
  uint64_t v184;
  uint64_t v185;
  NSObject *v186;
  uint64_t v187;
  int v188;
  NSObject *v189;
  uint64_t v190;
  int v191;
  void *v192;
  void *v193;
  void *v194;
  void *v195;
  void *v196;
  void *v197;
  nw_protocol_metadata_t v198;
  void *v199;
  id v200;
  nw_content_context_t context;
  _QWORD completion[4];
  _QWORD *v204;
  _QWORD v205[4];
  _QWORD *v206;
  _QWORD v207[4];
  id v208;
  id v209;
  _QWORD v210[4];
  _QWORD *v211;
  _QWORD v212[4];
  id v213;
  _BYTE *v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  _QWORD v219[4];
  NSObject *v220;
  _QWORD v221[4];
  _QWORD *v222;
  _QWORD v223[4];
  _QWORD *v224;
  _QWORD v225[4];
  _QWORD *v226;
  _QWORD v227[5];
  uint64_t v228;
  uint64_t *v229;
  uint64_t v230;
  uint64_t (*v231)(uint64_t, uint64_t);
  void (*v232)(uint64_t);
  id v233;
  _QWORD v234[5];
  _QWORD v235[6];
  uint64_t v236;
  uint64_t *v237;
  uint64_t v238;
  char v239;
  uint64_t v240;
  uint64_t *v241;
  uint64_t v242;
  char v243;
  _QWORD v244[5];
  uint64_t v245;
  uint64_t *v246;
  uint64_t v247;
  uint64_t (*v248)(uint64_t, uint64_t);
  void (*v249)(uint64_t);
  id v250;
  _QWORD v251[6];
  _QWORD v252[6];
  uint64_t v253;
  uint64_t *v254;
  uint64_t v255;
  uint64_t (*v256)(uint64_t, uint64_t);
  void (*v257)(uint64_t);
  id v258;
  uint64_t v259;
  uint64_t *v260;
  uint64_t v261;
  uint64_t (*v262)(uint64_t, uint64_t);
  void (*v263)(uint64_t);
  id v264;
  uint64_t v265;
  uint64_t *v266;
  uint64_t v267;
  uint64_t (*v268)(uint64_t, uint64_t);
  void (*v269)(uint64_t);
  id v270;
  uint64_t v271;
  uint64_t *v272;
  uint64_t v273;
  uint64_t (*v274)(uint64_t, uint64_t);
  void (*v275)(uint64_t);
  id v276;
  _QWORD v277[4];
  id v278;
  uint64_t v279;
  uint64_t *v280;
  uint64_t v281;
  os_unfair_lock_s *v282;
  _BYTE v283[128];
  uint64_t v284;
  _BYTE applier[24];
  _BYTE v286[24];
  uint64_t v287;
  _BYTE buf[24];
  uint64_t v289;
  uint64_t v290;

  v290 = *MEMORY[0x1E0C80C00];
  v200 = a2;
  v7 = a3;
  v8 = a5;
  context = v7;
  if (!v7 || v8)
    goto LABEL_37;
  if (nw_protocol_copy_http_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_11_72660);
  v9 = (id)nw_protocol_copy_http_definition_http_definition;
  v10 = nw_content_context_copy_protocol_metadata(v7, v9);

  v198 = v10;
  if (!v10)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v40 = (id)gLogObj;
    if (os_log_type_enabled(v40, OS_LOG_TYPE_INFO))
    {
      v41 = *(_QWORD *)(a1 + 32);
      v42 = *(_QWORD *)(v41 + 48);
      *(_DWORD *)applier = 136446722;
      *(_QWORD *)&applier[4] = "nw_masque_read_inner_request_on_queue_block_invoke";
      *(_WORD *)&applier[12] = 2114;
      *(_QWORD *)&applier[14] = v41;
      *(_WORD *)&applier[22] = 2112;
      *(_QWORD *)v286 = v42;
      _os_log_impl(&dword_182FBE000, v40, OS_LOG_TYPE_INFO, "%{public}s %{public}@ Received non-HTTP message, cancelling %@", applier, 0x20u);
    }

    nw_masque_connection_cancel_on_queue(*(void **)(a1 + 32), 0);
    goto LABEL_36;
  }
  v11 = nw_http_metadata_copy_request(v10);
  v196 = v11;
  if (!v11)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v43 = (id)gLogObj;
    if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
    {
      v44 = *(_QWORD *)(a1 + 32);
      v45 = *(_QWORD *)(v44 + 48);
      *(_DWORD *)applier = 136446722;
      *(_QWORD *)&applier[4] = "nw_masque_read_inner_request_on_queue_block_invoke";
      *(_WORD *)&applier[12] = 2114;
      *(_QWORD *)&applier[14] = v44;
      *(_WORD *)&applier[22] = 2112;
      *(_QWORD *)v286 = v45;
      _os_log_impl(&dword_182FBE000, v43, OS_LOG_TYPE_INFO, "%{public}s %{public}@ Received non-request HTTP message, cancelling %@", applier, 0x20u);
    }

    nw_masque_connection_cancel_on_queue(*(void **)(a1 + 32), 0);
    goto LABEL_35;
  }
  v277[0] = MEMORY[0x1E0C809B0];
  v277[1] = 3221225472;
  v277[2] = ___ZL37nw_masque_read_inner_request_on_queueP31NWConcrete_nw_masque_connection_block_invoke_189;
  v277[3] = &unk_1E14A99D8;
  v278 = *(id *)(a1 + 32);
  v12 = v11;
  v13 = v277;
  _nw_http_request_access_method((uint64_t)v12, v13);

  v271 = 0;
  v272 = &v271;
  v273 = 0x3032000000;
  v274 = __Block_byref_object_copy__29319;
  v275 = __Block_byref_object_dispose__29320;
  v276 = 0;
  v265 = 0;
  v266 = &v265;
  v267 = 0x3032000000;
  v268 = __Block_byref_object_copy__29319;
  v269 = __Block_byref_object_dispose__29320;
  v270 = 0;
  v259 = 0;
  v260 = &v259;
  v261 = 0x3032000000;
  v262 = __Block_byref_object_copy__29319;
  v263 = __Block_byref_object_dispose__29320;
  v264 = 0;
  v253 = 0;
  v254 = &v253;
  v255 = 0x3032000000;
  v256 = __Block_byref_object_copy__29319;
  v257 = __Block_byref_object_dispose__29320;
  v258 = 0;
  v252[0] = MEMORY[0x1E0C809B0];
  v252[1] = 3221225472;
  v252[2] = ___ZL37nw_masque_read_inner_request_on_queueP31NWConcrete_nw_masque_connection_block_invoke_191;
  v252[3] = &unk_1E149F620;
  v252[4] = &v259;
  v252[5] = &v271;
  v14 = v12;
  v15 = v252;
  _nw_http_fields_access_value_by_name((uint64_t)v14, (unint64_t)"Client-Connection-Id", v15);

  v251[0] = MEMORY[0x1E0C809B0];
  v251[1] = 3221225472;
  v251[2] = ___ZL37nw_masque_read_inner_request_on_queueP31NWConcrete_nw_masque_connection_block_invoke_2;
  v251[3] = &unk_1E149F620;
  v251[4] = &v253;
  v251[5] = &v265;
  v16 = v14;
  v17 = v251;
  _nw_http_fields_access_value_by_name((uint64_t)v16, (unint64_t)"Server-Connection-Id", v17);

  v245 = 0;
  v246 = &v245;
  v247 = 0x3032000000;
  v248 = __Block_byref_object_copy__29319;
  v249 = __Block_byref_object_dispose__29320;
  v250 = 0;
  v244[0] = MEMORY[0x1E0C809B0];
  v244[1] = 3221225472;
  v244[2] = ___ZL37nw_masque_read_inner_request_on_queueP31NWConcrete_nw_masque_connection_block_invoke_3;
  v244[3] = &unk_1E14AA0E8;
  v244[4] = &v245;
  v18 = v16;
  v19 = v244;
  _nw_http_request_access_authority((uint64_t)v18, v19);

  v240 = 0;
  v241 = &v240;
  v242 = 0x2020000000;
  v243 = 0;
  v236 = 0;
  v237 = &v236;
  v238 = 0x2020000000;
  v239 = 0;
  v235[0] = MEMORY[0x1E0C809B0];
  v235[1] = 3221225472;
  v235[2] = ___ZL37nw_masque_read_inner_request_on_queueP31NWConcrete_nw_masque_connection_block_invoke_4;
  v235[3] = &unk_1E149F620;
  v235[4] = &v240;
  v235[5] = &v236;
  v20 = v18;
  v21 = v235;
  _nw_http_request_access_extended_connect_protocol((uint64_t)v20, v21);

  v284 = 0;
  v234[0] = MEMORY[0x1E0C809B0];
  v234[1] = 3221225472;
  v234[2] = ___ZL37nw_masque_read_inner_request_on_queueP31NWConcrete_nw_masque_connection_block_invoke_5;
  v234[3] = &__block_descriptor_40_e9_v16__0r_8l;
  v234[4] = &v284;
  v22 = v20;
  v23 = v234;
  _nw_http_fields_access_value_by_name((uint64_t)v22, (unint64_t)"Datagram-Flow-Id", v23);

  v228 = 0;
  v229 = &v228;
  v230 = 0x3032000000;
  v231 = __Block_byref_object_copy__29319;
  v232 = __Block_byref_object_dispose__29320;
  v233 = 0;
  v227[0] = MEMORY[0x1E0C809B0];
  v227[1] = 3221225472;
  v227[2] = ___ZL37nw_masque_read_inner_request_on_queueP31NWConcrete_nw_masque_connection_block_invoke_6;
  v227[3] = &unk_1E14AA0E8;
  v227[4] = &v228;
  v24 = v22;
  v25 = v227;
  _nw_http_request_access_path((uint64_t)v24, v25);

  v26 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v26 + 97))
  {
    if (gLogDatapath)
    {
      __nwlog_obj();
      v161 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v161, OS_LOG_TYPE_DEBUG))
      {
        v162 = *(_QWORD *)(a1 + 32);
        *(_DWORD *)applier = 136446466;
        *(_QWORD *)&applier[4] = "nw_masque_read_inner_request_on_queue_block_invoke_7";
        *(_WORD *)&applier[12] = 2114;
        *(_QWORD *)&applier[14] = v162;
        _os_log_impl(&dword_182FBE000, v161, OS_LOG_TYPE_DEBUG, "%{public}s %{public}@ Reverse proxying, responding 200 OK", applier, 0x16u);
      }

      v26 = *(_QWORD *)(a1 + 32);
    }
    v27 = nw_masque_connection_pair_create((NWConcrete_nw_masque_connection *)v26);
    v28 = v27;
    v29 = v284;
    BYTE2(v27[44]._os_unfair_lock_opaque) = v284;
    if (v29)
    {
      v30 = BYTE1(v284);
      HIBYTE(v27[44]._os_unfair_lock_opaque) = BYTE1(v284);
      if (v30)
      {
        v31 = BYTE2(v284);
        LOBYTE(v27[45]._os_unfair_lock_opaque) = BYTE2(v284);
        if (v31)
        {
          v32 = BYTE3(v284);
          BYTE1(v27[45]._os_unfair_lock_opaque) = BYTE3(v284);
          if (v32)
          {
            v33 = BYTE4(v284);
            BYTE2(v27[45]._os_unfair_lock_opaque) = BYTE4(v284);
            if (v33)
            {
              v34 = BYTE5(v284);
              HIBYTE(v27[45]._os_unfair_lock_opaque) = BYTE5(v284);
              if (v34)
              {
                v35 = BYTE6(v284);
                LOBYTE(v27[46]._os_unfair_lock_opaque) = BYTE6(v284);
                if (v35)
                  BYTE1(v27[46]._os_unfair_lock_opaque) = 0;
              }
            }
          }
        }
      }
    }
    v36 = v272[5];
    if (v36)
    {
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0x2000000000;
      v289 = 0;
      v279 = 0;
      v280 = &v279;
      v281 = 0x2000000000;
      v282 = (os_unfair_lock_s *)((char *)v28 + 74);
      v37 = MEMORY[0x1E0C809B0];
      *(_QWORD *)applier = MEMORY[0x1E0C809B0];
      *(_QWORD *)&applier[8] = 0x40000000;
      *(_QWORD *)&applier[16] = __nw_dispatch_data_copyout_block_invoke;
      *(_QWORD *)v286 = &unk_1E14A3448;
      *(_QWORD *)&v286[16] = &v279;
      v287 = 20;
      *(_QWORD *)&v286[8] = buf;
      dispatch_data_apply(v36, applier);
      v38 = *(_QWORD *)(*(_QWORD *)&buf[8] + 24);
      _Block_object_dispose(&v279, 8);
      _Block_object_dispose(buf, 8);
      LOWORD(v28[18]._os_unfair_lock_opaque) = v38;
      v39 = v260[5];
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0x2000000000;
      v289 = 0;
      v279 = 0;
      v280 = &v279;
      v281 = 0x2000000000;
      v282 = v28 + 29;
      if (v39)
      {
        *(_QWORD *)applier = v37;
        *(_QWORD *)&applier[8] = 0x40000000;
        *(_QWORD *)&applier[16] = __nw_dispatch_data_copyout_block_invoke;
        *(_QWORD *)v286 = &unk_1E14A3448;
        *(_QWORD *)&v286[16] = &v279;
        v287 = 20;
        *(_QWORD *)&v286[8] = buf;
        dispatch_data_apply(v39, applier);
      }
      _Block_object_dispose(&v279, 8);
      _Block_object_dispose(buf, 8);
      if (gLogDatapath)
      {
        __nwlog_obj();
        v163 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v163, OS_LOG_TYPE_DEBUG))
        {
          v164 = *(_QWORD *)(a1 + 32);
          os_unfair_lock_opaque_low = LOWORD(v28[18]._os_unfair_lock_opaque);
          *(_DWORD *)applier = 136446722;
          *(_QWORD *)&applier[4] = "nw_masque_read_inner_request_on_queue_block_invoke";
          *(_WORD *)&applier[12] = 2114;
          *(_QWORD *)&applier[14] = v164;
          *(_WORD *)&applier[22] = 1024;
          *(_DWORD *)v286 = os_unfair_lock_opaque_low;
          _os_log_impl(&dword_182FBE000, v163, OS_LOG_TYPE_DEBUG, "%{public}s %{public}@ Received client connection ID of length %u", applier, 0x1Cu);
        }

      }
    }
    objc_storeStrong((id *)&v28[60], *(id *)(*(_QWORD *)(a1 + 32) + 72));
    LOBYTE(v28[62]._os_unfair_lock_opaque) = 1;
    nw_masque_connection_pair_setup_outer_connection(v28, (void *)v246[5], 17, v24);

    goto LABEL_34;
  }
  if (gLogDatapath)
  {
    __nwlog_obj();
    v166 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v166, OS_LOG_TYPE_DEBUG))
    {
      v167 = *(_QWORD *)(a1 + 32);
      v168 = v246[5];
      *(_DWORD *)applier = 136446722;
      *(_QWORD *)&applier[4] = "nw_masque_read_inner_request_on_queue_block_invoke";
      *(_WORD *)&applier[12] = 2114;
      *(_QWORD *)&applier[14] = v167;
      *(_WORD *)&applier[22] = 2112;
      *(_QWORD *)v286 = v168;
      _os_log_impl(&dword_182FBE000, v166, OS_LOG_TYPE_DEBUG, "%{public}s %{public}@ Received authority %@", applier, 0x20u);
    }

  }
  if (!v246[5])
  {
    __nwlog_obj();
    v169 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)applier = 136446210;
    *(_QWORD *)&applier[4] = "nw_masque_read_inner_request_on_queue_block_invoke";
    v170 = (char *)_os_log_send_and_compose_impl();

    buf[0] = 16;
    LOBYTE(v279) = 0;
    if (__nwlog_fault(v170, buf, &v279))
    {
      if (buf[0] == 17)
      {
        __nwlog_obj();
        v171 = objc_claimAutoreleasedReturnValue();
        v172 = buf[0];
        if (os_log_type_enabled(v171, (os_log_type_t)buf[0]))
        {
          *(_DWORD *)applier = 136446210;
          *(_QWORD *)&applier[4] = "nw_masque_read_inner_request_on_queue_block_invoke";
          _os_log_impl(&dword_182FBE000, v171, v172, "%{public}s called with null authority_endpoint", applier, 0xCu);
        }
      }
      else if ((_BYTE)v279)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v171 = objc_claimAutoreleasedReturnValue();
        v174 = buf[0];
        v175 = os_log_type_enabled(v171, (os_log_type_t)buf[0]);
        if (backtrace_string)
        {
          if (v175)
          {
            *(_DWORD *)applier = 136446466;
            *(_QWORD *)&applier[4] = "nw_masque_read_inner_request_on_queue_block_invoke";
            *(_WORD *)&applier[12] = 2082;
            *(_QWORD *)&applier[14] = backtrace_string;
            _os_log_impl(&dword_182FBE000, v171, v174, "%{public}s called with null authority_endpoint, dumping backtrace:%{public}s", applier, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_169;
        }
        if (v175)
        {
          *(_DWORD *)applier = 136446210;
          *(_QWORD *)&applier[4] = "nw_masque_read_inner_request_on_queue_block_invoke";
          _os_log_impl(&dword_182FBE000, v171, v174, "%{public}s called with null authority_endpoint, no backtrace", applier, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v171 = objc_claimAutoreleasedReturnValue();
        v176 = buf[0];
        if (os_log_type_enabled(v171, (os_log_type_t)buf[0]))
        {
          *(_DWORD *)applier = 136446210;
          *(_QWORD *)&applier[4] = "nw_masque_read_inner_request_on_queue_block_invoke";
          _os_log_impl(&dword_182FBE000, v171, v176, "%{public}s called with null authority_endpoint, backtrace limit exceeded", applier, 0xCu);
        }
      }

    }
LABEL_169:
    if (v170)
      free(v170);
    goto LABEL_34;
  }
  if (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 96))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v46 = (id)gLogObj;
    if (os_log_type_enabled(v46, OS_LOG_TYPE_INFO))
    {
      v47 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)applier = 136446466;
      *(_QWORD *)&applier[4] = "nw_masque_read_inner_request_on_queue_block_invoke";
      *(_WORD *)&applier[12] = 2114;
      *(_QWORD *)&applier[14] = v47;
      _os_log_impl(&dword_182FBE000, v46, OS_LOG_TYPE_INFO, "%{public}s %{public}@ Dropping request, sending no reply", applier, 0x16u);
    }

    goto LABEL_34;
  }
  v48 = v24;
  has_method = _nw_http_request_has_method((uint64_t)v48);
  v195 = v48;

  if (has_method)
  {
    v50 = v48;
    if (objc_msgSend((id)v229[5], "containsString:", CFSTR("%")))
    {
      v51 = _CFStringCreateByRemovingPercentEncoding();
      if (v51)
      {
        __nwlog_obj();
        v52 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v52, OS_LOG_TYPE_INFO))
        {
          v53 = *(_QWORD *)(a1 + 32);
          v54 = v229[5];
          *(_DWORD *)applier = 136446978;
          *(_QWORD *)&applier[4] = "nw_masque_read_inner_request_on_queue_block_invoke";
          *(_WORD *)&applier[12] = 2114;
          *(_QWORD *)&applier[14] = v53;
          *(_WORD *)&applier[22] = 2112;
          *(_QWORD *)v286 = v54;
          *(_WORD *)&v286[8] = 2112;
          *(_QWORD *)&v286[10] = v51;
          _os_log_impl(&dword_182FBE000, v52, OS_LOG_TYPE_INFO, "%{public}s %{public}@ decoded path %@ -> %@", applier, 0x2Au);
        }

        v55 = (void *)v229[5];
        v229[5] = v51;

        v50 = v195;
      }
    }
    if (*((_BYTE *)v241 + 24))
    {
      if (objc_msgSend((id)v229[5], "hasPrefix:", CFSTR("/.well-known/masque/udp/")))
      {
        objc_msgSend((id)v229[5], "substringFromIndex:", objc_msgSend(CFSTR("/.well-known/masque/udp/"), "length"));
        v56 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v56, "componentsSeparatedByString:", CFSTR("/"));
        v57 = (void *)objc_claimAutoreleasedReturnValue();
        if ((unint64_t)objc_msgSend(v57, "count") < 2)
        {
          v59 = 0;
          v58 = 0;
        }
        else
        {
          objc_msgSend(v57, "objectAtIndexedSubscript:", 0);
          v58 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v57, "objectAtIndexedSubscript:", 1);
          v59 = (void *)objc_claimAutoreleasedReturnValue();
        }

        if (v58 && v59)
        {
          if (objc_msgSend(v58, "isEqualToString:", CFSTR("*"))
            && objc_msgSend(v59, "isEqualToString:", CFSTR("*")))
          {
            __nwlog_obj();
            v112 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v112, OS_LOG_TYPE_DEBUG))
            {
              v113 = *(_QWORD *)(a1 + 32);
              *(_DWORD *)applier = 136446466;
              *(_QWORD *)&applier[4] = "nw_masque_read_inner_request_on_queue_block_invoke_2";
              *(_WORD *)&applier[12] = 2114;
              *(_QWORD *)&applier[14] = v113;
              _os_log_impl(&dword_182FBE000, v112, OS_LOG_TYPE_DEBUG, "%{public}s %{public}@ requested listener mode", applier, 0x16u);
            }

            well_known = (uint64_t)nw_masque_listener_pair_create(*(NWConcrete_nw_masque_connection **)(a1 + 32));
            *(_BYTE *)(well_known + 84) = 1;
            nw_masque_listener_pair_setup_outer_connection_group((void *)well_known, v195);
            nw_masque_listener_pair_read_inner((NWConcrete_nw_masque_listener_pair *)well_known);
            v99 = v58;
            goto LABEL_106;
          }
          well_known = (uint64_t)nw_masque_connection_pair_create(*(NWConcrete_nw_masque_connection **)(a1 + 32));
          *(_BYTE *)(well_known + 221) = 1;
          host = nw_endpoint_create_host((const char *)objc_msgSend(v58, "UTF8String"), (const char *)objc_msgSend(v59, "UTF8String"));
          nw_masque_connection_pair_setup_outer_connection((void *)well_known, host, 17, v195);
          v99 = v58;
LABEL_105:

LABEL_106:
          goto LABEL_34;
        }
        v99 = v58;
      }
      else
      {
        v99 = 0;
        v59 = 0;
      }
      if (gLogDatapath)
      {
        __nwlog_obj();
        v177 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v177, OS_LOG_TYPE_DEBUG))
        {
          v178 = *(_QWORD *)(a1 + 32);
          v179 = v229[5];
          *(_DWORD *)applier = 136446722;
          *(_QWORD *)&applier[4] = "nw_masque_read_inner_request_on_queue_block_invoke";
          *(_WORD *)&applier[12] = 2114;
          *(_QWORD *)&applier[14] = v178;
          *(_WORD *)&applier[22] = 2112;
          *(_QWORD *)v286 = v179;
          _os_log_impl(&dword_182FBE000, v177, OS_LOG_TYPE_DEBUG, "%{public}s %{public}@ Failed to parse target out of path: %@", applier, 0x20u);
        }

      }
      well_known = _nw_http_response_create_well_known(400);
      host = nw_http_create_metadata_for_response((void *)well_known);
      v116 = nw_content_context_create("response");
      nw_content_context_set_metadata_for_protocol(v116, host);
      v117 = *(_QWORD **)(a1 + 32);
      v118 = v117[6];
      v225[0] = MEMORY[0x1E0C809B0];
      v225[1] = 3221225472;
      v225[2] = ___ZL37nw_masque_read_inner_request_on_queueP31NWConcrete_nw_masque_connection_block_invoke_204;
      v225[3] = &unk_1E14A9B48;
      v226 = v117;
      nw_connection_send(v118, 0, v116, 1, v225);

      goto LABEL_105;
    }
    if (!*((_BYTE *)v237 + 24))
    {
      v119 = nw_masque_connection_pair_create(*(NWConcrete_nw_masque_connection **)(a1 + 32));
      nw_masque_connection_pair_setup_outer_connection(v119, (void *)v246[5], 6, v50);

      goto LABEL_34;
    }
    if (objc_msgSend((id)v229[5], "hasPrefix:", CFSTR("/.well-known/masque/ip/")))
    {
      objc_msgSend((id)v229[5], "substringFromIndex:", objc_msgSend(CFSTR("/.well-known/masque/ip/"), "length"));
      v95 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v95, "componentsSeparatedByString:", CFSTR("/"));
      v96 = (void *)objc_claimAutoreleasedReturnValue();
      if ((unint64_t)objc_msgSend(v96, "count") < 2)
      {
        v98 = 0;
        v97 = 0;
      }
      else
      {
        objc_msgSend(v96, "objectAtIndexedSubscript:", 0);
        v97 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v96, "objectAtIndexedSubscript:", 1);
        v98 = (void *)objc_claimAutoreleasedReturnValue();
      }

      if (v97 && v98)
      {
        v134 = objc_msgSend(v98, "integerValue");
        v135 = nw_masque_connection_pair_create(*(NWConcrete_nw_masque_connection **)(a1 + 32));
        metadata_for_response = nw_endpoint_create_host((const char *)objc_msgSend(v97, "UTF8String"), "0");
        nw_masque_connection_pair_setup_outer_connection(v135, metadata_for_response, v134, v195);
        v120 = v97;
LABEL_122:

        goto LABEL_34;
      }
      v120 = v97;
    }
    else
    {
      v120 = 0;
      v98 = 0;
    }
    if (gLogDatapath)
    {
      __nwlog_obj();
      v183 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v183, OS_LOG_TYPE_DEBUG))
      {
        v184 = *(_QWORD *)(a1 + 32);
        v185 = v229[5];
        *(_DWORD *)applier = 136446722;
        *(_QWORD *)&applier[4] = "nw_masque_read_inner_request_on_queue_block_invoke";
        *(_WORD *)&applier[12] = 2114;
        *(_QWORD *)&applier[14] = v184;
        *(_WORD *)&applier[22] = 2112;
        *(_QWORD *)v286 = v185;
        _os_log_impl(&dword_182FBE000, v183, OS_LOG_TYPE_DEBUG, "%{public}s %{public}@ Failed to parse target out of path: %@", applier, 0x20u);
      }

    }
    v135 = (void *)_nw_http_response_create_well_known(400);
    metadata_for_response = nw_http_create_metadata_for_response(v135);
    v137 = nw_content_context_create("response");
    nw_content_context_set_metadata_for_protocol(v137, metadata_for_response);
    v138 = *(_QWORD **)(a1 + 32);
    v139 = v138[6];
    v223[0] = MEMORY[0x1E0C809B0];
    v223[1] = 3221225472;
    v223[2] = ___ZL37nw_masque_read_inner_request_on_queueP31NWConcrete_nw_masque_connection_block_invoke_211;
    v223[3] = &unk_1E14A9B48;
    v224 = v138;
    nw_connection_send(v139, 0, v137, 1, v223);

    goto LABEL_122;
  }
  v60 = v48;
  if (nw_http_request_has_method(v48, (uint64_t)"CONNECT-UDP"))
  {
    v61 = *(_QWORD *)(a1 + 32);
    if (*(_QWORD *)(v61 + 72))
    {
      v62 = nw_masque_connection_pair_create((NWConcrete_nw_masque_connection *)v61);
      v63 = v62;
      v64 = v284;
      BYTE2(v62[44]._os_unfair_lock_opaque) = v284;
      if (v64)
      {
        v65 = BYTE1(v284);
        HIBYTE(v62[44]._os_unfair_lock_opaque) = BYTE1(v284);
        if (v65)
        {
          v66 = BYTE2(v284);
          LOBYTE(v62[45]._os_unfair_lock_opaque) = BYTE2(v284);
          if (v66)
          {
            v67 = BYTE3(v284);
            BYTE1(v62[45]._os_unfair_lock_opaque) = BYTE3(v284);
            if (v67)
            {
              v68 = BYTE4(v284);
              BYTE2(v62[45]._os_unfair_lock_opaque) = BYTE4(v284);
              if (v68)
              {
                v69 = BYTE5(v284);
                HIBYTE(v62[45]._os_unfair_lock_opaque) = BYTE5(v284);
                if (v69)
                {
                  v70 = BYTE6(v284);
                  LOBYTE(v62[46]._os_unfair_lock_opaque) = BYTE6(v284);
                  if (v70)
                    BYTE1(v62[46]._os_unfair_lock_opaque) = 0;
                }
              }
            }
          }
        }
      }
      v71 = v272[5];
      if (v71)
      {
        LOWORD(v63[18]._os_unfair_lock_opaque) = nw_dispatch_data_copyout(v71, (uint64_t)&v63[18]._os_unfair_lock_opaque + 2, 20);
        nw_dispatch_data_copyout(v260[5], (uint64_t)&v63[29], 20);
        if (gLogDatapath)
        {
          __nwlog_obj();
          v180 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v180, OS_LOG_TYPE_DEBUG))
          {
            v181 = *(_QWORD *)(a1 + 32);
            v182 = LOWORD(v63[18]._os_unfair_lock_opaque);
            *(_DWORD *)applier = 136446722;
            *(_QWORD *)&applier[4] = "nw_masque_read_inner_request_on_queue_block_invoke_2";
            *(_WORD *)&applier[12] = 2114;
            *(_QWORD *)&applier[14] = v181;
            *(_WORD *)&applier[22] = 1024;
            *(_DWORD *)v286 = v182;
            _os_log_impl(&dword_182FBE000, v180, OS_LOG_TYPE_DEBUG, "%{public}s %{public}@ Received client connection ID of length %u", applier, 0x1Cu);
          }

        }
      }
      objc_storeStrong((id *)&v63[60], *(id *)(*(_QWORD *)(a1 + 32) + 72));
      nw_masque_connection_pair_setup_outer_connection(v63, (void *)v246[5], 17, v195);
      *(_BYTE *)(*(_QWORD *)(a1 + 32) + 97) = 1;

    }
    else if ((_BYTE)v284)
    {
      if (v266[5])
      {
        v105 = nw_connection_copy_endpoint(*(nw_connection_t *)(v61 + 48));
        v106 = nw_masque_copy_matching_connection_pair(*(void **)(a1 + 32), v105, (uint64_t)&v284);
        v107 = v106;
        if (v106 && *((_WORD *)v106 + 36))
        {
          objc_storeStrong((id *)v106 + 3, *(id *)(*(_QWORD *)(a1 + 32) + 48));
          v107[68] = nw_dispatch_data_copyout(v266[5], (uint64_t)(v107 + 69), 20);
          nw_dispatch_data_copyout(v254[5], (uint64_t)(v107 + 79), 20);
          if (gLogDatapath)
          {
            __nwlog_obj();
            v186 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v186, OS_LOG_TYPE_DEBUG))
            {
              v187 = *(_QWORD *)(a1 + 32);
              v188 = (unsigned __int16)v107[68];
              *(_DWORD *)applier = 136447234;
              *(_QWORD *)&applier[4] = "nw_masque_read_inner_request_on_queue_block_invoke_2";
              *(_WORD *)&applier[12] = 2114;
              *(_QWORD *)&applier[14] = v187;
              *(_WORD *)&applier[22] = 1024;
              *(_DWORD *)v286 = v188;
              *(_WORD *)&v286[4] = 2080;
              *(_QWORD *)&v286[6] = &v284;
              *(_WORD *)&v286[14] = 2112;
              *(_QWORD *)&v286[16] = v105;
              _os_log_impl(&dword_182FBE000, v186, OS_LOG_TYPE_DEBUG, "%{public}s %{public}@ Received server connection ID of length %u for datagram flow %s from %@", applier, 0x30u);
            }

          }
          options = nw_demux_create_options();
          nw_demux_options_add_pattern(options, 1, (unsigned __int16)v107[68], (uint64_t)(v107 + 69), 0);
          nw_masque_connection_pair_setup_inner_direct_connections(v107, options);
          v109 = _nw_http_response_create_well_known(200);
          nw_http_fields_append(v109, (uint64_t)"Datagram-Flow-Id", (uint64_t)&v284);
          nw_http_fields_append(v109, (uint64_t)"Server-Connection-Id", (uint64_t)(v107 + 79));
          v110 = nw_http_create_metadata_for_response(v109);
          v111 = nw_content_context_create("response");
          nw_content_context_set_metadata_for_protocol(v111, v110);
          nw_connection_send(*(nw_connection_t *)(*(_QWORD *)(a1 + 32) + 48), 0, v111, 1, &__block_literal_global_24144);
        }
        else
        {
          __nwlog_obj();
          v140 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v140, OS_LOG_TYPE_ERROR))
          {
            v141 = *(_QWORD *)(a1 + 32);
            *(_DWORD *)applier = 136446978;
            *(_QWORD *)&applier[4] = "nw_masque_read_inner_request_on_queue_block_invoke";
            *(_WORD *)&applier[12] = 2114;
            *(_QWORD *)&applier[14] = v141;
            *(_WORD *)&applier[22] = 2080;
            *(_QWORD *)v286 = &v284;
            *(_WORD *)&v286[8] = 2112;
            *(_QWORD *)&v286[10] = v105;
            _os_log_impl(&dword_182FBE000, v140, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ Rejecting server connection ID for unknown datagram flow %s from %@", applier, 0x2Au);
          }

          options = (void *)_nw_http_response_create_well_known(501);
          v109 = nw_http_create_metadata_for_response(options);
          v110 = nw_content_context_create("response");
          nw_content_context_set_metadata_for_protocol(v110, v109);
          v142 = *(_QWORD **)(a1 + 32);
          v143 = v142[6];
          v219[0] = MEMORY[0x1E0C809B0];
          v219[1] = 3221225472;
          v219[2] = ___ZL37nw_masque_read_inner_request_on_queueP31NWConcrete_nw_masque_connection_block_invoke_214;
          v219[3] = &unk_1E14A9B48;
          v220 = v142;
          nw_connection_send(v143, 0, v110, 1, v219);
          v111 = v220;
        }

      }
      else
      {
        v144 = nw_masque_connection_pair_create((NWConcrete_nw_masque_connection *)v61);
        v145 = v144;
        v146 = v284;
        BYTE2(v144[44]._os_unfair_lock_opaque) = v284;
        if (v146)
        {
          v147 = BYTE1(v284);
          HIBYTE(v144[44]._os_unfair_lock_opaque) = BYTE1(v284);
          if (v147)
          {
            v148 = BYTE2(v284);
            LOBYTE(v144[45]._os_unfair_lock_opaque) = BYTE2(v284);
            if (v148)
            {
              v149 = BYTE3(v284);
              BYTE1(v144[45]._os_unfair_lock_opaque) = BYTE3(v284);
              if (v149)
              {
                v150 = BYTE4(v284);
                BYTE2(v144[45]._os_unfair_lock_opaque) = BYTE4(v284);
                if (v150)
                {
                  v151 = BYTE5(v284);
                  HIBYTE(v144[45]._os_unfair_lock_opaque) = BYTE5(v284);
                  if (v151)
                  {
                    v152 = BYTE6(v284);
                    LOBYTE(v144[46]._os_unfair_lock_opaque) = BYTE6(v284);
                    if (v152)
                      BYTE1(v144[46]._os_unfair_lock_opaque) = 0;
                  }
                }
              }
            }
          }
        }
        v153 = v272[5];
        if (v153)
        {
          LOWORD(v145[18]._os_unfair_lock_opaque) = nw_dispatch_data_copyout(v153, (uint64_t)&v145[18]._os_unfair_lock_opaque + 2, 20);
          nw_dispatch_data_copyout(v260[5], (uint64_t)&v145[29], 20);
          if (gLogDatapath)
          {
            __nwlog_obj();
            v189 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v189, OS_LOG_TYPE_DEBUG))
            {
              v190 = *(_QWORD *)(a1 + 32);
              v191 = LOWORD(v145[18]._os_unfair_lock_opaque);
              *(_DWORD *)applier = 136446722;
              *(_QWORD *)&applier[4] = "nw_masque_read_inner_request_on_queue_block_invoke_2";
              *(_WORD *)&applier[12] = 2114;
              *(_QWORD *)&applier[14] = v190;
              *(_WORD *)&applier[22] = 1024;
              *(_DWORD *)v286 = v191;
              _os_log_impl(&dword_182FBE000, v189, OS_LOG_TYPE_DEBUG, "%{public}s %{public}@ Received client connection ID of length %u", applier, 0x1Cu);
            }

            v60 = v195;
          }
        }
        nw_masque_connection_pair_setup_outer_connection(v145, (void *)v246[5], 17, v60);

      }
    }
    else
    {
      v129 = (void *)_nw_http_response_create_well_known(501);
      v130 = nw_http_create_metadata_for_response(v129);
      v131 = nw_content_context_create("response");
      nw_content_context_set_metadata_for_protocol(v131, v130);
      v132 = *(_QWORD **)(a1 + 32);
      v133 = v132[6];
      v221[0] = MEMORY[0x1E0C809B0];
      v221[1] = 3221225472;
      v221[2] = ___ZL37nw_masque_read_inner_request_on_queueP31NWConcrete_nw_masque_connection_block_invoke_213;
      v221[3] = &unk_1E14A9B48;
      v222 = v132;
      nw_connection_send(v133, 0, v131, 1, v221);

    }
    goto LABEL_34;
  }
  if (!nw_http_request_has_method(v48, (uint64_t)"POST"))
  {
    v100 = (void *)_nw_http_response_create_well_known(501);
    v101 = nw_http_create_metadata_for_response(v100);
    v102 = nw_content_context_create("response");
    nw_content_context_set_metadata_for_protocol(v102, v101);
    v103 = *(_QWORD **)(a1 + 32);
    v104 = v103[6];
    completion[0] = MEMORY[0x1E0C809B0];
    completion[1] = 3221225472;
    completion[2] = ___ZL37nw_masque_read_inner_request_on_queueP31NWConcrete_nw_masque_connection_block_invoke_2_243;
    completion[3] = &unk_1E14A9B48;
    v204 = v103;
    nw_connection_send(v104, 0, v102, 1, completion);

    goto LABEL_34;
  }
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("https://host.com%@"), v229[5]);
  v192 = (void *)objc_claimAutoreleasedReturnValue();
  v193 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E98]), "initWithString:", v192);
  objc_msgSend(v193, "query");
  v194 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v194, "componentsSeparatedByString:", CFSTR("&"));
  v217 = 0u;
  v218 = 0u;
  v215 = 0u;
  v216 = 0u;
  v72 = (id)objc_claimAutoreleasedReturnValue();
  v73 = objc_msgSend(v72, "countByEnumeratingWithState:objects:count:", &v215, v283, 16);
  if (!v73)
  {

    v197 = 0;
    v199 = 0;
    goto LABEL_111;
  }
  v199 = 0;
  v197 = 0;
  v74 = *(_QWORD *)v216;
  do
  {
    for (i = 0; i != v73; ++i)
    {
      if (*(_QWORD *)v216 != v74)
        objc_enumerationMutation(v72);
      objc_msgSend(*(id *)(*((_QWORD *)&v215 + 1) + 8 * i), "componentsSeparatedByString:", CFSTR("="));
      v76 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v76, "count") == 2)
      {
        objc_msgSend(v76, "firstObject");
        v77 = (void *)objc_claimAutoreleasedReturnValue();
        v78 = objc_msgSend(v77, "isEqualToString:", CFSTR("targethost"));

        if (v78)
        {
          objc_msgSend(v76, "lastObject");
          v79 = objc_claimAutoreleasedReturnValue();
          v80 = v199;
          v199 = (void *)v79;
LABEL_73:

          goto LABEL_74;
        }
      }
      if (objc_msgSend(v76, "count") == 2)
      {
        objc_msgSend(v76, "firstObject");
        v81 = (void *)objc_claimAutoreleasedReturnValue();
        v82 = objc_msgSend(v81, "isEqualToString:", CFSTR("targetpath"));

        if (v82)
        {
          objc_msgSend(v76, "lastObject");
          v83 = objc_claimAutoreleasedReturnValue();
          v80 = v197;
          v197 = (void *)v83;
          goto LABEL_73;
        }
      }
LABEL_74:

    }
    v73 = objc_msgSend(v72, "countByEnumeratingWithState:objects:count:", &v215, v283, 16);
  }
  while (v73);

  if (v199 && v197)
  {
    __nwlog_obj();
    v84 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v84, OS_LOG_TYPE_INFO))
    {
      v85 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)applier = 136446978;
      *(_QWORD *)&applier[4] = "nw_masque_read_inner_request_on_queue_block_invoke";
      *(_WORD *)&applier[12] = 2114;
      *(_QWORD *)&applier[14] = v85;
      *(_WORD *)&applier[22] = 2112;
      *(_QWORD *)v286 = v199;
      *(_WORD *)&v286[8] = 2112;
      *(_QWORD *)&v286[10] = v197;
      _os_log_impl(&dword_182FBE000, v84, OS_LOG_TYPE_INFO, "%{public}s %{public}@ Parsed target host %@ and path %@", applier, 0x2Au);
    }

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("https://%@%@"), v199, v197);
    v86 = (void *)objc_claimAutoreleasedReturnValue();
    v87 = objc_alloc(MEMORY[0x1E0C99E98]);
    v88 = MEMORY[0x1E0C809B0];
    v89 = (void *)objc_msgSend(v87, "initWithString:", v86);
    v90 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C92C28]), "initWithURL:", v89);
    objc_msgSend(v90, "setHTTPMethod:", CFSTR("POST"));
    *(_QWORD *)applier = 0;
    *(_QWORD *)&applier[8] = applier;
    *(_DWORD *)v286 = 0;
    *(_QWORD *)&applier[16] = 0x2020000000;
    v212[0] = v88;
    v212[1] = 3221225472;
    v212[2] = ___ZL37nw_masque_read_inner_request_on_queueP31NWConcrete_nw_masque_connection_block_invoke_231;
    v212[3] = &unk_1E149F668;
    v91 = v90;
    v213 = v91;
    v214 = applier;
    nw_http_fields_enumerate(v195, v212);
    v92 = *(_DWORD *)(*(_QWORD *)&applier[8] + 24);
    if (v92)
    {
      v93 = *(void **)(*(_QWORD *)(a1 + 32) + 48);
      v207[0] = v88;
      v207[1] = 3221225472;
      v207[2] = ___ZL37nw_masque_read_inner_request_on_queueP31NWConcrete_nw_masque_connection_block_invoke_2_236;
      v207[3] = &unk_1E14A9C10;
      v208 = v91;
      v209 = *(id *)(a1 + 32);
      nw_connection_receive_internal(v93, 0, v92, v92, v207);

      v94 = v208;
    }
    else
    {
      __nwlog_obj();
      v154 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v154, OS_LOG_TYPE_ERROR))
      {
        v155 = *(_QWORD *)(a1 + 32);
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_masque_read_inner_request_on_queue_block_invoke_2";
        *(_WORD *)&buf[12] = 2114;
        *(_QWORD *)&buf[14] = v155;
        _os_log_impl(&dword_182FBE000, v154, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ Request missing content length", buf, 0x16u);
      }

      v94 = (void *)_nw_http_response_create_well_known(501);
      v156 = nw_http_create_metadata_for_response(v94);
      v157 = nw_content_context_create("response");
      v158 = v156;
      nw_content_context_set_metadata_for_protocol(v157, v156);
      v159 = *(_QWORD **)(a1 + 32);
      v160 = v159[6];
      v210[0] = MEMORY[0x1E0C809B0];
      v210[1] = 3221225472;
      v210[2] = ___ZL37nw_masque_read_inner_request_on_queueP31NWConcrete_nw_masque_connection_block_invoke_235;
      v210[3] = &unk_1E14A9B48;
      v211 = v159;
      nw_connection_send(v160, 0, v157, 1, v210);

    }
    _Block_object_dispose(applier, 8);

    if (v92)
      goto LABEL_142;

    goto LABEL_34;
  }
LABEL_111:
  __nwlog_obj();
  v121 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v121, OS_LOG_TYPE_ERROR))
  {
    v122 = *(_QWORD *)(a1 + 32);
    v123 = v229[5];
    *(_DWORD *)applier = 136446722;
    *(_QWORD *)&applier[4] = "nw_masque_read_inner_request_on_queue_block_invoke_2";
    *(_WORD *)&applier[12] = 2114;
    *(_QWORD *)&applier[14] = v122;
    *(_WORD *)&applier[22] = 2112;
    *(_QWORD *)v286 = v123;
    _os_log_impl(&dword_182FBE000, v121, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ Failed to parse target host and path out of request path: %@", applier, 0x20u);
  }

  v124 = (void *)_nw_http_response_create_well_known(501);
  v125 = nw_http_create_metadata_for_response(v124);
  v126 = nw_content_context_create("response");
  nw_content_context_set_metadata_for_protocol(v126, v125);
  v127 = *(_QWORD **)(a1 + 32);
  v128 = v127[6];
  v205[0] = MEMORY[0x1E0C809B0];
  v205[1] = 3221225472;
  v205[2] = ___ZL37nw_masque_read_inner_request_on_queueP31NWConcrete_nw_masque_connection_block_invoke_242;
  v205[3] = &unk_1E14A9B48;
  v206 = v127;
  nw_connection_send(v128, 0, v126, 1, v205);

LABEL_142:
LABEL_34:
  _Block_object_dispose(&v228, 8);

  _Block_object_dispose(&v236, 8);
  _Block_object_dispose(&v240, 8);
  _Block_object_dispose(&v245, 8);

  _Block_object_dispose(&v253, 8);
  _Block_object_dispose(&v259, 8);

  _Block_object_dispose(&v265, 8);
  _Block_object_dispose(&v271, 8);

LABEL_35:
LABEL_36:

  v8 = 0;
LABEL_37:

}

void sub_183643E50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, uint64_t a14, void *a15, void *a16, uint64_t a17, void *a18, void *a19, void *a20,_Unwind_Exception *exception_objecta,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49)
{
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  uint64_t v56;

  _Block_object_dispose((const void *)(v56 - 224), 8);
  _Block_object_dispose(&STACK[0x260], 8);

  _Block_object_dispose(&STACK[0x2E8], 8);
  _Block_object_dispose(&STACK[0x308], 8);
  _Block_object_dispose(&STACK[0x350], 8);

  _Block_object_dispose(&STACK[0x3E0], 8);
  _Block_object_dispose(&STACK[0x410], 8);

  _Block_object_dispose(&STACK[0x440], 8);
  _Block_object_dispose(&STACK[0x470], 8);

  _Unwind_Resume(a1);
}

void nw_masque_connection_cancel_on_queue(void *a1, void *a2)
{
  unsigned __int8 *v3;
  id v4;
  void *v5;
  NSObject *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  NSObject *v11;
  uint64_t v12;
  int v13;
  const char *v14;
  __int16 v15;
  unsigned __int8 *v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (v3[112] != 255)
  {
    if (v4 && !*((_QWORD *)v3 + 15))
      objc_storeStrong((id *)v3 + 15, a2);
    nw_dictionary_apply(*((_QWORD *)v3 + 7), (uint64_t)&__block_literal_global_325);
    nw_dictionary_apply(*((_QWORD *)v3 + 8), (uint64_t)&__block_literal_global_326);
    v6 = *((_QWORD *)v3 + 6);
    if (v6)
    {
      nw_connection_cancel(v6);
      v7 = (void *)*((_QWORD *)v3 + 6);
      *((_QWORD *)v3 + 6) = 0;

    }
    if (gLogDatapath)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
      {
        v12 = *((_QWORD *)v3 + 15);
        v13 = 136446722;
        v14 = "nw_masque_connection_cancel_on_queue";
        v15 = 2114;
        v16 = v3;
        v17 = 2114;
        v18 = v12;
        _os_log_impl(&dword_182FBE000, v11, OS_LOG_TYPE_DEBUG, "%{public}s %{public}@, error %{public}@", (uint8_t *)&v13, 0x20u);
      }

    }
    v3[112] = -1;
    v8 = (void *)*((_QWORD *)v3 + 7);
    *((_QWORD *)v3 + 7) = 0;

    v9 = (void *)*((_QWORD *)v3 + 8);
    *((_QWORD *)v3 + 8) = 0;

    v10 = (void *)*((_QWORD *)v3 + 13);
    *((_QWORD *)v3 + 13) = 0;

    v3 = 0;
  }

}

void sub_1836444FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void ___ZL37nw_masque_read_inner_request_on_queueP31NWConcrete_nw_masque_connection_block_invoke_189(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  int v6;
  const char *v7;
  __int16 v8;
  uint64_t v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (gLogDatapath)
  {
    __nwlog_obj();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      v5 = *(_QWORD *)(a1 + 32);
      v6 = 136446722;
      v7 = "nw_masque_read_inner_request_on_queue_block_invoke";
      v8 = 2114;
      v9 = v5;
      v10 = 2080;
      v11 = a2;
      _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_DEBUG, "%{public}s %{public}@ Received method %s", (uint8_t *)&v6, 0x20u);
    }

  }
}

uint64_t __Block_byref_object_copy__29319(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__29320(uint64_t a1)
{

}

void ___ZL37nw_masque_read_inner_request_on_queueP31NWConcrete_nw_masque_connection_block_invoke_191(uint64_t a1, char *__s)
{
  size_t v4;
  size_t v5;
  dispatch_data_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  dispatch_data_t v12;

  if (__s)
  {
    v4 = strlen(__s);
    if (v4 >= 3 && *__s == 58)
    {
      v5 = v4;
      if (__s[v4 - 1] == 58)
      {
        v6 = dispatch_data_create(__s, v4, 0, 0);
        v7 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
        v8 = *(void **)(v7 + 40);
        *(_QWORD *)(v7 + 40) = v6;

        v12 = dispatch_data_create(__s + 1, v5 - 2, 0, 0);
        v9 = dispatch_data_create_with_transform();
        v10 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
        v11 = *(void **)(v10 + 40);
        *(_QWORD *)(v10 + 40) = v9;

      }
    }
  }
}

void ___ZL37nw_masque_read_inner_request_on_queueP31NWConcrete_nw_masque_connection_block_invoke_2(uint64_t a1, char *__s)
{
  size_t v4;
  size_t v5;
  dispatch_data_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  dispatch_data_t v12;

  if (__s)
  {
    v4 = strlen(__s);
    if (v4 >= 3 && *__s == 58)
    {
      v5 = v4;
      if (__s[v4 - 1] == 58)
      {
        v6 = dispatch_data_create(__s, v4, 0, 0);
        v7 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
        v8 = *(void **)(v7 + 40);
        *(_QWORD *)(v7 + 40) = v6;

        v12 = dispatch_data_create(__s + 1, v5 - 2, 0, 0);
        v9 = dispatch_data_create_with_transform();
        v10 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
        v11 = *(void **)(v10 + 40);
        *(_QWORD *)(v10 + 40) = v9;

      }
    }
  }
}

void ___ZL37nw_masque_read_inner_request_on_queueP31NWConcrete_nw_masque_connection_block_invoke_3(uint64_t a1, const char *a2)
{
  nw_endpoint_t v3;
  _BOOL8 v4;
  uint64_t v5;
  void *v6;
  char *url;

  if (a2)
  {
    url = 0;
    asprintf(&url, "tcp://%s", a2);
    v3 = nw_endpoint_create_url(url);
    v4 = nw_endpoint_copy_host_port_endpoint_for_url(v3);
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v6 = *(void **)(v5 + 40);
    *(_QWORD *)(v5 + 40) = v4;

    if (url)
      free(url);
  }
}

void sub_183644844(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZL37nw_masque_read_inner_request_on_queueP31NWConcrete_nw_masque_connection_block_invoke_4(uint64_t result, char *__s1)
{
  uint64_t v3;
  uint64_t v4;

  if (__s1)
  {
    v3 = result;
    result = strcmp(__s1, "connect-udp");
    if ((_DWORD)result)
    {
      result = strcmp(__s1, "connect-ip");
      if ((_DWORD)result)
        return result;
      v4 = v3 + 40;
    }
    else
    {
      v4 = v3 + 32;
    }
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)v4 + 8) + 24) = 1;
  }
  return result;
}

void ___ZL37nw_masque_read_inner_request_on_queueP31NWConcrete_nw_masque_connection_block_invoke_6(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;

  if (a2)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", a2);
    v3 = objc_claimAutoreleasedReturnValue();
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v5 = *(void **)(v4 + 40);
    *(_QWORD *)(v4 + 40) = v3;

  }
}

os_unfair_lock_s *nw_masque_connection_pair_create(NWConcrete_nw_masque_connection *a1)
{
  NWConcrete_nw_masque_connection *v2;
  NWConcrete_nw_masque_connection_pair *v3;
  nw_connection_t *v4;
  dispatch_group_t v5;
  void *v6;
  nw_endpoint_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  nw_connection_t *v11;
  NWConcrete_nw_masque_connection_pair *v12;
  void (**v13)(_QWORD);
  os_unfair_lock_s *v14;
  nw_connection_t *v15;
  os_unfair_lock_s *v16;
  _QWORD *v17;
  void (**v18)(_QWORD);
  NWConcrete_nw_masque_connection_pair *v19;
  os_unfair_lock_s *v20;
  void *v22;
  char *v23;
  NSObject *v24;
  os_log_type_t v25;
  void *v26;
  char *v27;
  NSObject *v28;
  os_log_type_t receiver;
  char *backtrace_string;
  os_log_type_t v31;
  _BOOL4 v32;
  char *v33;
  os_log_type_t v34;
  _BOOL4 v35;
  os_log_type_t v36;
  os_log_type_t v37;
  _QWORD v38[4];
  nw_connection_t *v39;
  NWConcrete_nw_masque_connection_pair *v40;
  _QWORD aBlock[4];
  nw_connection_t *v42;
  NWConcrete_nw_masque_connection_pair *v43;
  char v44;
  os_log_type_t type;
  objc_super v46;
  _BYTE buf[24];
  void *v48;
  os_unfair_lock_s *v49;
  _QWORD *v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v2 = a1;
  v3 = [NWConcrete_nw_masque_connection_pair alloc];
  v4 = v2;
  if (!v3)
    goto LABEL_4;
  v46.receiver = v3;
  v46.super_class = (Class)NWConcrete_nw_masque_connection_pair;
  v3 = -[NWConcrete_nw_masque_connection init](&v46, sel_init);
  if (v3)
  {
    v5 = dispatch_group_create();
    v6 = (void *)*((_QWORD *)v3 + 29);
    *((_QWORD *)v3 + 29) = v5;

    objc_storeStrong((id *)v3 + 2, a1);
    v7 = nw_connection_copy_endpoint(v4[6]);
    v8 = (void *)*((_QWORD *)v3 + 28);
    *((_QWORD *)v3 + 28) = v7;

    v9 = (void *)*((_QWORD *)v3 + 6);
    *((_QWORD *)v3 + 6) = 0;

    snprintf((char *)v3 + 200, 0x11uLL, "%llx", v3);
    goto LABEL_4;
  }
  __nwlog_obj();
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "-[NWConcrete_nw_masque_connection_pair initWithInnerConnection:]";
  v23 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v44 = 0;
  if ((__nwlog_fault(v23, &type, &v44) & 1) != 0)
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v24 = objc_claimAutoreleasedReturnValue();
      v25 = type;
      if (os_log_type_enabled(v24, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "-[NWConcrete_nw_masque_connection_pair initWithInnerConnection:]";
        _os_log_impl(&dword_182FBE000, v24, v25, "%{public}s [super init] failed", buf, 0xCu);
      }
    }
    else if (v44)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v24 = objc_claimAutoreleasedReturnValue();
      v31 = type;
      v32 = os_log_type_enabled(v24, type);
      if (backtrace_string)
      {
        if (v32)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "-[NWConcrete_nw_masque_connection_pair initWithInnerConnection:]";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v24, v31, "%{public}s [super init] failed, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_36;
      }
      if (v32)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "-[NWConcrete_nw_masque_connection_pair initWithInnerConnection:]";
        _os_log_impl(&dword_182FBE000, v24, v31, "%{public}s [super init] failed, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v24 = objc_claimAutoreleasedReturnValue();
      v36 = type;
      if (os_log_type_enabled(v24, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "-[NWConcrete_nw_masque_connection_pair initWithInnerConnection:]";
        _os_log_impl(&dword_182FBE000, v24, v36, "%{public}s [super init] failed, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_36:
  if (v23)
    free(v23);
  v3 = 0;
LABEL_4:

  v10 = MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = ___ZL32nw_masque_connection_pair_createP31NWConcrete_nw_masque_connection_block_invoke;
  aBlock[3] = &unk_1E14ACE68;
  v11 = v4;
  v42 = v11;
  v12 = v3;
  v43 = v12;
  v13 = (void (**)(_QWORD))_Block_copy(aBlock);
  v14 = (os_unfair_lock_s *)(v4 + 3);
  os_unfair_lock_lock(v14);
  v13[2](v13);
  os_unfair_lock_unlock(v14);

  v38[0] = v10;
  v38[1] = 3221225472;
  v38[2] = ___ZL32nw_masque_connection_pair_createP31NWConcrete_nw_masque_connection_block_invoke_2;
  v38[3] = &unk_1E14AD048;
  v15 = v11;
  v39 = v15;
  v40 = v12;
  v16 = v40;
  v17 = v38;
  if (v16)
  {
    *(_QWORD *)buf = v10;
    *(_QWORD *)&buf[8] = 3221225472;
    *(_QWORD *)&buf[16] = ___ZL51nw_masque_connection_pair_set_state_changed_handlerP36NWConcrete_nw_masque_connection_pairU13block_pointerFv21nw_connection_state_tPU22objcproto11OS_nw_error8NSObjectE_block_invoke;
    v48 = &unk_1E14ACE18;
    v49 = v16;
    v50 = v17;
    v18 = (void (**)(_QWORD))_Block_copy(buf);
    os_unfair_lock_lock(v16 + 2);
    v18[2](v18);
    os_unfair_lock_unlock(v16 + 2);

    goto LABEL_6;
  }
  __nwlog_obj();
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_masque_connection_pair_set_state_changed_handler";
  v27 = (char *)_os_log_send_and_compose_impl();

  LOBYTE(v46.receiver) = 16;
  type = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v27, &v46, &type))
  {
    if (LOBYTE(v46.receiver) == 17)
    {
      __nwlog_obj();
      v28 = objc_claimAutoreleasedReturnValue();
      receiver = (os_log_type_t)v46.receiver;
      if (os_log_type_enabled(v28, (os_log_type_t)v46.receiver))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_masque_connection_pair_set_state_changed_handler";
        _os_log_impl(&dword_182FBE000, v28, receiver, "%{public}s called with null pair", buf, 0xCu);
      }
    }
    else if (type)
    {
      v33 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v28 = objc_claimAutoreleasedReturnValue();
      v34 = (os_log_type_t)v46.receiver;
      v35 = os_log_type_enabled(v28, (os_log_type_t)v46.receiver);
      if (v33)
      {
        if (v35)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_masque_connection_pair_set_state_changed_handler";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v33;
          _os_log_impl(&dword_182FBE000, v28, v34, "%{public}s called with null pair, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v33);
        goto LABEL_42;
      }
      if (v35)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_masque_connection_pair_set_state_changed_handler";
        _os_log_impl(&dword_182FBE000, v28, v34, "%{public}s called with null pair, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v28 = objc_claimAutoreleasedReturnValue();
      v37 = (os_log_type_t)v46.receiver;
      if (os_log_type_enabled(v28, (os_log_type_t)v46.receiver))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_masque_connection_pair_set_state_changed_handler";
        _os_log_impl(&dword_182FBE000, v28, v37, "%{public}s called with null pair, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_42:
  if (v27)
    free(v27);
LABEL_6:

  v19 = v40;
  v20 = v16;

  return v20;
}

void sub_183644FDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,void *a34)
{
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;

  _Unwind_Resume(a1);
}

void nw_masque_connection_pair_setup_outer_connection(void *a1, void *a2, int a3, void *a4)
{
  id v7;
  id v8;
  os_unfair_lock_s *v9;
  id v10;
  uint64_t v11;
  nw_parameters_t secure_tcp;
  nw_parameters_t v13;
  os_unfair_lock_s *v14;
  void (**v15)(_QWORD);
  os_unfair_lock_s *v16;
  os_unfair_lock_s *v17;
  void (**v18)(_QWORD);
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  nw_endpoint_t v22;
  id v23;
  id v24;
  NSObject *v25;
  void *v26;
  char *v27;
  NSObject *v28;
  os_log_type_t v29;
  void *v30;
  char *v31;
  NSObject *v32;
  os_log_type_t v33;
  char *backtrace_string;
  os_log_type_t v35;
  _BOOL4 v36;
  char *v37;
  _BOOL4 v38;
  os_log_type_t v39;
  os_log_type_t v40;
  os_log_type_t type;
  const char *v42;
  id v43;
  _QWORD block[4];
  id v45;
  NSObject *v46;
  nw_endpoint_t v47;
  id v48;
  id v49;
  os_unfair_lock_s *v50;
  uint64_t *v51;
  uint64_t v52;
  char v53;
  _QWORD aBlock[4];
  os_unfair_lock_s *v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  void *(*v60)(uint64_t, uint64_t);
  void (*v61)(uint64_t);
  id v62;
  _QWORD v63[4];
  os_unfair_lock_s *v64;
  _BYTE *v65;
  char v66;
  _BYTE buf[24];
  uint64_t (*v68)(uint64_t, uint64_t);
  void (*v69)(uint64_t);
  id v70;
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  v7 = a1;
  v43 = a2;
  v8 = a4;
  v9 = (os_unfair_lock_s *)v7;
  v10 = v8;
  v11 = MEMORY[0x1E0C809B0];
  if (v9)
  {
    *(_QWORD *)buf = MEMORY[0x1E0C809B0];
    *(_QWORD *)&buf[8] = 3221225472;
    *(_QWORD *)&buf[16] = ___ZL40nw_masque_connection_pair_handle_headersP36NWConcrete_nw_masque_connection_pairPU29objcproto18OS_nw_http_request8NSObject_block_invoke;
    v68 = (uint64_t (*)(uint64_t, uint64_t))&unk_1E14A2DC0;
    v69 = v9;
    nw_http_fields_enumerate(v10, buf);

    goto LABEL_3;
  }
  __nwlog_obj();
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_masque_connection_pair_handle_headers";
  v27 = (char *)_os_log_send_and_compose_impl();

  LOBYTE(v63[0]) = 16;
  LOBYTE(v57) = 0;
  if (__nwlog_fault(v27, v63, &v57))
  {
    if (LOBYTE(v63[0]) == 17)
    {
      __nwlog_obj();
      v28 = objc_claimAutoreleasedReturnValue();
      v29 = v63[0];
      if (os_log_type_enabled(v28, v63[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_masque_connection_pair_handle_headers";
        _os_log_impl(&dword_182FBE000, v28, v29, "%{public}s called with null pair", buf, 0xCu);
      }
    }
    else if ((_BYTE)v57)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v28 = objc_claimAutoreleasedReturnValue();
      v35 = v63[0];
      v36 = os_log_type_enabled(v28, v63[0]);
      if (backtrace_string)
      {
        if (v36)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_masque_connection_pair_handle_headers";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v28, v35, "%{public}s called with null pair, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_44;
      }
      if (v36)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_masque_connection_pair_handle_headers";
        _os_log_impl(&dword_182FBE000, v28, v35, "%{public}s called with null pair, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v28 = objc_claimAutoreleasedReturnValue();
      v39 = v63[0];
      if (os_log_type_enabled(v28, v63[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_masque_connection_pair_handle_headers";
        _os_log_impl(&dword_182FBE000, v28, v39, "%{public}s called with null pair, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_44:
  if (v27)
    free(v27);
LABEL_3:

  if (a3 == 6)
  {
    secure_tcp = nw_parameters_create_secure_tcp(&__block_literal_global_18950, &__block_literal_global_86);
  }
  else if (a3 == 17)
  {
    secure_tcp = nw_parameters_create_secure_udp(&__block_literal_global_18950, &__block_literal_global_86);
  }
  else
  {
    secure_tcp = nw_parameters_create_custom_ip(a3, &__block_literal_global_86);
  }
  v13 = secure_tcp;
  v57 = 0;
  v58 = &v57;
  v59 = 0x3032000000;
  v60 = __Block_byref_object_copy__246;
  v61 = __Block_byref_object_dispose__247;
  v62 = 0;
  aBlock[0] = v11;
  aBlock[1] = 3221225472;
  aBlock[2] = ___ZL48nw_masque_connection_pair_setup_outer_connectionP36NWConcrete_nw_masque_connection_pairPU25objcproto14OS_nw_endpoint8NSObjecthPU29objcproto18OS_nw_http_requestS1__block_invoke;
  aBlock[3] = &unk_1E14ACE40;
  v56 = &v57;
  v14 = v9;
  v55 = v14;
  v15 = (void (**)(_QWORD))_Block_copy(aBlock);
  os_unfair_lock_lock(v9 + 2);
  v15[2](v15);
  os_unfair_lock_unlock(v9 + 2);

  v16 = (os_unfair_lock_s *)objc_loadWeakRetained((id *)(*(_QWORD *)&v14[4]._os_unfair_lock_opaque + 40));
  v17 = v16;
  if (v16)
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x3032000000;
    v68 = __Block_byref_object_copy__87292;
    v69 = __Block_byref_object_dispose__87293;
    v70 = 0;
    v63[0] = v11;
    v63[1] = 3221225472;
    v63[2] = __nw_masque_server_copy_client_queue_block_invoke;
    v63[3] = &unk_1E14ACE40;
    v65 = buf;
    v64 = v16;
    v18 = (void (**)(_QWORD))_Block_copy(v63);
    os_unfair_lock_lock(v17 + 4);
    v18[2](v18);
    os_unfair_lock_unlock(v17 + 4);

    v19 = *(id *)(*(_QWORD *)&buf[8] + 40);
    _Block_object_dispose(buf, 8);

    goto LABEL_10;
  }
  __nwlog_obj();
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_masque_server_copy_client_queue";
  v42 = (const char *)_os_log_send_and_compose_impl();

  LOBYTE(v63[0]) = 16;
  v66 = 0;
  v31 = (char *)v42;
  if (__nwlog_fault(v42, v63, &v66))
  {
    if (LOBYTE(v63[0]) == 17)
    {
      __nwlog_obj();
      v32 = objc_claimAutoreleasedReturnValue();
      v33 = v63[0];
      if (os_log_type_enabled(v32, v63[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_masque_server_copy_client_queue";
        _os_log_impl(&dword_182FBE000, v32, v33, "%{public}s called with null server", buf, 0xCu);
      }
    }
    else if (v66)
    {
      v37 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v32 = objc_claimAutoreleasedReturnValue();
      type = v63[0];
      v38 = os_log_type_enabled(v32, v63[0]);
      if (v37)
      {
        if (v38)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_masque_server_copy_client_queue";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v37;
          _os_log_impl(&dword_182FBE000, v32, type, "%{public}s called with null server, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v37);
        goto LABEL_49;
      }
      if (v38)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_masque_server_copy_client_queue";
        _os_log_impl(&dword_182FBE000, v32, type, "%{public}s called with null server, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v32 = objc_claimAutoreleasedReturnValue();
      v40 = v63[0];
      if (os_log_type_enabled(v32, v63[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_masque_server_copy_client_queue";
        _os_log_impl(&dword_182FBE000, v32, v40, "%{public}s called with null server, backtrace limit exceeded", buf, 0xCu);
      }
    }

LABEL_49:
    v31 = (char *)v42;
  }
  if (v31)
    free(v31);
  v19 = 0;
LABEL_10:

  if (v58[5] && v19)
  {
    v20 = *(_QWORD *)&v14[4]._os_unfair_lock_opaque;
    v21 = *(_QWORD *)(v20 + 16);
    v22 = nw_connection_copy_endpoint(*(nw_connection_t *)(v20 + 48));
    v23 = *(id *)(*(_QWORD *)&v14[4]._os_unfair_lock_opaque + 32);
    block[0] = v11;
    block[1] = 3221225472;
    block[2] = ___ZL48nw_masque_connection_pair_setup_outer_connectionP36NWConcrete_nw_masque_connection_pairPU25objcproto14OS_nw_endpoint8NSObjecthPU29objcproto18OS_nw_http_requestS1__block_invoke_2;
    block[3] = &unk_1E149F700;
    v51 = &v57;
    v52 = v21;
    v45 = v43;
    v46 = v13;
    v47 = v22;
    v48 = v10;
    v49 = v23;
    v50 = v14;
    v53 = a3;
    v24 = v23;
    v25 = v22;
    dispatch_async(v19, block);

  }
  else
  {
    nw_masque_connection_pair_setup_outer_connection_inner(v14, v43, a3, v13);
  }

  _Block_object_dispose(&v57, 8);
}

void sub_183645878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,id a41)
{
  void *v41;
  void *v42;
  void *v43;
  void *v44;

  _Block_object_dispose(&a36, 8);
  _Unwind_Resume(a1);
}

void ___ZL37nw_masque_read_inner_request_on_queueP31NWConcrete_nw_masque_connection_block_invoke_204(uint64_t a1)
{
  nw_connection_cancel(*(nw_connection_t *)(*(_QWORD *)(a1 + 32) + 48));
}

os_unfair_lock_s *nw_masque_listener_pair_create(NWConcrete_nw_masque_connection *a1)
{
  NWConcrete_nw_masque_connection *v2;
  NWConcrete_nw_masque_listener_pair *v3;
  nw_connection_t *v4;
  dispatch_group_t v5;
  void *v6;
  nw_endpoint_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  nw_connection_t *v11;
  NWConcrete_nw_masque_listener_pair *v12;
  void (**v13)(_QWORD);
  os_unfair_lock_s *v14;
  nw_connection_t *v15;
  os_unfair_lock_s *v16;
  _QWORD *v17;
  void (**v18)(_QWORD);
  NWConcrete_nw_masque_listener_pair *v19;
  os_unfair_lock_s *v20;
  void *v22;
  char *v23;
  NSObject *v24;
  os_log_type_t v25;
  void *v26;
  char *v27;
  NSObject *v28;
  os_log_type_t receiver;
  char *backtrace_string;
  os_log_type_t v31;
  _BOOL4 v32;
  char *v33;
  os_log_type_t v34;
  _BOOL4 v35;
  os_log_type_t v36;
  os_log_type_t v37;
  _QWORD v38[4];
  nw_connection_t *v39;
  NWConcrete_nw_masque_listener_pair *v40;
  _QWORD aBlock[4];
  nw_connection_t *v42;
  NWConcrete_nw_masque_listener_pair *v43;
  char v44;
  os_log_type_t type;
  objc_super v46;
  _BYTE buf[24];
  void *v48;
  os_unfair_lock_s *v49;
  _QWORD *v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v2 = a1;
  v3 = [NWConcrete_nw_masque_listener_pair alloc];
  v4 = v2;
  if (!v3)
    goto LABEL_4;
  v46.receiver = v3;
  v46.super_class = (Class)NWConcrete_nw_masque_listener_pair;
  v3 = -[NWConcrete_nw_masque_connection init](&v46, sel_init);
  if (v3)
  {
    v5 = dispatch_group_create();
    v6 = (void *)*((_QWORD *)v3 + 12);
    *((_QWORD *)v3 + 12) = v5;

    objc_storeStrong((id *)v3 + 2, a1);
    v7 = nw_connection_copy_endpoint(v4[6]);
    v8 = (void *)*((_QWORD *)v3 + 11);
    *((_QWORD *)v3 + 11) = v7;

    v9 = (void *)*((_QWORD *)v3 + 3);
    *((_QWORD *)v3 + 3) = 0;

    snprintf((char *)v3 + 64, 0x11uLL, "%llx", v3);
    goto LABEL_4;
  }
  __nwlog_obj();
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "-[NWConcrete_nw_masque_listener_pair initWithInnerConnection:]";
  v23 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v44 = 0;
  if ((__nwlog_fault(v23, &type, &v44) & 1) != 0)
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v24 = objc_claimAutoreleasedReturnValue();
      v25 = type;
      if (os_log_type_enabled(v24, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "-[NWConcrete_nw_masque_listener_pair initWithInnerConnection:]";
        _os_log_impl(&dword_182FBE000, v24, v25, "%{public}s [super init] failed", buf, 0xCu);
      }
    }
    else if (v44)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v24 = objc_claimAutoreleasedReturnValue();
      v31 = type;
      v32 = os_log_type_enabled(v24, type);
      if (backtrace_string)
      {
        if (v32)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "-[NWConcrete_nw_masque_listener_pair initWithInnerConnection:]";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v24, v31, "%{public}s [super init] failed, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_36;
      }
      if (v32)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "-[NWConcrete_nw_masque_listener_pair initWithInnerConnection:]";
        _os_log_impl(&dword_182FBE000, v24, v31, "%{public}s [super init] failed, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v24 = objc_claimAutoreleasedReturnValue();
      v36 = type;
      if (os_log_type_enabled(v24, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "-[NWConcrete_nw_masque_listener_pair initWithInnerConnection:]";
        _os_log_impl(&dword_182FBE000, v24, v36, "%{public}s [super init] failed, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_36:
  if (v23)
    free(v23);
  v3 = 0;
LABEL_4:

  v10 = MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = ___ZL30nw_masque_listener_pair_createP31NWConcrete_nw_masque_connection_block_invoke;
  aBlock[3] = &unk_1E14ACE68;
  v11 = v4;
  v42 = v11;
  v12 = v3;
  v43 = v12;
  v13 = (void (**)(_QWORD))_Block_copy(aBlock);
  v14 = (os_unfair_lock_s *)(v4 + 3);
  os_unfair_lock_lock(v14);
  v13[2](v13);
  os_unfair_lock_unlock(v14);

  v38[0] = v10;
  v38[1] = 3221225472;
  v38[2] = ___ZL30nw_masque_listener_pair_createP31NWConcrete_nw_masque_connection_block_invoke_2;
  v38[3] = &unk_1E14AD048;
  v15 = v11;
  v39 = v15;
  v40 = v12;
  v16 = v40;
  v17 = v38;
  if (v16)
  {
    *(_QWORD *)buf = v10;
    *(_QWORD *)&buf[8] = 3221225472;
    *(_QWORD *)&buf[16] = ___ZL49nw_masque_listener_pair_set_state_changed_handlerP34NWConcrete_nw_masque_listener_pairU13block_pointerFv21nw_connection_state_tPU22objcproto11OS_nw_error8NSObjectE_block_invoke;
    v48 = &unk_1E14ACE18;
    v49 = v16;
    v50 = v17;
    v18 = (void (**)(_QWORD))_Block_copy(buf);
    os_unfair_lock_lock(v16 + 2);
    v18[2](v18);
    os_unfair_lock_unlock(v16 + 2);

    goto LABEL_6;
  }
  __nwlog_obj();
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_masque_listener_pair_set_state_changed_handler";
  v27 = (char *)_os_log_send_and_compose_impl();

  LOBYTE(v46.receiver) = 16;
  type = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v27, &v46, &type))
  {
    if (LOBYTE(v46.receiver) == 17)
    {
      __nwlog_obj();
      v28 = objc_claimAutoreleasedReturnValue();
      receiver = (os_log_type_t)v46.receiver;
      if (os_log_type_enabled(v28, (os_log_type_t)v46.receiver))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_masque_listener_pair_set_state_changed_handler";
        _os_log_impl(&dword_182FBE000, v28, receiver, "%{public}s called with null pair", buf, 0xCu);
      }
    }
    else if (type)
    {
      v33 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v28 = objc_claimAutoreleasedReturnValue();
      v34 = (os_log_type_t)v46.receiver;
      v35 = os_log_type_enabled(v28, (os_log_type_t)v46.receiver);
      if (v33)
      {
        if (v35)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_masque_listener_pair_set_state_changed_handler";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v33;
          _os_log_impl(&dword_182FBE000, v28, v34, "%{public}s called with null pair, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v33);
        goto LABEL_42;
      }
      if (v35)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_masque_listener_pair_set_state_changed_handler";
        _os_log_impl(&dword_182FBE000, v28, v34, "%{public}s called with null pair, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v28 = objc_claimAutoreleasedReturnValue();
      v37 = (os_log_type_t)v46.receiver;
      if (os_log_type_enabled(v28, (os_log_type_t)v46.receiver))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_masque_listener_pair_set_state_changed_handler";
        _os_log_impl(&dword_182FBE000, v28, v37, "%{public}s called with null pair, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_42:
  if (v27)
    free(v27);
LABEL_6:

  v19 = v40;
  v20 = v16;

  return v20;
}

void sub_183645FB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,void *a34)
{
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;

  _Unwind_Resume(a1);
}

void nw_masque_listener_pair_setup_outer_connection_group(void *a1, void *a2)
{
  id v3;
  id v4;
  NSObject *secure_udp;
  NSObject *v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  nw_endpoint_t v10;
  uint64_t v11;
  nw_connection_group_t *v12;
  void (**v13)(_QWORD);
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  id *v17;
  nw_connection_group_t v18;
  NSObject *v19;
  nw_connection_group_t *v20;
  nw_connection_group_t *v21;
  nw_connection_group_t *v22;
  NSObject *v23;
  void *v24;
  char *v25;
  NSObject *v26;
  os_log_type_t v27;
  void *v28;
  char *v29;
  NSObject *v30;
  os_log_type_t v31;
  void *v32;
  os_log_type_t v33;
  char *v34;
  os_log_type_t v35;
  _BOOL4 v36;
  char *v37;
  _BOOL4 v38;
  char *backtrace_string;
  _BOOL4 v40;
  os_log_type_t v41;
  os_log_type_t v42;
  os_log_type_t v43;
  os_log_type_t v44;
  os_log_type_t v45;
  _QWORD state_changed_handler[4];
  nw_connection_group_t *v47;
  _QWORD aBlock[4];
  nw_connection_group_t *v49;
  _BYTE *v50;
  char v51;
  os_log_type_t type;
  _BYTE v53[24];
  void *(*v54)(uint64_t, uint64_t);
  void (*v55)(uint64_t);
  id v56;
  _BYTE buf[24];
  NSObject *v58;
  nw_connection_group_t *v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (v3)
  {
    secure_udp = nw_parameters_create_secure_udp(&__block_literal_global_18950, &__block_literal_global_86);
    v6 = secure_udp;
    v7 = *(NSObject **)(*((_QWORD *)v3 + 2) + 80);
    if (v7)
      nw_parameters_require_interface(secure_udp, v7);
    nw_parameters_set_proxy_applied(v6, 1);
    v8 = *((_QWORD *)v3 + 2);
    v9 = *(_QWORD *)(v8 + 16);
    v10 = nw_connection_copy_endpoint(*(nw_connection_t *)(v8 + 48));
    *(_QWORD *)v53 = 0;
    *(_QWORD *)&v53[8] = v53;
    *(_QWORD *)&v53[16] = 0x3032000000;
    v54 = __Block_byref_object_copy__246;
    v55 = __Block_byref_object_dispose__247;
    v11 = MEMORY[0x1E0C809B0];
    v56 = 0;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 3221225472;
    aBlock[2] = ___ZL52nw_masque_listener_pair_setup_outer_connection_groupP34NWConcrete_nw_masque_listener_pairhPU29objcproto18OS_nw_http_request8NSObject_block_invoke;
    aBlock[3] = &unk_1E14ACE40;
    v50 = v53;
    v12 = (nw_connection_group_t *)v3;
    v49 = v12;
    v13 = (void (**)(_QWORD))_Block_copy(aBlock);
    os_unfair_lock_lock((os_unfair_lock_t)v3 + 2);
    v13[2](v13);
    os_unfair_lock_unlock((os_unfair_lock_t)v3 + 2);

    v14 = *(_QWORD *)(*(_QWORD *)&v53[8] + 40);
    if (v14)
      (*(void (**)(uint64_t, uint64_t, _QWORD, NSObject *, nw_endpoint_t, id))(v14 + 16))(v14, v9, 0, v6, v10, v4);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v15 = (id)gLogObj;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      v16 = *((_QWORD *)v3 + 2);
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = "nw_masque_listener_pair_setup_outer_connection_group";
      *(_WORD *)&buf[12] = 2114;
      *(_QWORD *)&buf[14] = v16;
      *(_WORD *)&buf[22] = 2112;
      v58 = v6;
      _os_log_impl(&dword_182FBE000, v15, OS_LOG_TYPE_INFO, "%{public}s %{public}@ creating new outer connection group with parameters %@", buf, 0x20u);
    }

    v17 = nw_connection_group_create_with_parameters(v6);
    v18 = v12[3];
    v12[3] = (nw_connection_group_t)v17;

    nw_connection_group_set_queue(v12[3], *(dispatch_queue_t *)(*((_QWORD *)v3 + 2) + 32));
    v19 = v12[3];
    state_changed_handler[0] = v11;
    state_changed_handler[1] = 3221225472;
    state_changed_handler[2] = ___ZL52nw_masque_listener_pair_setup_outer_connection_groupP34NWConcrete_nw_masque_listener_pairhPU29objcproto18OS_nw_http_request8NSObject_block_invoke_307;
    state_changed_handler[3] = &unk_1E14ACF48;
    v20 = v12;
    v47 = v20;
    nw_connection_group_set_state_changed_handler(v19, state_changed_handler);
    v21 = v20;
    v22 = v21;
    if (*(_QWORD *)(*((_QWORD *)v3 + 2) + 48))
    {
      v23 = v12[3];
      if (v23)
      {
        *(_QWORD *)buf = v11;
        *(_QWORD *)&buf[8] = 3221225472;
        *(_QWORD *)&buf[16] = ___ZL44nw_masque_listener_pair_read_outer_datagramsP34NWConcrete_nw_masque_listener_pair_block_invoke;
        v58 = &unk_1E149F838;
        v59 = v21;
        nw_connection_group_set_receive_handler(v23, 0xFFFFFFFF, 0, buf);

LABEL_11:
        nw_connection_group_start(v12[3]);

        _Block_object_dispose(v53, 8);
        goto LABEL_12;
      }
      __nwlog_obj();
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_masque_listener_pair_read_outer_datagrams";
      v29 = (char *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v51 = 0;
      if (!__nwlog_fault(v29, &type, &v51))
        goto LABEL_64;
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v30 = objc_claimAutoreleasedReturnValue();
        v33 = type;
        if (os_log_type_enabled(v30, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_masque_listener_pair_read_outer_datagrams";
          _os_log_impl(&dword_182FBE000, v30, v33, "%{public}s called with null pair->mlp_outer_connection_group", buf, 0xCu);
        }
      }
      else if (v51)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v30 = objc_claimAutoreleasedReturnValue();
        v45 = type;
        v40 = os_log_type_enabled(v30, type);
        if (backtrace_string)
        {
          if (v40)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_masque_listener_pair_read_outer_datagrams";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = backtrace_string;
            _os_log_impl(&dword_182FBE000, v30, v45, "%{public}s called with null pair->mlp_outer_connection_group, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          if (!v29)
            goto LABEL_11;
          goto LABEL_65;
        }
        if (v40)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_masque_listener_pair_read_outer_datagrams";
          _os_log_impl(&dword_182FBE000, v30, v45, "%{public}s called with null pair->mlp_outer_connection_group, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v30 = objc_claimAutoreleasedReturnValue();
        v43 = type;
        if (os_log_type_enabled(v30, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_masque_listener_pair_read_outer_datagrams";
          _os_log_impl(&dword_182FBE000, v30, v43, "%{public}s called with null pair->mlp_outer_connection_group, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
    else
    {
      __nwlog_obj();
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_masque_listener_pair_read_outer_datagrams";
      v29 = (char *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v51 = 0;
      if (!__nwlog_fault(v29, &type, &v51))
        goto LABEL_64;
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v30 = objc_claimAutoreleasedReturnValue();
        v31 = type;
        if (os_log_type_enabled(v30, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_masque_listener_pair_read_outer_datagrams";
          _os_log_impl(&dword_182FBE000, v30, v31, "%{public}s called with null pair->mlp_parent->mc_in_connection", buf, 0xCu);
        }
      }
      else if (v51)
      {
        v37 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v30 = objc_claimAutoreleasedReturnValue();
        v44 = type;
        v38 = os_log_type_enabled(v30, type);
        if (v37)
        {
          if (v38)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_masque_listener_pair_read_outer_datagrams";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v37;
            _os_log_impl(&dword_182FBE000, v30, v44, "%{public}s called with null pair->mlp_parent->mc_in_connection, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v37);
LABEL_64:
          if (!v29)
            goto LABEL_11;
LABEL_65:
          free(v29);
          goto LABEL_11;
        }
        if (v38)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_masque_listener_pair_read_outer_datagrams";
          _os_log_impl(&dword_182FBE000, v30, v44, "%{public}s called with null pair->mlp_parent->mc_in_connection, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v30 = objc_claimAutoreleasedReturnValue();
        v42 = type;
        if (os_log_type_enabled(v30, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_masque_listener_pair_read_outer_datagrams";
          _os_log_impl(&dword_182FBE000, v30, v42, "%{public}s called with null pair->mlp_parent->mc_in_connection, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }

    goto LABEL_64;
  }
  __nwlog_obj();
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)v53 = 136446210;
  *(_QWORD *)&v53[4] = "nw_masque_listener_pair_setup_outer_connection_group";
  v25 = (char *)_os_log_send_and_compose_impl();

  buf[0] = 16;
  type = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v25, buf, &type))
  {
    if (buf[0] == 17)
    {
      __nwlog_obj();
      v26 = objc_claimAutoreleasedReturnValue();
      v27 = buf[0];
      if (os_log_type_enabled(v26, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)v53 = 136446210;
        *(_QWORD *)&v53[4] = "nw_masque_listener_pair_setup_outer_connection_group";
        _os_log_impl(&dword_182FBE000, v26, v27, "%{public}s called with null pair", v53, 0xCu);
      }
    }
    else if (type)
    {
      v34 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v26 = objc_claimAutoreleasedReturnValue();
      v35 = buf[0];
      v36 = os_log_type_enabled(v26, (os_log_type_t)buf[0]);
      if (v34)
      {
        if (v36)
        {
          *(_DWORD *)v53 = 136446466;
          *(_QWORD *)&v53[4] = "nw_masque_listener_pair_setup_outer_connection_group";
          *(_WORD *)&v53[12] = 2082;
          *(_QWORD *)&v53[14] = v34;
          _os_log_impl(&dword_182FBE000, v26, v35, "%{public}s called with null pair, dumping backtrace:%{public}s", v53, 0x16u);
        }

        free(v34);
        goto LABEL_56;
      }
      if (v36)
      {
        *(_DWORD *)v53 = 136446210;
        *(_QWORD *)&v53[4] = "nw_masque_listener_pair_setup_outer_connection_group";
        _os_log_impl(&dword_182FBE000, v26, v35, "%{public}s called with null pair, no backtrace", v53, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v26 = objc_claimAutoreleasedReturnValue();
      v41 = buf[0];
      if (os_log_type_enabled(v26, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)v53 = 136446210;
        *(_QWORD *)&v53[4] = "nw_masque_listener_pair_setup_outer_connection_group";
        _os_log_impl(&dword_182FBE000, v26, v41, "%{public}s called with null pair, backtrace limit exceeded", v53, 0xCu);
      }
    }

  }
LABEL_56:
  if (v25)
    free(v25);
LABEL_12:

}

void sub_1836469A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void nw_masque_listener_pair_read_inner(NWConcrete_nw_masque_listener_pair *a1)
{
  NWConcrete_nw_masque_listener_pair *v1;
  NWConcrete_nw_masque_listener_pair *v2;
  void *v3;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  void *v8;
  os_log_type_t v9;
  void *v10;
  os_log_type_t v11;
  char *backtrace_string;
  os_log_type_t v13;
  _BOOL4 v14;
  char *v15;
  os_log_type_t v16;
  _BOOL4 v17;
  os_log_type_t v18;
  _BOOL4 v19;
  os_log_type_t v20;
  os_log_type_t v21;
  os_log_type_t v22;
  _QWORD v23[4];
  NWConcrete_nw_masque_listener_pair *v24;
  char v25;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v28;
  __int16 v29;
  char *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v28 = "nw_masque_listener_pair_read_inner";
    v5 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v25 = 0;
    if (!__nwlog_fault(v5, &type, &v25))
      goto LABEL_55;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_masque_listener_pair_read_inner";
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null pair", buf, 0xCu);
      }
    }
    else if (v25)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      v14 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          v28 = "nw_masque_listener_pair_read_inner";
          v29 = 2082;
          v30 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v13, "%{public}s called with null pair, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_55:
        if (!v5)
          goto LABEL_5;
LABEL_56:
        free(v5);
        goto LABEL_5;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_masque_listener_pair_read_inner";
        _os_log_impl(&dword_182FBE000, v6, v13, "%{public}s called with null pair, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v20 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_masque_listener_pair_read_inner";
        _os_log_impl(&dword_182FBE000, v6, v20, "%{public}s called with null pair, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_54:

    goto LABEL_55;
  }
  v3 = *(void **)(*((_QWORD *)v1 + 2) + 48);
  if (!v3)
  {
    __nwlog_obj();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v28 = "nw_masque_listener_pair_read_inner";
    v5 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v25 = 0;
    if (!__nwlog_fault(v5, &type, &v25))
      goto LABEL_55;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_masque_listener_pair_read_inner";
        _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null pair->mlp_parent->mc_in_connection", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v25)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v21 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_masque_listener_pair_read_inner";
        _os_log_impl(&dword_182FBE000, v6, v21, "%{public}s called with null pair->mlp_parent->mc_in_connection, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    v15 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v6 = objc_claimAutoreleasedReturnValue();
    v16 = type;
    v17 = os_log_type_enabled(v6, type);
    if (!v15)
    {
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_masque_listener_pair_read_inner";
        _os_log_impl(&dword_182FBE000, v6, v16, "%{public}s called with null pair->mlp_parent->mc_in_connection, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v17)
    {
      *(_DWORD *)buf = 136446466;
      v28 = "nw_masque_listener_pair_read_inner";
      v29 = 2082;
      v30 = v15;
      _os_log_impl(&dword_182FBE000, v6, v16, "%{public}s called with null pair->mlp_parent->mc_in_connection, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_35;
  }
  if (!*((_QWORD *)v1 + 3))
  {
    __nwlog_obj();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v28 = "nw_masque_listener_pair_read_inner";
    v5 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v25 = 0;
    if (!__nwlog_fault(v5, &type, &v25))
      goto LABEL_55;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_masque_listener_pair_read_inner";
        _os_log_impl(&dword_182FBE000, v6, v11, "%{public}s called with null pair->mlp_outer_connection_group", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v25)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v22 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_masque_listener_pair_read_inner";
        _os_log_impl(&dword_182FBE000, v6, v22, "%{public}s called with null pair->mlp_outer_connection_group, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    v15 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v6 = objc_claimAutoreleasedReturnValue();
    v18 = type;
    v19 = os_log_type_enabled(v6, type);
    if (!v15)
    {
      if (v19)
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_masque_listener_pair_read_inner";
        _os_log_impl(&dword_182FBE000, v6, v18, "%{public}s called with null pair->mlp_outer_connection_group, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v19)
    {
      *(_DWORD *)buf = 136446466;
      v28 = "nw_masque_listener_pair_read_inner";
      v29 = 2082;
      v30 = v15;
      _os_log_impl(&dword_182FBE000, v6, v18, "%{public}s called with null pair->mlp_outer_connection_group, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_35:

    free(v15);
    if (!v5)
      goto LABEL_5;
    goto LABEL_56;
  }
  v23[0] = MEMORY[0x1E0C809B0];
  v23[1] = 3221225472;
  v23[2] = ___ZL34nw_masque_listener_pair_read_innerP34NWConcrete_nw_masque_listener_pair_block_invoke;
  v23[3] = &unk_1E14A3048;
  v24 = v1;
  nw_connection_receive_internal(v3, 0, 1u, 0xFFFFFFFF, v23);

LABEL_5:
}

void sub_18364713C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  void *v17;

  _Unwind_Resume(a1);
}

void ___ZL37nw_masque_read_inner_request_on_queueP31NWConcrete_nw_masque_connection_block_invoke_211(uint64_t a1)
{
  nw_connection_cancel(*(nw_connection_t *)(*(_QWORD *)(a1 + 32) + 48));
}

void ___ZL37nw_masque_read_inner_request_on_queueP31NWConcrete_nw_masque_connection_block_invoke_213(uint64_t a1)
{
  nw_connection_cancel(*(nw_connection_t *)(*(_QWORD *)(a1 + 32) + 48));
}

id nw_masque_copy_matching_connection_pair(void *a1, void *a2, uint64_t a3)
{
  os_unfair_lock_s *v5;
  id v6;
  os_unfair_lock_s *v7;
  os_unfair_lock_s *v8;
  id v9;
  void (**v10)(_QWORD);
  id v11;
  _QWORD v13[4];
  os_unfair_lock_s *v14;
  id v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, uint64_t);
  void (*v22)(uint64_t);
  id v23;

  v5 = a1;
  v6 = a2;
  v18 = 0;
  v19 = &v18;
  v20 = 0x3032000000;
  v21 = __Block_byref_object_copy__29319;
  v22 = __Block_byref_object_dispose__29320;
  v23 = 0;
  v7 = v5 + 6;
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3221225472;
  v13[2] = ___ZL39nw_masque_copy_matching_connection_pairP31NWConcrete_nw_masque_connectionPU25objcproto14OS_nw_endpoint8NSObjectPKc_block_invoke;
  v13[3] = &unk_1E14A2B60;
  v8 = v5;
  v14 = v8;
  v15 = v6;
  v16 = &v18;
  v17 = a3;
  v9 = v6;
  v10 = (void (**)(_QWORD))_Block_copy(v13);
  os_unfair_lock_lock(v7);
  v10[2](v10);
  os_unfair_lock_unlock(v7);

  v11 = (id)v19[5];
  _Block_object_dispose(&v18, 8);

  return v11;
}

void sub_18364729C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  void *v22;
  void *v23;
  void *v24;

  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

void nw_masque_connection_pair_setup_inner_direct_connections(void *a1, void *a2)
{
  id v3;
  NSObject *v4;
  nw_parameters_t v5;
  nw_parameters_t v6;
  uint64_t v7;
  NSObject *v8;
  _BOOL8 v9;
  NSObject *v10;
  void *v11;
  NWConcrete_nw_protocol_options *options;
  _QWORD *v13;
  void *v14;
  NSObject *v15;
  NSObject *v16;
  _BOOL8 v17;
  NSObject *v18;
  NSObject *v19;
  id v20;
  NWConcrete_nw_connection *v21;
  uint64_t v22;
  _BOOL8 v23;
  void *v24;
  void *v25;
  char *v26;
  NSObject *v27;
  os_log_type_t v28;
  char *backtrace_string;
  os_log_type_t v30;
  _BOOL4 v31;
  os_log_type_t v32;
  _QWORD v33[4];
  id v34;
  NWConcrete_nw_connection *v35;
  _QWORD handler[4];
  id v37;
  char v38;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v41;
  __int16 v42;
  char *v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (v3)
  {
    v5 = nw_connection_copy_parameters(*(nw_connection_t *)(*((_QWORD *)v3 + 2) + 48));
    v6 = v5;
    v7 = MEMORY[0x1E0C809B0];
    if (!*((_QWORD *)v3 + 4))
    {
      v8 = v5;
      v9 = -[NWConcrete_nw_parameters initWithParameters:stripConnected:shallowCopy:]((id *)[NWConcrete_nw_parameters alloc], v8, 0, 0);

      v10 = nw_parameters_copy_default_protocol_stack((nw_parameters_t)v9);
      nw_protocol_stack_clear_application_protocols(v10);
      if (nw_protocol_demux_copy_definition::onceToken != -1)
        dispatch_once(&nw_protocol_demux_copy_definition::onceToken, &__block_literal_global_5_25927);
      if (nw_protocol_demux_copy_definition::definition)
      {
        v11 = os_retain((void *)nw_protocol_demux_copy_definition::definition);
        options = nw_protocol_create_options(v11);
        if (v11)
          os_release(v11);
      }
      else
      {
        options = nw_protocol_create_options(0);
      }
      nw_protocol_stack_prepend_application_protocol(v10, &options->super);

      v13 = nw_connection_create_with_connection(*(void **)(*((_QWORD *)v3 + 2) + 48), (void *)v9);
      v14 = (void *)*((_QWORD *)v3 + 4);
      *((_QWORD *)v3 + 4) = v13;

      nw_connection_set_queue(*((nw_connection_t *)v3 + 4), *(dispatch_queue_t *)(*((_QWORD *)v3 + 2) + 32));
      v15 = *((_QWORD *)v3 + 4);
      handler[0] = v7;
      handler[1] = 3221225472;
      handler[2] = ___ZL56nw_masque_connection_pair_setup_inner_direct_connectionsP36NWConcrete_nw_masque_connection_pairPU33objcproto22OS_nw_protocol_options8NSObject_block_invoke;
      handler[3] = &unk_1E14ACF48;
      v37 = v3;
      nw_connection_set_state_changed_handler(v15, handler);
      nw_connection_start(*((nw_connection_t *)v3 + 4));

    }
    v16 = v6;
    v17 = -[NWConcrete_nw_parameters initWithParameters:stripConnected:shallowCopy:]((id *)[NWConcrete_nw_parameters alloc], v16, 0, 0);

    v18 = nw_parameters_copy_default_protocol_stack((nw_parameters_t)v17);
    nw_protocol_stack_clear_application_protocols(v18);
    nw_protocol_stack_prepend_application_protocol(v18, v4);
    v19 = nw_connection_create_with_connection(*(void **)(*((_QWORD *)v3 + 2) + 48), (void *)v17);
    nw_connection_set_queue(v19, *(dispatch_queue_t *)(*((_QWORD *)v3 + 2) + 32));
    v33[0] = v7;
    v33[1] = 3221225472;
    v33[2] = ___ZL56nw_masque_connection_pair_setup_inner_direct_connectionsP36NWConcrete_nw_masque_connection_pairPU33objcproto22OS_nw_protocol_options8NSObject_block_invoke_322;
    v33[3] = &unk_1E14AD048;
    v20 = v3;
    v34 = v20;
    v21 = v19;
    v35 = v21;
    nw_connection_set_state_changed_handler(&v21->super, v33);
    nw_connection_start(&v21->super);
    v22 = *((_QWORD *)v20 + 5);
    if (!v22)
    {
      v23 = nw_array_create();
      v24 = (void *)*((_QWORD *)v20 + 5);
      *((_QWORD *)v20 + 5) = v23;

      v22 = *((_QWORD *)v20 + 5);
    }
    nw_array_append(v22, v21);
    nw_masque_connection_pair_read_inner_direct((NWConcrete_nw_masque_connection_pair *)v20, v21);

    goto LABEL_13;
  }
  __nwlog_obj();
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v41 = "nw_masque_connection_pair_setup_inner_direct_connections";
  v26 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v38 = 0;
  if (__nwlog_fault(v26, &type, &v38))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v27 = objc_claimAutoreleasedReturnValue();
      v28 = type;
      if (os_log_type_enabled(v27, type))
      {
        *(_DWORD *)buf = 136446210;
        v41 = "nw_masque_connection_pair_setup_inner_direct_connections";
        _os_log_impl(&dword_182FBE000, v27, v28, "%{public}s called with null pair", buf, 0xCu);
      }
    }
    else if (v38)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v27 = objc_claimAutoreleasedReturnValue();
      v30 = type;
      v31 = os_log_type_enabled(v27, type);
      if (backtrace_string)
      {
        if (v31)
        {
          *(_DWORD *)buf = 136446466;
          v41 = "nw_masque_connection_pair_setup_inner_direct_connections";
          v42 = 2082;
          v43 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v27, v30, "%{public}s called with null pair, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_30;
      }
      if (v31)
      {
        *(_DWORD *)buf = 136446210;
        v41 = "nw_masque_connection_pair_setup_inner_direct_connections";
        _os_log_impl(&dword_182FBE000, v27, v30, "%{public}s called with null pair, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v27 = objc_claimAutoreleasedReturnValue();
      v32 = type;
      if (os_log_type_enabled(v27, type))
      {
        *(_DWORD *)buf = 136446210;
        v41 = "nw_masque_connection_pair_setup_inner_direct_connections";
        _os_log_impl(&dword_182FBE000, v27, v32, "%{public}s called with null pair, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_30:
  if (v26)
    free(v26);
LABEL_13:

}

void sub_1836477B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;

  _Unwind_Resume(a1);
}

void ___ZL37nw_masque_read_inner_request_on_queueP31NWConcrete_nw_masque_connection_block_invoke_214(uint64_t a1)
{
  nw_connection_cancel(*(nw_connection_t *)(*(_QWORD *)(a1 + 32) + 48));
}

uint64_t ___ZL37nw_masque_read_inner_request_on_queueP31NWConcrete_nw_masque_connection_block_invoke_231(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v6;
  void *v7;

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithCString:encoding:", a2, 5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithCString:encoding:", a4, 5);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "setValue:forHTTPHeaderField:", v7, v6);
  if (!objc_msgSend(v6, "caseInsensitiveCompare:", CFSTR("content-length")))
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = objc_msgSend(v7, "integerValue");

  return 1;
}

void sub_183647920(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZL37nw_masque_read_inner_request_on_queueP31NWConcrete_nw_masque_connection_block_invoke_235(uint64_t a1)
{
  nw_connection_cancel(*(nw_connection_t *)(*(_QWORD *)(a1 + 32) + 48));
}

void ___ZL37nw_masque_read_inner_request_on_queueP31NWConcrete_nw_masque_connection_block_invoke_2_236(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  void *v5;
  id v6;
  void *v7;
  uint64_t v8;
  void *v9;
  _QWORD v10[4];
  id v11;

  v3 = *(void **)(a1 + 32);
  v4 = a2;
  v5 = v4;
  if (v4)
    v6 = v4;

  objc_msgSend(v3, "setHTTPBody:", v5);
  objc_msgSend(MEMORY[0x1E0C92C98], "sharedSession");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = ___ZL37nw_masque_read_inner_request_on_queueP31NWConcrete_nw_masque_connection_block_invoke_3_238;
  v10[3] = &unk_1E149F690;
  v8 = *(_QWORD *)(a1 + 32);
  v11 = *(id *)(a1 + 40);
  objc_msgSend(v7, "dataTaskWithRequest:completionHandler:", v8, v10);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "resume");

}

void sub_183647A14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void ___ZL37nw_masque_read_inner_request_on_queueP31NWConcrete_nw_masque_connection_block_invoke_242(uint64_t a1)
{
  nw_connection_cancel(*(nw_connection_t *)(*(_QWORD *)(a1 + 32) + 48));
}

void ___ZL37nw_masque_read_inner_request_on_queueP31NWConcrete_nw_masque_connection_block_invoke_2_243(uint64_t a1)
{
  nw_connection_cancel(*(nw_connection_t *)(*(_QWORD *)(a1 + 32) + 48));
}

void ___ZL37nw_masque_read_inner_request_on_queueP31NWConcrete_nw_masque_connection_block_invoke_3_238(uint64_t a1, void *a2, void *a3)
{
  id v4;
  void *v5;
  id v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *metadata_for_response;
  NSObject *v17;
  NSObject *v18;
  _QWORD *v19;
  NSObject *v20;
  NSObject *v21;
  uint64_t v22;
  __int128 v23;
  id v25;
  _QWORD completion[4];
  _QWORD *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint8_t buf[4];
  const char *v33;
  __int16 v34;
  uint64_t v35;
  __int16 v36;
  void *v37;
  __int16 v38;
  void *v39;
  _BYTE v40[128];
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v25 = a2;
  v4 = a3;
  if (gLogDatapath)
  {
    __nwlog_obj();
    v21 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
    {
      v22 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 136446722;
      v33 = "nw_masque_read_inner_request_on_queue_block_invoke_3";
      v34 = 2114;
      v35 = v22;
      v36 = 1024;
      LODWORD(v37) = objc_msgSend(v4, "statusCode");
      _os_log_impl(&dword_182FBE000, v21, OS_LOG_TYPE_DEBUG, "%{public}s %{public}@ Proxying %u response to client", buf, 0x1Cu);
    }

  }
  v5 = (void *)_nw_http_response_create((unsigned __int16)objc_msgSend(v4, "statusCode"), 0);
  objc_msgSend(v4, "allHeaderFields");
  v30 = 0u;
  v31 = 0u;
  v28 = 0u;
  v29 = 0u;
  v6 = (id)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v28, v40, 16);
  if (v7)
  {
    v9 = *(_QWORD *)v29;
    *(_QWORD *)&v8 = 136446978;
    v23 = v8;
    do
    {
      v10 = 0;
      do
      {
        if (*(_QWORD *)v29 != v9)
          objc_enumerationMutation(v6);
        v11 = *(void **)(*((_QWORD *)&v28 + 1) + 8 * v10);
        objc_msgSend(v6, "objectForKeyedSubscript:", v11, v23);
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        if (gLogDatapath)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v13 = (id)gLogObj;
          if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
          {
            v14 = *(_QWORD *)(a1 + 32);
            *(_DWORD *)buf = v23;
            v33 = "nw_masque_read_inner_request_on_queue_block_invoke";
            v34 = 2114;
            v35 = v14;
            v36 = 2112;
            v37 = v11;
            v38 = 2112;
            v39 = v12;
            _os_log_impl(&dword_182FBE000, v13, OS_LOG_TYPE_DEBUG, "%{public}s %{public}@ Proxying response header to client: %@: %@", buf, 0x2Au);
          }

        }
        nw_http_fields_append(v5, objc_msgSend(v11, "UTF8String"), objc_msgSend(v12, "UTF8String"));

        ++v10;
      }
      while (v7 != v10);
      v15 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v28, v40, 16);
      v7 = v15;
    }
    while (v15);
  }

  metadata_for_response = nw_http_create_metadata_for_response(v5);
  if (v25)
    v17 = objc_msgSend(v25, "_createDispatchData");
  else
    v17 = 0;
  v18 = nw_content_context_create("response");
  nw_content_context_set_metadata_for_protocol(v18, metadata_for_response);
  v19 = *(_QWORD **)(a1 + 32);
  v20 = v19[6];
  completion[0] = MEMORY[0x1E0C809B0];
  completion[1] = 3221225472;
  completion[2] = ___ZL37nw_masque_read_inner_request_on_queueP31NWConcrete_nw_masque_connection_block_invoke_239;
  completion[3] = &unk_1E14A9B48;
  v27 = v19;
  nw_connection_send(v20, v17, v18, 1, completion);

}

void sub_183647DC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void ___ZL37nw_masque_read_inner_request_on_queueP31NWConcrete_nw_masque_connection_block_invoke_239(uint64_t a1)
{
  nw_connection_cancel(*(nw_connection_t *)(*(_QWORD *)(a1 + 32) + 48));
}

void ___ZL56nw_masque_connection_pair_setup_inner_direct_connectionsP36NWConcrete_nw_masque_connection_pairPU33objcproto22OS_nw_protocol_options8NSObject_block_invoke(uint64_t a1, unsigned int a2)
{
  NSObject *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  const char *v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  __int16 v15;
  const char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v4 = (id)gLogObj;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    if (a2 > 5)
      v5 = "unknown";
    else
      v5 = off_1E149DE10[a2];
    v6 = *(_QWORD *)(a1 + 32);
    v7 = *(_QWORD *)(v6 + 32);
    v8 = *(_QWORD *)(v6 + 16);
    v9 = 136446978;
    v10 = "nw_masque_connection_pair_setup_inner_direct_connections_block_invoke";
    v11 = 2114;
    v12 = v8;
    v13 = 2112;
    v14 = v7;
    v15 = 2080;
    v16 = v5;
    _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_INFO, "%{public}s %{public}@ inner direct send connection to %@ has transitioned to %s", (uint8_t *)&v9, 0x2Au);
  }

}

void ___ZL56nw_masque_connection_pair_setup_inner_direct_connectionsP36NWConcrete_nw_masque_connection_pairPU33objcproto22OS_nw_protocol_options8NSObject_block_invoke_322(uint64_t a1, unsigned int a2)
{
  NSObject *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  const char *v9;
  __int16 v10;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  const char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v4 = (id)gLogObj;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    if (a2 > 5)
      v5 = "unknown";
    else
      v5 = off_1E149DE10[a2];
    v6 = *(_QWORD *)(a1 + 40);
    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
    v8 = 136446978;
    v9 = "nw_masque_connection_pair_setup_inner_direct_connections_block_invoke";
    v10 = 2114;
    v11 = v7;
    v12 = 2112;
    v13 = v6;
    v14 = 2080;
    v15 = v5;
    _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_INFO, "%{public}s %{public}@ inner direct receive connection to %@ has transitioned to %s", (uint8_t *)&v8, 0x2Au);
  }

}

void nw_masque_connection_pair_read_inner_direct(NWConcrete_nw_masque_connection_pair *a1, NWConcrete_nw_connection *a2)
{
  NWConcrete_nw_masque_connection_pair *v3;
  NWConcrete_nw_connection *v4;
  NWConcrete_nw_connection *v5;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  void *v10;
  os_log_type_t v11;
  void *v12;
  os_log_type_t v13;
  char *backtrace_string;
  os_log_type_t v15;
  _BOOL4 v16;
  char *v17;
  os_log_type_t v18;
  _BOOL4 v19;
  os_log_type_t v20;
  _BOOL4 v21;
  os_log_type_t v22;
  os_log_type_t v23;
  os_log_type_t v24;
  _QWORD v25[4];
  NWConcrete_nw_masque_connection_pair *v26;
  NWConcrete_nw_connection *v27;
  char v28;
  os_log_type_t v29;
  uint8_t buf[4];
  const char *v31;
  __int16 v32;
  char *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v31 = "nw_masque_connection_pair_read_inner_direct";
    v7 = (char *)_os_log_send_and_compose_impl();

    v29 = OS_LOG_TYPE_ERROR;
    v28 = 0;
    if (!__nwlog_fault(v7, &v29, &v28))
      goto LABEL_55;
    if (v29 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = v29;
      if (os_log_type_enabled(v8, v29))
      {
        *(_DWORD *)buf = 136446210;
        v31 = "nw_masque_connection_pair_read_inner_direct";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null pair", buf, 0xCu);
      }
    }
    else if (v28)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v15 = v29;
      v16 = os_log_type_enabled(v8, v29);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          v31 = "nw_masque_connection_pair_read_inner_direct";
          v32 = 2082;
          v33 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v15, "%{public}s called with null pair, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_55:
        if (!v7)
          goto LABEL_5;
LABEL_56:
        free(v7);
        goto LABEL_5;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        v31 = "nw_masque_connection_pair_read_inner_direct";
        _os_log_impl(&dword_182FBE000, v8, v15, "%{public}s called with null pair, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v22 = v29;
      if (os_log_type_enabled(v8, v29))
      {
        *(_DWORD *)buf = 136446210;
        v31 = "nw_masque_connection_pair_read_inner_direct";
        _os_log_impl(&dword_182FBE000, v8, v22, "%{public}s called with null pair, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_54:

    goto LABEL_55;
  }
  if (!v4)
  {
    __nwlog_obj();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v31 = "nw_masque_connection_pair_read_inner_direct";
    v7 = (char *)_os_log_send_and_compose_impl();

    v29 = OS_LOG_TYPE_ERROR;
    v28 = 0;
    if (!__nwlog_fault(v7, &v29, &v28))
      goto LABEL_55;
    if (v29 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = v29;
      if (os_log_type_enabled(v8, v29))
      {
        *(_DWORD *)buf = 136446210;
        v31 = "nw_masque_connection_pair_read_inner_direct";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null direct_receive_connection", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v28)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v23 = v29;
      if (os_log_type_enabled(v8, v29))
      {
        *(_DWORD *)buf = 136446210;
        v31 = "nw_masque_connection_pair_read_inner_direct";
        _os_log_impl(&dword_182FBE000, v8, v23, "%{public}s called with null direct_receive_connection, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    v17 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v8 = objc_claimAutoreleasedReturnValue();
    v18 = v29;
    v19 = os_log_type_enabled(v8, v29);
    if (!v17)
    {
      if (v19)
      {
        *(_DWORD *)buf = 136446210;
        v31 = "nw_masque_connection_pair_read_inner_direct";
        _os_log_impl(&dword_182FBE000, v8, v18, "%{public}s called with null direct_receive_connection, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v19)
    {
      *(_DWORD *)buf = 136446466;
      v31 = "nw_masque_connection_pair_read_inner_direct";
      v32 = 2082;
      v33 = v17;
      _os_log_impl(&dword_182FBE000, v8, v18, "%{public}s called with null direct_receive_connection, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_35;
  }
  if (!*((_QWORD *)v3 + 6))
  {
    __nwlog_obj();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v31 = "nw_masque_connection_pair_read_inner_direct";
    v7 = (char *)_os_log_send_and_compose_impl();

    v29 = OS_LOG_TYPE_ERROR;
    v28 = 0;
    if (!__nwlog_fault(v7, &v29, &v28))
      goto LABEL_55;
    if (v29 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = v29;
      if (os_log_type_enabled(v8, v29))
      {
        *(_DWORD *)buf = 136446210;
        v31 = "nw_masque_connection_pair_read_inner_direct";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null pair->mcp_outer_connection", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v28)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v24 = v29;
      if (os_log_type_enabled(v8, v29))
      {
        *(_DWORD *)buf = 136446210;
        v31 = "nw_masque_connection_pair_read_inner_direct";
        _os_log_impl(&dword_182FBE000, v8, v24, "%{public}s called with null pair->mcp_outer_connection, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    v17 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v8 = objc_claimAutoreleasedReturnValue();
    v20 = v29;
    v21 = os_log_type_enabled(v8, v29);
    if (!v17)
    {
      if (v21)
      {
        *(_DWORD *)buf = 136446210;
        v31 = "nw_masque_connection_pair_read_inner_direct";
        _os_log_impl(&dword_182FBE000, v8, v20, "%{public}s called with null pair->mcp_outer_connection, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v21)
    {
      *(_DWORD *)buf = 136446466;
      v31 = "nw_masque_connection_pair_read_inner_direct";
      v32 = 2082;
      v33 = v17;
      _os_log_impl(&dword_182FBE000, v8, v20, "%{public}s called with null pair->mcp_outer_connection, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_35:

    free(v17);
    if (!v7)
      goto LABEL_5;
    goto LABEL_56;
  }
  v25[0] = MEMORY[0x1E0C809B0];
  v25[1] = 3221225472;
  v25[2] = ___ZL43nw_masque_connection_pair_read_inner_directP36NWConcrete_nw_masque_connection_pairP24NWConcrete_nw_connection_block_invoke;
  v25[3] = &unk_1E149F8B0;
  v26 = v3;
  v27 = v5;
  nw_connection_read_multiple(v27, 1u, 0xFFFFFFFF, v25);

LABEL_5:
}

void sub_1836487DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

void ___ZL43nw_masque_connection_pair_read_inner_directP36NWConcrete_nw_masque_connection_pairP24NWConcrete_nw_connection_block_invoke(uint64_t a1, uint64_t a2, int a3, int a4)
{
  _QWORD *v6;
  NSObject *v7;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  _QWORD batch_block[4];
  NSObject *v17;
  uint64_t v18;
  int v19;
  uint8_t buf[4];
  const char *v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  int v25;
  __int16 v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD **)(a1 + 32);
  v7 = v6[6];
  if (v7 && (a4 == 40 || !a4))
  {
    if (gLogDatapath)
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
      {
        v15 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
        *(_DWORD *)buf = 136446722;
        v21 = "nw_masque_connection_pair_read_inner_direct_block_invoke";
        v22 = 2114;
        v23 = v15;
        v24 = 1024;
        v25 = a3;
        _os_log_impl(&dword_182FBE000, v14, OS_LOG_TYPE_DEBUG, "%{public}s %{public}@ Proxying batch of %u packets to target", buf, 0x1Cu);
      }

      v6 = *(_QWORD **)(a1 + 32);
      v7 = v6[6];
    }
    batch_block[0] = MEMORY[0x1E0C809B0];
    batch_block[1] = 3221225472;
    batch_block[2] = ___ZL43nw_masque_connection_pair_read_inner_directP36NWConcrete_nw_masque_connection_pairP24NWConcrete_nw_connection_block_invoke_323;
    batch_block[3] = &unk_1E149F778;
    v19 = a3;
    v18 = a2;
    v17 = v6;
    nw_connection_batch(v7, batch_block);
    nw_masque_connection_pair_read_inner_direct(*(NWConcrete_nw_masque_connection_pair **)(a1 + 32), *(NWConcrete_nw_connection **)(a1 + 40));
    v10 = v17;
  }
  else
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v10 = (id)gLogObj;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      v11 = *(_QWORD *)(a1 + 32);
      v12 = *(_QWORD *)(v11 + 16);
      v13 = *(_QWORD *)(v11 + 48);
      *(_DWORD *)buf = 136446978;
      v21 = "nw_masque_connection_pair_read_inner_direct_block_invoke";
      v22 = 2114;
      v23 = v12;
      v24 = 1024;
      v25 = a4;
      v26 = 2112;
      v27 = v13;
      _os_log_impl(&dword_182FBE000, v10, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ Stopping reading, error %d, outer %@", buf, 0x26u);
    }
  }

}

void sub_183648A18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{

  _Unwind_Resume(a1);
}

void ___ZL43nw_masque_connection_pair_read_inner_directP36NWConcrete_nw_masque_connection_pairP24NWConcrete_nw_connection_block_invoke_323(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  NSObject *v4;
  _QWORD *v5;
  NSObject *v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  size_t size;
  uint64_t v11;
  _QWORD completion[4];
  _QWORD *v13;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  size_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a1 + 48))
  {
    v2 = 0;
    v3 = MEMORY[0x1E0C809B0];
    do
    {
      v4 = *(id *)(*(_QWORD *)(a1 + 40) + 8 * v2);
      if (gLogDatapath)
      {
        __nwlog_obj();
        v7 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
        {
          v8 = *(_QWORD *)(a1 + 32);
          v9 = *(_QWORD *)(v8 + 16);
          if (v4)
          {
            v11 = *(_QWORD *)(v8 + 16);
            size = dispatch_data_get_size(v4);
            v9 = v11;
          }
          else
          {
            size = 0;
          }
          *(_DWORD *)buf = 136446722;
          v15 = "nw_masque_connection_pair_read_inner_direct_block_invoke";
          v16 = 2114;
          v17 = v9;
          v18 = 2048;
          v19 = size;
          _os_log_impl(&dword_182FBE000, v7, OS_LOG_TYPE_DEBUG, "%{public}s %{public}@ Proxying %zu bytes directly to target", buf, 0x20u);
        }

      }
      v5 = *(_QWORD **)(a1 + 32);
      v6 = v5[6];
      completion[0] = v3;
      completion[1] = 3221225472;
      completion[2] = ___ZL43nw_masque_connection_pair_read_inner_directP36NWConcrete_nw_masque_connection_pairP24NWConcrete_nw_connection_block_invoke_324;
      completion[3] = &unk_1E14A9B48;
      v13 = v5;
      nw_connection_send(v6, v4, (nw_content_context_t)&__block_literal_global_41718, 1, completion);

      ++v2;
    }
    while (v2 < *(unsigned int *)(a1 + 48));
  }
}

void sub_183648BF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;

  _Unwind_Resume(a1);
}

void ___ZL43nw_masque_connection_pair_read_inner_directP36NWConcrete_nw_masque_connection_pairP24NWConcrete_nw_connection_block_invoke_324(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  uint64_t v5;
  int v6;
  const char *v7;
  __int16 v8;
  uint64_t v9;
  __int16 v10;
  id v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (v3)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v4 = (id)gLogObj;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
      v6 = 136446722;
      v7 = "nw_masque_connection_pair_read_inner_direct_block_invoke";
      v8 = 2114;
      v9 = v5;
      v10 = 2112;
      v11 = v3;
      _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ received error sending to outer connection %@", (uint8_t *)&v6, 0x20u);
    }

  }
}

void ___ZL39nw_masque_copy_matching_connection_pairP31NWConcrete_nw_masque_connectionPU25objcproto14OS_nw_endpoint8NSObjectPKc_block_invoke(uint64_t a1)
{
  uint64_t v1;
  _QWORD v3[4];
  id v4;
  __int128 v5;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 56);
  if (v1)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = ___ZL39nw_masque_copy_matching_connection_pairP31NWConcrete_nw_masque_connectionPU25objcproto14OS_nw_endpoint8NSObjectPKc_block_invoke_2;
    v3[3] = &unk_1E149F888;
    v4 = *(id *)(a1 + 40);
    v5 = *(_OWORD *)(a1 + 48);
    nw_dictionary_apply(v1, (uint64_t)v3);

  }
}

uint64_t ___ZL39nw_masque_copy_matching_connection_pairP31NWConcrete_nw_masque_connectionPU25objcproto14OS_nw_endpoint8NSObjectPKc_block_invoke_2(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  uint64_t v6;

  v5 = a3;
  if (*((_BYTE *)v5 + 219)
    && nw_endpoint_is_equal(*(void **)(a1 + 32), *((void **)v5 + 28), 0)
    && !strcmp(*(const char **)(a1 + 48), (const char *)v5 + 178))
  {
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a3);
    v6 = 0;
  }
  else
  {
    v6 = 1;
  }

  return v6;
}

void sub_183648E34(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZL34nw_masque_listener_pair_read_innerP34NWConcrete_nw_masque_listener_pair_block_invoke(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  NSObject *v8;
  NSObject *v9;
  size_t size;
  NSObject *v11;
  NSObject *v12;
  uint64_t capsule_type;
  NSObject *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  _DWORD *v20;
  int v21;
  uint64_t v22;
  size_t v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *address;
  dispatch_data_t subrange;
  uint64_t v32;
  _QWORD *v33;
  NSObject *v34;
  NSObject *v35;
  uint64_t v36;
  size_t v37;
  NSObject *v38;
  const char *v39;
  NSObject *v40;
  uint32_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  size_t v46;
  BOOL v47;
  uint64_t v48;
  int v49;
  size_t v50;
  NSObject *v51;
  unint64_t v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  nw_endpoint_t v57;
  NSObject *v58;
  nw_endpoint_t v59;
  NSObject *v60;
  char *v61;
  NSObject *v62;
  NSObject *metadata_for_capsule;
  NSObject *v64;
  uint64_t v65;
  size_t v66;
  NSObject *v67;
  uint64_t v68;
  nw_endpoint_t endpoint;
  size_t v70;
  NSObject *v71;
  uint64_t v72;
  NWConcrete_nw_protocol_options *options;
  NSObject *data;
  nw_content_context_t context;
  id v76;
  _QWORD completion[4];
  _QWORD *v78;
  _BYTE v79[19];
  _QWORD v80[6];
  char v81;
  _QWORD applier[6];
  __int16 v83;
  unsigned __int16 v84;
  unsigned __int16 v85;
  char v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  unsigned __int16 *v90;
  _BYTE buf[24];
  uint64_t v92;
  __int128 v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;

  v99 = *MEMORY[0x1E0C80C00];
  v8 = a2;
  v9 = a3;
  context = v9;
  v76 = a5;
  data = v8;
  if (v8)
  {
    size = dispatch_data_get_size(v8);
    if (!v9 || size)
    {
LABEL_21:
      if (!*(_QWORD *)(*(_QWORD *)(a1 + 32) + 24)
        || v76 && (v20 = v76, v21 = v20[3], v20, v21 != 40))
      {
        v26 = a1;
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v12 = (id)gLogObj;
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        {
          v27 = *(_QWORD *)(*(_QWORD *)(v26 + 32) + 16);
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)&buf[4] = "nw_masque_listener_pair_read_inner_block_invoke";
          *(_WORD *)&buf[12] = 2114;
          *(_QWORD *)&buf[14] = v27;
          *(_WORD *)&buf[22] = 2112;
          v92 = (uint64_t)v76;
          _os_log_impl(&dword_182FBE000, v12, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ Stopping reading, error %@", buf, 0x20u);
        }
        goto LABEL_86;
      }
      if (!data)
      {
        nw_masque_listener_pair_read_inner(*(NWConcrete_nw_masque_listener_pair **)(a1 + 32));
        goto LABEL_87;
      }
      v22 = a1;
      v23 = dispatch_data_get_size(data);
      if (v23 <= 6)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v24 = (id)gLogObj;
        if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
        {
          v25 = *(_QWORD *)(*(_QWORD *)(v22 + 32) + 16);
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)&buf[4] = "nw_masque_listener_pair_read_inner_block_invoke";
          *(_WORD *)&buf[12] = 2114;
          *(_QWORD *)&buf[14] = v25;
          *(_WORD *)&buf[22] = 2048;
          v92 = v23;
          _os_log_impl(&dword_182FBE000, v24, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ Received too short content (%zu bytes)", buf, 0x20u);
        }

        nw_masque_listener_pair_read_inner(*(NWConcrete_nw_masque_listener_pair **)(v22 + 32));
        goto LABEL_87;
      }
      v12 = data;
      LOBYTE(v85) = 0;
      v95 = 0;
      v96 = &v95;
      v97 = 0x2000000000;
      v98 = 0;
      v87 = 0;
      v88 = &v87;
      v89 = 0x2000000000;
      v90 = &v85;
      v28 = MEMORY[0x1E0C809B0];
      *(_QWORD *)buf = MEMORY[0x1E0C809B0];
      *(_QWORD *)&buf[8] = 0x40000000;
      *(_QWORD *)&buf[16] = __nw_dispatch_data_copyout_block_invoke;
      v92 = (uint64_t)&unk_1E14A3448;
      *((_QWORD *)&v93 + 1) = &v87;
      v94 = 1;
      *(_QWORD *)&v93 = &v95;
      dispatch_data_apply(v12, buf);
      _Block_object_dispose(&v87, 8);
      _Block_object_dispose(&v95, 8);
      if (v85 == 6)
      {
        memset(v79, 0, sizeof(v79));
        v95 = 0;
        v96 = &v95;
        v97 = 0x2000000000;
        v98 = 0;
        v87 = 0;
        v88 = &v87;
        v89 = 0x2000000000;
        v90 = (unsigned __int16 *)v79;
        *(_QWORD *)buf = v28;
        *(_QWORD *)&buf[8] = 0x40000000;
        *(_QWORD *)&buf[16] = __nw_dispatch_data_copyout_block_invoke;
        v92 = (uint64_t)&unk_1E14A3448;
        *((_QWORD *)&v93 + 1) = &v87;
        v94 = 19;
        *(_QWORD *)&v93 = &v95;
        dispatch_data_apply(v12, buf);
        v32 = v96[3];
        _Block_object_dispose(&v87, 8);
        _Block_object_dispose(&v95, 8);
        address = 0;
        if (v32 == 19)
        {
          *(_DWORD *)&buf[4] = 0;
          LODWORD(v92) = 0;
          *(_WORD *)buf = 7708;
          *(_OWORD *)&buf[8] = *(_OWORD *)&v79[1];
          *(_WORD *)&buf[2] = *(_WORD *)&v79[17];
          address = nw_endpoint_create_address((const sockaddr *)buf);
        }
        subrange = dispatch_data_create_subrange(v12, 0x13uLL, v23 - 19);

      }
      else
      {
        if (v85 != 4)
        {
LABEL_43:
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v35 = (id)gLogObj;
          if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
          {
            v36 = *(_QWORD *)(*(_QWORD *)(v22 + 32) + 16);
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_masque_listener_pair_read_inner_block_invoke";
            *(_WORD *)&buf[12] = 2114;
            *(_QWORD *)&buf[14] = v36;
            _os_log_impl(&dword_182FBE000, v35, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ Failed to parse remote endpoint from datagram", buf, 0x16u);
          }

          nw_masque_listener_pair_read_inner(*(NWConcrete_nw_masque_listener_pair **)(v22 + 32));
          goto LABEL_86;
        }
        *(_DWORD *)&v79[3] = 0;
        *(_DWORD *)v79 = 0;
        v95 = 0;
        v96 = &v95;
        v97 = 0x2000000000;
        v98 = 0;
        v87 = 0;
        v88 = &v87;
        v89 = 0x2000000000;
        v90 = (unsigned __int16 *)v79;
        *(_QWORD *)buf = v28;
        *(_QWORD *)&buf[8] = 0x40000000;
        *(_QWORD *)&buf[16] = __nw_dispatch_data_copyout_block_invoke;
        v92 = (uint64_t)&unk_1E14A3448;
        *((_QWORD *)&v93 + 1) = &v87;
        v94 = 7;
        *(_QWORD *)&v93 = &v95;
        dispatch_data_apply(v12, buf);
        v29 = v96[3];
        _Block_object_dispose(&v87, 8);
        _Block_object_dispose(&v95, 8);
        address = 0;
        if (v29 == 7)
        {
          *(_QWORD *)&buf[8] = 0;
          *(_WORD *)buf = 528;
          *(_DWORD *)&buf[4] = *(_DWORD *)&v79[1];
          *(_WORD *)&buf[2] = *(_WORD *)&v79[5];
          address = nw_endpoint_create_address((const sockaddr *)buf);
        }
        subrange = dispatch_data_create_subrange(v12, 7uLL, v23 - 7);

      }
      v12 = subrange;
      if (address)
      {
        if (gLogDatapath)
        {
          __nwlog_obj();
          v64 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v64, OS_LOG_TYPE_DEBUG))
          {
            v65 = *(_QWORD *)(*(_QWORD *)(v22 + 32) + 16);
            if (v12)
              v66 = dispatch_data_get_size(v12);
            else
              v66 = 0;
            *(_DWORD *)buf = 136446978;
            *(_QWORD *)&buf[4] = "nw_masque_listener_pair_read_inner_block_invoke";
            *(_WORD *)&buf[12] = 2114;
            *(_QWORD *)&buf[14] = v65;
            *(_WORD *)&buf[22] = 2048;
            v92 = v66;
            LOWORD(v93) = 2112;
            *(_QWORD *)((char *)&v93 + 2) = address;
            _os_log_impl(&dword_182FBE000, v64, OS_LOG_TYPE_DEBUG, "%{public}s %{public}@ Proxying %zu bytes to target %@", buf, 0x2Au);
          }

        }
        dispatch_group_enter(*(dispatch_group_t *)(*(_QWORD *)(v22 + 32) + 96));
        v33 = *(_QWORD **)(v22 + 32);
        v34 = v33[3];
        completion[0] = v28;
        completion[1] = 3221225472;
        completion[2] = ___ZL34nw_masque_listener_pair_read_innerP34NWConcrete_nw_masque_listener_pair_block_invoke_318;
        completion[3] = &unk_1E14A9B48;
        v78 = v33;
        nw_connection_group_send_message(v34, v12, address, (nw_content_context_t)&__block_literal_global_41718, completion);
        nw_masque_listener_pair_read_inner(*(NWConcrete_nw_masque_listener_pair **)(v22 + 32));

        goto LABEL_86;
      }
      goto LABEL_43;
    }
  }
  else if (!v9)
  {
    goto LABEL_21;
  }
  v72 = a1;
  if (nw_protocol_copy_http_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_11_72660);
  v11 = (id)nw_protocol_copy_http_definition_http_definition;
  v12 = nw_content_context_copy_protocol_metadata(v9, v11);

  if (!v12 || !nw_http_metadata_is_capsule(v12))
  {

    a1 = v72;
    goto LABEL_21;
  }
  capsule_type = nw_http_metadata_get_capsule_type(v12);
  v71 = nw_http_metadata_copy_capsule_data(v12);
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v14 = (id)gLogObj;
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
  {
    v15 = *(_QWORD *)(*(_QWORD *)(v72 + 32) + 16);
    *(_DWORD *)buf = 136446978;
    *(_QWORD *)&buf[4] = "nw_masque_listener_pair_read_inner_block_invoke";
    *(_WORD *)&buf[12] = 2114;
    *(_QWORD *)&buf[14] = v15;
    *(_WORD *)&buf[22] = 2048;
    v92 = capsule_type;
    LOWORD(v93) = 2112;
    *(_QWORD *)((char *)&v93 + 2) = v71;
    _os_log_impl(&dword_182FBE000, v14, OS_LOG_TYPE_DEBUG, "%{public}s %{public}@ Received capsule type %llx with data %@", buf, 0x2Au);
  }

  if (capsule_type != 16770306)
    goto LABEL_85;
  if (!*(_QWORD *)(*(_QWORD *)(v72 + 32) + 40))
  {
    v16 = nw_dictionary_create();
    v17 = *(_QWORD *)(v72 + 32);
    v18 = *(void **)(v17 + 40);
    *(_QWORD *)(v17 + 40) = v16;

  }
  if (nw_protocol_demux_copy_definition::onceToken != -1)
    dispatch_once(&nw_protocol_demux_copy_definition::onceToken, &__block_literal_global_5_25927);
  if (nw_protocol_demux_copy_definition::definition)
  {
    v19 = os_retain((void *)nw_protocol_demux_copy_definition::definition);
    options = nw_protocol_create_options(v19);
    if (v19)
      os_release(v19);
  }
  else
  {
    options = nw_protocol_create_options(0);
  }
  *(_WORD *)v79 = 0;
  v37 = dispatch_data_get_size(v71);
  if (v37 <= 1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v38 = (id)gLogObj;
    if (!os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
      goto LABEL_83;
    *(_DWORD *)buf = 136446722;
    *(_QWORD *)&buf[4] = "nw_masque_listener_pair_read_inner_block_invoke";
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v37;
    *(_WORD *)&buf[22] = 2048;
    v92 = 2;
    v39 = "%{public}s insufficient capsule data bytes %zu < %zu";
    v40 = v38;
    v41 = 32;
LABEL_76:
    _os_log_impl(&dword_182FBE000, v40, OS_LOG_TYPE_ERROR, v39, buf, v41);
    goto LABEL_83;
  }
  nw_dispatch_data_copyout_from_offset(v71, (uint64_t)v79, 2, 0);
  v42 = bswap32(*(unsigned __int16 *)v79) >> 16;
  if (v37 != v42 + 2)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v38 = (id)gLogObj;
    if (!os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
      goto LABEL_83;
    *(_DWORD *)buf = 136446978;
    *(_QWORD *)&buf[4] = "nw_masque_listener_pair_read_inner_block_invoke";
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v37;
    *(_WORD *)&buf[22] = 2048;
    v92 = 2;
    LOWORD(v93) = 1024;
    *(_DWORD *)((char *)&v93 + 2) = v42;
    v39 = "%{public}s mismatched capsule data bytes %zu != (%zu + %u)";
    v40 = v38;
    v41 = 38;
    goto LABEL_76;
  }
  if (v37 < 3)
    goto LABEL_84;
  endpoint = 0;
  v43 = 2;
  v44 = MEMORY[0x1E0C809B0];
  v45 = v71;
  do
  {
    v86 = 0;
    nw_dispatch_data_copyout_from_offset(v45, (uint64_t)&v86, 1, v43);
    v85 = 0;
    nw_dispatch_data_copyout_from_offset(v45, (uint64_t)&v85, 2, v43 + 1);
    v48 = v43 + 3;
    v49 = v85;
    v50 = __rev16(v85);
    v70 = v43 + 3 + v50;
    if (v86 != 2)
    {
      if (v86 == 1)
      {
        v51 = dispatch_data_create_subrange(v71, v43 + 3, v50);
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = buf;
        *(_QWORD *)&buf[16] = 0x2020000000;
        v92 = 0;
        if (v49)
        {
          v52 = 0;
          do
          {
            v84 = 0;
            v83 = 0;
            nw_dispatch_data_copyout_from_offset(v51, (uint64_t)&v84, 2, v52);
            v55 = *(_QWORD *)(*(_QWORD *)&buf[8] + 24) + 2;
            *(_QWORD *)(*(_QWORD *)&buf[8] + 24) = v55;
            nw_dispatch_data_copyout_from_offset(v51, (uint64_t)&v83, 2, v55);
            *(_QWORD *)(*(_QWORD *)&buf[8] + 24) += 2;
            v95 = 0;
            v96 = &v95;
            v97 = 0x2020000000;
            v98 = 0;
            applier[0] = v44;
            applier[1] = 3221225472;
            applier[2] = ___ZL34nw_masque_listener_pair_read_innerP34NWConcrete_nw_masque_listener_pair_block_invoke_315;
            applier[3] = &unk_1E149F7F0;
            applier[4] = buf;
            applier[5] = &v95;
            dispatch_data_apply(v51, applier);
            v56 = *(_QWORD *)(*(_QWORD *)&buf[8] + 24) + v84;
            *(_QWORD *)(*(_QWORD *)&buf[8] + 24) = v56;
            v81 = 0;
            nw_dispatch_data_copyout_from_offset(v51, (uint64_t)&v81, 1, v56);
            ++*(_QWORD *)(*(_QWORD *)&buf[8] + 24);
            v87 = 0;
            v88 = &v87;
            v89 = 0x2020000000;
            v90 = 0;
            if (v81)
            {
              v80[0] = v44;
              v80[1] = 3221225472;
              v80[2] = ___ZL34nw_masque_listener_pair_read_innerP34NWConcrete_nw_masque_listener_pair_block_invoke_2;
              v80[3] = &unk_1E149F7F0;
              v80[4] = buf;
              v80[5] = &v87;
              dispatch_data_apply(v51, v80);
              v54 = v84;
              *(_QWORD *)(*(_QWORD *)&buf[8] + 24) += v84;
              v53 = v88[3];
            }
            else
            {
              v53 = 0;
              v54 = v84;
            }
            nw_demux_options_add_pattern(options, v83, v54, v96[3], v53);
            _Block_object_dispose(&v87, 8);
            _Block_object_dispose(&v95, 8);
            v52 = *(_QWORD *)(*(_QWORD *)&buf[8] + 24);
          }
          while (v52 < v50);
        }
        _Block_object_dispose(buf, 8);

        v46 = v70;
        goto LABEL_54;
      }
      v46 = v43 + 3 + v50;
LABEL_67:
      if (v46 != v48)
        goto LABEL_71;
      goto LABEL_54;
    }
    v95 = 0;
    v96 = 0;
    nw_dispatch_data_copyout_from_offset(v71, (uint64_t)&v95, 16, v43 + 3);
    if (BYTE1(v95) == 30)
    {
      memset(buf, 0, sizeof(buf));
      LODWORD(v92) = 0;
      nw_dispatch_data_copyout_from_offset(v71, (uint64_t)buf, 28, v43 + 3);
      v46 = v43 + 3 + v50;
      v57 = nw_endpoint_create_address((const sockaddr *)buf);

      v48 = v43 + 31;
    }
    else
    {
      v46 = v43 + 3 + v50;
      if (BYTE1(v95) != 2)
        goto LABEL_67;
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = 0;
      nw_dispatch_data_copyout_from_offset(v71, (uint64_t)buf, 16, v43 + 3);
      v57 = nw_endpoint_create_address((const sockaddr *)buf);

      v48 = v43 + 19;
    }
    endpoint = v57;
    if (v46 != v48)
    {
LABEL_71:
      __nwlog_obj();
      v58 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = "nw_masque_listener_pair_read_inner_block_invoke_3";
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v46;
        *(_WORD *)&buf[22] = 2048;
        v92 = v48;
        _os_log_impl(&dword_182FBE000, v58, OS_LOG_TYPE_ERROR, "%{public}s mismatched end offset %zu != %zu", buf, 0x20u);
      }

      goto LABEL_82;
    }
LABEL_54:
    v43 = v46;
    v47 = v46 >= v37;
    v45 = v71;
  }
  while (!v47);
  v59 = endpoint;
  if (!endpoint)
    goto LABEL_84;
  v60 = v71;
  v61 = nw_endpoint_copy_address_string(endpoint);
  nw_dictionary_set_value(*(_QWORD *)(*(_QWORD *)(v72 + 32) + 40), v61, options);
  if (v61)
    free(v61);
  if (gLogDatapath)
  {
    __nwlog_obj();
    v67 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v67, OS_LOG_TYPE_DEBUG))
    {
      v68 = *(_QWORD *)(*(_QWORD *)(v72 + 32) + 16);
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = "nw_masque_listener_pair_read_inner_block_invoke";
      *(_WORD *)&buf[12] = 2114;
      *(_QWORD *)&buf[14] = v68;
      *(_WORD *)&buf[22] = 2112;
      v92 = (uint64_t)endpoint;
      _os_log_impl(&dword_182FBE000, v67, OS_LOG_TYPE_DEBUG, "%{public}s %{public}@ received listener demux pattern for %@", buf, 0x20u);
    }

    v60 = v71;
    v59 = endpoint;
  }
  nw_masque_listener_pair_setup_inner_direct_connections(*(void **)(v72 + 32), options, v59);
  v62 = nw_content_context_create("listener ack pattern");
  metadata_for_capsule = nw_http_create_metadata_for_capsule(16770307, v60);
  nw_content_context_set_metadata_for_protocol(v62, metadata_for_capsule);
  nw_connection_send(*(nw_connection_t *)(*(_QWORD *)(*(_QWORD *)(v72 + 32) + 16) + 48), 0, v62, 1, &__block_literal_global_24144);

LABEL_82:
  v38 = endpoint;
LABEL_83:

LABEL_84:
LABEL_85:
  nw_masque_listener_pair_read_inner(*(NWConcrete_nw_masque_listener_pair **)(v72 + 32));

LABEL_86:
LABEL_87:

}

void sub_183649C78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *a15, void *a16, void *a17, void *a18)
{
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

BOOL ___ZL34nw_masque_listener_pair_read_innerP34NWConcrete_nw_masque_listener_pair_block_invoke_315(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  if (a5 + a3 >= v5)
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = a4 + v5 - a3;
  return a5 + a3 < v5;
}

BOOL ___ZL34nw_masque_listener_pair_read_innerP34NWConcrete_nw_masque_listener_pair_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  if (a5 + a3 >= v5)
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = a4 + v5 - a3;
  return a5 + a3 < v5;
}

void nw_masque_listener_pair_setup_inner_direct_connections(void *a1, void *a2, void *a3)
{
  _QWORD *v5;
  NSObject *v6;
  nw_parameters_t v7;
  nw_parameters_t v8;
  uint64_t v9;
  NSObject *v10;
  _BOOL8 v11;
  NSObject *v12;
  void *v13;
  NWConcrete_nw_protocol_options *options;
  NSObject *v15;
  NSObject *v16;
  void *v17;
  NSObject *v18;
  NSObject *v19;
  _BOOL8 v20;
  NSObject *v21;
  NSObject *v22;
  _QWORD *v23;
  NSObject *v24;
  uint64_t v25;
  _BOOL8 v26;
  void *v27;
  void *v28;
  char *v29;
  NSObject *v30;
  os_log_type_t v31;
  char *backtrace_string;
  os_log_type_t v33;
  _BOOL4 v34;
  os_log_type_t v35;
  id v36;
  _QWORD v37[4];
  id v38;
  NSObject *v39;
  _QWORD handler[4];
  _QWORD *v41;
  NSObject *v42;
  char v43;
  os_log_type_t v44;
  uint8_t buf[4];
  const char *v46;
  __int16 v47;
  char *v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v36 = a3;
  if (v5)
  {
    v7 = nw_connection_copy_parameters(*(nw_connection_t *)(v5[2] + 48));
    v8 = v7;
    v9 = MEMORY[0x1E0C809B0];
    if (!v5[6])
    {
      v10 = v7;
      v11 = -[NWConcrete_nw_parameters initWithParameters:stripConnected:shallowCopy:]((id *)[NWConcrete_nw_parameters alloc], v10, 0, 0);

      v12 = nw_parameters_copy_default_protocol_stack((nw_parameters_t)v11);
      nw_protocol_stack_clear_application_protocols(v12);
      if (nw_protocol_demux_copy_definition::onceToken != -1)
        dispatch_once(&nw_protocol_demux_copy_definition::onceToken, &__block_literal_global_5_25927);
      if (nw_protocol_demux_copy_definition::definition)
      {
        v13 = os_retain((void *)nw_protocol_demux_copy_definition::definition);
        options = nw_protocol_create_options(v13);
        if (v13)
          os_release(v13);
      }
      else
      {
        options = nw_protocol_create_options(0);
      }
      nw_protocol_stack_prepend_application_protocol(v12, &options->super);

      v15 = nw_connection_create_with_connection(*(void **)(v5[2] + 48), (void *)v11);
      nw_connection_set_queue(v15, *(dispatch_queue_t *)(v5[2] + 32));
      handler[0] = v9;
      handler[1] = 3221225472;
      handler[2] = ___ZL54nw_masque_listener_pair_setup_inner_direct_connectionsP34NWConcrete_nw_masque_listener_pairPU33objcproto22OS_nw_protocol_options8NSObjectPU25objcproto14OS_nw_endpointS1__block_invoke;
      handler[3] = &unk_1E14AD048;
      v41 = v5;
      v16 = v15;
      v42 = v16;
      nw_connection_set_state_changed_handler(v16, handler);
      nw_connection_start(v16);
      v17 = (void *)v5[6];
      v5[6] = v16;
      v18 = v16;

    }
    v19 = v8;
    v20 = -[NWConcrete_nw_parameters initWithParameters:stripConnected:shallowCopy:]((id *)[NWConcrete_nw_parameters alloc], v19, 0, 0);

    v21 = nw_parameters_copy_default_protocol_stack((nw_parameters_t)v20);
    nw_protocol_stack_clear_application_protocols(v21);
    if (v6)
      nw_protocol_stack_prepend_application_protocol(v21, v6);
    v22 = nw_connection_create_with_connection(*(void **)(v5[2] + 48), (void *)v20);
    nw_connection_set_queue(v22, *(dispatch_queue_t *)(v5[2] + 32));
    v37[0] = v9;
    v37[1] = 3221225472;
    v37[2] = ___ZL54nw_masque_listener_pair_setup_inner_direct_connectionsP34NWConcrete_nw_masque_listener_pairPU33objcproto22OS_nw_protocol_options8NSObjectPU25objcproto14OS_nw_endpointS1__block_invoke_319;
    v37[3] = &unk_1E14AD048;
    v23 = v5;
    v38 = v23;
    v24 = v22;
    v39 = v24;
    nw_connection_set_state_changed_handler(v24, v37);
    nw_connection_start(v24);
    v25 = v23[7];
    if (!v25)
    {
      v26 = nw_array_create();
      v27 = (void *)v23[7];
      v23[7] = v26;

      v25 = v23[7];
    }
    nw_array_append(v25, v24);
    nw_masque_listener_pair_read_inner_direct(v23, v24, v36);

    goto LABEL_15;
  }
  __nwlog_obj();
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v46 = "nw_masque_listener_pair_setup_inner_direct_connections";
  v29 = (char *)_os_log_send_and_compose_impl();

  v44 = OS_LOG_TYPE_ERROR;
  v43 = 0;
  if (__nwlog_fault(v29, &v44, &v43))
  {
    if (v44 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v30 = objc_claimAutoreleasedReturnValue();
      v31 = v44;
      if (os_log_type_enabled(v30, v44))
      {
        *(_DWORD *)buf = 136446210;
        v46 = "nw_masque_listener_pair_setup_inner_direct_connections";
        _os_log_impl(&dword_182FBE000, v30, v31, "%{public}s called with null pair", buf, 0xCu);
      }
    }
    else if (v43)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v30 = objc_claimAutoreleasedReturnValue();
      v33 = v44;
      v34 = os_log_type_enabled(v30, v44);
      if (backtrace_string)
      {
        if (v34)
        {
          *(_DWORD *)buf = 136446466;
          v46 = "nw_masque_listener_pair_setup_inner_direct_connections";
          v47 = 2082;
          v48 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v30, v33, "%{public}s called with null pair, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_32;
      }
      if (v34)
      {
        *(_DWORD *)buf = 136446210;
        v46 = "nw_masque_listener_pair_setup_inner_direct_connections";
        _os_log_impl(&dword_182FBE000, v30, v33, "%{public}s called with null pair, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v30 = objc_claimAutoreleasedReturnValue();
      v35 = v44;
      if (os_log_type_enabled(v30, v44))
      {
        *(_DWORD *)buf = 136446210;
        v46 = "nw_masque_listener_pair_setup_inner_direct_connections";
        _os_log_impl(&dword_182FBE000, v30, v35, "%{public}s called with null pair, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_32:
  if (v29)
    free(v29);
LABEL_15:

}

void sub_18364A2DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,void *a25)
{
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;

  _Unwind_Resume(a1);
}

void ___ZL34nw_masque_listener_pair_read_innerP34NWConcrete_nw_masque_listener_pair_block_invoke_318(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  uint64_t v5;
  int v6;
  const char *v7;
  __int16 v8;
  uint64_t v9;
  __int16 v10;
  id v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (v3)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v4 = (id)gLogObj;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
      v6 = 136446722;
      v7 = "nw_masque_listener_pair_read_inner_block_invoke";
      v8 = 2114;
      v9 = v5;
      v10 = 2112;
      v11 = v3;
      _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ received error sending to outer connection group %@", (uint8_t *)&v6, 0x20u);
    }

  }
  dispatch_group_leave(*(dispatch_group_t *)(*(_QWORD *)(a1 + 32) + 96));

}

void ___ZL54nw_masque_listener_pair_setup_inner_direct_connectionsP34NWConcrete_nw_masque_listener_pairPU33objcproto22OS_nw_protocol_options8NSObjectPU25objcproto14OS_nw_endpointS1__block_invoke(uint64_t a1, unsigned int a2)
{
  NSObject *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  const char *v9;
  __int16 v10;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  const char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v4 = (id)gLogObj;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    if (a2 > 5)
      v5 = "unknown";
    else
      v5 = off_1E149DE10[a2];
    v6 = *(_QWORD *)(a1 + 40);
    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
    v8 = 136446978;
    v9 = "nw_masque_listener_pair_setup_inner_direct_connections_block_invoke";
    v10 = 2114;
    v11 = v7;
    v12 = 2112;
    v13 = v6;
    v14 = 2080;
    v15 = v5;
    _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_INFO, "%{public}s %{public}@ inner direct send connection to %@ has transitioned to %s", (uint8_t *)&v8, 0x2Au);
  }

}

void ___ZL54nw_masque_listener_pair_setup_inner_direct_connectionsP34NWConcrete_nw_masque_listener_pairPU33objcproto22OS_nw_protocol_options8NSObjectPU25objcproto14OS_nw_endpointS1__block_invoke_319(uint64_t a1, unsigned int a2)
{
  NSObject *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  const char *v9;
  __int16 v10;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  const char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v4 = (id)gLogObj;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    if (a2 > 5)
      v5 = "unknown";
    else
      v5 = off_1E149DE10[a2];
    v6 = *(_QWORD *)(a1 + 40);
    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
    v8 = 136446978;
    v9 = "nw_masque_listener_pair_setup_inner_direct_connections_block_invoke";
    v10 = 2114;
    v11 = v7;
    v12 = 2112;
    v13 = v6;
    v14 = 2080;
    v15 = v5;
    _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_INFO, "%{public}s %{public}@ inner direct receive connection to %@ has transitioned to %s", (uint8_t *)&v8, 0x2Au);
  }

}

void nw_masque_listener_pair_read_inner_direct(void *a1, void *a2, void *a3)
{
  _QWORD *v5;
  id v6;
  id v7;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  void *v12;
  os_log_type_t v13;
  void *v14;
  os_log_type_t v15;
  char *backtrace_string;
  os_log_type_t v17;
  _BOOL4 v18;
  char *v19;
  os_log_type_t v20;
  _BOOL4 v21;
  os_log_type_t v22;
  _BOOL4 v23;
  os_log_type_t v24;
  os_log_type_t v25;
  os_log_type_t v26;
  _QWORD v27[4];
  _QWORD *v28;
  id v29;
  id v30;
  char v31;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v34;
  __int16 v35;
  char *v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = a3;
  if (!v5)
  {
    __nwlog_obj();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v34 = "nw_masque_listener_pair_read_inner_direct";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v31 = 0;
    if (!__nwlog_fault(v9, &type, &v31))
      goto LABEL_55;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_masque_listener_pair_read_inner_direct";
        _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null pair", buf, 0xCu);
      }
    }
    else if (v31)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      v18 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446466;
          v34 = "nw_masque_listener_pair_read_inner_direct";
          v35 = 2082;
          v36 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v10, v17, "%{public}s called with null pair, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_55:
        if (!v9)
          goto LABEL_5;
LABEL_56:
        free(v9);
        goto LABEL_5;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_masque_listener_pair_read_inner_direct";
        _os_log_impl(&dword_182FBE000, v10, v17, "%{public}s called with null pair, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v24 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_masque_listener_pair_read_inner_direct";
        _os_log_impl(&dword_182FBE000, v10, v24, "%{public}s called with null pair, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_54:

    goto LABEL_55;
  }
  if (!v6)
  {
    __nwlog_obj();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v34 = "nw_masque_listener_pair_read_inner_direct";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v31 = 0;
    if (!__nwlog_fault(v9, &type, &v31))
      goto LABEL_55;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_masque_listener_pair_read_inner_direct";
        _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null inner_direct_receive_connection", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v31)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v25 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_masque_listener_pair_read_inner_direct";
        _os_log_impl(&dword_182FBE000, v10, v25, "%{public}s called with null inner_direct_receive_connection, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    v19 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v10 = objc_claimAutoreleasedReturnValue();
    v20 = type;
    v21 = os_log_type_enabled(v10, type);
    if (!v19)
    {
      if (v21)
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_masque_listener_pair_read_inner_direct";
        _os_log_impl(&dword_182FBE000, v10, v20, "%{public}s called with null inner_direct_receive_connection, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v21)
    {
      *(_DWORD *)buf = 136446466;
      v34 = "nw_masque_listener_pair_read_inner_direct";
      v35 = 2082;
      v36 = v19;
      _os_log_impl(&dword_182FBE000, v10, v20, "%{public}s called with null inner_direct_receive_connection, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_35;
  }
  if (!v5[3])
  {
    __nwlog_obj();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v34 = "nw_masque_listener_pair_read_inner_direct";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v31 = 0;
    if (!__nwlog_fault(v9, &type, &v31))
      goto LABEL_55;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_masque_listener_pair_read_inner_direct";
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null pair->mlp_outer_connection_group", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v31)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v26 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_masque_listener_pair_read_inner_direct";
        _os_log_impl(&dword_182FBE000, v10, v26, "%{public}s called with null pair->mlp_outer_connection_group, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    v19 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v10 = objc_claimAutoreleasedReturnValue();
    v22 = type;
    v23 = os_log_type_enabled(v10, type);
    if (!v19)
    {
      if (v23)
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_masque_listener_pair_read_inner_direct";
        _os_log_impl(&dword_182FBE000, v10, v22, "%{public}s called with null pair->mlp_outer_connection_group, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v23)
    {
      *(_DWORD *)buf = 136446466;
      v34 = "nw_masque_listener_pair_read_inner_direct";
      v35 = 2082;
      v36 = v19;
      _os_log_impl(&dword_182FBE000, v10, v22, "%{public}s called with null pair->mlp_outer_connection_group, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_35:

    free(v19);
    if (!v9)
      goto LABEL_5;
    goto LABEL_56;
  }
  v27[0] = MEMORY[0x1E0C809B0];
  v27[1] = 3221225472;
  v27[2] = ___ZL41nw_masque_listener_pair_read_inner_directP34NWConcrete_nw_masque_listener_pairP24NWConcrete_nw_connectionPU25objcproto14OS_nw_endpoint8NSObject_block_invoke;
  v27[3] = &unk_1E149F860;
  v28 = v5;
  v29 = v7;
  v30 = v6;
  nw_connection_read_multiple(v30, 1u, 0xFFFFFFFF, v27);

LABEL_5:
}

void sub_18364AE54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, void *a19)
{
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void ___ZL41nw_masque_listener_pair_read_inner_directP34NWConcrete_nw_masque_listener_pairP24NWConcrete_nw_connectionPU25objcproto14OS_nw_endpoint8NSObject_block_invoke(_QWORD *a1, id *a2, unsigned int a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  _QWORD *v11;
  NSObject *v12;
  NSObject *v13;
  NSObject *v14;
  uint64_t v15;
  size_t size;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  uint64_t v22;
  _QWORD completion[4];
  _QWORD *v24;
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  _QWORD v30[3];

  v30[2] = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a1[4] + 24) && (a4 == 40 || !a4))
  {
    if (gLogDatapath)
    {
      __nwlog_obj();
      v21 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
      {
        v22 = *(_QWORD *)(a1[4] + 16);
        *(_DWORD *)buf = 136446722;
        v26 = "nw_masque_listener_pair_read_inner_direct_block_invoke";
        v27 = 2114;
        v28 = v22;
        v29 = 1024;
        LODWORD(v30[0]) = a3;
        _os_log_impl(&dword_182FBE000, v21, OS_LOG_TYPE_DEBUG, "%{public}s %{public}@ Proxying batch of %u packets to target group", buf, 0x1Cu);
      }

    }
    if (a3)
    {
      v8 = a3;
      v9 = MEMORY[0x1E0C809B0];
      do
      {
        v10 = *a2;
        if (gLogDatapath)
        {
          __nwlog_obj();
          v14 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
          {
            v15 = *(_QWORD *)(a1[4] + 16);
            if (v10)
              size = dispatch_data_get_size(v10);
            else
              size = 0;
            *(_DWORD *)buf = 136446722;
            v26 = "nw_masque_listener_pair_read_inner_direct_block_invoke";
            v27 = 2114;
            v28 = v15;
            v29 = 2048;
            v30[0] = size;
            _os_log_impl(&dword_182FBE000, v14, OS_LOG_TYPE_DEBUG, "%{public}s %{public}@ Proxying %zu bytes directly to target", buf, 0x20u);
          }

        }
        v11 = (_QWORD *)a1[4];
        v12 = a1[5];
        v13 = v11[3];
        completion[0] = v9;
        completion[1] = 3221225472;
        completion[2] = ___ZL41nw_masque_listener_pair_read_inner_directP34NWConcrete_nw_masque_listener_pairP24NWConcrete_nw_connectionPU25objcproto14OS_nw_endpoint8NSObject_block_invoke_320;
        completion[3] = &unk_1E14A9B48;
        v24 = v11;
        nw_connection_group_send_message(v13, v10, v12, (nw_content_context_t)&__block_literal_global_41718, completion);

        ++a2;
        --v8;
      }
      while (v8);
    }
    nw_masque_listener_pair_read_inner_direct(a1[4], a1[6], a1[5]);
  }
  else
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v17 = (id)gLogObj;
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      v18 = a1[4];
      v20 = *(_QWORD *)(v18 + 16);
      v19 = *(_QWORD *)(v18 + 24);
      *(_DWORD *)buf = 136446978;
      v26 = "nw_masque_listener_pair_read_inner_direct_block_invoke";
      v27 = 2114;
      v28 = v20;
      v29 = 1024;
      LODWORD(v30[0]) = a4;
      WORD2(v30[0]) = 2112;
      *(_QWORD *)((char *)v30 + 6) = v19;
      _os_log_impl(&dword_182FBE000, v17, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ Stopping reading, error %d, outer %@", buf, 0x26u);
    }

  }
}

void sub_18364B190(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  void *v16;

  _Unwind_Resume(a1);
}

void ___ZL41nw_masque_listener_pair_read_inner_directP34NWConcrete_nw_masque_listener_pairP24NWConcrete_nw_connectionPU25objcproto14OS_nw_endpoint8NSObject_block_invoke_320(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  uint64_t v5;
  int v6;
  const char *v7;
  __int16 v8;
  uint64_t v9;
  __int16 v10;
  id v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (v3)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v4 = (id)gLogObj;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
      v6 = 136446722;
      v7 = "nw_masque_listener_pair_read_inner_direct_block_invoke";
      v8 = 2114;
      v9 = v5;
      v10 = 2112;
      v11 = v3;
      _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ received error sending to outer connection %@", (uint8_t *)&v6, 0x20u);
    }

  }
}

void *__Block_byref_object_copy__246(uint64_t a1, uint64_t a2)
{
  void *result;

  result = _Block_copy(*(const void **)(a2 + 40));
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void __Block_byref_object_dispose__247(uint64_t a1)
{

}

void ___ZL52nw_masque_listener_pair_setup_outer_connection_groupP34NWConcrete_nw_masque_listener_pairhPU29objcproto18OS_nw_http_request8NSObject_block_invoke(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  v2 = _Block_copy(*(const void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16) + 88));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void ___ZL52nw_masque_listener_pair_setup_outer_connection_groupP34NWConcrete_nw_masque_listener_pairhPU29objcproto18OS_nw_http_request8NSObject_block_invoke_307(uint64_t a1, unsigned int a2, void *a3)
{
  void *(*v5)(uint64_t, uint64_t);
  NSObject *v6;
  const char *v7;
  uint64_t v8;
  void *(*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  NSObject *well_known;
  uint64_t v13;
  uint64_t v14;
  void *(*v15)(uint64_t, uint64_t);
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *metadata_for_response;
  NSObject *v21;
  _QWORD *v22;
  NSObject *v23;
  void (**v24)(_QWORD);
  uint64_t v25;
  NSObject *v26;
  uint64_t v27;
  uint64_t v28;
  void *(*v29)(uint64_t, uint64_t);
  void *v30;
  NSObject *v31;
  NSObject *v32;
  _QWORD aBlock[4];
  id v34;
  _BYTE *v35;
  _QWORD completion[4];
  _QWORD *v37;
  _BYTE buf[24];
  void *(*v39)(uint64_t, uint64_t);
  __int128 v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v6 = (id)gLogObj;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    if (a2 > 4)
      v7 = "<unknown>";
    else
      v7 = off_1E149CE68[a2];
    v8 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
    v9 = *(void *(**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 32) + 24);
    *(_DWORD *)buf = 136446978;
    *(_QWORD *)&buf[4] = "nw_masque_listener_pair_setup_outer_connection_group_block_invoke";
    *(_WORD *)&buf[12] = 2114;
    *(_QWORD *)&buf[14] = v8;
    *(_WORD *)&buf[22] = 2112;
    v39 = v9;
    LOWORD(v40) = 2080;
    *(_QWORD *)((char *)&v40 + 2) = v7;
    _os_log_impl(&dword_182FBE000, v6, OS_LOG_TYPE_INFO, "%{public}s %{public}@ outer connection group to %@ has transitioned to %s", buf, 0x2Au);
  }

  if (a2 - 3 < 2)
    goto LABEL_9;
  if (a2 != 2)
  {
    if (a2 != 1)
      goto LABEL_20;
LABEL_9:
    v10 = *(_QWORD *)(a1 + 32);
    v11 = MEMORY[0x1E0C809B0];
    if (*(_BYTE *)(v10 + 81))
    {
      if (*(_BYTE *)(v10 + 82))
      {
LABEL_17:
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = buf;
        *(_QWORD *)&buf[16] = 0x3032000000;
        v39 = __Block_byref_object_copy__246;
        *(_QWORD *)&v40 = __Block_byref_object_dispose__247;
        *((_QWORD *)&v40 + 1) = 0;
        aBlock[0] = v11;
        aBlock[1] = 3221225472;
        aBlock[2] = ___ZL52nw_masque_listener_pair_setup_outer_connection_groupP34NWConcrete_nw_masque_listener_pairhPU29objcproto18OS_nw_http_request8NSObject_block_invoke_310;
        aBlock[3] = &unk_1E14ACE40;
        v35 = buf;
        v34 = (id)v10;
        v24 = (void (**)(_QWORD))_Block_copy(aBlock);
        os_unfair_lock_lock((os_unfair_lock_t)(v10 + 8));
        v24[2](v24);
        os_unfair_lock_unlock((os_unfair_lock_t)(v10 + 8));

        v25 = *(_QWORD *)(*(_QWORD *)&buf[8] + 40);
        if (v25)
          (*(void (**)(uint64_t, _QWORD, void *(*)(uint64_t, uint64_t)))(v25 + 16))(v25, dword_183C6F250[a2 - 1], v5);

        _Block_object_dispose(buf, 8);
        goto LABEL_20;
      }
      *(_BYTE *)(v10 + 82) = 1;
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      well_known = (id)gLogObj;
      if (os_log_type_enabled(well_known, OS_LOG_TYPE_INFO))
      {
        v13 = *(_QWORD *)(a1 + 32);
        v14 = *(_QWORD *)(v13 + 16);
        v15 = *(void *(**)(uint64_t, uint64_t))(v13 + 88);
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = "nw_masque_listener_pair_setup_outer_connection_group_block_invoke_2";
        *(_WORD *)&buf[12] = 2114;
        *(_QWORD *)&buf[14] = v14;
        *(_WORD *)&buf[22] = 2112;
        v39 = v15;
        _os_log_impl(&dword_182FBE000, well_known, OS_LOG_TYPE_INFO, "%{public}s %{public}@ Closed UDP connection group (for %@)", buf, 0x20u);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v16 = (id)gLogObj;
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        v17 = *(_QWORD *)(a1 + 32);
        v18 = *(_QWORD *)(v17 + 16);
        v19 = *(_QWORD *)(v17 + 88);
        *(_DWORD *)buf = 136446978;
        *(_QWORD *)&buf[4] = "nw_masque_listener_pair_setup_outer_connection_group_block_invoke";
        *(_WORD *)&buf[12] = 2114;
        *(_QWORD *)&buf[14] = v18;
        *(_WORD *)&buf[22] = 2112;
        v39 = v5;
        LOWORD(v40) = 2112;
        *(_QWORD *)((char *)&v40 + 2) = v19;
        _os_log_impl(&dword_182FBE000, v16, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ Failed UDP connection group with error %@ (for %@)", buf, 0x2Au);
      }

      *(_BYTE *)(*(_QWORD *)(a1 + 32) + 81) = 1;
      well_known = _nw_http_response_create_well_known(500);
      metadata_for_response = nw_http_create_metadata_for_response(well_known);
      v21 = nw_content_context_create("response");
      nw_content_context_set_metadata_for_protocol(v21, metadata_for_response);
      v22 = *(_QWORD **)(a1 + 32);
      v23 = *(NSObject **)(v22[2] + 48);
      completion[0] = v11;
      completion[1] = 3221225472;
      completion[2] = ___ZL52nw_masque_listener_pair_setup_outer_connection_groupP34NWConcrete_nw_masque_listener_pairhPU29objcproto18OS_nw_http_request8NSObject_block_invoke_308;
      completion[3] = &unk_1E14A9B48;
      v37 = v22;
      nw_connection_send(v23, 0, v21, 1, completion);

    }
    v10 = *(_QWORD *)(a1 + 32);
    goto LABEL_17;
  }
  if (!*(_BYTE *)(*(_QWORD *)(a1 + 32) + 81))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v26 = (id)gLogObj;
    if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
    {
      v27 = *(_QWORD *)(a1 + 32);
      v28 = *(_QWORD *)(v27 + 16);
      v29 = *(void *(**)(uint64_t, uint64_t))(v27 + 88);
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = "nw_masque_listener_pair_setup_outer_connection_group_block_invoke_2";
      *(_WORD *)&buf[12] = 2114;
      *(_QWORD *)&buf[14] = v28;
      *(_WORD *)&buf[22] = 2112;
      v39 = v29;
      _os_log_impl(&dword_182FBE000, v26, OS_LOG_TYPE_INFO, "%{public}s %{public}@ Opened UDP connection group (for %@)", buf, 0x20u);
    }

    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 81) = 1;
    v30 = (void *)_nw_http_response_create_well_known(200);
    v31 = nw_http_create_metadata_for_response(v30);
    v32 = nw_content_context_create("response");
    nw_content_context_set_metadata_for_protocol(v32, v31);
    nw_connection_send(*(nw_connection_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16) + 48), 0, v32, 1, &__block_literal_global_24144);

  }
LABEL_20:

}

void sub_18364B844(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void ___ZL44nw_masque_listener_pair_read_outer_datagramsP34NWConcrete_nw_masque_listener_pair_block_invoke(uint64_t a1, void *a2, void *a3, int a4)
{
  NSObject *v7;
  NSObject *v8;
  NSObject *v9;
  BOOL v10;
  nw_endpoint_t v11;
  nw_endpoint_t v12;
  NSObject *v13;
  int v14;
  const sockaddr *address;
  int sa_family;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  void *v21;
  int v22;
  uint64_t v23;
  NSObject *v24;
  dispatch_data_t concat;
  uint64_t v26;
  NSObject *v27;
  uint64_t v29;
  size_t v30;
  int v31;
  NSObject *v32;
  _QWORD *v33;
  _QWORD *v34;
  NSObject *v35;
  uint64_t v36;
  NSObject *v37;
  uint64_t v38;
  size_t v39;
  const char *v40;
  NSObject *v41;
  uint64_t v42;
  _QWORD completion[4];
  _QWORD *v44;
  _QWORD applier[4];
  id v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  char v51;
  _BYTE buffer[22];
  __int16 v53;
  size_t size;
  __int16 v55;
  NSObject *v56;
  __int16 v57;
  const char *v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a3;
  if (v7)
  {
    v9 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 24);
    v10 = !v9 || a4 == 0;
    if (!v10)
    {
      v11 = nw_connection_group_copy_remote_endpoint_for_message(v9, v8);
      v12 = v11;
      if (!v11 || (v13 = v11, v14 = -[NSObject type](v13, "type"), v13, v14 != 1))
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v27 = (id)gLogObj;
        if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
        {
          v26 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
          *(_DWORD *)buffer = 136446978;
          *(_QWORD *)&buffer[4] = "nw_masque_listener_pair_read_outer_datagrams_block_invoke";
          *(_WORD *)&buffer[12] = 2114;
          *(_QWORD *)&buffer[14] = v26;
          v53 = 2048;
          size = dispatch_data_get_size(v7);
          v55 = 2112;
          v56 = v12;
          _os_log_impl(&dword_182FBE000, v27, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ Unable to proxy %zu bytes, invalid endpoint %@", buffer, 0x2Au);
        }
        goto LABEL_28;
      }
      address = nw_endpoint_get_address(v13);
      sa_family = address->sa_family;
      if (sa_family != 2 && sa_family != 30)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v27 = (id)gLogObj;
        if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
        {
          v29 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
          v30 = dispatch_data_get_size(v7);
          v31 = address->sa_family;
          *(_DWORD *)buffer = 136446978;
          *(_QWORD *)&buffer[4] = "nw_masque_listener_pair_read_outer_datagrams_block_invoke";
          *(_WORD *)&buffer[12] = 2114;
          *(_QWORD *)&buffer[14] = v29;
          v53 = 2048;
          size = v30;
          v55 = 1024;
          LODWORD(v56) = v31;
          _os_log_impl(&dword_182FBE000, v27, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ Unable to proxy %zu bytes, invalid address family %u", buffer, 0x26u);
        }
LABEL_28:

LABEL_37:
        goto LABEL_38;
      }
      v48 = 0;
      v49 = &v48;
      v50 = 0x2020000000;
      v51 = 0;
      v18 = *(_QWORD *)(a1 + 32);
      v19 = MEMORY[0x1E0C809B0];
      if (*(_QWORD *)(v18 + 48) && *(_QWORD *)(v18 + 40))
      {
        v20 = nw_endpoint_copy_address_string(v13);
        v21 = nw_dictionary_copy_value(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 40), (uint64_t)v20);
        if (v20)
          free(v20);
        if (gLogDatapath)
        {
          __nwlog_obj();
          v41 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v41, OS_LOG_TYPE_DEBUG))
          {
            v42 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
            *(_DWORD *)buffer = 136446722;
            *(_QWORD *)&buffer[4] = "nw_masque_listener_pair_read_outer_datagrams_block_invoke";
            *(_WORD *)&buffer[12] = 2114;
            *(_QWORD *)&buffer[14] = v42;
            v53 = 2112;
            size = (size_t)v7;
            _os_log_impl(&dword_182FBE000, v41, OS_LOG_TYPE_DEBUG, "%{public}s %{public}@ Received content %@", buffer, 0x20u);
          }

        }
        if (v21)
        {
          applier[0] = MEMORY[0x1E0C809B0];
          applier[1] = 3221225472;
          applier[2] = ___ZL44nw_masque_listener_pair_read_outer_datagramsP34NWConcrete_nw_masque_listener_pair_block_invoke_311;
          applier[3] = &unk_1E149F750;
          v46 = v21;
          v47 = &v48;
          dispatch_data_apply(v7, applier);

        }
        v19 = MEMORY[0x1E0C809B0];
      }
      if (gLogDatapath)
      {
        v36 = v19;
        __nwlog_obj();
        v37 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
        {
          v38 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
          v39 = dispatch_data_get_size(v7);
          v10 = *((_BYTE *)v49 + 24) == 0;
          *(_DWORD *)buffer = 136447234;
          *(_QWORD *)&buffer[4] = "nw_masque_listener_pair_read_outer_datagrams_block_invoke_2";
          if (v10)
            v40 = "";
          else
            v40 = " directly";
          *(_WORD *)&buffer[12] = 2114;
          *(_QWORD *)&buffer[14] = v38;
          v53 = 2048;
          size = v39;
          v55 = 2112;
          v56 = v13;
          v57 = 2080;
          v58 = v40;
          _os_log_impl(&dword_182FBE000, v37, OS_LOG_TYPE_DEBUG, "%{public}s %{public}@ Proxying %zu bytes from %@%s to client", buffer, 0x34u);
        }

        v19 = v36;
      }
      if (!*((_BYTE *)v49 + 24))
      {
        v22 = address->sa_family;
        if (v22 == 30)
        {
          v23 = v19;
          buffer[0] = 6;
          *(sockaddr *)&buffer[1] = *(sockaddr *)&address->sa_data[6];
          *(_WORD *)&buffer[17] = *(_WORD *)address->sa_data;
          v32 = dispatch_data_create(buffer, 0x13uLL, 0, 0);
          concat = dispatch_data_create_concat(v32, v7);

          goto LABEL_33;
        }
        if (v22 == 2)
        {
          v23 = v19;
          buffer[0] = 4;
          *(_DWORD *)&buffer[1] = *(_DWORD *)&address->sa_data[2];
          *(_WORD *)&buffer[5] = *(_WORD *)address->sa_data;
          v24 = dispatch_data_create(buffer, 7uLL, 0, 0);
          concat = dispatch_data_create_concat(v24, v7);

LABEL_33:
          v7 = concat;
          v19 = v23;
        }
      }
      dispatch_group_enter(*(dispatch_group_t *)(*(_QWORD *)(a1 + 32) + 96));
      v33 = *(_QWORD **)(a1 + 32);
      v34 = v33;
      if (!*((_BYTE *)v49 + 24))
        v34 = (_QWORD *)v33[2];
      v35 = v34[6];
      completion[0] = v19;
      completion[1] = 3221225472;
      completion[2] = ___ZL44nw_masque_listener_pair_read_outer_datagramsP34NWConcrete_nw_masque_listener_pair_block_invoke_313;
      completion[3] = &unk_1E14A9B48;
      v44 = v33;
      nw_connection_send(v35, v7, (nw_content_context_t)&__block_literal_global_41718, 1, completion);

      _Block_object_dispose(&v48, 8);
      goto LABEL_37;
    }
  }
LABEL_38:

}

void sub_18364BE8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  void *v13;
  void *v14;
  void *v15;
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

BOOL ___ZL44nw_masque_listener_pair_read_outer_datagramsP34NWConcrete_nw_masque_listener_pair_block_invoke_311(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _BOOL4 matched;

  matched = nw_masque_connection_pair_match_demux_pattern(a4, a5, *(void **)(a1 + 32));
  if (matched)
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
  return !matched;
}

void ___ZL44nw_masque_listener_pair_read_outer_datagramsP34NWConcrete_nw_masque_listener_pair_block_invoke_313(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  uint64_t v5;
  int v6;
  const char *v7;
  __int16 v8;
  uint64_t v9;
  __int16 v10;
  id v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (v3)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v4 = (id)gLogObj;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
      v6 = 136446722;
      v7 = "nw_masque_listener_pair_read_outer_datagrams_block_invoke";
      v8 = 2114;
      v9 = v5;
      v10 = 2112;
      v11 = v3;
      _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ received error sending to inner connection %@", (uint8_t *)&v6, 0x20u);
    }

  }
  dispatch_group_leave(*(dispatch_group_t *)(*(_QWORD *)(a1 + 32) + 96));

}

BOOL nw_masque_connection_pair_match_demux_pattern(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  void *v6;
  _BOOL8 v7;
  _QWORD v9[7];
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  char v13;
  _QWORD v14[5];

  v5 = a3;
  v6 = v5;
  v7 = 0;
  if (a1 && a2 && v5)
  {
    v10 = 0;
    v11 = &v10;
    v12 = 0x2020000000;
    v13 = 0;
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 3221225472;
    v9[2] = ___ZL45nw_masque_connection_pair_match_demux_patternPKhmPU33objcproto22OS_nw_protocol_options8NSObject_block_invoke;
    v9[3] = &unk_1E149F7C8;
    v9[5] = a2;
    v9[6] = a1;
    v9[4] = &v10;
    v14[0] = MEMORY[0x1E0C809B0];
    v14[1] = 0x40000000;
    v14[2] = __nw_demux_options_enumerate_patterns_block_invoke;
    v14[3] = &unk_1E149DF30;
    v14[4] = v9;
    nw_protocol_options_access_handle(v5, v14);
    v7 = *((_BYTE *)v11 + 24) != 0;
    _Block_object_dispose(&v10, 8);
  }

  return v7;
}

uint64_t ___ZL45nw_masque_connection_pair_match_demux_patternPKhmPU33objcproto22OS_nw_protocol_options8NSObject_block_invoke(_QWORD *a1, unsigned int a2, unsigned int a3, unsigned __int8 *a4, unsigned __int8 *a5)
{
  uint64_t v5;
  unsigned __int8 *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  _BOOL8 v14;
  char v15;
  int v16;
  int v17;
  int v18;
  BOOL v19;

  v5 = a2;
  if (a1[5] < a2 + (unint64_t)a3)
    return 1;
  if (a2)
  {
    v7 = (unsigned __int8 *)a1[6];
    if (a5)
    {
      while (1)
      {
        v9 = *v7++;
        v8 = v9;
        v11 = *a5++;
        v10 = v11;
        v12 = *a4++;
        v13 = (v8 ^ v12) & v10;
        v14 = v13 != 0;
        if (v13)
          break;
        if (!--v5)
          goto LABEL_7;
      }
    }
    else
    {
      while (1)
      {
        v17 = *v7++;
        v16 = v17;
        v18 = *a4++;
        v19 = v16 == v18;
        v14 = v16 != v18;
        if (!v19)
          break;
        if (!--v5)
          goto LABEL_7;
      }
    }
    v15 = 0;
  }
  else
  {
LABEL_7:
    v14 = 0;
    v15 = 1;
  }
  *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = v15;
  return v14;
}

void ___ZL52nw_masque_listener_pair_setup_outer_connection_groupP34NWConcrete_nw_masque_listener_pairhPU29objcproto18OS_nw_http_request8NSObject_block_invoke_308(uint64_t a1)
{
  nw_connection_cancel(*(nw_connection_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16) + 48));
}

void ___ZL52nw_masque_listener_pair_setup_outer_connection_groupP34NWConcrete_nw_masque_listener_pairhPU29objcproto18OS_nw_http_request8NSObject_block_invoke_310(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  v2 = _Block_copy(*(const void **)(*(_QWORD *)(a1 + 32) + 32));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void ___ZL30nw_masque_listener_pair_createP31NWConcrete_nw_masque_connection_block_invoke(uint64_t a1)
{
  nw_dictionary_set_value(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 64), (const char *)(*(_QWORD *)(a1 + 40) + 64), *(void **)(a1 + 40));
  *(_BYTE *)(*(_QWORD *)(a1 + 40) + 83) = 0;
}

void ___ZL30nw_masque_listener_pair_createP31NWConcrete_nw_masque_connection_block_invoke_2(uint64_t a1, int a2)
{
  if ((a2 & 0xFFFFFFFE) == 4)
  {
    nw_dictionary_set_value(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 64), (const char *)(*(_QWORD *)(a1 + 40) + 64), 0);
    nw_masque_listener_pair_cancel(*(NWConcrete_nw_masque_listener_pair **)(a1 + 40));
  }
}

void ___ZL49nw_masque_listener_pair_set_state_changed_handlerP34NWConcrete_nw_masque_listener_pairU13block_pointerFv21nw_connection_state_tPU22objcproto11OS_nw_error8NSObjectE_block_invoke(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  v2 = _Block_copy(*(const void **)(a1 + 40));
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(void **)(v3 + 32);
  *(_QWORD *)(v3 + 32) = v2;

}

void nw_masque_listener_pair_cancel(NWConcrete_nw_masque_listener_pair *a1)
{
  NWConcrete_nw_masque_listener_pair *v1;
  NWConcrete_nw_masque_listener_pair *v2;
  NSObject *v3;
  NSObject *v4;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  _QWORD block[4];
  NWConcrete_nw_masque_listener_pair *v14;
  char v15;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = *((_QWORD *)v1 + 12);
    v4 = *(NSObject **)(*((_QWORD *)v1 + 2) + 32);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = ___ZL30nw_masque_listener_pair_cancelP34NWConcrete_nw_masque_listener_pair_block_invoke;
    block[3] = &unk_1E14ACFD0;
    v14 = v1;
    dispatch_group_notify(v3, v4, block);

    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v18 = "nw_masque_listener_pair_cancel";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v15 = 0;
  if (__nwlog_fault(v6, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_masque_listener_pair_cancel";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null pair", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v18 = "nw_masque_listener_pair_cancel";
          v19 = 2082;
          v20 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null pair, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_masque_listener_pair_cancel";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null pair, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_masque_listener_pair_cancel";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null pair, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
LABEL_3:

}

void ___ZL30nw_masque_listener_pair_cancelP34NWConcrete_nw_masque_listener_pair_block_invoke(uint64_t a1)
{
  _QWORD *v2;
  NSObject *v3;
  uint64_t v4;
  void *v5;
  NSObject *v6;
  uint64_t v7;
  void *v8;
  NSObject *v9;
  uint64_t v10;
  void *v11;
  unsigned __int8 *v12;
  uint64_t v13;
  void *v14;
  void *v15;

  v2 = *(_QWORD **)(a1 + 32);
  v3 = *(NSObject **)(v2[2] + 48);
  if (v3)
  {
    nw_connection_cancel(v3);
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
    v5 = *(void **)(v4 + 48);
    *(_QWORD *)(v4 + 48) = 0;

    v2 = *(_QWORD **)(a1 + 32);
  }
  v6 = v2[3];
  if (v6)
  {
    nw_connection_group_cancel(v6);
    v7 = *(_QWORD *)(a1 + 32);
    v8 = *(void **)(v7 + 24);
    *(_QWORD *)(v7 + 24) = 0;

    v2 = *(_QWORD **)(a1 + 32);
  }
  v9 = v2[6];
  if (v9)
  {
    nw_connection_cancel(v9);
    v10 = *(_QWORD *)(a1 + 32);
    v11 = *(void **)(v10 + 48);
    *(_QWORD *)(v10 + 48) = 0;

    v2 = *(_QWORD **)(a1 + 32);
  }
  v12 = (unsigned __int8 *)v2[7];
  if (v12)
  {
    nw_array_apply(v12, (uint64_t)&__block_literal_global_306);
    v13 = *(_QWORD *)(a1 + 32);
    v14 = *(void **)(v13 + 56);
    *(_QWORD *)(v13 + 56) = 0;

    v2 = *(_QWORD **)(a1 + 32);
  }
  v15 = (void *)v2[5];
  v2[5] = 0;

}

uint64_t ___ZL30nw_masque_listener_pair_cancelP34NWConcrete_nw_masque_listener_pair_block_invoke_2(int a1, int a2, nw_connection_t connection)
{
  nw_connection_cancel(connection);
  return 1;
}

uint64_t ___ZL40nw_masque_connection_pair_handle_headersP36NWConcrete_nw_masque_connection_pairPU29objcproto18OS_nw_http_request8NSObject_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v6;
  char *v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  id v12;
  void *v13;
  id v14;
  id v15;
  void *v16;
  id v17;
  id v18;
  void *v19;
  int v20;
  void *v21;
  NSObject *v22;
  id v23;
  uint64_t v24;
  _BYTE *v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t i;
  void *v29;
  int v30;
  _BYTE *v31;
  int v32;
  int v33;
  int v34;
  int v35;
  NSObject *v36;
  int v37;
  NSObject *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  NSObject *v43;
  int v44;
  NSObject *v45;
  void *v46;
  NSObject *v47;
  int v48;
  void *v50;
  void *v51;
  id v52;
  id v53;
  _DWORD *v54;
  unsigned __int16 *v55;
  _QWORD *v56;
  _DWORD *v57;
  char *v58;
  _BYTE *v59;
  _BYTE *v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint8_t v65[4];
  const char *v66;
  __int16 v67;
  id v68;
  __int16 v69;
  id v70;
  __int16 v71;
  int v72;
  uint8_t buf[4];
  const char *v74;
  __int16 v75;
  id v76;
  __int16 v77;
  void *v78;
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithCString:encoding:", a2, 5);
  v51 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithCString:encoding:", a4, 5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = (char *)*(id *)(a1 + 32);
  v52 = v51;
  v53 = v6;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Prohibit-Interface");
  v50 = (void *)objc_claimAutoreleasedReturnValue();
  if (!objc_msgSend(v52, "caseInsensitiveCompare:"))
  {
    v58 = v7;
    objc_msgSend(v53, "componentsSeparatedByString:", CFSTR(","));
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v22 = (id)gLogObj;
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446722;
      v74 = "nw_masque_connection_pair_handle_prohibit_interface_header";
      v75 = 2112;
      v76 = v52;
      v77 = 2112;
      v78 = v21;
      _os_log_impl(&dword_182FBE000, v22, OS_LOG_TYPE_DEBUG, "%{public}s %@ : %@", buf, 0x20u);
    }

    v63 = 0u;
    v64 = 0u;
    v61 = 0u;
    v62 = 0u;
    v23 = v21;
    v24 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v61, v65, 16);
    if (v24)
    {
      v59 = v7 + 266;
      v60 = v7 + 267;
      v25 = v7 + 270;
      v26 = v7 + 269;
      v27 = *(_QWORD *)v62;
      do
      {
        for (i = 0; i != v24; ++i)
        {
          if (*(_QWORD *)v62 != v27)
            objc_enumerationMutation(v23);
          v29 = *(void **)(*((_QWORD *)&v61 + 1) + 8 * i);
          v30 = strcmp((const char *)objc_msgSend(v29, "UTF8String"), "wifi");
          v31 = v58 + 268;
          if (!v30)
            goto LABEL_13;
          v32 = strcmp((const char *)objc_msgSend(v29, "UTF8String"), "cellular");
          v31 = v26;
          if (v32)
          {
            v33 = strcmp((const char *)objc_msgSend(v29, "UTF8String"), "wired");
            v31 = v25;
            if (v33)
            {
              v34 = strcmp((const char *)objc_msgSend(v29, "UTF8String"), "expensive");
              v31 = v60;
              if (v34)
              {
                v35 = strcmp((const char *)objc_msgSend(v29, "UTF8String"), "constrained");
                v31 = v59;
                if (v35)
                  continue;
              }
            }
          }
LABEL_13:
          *v31 = 1;
        }
        v24 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v61, v65, 16);
      }
      while (v24);
    }

    goto LABEL_70;
  }

  v54 = *(id *)(a1 + 32);
  v8 = v52;
  v9 = v53;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Require-Interface");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  if (!objc_msgSend(v8, "caseInsensitiveCompare:", v10))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v36 = (id)gLogObj;
    if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)v65 = 136446722;
      v66 = "nw_masque_connection_pair_handle_require_interface_header";
      v67 = 2112;
      v68 = v8;
      v69 = 2112;
      v70 = v9;
      _os_log_impl(&dword_182FBE000, v36, OS_LOG_TYPE_DEBUG, "%{public}s %@ : %@", v65, 0x20u);
    }

    if (!strcmp((const char *)objc_msgSend(v9, "UTF8String"), "wifi"))
    {
      v37 = 1;
    }
    else if (!strcmp((const char *)objc_msgSend(v9, "UTF8String"), "cellular"))
    {
      v37 = 2;
    }
    else
    {
      if (strcmp((const char *)objc_msgSend(v9, "UTF8String"), "wired"))
      {
LABEL_46:

        goto LABEL_70;
      }
      v37 = 3;
    }
    v54[64] = v37;
    goto LABEL_46;
  }

  v55 = (unsigned __int16 *)*(id *)(a1 + 32);
  v11 = v8;
  v12 = v9;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Multipath");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v11, "caseInsensitiveCompare:", v13))
  {

    v56 = *(id *)(a1 + 32);
    v14 = v11;
    v15 = v12;
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Client-Application");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v14, "caseInsensitiveCompare:", v16))
    {

      v57 = *(id *)(a1 + 32);
      v17 = v14;
      v18 = v15;
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Priority");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v17, "caseInsensitiveCompare:", v19))
      {
LABEL_69:

        goto LABEL_70;
      }
      if (strstr((char *)objc_msgSend(v18, "UTF8String"), "tc=video"))
      {
        v20 = 700;
      }
      else if (strstr((char *)objc_msgSend(v18, "UTF8String"), "tc=voice"))
      {
        v20 = 800;
      }
      else if (strstr((char *)objc_msgSend(v18, "UTF8String"), "tc=oam"))
      {
        v20 = 400;
      }
      else if (strstr((char *)objc_msgSend(v18, "UTF8String"), "tc=best-effort"))
      {
        v20 = 0;
      }
      else if (strstr((char *)objc_msgSend(v18, "UTF8String"), "tc=background-user"))
      {
        v20 = 200;
      }
      else if (strstr((char *)objc_msgSend(v18, "UTF8String"), "tc=background-system"))
      {
        v20 = 100;
      }
      else if (strstr((char *)objc_msgSend(v18, "UTF8String"), "tc=responsive-data"))
      {
        v20 = 300;
      }
      else if (strstr((char *)objc_msgSend(v18, "UTF8String"), "tc=responsive-av"))
      {
        v20 = 600;
      }
      else if (strstr((char *)objc_msgSend(v18, "UTF8String"), "tc=av-streaming"))
      {
        v20 = 500;
      }
      else
      {
        if (!strstr((char *)objc_msgSend(v18, "UTF8String"), "tc=network-control"))
        {
LABEL_66:
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v47 = (id)gLogObj;
          if (os_log_type_enabled(v47, OS_LOG_TYPE_DEBUG))
          {
            v48 = v57[63];
            *(_DWORD *)v65 = 136446978;
            v66 = "nw_masque_connection_pair_handle_priority_header";
            v67 = 2112;
            v68 = v17;
            v69 = 2112;
            v70 = v18;
            v71 = 1024;
            v72 = v48;
            _os_log_impl(&dword_182FBE000, v47, OS_LOG_TYPE_DEBUG, "%{public}s %@ : %@  traffic class:%u", v65, 0x26u);
          }

          goto LABEL_69;
        }
        v20 = 900;
      }
      v57[63] = v20;
      goto LABEL_66;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v45 = (id)gLogObj;
    if (os_log_type_enabled(v45, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)v65 = 136446722;
      v66 = "nw_masque_connection_pair_handle_client_application_header";
      v67 = 2112;
      v68 = v14;
      v69 = 2112;
      v70 = v15;
      _os_log_impl(&dword_182FBE000, v45, OS_LOG_TYPE_DEBUG, "%{public}s %@ : %@", v65, 0x20u);
    }

    v46 = (void *)v56[34];
    v56[34] = v15;

  }
  else
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v38 = (id)gLogObj;
    if (os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)v65 = 136446722;
      v66 = "nw_masque_connection_pair_handle_multipath_header";
      v67 = 2112;
      v68 = v11;
      v69 = 2112;
      v70 = v12;
      _os_log_impl(&dword_182FBE000, v38, OS_LOG_TYPE_DEBUG, "%{public}s %@ : %@", v65, 0x20u);
    }

    if (strstr((char *)objc_msgSend(v12, "UTF8String"), "interactive"))
      *((_DWORD *)v55 + 65) = 2;
    objc_msgSend(v12, "componentsSeparatedByString:", CFSTR("port="));
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    if ((unint64_t)objc_msgSend(v39, "count") >= 2)
    {
      objc_msgSend(v39, "objectAtIndex:", 1);
      v40 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v40, "componentsSeparatedByString:", CFSTR(","));
      v41 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v41, "objectAtIndex:", 0);
      v42 = (void *)objc_claimAutoreleasedReturnValue();
      v55[132] = objc_msgSend(v42, "integerValue");

      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v43 = (id)gLogObj;
      if (os_log_type_enabled(v43, OS_LOG_TYPE_DEBUG))
      {
        v44 = v55[132];
        *(_DWORD *)v65 = 136446466;
        v66 = "nw_masque_connection_pair_handle_multipath_header";
        v67 = 1024;
        LODWORD(v68) = v44;
        _os_log_impl(&dword_182FBE000, v43, OS_LOG_TYPE_DEBUG, "%{public}s port: %u", v65, 0x12u);
      }

    }
  }
LABEL_70:

  return 1;
}

void sub_18364D03C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void ___ZL48nw_masque_connection_pair_setup_outer_connectionP36NWConcrete_nw_masque_connection_pairPU25objcproto14OS_nw_endpoint8NSObjecthPU29objcproto18OS_nw_http_requestS1__block_invoke(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  v2 = _Block_copy(*(const void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16) + 88));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void ___ZL48nw_masque_connection_pair_setup_outer_connectionP36NWConcrete_nw_masque_connection_pairPU25objcproto14OS_nw_endpoint8NSObjecthPU29objcproto18OS_nw_http_requestS1__block_invoke_2(uint64_t a1)
{
  NSObject *v2;
  _QWORD v3[4];
  id v4;
  id v5;
  id v6;
  char v7;

  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 40) + 16))();
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = ___ZL48nw_masque_connection_pair_setup_outer_connectionP36NWConcrete_nw_masque_connection_pairPU25objcproto14OS_nw_endpoint8NSObjecthPU29objcproto18OS_nw_http_requestS1__block_invoke_3;
  v3[3] = &unk_1E149F6D8;
  v2 = *(NSObject **)(a1 + 64);
  v4 = *(id *)(a1 + 72);
  v5 = *(id *)(a1 + 32);
  v7 = *(_BYTE *)(a1 + 96);
  v6 = *(id *)(a1 + 40);
  dispatch_async(v2, v3);

}

void nw_masque_connection_pair_setup_outer_connection_inner(void *a1, void *a2, int a3, void *a4)
{
  id v7;
  NSObject *v8;
  NSObject *v9;
  NSObject *v10;
  uint64_t v11;
  BOOL v12;
  NSObject *v13;
  nw_interface_type_t v14;
  void *v15;
  nw_multipath_service_t v16;
  __int16 v17;
  NSObject *v18;
  NSObject *v19;
  char *v20;
  nw_connection_t v21;
  void *v22;
  NSObject *v23;
  NWConcrete_nw_masque_connection_pair *v24;
  void *v25;
  char *v26;
  NSObject *v27;
  os_log_type_t v28;
  void *v29;
  os_log_type_t v30;
  char *backtrace_string;
  os_log_type_t v32;
  _BOOL4 v33;
  char *v34;
  os_log_type_t v35;
  _BOOL4 v36;
  os_log_type_t v37;
  os_log_type_t v38;
  _QWORD handler[4];
  NWConcrete_nw_masque_connection_pair *v40;
  NSObject *v41;
  char v42;
  BOOL v43;
  char v44;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v47;
  __int16 v48;
  char *v49;
  __int16 v50;
  NSObject *v51;
  __int16 v52;
  NSObject *v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  v7 = a1;
  v8 = a2;
  v9 = a4;
  v10 = v9;
  if (!v7)
  {
    __nwlog_obj();
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v47 = "nw_masque_connection_pair_setup_outer_connection_inner";
    v26 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v44 = 0;
    if (!__nwlog_fault(v26, &type, &v44))
      goto LABEL_67;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v27 = objc_claimAutoreleasedReturnValue();
      v28 = type;
      if (os_log_type_enabled(v27, type))
      {
        *(_DWORD *)buf = 136446210;
        v47 = "nw_masque_connection_pair_setup_outer_connection_inner";
        _os_log_impl(&dword_182FBE000, v27, v28, "%{public}s called with null pair", buf, 0xCu);
      }
    }
    else if (v44)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v27 = objc_claimAutoreleasedReturnValue();
      v32 = type;
      v33 = os_log_type_enabled(v27, type);
      if (backtrace_string)
      {
        if (v33)
        {
          *(_DWORD *)buf = 136446466;
          v47 = "nw_masque_connection_pair_setup_outer_connection_inner";
          v48 = 2082;
          v49 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v27, v32, "%{public}s called with null pair, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_67:
        if (!v26)
          goto LABEL_33;
LABEL_68:
        free(v26);
        goto LABEL_33;
      }
      if (v33)
      {
        *(_DWORD *)buf = 136446210;
        v47 = "nw_masque_connection_pair_setup_outer_connection_inner";
        _os_log_impl(&dword_182FBE000, v27, v32, "%{public}s called with null pair, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v27 = objc_claimAutoreleasedReturnValue();
      v37 = type;
      if (os_log_type_enabled(v27, type))
      {
        *(_DWORD *)buf = 136446210;
        v47 = "nw_masque_connection_pair_setup_outer_connection_inner";
        _os_log_impl(&dword_182FBE000, v27, v37, "%{public}s called with null pair, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_66:

    goto LABEL_67;
  }
  if (v8)
  {
    v11 = *((_QWORD *)v7 + 2);
    if (*(unsigned __int8 *)(v11 + 112) != 255)
    {
      *((_BYTE *)v7 + 219) = a3 != 6;
      v12 = a3 != 6 && a3 != 17;
      v13 = *(NSObject **)(v11 + 80);
      if (v13)
        nw_parameters_require_interface(v9, v13);
      nw_parameters_set_proxy_applied(v10, 1);
      if (*((_BYTE *)v7 + 268))
        nw_parameters_prohibit_interface_type(v10, nw_interface_type_wifi);
      if (*((_BYTE *)v7 + 270))
        nw_parameters_prohibit_interface_type(v10, nw_interface_type_wired);
      if (*((_BYTE *)v7 + 269))
        nw_parameters_prohibit_interface_type(v10, nw_interface_type_cellular);
      if (*((_BYTE *)v7 + 267))
        nw_parameters_set_prohibit_expensive(v10, 1);
      if (*((_BYTE *)v7 + 266))
        nw_parameters_set_prohibit_constrained(v10, 1);
      v14 = *((_DWORD *)v7 + 64);
      if (v14)
        nw_parameters_set_required_interface_type(v10, v14);
      nw_parameters_set_traffic_class(v10, *((_DWORD *)v7 + 63));
      nw_connection_reset_traffic_class(*(void **)(*((_QWORD *)v7 + 2) + 48), *((_DWORD *)v7 + 63));
      v15 = (void *)*((_QWORD *)v7 + 34);
      if (v15)
        nw_parameters_set_source_application_by_bundle_id_internal(v10, (const char *)objc_msgSend(v15, "UTF8String"));
      v16 = *((_DWORD *)v7 + 65);
      if (v16)
        nw_parameters_set_multipath_service(v10, v16);
      v17 = *((_WORD *)v7 + 132);
      if (v17)
      {
        v18 = v8;
        WORD2(v18[28].isa) = v17;

      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v19 = (id)gLogObj;
      if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
      {
        v20 = (char *)*((_QWORD *)v7 + 2);
        *(_DWORD *)buf = 136446978;
        v47 = "nw_masque_connection_pair_setup_outer_connection_inner";
        v48 = 2114;
        v49 = v20;
        v50 = 2112;
        v51 = v8;
        v52 = 2112;
        v53 = v10;
        _os_log_impl(&dword_182FBE000, v19, OS_LOG_TYPE_INFO, "%{public}s %{public}@ creating new outer connection to %@ with parameters %@", buf, 0x2Au);
      }

      v21 = nw_connection_create(v8, v10);
      v22 = (void *)*((_QWORD *)v7 + 6);
      *((_QWORD *)v7 + 6) = v21;

      nw_connection_set_queue(*((nw_connection_t *)v7 + 6), *(dispatch_queue_t *)(*((_QWORD *)v7 + 2) + 32));
      v23 = *((_QWORD *)v7 + 6);
      handler[0] = MEMORY[0x1E0C809B0];
      handler[1] = 3221225472;
      handler[2] = ___ZL54nw_masque_connection_pair_setup_outer_connection_innerP36NWConcrete_nw_masque_connection_pairPU25objcproto14OS_nw_endpoint8NSObjecthPU27objcproto16OS_nw_parametersS1__block_invoke;
      handler[3] = &unk_1E149F728;
      v24 = (NWConcrete_nw_masque_connection_pair *)v7;
      v40 = v24;
      v42 = a3;
      v41 = v8;
      v43 = v12;
      nw_connection_set_state_changed_handler(v23, handler);
      if (*((_BYTE *)v7 + 219))
        nw_masque_connection_pair_read_outer_datagrams(v24);
      else
        nw_masque_connection_pair_read_outer(v24);
      nw_connection_start(*((nw_connection_t *)v7 + 6));
      nw_masque_connection_pair_read_inner(v24);

    }
    goto LABEL_33;
  }
  __nwlog_obj();
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v47 = "nw_masque_connection_pair_setup_outer_connection_inner";
  v26 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v44 = 0;
  if (!__nwlog_fault(v26, &type, &v44))
    goto LABEL_67;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v27 = objc_claimAutoreleasedReturnValue();
    v30 = type;
    if (os_log_type_enabled(v27, type))
    {
      *(_DWORD *)buf = 136446210;
      v47 = "nw_masque_connection_pair_setup_outer_connection_inner";
      _os_log_impl(&dword_182FBE000, v27, v30, "%{public}s called with null endpoint", buf, 0xCu);
    }
    goto LABEL_66;
  }
  if (!v44)
  {
    __nwlog_obj();
    v27 = objc_claimAutoreleasedReturnValue();
    v38 = type;
    if (os_log_type_enabled(v27, type))
    {
      *(_DWORD *)buf = 136446210;
      v47 = "nw_masque_connection_pair_setup_outer_connection_inner";
      _os_log_impl(&dword_182FBE000, v27, v38, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_66;
  }
  v34 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v27 = objc_claimAutoreleasedReturnValue();
  v35 = type;
  v36 = os_log_type_enabled(v27, type);
  if (!v34)
  {
    if (v36)
    {
      *(_DWORD *)buf = 136446210;
      v47 = "nw_masque_connection_pair_setup_outer_connection_inner";
      _os_log_impl(&dword_182FBE000, v27, v35, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
    }
    goto LABEL_66;
  }
  if (v36)
  {
    *(_DWORD *)buf = 136446466;
    v47 = "nw_masque_connection_pair_setup_outer_connection_inner";
    v48 = 2082;
    v49 = v34;
    _os_log_impl(&dword_182FBE000, v27, v35, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v34);
  if (v26)
    goto LABEL_68;
LABEL_33:

}

void sub_18364D95C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void ___ZL54nw_masque_connection_pair_setup_outer_connection_innerP36NWConcrete_nw_masque_connection_pairPU25objcproto14OS_nw_endpoint8NSObjecthPU27objcproto16OS_nw_parametersS1__block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  NSObject *v6;
  const char *v7;
  uint64_t v8;
  void *(*v9)(uint64_t, uint64_t);
  uint64_t v10;
  void *v11;
  void *v12;
  os_unfair_lock_s *v13;
  NSObject *well_known;
  const char *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  const char *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  NSObject *v34;
  const char *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _DWORD *v41;
  int v42;
  _DWORD *v43;
  int v44;
  void *v45;
  id *v46;
  id *v47;
  _DWORD *v48;
  int v49;
  _DWORD *v50;
  int v51;
  _DWORD *v52;
  int v53;
  _DWORD *v54;
  int v55;
  NSObject *metadata_for_response;
  NSObject *v57;
  _QWORD *v58;
  NSObject *v59;
  void (**v60)(_QWORD);
  os_unfair_lock_s *v61;
  uint64_t v62;
  id *v63;
  dispatch_source_t v64;
  id v65;
  id v66;
  id v67;
  NSObject *v68;
  id v69;
  id v70;
  NSObject *v71;
  dispatch_time_t v72;
  NSObject *v73;
  id v74;
  id v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  id v81;
  void *v82;
  void *v83;
  id v84;
  void *v85;
  NSObject *v86;
  uint64_t v87;
  NSObject *v88;
  NSObject *v89;
  nw_protocol_metadata_t v90;
  NSObject *v91;
  const sockaddr *address;
  const sockaddr *v93;
  int sa_family;
  id v95;
  void *v96;
  const sockaddr *v97;
  sockaddr *v98;
  int v99;
  id v100;
  NSObject *v101;
  NSObject *metadata_for_capsule;
  NSObject *v103;
  NSObject *v104;
  void *v105;
  char *v106;
  NSObject *v107;
  os_log_type_t v108;
  char *backtrace_string;
  os_log_type_t v110;
  _BOOL4 v111;
  os_log_type_t v112;
  NSObject *v113;
  NSObject *v114;
  NSObject *v115;
  NSObject *protocol_metadata;
  _QWORD v117[4];
  id v118;
  _QWORD aBlock[4];
  os_unfair_lock_s *v120;
  _BYTE *v121;
  _QWORD completion[4];
  _QWORD *v123;
  char v124;
  _BYTE buf[24];
  void *(*v126)(uint64_t, uint64_t);
  _BYTE v127[20];
  __int16 v128;
  uint64_t v129;
  uint8_t v130[4];
  const char *v131;
  __int16 v132;
  id v133;
  __int16 v134;
  id v135;
  uint64_t v136;

  v136 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v6 = (id)gLogObj;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    if (a2 > 5)
      v7 = "unknown";
    else
      v7 = off_1E149DE10[a2];
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(void *(**)(uint64_t, uint64_t))(v8 + 48);
    v10 = *(_QWORD *)(v8 + 16);
    *(_DWORD *)buf = 136446978;
    *(_QWORD *)&buf[4] = "nw_masque_connection_pair_setup_outer_connection_inner_block_invoke";
    *(_WORD *)&buf[12] = 2114;
    *(_QWORD *)&buf[14] = v10;
    *(_WORD *)&buf[22] = 2112;
    v126 = v9;
    *(_WORD *)v127 = 2080;
    *(_QWORD *)&v127[2] = v7;
    _os_log_impl(&dword_182FBE000, v6, OS_LOG_TYPE_INFO, "%{public}s %{public}@ outer connection to %@ has transitioned to %s", buf, 0x2Au);
  }

  objc_msgSend(MEMORY[0x1E0CB3898], "processInfo");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "processName");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  if ((a2 & 0xFFFFFFFE) == 4)
  {
    v13 = *(os_unfair_lock_s **)(a1 + 32);
    if (BYTE1(v13[54]._os_unfair_lock_opaque))
    {
      if (BYTE2(v13[54]._os_unfair_lock_opaque))
      {
LABEL_59:
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = buf;
        *(_QWORD *)&buf[16] = 0x3032000000;
        v126 = __Block_byref_object_copy__246;
        *(_QWORD *)v127 = __Block_byref_object_dispose__247;
        *(_QWORD *)&v127[8] = 0;
        aBlock[0] = MEMORY[0x1E0C809B0];
        aBlock[1] = 3221225472;
        aBlock[2] = ___ZL54nw_masque_connection_pair_setup_outer_connection_innerP36NWConcrete_nw_masque_connection_pairPU25objcproto14OS_nw_endpoint8NSObjecthPU27objcproto16OS_nw_parametersS1__block_invoke_266;
        aBlock[3] = &unk_1E14ACE40;
        v121 = buf;
        v120 = v13;
        v60 = (void (**)(_QWORD))_Block_copy(aBlock);
        v61 = v13 + 2;
        os_unfair_lock_lock(v61);
        v60[2](v60);
        os_unfair_lock_unlock(v61);

        v62 = *(_QWORD *)(*(_QWORD *)&buf[8] + 40);
        if (v62)
          (*(void (**)(uint64_t, uint64_t, id))(v62 + 16))(v62, a2, v5);

        _Block_object_dispose(buf, 8);
        goto LABEL_62;
      }
      BYTE2(v13[54]._os_unfair_lock_opaque) = 1;
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      well_known = (id)gLogObj;
      if (os_log_type_enabled(well_known, OS_LOG_TYPE_INFO))
      {
        v15 = "IP";
        v16 = *(unsigned __int8 *)(a1 + 48);
        v17 = *(_QWORD *)(a1 + 32);
        v18 = *(_QWORD *)(a1 + 40);
        if (v16 == 6)
          v15 = "TCP";
        v19 = *(_QWORD *)(v17 + 16);
        if (v16 == 17)
          v15 = "UDP";
        v20 = *(_QWORD *)(v17 + 224);
        *(_DWORD *)buf = 136447234;
        *(_QWORD *)&buf[4] = "nw_masque_connection_pair_setup_outer_connection_inner_block_invoke_2";
        *(_WORD *)&buf[12] = 2114;
        *(_QWORD *)&buf[14] = v19;
        *(_WORD *)&buf[22] = 2080;
        v126 = (void *(*)(uint64_t, uint64_t))v15;
        *(_WORD *)v127 = 2112;
        *(_QWORD *)&v127[2] = v18;
        *(_WORD *)&v127[10] = 2112;
        *(_QWORD *)&v127[12] = v20;
        _os_log_impl(&dword_182FBE000, well_known, OS_LOG_TYPE_INFO, "%{public}s %{public}@ Closed %s connection to %@ (for %@)\n", buf, 0x34u);
      }
LABEL_58:

      v13 = *(os_unfair_lock_s **)(a1 + 32);
      goto LABEL_59;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v34 = (id)gLogObj;
    if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
    {
      v35 = "IP";
      v36 = *(unsigned __int8 *)(a1 + 48);
      v37 = *(_QWORD *)(a1 + 32);
      v38 = *(_QWORD *)(a1 + 40);
      if (v36 == 6)
        v35 = "TCP";
      v39 = *(_QWORD *)(v37 + 16);
      v40 = *(_QWORD *)(v37 + 224);
      if (v36 == 17)
        v35 = "UDP";
      *(_DWORD *)buf = 136447490;
      *(_QWORD *)&buf[4] = "nw_masque_connection_pair_setup_outer_connection_inner_block_invoke";
      *(_WORD *)&buf[12] = 2114;
      *(_QWORD *)&buf[14] = v39;
      *(_WORD *)&buf[22] = 2080;
      v126 = (void *(*)(uint64_t, uint64_t))v35;
      *(_WORD *)v127 = 2112;
      *(_QWORD *)&v127[2] = v38;
      *(_WORD *)&v127[10] = 2112;
      *(_QWORD *)&v127[12] = v5;
      v128 = 2112;
      v129 = v40;
      _os_log_impl(&dword_182FBE000, v34, OS_LOG_TYPE_INFO, "%{public}s %{public}@ Failed %s connection to %@ with error %@ (for %@)\n", buf, 0x3Eu);
    }

    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 217) = 1;
    if (v5)
    {
      v41 = v5;
      v42 = v41[2];

      if (v42 == 2)
      {
        v43 = v41;
        v44 = v43[3];

        if (v44 == -65554)
        {
          well_known = _nw_http_response_create_well_known(502);
          if (!*(_BYTE *)(*(_QWORD *)(a1 + 32) + 220))
          {
            v45 = (void *)objc_msgSend(v12, "mutableCopy");
            objc_msgSend(v45, "appendString:", CFSTR("; error=dns_error"));
            nw_http_fields_append(well_known, (uint64_t)"Proxy-Status", objc_msgSend(v45, "UTF8String"));
LABEL_56:

            goto LABEL_57;
          }
          goto LABEL_57;
        }
      }
      v48 = v41;
      v49 = v41[2];

      if (v49 == 1)
      {
        v50 = v48;
        v51 = v50[3];

        if (v51 == 61)
        {
          well_known = _nw_http_response_create_well_known(502);
          if (!*(_BYTE *)(*(_QWORD *)(a1 + 32) + 220))
          {
            v45 = (void *)objc_msgSend(v12, "mutableCopy");
            objc_msgSend(v45, "appendString:", CFSTR("; error=connection_refused"));
            nw_http_fields_append(well_known, (uint64_t)"Proxy-Status", objc_msgSend(v45, "UTF8String"));
            goto LABEL_56;
          }
LABEL_57:
          metadata_for_response = nw_http_create_metadata_for_response(well_known);
          v57 = nw_content_context_create("response");
          nw_content_context_set_metadata_for_protocol(v57, metadata_for_response);
          v58 = *(_QWORD **)(a1 + 32);
          v59 = *(NSObject **)(v58[2] + 48);
          completion[0] = MEMORY[0x1E0C809B0];
          completion[1] = 3221225472;
          completion[2] = ___ZL54nw_masque_connection_pair_setup_outer_connection_innerP36NWConcrete_nw_masque_connection_pairPU25objcproto14OS_nw_endpoint8NSObjecthPU27objcproto16OS_nw_parametersS1__block_invoke_264;
          completion[3] = &unk_1E14A9B48;
          v123 = v58;
          nw_connection_send(v59, 0, v57, 1, completion);

          goto LABEL_58;
        }
      }
      v52 = v48;
      v53 = v41[2];

      if (v53 == 1)
      {
        v54 = v52;
        v55 = v54[3];

        if (v55 == 60)
        {
          well_known = _nw_http_response_create_well_known(502);
          if (!*(_BYTE *)(*(_QWORD *)(a1 + 32) + 220))
          {
            v45 = (void *)objc_msgSend(v12, "mutableCopy");
            objc_msgSend(v45, "appendString:", CFSTR("; error=connection_timeout"));
            nw_http_fields_append(well_known, (uint64_t)"Proxy-Status", objc_msgSend(v45, "UTF8String"));
            goto LABEL_56;
          }
          goto LABEL_57;
        }
      }
    }
    well_known = _nw_http_response_create_well_known(502);
    if (!*(_BYTE *)(*(_QWORD *)(a1 + 32) + 220))
    {
      v45 = (void *)objc_msgSend(v12, "mutableCopy");
      objc_msgSend(v45, "appendString:", CFSTR("; error=destination_unavailable"));
      nw_http_fields_append(well_known, (uint64_t)"Proxy-Status", objc_msgSend(v45, "UTF8String"));
      goto LABEL_56;
    }
    goto LABEL_57;
  }
  if ((_DWORD)a2 != 1)
  {
    if ((_DWORD)a2 != 3 || *(_BYTE *)(*(_QWORD *)(a1 + 32) + 217))
      goto LABEL_62;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v21 = (id)gLogObj;
    if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
    {
      v22 = "IP";
      v23 = *(unsigned __int8 *)(a1 + 48);
      v24 = *(_QWORD *)(a1 + 32);
      v25 = *(_QWORD *)(a1 + 40);
      if (v23 == 6)
        v22 = "TCP";
      v26 = *(_QWORD *)(v24 + 16);
      if (v23 == 17)
        v22 = "UDP";
      v27 = *(_QWORD *)(v24 + 224);
      *(_DWORD *)buf = 136447234;
      *(_QWORD *)&buf[4] = "nw_masque_connection_pair_setup_outer_connection_inner_block_invoke_2";
      *(_WORD *)&buf[12] = 2114;
      *(_QWORD *)&buf[14] = v26;
      *(_WORD *)&buf[22] = 2080;
      v126 = (void *(*)(uint64_t, uint64_t))v22;
      *(_WORD *)v127 = 2112;
      *(_QWORD *)&v127[2] = v25;
      *(_WORD *)&v127[10] = 2112;
      *(_QWORD *)&v127[12] = v27;
      _os_log_impl(&dword_182FBE000, v21, OS_LOG_TYPE_INFO, "%{public}s %{public}@ Opened %s connection to %@ (for %@)\n", buf, 0x34u);
    }

    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 217) = 1;
    v28 = *(_QWORD *)(a1 + 32);
    if (*(_QWORD *)(v28 + 240))
    {
      if (*(_BYTE *)(v28 + 248))
      {
        v29 = dispatch_data_create("hello", 5uLL, 0, 0);
        v30 = (void *)_nw_http_response_create_well_known(200);
        nw_http_fields_append(v30, (uint64_t)"Capsule-Protocol", (uint64_t)"?1");
        if (*(_BYTE *)(a1 + 48) == 17)
        {
          v31 = *(_QWORD *)(a1 + 32);
          if (*(_BYTE *)(v31 + 178))
          {
            nw_http_fields_append(v30, (uint64_t)"Datagram-Flow-Id", v31 + 178);
            v31 = *(_QWORD *)(a1 + 32);
          }
          v33 = *(unsigned __int8 *)(v31 + 116);
          v32 = v31 + 116;
          if (v33)
            nw_http_fields_append(v30, (uint64_t)"Client-Connection-Id", v32);
          nw_http_fields_append(v30, (uint64_t)"Proxy-QUIC-Forwarding", (uint64_t)"?1");
        }
LABEL_84:
        protocol_metadata = nw_http_create_metadata_for_response(v30);
        v115 = v29;
        v86 = nw_content_context_create("response");
        nw_content_context_set_metadata_for_protocol(v86, protocol_metadata);
        nw_connection_send(*(nw_connection_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16) + 48), v29, v86, *(_BYTE *)(*(_QWORD *)(a1 + 32) + 219), &__block_literal_global_24144);
        objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 56), v86);
        v87 = *(_QWORD *)(a1 + 32);
        if (*(_QWORD *)(v87 + 240) && !*(_BYTE *)(v87 + 248))
        {
          v88 = *(NSObject **)(*(_QWORD *)(v87 + 16) + 48);
          v89 = nw_protocol_copy_http_connection_definition();
          v90 = nw_connection_copy_protocol_metadata(v88, v89);

          nw_http_connection_metadata_send_certificate(v90, *(void **)(*(_QWORD *)(a1 + 32) + 240));
        }
        if (!*(_BYTE *)(a1 + 49))
          goto LABEL_113;
        v113 = nw_connection_copy_connected_local_endpoint(*(void **)(*(_QWORD *)(a1 + 32) + 48));
        v91 = nw_connection_copy_connected_remote_endpoint(*(void **)(*(_QWORD *)(a1 + 32) + 48));
        v114 = v91;
        address = nw_endpoint_get_address(v113);
        v93 = address;
        if (address)
        {
          sa_family = address->sa_family;
          if (sa_family == 30)
          {
            v95 = objc_alloc_init(MEMORY[0x1E0C99DF0]);
            buf[0] = 0;
            objc_msgSend(v95, "appendBytes:length:", buf, 1);
            v130[0] = 6;
            objc_msgSend(v95, "appendBytes:length:", v130, 1);
            objc_msgSend(v95, "appendBytes:length:", &v93->sa_data[6], 16);
            v124 = 0x80;
            objc_msgSend(v95, "appendBytes:length:", &v124, 1);
            if (v95)
            {
LABEL_95:
              v96 = (void *)objc_msgSend(v95, "_createDispatchData");
LABEL_97:

              v91 = v114;
LABEL_98:
              v97 = nw_endpoint_get_address(v91);
              v98 = (sockaddr *)v97;
              if (v97)
              {
                v99 = v97->sa_family;
                if (v99 == 30)
                {
                  v100 = objc_alloc_init(MEMORY[0x1E0C99DF0]);
                  buf[0] = 6;
                  objc_msgSend(v100, "appendBytes:length:", buf, 1);
                  objc_msgSend(v100, "appendBytes:length:", &v98->sa_data[6], 16);
                  objc_msgSend(v100, "appendBytes:length:", &v98->sa_data[6], 16);
                  v130[0] = *(_BYTE *)(a1 + 48);
                  objc_msgSend(v100, "appendBytes:length:", v130, 1);
                  if (v100)
                  {
LABEL_104:
                    v98 = (sockaddr *)objc_msgSend(v100, "_createDispatchData");
LABEL_107:

                    goto LABEL_108;
                  }
LABEL_106:
                  v98 = 0;
                  goto LABEL_107;
                }
                if (v99 == 2)
                {
                  v100 = objc_alloc_init(MEMORY[0x1E0C99DF0]);
                  buf[0] = 4;
                  objc_msgSend(v100, "appendBytes:length:", buf, 1);
                  objc_msgSend(v100, "appendBytes:length:", &v98->sa_data[2], 4);
                  objc_msgSend(v100, "appendBytes:length:", &v98->sa_data[2], 4);
                  v130[0] = *(_BYTE *)(a1 + 48);
                  objc_msgSend(v100, "appendBytes:length:", v130, 1);
                  if (v100)
                    goto LABEL_104;
                  goto LABEL_106;
                }
                v98 = 0;
              }
LABEL_108:
              if (v96)
              {
                v101 = nw_content_context_create("assign address");
                metadata_for_capsule = nw_http_create_metadata_for_capsule(1, v96);
                nw_content_context_set_metadata_for_protocol(v101, metadata_for_capsule);
                nw_connection_send(*(nw_connection_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16) + 48), 0, v101, 1, &__block_literal_global_24144);

              }
              if (v98)
              {
                v103 = nw_content_context_create("advertise route");
                v104 = nw_http_create_metadata_for_capsule(3, v98);
                nw_content_context_set_metadata_for_protocol(v103, v104);
                nw_connection_send(*(nw_connection_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16) + 48), 0, v103, 1, &__block_literal_global_24144);

              }
LABEL_113:

LABEL_62:
              nw_masque_connection_pair_cancel_waiting_timer(*(NWConcrete_nw_masque_connection_pair **)(a1 + 32));
              goto LABEL_63;
            }
LABEL_96:
            v96 = 0;
            goto LABEL_97;
          }
          if (sa_family == 2)
          {
            v95 = objc_alloc_init(MEMORY[0x1E0C99DF0]);
            buf[0] = 0;
            objc_msgSend(v95, "appendBytes:length:", buf, 1);
            v130[0] = 4;
            objc_msgSend(v95, "appendBytes:length:", v130, 1);
            objc_msgSend(v95, "appendBytes:length:", &v93->sa_data[2], 4);
            v124 = 32;
            objc_msgSend(v95, "appendBytes:length:", &v124, 1);
            if (v95)
              goto LABEL_95;
            goto LABEL_96;
          }
        }
        v96 = 0;
        goto LABEL_98;
      }
      v85 = (void *)_nw_http_response_create_well_known(405);
      nw_http_fields_append(v85, (uint64_t)"Capsule-Protocol", (uint64_t)"?1");
      v81 = (id)objc_msgSend(v12, "mutableCopy");
      objc_msgSend(v81, "appendString:", CFSTR("; error=resource_uses_reverse_proxy"));
      nw_http_fields_append(v85, (uint64_t)"Proxy-Status", objc_msgSend(v81, "UTF8String"));
      v30 = v85;
    }
    else
    {
      v76 = (void *)_nw_http_response_create_well_known(200);
      v30 = v76;
      if (*(_BYTE *)(a1 + 48) != 6)
      {
        nw_http_fields_append(v76, (uint64_t)"Capsule-Protocol", (uint64_t)"?1");
        if (*(_BYTE *)(a1 + 48) == 17)
        {
          v77 = *(_QWORD *)(a1 + 32);
          if (*(_BYTE *)(v77 + 178))
          {
            nw_http_fields_append(v30, (uint64_t)"Datagram-Flow-Id", v77 + 178);
            v77 = *(_QWORD *)(a1 + 32);
          }
          v79 = *(unsigned __int8 *)(v77 + 116);
          v78 = v77 + 116;
          if (v79)
            nw_http_fields_append(v30, (uint64_t)"Client-Connection-Id", v78);
          nw_http_fields_append(v30, (uint64_t)"Proxy-QUIC-Forwarding", (uint64_t)"?1");
        }
      }
      v80 = *(_QWORD *)(a1 + 32);
      if (*(_BYTE *)(v80 + 220))
        goto LABEL_83;
      v81 = nw_connection_copy_connected_remote_endpoint(*(void **)(v80 + 48));
      if (v81)
      {
        v82 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB37A0]), "initWithString:", v12);
        objc_msgSend(v82, "appendFormat:", CFSTR("; next-hop=%@"), v81);
        v83 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB37A0]), "initWithFormat:", &stru_1E14AEB08);
        v117[0] = MEMORY[0x1E0C809B0];
        v117[1] = 3221225472;
        v117[2] = ___ZL54nw_masque_connection_pair_setup_outer_connection_innerP36NWConcrete_nw_masque_connection_pairPU25objcproto14OS_nw_endpoint8NSObjecthPU27objcproto16OS_nw_parametersS1__block_invoke_276;
        v117[3] = &unk_1E14A9B18;
        v84 = v83;
        v118 = v84;
        nw_endpoint_enumerate_cnames(v81, v117);
        if (objc_msgSend(v84, "length"))
          objc_msgSend(v82, "appendFormat:", CFSTR("; next-hop-aliases=\"%@\""), v84);
        nw_http_fields_append(v30, (uint64_t)"Proxy-Status", objc_msgSend(v82, "UTF8String"));

      }
    }

LABEL_83:
    v29 = 0;
    goto LABEL_84;
  }
  v46 = (id *)*(id *)(a1 + 32);
  v47 = v46;
  if (!v46)
  {
    __nwlog_obj();
    v105 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_masque_connection_pair_start_waiting_timer";
    v106 = (char *)_os_log_send_and_compose_impl();

    v130[0] = 16;
    v124 = 0;
    if (__nwlog_fault(v106, v130, &v124))
    {
      if (v130[0] == 17)
      {
        __nwlog_obj();
        v107 = objc_claimAutoreleasedReturnValue();
        v108 = v130[0];
        if (os_log_type_enabled(v107, (os_log_type_t)v130[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_masque_connection_pair_start_waiting_timer";
          _os_log_impl(&dword_182FBE000, v107, v108, "%{public}s called with null pair", buf, 0xCu);
        }
      }
      else if (v124)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v107 = objc_claimAutoreleasedReturnValue();
        v110 = v130[0];
        v111 = os_log_type_enabled(v107, (os_log_type_t)v130[0]);
        if (backtrace_string)
        {
          if (v111)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_masque_connection_pair_start_waiting_timer";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = backtrace_string;
            _os_log_impl(&dword_182FBE000, v107, v110, "%{public}s called with null pair, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_130;
        }
        if (v111)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_masque_connection_pair_start_waiting_timer";
          _os_log_impl(&dword_182FBE000, v107, v110, "%{public}s called with null pair, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v107 = objc_claimAutoreleasedReturnValue();
        v112 = v130[0];
        if (os_log_type_enabled(v107, (os_log_type_t)v130[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_masque_connection_pair_start_waiting_timer";
          _os_log_impl(&dword_182FBE000, v107, v112, "%{public}s called with null pair, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_130:
    if (v106)
      free(v106);
    goto LABEL_45;
  }
  if (!*((_BYTE *)v46 + 218) && v46[6] && !v46[35])
  {
    v63 = v46 + 2;
    v64 = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, *((dispatch_queue_t *)v46[2] + 4));
    v65 = v47[35];
    v47[35] = v64;

    v66 = *v63;
    v67 = v47[6];
    v68 = v47[35];
    *(_QWORD *)buf = MEMORY[0x1E0C809B0];
    *(_QWORD *)&buf[8] = 3221225472;
    *(_QWORD *)&buf[16] = ___ZL45nw_masque_connection_pair_start_waiting_timerP36NWConcrete_nw_masque_connection_pair_block_invoke;
    v126 = (void *(*)(uint64_t, uint64_t))&unk_1E14ACE68;
    v69 = v66;
    *(_QWORD *)v127 = v69;
    v70 = v67;
    *(_QWORD *)&v127[8] = v70;
    dispatch_source_set_event_handler(v68, buf);
    v71 = v47[35];
    v72 = dispatch_time(0, 15000000000);
    dispatch_source_set_timer(v71, v72, 0xFFFFFFFFFFFFFFFFLL, 0xF4240uLL);
    dispatch_resume((dispatch_object_t)v47[35]);
    __nwlog_obj();
    v73 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v73, OS_LOG_TYPE_INFO))
    {
      v74 = v47[2];
      v75 = v47[6];
      *(_DWORD *)v130 = 136446722;
      v131 = "nw_masque_connection_pair_start_waiting_timer";
      v132 = 2114;
      v133 = v74;
      v134 = 2112;
      v135 = v75;
      _os_log_impl(&dword_182FBE000, v73, OS_LOG_TYPE_INFO, "%{public}s %{public}@ starting wait timer for %@", v130, 0x20u);
    }

  }
LABEL_45:

LABEL_63:
}

void sub_18364EB98(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void nw_masque_connection_pair_read_outer_datagrams(NWConcrete_nw_masque_connection_pair *a1)
{
  NWConcrete_nw_masque_connection_pair *v1;
  NWConcrete_nw_masque_connection_pair *v2;
  void *v3;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  void *v8;
  os_log_type_t v9;
  void *v10;
  os_log_type_t v11;
  char *backtrace_string;
  os_log_type_t v13;
  _BOOL4 v14;
  char *v15;
  os_log_type_t v16;
  _BOOL4 v17;
  os_log_type_t v18;
  _BOOL4 v19;
  os_log_type_t v20;
  os_log_type_t v21;
  os_log_type_t v22;
  _QWORD v23[4];
  NWConcrete_nw_masque_connection_pair *v24;
  char v25;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v28;
  __int16 v29;
  char *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v28 = "nw_masque_connection_pair_read_outer_datagrams";
    v5 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v25 = 0;
    if (!__nwlog_fault(v5, &type, &v25))
      goto LABEL_55;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_masque_connection_pair_read_outer_datagrams";
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null pair", buf, 0xCu);
      }
    }
    else if (v25)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      v14 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          v28 = "nw_masque_connection_pair_read_outer_datagrams";
          v29 = 2082;
          v30 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v13, "%{public}s called with null pair, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_55:
        if (!v5)
          goto LABEL_5;
LABEL_56:
        free(v5);
        goto LABEL_5;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_masque_connection_pair_read_outer_datagrams";
        _os_log_impl(&dword_182FBE000, v6, v13, "%{public}s called with null pair, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v20 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_masque_connection_pair_read_outer_datagrams";
        _os_log_impl(&dword_182FBE000, v6, v20, "%{public}s called with null pair, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_54:

    goto LABEL_55;
  }
  if (!*(_QWORD *)(*((_QWORD *)v1 + 2) + 48))
  {
    __nwlog_obj();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v28 = "nw_masque_connection_pair_read_outer_datagrams";
    v5 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v25 = 0;
    if (!__nwlog_fault(v5, &type, &v25))
      goto LABEL_55;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_masque_connection_pair_read_outer_datagrams";
        _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null pair->mcp_parent->mc_in_connection", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v25)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v21 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_masque_connection_pair_read_outer_datagrams";
        _os_log_impl(&dword_182FBE000, v6, v21, "%{public}s called with null pair->mcp_parent->mc_in_connection, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    v15 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v6 = objc_claimAutoreleasedReturnValue();
    v16 = type;
    v17 = os_log_type_enabled(v6, type);
    if (!v15)
    {
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_masque_connection_pair_read_outer_datagrams";
        _os_log_impl(&dword_182FBE000, v6, v16, "%{public}s called with null pair->mcp_parent->mc_in_connection, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v17)
    {
      *(_DWORD *)buf = 136446466;
      v28 = "nw_masque_connection_pair_read_outer_datagrams";
      v29 = 2082;
      v30 = v15;
      _os_log_impl(&dword_182FBE000, v6, v16, "%{public}s called with null pair->mcp_parent->mc_in_connection, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_35;
  }
  v3 = (void *)*((_QWORD *)v1 + 6);
  if (!v3)
  {
    __nwlog_obj();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v28 = "nw_masque_connection_pair_read_outer_datagrams";
    v5 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v25 = 0;
    if (!__nwlog_fault(v5, &type, &v25))
      goto LABEL_55;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_masque_connection_pair_read_outer_datagrams";
        _os_log_impl(&dword_182FBE000, v6, v11, "%{public}s called with null pair->mcp_outer_connection", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v25)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v22 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_masque_connection_pair_read_outer_datagrams";
        _os_log_impl(&dword_182FBE000, v6, v22, "%{public}s called with null pair->mcp_outer_connection, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    v15 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v6 = objc_claimAutoreleasedReturnValue();
    v18 = type;
    v19 = os_log_type_enabled(v6, type);
    if (!v15)
    {
      if (v19)
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_masque_connection_pair_read_outer_datagrams";
        _os_log_impl(&dword_182FBE000, v6, v18, "%{public}s called with null pair->mcp_outer_connection, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v19)
    {
      *(_DWORD *)buf = 136446466;
      v28 = "nw_masque_connection_pair_read_outer_datagrams";
      v29 = 2082;
      v30 = v15;
      _os_log_impl(&dword_182FBE000, v6, v18, "%{public}s called with null pair->mcp_outer_connection, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_35:

    free(v15);
    if (!v5)
      goto LABEL_5;
    goto LABEL_56;
  }
  v23[0] = MEMORY[0x1E0C809B0];
  v23[1] = 3221225472;
  v23[2] = ___ZL46nw_masque_connection_pair_read_outer_datagramsP36NWConcrete_nw_masque_connection_pair_block_invoke;
  v23[3] = &unk_1E149F7A0;
  v24 = v1;
  nw_connection_read_multiple(v3, 1u, 0xFFFFFFFF, v23);

LABEL_5:
}

void sub_18364F524(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  void *v17;

  _Unwind_Resume(a1);
}

void nw_masque_connection_pair_read_outer(NWConcrete_nw_masque_connection_pair *a1)
{
  NWConcrete_nw_masque_connection_pair *v1;
  NWConcrete_nw_masque_connection_pair *v2;
  void *v3;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  void *v8;
  os_log_type_t v9;
  void *v10;
  os_log_type_t v11;
  char *backtrace_string;
  os_log_type_t v13;
  _BOOL4 v14;
  char *v15;
  os_log_type_t v16;
  _BOOL4 v17;
  os_log_type_t v18;
  _BOOL4 v19;
  os_log_type_t v20;
  os_log_type_t v21;
  os_log_type_t v22;
  _QWORD v23[4];
  NWConcrete_nw_masque_connection_pair *v24;
  char v25;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v28;
  __int16 v29;
  char *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v28 = "nw_masque_connection_pair_read_outer";
    v5 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v25 = 0;
    if (!__nwlog_fault(v5, &type, &v25))
      goto LABEL_55;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_masque_connection_pair_read_outer";
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null pair", buf, 0xCu);
      }
    }
    else if (v25)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      v14 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          v28 = "nw_masque_connection_pair_read_outer";
          v29 = 2082;
          v30 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v13, "%{public}s called with null pair, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_55:
        if (!v5)
          goto LABEL_5;
LABEL_56:
        free(v5);
        goto LABEL_5;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_masque_connection_pair_read_outer";
        _os_log_impl(&dword_182FBE000, v6, v13, "%{public}s called with null pair, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v20 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_masque_connection_pair_read_outer";
        _os_log_impl(&dword_182FBE000, v6, v20, "%{public}s called with null pair, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_54:

    goto LABEL_55;
  }
  if (!*(_QWORD *)(*((_QWORD *)v1 + 2) + 48))
  {
    __nwlog_obj();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v28 = "nw_masque_connection_pair_read_outer";
    v5 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v25 = 0;
    if (!__nwlog_fault(v5, &type, &v25))
      goto LABEL_55;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_masque_connection_pair_read_outer";
        _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null pair->mcp_parent->mc_in_connection", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v25)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v21 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_masque_connection_pair_read_outer";
        _os_log_impl(&dword_182FBE000, v6, v21, "%{public}s called with null pair->mcp_parent->mc_in_connection, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    v15 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v6 = objc_claimAutoreleasedReturnValue();
    v16 = type;
    v17 = os_log_type_enabled(v6, type);
    if (!v15)
    {
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_masque_connection_pair_read_outer";
        _os_log_impl(&dword_182FBE000, v6, v16, "%{public}s called with null pair->mcp_parent->mc_in_connection, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v17)
    {
      *(_DWORD *)buf = 136446466;
      v28 = "nw_masque_connection_pair_read_outer";
      v29 = 2082;
      v30 = v15;
      _os_log_impl(&dword_182FBE000, v6, v16, "%{public}s called with null pair->mcp_parent->mc_in_connection, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_35;
  }
  v3 = (void *)*((_QWORD *)v1 + 6);
  if (!v3)
  {
    __nwlog_obj();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v28 = "nw_masque_connection_pair_read_outer";
    v5 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v25 = 0;
    if (!__nwlog_fault(v5, &type, &v25))
      goto LABEL_55;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_masque_connection_pair_read_outer";
        _os_log_impl(&dword_182FBE000, v6, v11, "%{public}s called with null pair->mcp_outer_connection", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v25)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v22 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_masque_connection_pair_read_outer";
        _os_log_impl(&dword_182FBE000, v6, v22, "%{public}s called with null pair->mcp_outer_connection, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    v15 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v6 = objc_claimAutoreleasedReturnValue();
    v18 = type;
    v19 = os_log_type_enabled(v6, type);
    if (!v15)
    {
      if (v19)
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_masque_connection_pair_read_outer";
        _os_log_impl(&dword_182FBE000, v6, v18, "%{public}s called with null pair->mcp_outer_connection, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v19)
    {
      *(_DWORD *)buf = 136446466;
      v28 = "nw_masque_connection_pair_read_outer";
      v29 = 2082;
      v30 = v15;
      _os_log_impl(&dword_182FBE000, v6, v18, "%{public}s called with null pair->mcp_outer_connection, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_35:

    free(v15);
    if (!v5)
      goto LABEL_5;
    goto LABEL_56;
  }
  v23[0] = MEMORY[0x1E0C809B0];
  v23[1] = 3221225472;
  v23[2] = ___ZL36nw_masque_connection_pair_read_outerP36NWConcrete_nw_masque_connection_pair_block_invoke;
  v23[3] = &unk_1E14A3048;
  v24 = v1;
  nw_connection_receive_internal(v3, 0, 1u, 0xFFFFFFFF, v23);

LABEL_5:
}

void sub_18364FC48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  void *v17;

  _Unwind_Resume(a1);
}

void nw_masque_connection_pair_read_inner(NWConcrete_nw_masque_connection_pair *a1)
{
  NWConcrete_nw_masque_connection_pair *v1;
  NWConcrete_nw_masque_connection_pair *v2;
  void *v3;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  void *v8;
  os_log_type_t v9;
  void *v10;
  os_log_type_t v11;
  char *backtrace_string;
  os_log_type_t v13;
  _BOOL4 v14;
  char *v15;
  os_log_type_t v16;
  _BOOL4 v17;
  os_log_type_t v18;
  _BOOL4 v19;
  os_log_type_t v20;
  os_log_type_t v21;
  os_log_type_t v22;
  _QWORD v23[4];
  NWConcrete_nw_masque_connection_pair *v24;
  char v25;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v28;
  __int16 v29;
  char *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v28 = "nw_masque_connection_pair_read_inner";
    v5 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v25 = 0;
    if (!__nwlog_fault(v5, &type, &v25))
      goto LABEL_55;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_masque_connection_pair_read_inner";
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null pair", buf, 0xCu);
      }
    }
    else if (v25)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      v14 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          v28 = "nw_masque_connection_pair_read_inner";
          v29 = 2082;
          v30 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v13, "%{public}s called with null pair, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_55:
        if (!v5)
          goto LABEL_5;
LABEL_56:
        free(v5);
        goto LABEL_5;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_masque_connection_pair_read_inner";
        _os_log_impl(&dword_182FBE000, v6, v13, "%{public}s called with null pair, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v20 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_masque_connection_pair_read_inner";
        _os_log_impl(&dword_182FBE000, v6, v20, "%{public}s called with null pair, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_54:

    goto LABEL_55;
  }
  v3 = *(void **)(*((_QWORD *)v1 + 2) + 48);
  if (!v3)
  {
    __nwlog_obj();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v28 = "nw_masque_connection_pair_read_inner";
    v5 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v25 = 0;
    if (!__nwlog_fault(v5, &type, &v25))
      goto LABEL_55;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_masque_connection_pair_read_inner";
        _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null pair->mcp_parent->mc_in_connection", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v25)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v21 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_masque_connection_pair_read_inner";
        _os_log_impl(&dword_182FBE000, v6, v21, "%{public}s called with null pair->mcp_parent->mc_in_connection, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    v15 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v6 = objc_claimAutoreleasedReturnValue();
    v16 = type;
    v17 = os_log_type_enabled(v6, type);
    if (!v15)
    {
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_masque_connection_pair_read_inner";
        _os_log_impl(&dword_182FBE000, v6, v16, "%{public}s called with null pair->mcp_parent->mc_in_connection, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v17)
    {
      *(_DWORD *)buf = 136446466;
      v28 = "nw_masque_connection_pair_read_inner";
      v29 = 2082;
      v30 = v15;
      _os_log_impl(&dword_182FBE000, v6, v16, "%{public}s called with null pair->mcp_parent->mc_in_connection, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_35;
  }
  if (!*((_QWORD *)v1 + 6))
  {
    __nwlog_obj();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v28 = "nw_masque_connection_pair_read_inner";
    v5 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v25 = 0;
    if (!__nwlog_fault(v5, &type, &v25))
      goto LABEL_55;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_masque_connection_pair_read_inner";
        _os_log_impl(&dword_182FBE000, v6, v11, "%{public}s called with null pair->mcp_outer_connection", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v25)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v22 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_masque_connection_pair_read_inner";
        _os_log_impl(&dword_182FBE000, v6, v22, "%{public}s called with null pair->mcp_outer_connection, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    v15 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v6 = objc_claimAutoreleasedReturnValue();
    v18 = type;
    v19 = os_log_type_enabled(v6, type);
    if (!v15)
    {
      if (v19)
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_masque_connection_pair_read_inner";
        _os_log_impl(&dword_182FBE000, v6, v18, "%{public}s called with null pair->mcp_outer_connection, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v19)
    {
      *(_DWORD *)buf = 136446466;
      v28 = "nw_masque_connection_pair_read_inner";
      v29 = 2082;
      v30 = v15;
      _os_log_impl(&dword_182FBE000, v6, v18, "%{public}s called with null pair->mcp_outer_connection, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_35:

    free(v15);
    if (!v5)
      goto LABEL_5;
    goto LABEL_56;
  }
  v23[0] = MEMORY[0x1E0C809B0];
  v23[1] = 3221225472;
  v23[2] = ___ZL36nw_masque_connection_pair_read_innerP36NWConcrete_nw_masque_connection_pair_block_invoke;
  v23[3] = &unk_1E14A3048;
  v24 = v1;
  nw_connection_receive_internal(v3, 0, 1u, 0xFFFFFFFF, v23);

LABEL_5:
}

void sub_18365036C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  void *v17;

  _Unwind_Resume(a1);
}

void ___ZL36nw_masque_connection_pair_read_innerP36NWConcrete_nw_masque_connection_pair_block_invoke(uint64_t a1, void *a2, void *a3, _BOOL4 a4, void *a5)
{
  NSObject *v9;
  NSObject *v10;
  id v11;
  NSObject *v12;
  size_t size;
  NSObject *v14;
  nw_protocol_metadata_t v15;
  unint64_t capsule_type;
  NSObject *v17;
  uint64_t v18;
  id v19;
  void *v20;
  size_t v21;
  uint64_t v22;
  void *v23;
  _DWORD *v24;
  int v25;
  _BOOL4 v26;
  NSObject *v27;
  NSObject *v28;
  char v29;
  uint64_t v30;
  void *v31;
  void *v32;
  NWConcrete_nw_protocol_options *options;
  NWConcrete_nw_protocol_options *v34;
  uint64_t v35;
  void *v36;
  size_t v37;
  size_t v38;
  unint64_t v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  NSObject *v46;
  id v47;
  NSObject *v48;
  NSObject *metadata_for_capsule;
  _QWORD *v50;
  NSObject *v51;
  NSObject *v52;
  NSObject *v53;
  uint64_t v54;
  size_t v55;
  NSObject *v56;
  uint64_t v57;
  NSObject *v58;
  uint64_t v59;
  const char *v60;
  const char *v61;
  const char *v62;
  NSObject *v63;
  uint64_t v64;
  NSObject *v65;
  uint64_t v66;
  NSObject *v67;
  uint64_t v68;
  uint64_t v69;
  NWConcrete_nw_protocol_options *v70;
  id v71;
  _QWORD completion[4];
  NSObject *v73;
  _QWORD applier[6];
  size_t __n;
  size_t *p_n;
  uint64_t v77;
  uint64_t v78;
  char v79;
  _QWORD v80[6];
  int v81;
  _BYTE buf[24];
  unint64_t v83;
  __int16 v84;
  void *v85;
  __int16 v86;
  const char *v87;
  _BYTE __src[24];
  uint64_t v89;
  uint64_t v90;

  v90 = *MEMORY[0x1E0C80C00];
  v9 = a2;
  v10 = a3;
  v11 = a5;
  v12 = v9;
  v71 = v11;
  if (v9)
  {
    size = dispatch_data_get_size(v9);
    if (!v10 || size)
      goto LABEL_20;
  }
  else if (!v10)
  {
    goto LABEL_20;
  }
  if (nw_protocol_copy_http_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_11_72660);
  v14 = (id)nw_protocol_copy_http_definition_http_definition;
  v15 = nw_content_context_copy_protocol_metadata(v10, v14);

  if (v15 && nw_http_metadata_is_capsule(v15))
  {
    capsule_type = nw_http_metadata_get_capsule_type(v15);
    v17 = nw_http_metadata_copy_capsule_data(v15);
    if (gLogDatapath)
    {
      __nwlog_obj();
      v56 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v56, OS_LOG_TYPE_DEBUG))
      {
        v57 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
        *(_DWORD *)buf = 136446978;
        *(_QWORD *)&buf[4] = "nw_masque_connection_pair_read_inner_block_invoke";
        *(_WORD *)&buf[12] = 2114;
        *(_QWORD *)&buf[14] = v57;
        *(_WORD *)&buf[22] = 2048;
        v83 = capsule_type;
        v84 = 2112;
        v85 = v17;
        _os_log_impl(&dword_182FBE000, v56, OS_LOG_TYPE_DEBUG, "%{public}s %{public}@ Received capsule type %llx with data %@", buf, 0x2Au);
      }

    }
    if (capsule_type >> 1 == 8385024)
    {
      if (capsule_type == 16770049)
        v18 = 16770051;
      else
        v18 = 16770050;
      LOBYTE(__n) = 0;
      nw_dispatch_data_copyout_from_offset(v17, (uint64_t)&__n, 1, 0);
      memset(__src, 0, 20);
      nw_dispatch_data_copyout_from_offset(v17, (uint64_t)__src, __n, 1);
      v19 = objc_alloc(MEMORY[0x1E0C99D50]);
      v20 = (void *)objc_msgSend(v19, "initWithBytes:length:", __src, __n);
      v69 = v18;
      if (gLogDatapath)
      {
        __nwlog_obj();
        v58 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v58, OS_LOG_TYPE_DEBUG))
        {
          v59 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
          v60 = "target";
          if (capsule_type == 16770048)
            v60 = "client";
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_masque_connection_pair_read_inner_block_invoke";
          *(_WORD *)&buf[12] = 2114;
          *(_QWORD *)&buf[14] = v59;
          *(_WORD *)&buf[22] = 2082;
          v83 = (unint64_t)v60;
          v84 = 2112;
          v85 = v20;
          _os_log_impl(&dword_182FBE000, v58, OS_LOG_TYPE_DEBUG, "%{public}s %{public}@ Received %{public}s CID %@, acking", buf, 0x2Au);
        }

      }
      v21 = __n;
      v22 = *(_QWORD *)(a1 + 32);
      if (capsule_type == 16770048)
      {
        *(_WORD *)(v22 + 72) = __n;
        memcpy((void *)(*(_QWORD *)(a1 + 32) + 74), __src, v21);
        BYTE2(v81) = 0;
        nw_dispatch_data_copyout_from_offset(v17, (uint64_t)&v81 + 2, 1, v21 + 1);
        memset(buf, 0, 20);
        nw_dispatch_data_copyout_from_offset(v17, (uint64_t)buf, BYTE2(v81), __n + 2);
        *(_WORD *)(*(_QWORD *)(a1 + 32) + 94) = BYTE2(v81);
        memcpy((void *)(*(_QWORD *)(a1 + 32) + 96), buf, *(unsigned __int16 *)(*(_QWORD *)(a1 + 32) + 94));
        if (v20)
          v23 = (void *)objc_msgSend(v20, "_createDispatchData");
        else
          v23 = 0;
      }
      else
      {
        *(_WORD *)(v22 + 136) = __n;
        memcpy((void *)(*(_QWORD *)(a1 + 32) + 138), __src, v21);
        if (gLogDatapath)
        {
          __nwlog_obj();
          v63 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v63, OS_LOG_TYPE_DEBUG))
          {
            v64 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_masque_connection_pair_read_inner_block_invoke";
            *(_WORD *)&buf[12] = 2114;
            *(_QWORD *)&buf[14] = v64;
            _os_log_impl(&dword_182FBE000, v63, OS_LOG_TYPE_DEBUG, "%{public}s %{public}@ Setting up forwarded mode connections", buf, 0x16u);
          }

        }
        if (nw_protocol_demux_copy_definition::onceToken != -1)
          dispatch_once(&nw_protocol_demux_copy_definition::onceToken, &__block_literal_global_5_25927);
        if (nw_protocol_demux_copy_definition::definition)
        {
          v32 = os_retain((void *)nw_protocol_demux_copy_definition::definition);
          options = nw_protocol_create_options(v32);
          if (v32)
            os_release(v32);
        }
        else
        {
          options = nw_protocol_create_options(0);
        }
        nw_demux_options_add_pattern(options, 1, *(unsigned __int16 *)(*(_QWORD *)(a1 + 32) + 136), *(_QWORD *)(a1 + 32) + 138, 0);
        nw_masque_connection_pair_setup_inner_direct_connections(*(void **)(a1 + 32), options);
        v47 = objc_alloc_init(MEMORY[0x1E0C99DF0]);
        objc_msgSend(v47, "appendBytes:length:", &__n, 1);
        objc_msgSend(v47, "appendBytes:length:", __src, __n);
        objc_msgSend(v47, "appendBytes:length:", &__n, 1);
        objc_msgSend(v47, "appendBytes:length:", __src, __n);
        buf[0] = 0;
        objc_msgSend(v47, "appendBytes:length:", buf, 1);
        if (v47)
          v23 = (void *)objc_msgSend(v47, "_createDispatchData");
        else
          v23 = 0;

      }
      if (v23)
      {
        v48 = nw_content_context_create("ack cid");
        metadata_for_capsule = nw_http_create_metadata_for_capsule(v69, v23);
        nw_content_context_set_metadata_for_protocol(v48, metadata_for_capsule);
        nw_connection_send(*(nw_connection_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16) + 48), 0, v48, 1, &__block_literal_global_24144);

      }
    }
    else if (capsule_type == 16770304)
    {
      if (nw_protocol_demux_copy_definition::onceToken != -1)
        dispatch_once(&nw_protocol_demux_copy_definition::onceToken, &__block_literal_global_5_25927);
      if (nw_protocol_demux_copy_definition::definition)
      {
        v31 = os_retain((void *)nw_protocol_demux_copy_definition::definition);
        v70 = nw_protocol_create_options(v31);
        if (v31)
          os_release(v31);
      }
      else
      {
        v70 = nw_protocol_create_options(0);
      }
      if (!*(_QWORD *)(*(_QWORD *)(a1 + 32) + 192))
      {
        v34 = nw_demux_create_options();
        v35 = *(_QWORD *)(a1 + 32);
        v36 = *(void **)(v35 + 192);
        *(_QWORD *)(v35 + 192) = v34;

      }
      v37 = dispatch_data_get_size(v17);
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0x2020000000;
      v83 = 0;
      if (v37)
      {
        v38 = v37;
        v39 = 0;
        v40 = MEMORY[0x1E0C809B0];
        do
        {
          v81 = 0;
          nw_dispatch_data_copyout_from_offset(v17, (uint64_t)&v81 + 2, 2, v39);
          v43 = *(_QWORD *)(*(_QWORD *)&buf[8] + 24) + 2;
          *(_QWORD *)(*(_QWORD *)&buf[8] + 24) = v43;
          nw_dispatch_data_copyout_from_offset(v17, (uint64_t)&v81, 2, v43);
          *(_QWORD *)(*(_QWORD *)&buf[8] + 24) += 2;
          *(_QWORD *)__src = 0;
          *(_QWORD *)&__src[8] = __src;
          *(_QWORD *)&__src[16] = 0x2020000000;
          v89 = 0;
          v80[0] = v40;
          v80[1] = 3221225472;
          v80[2] = ___ZL36nw_masque_connection_pair_read_innerP36NWConcrete_nw_masque_connection_pair_block_invoke_301;
          v80[3] = &unk_1E149F7F0;
          v80[4] = buf;
          v80[5] = __src;
          dispatch_data_apply(v17, v80);
          v44 = *(_QWORD *)(*(_QWORD *)&buf[8] + 24) + HIWORD(v81);
          *(_QWORD *)(*(_QWORD *)&buf[8] + 24) = v44;
          v79 = 0;
          nw_dispatch_data_copyout_from_offset(v17, (uint64_t)&v79, 1, v44);
          ++*(_QWORD *)(*(_QWORD *)&buf[8] + 24);
          __n = 0;
          p_n = &__n;
          v77 = 0x2020000000;
          v78 = 0;
          if (v79)
          {
            applier[0] = v40;
            applier[1] = 3221225472;
            applier[2] = ___ZL36nw_masque_connection_pair_read_innerP36NWConcrete_nw_masque_connection_pair_block_invoke_2;
            applier[3] = &unk_1E149F7F0;
            applier[4] = buf;
            applier[5] = &__n;
            dispatch_data_apply(v17, applier);
            v41 = HIWORD(v81);
            *(_QWORD *)(*(_QWORD *)&buf[8] + 24) += HIWORD(v81);
            v42 = p_n[3];
          }
          else
          {
            v42 = 0;
            v41 = HIWORD(v81);
          }
          nw_demux_options_add_pattern(*(void **)(*(_QWORD *)(a1 + 32) + 192), v81, v41, *(_QWORD *)(*(_QWORD *)&__src[8] + 24), v42);
          nw_demux_options_add_pattern(v70, v81, HIWORD(v81), *(_QWORD *)(*(_QWORD *)&__src[8] + 24), p_n[3]);
          _Block_object_dispose(&__n, 8);
          _Block_object_dispose(__src, 8);
          v39 = *(_QWORD *)(*(_QWORD *)&buf[8] + 24);
        }
        while (v39 < v38);
      }
      if (gLogDatapath)
      {
        __nwlog_obj();
        v65 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v65, OS_LOG_TYPE_DEBUG))
        {
          v66 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
          *(_DWORD *)__src = 136446466;
          *(_QWORD *)&__src[4] = "nw_masque_connection_pair_read_inner_block_invoke_3";
          *(_WORD *)&__src[12] = 2114;
          *(_QWORD *)&__src[14] = v66;
          _os_log_impl(&dword_182FBE000, v65, OS_LOG_TYPE_DEBUG, "%{public}s %{public}@ Setting up forwarded mode connections", __src, 0x16u);
        }

      }
      nw_masque_connection_pair_setup_inner_direct_connections(*(void **)(a1 + 32), v70);
      if (gLogDatapath)
      {
        __nwlog_obj();
        v67 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v67, OS_LOG_TYPE_DEBUG))
        {
          v68 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
          *(_DWORD *)__src = 136446466;
          *(_QWORD *)&__src[4] = "nw_masque_connection_pair_read_inner_block_invoke";
          *(_WORD *)&__src[12] = 2114;
          *(_QWORD *)&__src[14] = v68;
          _os_log_impl(&dword_182FBE000, v67, OS_LOG_TYPE_DEBUG, "%{public}s %{public}@ Received demux patterns, acking", __src, 0x16u);
        }

      }
      v12 = v9;
      v45 = nw_content_context_create("ack pattern");
      v46 = nw_http_create_metadata_for_capsule(16770305, v17);
      nw_content_context_set_metadata_for_protocol(v45, v46);
      nw_connection_send(*(nw_connection_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16) + 48), 0, v45, 1, &__block_literal_global_24144);

      _Block_object_dispose(buf, 8);
    }
    nw_masque_connection_pair_read_inner(*(NWConcrete_nw_masque_connection_pair **)(a1 + 32));

    goto LABEL_76;
  }

LABEL_20:
  if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 48))
  {
    if (!v71 || (v24 = v71, v25 = v24[3], v24, v25 == 40))
    {
      v26 = 0;
      v27 = &__block_literal_global_41718;
      if (!v10 || !a4)
        goto LABEL_70;
      v28 = v10;
      if (v28 != &__block_literal_global_41718 && v28 != &__block_literal_global_5_41741)
      {
        if (v28 == &__block_literal_global_3_41726 || v28 == &__block_literal_global_4)
        {

        }
        else
        {
          v29 = BYTE6(v28[14].isa);

          if ((v29 & 1) == 0)
          {
LABEL_30:
            v26 = 0;
LABEL_70:
            if (gLogDatapath)
            {
              __nwlog_obj();
              v52 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v52, OS_LOG_TYPE_DEBUG))
              {
                v53 = v10;
                v54 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
                if (v12)
                  v55 = dispatch_data_get_size(v12);
                else
                  v55 = 0;
                v61 = "";
                *(_DWORD *)buf = 136447234;
                v62 = ", complete";
                *(_QWORD *)&buf[4] = "nw_masque_connection_pair_read_inner_block_invoke";
                if (!a4)
                  v62 = "";
                *(_WORD *)&buf[12] = 2114;
                *(_QWORD *)&buf[14] = v54;
                *(_WORD *)&buf[22] = 2048;
                v83 = v55;
                v84 = 2080;
                if (v26)
                  v61 = ", final";
                v85 = (void *)v62;
                v86 = 2080;
                v87 = v61;
                _os_log_impl(&dword_182FBE000, v52, OS_LOG_TYPE_DEBUG, "%{public}s %{public}@ Proxying %zu bytes to target%s%s", buf, 0x34u);
                v10 = v53;
              }

            }
            dispatch_group_enter(*(dispatch_group_t *)(*(_QWORD *)(a1 + 32) + 232));
            v50 = *(_QWORD **)(a1 + 32);
            v51 = v50[6];
            if (v26)
              v27 = &__block_literal_global_3_41726;
            completion[0] = MEMORY[0x1E0C809B0];
            completion[1] = 3221225472;
            completion[2] = ___ZL36nw_masque_connection_pair_read_innerP36NWConcrete_nw_masque_connection_pair_block_invoke_304;
            completion[3] = &unk_1E14A9B48;
            v73 = v50;
            nw_connection_send(v51, v12, v27, a4, completion);
            if (!v26)
              nw_masque_connection_pair_read_inner(*(NWConcrete_nw_masque_connection_pair **)(a1 + 32));
            v15 = v73;
            goto LABEL_76;
          }
        }
        v26 = *(_BYTE *)(*(_QWORD *)(a1 + 32) + 219) == 0;
        goto LABEL_70;
      }

      goto LABEL_30;
    }
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v15 = (nw_protocol_metadata_t)(id)gLogObj;
  if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
  {
    v30 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
    *(_DWORD *)buf = 136446722;
    *(_QWORD *)&buf[4] = "nw_masque_connection_pair_read_inner_block_invoke";
    *(_WORD *)&buf[12] = 2114;
    *(_QWORD *)&buf[14] = v30;
    *(_WORD *)&buf[22] = 2112;
    v83 = (unint64_t)v71;
    _os_log_impl(&dword_182FBE000, v15, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ Stopping reading, error %@", buf, 0x20u);
  }
LABEL_76:

}

void sub_183650FB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

BOOL ___ZL36nw_masque_connection_pair_read_innerP36NWConcrete_nw_masque_connection_pair_block_invoke_301(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  if (a5 + a3 >= v5)
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = a4 + v5 - a3;
  return a5 + a3 < v5;
}

BOOL ___ZL36nw_masque_connection_pair_read_innerP36NWConcrete_nw_masque_connection_pair_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  if (a5 + a3 >= v5)
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = a4 + v5 - a3;
  return a5 + a3 < v5;
}

void ___ZL36nw_masque_connection_pair_read_innerP36NWConcrete_nw_masque_connection_pair_block_invoke_304(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  uint64_t v5;
  int v6;
  const char *v7;
  __int16 v8;
  uint64_t v9;
  __int16 v10;
  id v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (v3)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v4 = (id)gLogObj;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
      v6 = 136446722;
      v7 = "nw_masque_connection_pair_read_inner_block_invoke";
      v8 = 2114;
      v9 = v5;
      v10 = 2112;
      v11 = v3;
      _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ received error sending to outer connection %@", (uint8_t *)&v6, 0x20u);
    }

  }
  dispatch_group_leave(*(dispatch_group_t *)(*(_QWORD *)(a1 + 32) + 232));

}

void ___ZL36nw_masque_connection_pair_read_outerP36NWConcrete_nw_masque_connection_pair_block_invoke(uint64_t a1, void *a2, void *a3, _BOOL4 a4, void *a5)
{
  NSObject *v9;
  id v10;
  id v11;
  void *v12;
  _QWORD *v13;
  _DWORD *v14;
  int v15;
  _BYTE *v16;
  char v17;
  uint64_t v18;
  _BOOL4 v19;
  NSObject *v20;
  uint64_t v21;
  unsigned int v22;
  size_t v23;
  unsigned __int16 *v24;
  size_t v25;
  int v26;
  uint64_t v27;
  NSObject **v28;
  NSObject *v29;
  const nw_content_context_t *v30;
  NSObject *v31;
  size_t size;
  void *alloc;
  NSObject *v34;
  NSObject *v35;
  uint64_t v36;
  size_t v37;
  NSObject *v38;
  uint64_t v39;
  const char *v40;
  const char *v41;
  const char *v42;
  NSObject *v43;
  uint64_t v44;
  _QWORD v45[4];
  NSObject *v46;
  uint64_t v47;
  uint8_t buf[4];
  const char *v49;
  __int16 v50;
  uint64_t v51;
  __int16 v52;
  size_t v53;
  __int16 v54;
  const char *v55;
  __int16 v56;
  const char *v57;
  __int16 v58;
  const char *v59;
  _QWORD __s1[2];
  int v61;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  v9 = a2;
  v10 = a3;
  v11 = a5;
  v12 = v11;
  v13 = *(_QWORD **)(a1 + 32);
  if (*(_QWORD *)(v13[2] + 48))
  {
    if (v13[6])
    {
      if (v13[7])
      {
        if (!v11 || (v14 = v11, v15 = v14[3], v14, v15 == 40))
        {
          if (v10 && a4)
          {
            v16 = v10;
            if (v16 != (_BYTE *)&__block_literal_global_41718 && v16 != (_BYTE *)&__block_literal_global_5_41741)
            {
              if (v16 == (_BYTE *)&__block_literal_global_3_41726 || v16 == (_BYTE *)&__block_literal_global_4)
              {

                v18 = *(_QWORD *)(a1 + 32);
              }
              else
              {
                v17 = v16[118];

                v18 = *(_QWORD *)(a1 + 32);
                if ((v17 & 1) == 0)
                {
                  v19 = 0;
                  if (!*(_QWORD *)(v18 + 32))
                    goto LABEL_25;
                  v22 = *(unsigned __int16 *)(v18 + 72);
                  if (!v22)
                    goto LABEL_25;
LABEL_20:
                  if (gLogDatapath)
                  {
                    __nwlog_obj();
                    v38 = objc_claimAutoreleasedReturnValue();
                    if (os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG))
                    {
                      v39 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
                      *(_DWORD *)buf = 136446722;
                      v49 = "nw_masque_connection_pair_read_outer_block_invoke";
                      v50 = 2114;
                      v51 = v39;
                      v52 = 2112;
                      v53 = (size_t)v9;
                      _os_log_impl(&dword_182FBE000, v38, OS_LOG_TYPE_DEBUG, "%{public}s %{public}@ Received content %@", buf, 0x20u);
                    }

                    v22 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 32) + 72);
                  }
                  __s1[0] = 0;
                  __s1[1] = 0;
                  v61 = 0;
                  v23 = nw_dispatch_data_copyout_from_offset(v9, (uint64_t)__s1, v22, 1);
                  v24 = *(unsigned __int16 **)(a1 + 32);
                  if (v23 == v24[36] && (v25 = v23, !memcmp(__s1, v24 + 37, v23)))
                  {
                    if (v25 == v24[47])
                    {
                      size = dispatch_data_get_size(v9);
                      v47 = 0;
                      alloc = (void *)dispatch_data_create_alloc();
                      nw_dispatch_data_copyout(v9, 0, size);
                      memcpy((void *)1, (const void *)(*(_QWORD *)(a1 + 32) + 96), v25);
                      v34 = alloc;

                      if (gLogDatapath)
                      {
                        __nwlog_obj();
                        v43 = objc_claimAutoreleasedReturnValue();
                        if (os_log_type_enabled(v43, OS_LOG_TYPE_DEBUG))
                        {
                          v44 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
                          *(_DWORD *)buf = 136446466;
                          v49 = "nw_masque_connection_pair_read_outer_block_invoke";
                          v50 = 2114;
                          v51 = v44;
                          _os_log_impl(&dword_182FBE000, v43, OS_LOG_TYPE_DEBUG, "%{public}s %{public}@ Replaced with Virtual Client CID before proxying", buf, 0x16u);
                        }

                      }
                      v26 = 1;
                      v9 = v34;
                    }
                    else
                    {
                      v26 = 1;
                    }
                  }
                  else
                  {
LABEL_25:
                    v26 = 0;
                  }
                  if (gLogDatapath)
                  {
                    __nwlog_obj();
                    v35 = objc_claimAutoreleasedReturnValue();
                    if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
                    {
                      v36 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
                      if (v9)
                        v37 = dispatch_data_get_size(v9);
                      else
                        v37 = 0;
                      v40 = "";
                      *(_DWORD *)buf = 136447490;
                      v41 = " directly";
                      v49 = "nw_masque_connection_pair_read_outer_block_invoke";
                      if (!v26)
                        v41 = "";
                      v50 = 2114;
                      v51 = v36;
                      v42 = ", complete";
                      if (!a4)
                        v42 = "";
                      v52 = 2048;
                      v53 = v37;
                      v54 = 2080;
                      v55 = v41;
                      v56 = 2080;
                      if (v19)
                        v40 = ", final";
                      v57 = v42;
                      v58 = 2080;
                      v59 = v40;
                      _os_log_impl(&dword_182FBE000, v35, OS_LOG_TYPE_DEBUG, "%{public}s %{public}@ Proxying %zu bytes%s to client%s%s", buf, 0x3Eu);
                    }

                  }
                  dispatch_group_enter(*(dispatch_group_t *)(*(_QWORD *)(a1 + 32) + 232));
                  v27 = *(_QWORD *)(a1 + 32);
                  if (v26)
                    v28 = (NSObject **)(v27 + 32);
                  else
                    v28 = (NSObject **)(*(_QWORD *)(v27 + 16) + 48);
                  v29 = *v28;
                  if (*(_BYTE *)(v27 + 219))
                    v30 = &_nw_content_context_default_message;
                  else
                    v30 = (const nw_content_context_t *)(v27 + 56);
                  v31 = *v30;
                  v45[0] = MEMORY[0x1E0C809B0];
                  v45[1] = 3221225472;
                  v45[2] = ___ZL36nw_masque_connection_pair_read_outerP36NWConcrete_nw_masque_connection_pair_block_invoke_296;
                  v45[3] = &unk_1E14A9B48;
                  v46 = (id)v27;
                  nw_connection_send(v29, v9, v31, a4, v45);
                  if (!v19)
                    nw_masque_connection_pair_read_outer(*(NWConcrete_nw_masque_connection_pair **)(a1 + 32));
                  v20 = v46;
                  goto LABEL_36;
                }
              }
              v19 = *(_BYTE *)(v18 + 219) == 0;
              goto LABEL_20;
            }

          }
          v19 = 0;
          v18 = *(_QWORD *)(a1 + 32);
          goto LABEL_20;
        }
      }
    }
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v20 = (id)gLogObj;
  if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
  {
    v21 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
    *(_DWORD *)buf = 136446722;
    v49 = "nw_masque_connection_pair_read_outer_block_invoke";
    v50 = 2114;
    v51 = v21;
    v52 = 2112;
    v53 = (size_t)v12;
    _os_log_impl(&dword_182FBE000, v20, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ Stopping reading, error %@", buf, 0x20u);
  }
LABEL_36:

}

void sub_183651790(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void ___ZL36nw_masque_connection_pair_read_outerP36NWConcrete_nw_masque_connection_pair_block_invoke_296(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  uint64_t v5;
  int v6;
  const char *v7;
  __int16 v8;
  uint64_t v9;
  __int16 v10;
  id v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (v3)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v4 = (id)gLogObj;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
      v6 = 136446722;
      v7 = "nw_masque_connection_pair_read_outer_block_invoke";
      v8 = 2114;
      v9 = v5;
      v10 = 2112;
      v11 = v3;
      _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ received error sending to inner connection %@", (uint8_t *)&v6, 0x20u);
    }

  }
  dispatch_group_leave(*(dispatch_group_t *)(*(_QWORD *)(a1 + 32) + 232));

}

void ___ZL46nw_masque_connection_pair_read_outer_datagramsP36NWConcrete_nw_masque_connection_pair_block_invoke(uint64_t a1, uint64_t a2, int a3, int a4)
{
  _QWORD *v6;
  NSObject *v7;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  _QWORD batch_block[4];
  NSObject *v17;
  uint64_t v18;
  int v19;
  uint8_t buf[4];
  const char *v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  int v25;
  __int16 v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD **)(a1 + 32);
  v7 = v6[6];
  if (v7 && (a4 == 40 || !a4))
  {
    if (gLogDatapath)
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
      {
        v15 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
        *(_DWORD *)buf = 136446722;
        v21 = "nw_masque_connection_pair_read_outer_datagrams_block_invoke";
        v22 = 2114;
        v23 = v15;
        v24 = 1024;
        v25 = a3;
        _os_log_impl(&dword_182FBE000, v14, OS_LOG_TYPE_DEBUG, "%{public}s %{public}@ Proxying batch of %u packets to client", buf, 0x1Cu);
      }

      v6 = *(_QWORD **)(a1 + 32);
      v7 = v6[6];
    }
    batch_block[0] = MEMORY[0x1E0C809B0];
    batch_block[1] = 3221225472;
    batch_block[2] = ___ZL46nw_masque_connection_pair_read_outer_datagramsP36NWConcrete_nw_masque_connection_pair_block_invoke_287;
    batch_block[3] = &unk_1E149F778;
    v19 = a3;
    v18 = a2;
    v17 = v6;
    nw_connection_batch(v7, batch_block);
    nw_masque_connection_pair_read_outer_datagrams(*(NWConcrete_nw_masque_connection_pair **)(a1 + 32));
    v10 = v17;
  }
  else
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v10 = (id)gLogObj;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      v11 = *(_QWORD *)(a1 + 32);
      v12 = *(_QWORD *)(v11 + 16);
      v13 = *(_QWORD *)(v11 + 48);
      *(_DWORD *)buf = 136446978;
      v21 = "nw_masque_connection_pair_read_outer_datagrams_block_invoke";
      v22 = 2114;
      v23 = v12;
      v24 = 1024;
      v25 = a4;
      v26 = 2112;
      v27 = v13;
      _os_log_impl(&dword_182FBE000, v10, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ Stopping reading, error %d, outer %@", buf, 0x26u);
    }
  }

}

void sub_183651AD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{

  _Unwind_Resume(a1);
}

void ___ZL46nw_masque_connection_pair_read_outer_datagramsP36NWConcrete_nw_masque_connection_pair_block_invoke_287(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  size_t v9;
  size_t size;
  NSObject *v11;
  NSObject *v12;
  uint64_t v13;
  NSObject **v14;
  NSObject **v15;
  NSObject *v16;
  NSObject *v17;
  uint64_t v18;
  size_t v19;
  const char *v20;
  NSObject *v21;
  uint64_t v22;
  void *alloc;
  _QWORD completion[4];
  NSObject **v25;
  _QWORD v26[4];
  id v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  char v33;
  _QWORD v34[4];
  _QWORD v35[4];
  _QWORD __s1[2];
  int v37;
  _BYTE applier[24];
  void *v39;
  __int128 v40;
  size_t v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a1 + 48))
  {
    v2 = 0;
    v3 = MEMORY[0x1E0C809B0];
    do
    {
      v4 = *(id *)(*(_QWORD *)(a1 + 40) + 8 * v2);
      v30 = 0;
      v31 = &v30;
      v32 = 0x2020000000;
      v33 = 0;
      v5 = *(_QWORD *)(a1 + 32);
      if (*(_QWORD *)(v5 + 32))
      {
        if (gLogDatapath)
        {
          __nwlog_obj();
          v12 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
          {
            v13 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
            *(_DWORD *)applier = 136446722;
            *(_QWORD *)&applier[4] = "nw_masque_connection_pair_read_outer_datagrams_block_invoke";
            *(_WORD *)&applier[12] = 2114;
            *(_QWORD *)&applier[14] = v13;
            *(_WORD *)&applier[22] = 2112;
            v39 = v4;
            _os_log_impl(&dword_182FBE000, v12, OS_LOG_TYPE_DEBUG, "%{public}s %{public}@ Received content %@", applier, 0x20u);
          }

          v5 = *(_QWORD *)(a1 + 32);
          v6 = *(unsigned __int16 *)(v5 + 72);
          if (!*(_WORD *)(v5 + 72))
          {
LABEL_17:
            if (*(_QWORD *)(v5 + 192))
            {
              v26[0] = v3;
              v26[1] = 3221225472;
              v26[2] = ___ZL46nw_masque_connection_pair_read_outer_datagramsP36NWConcrete_nw_masque_connection_pair_block_invoke_288;
              v26[3] = &unk_1E149F750;
              v27 = (id)v5;
              v28 = &v30;
              dispatch_data_apply(v4, v26);

            }
            goto LABEL_19;
          }
        }
        else
        {
          v6 = *(unsigned __int16 *)(v5 + 72);
          if (!*(_WORD *)(v5 + 72))
            goto LABEL_17;
        }
        __s1[0] = 0;
        __s1[1] = 0;
        v37 = 0;
        v7 = nw_dispatch_data_copyout_from_offset(v4, (uint64_t)__s1, v6, 1);
        v8 = *(_QWORD *)(a1 + 32);
        if (v7 == *(unsigned __int16 *)(v8 + 72))
        {
          v9 = v7;
          if (!memcmp(__s1, (const void *)(v8 + 74), v7))
          {
            *((_BYTE *)v31 + 24) = 1;
            if (v9 == *(unsigned __int16 *)(*(_QWORD *)(a1 + 32) + 94))
            {
              size = dispatch_data_get_size(v4);
              v29 = 0;
              alloc = (void *)dispatch_data_create_alloc();
              v35[0] = 0;
              v35[1] = v35;
              v35[2] = 0x2000000000;
              v35[3] = 0;
              v34[0] = 0;
              v34[1] = v34;
              v34[2] = 0x2000000000;
              v34[3] = v29;
              if (v4)
              {
                *(_QWORD *)applier = v3;
                *(_QWORD *)&applier[8] = 0x40000000;
                *(_QWORD *)&applier[16] = __nw_dispatch_data_copyout_block_invoke;
                v39 = &unk_1E14A3448;
                *((_QWORD *)&v40 + 1) = v34;
                v41 = size;
                *(_QWORD *)&v40 = v35;
                dispatch_data_apply(v4, applier);
              }
              _Block_object_dispose(v34, 8);
              _Block_object_dispose(v35, 8);
              memcpy((void *)(v29 + 1), (const void *)(*(_QWORD *)(a1 + 32) + 96), v9);
              v11 = alloc;

              if (gLogDatapath)
              {
                __nwlog_obj();
                v21 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
                {
                  v22 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
                  *(_DWORD *)applier = 136446466;
                  *(_QWORD *)&applier[4] = "nw_masque_connection_pair_read_outer_datagrams_block_invoke";
                  *(_WORD *)&applier[12] = 2114;
                  *(_QWORD *)&applier[14] = v22;
                  _os_log_impl(&dword_182FBE000, v21, OS_LOG_TYPE_DEBUG, "%{public}s %{public}@ Replaced with Virtual Client CID before proxying", applier, 0x16u);
                }

              }
              v4 = v11;
            }
          }
        }
      }
LABEL_19:
      if (gLogDatapath)
      {
        __nwlog_obj();
        v17 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
        {
          v18 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
          if (v4)
            v19 = dispatch_data_get_size(v4);
          else
            v19 = 0;
          v20 = " directly";
          if (!*((_BYTE *)v31 + 24))
            v20 = "";
          *(_DWORD *)applier = 136446978;
          *(_QWORD *)&applier[4] = "nw_masque_connection_pair_read_outer_datagrams_block_invoke_2";
          *(_WORD *)&applier[12] = 2114;
          *(_QWORD *)&applier[14] = v18;
          *(_WORD *)&applier[22] = 2048;
          v39 = (void *)v19;
          LOWORD(v40) = 2080;
          *(_QWORD *)((char *)&v40 + 2) = v20;
          _os_log_impl(&dword_182FBE000, v17, OS_LOG_TYPE_DEBUG, "%{public}s %{public}@ Proxying %zu bytes%s to client", applier, 0x2Au);
        }

      }
      dispatch_group_enter(*(dispatch_group_t *)(*(_QWORD *)(a1 + 32) + 232));
      v14 = *(NSObject ***)(a1 + 32);
      if (*((_BYTE *)v31 + 24))
        v15 = v14 + 4;
      else
        v15 = (NSObject **)&v14[2][6];
      v16 = *v15;
      completion[0] = v3;
      completion[1] = 3221225472;
      completion[2] = ___ZL46nw_masque_connection_pair_read_outer_datagramsP36NWConcrete_nw_masque_connection_pair_block_invoke_291;
      completion[3] = &unk_1E14A9B48;
      v25 = v14;
      nw_connection_send(v16, v4, (nw_content_context_t)&__block_literal_global_41718, 1, completion);

      _Block_object_dispose(&v30, 8);
      ++v2;
    }
    while (v2 < *(unsigned int *)(a1 + 48));
  }
}

void sub_183651FE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  void *v28;

  _Block_object_dispose(&a28, 8);
  _Unwind_Resume(a1);
}

BOOL ___ZL46nw_masque_connection_pair_read_outer_datagramsP36NWConcrete_nw_masque_connection_pair_block_invoke_288(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _BOOL4 matched;

  matched = nw_masque_connection_pair_match_demux_pattern(a4, a5, *(void **)(*(_QWORD *)(a1 + 32) + 192));
  if (matched)
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
  return !matched;
}

void ___ZL46nw_masque_connection_pair_read_outer_datagramsP36NWConcrete_nw_masque_connection_pair_block_invoke_291(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  uint64_t v5;
  int v6;
  const char *v7;
  __int16 v8;
  uint64_t v9;
  __int16 v10;
  id v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (v3)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v4 = (id)gLogObj;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
      v6 = 136446722;
      v7 = "nw_masque_connection_pair_read_outer_datagrams_block_invoke";
      v8 = 2114;
      v9 = v5;
      v10 = 2112;
      v11 = v3;
      _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ received error sending to inner connection %@", (uint8_t *)&v6, 0x20u);
    }

  }
  dispatch_group_leave(*(dispatch_group_t *)(*(_QWORD *)(a1 + 32) + 232));

}

void ___ZL54nw_masque_connection_pair_setup_outer_connection_innerP36NWConcrete_nw_masque_connection_pairPU25objcproto14OS_nw_endpoint8NSObjecthPU27objcproto16OS_nw_parametersS1__block_invoke_264(uint64_t a1)
{
  nw_connection_cancel(*(nw_connection_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16) + 48));
}

void ___ZL54nw_masque_connection_pair_setup_outer_connection_innerP36NWConcrete_nw_masque_connection_pairPU25objcproto14OS_nw_endpoint8NSObjecthPU27objcproto16OS_nw_parametersS1__block_invoke_266(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  v2 = _Block_copy(*(const void **)(*(_QWORD *)(a1 + 32) + 64));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

uint64_t ___ZL54nw_masque_connection_pair_setup_outer_connection_innerP36NWConcrete_nw_masque_connection_pairPU25objcproto14OS_nw_endpoint8NSObjecthPU27objcproto16OS_nw_parametersS1__block_invoke_276(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  const char *v5;

  v3 = *(void **)(a1 + 32);
  v4 = objc_msgSend(v3, "length");
  v5 = ",";
  if (!v4)
    v5 = "";
  objc_msgSend(v3, "appendFormat:", CFSTR("%s%s"), v5, a2);
  return 1;
}

void ___ZL45nw_masque_connection_pair_start_waiting_timerP36NWConcrete_nw_masque_connection_pair_block_invoke(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  const char *v6;
  __int16 v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v2 = (id)gLogObj;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(_QWORD *)(a1 + 40);
    v5 = 136446722;
    v6 = "nw_masque_connection_pair_start_waiting_timer_block_invoke";
    v7 = 2114;
    v8 = v3;
    v9 = 2112;
    v10 = v4;
    _os_log_impl(&dword_182FBE000, v2, OS_LOG_TYPE_INFO, "%{public}s %{public}@ wait timer fired for outer connection %@", (uint8_t *)&v5, 0x20u);
  }

  nw_connection_cancel(*(nw_connection_t *)(a1 + 40));
}

void ___ZL48nw_masque_connection_pair_setup_outer_connectionP36NWConcrete_nw_masque_connection_pairPU25objcproto14OS_nw_endpoint8NSObjecthPU29objcproto18OS_nw_http_requestS1__block_invoke_3(uint64_t a1)
{
  nw_masque_connection_pair_setup_outer_connection_inner(*(void **)(a1 + 32), *(void **)(a1 + 40), *(unsigned __int8 *)(a1 + 56), *(void **)(a1 + 48));
}

void ___ZL32nw_masque_connection_pair_createP31NWConcrete_nw_masque_connection_block_invoke(uint64_t a1)
{
  nw_dictionary_set_value(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 56), (const char *)(*(_QWORD *)(a1 + 40) + 200), *(void **)(a1 + 40));
  *(_BYTE *)(*(_QWORD *)(a1 + 40) + 220) = 0;
}

void ___ZL32nw_masque_connection_pair_createP31NWConcrete_nw_masque_connection_block_invoke_2(uint64_t a1, int a2)
{
  if ((a2 & 0xFFFFFFFE) == 4)
  {
    nw_dictionary_set_value(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 56), (const char *)(*(_QWORD *)(a1 + 40) + 200), 0);
    nw_masque_connection_pair_cancel(*(NWConcrete_nw_masque_connection_pair **)(a1 + 40));
  }
}

void ___ZL51nw_masque_connection_pair_set_state_changed_handlerP36NWConcrete_nw_masque_connection_pairU13block_pointerFv21nw_connection_state_tPU22objcproto11OS_nw_error8NSObjectE_block_invoke(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  v2 = _Block_copy(*(const void **)(a1 + 40));
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(void **)(v3 + 64);
  *(_QWORD *)(v3 + 64) = v2;

}

void nw_masque_connection_pair_cancel(NWConcrete_nw_masque_connection_pair *a1)
{
  NWConcrete_nw_masque_connection_pair *v1;
  NWConcrete_nw_masque_connection_pair *v2;
  NSObject *v3;
  NSObject *v4;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  _QWORD block[4];
  NWConcrete_nw_masque_connection_pair *v14;
  char v15;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = *((_QWORD *)v1 + 29);
    v4 = *(NSObject **)(*((_QWORD *)v1 + 2) + 32);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = ___ZL32nw_masque_connection_pair_cancelP36NWConcrete_nw_masque_connection_pair_block_invoke;
    block[3] = &unk_1E14ACFD0;
    v14 = v1;
    dispatch_group_notify(v3, v4, block);

    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v18 = "nw_masque_connection_pair_cancel";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v15 = 0;
  if (__nwlog_fault(v6, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_masque_connection_pair_cancel";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null pair", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v18 = "nw_masque_connection_pair_cancel";
          v19 = 2082;
          v20 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null pair, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_masque_connection_pair_cancel";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null pair, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_masque_connection_pair_cancel";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null pair, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
LABEL_3:

}

void ___ZL32nw_masque_connection_pair_cancelP36NWConcrete_nw_masque_connection_pair_block_invoke(uint64_t a1)
{
  _QWORD *v2;
  NSObject *v3;
  uint64_t v4;
  void *v5;
  NSObject *v6;
  uint64_t v7;
  void *v8;
  NSObject *v9;
  uint64_t v10;
  void *v11;
  unsigned __int8 *v12;
  uint64_t v13;
  void *v14;
  NSObject *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;

  nw_masque_connection_pair_cancel_waiting_timer(*(NWConcrete_nw_masque_connection_pair **)(a1 + 32));
  v2 = *(_QWORD **)(a1 + 32);
  v3 = *(NSObject **)(v2[2] + 48);
  if (v3)
  {
    nw_connection_cancel(v3);
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
    v5 = *(void **)(v4 + 48);
    *(_QWORD *)(v4 + 48) = 0;

    v2 = *(_QWORD **)(a1 + 32);
  }
  v6 = v2[3];
  if (v6)
  {
    nw_connection_cancel(v6);
    v7 = *(_QWORD *)(a1 + 32);
    v8 = *(void **)(v7 + 24);
    *(_QWORD *)(v7 + 24) = 0;

    v2 = *(_QWORD **)(a1 + 32);
  }
  v9 = v2[4];
  if (v9)
  {
    nw_connection_cancel(v9);
    v10 = *(_QWORD *)(a1 + 32);
    v11 = *(void **)(v10 + 32);
    *(_QWORD *)(v10 + 32) = 0;

    v2 = *(_QWORD **)(a1 + 32);
  }
  v12 = (unsigned __int8 *)v2[5];
  if (v12)
  {
    nw_array_apply(v12, (uint64_t)&__block_literal_global_245);
    v13 = *(_QWORD *)(a1 + 32);
    v14 = *(void **)(v13 + 40);
    *(_QWORD *)(v13 + 40) = 0;

    v2 = *(_QWORD **)(a1 + 32);
  }
  v15 = v2[6];
  if (v15)
  {
    nw_connection_cancel(v15);
    v16 = *(_QWORD *)(a1 + 32);
    v17 = *(void **)(v16 + 48);
    *(_QWORD *)(v16 + 48) = 0;

    v2 = *(_QWORD **)(a1 + 32);
  }
  v18 = (void *)v2[24];
  v2[24] = 0;

  v19 = *(_QWORD *)(a1 + 32);
  v20 = *(void **)(v19 + 56);
  *(_QWORD *)(v19 + 56) = 0;

  v21 = *(_QWORD *)(a1 + 32);
  v22 = *(void **)(v21 + 64);
  *(_QWORD *)(v21 + 64) = 0;

}

uint64_t ___ZL32nw_masque_connection_pair_cancelP36NWConcrete_nw_masque_connection_pair_block_invoke_2(int a1, int a2, nw_connection_t connection)
{
  nw_connection_cancel(connection);
  return 1;
}

uint64_t ___ZL36nw_masque_connection_cancel_on_queueP31NWConcrete_nw_masque_connectionPU22objcproto11OS_nw_error8NSObject_block_invoke_2(int a1, int a2, NWConcrete_nw_masque_listener_pair *a3)
{
  nw_masque_listener_pair_cancel(a3);
  return 1;
}

uint64_t ___ZL36nw_masque_connection_cancel_on_queueP31NWConcrete_nw_masque_connectionPU22objcproto11OS_nw_error8NSObject_block_invoke(int a1, int a2, NWConcrete_nw_masque_connection_pair *a3)
{
  nw_masque_connection_pair_cancel(a3);
  return 1;
}

void __nw_masque_connection_set_cancel_handler_block_invoke(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  v2 = _Block_copy(*(const void **)(a1 + 40));
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(void **)(v3 + 104);
  *(_QWORD *)(v3 + 104) = v2;

}

void __nw_masque_connection_cancel_block_invoke(uint64_t a1)
{
  nw_masque_connection_cancel_on_queue(*(void **)(a1 + 32), 0);
}

uint64_t __nw_masque_connection_set_group_identifier_block_invoke(uint64_t result)
{
  *(_QWORD *)(*(_QWORD *)(result + 32) + 16) = *(_QWORD *)(result + 40);
  return result;
}

BOOL nw_protocol_http_client_create(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  char *v5;
  id v6;
  char v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL8 result;
  NSObject *v13;
  void *v14;
  NSObject *v15;
  char *v16;
  NSObject *v17;
  os_log_type_t v18;
  const char *v19;
  char *v20;
  _BOOL4 v21;
  char *backtrace_string;
  _BOOL4 v23;
  char v24;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  uint64_t v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v5 = (char *)malloc_type_calloc(1uLL, 0x250uLL, 0xEAFB8F1AuLL);
  if (v5)
  {
LABEL_2:
    bzero(v5, 0x250uLL);
    if (gLogDatapath)
    {
      v15 = __nwlog_obj();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446722;
        v27 = "nw_protocol_http_client_create";
        v28 = 2082;
        v29 = (uint64_t)(v5 + 114);
        v30 = 2080;
        v31 = (uint64_t)" ";
        _os_log_impl(&dword_182FBE000, v15, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%scalled", buf, 0x20u);
      }
    }
    if (nw_protocol_http_client_identifier::onceToken != -1)
      dispatch_once(&nw_protocol_http_client_identifier::onceToken, &__block_literal_global_29660);
    *((_QWORD *)v5 + 2) = &nw_protocol_http_client_identifier::protocol_identifier;
    if (nw_protocol_http_client_get_callbacks(void)::onceToken != -1)
      dispatch_once(&nw_protocol_http_client_get_callbacks(void)::onceToken, &__block_literal_global_5_29661);
    *((_QWORD *)v5 + 3) = &nw_protocol_http_client_get_callbacks(void)::protocol_callbacks;
    *((_QWORD *)v5 + 5) = v5;
    v6 = nw_parameters_copy_context(a4);
    v7 = v5[568];
    if ((v7 & 1) != 0)
    {
      v8 = (void *)*((_QWORD *)v5 + 70);
      if (v8)
      {
        os_release(v8);
        v7 = v5[568];
      }
    }
    *((_QWORD *)v5 + 25) = 0;
    *((_QWORD *)v5 + 70) = v6;
    v5[568] = v7 | 1;
    *((_QWORD *)v5 + 9) = v5 + 200;
    *((_QWORD *)v5 + 26) = v5 + 200;
    *((_QWORD *)v5 + 27) = 0;
    *((_QWORD *)v5 + 28) = v5 + 216;
    *((_QWORD *)v5 + 29) = 0;
    *((_QWORD *)v5 + 30) = v5 + 232;
    v5[340] = 2;
    if (nw_protocol_copy_http_definition_onceToken != -1)
      dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_11_72660);
    v9 = (id)nw_protocol_copy_http_definition_http_definition;
    nw_protocol_plugin_metadata_set_callbacks((uint64_t)v5, v9, (uint64_t)nw_protocol_http_client_create::$_0::__invoke, (uint64_t)nw_protocol_http_client_create::$_1::__invoke);
    if (v9)
      os_release(v9);
    v10 = *((_QWORD *)v5 + 5);
    if (v10)
    {
      v11 = *(_QWORD *)(v10 + 72);
      if (v11)
      {
        *(_QWORD *)(v11 + 112) = nw_protocol_http_client_report_transfer_size;
LABEL_17:
        *((_QWORD *)v5 + 11) = v5 + 344;
        nw_protocol_plugin_retry_set_callbacks((uint64_t)v5, (uint64_t)nw_protocol_http_client_create::$_2::__invoke, (uint64_t)nw_protocol_http_client_create::$_3::__invoke, (uint64_t)nw_protocol_http_client_create::$_4::__invoke, (uint64_t)nw_protocol_http_client_create::$_5::__invoke);
        *((_QWORD *)v5 + 8) = v5 + 104;
        nw_protocol_plugin_name_set_callbacks((uint64_t)v5, (uint64_t)nw_protocol_http_client_create::$_6::__invoke);
        return (BOOL)v5;
      }
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      v27 = "nw_protocol_plugin_metadata_set_size_callback";
      v16 = (char *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      v24 = 0;
      if (!__nwlog_fault(v16, &type, &v24))
        goto LABEL_50;
      if (type == OS_LOG_TYPE_FAULT)
      {
        v17 = __nwlog_obj();
        v18 = type;
        if (!os_log_type_enabled(v17, type))
          goto LABEL_50;
        *(_DWORD *)buf = 136446210;
        v27 = "nw_protocol_plugin_metadata_set_size_callback";
        v19 = "%{public}s called with null metadata_plugin";
        goto LABEL_49;
      }
      if (!v24)
      {
        v17 = __nwlog_obj();
        v18 = type;
        if (!os_log_type_enabled(v17, type))
          goto LABEL_50;
        *(_DWORD *)buf = 136446210;
        v27 = "nw_protocol_plugin_metadata_set_size_callback";
        v19 = "%{public}s called with null metadata_plugin, backtrace limit exceeded";
        goto LABEL_49;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v17 = __nwlog_obj();
      v18 = type;
      v23 = os_log_type_enabled(v17, type);
      if (backtrace_string)
      {
        if (v23)
        {
          *(_DWORD *)buf = 136446466;
          v27 = "nw_protocol_plugin_metadata_set_size_callback";
          v28 = 2082;
          v29 = (uint64_t)backtrace_string;
          _os_log_impl(&dword_182FBE000, v17, v18, "%{public}s called with null metadata_plugin, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        if (!v16)
          goto LABEL_17;
        goto LABEL_51;
      }
      if (v23)
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_protocol_plugin_metadata_set_size_callback";
        v19 = "%{public}s called with null metadata_plugin, no backtrace";
LABEL_49:
        _os_log_impl(&dword_182FBE000, v17, v18, v19, buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      v27 = "nw_protocol_plugin_metadata_set_size_callback";
      v16 = (char *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      v24 = 0;
      if (!__nwlog_fault(v16, &type, &v24))
        goto LABEL_50;
      if (type == OS_LOG_TYPE_FAULT)
      {
        v17 = __nwlog_obj();
        v18 = type;
        if (!os_log_type_enabled(v17, type))
          goto LABEL_50;
        *(_DWORD *)buf = 136446210;
        v27 = "nw_protocol_plugin_metadata_set_size_callback";
        v19 = "%{public}s called with null protocol->handle";
        goto LABEL_49;
      }
      if (!v24)
      {
        v17 = __nwlog_obj();
        v18 = type;
        if (!os_log_type_enabled(v17, type))
          goto LABEL_50;
        *(_DWORD *)buf = 136446210;
        v27 = "nw_protocol_plugin_metadata_set_size_callback";
        v19 = "%{public}s called with null protocol->handle, backtrace limit exceeded";
        goto LABEL_49;
      }
      v20 = (char *)__nw_create_backtrace_string();
      v17 = __nwlog_obj();
      v18 = type;
      v21 = os_log_type_enabled(v17, type);
      if (!v20)
      {
        if (!v21)
          goto LABEL_50;
        *(_DWORD *)buf = 136446210;
        v27 = "nw_protocol_plugin_metadata_set_size_callback";
        v19 = "%{public}s called with null protocol->handle, no backtrace";
        goto LABEL_49;
      }
      if (v21)
      {
        *(_DWORD *)buf = 136446466;
        v27 = "nw_protocol_plugin_metadata_set_size_callback";
        v28 = 2082;
        v29 = (uint64_t)v20;
        _os_log_impl(&dword_182FBE000, v17, v18, "%{public}s called with null protocol->handle, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v20);
    }
LABEL_50:
    if (!v16)
      goto LABEL_17;
LABEL_51:
    free(v16);
    goto LABEL_17;
  }
  v13 = __nwlog_obj();
  os_log_type_enabled(v13, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  v27 = "strict_calloc";
  v28 = 2048;
  v29 = 1;
  v30 = 2048;
  v31 = 592;
  v14 = (void *)_os_log_send_and_compose_impl();
  result = __nwlog_abort((uint64_t)v14);
  if (!result)
  {
    free(v14);
    goto LABEL_2;
  }
  __break(1u);
  return result;
}

void nw_protocol_http_client_create::$_0::__invoke(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  id v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  const char *v12;
  NSObject *v13;
  char *backtrace_string;
  _BOOL4 v15;
  char *v16;
  _BOOL4 v17;
  const char *v18;
  _BOOL4 v19;
  _BOOL4 v20;
  _BOOL4 v21;
  char v22;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v25;
  __int16 v26;
  char *v27;
  __int16 v28;
  const char *v29;
  __int16 v30;
  _BOOL4 status_code;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v25 = "operator()";
    v9 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (!__nwlog_fault(v9, &type, &v22))
      goto LABEL_78;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v10 = __nwlog_obj();
      v11 = type;
      if (!os_log_type_enabled(v10, type))
        goto LABEL_78;
      *(_DWORD *)buf = 136446210;
      v25 = "operator()";
      v12 = "%{public}s called with null protocol";
    }
    else if (v22)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v10 = __nwlog_obj();
      v11 = type;
      v15 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          v25 = "operator()";
          v26 = 2082;
          v27 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_78:
        if (!v9)
          return;
        goto LABEL_79;
      }
      if (!v15)
        goto LABEL_78;
      *(_DWORD *)buf = 136446210;
      v25 = "operator()";
      v12 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      v10 = __nwlog_obj();
      v11 = type;
      if (!os_log_type_enabled(v10, type))
        goto LABEL_78;
      *(_DWORD *)buf = 136446210;
      v25 = "operator()";
      v12 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    goto LABEL_77;
  }
  v5 = *(_QWORD *)(a1 + 40);
  if (!v5)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v25 = "operator()";
    v9 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (!__nwlog_fault(v9, &type, &v22))
      goto LABEL_78;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v22)
      {
        v10 = __nwlog_obj();
        v11 = type;
        if (!os_log_type_enabled(v10, type))
          goto LABEL_78;
        *(_DWORD *)buf = 136446210;
        v25 = "operator()";
        v12 = "%{public}s called with null http_client, backtrace limit exceeded";
        goto LABEL_77;
      }
      v16 = (char *)__nw_create_backtrace_string();
      v10 = __nwlog_obj();
      v11 = type;
      v17 = os_log_type_enabled(v10, type);
      if (!v16)
      {
        if (!v17)
          goto LABEL_78;
        *(_DWORD *)buf = 136446210;
        v25 = "operator()";
        v12 = "%{public}s called with null http_client, no backtrace";
        goto LABEL_77;
      }
      if (!v17)
        goto LABEL_55;
      *(_DWORD *)buf = 136446466;
      v25 = "operator()";
      v26 = 2082;
      v27 = v16;
      v18 = "%{public}s called with null http_client, dumping backtrace:%{public}s";
      goto LABEL_54;
    }
    v10 = __nwlog_obj();
    v11 = type;
    if (!os_log_type_enabled(v10, type))
      goto LABEL_78;
    *(_DWORD *)buf = 136446210;
    v25 = "operator()";
    v12 = "%{public}s called with null http_client";
LABEL_77:
    _os_log_impl(&dword_182FBE000, v10, v11, v12, buf, 0xCu);
    goto LABEL_78;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v25 = "operator()";
    v9 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (!__nwlog_fault(v9, &type, &v22))
      goto LABEL_78;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v22)
      {
        v10 = __nwlog_obj();
        v11 = type;
        if (!os_log_type_enabled(v10, type))
          goto LABEL_78;
        *(_DWORD *)buf = 136446210;
        v25 = "operator()";
        v12 = "%{public}s called with null other_protocol, backtrace limit exceeded";
        goto LABEL_77;
      }
      v16 = (char *)__nw_create_backtrace_string();
      v10 = __nwlog_obj();
      v11 = type;
      v19 = os_log_type_enabled(v10, type);
      if (!v16)
      {
        if (!v19)
          goto LABEL_78;
        *(_DWORD *)buf = 136446210;
        v25 = "operator()";
        v12 = "%{public}s called with null other_protocol, no backtrace";
        goto LABEL_77;
      }
      if (!v19)
        goto LABEL_55;
      *(_DWORD *)buf = 136446466;
      v25 = "operator()";
      v26 = 2082;
      v27 = v16;
      v18 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
      goto LABEL_54;
    }
    v10 = __nwlog_obj();
    v11 = type;
    if (!os_log_type_enabled(v10, type))
      goto LABEL_78;
    *(_DWORD *)buf = 136446210;
    v25 = "operator()";
    v12 = "%{public}s called with null other_protocol";
    goto LABEL_77;
  }
  if (!a3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v25 = "operator()";
    v9 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (!__nwlog_fault(v9, &type, &v22))
      goto LABEL_78;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v10 = __nwlog_obj();
      v11 = type;
      if (!os_log_type_enabled(v10, type))
        goto LABEL_78;
      *(_DWORD *)buf = 136446210;
      v25 = "operator()";
      v12 = "%{public}s called with null metadata";
      goto LABEL_77;
    }
    if (!v22)
    {
      v10 = __nwlog_obj();
      v11 = type;
      if (!os_log_type_enabled(v10, type))
        goto LABEL_78;
      *(_DWORD *)buf = 136446210;
      v25 = "operator()";
      v12 = "%{public}s called with null metadata, backtrace limit exceeded";
      goto LABEL_77;
    }
    v16 = (char *)__nw_create_backtrace_string();
    v10 = __nwlog_obj();
    v11 = type;
    v20 = os_log_type_enabled(v10, type);
    if (!v16)
    {
      if (!v20)
        goto LABEL_78;
      *(_DWORD *)buf = 136446210;
      v25 = "operator()";
      v12 = "%{public}s called with null metadata, no backtrace";
      goto LABEL_77;
    }
    if (!v20)
      goto LABEL_55;
    *(_DWORD *)buf = 136446466;
    v25 = "operator()";
    v26 = 2082;
    v27 = v16;
    v18 = "%{public}s called with null metadata, dumping backtrace:%{public}s";
LABEL_54:
    _os_log_impl(&dword_182FBE000, v10, v11, v18, buf, 0x16u);
    goto LABEL_55;
  }
  if (!a5)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v25 = "operator()";
    v9 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (!__nwlog_fault(v9, &type, &v22))
      goto LABEL_78;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v10 = __nwlog_obj();
      v11 = type;
      if (!os_log_type_enabled(v10, type))
        goto LABEL_78;
      *(_DWORD *)buf = 136446210;
      v25 = "operator()";
      v12 = "%{public}s called with null completion";
      goto LABEL_77;
    }
    if (!v22)
    {
      v10 = __nwlog_obj();
      v11 = type;
      if (!os_log_type_enabled(v10, type))
        goto LABEL_78;
      *(_DWORD *)buf = 136446210;
      v25 = "operator()";
      v12 = "%{public}s called with null completion, backtrace limit exceeded";
      goto LABEL_77;
    }
    v16 = (char *)__nw_create_backtrace_string();
    v10 = __nwlog_obj();
    v11 = type;
    v21 = os_log_type_enabled(v10, type);
    if (!v16)
    {
      if (!v21)
        goto LABEL_78;
      *(_DWORD *)buf = 136446210;
      v25 = "operator()";
      v12 = "%{public}s called with null completion, no backtrace";
      goto LABEL_77;
    }
    if (v21)
    {
      *(_DWORD *)buf = 136446466;
      v25 = "operator()";
      v26 = 2082;
      v27 = v16;
      v18 = "%{public}s called with null completion, dumping backtrace:%{public}s";
      goto LABEL_54;
    }
LABEL_55:
    free(v16);
    if (!v9)
      return;
LABEL_79:
    free(v9);
    return;
  }
  v8 = nw_http_metadata_copy_response(a3);
  if ((*(_BYTE *)(v5 + 198) & 1) == 0)
  {
    if (gLogDatapath)
    {
      v13 = __nwlog_obj();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446978;
        v25 = "operator()";
        v26 = 2082;
        v27 = (char *)(v5 + 114);
        v28 = 2080;
        v29 = " ";
        v30 = 1024;
        status_code = nw_http_response_get_status_code(v8);
        _os_log_impl(&dword_182FBE000, v13, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sReceived http response %d", buf, 0x26u);
      }
    }
  }
  (*(void (**)(uint64_t, uint64_t, void *))(a5 + 16))(a5, 1, a3);
  if (v8)
    os_release(v8);
}

void nw_protocol_http_client_create::$_1::__invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  const char *v8;
  char *backtrace_string;
  _BOOL4 v10;
  char *v11;
  _BOOL4 v12;
  const char *v13;
  _BOOL4 v14;
  _BOOL4 v15;
  char v16;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v19 = "operator()";
    v5 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v16 = 0;
    if (!__nwlog_fault(v5, &type, &v16))
      goto LABEL_59;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v16)
      {
        v6 = __nwlog_obj();
        v7 = type;
        if (!os_log_type_enabled(v6, type))
          goto LABEL_59;
        *(_DWORD *)buf = 136446210;
        v19 = "operator()";
        v8 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_58;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v6 = __nwlog_obj();
      v7 = type;
      v10 = os_log_type_enabled(v6, type);
      if (!backtrace_string)
      {
        if (!v10)
          goto LABEL_59;
        *(_DWORD *)buf = 136446210;
        v19 = "operator()";
        v8 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_58;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446466;
        v19 = "operator()";
        v20 = 2082;
        v21 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
LABEL_59:
      if (!v5)
        return;
      goto LABEL_60;
    }
    v6 = __nwlog_obj();
    v7 = type;
    if (!os_log_type_enabled(v6, type))
      goto LABEL_59;
    *(_DWORD *)buf = 136446210;
    v19 = "operator()";
    v8 = "%{public}s called with null protocol";
    goto LABEL_58;
  }
  if (!*(_QWORD *)(a1 + 40))
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v19 = "operator()";
    v5 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v16 = 0;
    if (!__nwlog_fault(v5, &type, &v16))
      goto LABEL_59;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v16)
      {
        v6 = __nwlog_obj();
        v7 = type;
        if (!os_log_type_enabled(v6, type))
          goto LABEL_59;
        *(_DWORD *)buf = 136446210;
        v19 = "operator()";
        v8 = "%{public}s called with null http_client, backtrace limit exceeded";
        goto LABEL_58;
      }
      v11 = (char *)__nw_create_backtrace_string();
      v6 = __nwlog_obj();
      v7 = type;
      v12 = os_log_type_enabled(v6, type);
      if (!v11)
      {
        if (!v12)
          goto LABEL_59;
        *(_DWORD *)buf = 136446210;
        v19 = "operator()";
        v8 = "%{public}s called with null http_client, no backtrace";
        goto LABEL_58;
      }
      if (!v12)
        goto LABEL_40;
      *(_DWORD *)buf = 136446466;
      v19 = "operator()";
      v20 = 2082;
      v21 = v11;
      v13 = "%{public}s called with null http_client, dumping backtrace:%{public}s";
      goto LABEL_39;
    }
    v6 = __nwlog_obj();
    v7 = type;
    if (!os_log_type_enabled(v6, type))
      goto LABEL_59;
    *(_DWORD *)buf = 136446210;
    v19 = "operator()";
    v8 = "%{public}s called with null http_client";
LABEL_58:
    _os_log_impl(&dword_182FBE000, v6, v7, v8, buf, 0xCu);
    goto LABEL_59;
  }
  if (!a3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v19 = "operator()";
    v5 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v16 = 0;
    if (!__nwlog_fault(v5, &type, &v16))
      goto LABEL_59;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v6 = __nwlog_obj();
      v7 = type;
      if (!os_log_type_enabled(v6, type))
        goto LABEL_59;
      *(_DWORD *)buf = 136446210;
      v19 = "operator()";
      v8 = "%{public}s called with null metadata";
      goto LABEL_58;
    }
    if (!v16)
    {
      v6 = __nwlog_obj();
      v7 = type;
      if (!os_log_type_enabled(v6, type))
        goto LABEL_59;
      *(_DWORD *)buf = 136446210;
      v19 = "operator()";
      v8 = "%{public}s called with null metadata, backtrace limit exceeded";
      goto LABEL_58;
    }
    v11 = (char *)__nw_create_backtrace_string();
    v6 = __nwlog_obj();
    v7 = type;
    v14 = os_log_type_enabled(v6, type);
    if (!v11)
    {
      if (!v14)
        goto LABEL_59;
      *(_DWORD *)buf = 136446210;
      v19 = "operator()";
      v8 = "%{public}s called with null metadata, no backtrace";
      goto LABEL_58;
    }
    if (!v14)
      goto LABEL_40;
    *(_DWORD *)buf = 136446466;
    v19 = "operator()";
    v20 = 2082;
    v21 = v11;
    v13 = "%{public}s called with null metadata, dumping backtrace:%{public}s";
LABEL_39:
    _os_log_impl(&dword_182FBE000, v6, v7, v13, buf, 0x16u);
    goto LABEL_40;
  }
  if (a5)
  {
    (*(void (**)(uint64_t, uint64_t))(a5 + 16))(a5, 1);
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v19 = "operator()";
  v5 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v16 = 0;
  if (!__nwlog_fault(v5, &type, &v16))
    goto LABEL_59;
  if (type == OS_LOG_TYPE_FAULT)
  {
    v6 = __nwlog_obj();
    v7 = type;
    if (!os_log_type_enabled(v6, type))
      goto LABEL_59;
    *(_DWORD *)buf = 136446210;
    v19 = "operator()";
    v8 = "%{public}s called with null completion";
    goto LABEL_58;
  }
  if (!v16)
  {
    v6 = __nwlog_obj();
    v7 = type;
    if (!os_log_type_enabled(v6, type))
      goto LABEL_59;
    *(_DWORD *)buf = 136446210;
    v19 = "operator()";
    v8 = "%{public}s called with null completion, backtrace limit exceeded";
    goto LABEL_58;
  }
  v11 = (char *)__nw_create_backtrace_string();
  v6 = __nwlog_obj();
  v7 = type;
  v15 = os_log_type_enabled(v6, type);
  if (!v11)
  {
    if (!v15)
      goto LABEL_59;
    *(_DWORD *)buf = 136446210;
    v19 = "operator()";
    v8 = "%{public}s called with null completion, no backtrace";
    goto LABEL_58;
  }
  if (v15)
  {
    *(_DWORD *)buf = 136446466;
    v19 = "operator()";
    v20 = 2082;
    v21 = v11;
    v13 = "%{public}s called with null completion, dumping backtrace:%{public}s";
    goto LABEL_39;
  }
LABEL_40:
  free(v11);
  if (v5)
LABEL_60:
    free(v5);
}

void nw_protocol_http_client_report_transfer_size(nw_protocol *a1, nw_protocol_metadata *a2, unsigned int a3, int a4)
{
  void **handle;
  id v7;
  void *v8;
  uint64_t v9;
  id v10;
  void *v11;
  id v12;
  id v13;
  BOOL v14;
  uint64_t v15;
  id v16;
  id v17;
  id v18;
  BOOL is_equal_unsafe;
  uint64_t v20;
  char *v21;
  NSObject *v22;
  os_log_type_t v23;
  const char *v24;
  char *backtrace_string;
  _BOOL4 v26;
  char *v27;
  _BOOL4 v28;
  const char *v29;
  void *v30;
  char *v31;
  NSObject *v32;
  os_log_type_t v33;
  void *v34;
  NSObject *v35;
  os_log_type_t v36;
  _BOOL4 v37;
  void *v38;
  os_log_type_t v39;
  void *v40;
  os_log_type_t v41;
  char *v42;
  os_log_type_t v43;
  _BOOL4 v44;
  char *v45;
  os_log_type_t v46;
  _BOOL4 v47;
  char *v48;
  os_log_type_t v49;
  _BOOL4 v50;
  char *v51;
  os_log_type_t v52;
  _BOOL4 v53;
  os_log_type_t v54;
  os_log_type_t v55;
  os_log_type_t v56;
  os_log_type_t v57;
  char v58;
  os_log_type_t type;
  _BYTE buf[24];
  void *v61;
  uint64_t v62;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_http_client_report_transfer_size";
    v21 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v58 = 0;
    if (!__nwlog_fault(v21, &type, &v58))
      goto LABEL_103;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v22 = __nwlog_obj();
      v23 = type;
      if (!os_log_type_enabled(v22, type))
        goto LABEL_103;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http_client_report_transfer_size";
      v24 = "%{public}s called with null protocol";
    }
    else if (v58)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v22 = __nwlog_obj();
      v23 = type;
      v26 = os_log_type_enabled(v22, type);
      if (backtrace_string)
      {
        if (v26)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_protocol_http_client_report_transfer_size";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v22, v23, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_103:
        if (!v21)
          return;
        goto LABEL_104;
      }
      if (!v26)
        goto LABEL_103;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http_client_report_transfer_size";
      v24 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      v22 = __nwlog_obj();
      v23 = type;
      if (!os_log_type_enabled(v22, type))
        goto LABEL_103;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http_client_report_transfer_size";
      v24 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    goto LABEL_102;
  }
  handle = (void **)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_http_client_report_transfer_size";
    v21 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v58 = 0;
    if (!__nwlog_fault(v21, &type, &v58))
      goto LABEL_103;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v58)
      {
        v22 = __nwlog_obj();
        v23 = type;
        if (!os_log_type_enabled(v22, type))
          goto LABEL_103;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_http_client_report_transfer_size";
        v24 = "%{public}s called with null http_client, backtrace limit exceeded";
        goto LABEL_102;
      }
      v27 = (char *)__nw_create_backtrace_string();
      v22 = __nwlog_obj();
      v23 = type;
      v28 = os_log_type_enabled(v22, type);
      if (!v27)
      {
        if (!v28)
          goto LABEL_103;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_http_client_report_transfer_size";
        v24 = "%{public}s called with null http_client, no backtrace";
        goto LABEL_102;
      }
      if (v28)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_protocol_http_client_report_transfer_size";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v27;
        v29 = "%{public}s called with null http_client, dumping backtrace:%{public}s";
LABEL_55:
        _os_log_impl(&dword_182FBE000, v22, v23, v29, buf, 0x16u);
      }
LABEL_56:
      free(v27);
      if (!v21)
        return;
LABEL_104:
      free(v21);
      return;
    }
    v22 = __nwlog_obj();
    v23 = type;
    if (!os_log_type_enabled(v22, type))
      goto LABEL_103;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_http_client_report_transfer_size";
    v24 = "%{public}s called with null http_client";
LABEL_102:
    _os_log_impl(&dword_182FBE000, v22, v23, v24, buf, 0xCu);
    goto LABEL_103;
  }
  if (!a3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_http_client_report_transfer_size";
    v21 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v58 = 0;
    if (!__nwlog_fault(v21, &type, &v58))
      goto LABEL_103;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v22 = __nwlog_obj();
      v23 = type;
      if (!os_log_type_enabled(v22, type))
        goto LABEL_103;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http_client_report_transfer_size";
      v24 = "%{public}s called with null size";
      goto LABEL_102;
    }
    if (!v58)
    {
      v22 = __nwlog_obj();
      v23 = type;
      if (!os_log_type_enabled(v22, type))
        goto LABEL_103;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http_client_report_transfer_size";
      v24 = "%{public}s called with null size, backtrace limit exceeded";
      goto LABEL_102;
    }
    v27 = (char *)__nw_create_backtrace_string();
    v22 = __nwlog_obj();
    v23 = type;
    v37 = os_log_type_enabled(v22, type);
    if (!v27)
    {
      if (!v37)
        goto LABEL_103;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http_client_report_transfer_size";
      v24 = "%{public}s called with null size, no backtrace";
      goto LABEL_102;
    }
    if (v37)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_protocol_http_client_report_transfer_size";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v27;
      v29 = "%{public}s called with null size, dumping backtrace:%{public}s";
      goto LABEL_55;
    }
    goto LABEL_56;
  }
  v7 = nw_http_client_metadata_copy_current_transaction_metadata(handle[72]);
  v8 = v7;
  v9 = a3;
  if (!a4)
  {
    v16 = v7;
    v11 = v16;
    if (v8)
    {
      v17 = v16;
      v18 = *((id *)v17 + 1);

      if (nw_protocol_copy_http_transaction_definition_onceToken != -1)
        dispatch_once(&nw_protocol_copy_http_transaction_definition_onceToken, &__block_literal_global_59_74256);
      is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v18, nw_protocol_copy_http_transaction_definition_definition);

      if (is_equal_unsafe)
      {
        *(_QWORD *)buf = MEMORY[0x1E0C809B0];
        *(_QWORD *)&buf[8] = 3221225472;
        *(_QWORD *)&buf[16] = __nw_http_transaction_metadata_increment_outbound_body_size_block_invoke;
        v61 = &__block_descriptor_40_e9_B16__0_v8l;
        v62 = v9;
        v20 = *((_QWORD *)v17 + 4);
        if (v20)
          __nw_http_transaction_metadata_increment_outbound_body_size_block_invoke((uint64_t)buf, v20);
        goto LABEL_18;
      }
      __nwlog_obj();
      v40 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_increment_outbound_body_size";
      v31 = (char *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v58 = 0;
      if (__nwlog_fault(v31, &type, &v58))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v35 = objc_claimAutoreleasedReturnValue();
          v41 = type;
          if (os_log_type_enabled(v35, type))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_increment_outbound_body_size";
            _os_log_impl(&dword_182FBE000, v35, v41, "%{public}s metadata must be http_transaction", buf, 0xCu);
          }
        }
        else if (v58)
        {
          v51 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v35 = objc_claimAutoreleasedReturnValue();
          v52 = type;
          v53 = os_log_type_enabled(v35, type);
          if (v51)
          {
            if (v53)
            {
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_increment_outbound_body_size";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v51;
              _os_log_impl(&dword_182FBE000, v35, v52, "%{public}s metadata must be http_transaction, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(v51);
            if (!v31)
              goto LABEL_18;
            goto LABEL_133;
          }
          if (v53)
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_increment_outbound_body_size";
            _os_log_impl(&dword_182FBE000, v35, v52, "%{public}s metadata must be http_transaction, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          __nwlog_obj();
          v35 = objc_claimAutoreleasedReturnValue();
          v57 = type;
          if (os_log_type_enabled(v35, type))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_increment_outbound_body_size";
            _os_log_impl(&dword_182FBE000, v35, v57, "%{public}s metadata must be http_transaction, backtrace limit exceeded", buf, 0xCu);
          }
        }
        goto LABEL_131;
      }
LABEL_132:
      if (!v31)
        goto LABEL_18;
      goto LABEL_133;
    }
    __nwlog_obj();
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_increment_outbound_body_size";
    v31 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v58 = 0;
    if (!__nwlog_fault(v31, &type, &v58))
      goto LABEL_132;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v35 = objc_claimAutoreleasedReturnValue();
      v36 = type;
      if (os_log_type_enabled(v35, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_increment_outbound_body_size";
        _os_log_impl(&dword_182FBE000, v35, v36, "%{public}s called with null metadata", buf, 0xCu);
      }
    }
    else if (v58)
    {
      v45 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v35 = objc_claimAutoreleasedReturnValue();
      v46 = type;
      v47 = os_log_type_enabled(v35, type);
      if (v45)
      {
        if (v47)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_increment_outbound_body_size";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v45;
          _os_log_impl(&dword_182FBE000, v35, v46, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v45);
        goto LABEL_132;
      }
      if (v47)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_increment_outbound_body_size";
        _os_log_impl(&dword_182FBE000, v35, v46, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v35 = objc_claimAutoreleasedReturnValue();
      v55 = type;
      if (os_log_type_enabled(v35, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_increment_outbound_body_size";
        _os_log_impl(&dword_182FBE000, v35, v55, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_131:

    goto LABEL_132;
  }
  v10 = v7;
  v11 = v10;
  if (!v8)
  {
    __nwlog_obj();
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_increment_inbound_body_size";
    v31 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v58 = 0;
    if (!__nwlog_fault(v31, &type, &v58))
      goto LABEL_127;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v32 = objc_claimAutoreleasedReturnValue();
      v33 = type;
      if (os_log_type_enabled(v32, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_increment_inbound_body_size";
        _os_log_impl(&dword_182FBE000, v32, v33, "%{public}s called with null metadata", buf, 0xCu);
      }
    }
    else if (v58)
    {
      v42 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v32 = objc_claimAutoreleasedReturnValue();
      v43 = type;
      v44 = os_log_type_enabled(v32, type);
      if (v42)
      {
        if (v44)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_increment_inbound_body_size";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v42;
          _os_log_impl(&dword_182FBE000, v32, v43, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v42);
        goto LABEL_127;
      }
      if (v44)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_increment_inbound_body_size";
        _os_log_impl(&dword_182FBE000, v32, v43, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v32 = objc_claimAutoreleasedReturnValue();
      v54 = type;
      if (os_log_type_enabled(v32, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_increment_inbound_body_size";
        _os_log_impl(&dword_182FBE000, v32, v54, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_126:

    goto LABEL_127;
  }
  v12 = v10;
  v13 = *((id *)v12 + 1);

  if (nw_protocol_copy_http_transaction_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_transaction_definition_onceToken, &__block_literal_global_59_74256);
  v14 = nw_protocol_definition_is_equal_unsafe((uint64_t)v13, nw_protocol_copy_http_transaction_definition_definition);

  if (v14)
  {
    *(_QWORD *)buf = MEMORY[0x1E0C809B0];
    *(_QWORD *)&buf[8] = 3221225472;
    *(_QWORD *)&buf[16] = __nw_http_transaction_metadata_increment_inbound_body_size_block_invoke;
    v61 = &__block_descriptor_40_e9_B16__0_v8l;
    v62 = v9;
    v15 = *((_QWORD *)v12 + 4);
    if (v15)
      __nw_http_transaction_metadata_increment_inbound_body_size_block_invoke((uint64_t)buf, v15);
    goto LABEL_18;
  }
  __nwlog_obj();
  v38 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_increment_inbound_body_size";
  v31 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v58 = 0;
  if (__nwlog_fault(v31, &type, &v58))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v32 = objc_claimAutoreleasedReturnValue();
      v39 = type;
      if (os_log_type_enabled(v32, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_increment_inbound_body_size";
        _os_log_impl(&dword_182FBE000, v32, v39, "%{public}s metadata must be http_transaction", buf, 0xCu);
      }
    }
    else if (v58)
    {
      v48 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v32 = objc_claimAutoreleasedReturnValue();
      v49 = type;
      v50 = os_log_type_enabled(v32, type);
      if (v48)
      {
        if (v50)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_increment_inbound_body_size";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v48;
          _os_log_impl(&dword_182FBE000, v32, v49, "%{public}s metadata must be http_transaction, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v48);
        if (!v31)
          goto LABEL_18;
        goto LABEL_133;
      }
      if (v50)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_increment_inbound_body_size";
        _os_log_impl(&dword_182FBE000, v32, v49, "%{public}s metadata must be http_transaction, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v32 = objc_claimAutoreleasedReturnValue();
      v56 = type;
      if (os_log_type_enabled(v32, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_increment_inbound_body_size";
        _os_log_impl(&dword_182FBE000, v32, v56, "%{public}s metadata must be http_transaction, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_126;
  }
LABEL_127:
  if (v31)
LABEL_133:
    free(v31);
LABEL_18:

  if (v8)
    os_release(v8);
}

uint64_t nw_protocol_http_client_create::$_2::__invoke(nw_protocol_http_client_create::$_2 *this, nw_protocol *a2, nw_protocol *a3)
{
  char *v4;
  NSObject *v5;
  os_log_type_t v6;
  const char *v7;
  char *v8;
  _BOOL4 v9;
  char *backtrace_string;
  _BOOL4 v11;
  char v12;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (this)
  {
    if (*((_QWORD *)this + 5))
      return 0;
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v15 = "operator()";
    v4 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v12 = 0;
    if (!__nwlog_fault(v4, &type, &v12))
      goto LABEL_32;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v5 = __nwlog_obj();
      v6 = type;
      if (!os_log_type_enabled(v5, type))
        goto LABEL_32;
      *(_DWORD *)buf = 136446210;
      v15 = "operator()";
      v7 = "%{public}s called with null http_client";
    }
    else if (v12)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v5 = __nwlog_obj();
      v6 = type;
      v11 = os_log_type_enabled(v5, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v15 = "operator()";
          v16 = 2082;
          v17 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v5, v6, "%{public}s called with null http_client, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_32:
        if (!v4)
          return 0;
LABEL_33:
        free(v4);
        return 0;
      }
      if (!v11)
        goto LABEL_32;
      *(_DWORD *)buf = 136446210;
      v15 = "operator()";
      v7 = "%{public}s called with null http_client, no backtrace";
    }
    else
    {
      v5 = __nwlog_obj();
      v6 = type;
      if (!os_log_type_enabled(v5, type))
        goto LABEL_32;
      *(_DWORD *)buf = 136446210;
      v15 = "operator()";
      v7 = "%{public}s called with null http_client, backtrace limit exceeded";
    }
LABEL_31:
    _os_log_impl(&dword_182FBE000, v5, v6, v7, buf, 0xCu);
    goto LABEL_32;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v15 = "operator()";
  v4 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v12 = 0;
  if (!__nwlog_fault(v4, &type, &v12))
    goto LABEL_32;
  if (type == OS_LOG_TYPE_FAULT)
  {
    v5 = __nwlog_obj();
    v6 = type;
    if (!os_log_type_enabled(v5, type))
      goto LABEL_32;
    *(_DWORD *)buf = 136446210;
    v15 = "operator()";
    v7 = "%{public}s called with null protocol";
    goto LABEL_31;
  }
  if (!v12)
  {
    v5 = __nwlog_obj();
    v6 = type;
    if (!os_log_type_enabled(v5, type))
      goto LABEL_32;
    *(_DWORD *)buf = 136446210;
    v15 = "operator()";
    v7 = "%{public}s called with null protocol, backtrace limit exceeded";
    goto LABEL_31;
  }
  v8 = (char *)__nw_create_backtrace_string();
  v5 = __nwlog_obj();
  v6 = type;
  v9 = os_log_type_enabled(v5, type);
  if (!v8)
  {
    if (!v9)
      goto LABEL_32;
    *(_DWORD *)buf = 136446210;
    v15 = "operator()";
    v7 = "%{public}s called with null protocol, no backtrace";
    goto LABEL_31;
  }
  if (v9)
  {
    *(_DWORD *)buf = 136446466;
    v15 = "operator()";
    v16 = 2082;
    v17 = v8;
    _os_log_impl(&dword_182FBE000, v5, v6, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v8);
  if (v4)
    goto LABEL_33;
  return 0;
}

uint64_t nw_protocol_http_client_create::$_3::__invoke(nw_protocol_http_client_create::$_3 *this, nw_protocol *a2, nw_protocol *a3)
{
  uint64_t v3;
  uint64_t v4;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  const char *v9;
  char *backtrace_string;
  _BOOL4 v11;
  const char *v12;
  _BOOL4 v13;
  _BOOL4 v14;
  char v15;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (!this)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v18 = "operator()";
    v6 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v15 = 0;
    if (!__nwlog_fault(v6, &type, &v15))
      goto LABEL_45;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v7 = __nwlog_obj();
      v8 = type;
      if (!os_log_type_enabled(v7, type))
        goto LABEL_45;
      *(_DWORD *)buf = 136446210;
      v18 = "operator()";
      v9 = "%{public}s called with null protocol";
LABEL_44:
      _os_log_impl(&dword_182FBE000, v7, v8, v9, buf, 0xCu);
      goto LABEL_45;
    }
    if (!v15)
    {
      v7 = __nwlog_obj();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "operator()";
        v9 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_44;
      }
      goto LABEL_45;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v7 = __nwlog_obj();
    v8 = type;
    v11 = os_log_type_enabled(v7, type);
    if (!backtrace_string)
    {
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v18 = "operator()";
        v9 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_44;
      }
      goto LABEL_45;
    }
    if (!v11)
      goto LABEL_31;
    *(_DWORD *)buf = 136446466;
    v18 = "operator()";
    v19 = 2082;
    v20 = backtrace_string;
    v12 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_30:
    _os_log_impl(&dword_182FBE000, v7, v8, v12, buf, 0x16u);
    goto LABEL_31;
  }
  v3 = *((_QWORD *)this + 5);
  if (!v3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v18 = "operator()";
    v6 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v15 = 0;
    if (!__nwlog_fault(v6, &type, &v15))
      goto LABEL_45;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v7 = __nwlog_obj();
      v8 = type;
      if (!os_log_type_enabled(v7, type))
        goto LABEL_45;
      *(_DWORD *)buf = 136446210;
      v18 = "operator()";
      v9 = "%{public}s called with null http_client";
      goto LABEL_44;
    }
    if (!v15)
    {
      v7 = __nwlog_obj();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "operator()";
        v9 = "%{public}s called with null http_client, backtrace limit exceeded";
        goto LABEL_44;
      }
      goto LABEL_45;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v7 = __nwlog_obj();
    v8 = type;
    v13 = os_log_type_enabled(v7, type);
    if (!backtrace_string)
    {
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        v18 = "operator()";
        v9 = "%{public}s called with null http_client, no backtrace";
        goto LABEL_44;
      }
      goto LABEL_45;
    }
    if (!v13)
      goto LABEL_31;
    *(_DWORD *)buf = 136446466;
    v18 = "operator()";
    v19 = 2082;
    v20 = backtrace_string;
    v12 = "%{public}s called with null http_client, dumping backtrace:%{public}s";
    goto LABEL_30;
  }
  if (a2)
  {
    v4 = 1;
    buf[0] = 1;
    nw_protocol_notify(a2, v3, 23);
    return v4;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v18 = "operator()";
  v6 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v15 = 0;
  if (!__nwlog_fault(v6, &type, &v15))
    goto LABEL_45;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v15)
    {
      v7 = __nwlog_obj();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "operator()";
        v9 = "%{public}s called with null other_protocol, backtrace limit exceeded";
        goto LABEL_44;
      }
      goto LABEL_45;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v7 = __nwlog_obj();
    v8 = type;
    v14 = os_log_type_enabled(v7, type);
    if (!backtrace_string)
    {
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        v18 = "operator()";
        v9 = "%{public}s called with null other_protocol, no backtrace";
        goto LABEL_44;
      }
      goto LABEL_45;
    }
    if (v14)
    {
      *(_DWORD *)buf = 136446466;
      v18 = "operator()";
      v19 = 2082;
      v20 = backtrace_string;
      v12 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
      goto LABEL_30;
    }
LABEL_31:
    free(backtrace_string);
    goto LABEL_45;
  }
  v7 = __nwlog_obj();
  v8 = type;
  if (os_log_type_enabled(v7, type))
  {
    *(_DWORD *)buf = 136446210;
    v18 = "operator()";
    v9 = "%{public}s called with null other_protocol";
    goto LABEL_44;
  }
LABEL_45:
  if (v6)
    free(v6);
  return 0;
}

uint64_t nw_protocol_http_client_create::$_4::__invoke(nw_protocol_http_client_create::$_4 *this, nw_protocol *a2, nw_protocol *a3)
{
  uint64_t v3;
  id v5;
  void *v6;
  id v7;
  id v8;
  BOOL is_equal_unsafe;
  uint64_t v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  const char *v14;
  char *backtrace_string;
  _BOOL4 v16;
  const char *v17;
  _BOOL4 v18;
  _BOOL4 v19;
  void *v20;
  char *v21;
  NSObject *v22;
  os_log_type_t v23;
  void *v24;
  os_log_type_t v25;
  char *v26;
  os_log_type_t v27;
  _BOOL4 v28;
  char *v29;
  os_log_type_t v30;
  _BOOL4 v31;
  os_log_type_t v32;
  os_log_type_t v33;
  char v34;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v37;
  __int16 v38;
  char *v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  if (!this)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v37 = "operator()";
    v11 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v34 = 0;
    if (!__nwlog_fault(v11, &type, &v34))
      goto LABEL_73;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v12 = __nwlog_obj();
      v13 = type;
      if (!os_log_type_enabled(v12, type))
        goto LABEL_73;
      *(_DWORD *)buf = 136446210;
      v37 = "operator()";
      v14 = "%{public}s called with null protocol";
      goto LABEL_72;
    }
    if (!v34)
    {
      v12 = __nwlog_obj();
      v13 = type;
      if (!os_log_type_enabled(v12, type))
        goto LABEL_73;
      *(_DWORD *)buf = 136446210;
      v37 = "operator()";
      v14 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_72;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v12 = __nwlog_obj();
    v13 = type;
    v16 = os_log_type_enabled(v12, type);
    if (!backtrace_string)
    {
      if (!v16)
        goto LABEL_73;
      *(_DWORD *)buf = 136446210;
      v37 = "operator()";
      v14 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_72;
    }
    if (!v16)
      goto LABEL_38;
    *(_DWORD *)buf = 136446466;
    v37 = "operator()";
    v38 = 2082;
    v39 = backtrace_string;
    v17 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_37:
    _os_log_impl(&dword_182FBE000, v12, v13, v17, buf, 0x16u);
    goto LABEL_38;
  }
  v3 = *((_QWORD *)this + 5);
  if (!v3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v37 = "operator()";
    v11 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v34 = 0;
    if (!__nwlog_fault(v11, &type, &v34))
      goto LABEL_73;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v12 = __nwlog_obj();
      v13 = type;
      if (!os_log_type_enabled(v12, type))
        goto LABEL_73;
      *(_DWORD *)buf = 136446210;
      v37 = "operator()";
      v14 = "%{public}s called with null http_client";
      goto LABEL_72;
    }
    if (!v34)
    {
      v12 = __nwlog_obj();
      v13 = type;
      if (!os_log_type_enabled(v12, type))
        goto LABEL_73;
      *(_DWORD *)buf = 136446210;
      v37 = "operator()";
      v14 = "%{public}s called with null http_client, backtrace limit exceeded";
      goto LABEL_72;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v12 = __nwlog_obj();
    v13 = type;
    v18 = os_log_type_enabled(v12, type);
    if (!backtrace_string)
    {
      if (!v18)
        goto LABEL_73;
      *(_DWORD *)buf = 136446210;
      v37 = "operator()";
      v14 = "%{public}s called with null http_client, no backtrace";
      goto LABEL_72;
    }
    if (!v18)
      goto LABEL_38;
    *(_DWORD *)buf = 136446466;
    v37 = "operator()";
    v38 = 2082;
    v39 = backtrace_string;
    v17 = "%{public}s called with null http_client, dumping backtrace:%{public}s";
    goto LABEL_37;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v37 = "operator()";
    v11 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v34 = 0;
    if (!__nwlog_fault(v11, &type, &v34))
      goto LABEL_73;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v12 = __nwlog_obj();
      v13 = type;
      if (!os_log_type_enabled(v12, type))
        goto LABEL_73;
      *(_DWORD *)buf = 136446210;
      v37 = "operator()";
      v14 = "%{public}s called with null other_protocol";
      goto LABEL_72;
    }
    if (!v34)
    {
      v12 = __nwlog_obj();
      v13 = type;
      if (!os_log_type_enabled(v12, type))
        goto LABEL_73;
      *(_DWORD *)buf = 136446210;
      v37 = "operator()";
      v14 = "%{public}s called with null other_protocol, backtrace limit exceeded";
      goto LABEL_72;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v12 = __nwlog_obj();
    v13 = type;
    v19 = os_log_type_enabled(v12, type);
    if (backtrace_string)
    {
      if (v19)
      {
        *(_DWORD *)buf = 136446466;
        v37 = "operator()";
        v38 = 2082;
        v39 = backtrace_string;
        v17 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
        goto LABEL_37;
      }
LABEL_38:
      free(backtrace_string);
      goto LABEL_73;
    }
    if (!v19)
      goto LABEL_73;
    *(_DWORD *)buf = 136446210;
    v37 = "operator()";
    v14 = "%{public}s called with null other_protocol, no backtrace";
LABEL_72:
    _os_log_impl(&dword_182FBE000, v12, v13, v14, buf, 0xCu);
LABEL_73:
    if (v11)
      free(v11);
    return 0;
  }
  if (*(nw_protocol **)(v3 + 48) != a2)
    return 0;
  v5 = *(id *)(v3 + 576);
  v6 = v5;
  if (!v5)
  {
    __nwlog_obj();
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v37 = "nw_http_client_metadata_mark_end";
    v21 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v34 = 0;
    if (!__nwlog_fault(v21, &type, &v34))
      goto LABEL_87;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v22 = objc_claimAutoreleasedReturnValue();
      v23 = type;
      if (os_log_type_enabled(v22, type))
      {
        *(_DWORD *)buf = 136446210;
        v37 = "nw_http_client_metadata_mark_end";
        _os_log_impl(&dword_182FBE000, v22, v23, "%{public}s called with null metadata", buf, 0xCu);
      }
    }
    else if (v34)
    {
      v26 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v22 = objc_claimAutoreleasedReturnValue();
      v27 = type;
      v28 = os_log_type_enabled(v22, type);
      if (v26)
      {
        if (v28)
        {
          *(_DWORD *)buf = 136446466;
          v37 = "nw_http_client_metadata_mark_end";
          v38 = 2082;
          v39 = v26;
          _os_log_impl(&dword_182FBE000, v22, v27, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v26);
        goto LABEL_87;
      }
      if (v28)
      {
        *(_DWORD *)buf = 136446210;
        v37 = "nw_http_client_metadata_mark_end";
        _os_log_impl(&dword_182FBE000, v22, v27, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v22 = objc_claimAutoreleasedReturnValue();
      v32 = type;
      if (os_log_type_enabled(v22, type))
      {
        *(_DWORD *)buf = 136446210;
        v37 = "nw_http_client_metadata_mark_end";
        _os_log_impl(&dword_182FBE000, v22, v32, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_86:

    goto LABEL_87;
  }
  v7 = v5;
  v8 = *((id *)v7 + 1);

  if (nw_protocol_copy_http_client_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_client_definition_onceToken, &__block_literal_global_52_74156);
  is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v8, nw_protocol_copy_http_client_definition_definition);

  if (is_equal_unsafe)
  {
    v10 = *((_QWORD *)v7 + 4);
    if (v10)
      __nw_http_client_metadata_mark_end_block_invoke((uint64_t)&__block_literal_global_55_74390, v10);
    goto LABEL_12;
  }
  __nwlog_obj();
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v37 = "nw_http_client_metadata_mark_end";
  v21 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v34 = 0;
  if (__nwlog_fault(v21, &type, &v34))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v22 = objc_claimAutoreleasedReturnValue();
      v25 = type;
      if (os_log_type_enabled(v22, type))
      {
        *(_DWORD *)buf = 136446210;
        v37 = "nw_http_client_metadata_mark_end";
        _os_log_impl(&dword_182FBE000, v22, v25, "%{public}s metadata must be http_client", buf, 0xCu);
      }
    }
    else if (v34)
    {
      v29 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v22 = objc_claimAutoreleasedReturnValue();
      v30 = type;
      v31 = os_log_type_enabled(v22, type);
      if (v29)
      {
        if (v31)
        {
          *(_DWORD *)buf = 136446466;
          v37 = "nw_http_client_metadata_mark_end";
          v38 = 2082;
          v39 = v29;
          _os_log_impl(&dword_182FBE000, v22, v30, "%{public}s metadata must be http_client, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v29);
        if (!v21)
          goto LABEL_12;
        goto LABEL_88;
      }
      if (v31)
      {
        *(_DWORD *)buf = 136446210;
        v37 = "nw_http_client_metadata_mark_end";
        _os_log_impl(&dword_182FBE000, v22, v30, "%{public}s metadata must be http_client, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v22 = objc_claimAutoreleasedReturnValue();
      v33 = type;
      if (os_log_type_enabled(v22, type))
      {
        *(_DWORD *)buf = 136446210;
        v37 = "nw_http_client_metadata_mark_end";
        _os_log_impl(&dword_182FBE000, v22, v33, "%{public}s metadata must be http_client, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_86;
  }
LABEL_87:
  if (v21)
LABEL_88:
    free(v21);
LABEL_12:

  return 1;
}

uint64_t nw_protocol_http_client_create::$_5::__invoke(nw_protocol_http_client_create::$_5 *this, nw_protocol *a2, nw_protocol *a3)
{
  return 1;
}

uint64_t nw_protocol_http_client_create::$_6::__invoke(nw_protocol_http_client_create::$_6 *this, nw_protocol *a2, nw_protocol *a3)
{
  uint64_t v3;
  void *parameters;
  void *v5;
  void *client_metadata_in_parameters;
  char v7;
  void *v8;
  _QWORD *v9;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  const char *v14;
  char *backtrace_string;
  _BOOL4 v16;
  const char *v17;
  _BOOL4 v18;
  _BOOL4 v19;
  char v20;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v23;
  __int16 v24;
  char *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if (!this)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v23 = "operator()";
    v11 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v20 = 0;
    if (!__nwlog_fault(v11, &type, &v20))
      goto LABEL_56;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v12 = __nwlog_obj();
      v13 = type;
      if (!os_log_type_enabled(v12, type))
        goto LABEL_56;
      *(_DWORD *)buf = 136446210;
      v23 = "operator()";
      v14 = "%{public}s called with null protocol";
LABEL_55:
      _os_log_impl(&dword_182FBE000, v12, v13, v14, buf, 0xCu);
      goto LABEL_56;
    }
    if (!v20)
    {
      v12 = __nwlog_obj();
      v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v23 = "operator()";
        v14 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_55;
      }
      goto LABEL_56;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v12 = __nwlog_obj();
    v13 = type;
    v16 = os_log_type_enabled(v12, type);
    if (!backtrace_string)
    {
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        v23 = "operator()";
        v14 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_55;
      }
      goto LABEL_56;
    }
    if (!v16)
      goto LABEL_42;
    *(_DWORD *)buf = 136446466;
    v23 = "operator()";
    v24 = 2082;
    v25 = backtrace_string;
    v17 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_41:
    _os_log_impl(&dword_182FBE000, v12, v13, v17, buf, 0x16u);
    goto LABEL_42;
  }
  v3 = *((_QWORD *)this + 5);
  if (!v3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v23 = "operator()";
    v11 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v20 = 0;
    if (!__nwlog_fault(v11, &type, &v20))
      goto LABEL_56;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v12 = __nwlog_obj();
      v13 = type;
      if (!os_log_type_enabled(v12, type))
        goto LABEL_56;
      *(_DWORD *)buf = 136446210;
      v23 = "operator()";
      v14 = "%{public}s called with null http_client";
      goto LABEL_55;
    }
    if (!v20)
    {
      v12 = __nwlog_obj();
      v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v23 = "operator()";
        v14 = "%{public}s called with null http_client, backtrace limit exceeded";
        goto LABEL_55;
      }
      goto LABEL_56;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v12 = __nwlog_obj();
    v13 = type;
    v18 = os_log_type_enabled(v12, type);
    if (!backtrace_string)
    {
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        v23 = "operator()";
        v14 = "%{public}s called with null http_client, no backtrace";
        goto LABEL_55;
      }
      goto LABEL_56;
    }
    if (!v18)
      goto LABEL_42;
    *(_DWORD *)buf = 136446466;
    v23 = "operator()";
    v24 = 2082;
    v25 = backtrace_string;
    v17 = "%{public}s called with null http_client, dumping backtrace:%{public}s";
    goto LABEL_41;
  }
  if (a2)
  {
    if (!*(_QWORD *)(v3 + 576))
    {
      parameters = (void *)nw_protocol_get_parameters((uint64_t)a2);
      if (parameters)
        v5 = os_retain(parameters);
      else
        v5 = 0;
      client_metadata_in_parameters = nw_http_messaging_options_find_or_create_client_metadata_in_parameters(v5, v3);
      v7 = *(_BYTE *)(v3 + 584);
      if ((v7 & 1) != 0)
      {
        v8 = *(void **)(v3 + 576);
        if (v8)
        {
          os_release(v8);
          v7 = *(_BYTE *)(v3 + 584);
        }
      }
      *(_QWORD *)(v3 + 576) = client_metadata_in_parameters;
      *(_BYTE *)(v3 + 584) = v7 | 1;
      if (v5)
        os_release(v5);
    }
    v9 = *(_QWORD **)(v3 + 48);
    if (v9)
    {
      nw_protocol_error(v9, v3);
      nw_protocol_disconnected(*(_QWORD **)(v3 + 48), v3);
      nw_protocol_set_output_handler(*(_QWORD *)(v3 + 48), 0);
      nw_protocol_set_input_handler(v3, 0);
    }
    return 1;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v23 = "operator()";
  v11 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v20 = 0;
  if (!__nwlog_fault(v11, &type, &v20))
    goto LABEL_56;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v20)
    {
      v12 = __nwlog_obj();
      v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v23 = "operator()";
        v14 = "%{public}s called with null other_protocol, backtrace limit exceeded";
        goto LABEL_55;
      }
      goto LABEL_56;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v12 = __nwlog_obj();
    v13 = type;
    v19 = os_log_type_enabled(v12, type);
    if (!backtrace_string)
    {
      if (v19)
      {
        *(_DWORD *)buf = 136446210;
        v23 = "operator()";
        v14 = "%{public}s called with null other_protocol, no backtrace";
        goto LABEL_55;
      }
      goto LABEL_56;
    }
    if (v19)
    {
      *(_DWORD *)buf = 136446466;
      v23 = "operator()";
      v24 = 2082;
      v25 = backtrace_string;
      v17 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
      goto LABEL_41;
    }
LABEL_42:
    free(backtrace_string);
    goto LABEL_56;
  }
  v12 = __nwlog_obj();
  v13 = type;
  if (os_log_type_enabled(v12, type))
  {
    *(_DWORD *)buf = 136446210;
    v23 = "operator()";
    v14 = "%{public}s called with null other_protocol";
    goto LABEL_55;
  }
LABEL_56:
  if (v11)
    free(v11);
  return 0;
}

void ___ZL37nw_protocol_http_client_get_callbacksv_block_invoke()
{
  qword_1EDCE3DE8 = (uint64_t)nw_protocol_common_get_input_frames;
  unk_1EDCE3DF0 = nw_protocol_common_get_output_frames;
  qword_1EDCE3E08 = (uint64_t)nw_protocol_common_get_parameters;
  unk_1EDCE3E10 = nw_protocol_common_get_path;
  qword_1EDCE3E18 = (uint64_t)nw_protocol_common_get_local_endpoint;
  unk_1EDCE3E20 = nw_protocol_common_get_remote_endpoint;
  qword_1EDCE3DA8 = (uint64_t)nw_protocol_common_replace_input_handler;
  unk_1EDCE3DB0 = nw_protocol_common_connect;
  qword_1EDCE3DB8 = (uint64_t)nw_protocol_common_disconnect;
  unk_1EDCE3DC0 = nw_protocol_common_connected;
  qword_1EDCE3DD8 = (uint64_t)nw_protocol_common_input_available;
  unk_1EDCE3DE0 = nw_protocol_common_output_available;
  qword_1EDCE3E58 = (uint64_t)nw_protocol_common_output_finished;
  unk_1EDCE3E60 = nw_protocol_common_get_output_local_endpoint;
  qword_1EDCE3EA0 = (uint64_t)nw_protocol_common_input_flush;
  qword_1EDCE3DC8 = (uint64_t)nw_protocol_common_disconnected;
  unk_1EDCE3DD0 = nw_protocol_common_error;
  qword_1EDCE3E90 = (uint64_t)nw_protocol_common_get_message_properties;
  unk_1EDCE3E98 = nw_protocol_common_reset;
  qword_1EDCE3E48 = (uint64_t)nw_protocol_common_supports_external_data;
  unk_1EDCE3E50 = nw_protocol_common_input_finished;
  qword_1EDCE3E68 = (uint64_t)nw_protocol_common_get_output_interface;
  unk_1EDCE3E70 = nw_protocol_common_waiting_for_output;
  qword_1EDCE3E28 = (uint64_t)nw_protocol_common_register_notification;
  unk_1EDCE3E30 = nw_protocol_common_unregister_notification;
  qword_1EDCE3E38 = (uint64_t)nw_protocol_common_notify;
  unk_1EDCE3E40 = nw_protocol_common_updated_path;
  qword_1EDCE3DF8 = (uint64_t)nw_protocol_common_finalize_output_frames;
  unk_1EDCE3E00 = nw_protocol_common_link_state;
  qword_1EDCE3E78 = (uint64_t)nw_protocol_http_client_copy_info;
  nw_protocol_http_client_get_callbacks(void)::protocol_callbacks = (uint64_t)nw_protocol_common_add_input_handler;
  unk_1EDCE3DA0 = nw_protocol_http_client_remove_input_handler;
}

uint64_t nw_protocol_http_client_copy_info(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  const char *v9;
  char *backtrace_string;
  _BOOL4 v11;
  const char *v12;
  _BOOL4 v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v17 = "nw_protocol_http_client_copy_info";
    v6 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v14 = 0;
    if (!__nwlog_fault(v6, &type, &v14))
      goto LABEL_36;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v7 = __nwlog_obj();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_protocol_http_client_copy_info";
        v9 = "%{public}s called with null protocol";
LABEL_35:
        _os_log_impl(&dword_182FBE000, v7, v8, v9, buf, 0xCu);
      }
LABEL_36:
      if (v6)
        free(v6);
      return 0;
    }
    if (!v14)
    {
      v7 = __nwlog_obj();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_protocol_http_client_copy_info";
        v9 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_35;
      }
      goto LABEL_36;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v7 = __nwlog_obj();
    v8 = type;
    v11 = os_log_type_enabled(v7, type);
    if (!backtrace_string)
    {
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_protocol_http_client_copy_info";
        v9 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_35;
      }
      goto LABEL_36;
    }
    if (v11)
    {
      *(_DWORD *)buf = 136446466;
      v17 = "nw_protocol_http_client_copy_info";
      v18 = 2082;
      v19 = backtrace_string;
      v12 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_25:
      _os_log_impl(&dword_182FBE000, v7, v8, v12, buf, 0x16u);
    }
LABEL_26:
    free(backtrace_string);
    goto LABEL_36;
  }
  v2 = *(_QWORD *)(a1 + 40);
  if (!v2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v17 = "nw_protocol_http_client_copy_info";
    v6 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v14 = 0;
    if (!__nwlog_fault(v6, &type, &v14))
      goto LABEL_36;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v7 = __nwlog_obj();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_protocol_http_client_copy_info";
        v9 = "%{public}s called with null http_client";
        goto LABEL_35;
      }
      goto LABEL_36;
    }
    if (!v14)
    {
      v7 = __nwlog_obj();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_protocol_http_client_copy_info";
        v9 = "%{public}s called with null http_client, backtrace limit exceeded";
        goto LABEL_35;
      }
      goto LABEL_36;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v7 = __nwlog_obj();
    v8 = type;
    v13 = os_log_type_enabled(v7, type);
    if (!backtrace_string)
    {
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_protocol_http_client_copy_info";
        v9 = "%{public}s called with null http_client, no backtrace";
        goto LABEL_35;
      }
      goto LABEL_36;
    }
    if (v13)
    {
      *(_DWORD *)buf = 136446466;
      v17 = "nw_protocol_http_client_copy_info";
      v18 = 2082;
      v19 = backtrace_string;
      v12 = "%{public}s called with null http_client, dumping backtrace:%{public}s";
      goto LABEL_25;
    }
    goto LABEL_26;
  }
  v3 = *(_QWORD *)(a1 + 32);
  if (a2 == 255)
  {
    v4 = nw_protocol_copy_info(v3, 255);
    if (!v4)
      v4 = nw_array_create();
    nw_array_append(v4, *(void **)(v2 + 576));
    return v4;
  }
  return nw_protocol_copy_info(v3, a2);
}

uint64_t nw_protocol_http_client_remove_input_handler(nw_protocol *a1, nw_protocol *a2, uint64_t a3)
{
  nw_protocol *handle;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  const char *v8;
  char *backtrace_string;
  _BOOL4 v10;
  const char *v11;
  _BOOL4 v12;
  _QWORD v13[5];
  char v14;
  _QWORD v15[5];
  char v16;
  os_log_type_t v17;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    handle = (nw_protocol *)a1->handle;
    if (handle)
    {
      if (handle->default_input_handler == a2)
      {
        v15[0] = MEMORY[0x1E0C809B0];
        v15[1] = 0x40000000;
        v15[2] = ___ZL44nw_protocol_http_client_remove_input_handlerP11nw_protocolS0_b_block_invoke;
        v15[3] = &__block_descriptor_tmp_6_29805;
        v15[4] = handle;
        v13[0] = MEMORY[0x1E0C809B0];
        v13[1] = 0x40000000;
        v13[2] = ___ZL44nw_protocol_http_client_remove_input_handlerP11nw_protocolS0_b_block_invoke_2;
        v13[3] = &__block_descriptor_tmp_7_29806;
        v14 = a3;
        v13[4] = handle;
        return nw_protocol_common_remove_input_handler_with_cleanup_blocks(a1, a2, a3, (uint64_t)v15, (uint64_t)v13);
      }
      else
      {
        if (a2->output_handler == handle)
          a2->output_handler = 0;
        return 1;
      }
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v19 = "nw_protocol_http_client_remove_input_handler";
    v5 = (char *)_os_log_send_and_compose_impl();
    v17 = OS_LOG_TYPE_ERROR;
    v16 = 0;
    if (!__nwlog_fault(v5, &v17, &v16))
      goto LABEL_36;
    if (v17 == OS_LOG_TYPE_FAULT)
    {
      v6 = __nwlog_obj();
      v7 = v17;
      if (os_log_type_enabled(v6, v17))
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_protocol_http_client_remove_input_handler";
        v8 = "%{public}s called with null http_client";
        goto LABEL_35;
      }
      goto LABEL_36;
    }
    if (!v16)
    {
      v6 = __nwlog_obj();
      v7 = v17;
      if (os_log_type_enabled(v6, v17))
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_protocol_http_client_remove_input_handler";
        v8 = "%{public}s called with null http_client, backtrace limit exceeded";
        goto LABEL_35;
      }
      goto LABEL_36;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v6 = __nwlog_obj();
    v7 = v17;
    v12 = os_log_type_enabled(v6, v17);
    if (!backtrace_string)
    {
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_protocol_http_client_remove_input_handler";
        v8 = "%{public}s called with null http_client, no backtrace";
        goto LABEL_35;
      }
      goto LABEL_36;
    }
    if (v12)
    {
      *(_DWORD *)buf = 136446466;
      v19 = "nw_protocol_http_client_remove_input_handler";
      v20 = 2082;
      v21 = backtrace_string;
      v11 = "%{public}s called with null http_client, dumping backtrace:%{public}s";
      goto LABEL_25;
    }
    goto LABEL_26;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v19 = "nw_protocol_http_client_remove_input_handler";
  v5 = (char *)_os_log_send_and_compose_impl();
  v17 = OS_LOG_TYPE_ERROR;
  v16 = 0;
  if (!__nwlog_fault(v5, &v17, &v16))
    goto LABEL_36;
  if (v17 != OS_LOG_TYPE_FAULT)
  {
    if (!v16)
    {
      v6 = __nwlog_obj();
      v7 = v17;
      if (os_log_type_enabled(v6, v17))
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_protocol_http_client_remove_input_handler";
        v8 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_35;
      }
      goto LABEL_36;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v6 = __nwlog_obj();
    v7 = v17;
    v10 = os_log_type_enabled(v6, v17);
    if (!backtrace_string)
    {
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_protocol_http_client_remove_input_handler";
        v8 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_35;
      }
      goto LABEL_36;
    }
    if (v10)
    {
      *(_DWORD *)buf = 136446466;
      v19 = "nw_protocol_http_client_remove_input_handler";
      v20 = 2082;
      v21 = backtrace_string;
      v11 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_25:
      _os_log_impl(&dword_182FBE000, v6, v7, v11, buf, 0x16u);
    }
LABEL_26:
    free(backtrace_string);
    goto LABEL_36;
  }
  v6 = __nwlog_obj();
  v7 = v17;
  if (os_log_type_enabled(v6, v17))
  {
    *(_DWORD *)buf = 136446210;
    v19 = "nw_protocol_http_client_remove_input_handler";
    v8 = "%{public}s called with null protocol";
LABEL_35:
    _os_log_impl(&dword_182FBE000, v6, v7, v8, buf, 0xCu);
  }
LABEL_36:
  if (v5)
    free(v5);
  return 0;
}

void ___ZL44nw_protocol_http_client_remove_input_handlerP11nw_protocolS0_b_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  const void *v5;
  char v6;
  const void *v7;
  NSObject *v8;
  int v9;
  const char *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  if (gLogDatapath)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v8 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
    {
      v9 = 136446210;
      v10 = "nw_protocol_plugin_metadata_teardown";
      _os_log_impl(&dword_182FBE000, v8, OS_LOG_TYPE_DEBUG, "%{public}s called", (uint8_t *)&v9, 0xCu);
    }
  }
  nw_protocol_plugin_metadata_reset((uint64_t *)(v2 + 200));
  *(_QWORD *)(v2 + 328) = 0;
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_BYTE *)(v3 + 464);
  if ((v4 & 1) != 0)
  {
    v5 = *(const void **)(v3 + 456);
    if (v5)
    {
      _Block_release(v5);
      v4 = *(_BYTE *)(v3 + 464);
    }
  }
  *(_QWORD *)(v3 + 456) = 0;
  *(_BYTE *)(v3 + 464) = v4 | 1;
  v6 = *(_BYTE *)(v3 + 512);
  if ((v6 & 1) != 0)
  {
    v7 = *(const void **)(v3 + 504);
    if (v7)
    {
      _Block_release(v7);
      v6 = *(_BYTE *)(v3 + 512);
    }
  }
  *(_QWORD *)(v3 + 504) = 0;
  *(_BYTE *)(v3 + 512) = v6 | 1;
}

void ___ZL44nw_protocol_http_client_remove_input_handlerP11nw_protocolS0_b_block_invoke_2(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  NSObject *v8;
  int v9;
  const char *v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  const char *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 40))
  {
    v1 = *(_QWORD *)(a1 + 32);
    if ((*(_BYTE *)(v1 + 198) & 1) == 0)
    {
      if (gLogDatapath)
      {
        v8 = __nwlog_obj();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
        {
          v9 = 136446722;
          v10 = "nw_http_client_destroy";
          v11 = 2082;
          v12 = v1 + 114;
          v13 = 2080;
          v14 = " ";
          _os_log_impl(&dword_182FBE000, v8, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%scalled", (uint8_t *)&v9, 0x20u);
        }
      }
    }
    if (*(_DWORD *)(v1 + 552))
    {
      *(_BYTE *)(v1 + 556) |= 0x40u;
      if ((*(_BYTE *)(v1 + 198) & 1) == 0 && gLogDatapath)
      {
        v2 = __nwlog_obj();
        if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
        {
          v9 = 136446722;
          v10 = "nw_http_client_destroy";
          v11 = 2082;
          v12 = v1 + 114;
          v13 = 2080;
          v14 = " ";
          _os_log_impl(&dword_182FBE000, v2, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sdeferring destroy because the request is being reissued", (uint8_t *)&v9, 0x20u);
        }
      }
    }
    else
    {
      if ((*(_BYTE *)(v1 + 584) & 1) != 0)
      {
        v3 = *(void **)(v1 + 576);
        if (v3)
          os_release(v3);
      }
      *(_QWORD *)(v1 + 576) = 0;
      if ((*(_BYTE *)(v1 + 568) & 1) != 0)
      {
        v4 = *(void **)(v1 + 560);
        if (v4)
          os_release(v4);
      }
      *(_QWORD *)(v1 + 560) = 0;
      nw_protocol_plugin_retry::~nw_protocol_plugin_retry((nw_protocol_plugin_retry *)(v1 + 344));
      if ((*(_BYTE *)(v1 + 288) & 1) != 0)
      {
        v5 = *(void **)(v1 + 280);
        if (v5)
          os_release(v5);
      }
      *(_QWORD *)(v1 + 280) = 0;
      if ((*(_BYTE *)(v1 + 272) & 1) != 0)
      {
        v6 = *(void **)(v1 + 264);
        if (v6)
          os_release(v6);
      }
      *(_QWORD *)(v1 + 264) = 0;
      if ((*(_BYTE *)(v1 + 256) & 1) != 0)
      {
        v7 = *(void **)(v1 + 248);
        if (v7)
          os_release(v7);
      }
      free((void *)v1);
    }
  }
}

double __nw_protocol_http_client_identifier_block_invoke()
{
  double result;

  strcpy((char *)&nw_protocol_http_client_identifier::protocol_identifier, "http_client");
  *(_QWORD *)&result = 0x200000005;
  qword_1EDCE3D08 = 0x200000005;
  return result;
}

BOOL nw_nsstring(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  void *v3;
  _BOOL8 result;

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", a1);
  v1 = objc_claimAutoreleasedReturnValue();
  if (v1)
    return v1;
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v2 = (id)gLogObj;
  os_log_type_enabled(v2, OS_LOG_TYPE_ERROR);
  v3 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v3);
  if (!result)
  {
    free(v3);
    return v1;
  }
  __break(1u);
  return result;
}

void nw_tcp_respond_reset(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  const char *v18;
  NSObject *v19;
  os_log_type_t v20;
  char *backtrace_string;
  _BOOL4 v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  unsigned int v27;
  unsigned __int16 *v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  __int16 v33;
  int v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint32_t v38;
  NSObject *v39;
  os_log_type_t v40;
  int v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  unsigned int v50;
  NSObject *v51;
  char *v52;
  _BOOL4 v53;
  unsigned int v54;
  __int16 v55;
  uint64_t v56;
  __int16 v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  char v61;
  os_log_type_t type[8];
  os_log_type_t *v63;
  os_log_type_t v64;
  unsigned int v65;
  uint8_t buf[4];
  const char *v67;
  __int16 v68;
  _BYTE v69[14];
  __int16 v70;
  char *v71;
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  v65 = 0;
  v9 = nw_frame_unclaimed_bytes(a1, &v65);
  if (v65 <= 0x13)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446722;
    v67 = "nw_tcp_respond_reset";
    v68 = 1024;
    *(_DWORD *)v69 = v65;
    *(_WORD *)&v69[4] = 2048;
    *(_QWORD *)&v69[6] = 20;
    v10 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    v64 = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v10, type, &v64))
      goto LABEL_39;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v11 = gLogObj;
      v12 = type[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, type[0]))
        goto LABEL_39;
      *(_DWORD *)buf = 136446722;
      v67 = "nw_tcp_respond_reset";
      v68 = 1024;
      *(_DWORD *)v69 = v65;
      *(_WORD *)&v69[4] = 2048;
      *(_QWORD *)&v69[6] = 20;
      v13 = "%{public}s Frame is invalid, only has %u bytes, required: %zu";
LABEL_37:
      v36 = v11;
      v37 = v12;
      v38 = 28;
LABEL_38:
      _os_log_impl(&dword_182FBE000, v36, v37, v13, buf, v38);
      goto LABEL_39;
    }
    if (v64 == OS_LOG_TYPE_DEFAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v11 = gLogObj;
      v12 = type[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, type[0]))
        goto LABEL_39;
      *(_DWORD *)buf = 136446722;
      v67 = "nw_tcp_respond_reset";
      v68 = 1024;
      *(_DWORD *)v69 = v65;
      *(_WORD *)&v69[4] = 2048;
      *(_QWORD *)&v69[6] = 20;
      v13 = "%{public}s Frame is invalid, only has %u bytes, required: %zu, backtrace limit exceeded";
      goto LABEL_37;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v11 = gLogObj;
    v12 = type[0];
    v22 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
    if (!backtrace_string)
    {
      if (!v22)
        goto LABEL_39;
      *(_DWORD *)buf = 136446722;
      v67 = "nw_tcp_respond_reset";
      v68 = 1024;
      *(_DWORD *)v69 = v65;
      *(_WORD *)&v69[4] = 2048;
      *(_QWORD *)&v69[6] = 20;
      v13 = "%{public}s Frame is invalid, only has %u bytes, required: %zu, no backtrace";
      goto LABEL_37;
    }
    if (v22)
    {
      *(_DWORD *)buf = 136446978;
      v67 = "nw_tcp_respond_reset";
      v68 = 1024;
      *(_DWORD *)v69 = v65;
      *(_WORD *)&v69[4] = 2048;
      *(_QWORD *)&v69[6] = 20;
      v70 = 2082;
      v71 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s Frame is invalid, only has %u bytes, required: %zu, dumping backtrace:%{public}s", buf, 0x26u);
    }
    free(backtrace_string);
LABEL_39:
    if (!v10)
      return;
    goto LABEL_40;
  }
  v14 = v9;
  if ((*(_BYTE *)(v9 + 13) & 4) != 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v17 = gLogObj;
    if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      return;
    *(_DWORD *)buf = 136446210;
    v67 = "nw_tcp_respond_reset";
    v18 = "%{public}s Attempting to send a RST in reply to a RST";
    v19 = v17;
    v20 = OS_LOG_TYPE_ERROR;
    goto LABEL_34;
  }
  v15 = 20;
  v65 = 20;
  v16 = *(unsigned __int8 *)(a5 + 1);
  if (v16 == 30)
  {
    v15 = 60;
  }
  else
  {
    if (v16 != 2)
      goto LABEL_21;
    v15 = 40;
  }
  v65 = v15;
LABEL_21:
  *(_QWORD *)type = 0;
  v63 = type;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, os_log_type_t *))(*(_QWORD *)(a2 + 24) + 88))(a2, a3, v15, v15, 1, type) != 1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v35 = gLogObj;
    if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
      return;
    *(_DWORD *)buf = 136446210;
    v67 = "nw_tcp_respond_reset";
    v18 = "%{public}s Failed to get output frame to send RST";
    v19 = v35;
    v20 = OS_LOG_TYPE_INFO;
LABEL_34:
    _os_log_impl(&dword_182FBE000, v19, v20, v18, buf, 0xCu);
    return;
  }
  v23 = *(_QWORD *)type;
  if (*(_QWORD *)type)
  {
    v24 = *(unsigned __int8 *)(a5 + 1);
    if (v24 != 30)
    {
      if (v24 != 2)
      {
        v33 = 0;
LABEL_55:
        if (*(_QWORD *)(v23 + 112)
          && ((*(_WORD *)(v23 + 204) & 0x100) == 0
           || !g_channel_check_validity
           || g_channel_check_validity(v23, *(_QWORD *)(v23 + 88))))
        {
          v45 = *(_DWORD *)(v23 + 52);
          if (v45)
          {
            v46 = *(_QWORD *)(v23 + 112);
            if (v46)
            {
              v47 = *(unsigned int *)(v23 + 56);
              if ((v45 - (v47 + *(_DWORD *)(v23 + 60))) > 0x13)
              {
                v48 = v46 + v47;
                *(_DWORD *)(v48 + 16) = 0;
                *(_QWORD *)v48 = 0;
                *(_QWORD *)(v48 + 8) = 0;
                *(_WORD *)v48 = *(_WORD *)(v14 + 2);
                *(_WORD *)(v48 + 2) = *(_WORD *)v14;
                *(_BYTE *)(v48 + 13) = 4;
                *(_BYTE *)(v48 + 12) = 80;
                *(_WORD *)(v48 + 16) = v33;
                if ((*(_BYTE *)(v14 + 13) & 0x10) != 0)
                {
                  *(_DWORD *)(v48 + 4) = *(_DWORD *)(v14 + 8);
                }
                else
                {
                  v49 = bswap32(bswap32(*(_DWORD *)(v14 + 4)) + 1);
                  if ((*(_BYTE *)(v14 + 13) & 2) != 0)
                    v50 = v49;
                  else
                    v50 = *(_DWORD *)(v14 + 4);
                  *(_DWORD *)(v48 + 8) = v50;
                  *(_BYTE *)(v48 + 13) = 20;
                }
                v54 = 20;
                v55 = MEMORY[0x186DB4AE4](v48, 20, 0);
                if (v55 == -1)
                  v57 = -1;
                else
                  v57 = ~v55;
                *(_WORD *)(v48 + 16) = v57;
                nw_frame_claim(v23, v56, 20, 0);
                nw_frame_collapse(v23);
                nw_frame_unclaim(v23, v58, 0x14u, 0);
                v60 = *(unsigned __int8 *)(a5 + 1);
                if (v60 != 2)
                {
                  if (v60 != 30)
                  {
LABEL_96:
                    (*(void (**)(uint64_t, os_log_type_t *))(*(_QWORD *)(a2 + 24) + 96))(a2, type);
                    return;
                  }
                  v54 = 40;
                }
                nw_frame_unclaim(v23, v59, v54, 0);
                goto LABEL_96;
              }
            }
          }
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v51 = gLogObj;
        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446722;
          v67 = "nw_tcp_respond_reset";
          v68 = 1024;
          *(_DWORD *)v69 = v65;
          *(_WORD *)&v69[4] = 2048;
          *(_QWORD *)&v69[6] = 20;
LABEL_81:
          _os_log_impl(&dword_182FBE000, v51, OS_LOG_TYPE_ERROR, "%{public}s nw_frame_unclaimed_bytes reports %u, need at least %zu", buf, 0x1Cu);
          goto LABEL_82;
        }
        goto LABEL_82;
      }
      if (*(_QWORD *)(*(_QWORD *)type + 112)
        && ((*(_WORD *)(*(_QWORD *)type + 204) & 0x100) == 0
         || !g_channel_check_validity
         || g_channel_check_validity(*(_QWORD *)type, *(_QWORD *)(*(_QWORD *)type + 88)))
        && (v25 = *(_DWORD *)(v23 + 52)) != 0)
      {
        v26 = *(unsigned int *)(v23 + 56);
        v27 = v25 - (v26 + *(_DWORD *)(v23 + 60));
        if (v27 > 0x13)
        {
          v28 = (unsigned __int16 *)(*(_QWORD *)(v23 + 112) + v26);
          *(_QWORD *)v28 = 0;
          *((_QWORD *)v28 + 1) = 0;
          *((_DWORD *)v28 + 4) = 0;
          *(_BYTE *)v28 = 69;
          *(_DWORD *)(v28 + 3) = 117375040;
          v29 = *(_DWORD *)(a4 + 4);
          *((_DWORD *)v28 + 3) = v29;
          v30 = *(_DWORD *)(a5 + 4);
          *((_DWORD *)v28 + 4) = v30;
          v28[1] = 10240;
          v31 = *v28 + (unsigned __int16)v29 + HIWORD(v29) + (unsigned __int16)v30 + HIWORD(v30) + 12095;
          v28[5] = ~(HIWORD(v31) + v31 + ((HIWORD(v31) + (unsigned __int16)v31) >> 16));
          v33 = in_pseudo(v30, v29, 0x1A000000u);
          v34 = 20;
LABEL_53:
          nw_frame_claim(v23, v32, v34, 0);
          goto LABEL_55;
        }
      }
      else
      {
        v27 = 0;
      }
      v51 = __nwlog_obj();
      if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446722;
        v67 = "nw_tcp_respond_reset";
        v68 = 1024;
        *(_DWORD *)v69 = v27;
        *(_WORD *)&v69[4] = 2048;
        *(_QWORD *)&v69[6] = 20;
        goto LABEL_81;
      }
LABEL_82:
      nw_frame_finalize(v23);
      return;
    }
    if (*(_QWORD *)(*(_QWORD *)type + 112)
      && ((*(_WORD *)(*(_QWORD *)type + 204) & 0x100) == 0
       || !g_channel_check_validity
       || g_channel_check_validity(*(_QWORD *)type, *(_QWORD *)(*(_QWORD *)type + 88)))
      && (v41 = *(_DWORD *)(v23 + 52)) != 0)
    {
      v42 = *(unsigned int *)(v23 + 56);
      v43 = v41 - (v42 + *(_DWORD *)(v23 + 60));
      if (v43 > 0x27)
      {
        v44 = *(_QWORD *)(v23 + 112) + v42;
        *(_QWORD *)(v44 + 32) = 0;
        *(_OWORD *)v44 = 0u;
        *(_OWORD *)(v44 + 16) = 0u;
        *(_DWORD *)(v44 + 4) = -16378880;
        *(_OWORD *)(v44 + 8) = *(_OWORD *)(a4 + 8);
        *(_OWORD *)(v44 + 24) = *(_OWORD *)(a5 + 8);
        *(_BYTE *)v44 = 96;
        v33 = in6_pseudo((unsigned __int16 *)(a4 + 8), (unsigned __int16 *)(a5 + 8), 436207616);
        v34 = 40;
        goto LABEL_53;
      }
    }
    else
    {
      v43 = 0;
    }
    v51 = __nwlog_obj();
    if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v67 = "nw_tcp_respond_reset";
      v68 = 1024;
      *(_DWORD *)v69 = v43;
      *(_WORD *)&v69[4] = 2048;
      *(_QWORD *)&v69[6] = 40;
      goto LABEL_81;
    }
    goto LABEL_82;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)buf = 136446210;
  v67 = "nw_tcp_respond_reset";
  v10 = (char *)_os_log_send_and_compose_impl();
  v64 = OS_LOG_TYPE_ERROR;
  v61 = 0;
  if (!__nwlog_fault(v10, &v64, &v61))
    goto LABEL_39;
  if (v64 == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v39 = gLogObj;
    v40 = v64;
    if (!os_log_type_enabled((os_log_t)gLogObj, v64))
      goto LABEL_39;
    *(_DWORD *)buf = 136446210;
    v67 = "nw_tcp_respond_reset";
    v13 = "%{public}s nw_frame_array_first failed";
    goto LABEL_87;
  }
  if (!v61)
  {
    v39 = __nwlog_obj();
    v40 = v64;
    if (!os_log_type_enabled(v39, v64))
      goto LABEL_39;
    *(_DWORD *)buf = 136446210;
    v67 = "nw_tcp_respond_reset";
    v13 = "%{public}s nw_frame_array_first failed, backtrace limit exceeded";
    goto LABEL_87;
  }
  v52 = (char *)__nw_create_backtrace_string();
  v39 = __nwlog_obj();
  v40 = v64;
  v53 = os_log_type_enabled(v39, v64);
  if (!v52)
  {
    if (!v53)
      goto LABEL_39;
    *(_DWORD *)buf = 136446210;
    v67 = "nw_tcp_respond_reset";
    v13 = "%{public}s nw_frame_array_first failed, no backtrace";
LABEL_87:
    v36 = v39;
    v37 = v40;
    v38 = 12;
    goto LABEL_38;
  }
  if (v53)
  {
    *(_DWORD *)buf = 136446466;
    v67 = "nw_tcp_respond_reset";
    v68 = 2082;
    *(_QWORD *)v69 = v52;
    _os_log_impl(&dword_182FBE000, v39, v40, "%{public}s nw_frame_array_first failed, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v52);
  if (v10)
LABEL_40:
    free(v10);
}

uint64_t __nw_quic_parse_dispatch_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, const unsigned __int8 *a4, unint64_t a5)
{
  return nw_quic_parse_internal(a4, a5, *(unsigned __int8 *)(a1 + 40), *(dispatch_data_t **)(a1 + 32));
}

uint64_t nw_quic_parse_internal(const unsigned __int8 *a1, unint64_t a2, size_t size, dispatch_data_t *a4)
{
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  const char *v8;
  char *backtrace_string;
  _BOOL4 v10;
  char v11;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (!(_DWORD)size)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v14 = "nw_quic_parse_internal";
    v5 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v11 = 0;
    if (!__nwlog_fault(v5, &type, &v11))
      goto LABEL_19;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v6 = __nwlog_obj();
      v7 = type;
      if (!os_log_type_enabled(v6, type))
        goto LABEL_19;
      *(_DWORD *)buf = 136446210;
      v14 = "nw_quic_parse_internal";
      v8 = "%{public}s called with null connection_id_length";
    }
    else if (v11)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v6 = __nwlog_obj();
      v7 = type;
      v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          v14 = "nw_quic_parse_internal";
          v15 = 2082;
          v16 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null connection_id_length, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_19;
      }
      if (!v10)
      {
LABEL_19:
        if (v5)
          free(v5);
        return 0;
      }
      *(_DWORD *)buf = 136446210;
      v14 = "nw_quic_parse_internal";
      v8 = "%{public}s called with null connection_id_length, no backtrace";
    }
    else
    {
      v6 = __nwlog_obj();
      v7 = type;
      if (!os_log_type_enabled(v6, type))
        goto LABEL_19;
      *(_DWORD *)buf = 136446210;
      v14 = "nw_quic_parse_internal";
      v8 = "%{public}s called with null connection_id_length, backtrace limit exceeded";
    }
    _os_log_impl(&dword_182FBE000, v6, v7, v8, buf, 0xCu);
    goto LABEL_19;
  }
  if ((unint64_t)size + 21 <= a2 && (*(char *)a1 & 0x80000000) == 0)
  {
    *a4 = dispatch_data_create(a1 + 1, size, 0, 0);
    return 1;
  }
  return 0;
}

void sub_1836594C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZL48nw_endpoint_resolver_update_path_resolver_lockedP30NWConcrete_nw_endpoint_handler_block_invoke(uint64_t a1, unsigned __int8 *uu)
{
  uint64_t v4;
  void *v5;
  id v6;
  NWConcrete_nw_path_flow_registration *flow;
  void *v8;
  int minimize_logging;
  char logging_disabled;
  NSObject *v11;
  const char *v12;
  const char *v13;
  nw_endpoint_t v14;
  const char *v15;
  const char *v16;
  const char *v17;
  id v18;
  const char *v19;
  const char *v20;
  nw_endpoint_t v21;
  const char *v22;
  const char *v23;
  const char *v24;
  id v25;
  const char *id_string;
  const char *v27;
  nw_endpoint_t v28;
  const char *logging_description;
  const char *v30;
  const char *v31;
  id v32;
  int v33;
  const char *v34;
  __int16 v35;
  const char *v36;
  __int16 v37;
  const char *v38;
  __int16 v39;
  const char *v40;
  __int16 v41;
  const char *v42;
  __int16 v43;
  const char *v44;
  __int16 v45;
  id v46;
  __int16 v47;
  char *v48;
  char out[40];
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  memset(out, 0, 37);
  uuid_unparse(uu, out);
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 80);
  if (!v4 || (v5 = nw_dictionary_copy_value(v4, (uint64_t)out)) == 0)
  {
    v6 = nw_endpoint_handler_copy_association(*(void **)(a1 + 48), 0);
    flow = nw_association_create_flow((uint64_t)v6, 0, 0, 0, 1, uu, 0);
    nw_dictionary_set_value(*(_QWORD *)(a1 + 40), out, flow);
    v8 = *(void **)(a1 + 48);
    if (flow)
    {
      minimize_logging = nw_endpoint_handler_get_minimize_logging(v8);
      logging_disabled = nw_endpoint_handler_get_logging_disabled(*(void **)(a1 + 48));
      if (minimize_logging)
      {
        if ((logging_disabled & 1) != 0)
          goto LABEL_17;
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v11 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
        {
          id_string = nw_endpoint_handler_get_id_string(*(void **)(a1 + 48));
          v27 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 48));
          v28 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 48));
          logging_description = nw_endpoint_get_logging_description(v28);
          v30 = nw_endpoint_handler_state_string(*(void **)(a1 + 48));
          v31 = nw_endpoint_handler_mode_string(*(void **)(a1 + 48));
          v32 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 48));
          v33 = 136448002;
          v34 = "nw_endpoint_resolver_update_path_resolver_locked_block_invoke";
          v35 = 2082;
          v36 = id_string;
          v37 = 2082;
          v38 = v27;
          v39 = 2082;
          v40 = logging_description;
          v41 = 2082;
          v42 = v30;
          v43 = 2082;
          v44 = v31;
          v45 = 2114;
          v46 = v32;
          v47 = 2080;
          v48 = out;
          _os_log_impl(&dword_182FBE000, v11, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Registered resolver flow with agent %s", (uint8_t *)&v33, 0x52u);

        }
        goto LABEL_16;
      }
      if ((logging_disabled & 1) == 0)
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v11 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
        {
          v12 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 48));
          v13 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 48));
          v14 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 48));
          v15 = nw_endpoint_get_logging_description(v14);
          v16 = nw_endpoint_handler_state_string(*(void **)(a1 + 48));
          v17 = nw_endpoint_handler_mode_string(*(void **)(a1 + 48));
          v18 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 48));
          v33 = 136448002;
          v34 = "nw_endpoint_resolver_update_path_resolver_locked_block_invoke";
          v35 = 2082;
          v36 = v12;
          v37 = 2082;
          v38 = v13;
          v39 = 2082;
          v40 = v15;
          v41 = 2082;
          v42 = v16;
          v43 = 2082;
          v44 = v17;
          v45 = 2114;
          v46 = v18;
          v47 = 2080;
          v48 = out;
          _os_log_impl(&dword_182FBE000, v11, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Registered resolver flow with agent %s", (uint8_t *)&v33, 0x52u);

        }
LABEL_16:

      }
    }
    else if ((nw_endpoint_handler_get_logging_disabled(v8) & 1) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v11 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        v19 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 48));
        v20 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 48));
        v21 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 48));
        v22 = nw_endpoint_get_logging_description(v21);
        v23 = nw_endpoint_handler_state_string(*(void **)(a1 + 48));
        v24 = nw_endpoint_handler_mode_string(*(void **)(a1 + 48));
        v25 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 48));
        v33 = 136448002;
        v34 = "nw_endpoint_resolver_update_path_resolver_locked_block_invoke";
        v35 = 2082;
        v36 = v19;
        v37 = 2082;
        v38 = v20;
        v39 = 2082;
        v40 = v22;
        v41 = 2082;
        v42 = v23;
        v43 = 2082;
        v44 = v24;
        v45 = 2114;
        v46 = v25;
        v47 = 2080;
        v48 = out;
        _os_log_impl(&dword_182FBE000, v11, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Failed to register resolver flow with agent %s", (uint8_t *)&v33, 0x52u);

      }
      goto LABEL_16;
    }
LABEL_17:

    goto LABEL_18;
  }
  v6 = v5;
  nw_dictionary_set_value(*(_QWORD *)(a1 + 40), out, v5);
LABEL_18:

}

void sub_18365A1F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__30014(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__30015(uint64_t a1)
{

}

BOOL ___ZL48nw_endpoint_resolver_update_path_resolver_lockedP30NWConcrete_nw_endpoint_handler_block_invoke_97(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  _BOOL8 v8;

  v4 = a3;
  v5 = nw_path_flow_copy_error(v4);
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v7 = *(void **)(v6 + 40);
  *(_QWORD *)(v6 + 40) = v5;

  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) == 0;
  return v8;
}

void ___ZL27nw_endpoint_resolver_updateP30NWConcrete_nw_endpoint_handlerPU25objcproto14OS_nw_resolver8NSObject20nw_resolver_status_t_block_invoke_105(uint64_t a1)
{
  nw_endpoint_resolver_start_next_child(*(NWConcrete_nw_endpoint_handler **)(a1 + 32));
}

void nw_endpoint_resolver_setup_trigger_agent_timer(NWConcrete_nw_endpoint_handler *a1, char a2)
{
  NWConcrete_nw_endpoint_handler *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  id v7;
  NWConcrete_nw_endpoint_handler *v8;
  int64_t int64_with_default;
  uint64_t v10;
  dispatch_time_t v11;
  uint64_t v12;
  id v13;
  char *v14;
  NSObject *v15;
  os_log_type_t v16;
  char *backtrace_string;
  os_log_type_t v18;
  _BOOL4 v19;
  os_log_type_t v20;
  char v21;
  os_log_type_t type;
  _QWORD v23[4];
  NWConcrete_nw_endpoint_handler *v24;
  char v25;
  uint8_t buf[4];
  const char *v27;
  __int16 v28;
  char *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v5 = (uint64_t *)nw_endpoint_handler_copy_resolver(v3);
  v6 = v5[8];
  if (v6)
  {
    nw_queue_cancel_source(v6, v4);
    v5[8] = 0;
  }
  v7 = nw_endpoint_handler_copy_context(v3);
  v23[0] = MEMORY[0x1E0C809B0];
  v23[1] = 3221225472;
  v23[2] = ___ZL46nw_endpoint_resolver_setup_trigger_agent_timerP30NWConcrete_nw_endpoint_handlerb_block_invoke;
  v23[3] = &unk_1E14A9B98;
  v8 = v3;
  v24 = v8;
  v25 = a2;
  v5[8] = nw_queue_context_create_source(v7, 2, 3, 0, v23, 0);

  if (v5[8])
  {
    int64_with_default = networkd_settings_get_int64_with_default((const char *)nw_setting_tcpconn_trigger_agent_delay, 2000);
    v10 = v5[8];
    v11 = dispatch_time(0x8000000000000000, 1000000 * int64_with_default);
    nw_queue_set_timer_values(v10, v11, 0xFFFFFFFFFFFFFFFFLL, 0xF4240uLL);
    nw_queue_activate_source(v5[8], v12);
    goto LABEL_12;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v13 = (id)gLogObj;
  *(_DWORD *)buf = 136446210;
  v27 = "nw_endpoint_resolver_setup_trigger_agent_timer";
  v14 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v21 = 0;
  if (!__nwlog_fault(v14, &type, &v21))
    goto LABEL_10;
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v15 = (id)gLogObj;
    v16 = type;
    if (os_log_type_enabled(v15, type))
    {
      *(_DWORD *)buf = 136446210;
      v27 = "nw_endpoint_resolver_setup_trigger_agent_timer";
      _os_log_impl(&dword_182FBE000, v15, v16, "%{public}s nw_queue_context_create_source(trigger_agent_timer) failed", buf, 0xCu);
    }
LABEL_9:

LABEL_10:
    if (!v14)
      goto LABEL_12;
LABEL_11:
    free(v14);
    goto LABEL_12;
  }
  if (!v21)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v15 = (id)gLogObj;
    v20 = type;
    if (os_log_type_enabled(v15, type))
    {
      *(_DWORD *)buf = 136446210;
      v27 = "nw_endpoint_resolver_setup_trigger_agent_timer";
      _os_log_impl(&dword_182FBE000, v15, v20, "%{public}s nw_queue_context_create_source(trigger_agent_timer) failed, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_9;
  }
  backtrace_string = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v15 = (id)gLogObj;
  v18 = type;
  v19 = os_log_type_enabled(v15, type);
  if (!backtrace_string)
  {
    if (v19)
    {
      *(_DWORD *)buf = 136446210;
      v27 = "nw_endpoint_resolver_setup_trigger_agent_timer";
      _os_log_impl(&dword_182FBE000, v15, v18, "%{public}s nw_queue_context_create_source(trigger_agent_timer) failed, no backtrace", buf, 0xCu);
    }
    goto LABEL_9;
  }
  if (v19)
  {
    *(_DWORD *)buf = 136446466;
    v27 = "nw_endpoint_resolver_setup_trigger_agent_timer";
    v28 = 2082;
    v29 = backtrace_string;
    _os_log_impl(&dword_182FBE000, v15, v18, "%{public}s nw_queue_context_create_source(trigger_agent_timer) failed, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(backtrace_string);
  if (v14)
    goto LABEL_11;
LABEL_12:

}

void sub_18365A7A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void ___ZL46nw_endpoint_resolver_setup_trigger_agent_timerP30NWConcrete_nw_endpoint_handlerb_block_invoke(uint64_t a1)
{
  int minimize_logging;
  char logging_disabled;
  NSObject *v4;
  const char *id_string;
  const char *v6;
  nw_endpoint_t v7;
  const char *logging_description;
  const char *v9;
  const char *v10;
  id v11;
  void *v12;
  const char *v13;
  BOOL v14;
  const char *v15;
  const char *v16;
  nw_endpoint_t v17;
  const char *v18;
  const char *v19;
  const char *v20;
  id v21;
  void *v22;
  const char *v23;
  int v24;
  const char *v25;
  __int16 v26;
  const char *v27;
  __int16 v28;
  const char *v29;
  __int16 v30;
  const char *v31;
  __int16 v32;
  const char *v33;
  __int16 v34;
  const char *v35;
  __int16 v36;
  id v37;
  __int16 v38;
  const char *v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  if (nw_endpoint_handler_trigger_agents(*(void **)(a1 + 32), 1))
  {
    minimize_logging = nw_endpoint_handler_get_minimize_logging(*(void **)(a1 + 32));
    logging_disabled = nw_endpoint_handler_get_logging_disabled(*(void **)(a1 + 32));
    if (!minimize_logging)
    {
      if ((logging_disabled & 1) != 0)
        return;
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v4 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        id_string = nw_endpoint_handler_get_id_string(*(void **)(a1 + 32));
        v6 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 32));
        v7 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 32));
        logging_description = nw_endpoint_get_logging_description(v7);
        v9 = nw_endpoint_handler_state_string(*(void **)(a1 + 32));
        v10 = nw_endpoint_handler_mode_string(*(void **)(a1 + 32));
        v11 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 32));
        v12 = v11;
        v13 = "child flow";
        v14 = *(_BYTE *)(a1 + 40) == 0;
        v24 = 136448002;
        v25 = "nw_endpoint_resolver_setup_trigger_agent_timer_block_invoke";
        v26 = 2082;
        if (v14)
          v13 = "resolution";
        v27 = id_string;
        v28 = 2082;
        v29 = v6;
        v30 = 2082;
        v31 = logging_description;
        v32 = 2082;
        v33 = v9;
        v34 = 2082;
        v35 = v10;
        v36 = 2114;
        v37 = v11;
        v38 = 2082;
        v39 = v13;
        _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] %{public}s timed out, triggering matching agent", (uint8_t *)&v24, 0x52u);

      }
      goto LABEL_10;
    }
    if ((logging_disabled & 1) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v4 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
      {
        v15 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 32));
        v16 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 32));
        v17 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 32));
        v18 = nw_endpoint_get_logging_description(v17);
        v19 = nw_endpoint_handler_state_string(*(void **)(a1 + 32));
        v20 = nw_endpoint_handler_mode_string(*(void **)(a1 + 32));
        v21 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 32));
        v22 = v21;
        v23 = "child flow";
        v14 = *(_BYTE *)(a1 + 40) == 0;
        v24 = 136448002;
        v25 = "nw_endpoint_resolver_setup_trigger_agent_timer_block_invoke";
        v26 = 2082;
        if (v14)
          v23 = "resolution";
        v27 = v15;
        v28 = 2082;
        v29 = v16;
        v30 = 2082;
        v31 = v18;
        v32 = 2082;
        v33 = v19;
        v34 = 2082;
        v35 = v20;
        v36 = 2114;
        v37 = v21;
        v38 = 2082;
        v39 = v23;
        _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] %{public}s timed out, triggering matching agent", (uint8_t *)&v24, 0x52u);

      }
LABEL_10:

    }
  }
}

void sub_18365AB00(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void ___ZL41nw_endpoint_resolver_check_desperate_ivanP30NWConcrete_nw_endpoint_handler_block_invoke(uint64_t a1)
{
  void *v1;
  unsigned int *v3;
  uint64_t v4;
  int minimize_logging;
  char logging_disabled;
  NSObject *v7;
  const char *v8;
  const char *v9;
  nw_endpoint_t v10;
  const char *v11;
  const char *v12;
  const char *v13;
  id v14;
  NSObject *v15;
  const char *v16;
  void *v17;
  char *v18;
  NSObject *v19;
  os_log_type_t v20;
  const char *id_string;
  const char *v22;
  nw_endpoint_t v23;
  const char *logging_description;
  const char *v25;
  const char *v26;
  id v27;
  char *backtrace_string;
  os_log_type_t v29;
  _BOOL4 v30;
  os_log_type_t v31;
  char v32;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v35;
  __int16 v36;
  void *v37;
  __int16 v38;
  const char *v39;
  __int16 v40;
  const char *v41;
  __int16 v42;
  const char *v43;
  __int16 v44;
  const char *v45;
  __int16 v46;
  id v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v1 = *(void **)(a1 + 32);
  if (!v1)
  {
    __nwlog_obj();
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v35 = "nw_endpoint_resolver_check_desperate_ivan_block_invoke";
    v18 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v32 = 0;
    if (__nwlog_fault(v18, &type, &v32))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v19 = objc_claimAutoreleasedReturnValue();
        v20 = type;
        if (os_log_type_enabled(v19, type))
        {
          *(_DWORD *)buf = 136446210;
          v35 = "nw_endpoint_resolver_check_desperate_ivan_block_invoke";
          _os_log_impl(&dword_182FBE000, v19, v20, "%{public}s called with null handler", buf, 0xCu);
        }
      }
      else if (v32)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v19 = objc_claimAutoreleasedReturnValue();
        v29 = type;
        v30 = os_log_type_enabled(v19, type);
        if (backtrace_string)
        {
          if (v30)
          {
            *(_DWORD *)buf = 136446466;
            v35 = "nw_endpoint_resolver_check_desperate_ivan_block_invoke";
            v36 = 2082;
            v37 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v19, v29, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_40;
        }
        if (v30)
        {
          *(_DWORD *)buf = 136446210;
          v35 = "nw_endpoint_resolver_check_desperate_ivan_block_invoke";
          _os_log_impl(&dword_182FBE000, v19, v29, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v19 = objc_claimAutoreleasedReturnValue();
        v31 = type;
        if (os_log_type_enabled(v19, type))
        {
          *(_DWORD *)buf = 136446210;
          v35 = "nw_endpoint_resolver_check_desperate_ivan_block_invoke";
          _os_log_impl(&dword_182FBE000, v19, v31, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_40:
    if (v18)
      free(v18);
    return;
  }
  v3 = v1;
  v4 = v3[29];

  if ((_DWORD)v4 == 1)
  {
    minimize_logging = nw_endpoint_handler_get_minimize_logging(*(void **)(a1 + 32));
    logging_disabled = nw_endpoint_handler_get_logging_disabled(*(void **)(a1 + 32));
    if (minimize_logging)
    {
      if ((logging_disabled & 1) != 0)
      {
LABEL_10:
        if (nw_endpoint_resolver_add_desperate_ivan(*(NWConcrete_nw_endpoint_handler **)(a1 + 32)))
          nw_endpoint_resolver_start_next_child(*(NWConcrete_nw_endpoint_handler **)(a1 + 32));
        return;
      }
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v7 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
      {
        id_string = nw_endpoint_handler_get_id_string(*(void **)(a1 + 32));
        v22 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 32));
        v23 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 32));
        logging_description = nw_endpoint_get_logging_description(v23);
        v25 = nw_endpoint_handler_state_string(*(void **)(a1 + 32));
        v26 = nw_endpoint_handler_mode_string(*(void **)(a1 + 32));
        v27 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 32));
        *(_DWORD *)buf = 136447746;
        v35 = "nw_endpoint_resolver_check_desperate_ivan_block_invoke";
        v36 = 2082;
        v37 = (void *)id_string;
        v38 = 2082;
        v39 = v22;
        v40 = 2082;
        v41 = logging_description;
        v42 = 2082;
        v43 = v25;
        v44 = 2082;
        v45 = v26;
        v46 = 2114;
        v47 = v27;
        _os_log_impl(&dword_182FBE000, v7, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Connectivity seems very slow, adding DesperateIvan endpoint handler", buf, 0x48u);

      }
    }
    else
    {
      if ((logging_disabled & 1) != 0)
        goto LABEL_10;
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v7 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        v8 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 32));
        v9 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 32));
        v10 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 32));
        v11 = nw_endpoint_get_logging_description(v10);
        v12 = nw_endpoint_handler_state_string(*(void **)(a1 + 32));
        v13 = nw_endpoint_handler_mode_string(*(void **)(a1 + 32));
        v14 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 32));
        *(_DWORD *)buf = 136447746;
        v35 = "nw_endpoint_resolver_check_desperate_ivan_block_invoke";
        v36 = 2082;
        v37 = (void *)v8;
        v38 = 2082;
        v39 = v9;
        v40 = 2082;
        v41 = v11;
        v42 = 2082;
        v43 = v12;
        v44 = 2082;
        v45 = v13;
        v46 = 2114;
        v47 = v14;
        _os_log_impl(&dword_182FBE000, v7, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Connectivity seems very slow, adding DesperateIvan endpoint handler", buf, 0x48u);

      }
    }

    goto LABEL_10;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v15 = (id)gLogObj;
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    if (v4 > 5)
      v16 = "unknown-mode";
    else
      v16 = off_1E149FC18[v4];
    *(_DWORD *)buf = 136446722;
    v35 = "nw_endpoint_resolver_check_desperate_ivan_block_invoke";
    v36 = 2082;
    v37 = (void *)v16;
    v38 = 2082;
    v39 = "resolver";
    _os_log_impl(&dword_182FBE000, v15, OS_LOG_TYPE_DEFAULT, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
  }

}

void sub_18365B0D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

BOOL nw_endpoint_resolver_add_desperate_ivan(NWConcrete_nw_endpoint_handler *a1)
{
  NWConcrete_nw_endpoint_handler *v1;
  _BOOL8 v2;
  NWConcrete_nw_endpoint_mode_handler *v3;
  uint64_t v4;
  uint64_t *v5;
  int minimize_logging;
  char logging_disabled;
  nw_endpoint_t v8;
  const char *v9;
  const char *v10;
  nw_endpoint_t v11;
  const char *v12;
  const char *v13;
  const char *v14;
  id v15;
  uint64_t v16;
  _BOOL8 child_parameters;
  id *inner;
  NSObject *v19;
  const char *id_string;
  const char *v21;
  const char *v22;
  id v23;
  const char *v24;
  const char *v25;
  nw_endpoint_t v26;
  const char *v27;
  const char *v28;
  const char *v29;
  id v30;
  const char *logging_description;
  const char *v33;
  const char *v34;
  nw_endpoint_t v35;
  uint8_t buf[4];
  const char *v37;
  __int16 v38;
  const char *v39;
  __int16 v40;
  const char *v41;
  __int16 v42;
  const char *v43;
  __int16 v44;
  const char *v45;
  __int16 v46;
  const char *v47;
  __int16 v48;
  id v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if ((nw_endpoint_handler_get_state(v1) & 0xFFFFFFFE) != 4)
  {
    v3 = nw_endpoint_handler_copy_resolver(v1);
    v5 = (uint64_t *)v3;
    if ((*((_BYTE *)v3 + 24) & 0xC) != 0)
    {
      if (!*((_QWORD *)v3 + 4))
      {
        *((_BYTE *)v3 + 24) &= ~8u;
        v16 = *((_QWORD *)v3 + 9);
        if (v16)
        {
          nw_queue_cancel_source(v16, v4);
          v5[9] = 0;
        }
        v8 = nw_endpoint_handler_copy_endpoint(v1);
        child_parameters = nw_endpoint_resolver_create_child_parameters(v1);
        nw_parameters_set_desperate_ivan((void *)child_parameters, 1);
        inner = nw_endpoint_handler_create_inner(v8, (void *)child_parameters, nw_endpoint_resolver_receive_report, v1, v1, 0, 0);
        v2 = inner != 0;
        if (inner)
        {
          nw_array_append(v5[5], inner);
        }
        else if ((nw_endpoint_handler_get_logging_disabled(v1) & 1) == 0)
        {
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v19 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
          {
            id_string = nw_endpoint_handler_get_id_string(v1);
            v33 = nw_endpoint_handler_dry_run_string(v1);
            v34 = id_string;
            v35 = nw_endpoint_handler_copy_endpoint(v1);
            logging_description = nw_endpoint_get_logging_description(v35);
            v21 = nw_endpoint_handler_state_string(v1);
            v22 = nw_endpoint_handler_mode_string(v1);
            v23 = nw_endpoint_handler_copy_current_path(v1);
            *(_DWORD *)buf = 136447746;
            v37 = "nw_endpoint_resolver_add_desperate_ivan";
            v38 = 2082;
            v39 = v34;
            v40 = 2082;
            v41 = v33;
            v42 = 2082;
            v43 = logging_description;
            v44 = 2082;
            v45 = v21;
            v46 = 2082;
            v47 = v22;
            v48 = 2114;
            v49 = v23;
            _os_log_impl(&dword_182FBE000, v19, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Failed to create DesperateIvan endpoint handler", buf, 0x48u);

          }
        }

        goto LABEL_23;
      }
      minimize_logging = nw_endpoint_handler_get_minimize_logging(v1);
      logging_disabled = nw_endpoint_handler_get_logging_disabled(v1);
      if (minimize_logging)
      {
        if ((logging_disabled & 1) == 0)
        {
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v8 = (nw_endpoint_t)(id)gconnectionLogObj;
          if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
          {
            v24 = nw_endpoint_handler_get_id_string(v1);
            v25 = nw_endpoint_handler_dry_run_string(v1);
            v26 = nw_endpoint_handler_copy_endpoint(v1);
            v27 = nw_endpoint_get_logging_description(v26);
            v28 = nw_endpoint_handler_state_string(v1);
            v29 = nw_endpoint_handler_mode_string(v1);
            v30 = nw_endpoint_handler_copy_current_path(v1);
            *(_DWORD *)buf = 136447746;
            v37 = "nw_endpoint_resolver_add_desperate_ivan";
            v38 = 2082;
            v39 = v24;
            v40 = 2082;
            v41 = v25;
            v42 = 2082;
            v43 = v27;
            v44 = 2082;
            v45 = v28;
            v46 = 2082;
            v47 = v29;
            v48 = 2114;
            v49 = v30;
            _os_log_impl(&dword_182FBE000, v8, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Skipping DesperateIvan because already connected", buf, 0x48u);

          }
          goto LABEL_11;
        }
      }
      else if ((logging_disabled & 1) == 0)
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v8 = (nw_endpoint_t)(id)gconnectionLogObj;
        if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
        {
          v9 = nw_endpoint_handler_get_id_string(v1);
          v10 = nw_endpoint_handler_dry_run_string(v1);
          v11 = nw_endpoint_handler_copy_endpoint(v1);
          v12 = nw_endpoint_get_logging_description(v11);
          v13 = nw_endpoint_handler_state_string(v1);
          v14 = nw_endpoint_handler_mode_string(v1);
          v15 = nw_endpoint_handler_copy_current_path(v1);
          *(_DWORD *)buf = 136447746;
          v37 = "nw_endpoint_resolver_add_desperate_ivan";
          v38 = 2082;
          v39 = v9;
          v40 = 2082;
          v41 = v10;
          v42 = 2082;
          v43 = v12;
          v44 = 2082;
          v45 = v13;
          v46 = 2082;
          v47 = v14;
          v48 = 2114;
          v49 = v15;
          _os_log_impl(&dword_182FBE000, v8, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Skipping DesperateIvan because already connected", buf, 0x48u);

        }
LABEL_11:
        v2 = 0;
LABEL_23:

LABEL_30:
        goto LABEL_31;
      }
    }
    v2 = 0;
    goto LABEL_30;
  }
  v2 = 0;
LABEL_31:

  return v2;
}

void sub_18365B5CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void ___ZL35nw_endpoint_resolver_receive_reportP30NWConcrete_nw_endpoint_handler26nw_endpoint_handler_mode_t21nw_connection_state_tP27nw_endpoint_handler_event_sPU22objcproto11OS_nw_error8NSObjectPU23objcproto12OS_nw_objectS5__block_invoke_2(uint64_t a1)
{
  nw_endpoint_resolver_start_next_child(*(NWConcrete_nw_endpoint_handler **)(a1 + 32));
}

void ___ZL35nw_endpoint_resolver_receive_reportP30NWConcrete_nw_endpoint_handler26nw_endpoint_handler_mode_t21nw_connection_state_tP27nw_endpoint_handler_event_sPU22objcproto11OS_nw_error8NSObjectPU23objcproto12OS_nw_objectS5__block_invoke_110(uint64_t a1)
{
  nw_endpoint_resolver_start_next_child(*(NWConcrete_nw_endpoint_handler **)(a1 + 32));
}

uint64_t ___ZL35nw_endpoint_resolver_receive_reportP30NWConcrete_nw_endpoint_handler26nw_endpoint_handler_mode_t21nw_connection_state_tP27nw_endpoint_handler_event_sPU22objcproto11OS_nw_error8NSObjectPU23objcproto12OS_nw_objectS5__block_invoke_111(uint64_t a1, uint64_t a2, void *a3)
{
  nw_endpoint_t v4;
  int is_equal;
  uint64_t v6;

  v4 = nw_endpoint_handler_copy_endpoint(a3);
  is_equal = nw_endpoint_is_equal(v4, *(void **)(a1 + 32), 31);
  if (is_equal)
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
  v6 = is_equal ^ 1u;

  return v6;
}

void sub_18365B698(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t __nw_endpoint_resolver_get_details_block_invoke(uint64_t a1, int a2, void *a3)
{
  id v5;
  NSObject *v6;
  int sa_family;
  _DWORD **v8;
  _BYTE *v9;

  v5 = a3;
  v6 = nw_endpoint_handler_copy_endpoint(v5);
  if (nw_endpoint_get_type(v6) != nw_endpoint_type_address)
    goto LABEL_9;
  sa_family = nw_endpoint_get_address(v6)->sa_family;
  if (sa_family == 30)
  {
    v8 = (_DWORD **)(a1 + 48);
  }
  else
  {
    if (sa_family != 2)
      goto LABEL_7;
    v8 = (_DWORD **)(a1 + 40);
  }
  ++**v8;
LABEL_7:
  v9 = *(_BYTE **)(a1 + 56);
  if (!*v9)
    *v9 = sa_family;
LABEL_9:
  if (*(id *)(*(_QWORD *)(a1 + 32) + 32) == v5)
    **(_DWORD **)(a1 + 64) = a2;

  return 1;
}

void sub_18365B7C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void nw_endpoint_handler_access_resolver_handler(void *a1, void *a2)
{
  id v3;
  void (**v4)(id, id);
  id v5;
  _DWORD *v6;
  int v7;
  id *v8;
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  char *v13;
  os_log_type_t v14;
  _BOOL4 v15;
  os_log_type_t v16;
  void *v17;
  char *v18;
  NSObject *v19;
  os_log_type_t v20;
  char *v21;
  os_log_type_t v22;
  _BOOL4 v23;
  os_log_type_t v24;
  void *v25;
  char *v26;
  NSObject *v27;
  os_log_type_t v28;
  char *backtrace_string;
  os_log_type_t v30;
  _BOOL4 v31;
  os_log_type_t v32;
  char v33;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v36;
  __int16 v37;
  char *v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (!v4)
  {
    __nwlog_obj();
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v36 = "nw_endpoint_handler_access_resolver_handler";
    v26 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v33 = 0;
    if (__nwlog_fault(v26, &type, &v33))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v27 = objc_claimAutoreleasedReturnValue();
        v28 = type;
        if (os_log_type_enabled(v27, type))
        {
          *(_DWORD *)buf = 136446210;
          v36 = "nw_endpoint_handler_access_resolver_handler";
          _os_log_impl(&dword_182FBE000, v27, v28, "%{public}s called with null accessor", buf, 0xCu);
        }
      }
      else if (v33)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v27 = objc_claimAutoreleasedReturnValue();
        v30 = type;
        v31 = os_log_type_enabled(v27, type);
        if (backtrace_string)
        {
          if (v31)
          {
            *(_DWORD *)buf = 136446466;
            v36 = "nw_endpoint_handler_access_resolver_handler";
            v37 = 2082;
            v38 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v27, v30, "%{public}s called with null accessor, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_63;
        }
        if (v31)
        {
          *(_DWORD *)buf = 136446210;
          v36 = "nw_endpoint_handler_access_resolver_handler";
          _os_log_impl(&dword_182FBE000, v27, v30, "%{public}s called with null accessor, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v27 = objc_claimAutoreleasedReturnValue();
        v32 = type;
        if (os_log_type_enabled(v27, type))
        {
          *(_DWORD *)buf = 136446210;
          v36 = "nw_endpoint_handler_access_resolver_handler";
          _os_log_impl(&dword_182FBE000, v27, v32, "%{public}s called with null accessor, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_63:
    if (v26)
      free(v26);
    goto LABEL_9;
  }
  v5 = v3;
  while (1)
  {
    v6 = v5;
    if (!v6)
      break;
    v5 = v6;
    v7 = v6[29];

    if (v7 == 1)
    {
      v4[2](v4, v5);
      goto LABEL_8;
    }
    v8 = (id *)v5;
    v5 = v8[9];

    if (!v5)
      goto LABEL_8;
  }
  __nwlog_obj();
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v36 = "nw_endpoint_handler_get_mode";
  v10 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v33 = 0;
  if (__nwlog_fault(v10, &type, &v33))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v36 = "nw_endpoint_handler_get_mode";
        _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null handler", buf, 0xCu);
      }
LABEL_25:

      goto LABEL_26;
    }
    if (!v33)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v36 = "nw_endpoint_handler_get_mode";
        _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_25;
    }
    v13 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v11 = objc_claimAutoreleasedReturnValue();
    v14 = type;
    v15 = os_log_type_enabled(v11, type);
    if (!v13)
    {
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        v36 = "nw_endpoint_handler_get_mode";
        _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s called with null handler, no backtrace", buf, 0xCu);
      }
      goto LABEL_25;
    }
    if (v15)
    {
      *(_DWORD *)buf = 136446466;
      v36 = "nw_endpoint_handler_get_mode";
      v37 = 2082;
      v38 = v13;
      _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
    }

    free(v13);
  }
LABEL_26:
  if (v10)
    free(v10);
  __nwlog_obj();
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v36 = "nw_endpoint_handler_copy_parent";
  v18 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v33 = 0;
  if (__nwlog_fault(v18, &type, &v33))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v19 = objc_claimAutoreleasedReturnValue();
      v20 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        v36 = "nw_endpoint_handler_copy_parent";
        _os_log_impl(&dword_182FBE000, v19, v20, "%{public}s called with null handler", buf, 0xCu);
      }
LABEL_43:

      goto LABEL_44;
    }
    if (!v33)
    {
      __nwlog_obj();
      v19 = objc_claimAutoreleasedReturnValue();
      v24 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        v36 = "nw_endpoint_handler_copy_parent";
        _os_log_impl(&dword_182FBE000, v19, v24, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_43;
    }
    v21 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v19 = objc_claimAutoreleasedReturnValue();
    v22 = type;
    v23 = os_log_type_enabled(v19, type);
    if (!v21)
    {
      if (v23)
      {
        *(_DWORD *)buf = 136446210;
        v36 = "nw_endpoint_handler_copy_parent";
        _os_log_impl(&dword_182FBE000, v19, v22, "%{public}s called with null handler, no backtrace", buf, 0xCu);
      }
      goto LABEL_43;
    }
    if (v23)
    {
      *(_DWORD *)buf = 136446466;
      v36 = "nw_endpoint_handler_copy_parent";
      v37 = 2082;
      v38 = v21;
      _os_log_impl(&dword_182FBE000, v19, v22, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
    }

    free(v21);
  }
LABEL_44:
  if (v18)
    free(v18);
  v5 = 0;
LABEL_8:

LABEL_9:
}

void sub_18365BED8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void ___ZL32nw_endpoint_handler_create_innerPU25objcproto14OS_nw_endpoint8NSObjectPU27objcproto16OS_nw_parametersS_PFbP30NWConcrete_nw_endpoint_handler26nw_endpoint_handler_mode_t21nw_connection_state_tP27nw_endpoint_handler_event_sPU22objcproto11OS_nw_errorS_PU23objcproto12OS_nw_objectS_ESD_S5_jb_block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  _BOOL8 v5;
  NSObject *v6;

  v6 = a2;
  if (nw_protocol_options_is_quic(v6))
  {
    v3 = *(void **)(a1 + 32);
    v4 = nw_parameters_copy_context(*(void **)(a1 + 40));
    v5 = nw_context_copy_workloop(v4);
    nw_quic_connection_set_trusted_peer_keys(v6, v3, (void *)v5);

  }
}

void sub_18365BFC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

uint64_t ___ZL41nw_endpoint_handler_has_fallback_childrenP30NWConcrete_nw_endpoint_handler_block_invoke(uint64_t a1, void *a2)
{
  NWConcrete_nw_endpoint_handler *v3;
  NWConcrete_nw_endpoint_handler *v4;
  uint64_t v5;

  v3 = a2;
  v4 = v3;
  if (v3->mode == 4 || nw_endpoint_handler_has_fallback_children(v3))
  {
    v5 = 0;
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
  }
  else
  {
    v5 = 1;
  }

  return v5;
}

void sub_18365C0B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_endpoint_handler_change_parent(void *a1, void *a2)
{
  NWConcrete_nw_endpoint_handler *v3;
  NWConcrete_nw_endpoint_handler *v4;

  v4 = a1;
  v3 = a2;
  nw_endpoint_handler_inherit_from_parent(v4, v3, 0);
  objc_storeWeak((id *)&v4->callback_context, v3);

}

uint64_t __nw_endpoint_handler_fillout_data_transfer_snapshot_block_invoke(uint64_t a1, uint64_t a2)
{
  int v3;

  v3 = nw_endpoint_handler_fillout_data_transfer_snapshot(a2, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(unsigned int *)(a1 + 64));
  if (v3)
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
  return v3 ^ 1u;
}

uint64_t __nw_endpoint_handler_fillout_tcp_info_block_invoke(uint64_t a1, uint64_t a2)
{
  int v3;

  v3 = nw_endpoint_handler_fillout_tcp_info(a2, *(_QWORD *)(a1 + 40));
  if (v3)
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
  return v3 ^ 1u;
}

BOOL nw_endpoint_handler_fillout_tcp_connection_info(void *a1, _OWORD *a2)
{
  os_unfair_lock_s *v3;
  os_unfair_lock_s *v4;
  void *v5;
  os_unfair_lock_s *v6;
  os_unfair_lock_s *v7;
  __int128 *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  char fd;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(void);
  __int128 *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  int v24;
  id v25;
  void *v26;
  id v27;
  NSObject *v28;
  _BOOL8 v29;
  void *v31;
  char *v32;
  NSObject *v33;
  os_log_type_t v34;
  void *v35;
  char *v36;
  NSObject *v37;
  os_log_type_t v38;
  char *v39;
  os_log_type_t v40;
  _BOOL4 v41;
  char *backtrace_string;
  os_log_type_t v43;
  _BOOL4 v44;
  os_log_type_t v45;
  os_log_type_t v46;
  _QWORD v47[6];
  os_log_type_t type[8];
  os_log_type_t *v49;
  uint64_t v50;
  char v51;
  os_log_type_t v52[15];
  char v53;
  _BYTE buf[24];
  void *v55;
  _OWORD *v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    *(_QWORD *)type = 0;
    v49 = type;
    v50 = 0x2020000000;
    v51 = 0;
    os_unfair_lock_lock(v3 + 28);
    v5 = *(void **)&v4[62]._os_unfair_lock_opaque;
    if (v4[29]._os_unfair_lock_opaque != 2)
    {
      v47[0] = MEMORY[0x1E0C809B0];
      v47[1] = 3221225472;
      v47[2] = __nw_endpoint_handler_fillout_tcp_connection_info_block_invoke;
      v47[3] = &unk_1E149FAD8;
      v47[4] = type;
      v47[5] = a2;
      objc_msgSend(v5, "applyWithHandler:toChildren:", v4, v47);
LABEL_28:
      os_unfair_lock_unlock(v4 + 28);
      v29 = *((_BYTE *)v49 + 24) != 0;
      _Block_object_dispose(type, 8);
      goto LABEL_29;
    }
    v6 = v5;
    v7 = v6;
    if (v6)
    {
      os_unfair_lock_lock(v6 + 220);
      v8 = *(__int128 **)&v7[200]._os_unfair_lock_opaque;
      if (v8)
      {
        v9 = *v8;
        v10 = v8[2];
        a2[1] = v8[1];
        a2[2] = v10;
        *a2 = v9;
        v11 = v8[3];
        v12 = v8[4];
        v13 = v8[6];
        a2[5] = v8[5];
        a2[6] = v13;
        a2[3] = v11;
        a2[4] = v12;
        fd = 1;
      }
      else
      {
        v15 = *(_QWORD *)&v7[102]._os_unfair_lock_opaque;
        if (v15 && (v16 = *(_QWORD *)(v15 + 24)) != 0 && (v17 = *(uint64_t (**)(void))(v16 + 224)) != 0)
        {
          *(_QWORD *)v52 = 0;
          v18 = (__int128 *)v17();
          if (v18)
          {
            if (*(_QWORD *)v52 == 112)
            {
              v19 = *v18;
              v20 = v18[2];
              a2[1] = v18[1];
              a2[2] = v20;
              *a2 = v19;
              v21 = v18[3];
              v22 = v18[4];
              v23 = v18[6];
              a2[5] = v18[5];
              a2[6] = v23;
              a2[3] = v21;
              a2[4] = v22;
              v24 = 1;
            }
            else
            {
              v24 = 0;
            }
            free(v18);
          }
          else
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v28 = (id)gLogObj;
            if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_endpoint_flow_fillout_tcp_connection_info";
              _os_log_impl(&dword_182FBE000, v28, OS_LOG_TYPE_DEBUG, "%{public}s copy_info() returned NULL", buf, 0xCu);
            }

            v24 = 0;
          }
          fd = v24 != 0;
        }
        else
        {
          v25 = *(id *)&v7[222]._os_unfair_lock_opaque;
          if ((v7[8]._os_unfair_lock_opaque & 2) == 0)
          {
            v26 = *(void **)&v7[234]._os_unfair_lock_opaque;
            if (v26)
            {
              v27 = nw_endpoint_handler_copy_connected_socket_wrapper(v26);

              v25 = v27;
            }
          }
          if (v25)
          {
            *(_QWORD *)buf = MEMORY[0x1E0C809B0];
            *(_QWORD *)&buf[8] = 3221225472;
            *(_QWORD *)&buf[16] = __nw_endpoint_flow_fillout_tcp_connection_info_block_invoke;
            v55 = &__block_descriptor_40_e8_B12__0i8l;
            v56 = a2;
            fd = nw_fd_wrapper_get_fd(v25, buf);
          }
          else
          {
            fd = 0;
          }

        }
      }
      os_unfair_lock_unlock(v7 + 220);
LABEL_27:

      *((_BYTE *)v49 + 24) = fd;
      goto LABEL_28;
    }
    __nwlog_obj();
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_endpoint_flow_fillout_tcp_connection_info";
    v36 = (char *)_os_log_send_and_compose_impl();

    v52[0] = OS_LOG_TYPE_ERROR;
    v53 = 0;
    if (__nwlog_fault(v36, v52, &v53))
    {
      if (v52[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v37 = objc_claimAutoreleasedReturnValue();
        v38 = v52[0];
        if (os_log_type_enabled(v37, v52[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_endpoint_flow_fillout_tcp_connection_info";
          _os_log_impl(&dword_182FBE000, v37, v38, "%{public}s called with null endpoint_flow", buf, 0xCu);
        }
      }
      else if (v53)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v37 = objc_claimAutoreleasedReturnValue();
        v43 = v52[0];
        v44 = os_log_type_enabled(v37, v52[0]);
        if (backtrace_string)
        {
          if (v44)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_endpoint_flow_fillout_tcp_connection_info";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = backtrace_string;
            _os_log_impl(&dword_182FBE000, v37, v43, "%{public}s called with null endpoint_flow, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_65;
        }
        if (v44)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_endpoint_flow_fillout_tcp_connection_info";
          _os_log_impl(&dword_182FBE000, v37, v43, "%{public}s called with null endpoint_flow, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v37 = objc_claimAutoreleasedReturnValue();
        v46 = v52[0];
        if (os_log_type_enabled(v37, v52[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_endpoint_flow_fillout_tcp_connection_info";
          _os_log_impl(&dword_182FBE000, v37, v46, "%{public}s called with null endpoint_flow, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_65:
    if (v36)
      free(v36);
    fd = 0;
    goto LABEL_27;
  }
  __nwlog_obj();
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_endpoint_handler_fillout_tcp_connection_info";
  v32 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  v52[0] = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v32, type, v52))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v33 = objc_claimAutoreleasedReturnValue();
      v34 = type[0];
      if (os_log_type_enabled(v33, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_endpoint_handler_fillout_tcp_connection_info";
        _os_log_impl(&dword_182FBE000, v33, v34, "%{public}s called with null handler", buf, 0xCu);
      }
    }
    else if (v52[0])
    {
      v39 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v33 = objc_claimAutoreleasedReturnValue();
      v40 = type[0];
      v41 = os_log_type_enabled(v33, type[0]);
      if (v39)
      {
        if (v41)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_endpoint_handler_fillout_tcp_connection_info";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v39;
          _os_log_impl(&dword_182FBE000, v33, v40, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v39);
        goto LABEL_56;
      }
      if (v41)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_endpoint_handler_fillout_tcp_connection_info";
        _os_log_impl(&dword_182FBE000, v33, v40, "%{public}s called with null handler, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v33 = objc_claimAutoreleasedReturnValue();
      v45 = type[0];
      if (os_log_type_enabled(v33, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_endpoint_handler_fillout_tcp_connection_info";
        _os_log_impl(&dword_182FBE000, v33, v45, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_56:
  if (v32)
    free(v32);
  v29 = 0;
LABEL_29:

  return v29;
}

void sub_18365C8BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  void *v11;
  void *v12;
  void *v13;
  va_list va;

  va_start(va, a11);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_endpoint_handler_fillout_tcp_connection_info_block_invoke(uint64_t a1, uint64_t a2)
{
  int v3;

  v3 = nw_endpoint_handler_fillout_tcp_connection_info(a2, *(_QWORD *)(a1 + 40));
  if (v3)
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
  return v3 ^ 1u;
}

BOOL nw_endpoint_handler_fillout_route_stats(void *a1, uint64_t a2)
{
  id v3;
  id v4;
  void *v5;
  id v6;
  void *v7;
  _BOOL8 v8;
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  void *v13;
  os_log_type_t v14;
  char *backtrace_string;
  os_log_type_t v16;
  _BOOL4 v17;
  os_log_type_t v18;
  _BOOL4 v19;
  os_log_type_t v20;
  os_log_type_t v21;
  char v23;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  char *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v26 = "nw_endpoint_handler_fillout_route_stats";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (!__nwlog_fault(v10, &type, &v23))
      goto LABEL_38;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_endpoint_handler_fillout_route_stats";
        _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null handler", buf, 0xCu);
      }
      goto LABEL_37;
    }
    if (!v23)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v20 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_endpoint_handler_fillout_route_stats";
        _os_log_impl(&dword_182FBE000, v11, v20, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_37;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v11 = objc_claimAutoreleasedReturnValue();
    v16 = type;
    v17 = os_log_type_enabled(v11, type);
    if (!backtrace_string)
    {
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_endpoint_handler_fillout_route_stats";
        _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null handler, no backtrace", buf, 0xCu);
      }
      goto LABEL_37;
    }
    if (v17)
    {
      *(_DWORD *)buf = 136446466;
      v26 = "nw_endpoint_handler_fillout_route_stats";
      v27 = 2082;
      v28 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_25;
  }
  if (!a2)
  {
    __nwlog_obj();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v26 = "nw_endpoint_handler_fillout_route_stats";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (!__nwlog_fault(v10, &type, &v23))
      goto LABEL_38;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_endpoint_handler_fillout_route_stats";
        _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s called with null stats", buf, 0xCu);
      }
LABEL_37:

LABEL_38:
      if (v10)
        free(v10);
      goto LABEL_40;
    }
    if (!v23)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v21 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_endpoint_handler_fillout_route_stats";
        _os_log_impl(&dword_182FBE000, v11, v21, "%{public}s called with null stats, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_37;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v11 = objc_claimAutoreleasedReturnValue();
    v18 = type;
    v19 = os_log_type_enabled(v11, type);
    if (!backtrace_string)
    {
      if (v19)
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_endpoint_handler_fillout_route_stats";
        _os_log_impl(&dword_182FBE000, v11, v18, "%{public}s called with null stats, no backtrace", buf, 0xCu);
      }
      goto LABEL_37;
    }
    if (v19)
    {
      *(_DWORD *)buf = 136446466;
      v26 = "nw_endpoint_handler_fillout_route_stats";
      v27 = 2082;
      v28 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v11, v18, "%{public}s called with null stats, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_25:

    free(backtrace_string);
    goto LABEL_38;
  }
  nw_endpoint_handler_initialize_association(v3);
  v5 = (void *)*((_QWORD *)v4 + 7);
  if (!v5 || (v6 = nw_association_copy_current_path(v5, *((void **)v4 + 4)), (v7 = v6) == 0))
  {
LABEL_40:
    v8 = 0;
    goto LABEL_41;
  }
  v8 = nw_path_fillout_route_stats(v6, a2, 0);

LABEL_41:
  return v8;
}

void sub_18365CE0C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

BOOL nw_endpoint_handler_triggered_agents_updated(NWConcrete_nw_endpoint_handler *a1)
{
  NWConcrete_nw_endpoint_handler *v1;
  NWConcrete_nw_endpoint_handler *v2;
  id *p_triggered_agent_uuids;
  NSObject *v4;
  NSObject *v5;
  xpc_object_t v6;
  OS_xpc_object *v7;
  OS_nw_path *current_path;
  void *v9;
  id v10;
  _BOOL8 v11;
  OS_xpc_object *v12;
  NWConcrete_nw_endpoint_handler *v13;
  OS_xpc_object *v14;
  OS_xpc_object *v15;
  NWConcrete_nw_endpoint_handler *v16;
  char v17;
  NSObject *v18;
  char *v19;
  char *v20;
  char v21;
  const char *v22;
  nw_endpoint_t v23;
  const char *v24;
  char *v25;
  unsigned int *v26;
  unsigned int *v27;
  uint64_t v28;
  const char *v29;
  OS_xpc_object *v30;
  OS_xpc_object *v31;
  OS_xpc_object *v32;
  NWConcrete_nw_endpoint_handler *v33;
  char v34;
  char *v35;
  char *v36;
  char v37;
  const char *v38;
  nw_endpoint_t v39;
  const char *v40;
  char *v41;
  unsigned int *v42;
  unsigned int *v43;
  uint64_t v44;
  const char *v45;
  void **v46;
  void **v47;
  const char *v48;
  void **v49;
  void **v50;
  const char *v51;
  id v52;
  size_t count;
  NWConcrete_nw_endpoint_handler *v54;
  char v55;
  NSObject *v56;
  NSObject *v57;
  char *v58;
  char *v59;
  char v60;
  const char *v61;
  nw_endpoint_t v62;
  const char *logging_description;
  unsigned int *v64;
  unsigned int *v65;
  uint64_t v66;
  const char *v67;
  id v68;
  char *v69;
  NSObject *v70;
  os_log_type_t v71;
  OS_xpc_object *inactive_agent_uuids;
  NWConcrete_nw_endpoint_handler *v73;
  OS_xpc_object *inactive_agent_dictionaries;
  OS_xpc_object *triggered_agent_uuids;
  NWConcrete_nw_endpoint_handler *v76;
  char v77;
  const char *id_string;
  const char *v79;
  nw_endpoint_t v80;
  const char *v81;
  const char *v82;
  const char *v83;
  OS_nw_path *v84;
  char *backtrace_string;
  os_log_type_t v86;
  _BOOL4 v87;
  os_unfair_lock_s *v88;
  OS_nw_path *v89;
  void **v90;
  OS_nw_path *v91;
  void **v92;
  void **v93;
  const char *v94;
  const char *v95;
  os_log_type_t v96;
  os_unfair_lock_s *v97;
  OS_nw_path *v98;
  const char *v100;
  const char *v101;
  nw_endpoint_t v102;
  const char *v103;
  const char *v104;
  const char *v105;
  OS_nw_path *v106;
  NSObject *v107;
  nw_endpoint_t v108;
  const char *v109;
  const char *v110;
  const char *v111;
  OS_nw_path *v112;
  const char *v113;
  const char *v114;
  nw_endpoint_t v115;
  const char *v116;
  const char *v117;
  const char *v118;
  OS_nw_path *v119;
  const char *v120;
  char *v121;
  const char *v122;
  os_log_t log;
  NSObject *loga;
  const char *logb;
  OS_xpc_object *v126;
  id v127;
  void *v128;
  NSObject *v129;
  NSObject *v130;
  NSObject *v131;
  NSObject *v132;
  _QWORD applier[4];
  OS_xpc_object *v134;
  id v135;
  NSObject *v136;
  char v137;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v140;
  __int16 v141;
  void *v142;
  __int16 v143;
  const char *v144;
  __int16 v145;
  const char *v146;
  __int16 v147;
  const char *v148;
  __int16 v149;
  const char *v150;
  __int16 v151;
  OS_nw_path *v152;
  __int16 v153;
  size_t v154;
  uint64_t v155;

  v155 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  p_triggered_agent_uuids = (id *)&v1->triggered_agent_uuids;
  if (v1->triggered_agent_uuids)
  {
    if (v1->inactive_agent_dictionaries)
    {
      v4 = nw_path_copy_inactive_agent_uuids(v1->current_path, 0);
      v5 = v4;
      v132 = v4;
      if (v4 && xpc_array_get_count(v4))
      {
        v6 = xpc_array_create(0, 0);
        if (v6)
        {
          v7 = v2->inactive_agent_dictionaries;
          current_path = v2->current_path;
          if (current_path && (v9 = (void *)*((_QWORD *)current_path + 28)) != 0)
            v10 = v9;
          else
            v10 = 0;
          v52 = *p_triggered_agent_uuids;
          applier[0] = MEMORY[0x1E0C809B0];
          applier[1] = 3221225472;
          applier[2] = ___ZL44nw_endpoint_handler_triggered_agents_updatedP30NWConcrete_nw_endpoint_handler_block_invoke;
          applier[3] = &unk_1E14A92E0;
          v126 = v7;
          v134 = v126;
          v127 = v10;
          v135 = v127;
          v18 = v6;
          v136 = v18;
          v128 = v52;
          xpc_array_apply(v52, applier);
          count = xpc_array_get_count(v18);
          v11 = count == 0;
          if (count)
          {
            objc_storeStrong(p_triggered_agent_uuids, v6);
            objc_storeStrong((id *)&v2->inactive_agent_dictionaries, v10);
            if (!nw_endpoint_handler_get_minimize_logging(v2))
            {
              v54 = v2;
              v55 = *((_BYTE *)v54 + 268);

              if ((v55 & 0x20) == 0)
              {
                if (__nwlog_connection_log::onceToken != -1)
                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                v56 = (id)gconnectionLogObj;
                if (os_log_type_enabled(v56, OS_LOG_TYPE_INFO))
                {
                  v57 = v56;
                  v58 = v54;

                  v59 = v58;
                  v60 = *((_BYTE *)v54 + 268);

                  if ((v60 & 1) != 0)
                    v61 = "dry-run ";
                  else
                    v61 = "";
                  v130 = v18;
                  v62 = nw_endpoint_handler_copy_endpoint(v59);
                  logging_description = nw_endpoint_get_logging_description(v62);
                  log = v62;
                  v121 = v58 + 168;
                  v64 = v59;
                  v65 = v64;
                  v66 = v64[30];
                  if (v66 > 5)
                    v67 = "unknown-state";
                  else
                    v67 = off_1E149FC48[v66];
                  v120 = v67;

                  v92 = v65;
                  v93 = v92;
                  v94 = v61;
                  v95 = "path";
                  switch(*((_DWORD *)v92 + 29))
                  {
                    case 0:
                      break;
                    case 1:
                      v95 = "resolver";
                      break;
                    case 2:
                      v95 = nw_endpoint_flow_mode_string(v92[31]);
                      break;
                    case 3:
                      v95 = "proxy";
                      break;
                    case 4:
                      v95 = "fallback";
                      break;
                    case 5:
                      v95 = "transform";
                      break;
                    default:
                      v95 = "unknown-mode";
                      break;
                  }

                  v97 = v93;
                  os_unfair_lock_lock(v97 + 28);
                  v98 = v2->current_path;
                  os_unfair_lock_unlock(v97 + 28);

                  *(_DWORD *)buf = 136448002;
                  v140 = "nw_endpoint_handler_triggered_agents_updated";
                  v141 = 2082;
                  v142 = v121;
                  v143 = 2082;
                  v144 = v94;
                  v145 = 2082;
                  v146 = logging_description;
                  v147 = 2082;
                  v148 = v120;
                  v149 = 2082;
                  v150 = v95;
                  v151 = 2114;
                  v152 = v98;
                  v153 = 2048;
                  v154 = count;
                  v56 = v57;
                  _os_log_impl(&dword_182FBE000, v57, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] %zu triggered agents not yet updated", buf, 0x52u);

                  v18 = v130;
                }
                goto LABEL_97;
              }
LABEL_98:

              goto LABEL_99;
            }
            if ((nw_endpoint_handler_get_logging_disabled(v2) & 1) != 0)
              goto LABEL_98;
            v131 = v18;
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v107 = (id)gconnectionLogObj;
            if (os_log_type_enabled(v107, OS_LOG_TYPE_DEBUG))
            {
              logb = nw_endpoint_handler_get_id_string(v2);
              v122 = nw_endpoint_handler_dry_run_string(v2);
              v108 = nw_endpoint_handler_copy_endpoint(v2);
              v109 = nw_endpoint_get_logging_description(v108);
              v110 = nw_endpoint_handler_state_string(v2);
              v111 = nw_endpoint_handler_mode_string(v2);
              v112 = (OS_nw_path *)nw_endpoint_handler_copy_current_path(v2);
              *(_DWORD *)buf = 136448002;
              v140 = "nw_endpoint_handler_triggered_agents_updated";
              v141 = 2082;
              v142 = (void *)logb;
              v143 = 2082;
              v144 = v122;
              v145 = 2082;
              v146 = v109;
              v147 = 2082;
              v148 = v110;
              v149 = 2082;
              v150 = v111;
              v151 = 2114;
              v152 = v112;
              v153 = 2048;
              v154 = count;
              v56 = v107;
              _os_log_impl(&dword_182FBE000, v107, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] %zu triggered agents not yet updated", buf, 0x52u);

              v18 = v131;
LABEL_97:

              goto LABEL_98;
            }
          }
          else
          {
            *((_BYTE *)v2 + 268) &= ~2u;
            inactive_agent_uuids = v2->inactive_agent_uuids;
            v2->inactive_agent_uuids = 0;
            v73 = v2;

            inactive_agent_dictionaries = v2->inactive_agent_dictionaries;
            v2->inactive_agent_dictionaries = 0;

            triggered_agent_uuids = v2->triggered_agent_uuids;
            v2->triggered_agent_uuids = 0;

            if (!nw_endpoint_handler_get_minimize_logging(v73))
            {
              v76 = v73;
              v77 = *((_BYTE *)v2 + 268);

              if ((v77 & 0x20) == 0)
              {
                if (__nwlog_connection_log::onceToken != -1)
                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                v56 = (id)gconnectionLogObj;
                if (os_log_type_enabled(v56, OS_LOG_TYPE_INFO))
                {
                  loga = v56;
                  id_string = nw_endpoint_handler_get_id_string(v76);
                  v79 = nw_endpoint_handler_dry_run_string(v76);
                  v80 = nw_endpoint_handler_copy_endpoint(v76);
                  v81 = nw_endpoint_get_logging_description(v80);
                  v82 = nw_endpoint_handler_state_string(v76);
                  v83 = nw_endpoint_handler_mode_string(v76);
                  v84 = (OS_nw_path *)nw_endpoint_handler_copy_current_path(v76);
                  *(_DWORD *)buf = 136447746;
                  v140 = "nw_endpoint_handler_triggered_agents_updated";
                  v141 = 2082;
                  v142 = (void *)id_string;
                  v143 = 2082;
                  v144 = v79;
                  v145 = 2082;
                  v146 = v81;
                  v147 = 2082;
                  v148 = v82;
                  v149 = 2082;
                  v150 = v83;
                  v151 = 2114;
                  v152 = v84;
                  v56 = loga;
                  _os_log_impl(&dword_182FBE000, loga, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] all triggered agents updated", buf, 0x48u);

                }
                goto LABEL_97;
              }
              goto LABEL_98;
            }
            if ((nw_endpoint_handler_get_logging_disabled(v73) & 1) != 0)
              goto LABEL_98;
            v131 = v18;
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v107 = (id)gconnectionLogObj;
            if (os_log_type_enabled(v107, OS_LOG_TYPE_DEBUG))
            {
              v113 = nw_endpoint_handler_get_id_string(v73);
              v114 = nw_endpoint_handler_dry_run_string(v73);
              v115 = nw_endpoint_handler_copy_endpoint(v73);
              v116 = nw_endpoint_get_logging_description(v115);
              v117 = nw_endpoint_handler_state_string(v73);
              v118 = nw_endpoint_handler_mode_string(v73);
              v119 = (OS_nw_path *)nw_endpoint_handler_copy_current_path(v73);
              *(_DWORD *)buf = 136447746;
              v140 = "nw_endpoint_handler_triggered_agents_updated";
              v141 = 2082;
              v142 = (void *)v113;
              v143 = 2082;
              v144 = v114;
              v145 = 2082;
              v146 = v116;
              v147 = 2082;
              v148 = v117;
              v149 = 2082;
              v150 = v118;
              v151 = 2114;
              v152 = v119;
              v56 = v107;
              _os_log_impl(&dword_182FBE000, v107, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] all triggered agents updated", buf, 0x48u);

              v18 = v131;
              goto LABEL_97;
            }
          }
          v18 = v131;
          v56 = v107;
          goto LABEL_97;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v68 = (id)gLogObj;
        *(_DWORD *)buf = 136446210;
        v140 = "nw_endpoint_handler_triggered_agents_updated";
        v69 = (char *)_os_log_send_and_compose_impl();

        type = OS_LOG_TYPE_ERROR;
        v137 = 0;
        if (__nwlog_fault(v69, &type, &v137))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v70 = (id)gLogObj;
            v71 = type;
            if (os_log_type_enabled(v70, type))
            {
              *(_DWORD *)buf = 136446210;
              v140 = "nw_endpoint_handler_triggered_agents_updated";
              _os_log_impl(&dword_182FBE000, v70, v71, "%{public}s xpc_array_create failed", buf, 0xCu);
            }
          }
          else if (v137)
          {
            backtrace_string = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            v70 = objc_claimAutoreleasedReturnValue();
            v86 = type;
            v87 = os_log_type_enabled(v70, type);
            if (backtrace_string)
            {
              if (v87)
              {
                *(_DWORD *)buf = 136446466;
                v140 = "nw_endpoint_handler_triggered_agents_updated";
                v141 = 2082;
                v142 = backtrace_string;
                _os_log_impl(&dword_182FBE000, v70, v86, "%{public}s xpc_array_create failed, dumping backtrace:%{public}s", buf, 0x16u);
              }

              free(backtrace_string);
              if (!v69)
                goto LABEL_90;
              goto LABEL_89;
            }
            if (v87)
            {
              *(_DWORD *)buf = 136446210;
              v140 = "nw_endpoint_handler_triggered_agents_updated";
              _os_log_impl(&dword_182FBE000, v70, v86, "%{public}s xpc_array_create failed, no backtrace", buf, 0xCu);
            }
          }
          else
          {
            __nwlog_obj();
            v70 = objc_claimAutoreleasedReturnValue();
            v96 = type;
            if (os_log_type_enabled(v70, type))
            {
              *(_DWORD *)buf = 136446210;
              v140 = "nw_endpoint_handler_triggered_agents_updated";
              _os_log_impl(&dword_182FBE000, v70, v96, "%{public}s xpc_array_create failed, backtrace limit exceeded", buf, 0xCu);
            }
          }

        }
        if (!v69)
        {
LABEL_90:
          v18 = 0;
          v11 = 0;
          goto LABEL_99;
        }
LABEL_89:
        free(v69);
        goto LABEL_90;
      }
      *((_BYTE *)v2 + 268) &= ~2u;
      v12 = v2->inactive_agent_uuids;
      v2->inactive_agent_uuids = 0;
      v13 = v2;

      v14 = v2->inactive_agent_dictionaries;
      v2->inactive_agent_dictionaries = 0;

      v15 = v2->triggered_agent_uuids;
      v2->triggered_agent_uuids = 0;

      if (!nw_endpoint_handler_get_minimize_logging(v13))
      {
        v16 = v13;
        v17 = *((_BYTE *)v2 + 268);

        if ((v17 & 0x20) == 0)
        {
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v18 = (id)gconnectionLogObj;
          v11 = 1;
          if (!os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
            goto LABEL_99;
          v19 = v16;

          v20 = v19;
          v21 = *((_BYTE *)v2 + 268);

          if ((v21 & 1) != 0)
            v22 = "dry-run ";
          else
            v22 = "";
          v129 = v18;
          v23 = nw_endpoint_handler_copy_endpoint(v20);
          v24 = nw_endpoint_get_logging_description(v23);
          v25 = v19 + 168;
          v26 = v20;
          v27 = v26;
          v28 = v26[30];
          if (v28 > 5)
            v29 = "unknown-state";
          else
            v29 = off_1E149FC48[v28];

          v46 = v27;
          v47 = v46;
          v48 = "path";
          switch(*((_DWORD *)v46 + 29))
          {
            case 0:
              break;
            case 1:
              v48 = "resolver";
              break;
            case 2:
              v48 = nw_endpoint_flow_mode_string(v46[31]);
              break;
            case 3:
              v48 = "proxy";
              break;
            case 4:
              v48 = "fallback";
              break;
            case 5:
              v48 = "transform";
              break;
            default:
              v48 = "unknown-mode";
              break;
          }

          v88 = v47;
          os_unfair_lock_lock(v88 + 28);
          v89 = v2->current_path;
          os_unfair_lock_unlock(v88 + 28);

          *(_DWORD *)buf = 136447746;
          v140 = "nw_endpoint_handler_triggered_agents_updated";
          v141 = 2082;
          v142 = v25;
          v143 = 2082;
          v144 = v22;
          v145 = 2082;
          v146 = v24;
          v147 = 2082;
          v148 = v29;
          v149 = 2082;
          v150 = v48;
          v151 = 2114;
          v152 = v89;
          v18 = v129;
          _os_log_impl(&dword_182FBE000, v129, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] no inactive agents remaining", buf, 0x48u);

          goto LABEL_71;
        }
LABEL_29:
        v11 = 1;
LABEL_101:

        goto LABEL_102;
      }
      if ((nw_endpoint_handler_get_logging_disabled(v13) & 1) == 0)
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v18 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
        {
          v100 = nw_endpoint_handler_get_id_string(v13);
          v101 = nw_endpoint_handler_dry_run_string(v13);
          v102 = nw_endpoint_handler_copy_endpoint(v13);
          v103 = nw_endpoint_get_logging_description(v102);
          v104 = nw_endpoint_handler_state_string(v13);
          v105 = nw_endpoint_handler_mode_string(v13);
          v106 = (OS_nw_path *)nw_endpoint_handler_copy_current_path(v13);
          *(_DWORD *)buf = 136447746;
          v140 = "nw_endpoint_handler_triggered_agents_updated";
          v141 = 2082;
          v142 = (void *)v100;
          v143 = 2082;
          v144 = v101;
          v145 = 2082;
          v146 = v103;
          v147 = 2082;
          v148 = v104;
          v149 = 2082;
          v150 = v105;
          v151 = 2114;
          v152 = v106;
          _os_log_impl(&dword_182FBE000, v18, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] no inactive agents remaining", buf, 0x48u);

        }
LABEL_71:
        v11 = 1;
LABEL_99:

        goto LABEL_100;
      }
    }
    else
    {
      *((_BYTE *)v1 + 268) &= ~2u;
      v30 = v1->inactive_agent_uuids;
      v1->inactive_agent_uuids = 0;

      v31 = v2->inactive_agent_dictionaries;
      v2->inactive_agent_dictionaries = 0;

      v32 = v2->triggered_agent_uuids;
      v2->triggered_agent_uuids = 0;

      v33 = v2;
      v34 = *((_BYTE *)v2 + 268);

      if ((v34 & 0x20) != 0)
      {
        v11 = 1;
        goto LABEL_102;
      }
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v5 = (id)gconnectionLogObj;
      if (!os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
        goto LABEL_29;
      v132 = v5;
      v35 = v33;

      v36 = v35;
      v37 = *((_BYTE *)v2 + 268);

      if ((v37 & 1) != 0)
        v38 = "dry-run ";
      else
        v38 = "";
      v39 = nw_endpoint_handler_copy_endpoint(v36);
      v40 = nw_endpoint_get_logging_description(v39);
      v41 = v35 + 168;
      v42 = v36;
      v43 = v42;
      v44 = v42[30];
      if (v44 > 5)
        v45 = "unknown-state";
      else
        v45 = off_1E149FC48[v44];

      v49 = v43;
      v50 = v49;
      v51 = "path";
      switch(*((_DWORD *)v49 + 29))
      {
        case 0:
          break;
        case 1:
          v51 = "resolver";
          break;
        case 2:
          v51 = nw_endpoint_flow_mode_string(v49[31]);
          break;
        case 3:
          v51 = "proxy";
          break;
        case 4:
          v51 = "fallback";
          break;
        case 5:
          v51 = "transform";
          break;
        default:
          v51 = "unknown-mode";
          break;
      }

      v90 = v50;
      os_unfair_lock_lock((os_unfair_lock_t)v90 + 28);
      v91 = v90[8];
      os_unfair_lock_unlock((os_unfair_lock_t)v90 + 28);

      *(_DWORD *)buf = 136447746;
      v140 = "nw_endpoint_handler_triggered_agents_updated";
      v141 = 2082;
      v142 = v41;
      v143 = 2082;
      v144 = v38;
      v145 = 2082;
      v146 = v40;
      v147 = 2082;
      v148 = v45;
      v149 = 2082;
      v150 = v51;
      v151 = 2114;
      v152 = v91;
      _os_log_impl(&dword_182FBE000, v132, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] no inactive agent information", buf, 0x48u);

    }
    v11 = 1;
LABEL_100:
    v5 = v132;
    goto LABEL_101;
  }
  v11 = 0;
LABEL_102:

  return v11;
}

void sub_18365DEFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,void *a28,void *a29)
{
  void *v29;
  void *v30;
  void *v31;

  _Unwind_Resume(a1);
}

uint64_t ___ZL31nw_endpoint_handler_path_changeP30NWConcrete_nw_endpoint_handler_block_invoke(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  int minimize_logging;
  char logging_disabled;
  NSObject *v8;
  const char *v9;
  const char *v10;
  nw_endpoint_t v11;
  const char *v12;
  const char *v13;
  const char *v14;
  id v15;
  const char *id_string;
  const char *v18;
  nw_endpoint_t v19;
  const char *logging_description;
  const char *v21;
  const char *v22;
  id v23;
  NSObject *log;
  NSObject *loga;
  uint8_t buf[4];
  const char *v27;
  __int16 v28;
  const char *v29;
  __int16 v30;
  const char *v31;
  __int16 v32;
  const char *v33;
  __int16 v34;
  const char *v35;
  __int16 v36;
  const char *v37;
  __int16 v38;
  id v39;
  __int16 v40;
  id v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = nw_path_interface_prohibited_by_parameters(*(void **)(*(_QWORD *)(a1 + 32) + 64), v3);
  if (!(_DWORD)v4)
  {
    minimize_logging = nw_endpoint_handler_get_minimize_logging(*(void **)(a1 + 32));
    logging_disabled = nw_endpoint_handler_get_logging_disabled(*(void **)(a1 + 32));
    if (minimize_logging)
    {
      if ((logging_disabled & 1) != 0)
        goto LABEL_11;
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v8 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
        loga = v8;
        id_string = nw_endpoint_handler_get_id_string(*(void **)(a1 + 32));
        v18 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 32));
        v19 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 32));
        logging_description = nw_endpoint_get_logging_description(v19);
        v21 = nw_endpoint_handler_state_string(*(void **)(a1 + 32));
        v22 = nw_endpoint_handler_mode_string(*(void **)(a1 + 32));
        v23 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 32));
        *(_DWORD *)buf = 136448002;
        v27 = "nw_endpoint_handler_path_change_block_invoke";
        v28 = 2082;
        v29 = id_string;
        v30 = 2082;
        v31 = v18;
        v32 = 2082;
        v33 = logging_description;
        v34 = 2082;
        v35 = v21;
        v36 = 2082;
        v37 = v22;
        v38 = 2114;
        v39 = v23;
        v40 = 2114;
        v41 = v3;
        v8 = loga;
        _os_log_impl(&dword_182FBE000, loga, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] overriding unsatisfied, eligible interface: %{public}@", buf, 0x52u);

      }
    }
    else
    {
      if ((logging_disabled & 1) != 0)
      {
LABEL_11:
        v5 = a1 + 48;
        goto LABEL_12;
      }
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v8 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        log = v8;
        v9 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 32));
        v10 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 32));
        v11 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 32));
        v12 = nw_endpoint_get_logging_description(v11);
        v13 = nw_endpoint_handler_state_string(*(void **)(a1 + 32));
        v14 = nw_endpoint_handler_mode_string(*(void **)(a1 + 32));
        v15 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 32));
        *(_DWORD *)buf = 136448002;
        v27 = "nw_endpoint_handler_path_change_block_invoke";
        v28 = 2082;
        v29 = v9;
        v30 = 2082;
        v31 = v10;
        v32 = 2082;
        v33 = v12;
        v34 = 2082;
        v35 = v13;
        v36 = 2082;
        v37 = v14;
        v38 = 2114;
        v39 = v15;
        v40 = 2114;
        v41 = v3;
        v8 = log;
        _os_log_impl(&dword_182FBE000, log, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] overriding unsatisfied, eligible interface: %{public}@", buf, 0x52u);

      }
    }

    goto LABEL_11;
  }
  if (nw_interface_get_subtype(v3) == 1002)
  {
    v5 = a1 + 40;
LABEL_12:
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)v5 + 8) + 24) = 1;
  }

  return v4;
}

void sub_18365E370(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

BOOL nw_endpoint_handler_should_start_fallback(NWConcrete_nw_endpoint_handler *a1)
{
  NWConcrete_nw_endpoint_handler *v1;
  NWConcrete_nw_endpoint_handler *v2;
  int mode;
  _BOOL8 v4;

  v1 = a1;
  v2 = v1;
  v4 = v1->state == 1
    && ((mode = v1->mode) == 0 || mode == 2 && (nw_endpoint_flow_get_is_leaf_handler(v1->mode_handler) & 1) == 0)
    && (*((_BYTE *)v2 + 268) & 1) == 0
    && nw_path_should_fallback(v2->current_path, 0);

  return v4;
}

void sub_18365E468(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_endpoint_handler_reset_mode(void *a1, int a2)
{
  NWConcrete_nw_endpoint_handler *v3;
  NWConcrete_nw_endpoint_mode_handler *v4;
  char v5;
  NWConcrete_nw_endpoint_flow *v6;
  NWConcrete_nw_endpoint_mode_handler *mode_handler;
  int minimize_logging;
  NWConcrete_nw_endpoint_handler *v9;
  char v10;
  NSObject *v11;
  char *v12;
  char *v13;
  char v14;
  const char *v15;
  nw_endpoint_t v16;
  const char *v17;
  char *v18;
  char *v19;
  uint64_t state;
  const char *v21;
  NWConcrete_nw_endpoint_handler *v22;
  char v23;
  NSObject *v24;
  char *v25;
  char *v26;
  char v27;
  const char *v28;
  nw_endpoint_t v29;
  const char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  const char *v34;
  char *v35;
  const char *v36;
  char *v37;
  const char *v38;
  id *v39;
  id v40;
  id *v41;
  id v42;
  const char *id_string;
  const char *v44;
  nw_endpoint_t v45;
  const char *logging_description;
  const char *v47;
  const char *v48;
  id v49;
  const char *v50;
  const char *v51;
  nw_endpoint_t v52;
  const char *v53;
  const char *v54;
  const char *v55;
  id v56;
  const char *v57;
  const char *v58;
  uint8_t buf[4];
  const char *v60;
  __int16 v61;
  const char *v62;
  __int16 v63;
  const char *v64;
  __int16 v65;
  const char *v66;
  __int16 v67;
  const char *v68;
  __int16 v69;
  const char *v70;
  __int16 v71;
  id v72;
  uint64_t v73;

  v73 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3->mode_handler;
  -[NWConcrete_nw_endpoint_mode_handler cancelWithHandler:forced:](v4, "cancelWithHandler:forced:", v3, 1);

  os_unfair_lock_lock(&v3->lock);
  v5 = *((_BYTE *)v3 + 268);
  *((_BYTE *)v3 + 268) = v5 & 0xE7;
  if ((v5 & 1) != 0 || v3->parent_handler)
  {
    v6 = 0;
    v3->mode = 0;
LABEL_4:
    mode_handler = v3->mode_handler;
    v3->mode_handler = (NWConcrete_nw_endpoint_mode_handler *)v6;

    goto LABEL_5;
  }
  if (v3->mode != 2)
  {
    v3->mode = 2;
    v6 = objc_alloc_init(NWConcrete_nw_endpoint_flow);
    *((_BYTE *)v6 + 32) = *((_BYTE *)v6 + 32) & 0xFC | 1;
    goto LABEL_4;
  }
  nw_endpoint_flow_reset_is_leaf_handler(v3->mode_handler, 0);
LABEL_5:
  v3->state = 1;
  os_unfair_lock_unlock(&v3->lock);
  minimize_logging = nw_endpoint_handler_get_minimize_logging(v3);
  if (a2)
  {
    if (minimize_logging)
    {
      if ((nw_endpoint_handler_get_logging_disabled(v3) & 1) != 0)
        goto LABEL_45;
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v11 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
      {
        id_string = nw_endpoint_handler_get_id_string(v3);
        v44 = nw_endpoint_handler_dry_run_string(v3);
        v45 = nw_endpoint_handler_copy_endpoint(v3);
        logging_description = nw_endpoint_get_logging_description(v45);
        v47 = nw_endpoint_handler_state_string(v3);
        v48 = nw_endpoint_handler_mode_string(v3);
        v49 = nw_endpoint_handler_copy_current_path(v3);
        *(_DWORD *)buf = 136447746;
        v60 = "nw_endpoint_handler_reset_mode";
        v61 = 2082;
        v62 = id_string;
        v63 = 2082;
        v64 = v44;
        v65 = 2082;
        v66 = logging_description;
        v67 = 2082;
        v68 = v47;
        v69 = 2082;
        v70 = v48;
        v71 = 2114;
        v72 = v49;
        _os_log_impl(&dword_182FBE000, v11, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] reset, restarting path handling", buf, 0x48u);

      }
    }
    else
    {
      v9 = v3;
      v10 = *((_BYTE *)v3 + 268);

      if ((v10 & 0x20) != 0)
      {
LABEL_45:
        nw_endpoint_handler_path_change(v3);
        goto LABEL_50;
      }
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v11 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        v12 = v9;

        v13 = v12;
        v14 = *((_BYTE *)v3 + 268);

        if ((v14 & 1) != 0)
          v15 = "dry-run ";
        else
          v15 = "";
        v16 = nw_endpoint_handler_copy_endpoint(v13);
        v17 = nw_endpoint_get_logging_description(v16);
        v57 = v12 + 168;
        v18 = v13;
        v19 = v18;
        state = v3->state;
        if (state > 5)
          v21 = "unknown-state";
        else
          v21 = off_1E149FC48[state];

        v35 = v19;
        v36 = "path";
        switch(*((_DWORD *)v35 + 29))
        {
          case 0:
            break;
          case 1:
            v36 = "resolver";
            break;
          case 2:
            v36 = nw_endpoint_flow_mode_string(v3->mode_handler);
            break;
          case 3:
            v36 = "proxy";
            break;
          case 4:
            v36 = "fallback";
            break;
          case 5:
            v36 = "transform";
            break;
          default:
            v36 = "unknown-mode";
            break;
        }

        v39 = v35;
        os_unfair_lock_lock(&v3->lock);
        v40 = v39[8];
        os_unfair_lock_unlock(&v3->lock);

        *(_DWORD *)buf = 136447746;
        v60 = "nw_endpoint_handler_reset_mode";
        v61 = 2082;
        v62 = v57;
        v63 = 2082;
        v64 = v15;
        v65 = 2082;
        v66 = v17;
        v67 = 2082;
        v68 = v21;
        v69 = 2082;
        v70 = v36;
        v71 = 2114;
        v72 = v40;
        _os_log_impl(&dword_182FBE000, v11, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] reset, restarting path handling", buf, 0x48u);

      }
    }

    goto LABEL_45;
  }
  if (minimize_logging)
  {
    if ((nw_endpoint_handler_get_logging_disabled(v3) & 1) != 0)
      goto LABEL_50;
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v24 = (id)gconnectionLogObj;
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
    {
      v50 = nw_endpoint_handler_get_id_string(v3);
      v51 = nw_endpoint_handler_dry_run_string(v3);
      v52 = nw_endpoint_handler_copy_endpoint(v3);
      v53 = nw_endpoint_get_logging_description(v52);
      v54 = nw_endpoint_handler_state_string(v3);
      v55 = nw_endpoint_handler_mode_string(v3);
      v56 = nw_endpoint_handler_copy_current_path(v3);
      *(_DWORD *)buf = 136447746;
      v60 = "nw_endpoint_handler_reset_mode";
      v61 = 2082;
      v62 = v50;
      v63 = 2082;
      v64 = v51;
      v65 = 2082;
      v66 = v53;
      v67 = 2082;
      v68 = v54;
      v69 = 2082;
      v70 = v55;
      v71 = 2114;
      v72 = v56;
      _os_log_impl(&dword_182FBE000, v24, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] reset", buf, 0x48u);

    }
    goto LABEL_49;
  }
  v22 = v3;
  v23 = *((_BYTE *)v3 + 268);

  if ((v23 & 0x20) == 0)
  {
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v24 = (id)gconnectionLogObj;
    if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
    {
      v25 = v22;

      v26 = v25;
      v27 = *((_BYTE *)v3 + 268);

      if ((v27 & 1) != 0)
        v28 = "dry-run ";
      else
        v28 = "";
      v29 = nw_endpoint_handler_copy_endpoint(v26);
      v30 = nw_endpoint_get_logging_description(v29);
      v58 = v25 + 168;
      v31 = v26;
      v32 = v31;
      v33 = v3->state;
      if (v33 > 5)
        v34 = "unknown-state";
      else
        v34 = off_1E149FC48[v33];

      v37 = v32;
      v38 = "path";
      switch(*((_DWORD *)v37 + 29))
      {
        case 0:
          break;
        case 1:
          v38 = "resolver";
          break;
        case 2:
          v38 = nw_endpoint_flow_mode_string(v3->mode_handler);
          break;
        case 3:
          v38 = "proxy";
          break;
        case 4:
          v38 = "fallback";
          break;
        case 5:
          v38 = "transform";
          break;
        default:
          v38 = "unknown-mode";
          break;
      }

      v41 = v37;
      os_unfair_lock_lock(&v3->lock);
      v42 = v41[8];
      os_unfair_lock_unlock(&v3->lock);

      *(_DWORD *)buf = 136447746;
      v60 = "nw_endpoint_handler_reset_mode";
      v61 = 2082;
      v62 = v58;
      v63 = 2082;
      v64 = v28;
      v65 = 2082;
      v66 = v30;
      v67 = 2082;
      v68 = v34;
      v69 = 2082;
      v70 = v38;
      v71 = 2114;
      v72 = v42;
      _os_log_impl(&dword_182FBE000, v24, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] reset", buf, 0x48u);

    }
LABEL_49:

  }
LABEL_50:

}

void sub_18365EC04(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void ___ZL31nw_endpoint_handler_path_changeP30NWConcrete_nw_endpoint_handler_block_invoke_138(uint64_t a1)
{
  int minimize_logging;
  char logging_disabled;
  NSObject *v4;
  const char *v5;
  const char *v6;
  nw_endpoint_t v7;
  const char *v8;
  const char *v9;
  const char *v10;
  id v11;
  const char *id_string;
  const char *v13;
  nw_endpoint_t v14;
  const char *logging_description;
  const char *v16;
  const char *v17;
  id v18;
  int v19;
  const char *v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  const char *v26;
  __int16 v27;
  const char *v28;
  __int16 v29;
  const char *v30;
  __int16 v31;
  id v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  minimize_logging = nw_endpoint_handler_get_minimize_logging(*(void **)(a1 + 32));
  logging_disabled = nw_endpoint_handler_get_logging_disabled(*(void **)(a1 + 32));
  if (minimize_logging)
  {
    if ((logging_disabled & 1) != 0)
      goto LABEL_8;
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v4 = (id)gconnectionLogObj;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      id_string = nw_endpoint_handler_get_id_string(*(void **)(a1 + 32));
      v13 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 32));
      v14 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 32));
      logging_description = nw_endpoint_get_logging_description(v14);
      v16 = nw_endpoint_handler_state_string(*(void **)(a1 + 32));
      v17 = nw_endpoint_handler_mode_string(*(void **)(a1 + 32));
      v18 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 32));
      v19 = 136447746;
      v20 = "nw_endpoint_handler_path_change_block_invoke";
      v21 = 2082;
      v22 = id_string;
      v23 = 2082;
      v24 = v13;
      v25 = 2082;
      v26 = logging_description;
      v27 = 2082;
      v28 = v16;
      v29 = 2082;
      v30 = v17;
      v31 = 2114;
      v32 = v18;
      _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] fallback timer fired, resetting", (uint8_t *)&v19, 0x48u);

    }
    goto LABEL_7;
  }
  if ((logging_disabled & 1) == 0)
  {
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v4 = (id)gconnectionLogObj;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      v5 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 32));
      v6 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 32));
      v7 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 32));
      v8 = nw_endpoint_get_logging_description(v7);
      v9 = nw_endpoint_handler_state_string(*(void **)(a1 + 32));
      v10 = nw_endpoint_handler_mode_string(*(void **)(a1 + 32));
      v11 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 32));
      v19 = 136447746;
      v20 = "nw_endpoint_handler_path_change_block_invoke";
      v21 = 2082;
      v22 = v5;
      v23 = 2082;
      v24 = v6;
      v25 = 2082;
      v26 = v8;
      v27 = 2082;
      v28 = v9;
      v29 = 2082;
      v30 = v10;
      v31 = 2114;
      v32 = v11;
      _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] fallback timer fired, resetting", (uint8_t *)&v19, 0x48u);

    }
LABEL_7:

  }
LABEL_8:
  nw_endpoint_handler_reset_mode(*(void **)(a1 + 32), 1);
}

void sub_18365EF50(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

BOOL nw_endpoint_handler_should_perform_CrazyIvan46(NWConcrete_nw_endpoint_handler *a1)
{
  NWConcrete_nw_endpoint_handler *v1;
  nw_endpoint_t *v2;
  NWConcrete_nw_endpoint_handler *parent_handler;
  _BOOL8 v4;

  v1 = a1;
  v2 = (nw_endpoint_t *)v1;
  v4 = v1->state == 1
    && !v1->mode
    && ((parent_handler = v1->parent_handler) == 0
     || parent_handler->mode != 1
     || nw_endpoint_get_type((nw_endpoint_t)parent_handler->endpoint) != nw_endpoint_type_address)
    && nw_endpoint_get_type(v2[3]) == nw_endpoint_type_address
    && nw_endpoint_get_address_family(v2[3]) == 2;

  return v4;
}

void sub_18365F000(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL nw_endpoint_handler_should_do_local_only_resolution(NWConcrete_nw_endpoint_handler *a1)
{
  NWConcrete_nw_endpoint_handler *v1;
  NWConcrete_nw_endpoint_handler *v2;
  NWConcrete_nw_endpoint_handler *parent_handler;
  _BOOL8 v4;

  v1 = a1;
  v2 = v1;
  v4 = v1->state == 1
    && !v1->mode
    && nw_path_has_unsatisfied_route(v1->current_path)
    && ((parent_handler = v2->parent_handler) == 0 || parent_handler->mode != 1)
    && nw_endpoint_get_type((nw_endpoint_t)v2->endpoint) == nw_endpoint_type_host;

  return v4;
}

void sub_18365F084(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t __nw_endpoint_handler_has_persistent_application_protocols_block_invoke(uint64_t a1)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
  return 0;
}

uint64_t ___ZL44nw_endpoint_handler_triggered_agents_updatedP30NWConcrete_nw_endpoint_handler_block_invoke(xpc_object_t *a1, uint64_t a2, void *a3)
{
  id v4;
  void *v5;
  const unsigned __int8 *bytes;
  void *v7;
  uint64_t v8;
  void *v9;
  int uint64;
  _BYTE v12[37];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = v4;
  if (v4 && object_getClass(v4) == (Class)MEMORY[0x1E0C813A0])
  {
    memset(v12, 0, sizeof(v12));
    bytes = xpc_uuid_get_bytes(v5);
    uuid_unparse(bytes, v12);
    xpc_dictionary_get_value(a1[4], v12);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    xpc_dictionary_get_value(a1[5], v12);
    v8 = objc_claimAutoreleasedReturnValue();
    v9 = (void *)v8;
    if (v7)
    {
      if (v8)
      {
        uint64 = xpc_dictionary_get_uint64(v7, "generation");
        if (uint64 == xpc_dictionary_get_uint64(v9, "generation"))
          xpc_array_append_value(a1[6], v5);
      }
    }

  }
  return 1;
}

void sub_18365F1C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

BOOL nw_endpoint_handler_has_matching_handler(void *a1, void *a2)
{
  id v3;
  void **v4;
  _BOOL8 v5;
  void *v6;
  _QWORD v8[4];
  void **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  char v14;

  v3 = a1;
  v4 = a2;
  if ((nw_endpoint_is_equal(*((void **)v3 + 3), v4[3], 31) & 1) != 0)
  {
    v5 = 1;
  }
  else
  {
    v11 = 0;
    v12 = &v11;
    v13 = 0x2020000000;
    v14 = 0;
    if ((objc_opt_respondsToSelector() & 1) != 0)
    {
      v6 = (void *)*((_QWORD *)v3 + 31);
      v8[0] = MEMORY[0x1E0C809B0];
      v8[1] = 3221225472;
      v8[2] = __nw_endpoint_handler_has_matching_handler_block_invoke;
      v8[3] = &unk_1E149FB28;
      v9 = v4;
      v10 = &v11;
      objc_msgSend(v6, "applyWithHandler:toChildren:", v3, v8);

    }
    v5 = *((_BYTE *)v12 + 24) != 0;
    _Block_object_dispose(&v11, 8);
  }

  return v5;
}

void sub_18365F318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, ...)
{
  void *v7;
  void *v8;
  va_list va;

  va_start(va, a7);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_endpoint_handler_has_matching_handler_block_invoke(uint64_t a1, uint64_t a2)
{
  int has_matching_handler;

  has_matching_handler = nw_endpoint_handler_has_matching_handler(a2, *(_QWORD *)(a1 + 32));
  if (has_matching_handler)
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
  return has_matching_handler ^ 1u;
}

uint64_t __Block_byref_object_copy__30992(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__30993(uint64_t a1)
{

}

uint64_t __nw_endpoint_handler_copy_metadata_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = ne_session_copy_app_data_from_flow_divert_socket();
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

  return 1;
}

uint64_t nw_endpoint_handler_uses_sleep_proxy(void *a1)
{
  os_unfair_lock_s *v1;
  os_unfair_lock_s *v2;
  os_unfair_lock_s *v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  void *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  char *v15;
  os_log_type_t v16;
  _BOOL4 v17;
  char *backtrace_string;
  os_log_type_t v19;
  _BOOL4 v20;
  os_log_type_t v21;
  os_log_type_t v22;
  char v23;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  char *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    os_unfair_lock_lock(v1 + 28);
    if (v2[29]._os_unfair_lock_opaque != 2)
    {
      v5 = 0;
LABEL_12:
      os_unfair_lock_unlock(v2 + 28);
      goto LABEL_13;
    }
    v3 = (os_unfair_lock_s *)*(id *)&v2[62]._os_unfair_lock_opaque;
    v4 = v3;
    if (v3)
    {
      os_unfair_lock_lock(v3 + 220);
      if ((v4[8]._os_unfair_lock_opaque & 2) != 0 || (v4[8]._os_unfair_lock_opaque & 0x100) != 0)
      {
        v5 = *(_QWORD *)&v4[230]._os_unfair_lock_opaque != 0;
      }
      else if (*(_QWORD *)&v4[234]._os_unfair_lock_opaque)
      {
        v5 = nw_endpoint_handler_uses_sleep_proxy();
      }
      else
      {
        v5 = 0;
      }
      os_unfair_lock_unlock(v4 + 220);
LABEL_11:

      goto LABEL_12;
    }
    __nwlog_obj();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v26 = "nw_endpoint_flow_uses_sleep_proxy";
    v12 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (__nwlog_fault(v12, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v13 = objc_claimAutoreleasedReturnValue();
        v14 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)buf = 136446210;
          v26 = "nw_endpoint_flow_uses_sleep_proxy";
          _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s called with null endpoint_flow", buf, 0xCu);
        }
      }
      else if (v23)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v13 = objc_claimAutoreleasedReturnValue();
        v19 = type;
        v20 = os_log_type_enabled(v13, type);
        if (backtrace_string)
        {
          if (v20)
          {
            *(_DWORD *)buf = 136446466;
            v26 = "nw_endpoint_flow_uses_sleep_proxy";
            v27 = 2082;
            v28 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v13, v19, "%{public}s called with null endpoint_flow, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_50;
        }
        if (v20)
        {
          *(_DWORD *)buf = 136446210;
          v26 = "nw_endpoint_flow_uses_sleep_proxy";
          _os_log_impl(&dword_182FBE000, v13, v19, "%{public}s called with null endpoint_flow, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v13 = objc_claimAutoreleasedReturnValue();
        v22 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)buf = 136446210;
          v26 = "nw_endpoint_flow_uses_sleep_proxy";
          _os_log_impl(&dword_182FBE000, v13, v22, "%{public}s called with null endpoint_flow, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_50:
    if (v12)
      free(v12);
    v5 = 0;
    goto LABEL_11;
  }
  __nwlog_obj();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v26 = "nw_endpoint_handler_uses_sleep_proxy";
  v8 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v23 = 0;
  if (__nwlog_fault(v8, &type, &v23))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_endpoint_handler_uses_sleep_proxy";
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null handler", buf, 0xCu);
      }
    }
    else if (v23)
    {
      v15 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      v17 = os_log_type_enabled(v9, type);
      if (v15)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          v26 = "nw_endpoint_handler_uses_sleep_proxy";
          v27 = 2082;
          v28 = v15;
          _os_log_impl(&dword_182FBE000, v9, v16, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v15);
        goto LABEL_41;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_endpoint_handler_uses_sleep_proxy";
        _os_log_impl(&dword_182FBE000, v9, v16, "%{public}s called with null handler, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v21 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_endpoint_handler_uses_sleep_proxy";
        _os_log_impl(&dword_182FBE000, v9, v21, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_41:
  if (v8)
    free(v8);
  v5 = 0;
LABEL_13:

  return v5;
}

void sub_18365F918(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t nw_endpoint_handler_is_multipath(void *a1)
{
  os_unfair_lock_s *v1;
  os_unfair_lock_s *v2;
  uint64_t is_multipath;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    os_unfair_lock_lock(v1 + 28);
    if (v2[29]._os_unfair_lock_opaque == 2)
      is_multipath = nw_endpoint_flow_is_multipath(*(void **)&v2[62]._os_unfair_lock_opaque);
    else
      is_multipath = 0;
    os_unfair_lock_unlock(v2 + 28);
    goto LABEL_6;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_endpoint_handler_is_multipath";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_endpoint_handler_is_multipath";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null handler", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_endpoint_handler_is_multipath";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_endpoint_handler_is_multipath";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null handler, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_endpoint_handler_is_multipath";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_23:
  if (v6)
    free(v6);
  is_multipath = 0;
LABEL_6:

  return is_multipath;
}

void sub_18365FBF0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id nw_endpoint_handler_copy_multipath_tcp_info(void *a1)
{
  os_unfair_lock_s *v1;
  os_unfair_lock_s *v2;
  id v3;
  xpc_object_t v4;
  id v5;
  id v6;
  id v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  NSObject *v11;
  char *backtrace_string;
  os_log_type_t v14;
  _BOOL4 v15;
  os_log_type_t v16;
  void *v17;
  char *v18;
  NSObject *v19;
  os_log_type_t v20;
  void *v21;
  char *v22;
  NSObject *v23;
  os_log_type_t v24;
  char *v25;
  os_log_type_t v26;
  _BOOL4 v27;
  char *v28;
  os_log_type_t v29;
  _BOOL4 v30;
  os_log_type_t v31;
  os_log_type_t v32;
  char v33;
  os_log_type_t type;
  _BYTE buf[24];
  void *v36;
  id v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    os_unfair_lock_lock(v1 + 28);
    if (v2[29]._os_unfair_lock_opaque != 2)
    {
      v6 = 0;
LABEL_23:
      os_unfair_lock_unlock(v2 + 28);
      goto LABEL_24;
    }
    v3 = *(id *)&v2[62]._os_unfair_lock_opaque;
    if (v3)
    {
      v4 = xpc_dictionary_create(0, 0, 0);
      if (v4)
      {
        if ((nw_endpoint_flow_is_multipath(v3) & 1) != 0)
        {
          v5 = nw_endpoint_flow_copy_connected_socket_wrapper(v3);
          if (v5)
          {
            *(_QWORD *)buf = MEMORY[0x1E0C809B0];
            *(_QWORD *)&buf[8] = 3221225472;
            *(_QWORD *)&buf[16] = ___Z40nw_endpoint_flow_copy_multipath_tcp_infoP27NWConcrete_nw_endpoint_flow_block_invoke;
            v36 = &unk_1E14AB528;
            v37 = v4;
            nw_fd_wrapper_get_fd(v5, buf);

          }
          v6 = v4;

          goto LABEL_21;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v11 = (id)gLogObj;
        if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_endpoint_flow_copy_multipath_tcp_info";
          _os_log_impl(&dword_182FBE000, v11, OS_LOG_TYPE_ERROR, "%{public}s Called on non-Multipath connection", buf, 0xCu);
        }

LABEL_20:
        v6 = 0;
LABEL_21:

LABEL_22:
        goto LABEL_23;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v7 = (id)gLogObj;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_endpoint_flow_copy_multipath_tcp_info";
      v8 = (char *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v33 = 0;
      if ((__nwlog_fault(v8, &type, &v33) & 1) != 0)
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v9 = (id)gLogObj;
          v10 = type;
          if (os_log_type_enabled(v9, type))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_endpoint_flow_copy_multipath_tcp_info";
            _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s xpc_dictionary_create failed", buf, 0xCu);
          }
        }
        else if (v33)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v9 = (id)gLogObj;
          v14 = type;
          v15 = os_log_type_enabled(v9, type);
          if (backtrace_string)
          {
            if (v15)
            {
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "nw_endpoint_flow_copy_multipath_tcp_info";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = backtrace_string;
              _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s xpc_dictionary_create failed, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(backtrace_string);
            if (!v8)
              goto LABEL_20;
            goto LABEL_16;
          }
          if (v15)
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_endpoint_flow_copy_multipath_tcp_info";
            _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s xpc_dictionary_create failed, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v9 = (id)gLogObj;
          v16 = type;
          if (os_log_type_enabled(v9, type))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_endpoint_flow_copy_multipath_tcp_info";
            _os_log_impl(&dword_182FBE000, v9, v16, "%{public}s xpc_dictionary_create failed, backtrace limit exceeded", buf, 0xCu);
          }
        }

      }
      if (!v8)
        goto LABEL_20;
LABEL_16:
      free(v8);
      goto LABEL_20;
    }
    __nwlog_obj();
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_endpoint_flow_copy_multipath_tcp_info";
    v22 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v33 = 0;
    if (__nwlog_fault(v22, &type, &v33))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v23 = objc_claimAutoreleasedReturnValue();
        v24 = type;
        if (os_log_type_enabled(v23, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_endpoint_flow_copy_multipath_tcp_info";
          _os_log_impl(&dword_182FBE000, v23, v24, "%{public}s called with null endpoint_flow", buf, 0xCu);
        }
      }
      else if (v33)
      {
        v28 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v23 = objc_claimAutoreleasedReturnValue();
        v29 = type;
        v30 = os_log_type_enabled(v23, type);
        if (v28)
        {
          if (v30)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_endpoint_flow_copy_multipath_tcp_info";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v28;
            _os_log_impl(&dword_182FBE000, v23, v29, "%{public}s called with null endpoint_flow, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v28);
          goto LABEL_72;
        }
        if (v30)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_endpoint_flow_copy_multipath_tcp_info";
          _os_log_impl(&dword_182FBE000, v23, v29, "%{public}s called with null endpoint_flow, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v23 = objc_claimAutoreleasedReturnValue();
        v32 = type;
        if (os_log_type_enabled(v23, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_endpoint_flow_copy_multipath_tcp_info";
          _os_log_impl(&dword_182FBE000, v23, v32, "%{public}s called with null endpoint_flow, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_72:
    if (v22)
      free(v22);
    v6 = 0;
    goto LABEL_22;
  }
  __nwlog_obj();
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_endpoint_handler_copy_multipath_tcp_info";
  v18 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v33 = 0;
  if (__nwlog_fault(v18, &type, &v33))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v19 = objc_claimAutoreleasedReturnValue();
      v20 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_endpoint_handler_copy_multipath_tcp_info";
        _os_log_impl(&dword_182FBE000, v19, v20, "%{public}s called with null handler", buf, 0xCu);
      }
    }
    else if (v33)
    {
      v25 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v19 = objc_claimAutoreleasedReturnValue();
      v26 = type;
      v27 = os_log_type_enabled(v19, type);
      if (v25)
      {
        if (v27)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_endpoint_handler_copy_multipath_tcp_info";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v25;
          _os_log_impl(&dword_182FBE000, v19, v26, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v25);
        goto LABEL_63;
      }
      if (v27)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_endpoint_handler_copy_multipath_tcp_info";
        _os_log_impl(&dword_182FBE000, v19, v26, "%{public}s called with null handler, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v19 = objc_claimAutoreleasedReturnValue();
      v31 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_endpoint_handler_copy_multipath_tcp_info";
        _os_log_impl(&dword_182FBE000, v19, v31, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_63:
  if (v18)
    free(v18);
  v6 = 0;
LABEL_24:

  return v6;
}

void sub_183660450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  void *v19;
  void *v20;
  void *v21;
  void *v22;

  _Unwind_Resume(a1);
}

id nw_endpoint_handler_copy_parent(void *a1)
{
  id *v1;
  id *v2;
  id v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = v1[9];
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_endpoint_handler_copy_parent";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_endpoint_handler_copy_parent";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null handler", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_endpoint_handler_copy_parent";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_endpoint_handler_copy_parent";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null handler, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_endpoint_handler_copy_parent";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_endpoint_handler_get_flow_id(void *a1, _OWORD *a2)
{
  id *v3;
  id *v4;
  os_unfair_lock_s *v5;
  os_unfair_lock_s *v6;
  uint64_t v7;
  uint64_t flow_id;
  NSObject *v9;
  const char *v10;
  nw_endpoint_t v11;
  const char *logging_description;
  uint64_t v13;
  const char *v14;
  void *v15;
  unsigned __int8 *v16;
  int is_null;
  id *v18;
  os_unfair_lock_s *v19;
  const char *v20;
  os_unfair_lock_s *v21;
  id *v22;
  id v23;
  void *v24;
  char *v25;
  NSObject *v26;
  os_log_type_t v27;
  void *v28;
  char *v29;
  NSObject *v30;
  os_log_type_t v31;
  char *backtrace_string;
  os_log_type_t v33;
  _BOOL4 v34;
  char *v35;
  os_log_type_t v36;
  _BOOL4 v37;
  os_log_type_t v38;
  os_log_type_t v39;
  nw_endpoint_t v41;
  char v42;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v45;
  __int16 v46;
  char *v47;
  __int16 v48;
  const char *v49;
  __int16 v50;
  const char *v51;
  __int16 v52;
  const char *v53;
  __int16 v54;
  const char *v55;
  __int16 v56;
  id v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v45 = "nw_endpoint_handler_get_flow_id";
    v25 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v42 = 0;
    if (__nwlog_fault(v25, &type, &v42))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v26 = objc_claimAutoreleasedReturnValue();
        v27 = type;
        if (os_log_type_enabled(v26, type))
        {
          *(_DWORD *)buf = 136446210;
          v45 = "nw_endpoint_handler_get_flow_id";
          _os_log_impl(&dword_182FBE000, v26, v27, "%{public}s called with null handler", buf, 0xCu);
        }
      }
      else if (v42)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v26 = objc_claimAutoreleasedReturnValue();
        v33 = type;
        v34 = os_log_type_enabled(v26, type);
        if (backtrace_string)
        {
          if (v34)
          {
            *(_DWORD *)buf = 136446466;
            v45 = "nw_endpoint_handler_get_flow_id";
            v46 = 2082;
            v47 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v26, v33, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_60;
        }
        if (v34)
        {
          *(_DWORD *)buf = 136446210;
          v45 = "nw_endpoint_handler_get_flow_id";
          _os_log_impl(&dword_182FBE000, v26, v33, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v26 = objc_claimAutoreleasedReturnValue();
        v38 = type;
        if (os_log_type_enabled(v26, type))
        {
          *(_DWORD *)buf = 136446210;
          v45 = "nw_endpoint_handler_get_flow_id";
          _os_log_impl(&dword_182FBE000, v26, v38, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_60:
    if (v25)
      free(v25);
    goto LABEL_33;
  }
  if (*((_DWORD *)v3 + 29) == 2)
  {
    v5 = (os_unfair_lock_s *)v3[31];
    v6 = v5;
    if (v5)
    {
      if ((v5[8]._os_unfair_lock_opaque & 2) == 0 && (v5[8]._os_unfair_lock_opaque & 0x100) == 0)
      {
        os_unfair_lock_lock(v5 + 220);
        v7 = *(_QWORD *)&v6[234]._os_unfair_lock_opaque;
        if (v7)
          flow_id = nw_endpoint_handler_get_flow_id(v7, a2);
        else
          flow_id = 0;
        os_unfair_lock_unlock(v6 + 220);
        goto LABEL_71;
      }
      v15 = *(void **)&v5[208]._os_unfair_lock_opaque;
      if (v15)
      {
        v16 = v15;
        is_null = uuid_is_null(v16 + 32);
        flow_id = is_null == 0;
        if (!is_null)
          *a2 = *((_OWORD *)v16 + 2);

        goto LABEL_71;
      }
LABEL_70:
      flow_id = 0;
LABEL_71:

      goto LABEL_72;
    }
    __nwlog_obj();
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v45 = "nw_endpoint_flow_get_flow_id";
    v29 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v42 = 0;
    if (__nwlog_fault(v29, &type, &v42))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v30 = objc_claimAutoreleasedReturnValue();
        v31 = type;
        if (os_log_type_enabled(v30, type))
        {
          *(_DWORD *)buf = 136446210;
          v45 = "nw_endpoint_flow_get_flow_id";
          _os_log_impl(&dword_182FBE000, v30, v31, "%{public}s called with null endpoint_flow", buf, 0xCu);
        }
      }
      else if (v42)
      {
        v35 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v30 = objc_claimAutoreleasedReturnValue();
        v36 = type;
        v37 = os_log_type_enabled(v30, type);
        if (v35)
        {
          if (v37)
          {
            *(_DWORD *)buf = 136446466;
            v45 = "nw_endpoint_flow_get_flow_id";
            v46 = 2082;
            v47 = v35;
            _os_log_impl(&dword_182FBE000, v30, v36, "%{public}s called with null endpoint_flow, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v35);
          goto LABEL_68;
        }
        if (v37)
        {
          *(_DWORD *)buf = 136446210;
          v45 = "nw_endpoint_flow_get_flow_id";
          _os_log_impl(&dword_182FBE000, v30, v36, "%{public}s called with null endpoint_flow, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v30 = objc_claimAutoreleasedReturnValue();
        v39 = type;
        if (os_log_type_enabled(v30, type))
        {
          *(_DWORD *)buf = 136446210;
          v45 = "nw_endpoint_flow_get_flow_id";
          _os_log_impl(&dword_182FBE000, v30, v39, "%{public}s called with null endpoint_flow, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_68:
    if (v29)
      free(v29);
    goto LABEL_70;
  }
  if ((*((_BYTE *)v3 + 268) & 0x20) == 0)
  {
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v9 = (id)gconnectionLogObj;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      if ((*((_BYTE *)v4 + 268) & 1) != 0)
        v10 = "dry-run ";
      else
        v10 = "";
      v11 = nw_endpoint_handler_copy_endpoint(v4);
      logging_description = nw_endpoint_get_logging_description(v11);
      v13 = *((unsigned int *)v4 + 30);
      if (v13 > 5)
        v14 = "unknown-state";
      else
        v14 = off_1E149FC48[v13];
      v18 = v4;
      v19 = (os_unfair_lock_s *)v18;
      v41 = v11;
      v20 = "path";
      switch(*((_DWORD *)v4 + 29))
      {
        case 0:
          break;
        case 1:
          v20 = "resolver";
          break;
        case 2:
          v20 = nw_endpoint_flow_mode_string(v18[31]);
          break;
        case 3:
          v20 = "proxy";
          break;
        case 4:
          v20 = "fallback";
          break;
        case 5:
          v20 = "transform";
          break;
        default:
          v20 = "unknown-mode";
          break;
      }

      v21 = v19 + 28;
      v22 = v19;
      os_unfair_lock_lock(v19 + 28);
      v23 = v22[8];
      os_unfair_lock_unlock(v21);

      *(_DWORD *)buf = 136447746;
      v45 = "nw_endpoint_handler_get_flow_id";
      v46 = 2082;
      v47 = (char *)(v4 + 21);
      v48 = 2082;
      v49 = v10;
      v50 = 2082;
      v51 = logging_description;
      v52 = 2082;
      v53 = v14;
      v54 = 2082;
      v55 = v20;
      v56 = 2114;
      v57 = v23;
      _os_log_impl(&dword_182FBE000, v9, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Endpoint handler is not flow", buf, 0x48u);

    }
  }
LABEL_33:
  flow_id = 0;
LABEL_72:

  return flow_id;
}

void sub_183660E9C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t nw_endpoint_handler_used_prefer_fallback(void *a1)
{
  id *v1;
  id *v2;
  unsigned __int8 *v3;
  void *v4;
  uint64_t v5;
  id v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *v10;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  void *v15;
  os_log_type_t v16;
  void *v17;
  char *v18;
  NSObject *v19;
  os_log_type_t v20;
  char *backtrace_string;
  os_log_type_t v22;
  _BOOL4 v23;
  char *v24;
  os_log_type_t v25;
  _BOOL4 v26;
  os_log_type_t v27;
  os_log_type_t v28;
  char v29;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v32;
  __int16 v33;
  char *v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v32 = "nw_endpoint_handler_used_prefer_fallback";
    v7 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v29 = 0;
    if (__nwlog_fault(v7, &type, &v29))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v8 = objc_claimAutoreleasedReturnValue();
        v16 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          v32 = "nw_endpoint_handler_used_prefer_fallback";
          _os_log_impl(&dword_182FBE000, v8, v16, "%{public}s called with null handler", buf, 0xCu);
        }
LABEL_22:

        goto LABEL_23;
      }
      if (!v29)
      {
        __nwlog_obj();
        v8 = objc_claimAutoreleasedReturnValue();
        v27 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          v32 = "nw_endpoint_handler_used_prefer_fallback";
          _os_log_impl(&dword_182FBE000, v8, v27, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_22;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v22 = type;
      v23 = os_log_type_enabled(v8, type);
      if (!backtrace_string)
      {
        if (v23)
        {
          *(_DWORD *)buf = 136446210;
          v32 = "nw_endpoint_handler_used_prefer_fallback";
          _os_log_impl(&dword_182FBE000, v8, v22, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
        goto LABEL_22;
      }
      if (v23)
      {
        *(_DWORD *)buf = 136446466;
        v32 = "nw_endpoint_handler_used_prefer_fallback";
        v33 = 2082;
        v34 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v8, v22, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
LABEL_23:
    if (!v7)
    {
LABEL_25:
      v5 = 0;
      goto LABEL_26;
    }
LABEL_24:
    free(v7);
    goto LABEL_25;
  }
  if (*((_DWORD *)v1 + 29) != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v6 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v32 = "nw_endpoint_handler_used_prefer_fallback";
    v7 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v29 = 0;
    if (!__nwlog_fault(v7, &type, &v29))
      goto LABEL_23;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v8 = (id)gLogObj;
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v32 = "nw_endpoint_handler_used_prefer_fallback";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s Endpoint handler is not in fallback mode", buf, 0xCu);
      }
    }
    else if (v29)
    {
      v10 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v8 = (id)gLogObj;
      v11 = type;
      v12 = os_log_type_enabled(v8, type);
      if (v10)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          v32 = "nw_endpoint_handler_used_prefer_fallback";
          v33 = 2082;
          v34 = v10;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s Endpoint handler is not in fallback mode, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v10);
        if (!v7)
          goto LABEL_25;
        goto LABEL_24;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v32 = "nw_endpoint_handler_used_prefer_fallback";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s Endpoint handler is not in fallback mode, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v8 = (id)gLogObj;
      v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v32 = "nw_endpoint_handler_used_prefer_fallback";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s Endpoint handler is not in fallback mode, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_22;
  }
  v3 = (unsigned __int8 *)v1[31];
  v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v32 = "nw_endpoint_fallback_used_prefer_fallback";
    v18 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v29 = 0;
    if (__nwlog_fault(v18, &type, &v29))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v19 = objc_claimAutoreleasedReturnValue();
        v20 = type;
        if (os_log_type_enabled(v19, type))
        {
          *(_DWORD *)buf = 136446210;
          v32 = "nw_endpoint_fallback_used_prefer_fallback";
          _os_log_impl(&dword_182FBE000, v19, v20, "%{public}s called with null fallback", buf, 0xCu);
        }
      }
      else if (v29)
      {
        v24 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v19 = objc_claimAutoreleasedReturnValue();
        v25 = type;
        v26 = os_log_type_enabled(v19, type);
        if (v24)
        {
          if (v26)
          {
            *(_DWORD *)buf = 136446466;
            v32 = "nw_endpoint_fallback_used_prefer_fallback";
            v33 = 2082;
            v34 = v24;
            _os_log_impl(&dword_182FBE000, v19, v25, "%{public}s called with null fallback, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v24);
          goto LABEL_59;
        }
        if (v26)
        {
          *(_DWORD *)buf = 136446210;
          v32 = "nw_endpoint_fallback_used_prefer_fallback";
          _os_log_impl(&dword_182FBE000, v19, v25, "%{public}s called with null fallback, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v19 = objc_claimAutoreleasedReturnValue();
        v28 = type;
        if (os_log_type_enabled(v19, type))
        {
          *(_DWORD *)buf = 136446210;
          v32 = "nw_endpoint_fallback_used_prefer_fallback";
          _os_log_impl(&dword_182FBE000, v19, v28, "%{public}s called with null fallback, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_59:
    if (v18)
      free(v18);
    v5 = 0;
    goto LABEL_5;
  }
  v5 = (v3[108] >> 4) & 1;
LABEL_5:

LABEL_26:
  return v5;
}

void nw_endpoint_handler_reset_expected_progress_target(void *a1, uint64_t a2, const unsigned __int8 *a3)
{
  _DWORD *v5;
  void *v6;
  int v7;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  char *backtrace_string;
  os_log_type_t v13;
  _BOOL4 v14;
  os_log_type_t v15;
  char v16;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = v5;
  if (v5)
  {
    v7 = v5[29];
    if (v7 == 4)
    {
      nw_endpoint_fallback_reset_expected_progress_target(v5, a2);
    }
    else if (v7 == 2)
    {
      nw_endpoint_flow_reset_expected_progress_target(v5, a2, a3);
    }
    goto LABEL_6;
  }
  __nwlog_obj();
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v19 = "nw_endpoint_handler_reset_expected_progress_target";
  v9 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v16 = 0;
  if (__nwlog_fault(v9, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_endpoint_handler_reset_expected_progress_target";
        _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null handler", buf, 0xCu);
      }
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      v14 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          v19 = "nw_endpoint_handler_reset_expected_progress_target";
          v20 = 2082;
          v21 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_endpoint_handler_reset_expected_progress_target";
        _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null handler, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_endpoint_handler_reset_expected_progress_target";
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_23:
  if (v9)
    free(v9);
LABEL_6:

}

void sub_1836618F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

NWConcrete_nw_endpoint_mode_handler *nw_endpoint_handler_copy_proxy(NWConcrete_nw_endpoint_handler *a1)
{
  NWConcrete_nw_endpoint_handler *v1;
  NWConcrete_nw_endpoint_handler *v2;
  NWConcrete_nw_endpoint_mode_handler *v3;
  NSObject *v4;
  const char *v5;
  nw_endpoint_t v6;
  const char *logging_description;
  uint64_t state;
  const char *v9;
  const char *v10;
  NWConcrete_nw_endpoint_handler *v11;
  os_unfair_lock_s *v12;
  const char *v13;
  os_unfair_lock_s *v14;
  id *v15;
  id v16;
  id v17;
  id *v18;
  id *v19;
  const char *v20;
  void *v22;
  char *v23;
  NSObject *v24;
  os_log_type_t v25;
  char *backtrace_string;
  os_log_type_t v27;
  _BOOL4 v28;
  os_log_type_t v29;
  const char *v30;
  char v31;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v34;
  __int16 v35;
  char *id_str;
  __int16 v37;
  const char *v38;
  __int16 v39;
  const char *v40;
  __int16 v41;
  const char *v42;
  __int16 v43;
  const char *v44;
  __int16 v45;
  id v46;
  __int16 v47;
  const char *v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v34 = "nw_endpoint_handler_copy_proxy";
    v23 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v31 = 0;
    if (__nwlog_fault(v23, &type, &v31))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v24 = objc_claimAutoreleasedReturnValue();
        v25 = type;
        if (os_log_type_enabled(v24, type))
        {
          *(_DWORD *)buf = 136446210;
          v34 = "nw_endpoint_handler_copy_proxy";
          _os_log_impl(&dword_182FBE000, v24, v25, "%{public}s called with null handler", buf, 0xCu);
        }
      }
      else if (v31)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v24 = objc_claimAutoreleasedReturnValue();
        v27 = type;
        v28 = os_log_type_enabled(v24, type);
        if (backtrace_string)
        {
          if (v28)
          {
            *(_DWORD *)buf = 136446466;
            v34 = "nw_endpoint_handler_copy_proxy";
            v35 = 2082;
            id_str = backtrace_string;
            _os_log_impl(&dword_182FBE000, v24, v27, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_48;
        }
        if (v28)
        {
          *(_DWORD *)buf = 136446210;
          v34 = "nw_endpoint_handler_copy_proxy";
          _os_log_impl(&dword_182FBE000, v24, v27, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v24 = objc_claimAutoreleasedReturnValue();
        v29 = type;
        if (os_log_type_enabled(v24, type))
        {
          *(_DWORD *)buf = 136446210;
          v34 = "nw_endpoint_handler_copy_proxy";
          _os_log_impl(&dword_182FBE000, v24, v29, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_48:
    if (v23)
      free(v23);
    goto LABEL_30;
  }
  if (v1->mode != 3)
  {
    if ((*((_BYTE *)v1 + 268) & 0x20) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v4 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        if ((*((_BYTE *)v2 + 268) & 1) != 0)
          v5 = "dry-run ";
        else
          v5 = "";
        v6 = nw_endpoint_handler_copy_endpoint(v2);
        logging_description = nw_endpoint_get_logging_description(v6);
        state = v2->state;
        v9 = logging_description;
        if (state > 5)
          v10 = "unknown-state";
        else
          v10 = off_1E149FC48[state];
        v30 = v10;
        v11 = v2;
        v12 = (os_unfair_lock_s *)v11;
        v13 = "path";
        switch(v2->mode)
        {
          case 0:
            break;
          case 1:
            v13 = "resolver";
            break;
          case 2:
            v13 = nw_endpoint_flow_mode_string(v11->mode_handler);
            break;
          case 3:
            v13 = "proxy";
            break;
          case 4:
            v13 = "fallback";
            break;
          case 5:
            v13 = "transform";
            break;
          default:
            v13 = "unknown-mode";
            break;
        }

        v14 = v12 + 28;
        v15 = v12;
        os_unfair_lock_lock(v12 + 28);
        v16 = v15[8];
        os_unfair_lock_unlock(v14);

        v17 = v16;
        v18 = v15;
        v19 = v18;
        v20 = "path";
        switch(v2->mode)
        {
          case 0:
            break;
          case 1:
            v20 = "resolver";
            break;
          case 2:
            v20 = nw_endpoint_flow_mode_string(v18[31]);
            break;
          case 3:
            v20 = "proxy";
            break;
          case 4:
            v20 = "fallback";
            break;
          case 5:
            v20 = "transform";
            break;
          default:
            v20 = "unknown-mode";
            break;
        }

        *(_DWORD *)buf = 136448002;
        v34 = "nw_endpoint_handler_copy_proxy";
        v35 = 2082;
        id_str = v2->id_str;
        v37 = 2082;
        v38 = v5;
        v39 = 2082;
        v40 = v9;
        v41 = 2082;
        v42 = v30;
        v43 = 2082;
        v44 = v13;
        v45 = 2114;
        v46 = v17;
        v47 = 2082;
        v48 = v20;
        _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Endpoint handler is %{public}s, not a proxy", buf, 0x52u);

      }
    }
LABEL_30:
    v3 = 0;
    goto LABEL_31;
  }
  v3 = v1->mode_handler;
LABEL_31:

  return v3;
}

void sub_183661E48(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

NWConcrete_nw_endpoint_mode_handler *nw_endpoint_handler_copy_fallback(NWConcrete_nw_endpoint_handler *a1)
{
  NWConcrete_nw_endpoint_handler *v1;
  NWConcrete_nw_endpoint_handler *v2;
  NWConcrete_nw_endpoint_mode_handler *v3;
  NSObject *v4;
  const char *v5;
  nw_endpoint_t v6;
  const char *logging_description;
  uint64_t state;
  const char *v9;
  const char *v10;
  NWConcrete_nw_endpoint_handler *v11;
  os_unfair_lock_s *v12;
  const char *v13;
  os_unfair_lock_s *v14;
  id *v15;
  id v16;
  id v17;
  id *v18;
  id *v19;
  const char *v20;
  void *v22;
  char *v23;
  NSObject *v24;
  os_log_type_t v25;
  char *backtrace_string;
  os_log_type_t v27;
  _BOOL4 v28;
  os_log_type_t v29;
  const char *v30;
  char v31;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v34;
  __int16 v35;
  char *id_str;
  __int16 v37;
  const char *v38;
  __int16 v39;
  const char *v40;
  __int16 v41;
  const char *v42;
  __int16 v43;
  const char *v44;
  __int16 v45;
  id v46;
  __int16 v47;
  const char *v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v34 = "nw_endpoint_handler_copy_fallback";
    v23 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v31 = 0;
    if (__nwlog_fault(v23, &type, &v31))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v24 = objc_claimAutoreleasedReturnValue();
        v25 = type;
        if (os_log_type_enabled(v24, type))
        {
          *(_DWORD *)buf = 136446210;
          v34 = "nw_endpoint_handler_copy_fallback";
          _os_log_impl(&dword_182FBE000, v24, v25, "%{public}s called with null handler", buf, 0xCu);
        }
      }
      else if (v31)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v24 = objc_claimAutoreleasedReturnValue();
        v27 = type;
        v28 = os_log_type_enabled(v24, type);
        if (backtrace_string)
        {
          if (v28)
          {
            *(_DWORD *)buf = 136446466;
            v34 = "nw_endpoint_handler_copy_fallback";
            v35 = 2082;
            id_str = backtrace_string;
            _os_log_impl(&dword_182FBE000, v24, v27, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_48;
        }
        if (v28)
        {
          *(_DWORD *)buf = 136446210;
          v34 = "nw_endpoint_handler_copy_fallback";
          _os_log_impl(&dword_182FBE000, v24, v27, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v24 = objc_claimAutoreleasedReturnValue();
        v29 = type;
        if (os_log_type_enabled(v24, type))
        {
          *(_DWORD *)buf = 136446210;
          v34 = "nw_endpoint_handler_copy_fallback";
          _os_log_impl(&dword_182FBE000, v24, v29, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_48:
    if (v23)
      free(v23);
    goto LABEL_30;
  }
  if (v1->mode != 4)
  {
    if ((*((_BYTE *)v1 + 268) & 0x20) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v4 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        if ((*((_BYTE *)v2 + 268) & 1) != 0)
          v5 = "dry-run ";
        else
          v5 = "";
        v6 = nw_endpoint_handler_copy_endpoint(v2);
        logging_description = nw_endpoint_get_logging_description(v6);
        state = v2->state;
        v9 = logging_description;
        if (state > 5)
          v10 = "unknown-state";
        else
          v10 = off_1E149FC48[state];
        v30 = v10;
        v11 = v2;
        v12 = (os_unfair_lock_s *)v11;
        v13 = "path";
        switch(v2->mode)
        {
          case 0:
            break;
          case 1:
            v13 = "resolver";
            break;
          case 2:
            v13 = nw_endpoint_flow_mode_string(v11->mode_handler);
            break;
          case 3:
            v13 = "proxy";
            break;
          case 4:
            v13 = "fallback";
            break;
          case 5:
            v13 = "transform";
            break;
          default:
            v13 = "unknown-mode";
            break;
        }

        v14 = v12 + 28;
        v15 = v12;
        os_unfair_lock_lock(v12 + 28);
        v16 = v15[8];
        os_unfair_lock_unlock(v14);

        v17 = v16;
        v18 = v15;
        v19 = v18;
        v20 = "path";
        switch(v2->mode)
        {
          case 0:
            break;
          case 1:
            v20 = "resolver";
            break;
          case 2:
            v20 = nw_endpoint_flow_mode_string(v18[31]);
            break;
          case 3:
            v20 = "proxy";
            break;
          case 4:
            v20 = "fallback";
            break;
          case 5:
            v20 = "transform";
            break;
          default:
            v20 = "unknown-mode";
            break;
        }

        *(_DWORD *)buf = 136448002;
        v34 = "nw_endpoint_handler_copy_fallback";
        v35 = 2082;
        id_str = v2->id_str;
        v37 = 2082;
        v38 = v5;
        v39 = 2082;
        v40 = v9;
        v41 = 2082;
        v42 = v30;
        v43 = 2082;
        v44 = v13;
        v45 = 2114;
        v46 = v17;
        v47 = 2082;
        v48 = v20;
        _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Endpoint handler is %{public}s, not fallback", buf, 0x52u);

      }
    }
LABEL_30:
    v3 = 0;
    goto LABEL_31;
  }
  v3 = v1->mode_handler;
LABEL_31:

  return v3;
}

void sub_1836623B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t nw_endpoint_handler_apply_to_leaf_children(void *a1, void *a2)
{
  _QWORD *v3;
  id v4;
  void *v5;
  id v6;
  uint64_t v7;
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  char *backtrace_string;
  os_log_type_t v14;
  _BOOL4 v15;
  os_log_type_t v16;
  _QWORD v17[4];
  id v18;
  os_log_type_t *v19;
  _BYTE *v20;
  os_log_type_t type[8];
  os_log_type_t *v22;
  uint64_t v23;
  char v24;
  char v25;
  _BYTE buf[24];
  char v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (v3)
  {
    if ((objc_opt_respondsToSelector() & 1) != 0)
    {
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0x2020000000;
      v27 = 1;
      *(_QWORD *)type = 0;
      v22 = type;
      v23 = 0x2020000000;
      v24 = 0;
      v5 = (void *)v3[31];
      v17[0] = MEMORY[0x1E0C809B0];
      v17[1] = 3221225472;
      v17[2] = __nw_endpoint_handler_apply_to_leaf_children_block_invoke;
      v17[3] = &unk_1E149FB78;
      v19 = type;
      v20 = buf;
      v6 = v4;
      v18 = v6;
      objc_msgSend(v5, "applyWithHandler:toChildren:", v3, v17);
      if (*((_BYTE *)v22 + 24))
        v7 = *(_BYTE *)(*(_QWORD *)&buf[8] + 24) != 0;
      else
        v7 = (*((uint64_t (**)(id, _QWORD *))v6 + 2))(v6, v3);

      _Block_object_dispose(type, 8);
      _Block_object_dispose(buf, 8);
    }
    else
    {
      v7 = (*((uint64_t (**)(id, _QWORD *))v4 + 2))(v4, v3);
    }
    goto LABEL_8;
  }
  __nwlog_obj();
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_endpoint_handler_apply_to_leaf_children";
  v10 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  v25 = 0;
  if (__nwlog_fault(v10, type, &v25))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = type[0];
      if (os_log_type_enabled(v11, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_endpoint_handler_apply_to_leaf_children";
        _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null handler", buf, 0xCu);
      }
    }
    else if (v25)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v14 = type[0];
      v15 = os_log_type_enabled(v11, type[0]);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_endpoint_handler_apply_to_leaf_children";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_25;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_endpoint_handler_apply_to_leaf_children";
        _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s called with null handler, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v16 = type[0];
      if (os_log_type_enabled(v11, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_endpoint_handler_apply_to_leaf_children";
        _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_25:
  if (v10)
    free(v10);
  v7 = 0;
LABEL_8:

  return v7;
}

void sub_1836627CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, ...)
{
  void *v12;
  void *v13;
  uint64_t v14;
  va_list va;

  va_start(va, a12);

  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v14 - 96), 8);

  _Unwind_Resume(a1);
}

uint64_t __nw_endpoint_handler_apply_to_leaf_children_block_invoke(_QWORD *a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;

  v3 = a2;
  v4 = v3;
  if (v3)
  {
    *(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 24) = 1;
    *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) = nw_endpoint_handler_apply_to_leaf_children(v3, a1[4]);
  }
  v5 = *(unsigned __int8 *)(*(_QWORD *)(a1[6] + 8) + 24);

  return v5;
}

void sub_183662878(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t nw_endpoint_handler_get_proxy_privacy_stance(void *a1)
{
  unsigned int *v1;
  void *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = v1[66];
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_endpoint_handler_get_proxy_privacy_stance";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_endpoint_handler_get_proxy_privacy_stance";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null handler", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_endpoint_handler_get_proxy_privacy_stance";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_endpoint_handler_get_proxy_privacy_stance";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null handler, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_endpoint_handler_get_proxy_privacy_stance";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

void sub_183662E3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  void *v9;

  a9.receiver = v9;
  a9.super_class = (Class)NWConcrete_nw_pac_resolver;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

CFMutableArrayRef ___ZL27nw_get_outstanding_pac_urlsv_block_invoke()
{
  CFMutableArrayRef result;

  result = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  nw_get_outstanding_pac_urls(void)::gPACURLs = (uint64_t)result;
  return result;
}

NWConcrete_nw_pac_resolver *nw_pac_resolver_create_with_script(const void *a1, const void *a2, void *a3, char a4, int a5, int a6, int a7, uint64_t a8, void *a9)
{
  id v17;
  id v18;
  void *v19;
  NWConcrete_nw_pac_resolver *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char *v28;
  unint64_t v29;
  int v30;
  NWConcrete_nw_pac_resolver *v31;
  id v32;
  char *v33;
  NSObject *v34;
  os_log_type_t v35;
  char *backtrace_string;
  NSObject *v37;
  os_log_type_t v38;
  _BOOL4 v39;
  os_log_type_t v40;
  void *v42;
  char *v43;
  NSObject *v44;
  os_log_type_t v45;
  void *v46;
  os_log_type_t v47;
  void *v48;
  os_log_type_t v49;
  void *v50;
  os_log_type_t v51;
  void *v52;
  os_log_type_t v53;
  char *v54;
  NSObject *v55;
  os_log_type_t v56;
  _BOOL4 v57;
  os_log_type_t v58;
  _BOOL4 v59;
  os_log_type_t v60;
  _BOOL4 v61;
  os_log_type_t v62;
  _BOOL4 v63;
  os_log_type_t v64;
  _BOOL4 v65;
  os_log_type_t v66;
  os_log_type_t v67;
  os_log_type_t v68;
  os_log_type_t v69;
  os_log_type_t v70;
  void *v71;
  char v72;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v75;
  __int16 v76;
  char *v77;
  uint64_t v78;

  v78 = *MEMORY[0x1E0C80C00];
  v17 = a3;
  v18 = a9;
  v19 = v18;
  v71 = v17;
  if (a1)
  {
    if (a2)
    {
      if (v18)
      {
        if (v17)
        {
          if (a8)
          {
            v20 = objc_alloc_init(NWConcrete_nw_pac_resolver);
            if (v20)
            {
              *((_QWORD *)v20 + 3) = CFRetain(a2);
              *((_QWORD *)v20 + 5) = CFRetain(a1);
              v21 = _Block_copy(v19);
              v22 = (void *)*((_QWORD *)v20 + 1);
              *((_QWORD *)v20 + 1) = v21;

              objc_storeStrong((id *)v20 + 2, a3);
              v23 = 0;
              if (a5)
                v24 = 2;
              else
                v24 = 0;
              if (a6)
                v25 = 4;
              else
                v25 = 0;
              v26 = v24 | a4;
              if (a7)
                v27 = 8;
              else
                v27 = 0;
              *((_BYTE *)v20 + 159) = v26 | v25 | v27 | *((_BYTE *)v20 + 159) & 0xF0;
              v28 = (char *)v20 + 84;
              v29 = 75;
              while (1)
              {
                v30 = *(unsigned __int8 *)(a8 + v23);
                v28[v23] = v30;
                if (!v30)
                  break;
                --v29;
                ++v23;
                if (v29 <= 1)
                {
                  v28[v23] = 0;
                  break;
                }
              }
              v31 = v20;
              goto LABEL_40;
            }
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v32 = (id)gLogObj;
            *(_DWORD *)buf = 136446210;
            v75 = "nw_pac_resolver_create_with_script";
            v33 = (char *)_os_log_send_and_compose_impl();

            type = OS_LOG_TYPE_ERROR;
            v72 = 0;
            if (__nwlog_fault(v33, &type, &v72))
            {
              if (type == OS_LOG_TYPE_FAULT)
              {
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                v34 = (id)gLogObj;
                v35 = type;
                if (os_log_type_enabled(v34, type))
                {
                  *(_DWORD *)buf = 136446210;
                  v75 = "nw_pac_resolver_create_with_script";
                  _os_log_impl(&dword_182FBE000, v34, v35, "%{public}s nw_pac_resolver_obj_alloc failed", buf, 0xCu);
                }
LABEL_25:

                goto LABEL_38;
              }
              if (!v72)
              {
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                v34 = (id)gLogObj;
                v40 = type;
                if (os_log_type_enabled(v34, type))
                {
                  *(_DWORD *)buf = 136446210;
                  v75 = "nw_pac_resolver_create_with_script";
                  _os_log_impl(&dword_182FBE000, v34, v40, "%{public}s nw_pac_resolver_obj_alloc failed, backtrace limit exceeded", buf, 0xCu);
                }
                goto LABEL_25;
              }
              backtrace_string = (char *)__nw_create_backtrace_string();
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v37 = (id)gLogObj;
              v38 = type;
              v39 = os_log_type_enabled(v37, type);
              if (backtrace_string)
              {
                if (v39)
                {
                  *(_DWORD *)buf = 136446466;
                  v75 = "nw_pac_resolver_create_with_script";
                  v76 = 2082;
                  v77 = backtrace_string;
                  _os_log_impl(&dword_182FBE000, v37, v38, "%{public}s nw_pac_resolver_obj_alloc failed, dumping backtrace:%{public}s", buf, 0x16u);
                }

                free(backtrace_string);
                if (!v33)
                  goto LABEL_40;
                goto LABEL_39;
              }
              if (v39)
              {
                *(_DWORD *)buf = 136446210;
                v75 = "nw_pac_resolver_create_with_script";
                _os_log_impl(&dword_182FBE000, v37, v38, "%{public}s nw_pac_resolver_obj_alloc failed, no backtrace", buf, 0xCu);
              }

            }
LABEL_38:
            if (!v33)
            {
LABEL_40:

              goto LABEL_41;
            }
LABEL_39:
            free(v33);
            goto LABEL_40;
          }
          __nwlog_obj();
          v52 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 136446210;
          v75 = "nw_pac_resolver_create_with_script";
          v43 = (char *)_os_log_send_and_compose_impl();

          type = OS_LOG_TYPE_ERROR;
          v72 = 0;
          if (__nwlog_fault(v43, &type, &v72))
          {
            if (type == OS_LOG_TYPE_FAULT)
            {
              __nwlog_obj();
              v44 = objc_claimAutoreleasedReturnValue();
              v53 = type;
              if (os_log_type_enabled(v44, type))
              {
                *(_DWORD *)buf = 136446210;
                v75 = "nw_pac_resolver_create_with_script";
                _os_log_impl(&dword_182FBE000, v44, v53, "%{public}s called with null logging_id_str", buf, 0xCu);
              }
LABEL_109:

              goto LABEL_92;
            }
            if (!v72)
            {
              __nwlog_obj();
              v44 = objc_claimAutoreleasedReturnValue();
              v70 = type;
              if (os_log_type_enabled(v44, type))
              {
                *(_DWORD *)buf = 136446210;
                v75 = "nw_pac_resolver_create_with_script";
                _os_log_impl(&dword_182FBE000, v44, v70, "%{public}s called with null logging_id_str, backtrace limit exceeded", buf, 0xCu);
              }
              goto LABEL_109;
            }
            v54 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            v55 = objc_claimAutoreleasedReturnValue();
            v64 = type;
            v65 = os_log_type_enabled(v55, type);
            if (v54)
            {
              if (v65)
              {
                *(_DWORD *)buf = 136446466;
                v75 = "nw_pac_resolver_create_with_script";
                v76 = 2082;
                v77 = v54;
                _os_log_impl(&dword_182FBE000, v55, v64, "%{public}s called with null logging_id_str, dumping backtrace:%{public}s", buf, 0x16u);
              }
LABEL_91:

              free(v54);
              goto LABEL_92;
            }
            if (v65)
            {
              *(_DWORD *)buf = 136446210;
              v75 = "nw_pac_resolver_create_with_script";
              _os_log_impl(&dword_182FBE000, v55, v64, "%{public}s called with null logging_id_str, no backtrace", buf, 0xCu);
            }
            goto LABEL_124;
          }
        }
        else
        {
          __nwlog_obj();
          v50 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 136446210;
          v75 = "nw_pac_resolver_create_with_script";
          v43 = (char *)_os_log_send_and_compose_impl();

          type = OS_LOG_TYPE_ERROR;
          v72 = 0;
          if (__nwlog_fault(v43, &type, &v72))
          {
            if (type == OS_LOG_TYPE_FAULT)
            {
              __nwlog_obj();
              v44 = objc_claimAutoreleasedReturnValue();
              v51 = type;
              if (os_log_type_enabled(v44, type))
              {
                *(_DWORD *)buf = 136446210;
                v75 = "nw_pac_resolver_create_with_script";
                _os_log_impl(&dword_182FBE000, v44, v51, "%{public}s called with null context", buf, 0xCu);
              }
              goto LABEL_109;
            }
            if (!v72)
            {
              __nwlog_obj();
              v44 = objc_claimAutoreleasedReturnValue();
              v69 = type;
              if (os_log_type_enabled(v44, type))
              {
                *(_DWORD *)buf = 136446210;
                v75 = "nw_pac_resolver_create_with_script";
                _os_log_impl(&dword_182FBE000, v44, v69, "%{public}s called with null context, backtrace limit exceeded", buf, 0xCu);
              }
              goto LABEL_109;
            }
            v54 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            v55 = objc_claimAutoreleasedReturnValue();
            v62 = type;
            v63 = os_log_type_enabled(v55, type);
            if (v54)
            {
              if (v63)
              {
                *(_DWORD *)buf = 136446466;
                v75 = "nw_pac_resolver_create_with_script";
                v76 = 2082;
                v77 = v54;
                _os_log_impl(&dword_182FBE000, v55, v62, "%{public}s called with null context, dumping backtrace:%{public}s", buf, 0x16u);
              }
              goto LABEL_91;
            }
            if (v63)
            {
              *(_DWORD *)buf = 136446210;
              v75 = "nw_pac_resolver_create_with_script";
              _os_log_impl(&dword_182FBE000, v55, v62, "%{public}s called with null context, no backtrace", buf, 0xCu);
            }
LABEL_124:

          }
        }
      }
      else
      {
        __nwlog_obj();
        v48 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136446210;
        v75 = "nw_pac_resolver_create_with_script";
        v43 = (char *)_os_log_send_and_compose_impl();

        type = OS_LOG_TYPE_ERROR;
        v72 = 0;
        if (__nwlog_fault(v43, &type, &v72))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            v44 = objc_claimAutoreleasedReturnValue();
            v49 = type;
            if (os_log_type_enabled(v44, type))
            {
              *(_DWORD *)buf = 136446210;
              v75 = "nw_pac_resolver_create_with_script";
              _os_log_impl(&dword_182FBE000, v44, v49, "%{public}s called with null result_handler", buf, 0xCu);
            }
            goto LABEL_109;
          }
          if (!v72)
          {
            __nwlog_obj();
            v44 = objc_claimAutoreleasedReturnValue();
            v68 = type;
            if (os_log_type_enabled(v44, type))
            {
              *(_DWORD *)buf = 136446210;
              v75 = "nw_pac_resolver_create_with_script";
              _os_log_impl(&dword_182FBE000, v44, v68, "%{public}s called with null result_handler, backtrace limit exceeded", buf, 0xCu);
            }
            goto LABEL_109;
          }
          v54 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v55 = objc_claimAutoreleasedReturnValue();
          v60 = type;
          v61 = os_log_type_enabled(v55, type);
          if (v54)
          {
            if (v61)
            {
              *(_DWORD *)buf = 136446466;
              v75 = "nw_pac_resolver_create_with_script";
              v76 = 2082;
              v77 = v54;
              _os_log_impl(&dword_182FBE000, v55, v60, "%{public}s called with null result_handler, dumping backtrace:%{public}s", buf, 0x16u);
            }
            goto LABEL_91;
          }
          if (v61)
          {
            *(_DWORD *)buf = 136446210;
            v75 = "nw_pac_resolver_create_with_script";
            _os_log_impl(&dword_182FBE000, v55, v60, "%{public}s called with null result_handler, no backtrace", buf, 0xCu);
          }
          goto LABEL_124;
        }
      }
    }
    else
    {
      __nwlog_obj();
      v46 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      v75 = "nw_pac_resolver_create_with_script";
      v43 = (char *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v72 = 0;
      if (__nwlog_fault(v43, &type, &v72))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v44 = objc_claimAutoreleasedReturnValue();
          v47 = type;
          if (os_log_type_enabled(v44, type))
          {
            *(_DWORD *)buf = 136446210;
            v75 = "nw_pac_resolver_create_with_script";
            _os_log_impl(&dword_182FBE000, v44, v47, "%{public}s called with null endpointURL", buf, 0xCu);
          }
          goto LABEL_109;
        }
        if (!v72)
        {
          __nwlog_obj();
          v44 = objc_claimAutoreleasedReturnValue();
          v67 = type;
          if (os_log_type_enabled(v44, type))
          {
            *(_DWORD *)buf = 136446210;
            v75 = "nw_pac_resolver_create_with_script";
            _os_log_impl(&dword_182FBE000, v44, v67, "%{public}s called with null endpointURL, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_109;
        }
        v54 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v55 = objc_claimAutoreleasedReturnValue();
        v58 = type;
        v59 = os_log_type_enabled(v55, type);
        if (v54)
        {
          if (v59)
          {
            *(_DWORD *)buf = 136446466;
            v75 = "nw_pac_resolver_create_with_script";
            v76 = 2082;
            v77 = v54;
            _os_log_impl(&dword_182FBE000, v55, v58, "%{public}s called with null endpointURL, dumping backtrace:%{public}s", buf, 0x16u);
          }
          goto LABEL_91;
        }
        if (v59)
        {
          *(_DWORD *)buf = 136446210;
          v75 = "nw_pac_resolver_create_with_script";
          _os_log_impl(&dword_182FBE000, v55, v58, "%{public}s called with null endpointURL, no backtrace", buf, 0xCu);
        }
        goto LABEL_124;
      }
    }
  }
  else
  {
    __nwlog_obj();
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v75 = "nw_pac_resolver_create_with_script";
    v43 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v72 = 0;
    if (__nwlog_fault(v43, &type, &v72))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v44 = objc_claimAutoreleasedReturnValue();
        v45 = type;
        if (os_log_type_enabled(v44, type))
        {
          *(_DWORD *)buf = 136446210;
          v75 = "nw_pac_resolver_create_with_script";
          _os_log_impl(&dword_182FBE000, v44, v45, "%{public}s called with null pacScript", buf, 0xCu);
        }
        goto LABEL_109;
      }
      if (!v72)
      {
        __nwlog_obj();
        v44 = objc_claimAutoreleasedReturnValue();
        v66 = type;
        if (os_log_type_enabled(v44, type))
        {
          *(_DWORD *)buf = 136446210;
          v75 = "nw_pac_resolver_create_with_script";
          _os_log_impl(&dword_182FBE000, v44, v66, "%{public}s called with null pacScript, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_109;
      }
      v54 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v55 = objc_claimAutoreleasedReturnValue();
      v56 = type;
      v57 = os_log_type_enabled(v55, type);
      if (v54)
      {
        if (v57)
        {
          *(_DWORD *)buf = 136446466;
          v75 = "nw_pac_resolver_create_with_script";
          v76 = 2082;
          v77 = v54;
          _os_log_impl(&dword_182FBE000, v55, v56, "%{public}s called with null pacScript, dumping backtrace:%{public}s", buf, 0x16u);
        }
        goto LABEL_91;
      }
      if (v57)
      {
        *(_DWORD *)buf = 136446210;
        v75 = "nw_pac_resolver_create_with_script";
        _os_log_impl(&dword_182FBE000, v55, v56, "%{public}s called with null pacScript, no backtrace", buf, 0xCu);
      }
      goto LABEL_124;
    }
  }
LABEL_92:
  if (v43)
    free(v43);
  v20 = 0;
LABEL_41:

  return v20;
}

void sub_183663CAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;

  _Unwind_Resume(a1);
}

NWConcrete_nw_pac_resolver *nw_pac_resolver_create_with_url(const void *a1, const void *a2, const void *a3, const void *a4, void *a5, char a6, int a7, int a8, char a9, uint64_t a10, void *a11)
{
  id v19;
  id v20;
  NWConcrete_nw_pac_resolver *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  char v25;
  char v26;
  char v27;
  char v28;
  char *v29;
  unint64_t v30;
  int v31;
  NWConcrete_nw_pac_resolver *v32;
  id v33;
  char *v34;
  NSObject *v35;
  os_log_type_t v36;
  char *backtrace_string;
  NSObject *v38;
  os_log_type_t v39;
  _BOOL4 v40;
  os_log_type_t v41;
  void *v42;
  void *v44;
  char *v45;
  NSObject *v46;
  os_log_type_t v47;
  void *v48;
  os_log_type_t v49;
  void *v50;
  os_log_type_t v51;
  void *v52;
  char *v53;
  NSObject *v54;
  os_log_type_t v55;
  void *v56;
  os_log_type_t v57;
  char *v58;
  NSObject *v59;
  os_log_type_t v60;
  _BOOL4 v61;
  os_log_type_t v62;
  _BOOL4 v63;
  os_log_type_t v64;
  _BOOL4 v65;
  char *v66;
  NSObject *v67;
  os_log_type_t v68;
  _BOOL4 v69;
  char *v70;
  os_log_type_t v71;
  _BOOL4 v72;
  os_log_type_t v73;
  os_log_type_t v74;
  os_log_type_t v75;
  os_log_type_t v76;
  os_log_type_t v77;
  void *v78;
  const void *aBlock;
  char v80;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v83;
  __int16 v84;
  char *v85;
  uint64_t v86;

  v86 = *MEMORY[0x1E0C80C00];
  v19 = a5;
  v20 = a11;
  v78 = v19;
  if (a1)
  {
    if (a2)
    {
      if (v20)
      {
        aBlock = v20;
        if (v19)
        {
          if (a10)
          {
            v21 = objc_alloc_init(NWConcrete_nw_pac_resolver);
            if (v21)
            {
              *((_QWORD *)v21 + 3) = CFRetain(a2);
              *((_QWORD *)v21 + 4) = CFRetain(a1);
              if (a3)
                *((_QWORD *)v21 + 6) = CFRetain(a3);
              if (a4)
                *((_QWORD *)v21 + 7) = CFRetain(a4);
              v22 = _Block_copy(aBlock);
              v23 = (void *)*((_QWORD *)v21 + 1);
              *((_QWORD *)v21 + 1) = v22;

              objc_storeStrong((id *)v21 + 2, a5);
              v24 = 0;
              if (a7)
                v25 = 2;
              else
                v25 = 0;
              if (a8)
                v26 = 4;
              else
                v26 = 0;
              v27 = v25 | a6;
              if (a9)
                v28 = 8;
              else
                v28 = 0;
              *((_BYTE *)v21 + 159) = v27 | v26 | v28 | *((_BYTE *)v21 + 159) & 0xF0;
              v29 = (char *)v21 + 84;
              v30 = 75;
              while (1)
              {
                v31 = *(unsigned __int8 *)(a10 + v24);
                v29[v24] = v31;
                if (!v31)
                  break;
                --v30;
                ++v24;
                if (v30 <= 1)
                {
                  v29[v24] = 0;
                  break;
                }
              }
              v32 = v21;
              goto LABEL_44;
            }
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v33 = (id)gLogObj;
            *(_DWORD *)buf = 136446210;
            v83 = "nw_pac_resolver_create_with_url";
            v34 = (char *)_os_log_send_and_compose_impl();

            type = OS_LOG_TYPE_ERROR;
            v80 = 0;
            if (__nwlog_fault(v34, &type, &v80))
            {
              if (type == OS_LOG_TYPE_FAULT)
              {
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                v35 = (id)gLogObj;
                v36 = type;
                if (os_log_type_enabled(v35, type))
                {
                  *(_DWORD *)buf = 136446210;
                  v83 = "nw_pac_resolver_create_with_url";
                  _os_log_impl(&dword_182FBE000, v35, v36, "%{public}s nw_pac_resolver_obj_alloc failed", buf, 0xCu);
                }
LABEL_29:

                goto LABEL_42;
              }
              if (!v80)
              {
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                v35 = (id)gLogObj;
                v41 = type;
                if (os_log_type_enabled(v35, type))
                {
                  *(_DWORD *)buf = 136446210;
                  v83 = "nw_pac_resolver_create_with_url";
                  _os_log_impl(&dword_182FBE000, v35, v41, "%{public}s nw_pac_resolver_obj_alloc failed, backtrace limit exceeded", buf, 0xCu);
                }
                goto LABEL_29;
              }
              backtrace_string = (char *)__nw_create_backtrace_string();
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v38 = (id)gLogObj;
              v39 = type;
              v40 = os_log_type_enabled(v38, type);
              if (backtrace_string)
              {
                if (v40)
                {
                  *(_DWORD *)buf = 136446466;
                  v83 = "nw_pac_resolver_create_with_url";
                  v84 = 2082;
                  v85 = backtrace_string;
                  _os_log_impl(&dword_182FBE000, v38, v39, "%{public}s nw_pac_resolver_obj_alloc failed, dumping backtrace:%{public}s", buf, 0x16u);
                }

                free(backtrace_string);
                if (!v34)
                  goto LABEL_44;
                goto LABEL_43;
              }
              if (v40)
              {
                *(_DWORD *)buf = 136446210;
                v83 = "nw_pac_resolver_create_with_url";
                _os_log_impl(&dword_182FBE000, v38, v39, "%{public}s nw_pac_resolver_obj_alloc failed, no backtrace", buf, 0xCu);
              }

            }
LABEL_42:
            if (!v34)
            {
LABEL_44:

LABEL_45:
              v42 = (void *)aBlock;
              goto LABEL_46;
            }
LABEL_43:
            free(v34);
            goto LABEL_44;
          }
          __nwlog_obj();
          v56 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 136446210;
          v83 = "nw_pac_resolver_create_with_url";
          v53 = (char *)_os_log_send_and_compose_impl();

          type = OS_LOG_TYPE_ERROR;
          v80 = 0;
          if (__nwlog_fault(v53, &type, &v80))
          {
            if (type == OS_LOG_TYPE_FAULT)
            {
              __nwlog_obj();
              v54 = objc_claimAutoreleasedReturnValue();
              v57 = type;
              if (os_log_type_enabled(v54, type))
              {
                *(_DWORD *)buf = 136446210;
                v83 = "nw_pac_resolver_create_with_url";
                _os_log_impl(&dword_182FBE000, v54, v57, "%{public}s called with null logging_id_str", buf, 0xCu);
              }
LABEL_112:

              goto LABEL_131;
            }
            if (!v80)
            {
              __nwlog_obj();
              v54 = objc_claimAutoreleasedReturnValue();
              v77 = type;
              if (os_log_type_enabled(v54, type))
              {
                *(_DWORD *)buf = 136446210;
                v83 = "nw_pac_resolver_create_with_url";
                _os_log_impl(&dword_182FBE000, v54, v77, "%{public}s called with null logging_id_str, backtrace limit exceeded", buf, 0xCu);
              }
              goto LABEL_112;
            }
            v70 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            v67 = objc_claimAutoreleasedReturnValue();
            v71 = type;
            v72 = os_log_type_enabled(v67, type);
            if (v70)
            {
              if (v72)
              {
                *(_DWORD *)buf = 136446466;
                v83 = "nw_pac_resolver_create_with_url";
                v84 = 2082;
                v85 = v70;
                _os_log_impl(&dword_182FBE000, v67, v71, "%{public}s called with null logging_id_str, dumping backtrace:%{public}s", buf, 0x16u);
              }

              free(v70);
              if (!v53)
                goto LABEL_133;
              goto LABEL_132;
            }
            if (v72)
            {
              *(_DWORD *)buf = 136446210;
              v83 = "nw_pac_resolver_create_with_url";
              _os_log_impl(&dword_182FBE000, v67, v71, "%{public}s called with null logging_id_str, no backtrace", buf, 0xCu);
            }
            goto LABEL_130;
          }
        }
        else
        {
          __nwlog_obj();
          v52 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 136446210;
          v83 = "nw_pac_resolver_create_with_url";
          v53 = (char *)_os_log_send_and_compose_impl();

          type = OS_LOG_TYPE_ERROR;
          v80 = 0;
          if (!__nwlog_fault(v53, &type, &v80))
            goto LABEL_131;
          if (type == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            v54 = objc_claimAutoreleasedReturnValue();
            v55 = type;
            if (os_log_type_enabled(v54, type))
            {
              *(_DWORD *)buf = 136446210;
              v83 = "nw_pac_resolver_create_with_url";
              _os_log_impl(&dword_182FBE000, v54, v55, "%{public}s called with null context", buf, 0xCu);
            }
            goto LABEL_112;
          }
          if (!v80)
          {
            __nwlog_obj();
            v54 = objc_claimAutoreleasedReturnValue();
            v76 = type;
            if (os_log_type_enabled(v54, type))
            {
              *(_DWORD *)buf = 136446210;
              v83 = "nw_pac_resolver_create_with_url";
              _os_log_impl(&dword_182FBE000, v54, v76, "%{public}s called with null context, backtrace limit exceeded", buf, 0xCu);
            }
            goto LABEL_112;
          }
          v66 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v67 = objc_claimAutoreleasedReturnValue();
          v68 = type;
          v69 = os_log_type_enabled(v67, type);
          if (!v66)
          {
            if (v69)
            {
              *(_DWORD *)buf = 136446210;
              v83 = "nw_pac_resolver_create_with_url";
              _os_log_impl(&dword_182FBE000, v67, v68, "%{public}s called with null context, no backtrace", buf, 0xCu);
            }
LABEL_130:

            goto LABEL_131;
          }
          if (v69)
          {
            *(_DWORD *)buf = 136446466;
            v83 = "nw_pac_resolver_create_with_url";
            v84 = 2082;
            v85 = v66;
            _os_log_impl(&dword_182FBE000, v67, v68, "%{public}s called with null context, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v66);
        }
LABEL_131:
        if (!v53)
        {
LABEL_133:
          v21 = 0;
          goto LABEL_45;
        }
LABEL_132:
        free(v53);
        goto LABEL_133;
      }
      v42 = 0;
      __nwlog_obj();
      v50 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      v83 = "nw_pac_resolver_create_with_url";
      v45 = (char *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v80 = 0;
      if (__nwlog_fault(v45, &type, &v80))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v46 = objc_claimAutoreleasedReturnValue();
          v51 = type;
          if (os_log_type_enabled(v46, type))
          {
            *(_DWORD *)buf = 136446210;
            v83 = "nw_pac_resolver_create_with_url";
            _os_log_impl(&dword_182FBE000, v46, v51, "%{public}s called with null result_handler", buf, 0xCu);
          }
LABEL_106:

          goto LABEL_122;
        }
        if (!v80)
        {
          __nwlog_obj();
          v46 = objc_claimAutoreleasedReturnValue();
          v75 = type;
          if (os_log_type_enabled(v46, type))
          {
            *(_DWORD *)buf = 136446210;
            v83 = "nw_pac_resolver_create_with_url";
            _os_log_impl(&dword_182FBE000, v46, v75, "%{public}s called with null result_handler, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_106;
        }
        v58 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v59 = objc_claimAutoreleasedReturnValue();
        v64 = type;
        v65 = os_log_type_enabled(v59, type);
        if (v58)
        {
          if (v65)
          {
            *(_DWORD *)buf = 136446466;
            v83 = "nw_pac_resolver_create_with_url";
            v84 = 2082;
            v85 = v58;
            _os_log_impl(&dword_182FBE000, v59, v64, "%{public}s called with null result_handler, dumping backtrace:%{public}s", buf, 0x16u);
          }
LABEL_86:

          free(v58);
          goto LABEL_122;
        }
        if (v65)
        {
          *(_DWORD *)buf = 136446210;
          v83 = "nw_pac_resolver_create_with_url";
          _os_log_impl(&dword_182FBE000, v59, v64, "%{public}s called with null result_handler, no backtrace", buf, 0xCu);
        }
        goto LABEL_121;
      }
    }
    else
    {
      v42 = v20;
      __nwlog_obj();
      v48 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      v83 = "nw_pac_resolver_create_with_url";
      v45 = (char *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v80 = 0;
      if (__nwlog_fault(v45, &type, &v80))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v46 = objc_claimAutoreleasedReturnValue();
          v49 = type;
          if (os_log_type_enabled(v46, type))
          {
            *(_DWORD *)buf = 136446210;
            v83 = "nw_pac_resolver_create_with_url";
            _os_log_impl(&dword_182FBE000, v46, v49, "%{public}s called with null endpointURL", buf, 0xCu);
          }
          goto LABEL_106;
        }
        if (!v80)
        {
          __nwlog_obj();
          v46 = objc_claimAutoreleasedReturnValue();
          v74 = type;
          if (os_log_type_enabled(v46, type))
          {
            *(_DWORD *)buf = 136446210;
            v83 = "nw_pac_resolver_create_with_url";
            _os_log_impl(&dword_182FBE000, v46, v74, "%{public}s called with null endpointURL, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_106;
        }
        v58 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v59 = objc_claimAutoreleasedReturnValue();
        v62 = type;
        v63 = os_log_type_enabled(v59, type);
        if (v58)
        {
          if (v63)
          {
            *(_DWORD *)buf = 136446466;
            v83 = "nw_pac_resolver_create_with_url";
            v84 = 2082;
            v85 = v58;
            _os_log_impl(&dword_182FBE000, v59, v62, "%{public}s called with null endpointURL, dumping backtrace:%{public}s", buf, 0x16u);
          }
          goto LABEL_86;
        }
        if (v63)
        {
          *(_DWORD *)buf = 136446210;
          v83 = "nw_pac_resolver_create_with_url";
          _os_log_impl(&dword_182FBE000, v59, v62, "%{public}s called with null endpointURL, no backtrace", buf, 0xCu);
        }
LABEL_121:

      }
    }
  }
  else
  {
    v42 = v20;
    __nwlog_obj();
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v83 = "nw_pac_resolver_create_with_url";
    v45 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v80 = 0;
    if (__nwlog_fault(v45, &type, &v80))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v46 = objc_claimAutoreleasedReturnValue();
        v47 = type;
        if (os_log_type_enabled(v46, type))
        {
          *(_DWORD *)buf = 136446210;
          v83 = "nw_pac_resolver_create_with_url";
          _os_log_impl(&dword_182FBE000, v46, v47, "%{public}s called with null pacURL", buf, 0xCu);
        }
        goto LABEL_106;
      }
      if (!v80)
      {
        __nwlog_obj();
        v46 = objc_claimAutoreleasedReturnValue();
        v73 = type;
        if (os_log_type_enabled(v46, type))
        {
          *(_DWORD *)buf = 136446210;
          v83 = "nw_pac_resolver_create_with_url";
          _os_log_impl(&dword_182FBE000, v46, v73, "%{public}s called with null pacURL, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_106;
      }
      v58 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v59 = objc_claimAutoreleasedReturnValue();
      v60 = type;
      v61 = os_log_type_enabled(v59, type);
      if (v58)
      {
        if (v61)
        {
          *(_DWORD *)buf = 136446466;
          v83 = "nw_pac_resolver_create_with_url";
          v84 = 2082;
          v85 = v58;
          _os_log_impl(&dword_182FBE000, v59, v60, "%{public}s called with null pacURL, dumping backtrace:%{public}s", buf, 0x16u);
        }
        goto LABEL_86;
      }
      if (v61)
      {
        *(_DWORD *)buf = 136446210;
        v83 = "nw_pac_resolver_create_with_url";
        _os_log_impl(&dword_182FBE000, v59, v60, "%{public}s called with null pacURL, no backtrace", buf, 0xCu);
      }
      goto LABEL_121;
    }
  }
LABEL_122:
  if (v45)
    free(v45);
  v21 = 0;
LABEL_46:

  return v21;
}

void sub_183664B04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{

  _Unwind_Resume(a1);
}

void nw_pac_resolver_start(void *a1)
{
  char *v1;
  char *v2;
  const __CFURL *v3;
  const __CFURL *v4;
  CFRunLoopSourceRef v5;
  const __CFString *v6;
  CFRunLoopSourceRef v7;
  id v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  __CFArray *v12;
  NSObject *v13;
  id v14;
  os_log_type_t v15;
  id v16;
  char *v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  NSObject *v21;
  char *v22;
  char v23;
  char *backtrace_string;
  os_log_type_t v25;
  _BOOL4 v26;
  char *v27;
  os_log_type_t v28;
  _BOOL4 v29;
  os_log_type_t v30;
  _BOOL4 v31;
  os_log_type_t v32;
  os_log_type_t v33;
  void (**v34)(_QWORD);
  os_log_type_t v35;
  void *v36;
  NSObject *v37;
  os_log_type_t v38;
  os_log_type_t v39;
  _BOOL4 v40;
  os_log_type_t v41;
  _QWORD aBlock[4];
  char *v43;
  CFRunLoopSourceRef v44;
  char v45;
  os_log_type_t type;
  CFStreamClientContext clientContext;
  uint8_t buf[4];
  const char *v49;
  __int16 v50;
  void *v51;
  uint64_t v52;
  CFRange v53;

  v52 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    LODWORD(clientContext.version) = 136446210;
    *(CFIndex *)((char *)&clientContext.version + 4) = (CFIndex)"nw_pac_resolver_start";
    v9 = (char *)_os_log_send_and_compose_impl();

    buf[0] = 16;
    type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v9, buf, &type))
    {
      if (buf[0] == 17)
      {
        __nwlog_obj();
        v37 = objc_claimAutoreleasedReturnValue();
        v38 = buf[0];
        if (os_log_type_enabled(v37, (os_log_type_t)buf[0]))
        {
          LODWORD(clientContext.version) = 136446210;
          *(CFIndex *)((char *)&clientContext.version + 4) = (CFIndex)"nw_pac_resolver_start";
          _os_log_impl(&dword_182FBE000, v37, v38, "%{public}s called with null pac", (uint8_t *)&clientContext, 0xCu);
        }
      }
      else if (type)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v37 = objc_claimAutoreleasedReturnValue();
        v39 = buf[0];
        v40 = os_log_type_enabled(v37, (os_log_type_t)buf[0]);
        if (backtrace_string)
        {
          if (v40)
          {
            LODWORD(clientContext.version) = 136446466;
            *(CFIndex *)((char *)&clientContext.version + 4) = (CFIndex)"nw_pac_resolver_start";
            WORD2(clientContext.info) = 2082;
            *(void **)((char *)&clientContext.info + 6) = backtrace_string;
            _os_log_impl(&dword_182FBE000, v37, v39, "%{public}s called with null pac, dumping backtrace:%{public}s", (uint8_t *)&clientContext, 0x16u);
          }

LABEL_56:
          free(backtrace_string);
          if (!v9)
            goto LABEL_82;
          goto LABEL_81;
        }
        if (v40)
        {
          LODWORD(clientContext.version) = 136446210;
          *(CFIndex *)((char *)&clientContext.version + 4) = (CFIndex)"nw_pac_resolver_start";
          _os_log_impl(&dword_182FBE000, v37, v39, "%{public}s called with null pac, no backtrace", (uint8_t *)&clientContext, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v37 = objc_claimAutoreleasedReturnValue();
        v41 = buf[0];
        if (os_log_type_enabled(v37, (os_log_type_t)buf[0]))
        {
          LODWORD(clientContext.version) = 136446210;
          *(CFIndex *)((char *)&clientContext.version + 4) = (CFIndex)"nw_pac_resolver_start";
          _os_log_impl(&dword_182FBE000, v37, v41, "%{public}s called with null pac, backtrace limit exceeded", (uint8_t *)&clientContext, 0xCu);
        }
      }

    }
LABEL_80:
    if (!v9)
      goto LABEL_82;
LABEL_81:
    free(v9);
    goto LABEL_82;
  }
  v3 = (const __CFURL *)*((_QWORD *)v1 + 4);
  if (v3)
  {
    clientContext.version = 0;
    clientContext.info = v1;
    clientContext.retain = nw_pac_resolver_retain;
    clientContext.release = nw_pac_resolver_release;
    clientContext.copyDescription = 0;
    v4 = (const __CFURL *)*((_QWORD *)v1 + 3);
    if (*((_OWORD *)v1 + 3) == 0)
      v5 = CFNetworkExecuteProxyAutoConfigurationURL(v3, v4, (CFProxyAutoConfigurationResultCallback)nw_pac_resolver_callback, &clientContext);
    else
      v5 = (CFRunLoopSourceRef)MEMORY[0x186DB33A4](v3, v4);
    v7 = v5;
    if (v5)
    {
      pthread_mutex_lock(&sOutstandingPacURLMutex);
      if (nw_get_outstanding_pac_urls(void)::onceToken != -1)
        dispatch_once(&nw_get_outstanding_pac_urls(void)::onceToken, &__block_literal_global_31421);
      v12 = (__CFArray *)nw_get_outstanding_pac_urls(void)::gPACURLs;
      if (nw_get_outstanding_pac_urls(void)::gPACURLs)
      {
        v53.length = CFArrayGetCount((CFArrayRef)nw_get_outstanding_pac_urls(void)::gPACURLs);
        v53.location = 0;
        if (!CFArrayContainsValue(v12, v53, v3))
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v13 = (id)gLogObj;
          if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136446466;
            v49 = "nw_add_outstanding_pac_url";
            v50 = 2114;
            v51 = v3;
            _os_log_impl(&dword_182FBE000, v13, OS_LOG_TYPE_DEBUG, "%{public}s Adding outstanding PAC URL: %{public}@", buf, 0x16u);
          }

          CFArrayAppendValue(v12, v3);
        }
        goto LABEL_72;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v16 = (id)gLogObj;
      *(_DWORD *)buf = 136446210;
      v49 = "nw_add_outstanding_pac_url";
      v17 = (char *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v45 = 0;
      if (__nwlog_fault(v17, &type, &v45))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v18 = (id)gLogObj;
          v19 = type;
          if (os_log_type_enabled(v18, type))
          {
            *(_DWORD *)buf = 136446210;
            v49 = "nw_add_outstanding_pac_url";
            _os_log_impl(&dword_182FBE000, v18, v19, "%{public}s nw_get_outstanding_pac_urls failed", buf, 0xCu);
          }
        }
        else if (v45)
        {
          v27 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v18 = (id)gLogObj;
          v28 = type;
          v29 = os_log_type_enabled(v18, type);
          if (v27)
          {
            if (v29)
            {
              *(_DWORD *)buf = 136446466;
              v49 = "nw_add_outstanding_pac_url";
              v50 = 2082;
              v51 = v27;
              _os_log_impl(&dword_182FBE000, v18, v28, "%{public}s nw_get_outstanding_pac_urls failed, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(v27);
            if (!v17)
              goto LABEL_72;
            goto LABEL_71;
          }
          if (v29)
          {
            *(_DWORD *)buf = 136446210;
            v49 = "nw_add_outstanding_pac_url";
            _os_log_impl(&dword_182FBE000, v18, v28, "%{public}s nw_get_outstanding_pac_urls failed, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v18 = (id)gLogObj;
          v33 = type;
          if (os_log_type_enabled(v18, type))
          {
            *(_DWORD *)buf = 136446210;
            v49 = "nw_add_outstanding_pac_url";
            _os_log_impl(&dword_182FBE000, v18, v33, "%{public}s nw_get_outstanding_pac_urls failed, backtrace limit exceeded", buf, 0xCu);
          }
        }

      }
      if (!v17)
      {
LABEL_72:
        pthread_mutex_unlock(&sOutstandingPacURLMutex);
        goto LABEL_73;
      }
LABEL_71:
      free(v17);
      goto LABEL_72;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v14 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v49 = "nw_pac_resolver_start";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v45 = 0;
    if (!__nwlog_fault(v9, &type, &v45))
      goto LABEL_80;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v10 = (id)gLogObj;
      v15 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v49 = "nw_pac_resolver_start";
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s CFNetworkExecuteProxyAutoConfigurationURL failed", buf, 0xCu);
      }
LABEL_79:

      goto LABEL_80;
    }
    if (!v45)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v10 = (id)gLogObj;
      v32 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v49 = "nw_pac_resolver_start";
        _os_log_impl(&dword_182FBE000, v10, v32, "%{public}s CFNetworkExecuteProxyAutoConfigurationURL failed, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_79;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v10 = (id)gLogObj;
    v25 = type;
    v26 = os_log_type_enabled(v10, type);
    if (!backtrace_string)
    {
      if (v26)
      {
        *(_DWORD *)buf = 136446210;
        v49 = "nw_pac_resolver_start";
        _os_log_impl(&dword_182FBE000, v10, v25, "%{public}s CFNetworkExecuteProxyAutoConfigurationURL failed, no backtrace", buf, 0xCu);
      }
      goto LABEL_79;
    }
    if (v26)
    {
      *(_DWORD *)buf = 136446466;
      v49 = "nw_pac_resolver_start";
      v50 = 2082;
      v51 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v10, v25, "%{public}s CFNetworkExecuteProxyAutoConfigurationURL failed, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_55;
  }
  v6 = (const __CFString *)*((_QWORD *)v1 + 5);
  if (v6)
  {
    clientContext.version = 0;
    clientContext.info = v2;
    clientContext.retain = nw_pac_resolver_retain;
    clientContext.release = nw_pac_resolver_release;
    clientContext.copyDescription = 0;
    v7 = CFNetworkExecuteProxyAutoConfigurationScript(v6, *((CFURLRef *)v2 + 3), (CFProxyAutoConfigurationResultCallback)nw_pac_resolver_callback, &clientContext);
    if (v7)
    {
LABEL_73:
      aBlock[0] = MEMORY[0x1E0C809B0];
      aBlock[1] = 3221225472;
      aBlock[2] = __nw_pac_resolver_start_block_invoke;
      aBlock[3] = &unk_1E14AA348;
      v44 = v7;
      v43 = v2;
      v34 = (void (**)(_QWORD))_Block_copy(aBlock);
      os_unfair_lock_lock((os_unfair_lock_t)v2 + 20);
      v34[2](v34);
      os_unfair_lock_unlock((os_unfair_lock_t)v2 + 20);

      goto LABEL_82;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v8 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v49 = "nw_pac_resolver_start";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v45 = 0;
    if (!__nwlog_fault(v9, &type, &v45))
      goto LABEL_80;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v10 = (id)gLogObj;
      v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v49 = "nw_pac_resolver_start";
        _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s CFNetworkExecuteProxyAutoConfigurationScript failed", buf, 0xCu);
      }
      goto LABEL_79;
    }
    if (!v45)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v35 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v49 = "nw_pac_resolver_start";
        _os_log_impl(&dword_182FBE000, v10, v35, "%{public}s CFNetworkExecuteProxyAutoConfigurationScript failed, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_79;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v10 = objc_claimAutoreleasedReturnValue();
    v30 = type;
    v31 = os_log_type_enabled(v10, type);
    if (!backtrace_string)
    {
      if (v31)
      {
        *(_DWORD *)buf = 136446210;
        v49 = "nw_pac_resolver_start";
        _os_log_impl(&dword_182FBE000, v10, v30, "%{public}s CFNetworkExecuteProxyAutoConfigurationScript failed, no backtrace", buf, 0xCu);
      }
      goto LABEL_79;
    }
    if (v31)
    {
      *(_DWORD *)buf = 136446466;
      v49 = "nw_pac_resolver_start";
      v50 = 2082;
      v51 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v10, v30, "%{public}s CFNetworkExecuteProxyAutoConfigurationScript failed, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_55:

    goto LABEL_56;
  }
  v20 = *((_QWORD *)v2 + 2);
  if (!v20 || *(_DWORD *)(v20 + 124) != 4)
  {
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v21 = (id)gconnectionLogObj;
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      v22 = " dry-run";
      v23 = v2[159];
      *(CFIndex *)((char *)&clientContext.version + 4) = (CFIndex)"nw_pac_resolver_start";
      LODWORD(clientContext.version) = 136446722;
      WORD2(clientContext.info) = 2082;
      if ((v23 & 8) == 0)
        v22 = "";
      *(void **)((char *)&clientContext.info + 6) = v2 + 84;
      HIWORD(clientContext.retain) = 2082;
      clientContext.release = (void (__cdecl *)(void *))v22;
      _os_log_impl(&dword_182FBE000, v21, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s%{public}s proxy pac] Either pacURL or pacScript must be set", (uint8_t *)&clientContext, 0x20u);
    }

  }
LABEL_82:

}

void sub_183665780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void nw_pac_resolver_callback(void *a1, const __CFArray *a2, __CFError *a3)
{
  os_unfair_lock_s *v5;
  const __CFArray *v6;
  __CFError *v7;
  uint64_t v8;
  os_unfair_lock_s *v9;
  void (**v10)(_QWORD);
  void *v11;
  const __CFArray *v12;
  CFIndex FirstIndexOfValue;
  NSObject *v14;
  id v15;
  char *v16;
  NSObject *v17;
  os_log_type_t v18;
  void *v19;
  const __CFArray *v20;
  __CFError *v21;
  char *backtrace_string;
  os_log_type_t v23;
  _BOOL4 v24;
  os_log_type_t v25;
  void *v26;
  char *v27;
  NSObject *v28;
  os_log_type_t v29;
  char *v30;
  os_log_type_t v31;
  _BOOL4 v32;
  os_log_type_t v33;
  _QWORD v34[4];
  os_unfair_lock_s *v35;
  const __CFArray *v36;
  __CFError *v37;
  _QWORD aBlock[4];
  os_unfair_lock_s *v39;
  char v40;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v43;
  __int16 v44;
  char *v45;
  uint64_t v46;
  CFRange v47;

  v46 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  if (v5)
  {
    v6 = a2;
    v7 = a3;
    v8 = MEMORY[0x1E0C809B0];
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 3221225472;
    aBlock[2] = ___ZL24nw_pac_resolver_callbackPvPK9__CFArrayP9__CFError_block_invoke;
    aBlock[3] = &unk_1E14ACFD0;
    v9 = v5;
    v39 = v9;
    v10 = (void (**)(_QWORD))_Block_copy(aBlock);
    os_unfair_lock_lock(v5 + 20);
    v10[2](v10);
    os_unfair_lock_unlock(v5 + 20);

    v11 = *(void **)&v9[8]._os_unfair_lock_opaque;
    if (!v11)
    {
LABEL_18:
      v19 = *(void **)&v9[4]._os_unfair_lock_opaque;
      v34[0] = v8;
      v34[1] = 3221225472;
      v34[2] = ___ZL24nw_pac_resolver_callbackPvPK9__CFArrayP9__CFError_block_invoke_2;
      v34[3] = &unk_1E14AAAA0;
      v35 = v9;
      v20 = v6;
      v36 = v20;
      v21 = v7;
      v37 = v21;
      nw_queue_context_async(v19, v34);

      goto LABEL_19;
    }
    pthread_mutex_lock(&sOutstandingPacURLMutex);
    if (nw_get_outstanding_pac_urls(void)::onceToken != -1)
      dispatch_once(&nw_get_outstanding_pac_urls(void)::onceToken, &__block_literal_global_31421);
    v12 = (const __CFArray *)nw_get_outstanding_pac_urls(void)::gPACURLs;
    if (nw_get_outstanding_pac_urls(void)::gPACURLs)
    {
      v47.length = CFArrayGetCount((CFArrayRef)nw_get_outstanding_pac_urls(void)::gPACURLs);
      v47.location = 0;
      FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v12, v47, v11);
      if (FirstIndexOfValue != -1)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v14 = (id)gLogObj;
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136446466;
          v43 = "nw_remove_outstanding_pac_url";
          v44 = 2114;
          v45 = (char *)v11;
          _os_log_impl(&dword_182FBE000, v14, OS_LOG_TYPE_DEBUG, "%{public}s Removing outstanding PAC URL: %{public}@", buf, 0x16u);
        }

        CFArrayRemoveValueAtIndex(v12, FirstIndexOfValue);
      }
      goto LABEL_17;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v15 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v43 = "nw_remove_outstanding_pac_url";
    v16 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v40 = 0;
    if (__nwlog_fault(v16, &type, &v40))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v17 = (id)gLogObj;
        v18 = type;
        if (os_log_type_enabled(v17, type))
        {
          *(_DWORD *)buf = 136446210;
          v43 = "nw_remove_outstanding_pac_url";
          _os_log_impl(&dword_182FBE000, v17, v18, "%{public}s nw_get_outstanding_pac_urls failed", buf, 0xCu);
        }
      }
      else if (v40)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v17 = (id)gLogObj;
        v23 = type;
        v24 = os_log_type_enabled(v17, type);
        if (backtrace_string)
        {
          if (v24)
          {
            *(_DWORD *)buf = 136446466;
            v43 = "nw_remove_outstanding_pac_url";
            v44 = 2082;
            v45 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v17, v23, "%{public}s nw_get_outstanding_pac_urls failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          if (!v16)
            goto LABEL_17;
          goto LABEL_16;
        }
        if (v24)
        {
          *(_DWORD *)buf = 136446210;
          v43 = "nw_remove_outstanding_pac_url";
          _os_log_impl(&dword_182FBE000, v17, v23, "%{public}s nw_get_outstanding_pac_urls failed, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v17 = (id)gLogObj;
        v25 = type;
        if (os_log_type_enabled(v17, type))
        {
          *(_DWORD *)buf = 136446210;
          v43 = "nw_remove_outstanding_pac_url";
          _os_log_impl(&dword_182FBE000, v17, v25, "%{public}s nw_get_outstanding_pac_urls failed, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
    if (!v16)
    {
LABEL_17:
      pthread_mutex_unlock(&sOutstandingPacURLMutex);
      goto LABEL_18;
    }
LABEL_16:
    free(v16);
    goto LABEL_17;
  }
  __nwlog_obj();
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v43 = "nw_pac_resolver_callback";
  v27 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v40 = 0;
  if (__nwlog_fault(v27, &type, &v40))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v28 = objc_claimAutoreleasedReturnValue();
      v29 = type;
      if (os_log_type_enabled(v28, type))
      {
        *(_DWORD *)buf = 136446210;
        v43 = "nw_pac_resolver_callback";
        _os_log_impl(&dword_182FBE000, v28, v29, "%{public}s called with null pac", buf, 0xCu);
      }
    }
    else if (v40)
    {
      v30 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v28 = objc_claimAutoreleasedReturnValue();
      v31 = type;
      v32 = os_log_type_enabled(v28, type);
      if (v30)
      {
        if (v32)
        {
          *(_DWORD *)buf = 136446466;
          v43 = "nw_pac_resolver_callback";
          v44 = 2082;
          v45 = v30;
          _os_log_impl(&dword_182FBE000, v28, v31, "%{public}s called with null pac, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v30);
        goto LABEL_48;
      }
      if (v32)
      {
        *(_DWORD *)buf = 136446210;
        v43 = "nw_pac_resolver_callback";
        _os_log_impl(&dword_182FBE000, v28, v31, "%{public}s called with null pac, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v28 = objc_claimAutoreleasedReturnValue();
      v33 = type;
      if (os_log_type_enabled(v28, type))
      {
        *(_DWORD *)buf = 136446210;
        v43 = "nw_pac_resolver_callback";
        _os_log_impl(&dword_182FBE000, v28, v33, "%{public}s called with null pac, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_48:
  if (v27)
    free(v27);
LABEL_19:

}

void sub_183665EAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25)
{
  void *v25;
  void *v26;
  void *v27;

  _Unwind_Resume(a1);
}

void __nw_pac_resolver_start_block_invoke(uint64_t a1)
{
  __CFRunLoop *v2;
  const __CFString *v3;
  void *v4;
  const __CFAllocator *v5;
  CFAbsoluteTime Current;
  CFRunLoopTimerContext context;

  v2 = (__CFRunLoop *)objc_msgSend(MEMORY[0x1E0C92C58], "resourceLoaderRunLoop");
  v3 = (const __CFString *)*MEMORY[0x1E0C9B280];
  CFRunLoopAddSource(v2, *(CFRunLoopSourceRef *)(a1 + 40), (CFRunLoopMode)*MEMORY[0x1E0C9B280]);
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 64) = *(_QWORD *)(a1 + 40);
  v4 = *(void **)(a1 + 32);
  context.version = 0;
  context.info = v4;
  context.retain = (const void *(__cdecl *)(const void *))nw_pac_resolver_const_retain;
  context.release = (void (__cdecl *)(const void *))nw_pac_resolver_const_release;
  context.copyDescription = 0;
  v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Current = CFAbsoluteTimeGetCurrent();
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 72) = CFRunLoopTimerCreate(v5, Current + 60.0, 0.0, 0, 0, (CFRunLoopTimerCallBack)nw_pac_timeout_callback, &context);
  CFRunLoopAddTimer((CFRunLoopRef)objc_msgSend(MEMORY[0x1E0C92C58], "resourceLoaderRunLoop"), *(CFRunLoopTimerRef *)(*(_QWORD *)(a1 + 32) + 72), v3);
}

void nw_pac_timeout_callback(__CFRunLoopTimer *a1, void *a2)
{
  __CFError *v3;
  char *v4;
  uint64_t v5;
  NSObject *v6;
  const char *v7;
  int v8;
  const char *v9;
  __int16 v10;
  char *v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  CFErrorDomain Domain;
  __int16 v16;
  CFIndex Code;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v3 = CFErrorCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], CFSTR("kCFErrorDomainCFNetwork"), -1001, 0);
  v4 = a2;
  v5 = *((_QWORD *)v4 + 2);
  if (!v5 || *(_DWORD *)(v5 + 124) != 4)
  {
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v6 = (id)gconnectionLogObj;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      if ((v4[159] & 8) != 0)
        v7 = " dry-run";
      else
        v7 = "";
      v8 = 136447234;
      v9 = "nw_pac_timeout_callback";
      v10 = 2082;
      v11 = v4 + 84;
      v12 = 2082;
      v13 = v7;
      v14 = 2114;
      Domain = CFErrorGetDomain(v3);
      v16 = 2048;
      Code = CFErrorGetCode(v3);
      _os_log_impl(&dword_182FBE000, v6, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s%{public}s proxy pac] Timed out waiting for PAC query: %{public}@: %ld", (uint8_t *)&v8, 0x34u);
    }

  }
  nw_pac_resolver_callback(v4, 0, v3);
  if (v3)
    CFRelease(v3);

}

void sub_183666180(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void ___ZL24nw_pac_resolver_callbackPvPK9__CFArrayP9__CFError_block_invoke(uint64_t a1)
{
  uint64_t v2;
  __CFRunLoopSource *v3;
  const void *v4;
  __CFRunLoopTimer *v5;
  const void *v6;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(__CFRunLoopSource **)(v2 + 64);
  if (v3)
  {
    CFRunLoopSourceInvalidate(v3);
    v2 = *(_QWORD *)(a1 + 32);
    v4 = *(const void **)(v2 + 64);
    if (v4)
    {
      CFRelease(v4);
      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 64) = 0;
      v2 = *(_QWORD *)(a1 + 32);
    }
  }
  v5 = *(__CFRunLoopTimer **)(v2 + 72);
  if (v5)
  {
    CFRunLoopTimerInvalidate(v5);
    v6 = *(const void **)(*(_QWORD *)(a1 + 32) + 72);
    if (v6)
    {
      CFRelease(v6);
      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 72) = 0;
    }
  }
}

void ___ZL24nw_pac_resolver_callbackPvPK9__CFArrayP9__CFError_block_invoke_2(uint64_t a1)
{
  _QWORD *v1;
  __CFError *v3;
  const __CFArray *v4;
  _QWORD *v5;
  uint64_t v6;
  NSObject *v7;
  const char *v8;
  const __CFString *v9;
  NSObject *v10;
  char v11;
  CFIndex Count;
  const char *v13;
  CFIndex v14;
  CFIndex v15;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v17;
  CFTypeID v18;
  const __CFString *Value;
  const __CFString *v20;
  CFTypeID v21;
  char *v22;
  char *v23;
  CFTypeID v24;
  const __CFNumber *v25;
  const __CFNumber *v26;
  CFTypeID v27;
  uint64_t v28;
  NSObject *v29;
  const char *v30;
  NWConcrete_nw_proxy_config *direct;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  NSObject *v35;
  const char *v36;
  uint64_t v37;
  const char *v38;
  id v39;
  char *v40;
  NSObject *v41;
  os_log_type_t v42;
  const __CFString *v43;
  NSObject *v44;
  char *backtrace_string;
  _BOOL4 v46;
  int v47;
  os_log_type_t v48;
  int v49;
  int v50;
  const char *string_ptr;
  id v52;
  NWConcrete_nw_protocol_options *options;
  nw_protocol_definition_t v54;
  void *v55;
  _QWORD *v56;
  nw_protocol_options_t v57;
  const void *v58;
  CFTypeID v59;
  const void *v60;
  CFTypeID v61;
  void *v62;
  const char *v63;
  _BOOL8 v64;
  const char *v65;
  const char *v66;
  uint64_t v67;
  void *v68;
  _QWORD *v69;
  const void *v70;
  const void *v71;
  const void *v72;
  int v73;
  NSObject *xstringa;
  xpc_object_t xstring;
  nw_protocol_options_t host_with_numeric_port;
  void *type;
  os_log_type_t typea;
  _BOOL8 v79;
  int valuePtr;
  char v81;
  uint8_t buf[4];
  const char *v83;
  __int16 v84;
  char *v85;
  __int16 v86;
  void *v87;
  __int16 v88;
  CFErrorDomain Domain;
  __int16 v90;
  CFIndex Code;
  uint64_t v92;

  v92 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD **)(a1 + 32);
  if (v1[1])
  {
    v4 = *(const __CFArray **)(a1 + 40);
    v3 = *(__CFError **)(a1 + 48);
    v5 = v1;
    v6 = v5[2];
    if (v3)
    {
      if (!v6 || *(_DWORD *)(v6 + 124) != 4)
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v7 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        {
          if ((*((_BYTE *)v5 + 159) & 8) != 0)
            v8 = " dry-run";
          else
            v8 = "";
          *(_DWORD *)buf = 136447234;
          v83 = "nw_proxy_resolver_create_parsed_array";
          v84 = 2082;
          v85 = (char *)v5 + 84;
          v86 = 2082;
          v87 = (void *)v8;
          v88 = 2114;
          Domain = CFErrorGetDomain(v3);
          v90 = 2048;
          Code = CFErrorGetCode(v3);
          _os_log_impl(&dword_182FBE000, v7, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s%{public}s proxy pac] Evaluation error: %{public}@: %ld", buf, 0x34u);
        }

      }
      if (CFErrorGetCode(v3) == -1001)
      {
        v9 = CFErrorGetDomain(v3);
        CFStringCompare(v9, CFSTR("kCFErrorDomainCFNetwork"), 0);
      }
    }
    else if (!v6 || *(_DWORD *)(v6 + 124) != 4)
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v10 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
      {
        v11 = *((_BYTE *)v5 + 159);
        Count = CFArrayGetCount(v4);
        v13 = " dry-run";
        *(_DWORD *)buf = 136446978;
        v83 = "nw_proxy_resolver_create_parsed_array";
        v84 = 2082;
        v85 = (char *)v5 + 84;
        if ((v11 & 8) == 0)
          v13 = "";
        v86 = 2082;
        v87 = (void *)v13;
        v88 = 2048;
        Domain = (CFErrorDomain)Count;
        _os_log_impl(&dword_182FBE000, v10, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s%{public}s proxy pac] Resolver returned %ld proxies", buf, 0x2Au);
      }

    }
    if (v4)
    {
      v79 = nw_array_create();
      v14 = CFArrayGetCount(v4);
      if (v14 >= 1)
      {
        v15 = 0;
        while (1)
        {
          ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v4, v15);
          v17 = ValueAtIndex;
          if (ValueAtIndex)
          {
            v18 = CFGetTypeID(ValueAtIndex);
            if (v18 == CFDictionaryGetTypeID())
              break;
          }
          v32 = v5[2];
          if (v32 && *(_DWORD *)(v32 + 124) == 4)
            goto LABEL_71;
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          direct = (NWConcrete_nw_proxy_config *)(id)gconnectionLogObj;
          if (os_log_type_enabled(&direct->super, OS_LOG_TYPE_ERROR))
          {
            v33 = " dry-run";
            if ((*((_BYTE *)v5 + 159) & 8) == 0)
              v33 = "";
            *(_DWORD *)buf = 136446978;
            v83 = "nw_proxy_resolver_create_parsed_array";
            v84 = 2082;
            v85 = (char *)v5 + 84;
            v86 = 2082;
            v87 = (void *)v33;
            v88 = 2114;
            Domain = (CFErrorDomain)v17;
            _os_log_impl(&dword_182FBE000, &direct->super, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s%{public}s proxy pac] Unknown item in pac proxy list %{public}@", buf, 0x2Au);
          }
LABEL_70:

LABEL_71:
          if (v14 == ++v15)
            goto LABEL_149;
        }
        Value = (const __CFString *)CFDictionaryGetValue(v17, CFSTR("kCFProxyTypeKey"));
        v20 = Value;
        if (Value && (v21 = CFGetTypeID(Value), v21 == CFStringGetTypeID()))
        {
          if (CFStringCompare(v20, CFSTR("kCFProxyTypeNone"), 0) == kCFCompareEqualTo)
          {
            direct = nw_proxy_config_create_direct();
            goto LABEL_141;
          }
          v22 = (char *)CFDictionaryGetValue(v17, CFSTR("kCFProxyHostNameKey"));
          v23 = v22;
          if (v22)
          {
            v24 = CFGetTypeID(v22);
            if (v24 == CFStringGetTypeID())
            {
              type = (void *)_CFXPCCreateXPCObjectFromCFObject();
              if (type)
              {
                valuePtr = 0;
                v25 = (const __CFNumber *)CFDictionaryGetValue(v17, CFSTR("kCFProxyPortNumberKey"));
                v26 = v25;
                if (v25)
                {
                  v27 = CFGetTypeID(v25);
                  if (v27 == CFNumberGetTypeID())
                    CFNumberGetValue(v26, kCFNumberIntType, &valuePtr);
                }
                if (CFStringCompare(v20, CFSTR("kCFProxyTypeSOCKS"), 0))
                {
                  if (!v5[3])
                    goto LABEL_100;
                  if (CFStringCompare(v20, CFSTR("kCFProxyTypeHTTP"), 0) == kCFCompareEqualTo)
                    goto LABEL_101;
                  if (CFStringCompare(v20, CFSTR("kCFProxyTypeHTTPS"), 0))
                  {
                    if (CFStringCompare(v20, CFSTR("kCFProxyTypeFTP"), 0))
                    {
                      v28 = v5[2];
                      if (!v28 || *(_DWORD *)(v28 + 124) != 4)
                      {
                        if (__nwlog_connection_log::onceToken != -1)
                          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                        v29 = (id)gconnectionLogObj;
                        host_with_numeric_port = v29;
                        if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
                        {
                          v30 = " dry-run";
                          if ((*((_BYTE *)v5 + 159) & 8) == 0)
                            v30 = "";
                          *(_DWORD *)buf = 136446978;
                          v83 = "nw_proxy_resolver_create_parsed_array";
                          v84 = 2082;
                          v85 = (char *)v5 + 84;
                          v86 = 2082;
                          v87 = (void *)v30;
                          v88 = 2114;
                          Domain = v20;
                          _os_log_impl(&dword_182FBE000, v29, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s%{public}s proxy pac] Unknown proxy type %{public}@", buf, 0x2Au);
                        }
                        direct = 0;
                        goto LABEL_139;
                      }
LABEL_100:
                      direct = 0;
LABEL_140:

LABEL_141:
                      if (direct)
                        nw_array_append(v79, direct);
                      goto LABEL_70;
                    }
LABEL_101:
                    if (!valuePtr)
                      valuePtr = 80;
                    v47 = 2001;
                  }
                  else
                  {
                    if ((*((_BYTE *)v5 + 159) & 2) != 0)
                      v50 = 4002;
                    else
                      v50 = 4001;
                    if ((*((_BYTE *)v5 + 159) & 1) != 0)
                      v47 = 2002;
                    else
                      v47 = v50;
                    if (!valuePtr)
                      valuePtr = 443;
                  }
                  string_ptr = xpc_string_get_string_ptr(type);
                  host_with_numeric_port = (nw_protocol_options_t)nw_endpoint_create_host_with_numeric_port(string_ptr, (unsigned __int16)valuePtr);
                  if (nw_proxy_copy_http_connect_definition::onceToken != -1)
                    dispatch_once(&nw_proxy_copy_http_connect_definition::onceToken, &__block_literal_global_92);
                  v52 = (id)nw_proxy_copy_http_connect_definition::proxy_definition;
                  options = nw_proxy_create_options(v52);
                  direct = nw_proxy_config_create(host_with_numeric_port, options);

                  nw_proxy_config_set_type(direct, v47);
                  if (v47 == 4002)
                  {
                    *(_DWORD *)buf = 4;
                    v54 = nw_protocol_copy_tcp_definition();
                    v55 = nw_proxy_config_copy_protocol_stack(direct, v54, buf);

                    v56 = v5;
                    v57 = nw_tls_create_options();
                    if ((*((_BYTE *)v5 + 159) & 4) != 0 && os_variant_allows_internal_security_policies())
                    {
                      xstringa = v57;
                      sec_protocol_options_set_peer_authentication_required(xstringa, 0);

                    }
                    nw_protocol_stack_append_application_protocol(v55, v57);

                  }
                }
                else
                {
                  v43 = (const __CFString *)CFDictionaryGetValue(v17, CFSTR("kCFStreamPropertySOCKSVersion"));
                  if (v43 && CFStringCompare(v43, CFSTR("kCFStreamSocketSOCKSVersion4"), 0) == kCFCompareEqualTo)
                  {
                    v44 = nw_protocol_socksv4_copy_definition();
                    host_with_numeric_port = nw_framer_create_options(v44);
                    v49 = 3001;
                  }
                  else
                  {
                    if (nw_protocol_socksv5_copy_definition::onceToken != -1)
                      dispatch_once(&nw_protocol_socksv5_copy_definition::onceToken, &__block_literal_global_83487);
                    if (nw_protocol_socksv5_copy_definition::definition)
                      v44 = os_retain((void *)nw_protocol_socksv5_copy_definition::definition);
                    else
                      v44 = 0;
                    host_with_numeric_port = nw_framer_create_options(v44);
                    v49 = 3002;
                  }
                  v73 = v49;

                  v58 = CFDictionaryGetValue(v17, CFSTR("kCFStreamPropertySOCKSUser"));
                  if (v58 && (v59 = CFGetTypeID(v58), v59 == CFStringGetTypeID()))
                    xstring = (xpc_object_t)_CFXPCCreateXPCObjectFromCFObject();
                  else
                    xstring = 0;
                  v60 = CFDictionaryGetValue(v17, CFSTR("kCFStreamPropertySOCKSPassword"));
                  if (v60 && (v61 = CFGetTypeID(v60), v61 == CFStringGetTypeID()))
                    v62 = (void *)_CFXPCCreateXPCObjectFromCFObject();
                  else
                    v62 = 0;
                  v63 = xpc_string_get_string_ptr(type);
                  v64 = nw_endpoint_create_host_with_numeric_port(v63, (unsigned __int16)valuePtr);
                  direct = nw_proxy_config_create((void *)v64, host_with_numeric_port);
                  nw_proxy_config_set_type(direct, v73);
                  if (xstring)
                  {
                    v65 = xpc_string_get_string_ptr(xstring);
                    if (v62)
                      v66 = xpc_string_get_string_ptr(v62);
                    else
                      v66 = 0;
                    nw_proxy_config_set_username_and_password(&direct->super, v65, v66);
                  }

                }
LABEL_139:

                goto LABEL_140;
              }
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v39 = (id)gLogObj;
              *(_DWORD *)buf = 136446466;
              v83 = "nw_proxy_resolver_create_parsed_array";
              v84 = 2114;
              v85 = v23;
              v40 = (char *)_os_log_send_and_compose_impl();

              LOBYTE(valuePtr) = 16;
              v81 = 0;
              if (__nwlog_fault(v40, &valuePtr, &v81))
              {
                if (valuePtr == 17)
                {
                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                  networkd_settings_init();
                  v41 = (id)gLogObj;
                  v42 = valuePtr;
                  if (os_log_type_enabled(v41, (os_log_type_t)valuePtr))
                  {
                    *(_DWORD *)buf = 136446466;
                    v83 = "nw_proxy_resolver_create_parsed_array";
                    v84 = 2114;
                    v85 = v23;
                    _os_log_impl(&dword_182FBE000, v41, v42, "%{public}s _CFXPCCreateXPCObjectFromCFObject(%{public}@) failed", buf, 0x16u);
                  }
                }
                else if (v81)
                {
                  backtrace_string = (char *)__nw_create_backtrace_string();
                  __nwlog_obj();
                  v41 = objc_claimAutoreleasedReturnValue();
                  typea = valuePtr;
                  v46 = os_log_type_enabled(v41, (os_log_type_t)valuePtr);
                  if (backtrace_string)
                  {
                    if (v46)
                    {
                      *(_DWORD *)buf = 136446722;
                      v83 = "nw_proxy_resolver_create_parsed_array";
                      v84 = 2114;
                      v85 = v23;
                      v86 = 2082;
                      v87 = backtrace_string;
                      _os_log_impl(&dword_182FBE000, v41, typea, "%{public}s _CFXPCCreateXPCObjectFromCFObject(%{public}@) failed, dumping backtrace:%{public}s", buf, 0x20u);
                    }

                    free(backtrace_string);
                    if (!v40)
                      goto LABEL_69;
                    goto LABEL_147;
                  }
                  if (v46)
                  {
                    *(_DWORD *)buf = 136446466;
                    v83 = "nw_proxy_resolver_create_parsed_array";
                    v84 = 2114;
                    v85 = v23;
                    _os_log_impl(&dword_182FBE000, v41, typea, "%{public}s _CFXPCCreateXPCObjectFromCFObject(%{public}@) failed, no backtrace", buf, 0x16u);
                  }
                }
                else
                {
                  __nwlog_obj();
                  v41 = objc_claimAutoreleasedReturnValue();
                  v48 = valuePtr;
                  if (os_log_type_enabled(v41, (os_log_type_t)valuePtr))
                  {
                    *(_DWORD *)buf = 136446466;
                    v83 = "nw_proxy_resolver_create_parsed_array";
                    v84 = 2114;
                    v85 = v23;
                    _os_log_impl(&dword_182FBE000, v41, v48, "%{public}s _CFXPCCreateXPCObjectFromCFObject(%{public}@) failed, backtrace limit exceeded", buf, 0x16u);
                  }
                }

              }
              if (v40)
LABEL_147:
                free(v40);
LABEL_69:
              direct = 0;
              goto LABEL_70;
            }
          }
          v37 = v5[2];
          if (v37 && *(_DWORD *)(v37 + 124) == 4)
            goto LABEL_69;
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v35 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
          {
            v38 = " dry-run";
            if ((*((_BYTE *)v5 + 159) & 8) == 0)
              v38 = "";
            *(_DWORD *)buf = 136446978;
            v83 = "nw_proxy_resolver_create_parsed_array";
            v84 = 2082;
            v85 = (char *)v5 + 84;
            v86 = 2082;
            v87 = (void *)v38;
            v88 = 2114;
            Domain = v20;
            _os_log_impl(&dword_182FBE000, v35, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s%{public}s proxy pac] Bad proxy hostname %{public}@", buf, 0x2Au);
          }
        }
        else
        {
          v34 = v5[2];
          if (v34 && *(_DWORD *)(v34 + 124) == 4)
            goto LABEL_69;
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v35 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
          {
            v36 = " dry-run";
            if ((*((_BYTE *)v5 + 159) & 8) == 0)
              v36 = "";
            *(_DWORD *)buf = 136446978;
            v83 = "nw_proxy_resolver_create_parsed_array";
            v84 = 2082;
            v85 = (char *)v5 + 84;
            v86 = 2082;
            v87 = (void *)v36;
            v88 = 2114;
            Domain = v20;
            _os_log_impl(&dword_182FBE000, v35, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s%{public}s proxy pac] Bad proxy type key %{public}@", buf, 0x2Au);
          }
        }

        goto LABEL_69;
      }
    }
    else
    {
      v79 = 0;
    }
LABEL_149:

    (*(void (**)(_QWORD, _BOOL8))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 16))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), v79);
    v67 = *(_QWORD *)(a1 + 32);
    v68 = *(void **)(v67 + 8);
    *(_QWORD *)(v67 + 8) = 0;

    v69 = *(id *)(a1 + 32);
    v70 = (const void *)v69[3];
    if (v70)
    {
      CFRelease(v70);
      v69[3] = 0;
    }
    v71 = (const void *)v69[4];
    if (v71)
    {
      CFRelease(v71);
      v69[4] = 0;
    }
    v72 = (const void *)v69[5];
    if (v72)
    {
      CFRelease(v72);
      v69[5] = 0;
    }

  }
}

void sub_183666FF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19)
{
  void *v19;
  void *v20;
  void *v21;
  void *v22;

  _Unwind_Resume(a1);
}

BOOL __nw_protocol_ethernet_identifier_block_invoke()
{
  unk_1EDCF1831 = 0;
  unk_1EDCF1829 = 0;
  qword_1EDCF1838 = 0;
  strcpy((char *)&g_ethernet_protocol_identifier, "ethernet");
  qword_1EDCF1888 = (uint64_t)nw_protocol_default_input_available;
  unk_1EDCF1890 = nw_protocol_default_output_available;
  qword_1EDCF18C8 = (uint64_t)nw_protocol_default_get_local;
  unk_1EDCF18D0 = nw_protocol_default_get_remote;
  qword_1EDCF18B8 = (uint64_t)nw_protocol_default_get_parameters;
  unk_1EDCF18C0 = nw_protocol_default_get_path;
  qword_1EDCF1908 = (uint64_t)nw_protocol_default_output_finished;
  unk_1EDCF1910 = nw_protocol_default_get_output_local;
  qword_1EDCF1858 = (uint64_t)nw_protocol_default_replace_input_handler;
  unk_1EDCF1860 = nw_protocol_default_connect;
  qword_1EDCF1868 = (uint64_t)nw_protocol_default_disconnect;
  unk_1EDCF1870 = nw_protocol_default_connected;
  qword_1EDCF1878 = (uint64_t)nw_protocol_default_disconnected;
  unk_1EDCF1880 = nw_protocol_default_error;
  qword_1EDCF1948 = (uint64_t)nw_protocol_default_reset;
  unk_1EDCF1950 = nw_protocol_default_input_flush;
  qword_1EDCF18F8 = (uint64_t)nw_protocol_default_supports_external_data;
  unk_1EDCF1900 = nw_protocol_default_input_finished;
  qword_1EDCF1918 = (uint64_t)nw_protocol_default_get_output_interface;
  unk_1EDCF1920 = nw_protocol_default_waiting_for_output;
  qword_1EDCF18D8 = (uint64_t)nw_protocol_default_register_notification;
  unk_1EDCF18E0 = nw_protocol_default_unregister_notification;
  qword_1EDCF18E8 = (uint64_t)nw_protocol_default_notify;
  unk_1EDCF18F0 = nw_protocol_default_updated_path;
  qword_1EDCF1928 = (uint64_t)nw_protocol_default_copy_info;
  unk_1EDCF1930 = nw_protocol_default_add_listen_handler;
  g_ethernet_protocol_callbacks = (uint64_t)nw_protocol_ethernet_add_input_handler;
  unk_1EDCF1850 = nw_protocol_ethernet_remove_input_handler;
  qword_1EDCF1898 = (uint64_t)nw_protocol_ethernet_get_input_frames;
  unk_1EDCF18A0 = nw_protocol_ethernet_get_output_frames;
  qword_1EDCF18A8 = (uint64_t)nw_protocol_ethernet_finalize_output_frames;
  unk_1EDCF18B0 = nw_protocol_default_link_state;
  qword_1EDCF1938 = (uint64_t)nw_protocol_default_remove_listen_handler;
  unk_1EDCF1940 = nw_protocol_ethernet_get_message_properties;
  qword_1EDCF1840 = 0x200000001;
  return nw_protocol_register_extended(&g_ethernet_protocol_identifier, (uint64_t)nw_protocol_ethernet_create);
}

uint64_t nw_protocol_ethernet_add_input_handler(nw_protocol *a1, nw_protocol *a2)
{
  char *handle;
  void *v4;
  _WORD *v5;
  __int16 v6;
  NSObject *v7;
  NSObject *v8;
  _BYTE *ethernet_address;
  int v10;
  int sa_family;
  __int16 v12;
  NSObject *v13;
  NSObject *v14;
  _BYTE *v15;
  int v16;
  int v17;
  __int16 v18;
  char *v20;
  NSObject *v21;
  os_log_type_t v22;
  const char *v23;
  char *backtrace_string;
  _BOOL4 v25;
  const char *v26;
  _BOOL4 v27;
  char v28;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v31;
  __int16 v32;
  char *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    handle = (char *)a1->handle;
    if (handle)
    {
      nw_protocol_set_input_handler((uint64_t)a1, (uint64_t)a2);
      uuid_clear((unsigned __int8 *)handle);
      if (!a2->output_handler)
        nw_protocol_set_output_handler((uint64_t)a2, (uint64_t)handle);
      v4 = (void *)((uint64_t (*)(nw_protocol *))a2->callbacks->get_path)(a2);
      if (v4)
      {
        v5 = v4;
        v6 = v5[192];

        *((_WORD *)handle + 38) = v6;
      }
      v7 = ((uint64_t (*)(nw_protocol *))a2->callbacks->get_local_endpoint)(a2);
      if (v7)
      {
        v8 = v7;
        ethernet_address = nw_endpoint_get_ethernet_address(v7);
        if (ethernet_address)
        {
          v10 = *(_DWORD *)ethernet_address;
          *((_WORD *)handle + 34) = *((_WORD *)ethernet_address + 2);
          *((_DWORD *)handle + 16) = v10;
        }
        if (!*((_WORD *)handle + 38))
        {
          sa_family = nw_endpoint_get_address(v8)->sa_family;
          if (sa_family == 2)
          {
            v12 = 2048;
            goto LABEL_15;
          }
          if (sa_family == 30)
          {
            v12 = -31011;
LABEL_15:
            *((_WORD *)handle + 38) = v12;
          }
        }
      }
      v13 = ((uint64_t (*)(nw_protocol *))a2->callbacks->get_remote_endpoint)(a2);
      if (!v13)
        return 1;
      v14 = v13;
      v15 = nw_endpoint_get_ethernet_address(v13);
      if (v15)
      {
        v16 = *(_DWORD *)v15;
        *((_WORD *)handle + 37) = *((_WORD *)v15 + 2);
        *(_DWORD *)(handle + 70) = v16;
      }
      if (*((_WORD *)handle + 38))
        return 1;
      v17 = nw_endpoint_get_address(v14)->sa_family;
      if (v17 == 30)
      {
        v18 = -31011;
      }
      else
      {
        if (v17 != 2)
          return 1;
        v18 = 2048;
      }
      *((_WORD *)handle + 38) = v18;
      return 1;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v31 = "nw_protocol_ethernet_add_input_handler";
    v20 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v28 = 0;
    if (!__nwlog_fault(v20, &type, &v28))
      goto LABEL_54;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v21 = __nwlog_obj();
      v22 = type;
      if (os_log_type_enabled(v21, type))
      {
        *(_DWORD *)buf = 136446210;
        v31 = "nw_protocol_ethernet_add_input_handler";
        v23 = "%{public}s called with null ethernet";
        goto LABEL_53;
      }
      goto LABEL_54;
    }
    if (!v28)
    {
      v21 = __nwlog_obj();
      v22 = type;
      if (os_log_type_enabled(v21, type))
      {
        *(_DWORD *)buf = 136446210;
        v31 = "nw_protocol_ethernet_add_input_handler";
        v23 = "%{public}s called with null ethernet, backtrace limit exceeded";
        goto LABEL_53;
      }
      goto LABEL_54;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v21 = __nwlog_obj();
    v22 = type;
    v27 = os_log_type_enabled(v21, type);
    if (!backtrace_string)
    {
      if (v27)
      {
        *(_DWORD *)buf = 136446210;
        v31 = "nw_protocol_ethernet_add_input_handler";
        v23 = "%{public}s called with null ethernet, no backtrace";
        goto LABEL_53;
      }
      goto LABEL_54;
    }
    if (v27)
    {
      *(_DWORD *)buf = 136446466;
      v31 = "nw_protocol_ethernet_add_input_handler";
      v32 = 2082;
      v33 = backtrace_string;
      v26 = "%{public}s called with null ethernet, dumping backtrace:%{public}s";
      goto LABEL_43;
    }
    goto LABEL_44;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v31 = "nw_protocol_ethernet_add_input_handler";
  v20 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v28 = 0;
  if (!__nwlog_fault(v20, &type, &v28))
    goto LABEL_54;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v28)
    {
      v21 = __nwlog_obj();
      v22 = type;
      if (os_log_type_enabled(v21, type))
      {
        *(_DWORD *)buf = 136446210;
        v31 = "nw_protocol_ethernet_add_input_handler";
        v23 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_53;
      }
      goto LABEL_54;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v21 = __nwlog_obj();
    v22 = type;
    v25 = os_log_type_enabled(v21, type);
    if (!backtrace_string)
    {
      if (v25)
      {
        *(_DWORD *)buf = 136446210;
        v31 = "nw_protocol_ethernet_add_input_handler";
        v23 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_53;
      }
      goto LABEL_54;
    }
    if (v25)
    {
      *(_DWORD *)buf = 136446466;
      v31 = "nw_protocol_ethernet_add_input_handler";
      v32 = 2082;
      v33 = backtrace_string;
      v26 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_43:
      _os_log_impl(&dword_182FBE000, v21, v22, v26, buf, 0x16u);
    }
LABEL_44:
    free(backtrace_string);
    goto LABEL_54;
  }
  v21 = __nwlog_obj();
  v22 = type;
  if (os_log_type_enabled(v21, type))
  {
    *(_DWORD *)buf = 136446210;
    v31 = "nw_protocol_ethernet_add_input_handler";
    v23 = "%{public}s called with null protocol";
LABEL_53:
    _os_log_impl(&dword_182FBE000, v21, v22, v23, buf, 0xCu);
  }
LABEL_54:
  if (v20)
    free(v20);
  return 0;
}

uint64_t nw_protocol_ethernet_remove_input_handler(nw_protocol *a1, nw_protocol *a2, int a3)
{
  void *handle;
  nw_protocol *output_handler;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  const char *v12;
  char *backtrace_string;
  _BOOL4 v14;
  const char *v15;
  _BOOL4 v16;
  char v17;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v20;
  __int16 v21;
  char *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v20 = "nw_protocol_ethernet_remove_input_handler";
    v9 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v17 = 0;
    if (!__nwlog_fault(v9, &type, &v17))
      goto LABEL_40;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v17)
      {
        v10 = __nwlog_obj();
        v11 = type;
        if (!os_log_type_enabled(v10, type))
          goto LABEL_40;
        *(_DWORD *)buf = 136446210;
        v20 = "nw_protocol_ethernet_remove_input_handler";
        v12 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_39;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v10 = __nwlog_obj();
      v11 = type;
      v14 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (!v14)
          goto LABEL_40;
        *(_DWORD *)buf = 136446210;
        v20 = "nw_protocol_ethernet_remove_input_handler";
        v12 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_39;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446466;
        v20 = "nw_protocol_ethernet_remove_input_handler";
        v21 = 2082;
        v22 = backtrace_string;
        v15 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_29:
        _os_log_impl(&dword_182FBE000, v10, v11, v15, buf, 0x16u);
      }
LABEL_30:
      free(backtrace_string);
      goto LABEL_40;
    }
    v10 = __nwlog_obj();
    v11 = type;
    if (!os_log_type_enabled(v10, type))
      goto LABEL_40;
    *(_DWORD *)buf = 136446210;
    v20 = "nw_protocol_ethernet_remove_input_handler";
    v12 = "%{public}s called with null protocol";
LABEL_39:
    _os_log_impl(&dword_182FBE000, v10, v11, v12, buf, 0xCu);
LABEL_40:
    if (v9)
      free(v9);
    return 0;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v20 = "nw_protocol_ethernet_remove_input_handler";
    v9 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v17 = 0;
    if (!__nwlog_fault(v9, &type, &v17))
      goto LABEL_40;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v10 = __nwlog_obj();
      v11 = type;
      if (!os_log_type_enabled(v10, type))
        goto LABEL_40;
      *(_DWORD *)buf = 136446210;
      v20 = "nw_protocol_ethernet_remove_input_handler";
      v12 = "%{public}s called with null ethernet";
      goto LABEL_39;
    }
    if (!v17)
    {
      v10 = __nwlog_obj();
      v11 = type;
      if (!os_log_type_enabled(v10, type))
        goto LABEL_40;
      *(_DWORD *)buf = 136446210;
      v20 = "nw_protocol_ethernet_remove_input_handler";
      v12 = "%{public}s called with null ethernet, backtrace limit exceeded";
      goto LABEL_39;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v10 = __nwlog_obj();
    v11 = type;
    v16 = os_log_type_enabled(v10, type);
    if (backtrace_string)
    {
      if (v16)
      {
        *(_DWORD *)buf = 136446466;
        v20 = "nw_protocol_ethernet_remove_input_handler";
        v21 = 2082;
        v22 = backtrace_string;
        v15 = "%{public}s called with null ethernet, dumping backtrace:%{public}s";
        goto LABEL_29;
      }
      goto LABEL_30;
    }
    if (!v16)
      goto LABEL_40;
    *(_DWORD *)buf = 136446210;
    v20 = "nw_protocol_ethernet_remove_input_handler";
    v12 = "%{public}s called with null ethernet, no backtrace";
    goto LABEL_39;
  }
  if (a2->output_handler == a1)
    nw_protocol_set_output_handler((uint64_t)a2, 0);
  if (a1->default_input_handler != a2)
    return 0;
  output_handler = a1->output_handler;
  if (output_handler)
    ((void (*)(void))output_handler->callbacks->remove_input_handler)();
  nw_protocol_set_input_handler((uint64_t)a1, 0);
  if (a3)
  {
    a1->handle = 0;
    free(handle);
  }
  return 1;
}

uint64_t nw_protocol_ethernet_get_input_frames(nw_protocol *a1, nw_protocol *a2, unsigned int a3, unsigned int a4, unsigned int a5, nw_frame_array_s *a6)
{
  _QWORD *handle;
  uint64_t v9;
  nw_frame *tqh_first;
  nw_frame *v11;
  char v12;
  uint64_t v13;
  char *v15;
  NSObject *v16;
  os_log_type_t v17;
  const char *v18;
  char *backtrace_string;
  _BOOL4 v20;
  const char *v21;
  _BOOL4 v22;
  NSObject *v23;
  _QWORD v24[2];
  uint64_t (*v25)(_QWORD *);
  void *v26;
  _BYTE *v27;
  _QWORD *v28;
  nw_protocol *v29;
  nw_frame_array_s *v30;
  char v31;
  os_log_type_t type[4];
  const char *v33;
  __int16 v34;
  char *v35;
  _BYTE buf[24];
  int v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    handle = a1->handle;
    if (handle)
    {
      v9 = handle[4];
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      v37 = 0;
      *(_QWORD *)&buf[16] = 0x2000000000;
      v37 = (*(uint64_t (**)(void))(*(_QWORD *)(v9 + 24) + 80))();
      if (*(_DWORD *)(*(_QWORD *)&buf[8] + 24))
      {
        v24[0] = MEMORY[0x1E0C809B0];
        v24[1] = 0x40000000;
        v25 = (uint64_t (*)(_QWORD *))___ZL37nw_protocol_ethernet_get_input_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke;
        v26 = &unk_1E149FD20;
        v27 = buf;
        v28 = handle;
        v29 = a1;
        v30 = a6;
        tqh_first = a6->tqh_first;
        do
        {
          if (!tqh_first)
            break;
          v11 = (nw_frame *)*((_QWORD *)tqh_first + 4);
          v12 = v25(v24);
          tqh_first = v11;
        }
        while ((v12 & 1) != 0);
      }
      else if (gLogDatapath)
      {
        v23 = __nwlog_obj();
        if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)type = 136446466;
          v33 = "nw_protocol_ethernet_get_input_frames";
          v34 = 2082;
          v35 = (char *)handle + 78;
          _os_log_impl(&dword_182FBE000, v23, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s No ethernet input frame", (uint8_t *)type, 0x16u);
        }
      }
      v13 = *(unsigned int *)(*(_QWORD *)&buf[8] + 24);
      _Block_object_dispose(buf, 8);
      return v13;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_ethernet_get_input_frames";
    v15 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    v31 = 0;
    if (!__nwlog_fault(v15, type, &v31))
      goto LABEL_40;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      v16 = __nwlog_obj();
      v17 = type[0];
      if (os_log_type_enabled(v16, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_ethernet_get_input_frames";
        v18 = "%{public}s called with null ethernet";
        goto LABEL_39;
      }
      goto LABEL_40;
    }
    if (!v31)
    {
      v16 = __nwlog_obj();
      v17 = type[0];
      if (os_log_type_enabled(v16, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_ethernet_get_input_frames";
        v18 = "%{public}s called with null ethernet, backtrace limit exceeded";
        goto LABEL_39;
      }
      goto LABEL_40;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v16 = __nwlog_obj();
    v17 = type[0];
    v22 = os_log_type_enabled(v16, type[0]);
    if (!backtrace_string)
    {
      if (v22)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_ethernet_get_input_frames";
        v18 = "%{public}s called with null ethernet, no backtrace";
        goto LABEL_39;
      }
      goto LABEL_40;
    }
    if (v22)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_protocol_ethernet_get_input_frames";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = backtrace_string;
      v21 = "%{public}s called with null ethernet, dumping backtrace:%{public}s";
      goto LABEL_27;
    }
    goto LABEL_28;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_protocol_ethernet_get_input_frames";
  v15 = (char *)_os_log_send_and_compose_impl();
  type[0] = OS_LOG_TYPE_ERROR;
  v31 = 0;
  if (!__nwlog_fault(v15, type, &v31))
    goto LABEL_40;
  if (type[0] != OS_LOG_TYPE_FAULT)
  {
    if (!v31)
    {
      v16 = __nwlog_obj();
      v17 = type[0];
      if (os_log_type_enabled(v16, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_ethernet_get_input_frames";
        v18 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_39;
      }
      goto LABEL_40;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v16 = __nwlog_obj();
    v17 = type[0];
    v20 = os_log_type_enabled(v16, type[0]);
    if (!backtrace_string)
    {
      if (v20)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_ethernet_get_input_frames";
        v18 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_39;
      }
      goto LABEL_40;
    }
    if (v20)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_protocol_ethernet_get_input_frames";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = backtrace_string;
      v21 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_27:
      _os_log_impl(&dword_182FBE000, v16, v17, v21, buf, 0x16u);
    }
LABEL_28:
    free(backtrace_string);
    goto LABEL_40;
  }
  v16 = __nwlog_obj();
  v17 = type[0];
  if (os_log_type_enabled(v16, type[0]))
  {
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_ethernet_get_input_frames";
    v18 = "%{public}s called with null protocol";
LABEL_39:
    _os_log_impl(&dword_182FBE000, v16, v17, v18, buf, 0xCu);
  }
LABEL_40:
  if (v15)
    free(v15);
  return 0;
}

uint64_t nw_protocol_ethernet_get_output_frames(nw_protocol *a1, nw_protocol *a2, unsigned int a3, unsigned int a4, unsigned int a5, nw_frame_array_s *a6)
{
  _QWORD *handle;
  uint64_t v9;
  nw_frame *tqh_first;
  nw_frame *v11;
  char v12;
  char *v14;
  NSObject *v15;
  os_log_type_t v16;
  const char *v17;
  char *backtrace_string;
  _BOOL4 v19;
  const char *v20;
  _BOOL4 v21;
  _QWORD v22[2];
  uint64_t (*v23)(uint64_t, uint64_t);
  void *v24;
  nw_protocol *v25;
  char v26;
  os_log_type_t v27;
  uint8_t buf[4];
  const char *v29;
  __int16 v30;
  char *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    handle = a1->handle;
    if (handle)
    {
      v9 = (*(uint64_t (**)(void))(*(_QWORD *)(handle[4] + 24) + 88))();
      v22[0] = MEMORY[0x1E0C809B0];
      v22[1] = 0x40000000;
      v23 = ___ZL38nw_protocol_ethernet_get_output_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke;
      v24 = &__block_descriptor_tmp_15_31604;
      v25 = a1;
      tqh_first = a6->tqh_first;
      do
      {
        if (!tqh_first)
          break;
        v11 = (nw_frame *)*((_QWORD *)tqh_first + 4);
        v12 = ((uint64_t (*)(_QWORD *))v23)(v22);
        tqh_first = v11;
      }
      while ((v12 & 1) != 0);
      return v9;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v29 = "nw_protocol_ethernet_get_output_frames";
    v14 = (char *)_os_log_send_and_compose_impl();
    v27 = OS_LOG_TYPE_ERROR;
    v26 = 0;
    if (!__nwlog_fault(v14, &v27, &v26))
      goto LABEL_34;
    if (v27 == OS_LOG_TYPE_FAULT)
    {
      v15 = __nwlog_obj();
      v16 = v27;
      if (os_log_type_enabled(v15, v27))
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_protocol_ethernet_get_output_frames";
        v17 = "%{public}s called with null ethernet";
        goto LABEL_33;
      }
      goto LABEL_34;
    }
    if (!v26)
    {
      v15 = __nwlog_obj();
      v16 = v27;
      if (os_log_type_enabled(v15, v27))
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_protocol_ethernet_get_output_frames";
        v17 = "%{public}s called with null ethernet, backtrace limit exceeded";
        goto LABEL_33;
      }
      goto LABEL_34;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v15 = __nwlog_obj();
    v16 = v27;
    v21 = os_log_type_enabled(v15, v27);
    if (!backtrace_string)
    {
      if (v21)
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_protocol_ethernet_get_output_frames";
        v17 = "%{public}s called with null ethernet, no backtrace";
        goto LABEL_33;
      }
      goto LABEL_34;
    }
    if (v21)
    {
      *(_DWORD *)buf = 136446466;
      v29 = "nw_protocol_ethernet_get_output_frames";
      v30 = 2082;
      v31 = backtrace_string;
      v20 = "%{public}s called with null ethernet, dumping backtrace:%{public}s";
      goto LABEL_23;
    }
    goto LABEL_24;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v29 = "nw_protocol_ethernet_get_output_frames";
  v14 = (char *)_os_log_send_and_compose_impl();
  v27 = OS_LOG_TYPE_ERROR;
  v26 = 0;
  if (!__nwlog_fault(v14, &v27, &v26))
    goto LABEL_34;
  if (v27 != OS_LOG_TYPE_FAULT)
  {
    if (!v26)
    {
      v15 = __nwlog_obj();
      v16 = v27;
      if (os_log_type_enabled(v15, v27))
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_protocol_ethernet_get_output_frames";
        v17 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_33;
      }
      goto LABEL_34;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v15 = __nwlog_obj();
    v16 = v27;
    v19 = os_log_type_enabled(v15, v27);
    if (!backtrace_string)
    {
      if (v19)
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_protocol_ethernet_get_output_frames";
        v17 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_33;
      }
      goto LABEL_34;
    }
    if (v19)
    {
      *(_DWORD *)buf = 136446466;
      v29 = "nw_protocol_ethernet_get_output_frames";
      v30 = 2082;
      v31 = backtrace_string;
      v20 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_23:
      _os_log_impl(&dword_182FBE000, v15, v16, v20, buf, 0x16u);
    }
LABEL_24:
    free(backtrace_string);
    goto LABEL_34;
  }
  v15 = __nwlog_obj();
  v16 = v27;
  if (os_log_type_enabled(v15, v27))
  {
    *(_DWORD *)buf = 136446210;
    v29 = "nw_protocol_ethernet_get_output_frames";
    v17 = "%{public}s called with null protocol";
LABEL_33:
    _os_log_impl(&dword_182FBE000, v15, v16, v17, buf, 0xCu);
  }
LABEL_34:
  if (v14)
    free(v14);
  return 0;
}

uint64_t nw_protocol_ethernet_finalize_output_frames(nw_protocol *a1, nw_frame_array_s *a2)
{
  _QWORD *handle;
  nw_frame *tqh_first;
  nw_frame *v4;
  char v5;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  const char *v10;
  char *backtrace_string;
  _BOOL4 v12;
  char *v13;
  _BOOL4 v14;
  _QWORD v15[2];
  uint64_t (*v16)(uint64_t, uint64_t);
  void *v17;
  nw_protocol *v18;
  _QWORD *v19;
  char v20;
  os_log_type_t v21;
  uint8_t buf[4];
  const char *v23;
  __int16 v24;
  char *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v23 = "nw_protocol_ethernet_finalize_output_frames";
    v7 = (char *)_os_log_send_and_compose_impl();
    v21 = OS_LOG_TYPE_ERROR;
    v20 = 0;
    if (!__nwlog_fault(v7, &v21, &v20))
      goto LABEL_35;
    if (v21 == OS_LOG_TYPE_FAULT)
    {
      v8 = __nwlog_obj();
      v9 = v21;
      if (!os_log_type_enabled(v8, v21))
        goto LABEL_35;
      *(_DWORD *)buf = 136446210;
      v23 = "nw_protocol_ethernet_finalize_output_frames";
      v10 = "%{public}s called with null protocol";
      goto LABEL_34;
    }
    if (!v20)
    {
      v8 = __nwlog_obj();
      v9 = v21;
      if (!os_log_type_enabled(v8, v21))
        goto LABEL_35;
      *(_DWORD *)buf = 136446210;
      v23 = "nw_protocol_ethernet_finalize_output_frames";
      v10 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_34;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v8 = __nwlog_obj();
    v9 = v21;
    v12 = os_log_type_enabled(v8, v21);
    if (!backtrace_string)
    {
      if (!v12)
        goto LABEL_35;
      *(_DWORD *)buf = 136446210;
      v23 = "nw_protocol_ethernet_finalize_output_frames";
      v10 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_34;
    }
    if (v12)
    {
      *(_DWORD *)buf = 136446466;
      v23 = "nw_protocol_ethernet_finalize_output_frames";
      v24 = 2082;
      v25 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(backtrace_string);
LABEL_35:
    if (!v7)
      return 0;
LABEL_36:
    free(v7);
    return 0;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v23 = "nw_protocol_ethernet_finalize_output_frames";
    v7 = (char *)_os_log_send_and_compose_impl();
    v21 = OS_LOG_TYPE_ERROR;
    v20 = 0;
    if (!__nwlog_fault(v7, &v21, &v20))
      goto LABEL_35;
    if (v21 == OS_LOG_TYPE_FAULT)
    {
      v8 = __nwlog_obj();
      v9 = v21;
      if (!os_log_type_enabled(v8, v21))
        goto LABEL_35;
      *(_DWORD *)buf = 136446210;
      v23 = "nw_protocol_ethernet_finalize_output_frames";
      v10 = "%{public}s called with null ethernet";
      goto LABEL_34;
    }
    if (!v20)
    {
      v8 = __nwlog_obj();
      v9 = v21;
      if (!os_log_type_enabled(v8, v21))
        goto LABEL_35;
      *(_DWORD *)buf = 136446210;
      v23 = "nw_protocol_ethernet_finalize_output_frames";
      v10 = "%{public}s called with null ethernet, backtrace limit exceeded";
      goto LABEL_34;
    }
    v13 = (char *)__nw_create_backtrace_string();
    v8 = __nwlog_obj();
    v9 = v21;
    v14 = os_log_type_enabled(v8, v21);
    if (v13)
    {
      if (v14)
      {
        *(_DWORD *)buf = 136446466;
        v23 = "nw_protocol_ethernet_finalize_output_frames";
        v24 = 2082;
        v25 = v13;
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null ethernet, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v13);
      if (!v7)
        return 0;
      goto LABEL_36;
    }
    if (v14)
    {
      *(_DWORD *)buf = 136446210;
      v23 = "nw_protocol_ethernet_finalize_output_frames";
      v10 = "%{public}s called with null ethernet, no backtrace";
LABEL_34:
      _os_log_impl(&dword_182FBE000, v8, v9, v10, buf, 0xCu);
      goto LABEL_35;
    }
    goto LABEL_35;
  }
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 0x40000000;
  v16 = ___ZL43nw_protocol_ethernet_finalize_output_framesP11nw_protocolP16nw_frame_array_s_block_invoke;
  v17 = &__block_descriptor_tmp_16_31590;
  v18 = a1;
  v19 = handle;
  tqh_first = a2->tqh_first;
  do
  {
    if (!tqh_first)
      break;
    v4 = (nw_frame *)*((_QWORD *)tqh_first + 4);
    v5 = ((uint64_t (*)(_QWORD *))v16)(v15);
    tqh_first = v4;
  }
  while ((v5 & 1) != 0);
  return (*(uint64_t (**)(void))(*(_QWORD *)(handle[4] + 24) + 96))();
}

void nw_protocol_ethernet_get_message_properties(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  unsigned int v3;
  char *v4;
  NSObject *v5;
  os_log_type_t v6;
  const char *v7;
  char *backtrace_string;
  _BOOL4 v9;
  char *v10;
  _BOOL4 v11;
  char v12;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v15 = "nw_protocol_ethernet_get_message_properties";
    v4 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v12 = 0;
    if (!__nwlog_fault(v4, &type, &v12))
      goto LABEL_34;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v5 = __nwlog_obj();
      v6 = type;
      if (!os_log_type_enabled(v5, type))
        goto LABEL_34;
      *(_DWORD *)buf = 136446210;
      v15 = "nw_protocol_ethernet_get_message_properties";
      v7 = "%{public}s called with null protocol";
    }
    else if (v12)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v5 = __nwlog_obj();
      v6 = type;
      v9 = os_log_type_enabled(v5, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          v15 = "nw_protocol_ethernet_get_message_properties";
          v16 = 2082;
          v17 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v5, v6, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_34:
        if (!v4)
          return;
LABEL_35:
        free(v4);
        return;
      }
      if (!v9)
        goto LABEL_34;
      *(_DWORD *)buf = 136446210;
      v15 = "nw_protocol_ethernet_get_message_properties";
      v7 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      v5 = __nwlog_obj();
      v6 = type;
      if (!os_log_type_enabled(v5, type))
        goto LABEL_34;
      *(_DWORD *)buf = 136446210;
      v15 = "nw_protocol_ethernet_get_message_properties";
      v7 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
LABEL_33:
    _os_log_impl(&dword_182FBE000, v5, v6, v7, buf, 0xCu);
    goto LABEL_34;
  }
  if (*(_QWORD *)(a1 + 40))
  {
    if (a3)
    {
      v3 = a3[1] & 0xFFFFFFF8 | 1;
      *a3 = 4000;
      a3[1] = v3;
    }
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v15 = "nw_protocol_ethernet_get_message_properties";
  v4 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v12 = 0;
  if (!__nwlog_fault(v4, &type, &v12))
    goto LABEL_34;
  if (type == OS_LOG_TYPE_FAULT)
  {
    v5 = __nwlog_obj();
    v6 = type;
    if (!os_log_type_enabled(v5, type))
      goto LABEL_34;
    *(_DWORD *)buf = 136446210;
    v15 = "nw_protocol_ethernet_get_message_properties";
    v7 = "%{public}s called with null ethernet";
    goto LABEL_33;
  }
  if (!v12)
  {
    v5 = __nwlog_obj();
    v6 = type;
    if (!os_log_type_enabled(v5, type))
      goto LABEL_34;
    *(_DWORD *)buf = 136446210;
    v15 = "nw_protocol_ethernet_get_message_properties";
    v7 = "%{public}s called with null ethernet, backtrace limit exceeded";
    goto LABEL_33;
  }
  v10 = (char *)__nw_create_backtrace_string();
  v5 = __nwlog_obj();
  v6 = type;
  v11 = os_log_type_enabled(v5, type);
  if (!v10)
  {
    if (!v11)
      goto LABEL_34;
    *(_DWORD *)buf = 136446210;
    v15 = "nw_protocol_ethernet_get_message_properties";
    v7 = "%{public}s called with null ethernet, no backtrace";
    goto LABEL_33;
  }
  if (v11)
  {
    *(_DWORD *)buf = 136446466;
    v15 = "nw_protocol_ethernet_get_message_properties";
    v16 = 2082;
    v17 = v10;
    _os_log_impl(&dword_182FBE000, v5, v6, "%{public}s called with null ethernet, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v10);
  if (v4)
    goto LABEL_35;
}

uint64_t nw_protocol_ethernet_create(const nw_protocol_identifier *a1, nw_endpoint *a2, nw_parameters *a3)
{
  uint64_t result;
  NSObject *v4;
  void *v5;
  void *memptr;
  int v7;
  const char *v8;
  __int16 v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  memptr = 0;
  if (!malloc_type_posix_memalign(&memptr, 8uLL, 0xA8uLL, 0x68FF3B34uLL))
  {
    result = (uint64_t)memptr;
    if (memptr)
      goto LABEL_3;
  }
  v4 = __nwlog_obj();
  os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  v7 = 136446722;
  v8 = "strict_memalign";
  v9 = 2048;
  v10 = 8;
  v11 = 2048;
  v12 = 168;
  v5 = (void *)_os_log_send_and_compose_impl();
  result = __nwlog_abort((uint64_t)v5);
  if (!(_DWORD)result)
  {
    free(v5);
    result = (uint64_t)memptr;
LABEL_3:
    *(_QWORD *)(result + 160) = 0;
    *(_OWORD *)(result + 128) = 0u;
    *(_OWORD *)(result + 144) = 0u;
    *(_OWORD *)(result + 96) = 0u;
    *(_OWORD *)(result + 112) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)(result + 80) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_QWORD *)(result + 16) = &g_ethernet_protocol_identifier;
    *(_QWORD *)(result + 24) = &g_ethernet_protocol_callbacks;
    *(_QWORD *)(result + 40) = result;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t ___ZL43nw_protocol_ethernet_finalize_output_framesP11nw_protocolP16nw_frame_array_s_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  NSObject *v10;
  uint64_t v11;
  const char *v12;
  int v13;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  const char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  nw_frame_unclaim(a2, a2, 0xEu, 0);
  v13 = 0;
  v4 = nw_frame_unclaimed_bytes(a2, &v13);
  if (v4)
  {
    v5 = *(_QWORD *)(a1 + 40);
    v6 = *(_DWORD *)(v5 + 70);
    *(_WORD *)(v4 + 4) = *(_WORD *)(v5 + 74);
    *(_DWORD *)v4 = v6;
    v7 = *(_QWORD *)(a1 + 40);
    v8 = *(_DWORD *)(v7 + 64);
    *(_WORD *)(v4 + 10) = *(_WORD *)(v7 + 68);
    *(_DWORD *)(v4 + 6) = v8;
    *(_WORD *)(v4 + 12) = bswap32(*(unsigned __int16 *)(*(_QWORD *)(a1 + 40) + 76)) >> 16;
  }
  else
  {
    v10 = __nwlog_obj();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      v11 = *(_QWORD *)(a1 + 40);
      if (v11)
        v12 = (const char *)(v11 + 78);
      else
        v12 = "";
      *(_DWORD *)buf = 136446466;
      v15 = "nw_protocol_ethernet_finalize_output_frames_block_invoke";
      v16 = 2082;
      v17 = v12;
      _os_log_impl(&dword_182FBE000, v10, OS_LOG_TYPE_INFO, "%{public}s %{public}s Frame is no longer valid", buf, 0x16u);
    }
  }
  return 1;
}

uint64_t ___ZL38nw_protocol_ethernet_get_output_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke(uint64_t a1, uint64_t a2)
{
  nw_frame_claim(a2, a2, 14, 0);
  return 1;
}

uint64_t ___ZL37nw_protocol_ethernet_get_input_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  BOOL v9;
  NSObject *v11;
  uint64_t v12;
  const char *v13;
  const char *v14;
  NSObject *v15;
  os_log_type_t v16;
  NSObject *v17;
  uint64_t v18;
  const char *v19;
  uint32_t v20;
  BOOL v21;
  uint64_t v22;
  const char *v23;
  NSObject *v24;
  uint64_t v25;
  const char *v26;
  unsigned int v27;
  int v28;
  NSObject *v29;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  _QWORD *v34;
  unsigned int v35;
  uint8_t buf[4];
  const char *v37;
  __int16 v38;
  const char *v39;
  __int16 v40;
  unsigned int v41;
  __int16 v42;
  int v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v35 = 0;
  v4 = nw_frame_unclaimed_bytes(a2, &v35);
  if (v4)
  {
    if (v35 <= 0xD)
    {
      v17 = __nwlog_obj();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        v18 = a1[5];
        v19 = (const char *)(v18 + 78);
        if (!v18)
          v19 = "";
        *(_DWORD *)buf = 136446722;
        v37 = "nw_protocol_ethernet_get_input_frames_block_invoke";
        v38 = 2082;
        v39 = v19;
        v40 = 1024;
        v41 = v35;
        v14 = "%{public}s %{public}s Received ethernet frame with incorrect length %u";
        v15 = v17;
        v16 = OS_LOG_TYPE_ERROR;
        v20 = 28;
        goto LABEL_46;
      }
    }
    else
    {
      v6 = v4;
      v7 = a1[5];
      v8 = *(_DWORD *)v4 == *(_DWORD *)(v7 + 64) && *(unsigned __int16 *)(v4 + 4) == *(unsigned __int16 *)(v7 + 68);
      if (v8 || (*(_DWORD *)v4 == -1 ? (v21 = *(__int16 *)(v4 + 4) == -1) : (v21 = 0), v21))
      {
        if (!*(_BYTE *)(v7 + 162)
          || (*(_DWORD *)(v4 + 6) == *(_DWORD *)(v7 + 70)
            ? (v9 = *(unsigned __int16 *)(v4 + 10) == *(unsigned __int16 *)(v7 + 74))
            : (v9 = 0),
              v9))
        {
          if (*(unsigned __int16 *)(v7 + 76) == bswap32(*(unsigned __int16 *)(v4 + 12)) >> 16)
          {
            nw_frame_claim(a2, v5, 14, 0);
            return 1;
          }
          v24 = __nwlog_obj();
          if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
          {
            v25 = a1[5];
            v26 = (const char *)(v25 + 78);
            if (!v25)
              v26 = "";
            v27 = bswap32(*(unsigned __int16 *)(v6 + 12));
            v28 = *(unsigned __int16 *)(v25 + 76);
            *(_DWORD *)buf = 136446978;
            v37 = "nw_protocol_ethernet_get_input_frames_block_invoke";
            v38 = 2082;
            v39 = v26;
            v40 = 1024;
            v41 = HIWORD(v27);
            v42 = 1024;
            v43 = v28;
            v14 = "%{public}s %{public}s Mismatched ether type %u != %u";
            v15 = v24;
            v16 = OS_LOG_TYPE_ERROR;
            v20 = 34;
            goto LABEL_46;
          }
        }
        else
        {
          v29 = __nwlog_obj();
          if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
          {
            v31 = a1[5];
            if (v31)
              v32 = (const char *)(v31 + 78);
            else
              v32 = "";
            *(_DWORD *)buf = 136446466;
            v37 = "nw_protocol_ethernet_get_input_frames_block_invoke";
            v38 = 2082;
            v39 = v32;
            v14 = "%{public}s %{public}s Received mismatched remote ether address";
            goto LABEL_44;
          }
        }
      }
      else
      {
        v29 = __nwlog_obj();
        if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
        {
          v22 = a1[5];
          if (v22)
            v23 = (const char *)(v22 + 78);
          else
            v23 = "";
          *(_DWORD *)buf = 136446466;
          v37 = "nw_protocol_ethernet_get_input_frames_block_invoke";
          v38 = 2082;
          v39 = v23;
          v14 = "%{public}s %{public}s Received mismatched local ether address";
LABEL_44:
          v15 = v29;
          v16 = OS_LOG_TYPE_ERROR;
LABEL_45:
          v20 = 22;
LABEL_46:
          _os_log_impl(&dword_182FBE000, v15, v16, v14, buf, v20);
        }
      }
    }
  }
  else
  {
    v11 = __nwlog_obj();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      v12 = a1[5];
      if (v12)
        v13 = (const char *)(v12 + 78);
      else
        v13 = "";
      *(_DWORD *)buf = 136446466;
      v37 = "nw_protocol_ethernet_get_input_frames_block_invoke";
      v38 = 2082;
      v39 = v13;
      v14 = "%{public}s %{public}s Frame is no longer valid";
      v15 = v11;
      v16 = OS_LOG_TYPE_INFO;
      goto LABEL_45;
    }
  }
  --*(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24);
  v33 = *(_QWORD *)(a2 + 32);
  v34 = *(_QWORD **)(a2 + 40);
  if (v33)
  {
    *(_QWORD *)(v33 + 40) = v34;
    v34 = *(_QWORD **)(a2 + 40);
  }
  else
  {
    *(_QWORD *)(a1[7] + 8) = v34;
  }
  *v34 = v33;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  nw_frame_finalize(a2);
  return 1;
}

unint64_t nw_printf_write(unint64_t result, uint64_t a2, _BYTE *a3, unint64_t a4)
{
  int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  char v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v16;
  _QWORD v17[6];
  unint64_t v18;
  char v19;
  unint64_t v20;
  _BYTE *v21;

  if (!a4)
    return result;
  v20 = a4;
  v21 = a3;
  v19 = 0;
  v4 = *(_DWORD *)(a2 + 32);
  if ((v4 & 9) != 0)
  {
LABEL_3:
    v5 = a4;
    v18 = 0;
    if ((v4 & 2) == 0)
      goto LABEL_4;
LABEL_13:
    v8 = *(unsigned __int8 *)(a2 + 24);
    if (*(_BYTE *)(a2 + 24))
    {
      v9 = *(_QWORD *)(a2 + 16);
      if (!v9 && v5 == 1)
      {
        if (*a3 == 48)
        {
          v5 = 0;
          a4 = 0;
          v9 = 0;
          v20 = 0;
        }
        else
        {
          v9 = 0;
          v5 = 1;
        }
      }
    }
    else
    {
      v9 = 0;
    }
    v11 = v9 >= v5;
    v6 = v9 - v5;
    if (!v11)
      v6 = 0;
    v18 = v6;
    if ((v4 & 0x10000) == 0 || v8)
      goto LABEL_37;
    goto LABEL_32;
  }
  if (*a3 == 45)
  {
    v19 = 45;
    v5 = a4 - 1;
    ++a3;
    v20 = a4 - 1;
    v21 = a3;
    v18 = 0;
    if ((v4 & 2) != 0)
      goto LABEL_13;
  }
  else
  {
    if ((v4 & 0x4000) != 0)
    {
      v10 = 43;
    }
    else
    {
      if ((v4 & 0x8000) == 0)
        goto LABEL_3;
      v10 = 32;
    }
    v19 = v10;
    v5 = a4++;
    v18 = 0;
    if ((v4 & 2) != 0)
      goto LABEL_13;
  }
LABEL_4:
  if ((v4 & 4) == 0)
  {
    v6 = 0;
    if ((v4 & 8) != 0)
    {
      v7 = *(_QWORD *)(a2 + 16);
      if (!*(_BYTE *)(a2 + 24))
        v7 = -1;
      if (v7 < a4)
        a4 = v7;
      v20 = a4;
    }
    goto LABEL_37;
  }
  if ((v4 & 0x10000) != 0)
  {
LABEL_32:
    v12 = *(_QWORD *)a2;
    if (!*(_BYTE *)(a2 + 8))
      v12 = 0;
    v11 = v12 >= a4;
    v6 = v12 - a4;
    if (!v11)
      v6 = 0;
    v18 = v6;
    goto LABEL_37;
  }
  v6 = 0;
LABEL_37:
  v13 = v6 + a4;
  v17[0] = &v19;
  v17[1] = result;
  v17[2] = &v18;
  v17[3] = a2;
  v17[4] = &v20;
  v17[5] = &v21;
  v11 = *(_QWORD *)a2 >= v13;
  v14 = *(_QWORD *)a2 - v13;
  if (v14 == 0 || !v11 || *(_BYTE *)(a2 + 8) == 0)
    v16 = 0;
  else
    v16 = v14;
  if ((v4 & 0x2000) != 0)
  {
    for (result = nw_printf_write::$_0::operator()((unint64_t)v17); v16; --v16)
      result = std::ostream::put();
  }
  else
  {
    for (; v16; --v16)
      std::ostream::put();
    return nw_printf_write::$_0::operator()((unint64_t)v17);
  }
  return result;
}

unint64_t nw_printf_write::$_0::operator()(unint64_t result)
{
  unint64_t v1;
  unint64_t v2;
  int v3;
  unint64_t v4;
  unsigned __int8 *v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  _QWORD *v19;
  char *v20;
  size_t v21;
  unint64_t v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  const char *v26;
  unint64_t v27;
  int32x4_t v28;
  int32x4_t v29;
  int32x4_t *v30;
  unint64_t v31;
  int v32;
  unint64_t v33;
  unsigned __int8 *v34;
  unsigned int v35;
  BOOL v36;
  _DWORD v37[10];
  uint64_t v38;

  v1 = result;
  v38 = *MEMORY[0x1E0C80C00];
  if (**(_BYTE **)result)
    result = std::ostream::put();
  if (**(_QWORD **)(v1 + 16))
  {
    v2 = 0;
    do
    {
      result = std::ostream::put();
      ++v2;
    }
    while (v2 < **(_QWORD **)(v1 + 16));
  }
  v3 = *(_DWORD *)(*(_QWORD *)(v1 + 24) + 32);
  if ((v3 & 0x40) != 0 && **(_QWORD **)(v1 + 32))
  {
    v4 = 0;
    do
    {
      result = __toupper(*(char *)(**(_QWORD **)(v1 + 40) + v4));
      *(_BYTE *)(**(_QWORD **)(v1 + 40) + v4++) = result;
    }
    while (v4 < **(_QWORD **)(v1 + 32));
    v3 = *(_DWORD *)(*(_QWORD *)(v1 + 24) + 32);
  }
  if ((v3 & 0x600000) == 0)
    return std::ostream::write();
  v5 = **(unsigned __int8 ***)(v1 + 40);
  v6 = **(_QWORD **)(v1 + 32);
  v7 = &v5[v6];
  if (v6)
    v8 = *v5 == 45;
  else
    v8 = 0;
  v9 = &v5[v8];
  if (v6 == v8)
    goto LABEL_29;
  v10 = ~(unint64_t)v8 + v6;
  v11 = v9;
  while (*v11 == 48)
  {
    ++v11;
    --v10;
    if (v11 == v7)
      goto LABEL_29;
  }
  if (v11 == v7)
  {
LABEL_29:
    if (v7 == v9)
      return result;
    v18 = 0;
    if ((v8 & 1) == 0)
      goto LABEL_32;
    goto LABEL_31;
  }
  if (*v11 - 48 >= 0xA)
  {
    v7 = v11;
    goto LABEL_29;
  }
  v12 = -9;
  v13 = 9;
  while (1)
  {
    v14 = v11[v12 + 9];
    if ((v14 - 58) < 0xFFFFFFF6)
      break;
    v37[v13--] = v14 - 48;
    v15 = v12 + 1;
    if (v12)
    {
      v16 = v10--;
      ++v12;
      if (v16)
        continue;
    }
    result = v13 + 1;
    v17 = (uint64_t)&v11[v15 + 9];
    goto LABEL_34;
  }
  result = v13 + 1;
  v17 = (uint64_t)&v11[v12 + 9];
LABEL_34:
  v22 = result << 32;
  v23 = v37[(int)result];
  if ((int)result <= 7)
  {
    v24 = (int)result;
    v25 = 8 - result;
    if (result <= 8)
    {
      v26 = "\n";
      goto LABEL_41;
    }
    v27 = v25 & 0xFFFFFFFFFFFFFFF8;
    v26 = (char *)&std::__itoa::__pow10_32 + 4 * (v25 & 0xFFFFFFFFFFFFFFF8) + 4;
    v28 = (int32x4_t)v37[(int)result];
    v29 = 0uLL;
    v30 = (int32x4_t *)&v37[result + 5];
    result = (unint64_t)&unk_183BA8DA0;
    v31 = v25 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v28 = vmlaq_s32(v28, *(int32x4_t *)(result - 16), v30[-1]);
      v29 = vmlaq_s32(v29, *(int32x4_t *)result, *v30);
      v30 += 2;
      result += 32;
      v31 -= 8;
    }
    while (v31);
    v23 = vaddvq_s32(vaddq_s32(v29, v28));
    if (v25 != v27)
    {
      v24 += v27;
      do
      {
LABEL_41:
        result = v24 + 1;
        v32 = *(_DWORD *)v26;
        v26 += 4;
        v23 += v32 * v37[v24 + 1];
        v24 = result;
      }
      while (result != 8);
    }
  }
  v33 = v37[9]
      * (unint64_t)*(unsigned int *)((char *)&std::__itoa::__pow10_32 + ((uint64_t)(0x900000000 - v22) >> 30));
  v34 = (unsigned __int8 *)(v17 - ((v33 & 0xFFFFFFFF00000000) != 0));
  if (v34 == v7)
  {
    if (__CFADD__(v23, (_DWORD)v33))
      return result;
    goto LABEL_50;
  }
  v35 = *v34 - 48;
  v36 = __CFADD__(v23, (_DWORD)v33);
  if (v35 >= 0xA && !v36)
  {
LABEL_50:
    v18 = v33 + v23;
    if ((v8 & 1) == 0)
    {
      if ((v18 & 0x80000000) != 0)
        return result;
LABEL_32:
      std::ostream::put();
      std::ostream::write();
      std::ostream::put();
      std::ostream::put();
      v19 = *(_QWORD **)(v1 + 8);
      v20 = strerror(v18);
      v21 = strlen(v20);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v19, (uint64_t)v20, v21);
      return std::ostream::put();
    }
    if (v18 > 0x80000000)
      return result;
LABEL_31:
    v18 = -v18;
    goto LABEL_32;
  }
  return result;
}

_QWORD *nw_printf_write_sockaddr(_QWORD *result, uint64_t a2, sockaddr *a3)
{
  _QWORD *v3;
  unint64_t v5;
  _QWORD *v6;
  const char *v7;
  uint64_t v8;
  unint64_t sa_len;
  _QWORD *v11;
  _QWORD *v12;
  char *sa_data;
  size_t v14;
  _QWORD *v15;
  _QWORD *v16;
  char v17;
  _QWORD *v18;
  _QWORD *v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  const sockaddr *v29;
  socklen_t v30;
  __uint8_t *v31;
  uint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  int v35;
  int v36;
  int v37;
  const char *v38;
  size_t v39;
  int v40;
  size_t v41;
  char *v42;
  uint64_t v43;
  char v44[6];
  char __s[70];
  uint64_t v46;

  v3 = result;
  v46 = *MEMORY[0x1E0C80C00];
  if (!a3)
  {
    v7 = "<NULL>";
    v8 = 6;
    return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(result, (uint64_t)v7, v8);
  }
  if (!*(_BYTE *)(a2 + 24))
  {
    v7 = "<fail decode - size not specified>";
    v8 = 34;
    return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(result, (uint64_t)v7, v8);
  }
  v5 = *(_QWORD *)(a2 + 16);
  if (v5 <= 1)
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(result, (uint64_t)"<fail decode - size> ", 21);
    if (*(_BYTE *)(a2 + 24))
    {
      v6 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v6, (uint64_t)" < ", 3);
      return (_QWORD *)std::ostream::operator<<();
    }
LABEL_46:
    v43 = std::__throw_bad_optional_access[abi:nn180100]();
    return (_QWORD *)nw_printf_write_data(v43);
  }
  sa_len = a3->sa_len;
  if (v5 < sa_len)
  {
    v11 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(result, (uint64_t)"<fail decode - size> ", 21);
    __s[0] = a3->sa_len;
    v12 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v11, (uint64_t)__s, 1);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v12, (uint64_t)" > ", 3);
    if (*(_BYTE *)(a2 + 24))
      return (_QWORD *)std::ostream::operator<<();
    goto LABEL_46;
  }
  switch(a3->sa_family)
  {
    case 1u:
      sa_data = a3->sa_data;
      v14 = strnlen(a3->sa_data, sa_len - 2);
      v15 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v3, (uint64_t)"AF_UNIX:\"", 9);
      v16 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v15, (uint64_t)sa_data, v14);
      v17 = 34;
      goto LABEL_19;
    case 2u:
      if (sa_len <= 0xF)
        goto LABEL_15;
      v29 = a3;
      v30 = 16;
      goto LABEL_31;
    case 0x12u:
      v20 = a3->sa_data[3];
      v21 = a3->sa_data[4];
      if (v20 + v21 + a3->sa_data[5] + 8 <= sa_len)
      {
        if (v21 | v20)
        {
          if (a3->sa_data[4])
          {
            v31 = &a3->sa_len + v20;
            *(_DWORD *)((char *)result + *(_QWORD *)(*result - 24) + 8) = *(_DWORD *)((_BYTE *)result
                                                                                      + *(_QWORD *)(*result - 24)
                                                                                      + 8) & 0xFFFFFFB5 | 8;
            __s[0] = a3->sa_data[v20 + 6];
            result = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(result, (uint64_t)__s, 1);
            if (a3->sa_data[4] >= 2u)
            {
              v32 = 9;
              do
              {
                v33 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v3, (uint64_t)":", 1);
                __s[0] = v31[v32];
                result = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v33, (uint64_t)__s, 1);
                v34 = v32 - 7;
                ++v32;
              }
              while (v34 < a3->sa_data[4]);
            }
            v35 = a3->sa_data[3];
            *(_DWORD *)((char *)v3 + *(_QWORD *)(*v3 - 24) + 8) = *(_DWORD *)((_BYTE *)v3 + *(_QWORD *)(*v3 - 24)
                                                                                            + 8) & 0xFFFFFFB5 | 2;
            if (v35)
            {
              std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v3, (uint64_t)"%", 1);
              v20 = a3->sa_data[3];
LABEL_37:
              v42 = &a3->sa_data[6];
              return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v3, (uint64_t)v42, v20);
            }
            if (!*(_WORD *)a3->sa_data)
              return result;
            std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v3, (uint64_t)"%", 1);
            return (_QWORD *)std::ostream::operator<<();
          }
LABEL_36:
          if ((_DWORD)v20)
            goto LABEL_37;
          if (!*(_WORD *)a3->sa_data)
            return result;
          return (_QWORD *)std::ostream::operator<<();
        }
        if (*(_WORD *)a3->sa_data)
          goto LABEL_36;
        v7 = "<fail decode - no information>";
        v8 = 30;
        return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(result, (uint64_t)v7, v8);
      }
      v22 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(result, (uint64_t)"<fail decode - size> ", 21);
      __s[0] = a3->sa_len;
      v23 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v22, (uint64_t)__s, 1);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v23, (uint64_t)" < ", 3);
      v24 = (_QWORD *)std::ostream::operator<<();
      v25 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v24, (uint64_t)" + ", 3);
      __s[0] = a3->sa_data[3];
      v26 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v25, (uint64_t)__s, 1);
      v27 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v26, (uint64_t)" + ", 3);
      __s[0] = a3->sa_data[4];
      v28 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v27, (uint64_t)__s, 1);
      v16 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v28, (uint64_t)" + ", 3);
      v17 = a3->sa_data[5];
LABEL_19:
      __s[0] = v17;
      return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v16, (uint64_t)__s, 1);
    case 0x1Eu:
      if (sa_len > 0x1B)
      {
        v29 = a3;
        v30 = 70;
LABEL_31:
        v36 = getnameinfo(v29, sa_len, __s, v30, v44, 6u, 10);
        if (v36)
        {
          v37 = v36;
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v3, (uint64_t)"<failed conversion> ", 20);
          v38 = gai_strerror(v37);
          v39 = strlen(v38);
          return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v3, (uint64_t)v38, v39);
        }
        else
        {
          v40 = *(unsigned __int16 *)a3->sa_data;
          v41 = strlen(__s);
          result = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v3, (uint64_t)__s, v41);
          if (v40)
          {
            std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v3, (uint64_t)":", 1);
            v20 = strlen(v44);
            v42 = v44;
            return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v3, (uint64_t)v42, v20);
          }
        }
      }
      else
      {
LABEL_15:
        v18 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(result, (uint64_t)"<fail decode - size> ", 21);
        __s[0] = a3->sa_len;
        v19 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v18, (uint64_t)__s, 1);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v19, (uint64_t)" < ", 3);
        return (_QWORD *)std::ostream::operator<<();
      }
      return result;
    default:
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(result, (uint64_t)"<fail decode - address family> ", 31);
      return (_QWORD *)std::ostream::operator<<();
  }
}

_QWORD *nw_printf_write_data(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  _QWORD *result;
  unint64_t v7;
  __int128 v8;
  const std::locale::facet *v9;
  uint64_t v10;
  char *v11;
  unsigned __int8 *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  char v17;
  _QWORD *v18;
  size_t v19;
  _QWORD *v20;
  size_t v21;
  std::locale v23;
  char v24[8];
  uint64_t v25;
  char v26;
  char __s[16];
  _BYTE v28[31];
  char v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if (!a3)
    return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a1, (uint64_t)"<NULL>", 6);
  v4 = *(_QWORD *)(a2 + 16);
  if (!*(_BYTE *)(a2 + 24) || v4 == 0)
    return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a1, (uint64_t)"<NULL>", 6);
  v7 = 0;
  *(_QWORD *)v24 = 0;
  v25 = 0;
  v26 = 0;
  *(_QWORD *)&v8 = 0x2020202020202020;
  *((_QWORD *)&v8 + 1) = 0x2020202020202020;
  *(_OWORD *)__s = v8;
  *(_OWORD *)v28 = v8;
  *(_OWORD *)&v28[15] = v8;
  v29 = 0;
  do
  {
    if (v7)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v9 = std::locale::use_facet(&v23, MEMORY[0x1E0DE4A90]);
      ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
      std::locale::~locale(&v23);
      std::ostream::put();
      std::ostream::flush();
    }
    if (v4 - v7 >= 0x10)
      v10 = 16;
    else
      v10 = v4 - v7;
    if (v10)
    {
      v11 = &__s[1];
      v12 = (unsigned __int8 *)(a3 + v7);
      v13 = v24;
      v14 = v10;
      do
      {
        v16 = *v12++;
        v15 = v16;
        if (v16 - 32 >= 0x5F)
          v17 = 46;
        else
          v17 = v15;
        *v13 = v17;
        *(v11 - 1) = nw_printf_write_data::hex_chars[v15 >> 4];
        *v11 = nw_printf_write_data::hex_chars[v15 & 0xF];
        if (v14 == 1)
          v24[v10] = 0;
        v11 += 3;
        ++v13;
        --v14;
      }
      while (v14);
    }
    if (v4 - v7 < 0x10)
      memset(&__s[3 * v10], 32, 3 * (16 - v10) - 1);
    *(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 24) = 4;
    v18 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v18, (uint64_t)"   ", 3);
    v19 = strlen(__s);
    v20 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v18, (uint64_t)__s, v19);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v20, (uint64_t)"   ", 3);
    v21 = strlen(v24);
    result = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v18, (uint64_t)v24, v21);
    v7 += v10;
  }
  while (v7 < v4);
  return result;
}

void sub_18366A208(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::locale a11)
{
  std::locale::~locale(&a11);
  _Unwind_Resume(a1);
}

void nw_printf_write_foundation(_QWORD *a1, uint64_t a2, void *a3)
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  NSObject *log;
  NSObject *loga;
  unint64_t v14;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  unint64_t v20;
  __int16 v21;
  unint64_t v22;
  _OWORD v23[32];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = v4;
  if (v4)
  {
    objc_msgSend(v4, "description");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = v6;
    if (v6)
    {
      v8 = objc_msgSend(v6, "lengthOfBytesUsingEncoding:", 4);
      memset(v23, 0, sizeof(v23));
      if (v8)
      {
        v9 = 0;
        do
        {
          if (v8 >= 0x200)
            v10 = 512;
          else
            v10 = v8;
          v14 = 0;
          objc_msgSend(v7, "getBytes:maxLength:usedLength:encoding:options:range:remainingRange:", v23, 512, &v14, 4, 0, v9, v10, 0);
          std::ostream::write();
          v11 = v8 >= v14;
          v8 -= v14;
          if (!v11)
          {
            if (gLogDatapath)
            {
              __nwlog_obj();
              loga = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(loga, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 136446978;
                v16 = "nw_printf_write_foundation";
                v17 = 2082;
                v18 = "bytes_to_write";
                v19 = 2048;
                v20 = v14;
                v21 = 2048;
                v22 = v8;
                _os_log_impl(&dword_182FBE000, loga, OS_LOG_TYPE_DEBUG, "%{public}s Underflow: %{public}s, decrement %llu, result %llu", buf, 0x2Au);
              }

              v8 = 0;
              v11 = __CFADD__(v9, v14);
              v9 += v14;
              if (!v11)
                continue;
LABEL_20:
              if (gLogDatapath)
              {
                __nwlog_obj();
                log = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(log, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)buf = 136446978;
                  v16 = "nw_printf_write_foundation";
                  v17 = 2082;
                  v18 = "range.location";
                  v19 = 2048;
                  v20 = v14;
                  v21 = 2048;
                  v22 = v9;
                  _os_log_impl(&dword_182FBE000, log, OS_LOG_TYPE_DEBUG, "%{public}s Overflow: %{public}s, increment %llu, result %llu", buf, 0x2Au);
                }

              }
              v9 = 0xFFFFFFFFLL;
              continue;
            }
            v8 = 0;
          }
          v11 = __CFADD__(v9, v14);
          v9 += v14;
          if (v11)
            goto LABEL_20;
        }
        while (v8);
      }
    }
    else
    {
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a1, (uint64_t)"(null)", 6);
    }

  }
  else
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a1, (uint64_t)"(null)", 6);
  }

}

void sub_18366A4F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t nw_printf_write_uuid()
{
  uint64_t i;
  uint64_t result;

  for (i = 0; i != 16; ++i)
  {
    std::ostream::put();
    result = std::ostream::put();
    if (i <= 9 && ((1 << i) & 0x2A8) != 0)
      result = std::ostream::put();
  }
  return result;
}

void nw_printf_internal_error(uint64_t a1, uint64_t a2)
{
  id v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  const char *v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  NSObject *v12;
  os_log_type_t v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  char *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v4 = (id)gLogObj;
  *(_DWORD *)buf = 136446722;
  v17 = "nw_printf_internal_error";
  v18 = 2080;
  v19 = a1;
  v20 = 2080;
  v21 = a2;
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (!__nwlog_fault(v5, &type, &v14))
    goto LABEL_10;
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v6 = (id)gLogObj;
    v7 = type;
    if (!os_log_type_enabled(v6, type))
      goto LABEL_17;
    *(_DWORD *)buf = 136446722;
    v17 = "nw_printf_internal_error";
    v18 = 2080;
    v19 = a1;
    v20 = 2080;
    v21 = a2;
    v8 = "%{public}s %s %s";
LABEL_15:
    v12 = v6;
    v13 = v7;
LABEL_16:
    _os_log_impl(&dword_182FBE000, v12, v13, v8, buf, 0x20u);
    goto LABEL_17;
  }
  if (!v14)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v6 = (id)gLogObj;
    v7 = type;
    if (!os_log_type_enabled(v6, type))
      goto LABEL_17;
    *(_DWORD *)buf = 136446722;
    v17 = "nw_printf_internal_error";
    v18 = 2080;
    v19 = a1;
    v20 = 2080;
    v21 = a2;
    v8 = "%{public}s %s %s, backtrace limit exceeded";
    goto LABEL_15;
  }
  backtrace_string = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v6 = (id)gLogObj;
  v10 = type;
  v11 = os_log_type_enabled(v6, type);
  if (backtrace_string)
  {
    if (v11)
    {
      *(_DWORD *)buf = 136446978;
      v17 = "nw_printf_internal_error";
      v18 = 2080;
      v19 = a1;
      v20 = 2080;
      v21 = a2;
      v22 = 2082;
      v23 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v6, v10, "%{public}s %s %s, dumping backtrace:%{public}s", buf, 0x2Au);
    }

    free(backtrace_string);
LABEL_10:
    if (!v5)
      return;
    goto LABEL_11;
  }
  if (v11)
  {
    *(_DWORD *)buf = 136446722;
    v17 = "nw_printf_internal_error";
    v18 = 2080;
    v19 = a1;
    v20 = 2080;
    v21 = a2;
    v8 = "%{public}s %s %s, no backtrace";
    v12 = v6;
    v13 = v10;
    goto LABEL_16;
  }
LABEL_17:

  if (v5)
LABEL_11:
    free(v5);
}

const char *tcp_connection_event_to_string(int a1)
{
  int v1;
  const char *result;

  switch(a1)
  {
    case 1073741825:
      result = "TCP_CONNECTION_EVENT_KEEPALIVE";
      break;
    case 1073741826:
      result = "TCP_CONNECTION_EVENT_CONDITIONS_CHANGED";
      break;
    case 1073741827:
      result = "TCP_CONNECTION_EVENT_DNSSEC";
      break;
    case 1073741828:
      result = "TCP_CONNECTION_EVENT_ADAPTIVE_READ_TIMEOUT";
      break;
    case 1073741829:
      result = "TCP_CONNECTION_EVENT_ADAPTIVE_WRITE_TIMEOUT";
      break;
    case 1073741830:
      result = "TCP_CONNECTION_EVENT_LOW_THROUGHPUT";
      break;
    case 1073741831:
      result = "TCP_CONNECTION_EVENT_BETTER_ROUTE_CHANGED";
      break;
    case 1073741832:
      result = "TCP_CONNECTION_EVENT_CONNECTION_ATTEMPT_TIMEOUT";
      break;
    case 1073741833:
      result = "TCP_CONNECTION_EVENT_CONNECTION_QUALITY_CHANGED";
      break;
    default:
      v1 = a1 - 1;
      result = "TCP_CONNECTION_EVENT_CONNECTED";
      switch(v1)
      {
        case 0:
          return result;
        case 1:
          result = "TCP_CONNECTION_EVENT_READ_CLOSE";
          break;
        case 2:
          result = "TCP_CONNECTION_EVENT_DISCONNECTED";
          break;
        case 3:
          result = "TCP_CONNECTION_EVENT_WRITE_CLOSE";
          break;
        case 4:
          result = "TCP_CONNECTION_EVENT_BETTER_ROUTE";
          break;
        case 5:
          result = "TCP_CONNECTION_EVENT_VIABILITY_CHANGED";
          break;
        case 6:
          result = "TCP_CONNECTION_EVENT_WAITING";
          break;
        case 7:
          result = "TCP_CONNECTION_EVENT_TLS_HANDSHAKE_COMPLETE";
          break;
        default:
          result = "UNKNOWN";
          break;
      }
      break;
  }
  return result;
}

id tcp_connection_copy_endpoint(void *a1)
{
  os_unfair_lock_s *v1;
  os_unfair_lock_s *v2;
  id v3;
  id v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  const char *v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  NSObject *v13;
  os_log_type_t v14;
  char v15;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v4 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v18 = "tcp_connection_copy_endpoint";
    v5 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v15 = 0;
    if (__nwlog_fault(v5, &type, &v15))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v6 = (id)gLogObj;
        v7 = type;
        if (!os_log_type_enabled(v6, type))
          goto LABEL_20;
        *(_DWORD *)buf = 136446210;
        v18 = "tcp_connection_copy_endpoint";
        v8 = "%{public}s called with null connection";
LABEL_18:
        v13 = v6;
        v14 = v7;
        goto LABEL_19;
      }
      if (!v15)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v6 = (id)gLogObj;
        v7 = type;
        if (!os_log_type_enabled(v6, type))
          goto LABEL_20;
        *(_DWORD *)buf = 136446210;
        v18 = "tcp_connection_copy_endpoint";
        v8 = "%{public}s called with null connection, backtrace limit exceeded";
        goto LABEL_18;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v6 = (id)gLogObj;
      v10 = type;
      v11 = os_log_type_enabled(v6, type);
      if (!backtrace_string)
      {
        if (!v11)
        {
LABEL_20:

          if (!v5)
            goto LABEL_14;
          goto LABEL_13;
        }
        *(_DWORD *)buf = 136446210;
        v18 = "tcp_connection_copy_endpoint";
        v8 = "%{public}s called with null connection, no backtrace";
        v13 = v6;
        v14 = v10;
LABEL_19:
        _os_log_impl(&dword_182FBE000, v13, v14, v8, buf, 0xCu);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446466;
        v18 = "tcp_connection_copy_endpoint";
        v19 = 2082;
        v20 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v6, v10, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
    if (!v5)
    {
LABEL_14:
      v3 = 0;
      goto LABEL_15;
    }
LABEL_13:
    free(v5);
    goto LABEL_14;
  }
  os_unfair_lock_lock(v1 + 30);
  v3 = *(id *)&v2[10]._os_unfair_lock_opaque;
  os_unfair_lock_unlock(v2 + 30);
LABEL_15:

  return v3;
}

uint64_t tcp_connection_are_proxies_supported()
{
  return 1;
}

char *tcp_connection_create_with_sockaddr(const sockaddr *a1, void *a2)
{
  id v3;
  nw_endpoint_t address;
  nw_endpoint_t v5;
  char *v6;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  const char *v12;
  void *v13;
  char *backtrace_string;
  _BOOL4 v15;
  const char *v16;
  _BOOL4 v17;
  char v18;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v21;
  __int16 v22;
  char *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  nw_allow_use_of_dispatch_internal();
  if (v3)
  {
    if (a1)
    {
      address = nw_endpoint_create_address(a1);
      v5 = address;
      if (address)
        v6 = tcp_connection_create_with_endpoint_and_parameters(address, 0, v3);
      else
        v6 = 0;

      goto LABEL_7;
    }
    __nwlog_obj();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v21 = "tcp_connection_create_with_sockaddr";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v18 = 0;
    if (__nwlog_fault(v9, &type, &v18))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          v21 = "tcp_connection_create_with_sockaddr";
          v12 = "%{public}s called with null sa";
          goto LABEL_34;
        }
        goto LABEL_35;
      }
      if (!v18)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          v21 = "tcp_connection_create_with_sockaddr";
          v12 = "%{public}s called with null sa, backtrace limit exceeded";
          goto LABEL_34;
        }
        goto LABEL_35;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      v17 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          v21 = "tcp_connection_create_with_sockaddr";
          v12 = "%{public}s called with null sa, no backtrace";
          goto LABEL_34;
        }
        goto LABEL_35;
      }
      if (!v17)
        goto LABEL_25;
      *(_DWORD *)buf = 136446466;
      v21 = "tcp_connection_create_with_sockaddr";
      v22 = 2082;
      v23 = backtrace_string;
      v16 = "%{public}s called with null sa, dumping backtrace:%{public}s";
LABEL_24:
      _os_log_impl(&dword_182FBE000, v10, v11, v16, buf, 0x16u);
LABEL_25:

      free(backtrace_string);
    }
  }
  else
  {
    __nwlog_obj();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v21 = "tcp_connection_create_with_sockaddr";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v18 = 0;
    if (__nwlog_fault(v9, &type, &v18))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          v21 = "tcp_connection_create_with_sockaddr";
          v12 = "%{public}s called with null queue";
LABEL_34:
          _os_log_impl(&dword_182FBE000, v10, v11, v12, buf, 0xCu);
        }
LABEL_35:

        goto LABEL_36;
      }
      if (!v18)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          v21 = "tcp_connection_create_with_sockaddr";
          v12 = "%{public}s called with null queue, backtrace limit exceeded";
          goto LABEL_34;
        }
        goto LABEL_35;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      v15 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446210;
          v21 = "tcp_connection_create_with_sockaddr";
          v12 = "%{public}s called with null queue, no backtrace";
          goto LABEL_34;
        }
        goto LABEL_35;
      }
      if (!v15)
        goto LABEL_25;
      *(_DWORD *)buf = 136446466;
      v21 = "tcp_connection_create_with_sockaddr";
      v22 = 2082;
      v23 = backtrace_string;
      v16 = "%{public}s called with null queue, dumping backtrace:%{public}s";
      goto LABEL_24;
    }
  }
LABEL_36:
  if (v9)
    free(v9);
  v6 = 0;
LABEL_7:

  return v6;
}

char *tcp_connection_create_with_connected_fd(int a1, void *a2)
{
  id v4;
  char *v5;
  char *v6;
  char *v7;
  id v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  const char *v12;
  const char *v13;
  os_log_type_t v14;
  _BOOL4 v15;
  char *v16;
  NSObject *v18;
  os_log_type_t v19;
  void *v20;
  NSObject *v21;
  os_log_type_t v22;
  const char *v23;
  const char *backtrace_string;
  _BOOL4 v25;
  char v26;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v29;
  __int16 v30;
  const char *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v4 = a2;
  nw_allow_use_of_dispatch_internal();
  if (!v4)
  {
    __nwlog_obj();
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v29 = "tcp_connection_create_with_connected_fd";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v26 = 0;
    if (!__nwlog_fault(v9, &type, &v26))
      goto LABEL_16;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v21 = objc_claimAutoreleasedReturnValue();
      v22 = type;
      if (os_log_type_enabled(v21, type))
      {
        *(_DWORD *)buf = 136446210;
        v29 = "tcp_connection_create_with_connected_fd";
        v23 = "%{public}s called with null queue";
LABEL_41:
        _os_log_impl(&dword_182FBE000, v21, v22, v23, buf, 0xCu);
      }
    }
    else
    {
      if (v26)
      {
        backtrace_string = __nw_create_backtrace_string();
        __nwlog_obj();
        v21 = objc_claimAutoreleasedReturnValue();
        v22 = type;
        v25 = os_log_type_enabled(v21, type);
        if (backtrace_string)
        {
          if (v25)
          {
            *(_DWORD *)buf = 136446466;
            v29 = "tcp_connection_create_with_connected_fd";
            v30 = 2082;
            v31 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v21, v22, "%{public}s called with null queue, dumping backtrace:%{public}s", buf, 0x16u);
          }

          v16 = (char *)backtrace_string;
LABEL_15:
          free(v16);
          goto LABEL_16;
        }
        if (!v25)
          goto LABEL_42;
        *(_DWORD *)buf = 136446210;
        v29 = "tcp_connection_create_with_connected_fd";
        v23 = "%{public}s called with null queue, no backtrace";
        goto LABEL_41;
      }
      __nwlog_obj();
      v21 = objc_claimAutoreleasedReturnValue();
      v22 = type;
      if (os_log_type_enabled(v21, type))
      {
        *(_DWORD *)buf = 136446210;
        v29 = "tcp_connection_create_with_connected_fd";
        v23 = "%{public}s called with null queue, backtrace limit exceeded";
        goto LABEL_41;
      }
    }
LABEL_42:

LABEL_16:
    if (!v9)
    {
LABEL_18:
      v6 = 0;
      goto LABEL_19;
    }
LABEL_17:
    free(v9);
    goto LABEL_18;
  }
  if (a1 < 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v8 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v29 = "tcp_connection_create_with_connected_fd";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v26 = 0;
    if (!__nwlog_fault(v9, &type, &v26))
      goto LABEL_16;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v10 = (id)gLogObj;
      v11 = type;
      if (!os_log_type_enabled(v10, type))
        goto LABEL_24;
      *(_DWORD *)buf = 136446210;
      v29 = "tcp_connection_create_with_connected_fd";
      v12 = "%{public}s called with null fd";
LABEL_22:
      v18 = v10;
      v19 = v11;
      goto LABEL_23;
    }
    if (!v26)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v10 = (id)gLogObj;
      v11 = type;
      if (!os_log_type_enabled(v10, type))
        goto LABEL_24;
      *(_DWORD *)buf = 136446210;
      v29 = "tcp_connection_create_with_connected_fd";
      v12 = "%{public}s called with null fd, backtrace limit exceeded";
      goto LABEL_22;
    }
    v13 = __nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v10 = (id)gLogObj;
    v14 = type;
    v15 = os_log_type_enabled(v10, type);
    if (!v13)
    {
      if (!v15)
      {
LABEL_24:

        if (!v9)
          goto LABEL_18;
        goto LABEL_17;
      }
      *(_DWORD *)buf = 136446210;
      v29 = "tcp_connection_create_with_connected_fd";
      v12 = "%{public}s called with null fd, no backtrace";
      v18 = v10;
      v19 = v14;
LABEL_23:
      _os_log_impl(&dword_182FBE000, v18, v19, v12, buf, 0xCu);
      goto LABEL_24;
    }
    if (v15)
    {
      *(_DWORD *)buf = 136446466;
      v29 = "tcp_connection_create_with_connected_fd";
      v30 = 2082;
      v31 = v13;
      _os_log_impl(&dword_182FBE000, v10, v14, "%{public}s called with null fd, dumping backtrace:%{public}s", buf, 0x16u);
    }

    v16 = (char *)v13;
    goto LABEL_15;
  }
  v5 = tcp_connection_create_with_connected_fd_inner(a1, 0);
  v6 = v5;
  if (v5)
  {
    objc_storeStrong((id *)v5 + 7, a2);
    nw_connection_set_queue(*((nw_connection_t *)v6 + 2), *((dispatch_queue_t *)v6 + 7));
    v6[157] = 6;
    v7 = v6;
  }

LABEL_19:
  return v6;
}

char *tcp_connection_create_with_connected_fd_inner(int a1, char a2)
{
  char *v4;
  char *v5;
  nw_parameters_t v6;
  _QWORD *v7;
  void *v8;
  void *v9;
  unsigned int *v10;
  uint64_t v11;
  nw_endpoint_t v12;
  void *v13;
  char *v14;
  id v15;
  char *v16;
  NSObject *v17;
  os_log_type_t v18;
  char *backtrace_string;
  os_log_type_t v21;
  _BOOL4 v22;
  os_log_type_t v23;
  char v24;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v27;
  __int16 v28;
  char *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v4 = -[NWConcrete_tcp_connection initWithParameters:]((char *)[NWConcrete_tcp_connection alloc], 0);
  v5 = v4;
  if (!v4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v15 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v27 = "tcp_connection_create_with_connected_fd_inner";
    v16 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v24 = 0;
    if (__nwlog_fault(v16, &type, &v24))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v17 = (id)gLogObj;
        v18 = type;
        if (os_log_type_enabled(v17, type))
        {
          *(_DWORD *)buf = 136446210;
          v27 = "tcp_connection_create_with_connected_fd_inner";
          _os_log_impl(&dword_182FBE000, v17, v18, "%{public}s [tcp_connection initWithParameters:] failed", buf, 0xCu);
        }
      }
      else if (v24)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v17 = (id)gLogObj;
        v21 = type;
        v22 = os_log_type_enabled(v17, type);
        if (backtrace_string)
        {
          if (v22)
          {
            *(_DWORD *)buf = 136446466;
            v27 = "tcp_connection_create_with_connected_fd_inner";
            v28 = 2082;
            v29 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v17, v21, "%{public}s [tcp_connection initWithParameters:] failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          if (!v16)
            goto LABEL_11;
          goto LABEL_10;
        }
        if (v22)
        {
          *(_DWORD *)buf = 136446210;
          v27 = "tcp_connection_create_with_connected_fd_inner";
          _os_log_impl(&dword_182FBE000, v17, v21, "%{public}s [tcp_connection initWithParameters:] failed, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v17 = (id)gLogObj;
        v23 = type;
        if (os_log_type_enabled(v17, type))
        {
          *(_DWORD *)buf = 136446210;
          v27 = "tcp_connection_create_with_connected_fd_inner";
          _os_log_impl(&dword_182FBE000, v17, v23, "%{public}s [tcp_connection initWithParameters:] failed, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
    if (!v16)
    {
LABEL_11:
      v14 = 0;
      goto LABEL_14;
    }
LABEL_10:
    free(v16);
    goto LABEL_11;
  }
  v4[157] = 4;
  v6 = nw_parameters_create();
  nw_parameters_set_data_mode(v6, 2u);
  nw_parameters_set_server_mode(v6, a2);
  nw_parameters_set_allow_socket_access(v6, 1);
  v7 = nw_connection_create_with_connected_socket_and_parameters(a1, v6);
  v8 = (void *)*((_QWORD *)v5 + 2);
  *((_QWORD *)v5 + 2) = v7;

  v9 = (void *)*((_QWORD *)v5 + 2);
  if (v9)
  {
    v10 = v9;
    v11 = v10[112];

    *((_QWORD *)v5 + 12) = v11;
    v12 = nw_connection_copy_endpoint(*((nw_connection_t *)v5 + 2));
    v13 = (void *)*((_QWORD *)v5 + 5);
    *((_QWORD *)v5 + 5) = v12;

    v14 = v5;
  }
  else
  {
    v14 = 0;
  }

LABEL_14:
  return v14;
}

char *tcp_connection_create_inbound(int a1)
{
  return tcp_connection_create_with_connected_fd_inner(a1, 1);
}

void tcp_connection_set_cellular_service(void *a1, char *a2)
{
  void **v3;
  void **v4;
  id v5;
  id v6;
  xpc_object_t v7;
  id v8;
  void *v9;
  NSObject *v10;
  os_log_type_t v11;
  const char *v12;
  BOOL v13;
  xpc_object_t v14;
  xpc_object_t v15;
  id v16;
  id v17;
  id v18;
  char *backtrace_string;
  os_log_type_t v20;
  _BOOL4 v21;
  const char *v22;
  void *v23;
  NSObject *v24;
  os_log_type_t v25;
  _QWORD applier[4];
  id v27;
  id v28;
  id v29;
  char v30;
  os_log_type_t v31;
  uint8_t buf[4];
  const char *v33;
  __int16 v34;
  char *v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (!v3)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v8 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v33 = "tcp_connection_set_cellular_service";
    v9 = (void *)_os_log_send_and_compose_impl();

    v31 = OS_LOG_TYPE_ERROR;
    v30 = 0;
    if (__nwlog_fault((const char *)v9, &v31, &v30))
    {
      if (v31 == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v10 = (id)gLogObj;
        v11 = v31;
        if (!os_log_type_enabled(v10, v31))
          goto LABEL_36;
        *(_DWORD *)buf = 136446210;
        v33 = "tcp_connection_set_cellular_service";
        v12 = "%{public}s called with null connection";
LABEL_34:
        v24 = v10;
        v25 = v11;
        goto LABEL_35;
      }
      if (!v30)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v10 = (id)gLogObj;
        v11 = v31;
        if (!os_log_type_enabled(v10, v31))
          goto LABEL_36;
        *(_DWORD *)buf = 136446210;
        v33 = "tcp_connection_set_cellular_service";
        v12 = "%{public}s called with null connection, backtrace limit exceeded";
        goto LABEL_34;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v10 = (id)gLogObj;
      v20 = v31;
      v21 = os_log_type_enabled(v10, v31);
      if (!backtrace_string)
      {
        if (!v21)
        {
LABEL_36:

          if (!v9)
            goto LABEL_38;
LABEL_37:
          free(v9);
          goto LABEL_38;
        }
        *(_DWORD *)buf = 136446210;
        v33 = "tcp_connection_set_cellular_service";
        v12 = "%{public}s called with null connection, no backtrace";
        v24 = v10;
        v25 = v20;
LABEL_35:
        _os_log_impl(&dword_182FBE000, v24, v25, v12, buf, 0xCu);
        goto LABEL_36;
      }
      if (v21)
      {
        *(_DWORD *)buf = 136446466;
        v33 = "tcp_connection_set_cellular_service";
        v34 = 2082;
        v35 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v10, v20, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
    if (!v9)
      goto LABEL_38;
    goto LABEL_37;
  }
  v5 = nw_parameters_copy_required_netagent_domains(v3[6]);
  v6 = nw_parameters_copy_required_netagent_types(v4[6]);
  v7 = v6;
  if (!a2)
  {
    if (v5)
      v13 = v6 == 0;
    else
      v13 = 1;
    if (!v13 && xpc_array_get_count(v5))
    {
      v14 = xpc_array_create(0, 0);
      v15 = xpc_array_create(0, 0);
      applier[0] = MEMORY[0x1E0C809B0];
      applier[1] = 3221225472;
      applier[2] = __tcp_connection_set_cellular_service_block_invoke;
      applier[3] = &unk_1E14A92E0;
      v16 = v14;
      v27 = v16;
      v28 = v7;
      v17 = v15;
      v29 = v17;
      xpc_array_apply(v5, applier);
      v18 = v16;

      v7 = v17;
      v5 = v18;
    }
    goto LABEL_31;
  }
  if (v5)
  {
    if (v6)
      goto LABEL_5;
  }
  else
  {
    v5 = xpc_array_create(0, 0);
    if (v7)
    {
LABEL_5:
      if (!v5)
        goto LABEL_31;
LABEL_26:
      if (v7)
      {
        xpc_array_set_string(v5, 0xFFFFFFFFFFFFFFFFLL, "Cellular");
        if (strstr(a2, "kCTDataConnectionServiceType"))
        {
          v22 = a2 + 28;
          v23 = v7;
        }
        else
        {
          v23 = v7;
          v22 = a2;
        }
        xpc_array_set_string(v23, 0xFFFFFFFFFFFFFFFFLL, v22);
      }
      goto LABEL_31;
    }
  }
  v7 = xpc_array_create(0, 0);
  if (v5)
    goto LABEL_26;
LABEL_31:
  nw_parameters_set_required_netagent_classes(v4[6], v5, v7);

LABEL_38:
}

uint64_t __tcp_connection_set_cellular_service_block_invoke(xpc_object_t *a1, size_t a2, void *a3)
{
  id v5;
  const char *string_ptr;
  void *v7;

  v5 = a3;
  if (object_getClass(v5) == (Class)MEMORY[0x1E0C81390])
  {
    string_ptr = xpc_string_get_string_ptr(v5);
    if (strncmp(string_ptr, "Cellular", 0x20uLL))
    {
      xpc_array_append_value(a1[4], v5);
      xpc_array_get_value(a1[5], a2);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      if (v7)
        xpc_array_append_value(a1[6], v7);

    }
  }

  return 1;
}

uint64_t __tcp_connection_set_no_cellular_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;

  v4 = a3;
  if (object_getClass(v4) == (Class)MEMORY[0x1E0C81398] && xpc_uint64_get_value(v4) != 2)
    xpc_array_append_value(*(xpc_object_t *)(a1 + 32), v4);

  return 1;
}

void tcp_connection_set_no_expensive(uint64_t a1, BOOL a2)
{
  id v2;
  char *v3;
  NSObject *v4;
  os_log_type_t v5;
  const char *v6;
  char *backtrace_string;
  os_log_type_t v8;
  _BOOL4 v9;
  NSObject *v10;
  os_log_type_t v11;
  char v12;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    nw_parameters_set_prohibit_expensive(*(nw_parameters_t *)(a1 + 48), a2);
    return;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v2 = (id)gLogObj;
  *(_DWORD *)buf = 136446210;
  v15 = "tcp_connection_set_no_expensive";
  v3 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v12 = 0;
  if (!__nwlog_fault(v3, &type, &v12))
  {
LABEL_12:
    if (!v3)
      return;
    goto LABEL_13;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v4 = (id)gLogObj;
    v5 = type;
    if (!os_log_type_enabled(v4, type))
      goto LABEL_19;
    *(_DWORD *)buf = 136446210;
    v15 = "tcp_connection_set_no_expensive";
    v6 = "%{public}s called with null connection";
LABEL_17:
    v10 = v4;
    v11 = v5;
LABEL_18:
    _os_log_impl(&dword_182FBE000, v10, v11, v6, buf, 0xCu);
    goto LABEL_19;
  }
  if (!v12)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v4 = (id)gLogObj;
    v5 = type;
    if (!os_log_type_enabled(v4, type))
      goto LABEL_19;
    *(_DWORD *)buf = 136446210;
    v15 = "tcp_connection_set_no_expensive";
    v6 = "%{public}s called with null connection, backtrace limit exceeded";
    goto LABEL_17;
  }
  backtrace_string = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v4 = (id)gLogObj;
  v8 = type;
  v9 = os_log_type_enabled(v4, type);
  if (backtrace_string)
  {
    if (v9)
    {
      *(_DWORD *)buf = 136446466;
      v15 = "tcp_connection_set_no_expensive";
      v16 = 2082;
      v17 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v4, v8, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
    }

    free(backtrace_string);
    goto LABEL_12;
  }
  if (v9)
  {
    *(_DWORD *)buf = 136446210;
    v15 = "tcp_connection_set_no_expensive";
    v6 = "%{public}s called with null connection, no backtrace";
    v10 = v4;
    v11 = v8;
    goto LABEL_18;
  }
LABEL_19:

  if (v3)
LABEL_13:
    free(v3);
}

void tcp_connection_set_url(uint64_t a1, const char *a2)
{
  id v2;
  char *v3;
  NSObject *v4;
  os_log_type_t v5;
  const char *v6;
  char *backtrace_string;
  os_log_type_t v8;
  _BOOL4 v9;
  NSObject *v10;
  os_log_type_t v11;
  char v12;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    nw_parameters_set_url(*(void **)(a1 + 48), a2);
    return;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v2 = (id)gLogObj;
  *(_DWORD *)buf = 136446210;
  v15 = "tcp_connection_set_url";
  v3 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v12 = 0;
  if (!__nwlog_fault(v3, &type, &v12))
  {
LABEL_12:
    if (!v3)
      return;
    goto LABEL_13;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v4 = (id)gLogObj;
    v5 = type;
    if (!os_log_type_enabled(v4, type))
      goto LABEL_19;
    *(_DWORD *)buf = 136446210;
    v15 = "tcp_connection_set_url";
    v6 = "%{public}s called with null connection";
LABEL_17:
    v10 = v4;
    v11 = v5;
LABEL_18:
    _os_log_impl(&dword_182FBE000, v10, v11, v6, buf, 0xCu);
    goto LABEL_19;
  }
  if (!v12)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v4 = (id)gLogObj;
    v5 = type;
    if (!os_log_type_enabled(v4, type))
      goto LABEL_19;
    *(_DWORD *)buf = 136446210;
    v15 = "tcp_connection_set_url";
    v6 = "%{public}s called with null connection, backtrace limit exceeded";
    goto LABEL_17;
  }
  backtrace_string = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v4 = (id)gLogObj;
  v8 = type;
  v9 = os_log_type_enabled(v4, type);
  if (backtrace_string)
  {
    if (v9)
    {
      *(_DWORD *)buf = 136446466;
      v15 = "tcp_connection_set_url";
      v16 = 2082;
      v17 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v4, v8, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
    }

    free(backtrace_string);
    goto LABEL_12;
  }
  if (v9)
  {
    *(_DWORD *)buf = 136446210;
    v15 = "tcp_connection_set_url";
    v6 = "%{public}s called with null connection, no backtrace";
    v10 = v4;
    v11 = v8;
    goto LABEL_18;
  }
LABEL_19:

  if (v3)
LABEL_13:
    free(v3);
}

uint64_t __tcp_connection_set_persistent_block_invoke(xpc_object_t *a1, size_t a2, void *a3)
{
  id v5;
  void *v6;
  Class Class;
  objc_class *v8;
  const char *string_ptr;
  const char *v10;

  v5 = a3;
  xpc_array_get_value(a1[4], a2);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  Class = object_getClass(v5);
  v8 = (objc_class *)MEMORY[0x1E0C81390];
  if (Class == (Class)MEMORY[0x1E0C81390] && object_getClass(v6) == v8)
  {
    string_ptr = xpc_string_get_string_ptr(v5);
    if (strncmp(string_ptr, "Persistent", 0x20uLL)
      || (v10 = xpc_string_get_string_ptr(v5), strncmp(v10, "Persistent", 0x20uLL)))
    {
      xpc_array_append_value(a1[5], v5);
      xpc_array_append_value(a1[6], v6);
    }
  }

  return 1;
}

void tcp_connection_set_opportunistic(void *a1, int a2)
{
  int v2;
  id v3;
  void *v4;
  NSObject *v5;
  os_log_type_t v6;
  const char *v7;
  char *backtrace_string;
  os_log_type_t v9;
  _BOOL4 v10;
  NSObject *v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v3 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v16 = "tcp_connection_set_opportunistic";
    v4 = (void *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v13 = 0;
    if (__nwlog_fault((const char *)v4, &type, &v13))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v5 = (id)gLogObj;
        v6 = type;
        if (!os_log_type_enabled(v5, type))
          goto LABEL_22;
        *(_DWORD *)buf = 136446210;
        v16 = "tcp_connection_set_opportunistic";
        v7 = "%{public}s called with null connection";
LABEL_20:
        v11 = v5;
        v12 = v6;
        goto LABEL_21;
      }
      if (!v13)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v5 = (id)gLogObj;
        v6 = type;
        if (!os_log_type_enabled(v5, type))
          goto LABEL_22;
        *(_DWORD *)buf = 136446210;
        v16 = "tcp_connection_set_opportunistic";
        v7 = "%{public}s called with null connection, backtrace limit exceeded";
        goto LABEL_20;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v5 = (id)gLogObj;
      v9 = type;
      v10 = os_log_type_enabled(v5, type);
      if (!backtrace_string)
      {
        if (!v10)
        {
LABEL_22:

          if (!v4)
            return;
LABEL_16:
          free(v4);
          return;
        }
        *(_DWORD *)buf = 136446210;
        v16 = "tcp_connection_set_opportunistic";
        v7 = "%{public}s called with null connection, no backtrace";
        v11 = v5;
        v12 = v9;
LABEL_21:
        _os_log_impl(&dword_182FBE000, v11, v12, v7, buf, 0xCu);
        goto LABEL_22;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446466;
        v16 = "tcp_connection_set_opportunistic";
        v17 = 2082;
        v18 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v5, v9, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
    if (!v4)
      return;
    goto LABEL_16;
  }
  if (a2)
    v2 = 100;
  else
    v2 = 0;
  tcp_connection_set_traffic_class(a1, v2);
}

void tcp_connection_set_no_fallback(uint64_t a1, int a2)
{
  id v2;
  char *v3;
  NSObject *v4;
  os_log_type_t v5;
  const char *v6;
  char *backtrace_string;
  os_log_type_t v8;
  _BOOL4 v9;
  NSObject *v10;
  os_log_type_t v11;
  char v12;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    nw_parameters_set_no_fallback(*(void **)(a1 + 48), a2);
    return;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v2 = (id)gLogObj;
  *(_DWORD *)buf = 136446210;
  v15 = "tcp_connection_set_no_fallback";
  v3 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v12 = 0;
  if (!__nwlog_fault(v3, &type, &v12))
  {
LABEL_12:
    if (!v3)
      return;
    goto LABEL_13;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v4 = (id)gLogObj;
    v5 = type;
    if (!os_log_type_enabled(v4, type))
      goto LABEL_19;
    *(_DWORD *)buf = 136446210;
    v15 = "tcp_connection_set_no_fallback";
    v6 = "%{public}s called with null connection";
LABEL_17:
    v10 = v4;
    v11 = v5;
LABEL_18:
    _os_log_impl(&dword_182FBE000, v10, v11, v6, buf, 0xCu);
    goto LABEL_19;
  }
  if (!v12)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v4 = (id)gLogObj;
    v5 = type;
    if (!os_log_type_enabled(v4, type))
      goto LABEL_19;
    *(_DWORD *)buf = 136446210;
    v15 = "tcp_connection_set_no_fallback";
    v6 = "%{public}s called with null connection, backtrace limit exceeded";
    goto LABEL_17;
  }
  backtrace_string = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v4 = (id)gLogObj;
  v8 = type;
  v9 = os_log_type_enabled(v4, type);
  if (backtrace_string)
  {
    if (v9)
    {
      *(_DWORD *)buf = 136446466;
      v15 = "tcp_connection_set_no_fallback";
      v16 = 2082;
      v17 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v4, v8, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
    }

    free(backtrace_string);
    goto LABEL_12;
  }
  if (v9)
  {
    *(_DWORD *)buf = 136446210;
    v15 = "tcp_connection_set_no_fallback";
    v6 = "%{public}s called with null connection, no backtrace";
    v10 = v4;
    v11 = v8;
    goto LABEL_18;
  }
LABEL_19:

  if (v3)
LABEL_13:
    free(v3);
}

void tcp_connection_set_fallback_fast()
{
  NSObject *v0;
  int v1;
  const char *v2;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v0 = (id)gLogObj;
  if (os_log_type_enabled(v0, OS_LOG_TYPE_ERROR))
  {
    v1 = 136446210;
    v2 = "tcp_connection_set_fallback_fast";
    _os_log_impl(&dword_182FBE000, v0, OS_LOG_TYPE_ERROR, "%{public}s tcp_connection_set_fallback_fast is deprecated", (uint8_t *)&v1, 0xCu);
  }

}

void tcp_connection_add_event_excessive_keepalives(uint64_t a1, int a2, int a3, int a4)
{
  char v4;
  id v5;
  void *v6;
  NSObject *v7;
  os_log_type_t v8;
  const char *v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  NSObject *v13;
  os_log_type_t v14;
  char v15;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v5 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v18 = "tcp_connection_add_event_excessive_keepalives";
    v6 = (void *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v15 = 0;
    if (__nwlog_fault((const char *)v6, &type, &v15))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v7 = (id)gLogObj;
        v8 = type;
        if (!os_log_type_enabled(v7, type))
          goto LABEL_22;
        *(_DWORD *)buf = 136446210;
        v18 = "tcp_connection_add_event_excessive_keepalives";
        v9 = "%{public}s called with null connection";
LABEL_20:
        v13 = v7;
        v14 = v8;
        goto LABEL_21;
      }
      if (!v15)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v7 = (id)gLogObj;
        v8 = type;
        if (!os_log_type_enabled(v7, type))
          goto LABEL_22;
        *(_DWORD *)buf = 136446210;
        v18 = "tcp_connection_add_event_excessive_keepalives";
        v9 = "%{public}s called with null connection, backtrace limit exceeded";
        goto LABEL_20;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v7 = (id)gLogObj;
      v11 = type;
      v12 = os_log_type_enabled(v7, type);
      if (!backtrace_string)
      {
        if (!v12)
        {
LABEL_22:

          if (!v6)
            return;
LABEL_16:
          free(v6);
          return;
        }
        *(_DWORD *)buf = 136446210;
        v18 = "tcp_connection_add_event_excessive_keepalives";
        v9 = "%{public}s called with null connection, no backtrace";
        v13 = v7;
        v14 = v11;
LABEL_21:
        _os_log_impl(&dword_182FBE000, v13, v14, v9, buf, 0xCu);
        goto LABEL_22;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446466;
        v18 = "tcp_connection_add_event_excessive_keepalives";
        v19 = 2082;
        v20 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v7, v11, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
    if (!v6)
      return;
    goto LABEL_16;
  }
  if (a2)
    v4 = 32;
  else
    v4 = 0;
  *(_BYTE *)(a1 + 159) = *(_BYTE *)(a1 + 159) & 0xDF | v4;
  *(_DWORD *)(a1 + 136) = a4;
  *(_DWORD *)(a1 + 140) = a3;
  tcp_connection_set_keepalive_handler_on_nw_connection((void *)a1);
}

void tcp_connection_set_keepalive_handler_on_nw_connection(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  int v4;
  int v5;
  _QWORD v6[4];
  id v7;

  v1 = a1;
  v2 = v1;
  v3 = (void *)*((_QWORD *)v1 + 2);
  if (v3)
  {
    v5 = *((_DWORD *)v1 + 34);
    v4 = *((_DWORD *)v1 + 35);
    if ((*((_BYTE *)v1 + 159) & 0x20) != 0)
    {
      v6[0] = MEMORY[0x1E0C809B0];
      v6[1] = 3221225472;
      v6[2] = __tcp_connection_set_keepalive_handler_on_nw_connection_block_invoke;
      v6[3] = &unk_1E14ACFD0;
      v7 = v1;
      nw_connection_set_excessive_keepalive_handler(v3, v4, v5, v6);

    }
    else
    {
      nw_connection_set_excessive_keepalive_handler(*((void **)v1 + 2), *((_DWORD *)v1 + 35), *((_DWORD *)v1 + 34), 0);
    }
  }

}

void __tcp_connection_set_keepalive_handler_on_nw_connection_block_invoke(uint64_t a1)
{
  tcp_connection_send_event_unlocked(*(void **)(a1 + 32), 1073741825, 0, 0, (uint64_t)"keep alive");
}

void tcp_connection_send_event_unlocked(void *a1, int a2, const void *a3, size_t a4, uint64_t a5)
{
  os_unfair_lock_s *v9;
  void *v10;
  unsigned __int8 *v11;
  id v12;
  void *v13;
  void *v14;
  char *v15;
  void *v16;
  uint64_t v17;

  v15 = a1;
  v16 = 0;
  v17 = 0;
  v9 = (os_unfair_lock_s *)(v15 + 120);
  os_unfair_lock_lock((os_unfair_lock_t)v15 + 30);
  if (tcp_connection_fillout_event_locked(v15, (uint64_t)&v16, a2, a3, a4, a5))
  {
    v10 = _Block_copy(*((const void **)v15 + 8));
    os_unfair_lock_unlock(v9);
    v11 = v15;
    v12 = v10;
    v13 = v12;
    if (!v12 || v11[156] == 255)
    {
      v14 = v16;
      if (!v16)
      {
LABEL_9:

        goto LABEL_10;
      }
    }
    else
    {
      v14 = v16;
      (*((void (**)(id, _QWORD, void *))v12 + 2))(v12, v17, v16);
      if (!v14)
        goto LABEL_9;
    }
    free(v14);
    goto LABEL_9;
  }
  os_unfair_lock_unlock(v9);
LABEL_10:

}

void tcp_connection_add_event_adaptive_read_timeout(uint64_t a1, int a2, int a3)
{
  char v3;
  id v4;
  void *v5;
  NSObject *v6;
  os_log_type_t v7;
  const char *v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  NSObject *v12;
  os_log_type_t v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v4 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v17 = "tcp_connection_add_event_adaptive_read_timeout";
    v5 = (void *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v14 = 0;
    if (__nwlog_fault((const char *)v5, &type, &v14))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v6 = (id)gLogObj;
        v7 = type;
        if (!os_log_type_enabled(v6, type))
          goto LABEL_22;
        *(_DWORD *)buf = 136446210;
        v17 = "tcp_connection_add_event_adaptive_read_timeout";
        v8 = "%{public}s called with null connection";
LABEL_20:
        v12 = v6;
        v13 = v7;
        goto LABEL_21;
      }
      if (!v14)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v6 = (id)gLogObj;
        v7 = type;
        if (!os_log_type_enabled(v6, type))
          goto LABEL_22;
        *(_DWORD *)buf = 136446210;
        v17 = "tcp_connection_add_event_adaptive_read_timeout";
        v8 = "%{public}s called with null connection, backtrace limit exceeded";
        goto LABEL_20;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v6 = (id)gLogObj;
      v10 = type;
      v11 = os_log_type_enabled(v6, type);
      if (!backtrace_string)
      {
        if (!v11)
        {
LABEL_22:

          if (!v5)
            return;
LABEL_16:
          free(v5);
          return;
        }
        *(_DWORD *)buf = 136446210;
        v17 = "tcp_connection_add_event_adaptive_read_timeout";
        v8 = "%{public}s called with null connection, no backtrace";
        v12 = v6;
        v13 = v10;
LABEL_21:
        _os_log_impl(&dword_182FBE000, v12, v13, v8, buf, 0xCu);
        goto LABEL_22;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446466;
        v17 = "tcp_connection_add_event_adaptive_read_timeout";
        v18 = 2082;
        v19 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v6, v10, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
    if (!v5)
      return;
    goto LABEL_16;
  }
  if (a2)
    v3 = 64;
  else
    v3 = 0;
  *(_BYTE *)(a1 + 159) = *(_BYTE *)(a1 + 159) & 0xBF | v3;
  *(_DWORD *)(a1 + 144) = a3;
  tcp_connection_set_adaptive_read_handler_on_nw_connection((void *)a1);
}

void tcp_connection_set_adaptive_read_handler_on_nw_connection(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  int v4;
  _QWORD v5[4];
  id v6;

  v1 = a1;
  v2 = v1;
  v3 = (void *)*((_QWORD *)v1 + 2);
  if (v3)
  {
    v4 = *((_DWORD *)v1 + 36);
    if ((*((_BYTE *)v1 + 159) & 0x40) != 0)
    {
      v5[0] = MEMORY[0x1E0C809B0];
      v5[1] = 3221225472;
      v5[2] = __tcp_connection_set_adaptive_read_handler_on_nw_connection_block_invoke;
      v5[3] = &unk_1E14ACFD0;
      v6 = v1;
      nw_connection_set_adaptive_read_handler(v3, v4, v5);

    }
    else
    {
      nw_connection_set_adaptive_read_handler(*((void **)v1 + 2), *((_DWORD *)v1 + 36), 0);
    }
  }

}

void __tcp_connection_set_adaptive_read_handler_on_nw_connection_block_invoke(uint64_t a1)
{
  tcp_connection_send_event_unlocked(*(void **)(a1 + 32), 1073741828, 0, 0, (uint64_t)"adaptive read timeout");
}

void tcp_connection_add_event_adaptive_write_timeout(uint64_t a1, int a2, int a3)
{
  char v3;
  id v4;
  void *v5;
  NSObject *v6;
  os_log_type_t v7;
  const char *v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  NSObject *v12;
  os_log_type_t v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v4 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v17 = "tcp_connection_add_event_adaptive_write_timeout";
    v5 = (void *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v14 = 0;
    if (__nwlog_fault((const char *)v5, &type, &v14))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v6 = (id)gLogObj;
        v7 = type;
        if (!os_log_type_enabled(v6, type))
          goto LABEL_22;
        *(_DWORD *)buf = 136446210;
        v17 = "tcp_connection_add_event_adaptive_write_timeout";
        v8 = "%{public}s called with null connection";
LABEL_20:
        v12 = v6;
        v13 = v7;
        goto LABEL_21;
      }
      if (!v14)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v6 = (id)gLogObj;
        v7 = type;
        if (!os_log_type_enabled(v6, type))
          goto LABEL_22;
        *(_DWORD *)buf = 136446210;
        v17 = "tcp_connection_add_event_adaptive_write_timeout";
        v8 = "%{public}s called with null connection, backtrace limit exceeded";
        goto LABEL_20;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v6 = (id)gLogObj;
      v10 = type;
      v11 = os_log_type_enabled(v6, type);
      if (!backtrace_string)
      {
        if (!v11)
        {
LABEL_22:

          if (!v5)
            return;
LABEL_16:
          free(v5);
          return;
        }
        *(_DWORD *)buf = 136446210;
        v17 = "tcp_connection_add_event_adaptive_write_timeout";
        v8 = "%{public}s called with null connection, no backtrace";
        v12 = v6;
        v13 = v10;
LABEL_21:
        _os_log_impl(&dword_182FBE000, v12, v13, v8, buf, 0xCu);
        goto LABEL_22;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446466;
        v17 = "tcp_connection_add_event_adaptive_write_timeout";
        v18 = 2082;
        v19 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v6, v10, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
    if (!v5)
      return;
    goto LABEL_16;
  }
  if (a2)
    v3 = 0x80;
  else
    v3 = 0;
  *(_BYTE *)(a1 + 159) = v3 & 0x80 | *(_BYTE *)(a1 + 159) & 0x7F;
  *(_DWORD *)(a1 + 148) = a3;
  tcp_connection_set_adaptive_write_handler_on_nw_connection((void *)a1);
}

void tcp_connection_set_adaptive_write_handler_on_nw_connection(void *a1)
{
  char *v1;
  void *v2;
  void *v3;
  int v4;
  _QWORD v5[4];
  char *v6;

  v1 = a1;
  v2 = v1;
  v3 = (void *)*((_QWORD *)v1 + 2);
  if (v3)
  {
    v4 = *((_DWORD *)v1 + 37);
    if (v1[159] < 0)
    {
      v5[0] = MEMORY[0x1E0C809B0];
      v5[1] = 3221225472;
      v5[2] = __tcp_connection_set_adaptive_write_handler_on_nw_connection_block_invoke;
      v5[3] = &unk_1E14ACFD0;
      v6 = v1;
      nw_connection_set_adaptive_write_handler(v3, v4, v5);

    }
    else
    {
      nw_connection_set_adaptive_write_handler(*((void **)v1 + 2), *((_DWORD *)v1 + 37), 0);
    }
  }

}

void __tcp_connection_set_adaptive_write_handler_on_nw_connection_block_invoke(uint64_t a1)
{
  tcp_connection_send_event_unlocked(*(void **)(a1 + 32), 1073741829, 0, 0, (uint64_t)"adaptive write timeout");
}

BOOL tcp_connection_did_fallback(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  _BOOL8 v4;
  id v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  const char *v9;
  NSObject *v10;
  char *backtrace_string;
  os_log_type_t v12;
  _BOOL4 v13;
  NSObject *v15;
  os_log_type_t v16;
  char v17;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v20;
  __int16 v21;
  char *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v5 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v20 = "tcp_connection_did_fallback";
    v6 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v17 = 0;
    if (__nwlog_fault(v6, &type, &v17))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v7 = (id)gLogObj;
        v8 = type;
        if (!os_log_type_enabled(v7, type))
          goto LABEL_24;
        *(_DWORD *)buf = 136446210;
        v20 = "tcp_connection_did_fallback";
        v9 = "%{public}s called with null connection";
LABEL_22:
        v15 = v7;
        v16 = v8;
        goto LABEL_23;
      }
      if (!v17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v7 = (id)gLogObj;
        v8 = type;
        if (!os_log_type_enabled(v7, type))
          goto LABEL_24;
        *(_DWORD *)buf = 136446210;
        v20 = "tcp_connection_did_fallback";
        v9 = "%{public}s called with null connection, backtrace limit exceeded";
        goto LABEL_22;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v7 = (id)gLogObj;
      v12 = type;
      v13 = os_log_type_enabled(v7, type);
      if (!backtrace_string)
      {
        if (!v13)
        {
LABEL_24:

          if (!v6)
            goto LABEL_18;
          goto LABEL_17;
        }
        *(_DWORD *)buf = 136446210;
        v20 = "tcp_connection_did_fallback";
        v9 = "%{public}s called with null connection, no backtrace";
        v15 = v7;
        v16 = v12;
LABEL_23:
        _os_log_impl(&dword_182FBE000, v15, v16, v9, buf, 0xCu);
        goto LABEL_24;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446466;
        v20 = "tcp_connection_did_fallback";
        v21 = 2082;
        v22 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
    if (!v6)
    {
LABEL_18:
      v4 = 0;
      goto LABEL_19;
    }
LABEL_17:
    free(v6);
    goto LABEL_18;
  }
  v3 = (void *)*((_QWORD *)v1 + 2);
  if (!v3)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v10 = (id)gLogObj;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      v20 = "tcp_connection_did_fallback";
      _os_log_impl(&dword_182FBE000, v10, OS_LOG_TYPE_ERROR, "%{public}s API Misuse: Function must be called after tcp_connection_start", buf, 0xCu);
    }

    goto LABEL_18;
  }
  v4 = nw_connection_used_fallback(v3);
LABEL_19:

  return v4;
}

void tcp_connection_set_source_application(uint64_t a1, _OWORD *a2)
{
  void *v2;
  __int128 v3;
  id v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  const char *v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  NSObject *v12;
  os_log_type_t v13;
  char v14;
  os_log_type_t type;
  _BYTE buf[32];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v2 = *(void **)(a1 + 48);
    v3 = a2[1];
    *(_OWORD *)buf = *a2;
    *(_OWORD *)&buf[16] = v3;
    nw_parameters_set_source_application(v2, (__int128 *)buf);
    return;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v4 = (id)gLogObj;
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "tcp_connection_set_source_application";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (!__nwlog_fault(v5, &type, &v14))
  {
LABEL_12:
    if (!v5)
      return;
    goto LABEL_13;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v6 = (id)gLogObj;
    v7 = type;
    if (!os_log_type_enabled(v6, type))
      goto LABEL_19;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "tcp_connection_set_source_application";
    v8 = "%{public}s called with null connection";
LABEL_17:
    v12 = v6;
    v13 = v7;
LABEL_18:
    _os_log_impl(&dword_182FBE000, v12, v13, v8, buf, 0xCu);
    goto LABEL_19;
  }
  if (!v14)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v6 = (id)gLogObj;
    v7 = type;
    if (!os_log_type_enabled(v6, type))
      goto LABEL_19;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "tcp_connection_set_source_application";
    v8 = "%{public}s called with null connection, backtrace limit exceeded";
    goto LABEL_17;
  }
  backtrace_string = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v6 = (id)gLogObj;
  v10 = type;
  v11 = os_log_type_enabled(v6, type);
  if (backtrace_string)
  {
    if (v11)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "tcp_connection_set_source_application";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = backtrace_string;
      _os_log_impl(&dword_182FBE000, v6, v10, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
    }

    free(backtrace_string);
    goto LABEL_12;
  }
  if (v11)
  {
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "tcp_connection_set_source_application";
    v8 = "%{public}s called with null connection, no backtrace";
    v12 = v6;
    v13 = v10;
    goto LABEL_18;
  }
LABEL_19:

  if (v5)
LABEL_13:
    free(v5);
}

