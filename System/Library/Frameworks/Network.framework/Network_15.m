void nw_frame_set_app_metadata(uint64_t a1, char a2, char a3)
{
  int v3;
  char *v4;
  NSObject *v5;
  os_log_type_t v6;
  const char *v7;
  char *backtrace_string;
  _BOOL4 v9;
  char v10;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v3 = *(unsigned __int16 *)(a1 + 204) | (*(unsigned __int8 *)(a1 + 206) << 16);
    if ((v3 & 0x10000) == 0)
    {
      *(_BYTE *)(a1 + 201) = a2;
      *(_BYTE *)(a1 + 202) = a3;
      *(_WORD *)(a1 + 204) = v3;
      *(_BYTE *)(a1 + 206) = (v3 | 0x10000u) >> 16;
    }
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v13 = "__nw_frame_set_app_metadata";
  v4 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v10 = 0;
  if (__nwlog_fault(v4, &type, &v10))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v5 = __nwlog_obj();
      v6 = type;
      if (!os_log_type_enabled(v5, type))
        goto LABEL_19;
      *(_DWORD *)buf = 136446210;
      v13 = "__nw_frame_set_app_metadata";
      v7 = "%{public}s called with null frame";
      goto LABEL_18;
    }
    if (!v10)
    {
      v5 = __nwlog_obj();
      v6 = type;
      if (!os_log_type_enabled(v5, type))
        goto LABEL_19;
      *(_DWORD *)buf = 136446210;
      v13 = "__nw_frame_set_app_metadata";
      v7 = "%{public}s called with null frame, backtrace limit exceeded";
      goto LABEL_18;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v5 = __nwlog_obj();
    v6 = type;
    v9 = os_log_type_enabled(v5, type);
    if (backtrace_string)
    {
      if (v9)
      {
        *(_DWORD *)buf = 136446466;
        v13 = "__nw_frame_set_app_metadata";
        v14 = 2082;
        v15 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v5, v6, "%{public}s called with null frame, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_19;
    }
    if (v9)
    {
      *(_DWORD *)buf = 136446210;
      v13 = "__nw_frame_set_app_metadata";
      v7 = "%{public}s called with null frame, no backtrace";
LABEL_18:
      _os_log_impl(&dword_182FBE000, v5, v6, v7, buf, 0xCu);
    }
  }
LABEL_19:
  if (v4)
    free(v4);
}

BOOL nw_frame_is_in_array(_QWORD *a1, int a2)
{
  _QWORD *v3;

  if (a2)
  {
    if (a1[4])
      return 1;
    v3 = a1 + 5;
  }
  else
  {
    if (a1[2])
      return 1;
    v3 = a1 + 3;
  }
  return *v3 != 0;
}

uint64_t nw_frame_array_last(uint64_t a1)
{
  return **(_QWORD **)(*(_QWORD *)(a1 + 8) + 8);
}

uint64_t nw_frame_array_previous(int a1, uint64_t a2)
{
  uint64_t v2;

  if (a1)
  {
    v2 = *(_QWORD *)(a2 + 40);
    if (*(_OWORD *)(a2 + 32) == 0)
      return 0;
  }
  else
  {
    v2 = *(_QWORD *)(a2 + 24);
    if (*(_OWORD *)(a2 + 16) == 0)
      return 0;
  }
  return **(_QWORD **)(v2 + 8);
}

uint64_t nw_frame_array_remove_each(uint64_t result, char a2, uint64_t a3)
{
  uint64_t *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;

  v4 = (uint64_t *)result;
  if ((a2 & 1) != 0)
  {
    do
    {
      v6 = *v4;
      if (!*v4)
        break;
      v7 = *(_QWORD *)(v6 + 32);
      v5 = *(_QWORD **)(v6 + 40);
      if (v7)
      {
        *(_QWORD *)(v7 + 40) = v5;
        v5 = *(_QWORD **)(v6 + 40);
      }
      else
      {
        v4[1] = (uint64_t)v5;
      }
      *v5 = v7;
      *(_QWORD *)(v6 + 32) = 0;
      *(_QWORD *)(v6 + 40) = 0;
      result = (*(uint64_t (**)(uint64_t))(a3 + 16))(a3);
    }
    while ((result & 1) != 0);
  }
  else
  {
    do
    {
      v9 = *v4;
      if (!*v4)
        break;
      v10 = *(_QWORD *)(v9 + 16);
      v8 = *(_QWORD **)(v9 + 24);
      if (v10)
      {
        *(_QWORD *)(v10 + 24) = v8;
        v8 = *(_QWORD **)(v9 + 24);
      }
      else
      {
        v4[1] = (uint64_t)v8;
      }
      *v8 = v10;
      *(_QWORD *)(v9 + 16) = 0;
      *(_QWORD *)(v9 + 24) = 0;
      result = (*(uint64_t (**)(uint64_t))(a3 + 16))(a3);
    }
    while ((result & 1) != 0);
  }
  return result;
}

_QWORD *nw_frame_array_prepend_array(_QWORD *result, _QWORD **a2, int a3)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;

  v3 = *result;
  if (a3)
  {
    if (v3)
    {
      *a2[1] = v3;
      v4 = (_QWORD *)result[1];
      *(_QWORD *)(*result + 40) = a2[1];
      a2[1] = v4;
      *result = 0;
      result[1] = result;
    }
    if (*a2)
    {
      v5 = (_QWORD *)result[1];
      ++result;
      *v5 = *a2;
      (*a2)[5] = *result;
LABEL_10:
      *result = a2[1];
      *a2 = 0;
      a2[1] = a2;
    }
  }
  else
  {
    if (v3)
    {
      *a2[1] = v3;
      v6 = (_QWORD *)result[1];
      *(_QWORD *)(*result + 24) = a2[1];
      a2[1] = v6;
      *result = 0;
      result[1] = result;
    }
    if (*a2)
    {
      v7 = (_QWORD *)result[1];
      ++result;
      *v7 = *a2;
      (*a2)[3] = *result;
      goto LABEL_10;
    }
  }
  return result;
}

uint64_t nw_frame_array_unclaimed_length(uint64_t *a1, int a2)
{
  unsigned int v3;

  v3 = 0;
  nw_frame_array_get_frame_count(a1, a2, &v3);
  return v3;
}

BOOL nw_frame_array_check_length(uint64_t *a1, char a2, unsigned int a3)
{
  uint64_t v3;
  unsigned int v4;
  BOOL v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;

  v3 = *a1;
  v4 = 0;
  if ((a2 & 1) != 0)
  {
    while (v3)
    {
      v8 = *(_DWORD *)(v3 + 52);
      if (v8)
        v8 -= *(_DWORD *)(v3 + 56) + *(_DWORD *)(v3 + 60);
      v3 = *(_QWORD *)(v3 + 32);
      v5 = __CFADD__(v4, v8);
      v6 = v4 + v8;
      v4 += v8;
      if (v5)
        v7 = -1;
      else
        v7 = v6;
      if (v7 >= a3)
        return 1;
    }
  }
  else
  {
    while (v3)
    {
      v11 = *(_DWORD *)(v3 + 52);
      if (v11)
        v11 -= *(_DWORD *)(v3 + 56) + *(_DWORD *)(v3 + 60);
      v3 = *(_QWORD *)(v3 + 16);
      v5 = __CFADD__(v4, v11);
      v9 = v4 + v11;
      v4 += v11;
      if (v5)
        v10 = -1;
      else
        v10 = v9;
      if (v10 >= a3)
        return 1;
    }
  }
  return v4 >= a3;
}

uint64_t nw_frame_array_fill_from_pending_array(_QWORD *a1, uint64_t a2, int a3, int a4)
{
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  const char *v12;
  char *backtrace_string;
  _BOOL4 v14;
  const char *v15;
  _BOOL4 v16;
  _QWORD v18[2];
  uint64_t (*v19)(uint64_t, uint64_t);
  void *v20;
  _BYTE *v21;
  os_log_type_t *v22;
  _QWORD *v23;
  uint64_t v24;
  int v25;
  int v26;
  os_log_type_t type[8];
  os_log_type_t *v28;
  uint64_t v29;
  int v30;
  char v31;
  _BYTE buf[24];
  int v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_frame_array_fill_from_pending_array";
    v9 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    v31 = 0;
    if (!__nwlog_fault(v9, type, &v31))
      goto LABEL_35;
    if (type[0] != OS_LOG_TYPE_FAULT)
    {
      if (!v31)
      {
        v10 = __nwlog_obj();
        v11 = type[0];
        if (!os_log_type_enabled(v10, type[0]))
          goto LABEL_35;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_frame_array_fill_from_pending_array";
        v12 = "%{public}s called with null from_array, backtrace limit exceeded";
        goto LABEL_34;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v10 = __nwlog_obj();
      v11 = type[0];
      v14 = os_log_type_enabled(v10, type[0]);
      if (!backtrace_string)
      {
        if (!v14)
          goto LABEL_35;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_frame_array_fill_from_pending_array";
        v12 = "%{public}s called with null from_array, no backtrace";
        goto LABEL_34;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_frame_array_fill_from_pending_array";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        v15 = "%{public}s called with null from_array, dumping backtrace:%{public}s";
LABEL_24:
        _os_log_impl(&dword_182FBE000, v10, v11, v15, buf, 0x16u);
      }
LABEL_25:
      free(backtrace_string);
      goto LABEL_35;
    }
    v10 = __nwlog_obj();
    v11 = type[0];
    if (!os_log_type_enabled(v10, type[0]))
      goto LABEL_35;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_frame_array_fill_from_pending_array";
    v12 = "%{public}s called with null from_array";
LABEL_34:
    _os_log_impl(&dword_182FBE000, v10, v11, v12, buf, 0xCu);
LABEL_35:
    if (v9)
      free(v9);
    return 0;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_frame_array_fill_from_pending_array";
    v9 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    v31 = 0;
    if (!__nwlog_fault(v9, type, &v31))
      goto LABEL_35;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      v10 = __nwlog_obj();
      v11 = type[0];
      if (!os_log_type_enabled(v10, type[0]))
        goto LABEL_35;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_frame_array_fill_from_pending_array";
      v12 = "%{public}s called with null to_array";
      goto LABEL_34;
    }
    if (!v31)
    {
      v10 = __nwlog_obj();
      v11 = type[0];
      if (!os_log_type_enabled(v10, type[0]))
        goto LABEL_35;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_frame_array_fill_from_pending_array";
      v12 = "%{public}s called with null to_array, backtrace limit exceeded";
      goto LABEL_34;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v10 = __nwlog_obj();
    v11 = type[0];
    v16 = os_log_type_enabled(v10, type[0]);
    if (backtrace_string)
    {
      if (v16)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_frame_array_fill_from_pending_array";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        v15 = "%{public}s called with null to_array, dumping backtrace:%{public}s";
        goto LABEL_24;
      }
      goto LABEL_25;
    }
    if (!v16)
      goto LABEL_35;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_frame_array_fill_from_pending_array";
    v12 = "%{public}s called with null to_array, no backtrace";
    goto LABEL_34;
  }
  v5 = *a1;
  if (!*a1)
    return 0;
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = buf;
  v33 = 0;
  *(_QWORD *)&buf[16] = 0x2000000000;
  *(_QWORD *)type = 0;
  v28 = type;
  v30 = 0;
  v29 = 0x2000000000;
  v18[0] = MEMORY[0x1E0C809B0];
  v18[1] = 0x40000000;
  v19 = __nw_frame_array_fill_from_pending_array_block_invoke;
  v20 = &unk_1E14A3100;
  v21 = buf;
  v22 = type;
  v25 = a4;
  v26 = a3;
  v23 = a1;
  v24 = a2;
  do
  {
    if (!v5)
      break;
    v6 = *(_QWORD *)(v5 + 32);
    v7 = ((uint64_t (*)(_QWORD *))v19)(v18);
    v5 = v6;
  }
  while ((v7 & 1) != 0);
  v8 = *(unsigned int *)(*(_QWORD *)&buf[8] + 24);
  _Block_object_dispose(type, 8);
  _Block_object_dispose(buf, 8);
  return v8;
}

uint64_t __nw_frame_array_fill_from_pending_array_block_invoke(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  int v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  const char *v16;
  char *v17;
  NSObject *v18;
  os_log_type_t v19;
  const char *v20;
  int v21;
  char *backtrace_string;
  _BOOL4 v23;
  char *v24;
  _BOOL4 v25;
  char v26;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v29;
  __int16 v30;
  char *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) >= *(_DWORD *)(a1 + 64))
    return 0;
  v4 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
  if (a2)
  {
    v5 = *(_DWORD *)(a2 + 52);
    if (v5)
      v5 -= *(_DWORD *)(a2 + 56) + *(_DWORD *)(a2 + 60);
    goto LABEL_5;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v29 = "__nw_frame_unclaimed_length";
  v13 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v26 = 0;
  if (__nwlog_fault(v13, &type, &v26))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v14 = __nwlog_obj();
      v15 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        v29 = "__nw_frame_unclaimed_length";
        v16 = "%{public}s called with null frame";
LABEL_37:
        _os_log_impl(&dword_182FBE000, v14, v15, v16, buf, 0xCu);
      }
    }
    else
    {
      v21 = v4;
      if (v26)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        v14 = __nwlog_obj();
        v15 = type;
        v23 = os_log_type_enabled(v14, type);
        if (backtrace_string)
        {
          if (v23)
          {
            *(_DWORD *)buf = 136446466;
            v29 = "__nw_frame_unclaimed_length";
            v30 = 2082;
            v31 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v14, v15, "%{public}s called with null frame, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(backtrace_string);
          v4 = v21;
          goto LABEL_38;
        }
        v4 = v21;
        if (v23)
        {
          *(_DWORD *)buf = 136446210;
          v29 = "__nw_frame_unclaimed_length";
          v16 = "%{public}s called with null frame, no backtrace";
          goto LABEL_37;
        }
      }
      else
      {
        v14 = __nwlog_obj();
        v15 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)buf = 136446210;
          v29 = "__nw_frame_unclaimed_length";
          v16 = "%{public}s called with null frame, backtrace limit exceeded";
          goto LABEL_37;
        }
      }
    }
  }
LABEL_38:
  if (v13)
    free(v13);
  v5 = 0;
LABEL_5:
  if ((v5 + v4) > *(_DWORD *)(a1 + 68))
    return 0;
  ++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v29 = "__nw_frame_unclaimed_length";
    v17 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v26 = 0;
    if (__nwlog_fault(v17, &type, &v26))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v18 = __nwlog_obj();
        v19 = type;
        if (os_log_type_enabled(v18, type))
        {
          *(_DWORD *)buf = 136446210;
          v29 = "__nw_frame_unclaimed_length";
          v20 = "%{public}s called with null frame";
LABEL_45:
          _os_log_impl(&dword_182FBE000, v18, v19, v20, buf, 0xCu);
        }
      }
      else if (v26)
      {
        v24 = (char *)__nw_create_backtrace_string();
        v18 = __nwlog_obj();
        v19 = type;
        v25 = os_log_type_enabled(v18, type);
        if (v24)
        {
          if (v25)
          {
            *(_DWORD *)buf = 136446466;
            v29 = "__nw_frame_unclaimed_length";
            v30 = 2082;
            v31 = v24;
            _os_log_impl(&dword_182FBE000, v18, v19, "%{public}s called with null frame, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v24);
          goto LABEL_46;
        }
        if (v25)
        {
          *(_DWORD *)buf = 136446210;
          v29 = "__nw_frame_unclaimed_length";
          v20 = "%{public}s called with null frame, no backtrace";
          goto LABEL_45;
        }
      }
      else
      {
        v18 = __nwlog_obj();
        v19 = type;
        if (os_log_type_enabled(v18, type))
        {
          *(_DWORD *)buf = 136446210;
          v29 = "__nw_frame_unclaimed_length";
          v20 = "%{public}s called with null frame, backtrace limit exceeded";
          goto LABEL_45;
        }
      }
    }
LABEL_46:
    if (v17)
      free(v17);
    v7 = 0;
    goto LABEL_10;
  }
  v7 = *(_DWORD *)(a2 + 52);
  if (v7)
    v7 -= *(_DWORD *)(a2 + 56) + *(_DWORD *)(a2 + 60);
LABEL_10:
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) += v7;
  v8 = (_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 32);
  if (v9)
  {
    *(_QWORD *)(v9 + 40) = *(_QWORD *)(a2 + 40);
    v10 = *(_QWORD **)(a2 + 40);
  }
  else
  {
    v10 = *(_QWORD **)(a2 + 40);
    *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) = v10;
  }
  *v10 = v9;
  *v8 = 0;
  *(_QWORD *)(a2 + 40) = 0;
  v11 = *(_QWORD *)(a1 + 56);
  v12 = *(_QWORD **)(v11 + 8);
  *(_QWORD *)(a2 + 40) = v12;
  *v12 = a2;
  *(_QWORD *)(v11 + 8) = v8;
  return 1;
}

uint64_t nw_frame_get_ecn_flag(uint64_t a1)
{
  char *v2;
  NSObject *v3;
  os_log_type_t v4;
  const char *v5;
  char *backtrace_string;
  _BOOL4 v7;
  char v8;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v11;
  __int16 v12;
  char *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (a1)
    return *(_BYTE *)(a1 + 186) & 3;
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v11 = "nw_frame_get_ecn_flag";
  v2 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v8 = 0;
  if (__nwlog_fault(v2, &type, &v8))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (os_log_type_enabled(v3, type))
      {
        *(_DWORD *)buf = 136446210;
        v11 = "nw_frame_get_ecn_flag";
        v5 = "%{public}s called with null frame";
LABEL_17:
        _os_log_impl(&dword_182FBE000, v3, v4, v5, buf, 0xCu);
      }
    }
    else if (v8)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v3 = __nwlog_obj();
      v4 = type;
      v7 = os_log_type_enabled(v3, type);
      if (backtrace_string)
      {
        if (v7)
        {
          *(_DWORD *)buf = 136446466;
          v11 = "nw_frame_get_ecn_flag";
          v12 = 2082;
          v13 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v3, v4, "%{public}s called with null frame, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_18;
      }
      if (v7)
      {
        *(_DWORD *)buf = 136446210;
        v11 = "nw_frame_get_ecn_flag";
        v5 = "%{public}s called with null frame, no backtrace";
        goto LABEL_17;
      }
    }
    else
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (os_log_type_enabled(v3, type))
      {
        *(_DWORD *)buf = 136446210;
        v11 = "nw_frame_get_ecn_flag";
        v5 = "%{public}s called with null frame, backtrace limit exceeded";
        goto LABEL_17;
      }
    }
  }
LABEL_18:
  if (v2)
    free(v2);
  return 0;
}

void nw_frame_set_ecn_flag(uint64_t a1, char a2)
{
  char *v2;
  NSObject *v3;
  os_log_type_t v4;
  const char *v5;
  char *backtrace_string;
  _BOOL4 v7;
  char v8;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v11;
  __int16 v12;
  char *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    *(_BYTE *)(a1 + 186) = *(_BYTE *)(a1 + 186) & 0xFC | a2 & 3;
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v11 = "nw_frame_set_ecn_flag";
  v2 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v8 = 0;
  if (__nwlog_fault(v2, &type, &v8))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (!os_log_type_enabled(v3, type))
        goto LABEL_18;
      *(_DWORD *)buf = 136446210;
      v11 = "nw_frame_set_ecn_flag";
      v5 = "%{public}s called with null frame";
      goto LABEL_17;
    }
    if (!v8)
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (!os_log_type_enabled(v3, type))
        goto LABEL_18;
      *(_DWORD *)buf = 136446210;
      v11 = "nw_frame_set_ecn_flag";
      v5 = "%{public}s called with null frame, backtrace limit exceeded";
      goto LABEL_17;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v3 = __nwlog_obj();
    v4 = type;
    v7 = os_log_type_enabled(v3, type);
    if (backtrace_string)
    {
      if (v7)
      {
        *(_DWORD *)buf = 136446466;
        v11 = "nw_frame_set_ecn_flag";
        v12 = 2082;
        v13 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v3, v4, "%{public}s called with null frame, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_18;
    }
    if (v7)
    {
      *(_DWORD *)buf = 136446210;
      v11 = "nw_frame_set_ecn_flag";
      v5 = "%{public}s called with null frame, no backtrace";
LABEL_17:
      _os_log_impl(&dword_182FBE000, v3, v4, v5, buf, 0xCu);
    }
  }
LABEL_18:
  if (v2)
    free(v2);
}

uint64_t nw_frame_split(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  BOOL v10;
  NSObject *v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t metadata;
  NSObject *v19;
  char *v20;
  NSObject *v21;
  os_log_type_t v22;
  const char *v23;
  char *backtrace_string;
  _BOOL4 v25;
  const char *v26;
  NSObject *v27;
  os_log_type_t v28;
  uint32_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  NSObject *v37;
  os_log_type_t v38;
  const char *v39;
  NSObject *v40;
  os_log_type_t v41;
  NSObject *v42;
  os_log_type_t v43;
  char *v44;
  _BOOL4 v45;
  NSObject *v46;
  os_log_type_t v47;
  uint32_t v48;
  char *v49;
  _BOOL4 v50;
  _BOOL4 v51;
  _BOOL4 v52;
  _BOOL4 v53;
  _BOOL4 v54;
  char *v55;
  NSObject *v56;
  os_log_type_t v57;
  const char *v58;
  NSObject *v59;
  char *v60;
  _BOOL4 v61;
  NSObject *v62;
  uint64_t v63;
  char v64;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v67;
  __int16 v68;
  uint64_t v69;
  __int16 v70;
  _BYTE v71[14];
  __int16 v72;
  unsigned int v73;
  __int16 v74;
  uint64_t v75;
  __int16 v76;
  int v77;
  uint64_t v78;

  v78 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v67 = "nw_frame_split";
    v20 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v64 = 0;
    if (__nwlog_fault(v20, &type, &v64))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v21 = __nwlog_obj();
        v22 = type;
        if (os_log_type_enabled(v21, type))
        {
          *(_DWORD *)buf = 136446210;
          v67 = "nw_frame_split";
          v23 = "%{public}s called with null frame";
LABEL_66:
          v46 = v21;
          v47 = v22;
          v48 = 12;
LABEL_106:
          _os_log_impl(&dword_182FBE000, v46, v47, v23, buf, v48);
        }
      }
      else if (v64)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        v21 = __nwlog_obj();
        v22 = type;
        v53 = os_log_type_enabled(v21, type);
        if (backtrace_string)
        {
          if (!v53)
            goto LABEL_38;
          *(_DWORD *)buf = 136446466;
          v67 = "nw_frame_split";
          v68 = 2082;
          v69 = (uint64_t)backtrace_string;
          v26 = "%{public}s called with null frame, dumping backtrace:%{public}s";
          goto LABEL_36;
        }
        if (v53)
        {
          *(_DWORD *)buf = 136446210;
          v67 = "nw_frame_split";
          v23 = "%{public}s called with null frame, no backtrace";
          goto LABEL_66;
        }
      }
      else
      {
        v21 = __nwlog_obj();
        v22 = type;
        if (os_log_type_enabled(v21, type))
        {
          *(_DWORD *)buf = 136446210;
          v67 = "nw_frame_split";
          v23 = "%{public}s called with null frame, backtrace limit exceeded";
          goto LABEL_66;
        }
      }
    }
LABEL_107:
    if (v20)
      free(v20);
    return 0;
  }
  v3 = *a1;
  if (!*a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v67 = "nw_frame_split";
    v20 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v64 = 0;
    if (__nwlog_fault(v20, &type, &v64))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v21 = __nwlog_obj();
        v22 = type;
        if (os_log_type_enabled(v21, type))
        {
          *(_DWORD *)buf = 136446210;
          v67 = "nw_frame_split";
          v23 = "%{public}s called with null *frame";
          goto LABEL_66;
        }
      }
      else if (v64)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        v21 = __nwlog_obj();
        v22 = type;
        v54 = os_log_type_enabled(v21, type);
        if (backtrace_string)
        {
          if (!v54)
            goto LABEL_38;
          *(_DWORD *)buf = 136446466;
          v67 = "nw_frame_split";
          v68 = 2082;
          v69 = (uint64_t)backtrace_string;
          v26 = "%{public}s called with null *frame, dumping backtrace:%{public}s";
          goto LABEL_36;
        }
        if (v54)
        {
          *(_DWORD *)buf = 136446210;
          v67 = "nw_frame_split";
          v23 = "%{public}s called with null *frame, no backtrace";
          goto LABEL_66;
        }
      }
      else
      {
        v21 = __nwlog_obj();
        v22 = type;
        if (os_log_type_enabled(v21, type))
        {
          *(_DWORD *)buf = 136446210;
          v67 = "nw_frame_split";
          v23 = "%{public}s called with null *frame, backtrace limit exceeded";
          goto LABEL_66;
        }
      }
    }
    goto LABEL_107;
  }
  if (a2)
  {
    if (!*(_QWORD *)(v3 + 112)
      || (*(_WORD *)(v3 + 204) & 0x100) != 0
      && g_channel_check_validity
      && !g_channel_check_validity(*a1, *(_QWORD *)(v3 + 88))
      || (v5 = *(_DWORD *)(v3 + 52)) == 0
      || ((v6 = *(unsigned int *)(v3 + 56),
           v7 = *(_DWORD *)(v3 + 60) + v6,
           v8 = v5 - v7,
           v10 = v5 == v7,
           v9 = *(_QWORD *)(v3 + 112),
           !v10)
        ? (v10 = v9 == 0)
        : (v10 = 1),
          v10))
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v11 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446210;
        v67 = "nw_frame_split";
        _os_log_impl(&dword_182FBE000, v11, OS_LOG_TYPE_ERROR, "%{public}s there are no unclaimed bytes from which to create a subframe", buf, 0xCu);
      }
      return 0;
    }
    if (v8 > a2)
    {
      v16 = v9 + v6;
      if (*(_QWORD *)(v3 + 88) == 16435934)
      {
        v17 = v3;
      }
      else
      {
        v17 = nw_frame_create(16, v16, a2, (uint64_t)__nw_frame_split_finalizer, 16435934);
        metadata = nw_frame_get_metadata(v17);
        if (!metadata)
        {
          __nwlog_obj();
          *(_DWORD *)buf = 136446466;
          v67 = "nw_frame_split";
          v68 = 2048;
          v69 = v17;
          v20 = (char *)_os_log_send_and_compose_impl();
          type = OS_LOG_TYPE_ERROR;
          v64 = 0;
          if (!__nwlog_fault(v20, &type, &v64))
            goto LABEL_107;
          if (type == OS_LOG_TYPE_FAULT)
          {
            v40 = __nwlog_obj();
            v41 = type;
            if (!os_log_type_enabled(v40, type))
              goto LABEL_107;
LABEL_52:
            *(_DWORD *)buf = 136446466;
            v67 = "nw_frame_split";
            v68 = 2048;
            v69 = v17;
            v23 = "%{public}s frame %p has no split metadata";
LABEL_104:
            v46 = v40;
            v47 = v41;
            goto LABEL_105;
          }
          if (v64)
          {
            v49 = (char *)__nw_create_backtrace_string();
            v40 = __nwlog_obj();
            v41 = type;
            v50 = os_log_type_enabled(v40, type);
            if (v49)
            {
              if (v50)
                goto LABEL_82;
              goto LABEL_83;
            }
            if (!v50)
              goto LABEL_107;
LABEL_103:
            *(_DWORD *)buf = 136446466;
            v67 = "nw_frame_split";
            v68 = 2048;
            v69 = v17;
            v23 = "%{public}s frame %p has no split metadata, no backtrace";
            goto LABEL_104;
          }
          v40 = __nwlog_obj();
          v41 = type;
          if (!os_log_type_enabled(v40, type))
            goto LABEL_107;
LABEL_87:
          *(_DWORD *)buf = 136446466;
          v67 = "nw_frame_split";
          v68 = 2048;
          v69 = v17;
          v23 = "%{public}s frame %p has no split metadata, backtrace limit exceeded";
          goto LABEL_104;
        }
        *(_QWORD *)metadata = v3;
        *(_BYTE *)(metadata + 8) = 3;
        nw_frame_inherit_metadata(v3, v17, 1);
        if (gLogDatapath)
        {
          v19 = __nwlog_obj();
          if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136446722;
            v67 = "nw_frame_split";
            v68 = 2048;
            v69 = v17;
            v70 = 2048;
            *(_QWORD *)v71 = v3;
            _os_log_impl(&dword_182FBE000, v19, OS_LOG_TYPE_DEBUG, "%{public}s inserted top of tree split frame %p with parent %p", buf, 0x20u);
          }
        }
      }
      v12 = nw_frame_create(16, v16, a2, (uint64_t)__nw_frame_split_finalizer, 16435934);
      v30 = nw_frame_create(16, v16 + a2, v8 - a2, (uint64_t)__nw_frame_split_finalizer, 16435934);
      nw_frame_inherit_metadata(v17, v12, 0);
      nw_frame_inherit_metadata(v17, v30, 1);
      v31 = nw_frame_get_metadata(v12);
      if (v31)
      {
        v32 = v31;
        v33 = nw_frame_get_metadata(v30);
        if (v33)
        {
          v34 = v33;
          v35 = nw_frame_get_metadata(v17);
          if (v35)
          {
            *(_BYTE *)(v32 + 8) = 1;
            *(_BYTE *)(v34 + 8) = 2;
            *(_QWORD *)v32 = v17;
            *(_QWORD *)v34 = v17;
            *(_BYTE *)(v35 + 9) |= 3u;
            if (gLogDatapath)
            {
              v62 = __nwlog_obj();
              if (os_log_type_enabled(v62, OS_LOG_TYPE_DEBUG))
              {
                v63 = *a1;
                *(_DWORD *)buf = 136447746;
                v67 = "nw_frame_split";
                v68 = 2048;
                v69 = v63;
                v70 = 1024;
                *(_DWORD *)v71 = v8;
                *(_WORD *)&v71[4] = 2048;
                *(_QWORD *)&v71[6] = v12;
                v72 = 1024;
                v73 = a2;
                v74 = 2048;
                v75 = v30;
                v76 = 1024;
                v77 = v8 - a2;
                _os_log_impl(&dword_182FBE000, v62, OS_LOG_TYPE_DEBUG, "%{public}s split frame %p (%u bytes) into start child %p (%u bytes) and end child %p (%u bytes)", buf, 0x3Cu);
              }
            }
            *a1 = v30;
            return v12;
          }
          __nwlog_obj();
          *(_DWORD *)buf = 136446466;
          v67 = "nw_frame_split";
          v68 = 2048;
          v69 = v17;
          v20 = (char *)_os_log_send_and_compose_impl();
          type = OS_LOG_TYPE_ERROR;
          v64 = 0;
          if (!__nwlog_fault(v20, &type, &v64))
            goto LABEL_107;
          if (type == OS_LOG_TYPE_FAULT)
          {
            v40 = __nwlog_obj();
            v41 = type;
            if (!os_log_type_enabled(v40, type))
              goto LABEL_107;
            goto LABEL_52;
          }
          if (v64)
          {
            v49 = (char *)__nw_create_backtrace_string();
            v40 = __nwlog_obj();
            v41 = type;
            v52 = os_log_type_enabled(v40, type);
            if (v49)
            {
              if (v52)
              {
LABEL_82:
                *(_DWORD *)buf = 136446722;
                v67 = "nw_frame_split";
                v68 = 2048;
                v69 = v17;
                v70 = 2082;
                *(_QWORD *)v71 = v49;
                _os_log_impl(&dword_182FBE000, v40, v41, "%{public}s frame %p has no split metadata, dumping backtrace:%{public}s", buf, 0x20u);
              }
LABEL_83:
              free(v49);
              goto LABEL_107;
            }
            if (!v52)
              goto LABEL_107;
            goto LABEL_103;
          }
          v40 = __nwlog_obj();
          v41 = type;
          if (!os_log_type_enabled(v40, type))
            goto LABEL_107;
          goto LABEL_87;
        }
        __nwlog_obj();
        *(_DWORD *)buf = 136446466;
        v67 = "nw_frame_split";
        v68 = 2048;
        v69 = v30;
        v20 = (char *)_os_log_send_and_compose_impl();
        type = OS_LOG_TYPE_ERROR;
        v64 = 0;
        if (!__nwlog_fault(v20, &type, &v64))
          goto LABEL_107;
        if (type == OS_LOG_TYPE_FAULT)
        {
          v42 = __nwlog_obj();
          v43 = type;
          if (!os_log_type_enabled(v42, type))
            goto LABEL_107;
          *(_DWORD *)buf = 136446466;
          v67 = "nw_frame_split";
          v68 = 2048;
          v69 = v30;
          v23 = "%{public}s frame %p has no split metadata";
LABEL_99:
          v46 = v42;
          v47 = v43;
LABEL_105:
          v48 = 22;
          goto LABEL_106;
        }
        if (!v64)
        {
          v42 = __nwlog_obj();
          v43 = type;
          if (!os_log_type_enabled(v42, type))
            goto LABEL_107;
          *(_DWORD *)buf = 136446466;
          v67 = "nw_frame_split";
          v68 = 2048;
          v69 = v30;
          v23 = "%{public}s frame %p has no split metadata, backtrace limit exceeded";
          goto LABEL_99;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        v42 = __nwlog_obj();
        v43 = type;
        v51 = os_log_type_enabled(v42, type);
        if (!backtrace_string)
        {
          if (!v51)
            goto LABEL_107;
          *(_DWORD *)buf = 136446466;
          v67 = "nw_frame_split";
          v68 = 2048;
          v69 = v30;
          v23 = "%{public}s frame %p has no split metadata, no backtrace";
          goto LABEL_99;
        }
        if (v51)
        {
          *(_DWORD *)buf = 136446722;
          v67 = "nw_frame_split";
          v68 = 2048;
          v69 = v30;
          v70 = 2082;
          *(_QWORD *)v71 = backtrace_string;
          v26 = "%{public}s frame %p has no split metadata, dumping backtrace:%{public}s";
          v27 = v42;
          v28 = v43;
          v29 = 32;
          goto LABEL_37;
        }
LABEL_38:
        free(backtrace_string);
        goto LABEL_107;
      }
      __nwlog_obj();
      *(_DWORD *)buf = 136446466;
      v67 = "nw_frame_split";
      v68 = 2048;
      v69 = v12;
      v36 = (char *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      v64 = 0;
      if (__nwlog_fault(v36, &type, &v64))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          v37 = __nwlog_obj();
          v38 = type;
          if (!os_log_type_enabled(v37, type))
            goto LABEL_91;
          *(_DWORD *)buf = 136446466;
          v67 = "nw_frame_split";
          v68 = 2048;
          v69 = v12;
          v39 = "%{public}s frame %p has no split metadata";
          goto LABEL_90;
        }
        if (!v64)
        {
          v37 = __nwlog_obj();
          v38 = type;
          if (!os_log_type_enabled(v37, type))
            goto LABEL_91;
          *(_DWORD *)buf = 136446466;
          v67 = "nw_frame_split";
          v68 = 2048;
          v69 = v12;
          v39 = "%{public}s frame %p has no split metadata, backtrace limit exceeded";
          goto LABEL_90;
        }
        v44 = (char *)__nw_create_backtrace_string();
        v37 = __nwlog_obj();
        v38 = type;
        v45 = os_log_type_enabled(v37, type);
        if (v44)
        {
          if (v45)
          {
            *(_DWORD *)buf = 136446722;
            v67 = "nw_frame_split";
            v68 = 2048;
            v69 = v12;
            v70 = 2082;
            *(_QWORD *)v71 = v44;
            _os_log_impl(&dword_182FBE000, v37, v38, "%{public}s frame %p has no split metadata, dumping backtrace:%{public}s", buf, 0x20u);
          }
          free(v44);
          goto LABEL_91;
        }
        if (v45)
        {
          *(_DWORD *)buf = 136446466;
          v67 = "nw_frame_split";
          v68 = 2048;
          v69 = v12;
          v39 = "%{public}s frame %p has no split metadata, no backtrace";
LABEL_90:
          _os_log_impl(&dword_182FBE000, v37, v38, v39, buf, 0x16u);
        }
      }
LABEL_91:
      if (v36)
        free(v36);
      return 0;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446210;
    v67 = "nw_frame_split";
    v20 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v64 = 0;
    if (!__nwlog_fault(v20, &type, &v64))
      goto LABEL_107;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v21 = gLogObj;
      v22 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_107;
      *(_DWORD *)buf = 136446210;
      v67 = "nw_frame_split";
      v23 = "%{public}s split_offset is beyond the unclaimed region of the frame";
      goto LABEL_66;
    }
    if (!v64)
    {
      v21 = __nwlog_obj();
      v22 = type;
      if (!os_log_type_enabled(v21, type))
        goto LABEL_107;
      *(_DWORD *)buf = 136446210;
      v67 = "nw_frame_split";
      v23 = "%{public}s split_offset is beyond the unclaimed region of the frame, backtrace limit exceeded";
      goto LABEL_66;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v21 = __nwlog_obj();
    v22 = type;
    v25 = os_log_type_enabled(v21, type);
    if (!backtrace_string)
    {
      if (!v25)
        goto LABEL_107;
      *(_DWORD *)buf = 136446210;
      v67 = "nw_frame_split";
      v23 = "%{public}s split_offset is beyond the unclaimed region of the frame, no backtrace";
      goto LABEL_66;
    }
    if (!v25)
      goto LABEL_38;
    *(_DWORD *)buf = 136446466;
    v67 = "nw_frame_split";
    v68 = 2082;
    v69 = (uint64_t)backtrace_string;
    v26 = "%{public}s split_offset is beyond the unclaimed region of the frame, dumping backtrace:%{public}s";
LABEL_36:
    v27 = v21;
    v28 = v22;
    v29 = 22;
LABEL_37:
    _os_log_impl(&dword_182FBE000, v27, v28, v26, buf, v29);
    goto LABEL_38;
  }
  v12 = nw_frame_create(0, 0, 0, (uint64_t)__nw_frame_empty_finalizer, 16435934);
  if (!v12)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v67 = "__nw_frame_create_empty_frame_with_original";
    v55 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v64 = 0;
    if (!__nwlog_fault(v55, &type, &v64))
      goto LABEL_149;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v56 = __nwlog_obj();
      v57 = type;
      if (!os_log_type_enabled(v56, type))
        goto LABEL_149;
      *(_DWORD *)buf = 136446210;
      v67 = "__nw_frame_create_empty_frame_with_original";
      v58 = "%{public}s called with null empty_frame";
    }
    else if (v64)
    {
      v60 = (char *)__nw_create_backtrace_string();
      v56 = __nwlog_obj();
      v57 = type;
      v61 = os_log_type_enabled(v56, type);
      if (v60)
      {
        if (v61)
        {
          *(_DWORD *)buf = 136446466;
          v67 = "__nw_frame_create_empty_frame_with_original";
          v68 = 2082;
          v69 = (uint64_t)v60;
          _os_log_impl(&dword_182FBE000, v56, v57, "%{public}s called with null empty_frame, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v60);
        goto LABEL_149;
      }
      if (!v61)
      {
LABEL_149:
        if (v55)
          free(v55);
        goto LABEL_19;
      }
      *(_DWORD *)buf = 136446210;
      v67 = "__nw_frame_create_empty_frame_with_original";
      v58 = "%{public}s called with null empty_frame, no backtrace";
    }
    else
    {
      v56 = __nwlog_obj();
      v57 = type;
      if (!os_log_type_enabled(v56, type))
        goto LABEL_149;
      *(_DWORD *)buf = 136446210;
      v67 = "__nw_frame_create_empty_frame_with_original";
      v58 = "%{public}s called with null empty_frame, backtrace limit exceeded";
    }
    _os_log_impl(&dword_182FBE000, v56, v57, v58, buf, 0xCu);
    goto LABEL_149;
  }
  nw_frame_inherit_metadata(v3, v12, 0);
  if (gLogDatapath)
  {
    v59 = __nwlog_obj();
    if (os_log_type_enabled(v59, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446722;
      v67 = "__nw_frame_create_empty_frame_with_original";
      v68 = 2048;
      v69 = v12;
      v70 = 2048;
      *(_QWORD *)v71 = v3;
      _os_log_impl(&dword_182FBE000, v59, OS_LOG_TYPE_DEBUG, "%{public}s created empty frame %p from original frame %p", buf, 0x20u);
    }
  }
LABEL_19:
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v13 = gLogObj;
  if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
  {
    v14 = *a1;
    *(_DWORD *)buf = 136446722;
    v67 = "nw_frame_split";
    v68 = 2048;
    v69 = v12;
    v70 = 2048;
    *(_QWORD *)v71 = v14;
    _os_log_impl(&dword_182FBE000, v13, OS_LOG_TYPE_DEBUG, "%{public}s split_offset of 0 passed, created empty frame %p from %p", buf, 0x20u);
  }
  return v12;
}

void __nw_frame_empty_finalizer(nw_frame *a1, BOOL a2, void *a3)
{
  char *v3;
  NSObject *v4;
  os_log_type_t v5;
  const char *v6;
  char *v8;
  _BOOL4 v9;
  const char *v10;
  char *backtrace_string;
  _BOOL4 v12;
  NSObject *v13;
  _BOOL4 v14;
  char v15;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  nw_frame *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v18 = "__nw_frame_empty_finalizer";
    v3 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v15 = 0;
    if (__nwlog_fault(v3, &type, &v15))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v4 = __nwlog_obj();
        v5 = type;
        if (os_log_type_enabled(v4, type))
        {
          *(_DWORD *)buf = 136446210;
          v18 = "__nw_frame_empty_finalizer";
          v6 = "%{public}s called with null frame";
LABEL_21:
          _os_log_impl(&dword_182FBE000, v4, v5, v6, buf, 0xCu);
        }
      }
      else if (v15)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        v4 = __nwlog_obj();
        v5 = type;
        v12 = os_log_type_enabled(v4, type);
        if (backtrace_string)
        {
          if (v12)
          {
            *(_DWORD *)buf = 136446466;
            v18 = "__nw_frame_empty_finalizer";
            v19 = 2082;
            v20 = (nw_frame *)backtrace_string;
            _os_log_impl(&dword_182FBE000, v4, v5, "%{public}s called with null frame, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(backtrace_string);
        }
        else if (v12)
        {
          *(_DWORD *)buf = 136446210;
          v18 = "__nw_frame_empty_finalizer";
          v6 = "%{public}s called with null frame, no backtrace";
          goto LABEL_21;
        }
      }
      else
      {
        v4 = __nwlog_obj();
        v5 = type;
        if (os_log_type_enabled(v4, type))
        {
          *(_DWORD *)buf = 136446210;
          v18 = "__nw_frame_empty_finalizer";
          v6 = "%{public}s called with null frame, backtrace limit exceeded";
          goto LABEL_21;
        }
      }
    }
LABEL_22:
    if (!v3)
      return;
    goto LABEL_23;
  }
  if (a3 != (void *)16435934)
  {
    if (a3)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      *(_DWORD *)buf = 136446210;
      v18 = "__nw_frame_empty_finalizer";
      v3 = (char *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      v15 = 0;
      if (!__nwlog_fault(v3, &type, &v15))
        goto LABEL_22;
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v4 = gLogObj;
        v5 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type))
          goto LABEL_22;
        *(_DWORD *)buf = 136446210;
        v18 = "__nw_frame_empty_finalizer";
        v6 = "%{public}s trying to finalize non-split frame";
        goto LABEL_21;
      }
      if (!v15)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v4 = gLogObj;
        v5 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type))
          goto LABEL_22;
        *(_DWORD *)buf = 136446210;
        v18 = "__nw_frame_empty_finalizer";
        v6 = "%{public}s trying to finalize non-split frame, backtrace limit exceeded";
        goto LABEL_21;
      }
      v8 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v4 = gLogObj;
      v5 = type;
      v9 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (!v8)
      {
        if (!v9)
          goto LABEL_22;
        *(_DWORD *)buf = 136446210;
        v18 = "__nw_frame_empty_finalizer";
        v6 = "%{public}s trying to finalize non-split frame, no backtrace";
        goto LABEL_21;
      }
      if (v9)
      {
        *(_DWORD *)buf = 136446466;
        v18 = "__nw_frame_empty_finalizer";
        v19 = 2082;
        v20 = (nw_frame *)v8;
        v10 = "%{public}s trying to finalize non-split frame, dumping backtrace:%{public}s";
LABEL_14:
        _os_log_impl(&dword_182FBE000, v4, v5, v10, buf, 0x16u);
        goto LABEL_15;
      }
      goto LABEL_15;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v18 = "__nw_frame_empty_finalizer";
    v3 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v15 = 0;
    if (__nwlog_fault(v3, &type, &v15))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v4 = __nwlog_obj();
        v5 = type;
        if (os_log_type_enabled(v4, type))
        {
          *(_DWORD *)buf = 136446210;
          v18 = "__nw_frame_empty_finalizer";
          v6 = "%{public}s called with null context";
          goto LABEL_21;
        }
      }
      else if (v15)
      {
        v8 = (char *)__nw_create_backtrace_string();
        v4 = __nwlog_obj();
        v5 = type;
        v14 = os_log_type_enabled(v4, type);
        if (v8)
        {
          if (v14)
          {
            *(_DWORD *)buf = 136446466;
            v18 = "__nw_frame_empty_finalizer";
            v19 = 2082;
            v20 = (nw_frame *)v8;
            v10 = "%{public}s called with null context, dumping backtrace:%{public}s";
            goto LABEL_14;
          }
LABEL_15:
          free(v8);
          if (!v3)
            return;
LABEL_23:
          free(v3);
          return;
        }
        if (v14)
        {
          *(_DWORD *)buf = 136446210;
          v18 = "__nw_frame_empty_finalizer";
          v6 = "%{public}s called with null context, no backtrace";
          goto LABEL_21;
        }
      }
      else
      {
        v4 = __nwlog_obj();
        v5 = type;
        if (os_log_type_enabled(v4, type))
        {
          *(_DWORD *)buf = 136446210;
          v18 = "__nw_frame_empty_finalizer";
          v6 = "%{public}s called with null context, backtrace limit exceeded";
          goto LABEL_21;
        }
      }
    }
    goto LABEL_22;
  }
  if (gLogDatapath)
  {
    v13 = __nwlog_obj();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446466;
      v18 = "__nw_frame_empty_finalizer";
      v19 = 2048;
      v20 = a1;
      _os_log_impl(&dword_182FBE000, v13, OS_LOG_TYPE_DEBUG, "%{public}s finalizing empty frame %p", buf, 0x16u);
    }
  }
  nw_frame_reset((uint64_t)a1, 0, 0, 0, 0);
  os_release(a1);
}

void __nw_frame_split_finalizer(nw_frame *a1, BOOL a2, void *a3)
{
  const char *v3;
  NSObject *v4;
  os_log_type_t v5;
  const char *v6;
  nw_frame *v7;
  __int16 v8;
  const char *v9;
  NSObject *v10;
  os_log_type_t v11;
  const char *v12;
  char *v13;
  uint64_t v14;
  int v15;
  char v16;
  NSObject *v17;
  char *v18;
  _BOOL4 v19;
  const char *v20;
  NSObject *v21;
  char *v22;
  _BOOL4 v23;
  NSObject *v24;
  os_log_type_t v25;
  uint32_t v26;
  char *v27;
  NSObject *v28;
  os_log_type_t v29;
  char *v30;
  _BOOL4 v31;
  _BOOL4 v32;
  _BOOL4 v33;
  char *v34;
  _BOOL4 v35;
  _BOOL4 v36;
  _BOOL4 v37;
  char *backtrace_string;
  _BOOL4 v39;
  _BOOL4 v40;
  _BOOL4 v41;
  NSObject *v42;
  NSObject *log;
  char v44;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v47;
  __int16 v48;
  uint64_t v49;
  __int16 v50;
  uint64_t v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v47 = "__nw_frame_split_finalizer";
    v3 = (const char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v44 = 0;
    if (!__nwlog_fault(v3, &type, &v44))
      goto LABEL_61;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (!os_log_type_enabled(v4, type))
        goto LABEL_61;
      *(_DWORD *)buf = 136446210;
      v47 = "__nw_frame_split_finalizer";
      v6 = "%{public}s called with null frame";
    }
    else if (v44)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v4 = __nwlog_obj();
      v5 = type;
      v39 = os_log_type_enabled(v4, type);
      if (backtrace_string)
      {
        if (v39)
        {
          *(_DWORD *)buf = 136446466;
          v47 = "__nw_frame_split_finalizer";
          v48 = 2082;
          v49 = (uint64_t)backtrace_string;
          _os_log_impl(&dword_182FBE000, v4, v5, "%{public}s called with null frame, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_61;
      }
      if (!v39)
        goto LABEL_61;
      *(_DWORD *)buf = 136446210;
      v47 = "__nw_frame_split_finalizer";
      v6 = "%{public}s called with null frame, no backtrace";
    }
    else
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (!os_log_type_enabled(v4, type))
        goto LABEL_61;
      *(_DWORD *)buf = 136446210;
      v47 = "__nw_frame_split_finalizer";
      v6 = "%{public}s called with null frame, backtrace limit exceeded";
    }
    goto LABEL_59;
  }
  if (a3 != (void *)16435934)
  {
    if (a3)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      *(_DWORD *)buf = 136446210;
      v47 = "__nw_frame_split_finalizer";
      v3 = (const char *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      v44 = 0;
      if (!__nwlog_fault(v3, &type, &v44))
        goto LABEL_61;
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v4 = gLogObj;
        v5 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type))
          goto LABEL_61;
        *(_DWORD *)buf = 136446210;
        v47 = "__nw_frame_split_finalizer";
        v6 = "%{public}s trying to finalize non-split frame";
LABEL_59:
        v24 = v4;
        v25 = v5;
        v26 = 12;
LABEL_60:
        _os_log_impl(&dword_182FBE000, v24, v25, v6, buf, v26);
        goto LABEL_61;
      }
      if (!v44)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v4 = gLogObj;
        v5 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type))
          goto LABEL_61;
        *(_DWORD *)buf = 136446210;
        v47 = "__nw_frame_split_finalizer";
        v6 = "%{public}s trying to finalize non-split frame, backtrace limit exceeded";
        goto LABEL_59;
      }
      v18 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v4 = gLogObj;
      v5 = type;
      v19 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (!v18)
      {
        if (!v19)
          goto LABEL_61;
        *(_DWORD *)buf = 136446210;
        v47 = "__nw_frame_split_finalizer";
        v6 = "%{public}s trying to finalize non-split frame, no backtrace";
        goto LABEL_59;
      }
      if (v19)
      {
        *(_DWORD *)buf = 136446466;
        v47 = "__nw_frame_split_finalizer";
        v48 = 2082;
        v49 = (uint64_t)v18;
        v20 = "%{public}s trying to finalize non-split frame, dumping backtrace:%{public}s";
        goto LABEL_44;
      }
    }
    else
    {
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      v47 = "__nw_frame_split_finalizer";
      v3 = (const char *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      v44 = 0;
      if (!__nwlog_fault(v3, &type, &v44))
        goto LABEL_61;
      if (type == OS_LOG_TYPE_FAULT)
      {
        v4 = __nwlog_obj();
        v5 = type;
        if (!os_log_type_enabled(v4, type))
          goto LABEL_61;
        *(_DWORD *)buf = 136446210;
        v47 = "__nw_frame_split_finalizer";
        v6 = "%{public}s called with null context";
        goto LABEL_59;
      }
      if (!v44)
      {
        v4 = __nwlog_obj();
        v5 = type;
        if (!os_log_type_enabled(v4, type))
          goto LABEL_61;
        *(_DWORD *)buf = 136446210;
        v47 = "__nw_frame_split_finalizer";
        v6 = "%{public}s called with null context, backtrace limit exceeded";
        goto LABEL_59;
      }
      v18 = (char *)__nw_create_backtrace_string();
      v4 = __nwlog_obj();
      v5 = type;
      v40 = os_log_type_enabled(v4, type);
      if (!v18)
      {
        if (!v40)
          goto LABEL_61;
        *(_DWORD *)buf = 136446210;
        v47 = "__nw_frame_split_finalizer";
        v6 = "%{public}s called with null context, no backtrace";
        goto LABEL_59;
      }
      if (v40)
      {
        *(_DWORD *)buf = 136446466;
        v47 = "__nw_frame_split_finalizer";
        v48 = 2082;
        v49 = (uint64_t)v18;
        v20 = "%{public}s called with null context, dumping backtrace:%{public}s";
        goto LABEL_44;
      }
    }
LABEL_45:
    free(v18);
    if (v3)
      goto LABEL_62;
    return;
  }
  v7 = a1;
  LOBYTE(v8) = *((_WORD *)a1 + 102);
  if ((*((_WORD *)a1 + 102) & 4) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446466;
    v47 = "__nw_frame_split_finalizer";
    v48 = 2048;
    v49 = (uint64_t)v7;
    v9 = (const char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v44 = 0;
    if (!__nwlog_fault(v9, &type, &v44))
      goto LABEL_134;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v10 = gLogObj;
      v11 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_134;
LABEL_12:
      *(_DWORD *)buf = 136446466;
      v47 = "__nw_frame_split_finalizer";
      v48 = 2048;
      v49 = (uint64_t)v7;
      v12 = "%{public}s frame %p has no split metadata";
    }
    else if (v44)
    {
      v22 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v10 = gLogObj;
      v11 = type;
      v23 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (v22)
      {
        if (v23)
        {
          *(_DWORD *)buf = 136446722;
          v47 = "__nw_frame_split_finalizer";
          v48 = 2048;
          v49 = (uint64_t)v7;
          v50 = 2082;
          v51 = (uint64_t)v22;
          _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s frame %p has no split metadata, dumping backtrace:%{public}s", buf, 0x20u);
        }
        free(v22);
LABEL_134:
        if (v9)
        {
LABEL_135:
          v27 = (char *)v9;
LABEL_136:
          free(v27);
        }
        return;
      }
      if (!v23)
        goto LABEL_134;
LABEL_132:
      *(_DWORD *)buf = 136446466;
      v47 = "__nw_frame_split_finalizer";
      v48 = 2048;
      v49 = (uint64_t)v7;
      v12 = "%{public}s frame %p has no split metadata, no backtrace";
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v10 = gLogObj;
      v11 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_134;
LABEL_64:
      *(_DWORD *)buf = 136446466;
      v47 = "__nw_frame_split_finalizer";
      v48 = 2048;
      v49 = (uint64_t)v7;
      v12 = "%{public}s frame %p has no split metadata, backtrace limit exceeded";
    }
    _os_log_impl(&dword_182FBE000, v10, v11, v12, buf, 0x16u);
    goto LABEL_134;
  }
  if ((*((_BYTE *)a1 + 217) & 4) != 0)
  {
    if (gLogDatapath)
    {
      v21 = __nwlog_obj();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446466;
        v47 = "__nw_frame_split_finalizer";
        v48 = 2048;
        v49 = (uint64_t)v7;
        _os_log_impl(&dword_182FBE000, v21, OS_LOG_TYPE_DEBUG, "%{public}s frame %p processed in loop, stopping", buf, 0x16u);
      }
    }
    return;
  }
  while (1)
  {
    if ((v8 & 4) != 0)
      v13 = (char *)v7 + 208;
    else
      v13 = 0;
    if ((v8 & 4) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      *(_DWORD *)buf = 136446466;
      v47 = "__nw_frame_split_finalizer";
      v48 = 2048;
      v49 = (uint64_t)v7;
      v9 = (const char *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      v44 = 0;
      if (!__nwlog_fault(v9, &type, &v44))
        goto LABEL_134;
      if (type == OS_LOG_TYPE_FAULT)
      {
        v10 = __nwlog_obj();
        v11 = type;
        if (!os_log_type_enabled(v10, type))
          goto LABEL_134;
        goto LABEL_12;
      }
      if (!v44)
      {
        v10 = __nwlog_obj();
        v11 = type;
        if (!os_log_type_enabled(v10, type))
          goto LABEL_134;
        goto LABEL_64;
      }
      v30 = (char *)__nw_create_backtrace_string();
      v10 = __nwlog_obj();
      v11 = type;
      v31 = os_log_type_enabled(v10, type);
      if (!v30)
      {
        if (!v31)
          goto LABEL_134;
        goto LABEL_132;
      }
      if (v31)
      {
        *(_DWORD *)buf = 136446722;
        v47 = "__nw_frame_split_finalizer";
        v48 = 2048;
        v49 = (uint64_t)v7;
        v50 = 2082;
        v51 = (uint64_t)v30;
        _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s frame %p has no split metadata, dumping backtrace:%{public}s", buf, 0x20u);
      }
      free(v30);
      if (v9)
        goto LABEL_135;
      return;
    }
    v14 = *(_QWORD *)v13;
    if (!*(_QWORD *)v13)
    {
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      v47 = "__nw_frame_split_finalizer";
      v3 = (const char *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      v44 = 0;
      if (!__nwlog_fault(v3, &type, &v44))
        goto LABEL_61;
      if (type == OS_LOG_TYPE_FAULT)
      {
        v4 = __nwlog_obj();
        v5 = type;
        if (!os_log_type_enabled(v4, type))
          goto LABEL_61;
        *(_DWORD *)buf = 136446210;
        v47 = "__nw_frame_split_finalizer";
        v6 = "%{public}s called with null parent_frame";
      }
      else if (v44)
      {
        v18 = (char *)__nw_create_backtrace_string();
        v4 = __nwlog_obj();
        v5 = type;
        v41 = os_log_type_enabled(v4, type);
        if (v18)
        {
          if (v41)
          {
            *(_DWORD *)buf = 136446466;
            v47 = "__nw_frame_split_finalizer";
            v48 = 2082;
            v49 = (uint64_t)v18;
            v20 = "%{public}s called with null parent_frame, dumping backtrace:%{public}s";
            goto LABEL_44;
          }
          goto LABEL_45;
        }
        if (!v41)
          goto LABEL_61;
        *(_DWORD *)buf = 136446210;
        v47 = "__nw_frame_split_finalizer";
        v6 = "%{public}s called with null parent_frame, no backtrace";
      }
      else
      {
        v4 = __nwlog_obj();
        v5 = type;
        if (!os_log_type_enabled(v4, type))
          goto LABEL_61;
        *(_DWORD *)buf = 136446210;
        v47 = "__nw_frame_split_finalizer";
        v6 = "%{public}s called with null parent_frame, backtrace limit exceeded";
      }
      goto LABEL_59;
    }
    if (gLogDatapath)
    {
      log = __nwlog_obj();
      if (os_log_type_enabled(log, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446722;
        v47 = "__nw_frame_split_finalizer";
        v48 = 2048;
        v49 = (uint64_t)v7;
        v50 = 2048;
        v51 = v14;
        _os_log_impl(&dword_182FBE000, log, OS_LOG_TYPE_DEBUG, "%{public}s processing finalize for frame %p with parent_frame %p", buf, 0x20u);
      }
    }
    v15 = v13[8];
    if (!v13[8])
    {
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      v47 = "__nw_frame_split_finalizer";
      v3 = (const char *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      v44 = 0;
      if (!__nwlog_fault(v3, &type, &v44))
        goto LABEL_61;
      if (type == OS_LOG_TYPE_FAULT)
      {
        v4 = __nwlog_obj();
        v5 = type;
        if (!os_log_type_enabled(v4, type))
          goto LABEL_61;
        *(_DWORD *)buf = 136446210;
        v47 = "__nw_frame_split_finalizer";
        v6 = "%{public}s processing finalize for split frame that isn't a child";
        goto LABEL_59;
      }
      if (!v44)
      {
        v4 = __nwlog_obj();
        v5 = type;
        if (!os_log_type_enabled(v4, type))
          goto LABEL_61;
        *(_DWORD *)buf = 136446210;
        v47 = "__nw_frame_split_finalizer";
        v6 = "%{public}s processing finalize for split frame that isn't a child, backtrace limit exceeded";
        goto LABEL_59;
      }
      v18 = (char *)__nw_create_backtrace_string();
      v4 = __nwlog_obj();
      v5 = type;
      v32 = os_log_type_enabled(v4, type);
      if (!v18)
      {
        if (!v32)
          goto LABEL_61;
        *(_DWORD *)buf = 136446210;
        v47 = "__nw_frame_split_finalizer";
        v6 = "%{public}s processing finalize for split frame that isn't a child, no backtrace";
        goto LABEL_59;
      }
      if (!v32)
        goto LABEL_45;
      *(_DWORD *)buf = 136446466;
      v47 = "__nw_frame_split_finalizer";
      v48 = 2082;
      v49 = (uint64_t)v18;
      v20 = "%{public}s processing finalize for split frame that isn't a child, dumping backtrace:%{public}s";
LABEL_44:
      _os_log_impl(&dword_182FBE000, v4, v5, v20, buf, 0x16u);
      goto LABEL_45;
    }
    if (v15 == 3)
    {
      if (gLogDatapath)
      {
        v42 = __nwlog_obj();
        if (os_log_type_enabled(v42, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136446722;
          v47 = "__nw_frame_split_finalizer";
          v48 = 2048;
          v49 = (uint64_t)v7;
          v50 = 2048;
          v51 = v14;
          _os_log_impl(&dword_182FBE000, v42, OS_LOG_TYPE_DEBUG, "%{public}s finalizing top of tree frame %p, finalizing parent immediately (%p)", buf, 0x20u);
        }
      }
      nw_frame_finalize(v14);
      if ((v13[9] & 4) != 0)
        nw_frame_finalize((uint64_t)v7);
      nw_frame_reset((uint64_t)v7, 0, 0, 0, 0);
      os_release(v7);
      return;
    }
    if (*(_QWORD *)(v14 + 88) != 16435934)
    {
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      v47 = "__nw_frame_split_finalizer";
      v3 = (const char *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      v44 = 0;
      if (!__nwlog_fault(v3, &type, &v44))
        goto LABEL_61;
      if (type == OS_LOG_TYPE_FAULT)
      {
        v4 = __nwlog_obj();
        v5 = type;
        if (!os_log_type_enabled(v4, type))
          goto LABEL_61;
        *(_DWORD *)buf = 136446210;
        v47 = "__nw_frame_split_finalizer";
        v6 = "%{public}s processing finalize for split frame that has parent missing sentinel";
        goto LABEL_59;
      }
      if (!v44)
      {
        v4 = __nwlog_obj();
        v5 = type;
        if (!os_log_type_enabled(v4, type))
          goto LABEL_61;
        *(_DWORD *)buf = 136446210;
        v47 = "__nw_frame_split_finalizer";
        v6 = "%{public}s processing finalize for split frame that has parent missing sentinel, backtrace limit exceeded";
        goto LABEL_59;
      }
      v18 = (char *)__nw_create_backtrace_string();
      v4 = __nwlog_obj();
      v5 = type;
      v33 = os_log_type_enabled(v4, type);
      if (!v18)
      {
        if (!v33)
          goto LABEL_61;
        *(_DWORD *)buf = 136446210;
        v47 = "__nw_frame_split_finalizer";
        v6 = "%{public}s processing finalize for split frame that has parent missing sentinel, no backtrace";
        goto LABEL_59;
      }
      if (!v33)
        goto LABEL_45;
      *(_DWORD *)buf = 136446466;
      v47 = "__nw_frame_split_finalizer";
      v48 = 2082;
      v49 = (uint64_t)v18;
      v20 = "%{public}s processing finalize for split frame that has parent missing sentinel, dumping backtrace:%{public}s";
      goto LABEL_44;
    }
    if ((*(_WORD *)(v14 + 204) & 4) == 0)
    {
      __nwlog_obj();
      *(_DWORD *)buf = 136446466;
      v47 = "__nw_frame_split_finalizer";
      v48 = 2048;
      v49 = v14;
      v3 = (const char *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      v44 = 0;
      if (!__nwlog_fault(v3, &type, &v44))
        goto LABEL_61;
      if (type == OS_LOG_TYPE_FAULT)
      {
        v28 = __nwlog_obj();
        v29 = type;
        if (!os_log_type_enabled(v28, type))
          goto LABEL_61;
        *(_DWORD *)buf = 136446466;
        v47 = "__nw_frame_split_finalizer";
        v48 = 2048;
        v49 = v14;
        v6 = "%{public}s frame %p has no split metadata";
LABEL_144:
        v24 = v28;
        v25 = v29;
        v26 = 22;
        goto LABEL_60;
      }
      if (!v44)
      {
        v28 = __nwlog_obj();
        v29 = type;
        if (!os_log_type_enabled(v28, type))
          goto LABEL_61;
        *(_DWORD *)buf = 136446466;
        v47 = "__nw_frame_split_finalizer";
        v48 = 2048;
        v49 = v14;
        v6 = "%{public}s frame %p has no split metadata, backtrace limit exceeded";
        goto LABEL_144;
      }
      v34 = (char *)__nw_create_backtrace_string();
      v28 = __nwlog_obj();
      v29 = type;
      v35 = os_log_type_enabled(v28, type);
      if (!v34)
      {
        if (!v35)
          goto LABEL_61;
        *(_DWORD *)buf = 136446466;
        v47 = "__nw_frame_split_finalizer";
        v48 = 2048;
        v49 = v14;
        v6 = "%{public}s frame %p has no split metadata, no backtrace";
        goto LABEL_144;
      }
      if (v35)
      {
        *(_DWORD *)buf = 136446722;
        v47 = "__nw_frame_split_finalizer";
        v48 = 2048;
        v49 = v14;
        v50 = 2082;
        v51 = (uint64_t)v34;
        _os_log_impl(&dword_182FBE000, v28, v29, "%{public}s frame %p has no split metadata, dumping backtrace:%{public}s", buf, 0x20u);
      }
      free(v34);
      if (v3)
        goto LABEL_62;
      return;
    }
    if (v15 == 2)
      break;
    if (v15 != 1)
      goto LABEL_31;
    if ((*(_BYTE *)(v14 + 217) & 1) == 0)
    {
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      v47 = "__nw_frame_split_finalizer";
      v3 = (const char *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      v44 = 0;
      if (!__nwlog_fault(v3, &type, &v44))
        goto LABEL_61;
      if (type == OS_LOG_TYPE_FAULT)
      {
        v4 = __nwlog_obj();
        v5 = type;
        if (!os_log_type_enabled(v4, type))
          goto LABEL_61;
        *(_DWORD *)buf = 136446210;
        v47 = "__nw_frame_split_finalizer";
        v6 = "%{public}s parent frame is not waiting for our start child finalizer";
        goto LABEL_59;
      }
      if (!v44)
      {
        v4 = __nwlog_obj();
        v5 = type;
        if (!os_log_type_enabled(v4, type))
          goto LABEL_61;
        *(_DWORD *)buf = 136446210;
        v47 = "__nw_frame_split_finalizer";
        v6 = "%{public}s parent frame is not waiting for our start child finalizer, backtrace limit exceeded";
        goto LABEL_59;
      }
      v18 = (char *)__nw_create_backtrace_string();
      v4 = __nwlog_obj();
      v5 = type;
      v36 = os_log_type_enabled(v4, type);
      if (v18)
      {
        if (!v36)
          goto LABEL_45;
        *(_DWORD *)buf = 136446466;
        v47 = "__nw_frame_split_finalizer";
        v48 = 2082;
        v49 = (uint64_t)v18;
        v20 = "%{public}s parent frame is not waiting for our start child finalizer, dumping backtrace:%{public}s";
        goto LABEL_44;
      }
      if (v36)
      {
        *(_DWORD *)buf = 136446210;
        v47 = "__nw_frame_split_finalizer";
        v6 = "%{public}s parent frame is not waiting for our start child finalizer, no backtrace";
        goto LABEL_59;
      }
      goto LABEL_61;
    }
    v16 = *(_BYTE *)(v14 + 217) & 0xFE;
LABEL_30:
    *(_BYTE *)(v14 + 217) = v16;
LABEL_31:
    *(_QWORD *)v13 = 0;
    if ((v13[9] & 4) != 0)
      nw_frame_finalize((uint64_t)v7);
    nw_frame_reset((uint64_t)v7, 0, 0, 0, 0);
    os_release(v7);
    if ((*(_BYTE *)(v14 + 217) & 3) != 0)
      return;
    if (gLogDatapath)
    {
      v17 = __nwlog_obj();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446466;
        v47 = "__nw_frame_split_finalizer";
        v48 = 2048;
        v49 = v14;
        _os_log_impl(&dword_182FBE000, v17, OS_LOG_TYPE_DEBUG, "%{public}s continuing to parent frame %p because both children have been finalized", buf, 0x16u);
      }
    }
    *(_BYTE *)(v14 + 217) |= 4u;
    v8 = *(_WORD *)(v14 + 204);
    v7 = (nw_frame *)v14;
  }
  if ((*(_BYTE *)(v14 + 217) & 2) != 0)
  {
    v16 = *(_BYTE *)(v14 + 217) & 0xFD;
    goto LABEL_30;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v47 = "__nw_frame_split_finalizer";
  v3 = (const char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v44 = 0;
  if (!__nwlog_fault(v3, &type, &v44))
    goto LABEL_61;
  if (type == OS_LOG_TYPE_FAULT)
  {
    v4 = __nwlog_obj();
    v5 = type;
    if (!os_log_type_enabled(v4, type))
      goto LABEL_61;
    *(_DWORD *)buf = 136446210;
    v47 = "__nw_frame_split_finalizer";
    v6 = "%{public}s parent frame is not waiting for our end child finalizer";
    goto LABEL_59;
  }
  if (!v44)
  {
    v4 = __nwlog_obj();
    v5 = type;
    if (!os_log_type_enabled(v4, type))
      goto LABEL_61;
    *(_DWORD *)buf = 136446210;
    v47 = "__nw_frame_split_finalizer";
    v6 = "%{public}s parent frame is not waiting for our end child finalizer, backtrace limit exceeded";
    goto LABEL_59;
  }
  v18 = (char *)__nw_create_backtrace_string();
  v4 = __nwlog_obj();
  v5 = type;
  v37 = os_log_type_enabled(v4, type);
  if (v18)
  {
    if (!v37)
      goto LABEL_45;
    *(_DWORD *)buf = 136446466;
    v47 = "__nw_frame_split_finalizer";
    v48 = 2082;
    v49 = (uint64_t)v18;
    v20 = "%{public}s parent frame is not waiting for our end child finalizer, dumping backtrace:%{public}s";
    goto LABEL_44;
  }
  if (v37)
  {
    *(_DWORD *)buf = 136446210;
    v47 = "__nw_frame_split_finalizer";
    v6 = "%{public}s parent frame is not waiting for our end child finalizer, no backtrace";
    goto LABEL_59;
  }
LABEL_61:
  if (v3)
  {
LABEL_62:
    v27 = (char *)v3;
    goto LABEL_136;
  }
}

void __nw_frame_custom_finalizer(nw_frame *a1, BOOL a2, void *a3)
{
  void *buffer;

  buffer = (void *)nw_frame_get_buffer((uint64_t)a1, 0);
  if (buffer)
    free(buffer);
  nw_frame_reset((uint64_t)a1, 0, 0, 0, 0);
  if (a1)
    os_release(a1);
}

uint64_t nw_frame_get_tso_segment_size(uint64_t a1, BOOL *a2)
{
  char *v3;
  NSObject *v4;
  os_log_type_t v5;
  const char *v6;
  char *backtrace_string;
  _BOOL4 v8;
  const char *v9;
  _BOOL4 v10;
  char v11;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (a2)
    {
      *a2 = (*(_BYTE *)(a1 + 206) & 2) != 0;
      return *(unsigned __int16 *)(a1 + 198);
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v14 = "__nw_frame_get_tso_segment_size";
    v3 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v11 = 0;
    if (!__nwlog_fault(v3, &type, &v11))
      goto LABEL_32;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        v14 = "__nw_frame_get_tso_segment_size";
        v6 = "%{public}s called with null tso_ipv6";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (!v11)
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        v14 = "__nw_frame_get_tso_segment_size";
        v6 = "%{public}s called with null tso_ipv6, backtrace limit exceeded";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v4 = __nwlog_obj();
    v5 = type;
    v10 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        v14 = "__nw_frame_get_tso_segment_size";
        v6 = "%{public}s called with null tso_ipv6, no backtrace";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (v10)
    {
      *(_DWORD *)buf = 136446466;
      v14 = "__nw_frame_get_tso_segment_size";
      v15 = 2082;
      v16 = backtrace_string;
      v9 = "%{public}s called with null tso_ipv6, dumping backtrace:%{public}s";
      goto LABEL_21;
    }
    goto LABEL_22;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v14 = "__nw_frame_get_tso_segment_size";
  v3 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v11 = 0;
  if (!__nwlog_fault(v3, &type, &v11))
    goto LABEL_32;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v11)
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        v14 = "__nw_frame_get_tso_segment_size";
        v6 = "%{public}s called with null frame, backtrace limit exceeded";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v4 = __nwlog_obj();
    v5 = type;
    v8 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (v8)
      {
        *(_DWORD *)buf = 136446210;
        v14 = "__nw_frame_get_tso_segment_size";
        v6 = "%{public}s called with null frame, no backtrace";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (v8)
    {
      *(_DWORD *)buf = 136446466;
      v14 = "__nw_frame_get_tso_segment_size";
      v15 = 2082;
      v16 = backtrace_string;
      v9 = "%{public}s called with null frame, dumping backtrace:%{public}s";
LABEL_21:
      _os_log_impl(&dword_182FBE000, v4, v5, v9, buf, 0x16u);
    }
LABEL_22:
    free(backtrace_string);
    goto LABEL_32;
  }
  v4 = __nwlog_obj();
  v5 = type;
  if (os_log_type_enabled(v4, type))
  {
    *(_DWORD *)buf = 136446210;
    v14 = "__nw_frame_get_tso_segment_size";
    v6 = "%{public}s called with null frame";
LABEL_31:
    _os_log_impl(&dword_182FBE000, v4, v5, v6, buf, 0xCu);
  }
LABEL_32:
  if (v3)
    free(v3);
  return 0;
}

void nw_frame_set_tso_segment_size(uint64_t a1, __int16 a2, int a3)
{
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  unsigned int v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  const char *v11;
  char *backtrace_string;
  _BOOL4 v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v4 = *(unsigned __int16 *)(a1 + 204);
    v3 = a1 + 204;
    *(_WORD *)(v3 - 6) = a2;
    v5 = v4 | (*(unsigned __int8 *)(v3 + 2) << 16);
    if (a3)
      v6 = 0x20000;
    else
      v6 = 0;
    v7 = v5 & 0xFFFDFFFF;
    *(_WORD *)v3 = v7;
    *(_BYTE *)(v3 + 2) = (v7 | v6) >> 16;
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v17 = "__nw_frame_set_tso_segment_size";
  v8 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v8, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v9 = __nwlog_obj();
      v10 = type;
      if (!os_log_type_enabled(v9, type))
        goto LABEL_21;
      *(_DWORD *)buf = 136446210;
      v17 = "__nw_frame_set_tso_segment_size";
      v11 = "%{public}s called with null frame";
      goto LABEL_20;
    }
    if (!v14)
    {
      v9 = __nwlog_obj();
      v10 = type;
      if (!os_log_type_enabled(v9, type))
        goto LABEL_21;
      *(_DWORD *)buf = 136446210;
      v17 = "__nw_frame_set_tso_segment_size";
      v11 = "%{public}s called with null frame, backtrace limit exceeded";
      goto LABEL_20;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v9 = __nwlog_obj();
    v10 = type;
    v13 = os_log_type_enabled(v9, type);
    if (backtrace_string)
    {
      if (v13)
      {
        *(_DWORD *)buf = 136446466;
        v17 = "__nw_frame_set_tso_segment_size";
        v18 = 2082;
        v19 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null frame, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_21;
    }
    if (v13)
    {
      *(_DWORD *)buf = 136446210;
      v17 = "__nw_frame_set_tso_segment_size";
      v11 = "%{public}s called with null frame, no backtrace";
LABEL_20:
      _os_log_impl(&dword_182FBE000, v9, v10, v11, buf, 0xCu);
    }
  }
LABEL_21:
  if (v8)
    free(v8);
}

uint64_t NWPBAddressEndpointReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  uint64_t v4;
  unint64_t v5;
  int *v6;
  unint64_t v7;
  int *v8;
  int *v10;
  uint64_t v11;
  void *v12;
  _BYTE *v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  int v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  int v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  int v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  int v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  int v51;
  int v52;
  BOOL v53;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int)*MEMORY[0x1E0D82BF0];
  v5 = *(_QWORD *)(a2 + v4);
  v6 = (int *)MEMORY[0x1E0D82BD8];
  v7 = *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]);
  v8 = (int *)MEMORY[0x1E0D82BC8];
  if (v5 < v7)
  {
    v10 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      v13 = (_BYTE *)(a2 + *v8);
      if (*v13)
        return *(_BYTE *)(a2 + *v8) == 0;
      if (v5 >= v7)
        break;
      v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v10) + v5);
      *(_QWORD *)(a2 + (int)v4) = v5 + 1;
      v15 = v14 & 0x7F;
      if ((v14 & 0x80) == 0)
        goto LABEL_39;
      v16 = *v3;
      v17 = *(_QWORD *)(a2 + v16);
      if (v17 == -1 || v17 >= *(_QWORD *)(a2 + *v6))
        goto LABEL_37;
      v18 = v17 + 1;
      v19 = *(char *)(*(_QWORD *)(a2 + *v10) + v17);
      *(_QWORD *)(a2 + v16) = v18;
      v15 |= (unint64_t)(v19 & 0x7F) << 7;
      if ((v19 & 0x80000000) == 0)
        goto LABEL_39;
      v20 = *v3;
      v21 = *(_QWORD *)(a2 + v20);
      if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v6))
        goto LABEL_37;
      v22 = v21 + 1;
      v23 = *(char *)(*(_QWORD *)(a2 + *v10) + v21);
      *(_QWORD *)(a2 + v20) = v22;
      v15 |= (unint64_t)(v23 & 0x7F) << 14;
      if ((v23 & 0x80000000) == 0)
        goto LABEL_39;
      v24 = *v3;
      v25 = *(_QWORD *)(a2 + v24);
      if (v25 == -1 || v25 >= *(_QWORD *)(a2 + *v6))
        goto LABEL_37;
      v26 = v25 + 1;
      v27 = *(char *)(*(_QWORD *)(a2 + *v10) + v25);
      *(_QWORD *)(a2 + v24) = v26;
      v15 |= (unint64_t)(v27 & 0x7F) << 21;
      if ((v27 & 0x80000000) == 0)
        goto LABEL_39;
      v28 = *v3;
      v29 = *(_QWORD *)(a2 + v28);
      if (v29 == -1 || v29 >= *(_QWORD *)(a2 + *v6))
        goto LABEL_37;
      v30 = v29 + 1;
      v31 = *(char *)(*(_QWORD *)(a2 + *v10) + v29);
      *(_QWORD *)(a2 + v28) = v30;
      v15 |= (unint64_t)(v31 & 0x7F) << 28;
      if ((v31 & 0x80000000) == 0)
        goto LABEL_39;
      v32 = *v3;
      v33 = *(_QWORD *)(a2 + v32);
      if (v33 == -1 || v33 >= *(_QWORD *)(a2 + *v6))
        goto LABEL_37;
      v34 = v33 + 1;
      v35 = *(char *)(*(_QWORD *)(a2 + *v10) + v33);
      *(_QWORD *)(a2 + v32) = v34;
      if ((v35 & 0x80000000) == 0)
        goto LABEL_39;
      v36 = *v3;
      v37 = *(_QWORD *)(a2 + v36);
      if (v37 == -1 || v37 >= *(_QWORD *)(a2 + *v6))
        goto LABEL_37;
      v38 = v37 + 1;
      v39 = *(char *)(*(_QWORD *)(a2 + *v10) + v37);
      *(_QWORD *)(a2 + v36) = v38;
      if ((v39 & 0x80000000) == 0)
        goto LABEL_39;
      v40 = *v3;
      v41 = *(_QWORD *)(a2 + v40);
      if (v41 == -1 || v41 >= *(_QWORD *)(a2 + *v6))
        goto LABEL_37;
      v42 = v41 + 1;
      v43 = *(char *)(*(_QWORD *)(a2 + *v10) + v41);
      *(_QWORD *)(a2 + v40) = v42;
      if ((v43 & 0x80000000) == 0)
        goto LABEL_39;
      v44 = *v3;
      v45 = *(_QWORD *)(a2 + v44);
      if (v45 == -1 || v45 >= *(_QWORD *)(a2 + *v6))
        goto LABEL_37;
      v46 = v45 + 1;
      v47 = *(char *)(*(_QWORD *)(a2 + *v10) + v45);
      *(_QWORD *)(a2 + v44) = v46;
      if ((v47 & 0x80000000) == 0)
        goto LABEL_39;
      v48 = *v3;
      v49 = *(_QWORD *)(a2 + v48);
      if (v49 == -1 || v49 >= *(_QWORD *)(a2 + *v6))
      {
LABEL_37:
        v13 = (_BYTE *)(a2 + *v8);
        goto LABEL_38;
      }
      v50 = v49 + 1;
      v51 = *(char *)(*(_QWORD *)(a2 + *v10) + v49);
      *(_QWORD *)(a2 + v48) = v50;
      if (v51 < 0)
      {
        v15 = 0;
        v52 = *(unsigned __int8 *)(a2 + *v8);
        goto LABEL_41;
      }
LABEL_39:
      v52 = *(unsigned __int8 *)(a2 + *v8);
      if (*(_BYTE *)(a2 + *v8))
        v15 = 0;
LABEL_41:
      if (v52)
        v53 = 1;
      else
        v53 = (v15 & 7) == 4;
      if (v53)
        return *(_BYTE *)(a2 + *v8) == 0;
      if ((v15 >> 3) == 1)
      {
        PBReaderReadData();
        v11 = objc_claimAutoreleasedReturnValue();
        v12 = *(void **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v11;

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
      v4 = *v3;
      v5 = *(_QWORD *)(a2 + v4);
      v7 = *(_QWORD *)(a2 + *v6);
      if (v5 >= v7)
        return *(_BYTE *)(a2 + *v8) == 0;
    }
    v15 = 0;
LABEL_38:
    *v13 = 1;
    goto LABEL_39;
  }
  return *(_BYTE *)(a2 + *v8) == 0;
}

uint64_t llhttp__internal__run(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t result;
  const char *v7;
  int v8;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  int v12;
  uint64_t (**v13)(uint64_t);
  uint64_t (*v14)(uint64_t);
  int v15;
  int v16;
  int v17;
  unsigned int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  unsigned int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  unsigned int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  unsigned int v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t (*v42)(uint64_t, uint64_t, unsigned __int8 *);
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t (*v47)(uint64_t, uint64_t, unsigned __int8 *);
  int v48;
  unsigned int v49;
  char v50;
  char v51;
  char v52;
  char v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t (*v57)(uint64_t, uint64_t, unsigned __int8 *);
  int v58;
  uint64_t v59;
  uint64_t (*v60)(uint64_t);
  int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  int v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t (*v75)(uint64_t, uint64_t, unsigned __int8 *);
  int v76;
  uint64_t v77;
  uint64_t (*v78)(uint64_t);
  int v79;
  const char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t (*v83)(uint64_t, uint64_t, unsigned __int8 *);
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t (*v87)(uint64_t, uint64_t, unsigned __int8 *);
  int v88;
  int v89;
  int v90;
  unsigned int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  unsigned int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  unsigned int v103;
  int v104;
  int v105;
  int v106;
  int v107;
  unsigned int v108;
  int v109;
  int v110;
  int v111;
  int v112;
  unsigned int v113;
  int v114;
  int v115;
  int v116;
  int v117;
  unsigned int v118;
  int v119;
  int v120;
  int v121;
  int v122;
  unsigned int v123;
  int v124;
  int v125;
  int v126;
  int v127;
  unsigned int v128;
  int v129;
  int v130;
  int v131;
  int v132;
  unsigned int v133;
  int v134;
  int v135;
  int v136;
  int v137;
  int v138;
  unsigned int v139;
  int v140;
  int v141;
  int v142;
  int v143;
  unsigned int v144;
  int v145;
  int v146;
  int v147;
  int v148;
  unsigned int v149;
  int v150;
  int v151;
  int v152;
  int v153;
  unsigned int v154;
  int v155;
  int v156;
  int v157;
  int v158;
  int v159;
  unsigned int v160;
  int v161;
  int v162;
  int v163;
  int v164;
  int v165;
  unsigned int v166;
  int v167;
  int v168;
  int v169;
  int v170;
  unsigned int v171;
  int v172;
  int v173;
  int v174;
  int v175;
  unsigned int v176;
  int v177;
  int v178;
  int v179;
  int v180;
  unsigned int v181;
  int v182;
  int v183;
  int v184;
  int v185;
  int v186;
  unsigned int v187;
  int v188;
  int v189;
  int v190;
  int v191;
  unsigned int v192;
  int v193;
  int v194;
  int v195;
  int v196;
  unsigned int v197;
  int v198;
  int v199;
  int v200;
  int v201;
  unsigned int v202;
  int v203;
  int v204;
  int v205;
  int v206;
  int v207;
  int v208;
  unsigned int v209;
  int v210;
  int v211;
  int v212;
  int v213;
  unsigned int v214;
  int v215;
  int v216;
  int v217;
  int v218;
  int v219;
  unsigned int v220;
  int v221;
  int v222;
  int v223;
  int v224;
  unsigned int v225;
  int v226;
  int v227;
  int v228;
  int v229;
  unsigned int v230;
  int v231;
  int v232;
  int v233;
  int v234;
  unsigned int v235;
  int v236;
  int v237;
  int v238;
  int v239;
  unsigned int v240;
  int v241;
  int v242;
  int v243;
  int v244;
  unsigned int v245;
  int v246;
  int v247;
  int v248;
  int v249;
  int v250;
  int v251;
  unsigned int v252;
  int v253;
  int v254;
  int v255;
  int v256;
  int v257;
  unsigned int v258;
  int v259;
  int v260;
  int v261;
  int v262;
  unsigned int v263;
  int v264;
  int v265;
  int v266;
  int v267;
  unsigned int v268;
  int v269;
  int v270;
  int v271;
  int v272;
  int v273;
  unsigned int v274;
  int v275;
  int v276;
  int v277;
  int v278;
  unsigned int v279;
  int v280;
  int v281;
  int v282;
  int v283;
  int v284;
  unsigned int v285;
  int v286;
  int v287;
  int v288;
  int v289;
  unsigned int v290;
  int v291;
  int v292;
  int v293;
  int v294;
  int v295;
  unsigned int v296;
  int v297;
  int v298;
  int v299;
  int v300;
  unsigned int v301;
  int v302;
  int v303;
  int v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t (*v307)(uint64_t, uint64_t, unsigned __int8 *);
  int v308;
  uint64_t v309;
  uint64_t (*v310)(uint64_t);
  int v311;
  int v312;
  int v313;
  int v315;
  int v317;
  int v318;
  unsigned __int8 *v319;
  unsigned int v320;
  const char *v321;
  int v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t (*v325)(uint64_t, uint64_t, unsigned __int8 *);
  int v326;
  int v327;
  uint64_t v329;
  uint64_t v330;
  uint64_t (*v331)(uint64_t, uint64_t, unsigned __int8 *);
  int v332;
  int v333;
  int v334;
  uint64_t v336;
  uint64_t (*v337)(uint64_t);
  int v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t (*v341)(uint64_t, uint64_t, unsigned __int8 *);
  int v342;
  int v343;
  int v345;
  uint64_t v347;
  uint64_t (*v348)(uint64_t);
  int v349;
  int v350;
  int v351;
  unsigned int v352;
  int v353;
  int v354;
  int v355;
  unsigned int v356;
  int v357;
  unsigned int v358;
  int v359;
  int v360;
  int v361;
  unsigned int v362;
  int v363;
  unsigned int v364;
  int v365;
  int v366;
  int v367;
  unsigned int v368;
  char v369;
  char v370;
  char v371;
  char v372;
  int v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t (*v376)(uint64_t, uint64_t, unsigned __int8 *);
  int v377;
  uint64_t v378;
  uint64_t (*v379)(uint64_t);
  int v380;
  int v381;
  int v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t (*v385)(uint64_t, uint64_t, unsigned __int8 *);
  int v386;
  int v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t (*v391)(uint64_t, uint64_t, unsigned __int8 *);
  int v392;
  int v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t (*v396)(uint64_t, uint64_t, unsigned __int8 *);
  int v397;
  int v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t (*v401)(uint64_t, uint64_t, unsigned __int8 *);
  int v402;
  int v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t (*v406)(uint64_t, uint64_t, unsigned __int8 *);
  int v407;
  int v408;
  int v409;
  int v410;
  int v411;
  int v412;
  int v413;
  int v414;
  int v415;
  int v416;
  int v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t (*v420)(uint64_t, uint64_t, unsigned __int8 *);
  int v421;
  int v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t (*v425)(uint64_t, uint64_t, unsigned __int8 *);
  int v426;
  int v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t (*v430)(uint64_t, uint64_t, unsigned __int8 *);
  int v431;
  uint64_t v432;
  uint64_t (*v433)(uint64_t);
  int v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t (*v437)(uint64_t, uint64_t, unsigned __int8 *);
  int v438;
  uint64_t v439;
  uint64_t (*v440)(uint64_t);
  int v441;
  const char *v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t (*v445)(uint64_t, uint64_t, unsigned __int8 *);
  int v446;
  int v447;
  uint64_t v448;
  uint64_t (*v449)(uint64_t);
  const char *v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t (*v453)(uint64_t, uint64_t, unsigned __int8 *);
  int v454;
  uint64_t v455;
  uint64_t (*v456)(uint64_t);
  int v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t (*v460)(uint64_t, uint64_t, unsigned __int8 *);
  int v461;
  uint64_t v462;
  uint64_t (*v463)(uint64_t);
  int v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t (*v467)(uint64_t, uint64_t, unsigned __int8 *);
  int v468;
  uint64_t v469;
  uint64_t (*v470)(uint64_t);
  int v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t (*v474)(uint64_t, uint64_t, unsigned __int8 *);
  int v475;
  int v476;
  uint64_t v477;
  uint64_t (*v478)(uint64_t);
  uint64_t v479;
  uint64_t v480;
  uint64_t (*v481)(uint64_t, uint64_t, unsigned __int8 *);
  int v482;
  int v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t (*v486)(uint64_t, uint64_t, unsigned __int8 *);
  int v487;
  int v488;
  int v489;
  int v490;
  int v491;
  int v492;
  int v493;
  int v494;
  int v495;
  int v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t (*v499)(uint64_t, uint64_t, unsigned __int8 *);
  int v500;
  int v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t (*v504)(uint64_t, uint64_t, unsigned __int8 *);
  int v505;
  uint64_t v506;
  uint64_t (*v507)(uint64_t);
  int v508;
  int v509;
  uint64_t v510;
  uint64_t (*v511)(uint64_t);
  int v512;
  unint64_t v513;
  unint64_t v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t (*v517)(uint64_t, uint64_t, unsigned __int8 *);
  int v518;
  int v519;
  int v520;
  uint64_t v521;
  uint64_t (*v522)(uint64_t);
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t (*v526)(uint64_t, uint64_t, unsigned __int8 *);
  int v527;
  int v528;
  int v529;
  int v530;
  int v531;
  uint64_t v533;
  uint64_t v534;
  uint64_t (*v535)(uint64_t, uint64_t, unsigned __int8 *);
  int v536;
  int v537;
  int v538;
  uint64_t v540;
  uint64_t v541;
  uint64_t (*v542)(uint64_t, uint64_t, unsigned __int8 *);
  int v543;
  int v544;
  int v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t (*v548)(uint64_t, uint64_t, unsigned __int8 *);
  int v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t (*v552)(uint64_t, uint64_t, unsigned __int8 *);
  int v553;
  int v554;
  int v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t (*v558)(uint64_t, uint64_t, unsigned __int8 *);
  int v559;
  int v560;
  int v561;
  unsigned __int8 *v562;
  unint64_t v563;
  uint64_t v564;
  uint64_t v565;
  __int16 v566;
  int v567;
  uint64_t v569;
  uint64_t v570;
  uint64_t (*v571)(uint64_t, uint64_t, unsigned __int8 *);
  int v572;
  int v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t (*v576)(uint64_t, uint64_t, unsigned __int8 *);
  int v577;
  int v578;
  __int16 v579;
  unsigned int v580;
  unsigned __int8 *v581;
  int v582;
  int v583;
  int v584;
  int v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t (*v589)(uint64_t, uint64_t, unsigned __int8 *);
  int v590;
  int v591;
  int v592;
  uint64_t v593;
  uint64_t (*v594)(uint64_t, unsigned __int8 *, _QWORD);
  int v595;
  int v596;
  int v597;
  __int16 v599;
  int v600;
  __int16 v601;
  int v602;
  const char *v603;
  uint64_t v604;
  uint64_t (*v605)(uint64_t);
  int v606;
  int v607;
  int v608;
  int v609;
  unsigned int v610;
  int v611;
  int v612;
  int v613;
  int v614;
  int v615;
  unsigned int v616;
  int v617;
  int v618;
  int v619;
  char v620;
  int v621;
  unsigned int v622;
  int v623;
  int v624;
  int v625;
  int v626;
  _WORD *v627;
  char v628;
  BOOL v629;
  int v630;
  int v631;
  char v632;
  BOOL v633;
  uint64_t v634;
  uint64_t (*v635)(uint64_t);
  int v636;
  int v637;
  unsigned int v638;
  int v639;
  int v640;
  int v641;
  int v642;
  unsigned int v643;
  int v644;
  int v645;
  int v646;
  int v647;
  unsigned int v648;
  int v649;
  int v650;
  int v651;
  int v652;
  uint64_t v653;
  uint64_t v654;
  uint64_t (*v655)(uint64_t, uint64_t, unsigned __int8 *);
  int v656;
  uint64_t v657;
  uint64_t (*v658)(uint64_t);
  int v659;
  int v660;
  uint64_t v661;
  unsigned int (*v662)(uint64_t);
  uint64_t v663;
  unsigned int (*v664)(uint64_t);
  unint64_t v665;
  unint64_t v666;
  uint64_t v667;
  uint64_t v668;
  uint64_t (*v669)(uint64_t, uint64_t, unsigned __int8 *);
  int v670;
  int v671;
  int v672;
  uint64_t v673;
  uint64_t (*v674)(uint64_t);
  int v675;
  uint64_t v676;
  uint64_t (*v677)(uint64_t);
  int v678;
  uint64_t v679;
  uint64_t v680;
  uint64_t (*v681)(uint64_t, uint64_t, unsigned __int8 *);
  int v682;
  int v683;
  int v684;
  unint64_t v685;
  int v686;
  uint64_t v687;
  uint64_t (*v688)(uint64_t);
  uint64_t v689;
  uint64_t (*v690)(uint64_t, unsigned __int8 *, _QWORD);
  int v691;
  int v692;
  int v693;
  __int16 v694;
  int v695;
  int v696;
  int v697;
  int v698;
  unsigned int v699;
  int v700;
  int v701;
  int v702;
  char v703;
  int v704;
  unsigned int v705;
  int v706;
  int v707;
  int v708;
  int v709;
  unsigned int v710;
  int v711;
  int v712;
  int v713;
  int v714;

  result = *(unsigned int *)(a1 + 56);
  switch((int)result)
  {
    case 1:
      goto LABEL_1915;
    case 2:
      goto LABEL_1908;
    case 3:
      goto LABEL_1929;
    case 4:
      goto LABEL_1928;
    case 5:
      goto LABEL_1931;
    case 6:
      goto LABEL_1651;
    case 7:
      goto LABEL_1644;
    case 8:
      goto LABEL_1638;
    case 9:
      goto LABEL_1636;
    case 10:
      goto LABEL_1635;
    case 11:
      goto LABEL_1628;
    case 12:
      goto LABEL_1490;
    case 13:
LABEL_1487:
      v432 = *(_QWORD *)(a1 + 88);
      if (!v432 || (v433 = *(uint64_t (**)(uint64_t))(v432 + 144)) == 0 || (v434 = v433(a1)) == 0)
      {
LABEL_1490:
        if ((*(_WORD *)(a1 + 78) & 0x100) == 0)
        {
          result = 0;
          *(_DWORD *)(a1 + 24) = 25;
          v7 = "Missing expected CR after chunk extension name";
          goto LABEL_2263;
        }
        goto LABEL_1628;
      }
      if (v434 == 21)
      {
        result = 0;
        *(_DWORD *)(a1 + 24) = 21;
        *(_QWORD *)(a1 + 32) = "on_chunk_extension_name pause";
        *(_QWORD *)(a1 + 40) = a2;
        *(_QWORD *)(a1 + 56) = 12;
        return result;
      }
      goto LABEL_1577;
    case 14:
      goto LABEL_1496;
    case 15:
      goto LABEL_1505;
    case 16:
      goto LABEL_1627;
    case 17:
LABEL_1528:
      v462 = *(_QWORD *)(a1 + 88);
      if (!v462)
        goto LABEL_1627;
      v463 = *(uint64_t (**)(uint64_t))(v462 + 152);
      if (!v463)
        goto LABEL_1627;
      v464 = v463(a1);
      if (!v464)
        goto LABEL_1627;
      if (v464 != 21)
        goto LABEL_1685;
      result = 0;
      *(_DWORD *)(a1 + 24) = 21;
      *(_QWORD *)(a1 + 32) = "on_chunk_extension_value pause";
      *(_QWORD *)(a1 + 40) = a2;
      *(_QWORD *)(a1 + 56) = 16;
      return result;
    case 18:
      goto LABEL_1537;
    case 19:
      goto LABEL_1622;
    case 20:
      goto LABEL_1619;
    case 21:
      goto LABEL_1692;
    case 22:
      goto LABEL_1608;
    case 23:
      goto LABEL_1669;
    case 24:
      while (2)
      {
        if (a2 == a3)
          return 24;
        result = 24;
        while (1)
        {
          v496 = llhttp__internal__run_lookup_table_3[*a2];
          if (v496 != 1)
            break;
          if (++a2 == a3)
            return result;
        }
        if (v496 != 2)
        {
          if (v496 == 3)
          {
            ++a2;
LABEL_1608:
            if (a2 == a3)
              return 22;
            if (llhttp__internal__run_lookup_table_14[*a2] == 1)
            {
LABEL_1599:
              ++a2;
              continue;
            }
            v497 = *(_QWORD *)(a1 + 8);
            *(_QWORD *)(a1 + 8) = 0;
            v498 = *(_QWORD *)(a1 + 88);
            if (v498)
            {
              v499 = *(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *))(v498 + 64);
              if (v499)
              {
                v500 = v499(a1, v497, &a2[-v497]);
                if (v500)
                {
                  v501 = v500;
                  if (v500 == -1)
                  {
                    *(_QWORD *)(a1 + 32) = "Span callback error in on_chunk_extension_value";
                    v501 = 24;
                  }
                  result = 0;
                  *(_DWORD *)(a1 + 24) = v501;
                  *(_QWORD *)(a1 + 40) = a2 + 1;
                  *(_QWORD *)(a1 + 56) = 21;
                  return result;
                }
              }
            }
            ++a2;
LABEL_1692:
            result = 0;
            *(_DWORD *)(a1 + 24) = 2;
            v7 = "Invalid quoted-pair in chunk extensions quoted value";
          }
          else
          {
            v524 = *(_QWORD *)(a1 + 8);
            *(_QWORD *)(a1 + 8) = 0;
            v525 = *(_QWORD *)(a1 + 88);
            if (v525)
            {
              v526 = *(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *))(v525 + 64);
              if (v526)
              {
                v527 = v526(a1, v524, &a2[-v524]);
                if (v527)
                {
                  v528 = v527;
                  if (v527 == -1)
                  {
                    *(_QWORD *)(a1 + 32) = "Span callback error in on_chunk_extension_value";
                    v528 = 24;
                  }
                  result = 0;
                  *(_DWORD *)(a1 + 24) = v528;
                  *(_QWORD *)(a1 + 40) = a2 + 1;
                  *(_QWORD *)(a1 + 56) = 23;
                  return result;
                }
              }
            }
            ++a2;
LABEL_1669:
            result = 0;
            *(_DWORD *)(a1 + 24) = 2;
            v7 = "Invalid character in chunk extensions quoted value";
          }
          goto LABEL_2263;
        }
        break;
      }
      ++a2;
      v502 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)(a1 + 8) = 0;
      v503 = *(_QWORD *)(a1 + 88);
      if (v503)
      {
        v504 = *(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *))(v503 + 64);
        if (v504)
        {
          v505 = v504(a1, v502, &a2[-v502]);
          if (v505)
          {
            v530 = v505;
            if (v505 == -1)
            {
              *(_QWORD *)(a1 + 32) = "Span callback error in on_chunk_extension_value";
              v530 = 24;
            }
            result = 0;
            *(_DWORD *)(a1 + 24) = v530;
            *(_QWORD *)(a1 + 40) = a2;
            *(_QWORD *)(a1 + 56) = 20;
            return result;
          }
        }
      }
LABEL_1619:
      v506 = *(_QWORD *)(a1 + 88);
      if (v506 && (v507 = *(uint64_t (**)(uint64_t))(v506 + 152)) != 0 && (v508 = v507(a1)) != 0)
      {
        if (v508 == 21)
        {
          result = 0;
          *(_DWORD *)(a1 + 24) = 21;
          *(_QWORD *)(a1 + 32) = "on_chunk_extension_value pause";
          *(_QWORD *)(a1 + 40) = a2;
          *(_QWORD *)(a1 + 56) = 19;
          return result;
        }
      }
      else
      {
LABEL_1622:
        if (a2 == a3)
          return 19;
        v509 = *a2;
        if (v509 == 10)
        {
LABEL_1627:
          if ((*(_WORD *)(a1 + 78) & 0x100) == 0)
          {
            result = 0;
            *(_DWORD *)(a1 + 24) = 25;
            v7 = "Missing expected CR after chunk extension value";
            goto LABEL_2263;
          }
          goto LABEL_1628;
        }
        if (v509 != 59)
        {
          if (v509 != 13)
          {
            result = 0;
            *(_DWORD *)(a1 + 24) = 2;
            v7 = "Invalid character in chunk extensions quote value";
            goto LABEL_2263;
          }
LABEL_1626:
          ++a2;
LABEL_1628:
          if (a2 == a3)
            return 11;
          if (*a2 == 10)
          {
            ++a2;
          }
          else if ((*(_WORD *)(a1 + 78) & 0x40) == 0)
          {
            result = 0;
            *(_DWORD *)(a1 + 24) = 2;
            v7 = "Expected LF after chunk size";
            goto LABEL_2263;
          }
          v510 = *(_QWORD *)(a1 + 88);
          if (v510)
          {
            v511 = *(uint64_t (**)(uint64_t))(v510 + 160);
            if (v511)
            {
              v512 = v511(a1);
              if (v512)
              {
                if (v512 != 21)
                {
                  result = 0;
                  *(_DWORD *)(a1 + 24) = 19;
                  goto LABEL_2263;
                }
                result = 0;
                *(_DWORD *)(a1 + 24) = 21;
                *(_QWORD *)(a1 + 32) = "on_chunk_header pause";
                *(_QWORD *)(a1 + 40) = a2;
                *(_QWORD *)(a1 + 56) = 10;
                return result;
              }
            }
          }
LABEL_1635:
          if (!*(_QWORD *)(a1 + 64))
          {
            *(_WORD *)(a1 + 82) |= 0x80u;
            goto LABEL_1936;
          }
LABEL_1636:
          if (a2 == a3)
            return 9;
          *(_QWORD *)(a1 + 8) = a2;
          *(_QWORD *)(a1 + 16) = llhttp__on_body;
LABEL_1638:
          v513 = *(_QWORD *)(a1 + 64);
          v514 = v513 - (a3 - a2);
          if (v513 < a3 - a2)
            v514 = 0;
          *(_QWORD *)(a1 + 64) = v514;
          if (a3 - a2 < v513)
            return 8;
          a2 += v513;
          v515 = *(_QWORD *)(a1 + 8);
          *(_QWORD *)(a1 + 8) = 0;
          v516 = *(_QWORD *)(a1 + 88);
          if (v516)
          {
            v517 = *(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *))(v516 + 80);
            if (v517)
            {
              v518 = v517(a1, v515, &a2[-v515]);
              if (v518)
              {
                v529 = v518;
                if (v518 == -1)
                {
                  *(_QWORD *)(a1 + 32) = "Span callback error in on_body";
                  v529 = 24;
                }
                result = 0;
                *(_DWORD *)(a1 + 24) = v529;
                *(_QWORD *)(a1 + 40) = a2;
                *(_QWORD *)(a1 + 56) = 7;
                return result;
              }
            }
          }
LABEL_1644:
          if (a2 == a3)
            return 7;
          v519 = *a2;
          if (v519 == 13)
          {
            ++a2;
LABEL_1651:
            if (a2 == a3)
              return 6;
            if (*a2 == 10)
            {
              ++a2;
LABEL_1655:
              v520 = 0;
              v521 = *(_QWORD *)(a1 + 88);
              if (v521)
              {
                v520 = 0;
                v522 = *(uint64_t (**)(uint64_t))(v521 + 168);
                if (v522)
                  v520 = v522(a1);
              }
              if (v520)
              {
                if (v520 == 21)
                {
                  result = 0;
                  *(_DWORD *)(a1 + 24) = 21;
                  *(_QWORD *)(a1 + 32) = "on_chunk_complete pause";
                  *(_QWORD *)(a1 + 40) = a2;
                  *(_QWORD *)(a1 + 56) = 36;
                  return result;
                }
                goto LABEL_2148;
              }
LABEL_1659:
              *(_QWORD *)(a1 + 64) = 0;
LABEL_1660:
              if (a2 == a3)
                return 35;
              v523 = 0;
              switch(*a2)
              {
                case '0':
                  break;
                case '1':
LABEL_2211:
                  v523 = 1;
                  break;
                case '2':
LABEL_2212:
                  v523 = 2;
                  break;
                case '3':
LABEL_2213:
                  v523 = 3;
                  break;
                case '4':
LABEL_2214:
                  v523 = 4;
                  break;
                case '5':
LABEL_2215:
                  v523 = 5;
                  break;
                case '6':
LABEL_2216:
                  v523 = 6;
                  break;
                case '7':
LABEL_2217:
                  v523 = 7;
                  break;
                case '8':
LABEL_2218:
                  v523 = 8;
                  break;
                case '9':
LABEL_2219:
                  v523 = 9;
                  break;
                case 'A':
                case 'a':
LABEL_2205:
                  v523 = 10;
                  break;
                case 'B':
                case 'b':
LABEL_2206:
                  v523 = 11;
                  break;
                case 'C':
                case 'c':
LABEL_2207:
                  v523 = 12;
                  break;
                case 'D':
                case 'd':
LABEL_2208:
                  v523 = 13;
                  break;
                case 'E':
                case 'e':
LABEL_2209:
                  v523 = 14;
                  break;
                case 'F':
                case 'f':
LABEL_2210:
                  v523 = 15;
                  break;
                default:
LABEL_2200:
                  result = 0;
                  *(_DWORD *)(a1 + 24) = 12;
                  v7 = "Invalid character in chunk size";
                  goto LABEL_2263;
              }
              while (2)
              {
                ++a2;
                v685 = *(_QWORD *)(a1 + 64);
                if (!(v685 >> 60))
                {
                  *(_QWORD *)(a1 + 64) = v523 | (16 * v685);
LABEL_2203:
                  if (a2 != a3)
                  {
                    v523 = 0;
                    switch(*a2)
                    {
                      case '0':
                        continue;
                      case '1':
                        goto LABEL_2211;
                      case '2':
                        goto LABEL_2212;
                      case '3':
                        goto LABEL_2213;
                      case '4':
                        goto LABEL_2214;
                      case '5':
                        goto LABEL_2215;
                      case '6':
                        goto LABEL_2216;
                      case '7':
                        goto LABEL_2217;
                      case '8':
                        goto LABEL_2218;
                      case '9':
                        goto LABEL_2219;
                      case 'A':
                      case 'a':
                        goto LABEL_2205;
                      case 'B':
                      case 'b':
                        goto LABEL_2206;
                      case 'C':
                      case 'c':
                        goto LABEL_2207;
                      case 'D':
                      case 'd':
                        goto LABEL_2208;
                      case 'E':
                      case 'e':
                        goto LABEL_2209;
                      case 'F':
                      case 'f':
                        goto LABEL_2210;
                      default:
                        goto LABEL_2194;
                    }
                  }
                  return 34;
                }
                break;
              }
              result = 0;
              *(_DWORD *)(a1 + 24) = 12;
              v7 = "Chunk size overflow";
LABEL_2263:
              *(_QWORD *)(a1 + 32) = v7;
              *(_QWORD *)(a1 + 40) = a2;
              *(_QWORD *)(a1 + 56) = 0;
              return result;
            }
          }
          else if (v519 == 10)
          {
            ++a2;
            if ((*(_WORD *)(a1 + 78) & 0x100) == 0)
            {
              result = 0;
              *(_DWORD *)(a1 + 24) = 25;
              v7 = "Missing expected CR after chunk data";
              goto LABEL_2263;
            }
            goto LABEL_1655;
          }
          if ((*(_WORD *)(a1 + 78) & 0x80) == 0)
          {
            result = 0;
            *(_DWORD *)(a1 + 24) = 2;
            v7 = "Expected LF after chunk data";
            goto LABEL_2263;
          }
          goto LABEL_1655;
        }
LABEL_2187:
        ++a2;
LABEL_2188:
        while (2)
        {
          if (a2 == a3)
            return 32;
          v684 = *a2;
          if (v684 == 32 || v684 == 13)
          {
            result = 0;
            v319 = a2 + 1;
            *(_DWORD *)(a1 + 24) = 2;
            v321 = "Invalid character in chunk extensions";
            goto LABEL_2192;
          }
LABEL_2185:
          if (a2 == a3)
            return 31;
          *(_QWORD *)(a1 + 8) = a2;
          *(_QWORD *)(a1 + 16) = llhttp__on_chunk_extension_name;
LABEL_1478:
          if (a2 == a3)
            return 30;
          result = 30;
          while (llhttp__internal__run_lookup_table_7[*a2] == 3)
          {
            if (++a2 == a3)
              return result;
          }
          switch(*a2)
          {
            case 0xAu:
              v428 = *(_QWORD *)(a1 + 8);
              *(_QWORD *)(a1 + 8) = 0;
              v429 = *(_QWORD *)(a1 + 88);
              if (!v429)
                goto LABEL_1487;
              v430 = *(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *))(v429 + 56);
              if (!v430)
                goto LABEL_1487;
              v431 = v430(a1, v428, &a2[-v428]);
              if (!v431)
                goto LABEL_1487;
              v489 = v431;
              if (v431 == -1)
              {
                *(_QWORD *)(a1 + 32) = "Span callback error in on_chunk_extension_name";
                v489 = 24;
              }
              result = 0;
              *(_DWORD *)(a1 + 24) = v489;
              *(_QWORD *)(a1 + 40) = a2;
              *(_QWORD *)(a1 + 56) = 13;
              return result;
            case 0xDu:
              v435 = *(_QWORD *)(a1 + 8);
              *(_QWORD *)(a1 + 8) = 0;
              v436 = *(_QWORD *)(a1 + 88);
              if (v436)
              {
                v437 = *(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *))(v436 + 56);
                if (v437)
                {
                  v438 = v437(a1, v435, &a2[-v435]);
                  if (v438)
                  {
                    v490 = v438;
                    if (v438 == -1)
                    {
                      *(_QWORD *)(a1 + 32) = "Span callback error in on_chunk_extension_name";
                      v490 = 24;
                    }
                    result = 0;
                    *(_DWORD *)(a1 + 24) = v490;
                    *(_QWORD *)(a1 + 40) = a2 + 1;
                    *(_QWORD *)(a1 + 56) = 14;
                    return result;
                  }
                }
              }
              ++a2;
LABEL_1496:
              v439 = *(_QWORD *)(a1 + 88);
              if (!v439)
                goto LABEL_1628;
              v440 = *(uint64_t (**)(uint64_t))(v439 + 144);
              if (!v440)
                goto LABEL_1628;
              v441 = v440(a1);
              if (!v441)
                goto LABEL_1628;
              if (v441 != 21)
                goto LABEL_1577;
              result = 0;
              *(_DWORD *)(a1 + 24) = 21;
              v442 = "on_chunk_extension_name pause";
              goto LABEL_1542;
            case 0x3Bu:
              v443 = *(_QWORD *)(a1 + 8);
              *(_QWORD *)(a1 + 8) = 0;
              v444 = *(_QWORD *)(a1 + 88);
              if (v444)
              {
                v445 = *(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *))(v444 + 56);
                if (v445)
                {
                  v446 = v445(a1, v443, &a2[-v443]);
                  if (v446)
                  {
                    v491 = v446;
                    if (v446 == -1)
                    {
                      *(_QWORD *)(a1 + 32) = "Span callback error in on_chunk_extension_name";
                      v491 = 24;
                    }
                    result = 0;
                    *(_DWORD *)(a1 + 24) = v491;
                    *(_QWORD *)(a1 + 40) = a2 + 1;
                    *(_QWORD *)(a1 + 56) = 15;
                    return result;
                  }
                }
              }
              ++a2;
LABEL_1505:
              v447 = 0;
              v448 = *(_QWORD *)(a1 + 88);
              if (v448)
              {
                v447 = 0;
                v449 = *(uint64_t (**)(uint64_t))(v448 + 144);
                if (v449)
                  v447 = v449(a1);
              }
              if (!v447)
                continue;
              if (v447 != 21)
                goto LABEL_1577;
              result = 0;
              *(_DWORD *)(a1 + 24) = 21;
              v450 = "on_chunk_extension_name pause";
              goto LABEL_1553;
            case 0x3Du:
              v451 = *(_QWORD *)(a1 + 8);
              *(_QWORD *)(a1 + 8) = 0;
              v452 = *(_QWORD *)(a1 + 88);
              if (v452)
              {
                v453 = *(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *))(v452 + 56);
                if (v453)
                {
                  v454 = v453(a1, v451, &a2[-v451]);
                  if (v454)
                  {
                    v492 = v454;
                    if (v454 == -1)
                    {
                      *(_QWORD *)(a1 + 32) = "Span callback error in on_chunk_extension_name";
                      v492 = 24;
                    }
                    result = 0;
                    *(_DWORD *)(a1 + 24) = v492;
                    *(_QWORD *)(a1 + 40) = a2 + 1;
                    *(_QWORD *)(a1 + 56) = 28;
                    return result;
                  }
                }
              }
              ++a2;
LABEL_1515:
              if (a2 == a3)
                return 28;
              *(_QWORD *)(a1 + 8) = a2;
              *(_QWORD *)(a1 + 16) = llhttp__on_chunk_extension_value;
              v455 = *(_QWORD *)(a1 + 88);
              if (v455)
              {
                v456 = *(uint64_t (**)(uint64_t))(v455 + 144);
                if (v456)
                {
                  v457 = v456(a1);
                  if (v457)
                  {
                    if (v457 == 21)
                    {
                      result = 0;
                      *(_DWORD *)(a1 + 24) = 21;
                      *(_QWORD *)(a1 + 32) = "on_chunk_extension_name pause";
                      *(_QWORD *)(a1 + 40) = a2;
                      *(_QWORD *)(a1 + 56) = 27;
                      return result;
                    }
LABEL_1577:
                    result = 0;
                    *(_DWORD *)(a1 + 24) = 34;
                    goto LABEL_2263;
                  }
                }
              }
LABEL_1519:
              if (a2 == a3)
                return 27;
              result = 27;
              while (llhttp__internal__run_lookup_table_5[*a2] == 3)
              {
                if (++a2 == a3)
                  return result;
              }
              switch((unint64_t)*a2)
              {
                case 0xAuLL:
                case 0x10AuLL:
                  v458 = *(_QWORD *)(a1 + 8);
                  *(_QWORD *)(a1 + 8) = 0;
                  v459 = *(_QWORD *)(a1 + 88);
                  if (!v459)
                    goto LABEL_1528;
                  v460 = *(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *))(v459 + 64);
                  if (!v460)
                    goto LABEL_1528;
                  v461 = v460(a1, v458, &a2[-v458]);
                  if (!v461)
                    goto LABEL_1528;
                  v493 = v461;
                  if (v461 == -1)
                  {
                    *(_QWORD *)(a1 + 32) = "Span callback error in on_chunk_extension_value";
                    v493 = 24;
                  }
                  result = 0;
                  *(_DWORD *)(a1 + 24) = v493;
                  *(_QWORD *)(a1 + 40) = a2;
                  *(_QWORD *)(a1 + 56) = 17;
                  return result;
                case 0xDuLL:
                case 0x10DuLL:
                  v465 = *(_QWORD *)(a1 + 8);
                  *(_QWORD *)(a1 + 8) = 0;
                  v466 = *(_QWORD *)(a1 + 88);
                  if (v466)
                  {
                    v467 = *(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *))(v466 + 64);
                    if (v467)
                    {
                      v468 = v467(a1, v465, &a2[-v465]);
                      if (v468)
                      {
                        v494 = v468;
                        if (v468 == -1)
                        {
                          *(_QWORD *)(a1 + 32) = "Span callback error in on_chunk_extension_value";
                          v494 = 24;
                        }
                        result = 0;
                        *(_DWORD *)(a1 + 24) = v494;
                        *(_QWORD *)(a1 + 40) = a2 + 1;
                        *(_QWORD *)(a1 + 56) = 18;
                        return result;
                      }
                    }
                  }
                  ++a2;
LABEL_1537:
                  v469 = *(_QWORD *)(a1 + 88);
                  if (!v469)
                    goto LABEL_1628;
                  v470 = *(uint64_t (**)(uint64_t))(v469 + 152);
                  if (!v470)
                    goto LABEL_1628;
                  v471 = v470(a1);
                  if (!v471)
                    goto LABEL_1628;
                  if (v471 == 21)
                  {
                    result = 0;
                    *(_DWORD *)(a1 + 24) = 21;
                    v442 = "on_chunk_extension_value pause";
LABEL_1542:
                    *(_QWORD *)(a1 + 32) = v442;
                    *(_QWORD *)(a1 + 40) = a2;
                    *(_QWORD *)(a1 + 56) = 11;
                    return result;
                  }
                  goto LABEL_1685;
                case 0x22uLL:
                case 0x13BuLL:
                  goto LABEL_1599;
                case 0x3BuLL:
                case 0x13DuLL:
                  v472 = *(_QWORD *)(a1 + 8);
                  *(_QWORD *)(a1 + 8) = 0;
                  v473 = *(_QWORD *)(a1 + 88);
                  if (v473)
                  {
                    v474 = *(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *))(v473 + 64);
                    if (v474)
                    {
                      v475 = v474(a1, v472, &a2[-v472]);
                      if (v475)
                      {
                        v495 = v475;
                        if (v475 == -1)
                        {
                          *(_QWORD *)(a1 + 32) = "Span callback error in on_chunk_extension_value";
                          v495 = 24;
                        }
                        result = 0;
                        *(_DWORD *)(a1 + 24) = v495;
                        *(_QWORD *)(a1 + 40) = a2 + 1;
                        *(_QWORD *)(a1 + 56) = 25;
                        return result;
                      }
                    }
                  }
                  ++a2;
LABEL_1547:
                  v476 = 0;
                  v477 = *(_QWORD *)(a1 + 88);
                  if (v477)
                  {
                    v476 = 0;
                    v478 = *(uint64_t (**)(uint64_t))(v477 + 152);
                    if (v478)
                      v476 = v478(a1);
                  }
                  if (!v476)
                    continue;
                  if (v476 == 21)
                  {
                    result = 0;
                    *(_DWORD *)(a1 + 24) = 21;
                    v450 = "on_chunk_extension_value pause";
LABEL_1553:
                    *(_QWORD *)(a1 + 32) = v450;
                    *(_QWORD *)(a1 + 40) = a2;
                    *(_QWORD *)(a1 + 56) = 32;
                    return result;
                  }
                  break;
                default:
                  v484 = *(_QWORD *)(a1 + 8);
                  *(_QWORD *)(a1 + 8) = 0;
                  v485 = *(_QWORD *)(a1 + 88);
                  if (!v485
                    || (v486 = *(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *))(v485 + 64)) == 0
                    || (v487 = v486(a1, v484, &a2[-v484])) == 0)
                  {
                    ++a2;
                    goto LABEL_1569;
                  }
                  v488 = v487;
                  if (v487 == -1)
                  {
                    *(_QWORD *)(a1 + 32) = "Span callback error in on_chunk_extension_value";
                    v488 = 24;
                  }
                  result = 0;
                  *(_DWORD *)(a1 + 24) = v488;
                  *(_QWORD *)(a1 + 40) = a2 + 1;
                  *(_QWORD *)(a1 + 56) = 26;
                  return result;
              }
              break;
            default:
              v479 = *(_QWORD *)(a1 + 8);
              *(_QWORD *)(a1 + 8) = 0;
              v480 = *(_QWORD *)(a1 + 88);
              if (!v480
                || (v481 = *(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *))(v480 + 56)) == 0
                || (v482 = v481(a1, v479, &a2[-v479])) == 0)
              {
                ++a2;
                goto LABEL_1567;
              }
              v483 = v482;
              if (v482 == -1)
              {
                *(_QWORD *)(a1 + 32) = "Span callback error in on_chunk_extension_name";
                v483 = 24;
              }
              result = 0;
              *(_DWORD *)(a1 + 24) = v483;
              *(_QWORD *)(a1 + 40) = a2 + 1;
              *(_QWORD *)(a1 + 56) = 29;
              return result;
          }
          break;
        }
      }
LABEL_1685:
      result = 0;
      *(_DWORD *)(a1 + 24) = 35;
      goto LABEL_2263;
    case 25:
      goto LABEL_1547;
    case 26:
LABEL_1569:
      result = 0;
      *(_DWORD *)(a1 + 24) = 2;
      v7 = "Invalid character in chunk extensions value";
      goto LABEL_2263;
    case 27:
      goto LABEL_1519;
    case 28:
      goto LABEL_1515;
    case 29:
LABEL_1567:
      result = 0;
      *(_DWORD *)(a1 + 24) = 2;
      v7 = "Invalid character in chunk extensions name";
      goto LABEL_2263;
    case 30:
      goto LABEL_1478;
    case 31:
      goto LABEL_2185;
    case 32:
      goto LABEL_2188;
    case 33:
LABEL_2194:
      while (2)
      {
        if (a2 == a3)
          return 33;
        switch(*a2)
        {
          case 9u:
          case 0x20u:
            ++a2;
            if ((*(_WORD *)(a1 + 78) & 0x200) == 0)
              goto LABEL_2200;
            continue;
          case 0xAu:
            ++a2;
            if ((*(_WORD *)(a1 + 78) & 0x100) != 0)
              goto LABEL_1628;
            result = 0;
            *(_DWORD *)(a1 + 24) = 25;
            v7 = "Missing expected CR after chunk size";
            break;
          case 0xBu:
          case 0xCu:
          case 0xEu:
          case 0xFu:
          case 0x10u:
          case 0x11u:
          case 0x12u:
          case 0x13u:
          case 0x14u:
          case 0x15u:
          case 0x16u:
          case 0x17u:
          case 0x18u:
          case 0x19u:
          case 0x1Au:
          case 0x1Bu:
          case 0x1Cu:
          case 0x1Du:
          case 0x1Eu:
          case 0x1Fu:
            goto LABEL_2200;
          case 0xDu:
            goto LABEL_1626;
          default:
            if (*a2 != 59)
              goto LABEL_2200;
            goto LABEL_2187;
        }
        goto LABEL_2263;
      }
    case 34:
      goto LABEL_2203;
    case 35:
      goto LABEL_1660;
    case 36:
      goto LABEL_1659;
    case 37:
      goto LABEL_2132;
    case 38:
LABEL_2130:
      if (a2 == a3)
        return 38;
      *(_QWORD *)(a1 + 8) = a2;
      *(_QWORD *)(a1 + 16) = llhttp__on_body;
LABEL_2132:
      v665 = *(_QWORD *)(a1 + 64);
      v666 = v665 - (a3 - a2);
      if (v665 < a3 - a2)
        v666 = 0;
      *(_QWORD *)(a1 + 64) = v666;
      if (a3 - a2 < v665)
        return 37;
      a2 += v665;
      v667 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)(a1 + 8) = 0;
      v668 = *(_QWORD *)(a1 + 88);
      if (!v668)
        goto LABEL_1931;
      v669 = *(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *))(v668 + 80);
      if (!v669)
        goto LABEL_1931;
      v670 = v669(a1, v667, &a2[-v667]);
      if (!v670)
        goto LABEL_1931;
      v671 = v670;
      if (v670 == -1)
      {
        *(_QWORD *)(a1 + 32) = "Span callback error in on_body";
        v671 = 24;
      }
      result = 0;
      *(_DWORD *)(a1 + 24) = v671;
      goto LABEL_2141;
    case 39:
      return result;
    case 40:
LABEL_2171:
      if (a2 == a3)
        return 40;
      *(_QWORD *)(a1 + 8) = a2;
      *(_QWORD *)(a1 + 16) = llhttp__on_body;
      return 39;
    case 41:
      goto LABEL_2129;
    case 42:
      goto LABEL_2182;
    case 43:
      goto LABEL_2015;
    case 44:
      goto LABEL_2109;
    case 45:
      goto LABEL_2224;
    case 46:
      goto LABEL_2232;
    case 47:
      goto LABEL_2241;
    case 48:
LABEL_2255:
      while (2)
      {
        if (a2 == a3)
          return 48;
        v695 = *a2;
        if (v695 == 13)
        {
          ++a2;
          if ((*(_WORD *)(a1 + 78) & 0x1000) == 0)
            goto LABEL_1770;
          continue;
        }
        break;
      }
      if (v695 == 10)
      {
        ++a2;
LABEL_2241:
        if (a2 == a3)
          return 47;
      }
      else if ((*(_WORD *)(a1 + 78) & 1) == 0)
      {
        goto LABEL_1770;
      }
      v693 = *a2;
      if (v693 != 9 && v693 != 32)
      {
        v694 = 1;
        switch(*(_BYTE *)(a1 + 76))
        {
          case 2:
            result = 0;
            *(_DWORD *)(a1 + 24) = 11;
            v7 = "Empty Content-Length";
            goto LABEL_2263;
          case 5:
            goto LABEL_2266;
          case 6:
            v694 = 2;
            goto LABEL_2266;
          case 7:
            v694 = 4;
LABEL_2266:
            *(_WORD *)(a1 + 82) |= v694;
            *(_BYTE *)(a1 + 76) = 1;
            break;
          case 8:
            *(_WORD *)(a1 + 82) |= 8u;
            break;
          default:
            break;
        }
LABEL_2232:
        if (a2 == a3)
          return 46;
        *(_QWORD *)(a1 + 8) = 0;
        *(_QWORD *)(a1 + 16) = llhttp__on_header_value;
        v689 = *(_QWORD *)(a1 + 88);
        if (v689)
        {
          v690 = *(uint64_t (**)(uint64_t, unsigned __int8 *, _QWORD))(v689 + 48);
          if (v690)
          {
            v691 = v690(a1, a2, 0);
            if (v691)
            {
              v692 = v691;
              if (v691 == -1)
              {
                *(_QWORD *)(a1 + 32) = "Span callback error in on_header_value";
                v692 = 24;
              }
              result = 0;
              *(_DWORD *)(a1 + 24) = v692;
              *(_QWORD *)(a1 + 40) = a2;
              *(_QWORD *)(a1 + 56) = 45;
              return result;
            }
          }
        }
        goto LABEL_2224;
      }
      ++a2;
      if ((*(_WORD *)(a1 + 78) & 1) != 0)
        goto LABEL_2247;
      goto LABEL_2262;
    case 49:
      goto LABEL_1773;
    case 50:
      goto LABEL_1767;
    case 51:
    case 52:
      goto LABEL_1766;
    case 53:
      goto LABEL_1758;
    case 54:
      goto LABEL_2262;
    case 55:
      goto LABEL_1744;
    case 56:
      goto LABEL_2343;
    case 57:
      goto LABEL_1887;
    case 58:
      goto LABEL_2307;
    case 59:
      goto LABEL_2326;
    case 60:
      goto LABEL_2288;
    case 61:
LABEL_2274:
      while (2)
      {
        result = 61;
        if (a2 == a3)
          return result;
        while (2)
        {
          v697 = *a2;
          if ((v697 - 65) < 0x1A)
            v697 |= 0x20u;
          if (v697 <= 31)
          {
            if (v697 != 9)
              goto LABEL_2343;
            goto LABEL_2277;
          }
          if (v697 <= 98)
          {
            if (v697 != 32)
              goto LABEL_2343;
LABEL_2277:
            if (++a2 == a3)
              return result;
            continue;
          }
          break;
        }
        if (v697 != 99)
        {
          if (v697 != 107)
          {
            if (v697 != 117)
              goto LABEL_2343;
            ++a2;
LABEL_2288:
            if (a2 == a3)
              return 60;
            v698 = 0;
            v699 = *(_DWORD *)a1;
            while (1)
            {
              v700 = *a2;
              if ((v700 - 65) < 0x1A)
                v700 |= 0x20u;
              v701 = llparse_blob4[v699];
              if (v699 == 5)
              {
                v698 = 0;
                v702 = 5;
              }
              else
              {
                v702 = 0;
              }
              if (v700 != v701)
              {
                v698 = 2;
                v702 = 5;
              }
              if (v702)
                break;
              if (v700 == v701)
                ++v699;
              if (++a2 == a3)
              {
                v698 = 1;
                a2 = a3;
                *(_DWORD *)a1 = v699;
                goto LABEL_2303;
              }
            }
            *(_DWORD *)a1 = 0;
LABEL_2303:
            v703 = 7;
            if (v698)
            {
              if (v698 == 2)
                goto LABEL_2343;
              return 60;
            }
            goto LABEL_1886;
          }
          ++a2;
LABEL_2326:
          if (a2 == a3)
            return 59;
          v709 = 0;
          v710 = *(_DWORD *)a1;
          while (1)
          {
            v711 = *a2;
            if ((v711 - 65) < 0x1A)
              v711 |= 0x20u;
            v712 = llparse_blob3[v710];
            if (v710 == 8)
            {
              v709 = 0;
              v713 = 5;
            }
            else
            {
              v713 = 0;
            }
            if (v711 != v712)
            {
              v709 = 2;
              v713 = 5;
            }
            if (v713)
              break;
            if (v711 == v712)
              ++v710;
            if (++a2 == a3)
            {
              v709 = 1;
              a2 = a3;
              *(_DWORD *)a1 = v710;
              goto LABEL_2341;
            }
          }
          *(_DWORD *)a1 = 0;
LABEL_2341:
          v703 = 5;
          if (v709)
          {
            if (v709 == 2)
              goto LABEL_2343;
            return 59;
          }
LABEL_1886:
          ++a2;
          *(_BYTE *)(a1 + 76) = v703;
LABEL_1887:
          result = 57;
          if (a2 == a3)
            return result;
          while (1)
          {
            v597 = *a2;
            if (v597 != 32)
              break;
            if (++a2 == a3)
              return result;
          }
          if (v597 != 10 && v597 != 13)
          {
            if (v597 == 44)
            {
              ++a2;
              v599 = 1;
              switch(*(_BYTE *)(a1 + 76))
              {
                case 5:
                  goto LABEL_1900;
                case 6:
                  v599 = 2;
                  goto LABEL_1900;
                case 7:
                  v599 = 4;
LABEL_1900:
                  *(_WORD *)(a1 + 82) |= v599;
                  *(_BYTE *)(a1 + 76) = 1;
                  break;
                case 8:
                  *(_WORD *)(a1 + 82) |= 8u;
                  break;
                default:
                  continue;
              }
              continue;
            }
            *(_BYTE *)(a1 + 76) = 0;
LABEL_2343:
            if (a2 == a3)
              return 56;
            result = 56;
            while (1)
            {
              v696 = llhttp__internal__run_lookup_table_15[*a2];
              if (v696 != 1)
                break;
              if (++a2 == a3)
                return result;
            }
            if (v696 == 2)
            {
              ++a2;
              continue;
            }
            goto LABEL_1744;
          }
          while (1)
          {
LABEL_1744:
            if (a2 == a3)
              return 55;
            v545 = *a2;
            if (v545 == 10)
              break;
            if (v545 != 13)
            {
              if ((*(_WORD *)(a1 + 78) & 1) == 0)
              {
                v587 = *(_QWORD *)(a1 + 8);
                *(_QWORD *)(a1 + 8) = 0;
                v588 = *(_QWORD *)(a1 + 88);
                if (v588)
                {
                  v589 = *(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *))(v588 + 48);
                  if (v589)
                  {
                    v590 = v589(a1, v587, &a2[-v587]);
                    if (v590)
                    {
                      v591 = v590;
                      if (v590 == -1)
                      {
                        *(_QWORD *)(a1 + 32) = "Span callback error in on_header_value";
                        v591 = 24;
                      }
                      result = 0;
                      *(_DWORD *)(a1 + 24) = v591;
                      *(_QWORD *)(a1 + 40) = a2;
                      *(_QWORD *)(a1 + 56) = 54;
                      return result;
                    }
                  }
                }
LABEL_2262:
                result = 0;
                *(_DWORD *)(a1 + 24) = 10;
                v7 = "Invalid header value char";
                goto LABEL_2263;
              }
LABEL_1758:
              result = 53;
              if (a2 == a3)
                return result;
              while (1)
              {
                v555 = *a2;
                if (v555 == 10)
                  break;
                if (v555 == 13)
                  goto LABEL_1747;
                if (++a2 == a3)
                  return result;
              }
              v556 = *(_QWORD *)(a1 + 8);
              *(_QWORD *)(a1 + 8) = 0;
              v557 = *(_QWORD *)(a1 + 88);
              if (v557)
              {
                v558 = *(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *))(v557 + 48);
                if (v558)
                {
                  v559 = v558(a1, v556, &a2[-v556]);
                  if (v559)
                  {
                    v592 = v559;
                    if (v559 == -1)
                    {
                      *(_QWORD *)(a1 + 32) = "Span callback error in on_header_value";
                      v592 = 24;
                    }
                    result = 0;
                    *(_DWORD *)(a1 + 24) = v592;
                    *(_QWORD *)(a1 + 40) = a2;
                    *(_QWORD *)(a1 + 56) = 52;
                    return result;
                  }
                }
              }
              goto LABEL_1766;
            }
LABEL_1747:
            v546 = *(_QWORD *)(a1 + 8);
            *(_QWORD *)(a1 + 8) = 0;
            v547 = *(_QWORD *)(a1 + 88);
            if (v547)
            {
              v548 = *(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *))(v547 + 48);
              if (v548)
              {
                v549 = v548(a1, v546, &a2[-v546]);
                if (v549)
                {
                  v586 = v549;
                  if (v549 == -1)
                  {
                    *(_QWORD *)(a1 + 32) = "Span callback error in on_header_value";
                    v586 = 24;
                  }
                  result = 0;
                  *(_DWORD *)(a1 + 24) = v586;
                  *(_QWORD *)(a1 + 40) = a2 + 1;
                  *(_QWORD *)(a1 + 56) = 50;
                  return result;
                }
              }
            }
            ++a2;
            while (1)
            {
LABEL_1767:
              if (a2 == a3)
                return 50;
              v560 = *a2;
              if (v560 != 13)
                break;
              ++a2;
              if ((*(_WORD *)(a1 + 78) & 0x1000) == 0)
                goto LABEL_1770;
            }
            if (v560 != 10)
            {
              result = 0;
              *(_DWORD *)(a1 + 24) = 3;
              v7 = "Missing expected LF after header value";
              goto LABEL_2263;
            }
            ++a2;
LABEL_1773:
            if (a2 == a3)
              return 49;
            v561 = *a2;
            if (v561 != 9 && v561 != 32)
            {
              v566 = 1;
              switch(*(_BYTE *)(a1 + 76))
              {
                case 5:
                  goto LABEL_1855;
                case 6:
                  v566 = 2;
                  goto LABEL_1855;
                case 7:
                  v566 = 4;
LABEL_1855:
                  *(_WORD *)(a1 + 82) |= v566;
                  *(_BYTE *)(a1 + 76) = 1;
                  break;
                case 8:
                  *(_WORD *)(a1 + 82) |= 8u;
                  break;
                default:
                  break;
              }
LABEL_2224:
              v686 = 0;
              v687 = *(_QWORD *)(a1 + 88);
              if (v687)
              {
                v686 = 0;
                v688 = *(uint64_t (**)(uint64_t))(v687 + 136);
                if (v688)
                  v686 = v688(a1);
              }
              if (v686)
              {
                if (v686 == 21)
                {
                  result = 0;
                  *(_DWORD *)(a1 + 24) = 21;
                  *(_QWORD *)(a1 + 32) = "on_header_value_complete pause";
                  *(_QWORD *)(a1 + 40) = a2;
                  *(_QWORD *)(a1 + 56) = 90;
                  return result;
                }
                result = 0;
                *(_DWORD *)(a1 + 24) = 29;
                goto LABEL_2263;
              }
LABEL_1936:
              while (2)
              {
                if (a2 == a3)
                  return 90;
                v607 = *a2;
                switch(v607)
                {
                  case 10:
                    ++a2;
                    if ((*(_WORD *)(a1 + 78) & 0x100) == 0)
                      goto LABEL_2182;
                    v627 = (_WORD *)(a1 + 82);
                    v626 = *(unsigned __int16 *)(a1 + 82);
                    if ((v626 & 0x80) == 0)
                    {
                      if ((~v626 & 0x14) != 0)
                      {
                        v629 = *(_BYTE *)(a1 + 73) == 5;
                        goto LABEL_2121;
                      }
                      v628 = 1;
                      if (*(_BYTE *)(a1 + 72) != 1)
                      {
                        v629 = *(unsigned __int16 *)(a1 + 84) == 101;
LABEL_2121:
                        v628 = v629;
                      }
                      *(_BYTE *)(a1 + 80) = v628;
                      v663 = *(_QWORD *)(a1 + 88);
                      if (v663)
                      {
                        v664 = *(unsigned int (**)(uint64_t))(v663 + 72);
                        if (v664)
                        {
                          switch(v664(a1))
                          {
                            case 0u:
                              break;
                            case 1u:
                              goto LABEL_2128;
                            case 2u:
LABEL_2127:
                              *(_BYTE *)(a1 + 80) = 1;
LABEL_2128:
                              *v627 |= 0x40u;
                              break;
                            case 0x15u:
LABEL_2184:
                              result = 0;
                              *(_DWORD *)(a1 + 24) = 21;
                              *(_QWORD *)(a1 + 32) = "Paused by on_headers_complete";
                              *(_QWORD *)(a1 + 40) = a2;
                              *(_QWORD *)(a1 + 56) = 41;
                              return result;
                            default:
LABEL_2183:
                              result = 0;
                              *(_DWORD *)(a1 + 24) = 17;
                              v7 = "User callback error";
                              goto LABEL_2263;
                          }
                        }
                      }
LABEL_2129:
                      switch(llhttp__after_headers_complete(a1))
                      {
                        case 1u:
                          v676 = *(_QWORD *)(a1 + 88);
                          if (!v676)
                            goto LABEL_1929;
                          v677 = *(uint64_t (**)(uint64_t))(v676 + 88);
                          if (!v677)
                            goto LABEL_1929;
                          v678 = v677(a1);
                          if (!v678)
                            goto LABEL_1929;
                          if (v678 != 21)
                            goto LABEL_2169;
                          result = 0;
                          *(_DWORD *)(a1 + 24) = 21;
                          *(_QWORD *)(a1 + 32) = "on_message_complete pause";
                          *(_QWORD *)(a1 + 40) = a2;
                          *(_QWORD *)(a1 + 56) = 3;
                          return result;
                        case 2u:
                          goto LABEL_1659;
                        case 3u:
                          goto LABEL_2130;
                        case 4u:
                          *(_BYTE *)(a1 + 81) = 1;
                          goto LABEL_2171;
                        case 5u:
                          result = 0;
                          *(_DWORD *)(a1 + 24) = 15;
                          goto LABEL_2263;
                        default:
                          v672 = 0;
                          v673 = *(_QWORD *)(a1 + 88);
                          if (v673)
                          {
                            v672 = 0;
                            v674 = *(uint64_t (**)(uint64_t))(v673 + 88);
                            if (v674)
                              v672 = v674(a1);
                          }
                          if (!v672)
                            goto LABEL_1908;
                          if (v672 != 21)
                            goto LABEL_2169;
                          result = 0;
                          *(_DWORD *)(a1 + 24) = 21;
                          v603 = "on_message_complete pause";
                          goto LABEL_1930;
                      }
                    }
                    break;
                  case 13:
                    ++a2;
                    while (1)
                    {
LABEL_2015:
                      if (a2 == a3)
                        return 43;
                      v630 = *a2;
                      if (v630 != 13)
                        break;
                      ++a2;
                      if ((*(_WORD *)(a1 + 78) & 0x1000) == 0)
                        goto LABEL_2018;
                    }
                    if (v630 == 10)
                    {
                      ++a2;
                    }
                    else if ((*(_WORD *)(a1 + 78) & 0x40) == 0)
                    {
LABEL_2018:
                      result = 0;
                      *(_DWORD *)(a1 + 24) = 2;
                      v7 = "Expected LF after headers";
                      goto LABEL_2263;
                    }
                    v627 = (_WORD *)(a1 + 82);
                    v631 = *(unsigned __int16 *)(a1 + 82);
                    if ((v631 & 0x80) == 0)
                    {
                      if ((~v631 & 0x14) == 0)
                      {
                        v632 = 1;
                        if (*(_BYTE *)(a1 + 72) != 1)
                        {
                          v633 = *(unsigned __int16 *)(a1 + 84) == 101;
LABEL_2114:
                          v632 = v633;
                        }
                        *(_BYTE *)(a1 + 80) = v632;
                        v661 = *(_QWORD *)(a1 + 88);
                        if (v661)
                        {
                          v662 = *(unsigned int (**)(uint64_t))(v661 + 72);
                          if (v662)
                          {
                            switch(v662(a1))
                            {
                              case 0u:
                                goto LABEL_2129;
                              case 1u:
                                goto LABEL_2128;
                              case 2u:
                                goto LABEL_2127;
                              case 0x15u:
                                goto LABEL_2184;
                              default:
                                goto LABEL_2183;
                            }
                          }
                        }
                        goto LABEL_2129;
                      }
                      v633 = *(_BYTE *)(a1 + 73) == 5;
                      goto LABEL_2114;
                    }
                    break;
                  case 58:
                    goto LABEL_2156;
                  default:
LABEL_1940:
                    if (a2 == a3)
                      return 89;
                    *(_QWORD *)(a1 + 8) = a2;
                    *(_QWORD *)(a1 + 16) = llhttp__on_header_field;
LABEL_1942:
                    if (a2 != a3)
                    {
                      v608 = *a2;
                      if ((v608 - 65) < 0x1A)
                        v608 |= 0x20u;
                      switch(v608)
                      {
                        case 'c':
                          ++a2;
                          goto LABEL_1947;
                        case 'p':
                          ++a2;
                          goto LABEL_2033;
                        case 't':
                          ++a2;
                          goto LABEL_2052;
                        case 'u':
                          ++a2;
                          goto LABEL_2071;
                        default:
                          goto LABEL_1699;
                      }
                    }
                    return 88;
                }
                v634 = *(_QWORD *)(a1 + 88);
                if (v634)
                {
                  v635 = *(uint64_t (**)(uint64_t))(v634 + 168);
                  if (v635)
                  {
                    v636 = v635(a1);
                    if (v636)
                    {
                      if (v636 == 21)
                      {
                        result = 0;
                        *(_DWORD *)(a1 + 24) = 21;
                        *(_QWORD *)(a1 + 32) = "on_chunk_complete pause";
LABEL_2141:
                        *(_QWORD *)(a1 + 40) = a2;
                        *(_QWORD *)(a1 + 56) = 5;
                        return result;
                      }
LABEL_2148:
                      result = 0;
                      *(_DWORD *)(a1 + 24) = 20;
                      goto LABEL_2263;
                    }
                  }
                }
LABEL_1931:
                v604 = *(_QWORD *)(a1 + 88);
                if (v604)
                {
                  v605 = *(uint64_t (**)(uint64_t))(v604 + 88);
                  if (v605)
                  {
                    v606 = v605(a1);
                    if (v606)
                    {
                      if (v606 == 21)
                      {
                        result = 0;
                        *(_DWORD *)(a1 + 24) = 21;
                        *(_QWORD *)(a1 + 32) = "on_message_complete pause";
                        *(_QWORD *)(a1 + 40) = a2;
                        *(_QWORD *)(a1 + 56) = 4;
                        return result;
                      }
LABEL_2169:
                      result = 0;
                      *(_DWORD *)(a1 + 24) = 18;
                      goto LABEL_2263;
                    }
                  }
                }
LABEL_1928:
                if (*(_BYTE *)(a1 + 80) == 1)
                {
LABEL_1929:
                  result = 0;
                  *(_DWORD *)(a1 + 24) = 22;
                  v603 = "Pause on CONNECT/Upgrade";
LABEL_1930:
                  *(_QWORD *)(a1 + 32) = v603;
                  *(_QWORD *)(a1 + 40) = a2;
                  *(_QWORD *)(a1 + 56) = 2;
                  return result;
                }
LABEL_1908:
                if (*(_BYTE *)(a1 + 74) && *(_BYTE *)(a1 + 75))
                {
                  v601 = *(_WORD *)(a1 + 82);
                  if ((v601 & 2) == 0)
                    goto LABEL_1917;
LABEL_1913:
                  *(_WORD *)(a1 + 82) = 0;
                  goto LABEL_1914;
                }
                v601 = *(_WORD *)(a1 + 82);
                if ((v601 & 1) == 0)
                  goto LABEL_1913;
LABEL_1917:
                if (*(_BYTE *)(a1 + 72) == 1
                  || (v602 = *(unsigned __int16 *)(a1 + 84), (v602 - 100) < 0x64)
                  || v602 == 204
                  || v602 == 304
                  || (v601 & 0x40) != 0)
                {
                  *(_WORD *)(a1 + 82) = 0;
                }
                else
                {
                  if ((v601 & 0x208) == 0x200)
                    goto LABEL_1913;
                  *(_BYTE *)(a1 + 81) = 0;
                  *(_WORD *)(a1 + 82) = 0;
                  if ((v601 & 0x28) == 0)
                  {
LABEL_1914:
                    *(_BYTE *)(a1 + 81) = 0;
                    if ((*(_WORD *)(a1 + 78) & 4) == 0)
                    {
LABEL_1915:
                      result = 1;
                      if (a2 != a3)
                      {
                        while (1)
                        {
                          v600 = *a2;
                          if (v600 == 13 || v600 == 10)
                          {
                            ++a2;
                          }
                          else
                          {
                            ++a2;
                            if ((*(_WORD *)(a1 + 78) & 0x20) == 0)
                            {
                              result = 0;
                              *(_DWORD *)(a1 + 24) = 5;
                              goto LABEL_2263;
                            }
                          }
                          if (a2 == a3)
                            return result;
                        }
                      }
                      return result;
                    }
LABEL_1927:
                    *(_BYTE *)(a1 + 86) = 1;
                    *(_BYTE *)(a1 + 81) = 0;
LABEL_3:
                    result = 238;
                    if (a2 == a3)
                      return result;
                    while (1)
                    {
                      v8 = *a2;
                      if (v8 != 13 && v8 != 10)
                        break;
                      if (++a2 == a3)
                        return result;
                    }
                    if (*(_BYTE *)(a1 + 86) == 1)
                    {
                      v10 = *(_QWORD *)(a1 + 88);
                      if (v10)
                      {
                        v11 = *(uint64_t (**)(uint64_t))(v10 + 176);
                        if (v11)
                        {
                          v12 = v11(a1);
                          if (v12)
                          {
                            if (v12 != 21)
                            {
                              result = 0;
                              *(_DWORD *)(a1 + 24) = 31;
                              goto LABEL_2263;
                            }
                            result = 0;
                            *(_DWORD *)(a1 + 24) = 21;
                            *(_QWORD *)(a1 + 32) = "on_reset pause";
                            *(_QWORD *)(a1 + 40) = a2;
                            *(_QWORD *)(a1 + 56) = 237;
                            return result;
                          }
                        }
                      }
                    }
LABEL_15:
                    *(_BYTE *)(a1 + 81) = 2;
                    v13 = *(uint64_t (***)(uint64_t))(a1 + 88);
                    if (v13)
                    {
                      v14 = *v13;
                      if (v14)
                      {
                        v15 = v14(a1);
                        if (v15)
                        {
                          if (v15 != 21)
                          {
                            result = 0;
                            *(_DWORD *)(a1 + 24) = 16;
                            goto LABEL_2263;
                          }
                          result = 0;
                          *(_DWORD *)(a1 + 24) = 21;
                          *(_QWORD *)(a1 + 32) = "on_message_begin pause";
                          *(_QWORD *)(a1 + 40) = a2;
                          *(_QWORD *)(a1 + 56) = 236;
                          return result;
                        }
                      }
                    }
LABEL_18:
                    v16 = *(unsigned __int8 *)(a1 + 72);
                    if (v16 == 1)
                      goto LABEL_58;
                    if (v16 == 2)
                    {
LABEL_20:
                      if (a2 == a3)
                        return 227;
                      v17 = 0;
                      v18 = *(_DWORD *)a1;
                      while (1)
                      {
                        v19 = *a2;
                        v20 = llparse_blob58[v18];
                        if (v18 == 4)
                        {
                          v17 = 0;
                          v21 = 5;
                        }
                        else
                        {
                          v21 = 0;
                        }
                        if (v19 != v20)
                        {
                          v17 = 2;
                          v21 = 5;
                        }
                        if (v21)
                          break;
                        if (v19 == v20)
                          ++v18;
                        if (++a2 == a3)
                        {
                          v17 = 1;
                          a2 = a3;
                          *(_DWORD *)a1 = v18;
                          goto LABEL_98;
                        }
                      }
                      *(_DWORD *)a1 = 0;
LABEL_98:
                      if (v17)
                      {
                        if (v17 == 1)
                          return 227;
LABEL_1306:
                        result = 0;
                        *(_DWORD *)(a1 + 24) = 8;
                        v7 = "Expected HTTP/";
                        goto LABEL_2263;
                      }
                      ++a2;
                    }
                    else
                    {
LABEL_33:
                      if (a2 == a3)
                        return 235;
                      if (*a2 != 72)
                      {
                        *(_BYTE *)(a1 + 72) = 1;
LABEL_58:
                        if (a2 == a3)
                          return 209;
                        *(_QWORD *)(a1 + 8) = a2;
                        *(_QWORD *)(a1 + 16) = llhttp__on_method;
LABEL_60:
                        if (a2 != a3)
                        {
                          switch(*a2)
                          {
                            case 'A':
                              ++a2;
                              goto LABEL_63;
                            case 'B':
                              ++a2;
                              goto LABEL_211;
                            case 'C':
                              ++a2;
                              goto LABEL_229;
                            case 'D':
                              ++a2;
                              goto LABEL_277;
                            case 'F':
                              ++a2;
                              goto LABEL_320;
                            case 'G':
                              ++a2;
                              goto LABEL_338;
                            case 'H':
                              ++a2;
                              goto LABEL_376;
                            case 'L':
                              ++a2;
                              goto LABEL_394;
                            case 'M':
                              ++a2;
                              goto LABEL_434;
                            case 'N':
                              ++a2;
                              goto LABEL_539;
                            case 'O':
                              ++a2;
                              goto LABEL_557;
                            case 'P':
                              ++a2;
                              goto LABEL_575;
                            case 'Q':
                              ++a2;
                              goto LABEL_725;
                            case 'R':
                              ++a2;
                              goto LABEL_743;
                            case 'S':
                              ++a2;
                              goto LABEL_821;
                            case 'T':
                              ++a2;
                              goto LABEL_910;
                            case 'U':
                              ++a2;
                              goto LABEL_950;
                            default:
                              goto LABEL_1299;
                          }
                        }
                        return 208;
                      }
LABEL_35:
                      if (a2 == a3)
                        return 234;
                      *(_QWORD *)(a1 + 8) = a2;
                      *(_QWORD *)(a1 + 16) = llhttp__on_method;
LABEL_37:
                      if (a2 == a3)
                        return 233;
                      if (*a2 != 72)
                        goto LABEL_206;
                      ++a2;
LABEL_40:
                      if (a2 == a3)
                        return 232;
                      v22 = *a2;
                      if (v22 != 84)
                      {
                        if (v22 == 69)
                        {
                          ++a2;
LABEL_44:
                          if (a2 == a3)
                            return 229;
                          v23 = 0;
                          v24 = *(_DWORD *)a1;
                          while (1)
                          {
                            v25 = *a2;
                            v26 = llparse_blob59[v24];
                            if (v24 == 1)
                            {
                              v23 = 0;
                              v27 = 5;
                            }
                            else
                            {
                              v27 = 0;
                            }
                            if (v25 != v26)
                            {
                              v23 = 2;
                              v27 = 5;
                            }
                            if (v27)
                              break;
                            if (v25 == v26)
                              ++v24;
                            if (++a2 == a3)
                            {
                              v23 = 1;
                              a2 = a3;
                              *(_DWORD *)a1 = v24;
                              goto LABEL_100;
                            }
                          }
                          *(_DWORD *)a1 = 0;
LABEL_100:
                          if (!v23)
                          {
                            ++a2;
                            *(_WORD *)(a1 + 72) = 513;
                            v40 = *(_QWORD *)(a1 + 8);
                            *(_QWORD *)(a1 + 8) = 0;
                            v41 = *(_QWORD *)(a1 + 88);
                            if (v41)
                            {
                              v42 = *(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *))(v41 + 24);
                              if (v42)
                              {
                                v43 = v42(a1, v40, &a2[-v40]);
                                if (v43)
                                {
                                  v44 = v43;
                                  if (v43 == -1)
                                  {
                                    *(_QWORD *)(a1 + 32) = "Span callback error in on_method";
                                    v44 = 24;
                                  }
                                  result = 0;
                                  *(_DWORD *)(a1 + 24) = v44;
                                  *(_QWORD *)(a1 + 40) = a2;
                                  *(_QWORD *)(a1 + 56) = 228;
                                  return result;
                                }
                              }
                            }
                            goto LABEL_1028;
                          }
                          if (v23 == 1)
                            return 229;
                        }
LABEL_206:
                        result = 0;
                        *(_DWORD *)(a1 + 24) = 8;
                        v7 = "Invalid word encountered";
                        goto LABEL_2263;
                      }
                      ++a2;
LABEL_71:
                      if (a2 == a3)
                        return 231;
                      v30 = 0;
                      v31 = *(_DWORD *)a1;
                      while (1)
                      {
                        v32 = *a2;
                        v33 = llparse_blob60[v31];
                        if (v31 == 2)
                        {
                          v30 = 0;
                          v34 = 5;
                        }
                        else
                        {
                          v34 = 0;
                        }
                        if (v32 != v33)
                        {
                          v30 = 2;
                          v34 = 5;
                        }
                        if (v34)
                          break;
                        if (v32 == v33)
                          ++v31;
                        if (++a2 == a3)
                        {
                          v30 = 1;
                          a2 = a3;
                          *(_DWORD *)a1 = v31;
                          goto LABEL_107;
                        }
                      }
                      *(_DWORD *)a1 = 0;
LABEL_107:
                      if (v30)
                      {
                        if (v30 == 1)
                          return 231;
                        goto LABEL_206;
                      }
                      ++a2;
                      v45 = *(_QWORD *)(a1 + 8);
                      *(_QWORD *)(a1 + 8) = 0;
                      v46 = *(_QWORD *)(a1 + 88);
                      if (v46)
                      {
                        v47 = *(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *))(v46 + 24);
                        if (v47)
                        {
                          v48 = v47(a1, v45, &a2[-v45]);
                          if (v48)
                          {
                            v412 = v48;
                            if (v48 == -1)
                            {
                              *(_QWORD *)(a1 + 32) = "Span callback error in on_method";
                              v412 = 24;
                            }
                            result = 0;
                            *(_DWORD *)(a1 + 24) = v412;
                            *(_QWORD *)(a1 + 40) = a2;
                            *(_QWORD *)(a1 + 56) = 230;
                            return result;
                          }
                        }
                      }
LABEL_111:
                      *(_BYTE *)(a1 + 72) = 2;
                    }
LABEL_112:
                    if (a2 == a3)
                      return 226;
                    *(_QWORD *)(a1 + 8) = a2;
                    *(_QWORD *)(a1 + 16) = llhttp__on_version;
LABEL_114:
                    if (a2 == a3)
                      return 225;
                    v49 = *a2 - 48;
                    if (v49 >= 0xA)
                    {
                      v389 = *(_QWORD *)(a1 + 8);
                      *(_QWORD *)(a1 + 8) = 0;
                      v390 = *(_QWORD *)(a1 + 88);
                      if (v390)
                      {
                        v391 = *(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *))(v390 + 32);
                        if (v391)
                        {
                          v392 = v391(a1, v389, &a2[-v389]);
                          if (v392)
                          {
                            v393 = v392;
                            if (v392 == -1)
                            {
                              *(_QWORD *)(a1 + 32) = "Span callback error in on_version";
                              v393 = 24;
                            }
                            result = 0;
                            *(_DWORD *)(a1 + 24) = v393;
                            *(_QWORD *)(a1 + 40) = a2;
                            *(_QWORD *)(a1 + 56) = 224;
                            return result;
                          }
                        }
                      }
                      goto LABEL_1407;
                    }
                    ++a2;
                    *(_BYTE *)(a1 + 74) = v49;
LABEL_117:
                    if (a2 == a3)
                      return 223;
                    if (*a2 != 46)
                    {
                      v394 = *(_QWORD *)(a1 + 8);
                      *(_QWORD *)(a1 + 8) = 0;
                      v395 = *(_QWORD *)(a1 + 88);
                      if (v395)
                      {
                        v396 = *(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *))(v395 + 32);
                        if (v396)
                        {
                          v397 = v396(a1, v394, &a2[-v394]);
                          if (v397)
                          {
                            v398 = v397;
                            if (v397 == -1)
                            {
                              *(_QWORD *)(a1 + 32) = "Span callback error in on_version";
                              v398 = 24;
                            }
                            result = 0;
                            *(_DWORD *)(a1 + 24) = v398;
                            *(_QWORD *)(a1 + 40) = a2;
                            *(_QWORD *)(a1 + 56) = 222;
                            return result;
                          }
                        }
                      }
                      goto LABEL_1414;
                    }
                    ++a2;
LABEL_120:
                    if (a2 == a3)
                      return 221;
                    v50 = 0;
                    v51 = 0;
                    v52 = 1;
                    v53 = 1;
                    switch(*a2)
                    {
                      case '0':
                        goto LABEL_133;
                      case '1':
                        v52 = 0;
                        v50 = 0;
                        v51 = 1;
                        goto LABEL_133;
                      case '2':
                        v52 = 0;
                        v53 = 0;
                        v50 = 0;
                        v51 = 2;
                        goto LABEL_133;
                      case '3':
                        v52 = 0;
                        v53 = 0;
                        v50 = 0;
                        v51 = 3;
                        goto LABEL_133;
                      case '4':
                        v52 = 0;
                        v53 = 0;
                        v50 = 0;
                        v51 = 4;
                        goto LABEL_133;
                      case '5':
                        v52 = 0;
                        v53 = 0;
                        v50 = 0;
                        v51 = 5;
                        goto LABEL_133;
                      case '6':
                        v52 = 0;
                        v53 = 0;
                        v50 = 0;
                        v51 = 6;
                        goto LABEL_133;
                      case '7':
                        v52 = 0;
                        v53 = 0;
                        v50 = 0;
                        v51 = 7;
                        goto LABEL_133;
                      case '8':
                        v52 = 0;
                        v53 = 0;
                        v50 = 0;
                        v51 = 8;
                        goto LABEL_133;
                      case '9':
                        v52 = 0;
                        v53 = 0;
                        v51 = 9;
                        v50 = 1;
LABEL_133:
                        ++a2;
                        *(_BYTE *)(a1 + 75) = v51;
                        if ((*(_WORD *)(a1 + 78) & 0x10) != 0)
                          goto LABEL_138;
                        v54 = *(unsigned __int8 *)(a1 + 74);
                        if (*(_BYTE *)(a1 + 74))
                        {
                          if (v54 == 1)
                          {
                            if ((v53 & 1) == 0)
                              goto LABEL_195;
                          }
                          else if (v54 != 2 || (v52 & 1) == 0)
                          {
LABEL_195:
                            v85 = *(_QWORD *)(a1 + 8);
                            *(_QWORD *)(a1 + 8) = 0;
                            v86 = *(_QWORD *)(a1 + 88);
                            if (v86)
                            {
                              v87 = *(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *))(v86 + 32);
                              if (v87)
                              {
                                v88 = v87(a1, v85, &a2[-v85]);
                                if (v88)
                                {
                                  v89 = v88;
                                  if (v88 == -1)
                                  {
                                    *(_QWORD *)(a1 + 32) = "Span callback error in on_version";
                                    v89 = 24;
                                  }
                                  result = 0;
                                  *(_DWORD *)(a1 + 24) = v89;
                                  *(_QWORD *)(a1 + 40) = a2;
                                  *(_QWORD *)(a1 + 56) = 219;
                                  return result;
                                }
                              }
                            }
                            goto LABEL_1282;
                          }
                        }
                        else if ((v50 & 1) == 0)
                        {
                          goto LABEL_195;
                        }
LABEL_138:
                        v55 = *(_QWORD *)(a1 + 8);
                        *(_QWORD *)(a1 + 8) = 0;
                        v56 = *(_QWORD *)(a1 + 88);
                        if (v56)
                        {
                          v57 = *(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *))(v56 + 32);
                          if (v57)
                          {
                            v58 = v57(a1, v55, &a2[-v55]);
                            if (v58)
                            {
                              v410 = v58;
                              if (v58 == -1)
                              {
                                *(_QWORD *)(a1 + 32) = "Span callback error in on_version";
                                v410 = 24;
                              }
                              result = 0;
                              *(_DWORD *)(a1 + 24) = v410;
                              *(_QWORD *)(a1 + 40) = a2;
                              *(_QWORD *)(a1 + 56) = 218;
                              return result;
                            }
                          }
                        }
LABEL_141:
                        v59 = *(_QWORD *)(a1 + 88);
                        if (v59)
                        {
                          v60 = *(uint64_t (**)(uint64_t))(v59 + 120);
                          if (v60)
                          {
                            v61 = v60(a1);
                            if (v61)
                            {
                              if (v61 == 21)
                              {
                                result = 0;
                                *(_DWORD *)(a1 + 24) = 21;
                                *(_QWORD *)(a1 + 32) = "on_version_complete pause";
                                *(_QWORD *)(a1 + 40) = a2;
                                *(_QWORD *)(a1 + 56) = 217;
                                return result;
                              }
                              goto LABEL_1425;
                            }
                          }
                        }
LABEL_144:
                        if (a2 == a3)
                          return 217;
                        if (*a2 != 32)
                        {
                          result = 0;
                          *(_DWORD *)(a1 + 24) = 9;
                          v7 = "Expected space after version";
                          goto LABEL_2263;
                        }
                        ++a2;
                        *(_WORD *)(a1 + 84) = 0;
LABEL_147:
                        if (a2 == a3)
                          return 216;
                        v62 = *a2 - 48;
                        if (v62 >= 0xA
                          || (++a2, v63 = *(unsigned __int16 *)(a1 + 84), v63 >> 1 > 0xCCC)
                          || (v64 = 10 * v63, *(_WORD *)(a1 + 84) = v64, (v62 ^ 0xFFFFu) < v64))
                        {
LABEL_191:
                          result = 0;
                          *(_DWORD *)(a1 + 24) = 13;
                          v7 = "Invalid status code";
                          goto LABEL_2263;
                        }
                        *(_WORD *)(a1 + 84) = v64 + v62;
LABEL_152:
                        if (a2 == a3)
                          return 215;
                        v65 = *a2 - 48;
                        if (v65 >= 0xA)
                          goto LABEL_162;
                        ++a2;
                        v66 = *(unsigned __int16 *)(a1 + 84);
                        if (v66 >> 1 > 0xCCC)
                          goto LABEL_191;
                        v67 = 10 * v66;
                        *(_WORD *)(a1 + 84) = v67;
                        if ((v65 ^ 0xFFFFu) < v67)
                          goto LABEL_191;
                        *(_WORD *)(a1 + 84) = v67 + v65;
LABEL_157:
                        if (a2 == a3)
                          return 214;
                        v68 = *a2 - 48;
                        if (v68 >= 0xA)
                        {
LABEL_162:
                          if ((*(_WORD *)(a1 + 78) & 0x2000) == 0)
                            goto LABEL_191;
                        }
                        else
                        {
                          ++a2;
                          v69 = *(unsigned __int16 *)(a1 + 84);
                          if (v69 >> 1 > 0xCCC)
                            goto LABEL_191;
                          v70 = 10 * v69;
                          *(_WORD *)(a1 + 84) = v70;
                          if ((v68 ^ 0xFFFFu) < v70)
                            goto LABEL_191;
                          *(_WORD *)(a1 + 84) = v70 + v68;
                        }
LABEL_163:
                        if (a2 == a3)
                          return 213;
                        v71 = *a2;
                        if (v71 == 32)
                        {
                          ++a2;
LABEL_170:
                          if (a2 == a3)
                            return 212;
                          *(_QWORD *)(a1 + 8) = a2;
                          *(_QWORD *)(a1 + 16) = llhttp__on_status;
LABEL_172:
                          result = 211;
                          if (a2 == a3)
                            return result;
                          while (1)
                          {
                            v72 = *a2;
                            if (v72 == 10)
                              break;
                            if (v72 == 13)
                            {
                              v81 = *(_QWORD *)(a1 + 8);
                              *(_QWORD *)(a1 + 8) = 0;
                              v82 = *(_QWORD *)(a1 + 88);
                              if (!v82)
                                goto LABEL_190;
                              v83 = *(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *))(v82 + 16);
                              if (!v83)
                                goto LABEL_190;
                              v84 = v83(a1, v81, &a2[-v81]);
                              if (!v84)
                                goto LABEL_190;
                              v417 = v84;
                              if (v84 == -1)
                              {
                                *(_QWORD *)(a1 + 32) = "Span callback error in on_status";
                                v417 = 24;
                              }
                              result = 0;
                              *(_DWORD *)(a1 + 24) = v417;
                              *(_QWORD *)(a1 + 40) = a2 + 1;
                              *(_QWORD *)(a1 + 56) = 97;
                              return result;
                            }
                            if (++a2 == a3)
                              return result;
                          }
                          v73 = *(_QWORD *)(a1 + 8);
                          *(_QWORD *)(a1 + 8) = 0;
                          v74 = *(_QWORD *)(a1 + 88);
                          if (v74)
                          {
                            v75 = *(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *))(v74 + 16);
                            if (v75)
                            {
                              v76 = v75(a1, v73, &a2[-v73]);
                              if (v76)
                              {
                                v416 = v76;
                                if (v76 == -1)
                                {
                                  *(_QWORD *)(a1 + 32) = "Span callback error in on_status";
                                  v416 = 24;
                                }
                                result = 0;
                                *(_DWORD *)(a1 + 24) = v416;
                                *(_QWORD *)(a1 + 40) = a2 + 1;
                                *(_QWORD *)(a1 + 56) = 210;
                                return result;
                              }
                            }
                          }
                          ++a2;
LABEL_181:
                          if ((*(_WORD *)(a1 + 78) & 0x100) == 0)
                          {
                            result = 0;
                            *(_DWORD *)(a1 + 24) = 25;
                            v7 = "Missing expected CR after response line";
                            goto LABEL_2263;
                          }
                        }
                        else
                        {
                          if (v71 == 13)
                          {
LABEL_190:
                            ++a2;
LABEL_2349:
                            while (a2 != a3)
                            {
                              v714 = *a2;
                              if (v714 != 13)
                              {
                                if (v714 == 10)
                                {
                                  ++a2;
                                  goto LABEL_182;
                                }
                                if ((*(_WORD *)(a1 + 78) & 0x40) != 0)
                                  goto LABEL_182;
LABEL_1770:
                                result = 0;
                                *(_DWORD *)(a1 + 24) = 2;
                                v7 = "Expected LF after CR";
                                goto LABEL_2263;
                              }
LABEL_2348:
                              ++a2;
                              if ((*(_WORD *)(a1 + 78) & 0x1000) == 0)
                                goto LABEL_1770;
                            }
                            return 97;
                          }
                          if (v71 != 10 || (++a2, (*(_WORD *)(a1 + 78) & 0x100) == 0))
                          {
                            result = 0;
                            *(_DWORD *)(a1 + 24) = 13;
                            v7 = "Invalid response status";
                            goto LABEL_2263;
                          }
                        }
LABEL_182:
                        v77 = *(_QWORD *)(a1 + 88);
                        if (v77)
                        {
                          v78 = *(uint64_t (**)(uint64_t))(v77 + 104);
                          if (v78)
                          {
                            v79 = v78(a1);
                            if (v79)
                            {
                              if (v79 != 21)
                              {
                                result = 0;
                                *(_DWORD *)(a1 + 24) = 27;
                                goto LABEL_2263;
                              }
                              result = 0;
                              *(_DWORD *)(a1 + 24) = 21;
                              v80 = "on_status_complete pause";
                              goto LABEL_1147;
                            }
                          }
                        }
LABEL_1269:
                        if (a2 == a3)
                          return 91;
                        if (*a2 == 32)
                        {
                          ++a2;
                          if ((*(_WORD *)(a1 + 78) & 1) == 0)
                          {
                            result = 0;
                            *(_DWORD *)(a1 + 24) = 30;
                            v7 = "Unexpected space after start line";
                            goto LABEL_2263;
                          }
                        }
                        break;
                      default:
                        v418 = *(_QWORD *)(a1 + 8);
                        *(_QWORD *)(a1 + 8) = 0;
                        v419 = *(_QWORD *)(a1 + 88);
                        if (!v419)
                          goto LABEL_1475;
                        v420 = *(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *))(v419 + 32);
                        if (!v420)
                          goto LABEL_1475;
                        v421 = v420(a1, v418, &a2[-v418]);
                        if (!v421)
                          goto LABEL_1475;
                        v422 = v421;
                        if (v421 == -1)
                        {
                          *(_QWORD *)(a1 + 32) = "Span callback error in on_version";
                          v422 = 24;
                        }
                        result = 0;
                        *(_DWORD *)(a1 + 24) = v422;
                        *(_QWORD *)(a1 + 40) = a2;
                        *(_QWORD *)(a1 + 56) = 220;
                        return result;
                    }
                    continue;
                  }
                }
                break;
              }
              *(_QWORD *)(a1 + 64) = 0;
              goto LABEL_1927;
            }
            if ((*(_WORD *)(a1 + 78) & 1) == 0)
            {
              result = 0;
              *(_DWORD *)(a1 + 24) = 10;
              v7 = "Unexpected whitespace after header value";
              goto LABEL_2263;
            }
            if (*(_BYTE *)(a1 + 76) == 8)
              *(_BYTE *)(a1 + 76) = 0;
LABEL_1779:
            if (a2 == a3)
              return 73;
            *(_QWORD *)(a1 + 8) = a2;
            *(_QWORD *)(a1 + 16) = llhttp__on_header_value;
            switch(*(_BYTE *)(a1 + 76))
            {
              case 1:
                goto LABEL_2274;
              case 2:
                if ((*(_WORD *)(a1 + 82) & 0x20) == 0)
                  goto LABEL_1784;
                if ((*(_WORD *)(a1 + 78) & 0x800) == 0)
                {
                  result = 0;
                  *(_DWORD *)(a1 + 24) = 4;
                  v7 = "Duplicate Content-Length";
                  goto LABEL_2263;
                }
                *(_QWORD *)(a1 + 64) = 0;
LABEL_1784:
                if (a2 == a3)
                  return 65;
                v562 = a2;
                result = 65;
                while (2)
                {
                  if (*v562 - 48 < 0xA)
                  {
                    a2 = v562 + 1;
                    v563 = *(_QWORD *)(a1 + 64);
                    if (v563 <= 0x1999999999999999)
                    {
                      v564 = (*v562 - 48);
                      v565 = 10 * v563;
                      *(_QWORD *)(a1 + 64) = v565;
                      if (!__CFADD__(v564, v565))
                      {
                        *(_QWORD *)(a1 + 64) = v565 + v564;
                        ++v562;
                        if (a2 == a3)
                          return result;
                        continue;
                      }
                      a2 = v562 + 1;
                    }
                    v574 = *(_QWORD *)(a1 + 8);
                    *(_QWORD *)(a1 + 8) = 0;
                    v575 = *(_QWORD *)(a1 + 88);
                    if (!v575
                      || (v576 = *(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *))(v575 + 48)) == 0
                      || (v577 = v576(a1, v574, &a2[-v574])) == 0)
                    {
LABEL_1820:
                      result = 0;
                      *(_DWORD *)(a1 + 24) = 11;
                      v7 = "Content-Length overflow";
                      goto LABEL_2263;
                    }
                    v578 = v577;
                    if (v577 == -1)
                    {
                      *(_QWORD *)(a1 + 32) = "Span callback error in on_header_value";
                      v578 = 24;
                    }
                    result = 0;
                    *(_DWORD *)(a1 + 24) = v578;
                    *(_QWORD *)(a1 + 40) = a2;
                    *(_QWORD *)(a1 + 56) = 62;
                    return result;
                  }
                  break;
                }
                a2 = v562;
LABEL_1795:
                result = 64;
                if (a2 == a3)
                  return result;
                while (1)
                {
                  v567 = *a2;
                  if (v567 != 32)
                    break;
                  if (++a2 == a3)
                    return result;
                }
                if (v567 != 10 && v567 != 13)
                {
                  v569 = *(_QWORD *)(a1 + 8);
                  *(_QWORD *)(a1 + 8) = 0;
                  v570 = *(_QWORD *)(a1 + 88);
                  if (!v570
                    || (v571 = *(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *))(v570 + 48)) == 0
                    || (v572 = v571(a1, v569, &a2[-v569])) == 0)
                  {
LABEL_1812:
                    result = 0;
                    *(_DWORD *)(a1 + 24) = 11;
                    v7 = "Invalid character in Content-Length";
                    goto LABEL_2263;
                  }
                  v573 = v572;
                  if (v572 == -1)
                  {
                    *(_QWORD *)(a1 + 32) = "Span callback error in on_header_value";
                    v573 = 24;
                  }
                  result = 0;
                  *(_DWORD *)(a1 + 24) = v573;
                  *(_QWORD *)(a1 + 40) = a2;
                  *(_QWORD *)(a1 + 56) = 63;
                  return result;
                }
                *(_WORD *)(a1 + 82) |= 0x20u;
                break;
              case 3:
                v579 = *(_WORD *)(a1 + 82);
                if ((v579 & 8) != 0 && *(_BYTE *)(a1 + 72) == 1 && (*(_WORD *)(a1 + 78) & 8) == 0)
                {
                  *(_QWORD *)(a1 + 8) = 0;
                  v593 = *(_QWORD *)(a1 + 88);
                  if (v593)
                  {
                    v594 = *(uint64_t (**)(uint64_t, unsigned __int8 *, _QWORD))(v593 + 48);
                    if (v594)
                    {
                      v595 = v594(a1, a2, 0);
                      if (v595)
                      {
                        v596 = v595;
                        if (v595 == -1)
                        {
                          *(_QWORD *)(a1 + 32) = "Span callback error in on_header_value";
                          v596 = 24;
                        }
                        result = 0;
                        *(_DWORD *)(a1 + 24) = v596;
                        *(_QWORD *)(a1 + 40) = a2 + 1;
                        *(_QWORD *)(a1 + 56) = 66;
                        return result;
                      }
                    }
                  }
                  goto LABEL_1885;
                }
                *(_WORD *)(a1 + 82) = v579 & 0xFDF7 | 0x200;
LABEL_1825:
                while (2)
                {
                  if (a2 == a3)
                    return 72;
                  v580 = *(_DWORD *)a1;
                  v581 = &a2[6 - *(_DWORD *)a1];
                  v582 = *(_DWORD *)a1 + (_DWORD)a3 - (_DWORD)a2;
                  while (2)
                  {
                    if ((*a2 | 0x20) == llparse_blob5[v580])
                    {
                      if (v580 != 6)
                      {
                        ++a2;
                        ++v580;
                        if (a2 == a3)
                        {
                          *(_DWORD *)a1 = v582;
                          return 72;
                        }
                        continue;
                      }
                      *(_DWORD *)a1 = 0;
                      a2 = v581 + 1;
LABEL_1725:
                      result = 71;
                      if (a2 == a3)
                        return result;
                      while (1)
                      {
                        v538 = *a2;
                        if (v538 != 32)
                          break;
                        if (++a2 == a3)
                          return result;
                      }
                      if (v538 == 10 || v538 == 13)
                      {
                        *(_BYTE *)(a1 + 76) = 8;
                        goto LABEL_1744;
                      }
                      if (v538 == 44)
                      {
                        if (*(_BYTE *)(a1 + 72) == 1 && (*(_WORD *)(a1 + 78) & 8) == 0)
                        {
                          v540 = *(_QWORD *)(a1 + 8);
                          *(_QWORD *)(a1 + 8) = 0;
                          v541 = *(_QWORD *)(a1 + 88);
                          if (v541)
                          {
                            v542 = *(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *))(v541 + 48);
                            if (v542)
                            {
                              v543 = v542(a1, v540, &a2[-v540]);
                              if (v543)
                              {
                                v544 = v543;
                                if (v543 == -1)
                                {
                                  *(_QWORD *)(a1 + 32) = "Span callback error in on_header_value";
                                  v544 = 24;
                                }
                                result = 0;
                                *(_DWORD *)(a1 + 24) = v544;
                                *(_QWORD *)(a1 + 40) = a2 + 1;
                                *(_QWORD *)(a1 + 56) = 67;
                                return result;
                              }
                            }
                          }
LABEL_1885:
                          ++a2;
LABEL_2:
                          result = 0;
                          *(_DWORD *)(a1 + 24) = 15;
                          goto LABEL_2263;
                        }
                        goto LABEL_1825;
                      }
                    }
                    else
                    {
                      *(_DWORD *)a1 = 0;
                    }
                    break;
                  }
LABEL_1832:
                  if (a2 == a3)
                    return 70;
                  result = 70;
                  while (1)
                  {
                    v583 = llhttp__internal__run_lookup_table_15[*a2];
                    if (v583 != 1)
                      break;
                    if (++a2 == a3)
                      return result;
                  }
                  if (v583 == 2)
                  {
                    ++a2;
LABEL_1839:
                    result = 68;
                    if (a2 == a3)
                      return result;
                    while (1)
                    {
                      v584 = *a2;
                      if (v584 != 32 && v584 != 9)
                        break;
                      if (++a2 == a3)
                        return result;
                    }
                    continue;
                  }
                  break;
                }
LABEL_1848:
                *(_BYTE *)(a1 + 76) = 0;
LABEL_1849:
                if (a2 == a3)
                  return 69;
                result = 69;
                while (llhttp__internal__run_lookup_table_14[*a2] == 1)
                {
                  if (++a2 == a3)
                    return result;
                }
                continue;
              case 4:
                *(_WORD *)(a1 + 82) |= 0x10u;
                goto LABEL_1848;
              default:
                goto LABEL_1849;
            }
          }
          v550 = *(_QWORD *)(a1 + 8);
          *(_QWORD *)(a1 + 8) = 0;
          v551 = *(_QWORD *)(a1 + 88);
          if (v551)
          {
            v552 = *(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *))(v551 + 48);
            if (v552)
            {
              v553 = v552(a1, v550, &a2[-v550]);
              if (v553)
              {
                v554 = v553;
                if (v553 == -1)
                {
                  *(_QWORD *)(a1 + 32) = "Span callback error in on_header_value";
                  v554 = 24;
                }
                result = 0;
                *(_DWORD *)(a1 + 24) = v554;
                *(_QWORD *)(a1 + 40) = a2;
                *(_QWORD *)(a1 + 56) = 51;
                return result;
              }
            }
          }
LABEL_1766:
          if ((*(_WORD *)(a1 + 78) & 0x100) == 0)
          {
            result = 0;
            *(_DWORD *)(a1 + 24) = 25;
            v7 = "Missing expected CR after header value";
            goto LABEL_2263;
          }
          goto LABEL_1767;
        }
        break;
      }
      ++a2;
LABEL_2307:
      if (a2 != a3)
      {
        v704 = 0;
        v705 = *(_DWORD *)a1;
        while (1)
        {
          v706 = *a2;
          if ((v706 - 65) < 0x1A)
            v706 |= 0x20u;
          v707 = llparse_blob2[v705];
          if (v705 == 3)
          {
            v704 = 0;
            v708 = 5;
          }
          else
          {
            v708 = 0;
          }
          if (v706 != v707)
          {
            v704 = 2;
            v708 = 5;
          }
          if (v708)
            break;
          if (v706 == v707)
            ++v705;
          if (++a2 == a3)
          {
            v704 = 1;
            a2 = a3;
            *(_DWORD *)a1 = v705;
            goto LABEL_2322;
          }
        }
        *(_DWORD *)a1 = 0;
LABEL_2322:
        v703 = 6;
        if (!v704)
          goto LABEL_1886;
        if (v704 == 2)
          goto LABEL_2343;
      }
      return 58;
    case 62:
      goto LABEL_1820;
    case 63:
      goto LABEL_1812;
    case 64:
      goto LABEL_1795;
    case 65:
      goto LABEL_1784;
    case 66:
    case 67:
      goto LABEL_2;
    case 68:
      goto LABEL_1839;
    case 69:
      goto LABEL_1849;
    case 70:
      goto LABEL_1832;
    case 71:
      goto LABEL_1725;
    case 72:
      goto LABEL_1825;
    case 73:
      goto LABEL_1779;
    case 74:
      goto LABEL_2247;
    case 75:
      goto LABEL_2100;
    case 76:
      goto LABEL_2097;
    case 77:
      goto LABEL_1708;
    case 78:
      goto LABEL_1705;
    case 79:
      goto LABEL_1700;
    case 80:
      goto LABEL_2090;
    case 81:
      goto LABEL_1972;
    case 82:
      goto LABEL_1991;
    case 83:
      goto LABEL_1966;
    case 84:
LABEL_1947:
      if (a2 == a3)
        return 84;
      v609 = 0;
      v610 = *(_DWORD *)a1;
      while (1)
      {
        v611 = *a2;
        if ((v611 - 65) < 0x1A)
          v611 |= 0x20u;
        v612 = llparse_blob0[v610];
        if (v610 == 1)
        {
          v609 = 0;
          v613 = 5;
        }
        else
        {
          v613 = 0;
        }
        if (v611 != v612)
        {
          v609 = 2;
          v613 = 5;
        }
        if (v613)
          break;
        if (v611 == v612)
          ++v610;
        if (++a2 == a3)
        {
          v609 = 1;
          a2 = a3;
          *(_DWORD *)a1 = v610;
          goto LABEL_1962;
        }
      }
      *(_DWORD *)a1 = 0;
LABEL_1962:
      if (v609)
      {
        if (v609 != 2)
          return 84;
        goto LABEL_1699;
      }
      ++a2;
LABEL_1966:
      if (a2 == a3)
        return 83;
      v614 = *a2;
      if ((v614 - 65) < 0x1A)
        v614 |= 0x20u;
      if (v614 != 116)
      {
        if (v614 != 110)
          goto LABEL_1699;
        ++a2;
LABEL_1972:
        if (a2 == a3)
          return 81;
        v615 = 0;
        v616 = *(_DWORD *)a1;
        while (1)
        {
          v617 = *a2;
          if ((v617 - 65) < 0x1A)
            v617 |= 0x20u;
          v618 = llparse_blob1[v616];
          if (v616 == 5)
          {
            v615 = 0;
            v619 = 5;
          }
          else
          {
            v619 = 0;
          }
          if (v617 != v618)
          {
            v615 = 2;
            v619 = 5;
          }
          if (v619)
            break;
          if (v617 == v618)
            ++v616;
          if (++a2 == a3)
          {
            v615 = 1;
            a2 = a3;
            *(_DWORD *)a1 = v616;
            goto LABEL_1987;
          }
        }
        *(_DWORD *)a1 = 0;
LABEL_1987:
        v620 = 1;
        if (v615)
        {
          if (v615 != 2)
            return 81;
LABEL_1699:
          *(_BYTE *)(a1 + 76) = 0;
LABEL_1700:
          if (a2 == a3)
            return 79;
          result = 79;
          while (llhttp__internal__run_lookup_table_16[*a2] == 1)
          {
            if (++a2 == a3)
              return result;
          }
LABEL_1705:
          if (a2 == a3)
            return 78;
          if (*a2 != 58)
          {
            if ((*(_WORD *)(a1 + 78) & 0x400) == 0)
            {
LABEL_2156:
              result = 0;
              *(_DWORD *)(a1 + 24) = 10;
              v7 = "Invalid header token";
              goto LABEL_2263;
            }
LABEL_1708:
            result = 77;
            if (a2 == a3)
              return result;
            while (1)
            {
              v531 = *a2;
              if (v531 == 10 || v531 == 13)
                break;
              if (v531 == 58)
                goto LABEL_2093;
              if (++a2 == a3)
                return result;
            }
            v533 = *(_QWORD *)(a1 + 8);
            *(_QWORD *)(a1 + 8) = 0;
            v534 = *(_QWORD *)(a1 + 88);
            if (v534)
            {
              v535 = *(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *))(v534 + 40);
              if (v535)
              {
                v536 = v535(a1, v533, &a2[-v533]);
                if (v536)
                {
                  v537 = v536;
                  if (v536 == -1)
                  {
                    *(_QWORD *)(a1 + 32) = "Span callback error in on_header_field";
                    v537 = 24;
                  }
                  result = 0;
                  *(_DWORD *)(a1 + 24) = v537;
                  *(_QWORD *)(a1 + 40) = a2;
                  goto LABEL_2160;
                }
              }
            }
            goto LABEL_2097;
          }
LABEL_2093:
          v653 = *(_QWORD *)(a1 + 8);
          *(_QWORD *)(a1 + 8) = 0;
          v654 = *(_QWORD *)(a1 + 88);
          if (v654)
          {
            v655 = *(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *))(v654 + 40);
            if (v655)
            {
              v656 = v655(a1, v653, &a2[-v653]);
              if (v656)
              {
                v675 = v656;
                if (v656 == -1)
                {
                  *(_QWORD *)(a1 + 32) = "Span callback error in on_header_field";
                  v675 = 24;
                }
                result = 0;
                *(_DWORD *)(a1 + 24) = v675;
                *(_QWORD *)(a1 + 40) = a2 + 1;
LABEL_2160:
                *(_QWORD *)(a1 + 56) = 76;
                return result;
              }
            }
          }
          ++a2;
LABEL_2097:
          v657 = *(_QWORD *)(a1 + 88);
          if (v657)
          {
            v658 = *(uint64_t (**)(uint64_t))(v657 + 128);
            if (v658)
            {
              v659 = v658(a1);
              if (v659)
              {
                if (v659 == 21)
                {
                  result = 0;
                  *(_DWORD *)(a1 + 24) = 21;
                  *(_QWORD *)(a1 + 32) = "on_header_field_complete pause";
                  *(_QWORD *)(a1 + 40) = a2;
                  *(_QWORD *)(a1 + 56) = 75;
                  return result;
                }
                result = 0;
                *(_DWORD *)(a1 + 24) = 28;
                goto LABEL_2263;
              }
            }
          }
LABEL_2100:
          v660 = *(unsigned __int8 *)(a1 + 76);
          if (v660 == 2)
          {
            if ((*(_WORD *)(a1 + 82) & 0x200) != 0 && (*(_WORD *)(a1 + 78) & 2) == 0)
            {
              result = 0;
              *(_DWORD *)(a1 + 24) = 11;
              v7 = "Content-Length can't be present with Transfer-Encoding";
              goto LABEL_2263;
            }
          }
          else if (v660 == 3 && (*(_WORD *)(a1 + 82) & 0x20) != 0 && (*(_WORD *)(a1 + 78) & 2) == 0)
          {
            result = 0;
            *(_DWORD *)(a1 + 24) = 15;
            v7 = "Transfer-Encoding can't be present with Content-Length";
            goto LABEL_2263;
          }
LABEL_2247:
          if (a2 != a3)
          {
            result = 74;
            while (2)
            {
              switch(*a2)
              {
                case 9u:
                case 0x20u:
                  if (++a2 == a3)
                    return result;
                  continue;
                case 0xAu:
                  ++a2;
                  if ((*(_WORD *)(a1 + 78) & 0x100) != 0)
                    goto LABEL_2241;
                  goto LABEL_2262;
                case 0xDu:
                  ++a2;
                  goto LABEL_2255;
                default:
                  goto LABEL_1779;
              }
            }
          }
          return 74;
        }
LABEL_2089:
        ++a2;
        *(_BYTE *)(a1 + 76) = v620;
        while (1)
        {
LABEL_2090:
          if (a2 == a3)
            return 80;
          v652 = *a2;
          if (v652 != 32)
            break;
          if ((*(_WORD *)(a1 + 78) & 1) == 0)
          {
            v679 = *(_QWORD *)(a1 + 8);
            *(_QWORD *)(a1 + 8) = 0;
            v680 = *(_QWORD *)(a1 + 88);
            if (v680)
            {
              v681 = *(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *))(v680 + 40);
              if (v681)
              {
                v682 = v681(a1, v679, &a2[-v679]);
                if (v682)
                {
                  v683 = v682;
                  if (v682 == -1)
                  {
                    *(_QWORD *)(a1 + 32) = "Span callback error in on_header_field";
                    v683 = 24;
                  }
                  result = 0;
                  *(_DWORD *)(a1 + 24) = v683;
                  *(_QWORD *)(a1 + 40) = a2 + 1;
                  *(_QWORD *)(a1 + 56) = 42;
                  return result;
                }
              }
            }
            ++a2;
LABEL_2182:
            result = 0;
            *(_DWORD *)(a1 + 24) = 10;
            v7 = "Invalid header field char";
            goto LABEL_2263;
          }
LABEL_2109:
          result = 44;
          if (a2 == a3)
            return result;
          while (*a2 == 32)
          {
            if (++a2 == a3)
              return result;
          }
        }
        if (v652 == 58)
          goto LABEL_2093;
        goto LABEL_1699;
      }
      ++a2;
LABEL_1991:
      if (a2 != a3)
      {
        v621 = 0;
        v622 = *(_DWORD *)a1;
        while (1)
        {
          v623 = *a2;
          if ((v623 - 65) < 0x1A)
            v623 |= 0x20u;
          v624 = llparse_blob9[v622];
          if (v622 == 9)
          {
            v621 = 0;
            v625 = 5;
          }
          else
          {
            v625 = 0;
          }
          if (v623 != v624)
          {
            v621 = 2;
            v625 = 5;
          }
          if (v625)
            break;
          if (v623 == v624)
            ++v622;
          if (++a2 == a3)
          {
            v621 = 1;
            a2 = a3;
            *(_DWORD *)a1 = v622;
            goto LABEL_2006;
          }
        }
        *(_DWORD *)a1 = 0;
LABEL_2006:
        v620 = 2;
        if (!v621)
          goto LABEL_2089;
        if (v621 == 2)
          goto LABEL_1699;
      }
      return 82;
    case 85:
LABEL_2033:
      if (a2 == a3)
        return 85;
      v637 = 0;
      v638 = *(_DWORD *)a1;
      while (1)
      {
        v639 = *a2;
        if ((v639 - 65) < 0x1A)
          v639 |= 0x20u;
        v640 = llparse_blob10[v638];
        if (v638 == 14)
        {
          v637 = 0;
          v641 = 5;
        }
        else
        {
          v641 = 0;
        }
        if (v639 != v640)
        {
          v637 = 2;
          v641 = 5;
        }
        if (v641)
          break;
        if (v639 == v640)
          ++v638;
        if (++a2 == a3)
        {
          v637 = 1;
          a2 = a3;
          *(_DWORD *)a1 = v638;
          goto LABEL_2048;
        }
      }
      *(_DWORD *)a1 = 0;
LABEL_2048:
      v620 = 1;
      if (!v637)
        goto LABEL_2089;
      if (v637 != 2)
        return 85;
      goto LABEL_1699;
    case 86:
LABEL_2052:
      if (a2 == a3)
        return 86;
      v642 = 0;
      v643 = *(_DWORD *)a1;
      while (1)
      {
        v644 = *a2;
        if ((v644 - 65) < 0x1A)
          v644 |= 0x20u;
        v645 = llparse_blob11[v643];
        if (v643 == 15)
        {
          v642 = 0;
          v646 = 5;
        }
        else
        {
          v646 = 0;
        }
        if (v644 != v645)
        {
          v642 = 2;
          v646 = 5;
        }
        if (v646)
          break;
        if (v644 == v645)
          ++v643;
        if (++a2 == a3)
        {
          v642 = 1;
          a2 = a3;
          *(_DWORD *)a1 = v643;
          goto LABEL_2067;
        }
      }
      *(_DWORD *)a1 = 0;
LABEL_2067:
      v620 = 3;
      if (!v642)
        goto LABEL_2089;
      if (v642 != 2)
        return 86;
      goto LABEL_1699;
    case 87:
LABEL_2071:
      if (a2 == a3)
        return 87;
      v647 = 0;
      v648 = *(_DWORD *)a1;
      while (1)
      {
        v649 = *a2;
        if ((v649 - 65) < 0x1A)
          v649 |= 0x20u;
        v650 = llparse_blob12[v648];
        if (v648 == 5)
        {
          v647 = 0;
          v651 = 5;
        }
        else
        {
          v651 = 0;
        }
        if (v649 != v650)
        {
          v647 = 2;
          v651 = 5;
        }
        if (v651)
          break;
        if (v649 == v650)
          ++v648;
        if (++a2 == a3)
        {
          v647 = 1;
          a2 = a3;
          *(_DWORD *)a1 = v648;
          goto LABEL_2086;
        }
      }
      *(_DWORD *)a1 = 0;
LABEL_2086:
      v620 = 4;
      if (!v647)
        goto LABEL_2089;
      if (v647 != 2)
        return 87;
      goto LABEL_1699;
    case 88:
      goto LABEL_1942;
    case 89:
      goto LABEL_1940;
    case 90:
      goto LABEL_1936;
    case 91:
      goto LABEL_1269;
    case 92:
      goto LABEL_1137;
    case 93:
LABEL_1122:
      if (a2 == a3)
        return 93;
      v327 = *a2;
      if (v327 == 9 || v327 == 12)
        goto LABEL_1400;
      ++a2;
      goto LABEL_1137;
    case 94:
      goto LABEL_1134;
    case 95:
LABEL_1131:
      if (a2 == a3)
        return 95;
      v333 = *a2;
      if (v333 == 13)
      {
        ++a2;
LABEL_1134:
        if (a2 == a3)
          return 94;
        v319 = a2;
        if (*a2 == 10)
        {
          ++a2;
LABEL_1137:
          if (a2 == a3)
            return 92;
          v334 = *a2;
          if (v334 != 9 && v334 != 12)
          {
            *(_WORD *)(a1 + 74) = 2304;
            v336 = *(_QWORD *)(a1 + 88);
            if (!v336)
              goto LABEL_1269;
            v337 = *(uint64_t (**)(uint64_t))(v336 + 96);
            if (!v337)
              goto LABEL_1269;
            v338 = v337(a1);
            if (!v338)
              goto LABEL_1269;
            if (v338 == 21)
            {
              result = 0;
              *(_DWORD *)(a1 + 24) = 21;
              v80 = "on_url_complete pause";
LABEL_1147:
              *(_QWORD *)(a1 + 32) = v80;
              *(_QWORD *)(a1 + 40) = a2;
              *(_QWORD *)(a1 + 56) = 91;
              return result;
            }
LABEL_1437:
            result = 0;
            *(_DWORD *)(a1 + 24) = 26;
            goto LABEL_2263;
          }
          goto LABEL_1400;
        }
      }
      else
      {
        if (v333 == 9)
          goto LABEL_1400;
        v319 = a2;
        if (v333 == 12)
          goto LABEL_1400;
      }
      result = 0;
      *(_DWORD *)(a1 + 24) = 7;
      v321 = "Expected CRLF";
      goto LABEL_2192;
    case 96:
      goto LABEL_1283;
    case 97:
      goto LABEL_2349;
    case 98:
      goto LABEL_1264;
    case 99:
      goto LABEL_1259;
    case 100:
      goto LABEL_1258;
    case 101:
      goto LABEL_1255;
    case 102:
    case 219:
      goto LABEL_1282;
    case 103:
    case 220:
LABEL_1475:
      result = 0;
      *(_DWORD *)(a1 + 24) = 9;
      v7 = "Invalid minor version";
      goto LABEL_2263;
    case 104:
      goto LABEL_1233;
    case 105:
    case 222:
      goto LABEL_1414;
    case 106:
      goto LABEL_1230;
    case 107:
    case 224:
      goto LABEL_1407;
    case 108:
      goto LABEL_1227;
    case 109:
      goto LABEL_1225;
    case 110:
      goto LABEL_1192;
    case 111:
      goto LABEL_1210;
    case 112:
      goto LABEL_1173;
    case 113:
      goto LABEL_1165;
    case 114:
      goto LABEL_1157;
    case 115:
LABEL_1151:
      if (a2 == a3)
        return 115;
      v343 = *a2;
      if (v343 == 9 || v343 == 12)
        goto LABEL_1400;
      ++a2;
LABEL_1157:
      if (a2 == a3)
        return 114;
      v345 = *a2;
      if (v345 == 9 || v345 == 12)
        goto LABEL_1400;
      v347 = *(_QWORD *)(a1 + 88);
      if (v347)
      {
        v348 = *(uint64_t (**)(uint64_t))(v347 + 96);
        if (v348)
        {
          v349 = v348(a1);
          if (v349)
          {
            if (v349 == 21)
            {
              result = 0;
              *(_DWORD *)(a1 + 24) = 21;
              *(_QWORD *)(a1 + 32) = "on_url_complete pause";
              *(_QWORD *)(a1 + 40) = a2;
              *(_QWORD *)(a1 + 56) = 113;
              return result;
            }
            goto LABEL_1437;
          }
        }
      }
LABEL_1165:
      result = 113;
      if (a2 == a3)
        return result;
      while (1)
      {
        v350 = *a2;
        if (v350 != 32)
          break;
        if (++a2 == a3)
          return result;
      }
      if (v350 != 72)
      {
        if (v350 == 73)
        {
          ++a2;
LABEL_1210:
          if (a2 != a3)
          {
            v363 = 0;
            v364 = *(_DWORD *)a1;
            while (1)
            {
              v365 = *a2;
              v366 = llparse_blob15[v364];
              if (v364 == 2)
              {
                v363 = 0;
                v367 = 5;
              }
              else
              {
                v367 = 0;
              }
              if (v365 != v366)
              {
                v363 = 2;
                v367 = 5;
              }
              if (v367)
                break;
              if (v365 == v366)
                ++v364;
              if (++a2 == a3)
              {
                v363 = 1;
                a2 = a3;
                *(_DWORD *)a1 = v364;
                goto LABEL_1223;
              }
            }
            *(_DWORD *)a1 = 0;
LABEL_1223:
            if (!v363)
            {
              ++a2;
              if (*(_BYTE *)(a1 + 73) != 33)
              {
                result = 0;
                *(_DWORD *)(a1 + 24) = 8;
                v7 = "Expected SOURCE method for ICE/x.x request";
                goto LABEL_2263;
              }
              goto LABEL_1225;
            }
            if (v363 != 1)
              goto LABEL_1306;
          }
          return 111;
        }
        if (v350 != 82)
          goto LABEL_1306;
        ++a2;
LABEL_1173:
        if (a2 != a3)
        {
          v351 = 0;
          v352 = *(_DWORD *)a1;
          while (1)
          {
            v353 = *a2;
            v354 = llparse_blob16[v352];
            if (v352 == 3)
            {
              v351 = 0;
              v355 = 5;
            }
            else
            {
              v355 = 0;
            }
            if (v353 != v354)
            {
              v351 = 2;
              v355 = 5;
            }
            if (v355)
              break;
            if (v353 == v354)
              ++v352;
            if (++a2 == a3)
            {
              v351 = 1;
              a2 = a3;
              *(_DWORD *)a1 = v352;
              goto LABEL_1186;
            }
          }
          *(_DWORD *)a1 = 0;
LABEL_1186:
          if (!v351)
          {
            ++a2;
            v356 = *(unsigned __int8 *)(a1 + 73);
            if (v356 - 35 >= 0xB && (v356 > 6 || ((1 << v356) & 0x4A) == 0))
            {
              result = 0;
              *(_DWORD *)(a1 + 24) = 8;
              v7 = "Invalid method for RTSP/x.x request";
              goto LABEL_2263;
            }
LABEL_1225:
            if (a2 == a3)
              return 109;
            *(_QWORD *)(a1 + 8) = a2;
            *(_QWORD *)(a1 + 16) = llhttp__on_version;
LABEL_1227:
            if (a2 == a3)
              return 108;
            v368 = *a2 - 48;
            if (v368 >= 0xA)
            {
              v399 = *(_QWORD *)(a1 + 8);
              *(_QWORD *)(a1 + 8) = 0;
              v400 = *(_QWORD *)(a1 + 88);
              if (v400)
              {
                v401 = *(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *))(v400 + 32);
                if (v401)
                {
                  v402 = v401(a1, v399, &a2[-v399]);
                  if (v402)
                  {
                    v403 = v402;
                    if (v402 == -1)
                    {
                      *(_QWORD *)(a1 + 32) = "Span callback error in on_version";
                      v403 = 24;
                    }
                    result = 0;
                    *(_DWORD *)(a1 + 24) = v403;
                    *(_QWORD *)(a1 + 40) = a2;
                    *(_QWORD *)(a1 + 56) = 107;
                    return result;
                  }
                }
              }
LABEL_1407:
              result = 0;
              *(_DWORD *)(a1 + 24) = 9;
              v7 = "Invalid major version";
              goto LABEL_2263;
            }
            ++a2;
            *(_BYTE *)(a1 + 74) = v368;
LABEL_1230:
            if (a2 == a3)
              return 106;
            if (*a2 != 46)
            {
              v404 = *(_QWORD *)(a1 + 8);
              *(_QWORD *)(a1 + 8) = 0;
              v405 = *(_QWORD *)(a1 + 88);
              if (v405)
              {
                v406 = *(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *))(v405 + 32);
                if (v406)
                {
                  v407 = v406(a1, v404, &a2[-v404]);
                  if (v407)
                  {
                    v408 = v407;
                    if (v407 == -1)
                    {
                      *(_QWORD *)(a1 + 32) = "Span callback error in on_version";
                      v408 = 24;
                    }
                    result = 0;
                    *(_DWORD *)(a1 + 24) = v408;
                    *(_QWORD *)(a1 + 40) = a2;
                    *(_QWORD *)(a1 + 56) = 105;
                    return result;
                  }
                }
              }
LABEL_1414:
              result = 0;
              *(_DWORD *)(a1 + 24) = 9;
              v7 = "Expected dot";
              goto LABEL_2263;
            }
            ++a2;
LABEL_1233:
            if (a2 == a3)
              return 104;
            v369 = 0;
            v370 = 0;
            v371 = 1;
            v372 = 1;
            switch(*a2)
            {
              case '0':
                goto LABEL_1247;
              case '1':
                v371 = 0;
                v369 = 0;
                v370 = 1;
                goto LABEL_1247;
              case '2':
                v371 = 0;
                v369 = 0;
                v372 = 0;
                v370 = 2;
                goto LABEL_1247;
              case '3':
                v371 = 0;
                v369 = 0;
                v372 = 0;
                v370 = 3;
                goto LABEL_1247;
              case '4':
                v371 = 0;
                v369 = 0;
                v372 = 0;
                v370 = 4;
                goto LABEL_1247;
              case '5':
                v371 = 0;
                v369 = 0;
                v372 = 0;
                v370 = 5;
                goto LABEL_1247;
              case '6':
                v371 = 0;
                v369 = 0;
                v372 = 0;
                v370 = 6;
                goto LABEL_1247;
              case '7':
                v371 = 0;
                v369 = 0;
                v372 = 0;
                v370 = 7;
                goto LABEL_1247;
              case '8':
                v371 = 0;
                v369 = 0;
                v372 = 0;
                v370 = 8;
                goto LABEL_1247;
              case '9':
                v371 = 0;
                v372 = 0;
                v370 = 9;
                v369 = 1;
LABEL_1247:
                ++a2;
                *(_BYTE *)(a1 + 75) = v370;
                if ((*(_WORD *)(a1 + 78) & 0x10) != 0)
                  goto LABEL_1252;
                v373 = *(unsigned __int8 *)(a1 + 74);
                if (*(_BYTE *)(a1 + 74))
                {
                  if (v373 != 1)
                  {
                    if (v373 == 2 && (v371 & 1) != 0)
                      goto LABEL_1252;
LABEL_1276:
                    v383 = *(_QWORD *)(a1 + 8);
                    *(_QWORD *)(a1 + 8) = 0;
                    v384 = *(_QWORD *)(a1 + 88);
                    if (v384)
                    {
                      v385 = *(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *))(v384 + 32);
                      if (v385)
                      {
                        v386 = v385(a1, v383, &a2[-v383]);
                        if (v386)
                        {
                          v387 = v386;
                          if (v386 == -1)
                          {
                            *(_QWORD *)(a1 + 32) = "Span callback error in on_version";
                            v387 = 24;
                          }
                          result = 0;
                          *(_DWORD *)(a1 + 24) = v387;
                          *(_QWORD *)(a1 + 40) = a2;
                          *(_QWORD *)(a1 + 56) = 102;
                          return result;
                        }
                      }
                    }
LABEL_1282:
                    result = 0;
                    *(_DWORD *)(a1 + 24) = 9;
                    v7 = "Invalid HTTP version";
                    goto LABEL_2263;
                  }
                  if ((v372 & 1) == 0)
                    goto LABEL_1276;
                }
                else if ((v369 & 1) == 0)
                {
                  goto LABEL_1276;
                }
LABEL_1252:
                v374 = *(_QWORD *)(a1 + 8);
                *(_QWORD *)(a1 + 8) = 0;
                v375 = *(_QWORD *)(a1 + 88);
                if (v375)
                {
                  v376 = *(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *))(v375 + 32);
                  if (v376)
                  {
                    v377 = v376(a1, v374, &a2[-v374]);
                    if (v377)
                    {
                      v411 = v377;
                      if (v377 == -1)
                      {
                        *(_QWORD *)(a1 + 32) = "Span callback error in on_version";
                        v411 = 24;
                      }
                      result = 0;
                      *(_DWORD *)(a1 + 24) = v411;
                      *(_QWORD *)(a1 + 40) = a2;
                      *(_QWORD *)(a1 + 56) = 101;
                      return result;
                    }
                  }
                }
LABEL_1255:
                v378 = *(_QWORD *)(a1 + 88);
                if (v378)
                {
                  v379 = *(uint64_t (**)(uint64_t))(v378 + 120);
                  if (v379)
                  {
                    v380 = v379(a1);
                    if (v380)
                    {
                      if (v380 == 21)
                      {
                        result = 0;
                        *(_DWORD *)(a1 + 24) = 21;
                        *(_QWORD *)(a1 + 32) = "on_version_complete pause";
                        *(_QWORD *)(a1 + 40) = a2;
                        *(_QWORD *)(a1 + 56) = 100;
                        return result;
                      }
LABEL_1425:
                      result = 0;
                      *(_DWORD *)(a1 + 24) = 33;
                      goto LABEL_2263;
                    }
                  }
                }
LABEL_1258:
                if (*(_BYTE *)(a1 + 73) != 34)
                {
LABEL_1259:
                  if (a2 == a3)
                    return 99;
                  v381 = *a2;
                  if (v381 == 10)
                  {
                    if ((*(_WORD *)(a1 + 78) & 0x100) != 0)
                      goto LABEL_1264;
                  }
                  else if (v381 == 13)
                  {
                    ++a2;
LABEL_1264:
                    if (a2 == a3)
                      return 98;
                    v382 = *a2;
                    if (v382 == 13)
                      goto LABEL_2348;
                    if (v382 == 10)
                    {
                      ++a2;
                      goto LABEL_1269;
                    }
                    if ((*(_WORD *)(a1 + 78) & 0x40) != 0)
                      goto LABEL_1269;
                    result = 0;
                    v409 = 2;
LABEL_1452:
                    *(_DWORD *)(a1 + 24) = v409;
                    v7 = "Expected CRLF after version";
                    goto LABEL_2263;
                  }
                  result = 0;
                  v409 = 9;
                  goto LABEL_1452;
                }
LABEL_1283:
                if (a2 == a3)
                  return 96;
                result = llparse__match_sequence_id((unsigned int *)a1, a2, a3, (uint64_t)&llparse_blob14, 10);
                if ((_DWORD)result)
                {
                  if ((_DWORD)result != 1)
                  {
                    if ((_DWORD)result != 2)
LABEL_2347:
                      abort();
                    result = 0;
                    *(_DWORD *)(a1 + 24) = 9;
                    *(_QWORD *)(a1 + 32) = "Expected HTTP/2 Connection Preface";
                    *(_QWORD *)(a1 + 40) = v388;
                    *(_QWORD *)(a1 + 56) = 0;
                    return result;
                  }
                  return 96;
                }
                v319 = (unsigned __int8 *)(v388 + 1);
                *(_DWORD *)(a1 + 24) = 23;
                v321 = "Pause on PRI/Upgrade";
LABEL_2192:
                *(_QWORD *)(a1 + 32) = v321;
                *(_QWORD *)(a1 + 40) = v319;
                *(_QWORD *)(a1 + 56) = 0;
                return result;
              default:
                v423 = *(_QWORD *)(a1 + 8);
                *(_QWORD *)(a1 + 8) = 0;
                v424 = *(_QWORD *)(a1 + 88);
                if (!v424)
                  goto LABEL_1475;
                v425 = *(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *))(v424 + 32);
                if (!v425)
                  goto LABEL_1475;
                v426 = v425(a1, v423, &a2[-v423]);
                if (!v426)
                  goto LABEL_1475;
                v427 = v426;
                if (v426 == -1)
                {
                  *(_QWORD *)(a1 + 32) = "Span callback error in on_version";
                  v427 = 24;
                }
                result = 0;
                *(_DWORD *)(a1 + 24) = v427;
                *(_QWORD *)(a1 + 40) = a2;
                *(_QWORD *)(a1 + 56) = 103;
                return result;
            }
          }
          if (v351 != 1)
            goto LABEL_1306;
        }
        return 112;
      }
      ++a2;
LABEL_1192:
      if (a2 != a3)
      {
        v357 = 0;
        v358 = *(_DWORD *)a1;
        while (1)
        {
          v359 = *a2;
          v360 = llparse_blob13[v358];
          if (v358 == 3)
          {
            v357 = 0;
            v361 = 5;
          }
          else
          {
            v361 = 0;
          }
          if (v359 != v360)
          {
            v357 = 2;
            v361 = 5;
          }
          if (v361)
            break;
          if (v359 == v360)
            ++v358;
          if (++a2 == a3)
          {
            v357 = 1;
            a2 = a3;
            *(_DWORD *)a1 = v358;
            goto LABEL_1205;
          }
        }
        *(_DWORD *)a1 = 0;
LABEL_1205:
        if (!v357)
        {
          ++a2;
          v362 = *(unsigned __int8 *)(a1 + 73);
          if (v362 >= 0x23 && v362 != 46)
          {
            result = 0;
            *(_DWORD *)(a1 + 24) = 8;
            v7 = "Invalid method for HTTP/x.x request";
            goto LABEL_2263;
          }
          goto LABEL_1225;
        }
        if (v357 != 1)
          goto LABEL_1306;
      }
      return 110;
    case 116:
      goto LABEL_1113;
    case 117:
LABEL_1111:
      if (a2 == a3)
        return 117;
LABEL_1112:
      ++a2;
LABEL_1113:
      if (a2 == a3)
        return 116;
      result = 116;
      do
      {
        if (llhttp__internal__run_lookup_table_21[*a2] != 5)
        {
          switch(*a2)
          {
            case 9u:
            case 0xCu:
              goto LABEL_1400;
            case 0xAu:
              goto LABEL_1119;
            case 0xDu:
              goto LABEL_1128;
            case 0x20u:
              goto LABEL_1148;
            default:
              result = 0;
              *(_DWORD *)(a1 + 24) = 7;
              v7 = "Invalid char in url fragment start";
              goto LABEL_2263;
          }
        }
        ++a2;
      }
      while (a2 != a3);
      return result;
    case 118:
LABEL_1105:
      if (a2 == a3)
        return 118;
      result = 118;
      do
      {
        if (llhttp__internal__run_lookup_table_22[*a2] != 5)
        {
          switch((unint64_t)*a2)
          {
            case 9uLL:
            case 0xCuLL:
            case 0x109uLL:
            case 0x10CuLL:
            case 0x209uLL:
            case 0x20CuLL:
              goto LABEL_1400;
            case 0xAuLL:
            case 0x121uLL:
            case 0x122uLL:
            case 0x124uLL:
            case 0x125uLL:
            case 0x126uLL:
            case 0x127uLL:
            case 0x128uLL:
            case 0x129uLL:
            case 0x12AuLL:
            case 0x12BuLL:
            case 0x12CuLL:
            case 0x12DuLL:
            case 0x12EuLL:
            case 0x12FuLL:
            case 0x130uLL:
            case 0x131uLL:
            case 0x132uLL:
            case 0x133uLL:
            case 0x134uLL:
            case 0x135uLL:
            case 0x136uLL:
            case 0x137uLL:
            case 0x138uLL:
            case 0x139uLL:
            case 0x13AuLL:
            case 0x13BuLL:
            case 0x13CuLL:
            case 0x13DuLL:
            case 0x13EuLL:
            case 0x140uLL:
            case 0x141uLL:
            case 0x142uLL:
            case 0x143uLL:
            case 0x144uLL:
            case 0x145uLL:
            case 0x146uLL:
            case 0x147uLL:
            case 0x148uLL:
            case 0x149uLL:
            case 0x14AuLL:
            case 0x14BuLL:
            case 0x14CuLL:
            case 0x14DuLL:
            case 0x14EuLL:
            case 0x14FuLL:
            case 0x150uLL:
            case 0x151uLL:
            case 0x152uLL:
            case 0x153uLL:
            case 0x154uLL:
            case 0x155uLL:
            case 0x156uLL:
            case 0x157uLL:
            case 0x158uLL:
            case 0x159uLL:
            case 0x15AuLL:
            case 0x15BuLL:
            case 0x15CuLL:
            case 0x15DuLL:
            case 0x15EuLL:
            case 0x15FuLL:
            case 0x160uLL:
            case 0x161uLL:
            case 0x162uLL:
            case 0x163uLL:
            case 0x164uLL:
            case 0x165uLL:
            case 0x166uLL:
            case 0x167uLL:
            case 0x168uLL:
            case 0x169uLL:
            case 0x16AuLL:
            case 0x16BuLL:
            case 0x16CuLL:
            case 0x16DuLL:
            case 0x16EuLL:
            case 0x16FuLL:
            case 0x170uLL:
            case 0x171uLL:
            case 0x172uLL:
            case 0x173uLL:
            case 0x174uLL:
            case 0x175uLL:
            case 0x176uLL:
            case 0x177uLL:
            case 0x178uLL:
            case 0x179uLL:
            case 0x17AuLL:
            case 0x17BuLL:
            case 0x17CuLL:
            case 0x17DuLL:
            case 0x17EuLL:
            case 0x20AuLL:
              goto LABEL_1119;
            case 0xDuLL:
            case 0x20DuLL:
              goto LABEL_1128;
            case 0x20uLL:
            case 0x220uLL:
              goto LABEL_1148;
            case 0x23uLL:
            case 0x22FuLL:
              goto LABEL_1111;
            default:
              result = 0;
              *(_DWORD *)(a1 + 24) = 7;
              v7 = "Invalid char in url query";
              goto LABEL_2263;
          }
        }
        ++a2;
      }
      while (a2 != a3);
      return result;
    case 119:
      goto LABEL_1102;
    case 120:
      goto LABEL_1096;
    case 121:
      goto LABEL_1083;
    case 122:
LABEL_1081:
      if (a2 != a3)
        goto LABEL_1095;
      return 122;
    case 123:
LABEL_1094:
      if (a2 != a3)
        goto LABEL_1095;
      return 123;
    case 124:
LABEL_1090:
      if (a2 != a3)
      {
        switch((unint64_t)*a2)
        {
          case 9uLL:
          case 0xCuLL:
          case 0x109uLL:
          case 0x10AuLL:
          case 0x10CuLL:
          case 0x10DuLL:
          case 0x120uLL:
          case 0x209uLL:
          case 0x20AuLL:
          case 0x20CuLL:
          case 0x20DuLL:
          case 0x220uLL:
            goto LABEL_1400;
          case 0xAuLL:
          case 0x13AuLL:
          case 0x22AuLL:
          case 0x22FuLL:
            goto LABEL_1119;
          case 0xDuLL:
          case 0x141uLL:
          case 0x142uLL:
          case 0x143uLL:
          case 0x144uLL:
          case 0x145uLL:
          case 0x146uLL:
          case 0x147uLL:
          case 0x148uLL:
          case 0x149uLL:
          case 0x14AuLL:
          case 0x14BuLL:
          case 0x14CuLL:
          case 0x14DuLL:
          case 0x14EuLL:
          case 0x14FuLL:
          case 0x150uLL:
          case 0x151uLL:
          case 0x152uLL:
          case 0x153uLL:
          case 0x154uLL:
          case 0x155uLL:
          case 0x156uLL:
          case 0x157uLL:
          case 0x158uLL:
          case 0x159uLL:
          case 0x15AuLL:
          case 0x161uLL:
          case 0x162uLL:
          case 0x163uLL:
          case 0x164uLL:
          case 0x165uLL:
          case 0x166uLL:
          case 0x167uLL:
          case 0x168uLL:
          case 0x169uLL:
          case 0x16AuLL:
          case 0x16BuLL:
          case 0x16CuLL:
          case 0x16DuLL:
          case 0x16EuLL:
          case 0x16FuLL:
          case 0x170uLL:
          case 0x171uLL:
          case 0x172uLL:
          case 0x173uLL:
          case 0x174uLL:
          case 0x175uLL:
          case 0x176uLL:
          case 0x177uLL:
          case 0x178uLL:
          case 0x179uLL:
          case 0x17AuLL:
          case 0x241uLL:
          case 0x242uLL:
          case 0x243uLL:
          case 0x244uLL:
          case 0x245uLL:
          case 0x246uLL:
          case 0x247uLL:
          case 0x248uLL:
          case 0x249uLL:
          case 0x24AuLL:
          case 0x24BuLL:
          case 0x24CuLL:
          case 0x24DuLL:
          case 0x24EuLL:
          case 0x24FuLL:
          case 0x250uLL:
          case 0x251uLL:
          case 0x252uLL:
          case 0x253uLL:
          case 0x254uLL:
          case 0x255uLL:
          case 0x256uLL:
          case 0x257uLL:
          case 0x258uLL:
          case 0x259uLL:
          case 0x25AuLL:
          case 0x261uLL:
          case 0x262uLL:
          case 0x263uLL:
          case 0x264uLL:
          case 0x265uLL:
          case 0x266uLL:
          case 0x267uLL:
          case 0x268uLL:
          case 0x269uLL:
          case 0x26AuLL:
          case 0x26BuLL:
          case 0x26CuLL:
          case 0x26DuLL:
          case 0x26EuLL:
          case 0x26FuLL:
          case 0x270uLL:
          case 0x271uLL:
          case 0x272uLL:
          case 0x273uLL:
          case 0x274uLL:
          case 0x275uLL:
          case 0x276uLL:
          case 0x277uLL:
          case 0x278uLL:
          case 0x279uLL:
          case 0x27AuLL:
            goto LABEL_1128;
          case 0x20uLL:
            goto LABEL_1148;
          case 0x21uLL:
          case 0x24uLL:
          case 0x25uLL:
          case 0x26uLL:
          case 0x27uLL:
          case 0x28uLL:
          case 0x29uLL:
          case 0x2AuLL:
          case 0x2BuLL:
          case 0x2CuLL:
          case 0x2DuLL:
          case 0x2EuLL:
          case 0x30uLL:
          case 0x31uLL:
          case 0x32uLL:
          case 0x33uLL:
          case 0x34uLL:
          case 0x35uLL:
          case 0x36uLL:
          case 0x37uLL:
          case 0x38uLL:
          case 0x39uLL:
          case 0x3AuLL:
          case 0x3BuLL:
          case 0x3DuLL:
          case 0x41uLL:
          case 0x42uLL:
          case 0x43uLL:
          case 0x44uLL:
          case 0x45uLL:
          case 0x46uLL:
          case 0x47uLL:
          case 0x48uLL:
          case 0x49uLL:
          case 0x4AuLL:
          case 0x4BuLL:
          case 0x4CuLL:
          case 0x4DuLL:
          case 0x4EuLL:
          case 0x4FuLL:
          case 0x50uLL:
          case 0x51uLL:
          case 0x52uLL:
          case 0x53uLL:
          case 0x54uLL:
          case 0x55uLL:
          case 0x56uLL:
          case 0x57uLL:
          case 0x58uLL:
          case 0x59uLL:
          case 0x5AuLL:
          case 0x5BuLL:
          case 0x5DuLL:
          case 0x5FuLL:
          case 0x61uLL:
          case 0x62uLL:
          case 0x63uLL:
          case 0x64uLL:
          case 0x65uLL:
          case 0x66uLL:
          case 0x67uLL:
          case 0x68uLL:
          case 0x69uLL:
          case 0x6AuLL:
          case 0x6BuLL:
          case 0x6CuLL:
          case 0x6DuLL:
          case 0x6EuLL:
          case 0x6FuLL:
          case 0x70uLL:
          case 0x71uLL:
          case 0x72uLL:
          case 0x73uLL:
          case 0x74uLL:
          case 0x75uLL:
          case 0x76uLL:
          case 0x77uLL:
          case 0x78uLL:
          case 0x79uLL:
          case 0x7AuLL:
          case 0x7EuLL:
            if (++a2 == a3)
              return 125;
            goto LABEL_1076;
          case 0x2FuLL:
            goto LABEL_1094;
          case 0x3FuLL:
            goto LABEL_1104;
          case 0x40uLL:
            result = 0;
            v319 = a2 + 1;
            *(_DWORD *)(a1 + 24) = 7;
            v321 = "Double @ in url";
            goto LABEL_2192;
          default:
            goto LABEL_1238;
        }
      }
      return 124;
    case 125:
      goto LABEL_1075;
    case 126:
      goto LABEL_1072;
    case 127:
      goto LABEL_1069;
    case 128:
      goto LABEL_1067;
    case 129:
      goto LABEL_1060;
    case 130:
      goto LABEL_1057;
    case 131:
      goto LABEL_1055;
    case 132:
      goto LABEL_1050;
    case 133:
      goto LABEL_1047;
    case 134:
      goto LABEL_1042;
    case 135:
      goto LABEL_1034;
    case 136:
      goto LABEL_1031;
    case 137:
    case 228:
      goto LABEL_1028;
    case 138:
      goto LABEL_67;
    case 139:
      goto LABEL_85;
    case 140:
LABEL_63:
      if (a2 == a3)
        return 140;
      v28 = *a2;
      if (v28 != 78)
      {
        if (v28 != 67)
          goto LABEL_1299;
        ++a2;
LABEL_67:
        if (a2 == a3)
          return 138;
        if (*a2 != 76)
          goto LABEL_1299;
        ++a2;
        LOBYTE(v29) = 19;
        goto LABEL_1025;
      }
      ++a2;
LABEL_85:
      if (a2 == a3)
        return 139;
      v35 = 0;
      v36 = *(_DWORD *)a1;
      while (1)
      {
        v37 = *a2;
        v38 = llparse_blob17[v36];
        if (v36 == 5)
        {
          v35 = 0;
          v39 = 5;
        }
        else
        {
          v39 = 0;
        }
        if (v37 != v38)
        {
          v35 = 2;
          v39 = 5;
        }
        if (v39)
          break;
        if (v37 == v38)
          ++v36;
        if (++a2 == a3)
        {
          v35 = 1;
          a2 = a3;
          *(_DWORD *)a1 = v36;
          goto LABEL_123;
        }
      }
      *(_DWORD *)a1 = 0;
LABEL_123:
      if (!v35)
      {
        ++a2;
        LOBYTE(v29) = 36;
        goto LABEL_1025;
      }
      if (v35 == 1)
        return 139;
      goto LABEL_1299;
    case 141:
LABEL_211:
      if (a2 == a3)
        return 141;
      v90 = 0;
      v91 = *(_DWORD *)a1;
      while (1)
      {
        v92 = *a2;
        v93 = llparse_blob18[v91];
        if (v91 == 2)
        {
          v90 = 0;
          v94 = 5;
        }
        else
        {
          v94 = 0;
        }
        if (v92 != v93)
        {
          v90 = 2;
          v94 = 5;
        }
        if (v94)
          break;
        if (v92 == v93)
          ++v91;
        if (++a2 == a3)
        {
          v90 = 1;
          a2 = a3;
          *(_DWORD *)a1 = v91;
          goto LABEL_224;
        }
      }
      *(_DWORD *)a1 = 0;
LABEL_224:
      if (!v90)
      {
        ++a2;
        LOBYTE(v29) = 16;
        goto LABEL_1025;
      }
      if (v90 == 1)
        return 141;
      goto LABEL_1299;
    case 142:
      goto LABEL_233;
    case 143:
      goto LABEL_251;
    case 144:
      goto LABEL_265;
    case 145:
      goto LABEL_247;
    case 146:
LABEL_229:
      if (a2 == a3)
        return 146;
      v95 = *a2;
      if (v95 != 79)
      {
        if (v95 != 72)
          goto LABEL_1299;
        ++a2;
LABEL_233:
        if (a2 == a3)
          return 142;
        v96 = 0;
        v97 = *(_DWORD *)a1;
        while (1)
        {
          v98 = *a2;
          v99 = llparse_blob19[v97];
          if (v97 == 5)
          {
            v96 = 0;
            v100 = 5;
          }
          else
          {
            v100 = 0;
          }
          if (v98 != v99)
          {
            v96 = 2;
            v100 = 5;
          }
          if (v100)
            break;
          if (v98 == v99)
            ++v97;
          if (++a2 == a3)
          {
            v96 = 1;
            a2 = a3;
            *(_DWORD *)a1 = v97;
            goto LABEL_268;
          }
        }
        *(_DWORD *)a1 = 0;
LABEL_268:
        if (!v96)
        {
          ++a2;
          LOBYTE(v29) = 22;
          goto LABEL_1025;
        }
        if (v96 == 1)
          return 142;
        goto LABEL_1299;
      }
      ++a2;
LABEL_247:
      if (a2 == a3)
        return 145;
      v101 = *a2;
      if (v101 != 80)
      {
        if (v101 != 78)
          goto LABEL_1299;
        ++a2;
LABEL_251:
        if (a2 == a3)
          return 143;
        v102 = 0;
        v103 = *(_DWORD *)a1;
        while (1)
        {
          v104 = *a2;
          v105 = llparse_blob20[v103];
          if (v103 == 3)
          {
            v102 = 0;
            v106 = 5;
          }
          else
          {
            v106 = 0;
          }
          if (v104 != v105)
          {
            v102 = 2;
            v106 = 5;
          }
          if (v106)
            break;
          if (v104 == v105)
            ++v103;
          if (++a2 == a3)
          {
            v102 = 1;
            a2 = a3;
            *(_DWORD *)a1 = v103;
            goto LABEL_270;
          }
        }
        *(_DWORD *)a1 = 0;
LABEL_270:
        if (!v102)
        {
          ++a2;
          LOBYTE(v29) = 5;
          goto LABEL_1025;
        }
        if (v102 == 1)
          return 143;
        goto LABEL_1299;
      }
      ++a2;
LABEL_265:
      if (a2 == a3)
        return 144;
      if (*a2 != 89)
        goto LABEL_1299;
      ++a2;
      LOBYTE(v29) = 8;
      goto LABEL_1025;
    case 147:
      goto LABEL_284;
    case 148:
      goto LABEL_298;
    case 149:
      goto LABEL_280;
    case 150:
LABEL_277:
      if (a2 == a3)
        return 150;
      if (*a2 != 69)
        goto LABEL_1299;
      ++a2;
LABEL_280:
      if (a2 == a3)
        return 149;
      v107 = *a2;
      if (v107 == 83)
      {
        ++a2;
LABEL_298:
        if (a2 == a3)
          return 148;
        v112 = 0;
        v113 = *(_DWORD *)a1;
        while (1)
        {
          v114 = *a2;
          v115 = llparse_blob22[v113];
          if (v113 == 4)
          {
            v112 = 0;
            v116 = 5;
          }
          else
          {
            v116 = 0;
          }
          if (v114 != v115)
          {
            v112 = 2;
            v116 = 5;
          }
          if (v116)
            break;
          if (v114 == v115)
            ++v113;
          if (++a2 == a3)
          {
            v112 = 1;
            a2 = a3;
            *(_DWORD *)a1 = v113;
            goto LABEL_313;
          }
        }
        *(_DWORD *)a1 = 0;
LABEL_313:
        if (!v112)
        {
          ++a2;
          LOBYTE(v29) = 35;
          goto LABEL_1025;
        }
        if (v112 == 1)
          return 148;
      }
      else
      {
        if (v107 != 76)
          goto LABEL_1299;
        ++a2;
LABEL_284:
        if (a2 == a3)
          return 147;
        v29 = 0;
        v108 = *(_DWORD *)a1;
        while (1)
        {
          v109 = *a2;
          v110 = llparse_blob21[v108];
          if (v108 == 2)
          {
            v29 = 0;
            v111 = 5;
          }
          else
          {
            v111 = 0;
          }
          if (v109 != v110)
          {
            v29 = 2;
            v111 = 5;
          }
          if (v111)
            break;
          if (v109 == v110)
            ++v108;
          if (++a2 == a3)
          {
            v29 = 1;
            a2 = a3;
            *(_DWORD *)a1 = v108;
            goto LABEL_311;
          }
        }
        *(_DWORD *)a1 = 0;
LABEL_311:
        if (!v29)
        {
          ++a2;
          goto LABEL_1025;
        }
        if (v29 == 1)
          return 147;
      }
      goto LABEL_1299;
    case 151:
LABEL_320:
      if (a2 == a3)
        return 151;
      v117 = 0;
      v118 = *(_DWORD *)a1;
      while (1)
      {
        v119 = *a2;
        v120 = llparse_blob23[v118];
        if (v118 == 3)
        {
          v117 = 0;
          v121 = 5;
        }
        else
        {
          v121 = 0;
        }
        if (v119 != v120)
        {
          v117 = 2;
          v121 = 5;
        }
        if (v121)
          break;
        if (v119 == v120)
          ++v118;
        if (++a2 == a3)
        {
          v117 = 1;
          a2 = a3;
          *(_DWORD *)a1 = v118;
          goto LABEL_333;
        }
      }
      *(_DWORD *)a1 = 0;
LABEL_333:
      if (!v117)
      {
        ++a2;
        LOBYTE(v29) = 45;
        goto LABEL_1025;
      }
      if (v117 == 1)
        return 151;
      goto LABEL_1299;
    case 152:
      goto LABEL_356;
    case 153:
      goto LABEL_353;
    case 154:
LABEL_338:
      if (a2 == a3)
        return 154;
      v122 = 0;
      v123 = *(_DWORD *)a1;
      while (1)
      {
        v124 = *a2;
        v125 = llparse_blob24[v123];
        if (v123 == 1)
        {
          v122 = 0;
          v126 = 5;
        }
        else
        {
          v126 = 0;
        }
        if (v124 != v125)
        {
          v122 = 2;
          v126 = 5;
        }
        if (v126)
          break;
        if (v124 == v125)
          ++v123;
        if (++a2 == a3)
        {
          v122 = 1;
          a2 = a3;
          *(_DWORD *)a1 = v123;
          goto LABEL_351;
        }
      }
      *(_DWORD *)a1 = 0;
LABEL_351:
      if (v122)
      {
        if (v122 == 1)
          return 154;
        goto LABEL_1299;
      }
      ++a2;
LABEL_353:
      if (a2 == a3)
        return 153;
      LOBYTE(v29) = 1;
      if (*a2 != 95)
        goto LABEL_1025;
      ++a2;
LABEL_356:
      if (a2 == a3)
        return 152;
      v127 = 0;
      v128 = *(_DWORD *)a1;
      while (1)
      {
        v129 = *a2;
        v130 = llparse_blob25[v128];
        if (v128 == 8)
        {
          v127 = 0;
          v131 = 5;
        }
        else
        {
          v131 = 0;
        }
        if (v129 != v130)
        {
          v127 = 2;
          v131 = 5;
        }
        if (v131)
          break;
        if (v129 == v130)
          ++v128;
        if (++a2 == a3)
        {
          v127 = 1;
          a2 = a3;
          *(_DWORD *)a1 = v128;
          goto LABEL_369;
        }
      }
      *(_DWORD *)a1 = 0;
LABEL_369:
      if (!v127)
      {
        ++a2;
        LOBYTE(v29) = 41;
        goto LABEL_1025;
      }
      if (v127 == 1)
        return 152;
      goto LABEL_1299;
    case 155:
LABEL_376:
      if (a2 == a3)
        return 155;
      v132 = 0;
      v133 = *(_DWORD *)a1;
      while (1)
      {
        v134 = *a2;
        v135 = llparse_blob26[v133];
        if (v133 == 2)
        {
          v132 = 0;
          v136 = 5;
        }
        else
        {
          v136 = 0;
        }
        if (v134 != v135)
        {
          v132 = 2;
          v136 = 5;
        }
        if (v136)
          break;
        if (v134 == v135)
          ++v133;
        if (++a2 == a3)
        {
          v132 = 1;
          a2 = a3;
          *(_DWORD *)a1 = v133;
          goto LABEL_389;
        }
      }
      *(_DWORD *)a1 = 0;
LABEL_389:
      if (!v132)
      {
        ++a2;
        LOBYTE(v29) = 2;
        goto LABEL_1025;
      }
      if (v132 == 1)
        return 155;
      goto LABEL_1299;
    case 156:
      goto LABEL_398;
    case 157:
      goto LABEL_412;
    case 158:
LABEL_394:
      if (a2 == a3)
        return 158;
      v137 = *a2;
      if (v137 == 79)
      {
        ++a2;
LABEL_412:
        if (a2 == a3)
          return 157;
        v143 = 0;
        v144 = *(_DWORD *)a1;
        while (1)
        {
          v145 = *a2;
          v146 = llparse_blob28[v144];
          if (v144 == 1)
          {
            v143 = 0;
            v147 = 5;
          }
          else
          {
            v147 = 0;
          }
          if (v145 != v146)
          {
            v143 = 2;
            v147 = 5;
          }
          if (v147)
            break;
          if (v145 == v146)
            ++v144;
          if (++a2 == a3)
          {
            v143 = 1;
            a2 = a3;
            *(_DWORD *)a1 = v144;
            goto LABEL_427;
          }
        }
        *(_DWORD *)a1 = 0;
LABEL_427:
        if (!v143)
        {
          ++a2;
          LOBYTE(v29) = 9;
          goto LABEL_1025;
        }
        if (v143 == 1)
          return 157;
      }
      else
      {
        if (v137 != 73)
          goto LABEL_1299;
        ++a2;
LABEL_398:
        if (a2 == a3)
          return 156;
        v138 = 0;
        v139 = *(_DWORD *)a1;
        while (1)
        {
          v140 = *a2;
          v141 = llparse_blob27[v139];
          if (v139 == 1)
          {
            v138 = 0;
            v142 = 5;
          }
          else
          {
            v142 = 0;
          }
          if (v140 != v141)
          {
            v138 = 2;
            v142 = 5;
          }
          if (v142)
            break;
          if (v140 == v141)
            ++v139;
          if (++a2 == a3)
          {
            v138 = 1;
            a2 = a3;
            *(_DWORD *)a1 = v139;
            goto LABEL_425;
          }
        }
        *(_DWORD *)a1 = 0;
LABEL_425:
        if (!v138)
        {
          ++a2;
          LOBYTE(v29) = 31;
          goto LABEL_1025;
        }
        if (v138 == 1)
          return 156;
      }
      goto LABEL_1299;
    case 159:
LABEL_437:
      if (a2 == a3)
        return 159;
      v148 = 0;
      v149 = *(_DWORD *)a1;
      while (1)
      {
        v150 = *a2;
        v151 = llparse_blob29[v149];
        if (v149 == 5)
        {
          v148 = 0;
          v152 = 5;
        }
        else
        {
          v152 = 0;
        }
        if (v150 != v151)
        {
          v148 = 2;
          v152 = 5;
        }
        if (v152)
          break;
        if (v150 == v151)
          ++v149;
        if (++a2 == a3)
        {
          v148 = 1;
          a2 = a3;
          *(_DWORD *)a1 = v149;
          goto LABEL_450;
        }
      }
      *(_DWORD *)a1 = 0;
LABEL_450:
      if (!v148)
      {
        ++a2;
        LOBYTE(v29) = 24;
        goto LABEL_1025;
      }
      if (v148 == 1)
        return 159;
      goto LABEL_1299;
    case 160:
LABEL_453:
      if (a2 == a3)
        return 160;
      v153 = 0;
      v154 = *(_DWORD *)a1;
      while (1)
      {
        v155 = *a2;
        v156 = llparse_blob30[v154];
        if (v154 == 2)
        {
          v153 = 0;
          v157 = 5;
        }
        else
        {
          v157 = 0;
        }
        if (v155 != v156)
        {
          v153 = 2;
          v157 = 5;
        }
        if (v157)
          break;
        if (v155 == v156)
          ++v154;
        if (++a2 == a3)
        {
          v153 = 1;
          a2 = a3;
          *(_DWORD *)a1 = v154;
          goto LABEL_466;
        }
      }
      *(_DWORD *)a1 = 0;
LABEL_466:
      if (!v153)
      {
        ++a2;
        LOBYTE(v29) = 23;
        goto LABEL_1025;
      }
      if (v153 == 1)
        return 160;
      goto LABEL_1299;
    case 161:
      goto LABEL_473;
    case 162:
      goto LABEL_491;
    case 163:
      goto LABEL_505;
    case 164:
      goto LABEL_487;
    case 165:
LABEL_469:
      if (a2 == a3)
        return 165;
      v158 = *a2;
      if (v158 != 67)
      {
        if (v158 != 65)
          goto LABEL_1299;
        ++a2;
LABEL_473:
        if (a2 == a3)
          return 161;
        v159 = 0;
        v160 = *(_DWORD *)a1;
        while (1)
        {
          v161 = *a2;
          v162 = llparse_blob31[v160];
          if (v160 == 6)
          {
            v159 = 0;
            v163 = 5;
          }
          else
          {
            v163 = 0;
          }
          if (v161 != v162)
          {
            v159 = 2;
            v163 = 5;
          }
          if (v163)
            break;
          if (v161 == v162)
            ++v160;
          if (++a2 == a3)
          {
            v159 = 1;
            a2 = a3;
            *(_DWORD *)a1 = v160;
            goto LABEL_508;
          }
        }
        *(_DWORD *)a1 = 0;
LABEL_508:
        if (!v159)
        {
          ++a2;
          LOBYTE(v29) = 21;
          goto LABEL_1025;
        }
        if (v159 == 1)
          return 161;
        goto LABEL_1299;
      }
      ++a2;
LABEL_487:
      if (a2 == a3)
        return 164;
      v164 = *a2;
      if (v164 != 79)
      {
        if (v164 != 65)
          goto LABEL_1299;
        ++a2;
LABEL_491:
        if (a2 == a3)
          return 162;
        v165 = 0;
        v166 = *(_DWORD *)a1;
        while (1)
        {
          v167 = *a2;
          v168 = llparse_blob32[v166];
          if (v166 == 5)
          {
            v165 = 0;
            v169 = 5;
          }
          else
          {
            v169 = 0;
          }
          if (v167 != v168)
          {
            v165 = 2;
            v169 = 5;
          }
          if (v169)
            break;
          if (v167 == v168)
            ++v166;
          if (++a2 == a3)
          {
            v165 = 1;
            a2 = a3;
            *(_DWORD *)a1 = v166;
            goto LABEL_510;
          }
        }
        *(_DWORD *)a1 = 0;
LABEL_510:
        if (!v165)
        {
          ++a2;
          LOBYTE(v29) = 30;
          goto LABEL_1025;
        }
        if (v165 == 1)
          return 162;
        goto LABEL_1299;
      }
      ++a2;
LABEL_505:
      if (a2 == a3)
        return 163;
      if (*a2 != 76)
        goto LABEL_1299;
      ++a2;
      LOBYTE(v29) = 10;
      goto LABEL_1025;
    case 166:
LABEL_513:
      if (a2 == a3)
        return 166;
      v170 = 0;
      v171 = *(_DWORD *)a1;
      while (1)
      {
        v172 = *a2;
        v173 = llparse_blob33[v171];
        if (v171 == 1)
        {
          v170 = 0;
          v174 = 5;
        }
        else
        {
          v174 = 0;
        }
        if (v172 != v173)
        {
          v170 = 2;
          v174 = 5;
        }
        if (v174)
          break;
        if (v172 == v173)
          ++v171;
        if (++a2 == a3)
        {
          v170 = 1;
          a2 = a3;
          *(_DWORD *)a1 = v171;
          goto LABEL_526;
        }
      }
      *(_DWORD *)a1 = 0;
LABEL_526:
      if (!v170)
      {
        ++a2;
        LOBYTE(v29) = 11;
        goto LABEL_1025;
      }
      if (v170 == 1)
        return 166;
      goto LABEL_1299;
    case 167:
LABEL_434:
      if (a2 != a3)
      {
        switch(*a2)
        {
          case '-':
            ++a2;
            goto LABEL_437;
          case 'E':
            ++a2;
            goto LABEL_453;
          case 'K':
            ++a2;
            goto LABEL_469;
          case 'O':
            ++a2;
            goto LABEL_513;
          default:
            goto LABEL_1299;
        }
      }
      return 167;
    case 168:
LABEL_539:
      if (a2 == a3)
        return 168;
      v175 = 0;
      v176 = *(_DWORD *)a1;
      while (1)
      {
        v177 = *a2;
        v178 = llparse_blob34[v176];
        if (v176 == 4)
        {
          v175 = 0;
          v179 = 5;
        }
        else
        {
          v179 = 0;
        }
        if (v177 != v178)
        {
          v175 = 2;
          v179 = 5;
        }
        if (v179)
          break;
        if (v177 == v178)
          ++v176;
        if (++a2 == a3)
        {
          v175 = 1;
          a2 = a3;
          *(_DWORD *)a1 = v176;
          goto LABEL_552;
        }
      }
      *(_DWORD *)a1 = 0;
LABEL_552:
      if (!v175)
      {
        ++a2;
        LOBYTE(v29) = 25;
        goto LABEL_1025;
      }
      if (v175 == 1)
        return 168;
      goto LABEL_1299;
    case 169:
LABEL_557:
      if (a2 == a3)
        return 169;
      v180 = 0;
      v181 = *(_DWORD *)a1;
      while (1)
      {
        v182 = *a2;
        v183 = llparse_blob35[v181];
        if (v181 == 5)
        {
          v180 = 0;
          v184 = 5;
        }
        else
        {
          v184 = 0;
        }
        if (v182 != v183)
        {
          v180 = 2;
          v184 = 5;
        }
        if (v184)
          break;
        if (v182 == v183)
          ++v181;
        if (++a2 == a3)
        {
          v180 = 1;
          a2 = a3;
          *(_DWORD *)a1 = v181;
          goto LABEL_570;
        }
      }
      *(_DWORD *)a1 = 0;
LABEL_570:
      if (!v180)
      {
        ++a2;
        LOBYTE(v29) = 6;
        goto LABEL_1025;
      }
      if (v180 == 1)
        return 169;
      goto LABEL_1299;
    case 170:
      goto LABEL_582;
    case 171:
      goto LABEL_596;
    case 172:
LABEL_578:
      if (a2 == a3)
        return 172;
      v185 = *a2;
      if (v185 == 85)
      {
        ++a2;
LABEL_596:
        if (a2 == a3)
          return 171;
        v191 = 0;
        v192 = *(_DWORD *)a1;
        while (1)
        {
          v193 = *a2;
          v194 = llparse_blob37[v192];
          if (v192 == 1)
          {
            v191 = 0;
            v195 = 5;
          }
          else
          {
            v195 = 0;
          }
          if (v193 != v194)
          {
            v191 = 2;
            v195 = 5;
          }
          if (v195)
            break;
          if (v193 == v194)
            ++v192;
          if (++a2 == a3)
          {
            v191 = 1;
            a2 = a3;
            *(_DWORD *)a1 = v192;
            goto LABEL_611;
          }
        }
        *(_DWORD *)a1 = 0;
LABEL_611:
        if (!v191)
        {
          ++a2;
          LOBYTE(v29) = 39;
          goto LABEL_1025;
        }
        if (v191 == 1)
          return 171;
      }
      else
      {
        if (v185 != 84)
          goto LABEL_1299;
        ++a2;
LABEL_582:
        if (a2 == a3)
          return 170;
        v186 = 0;
        v187 = *(_DWORD *)a1;
        while (1)
        {
          v188 = *a2;
          v189 = llparse_blob36[v187];
          if (v187 == 1)
          {
            v186 = 0;
            v190 = 5;
          }
          else
          {
            v190 = 0;
          }
          if (v188 != v189)
          {
            v186 = 2;
            v190 = 5;
          }
          if (v190)
            break;
          if (v188 == v189)
            ++v187;
          if (++a2 == a3)
          {
            v186 = 1;
            a2 = a3;
            *(_DWORD *)a1 = v187;
            goto LABEL_609;
          }
        }
        *(_DWORD *)a1 = 0;
LABEL_609:
        if (!v186)
        {
          ++a2;
          LOBYTE(v29) = 28;
          goto LABEL_1025;
        }
        if (v186 == 1)
          return 170;
      }
      goto LABEL_1299;
    case 173:
LABEL_614:
      if (a2 == a3)
        return 173;
      v196 = 0;
      v197 = *(_DWORD *)a1;
      while (1)
      {
        v198 = *a2;
        v199 = llparse_blob38[v197];
        if (v197 == 1)
        {
          v196 = 0;
          v200 = 5;
        }
        else
        {
          v200 = 0;
        }
        if (v198 != v199)
        {
          v196 = 2;
          v200 = 5;
        }
        if (v200)
          break;
        if (v198 == v199)
          ++v197;
        if (++a2 == a3)
        {
          v196 = 1;
          a2 = a3;
          *(_DWORD *)a1 = v197;
          goto LABEL_627;
        }
      }
      *(_DWORD *)a1 = 0;
LABEL_627:
      if (!v196)
      {
        ++a2;
        LOBYTE(v29) = 38;
        goto LABEL_1025;
      }
      if (v196 == 1)
        return 173;
      goto LABEL_1299;
    case 174:
LABEL_630:
      if (a2 == a3)
        return 174;
      v201 = 0;
      v202 = *(_DWORD *)a1;
      while (1)
      {
        v203 = *a2;
        v204 = llparse_blob39[v202];
        if (v202 == 1)
        {
          v201 = 0;
          v205 = 5;
        }
        else
        {
          v205 = 0;
        }
        if (v203 != v204)
        {
          v201 = 2;
          v205 = 5;
        }
        if (v205)
          break;
        if (v203 == v204)
          ++v202;
        if (++a2 == a3)
        {
          v201 = 1;
          a2 = a3;
          *(_DWORD *)a1 = v202;
          goto LABEL_643;
        }
      }
      *(_DWORD *)a1 = 0;
LABEL_643:
      if (!v201)
      {
        ++a2;
        LOBYTE(v29) = 3;
        goto LABEL_1025;
      }
      if (v201 == 1)
        return 174;
      goto LABEL_1299;
    case 175:
      goto LABEL_658;
    case 176:
      goto LABEL_672;
    case 177:
      goto LABEL_654;
    case 178:
      goto LABEL_651;
    case 179:
LABEL_646:
      if (a2 == a3)
        return 179;
      v206 = *a2;
      if (v206 != 79)
      {
        if (v206 != 73)
          goto LABEL_1299;
        ++a2;
        LOBYTE(v29) = 34;
        goto LABEL_1025;
      }
      ++a2;
LABEL_651:
      if (a2 == a3)
        return 178;
      if (*a2 != 80)
        goto LABEL_1299;
      ++a2;
LABEL_654:
      if (a2 == a3)
        return 177;
      v207 = *a2;
      if (v207 == 80)
      {
        ++a2;
LABEL_672:
        if (a2 == a3)
          return 176;
        v213 = 0;
        v214 = *(_DWORD *)a1;
        while (1)
        {
          v215 = *a2;
          v216 = llparse_blob41[v214];
          if (v214 == 3)
          {
            v213 = 0;
            v217 = 5;
          }
          else
          {
            v217 = 0;
          }
          if (v215 != v216)
          {
            v213 = 2;
            v217 = 5;
          }
          if (v217)
            break;
          if (v215 == v216)
            ++v214;
          if (++a2 == a3)
          {
            v213 = 1;
            a2 = a3;
            *(_DWORD *)a1 = v214;
            goto LABEL_687;
          }
        }
        *(_DWORD *)a1 = 0;
LABEL_687:
        if (!v213)
        {
          ++a2;
          LOBYTE(v29) = 13;
          goto LABEL_1025;
        }
        if (v213 == 1)
          return 176;
      }
      else
      {
        if (v207 != 70)
          goto LABEL_1299;
        ++a2;
LABEL_658:
        if (a2 == a3)
          return 175;
        v208 = 0;
        v209 = *(_DWORD *)a1;
        while (1)
        {
          v210 = *a2;
          v211 = llparse_blob40[v209];
          if (v209 == 2)
          {
            v208 = 0;
            v212 = 5;
          }
          else
          {
            v212 = 0;
          }
          if (v210 != v211)
          {
            v208 = 2;
            v212 = 5;
          }
          if (v212)
            break;
          if (v210 == v211)
            ++v209;
          if (++a2 == a3)
          {
            v208 = 1;
            a2 = a3;
            *(_DWORD *)a1 = v209;
            goto LABEL_685;
          }
        }
        *(_DWORD *)a1 = 0;
LABEL_685:
        if (!v208)
        {
          ++a2;
          LOBYTE(v29) = 12;
          goto LABEL_1025;
        }
        if (v208 == 1)
          return 175;
      }
      goto LABEL_1299;
    case 180:
      goto LABEL_694;
    case 181:
LABEL_690:
      if (a2 == a3)
        return 181;
      v218 = *a2;
      if (v218 == 84)
      {
        ++a2;
        LOBYTE(v29) = 4;
        goto LABEL_1025;
      }
      if (v218 != 82)
        goto LABEL_1299;
      ++a2;
LABEL_694:
      if (a2 == a3)
        return 180;
      v219 = 0;
      v220 = *(_DWORD *)a1;
      do
      {
        v221 = *a2;
        v222 = llparse_blob42[v220];
        if (v220 == 1)
        {
          v219 = 0;
          v223 = 5;
        }
        else
        {
          v223 = 0;
        }
        if (v221 != v222)
        {
          v219 = 2;
          v223 = 5;
        }
        if (v223)
        {
          *(_DWORD *)a1 = 0;
          goto LABEL_708;
        }
        if (v221 == v222)
          ++v220;
        ++a2;
      }
      while (a2 != a3);
      v219 = 1;
      a2 = a3;
      *(_DWORD *)a1 = v220;
LABEL_708:
      if (!v219)
      {
        ++a2;
        LOBYTE(v29) = 29;
        goto LABEL_1025;
      }
      if (v219 == 1)
        return 180;
      goto LABEL_1299;
    case 182:
LABEL_575:
      if (a2 != a3)
      {
        switch(*a2)
        {
          case 'A':
            ++a2;
            goto LABEL_578;
          case 'L':
            ++a2;
            goto LABEL_614;
          case 'O':
            ++a2;
            goto LABEL_630;
          case 'R':
            ++a2;
            goto LABEL_646;
          case 'U':
            ++a2;
            goto LABEL_690;
          default:
            goto LABEL_1299;
        }
      }
      return 182;
    case 183:
LABEL_725:
      if (a2 == a3)
        return 183;
      v224 = 0;
      v225 = *(_DWORD *)a1;
      while (1)
      {
        v226 = *a2;
        v227 = llparse_blob43[v225];
        if (v225 == 3)
        {
          v224 = 0;
          v228 = 5;
        }
        else
        {
          v228 = 0;
        }
        if (v226 != v227)
        {
          v224 = 2;
          v228 = 5;
        }
        if (v228)
          break;
        if (v226 == v227)
          ++v225;
        if (++a2 == a3)
        {
          v224 = 1;
          a2 = a3;
          *(_DWORD *)a1 = v225;
          goto LABEL_738;
        }
      }
      *(_DWORD *)a1 = 0;
LABEL_738:
      if (!v224)
      {
        ++a2;
        LOBYTE(v29) = 46;
        goto LABEL_1025;
      }
      if (v224 == 1)
        return 183;
      goto LABEL_1299;
    case 184:
LABEL_749:
      if (a2 == a3)
        return 184;
      v229 = 0;
      v230 = *(_DWORD *)a1;
      while (1)
      {
        v231 = *a2;
        v232 = llparse_blob44[v230];
        if (v230 == 2)
        {
          v229 = 0;
          v233 = 5;
        }
        else
        {
          v233 = 0;
        }
        if (v231 != v232)
        {
          v229 = 2;
          v233 = 5;
        }
        if (v233)
          break;
        if (v231 == v232)
          ++v230;
        if (++a2 == a3)
        {
          v229 = 1;
          a2 = a3;
          *(_DWORD *)a1 = v230;
          goto LABEL_762;
        }
      }
      *(_DWORD *)a1 = 0;
LABEL_762:
      if (!v229)
      {
        ++a2;
        LOBYTE(v29) = 17;
        goto LABEL_1025;
      }
      if (v229 == 1)
        return 184;
      goto LABEL_1299;
    case 185:
LABEL_765:
      if (a2 == a3)
        return 185;
      v234 = 0;
      v235 = *(_DWORD *)a1;
      while (1)
      {
        v236 = *a2;
        v237 = llparse_blob45[v235];
        if (v235 == 2)
        {
          v234 = 0;
          v238 = 5;
        }
        else
        {
          v238 = 0;
        }
        if (v236 != v237)
        {
          v234 = 2;
          v238 = 5;
        }
        if (v238)
          break;
        if (v236 == v237)
          ++v235;
        if (++a2 == a3)
        {
          v234 = 1;
          a2 = a3;
          *(_DWORD *)a1 = v235;
          goto LABEL_778;
        }
      }
      *(_DWORD *)a1 = 0;
LABEL_778:
      if (!v234)
      {
        ++a2;
        LOBYTE(v29) = 44;
        goto LABEL_1025;
      }
      if (v234 == 1)
        return 185;
      goto LABEL_1299;
    case 186:
LABEL_781:
      if (a2 == a3)
        return 186;
      v239 = 0;
      v240 = *(_DWORD *)a1;
      while (1)
      {
        v241 = *a2;
        v242 = llparse_blob46[v240];
        if (v240 == 4)
        {
          v239 = 0;
          v243 = 5;
        }
        else
        {
          v243 = 0;
        }
        if (v241 != v242)
        {
          v239 = 2;
          v243 = 5;
        }
        if (v243)
          break;
        if (v241 == v242)
          ++v240;
        if (++a2 == a3)
        {
          v239 = 1;
          a2 = a3;
          *(_DWORD *)a1 = v240;
          goto LABEL_794;
        }
      }
      *(_DWORD *)a1 = 0;
LABEL_794:
      if (!v239)
      {
        ++a2;
        LOBYTE(v29) = 43;
        goto LABEL_1025;
      }
      if (v239 == 1)
        return 186;
      goto LABEL_1299;
    case 187:
LABEL_797:
      if (a2 == a3)
        return 187;
      v244 = 0;
      v245 = *(_DWORD *)a1;
      while (1)
      {
        v246 = *a2;
        v247 = llparse_blob47[v245];
        if (v245 == 2)
        {
          v244 = 0;
          v248 = 5;
        }
        else
        {
          v248 = 0;
        }
        if (v246 != v247)
        {
          v244 = 2;
          v248 = 5;
        }
        if (v248)
          break;
        if (v246 == v247)
          ++v245;
        if (++a2 == a3)
        {
          v244 = 1;
          a2 = a3;
          *(_DWORD *)a1 = v245;
          goto LABEL_810;
        }
      }
      *(_DWORD *)a1 = 0;
LABEL_810:
      if (!v244)
      {
        ++a2;
        LOBYTE(v29) = 20;
        goto LABEL_1025;
      }
      if (v244 == 1)
        return 187;
      goto LABEL_1299;
    case 188:
      goto LABEL_746;
    case 189:
LABEL_743:
      if (a2 == a3)
        return 189;
      if (*a2 != 69)
        goto LABEL_1299;
      ++a2;
LABEL_746:
      if (a2 != a3)
      {
        switch(*a2)
        {
          case 'B':
            ++a2;
            goto LABEL_749;
          case 'C':
            ++a2;
            goto LABEL_765;
          case 'D':
            ++a2;
            goto LABEL_781;
          case 'P':
            ++a2;
            goto LABEL_797;
          default:
            goto LABEL_1299;
        }
      }
      return 188;
    case 190:
      goto LABEL_830;
    case 191:
      goto LABEL_848;
    case 192:
      goto LABEL_852;
    case 193:
      goto LABEL_844;
    case 194:
      goto LABEL_826;
    case 195:
      goto LABEL_886;
    case 196:
      goto LABEL_870;
    case 197:
LABEL_821:
      if (a2 == a3)
        return 197;
      v249 = *a2;
      if (v249 == 85)
      {
        ++a2;
LABEL_870:
        if (a2 == a3)
          return 196;
        v262 = 0;
        v263 = *(_DWORD *)a1;
        while (1)
        {
          v264 = *a2;
          v265 = llparse_blob51[v263];
          if (v263 == 6)
          {
            v262 = 0;
            v266 = 5;
          }
          else
          {
            v266 = 0;
          }
          if (v264 != v265)
          {
            v262 = 2;
            v266 = 5;
          }
          if (v266)
            break;
          if (v264 == v265)
            ++v263;
          if (++a2 == a3)
          {
            v262 = 1;
            a2 = a3;
            *(_DWORD *)a1 = v263;
            goto LABEL_883;
          }
        }
        *(_DWORD *)a1 = 0;
LABEL_883:
        if (!v262)
        {
          ++a2;
          LOBYTE(v29) = 26;
          goto LABEL_1025;
        }
        if (v262 == 1)
          return 196;
LABEL_1299:
        result = 0;
        *(_DWORD *)(a1 + 24) = 6;
        v7 = "Invalid method encountered";
        goto LABEL_2263;
      }
      if (v249 == 79)
      {
        ++a2;
LABEL_886:
        if (a2 == a3)
          return 195;
        v267 = 0;
        v268 = *(_DWORD *)a1;
        while (1)
        {
          v269 = *a2;
          v270 = llparse_blob50[v268];
          if (v268 == 3)
          {
            v267 = 0;
            v271 = 5;
          }
          else
          {
            v271 = 0;
          }
          if (v269 != v270)
          {
            v267 = 2;
            v271 = 5;
          }
          if (v271)
            break;
          if (v269 == v270)
            ++v268;
          if (++a2 == a3)
          {
            v267 = 1;
            a2 = a3;
            *(_DWORD *)a1 = v268;
            goto LABEL_899;
          }
        }
        *(_DWORD *)a1 = 0;
LABEL_899:
        if (!v267)
        {
          ++a2;
          LOBYTE(v29) = 33;
          goto LABEL_1025;
        }
        if (v267 == 1)
          return 195;
        goto LABEL_1299;
      }
      if (v249 != 69)
        goto LABEL_1299;
      ++a2;
LABEL_826:
      if (a2 == a3)
        return 194;
      v250 = *a2;
      if (v250 != 84)
      {
        if (v250 != 65)
          goto LABEL_1299;
        ++a2;
LABEL_830:
        if (a2 == a3)
          return 190;
        v251 = 0;
        v252 = *(_DWORD *)a1;
        while (1)
        {
          v253 = *a2;
          v254 = llparse_blob48[v252];
          if (v252 == 2)
          {
            v251 = 0;
            v255 = 5;
          }
          else
          {
            v255 = 0;
          }
          if (v253 != v254)
          {
            v251 = 2;
            v255 = 5;
          }
          if (v255)
            break;
          if (v253 == v254)
            ++v252;
          if (++a2 == a3)
          {
            v251 = 1;
            a2 = a3;
            *(_DWORD *)a1 = v252;
            goto LABEL_865;
          }
        }
        *(_DWORD *)a1 = 0;
LABEL_865:
        if (!v251)
        {
          ++a2;
          LOBYTE(v29) = 14;
          goto LABEL_1025;
        }
        if (v251 == 1)
          return 190;
        goto LABEL_1299;
      }
      ++a2;
LABEL_844:
      if (a2 == a3)
        return 193;
      v256 = *a2;
      if (v256 == 95)
      {
        ++a2;
LABEL_852:
        if (a2 == a3)
          return 192;
        v257 = 0;
        v258 = *(_DWORD *)a1;
        while (1)
        {
          v259 = *a2;
          v260 = llparse_blob49[v258];
          if (v258 == 8)
          {
            v257 = 0;
            v261 = 5;
          }
          else
          {
            v261 = 0;
          }
          if (v259 != v260)
          {
            v257 = 2;
            v261 = 5;
          }
          if (v261)
            break;
          if (v259 == v260)
            ++v258;
          if (++a2 == a3)
          {
            v257 = 1;
            a2 = a3;
            *(_DWORD *)a1 = v258;
            goto LABEL_867;
          }
        }
        *(_DWORD *)a1 = 0;
LABEL_867:
        if (!v257)
        {
          ++a2;
          LOBYTE(v29) = 42;
          goto LABEL_1025;
        }
        if (v257 == 1)
          return 192;
        goto LABEL_1299;
      }
      if (v256 != 85)
        goto LABEL_1299;
      ++a2;
LABEL_848:
      if (a2 == a3)
        return 191;
      if (*a2 != 80)
        goto LABEL_1299;
      ++a2;
      LOBYTE(v29) = 37;
LABEL_1025:
      *(_BYTE *)(a1 + 73) = v29;
      v305 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)(a1 + 8) = 0;
      v306 = *(_QWORD *)(a1 + 88);
      if (v306)
      {
        v307 = *(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *))(v306 + 24);
        if (v307)
        {
          v308 = v307(a1, v305, &a2[-v305]);
          if (v308)
          {
            v312 = v308;
            if (v308 == -1)
            {
              *(_QWORD *)(a1 + 32) = "Span callback error in on_method";
              v312 = 24;
            }
            result = 0;
            *(_DWORD *)(a1 + 24) = v312;
            *(_QWORD *)(a1 + 40) = a2;
            *(_QWORD *)(a1 + 56) = 137;
            return result;
          }
        }
      }
LABEL_1028:
      v309 = *(_QWORD *)(a1 + 88);
      if (v309)
      {
        v310 = *(uint64_t (**)(uint64_t))(v309 + 112);
        if (v310)
        {
          v311 = v310(a1);
          if (v311)
          {
            if (v311 != 21)
            {
              result = 0;
              *(_DWORD *)(a1 + 24) = 32;
              goto LABEL_2263;
            }
            result = 0;
            *(_DWORD *)(a1 + 24) = 21;
            *(_QWORD *)(a1 + 32) = "on_method_complete pause";
            *(_QWORD *)(a1 + 40) = a2;
            *(_QWORD *)(a1 + 56) = 136;
            return result;
          }
        }
      }
LABEL_1031:
      if (a2 == a3)
        return 136;
      if (*a2 != 32)
      {
        result = 0;
        *(_DWORD *)(a1 + 24) = 6;
        v7 = "Expected space after method";
        goto LABEL_2263;
      }
      ++a2;
LABEL_1034:
      result = 135;
      if (a2 != a3)
      {
        while (*a2 == 32)
        {
          if (++a2 == a3)
            return result;
        }
        if (*(_BYTE *)(a1 + 73) == 5)
        {
LABEL_1042:
          if (a2 == a3)
            return 134;
          v313 = *a2;
          if (v313 == 9 || v313 == 12)
            goto LABEL_1400;
LABEL_1047:
          if (a2 == a3)
            return 133;
          *(_QWORD *)(a1 + 8) = a2;
          *(_QWORD *)(a1 + 16) = llhttp__on_url;
LABEL_1076:
          result = 125;
          while (llhttp__internal__run_lookup_table_25[*a2] == 5)
          {
            if (++a2 == a3)
              return result;
          }
          switch((unint64_t)*a2)
          {
            case 9uLL:
            case 0xCuLL:
            case 0x109uLL:
            case 0x10AuLL:
            case 0x10CuLL:
            case 0x10DuLL:
            case 0x120uLL:
            case 0x209uLL:
            case 0x20AuLL:
            case 0x20CuLL:
            case 0x20DuLL:
            case 0x220uLL:
              goto LABEL_1400;
            case 0xAuLL:
            case 0x13AuLL:
            case 0x22AuLL:
            case 0x22FuLL:
LABEL_1119:
              v323 = *(_QWORD *)(a1 + 8);
              *(_QWORD *)(a1 + 8) = 0;
              v324 = *(_QWORD *)(a1 + 88);
              if (!v324)
                goto LABEL_1122;
              v325 = *(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *))(v324 + 8);
              if (!v325)
                goto LABEL_1122;
              v326 = v325(a1, v323, &a2[-v323]);
              if (!v326)
                goto LABEL_1122;
              v413 = v326;
              if (v326 == -1)
              {
                *(_QWORD *)(a1 + 32) = "Span callback error in on_url";
                v413 = 24;
              }
              result = 0;
              *(_DWORD *)(a1 + 24) = v413;
              *(_QWORD *)(a1 + 40) = a2;
              *(_QWORD *)(a1 + 56) = 93;
              break;
            case 0xDuLL:
            case 0x141uLL:
            case 0x142uLL:
            case 0x143uLL:
            case 0x144uLL:
            case 0x145uLL:
            case 0x146uLL:
            case 0x147uLL:
            case 0x148uLL:
            case 0x149uLL:
            case 0x14AuLL:
            case 0x14BuLL:
            case 0x14CuLL:
            case 0x14DuLL:
            case 0x14EuLL:
            case 0x14FuLL:
            case 0x150uLL:
            case 0x151uLL:
            case 0x152uLL:
            case 0x153uLL:
            case 0x154uLL:
            case 0x155uLL:
            case 0x156uLL:
            case 0x157uLL:
            case 0x158uLL:
            case 0x159uLL:
            case 0x15AuLL:
            case 0x161uLL:
            case 0x162uLL:
            case 0x163uLL:
            case 0x164uLL:
            case 0x165uLL:
            case 0x166uLL:
            case 0x167uLL:
            case 0x168uLL:
            case 0x169uLL:
            case 0x16AuLL:
            case 0x16BuLL:
            case 0x16CuLL:
            case 0x16DuLL:
            case 0x16EuLL:
            case 0x16FuLL:
            case 0x170uLL:
            case 0x171uLL:
            case 0x172uLL:
            case 0x173uLL:
            case 0x174uLL:
            case 0x175uLL:
            case 0x176uLL:
            case 0x177uLL:
            case 0x178uLL:
            case 0x179uLL:
            case 0x17AuLL:
            case 0x241uLL:
            case 0x242uLL:
            case 0x243uLL:
            case 0x244uLL:
            case 0x245uLL:
            case 0x246uLL:
            case 0x247uLL:
            case 0x248uLL:
            case 0x249uLL:
            case 0x24AuLL:
            case 0x24BuLL:
            case 0x24CuLL:
            case 0x24DuLL:
            case 0x24EuLL:
            case 0x24FuLL:
            case 0x250uLL:
            case 0x251uLL:
            case 0x252uLL:
            case 0x253uLL:
            case 0x254uLL:
            case 0x255uLL:
            case 0x256uLL:
            case 0x257uLL:
            case 0x258uLL:
            case 0x259uLL:
            case 0x25AuLL:
            case 0x261uLL:
            case 0x262uLL:
            case 0x263uLL:
            case 0x264uLL:
            case 0x265uLL:
            case 0x266uLL:
            case 0x267uLL:
            case 0x268uLL:
            case 0x269uLL:
            case 0x26AuLL:
            case 0x26BuLL:
            case 0x26CuLL:
            case 0x26DuLL:
            case 0x26EuLL:
            case 0x26FuLL:
            case 0x270uLL:
            case 0x271uLL:
            case 0x272uLL:
            case 0x273uLL:
            case 0x274uLL:
            case 0x275uLL:
            case 0x276uLL:
            case 0x277uLL:
            case 0x278uLL:
            case 0x279uLL:
            case 0x27AuLL:
LABEL_1128:
              v329 = *(_QWORD *)(a1 + 8);
              *(_QWORD *)(a1 + 8) = 0;
              v330 = *(_QWORD *)(a1 + 88);
              if (!v330)
                goto LABEL_1131;
              v331 = *(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *))(v330 + 8);
              if (!v331)
                goto LABEL_1131;
              v332 = v331(a1, v329, &a2[-v329]);
              if (!v332)
                goto LABEL_1131;
              v414 = v332;
              if (v332 == -1)
              {
                *(_QWORD *)(a1 + 32) = "Span callback error in on_url";
                v414 = 24;
              }
              result = 0;
              *(_DWORD *)(a1 + 24) = v414;
              *(_QWORD *)(a1 + 40) = a2;
              *(_QWORD *)(a1 + 56) = 95;
              break;
            case 0x20uLL:
LABEL_1148:
              v339 = *(_QWORD *)(a1 + 8);
              *(_QWORD *)(a1 + 8) = 0;
              v340 = *(_QWORD *)(a1 + 88);
              if (!v340)
                goto LABEL_1151;
              v341 = *(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *))(v340 + 8);
              if (!v341)
                goto LABEL_1151;
              v342 = v341(a1, v339, &a2[-v339]);
              if (!v342)
                goto LABEL_1151;
              v415 = v342;
              if (v342 == -1)
              {
                *(_QWORD *)(a1 + 32) = "Span callback error in on_url";
                v415 = 24;
              }
              result = 0;
              *(_DWORD *)(a1 + 24) = v415;
              *(_QWORD *)(a1 + 40) = a2;
              *(_QWORD *)(a1 + 56) = 115;
              break;
            case 0x2FuLL:
              goto LABEL_1081;
            case 0x3FuLL:
LABEL_1104:
              ++a2;
              goto LABEL_1105;
            case 0x40uLL:
              ++a2;
              goto LABEL_1090;
            default:
LABEL_1238:
              result = 0;
              *(_DWORD *)(a1 + 24) = 7;
              v7 = "Unexpected char in url server";
              goto LABEL_2263;
          }
          return result;
        }
LABEL_1050:
        if (a2 == a3)
          return 132;
        v315 = *a2;
        if (v315 == 9 || v315 == 12)
          goto LABEL_1400;
LABEL_1055:
        if (a2 == a3)
          return 131;
        *(_QWORD *)(a1 + 8) = a2;
        *(_QWORD *)(a1 + 16) = llhttp__on_url;
LABEL_1057:
        if (a2 == a3)
          return 130;
        v317 = llhttp__internal__run_lookup_table_27[*a2];
        if (v317 == 2)
        {
LABEL_1083:
          if (a2 == a3)
            return 121;
LABEL_1095:
          ++a2;
LABEL_1096:
          if (a2 == a3)
            return 120;
          result = 120;
          while (1)
          {
            v322 = llhttp__internal__run_lookup_table_23[*a2];
            if (v322 != 2)
              break;
            if (++a2 == a3)
              return result;
          }
          if (v322 != 1)
          {
LABEL_1102:
            if (a2 != a3)
            {
              switch(*a2)
              {
                case 9u:
                case 0xCu:
                  goto LABEL_1400;
                case 0xAu:
                  goto LABEL_1119;
                case 0xDu:
                  goto LABEL_1128;
                case 0x20u:
                  goto LABEL_1148;
                case 0x23u:
                  goto LABEL_1112;
                case 0x3Fu:
                  goto LABEL_1104;
                default:
                  result = 0;
                  *(_DWORD *)(a1 + 24) = 7;
                  v7 = "Invalid char in url path";
                  goto LABEL_2263;
              }
            }
            return 119;
          }
          goto LABEL_1400;
        }
        if (v317 != 3)
        {
          if (v317 != 1)
          {
            result = 0;
            *(_DWORD *)(a1 + 24) = 7;
            v7 = "Unexpected start char in url";
            goto LABEL_2263;
          }
          goto LABEL_1400;
        }
LABEL_1060:
        if (a2 == a3)
          return 129;
        result = 129;
        while (1)
        {
          v318 = llhttp__internal__run_lookup_table_26[*a2];
          if (v318 != 3)
            break;
          if (++a2 == a3)
            return result;
        }
        if (v318 == 1)
        {
LABEL_1400:
          result = 0;
          *(_DWORD *)(a1 + 24) = 7;
          *(_QWORD *)(a1 + 32) = "Invalid characters in url";
          *(_QWORD *)(a1 + 40) = a2 + 1;
          *(_QWORD *)(a1 + 56) = 0;
          return result;
        }
        if (v318 != 2)
        {
          result = 0;
          *(_DWORD *)(a1 + 24) = 7;
          v7 = "Unexpected char in url schema";
          goto LABEL_2263;
        }
LABEL_1067:
        if (a2 == a3)
          return 128;
        ++a2;
LABEL_1069:
        if (a2 == a3)
          return 127;
        v319 = a2;
        v320 = *a2;
        if (v320 == 47)
        {
          ++a2;
LABEL_1072:
          if (a2 == a3)
            return 126;
          v319 = a2;
          if (*a2 == 47)
          {
            ++a2;
LABEL_1075:
            if (a2 == a3)
              return 125;
            goto LABEL_1076;
          }
        }
        else if (v320 <= 0x20 && ((1 << v320) & 0x100003600) != 0)
        {
          goto LABEL_1400;
        }
        result = 0;
        *(_DWORD *)(a1 + 24) = 7;
        v321 = "Unexpected char in url schema";
        goto LABEL_2192;
      }
      return result;
    case 198:
      goto LABEL_914;
    case 199:
      goto LABEL_928;
    case 200:
LABEL_910:
      if (a2 == a3)
        return 200;
      v272 = *a2;
      if (v272 == 82)
      {
        ++a2;
LABEL_928:
        if (a2 == a3)
          return 199;
        v278 = 0;
        v279 = *(_DWORD *)a1;
        while (1)
        {
          v280 = *a2;
          v281 = llparse_blob53[v279];
          if (v279 == 2)
          {
            v278 = 0;
            v282 = 5;
          }
          else
          {
            v282 = 0;
          }
          if (v280 != v281)
          {
            v278 = 2;
            v282 = 5;
          }
          if (v282)
            break;
          if (v280 == v281)
            ++v279;
          if (++a2 == a3)
          {
            v278 = 1;
            a2 = a3;
            *(_DWORD *)a1 = v279;
            goto LABEL_943;
          }
        }
        *(_DWORD *)a1 = 0;
LABEL_943:
        if (!v278)
        {
          ++a2;
          LOBYTE(v29) = 7;
          goto LABEL_1025;
        }
        if (v278 == 1)
          return 199;
      }
      else
      {
        if (v272 != 69)
          goto LABEL_1299;
        ++a2;
LABEL_914:
        if (a2 == a3)
          return 198;
        v273 = 0;
        v274 = *(_DWORD *)a1;
        while (1)
        {
          v275 = *a2;
          v276 = llparse_blob52[v274];
          if (v274 == 5)
          {
            v273 = 0;
            v277 = 5;
          }
          else
          {
            v277 = 0;
          }
          if (v275 != v276)
          {
            v273 = 2;
            v277 = 5;
          }
          if (v277)
            break;
          if (v275 == v276)
            ++v274;
          if (++a2 == a3)
          {
            v273 = 1;
            a2 = a3;
            *(_DWORD *)a1 = v274;
            goto LABEL_941;
          }
        }
        *(_DWORD *)a1 = 0;
LABEL_941:
        if (!v273)
        {
          ++a2;
          LOBYTE(v29) = 40;
          goto LABEL_1025;
        }
        if (v273 == 1)
          return 198;
      }
      goto LABEL_1299;
    case 201:
      goto LABEL_958;
    case 202:
      goto LABEL_994;
    case 203:
      goto LABEL_1008;
    case 204:
      goto LABEL_990;
    case 205:
      goto LABEL_974;
    case 206:
      goto LABEL_953;
    case 207:
LABEL_950:
      if (a2 == a3)
        return 207;
      if (*a2 != 78)
        goto LABEL_1299;
      ++a2;
LABEL_953:
      if (a2 == a3)
        return 206;
      v283 = *a2;
      switch(v283)
      {
        case 'S':
          ++a2;
LABEL_974:
          if (a2 == a3)
            return 205;
          v289 = 0;
          v290 = *(_DWORD *)a1;
          while (1)
          {
            v291 = *a2;
            v292 = llparse_blob57[v290];
            if (v290 == 7)
            {
              v289 = 0;
              v293 = 5;
            }
            else
            {
              v293 = 0;
            }
            if (v291 != v292)
            {
              v289 = 2;
              v293 = 5;
            }
            if (v293)
              break;
            if (v291 == v292)
              ++v290;
            if (++a2 == a3)
            {
              v289 = 1;
              a2 = a3;
              *(_DWORD *)a1 = v290;
              goto LABEL_987;
            }
          }
          *(_DWORD *)a1 = 0;
LABEL_987:
          if (!v289)
          {
            ++a2;
            LOBYTE(v29) = 27;
            goto LABEL_1025;
          }
          if (v289 == 1)
            return 205;
          break;
        case 'L':
          ++a2;
LABEL_990:
          if (a2 == a3)
            return 204;
          v294 = *a2;
          if (v294 == 79)
          {
            ++a2;
LABEL_1008:
            if (a2 == a3)
              return 203;
            v300 = 0;
            v301 = *(_DWORD *)a1;
            while (1)
            {
              v302 = *a2;
              v303 = llparse_blob56[v301];
              if (v301 == 1)
              {
                v300 = 0;
                v304 = 5;
              }
              else
              {
                v304 = 0;
              }
              if (v302 != v303)
              {
                v300 = 2;
                v304 = 5;
              }
              if (v304)
                break;
              if (v302 == v303)
                ++v301;
              if (++a2 == a3)
              {
                v300 = 1;
                a2 = a3;
                *(_DWORD *)a1 = v301;
                goto LABEL_1023;
              }
            }
            *(_DWORD *)a1 = 0;
LABEL_1023:
            if (!v300)
            {
              ++a2;
              LOBYTE(v29) = 15;
              goto LABEL_1025;
            }
            if (v300 == 1)
              return 203;
          }
          else
          {
            if (v294 != 73)
              goto LABEL_1299;
            ++a2;
LABEL_994:
            if (a2 == a3)
              return 202;
            v295 = 0;
            v296 = *(_DWORD *)a1;
            while (1)
            {
              v297 = *a2;
              v298 = llparse_blob55[v296];
              if (v296 == 1)
              {
                v295 = 0;
                v299 = 5;
              }
              else
              {
                v299 = 0;
              }
              if (v297 != v298)
              {
                v295 = 2;
                v299 = 5;
              }
              if (v299)
                break;
              if (v297 == v298)
                ++v296;
              if (++a2 == a3)
              {
                v295 = 1;
                a2 = a3;
                *(_DWORD *)a1 = v296;
                goto LABEL_1021;
              }
            }
            *(_DWORD *)a1 = 0;
LABEL_1021:
            if (!v295)
            {
              ++a2;
              LOBYTE(v29) = 32;
              goto LABEL_1025;
            }
            if (v295 == 1)
              return 202;
          }
          break;
        case 'B':
          ++a2;
LABEL_958:
          if (a2 == a3)
            return 201;
          v284 = 0;
          v285 = *(_DWORD *)a1;
          while (1)
          {
            v286 = *a2;
            v287 = llparse_blob54[v285];
            if (v285 == 2)
            {
              v284 = 0;
              v288 = 5;
            }
            else
            {
              v288 = 0;
            }
            if (v286 != v287)
            {
              v284 = 2;
              v288 = 5;
            }
            if (v288)
              break;
            if (v286 == v287)
              ++v285;
            if (++a2 == a3)
            {
              v284 = 1;
              a2 = a3;
              *(_DWORD *)a1 = v285;
              goto LABEL_971;
            }
          }
          *(_DWORD *)a1 = 0;
LABEL_971:
          if (!v284)
          {
            ++a2;
            LOBYTE(v29) = 18;
            goto LABEL_1025;
          }
          if (v284 == 1)
            return 201;
          break;
        default:
          goto LABEL_1299;
      }
      goto LABEL_1299;
    case 208:
      goto LABEL_60;
    case 209:
      goto LABEL_58;
    case 210:
      goto LABEL_181;
    case 211:
      goto LABEL_172;
    case 212:
      goto LABEL_170;
    case 213:
      goto LABEL_163;
    case 214:
      goto LABEL_157;
    case 215:
      goto LABEL_152;
    case 216:
      goto LABEL_147;
    case 217:
      goto LABEL_144;
    case 218:
      goto LABEL_141;
    case 221:
      goto LABEL_120;
    case 223:
      goto LABEL_117;
    case 225:
      goto LABEL_114;
    case 226:
      goto LABEL_112;
    case 227:
      goto LABEL_20;
    case 229:
      goto LABEL_44;
    case 230:
      goto LABEL_111;
    case 231:
      goto LABEL_71;
    case 232:
      goto LABEL_40;
    case 233:
      goto LABEL_37;
    case 234:
      goto LABEL_35;
    case 235:
      goto LABEL_33;
    case 236:
      goto LABEL_18;
    case 237:
      goto LABEL_15;
    case 238:
      goto LABEL_3;
    default:
      goto LABEL_2347;
  }
}

uint64_t llparse__match_sequence_id(unsigned int *a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4, int a5)
{
  unsigned int v5;
  unsigned int v6;
  int v7;
  int v8;
  int v9;

  v5 = *a1;
  if (a2 == a3)
  {
LABEL_14:
    *a1 = v5;
    return 1;
  }
  else
  {
    v6 = 0;
    while (1)
    {
      v7 = *a2;
      v8 = *(unsigned __int8 *)(a4 + v5);
      if (v5 + 1 == a5)
      {
        v6 = 0;
        v9 = 5;
      }
      else
      {
        v9 = 0;
      }
      if (v7 != v8)
      {
        v6 = 2;
        v9 = 5;
      }
      if (v9)
        break;
      if (v7 == v8)
        ++v5;
      if (++a2 == a3)
        goto LABEL_14;
    }
    *a1 = 0;
    return v6;
  }
}

void sub_18383AB2C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18383B5F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18383B714(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18383B7B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18383BE70(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

BOOL nw_endpoint_create_srv(const char *a1)
{
  void *v2;
  char *v3;
  NSObject *v4;
  os_log_type_t v5;
  const char *v6;
  char *backtrace_string;
  _BOOL4 v8;
  char v9;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v12;
  __int16 v13;
  char *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (a1)
    return -[NWConcrete_nw_srv_endpoint initWithName:]([NWConcrete_nw_srv_endpoint alloc], a1);
  __nwlog_obj();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v12 = "nw_endpoint_create_srv";
  v3 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v9 = 0;
  if (__nwlog_fault(v3, &type, &v9))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v4 = objc_claimAutoreleasedReturnValue();
      v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        v12 = "nw_endpoint_create_srv";
        v6 = "%{public}s called with null name";
LABEL_16:
        _os_log_impl(&dword_182FBE000, v4, v5, v6, buf, 0xCu);
      }
    }
    else
    {
      if (v9)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v4 = objc_claimAutoreleasedReturnValue();
        v5 = type;
        v8 = os_log_type_enabled(v4, type);
        if (backtrace_string)
        {
          if (v8)
          {
            *(_DWORD *)buf = 136446466;
            v12 = "nw_endpoint_create_srv";
            v13 = 2082;
            v14 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v4, v5, "%{public}s called with null name, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_18;
        }
        if (!v8)
          goto LABEL_17;
        *(_DWORD *)buf = 136446210;
        v12 = "nw_endpoint_create_srv";
        v6 = "%{public}s called with null name, no backtrace";
        goto LABEL_16;
      }
      __nwlog_obj();
      v4 = objc_claimAutoreleasedReturnValue();
      v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        v12 = "nw_endpoint_create_srv";
        v6 = "%{public}s called with null name, backtrace limit exceeded";
        goto LABEL_16;
      }
    }
LABEL_17:

  }
LABEL_18:
  if (v3)
    free(v3);
  return 0;
}

uint64_t nw_endpoint_get_srv_name(void *a1)
{
  id v1;
  void *v2;
  _QWORD *v3;
  int v4;
  uint64_t v5;
  id v6;
  _QWORD *v7;
  int v8;
  const char *v9;
  NSObject *v10;
  os_log_type_t v11;
  _QWORD *v12;
  int v13;
  char *v14;
  os_log_type_t v15;
  _BOOL4 v16;
  _QWORD *v17;
  int v18;
  os_log_type_t v19;
  _QWORD *v20;
  int v21;
  _QWORD *v22;
  int v23;
  char *v24;
  void *v26;
  const char *v27;
  NSObject *v28;
  os_log_type_t v29;
  char *backtrace_string;
  os_log_type_t v31;
  _BOOL4 v32;
  os_log_type_t v33;
  uint64_t v34;
  char v35;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v38;
  __int16 v39;
  _WORD v40[17];

  *(_QWORD *)&v40[13] = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v38 = "nw_endpoint_get_srv_name";
    v27 = (const char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v35 = 0;
    if (__nwlog_fault(v27, &type, &v35))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v28 = objc_claimAutoreleasedReturnValue();
        v29 = type;
        if (os_log_type_enabled(v28, type))
        {
          *(_DWORD *)buf = 136446210;
          v38 = "nw_endpoint_get_srv_name";
          _os_log_impl(&dword_182FBE000, v28, v29, "%{public}s called with null endpoint", buf, 0xCu);
        }
      }
      else if (v35)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v28 = objc_claimAutoreleasedReturnValue();
        v31 = type;
        v32 = os_log_type_enabled(v28, type);
        if (backtrace_string)
        {
          if (v32)
          {
            *(_DWORD *)buf = 136446466;
            v38 = "nw_endpoint_get_srv_name";
            v39 = 2082;
            *(_QWORD *)v40 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v28, v31, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_42;
        }
        if (v32)
        {
          *(_DWORD *)buf = 136446210;
          v38 = "nw_endpoint_get_srv_name";
          _os_log_impl(&dword_182FBE000, v28, v31, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v28 = objc_claimAutoreleasedReturnValue();
        v33 = type;
        if (os_log_type_enabled(v28, type))
        {
          *(_DWORD *)buf = 136446210;
          v38 = "nw_endpoint_get_srv_name";
          _os_log_impl(&dword_182FBE000, v28, v33, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_42:
    if (!v27)
      goto LABEL_24;
    v24 = (char *)v27;
    goto LABEL_23;
  }
  v3 = v1;
  v4 = objc_msgSend(v3, "type");

  if (v4 != 5)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v6 = (id)gLogObj;
    v7 = v3;
    v8 = objc_msgSend(v7, "type");

    *(_DWORD *)buf = 136446466;
    v38 = "nw_endpoint_get_srv_name";
    v39 = 1024;
    *(_DWORD *)v40 = v8;
    LODWORD(v34) = 18;
    v9 = (const char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v35 = 0;
    if (__nwlog_fault(v9, &type, &v35))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v10 = (id)gLogObj;
        v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          v12 = v7;
          v13 = objc_msgSend(v12, "type", buf, v34);

          *(_DWORD *)buf = 136446466;
          v38 = "nw_endpoint_get_srv_name";
          v39 = 1024;
          *(_DWORD *)v40 = v13;
          _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s incorrect endpoint type %u", buf, 0x12u);
        }
      }
      else if (v35)
      {
        v14 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v10 = (id)gLogObj;
        v15 = type;
        v16 = os_log_type_enabled(v10, type);
        if (v14)
        {
          if (v16)
          {
            v17 = v7;
            v18 = objc_msgSend(v17, "type", buf, v34);

            *(_DWORD *)buf = 136446722;
            v38 = "nw_endpoint_get_srv_name";
            v39 = 1024;
            *(_DWORD *)v40 = v18;
            v40[2] = 2082;
            *(_QWORD *)&v40[3] = v14;
            _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s incorrect endpoint type %u, dumping backtrace:%{public}s", buf, 0x1Cu);
          }

          free(v14);
          if (!v9)
            goto LABEL_24;
LABEL_22:
          v24 = (char *)v9;
LABEL_23:
          free(v24);
          goto LABEL_24;
        }
        if (v16)
        {
          v22 = v7;
          v23 = objc_msgSend(v22, "type", buf, v34);

          *(_DWORD *)buf = 136446466;
          v38 = "nw_endpoint_get_srv_name";
          v39 = 1024;
          *(_DWORD *)v40 = v23;
          _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s incorrect endpoint type %u, no backtrace", buf, 0x12u);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v10 = (id)gLogObj;
        v19 = type;
        if (os_log_type_enabled(v10, type))
        {
          v20 = v7;
          v21 = objc_msgSend(v20, "type", buf, v34);

          *(_DWORD *)buf = 136446466;
          v38 = "nw_endpoint_get_srv_name";
          v39 = 1024;
          *(_DWORD *)v40 = v21;
          _os_log_impl(&dword_182FBE000, v10, v19, "%{public}s incorrect endpoint type %u, backtrace limit exceeded", buf, 0x12u);
        }
      }

    }
    if (!v9)
    {
LABEL_24:
      v5 = 0;
      goto LABEL_25;
    }
    goto LABEL_22;
  }
  v5 = v3[29];
LABEL_25:

  return v5;
}

void sub_18383C6C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_18383D7B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18383DAD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__47195(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__47196(uint64_t a1)
{

}

void sub_183840880(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1838452AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id *location, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50)
{
  uint64_t v50;

  _Block_object_dispose(&a50, 8);
  objc_destroyWeak(location);
  _Block_object_dispose((const void *)(v50 - 184), 8);
  _Block_object_dispose((const void *)(v50 - 136), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__47592(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__47593(uint64_t a1)
{

}

void __Block_byref_object_copy__54(uint64_t a1, uint64_t a2)
{
  objc_moveWeak((id *)(a1 + 40), (id *)(a2 + 40));
}

void __Block_byref_object_dispose__55(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 40));
}

void sub_183845C0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void *network_retain(void *object)
{
  if (object)
    return os_retain(object);
  return object;
}

xpc_object_t nw_xpc_array_get_value_of_type(void *a1, size_t a2, objc_class *a3)
{
  xpc_object_t value;
  xpc_object_t v7;

  if (!a1 || object_getClass(a1) != (Class)MEMORY[0x1E0C812C8] || xpc_array_get_count(a1) <= a2)
    return 0;
  value = xpc_array_get_value(a1, a2);
  v7 = value;
  if (a3 && value && object_getClass(value) != a3)
    return 0;
  return v7;
}

xpc_object_t nw_xpc_dictionary_get_value_of_type(void *a1, const char *a2, objc_class *a3)
{
  Class Class;
  xpc_object_t v7;
  xpc_object_t value;

  if (!a1)
    return 0;
  Class = object_getClass(a1);
  v7 = 0;
  if (a2)
  {
    if (Class == (Class)MEMORY[0x1E0C812F8])
    {
      value = xpc_dictionary_get_value(a1, a2);
      v7 = value;
      if (a3)
      {
        if (value && object_getClass(value) != a3)
          return 0;
      }
    }
  }
  return v7;
}

uint64_t nw_dispatch_data_copyout(NSObject *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD applier[7];
  _QWORD v6[4];
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  v7 = 0;
  v8 = &v7;
  v9 = 0x2000000000;
  v10 = 0;
  v6[0] = 0;
  v6[1] = v6;
  v6[2] = 0x2000000000;
  v6[3] = a2;
  if (a1)
  {
    applier[0] = MEMORY[0x1E0C809B0];
    applier[1] = 0x40000000;
    applier[2] = __nw_dispatch_data_copyout_block_invoke;
    applier[3] = &unk_1E14A3448;
    applier[5] = v6;
    applier[6] = a3;
    applier[4] = &v7;
    dispatch_data_apply(a1, applier);
    v3 = v8[3];
  }
  else
  {
    v3 = 0;
  }
  _Block_object_dispose(v6, 8);
  _Block_object_dispose(&v7, 8);
  return v3;
}

void nw_append_format(const char **a1, char *a2, ...)
{
  int v4;
  unsigned int v5;
  size_t v6;
  const char *v7;
  size_t v8;
  uint64_t v9;
  size_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  NSObject *v17;
  void *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  const char *v26;
  void *v27;
  uint64_t v28;
  _BOOL4 v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  unint64_t v41;
  uint64_t v42;
  char *backtrace_string;
  uint64_t v44;
  _BOOL4 v45;
  uint64_t v46;
  char *v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  _BOOL4 v58;
  char *v59;
  uint64_t v60;
  _BOOL4 v61;
  NSObject *v62;
  void *v63;
  NSObject *v64;
  void *v65;
  NSObject *v66;
  void *v67;
  char v68;
  os_log_type_t type;
  va_list v70;
  os_log_type_t v71[8];
  uint8_t buf[4];
  const char *v73;
  __int16 v74;
  unint64_t v75;
  __int16 v76;
  unsigned int v77;
  __int16 v78;
  void *v79;
  uint64_t v80;
  va_list va;

  va_start(va, a2);
  v80 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (a2)
    {
      va_copy(v70, va);
      *(_QWORD *)v71 = 0;
      v4 = vasprintf((char **)v71, a2, va);
      v5 = v4;
      if ((v4 & 0x80000000) == 0 && *(_QWORD *)v71)
      {
        if (*a1)
        {
          v6 = strlen(*a1);
          v7 = (const char *)nw_reallocf_type<char *>((void *)*a1, v6 + v5 + 1);
          *a1 = v7;
          v8 = strlen(v7);
          v10 = v8;
          if (v7)
          {
LABEL_7:
            v11 = *(char **)v71;
            if (!*(_QWORD *)v71)
            {
              v62 = __nwlog_obj(v8, v9);
              os_log_type_enabled(v62, OS_LOG_TYPE_ERROR);
              *(_DWORD *)buf = 136446210;
              v73 = "_strict_strlcat";
              v63 = (void *)_os_log_send_and_compose_impl();
              if (__nwlog_abort((uint64_t)v63))
                goto LABEL_98;
              free(v63);
            }
            v12 = v5;
            v13 = v5 + v10 + 1;
            if (v5 + v10 != -1)
            {
              v14 = 0;
              v15 = 1;
              while (1)
              {
                v16 = &v7[v14];
                if (!v7[v14])
                  break;
                ++v14;
                --v15;
                if (v13 == v14)
                  goto LABEL_12;
              }
              if (v11)
                goto LABEL_31;
              v66 = __nwlog_obj(v8, v9);
              os_log_type_enabled(v66, OS_LOG_TYPE_ERROR);
              *(_DWORD *)buf = 136446210;
              v73 = "_strict_strlcpy";
              v67 = (void *)_os_log_send_and_compose_impl();
              if (!__nwlog_abort((uint64_t)v67))
              {
                free(v67);
                v16 = &v7[v14];
LABEL_31:
                if (v10 + v12 + v15 < 2)
                {
LABEL_36:
                  *v16 = 0;
                }
                else
                {
                  v38 = 0;
                  v39 = 0;
                  while (1)
                  {
                    v40 = v11[v38];
                    v7[v38 + v14] = v40;
                    if (!v40)
                      break;
                    v41 = v10 + v12 - v14 + v39--;
                    ++v38;
                    if (v41 <= 1)
                    {
                      v16 = &v7[v14 + v38];
                      goto LABEL_36;
                    }
                  }
                }
LABEL_59:
                v47 = *(char **)v71;
                if (!*(_QWORD *)v71)
                  return;
                goto LABEL_60;
              }
LABEL_98:
              __break(1u);
              return;
            }
LABEL_12:
            if (v11)
              goto LABEL_59;
            v17 = __nwlog_obj(v8, v9);
            os_log_type_enabled(v17, OS_LOG_TYPE_ERROR);
            *(_DWORD *)buf = 136446210;
            v73 = "_strict_strlcpy";
            v18 = (void *)_os_log_send_and_compose_impl();
            if (__nwlog_abort((uint64_t)v18))
              goto LABEL_98;
LABEL_58:
            free(v18);
            goto LABEL_59;
          }
        }
        else
        {
          v8 = (size_t)malloc_type_malloc((v4 + 1), 0xF2B69DE5uLL);
          v30 = (const char *)v8;
          if (!v8)
          {
            v64 = __nwlog_obj(0, v9);
            os_log_type_enabled(v64, OS_LOG_TYPE_ERROR);
            *(_DWORD *)buf = 136446466;
            v73 = "strict_malloc";
            v74 = 2048;
            v75 = v5 + 1;
            v65 = (void *)_os_log_send_and_compose_impl();
            if (__nwlog_abort((uint64_t)v65))
              goto LABEL_98;
            free(v65);
          }
          v10 = 0;
          *a1 = v30;
          *v30 = 0;
          v7 = *a1;
          if (*a1)
            goto LABEL_7;
        }
        v31 = pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init(v31);
        *(_DWORD *)buf = 136446210;
        v73 = "nw_append_format";
        v18 = (void *)_os_log_send_and_compose_impl();
        type = OS_LOG_TYPE_ERROR;
        v68 = 0;
        v32 = __nwlog_fault((const char *)v18, &type, &v68);
        if ((_DWORD)v32)
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            v34 = pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init(v34);
            v35 = gLogObj;
            v36 = type;
            if (!os_log_type_enabled((os_log_t)gLogObj, type))
              goto LABEL_57;
            *(_DWORD *)buf = 136446210;
            v73 = "nw_append_format";
            v37 = "%{public}s reallocf failed";
            goto LABEL_56;
          }
          if (!v68)
          {
            v46 = pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init(v46);
            v35 = gLogObj;
            v36 = type;
            if (!os_log_type_enabled((os_log_t)gLogObj, type))
              goto LABEL_57;
            *(_DWORD *)buf = 136446210;
            v73 = "nw_append_format";
            v37 = "%{public}s reallocf failed, backtrace limit exceeded";
            goto LABEL_56;
          }
          backtrace_string = (char *)__nw_create_backtrace_string(v32, v33);
          v44 = pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init(v44);
          v35 = gLogObj;
          v36 = type;
          v45 = os_log_type_enabled((os_log_t)gLogObj, type);
          if (backtrace_string)
          {
            if (v45)
            {
              *(_DWORD *)buf = 136446466;
              v73 = "nw_append_format";
              v74 = 2082;
              v75 = (unint64_t)backtrace_string;
              _os_log_impl(&dword_182FBE000, v35, v36, "%{public}s reallocf failed, dumping backtrace:%{public}s", buf, 0x16u);
            }
            free(backtrace_string);
            if (!v18)
              goto LABEL_59;
            goto LABEL_58;
          }
          if (v45)
          {
            *(_DWORD *)buf = 136446210;
            v73 = "nw_append_format";
            v37 = "%{public}s reallocf failed, no backtrace";
LABEL_56:
            _os_log_impl(&dword_182FBE000, v35, v36, v37, buf, 0xCu);
          }
        }
LABEL_57:
        if (!v18)
          goto LABEL_59;
        goto LABEL_58;
      }
      v19 = pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init(v19);
      *(_DWORD *)buf = 136446722;
      v73 = "nw_append_format";
      v74 = 2082;
      v75 = (unint64_t)a2;
      v76 = 1024;
      v77 = v5;
      v20 = (char *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      v68 = 0;
      v21 = __nwlog_fault(v20, &type, &v68);
      if ((_DWORD)v21)
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          v23 = pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init(v23);
          v24 = gLogObj;
          v25 = type;
          if (os_log_type_enabled((os_log_t)gLogObj, type))
          {
            *(_DWORD *)buf = 136446722;
            v73 = "nw_append_format";
            v74 = 2082;
            v75 = (unint64_t)a2;
            v76 = 1024;
            v77 = v5;
            v26 = "%{public}s vasprintf(\"%{public}s\") returned %d failed";
LABEL_47:
            _os_log_impl(&dword_182FBE000, v24, v25, v26, buf, 0x1Cu);
          }
        }
        else if (v68)
        {
          v27 = (void *)__nw_create_backtrace_string(v21, v22);
          v28 = pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init(v28);
          v24 = gLogObj;
          v25 = type;
          v29 = os_log_type_enabled((os_log_t)gLogObj, type);
          if (v27)
          {
            if (v29)
            {
              *(_DWORD *)buf = 136446978;
              v73 = "nw_append_format";
              v74 = 2082;
              v75 = (unint64_t)a2;
              v76 = 1024;
              v77 = v5;
              v78 = 2082;
              v79 = v27;
              _os_log_impl(&dword_182FBE000, v24, v25, "%{public}s vasprintf(\"%{public}s\") returned %d failed, dumping backtrace:%{public}s", buf, 0x26u);
            }
            free(v27);
            goto LABEL_48;
          }
          if (v29)
          {
            *(_DWORD *)buf = 136446722;
            v73 = "nw_append_format";
            v74 = 2082;
            v75 = (unint64_t)a2;
            v76 = 1024;
            v77 = v5;
            v26 = "%{public}s vasprintf(\"%{public}s\") returned %d failed, no backtrace";
            goto LABEL_47;
          }
        }
        else
        {
          v42 = pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init(v42);
          v24 = gLogObj;
          v25 = type;
          if (os_log_type_enabled((os_log_t)gLogObj, type))
          {
            *(_DWORD *)buf = 136446722;
            v73 = "nw_append_format";
            v74 = 2082;
            v75 = (unint64_t)a2;
            v76 = 1024;
            v77 = v5;
            v26 = "%{public}s vasprintf(\"%{public}s\") returned %d failed, backtrace limit exceeded";
            goto LABEL_47;
          }
        }
      }
LABEL_48:
      if (v20)
        free(v20);
      if (*a1)
      {
        free((void *)*a1);
        *a1 = 0;
      }
      goto LABEL_59;
    }
    __nwlog_obj(a1, 0);
    *(_DWORD *)buf = 136446210;
    v73 = "nw_append_format";
    v48 = (const char *)_os_log_send_and_compose_impl();
    v71[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v70) = 0;
    v54 = __nwlog_fault(v48, v71, &v70);
    if ((_DWORD)v54)
    {
      if (v71[0] == OS_LOG_TYPE_FAULT)
      {
        v51 = __nwlog_obj(v54, v55);
        v52 = v71[0];
        if (!os_log_type_enabled(v51, v71[0]))
          goto LABEL_94;
        *(_DWORD *)buf = 136446210;
        v73 = "nw_append_format";
        v53 = "%{public}s called with null format";
        goto LABEL_93;
      }
      if (!(_BYTE)v70)
      {
        v51 = __nwlog_obj(v54, v55);
        v52 = v71[0];
        if (!os_log_type_enabled(v51, v71[0]))
          goto LABEL_94;
        *(_DWORD *)buf = 136446210;
        v73 = "nw_append_format";
        v53 = "%{public}s called with null format, backtrace limit exceeded";
        goto LABEL_93;
      }
      v59 = (char *)__nw_create_backtrace_string(v54, v55);
      v51 = __nwlog_obj(v59, v60);
      v52 = v71[0];
      v61 = os_log_type_enabled(v51, v71[0]);
      if (v59)
      {
        if (v61)
        {
          *(_DWORD *)buf = 136446466;
          v73 = "nw_append_format";
          v74 = 2082;
          v75 = (unint64_t)v59;
          _os_log_impl(&dword_182FBE000, v51, v52, "%{public}s called with null format, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v59);
        if (v48)
          goto LABEL_95;
        return;
      }
      if (v61)
      {
        *(_DWORD *)buf = 136446210;
        v73 = "nw_append_format";
        v53 = "%{public}s called with null format, no backtrace";
LABEL_93:
        _os_log_impl(&dword_182FBE000, v51, v52, v53, buf, 0xCu);
      }
    }
  }
  else
  {
    __nwlog_obj(0, a2);
    *(_DWORD *)buf = 136446210;
    v73 = "nw_append_format";
    v48 = (const char *)_os_log_send_and_compose_impl();
    v71[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v70) = 0;
    v49 = __nwlog_fault(v48, v71, &v70);
    if (!(_DWORD)v49)
      goto LABEL_94;
    if (v71[0] == OS_LOG_TYPE_FAULT)
    {
      v51 = __nwlog_obj(v49, v50);
      v52 = v71[0];
      if (!os_log_type_enabled(v51, v71[0]))
        goto LABEL_94;
      *(_DWORD *)buf = 136446210;
      v73 = "nw_append_format";
      v53 = "%{public}s called with null buffer";
      goto LABEL_93;
    }
    if (!(_BYTE)v70)
    {
      v51 = __nwlog_obj(v49, v50);
      v52 = v71[0];
      if (!os_log_type_enabled(v51, v71[0]))
        goto LABEL_94;
      *(_DWORD *)buf = 136446210;
      v73 = "nw_append_format";
      v53 = "%{public}s called with null buffer, backtrace limit exceeded";
      goto LABEL_93;
    }
    v56 = (char *)__nw_create_backtrace_string(v49, v50);
    v51 = __nwlog_obj(v56, v57);
    v52 = v71[0];
    v58 = os_log_type_enabled(v51, v71[0]);
    if (!v56)
    {
      if (!v58)
        goto LABEL_94;
      *(_DWORD *)buf = 136446210;
      v73 = "nw_append_format";
      v53 = "%{public}s called with null buffer, no backtrace";
      goto LABEL_93;
    }
    if (v58)
    {
      *(_DWORD *)buf = 136446466;
      v73 = "nw_append_format";
      v74 = 2082;
      v75 = (unint64_t)v56;
      _os_log_impl(&dword_182FBE000, v51, v52, "%{public}s called with null buffer, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v56);
  }
LABEL_94:
  if (v48)
  {
LABEL_95:
    v47 = (char *)v48;
LABEL_60:
    free(v47);
  }
}

BOOL nw_reallocf_type<char *>(void *__ptr, size_t __size)
{
  uint64_t v4;
  void *v5;
  _BOOL8 result;
  NSObject *v7;
  void *v8;
  NSObject *v9;
  void *v10;

  if (!__size)
  {
    v7 = ((uint64_t (*)(void))__nwlog_obj)();
    os_log_type_enabled(v7, OS_LOG_TYPE_ERROR);
    v8 = (void *)_os_log_send_and_compose_impl();
    result = __nwlog_abort((uint64_t)v8);
    if (result)
      goto LABEL_8;
    free(v8);
  }
  v5 = reallocf(__ptr, __size);
  if (v5)
    return (BOOL)v5;
  v9 = __nwlog_obj(0, v4);
  os_log_type_enabled(v9, OS_LOG_TYPE_ERROR);
  v10 = (void *)_os_log_send_and_compose_impl();
  result = __nwlog_abort((uint64_t)v10);
  if (!result)
  {
    free(v10);
    return (BOOL)v5;
  }
LABEL_8:
  __break(1u);
  return result;
}

const char *nw_create_buffer_str_slow(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v2;
  unsigned __int8 *v3;
  int v4;
  const char *v6;

  if (!a1)
    return (const char *)nw_calloc_type<unsigned char>(1uLL);
  v2 = a2;
  if (!a2)
    return (const char *)nw_calloc_type<unsigned char>(1uLL);
  v3 = a1;
  v6 = 0;
  do
  {
    v4 = *v3++;
    nw_append_format(&v6, "%02x", v4);
    --v2;
  }
  while (v2);
  return v6;
}

unint64_t nw_convert_to_timebase(uint64_t a1)
{
  unsigned int v2;

  v2 = dword_1ECD84D64;
  if (!dword_1ECD84D64)
  {
    mach_timebase_info((mach_timebase_info_t)&time_base);
    v2 = dword_1ECD84D64;
  }
  return (unint64_t)time_base * a1 / v2;
}

uint64_t nw_delta_ms(uint64_t a1, uint64_t a2)
{
  unint64_t v2;

  v2 = nw_delta_nanos(a1, a2);
  if (v2 > 0xF423FFFFFFFFFLL)
    return 0xFFFFFFFFLL;
  else
    return (v2 / 0xF4240);
}

uint64_t nw_get_future_time_from(uint64_t a1, uint64_t a2)
{
  unsigned int v4;

  v4 = dword_1ECD84D64;
  if (!dword_1ECD84D64)
  {
    mach_timebase_info((mach_timebase_info_t)&time_base);
    v4 = dword_1ECD84D64;
  }
  return (unint64_t)v4 * a2 / time_base + a1;
}

unint64_t nw_get_time_before(unint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unint64_t v5;
  BOOL v6;
  unint64_t v7;

  v4 = dword_1ECD84D64;
  if (!dword_1ECD84D64)
  {
    mach_timebase_info((mach_timebase_info_t)&time_base);
    v4 = dword_1ECD84D64;
  }
  v5 = (unint64_t)v4 * a2 / time_base;
  v6 = a1 >= v5;
  v7 = a1 - v5;
  if (v6)
    return v7;
  else
    return 0;
}

uint64_t nw_get_future_continuous_time(uint64_t a1)
{
  unsigned int v2;
  unint64_t v3;

  v2 = dword_1ECD84D64;
  if (!dword_1ECD84D64)
  {
    mach_timebase_info((mach_timebase_info_t)&time_base);
    v2 = dword_1ECD84D64;
  }
  v3 = (unint64_t)v2 * a1 / time_base;
  return mach_continuous_time() + v3;
}

uint64_t nw_mach_continuous_time()
{
  uint64_t result;

  result = mach_continuous_time();
  if (result <= 1)
    return 1;
  return result;
}

uint64_t nw_mach_continuous_approximate_time()
{
  uint64_t result;

  result = mach_continuous_approximate_time();
  if (result <= 1)
    return 1;
  return result;
}

uint64_t nw_mach_continuous_time_with_timespec()
{
  mach_get_times();
  return 1;
}

__uint64_t nw_gettime_nanoseconds()
{
  return clock_gettime_nsec_np(_CLOCK_REALTIME);
}

uint64_t nw_unordered_xpc_array_is_equal_inner(xpc_object_t xarray, void *a2, size_t a3)
{
  size_t v6;
  xpc_object_t value;
  size_t v8;
  xpc_object_t v9;
  BOOL v10;
  size_t v11;
  xpc_object_t v12;
  size_t v13;
  xpc_object_t v14;
  char v15;

  if (!a3)
    return 1;
  v6 = 0;
  while (2)
  {
    value = xpc_array_get_value(xarray, v6);
    v8 = 0;
    while (1)
    {
      v9 = xpc_array_get_value(a2, v8);
      if (v9)
      {
        if (xpc_equal(value, v9))
          break;
      }
      if (a3 == ++v8)
      {
        v15 = 0;
        return v15 & 1;
      }
    }
    if (++v6 != a3)
      continue;
    break;
  }
  v10 = 0;
  v11 = 0;
  while (2)
  {
    v12 = xpc_array_get_value(a2, v11);
    v13 = 0;
    while (1)
    {
      v14 = xpc_array_get_value(xarray, v13);
      if (v14)
      {
        if (xpc_equal(v12, v14))
          break;
      }
      if (a3 == ++v13)
      {
        v15 = v10;
        return v15 & 1;
      }
    }
    ++v11;
    v15 = 1;
    v10 = v11 >= a3;
    if (v11 != a3)
      continue;
    break;
  }
  return v15 & 1;
}

uint64_t __nw_dispatch_data_is_equal_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  NSObject *v6;
  _QWORD v8[8];

  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 0x40000000;
  v8[2] = __nw_dispatch_data_is_equal_block_invoke_2;
  v8[3] = &unk_1E14A34D8;
  v6 = *(NSObject **)(a1 + 40);
  v8[4] = *(_QWORD *)(a1 + 32);
  v8[5] = a3;
  v8[6] = a5;
  v8[7] = a4;
  dispatch_data_apply(v6, v8);
  return *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
}

BOOL __nw_dispatch_data_is_equal_block_invoke_2(_QWORD *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  size_t v12;

  v7 = a1[5];
  v6 = a1[6];
  if (v7 <= a3)
    v8 = a3;
  else
    v8 = a1[5];
  v9 = v6 + v7;
  if (v6 + v7 >= a5 + a3)
    v10 = a5 + a3;
  else
    v10 = v6 + v7;
  v11 = v10 > v8;
  v12 = v10 - v8;
  if (v11)
  {
    *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = memcmp((const void *)(a4 + v8 - a3), (const void *)(a1[7] + v8 - v7), v12) == 0;
  }
  else
  {
    if (v9 < a3)
      return 0;
    if (a5 + a3 < v7)
      return 1;
  }
  return *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) != 0;
}

uint64_t __nw_dictionary_dispose_block_invoke()
{
  void *pointer;

  pointer = (void *)xpc_dictionary_get_pointer();
  if (pointer)
    os_release(pointer);
  return 1;
}

uint64_t nw_dictionary_copy(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  NSObject *v5;
  os_log_type_t v6;
  const char *v7;
  char *backtrace_string;
  _BOOL4 v9;
  const char *v10;
  _BOOL4 v12;
  _BOOL4 v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v17 = "nw_dictionary_copy";
    v4 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v14 = 0;
    if (!__nwlog_fault(v4, &type, &v14))
      goto LABEL_20;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v5 = __nwlog_obj();
      v6 = type;
      if (!os_log_type_enabled(v5, type))
        goto LABEL_20;
      *(_DWORD *)buf = 136446210;
      v17 = "nw_dictionary_copy";
      v7 = "%{public}s called with null dictionary";
      goto LABEL_19;
    }
    if (!v14)
    {
      v5 = __nwlog_obj();
      v6 = type;
      if (!os_log_type_enabled(v5, type))
        goto LABEL_20;
      *(_DWORD *)buf = 136446210;
      v17 = "nw_dictionary_copy";
      v7 = "%{public}s called with null dictionary, backtrace limit exceeded";
      goto LABEL_19;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v5 = __nwlog_obj();
    v6 = type;
    v12 = os_log_type_enabled(v5, type);
    if (!backtrace_string)
    {
      if (!v12)
        goto LABEL_20;
      *(_DWORD *)buf = 136446210;
      v17 = "nw_dictionary_copy";
      v7 = "%{public}s called with null dictionary, no backtrace";
      goto LABEL_19;
    }
    if (!v12)
      goto LABEL_14;
    *(_DWORD *)buf = 136446466;
    v17 = "nw_dictionary_copy";
    v18 = 2082;
    v19 = backtrace_string;
    v10 = "%{public}s called with null dictionary, dumping backtrace:%{public}s";
    goto LABEL_13;
  }
  if (!*(_QWORD *)(a1 + 16))
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v17 = "nw_dictionary_copy";
    v4 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v14 = 0;
    if (!__nwlog_fault(v4, &type, &v14))
      goto LABEL_20;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v5 = __nwlog_obj();
      v6 = type;
      if (!os_log_type_enabled(v5, type))
        goto LABEL_20;
      *(_DWORD *)buf = 136446210;
      v17 = "nw_dictionary_copy";
      v7 = "%{public}s called with null dictionary->xpc_object";
      goto LABEL_19;
    }
    if (!v14)
    {
      v5 = __nwlog_obj();
      v6 = type;
      if (!os_log_type_enabled(v5, type))
        goto LABEL_20;
      *(_DWORD *)buf = 136446210;
      v17 = "nw_dictionary_copy";
      v7 = "%{public}s called with null dictionary->xpc_object, backtrace limit exceeded";
      goto LABEL_19;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v5 = __nwlog_obj();
    v6 = type;
    v13 = os_log_type_enabled(v5, type);
    if (!backtrace_string)
    {
      if (!v13)
        goto LABEL_20;
      *(_DWORD *)buf = 136446210;
      v17 = "nw_dictionary_copy";
      v7 = "%{public}s called with null dictionary->xpc_object, no backtrace";
      goto LABEL_19;
    }
    if (!v13)
      goto LABEL_14;
    *(_DWORD *)buf = 136446466;
    v17 = "nw_dictionary_copy";
    v18 = 2082;
    v19 = backtrace_string;
    v10 = "%{public}s called with null dictionary->xpc_object, dumping backtrace:%{public}s";
    goto LABEL_13;
  }
  objc_opt_class();
  v2 = _os_object_alloc();
  if (v2)
  {
    v3 = v2;
    *(_QWORD *)(v2 + 16) = xpc_copy(*(xpc_object_t *)(a1 + 16));
    xpc_dictionary_apply(*(xpc_object_t *)(a1 + 16), &__block_literal_global_47872);
    return v3;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_dictionary_copy";
  v4 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (!__nwlog_fault(v4, &type, &v14))
    goto LABEL_20;
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v5 = gLogObj;
    v6 = type;
    if (os_log_type_enabled((os_log_t)gLogObj, type))
    {
      *(_DWORD *)buf = 136446210;
      v17 = "nw_dictionary_copy";
      v7 = "%{public}s nw_dictionary_obj_alloc failed";
LABEL_19:
      _os_log_impl(&dword_182FBE000, v5, v6, v7, buf, 0xCu);
      goto LABEL_20;
    }
    goto LABEL_20;
  }
  if (v14)
  {
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v5 = gLogObj;
    v6 = type;
    v9 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_dictionary_copy";
        v7 = "%{public}s nw_dictionary_obj_alloc failed, no backtrace";
        goto LABEL_19;
      }
      goto LABEL_20;
    }
    if (!v9)
    {
LABEL_14:
      free(backtrace_string);
      goto LABEL_20;
    }
    *(_DWORD *)buf = 136446466;
    v17 = "nw_dictionary_copy";
    v18 = 2082;
    v19 = backtrace_string;
    v10 = "%{public}s nw_dictionary_obj_alloc failed, dumping backtrace:%{public}s";
LABEL_13:
    _os_log_impl(&dword_182FBE000, v5, v6, v10, buf, 0x16u);
    goto LABEL_14;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v5 = gLogObj;
  v6 = type;
  if (os_log_type_enabled((os_log_t)gLogObj, type))
  {
    *(_DWORD *)buf = 136446210;
    v17 = "nw_dictionary_copy";
    v7 = "%{public}s nw_dictionary_obj_alloc failed, backtrace limit exceeded";
    goto LABEL_19;
  }
LABEL_20:
  if (v4)
    free(v4);
  return 0;
}

uint64_t __nw_dictionary_copy_block_invoke()
{
  void *value;

  value = (void *)xpc_pointer_get_value();
  if (value)
    os_retain(value);
  return 1;
}

BOOL NWPBHostEndpointReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  uint64_t v4;
  unint64_t v5;
  int *v6;
  unint64_t v7;
  int *v8;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  _BYTE *v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  int v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  int v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  int v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  int v52;
  int v53;
  BOOL v54;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int)*MEMORY[0x1E0D82BF0];
  v5 = *(_QWORD *)(a2 + v4);
  v6 = (int *)MEMORY[0x1E0D82BD8];
  v7 = *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]);
  v8 = (int *)MEMORY[0x1E0D82BC8];
  if (v5 < v7)
  {
    v10 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      v14 = (_BYTE *)(a2 + *v8);
      if (*v14)
        return *(_BYTE *)(a2 + *v8) == 0;
      if (v5 >= v7)
        break;
      v15 = *(_BYTE *)(*(_QWORD *)(a2 + *v10) + v5);
      *(_QWORD *)(a2 + (int)v4) = v5 + 1;
      v16 = v15 & 0x7F;
      if ((v15 & 0x80) == 0)
        goto LABEL_40;
      v17 = *v3;
      v18 = *(_QWORD *)(a2 + v17);
      if (v18 == -1 || v18 >= *(_QWORD *)(a2 + *v6))
        goto LABEL_38;
      v19 = v18 + 1;
      v20 = *(char *)(*(_QWORD *)(a2 + *v10) + v18);
      *(_QWORD *)(a2 + v17) = v19;
      v16 |= (unint64_t)(v20 & 0x7F) << 7;
      if ((v20 & 0x80000000) == 0)
        goto LABEL_40;
      v21 = *v3;
      v22 = *(_QWORD *)(a2 + v21);
      if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v6))
        goto LABEL_38;
      v23 = v22 + 1;
      v24 = *(char *)(*(_QWORD *)(a2 + *v10) + v22);
      *(_QWORD *)(a2 + v21) = v23;
      v16 |= (unint64_t)(v24 & 0x7F) << 14;
      if ((v24 & 0x80000000) == 0)
        goto LABEL_40;
      v25 = *v3;
      v26 = *(_QWORD *)(a2 + v25);
      if (v26 == -1 || v26 >= *(_QWORD *)(a2 + *v6))
        goto LABEL_38;
      v27 = v26 + 1;
      v28 = *(char *)(*(_QWORD *)(a2 + *v10) + v26);
      *(_QWORD *)(a2 + v25) = v27;
      v16 |= (unint64_t)(v28 & 0x7F) << 21;
      if ((v28 & 0x80000000) == 0)
        goto LABEL_40;
      v29 = *v3;
      v30 = *(_QWORD *)(a2 + v29);
      if (v30 == -1 || v30 >= *(_QWORD *)(a2 + *v6))
        goto LABEL_38;
      v31 = v30 + 1;
      v32 = *(char *)(*(_QWORD *)(a2 + *v10) + v30);
      *(_QWORD *)(a2 + v29) = v31;
      v16 |= (unint64_t)(v32 & 0x7F) << 28;
      if ((v32 & 0x80000000) == 0)
        goto LABEL_40;
      v33 = *v3;
      v34 = *(_QWORD *)(a2 + v33);
      if (v34 == -1 || v34 >= *(_QWORD *)(a2 + *v6))
        goto LABEL_38;
      v35 = v34 + 1;
      v36 = *(char *)(*(_QWORD *)(a2 + *v10) + v34);
      *(_QWORD *)(a2 + v33) = v35;
      if ((v36 & 0x80000000) == 0)
        goto LABEL_40;
      v37 = *v3;
      v38 = *(_QWORD *)(a2 + v37);
      if (v38 == -1 || v38 >= *(_QWORD *)(a2 + *v6))
        goto LABEL_38;
      v39 = v38 + 1;
      v40 = *(char *)(*(_QWORD *)(a2 + *v10) + v38);
      *(_QWORD *)(a2 + v37) = v39;
      if ((v40 & 0x80000000) == 0)
        goto LABEL_40;
      v41 = *v3;
      v42 = *(_QWORD *)(a2 + v41);
      if (v42 == -1 || v42 >= *(_QWORD *)(a2 + *v6))
        goto LABEL_38;
      v43 = v42 + 1;
      v44 = *(char *)(*(_QWORD *)(a2 + *v10) + v42);
      *(_QWORD *)(a2 + v41) = v43;
      if ((v44 & 0x80000000) == 0)
        goto LABEL_40;
      v45 = *v3;
      v46 = *(_QWORD *)(a2 + v45);
      if (v46 == -1 || v46 >= *(_QWORD *)(a2 + *v6))
        goto LABEL_38;
      v47 = v46 + 1;
      v48 = *(char *)(*(_QWORD *)(a2 + *v10) + v46);
      *(_QWORD *)(a2 + v45) = v47;
      if ((v48 & 0x80000000) == 0)
        goto LABEL_40;
      v49 = *v3;
      v50 = *(_QWORD *)(a2 + v49);
      if (v50 == -1 || v50 >= *(_QWORD *)(a2 + *v6))
      {
LABEL_38:
        v14 = (_BYTE *)(a2 + *v8);
        goto LABEL_39;
      }
      v51 = v50 + 1;
      v52 = *(char *)(*(_QWORD *)(a2 + *v10) + v50);
      *(_QWORD *)(a2 + v49) = v51;
      if (v52 < 0)
      {
        v16 = 0;
        v53 = *(unsigned __int8 *)(a2 + *v8);
        goto LABEL_42;
      }
LABEL_40:
      v53 = *(unsigned __int8 *)(a2 + *v8);
      if (*(_BYTE *)(a2 + *v8))
        v16 = 0;
LABEL_42:
      if (v53)
        v54 = 1;
      else
        v54 = (v16 & 7) == 4;
      if (v54)
        return *(_BYTE *)(a2 + *v8) == 0;
      if ((v16 >> 3) == 2)
      {
        PBReaderReadString();
        v11 = objc_claimAutoreleasedReturnValue();
        v12 = 16;
LABEL_4:
        v13 = *(void **)(a1 + v12);
        *(_QWORD *)(a1 + v12) = v11;

        goto LABEL_5;
      }
      if ((v16 >> 3) == 1)
      {
        PBReaderReadString();
        v11 = objc_claimAutoreleasedReturnValue();
        v12 = 8;
        goto LABEL_4;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_5:
      v4 = *v3;
      v5 = *(_QWORD *)(a2 + v4);
      v7 = *(_QWORD *)(a2 + *v6);
      if (v5 >= v7)
        return *(_BYTE *)(a2 + *v8) == 0;
    }
    v16 = 0;
LABEL_39:
    *v14 = 1;
    goto LABEL_40;
  }
  return *(_BYTE *)(a2 + *v8) == 0;
}

BOOL nw_http_get_binary_message_length(nw_protocol_metadata *a1, unint64_t a2)
{
  return nw_http_get_binary_message_length_inner(a1, 0, a2);
}

BOOL nw_http_get_binary_message_length_inner(nw_protocol_metadata *a1, int a2, unint64_t a3)
{
  int type;
  uint64_t v7;
  id v8;
  id v9;
  _QWORD *v10;
  id v11;
  _QWORD *v12;
  id v13;
  _QWORD *v14;
  id v15;
  _QWORD *v16;
  unsigned int status_code;
  uint64_t v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  void *v25;
  _BOOL8 result;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  id v32;
  id v33;
  _QWORD *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  NSObject *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  NSObject *v44;
  os_log_type_t v45;
  const char *v46;
  char *backtrace_string;
  _BOOL4 v48;
  const char *v49;
  char *v50;
  NSObject *v51;
  os_log_type_t v52;
  const char *v53;
  _BOOL4 v54;
  char *v55;
  _BOOL4 v56;
  _QWORD v57[5];
  _QWORD v58[5];
  _QWORD v59[5];
  _QWORD v60[5];
  _QWORD v61[5];
  _QWORD v62[5];
  _BYTE v63[24];
  uint64_t v64;
  _BYTE v65[24];
  uint64_t v66;
  _BYTE buf[24];
  uint64_t v68;
  int v69;
  const char *v70;
  __int16 v71;
  unint64_t v72;
  uint64_t v73;

  v73 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_get_binary_message_length_inner";
    v43 = (char *)_os_log_send_and_compose_impl();
    v65[0] = 16;
    v63[0] = 0;
    if (!__nwlog_fault(v43, v65, v63))
      goto LABEL_90;
    if (v65[0] == 17)
    {
      v44 = __nwlog_obj();
      v45 = v65[0];
      if (os_log_type_enabled(v44, (os_log_type_t)v65[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http_get_binary_message_length_inner";
        v46 = "%{public}s called with null metadata";
LABEL_89:
        _os_log_impl(&dword_182FBE000, v44, v45, v46, buf, 0xCu);
      }
LABEL_90:
      if (v43)
        free(v43);
      return 0;
    }
    if (!v63[0])
    {
      v44 = __nwlog_obj();
      v45 = v65[0];
      if (os_log_type_enabled(v44, (os_log_type_t)v65[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http_get_binary_message_length_inner";
        v46 = "%{public}s called with null metadata, backtrace limit exceeded";
        goto LABEL_89;
      }
      goto LABEL_90;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v44 = __nwlog_obj();
    v45 = v65[0];
    v48 = os_log_type_enabled(v44, (os_log_type_t)v65[0]);
    if (!backtrace_string)
    {
      if (v48)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http_get_binary_message_length_inner";
        v46 = "%{public}s called with null metadata, no backtrace";
        goto LABEL_89;
      }
      goto LABEL_90;
    }
    if (v48)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_http_get_binary_message_length_inner";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = backtrace_string;
      v49 = "%{public}s called with null metadata, dumping backtrace:%{public}s";
LABEL_74:
      _os_log_impl(&dword_182FBE000, v44, v45, v49, buf, 0x16u);
    }
LABEL_75:
    free(backtrace_string);
    goto LABEL_90;
  }
  if (a3 && a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_get_binary_message_length_inner";
    v43 = (char *)_os_log_send_and_compose_impl();
    v65[0] = 16;
    v63[0] = 0;
    if (!__nwlog_fault(v43, v65, v63))
      goto LABEL_90;
    if (v65[0] == 17)
    {
      v44 = __nwlog_obj();
      v45 = v65[0];
      if (os_log_type_enabled(v44, (os_log_type_t)v65[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http_get_binary_message_length_inner";
        v46 = "%{public}s called with null (!(indeterminate && body_length > 0))";
        goto LABEL_89;
      }
      goto LABEL_90;
    }
    if (!v63[0])
    {
      v44 = __nwlog_obj();
      v45 = v65[0];
      if (os_log_type_enabled(v44, (os_log_type_t)v65[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http_get_binary_message_length_inner";
        v46 = "%{public}s called with null (!(indeterminate && body_length > 0)), backtrace limit exceeded";
        goto LABEL_89;
      }
      goto LABEL_90;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v44 = __nwlog_obj();
    v45 = v65[0];
    v54 = os_log_type_enabled(v44, (os_log_type_t)v65[0]);
    if (!backtrace_string)
    {
      if (v54)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http_get_binary_message_length_inner";
        v46 = "%{public}s called with null (!(indeterminate && body_length > 0)), no backtrace";
        goto LABEL_89;
      }
      goto LABEL_90;
    }
    if (v54)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_http_get_binary_message_length_inner";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = backtrace_string;
      v49 = "%{public}s called with null (!(indeterminate && body_length > 0)), dumping backtrace:%{public}s";
      goto LABEL_74;
    }
    goto LABEL_75;
  }
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = buf;
  *(_QWORD *)&buf[16] = 0x2000000000;
  v68 = 0;
  type = nw_http_metadata_get_type(a1);
  ++*(_QWORD *)(*(_QWORD *)&buf[8] + 24);
  v7 = MEMORY[0x1E0C809B0];
  if (type == 1)
  {
    v8 = nw_http_metadata_copy_request(a1);
    if (v8)
    {
      v62[0] = v7;
      v62[1] = 0x40000000;
      v62[2] = ___ZL39nw_http_get_binary_message_length_innerP20nw_protocol_metadatabm_block_invoke;
      v62[3] = &unk_1E14A3650;
      v62[4] = buf;
      v9 = v8;
      v10 = v62;
      _nw_http_request_access_method((uint64_t)v9, v10);

      v61[0] = v7;
      v61[1] = 0x40000000;
      v61[2] = ___ZL39nw_http_get_binary_message_length_innerP20nw_protocol_metadatabm_block_invoke_2;
      v61[3] = &unk_1E14A3678;
      v61[4] = buf;
      v11 = v9;
      v12 = v61;
      _nw_http_request_access_scheme((uint64_t)v11, v12);

      v60[0] = v7;
      v60[1] = 0x40000000;
      v60[2] = ___ZL39nw_http_get_binary_message_length_innerP20nw_protocol_metadatabm_block_invoke_3;
      v60[3] = &unk_1E14A36A0;
      v60[4] = buf;
      v13 = v11;
      v14 = v60;
      _nw_http_request_access_authority((uint64_t)v13, v14);

      v59[0] = v7;
      v59[1] = 0x40000000;
      v59[2] = ___ZL39nw_http_get_binary_message_length_innerP20nw_protocol_metadatabm_block_invoke_4;
      v59[3] = &unk_1E14A36C8;
      v59[4] = buf;
      v15 = v13;
      v16 = v59;
      _nw_http_request_access_path((uint64_t)v15, v16);

LABEL_12:
      os_release(v15);
      goto LABEL_13;
    }
    __nwlog_obj();
    *(_DWORD *)v65 = 136446210;
    *(_QWORD *)&v65[4] = "nw_http_get_binary_message_length_inner";
    v50 = (char *)_os_log_send_and_compose_impl();
    v63[0] = 16;
    LOBYTE(v69) = 0;
    if (__nwlog_fault(v50, v63, &v69))
    {
      if (v63[0] == 17)
      {
        v51 = __nwlog_obj();
        v52 = v63[0];
        if (os_log_type_enabled(v51, (os_log_type_t)v63[0]))
        {
          *(_DWORD *)v65 = 136446210;
          *(_QWORD *)&v65[4] = "nw_http_get_binary_message_length_inner";
          v53 = "%{public}s called with null request";
LABEL_97:
          _os_log_impl(&dword_182FBE000, v51, v52, v53, v65, 0xCu);
        }
      }
      else if ((_BYTE)v69)
      {
        v55 = (char *)__nw_create_backtrace_string();
        v51 = __nwlog_obj();
        v52 = v63[0];
        v56 = os_log_type_enabled(v51, (os_log_type_t)v63[0]);
        if (v55)
        {
          if (v56)
          {
            *(_DWORD *)v65 = 136446466;
            *(_QWORD *)&v65[4] = "nw_http_get_binary_message_length_inner";
            *(_WORD *)&v65[12] = 2082;
            *(_QWORD *)&v65[14] = v55;
            _os_log_impl(&dword_182FBE000, v51, v52, "%{public}s called with null request, dumping backtrace:%{public}s", v65, 0x16u);
          }
          free(v55);
          goto LABEL_98;
        }
        if (v56)
        {
          *(_DWORD *)v65 = 136446210;
          *(_QWORD *)&v65[4] = "nw_http_get_binary_message_length_inner";
          v53 = "%{public}s called with null request, no backtrace";
          goto LABEL_97;
        }
      }
      else
      {
        v51 = __nwlog_obj();
        v52 = v63[0];
        if (os_log_type_enabled(v51, (os_log_type_t)v63[0]))
        {
          *(_DWORD *)v65 = 136446210;
          *(_QWORD *)&v65[4] = "nw_http_get_binary_message_length_inner";
          v53 = "%{public}s called with null request, backtrace limit exceeded";
          goto LABEL_97;
        }
      }
    }
LABEL_98:
    if (v50)
      free(v50);
    v38 = 0;
    goto LABEL_42;
  }
  v15 = nw_http_metadata_copy_response(a1);
  status_code = nw_http_response_get_status_code(v15);
  v18 = 4;
  if (status_code < 0x4000)
    v18 = 2;
  if (status_code < 0x40)
    v18 = 1;
  *(_QWORD *)(*(_QWORD *)&buf[8] + 24) += v18;
  if (v15)
    goto LABEL_12;
LABEL_13:
  *(_QWORD *)v65 = 0;
  *(_QWORD *)&v65[8] = v65;
  *(_QWORD *)&v65[16] = 0x2000000000;
  v66 = 0;
  v19 = nw_http_metadata_copy_header_fields(a1);
  v58[0] = v7;
  v58[1] = 0x40000000;
  v58[2] = ___ZL39nw_http_get_binary_message_length_innerP20nw_protocol_metadatabm_block_invoke_5;
  v58[3] = &unk_1E14A36F0;
  v58[4] = v65;
  nw_http_fields_enumerate(v19, v58);
  v20 = *(_QWORD *)&v65[8];
  v21 = *(_QWORD *)(*(_QWORD *)&v65[8] + 24);
  if (a2)
  {
    v22 = *(_QWORD *)&buf[8];
    v23 = v21 + *(_QWORD *)(*(_QWORD *)&buf[8] + 24);
    goto LABEL_39;
  }
  if (v21 >= 0x40)
  {
    if (v21 >= 0x4000)
    {
      if (v21 >> 30)
      {
        if (v21 >> 62)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
          *(_DWORD *)v63 = 136446466;
          *(_QWORD *)&v63[4] = "_http_vle_length";
          *(_WORD *)&v63[12] = 2048;
          *(_QWORD *)&v63[14] = v21;
          v25 = (void *)_os_log_send_and_compose_impl();
          result = __nwlog_abort((uint64_t)v25);
          if (result)
            goto LABEL_101;
          free(v25);
          v24 = 0;
          v20 = *(_QWORD *)&v65[8];
        }
        else
        {
          v24 = 8;
        }
      }
      else
      {
        v24 = 4;
      }
    }
    else
    {
      v24 = 2;
    }
  }
  else
  {
    v24 = 1;
  }
  v27 = *(_QWORD *)&buf[8];
  v28 = *(_QWORD *)(*(_QWORD *)&buf[8] + 24) + v24;
  *(_QWORD *)(*(_QWORD *)&buf[8] + 24) = v28;
  v29 = *(_QWORD *)(v20 + 24) + v28;
  *(_QWORD *)(v27 + 24) = v29;
  if (a3 >= 0x40)
  {
    if (a3 >= 0x4000)
    {
      if (a3 >> 30)
      {
        if (a3 >> 62)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
          *(_DWORD *)v63 = 136446466;
          *(_QWORD *)&v63[4] = "_http_vle_length";
          *(_WORD *)&v63[12] = 2048;
          *(_QWORD *)&v63[14] = a3;
          v31 = (void *)_os_log_send_and_compose_impl();
          result = __nwlog_abort((uint64_t)v31);
          if (result)
            goto LABEL_101;
          free(v31);
          v30 = 0;
          v27 = *(_QWORD *)&buf[8];
          v29 = *(_QWORD *)(*(_QWORD *)&buf[8] + 24);
        }
        else
        {
          v30 = 8;
        }
      }
      else
      {
        v30 = 4;
      }
    }
    else
    {
      v30 = 2;
    }
  }
  else
  {
    v30 = 1;
  }
  *(_QWORD *)(v27 + 24) = v30 + a3 + v29;
  v32 = nw_http_metadata_copy_trailer_fields(a1);
  if (!v32)
  {
    v22 = *(_QWORD *)&buf[8];
    v23 = *(_QWORD *)(*(_QWORD *)&buf[8] + 24);
LABEL_39:
    v38 = v23 + 1;
    *(_QWORD *)(v22 + 24) = v23 + 1;
    if (!v19)
    {
LABEL_41:
      _Block_object_dispose(v65, 8);
LABEL_42:
      _Block_object_dispose(buf, 8);
      return v38;
    }
LABEL_40:
    os_release(v19);
    goto LABEL_41;
  }
  *(_QWORD *)v63 = 0;
  *(_QWORD *)&v63[8] = v63;
  *(_QWORD *)&v63[16] = 0x2000000000;
  v64 = 0;
  v57[0] = v7;
  v57[1] = 0x40000000;
  v57[2] = ___ZL39nw_http_get_binary_message_length_innerP20nw_protocol_metadatabm_block_invoke_6;
  v57[3] = &unk_1E14A3718;
  v57[4] = v63;
  v33 = v32;
  v34 = v57;
  _nw_http_fields_enumerate((uint64_t)v33, v34);

  v35 = *(_QWORD *)&v63[8];
  v36 = *(_QWORD *)(*(_QWORD *)&v63[8] + 24);
  if (v36 < 0x40)
  {
    v37 = 1;
    goto LABEL_52;
  }
  if (v36 < 0x4000)
  {
    v37 = 2;
    goto LABEL_52;
  }
  if (!(v36 >> 30))
  {
    v37 = 4;
    goto LABEL_52;
  }
  if (!(v36 >> 62))
  {
    v37 = 8;
    goto LABEL_52;
  }
  v39 = __nwlog_obj();
  os_log_type_enabled(v39, OS_LOG_TYPE_ERROR);
  v69 = 136446466;
  v70 = "_http_vle_length";
  v71 = 2048;
  v72 = v36;
  v40 = (void *)_os_log_send_and_compose_impl();
  result = __nwlog_abort((uint64_t)v40);
  if (!result)
  {
    free(v40);
    v37 = 0;
    v35 = *(_QWORD *)&v63[8];
LABEL_52:
    v41 = *(_QWORD *)&buf[8];
    v42 = *(_QWORD *)(*(_QWORD *)&buf[8] + 24) + v37;
    *(_QWORD *)(*(_QWORD *)&buf[8] + 24) = v42;
    *(_QWORD *)(v41 + 24) = *(_QWORD *)(v35 + 24) + v42;
    _Block_object_dispose(v63, 8);
    os_release(v33);
    v38 = *(_QWORD *)(*(_QWORD *)&buf[8] + 24);
    if (!v19)
      goto LABEL_41;
    goto LABEL_40;
  }
LABEL_101:
  __break(1u);
  return result;
}

void ___ZL39nw_http_get_binary_message_length_innerP20nw_protocol_metadatabm_block_invoke(uint64_t a1, char *__s)
{
  size_t v3;
  size_t v4;
  uint64_t v5;
  void *v6;

  if (!__s)
  {
    v4 = 0;
    v5 = 1;
    goto LABEL_13;
  }
  v3 = strlen(__s);
  v4 = v3;
  if (v3 < 0x40)
  {
    v5 = 1;
LABEL_13:
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) += v5;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) += v4;
    return;
  }
  if (v3 < 0x4000)
  {
    v5 = 2;
    goto LABEL_13;
  }
  if (!(v3 >> 30))
  {
    v5 = 4;
    goto LABEL_13;
  }
  if (!(v3 >> 62))
  {
    v5 = 8;
    goto LABEL_13;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
  v6 = (void *)_os_log_send_and_compose_impl();
  if (!__nwlog_abort((uint64_t)v6))
  {
    free(v6);
    v5 = 0;
    goto LABEL_13;
  }
  __break(1u);
}

void ___ZL39nw_http_get_binary_message_length_innerP20nw_protocol_metadatabm_block_invoke_2(uint64_t a1, char *__s)
{
  size_t v3;
  size_t v4;
  uint64_t v5;
  void *v6;

  if (!__s)
  {
    v4 = 0;
    v5 = 1;
    goto LABEL_13;
  }
  v3 = strlen(__s);
  v4 = v3;
  if (v3 < 0x40)
  {
    v5 = 1;
LABEL_13:
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) += v5;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) += v4;
    return;
  }
  if (v3 < 0x4000)
  {
    v5 = 2;
    goto LABEL_13;
  }
  if (!(v3 >> 30))
  {
    v5 = 4;
    goto LABEL_13;
  }
  if (!(v3 >> 62))
  {
    v5 = 8;
    goto LABEL_13;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
  v6 = (void *)_os_log_send_and_compose_impl();
  if (!__nwlog_abort((uint64_t)v6))
  {
    free(v6);
    v5 = 0;
    goto LABEL_13;
  }
  __break(1u);
}

void ___ZL39nw_http_get_binary_message_length_innerP20nw_protocol_metadatabm_block_invoke_3(uint64_t a1, char *__s)
{
  size_t v3;
  size_t v4;
  uint64_t v5;
  void *v6;

  if (!__s)
  {
    v4 = 0;
    v5 = 1;
    goto LABEL_13;
  }
  v3 = strlen(__s);
  v4 = v3;
  if (v3 < 0x40)
  {
    v5 = 1;
LABEL_13:
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) += v5;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) += v4;
    return;
  }
  if (v3 < 0x4000)
  {
    v5 = 2;
    goto LABEL_13;
  }
  if (!(v3 >> 30))
  {
    v5 = 4;
    goto LABEL_13;
  }
  if (!(v3 >> 62))
  {
    v5 = 8;
    goto LABEL_13;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
  v6 = (void *)_os_log_send_and_compose_impl();
  if (!__nwlog_abort((uint64_t)v6))
  {
    free(v6);
    v5 = 0;
    goto LABEL_13;
  }
  __break(1u);
}

void ___ZL39nw_http_get_binary_message_length_innerP20nw_protocol_metadatabm_block_invoke_4(uint64_t a1, char *__s)
{
  size_t v3;
  size_t v4;
  uint64_t v5;
  void *v6;

  if (!__s)
  {
    v4 = 0;
    v5 = 1;
    goto LABEL_13;
  }
  v3 = strlen(__s);
  v4 = v3;
  if (v3 < 0x40)
  {
    v5 = 1;
LABEL_13:
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) += v5;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) += v4;
    return;
  }
  if (v3 < 0x4000)
  {
    v5 = 2;
    goto LABEL_13;
  }
  if (!(v3 >> 30))
  {
    v5 = 4;
    goto LABEL_13;
  }
  if (!(v3 >> 62))
  {
    v5 = 8;
    goto LABEL_13;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
  v6 = (void *)_os_log_send_and_compose_impl();
  if (!__nwlog_abort((uint64_t)v6))
  {
    free(v6);
    v5 = 0;
    goto LABEL_13;
  }
  __break(1u);
}

BOOL ___ZL39nw_http_get_binary_message_length_innerP20nw_protocol_metadatabm_block_invoke_5(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  void *v10;
  _BOOL8 result;
  void *v12;

  if (a3 < 0x40)
  {
    v8 = 1;
    if (a5 >= 0x40)
      goto LABEL_15;
LABEL_12:
    v9 = 1;
LABEL_23:
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) += a5 + a3 + v8 + v9;
    return 1;
  }
  if (a3 < 0x4000)
  {
    v8 = 2;
    if (a5 >= 0x40)
      goto LABEL_15;
    goto LABEL_12;
  }
  if (!(a3 >> 30))
  {
    v8 = 4;
    if (a5 >= 0x40)
      goto LABEL_15;
    goto LABEL_12;
  }
  if (a3 >> 62)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
    v10 = (void *)_os_log_send_and_compose_impl();
    result = __nwlog_abort((uint64_t)v10);
    if (result)
      goto LABEL_24;
    free(v10);
    v8 = 0;
    if (a5 < 0x40)
      goto LABEL_12;
  }
  else
  {
    v8 = 8;
    if (a5 < 0x40)
      goto LABEL_12;
  }
LABEL_15:
  if (a5 < 0x4000)
  {
    v9 = 2;
    goto LABEL_23;
  }
  if (!(a5 >> 30))
  {
    v9 = 4;
    goto LABEL_23;
  }
  if (!(a5 >> 62))
  {
    v9 = 8;
    goto LABEL_23;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
  v12 = (void *)_os_log_send_and_compose_impl();
  result = __nwlog_abort((uint64_t)v12);
  if (!result)
  {
    free(v12);
    v9 = 0;
    goto LABEL_23;
  }
LABEL_24:
  __break(1u);
  return result;
}

BOOL ___ZL39nw_http_get_binary_message_length_innerP20nw_protocol_metadatabm_block_invoke_6(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  void *v10;
  _BOOL8 result;
  void *v12;

  if (a3 < 0x40)
  {
    v8 = 1;
    if (a5 >= 0x40)
      goto LABEL_15;
LABEL_12:
    v9 = 1;
LABEL_23:
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) += a5 + a3 + v8 + v9;
    return 1;
  }
  if (a3 < 0x4000)
  {
    v8 = 2;
    if (a5 >= 0x40)
      goto LABEL_15;
    goto LABEL_12;
  }
  if (!(a3 >> 30))
  {
    v8 = 4;
    if (a5 >= 0x40)
      goto LABEL_15;
    goto LABEL_12;
  }
  if (a3 >> 62)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
    v10 = (void *)_os_log_send_and_compose_impl();
    result = __nwlog_abort((uint64_t)v10);
    if (result)
      goto LABEL_24;
    free(v10);
    v8 = 0;
    if (a5 < 0x40)
      goto LABEL_12;
  }
  else
  {
    v8 = 8;
    if (a5 < 0x40)
      goto LABEL_12;
  }
LABEL_15:
  if (a5 < 0x4000)
  {
    v9 = 2;
    goto LABEL_23;
  }
  if (!(a5 >> 30))
  {
    v9 = 4;
    goto LABEL_23;
  }
  if (!(a5 >> 62))
  {
    v9 = 8;
    goto LABEL_23;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
  v12 = (void *)_os_log_send_and_compose_impl();
  result = __nwlog_abort((uint64_t)v12);
  if (!result)
  {
    free(v12);
    v9 = 0;
    goto LABEL_23;
  }
LABEL_24:
  __break(1u);
  return result;
}

BOOL nw_http_get_indeterminate_binary_message_header_length(nw_protocol_metadata *a1)
{
  return nw_http_get_binary_message_length_inner(a1, 1, 0);
}

unint64_t nw_http_get_indeterminate_binary_message_chunk_length(unint64_t result, int a2, void *a3)
{
  unint64_t v5;
  uint64_t v6;
  void *v7;
  unint64_t v8;
  id v9;
  _QWORD *v10;
  _QWORD v11[5];
  _BYTE v12[24];
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (result)
  {
    v5 = result;
    if (result >= 0x40)
    {
      if (result >= 0x4000)
      {
        if (result >> 30)
        {
          if (result >> 62)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
            *(_DWORD *)v12 = 136446466;
            *(_QWORD *)&v12[4] = "_http_vle_length";
            *(_WORD *)&v12[12] = 2048;
            *(_QWORD *)&v12[14] = v5;
            v7 = (void *)_os_log_send_and_compose_impl();
            result = __nwlog_abort((uint64_t)v7);
            if ((_DWORD)result)
            {
              __break(1u);
              return result;
            }
            free(v7);
            v6 = 0;
          }
          else
          {
            v6 = 8;
          }
        }
        else
        {
          v6 = 4;
        }
      }
      else
      {
        v6 = 2;
      }
    }
    else
    {
      v6 = 1;
    }
    result = v6 + v5;
  }
  if (a2)
  {
    v8 = result + 1;
    if (a3)
    {
      *(_QWORD *)v12 = 0;
      *(_QWORD *)&v12[8] = v12;
      *(_QWORD *)&v12[16] = 0x2000000000;
      v13 = 0;
      v11[0] = MEMORY[0x1E0C809B0];
      v11[1] = 0x40000000;
      v11[2] = __nw_http_get_indeterminate_binary_message_chunk_length_block_invoke;
      v11[3] = &unk_1E14A35D8;
      v11[4] = v12;
      v9 = a3;
      v10 = v11;
      _nw_http_fields_enumerate((uint64_t)v9, v10);

      v8 += *(_QWORD *)(*(_QWORD *)&v12[8] + 24);
      _Block_object_dispose(v12, 8);
    }
    return v8 + 1;
  }
  return result;
}

BOOL __nw_http_get_indeterminate_binary_message_chunk_length_block_invoke(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  void *v10;
  _BOOL8 result;
  void *v12;

  if (a3 < 0x40)
  {
    v8 = 1;
    if (a5 >= 0x40)
      goto LABEL_15;
LABEL_12:
    v9 = 1;
LABEL_23:
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) += a5 + a3 + v8 + v9;
    return 1;
  }
  if (a3 < 0x4000)
  {
    v8 = 2;
    if (a5 >= 0x40)
      goto LABEL_15;
    goto LABEL_12;
  }
  if (!(a3 >> 30))
  {
    v8 = 4;
    if (a5 >= 0x40)
      goto LABEL_15;
    goto LABEL_12;
  }
  if (a3 >> 62)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
    v10 = (void *)_os_log_send_and_compose_impl();
    result = __nwlog_abort((uint64_t)v10);
    if (result)
      goto LABEL_24;
    free(v10);
    v8 = 0;
    if (a5 < 0x40)
      goto LABEL_12;
  }
  else
  {
    v8 = 8;
    if (a5 < 0x40)
      goto LABEL_12;
  }
LABEL_15:
  if (a5 < 0x4000)
  {
    v9 = 2;
    goto LABEL_23;
  }
  if (!(a5 >> 30))
  {
    v9 = 4;
    goto LABEL_23;
  }
  if (!(a5 >> 62))
  {
    v9 = 8;
    goto LABEL_23;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
  v12 = (void *)_os_log_send_and_compose_impl();
  result = __nwlog_abort((uint64_t)v12);
  if (!result)
  {
    free(v12);
    v9 = 0;
    goto LABEL_23;
  }
LABEL_24:
  __break(1u);
  return result;
}

BOOL nw_http_fillout_binary_message(nw_protocol_metadata *a1, const unsigned __int8 *a2, size_t a3, unsigned __int8 *a4, uint64_t a5)
{
  return nw_http_fillout_binary_message_inner(a1, 0, a2, a3, a4, a5);
}

BOOL nw_http_fillout_binary_message_inner(nw_protocol_metadata *a1, int a2, const unsigned __int8 *a3, size_t a4, unsigned __int8 *a5, uint64_t a6)
{
  int v12;
  BOOL v13;
  char v14;
  uint64_t v15;
  id v16;
  unsigned int status_code;
  size_t v18;
  id v19;
  id v20;
  _QWORD *v21;
  id v22;
  _QWORD *v23;
  id v24;
  _QWORD *v25;
  _QWORD *v26;
  char *v27;
  uint64_t *v28;
  unint64_t v29;
  id v30;
  unint64_t v31;
  size_t v32;
  char *v33;
  uint64_t *v34;
  unint64_t v35;
  _BYTE *v36;
  uint64_t *v37;
  char *v38;
  NSObject *v39;
  os_log_type_t v40;
  const char *v41;
  size_t v42;
  char *v43;
  uint64_t *v44;
  unint64_t v45;
  char *v46;
  uint64_t *v47;
  unint64_t v48;
  id v49;
  id v50;
  _QWORD *v51;
  unint64_t v52;
  size_t v53;
  uint64_t v54;
  uint64_t v55;
  _BOOL8 result;
  char *v57;
  uint64_t *v58;
  unint64_t v59;
  id v60;
  _QWORD *v61;
  void *v62;
  void *v63;
  NSObject *v64;
  void *v65;
  char *v66;
  NSObject *v67;
  os_log_type_t v68;
  const char *v69;
  char *v70;
  NSObject *v71;
  os_log_type_t v72;
  const char *v73;
  char *backtrace_string;
  _BOOL4 v75;
  const char *v76;
  _BOOL4 v77;
  char *v78;
  NSObject *v79;
  os_log_type_t v80;
  const char *v81;
  char *v82;
  NSObject *v83;
  os_log_type_t v84;
  const char *v85;
  char *v86;
  _BOOL4 v87;
  char *v88;
  NSObject *v89;
  os_log_type_t v90;
  const char *v91;
  char *v92;
  NSObject *v93;
  os_log_type_t v94;
  const char *v95;
  NSObject *v96;
  uint64_t v97;
  void *v98;
  NSObject *v99;
  os_log_type_t v100;
  const char *v101;
  _BOOL4 v102;
  _BOOL4 v103;
  char *v104;
  NSObject *v105;
  os_log_type_t v106;
  const char *v107;
  char *v108;
  _BOOL4 v109;
  const char *v110;
  char *v111;
  _BOOL4 v112;
  uint64_t v113;
  char *v114;
  _BOOL4 v115;
  char *v116;
  _BOOL4 v117;
  char *v118;
  _BOOL4 v119;
  char *v120;
  _BOOL4 v121;
  char *v122;
  _BOOL4 v123;
  NSObject *v124;
  uint64_t v125;
  char *v126;
  _BOOL4 v127;
  NSObject *v128;
  uint64_t v129;
  char *v130;
  _BOOL4 v131;
  void *v132;
  NSObject *v133;
  os_log_type_t v134;
  const char *v135;
  char *v136;
  _BOOL4 v137;
  NSObject *v138;
  uint64_t v139;
  char *v140;
  _BOOL4 v141;
  char *v142;
  _BOOL4 v143;
  NSObject *v144;
  uint64_t v145;
  char *v146;
  _BOOL4 v147;
  _BOOL4 v148;
  char *v149;
  _BOOL4 v150;
  char *v151;
  _BOOL4 v152;
  char *v153;
  NSObject *v154;
  os_log_type_t v155;
  const char *v156;
  char *v157;
  _BOOL4 v158;
  char *v159;
  NSObject *v160;
  os_log_type_t v161;
  const char *v162;
  char *v163;
  _BOOL4 v164;
  char *v165;
  _BOOL4 v166;
  _BOOL4 v167;
  _BOOL4 v168;
  char *v169;
  NSObject *v170;
  os_log_type_t v171;
  const char *v172;
  char *v173;
  _BOOL4 v174;
  _BOOL4 v175;
  NSObject *log;
  _QWORD v177[6];
  os_log_type_t v178[8];
  _QWORD v179[5];
  os_log_type_t type[8];
  os_log_type_t *v181;
  uint64_t v182;
  uint64_t v183;
  _QWORD v184[6];
  _QWORD v185[5];
  uint64_t __src;
  uint64_t *p_src;
  uint64_t v188;
  uint64_t v189;
  _QWORD v190[6];
  _QWORD v191[6];
  _QWORD v192[6];
  _QWORD v193[6];
  uint64_t v194;
  uint64_t *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t *v199;
  uint64_t v200;
  unsigned __int8 *v201;
  char v202;
  os_log_type_t v203;
  uint8_t buf[4];
  const char *v205;
  __int16 v206;
  const char *v207;
  __int16 v208;
  uint64_t v209;
  __int16 v210;
  uint64_t v211;
  uint64_t v212;

  v212 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v205 = "nw_http_fillout_binary_message_inner";
    v66 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(v198) = 16;
    LOBYTE(v194) = 0;
    if (!__nwlog_fault(v66, &v198, &v194))
      goto LABEL_353;
    if (v198 != 17)
    {
      if (!(_BYTE)v194)
      {
        v67 = __nwlog_obj();
        v68 = v198;
        if (os_log_type_enabled(v67, (os_log_type_t)v198))
        {
          *(_DWORD *)buf = 136446210;
          v205 = "nw_http_fillout_binary_message_inner";
          v69 = "%{public}s called with null metadata, backtrace limit exceeded";
          goto LABEL_352;
        }
        goto LABEL_353;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v67 = __nwlog_obj();
      v68 = v198;
      v75 = os_log_type_enabled(v67, (os_log_type_t)v198);
      if (!backtrace_string)
      {
        if (v75)
        {
          *(_DWORD *)buf = 136446210;
          v205 = "nw_http_fillout_binary_message_inner";
          v69 = "%{public}s called with null metadata, no backtrace";
          goto LABEL_352;
        }
        goto LABEL_353;
      }
      if (!v75)
        goto LABEL_189;
      *(_DWORD *)buf = 136446466;
      v205 = "nw_http_fillout_binary_message_inner";
      v206 = 2082;
      v207 = backtrace_string;
      v76 = "%{public}s called with null metadata, dumping backtrace:%{public}s";
      goto LABEL_188;
    }
    v67 = __nwlog_obj();
    v68 = v198;
    if (!os_log_type_enabled(v67, (os_log_type_t)v198))
      goto LABEL_353;
    *(_DWORD *)buf = 136446210;
    v205 = "nw_http_fillout_binary_message_inner";
    v69 = "%{public}s called with null metadata";
LABEL_352:
    _os_log_impl(&dword_182FBE000, v67, v68, v69, buf, 0xCu);
    goto LABEL_353;
  }
  if (!a5)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v205 = "nw_http_fillout_binary_message_inner";
    v66 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(v198) = 16;
    LOBYTE(v194) = 0;
    if (!__nwlog_fault(v66, &v198, &v194))
      goto LABEL_353;
    if (v198 != 17)
    {
      if (!(_BYTE)v194)
      {
        v67 = __nwlog_obj();
        v68 = v198;
        if (os_log_type_enabled(v67, (os_log_type_t)v198))
        {
          *(_DWORD *)buf = 136446210;
          v205 = "nw_http_fillout_binary_message_inner";
          v69 = "%{public}s called with null buffer, backtrace limit exceeded";
          goto LABEL_352;
        }
        goto LABEL_353;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v67 = __nwlog_obj();
      v68 = v198;
      v77 = os_log_type_enabled(v67, (os_log_type_t)v198);
      if (!backtrace_string)
      {
        if (v77)
        {
          *(_DWORD *)buf = 136446210;
          v205 = "nw_http_fillout_binary_message_inner";
          v69 = "%{public}s called with null buffer, no backtrace";
          goto LABEL_352;
        }
        goto LABEL_353;
      }
      if (!v77)
        goto LABEL_189;
      *(_DWORD *)buf = 136446466;
      v205 = "nw_http_fillout_binary_message_inner";
      v206 = 2082;
      v207 = backtrace_string;
      v76 = "%{public}s called with null buffer, dumping backtrace:%{public}s";
      goto LABEL_188;
    }
    v67 = __nwlog_obj();
    v68 = v198;
    if (!os_log_type_enabled(v67, (os_log_type_t)v198))
      goto LABEL_353;
    *(_DWORD *)buf = 136446210;
    v205 = "nw_http_fillout_binary_message_inner";
    v69 = "%{public}s called with null buffer";
    goto LABEL_352;
  }
  if (!a4)
    goto LABEL_6;
  if (a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v205 = "nw_http_fillout_binary_message_inner";
    v66 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(v198) = 16;
    LOBYTE(v194) = 0;
    if (!__nwlog_fault(v66, &v198, &v194))
      goto LABEL_353;
    if (v198 == 17)
    {
      v67 = __nwlog_obj();
      v68 = v198;
      if (!os_log_type_enabled(v67, (os_log_type_t)v198))
        goto LABEL_353;
      *(_DWORD *)buf = 136446210;
      v205 = "nw_http_fillout_binary_message_inner";
      v69 = "%{public}s called with null (!indeterminate)";
      goto LABEL_352;
    }
    if (!(_BYTE)v194)
    {
      v67 = __nwlog_obj();
      v68 = v198;
      if (os_log_type_enabled(v67, (os_log_type_t)v198))
      {
        *(_DWORD *)buf = 136446210;
        v205 = "nw_http_fillout_binary_message_inner";
        v69 = "%{public}s called with null (!indeterminate), backtrace limit exceeded";
        goto LABEL_352;
      }
      goto LABEL_353;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v67 = __nwlog_obj();
    v68 = v198;
    v102 = os_log_type_enabled(v67, (os_log_type_t)v198);
    if (!backtrace_string)
    {
      if (v102)
      {
        *(_DWORD *)buf = 136446210;
        v205 = "nw_http_fillout_binary_message_inner";
        v69 = "%{public}s called with null (!indeterminate), no backtrace";
        goto LABEL_352;
      }
      goto LABEL_353;
    }
    if (!v102)
      goto LABEL_189;
    *(_DWORD *)buf = 136446466;
    v205 = "nw_http_fillout_binary_message_inner";
    v206 = 2082;
    v207 = backtrace_string;
    v76 = "%{public}s called with null (!indeterminate), dumping backtrace:%{public}s";
LABEL_188:
    _os_log_impl(&dword_182FBE000, v67, v68, v76, buf, 0x16u);
    goto LABEL_189;
  }
  if (!a3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v205 = "nw_http_fillout_binary_message_inner";
    v66 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(v198) = 16;
    LOBYTE(v194) = 0;
    if (!__nwlog_fault(v66, &v198, &v194))
      goto LABEL_353;
    if (v198 == 17)
    {
      v67 = __nwlog_obj();
      v68 = v198;
      if (os_log_type_enabled(v67, (os_log_type_t)v198))
      {
        *(_DWORD *)buf = 136446210;
        v205 = "nw_http_fillout_binary_message_inner";
        v69 = "%{public}s called with null body_content";
        goto LABEL_352;
      }
LABEL_353:
      if (v66)
        free(v66);
      return 0;
    }
    if (!(_BYTE)v194)
    {
      v67 = __nwlog_obj();
      v68 = v198;
      if (os_log_type_enabled(v67, (os_log_type_t)v198))
      {
        *(_DWORD *)buf = 136446210;
        v205 = "nw_http_fillout_binary_message_inner";
        v69 = "%{public}s called with null body_content, backtrace limit exceeded";
        goto LABEL_352;
      }
      goto LABEL_353;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v67 = __nwlog_obj();
    v68 = v198;
    v103 = os_log_type_enabled(v67, (os_log_type_t)v198);
    if (!backtrace_string)
    {
      if (v103)
      {
        *(_DWORD *)buf = 136446210;
        v205 = "nw_http_fillout_binary_message_inner";
        v69 = "%{public}s called with null body_content, no backtrace";
        goto LABEL_352;
      }
      goto LABEL_353;
    }
    if (v103)
    {
      *(_DWORD *)buf = 136446466;
      v205 = "nw_http_fillout_binary_message_inner";
      v206 = 2082;
      v207 = backtrace_string;
      v76 = "%{public}s called with null body_content, dumping backtrace:%{public}s";
      goto LABEL_188;
    }
LABEL_189:
    free(backtrace_string);
    goto LABEL_353;
  }
LABEL_6:
  v12 = nw_http_metadata_get_type(a1);
  v198 = 0;
  v199 = &v198;
  v200 = 0x2000000000;
  v201 = a5;
  v194 = 0;
  v195 = &v194;
  v196 = 0x2000000000;
  v197 = a6;
  if (!a6)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v205 = "_http_safe_append";
    v70 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(__src) = 16;
    type[0] = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v70, &__src, type))
      goto LABEL_303;
    if (__src == 17)
    {
      v71 = __nwlog_obj();
      v72 = __src;
      if (!os_log_type_enabled(v71, (os_log_type_t)__src))
        goto LABEL_303;
      *(_DWORD *)buf = 136446210;
      v205 = "_http_safe_append";
      v73 = "%{public}s called with null (*remaining >= length)";
    }
    else if (type[0])
    {
      v86 = (char *)__nw_create_backtrace_string();
      v71 = __nwlog_obj();
      v72 = __src;
      v87 = os_log_type_enabled(v71, (os_log_type_t)__src);
      if (v86)
      {
        if (v87)
        {
          *(_DWORD *)buf = 136446466;
          v205 = "_http_safe_append";
          v206 = 2082;
          v207 = v86;
          _os_log_impl(&dword_182FBE000, v71, v72, "%{public}s called with null (*remaining >= length), dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v86);
LABEL_303:
        if (v70)
          free(v70);
        v199[3] = 0;
        __nwlog_obj();
        *(_DWORD *)buf = 136446210;
        v205 = "nw_http_fillout_binary_message_inner";
        v78 = (char *)_os_log_send_and_compose_impl();
        LOBYTE(__src) = 16;
        type[0] = OS_LOG_TYPE_DEFAULT;
        if (!__nwlog_fault(v78, &__src, type))
          goto LABEL_363;
        if (__src == 17)
        {
          v79 = __nwlog_obj();
          v80 = __src;
          if (!os_log_type_enabled(v79, (os_log_type_t)__src))
            goto LABEL_363;
          *(_DWORD *)buf = 136446210;
          v205 = "nw_http_fillout_binary_message_inner";
          v81 = "%{public}s called with null cursor";
          goto LABEL_362;
        }
        if (type[0] == OS_LOG_TYPE_DEFAULT)
        {
          v79 = __nwlog_obj();
          v80 = __src;
          if (!os_log_type_enabled(v79, (os_log_type_t)__src))
            goto LABEL_363;
          *(_DWORD *)buf = 136446210;
          v205 = "nw_http_fillout_binary_message_inner";
          v81 = "%{public}s called with null cursor, backtrace limit exceeded";
          goto LABEL_362;
        }
        v108 = (char *)__nw_create_backtrace_string();
        v79 = __nwlog_obj();
        v80 = __src;
        v148 = os_log_type_enabled(v79, (os_log_type_t)__src);
        if (!v108)
        {
          if (!v148)
            goto LABEL_363;
          *(_DWORD *)buf = 136446210;
          v205 = "nw_http_fillout_binary_message_inner";
          v81 = "%{public}s called with null cursor, no backtrace";
          goto LABEL_362;
        }
        if (v148)
        {
          *(_DWORD *)buf = 136446466;
          v205 = "nw_http_fillout_binary_message_inner";
          v206 = 2082;
          v207 = v108;
          v110 = "%{public}s called with null cursor, dumping backtrace:%{public}s";
          goto LABEL_313;
        }
LABEL_314:
        free(v108);
        goto LABEL_363;
      }
      if (!v87)
        goto LABEL_303;
      *(_DWORD *)buf = 136446210;
      v205 = "_http_safe_append";
      v73 = "%{public}s called with null (*remaining >= length), no backtrace";
    }
    else
    {
      v71 = __nwlog_obj();
      v72 = __src;
      if (!os_log_type_enabled(v71, (os_log_type_t)__src))
        goto LABEL_303;
      *(_DWORD *)buf = 136446210;
      v205 = "_http_safe_append";
      v73 = "%{public}s called with null (*remaining >= length), backtrace limit exceeded";
    }
    _os_log_impl(&dword_182FBE000, v71, v72, v73, buf, 0xCu);
    goto LABEL_303;
  }
  v13 = v12 != 1;
  if (v12 == 1)
    v14 = 2;
  else
    v14 = 3;
  if (a2)
    v13 = v14;
  *a5 = v13;
  v197 = a6 - 1;
  v201 = a5 + 1;
  v15 = MEMORY[0x1E0C809B0];
  if (v12 == 1)
  {
    v19 = nw_http_metadata_copy_request(a1);
    if (v19)
    {
      v193[0] = v15;
      v193[1] = 0x40000000;
      v193[2] = ___ZL36nw_http_fillout_binary_message_innerP20nw_protocol_metadatabPKhmPhm_block_invoke;
      v193[3] = &unk_1E14A3740;
      v193[4] = &v198;
      v193[5] = &v194;
      v20 = v19;
      v21 = v193;
      _nw_http_request_access_method((uint64_t)v20, v21);

      v192[0] = v15;
      v192[1] = 0x40000000;
      v192[2] = ___ZL36nw_http_fillout_binary_message_innerP20nw_protocol_metadatabPKhmPhm_block_invoke_16;
      v192[3] = &unk_1E14A3768;
      v192[4] = &v198;
      v192[5] = &v194;
      v22 = v20;
      v23 = v192;
      _nw_http_request_access_scheme((uint64_t)v22, v23);

      v191[0] = v15;
      v191[1] = 0x40000000;
      v191[2] = ___ZL36nw_http_fillout_binary_message_innerP20nw_protocol_metadatabPKhmPhm_block_invoke_18;
      v191[3] = &unk_1E14A3790;
      v191[4] = &v198;
      v191[5] = &v194;
      v24 = v22;
      v25 = v191;
      _nw_http_request_access_authority((uint64_t)v24, v25);

      v190[0] = v15;
      v190[1] = 0x40000000;
      v190[2] = ___ZL36nw_http_fillout_binary_message_innerP20nw_protocol_metadatabPKhmPhm_block_invoke_20;
      v190[3] = &unk_1E14A37B8;
      v190[4] = &v198;
      v190[5] = &v194;
      v16 = v24;
      v26 = v190;
      _nw_http_request_access_path((uint64_t)v16, v26);

LABEL_26:
      os_release(v16);
      goto LABEL_27;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v205 = "nw_http_fillout_binary_message_inner";
    v78 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(__src) = 16;
    type[0] = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v78, &__src, type))
      goto LABEL_363;
    if (__src == 17)
    {
      v79 = __nwlog_obj();
      v80 = __src;
      if (!os_log_type_enabled(v79, (os_log_type_t)__src))
        goto LABEL_363;
      *(_DWORD *)buf = 136446210;
      v205 = "nw_http_fillout_binary_message_inner";
      v81 = "%{public}s called with null request";
      goto LABEL_362;
    }
    if (type[0] == OS_LOG_TYPE_DEFAULT)
    {
      v79 = __nwlog_obj();
      v80 = __src;
      if (!os_log_type_enabled(v79, (os_log_type_t)__src))
        goto LABEL_363;
      *(_DWORD *)buf = 136446210;
      v205 = "nw_http_fillout_binary_message_inner";
      v81 = "%{public}s called with null request, backtrace limit exceeded";
      goto LABEL_362;
    }
    v108 = (char *)__nw_create_backtrace_string();
    v79 = __nwlog_obj();
    v80 = __src;
    v109 = os_log_type_enabled(v79, (os_log_type_t)__src);
    if (!v108)
    {
      if (!v109)
        goto LABEL_363;
      *(_DWORD *)buf = 136446210;
      v205 = "nw_http_fillout_binary_message_inner";
      v81 = "%{public}s called with null request, no backtrace";
LABEL_362:
      _os_log_impl(&dword_182FBE000, v79, v80, v81, buf, 0xCu);
LABEL_363:
      if (v78)
        free(v78);
      goto LABEL_390;
    }
    if (v109)
    {
      *(_DWORD *)buf = 136446466;
      v205 = "nw_http_fillout_binary_message_inner";
      v206 = 2082;
      v207 = v108;
      v110 = "%{public}s called with null request, dumping backtrace:%{public}s";
LABEL_313:
      _os_log_impl(&dword_182FBE000, v79, v80, v110, buf, 0x16u);
      goto LABEL_314;
    }
    goto LABEL_314;
  }
  v16 = nw_http_metadata_copy_response(a1);
  status_code = nw_http_response_get_status_code(v16);
  if (status_code > 0x3F)
  {
    if ((status_code & 0xC000) != 0)
    {
      __src = bswap32(status_code | 0x80000000);
      v18 = 4;
    }
    else
    {
      __src = __rev16(status_code | 0x4000);
      v18 = 2;
    }
  }
  else
  {
    __src = status_code;
    v18 = 1;
  }
  v27 = (char *)v199[3];
  if (!v27)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v205 = "_http_safe_append";
    v82 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    v178[0] = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v82, type, v178))
      goto LABEL_370;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      v83 = __nwlog_obj();
      v84 = type[0];
      if (!os_log_type_enabled(v83, type[0]))
        goto LABEL_370;
      *(_DWORD *)buf = 136446210;
      v205 = "_http_safe_append";
      v85 = "%{public}s called with null buffer";
      goto LABEL_369;
    }
    if (v178[0] == OS_LOG_TYPE_DEFAULT)
    {
      v83 = __nwlog_obj();
      v84 = type[0];
      if (!os_log_type_enabled(v83, type[0]))
        goto LABEL_370;
      *(_DWORD *)buf = 136446210;
      v205 = "_http_safe_append";
      v85 = "%{public}s called with null buffer, backtrace limit exceeded";
      goto LABEL_369;
    }
    v111 = (char *)__nw_create_backtrace_string();
    v83 = __nwlog_obj();
    v84 = type[0];
    v112 = os_log_type_enabled(v83, type[0]);
    if (!v111)
    {
      if (!v112)
        goto LABEL_370;
      *(_DWORD *)buf = 136446210;
      v205 = "_http_safe_append";
      v85 = "%{public}s called with null buffer, no backtrace";
      goto LABEL_369;
    }
    if (v112)
    {
      *(_DWORD *)buf = 136446466;
      v205 = "_http_safe_append";
      v206 = 2082;
      v207 = v111;
      _os_log_impl(&dword_182FBE000, v83, v84, "%{public}s called with null buffer, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v111);
LABEL_370:
    if (!v82)
      goto LABEL_372;
    goto LABEL_371;
  }
  v28 = v195;
  if (v195[3] < v18)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v205 = "_http_safe_append";
    v82 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    v178[0] = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v82, type, v178))
      goto LABEL_370;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      v83 = __nwlog_obj();
      v84 = type[0];
      if (!os_log_type_enabled(v83, type[0]))
        goto LABEL_370;
      *(_DWORD *)buf = 136446210;
      v205 = "_http_safe_append";
      v85 = "%{public}s called with null (*remaining >= length)";
      goto LABEL_369;
    }
    if (v178[0] == OS_LOG_TYPE_DEFAULT)
    {
      v83 = __nwlog_obj();
      v84 = type[0];
      if (!os_log_type_enabled(v83, type[0]))
        goto LABEL_370;
      *(_DWORD *)buf = 136446210;
      v205 = "_http_safe_append";
      v85 = "%{public}s called with null (*remaining >= length), backtrace limit exceeded";
      goto LABEL_369;
    }
    v114 = (char *)__nw_create_backtrace_string();
    v83 = __nwlog_obj();
    v84 = type[0];
    v115 = os_log_type_enabled(v83, type[0]);
    if (v114)
    {
      if (v115)
      {
        *(_DWORD *)buf = 136446466;
        v205 = "_http_safe_append";
        v206 = 2082;
        v207 = v114;
        _os_log_impl(&dword_182FBE000, v83, v84, "%{public}s called with null (*remaining >= length), dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v114);
      if (!v82)
      {
LABEL_372:
        v199[3] = 0;
        __nwlog_obj();
        *(_DWORD *)buf = 136446210;
        v205 = "nw_http_fillout_binary_message_inner";
        v153 = (char *)_os_log_send_and_compose_impl();
        type[0] = OS_LOG_TYPE_ERROR;
        v178[0] = OS_LOG_TYPE_DEFAULT;
        if (__nwlog_fault(v153, type, v178))
        {
          if (type[0] == OS_LOG_TYPE_FAULT)
          {
            v154 = __nwlog_obj();
            v155 = type[0];
            if (os_log_type_enabled(v154, type[0]))
            {
              *(_DWORD *)buf = 136446210;
              v205 = "nw_http_fillout_binary_message_inner";
              v156 = "%{public}s called with null cursor";
LABEL_385:
              _os_log_impl(&dword_182FBE000, v154, v155, v156, buf, 0xCu);
            }
          }
          else if (v178[0])
          {
            v157 = (char *)__nw_create_backtrace_string();
            v154 = __nwlog_obj();
            v155 = type[0];
            v158 = os_log_type_enabled(v154, type[0]);
            if (v157)
            {
              if (v158)
              {
                *(_DWORD *)buf = 136446466;
                v205 = "nw_http_fillout_binary_message_inner";
                v206 = 2082;
                v207 = v157;
                _os_log_impl(&dword_182FBE000, v154, v155, "%{public}s called with null cursor, dumping backtrace:%{public}s", buf, 0x16u);
              }
              free(v157);
              goto LABEL_386;
            }
            if (v158)
            {
              *(_DWORD *)buf = 136446210;
              v205 = "nw_http_fillout_binary_message_inner";
              v156 = "%{public}s called with null cursor, no backtrace";
              goto LABEL_385;
            }
          }
          else
          {
            v154 = __nwlog_obj();
            v155 = type[0];
            if (os_log_type_enabled(v154, type[0]))
            {
              *(_DWORD *)buf = 136446210;
              v205 = "nw_http_fillout_binary_message_inner";
              v156 = "%{public}s called with null cursor, backtrace limit exceeded";
              goto LABEL_385;
            }
          }
        }
LABEL_386:
        if (v153)
          free(v153);
        if (v16)
          os_release(v16);
LABEL_390:
        v55 = 0;
        goto LABEL_80;
      }
LABEL_371:
      free(v82);
      goto LABEL_372;
    }
    if (v115)
    {
      *(_DWORD *)buf = 136446210;
      v205 = "_http_safe_append";
      v85 = "%{public}s called with null (*remaining >= length), no backtrace";
LABEL_369:
      _os_log_impl(&dword_182FBE000, v83, v84, v85, buf, 0xCu);
      goto LABEL_370;
    }
    goto LABEL_370;
  }
  memcpy(v27, &__src, v18);
  v29 = v28[3];
  v28[3] = v29 - v18;
  if (v29 < v18)
  {
    if (gLogDatapath)
    {
      log = __nwlog_obj();
      if (os_log_type_enabled(log, OS_LOG_TYPE_DEBUG))
      {
        v113 = v28[3];
        *(_DWORD *)buf = 136446978;
        v205 = "_http_safe_append";
        v206 = 2082;
        v207 = "*remaining";
        v208 = 2048;
        v209 = v18;
        v210 = 2048;
        v211 = v113;
        _os_log_impl(&dword_182FBE000, log, OS_LOG_TYPE_DEBUG, "%{public}s Underflow: %{public}s, decrement %llu, result %llu", buf, 0x2Au);
      }
    }
    v28[3] = 0;
  }
  v199[3] = (uint64_t)&v27[v18];
  if (v16)
    goto LABEL_26;
LABEL_27:
  __src = 0;
  p_src = &__src;
  v188 = 0x2000000000;
  v189 = 0;
  v30 = nw_http_metadata_copy_header_fields(a1);
  v185[0] = v15;
  v185[1] = 0x40000000;
  v185[2] = ___ZL36nw_http_fillout_binary_message_innerP20nw_protocol_metadatabPKhmPhm_block_invoke_22;
  v185[3] = &unk_1E14A37E0;
  v185[4] = &__src;
  nw_http_fields_enumerate(v30, v185);
  if ((a2 & 1) != 0)
    goto LABEL_42;
  v31 = p_src[3];
  if (v31 <= 0x3F)
  {
    *(_QWORD *)type = p_src[3];
    v32 = 1;
    goto LABEL_36;
  }
  if (!(v31 >> 14))
  {
    *(_QWORD *)type = bswap32(v31 | 0x4000) >> 16;
    v32 = 2;
    goto LABEL_36;
  }
  if (!(v31 >> 30))
  {
    *(_QWORD *)type = bswap32(v31 | 0x80000000);
    v32 = 4;
    goto LABEL_36;
  }
  if (!(v31 >> 62))
  {
    *(_QWORD *)type = bswap64(v31 | 0xC000000000000000);
    v32 = 8;
LABEL_36:
    v33 = (char *)v199[3];
    if (v33)
    {
      v34 = v195;
      if (v195[3] >= v32)
      {
        memcpy(v33, type, v32);
        v35 = v34[3];
        v34[3] = v35 - v32;
        if (v35 < v32)
        {
          if (gLogDatapath)
          {
            v124 = __nwlog_obj();
            if (os_log_type_enabled(v124, OS_LOG_TYPE_DEBUG))
            {
              v125 = v34[3];
              *(_DWORD *)buf = 136446978;
              v205 = "_http_safe_append";
              v206 = 2082;
              v207 = "*remaining";
              v208 = 2048;
              v209 = v32;
              v210 = 2048;
              v211 = v125;
              _os_log_impl(&dword_182FBE000, v124, OS_LOG_TYPE_DEBUG, "%{public}s Underflow: %{public}s, decrement %llu, result %llu", buf, 0x2Au);
            }
          }
          v34[3] = 0;
        }
        v199[3] = (uint64_t)&v33[v32];
        goto LABEL_42;
      }
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      v205 = "_http_safe_append";
      v88 = (char *)_os_log_send_and_compose_impl();
      v178[0] = OS_LOG_TYPE_ERROR;
      v203 = OS_LOG_TYPE_DEFAULT;
      if (__nwlog_fault(v88, v178, &v203))
      {
        if (v178[0] == OS_LOG_TYPE_FAULT)
        {
          v89 = __nwlog_obj();
          v90 = v178[0];
          if (!os_log_type_enabled(v89, v178[0]))
            goto LABEL_417;
          *(_DWORD *)buf = 136446210;
          v205 = "_http_safe_append";
          v91 = "%{public}s called with null (*remaining >= length)";
          goto LABEL_416;
        }
        if (v203 == OS_LOG_TYPE_DEFAULT)
        {
          v89 = __nwlog_obj();
          v90 = v178[0];
          if (!os_log_type_enabled(v89, v178[0]))
            goto LABEL_417;
          *(_DWORD *)buf = 136446210;
          v205 = "_http_safe_append";
          v91 = "%{public}s called with null (*remaining >= length), backtrace limit exceeded";
          goto LABEL_416;
        }
        v126 = (char *)__nw_create_backtrace_string();
        v89 = __nwlog_obj();
        v90 = v178[0];
        v127 = os_log_type_enabled(v89, v178[0]);
        if (v126)
        {
          if (v127)
          {
            *(_DWORD *)buf = 136446466;
            v205 = "_http_safe_append";
            v206 = 2082;
            v207 = v126;
            _os_log_impl(&dword_182FBE000, v89, v90, "%{public}s called with null (*remaining >= length), dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v126);
          if (!v88)
            goto LABEL_419;
          goto LABEL_418;
        }
        if (v127)
        {
          *(_DWORD *)buf = 136446210;
          v205 = "_http_safe_append";
          v91 = "%{public}s called with null (*remaining >= length), no backtrace";
LABEL_416:
          _os_log_impl(&dword_182FBE000, v89, v90, v91, buf, 0xCu);
        }
      }
    }
    else
    {
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      v205 = "_http_safe_append";
      v88 = (char *)_os_log_send_and_compose_impl();
      v178[0] = OS_LOG_TYPE_ERROR;
      v203 = OS_LOG_TYPE_DEFAULT;
      if (!__nwlog_fault(v88, v178, &v203))
        goto LABEL_417;
      if (v178[0] == OS_LOG_TYPE_FAULT)
      {
        v89 = __nwlog_obj();
        v90 = v178[0];
        if (!os_log_type_enabled(v89, v178[0]))
          goto LABEL_417;
        *(_DWORD *)buf = 136446210;
        v205 = "_http_safe_append";
        v91 = "%{public}s called with null buffer";
        goto LABEL_416;
      }
      if (v203 == OS_LOG_TYPE_DEFAULT)
      {
        v89 = __nwlog_obj();
        v90 = v178[0];
        if (!os_log_type_enabled(v89, v178[0]))
          goto LABEL_417;
        *(_DWORD *)buf = 136446210;
        v205 = "_http_safe_append";
        v91 = "%{public}s called with null buffer, backtrace limit exceeded";
        goto LABEL_416;
      }
      v120 = (char *)__nw_create_backtrace_string();
      v89 = __nwlog_obj();
      v90 = v178[0];
      v121 = os_log_type_enabled(v89, v178[0]);
      if (!v120)
      {
        if (!v121)
          goto LABEL_417;
        *(_DWORD *)buf = 136446210;
        v205 = "_http_safe_append";
        v91 = "%{public}s called with null buffer, no backtrace";
        goto LABEL_416;
      }
      if (v121)
      {
        *(_DWORD *)buf = 136446466;
        v205 = "_http_safe_append";
        v206 = 2082;
        v207 = v120;
        _os_log_impl(&dword_182FBE000, v89, v90, "%{public}s called with null buffer, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v120);
    }
LABEL_417:
    if (!v88)
    {
LABEL_419:
      v199[3] = 0;
      goto LABEL_420;
    }
LABEL_418:
    free(v88);
    goto LABEL_419;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446466;
  v205 = "_http_vle_encode";
  v206 = 2048;
  v207 = (const char *)v31;
  v62 = (void *)_os_log_send_and_compose_impl();
  result = __nwlog_abort((uint64_t)v62);
  if (result)
    goto LABEL_529;
  free(v62);
  if (!v199[3])
  {
LABEL_420:
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v205 = "nw_http_fillout_binary_message_inner";
    v159 = (char *)_os_log_send_and_compose_impl();
    v178[0] = OS_LOG_TYPE_ERROR;
    v203 = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v159, v178, &v203))
      goto LABEL_525;
    if (v178[0] == OS_LOG_TYPE_FAULT)
    {
      v160 = __nwlog_obj();
      v161 = v178[0];
      if (!os_log_type_enabled(v160, v178[0]))
        goto LABEL_525;
      *(_DWORD *)buf = 136446210;
      v205 = "nw_http_fillout_binary_message_inner";
      v162 = "%{public}s called with null cursor";
    }
    else if (v203)
    {
      v165 = (char *)__nw_create_backtrace_string();
      v160 = __nwlog_obj();
      v161 = v178[0];
      v166 = os_log_type_enabled(v160, v178[0]);
      if (v165)
      {
        if (v166)
        {
          *(_DWORD *)buf = 136446466;
          v205 = "nw_http_fillout_binary_message_inner";
          v206 = 2082;
          v207 = v165;
          _os_log_impl(&dword_182FBE000, v160, v161, "%{public}s called with null cursor, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v165);
LABEL_525:
        if (!v159)
          goto LABEL_527;
        goto LABEL_526;
      }
      if (!v166)
        goto LABEL_525;
      *(_DWORD *)buf = 136446210;
      v205 = "nw_http_fillout_binary_message_inner";
      v162 = "%{public}s called with null cursor, no backtrace";
    }
    else
    {
      v160 = __nwlog_obj();
      v161 = v178[0];
      if (!os_log_type_enabled(v160, v178[0]))
        goto LABEL_525;
      *(_DWORD *)buf = 136446210;
      v205 = "nw_http_fillout_binary_message_inner";
      v162 = "%{public}s called with null cursor, backtrace limit exceeded";
    }
LABEL_524:
    _os_log_impl(&dword_182FBE000, v160, v161, v162, buf, 0xCu);
    goto LABEL_525;
  }
LABEL_42:
  v184[0] = v15;
  v184[1] = 0x40000000;
  v184[2] = ___ZL36nw_http_fillout_binary_message_innerP20nw_protocol_metadatabPKhmPhm_block_invoke_24;
  v184[3] = &unk_1E14A3830;
  v184[4] = &v198;
  v184[5] = &v194;
  nw_http_fields_enumerate_const_field(v30, v184);
  if (a2)
  {
    v36 = (_BYTE *)v199[3];
    if (!v36)
    {
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      v205 = "_http_safe_append";
      v38 = (char *)_os_log_send_and_compose_impl();
      type[0] = OS_LOG_TYPE_ERROR;
      v178[0] = OS_LOG_TYPE_DEFAULT;
      if (!__nwlog_fault(v38, type, v178))
        goto LABEL_396;
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        v39 = __nwlog_obj();
        v40 = type[0];
        if (!os_log_type_enabled(v39, type[0]))
          goto LABEL_396;
        *(_DWORD *)buf = 136446210;
        v205 = "_http_safe_append";
        v41 = "%{public}s called with null buffer";
        goto LABEL_395;
      }
      if (v178[0] == OS_LOG_TYPE_DEFAULT)
      {
        v39 = __nwlog_obj();
        v40 = type[0];
        if (!os_log_type_enabled(v39, type[0]))
          goto LABEL_396;
        *(_DWORD *)buf = 136446210;
        v205 = "_http_safe_append";
        v41 = "%{public}s called with null buffer, backtrace limit exceeded";
        goto LABEL_395;
      }
      v116 = (char *)__nw_create_backtrace_string();
      v39 = __nwlog_obj();
      v40 = type[0];
      v117 = os_log_type_enabled(v39, type[0]);
      if (!v116)
      {
        if (!v117)
          goto LABEL_396;
        *(_DWORD *)buf = 136446210;
        v205 = "_http_safe_append";
        v41 = "%{public}s called with null buffer, no backtrace";
        goto LABEL_395;
      }
      if (v117)
      {
        *(_DWORD *)buf = 136446466;
        v205 = "_http_safe_append";
        v206 = 2082;
        v207 = v116;
        _os_log_impl(&dword_182FBE000, v39, v40, "%{public}s called with null buffer, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v116);
      goto LABEL_396;
    }
    v37 = v195;
    if (!v195[3])
    {
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      v205 = "_http_safe_append";
      v38 = (char *)_os_log_send_and_compose_impl();
      type[0] = OS_LOG_TYPE_ERROR;
      v178[0] = OS_LOG_TYPE_DEFAULT;
      if (!__nwlog_fault(v38, type, v178))
        goto LABEL_396;
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        v39 = __nwlog_obj();
        v40 = type[0];
        if (!os_log_type_enabled(v39, type[0]))
          goto LABEL_396;
        *(_DWORD *)buf = 136446210;
        v205 = "_http_safe_append";
        v41 = "%{public}s called with null (*remaining >= length)";
        goto LABEL_395;
      }
      if (v178[0] == OS_LOG_TYPE_DEFAULT)
      {
        v39 = __nwlog_obj();
        v40 = type[0];
        if (!os_log_type_enabled(v39, type[0]))
          goto LABEL_396;
        *(_DWORD *)buf = 136446210;
        v205 = "_http_safe_append";
        v41 = "%{public}s called with null (*remaining >= length), backtrace limit exceeded";
        goto LABEL_395;
      }
      v118 = (char *)__nw_create_backtrace_string();
      v39 = __nwlog_obj();
      v40 = type[0];
      v119 = os_log_type_enabled(v39, type[0]);
      if (v118)
      {
        if (v119)
        {
          *(_DWORD *)buf = 136446466;
          v205 = "_http_safe_append";
          v206 = 2082;
          v207 = v118;
          _os_log_impl(&dword_182FBE000, v39, v40, "%{public}s called with null (*remaining >= length), dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v118);
        if (!v38)
        {
LABEL_398:
          v199[3] = 0;
          __nwlog_obj();
          *(_DWORD *)buf = 136446210;
          v205 = "nw_http_fillout_binary_message_inner";
          v159 = (char *)_os_log_send_and_compose_impl();
          type[0] = OS_LOG_TYPE_ERROR;
          v178[0] = OS_LOG_TYPE_DEFAULT;
          if (!__nwlog_fault(v159, type, v178))
            goto LABEL_525;
          if (type[0] == OS_LOG_TYPE_FAULT)
          {
            v160 = __nwlog_obj();
            v161 = type[0];
            if (!os_log_type_enabled(v160, type[0]))
              goto LABEL_525;
            *(_DWORD *)buf = 136446210;
            v205 = "nw_http_fillout_binary_message_inner";
            v162 = "%{public}s called with null cursor";
            goto LABEL_524;
          }
          if (v178[0] == OS_LOG_TYPE_DEFAULT)
          {
            v160 = __nwlog_obj();
            v161 = type[0];
            if (!os_log_type_enabled(v160, type[0]))
              goto LABEL_525;
            *(_DWORD *)buf = 136446210;
            v205 = "nw_http_fillout_binary_message_inner";
            v162 = "%{public}s called with null cursor, backtrace limit exceeded";
            goto LABEL_524;
          }
          v163 = (char *)__nw_create_backtrace_string();
          v160 = __nwlog_obj();
          v161 = type[0];
          v164 = os_log_type_enabled(v160, type[0]);
          if (!v163)
          {
            if (!v164)
              goto LABEL_525;
            *(_DWORD *)buf = 136446210;
            v205 = "nw_http_fillout_binary_message_inner";
            v162 = "%{public}s called with null cursor, no backtrace";
            goto LABEL_524;
          }
          if (!v164)
            goto LABEL_518;
LABEL_517:
          *(_DWORD *)buf = 136446466;
          v205 = "nw_http_fillout_binary_message_inner";
          v206 = 2082;
          v207 = v163;
          _os_log_impl(&dword_182FBE000, v160, v161, "%{public}s called with null cursor, dumping backtrace:%{public}s", buf, 0x16u);
LABEL_518:
          free(v163);
          if (v159)
LABEL_526:
            free(v159);
LABEL_527:
          v55 = 0;
          if (!v30)
            goto LABEL_79;
          goto LABEL_78;
        }
LABEL_397:
        free(v38);
        goto LABEL_398;
      }
      if (v119)
      {
        *(_DWORD *)buf = 136446210;
        v205 = "_http_safe_append";
        v41 = "%{public}s called with null (*remaining >= length), no backtrace";
LABEL_395:
        _os_log_impl(&dword_182FBE000, v39, v40, v41, buf, 0xCu);
      }
LABEL_396:
      if (!v38)
        goto LABEL_398;
      goto LABEL_397;
    }
LABEL_74:
    *v36 = 0;
    v54 = v37[3];
    v37[3] = v54 - 1;
    if (!v54)
    {
      if (gLogDatapath)
      {
        v96 = __nwlog_obj();
        if (os_log_type_enabled(v96, OS_LOG_TYPE_DEBUG))
        {
          v97 = v37[3];
          *(_DWORD *)buf = 136446978;
          v205 = "_http_safe_append";
          v206 = 2082;
          v207 = "*remaining";
          v208 = 2048;
          v209 = 1;
          v210 = 2048;
          v211 = v97;
          _os_log_impl(&dword_182FBE000, v96, OS_LOG_TYPE_DEBUG, "%{public}s Underflow: %{public}s, decrement %llu, result %llu", buf, 0x2Au);
        }
      }
      v37[3] = 0;
    }
    v199[3] = (uint64_t)(v36 + 1);
    v55 = 1;
    if (!v30)
      goto LABEL_79;
LABEL_78:
    os_release(v30);
LABEL_79:
    _Block_object_dispose(&__src, 8);
LABEL_80:
    _Block_object_dispose(&v194, 8);
    _Block_object_dispose(&v198, 8);
    return v55;
  }
  if (a4 > 0x3F)
  {
    if (a4 >> 14)
    {
      if (a4 >> 30)
      {
        if (a4 >> 62)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
          *(_DWORD *)buf = 136446466;
          v205 = "_http_vle_encode";
          v206 = 2048;
          v207 = (const char *)a4;
          v63 = (void *)_os_log_send_and_compose_impl();
          result = __nwlog_abort((uint64_t)v63);
          if (result)
            goto LABEL_529;
          free(v63);
          v46 = (char *)v199[3];
          if (v46)
          {
LABEL_63:
            if (a3)
            {
              v47 = v195;
              if (v195[3] >= a4)
              {
                memcpy(v46, a3, a4);
                v48 = v47[3];
                v47[3] = v48 - a4;
                if (v48 < a4)
                {
                  if (gLogDatapath)
                  {
                    v138 = __nwlog_obj();
                    if (os_log_type_enabled(v138, OS_LOG_TYPE_DEBUG))
                    {
                      v139 = v47[3];
                      *(_DWORD *)buf = 136446978;
                      v205 = "_http_safe_append";
                      v206 = 2082;
                      v207 = "*remaining";
                      v208 = 2048;
                      v209 = a4;
                      v210 = 2048;
                      v211 = v139;
                      _os_log_impl(&dword_182FBE000, v138, OS_LOG_TYPE_DEBUG, "%{public}s Underflow: %{public}s, decrement %llu, result %llu", buf, 0x2Au);
                    }
                  }
                  v47[3] = 0;
                }
                v199[3] = (uint64_t)&v46[a4];
                goto LABEL_69;
              }
              __nwlog_obj();
              *(_DWORD *)buf = 136446210;
              v205 = "_http_safe_append";
              v98 = (void *)_os_log_send_and_compose_impl();
              type[0] = OS_LOG_TYPE_ERROR;
              v178[0] = OS_LOG_TYPE_DEFAULT;
              if (__nwlog_fault((const char *)v98, type, v178))
              {
                if (type[0] == OS_LOG_TYPE_FAULT)
                {
                  v99 = __nwlog_obj();
                  v100 = type[0];
                  if (!os_log_type_enabled(v99, type[0]))
                    goto LABEL_460;
                  *(_DWORD *)buf = 136446210;
                  v205 = "_http_safe_append";
                  v101 = "%{public}s called with null (*remaining >= length)";
                  goto LABEL_459;
                }
                if (v178[0] == OS_LOG_TYPE_DEFAULT)
                {
                  v99 = __nwlog_obj();
                  v100 = type[0];
                  if (!os_log_type_enabled(v99, type[0]))
                    goto LABEL_460;
                  *(_DWORD *)buf = 136446210;
                  v205 = "_http_safe_append";
                  v101 = "%{public}s called with null (*remaining >= length), backtrace limit exceeded";
                  goto LABEL_459;
                }
                v140 = (char *)__nw_create_backtrace_string();
                v99 = __nwlog_obj();
                v100 = type[0];
                v141 = os_log_type_enabled(v99, type[0]);
                if (v140)
                {
                  if (v141)
                  {
                    *(_DWORD *)buf = 136446466;
                    v205 = "_http_safe_append";
                    v206 = 2082;
                    v207 = v140;
                    _os_log_impl(&dword_182FBE000, v99, v100, "%{public}s called with null (*remaining >= length), dumping backtrace:%{public}s", buf, 0x16u);
                  }
                  free(v140);
                  if (!v98)
                  {
LABEL_462:
                    v199[3] = 0;
                    __nwlog_obj();
                    *(_DWORD *)buf = 136446210;
                    v205 = "nw_http_fillout_binary_message_inner";
                    v159 = (char *)_os_log_send_and_compose_impl();
                    type[0] = OS_LOG_TYPE_ERROR;
                    v178[0] = OS_LOG_TYPE_DEFAULT;
                    if ((__nwlog_fault(v159, type, v178) & 1) == 0)
                      goto LABEL_525;
                    if (type[0] == OS_LOG_TYPE_FAULT)
                    {
                      v160 = __nwlog_obj();
                      v161 = type[0];
                      if (!os_log_type_enabled(v160, type[0]))
                        goto LABEL_525;
                      *(_DWORD *)buf = 136446210;
                      v205 = "nw_http_fillout_binary_message_inner";
                      v162 = "%{public}s called with null cursor";
                      goto LABEL_524;
                    }
                    if (v178[0] == OS_LOG_TYPE_DEFAULT)
                    {
                      v160 = __nwlog_obj();
                      v161 = type[0];
                      if (!os_log_type_enabled(v160, type[0]))
                        goto LABEL_525;
                      *(_DWORD *)buf = 136446210;
                      v205 = "nw_http_fillout_binary_message_inner";
                      v162 = "%{public}s called with null cursor, backtrace limit exceeded";
                      goto LABEL_524;
                    }
                    v163 = (char *)__nw_create_backtrace_string();
                    v160 = __nwlog_obj();
                    v161 = type[0];
                    v168 = os_log_type_enabled(v160, type[0]);
                    if (!v163)
                    {
                      if (!v168)
                        goto LABEL_525;
                      *(_DWORD *)buf = 136446210;
                      v205 = "nw_http_fillout_binary_message_inner";
                      v162 = "%{public}s called with null cursor, no backtrace";
                      goto LABEL_524;
                    }
                    if (!v168)
                      goto LABEL_518;
                    goto LABEL_517;
                  }
LABEL_461:
                  free(v98);
                  goto LABEL_462;
                }
                if (v141)
                {
                  *(_DWORD *)buf = 136446210;
                  v205 = "_http_safe_append";
                  v101 = "%{public}s called with null (*remaining >= length), no backtrace";
LABEL_459:
                  _os_log_impl(&dword_182FBE000, v99, v100, v101, buf, 0xCu);
                }
              }
            }
            else
            {
              __nwlog_obj();
              *(_DWORD *)buf = 136446210;
              v205 = "_http_safe_append";
              v98 = (void *)_os_log_send_and_compose_impl();
              type[0] = OS_LOG_TYPE_ERROR;
              v178[0] = OS_LOG_TYPE_DEFAULT;
              if (!__nwlog_fault((const char *)v98, type, v178))
                goto LABEL_460;
              if (type[0] == OS_LOG_TYPE_FAULT)
              {
                v99 = __nwlog_obj();
                v100 = type[0];
                if (!os_log_type_enabled(v99, type[0]))
                  goto LABEL_460;
                *(_DWORD *)buf = 136446210;
                v205 = "_http_safe_append";
                v101 = "%{public}s called with null data";
                goto LABEL_459;
              }
              if (v178[0] == OS_LOG_TYPE_DEFAULT)
              {
                v99 = __nwlog_obj();
                v100 = type[0];
                if (!os_log_type_enabled(v99, type[0]))
                  goto LABEL_460;
                *(_DWORD *)buf = 136446210;
                v205 = "_http_safe_append";
                v101 = "%{public}s called with null data, backtrace limit exceeded";
                goto LABEL_459;
              }
              v136 = (char *)__nw_create_backtrace_string();
              v99 = __nwlog_obj();
              v100 = type[0];
              v137 = os_log_type_enabled(v99, type[0]);
              if (!v136)
              {
                if (!v137)
                  goto LABEL_460;
                *(_DWORD *)buf = 136446210;
                v205 = "_http_safe_append";
                v101 = "%{public}s called with null data, no backtrace";
                goto LABEL_459;
              }
              if (v137)
              {
                *(_DWORD *)buf = 136446466;
                v205 = "_http_safe_append";
                v206 = 2082;
                v207 = v136;
                _os_log_impl(&dword_182FBE000, v99, v100, "%{public}s called with null data, dumping backtrace:%{public}s", buf, 0x16u);
              }
              free(v136);
            }
LABEL_460:
            if (!v98)
              goto LABEL_462;
            goto LABEL_461;
          }
LABEL_439:
          __nwlog_obj();
          *(_DWORD *)buf = 136446210;
          v205 = "nw_http_fillout_binary_message_inner";
          v159 = (char *)_os_log_send_and_compose_impl();
          v178[0] = OS_LOG_TYPE_ERROR;
          v203 = OS_LOG_TYPE_DEFAULT;
          if (!__nwlog_fault(v159, v178, &v203))
            goto LABEL_525;
          if (v178[0] == OS_LOG_TYPE_FAULT)
          {
            v160 = __nwlog_obj();
            v161 = v178[0];
            if (!os_log_type_enabled(v160, v178[0]))
              goto LABEL_525;
            *(_DWORD *)buf = 136446210;
            v205 = "nw_http_fillout_binary_message_inner";
            v162 = "%{public}s called with null cursor";
            goto LABEL_524;
          }
          if (v203 == OS_LOG_TYPE_DEFAULT)
          {
            v160 = __nwlog_obj();
            v161 = v178[0];
            if (!os_log_type_enabled(v160, v178[0]))
              goto LABEL_525;
            *(_DWORD *)buf = 136446210;
            v205 = "nw_http_fillout_binary_message_inner";
            v162 = "%{public}s called with null cursor, backtrace limit exceeded";
            goto LABEL_524;
          }
          v163 = (char *)__nw_create_backtrace_string();
          v160 = __nwlog_obj();
          v161 = v178[0];
          v167 = os_log_type_enabled(v160, v178[0]);
          if (!v163)
          {
            if (!v167)
              goto LABEL_525;
            *(_DWORD *)buf = 136446210;
            v205 = "nw_http_fillout_binary_message_inner";
            v162 = "%{public}s called with null cursor, no backtrace";
            goto LABEL_524;
          }
          if (!v167)
            goto LABEL_518;
          goto LABEL_517;
        }
        *(_QWORD *)type = bswap64(a4 | 0xC000000000000000);
        v42 = 8;
      }
      else
      {
        *(_QWORD *)type = bswap32(a4 | 0x80000000);
        v42 = 4;
      }
    }
    else
    {
      *(_QWORD *)type = bswap32(a4 | 0x4000) >> 16;
      v42 = 2;
    }
  }
  else
  {
    *(_QWORD *)type = a4;
    v42 = 1;
  }
  v43 = (char *)v199[3];
  if (!v43)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v205 = "_http_safe_append";
    v92 = (char *)_os_log_send_and_compose_impl();
    v178[0] = OS_LOG_TYPE_ERROR;
    v203 = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v92, v178, &v203))
      goto LABEL_436;
    if (v178[0] == OS_LOG_TYPE_FAULT)
    {
      v93 = __nwlog_obj();
      v94 = v178[0];
      if (!os_log_type_enabled(v93, v178[0]))
        goto LABEL_436;
      *(_DWORD *)buf = 136446210;
      v205 = "_http_safe_append";
      v95 = "%{public}s called with null buffer";
      goto LABEL_435;
    }
    if (v203 == OS_LOG_TYPE_DEFAULT)
    {
      v93 = __nwlog_obj();
      v94 = v178[0];
      if (!os_log_type_enabled(v93, v178[0]))
        goto LABEL_436;
      *(_DWORD *)buf = 136446210;
      v205 = "_http_safe_append";
      v95 = "%{public}s called with null buffer, backtrace limit exceeded";
      goto LABEL_435;
    }
    v122 = (char *)__nw_create_backtrace_string();
    v93 = __nwlog_obj();
    v94 = v178[0];
    v123 = os_log_type_enabled(v93, v178[0]);
    if (!v122)
    {
      if (!v123)
        goto LABEL_436;
      *(_DWORD *)buf = 136446210;
      v205 = "_http_safe_append";
      v95 = "%{public}s called with null buffer, no backtrace";
      goto LABEL_435;
    }
    if (v123)
    {
      *(_DWORD *)buf = 136446466;
      v205 = "_http_safe_append";
      v206 = 2082;
      v207 = v122;
      _os_log_impl(&dword_182FBE000, v93, v94, "%{public}s called with null buffer, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v122);
LABEL_436:
    if (!v92)
    {
LABEL_438:
      v199[3] = 0;
      goto LABEL_439;
    }
LABEL_437:
    free(v92);
    goto LABEL_438;
  }
  v44 = v195;
  if (v195[3] < v42)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v205 = "_http_safe_append";
    v92 = (char *)_os_log_send_and_compose_impl();
    v178[0] = OS_LOG_TYPE_ERROR;
    v203 = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v92, v178, &v203))
      goto LABEL_436;
    if (v178[0] == OS_LOG_TYPE_FAULT)
    {
      v93 = __nwlog_obj();
      v94 = v178[0];
      if (!os_log_type_enabled(v93, v178[0]))
        goto LABEL_436;
      *(_DWORD *)buf = 136446210;
      v205 = "_http_safe_append";
      v95 = "%{public}s called with null (*remaining >= length)";
      goto LABEL_435;
    }
    if (v203 == OS_LOG_TYPE_DEFAULT)
    {
      v93 = __nwlog_obj();
      v94 = v178[0];
      if (!os_log_type_enabled(v93, v178[0]))
        goto LABEL_436;
      *(_DWORD *)buf = 136446210;
      v205 = "_http_safe_append";
      v95 = "%{public}s called with null (*remaining >= length), backtrace limit exceeded";
      goto LABEL_435;
    }
    v130 = (char *)__nw_create_backtrace_string();
    v93 = __nwlog_obj();
    v94 = v178[0];
    v131 = os_log_type_enabled(v93, v178[0]);
    if (v130)
    {
      if (v131)
      {
        *(_DWORD *)buf = 136446466;
        v205 = "_http_safe_append";
        v206 = 2082;
        v207 = v130;
        _os_log_impl(&dword_182FBE000, v93, v94, "%{public}s called with null (*remaining >= length), dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v130);
      if (!v92)
        goto LABEL_438;
      goto LABEL_437;
    }
    if (v131)
    {
      *(_DWORD *)buf = 136446210;
      v205 = "_http_safe_append";
      v95 = "%{public}s called with null (*remaining >= length), no backtrace";
LABEL_435:
      _os_log_impl(&dword_182FBE000, v93, v94, v95, buf, 0xCu);
      goto LABEL_436;
    }
    goto LABEL_436;
  }
  memcpy(v43, type, v42);
  v45 = v44[3];
  v44[3] = v45 - v42;
  if (v45 < v42)
  {
    if (gLogDatapath)
    {
      v128 = __nwlog_obj();
      if (os_log_type_enabled(v128, OS_LOG_TYPE_DEBUG))
      {
        v129 = v44[3];
        *(_DWORD *)buf = 136446978;
        v205 = "_http_safe_append";
        v206 = 2082;
        v207 = "*remaining";
        v208 = 2048;
        v209 = v42;
        v210 = 2048;
        v211 = v129;
        _os_log_impl(&dword_182FBE000, v128, OS_LOG_TYPE_DEBUG, "%{public}s Underflow: %{public}s, decrement %llu, result %llu", buf, 0x2Au);
      }
    }
    v44[3] = 0;
  }
  v46 = &v43[v42];
  v199[3] = (uint64_t)v46;
  if (a4)
    goto LABEL_63;
LABEL_69:
  v49 = nw_http_metadata_copy_trailer_fields(a1);
  if (!v49)
  {
    v36 = (_BYTE *)v199[3];
    if (v36)
    {
      v37 = v195;
      if (v195[3])
        goto LABEL_74;
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      v205 = "_http_safe_append";
      v132 = (void *)_os_log_send_and_compose_impl();
      type[0] = OS_LOG_TYPE_ERROR;
      v178[0] = OS_LOG_TYPE_DEFAULT;
      if (__nwlog_fault((const char *)v132, type, v178))
      {
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          v133 = __nwlog_obj();
          v134 = type[0];
          if (!os_log_type_enabled(v133, type[0]))
            goto LABEL_508;
          *(_DWORD *)buf = 136446210;
          v205 = "_http_safe_append";
          v135 = "%{public}s called with null (*remaining >= length)";
          goto LABEL_507;
        }
        if (v178[0] == OS_LOG_TYPE_DEFAULT)
        {
          v133 = __nwlog_obj();
          v134 = type[0];
          if (!os_log_type_enabled(v133, type[0]))
            goto LABEL_508;
          *(_DWORD *)buf = 136446210;
          v205 = "_http_safe_append";
          v135 = "%{public}s called with null (*remaining >= length), backtrace limit exceeded";
          goto LABEL_507;
        }
        v151 = (char *)__nw_create_backtrace_string();
        v133 = __nwlog_obj();
        v134 = type[0];
        v152 = os_log_type_enabled(v133, type[0]);
        if (v151)
        {
          if (v152)
          {
            *(_DWORD *)buf = 136446466;
            v205 = "_http_safe_append";
            v206 = 2082;
            v207 = v151;
            _os_log_impl(&dword_182FBE000, v133, v134, "%{public}s called with null (*remaining >= length), dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v151);
          if (!v132)
          {
LABEL_510:
            v199[3] = 0;
            __nwlog_obj();
            *(_DWORD *)buf = 136446210;
            v205 = "nw_http_fillout_binary_message_inner";
            v159 = (char *)_os_log_send_and_compose_impl();
            type[0] = OS_LOG_TYPE_ERROR;
            v178[0] = OS_LOG_TYPE_DEFAULT;
            if (!__nwlog_fault(v159, type, v178))
              goto LABEL_525;
            if (type[0] == OS_LOG_TYPE_FAULT)
            {
              v160 = __nwlog_obj();
              v161 = type[0];
              if (!os_log_type_enabled(v160, type[0]))
                goto LABEL_525;
              *(_DWORD *)buf = 136446210;
              v205 = "nw_http_fillout_binary_message_inner";
              v162 = "%{public}s called with null cursor";
              goto LABEL_524;
            }
            if (v178[0] == OS_LOG_TYPE_DEFAULT)
            {
              v160 = __nwlog_obj();
              v161 = type[0];
              if (!os_log_type_enabled(v160, type[0]))
                goto LABEL_525;
              *(_DWORD *)buf = 136446210;
              v205 = "nw_http_fillout_binary_message_inner";
              v162 = "%{public}s called with null cursor, backtrace limit exceeded";
              goto LABEL_524;
            }
            v163 = (char *)__nw_create_backtrace_string();
            v160 = __nwlog_obj();
            v161 = type[0];
            v175 = os_log_type_enabled(v160, type[0]);
            if (!v163)
            {
              if (!v175)
                goto LABEL_525;
              *(_DWORD *)buf = 136446210;
              v205 = "nw_http_fillout_binary_message_inner";
              v162 = "%{public}s called with null cursor, no backtrace";
              goto LABEL_524;
            }
            if (!v175)
              goto LABEL_518;
            goto LABEL_517;
          }
LABEL_509:
          free(v132);
          goto LABEL_510;
        }
        if (v152)
        {
          *(_DWORD *)buf = 136446210;
          v205 = "_http_safe_append";
          v135 = "%{public}s called with null (*remaining >= length), no backtrace";
LABEL_507:
          _os_log_impl(&dword_182FBE000, v133, v134, v135, buf, 0xCu);
        }
      }
    }
    else
    {
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      v205 = "_http_safe_append";
      v132 = (void *)_os_log_send_and_compose_impl();
      type[0] = OS_LOG_TYPE_ERROR;
      v178[0] = OS_LOG_TYPE_DEFAULT;
      if (!__nwlog_fault((const char *)v132, type, v178))
        goto LABEL_508;
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        v133 = __nwlog_obj();
        v134 = type[0];
        if (!os_log_type_enabled(v133, type[0]))
          goto LABEL_508;
        *(_DWORD *)buf = 136446210;
        v205 = "_http_safe_append";
        v135 = "%{public}s called with null buffer";
        goto LABEL_507;
      }
      if (v178[0] == OS_LOG_TYPE_DEFAULT)
      {
        v133 = __nwlog_obj();
        v134 = type[0];
        if (!os_log_type_enabled(v133, type[0]))
          goto LABEL_508;
        *(_DWORD *)buf = 136446210;
        v205 = "_http_safe_append";
        v135 = "%{public}s called with null buffer, backtrace limit exceeded";
        goto LABEL_507;
      }
      v149 = (char *)__nw_create_backtrace_string();
      v133 = __nwlog_obj();
      v134 = type[0];
      v150 = os_log_type_enabled(v133, type[0]);
      if (!v149)
      {
        if (!v150)
          goto LABEL_508;
        *(_DWORD *)buf = 136446210;
        v205 = "_http_safe_append";
        v135 = "%{public}s called with null buffer, no backtrace";
        goto LABEL_507;
      }
      if (v150)
      {
        *(_DWORD *)buf = 136446466;
        v205 = "_http_safe_append";
        v206 = 2082;
        v207 = v149;
        _os_log_impl(&dword_182FBE000, v133, v134, "%{public}s called with null buffer, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v149);
    }
LABEL_508:
    if (!v132)
      goto LABEL_510;
    goto LABEL_509;
  }
  *(_QWORD *)type = 0;
  v181 = type;
  v182 = 0x2000000000;
  v183 = 0;
  v179[0] = v15;
  v179[1] = 0x40000000;
  v179[2] = ___ZL36nw_http_fillout_binary_message_innerP20nw_protocol_metadatabPKhmPhm_block_invoke_27;
  v179[3] = &unk_1E14A3858;
  v179[4] = type;
  v50 = v49;
  v51 = v179;
  _nw_http_fields_enumerate((uint64_t)v50, v51);

  v52 = *((_QWORD *)v181 + 3);
  if (v52 <= 0x3F)
  {
    *(_QWORD *)v178 = *((_QWORD *)v181 + 3);
    v53 = 1;
    goto LABEL_88;
  }
  if (!(v52 >> 14))
  {
    *(_QWORD *)v178 = bswap32(v52 | 0x4000) >> 16;
    v53 = 2;
    goto LABEL_88;
  }
  if (!(v52 >> 30))
  {
    *(_QWORD *)v178 = bswap32(v52 | 0x80000000);
    v53 = 4;
    goto LABEL_88;
  }
  if (!(v52 >> 62))
  {
    *(_QWORD *)v178 = bswap64(v52 | 0xC000000000000000);
    v53 = 8;
LABEL_88:
    v57 = (char *)v199[3];
    if (v57)
    {
      v58 = v195;
      if (v195[3] >= v53)
      {
        memcpy(v57, v178, v53);
        v59 = v58[3];
        v58[3] = v59 - v53;
        if (v59 < v53)
        {
          if (gLogDatapath)
          {
            v144 = __nwlog_obj();
            if (os_log_type_enabled(v144, OS_LOG_TYPE_DEBUG))
            {
              v145 = v58[3];
              *(_DWORD *)buf = 136446978;
              v205 = "_http_safe_append";
              v206 = 2082;
              v207 = "*remaining";
              v208 = 2048;
              v209 = v53;
              v210 = 2048;
              v211 = v145;
              _os_log_impl(&dword_182FBE000, v144, OS_LOG_TYPE_DEBUG, "%{public}s Underflow: %{public}s, decrement %llu, result %llu", buf, 0x2Au);
            }
          }
          v58[3] = 0;
        }
        v199[3] = (uint64_t)&v57[v53];
LABEL_94:
        v177[0] = v15;
        v177[1] = 0x40000000;
        v177[2] = ___ZL36nw_http_fillout_binary_message_innerP20nw_protocol_metadatabPKhmPhm_block_invoke_29;
        v177[3] = &unk_1E14A38A8;
        v177[4] = &v198;
        v177[5] = &v194;
        v60 = v50;
        v61 = v177;
        _nw_http_fields_enumerate_const_field((uint64_t)v60, v61);

        _Block_object_dispose(type, 8);
        os_release(v60);
        v55 = 1;
        if (!v30)
          goto LABEL_79;
        goto LABEL_78;
      }
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      v205 = "_http_safe_append";
      v104 = (char *)_os_log_send_and_compose_impl();
      v203 = OS_LOG_TYPE_ERROR;
      v202 = 0;
      if (__nwlog_fault(v104, &v203, &v202))
      {
        if (v203 == OS_LOG_TYPE_FAULT)
        {
          v105 = __nwlog_obj();
          v106 = v203;
          if (!os_log_type_enabled(v105, v203))
            goto LABEL_483;
          *(_DWORD *)buf = 136446210;
          v205 = "_http_safe_append";
          v107 = "%{public}s called with null (*remaining >= length)";
          goto LABEL_482;
        }
        if (!v202)
        {
          v105 = __nwlog_obj();
          v106 = v203;
          if (!os_log_type_enabled(v105, v203))
            goto LABEL_483;
          *(_DWORD *)buf = 136446210;
          v205 = "_http_safe_append";
          v107 = "%{public}s called with null (*remaining >= length), backtrace limit exceeded";
          goto LABEL_482;
        }
        v146 = (char *)__nw_create_backtrace_string();
        v105 = __nwlog_obj();
        v106 = v203;
        v147 = os_log_type_enabled(v105, v203);
        if (v146)
        {
          if (v147)
          {
            *(_DWORD *)buf = 136446466;
            v205 = "_http_safe_append";
            v206 = 2082;
            v207 = v146;
            _os_log_impl(&dword_182FBE000, v105, v106, "%{public}s called with null (*remaining >= length), dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v146);
          if (!v104)
            goto LABEL_485;
          goto LABEL_484;
        }
        if (v147)
        {
          *(_DWORD *)buf = 136446210;
          v205 = "_http_safe_append";
          v107 = "%{public}s called with null (*remaining >= length), no backtrace";
LABEL_482:
          _os_log_impl(&dword_182FBE000, v105, v106, v107, buf, 0xCu);
        }
      }
    }
    else
    {
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      v205 = "_http_safe_append";
      v104 = (char *)_os_log_send_and_compose_impl();
      v203 = OS_LOG_TYPE_ERROR;
      v202 = 0;
      if (!__nwlog_fault(v104, &v203, &v202))
        goto LABEL_483;
      if (v203 == OS_LOG_TYPE_FAULT)
      {
        v105 = __nwlog_obj();
        v106 = v203;
        if (!os_log_type_enabled(v105, v203))
          goto LABEL_483;
        *(_DWORD *)buf = 136446210;
        v205 = "_http_safe_append";
        v107 = "%{public}s called with null buffer";
        goto LABEL_482;
      }
      if (!v202)
      {
        v105 = __nwlog_obj();
        v106 = v203;
        if (!os_log_type_enabled(v105, v203))
          goto LABEL_483;
        *(_DWORD *)buf = 136446210;
        v205 = "_http_safe_append";
        v107 = "%{public}s called with null buffer, backtrace limit exceeded";
        goto LABEL_482;
      }
      v142 = (char *)__nw_create_backtrace_string();
      v105 = __nwlog_obj();
      v106 = v203;
      v143 = os_log_type_enabled(v105, v203);
      if (!v142)
      {
        if (!v143)
          goto LABEL_483;
        *(_DWORD *)buf = 136446210;
        v205 = "_http_safe_append";
        v107 = "%{public}s called with null buffer, no backtrace";
        goto LABEL_482;
      }
      if (v143)
      {
        *(_DWORD *)buf = 136446466;
        v205 = "_http_safe_append";
        v206 = 2082;
        v207 = v142;
        _os_log_impl(&dword_182FBE000, v105, v106, "%{public}s called with null buffer, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v142);
    }
LABEL_483:
    if (!v104)
    {
LABEL_485:
      v199[3] = 0;
      goto LABEL_486;
    }
LABEL_484:
    free(v104);
    goto LABEL_485;
  }
  v64 = __nwlog_obj();
  os_log_type_enabled(v64, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446466;
  v205 = "_http_vle_encode";
  v206 = 2048;
  v207 = (const char *)v52;
  v65 = (void *)_os_log_send_and_compose_impl();
  result = __nwlog_abort((uint64_t)v65);
  if (!result)
  {
    free(v65);
    if (v199[3])
      goto LABEL_94;
LABEL_486:
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v205 = "nw_http_fillout_binary_message_inner";
    v169 = (char *)_os_log_send_and_compose_impl();
    v203 = OS_LOG_TYPE_ERROR;
    v202 = 0;
    if (__nwlog_fault(v169, &v203, &v202))
    {
      if (v203 == OS_LOG_TYPE_FAULT)
      {
        v170 = __nwlog_obj();
        v171 = v203;
        if (os_log_type_enabled(v170, v203))
        {
          *(_DWORD *)buf = 136446210;
          v205 = "nw_http_fillout_binary_message_inner";
          v172 = "%{public}s called with null cursor";
LABEL_499:
          _os_log_impl(&dword_182FBE000, v170, v171, v172, buf, 0xCu);
        }
      }
      else if (v202)
      {
        v173 = (char *)__nw_create_backtrace_string();
        v170 = __nwlog_obj();
        v171 = v203;
        v174 = os_log_type_enabled(v170, v203);
        if (v173)
        {
          if (v174)
          {
            *(_DWORD *)buf = 136446466;
            v205 = "nw_http_fillout_binary_message_inner";
            v206 = 2082;
            v207 = v173;
            _os_log_impl(&dword_182FBE000, v170, v171, "%{public}s called with null cursor, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v173);
          goto LABEL_500;
        }
        if (v174)
        {
          *(_DWORD *)buf = 136446210;
          v205 = "nw_http_fillout_binary_message_inner";
          v172 = "%{public}s called with null cursor, no backtrace";
          goto LABEL_499;
        }
      }
      else
      {
        v170 = __nwlog_obj();
        v171 = v203;
        if (os_log_type_enabled(v170, v203))
        {
          *(_DWORD *)buf = 136446210;
          v205 = "nw_http_fillout_binary_message_inner";
          v172 = "%{public}s called with null cursor, backtrace limit exceeded";
          goto LABEL_499;
        }
      }
    }
LABEL_500:
    if (v169)
      free(v169);
    _Block_object_dispose(type, 8);
    os_release(v50);
    goto LABEL_527;
  }
LABEL_529:
  __break(1u);
  return result;
}

void ___ZL36nw_http_fillout_binary_message_innerP20nw_protocol_metadatabPKhmPhm_block_invoke(uint64_t a1, char *__s)
{
  size_t v4;
  size_t v5;
  size_t v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  char *v19;
  NSObject *v20;
  os_log_type_t v21;
  const char *v22;
  char *v23;
  NSObject *v24;
  os_log_type_t v25;
  const char *v26;
  char *v27;
  NSObject *v28;
  os_log_type_t v29;
  const char *v30;
  char *v31;
  _BOOL4 v32;
  char *v33;
  _BOOL4 v34;
  char *backtrace_string;
  _BOOL4 v36;
  const char *v37;
  NSObject *v38;
  uint64_t v39;
  _BOOL4 v40;
  char *v41;
  _BOOL4 v42;
  const char *v43;
  NSObject *v44;
  uint64_t v45;
  _BOOL4 v46;
  unint64_t __src;
  char v48;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v51;
  __int16 v52;
  const char *v53;
  __int16 v54;
  size_t v55;
  __int16 v56;
  uint64_t v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  if (!__s)
  {
    v5 = 0;
    goto LABEL_6;
  }
  v4 = strlen(__s);
  v5 = v4;
  if (v4 <= 0x3F)
  {
LABEL_6:
    __src = v5;
    v6 = 1;
    goto LABEL_7;
  }
  if (!(v4 >> 14))
  {
    __src = bswap32(v4 | 0x4000) >> 16;
    v6 = 2;
    goto LABEL_7;
  }
  if (!(v4 >> 30))
  {
    __src = bswap32(v4 | 0x80000000);
    v6 = 4;
    goto LABEL_7;
  }
  if (!(v4 >> 62))
  {
    __src = bswap64(v4 | 0xC000000000000000);
    v6 = 8;
LABEL_7:
    v8 = *(_QWORD *)(a1 + 32);
    v7 = (_QWORD *)(a1 + 32);
    v9 = *(char **)(*(_QWORD *)(v8 + 8) + 24);
    v10 = v7 + 1;
    if (v9)
    {
      v11 = *(_QWORD *)(v7[1] + 8);
      if (*(_QWORD *)(v11 + 24) >= v6)
      {
        memcpy(v9, &__src, v6);
        v12 = *(_QWORD *)(v11 + 24);
        *(_QWORD *)(v11 + 24) = v12 - v6;
        if (v12 < v6)
        {
          if (gLogDatapath)
          {
            v38 = __nwlog_obj();
            if (os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG))
            {
              v39 = *(_QWORD *)(v11 + 24);
              *(_DWORD *)buf = 136446978;
              v51 = "_http_safe_append";
              v52 = 2082;
              v53 = "*remaining";
              v54 = 2048;
              v55 = v6;
              v56 = 2048;
              v57 = v39;
              _os_log_impl(&dword_182FBE000, v38, OS_LOG_TYPE_DEBUG, "%{public}s Underflow: %{public}s, decrement %llu, result %llu", buf, 0x2Au);
            }
          }
          *(_QWORD *)(v11 + 24) = 0;
        }
        v13 = &v9[v6];
        goto LABEL_13;
      }
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      v51 = "_http_safe_append";
      v23 = (char *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      v48 = 0;
      if (!__nwlog_fault(v23, &type, &v48))
        goto LABEL_112;
      if (type == OS_LOG_TYPE_FAULT)
      {
        v24 = __nwlog_obj();
        v25 = type;
        if (os_log_type_enabled(v24, type))
        {
          *(_DWORD *)buf = 136446210;
          v51 = "_http_safe_append";
          v26 = "%{public}s called with null (*remaining >= length)";
          goto LABEL_111;
        }
        goto LABEL_112;
      }
      if (!v48)
      {
        v24 = __nwlog_obj();
        v25 = type;
        if (os_log_type_enabled(v24, type))
        {
          *(_DWORD *)buf = 136446210;
          v51 = "_http_safe_append";
          v26 = "%{public}s called with null (*remaining >= length), backtrace limit exceeded";
          goto LABEL_111;
        }
        goto LABEL_112;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v24 = __nwlog_obj();
      v25 = type;
      v40 = os_log_type_enabled(v24, type);
      if (!backtrace_string)
      {
        if (v40)
        {
          *(_DWORD *)buf = 136446210;
          v51 = "_http_safe_append";
          v26 = "%{public}s called with null (*remaining >= length), no backtrace";
          goto LABEL_111;
        }
        goto LABEL_112;
      }
      if (v40)
      {
        *(_DWORD *)buf = 136446466;
        v51 = "_http_safe_append";
        v52 = 2082;
        v53 = backtrace_string;
        v37 = "%{public}s called with null (*remaining >= length), dumping backtrace:%{public}s";
        goto LABEL_74;
      }
    }
    else
    {
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      v51 = "_http_safe_append";
      v23 = (char *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      v48 = 0;
      if (!__nwlog_fault(v23, &type, &v48))
        goto LABEL_112;
      if (type == OS_LOG_TYPE_FAULT)
      {
        v24 = __nwlog_obj();
        v25 = type;
        if (os_log_type_enabled(v24, type))
        {
          *(_DWORD *)buf = 136446210;
          v51 = "_http_safe_append";
          v26 = "%{public}s called with null buffer";
LABEL_111:
          _os_log_impl(&dword_182FBE000, v24, v25, v26, buf, 0xCu);
        }
LABEL_112:
        if (v23)
          free(v23);
        v13 = 0;
        goto LABEL_13;
      }
      if (!v48)
      {
        v24 = __nwlog_obj();
        v25 = type;
        if (os_log_type_enabled(v24, type))
        {
          *(_DWORD *)buf = 136446210;
          v51 = "_http_safe_append";
          v26 = "%{public}s called with null buffer, backtrace limit exceeded";
          goto LABEL_111;
        }
        goto LABEL_112;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v24 = __nwlog_obj();
      v25 = type;
      v36 = os_log_type_enabled(v24, type);
      if (!backtrace_string)
      {
        if (v36)
        {
          *(_DWORD *)buf = 136446210;
          v51 = "_http_safe_append";
          v26 = "%{public}s called with null buffer, no backtrace";
          goto LABEL_111;
        }
        goto LABEL_112;
      }
      if (v36)
      {
        *(_DWORD *)buf = 136446466;
        v51 = "_http_safe_append";
        v52 = 2082;
        v53 = backtrace_string;
        v37 = "%{public}s called with null buffer, dumping backtrace:%{public}s";
LABEL_74:
        _os_log_impl(&dword_182FBE000, v24, v25, v37, buf, 0x16u);
      }
    }
    free(backtrace_string);
    goto LABEL_112;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446466;
  v51 = "_http_vle_encode";
  v52 = 2048;
  v53 = (const char *)v5;
  v17 = (void *)_os_log_send_and_compose_impl();
  if (__nwlog_abort((uint64_t)v17))
  {
    __break(1u);
    return;
  }
  free(v17);
  v18 = *(_QWORD *)(a1 + 32);
  v7 = (_QWORD *)(a1 + 32);
  v13 = *(char **)(*(_QWORD *)(v18 + 8) + 24);
  v10 = v7 + 1;
LABEL_13:
  *(_QWORD *)(*(_QWORD *)(*v7 + 8) + 24) = v13;
  v14 = *(char **)(*(_QWORD *)(*v7 + 8) + 24);
  if (!v14)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v51 = "nw_http_fillout_binary_message_inner_block_invoke";
    v19 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v48 = 0;
    if (!__nwlog_fault(v19, &type, &v48))
      goto LABEL_101;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v20 = __nwlog_obj();
      v21 = type;
      if (!os_log_type_enabled(v20, type))
        goto LABEL_101;
      *(_DWORD *)buf = 136446210;
      v51 = "nw_http_fillout_binary_message_inner_block_invoke";
      v22 = "%{public}s called with null cursor";
    }
    else
    {
      if (!v48)
      {
        v20 = __nwlog_obj();
        v21 = type;
        if (!os_log_type_enabled(v20, type))
          goto LABEL_101;
        *(_DWORD *)buf = 136446210;
        v51 = "nw_http_fillout_binary_message_inner_block_invoke";
        v22 = "%{public}s called with null cursor, backtrace limit exceeded";
        goto LABEL_100;
      }
      v31 = (char *)__nw_create_backtrace_string();
      v20 = __nwlog_obj();
      v21 = type;
      v32 = os_log_type_enabled(v20, type);
      if (v31)
      {
        if (v32)
        {
          *(_DWORD *)buf = 136446466;
          v51 = "nw_http_fillout_binary_message_inner_block_invoke";
          v52 = 2082;
          v53 = v31;
          _os_log_impl(&dword_182FBE000, v20, v21, "%{public}s called with null cursor, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v31);
        if (v19)
          goto LABEL_102;
        return;
      }
      if (!v32)
        goto LABEL_101;
      *(_DWORD *)buf = 136446210;
      v51 = "nw_http_fillout_binary_message_inner_block_invoke";
      v22 = "%{public}s called with null cursor, no backtrace";
    }
LABEL_100:
    _os_log_impl(&dword_182FBE000, v20, v21, v22, buf, 0xCu);
    goto LABEL_101;
  }
  if (v5)
  {
    if (__s)
    {
      v15 = *(_QWORD *)(*v10 + 8);
      if (*(_QWORD *)(v15 + 24) >= v5)
      {
        memcpy(v14, __s, v5);
        v16 = *(_QWORD *)(v15 + 24);
        *(_QWORD *)(v15 + 24) = v16 - v5;
        if (v16 < v5)
        {
          if (gLogDatapath)
          {
            v44 = __nwlog_obj();
            if (os_log_type_enabled(v44, OS_LOG_TYPE_DEBUG))
            {
              v45 = *(_QWORD *)(v15 + 24);
              *(_DWORD *)buf = 136446978;
              v51 = "_http_safe_append";
              v52 = 2082;
              v53 = "*remaining";
              v54 = 2048;
              v55 = v5;
              v56 = 2048;
              v57 = v45;
              _os_log_impl(&dword_182FBE000, v44, OS_LOG_TYPE_DEBUG, "%{public}s Underflow: %{public}s, decrement %llu, result %llu", buf, 0x2Au);
            }
          }
          *(_QWORD *)(v15 + 24) = 0;
        }
        v14 += v5;
        goto LABEL_21;
      }
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      v51 = "_http_safe_append";
      v27 = (char *)_os_log_send_and_compose_impl();
      LOBYTE(__src) = 16;
      type = OS_LOG_TYPE_DEFAULT;
      if (!__nwlog_fault(v27, &__src, &type))
        goto LABEL_120;
      if (__src == 17)
      {
        v28 = __nwlog_obj();
        v29 = __src;
        if (os_log_type_enabled(v28, (os_log_type_t)__src))
        {
          *(_DWORD *)buf = 136446210;
          v51 = "_http_safe_append";
          v30 = "%{public}s called with null (*remaining >= length)";
          goto LABEL_119;
        }
        goto LABEL_120;
      }
      if (type == OS_LOG_TYPE_DEFAULT)
      {
        v28 = __nwlog_obj();
        v29 = __src;
        if (os_log_type_enabled(v28, (os_log_type_t)__src))
        {
          *(_DWORD *)buf = 136446210;
          v51 = "_http_safe_append";
          v30 = "%{public}s called with null (*remaining >= length), backtrace limit exceeded";
          goto LABEL_119;
        }
        goto LABEL_120;
      }
      v41 = (char *)__nw_create_backtrace_string();
      v28 = __nwlog_obj();
      v29 = __src;
      v46 = os_log_type_enabled(v28, (os_log_type_t)__src);
      if (!v41)
      {
        if (v46)
        {
          *(_DWORD *)buf = 136446210;
          v51 = "_http_safe_append";
          v30 = "%{public}s called with null (*remaining >= length), no backtrace";
          goto LABEL_119;
        }
        goto LABEL_120;
      }
      if (v46)
      {
        *(_DWORD *)buf = 136446466;
        v51 = "_http_safe_append";
        v52 = 2082;
        v53 = v41;
        v43 = "%{public}s called with null (*remaining >= length), dumping backtrace:%{public}s";
        goto LABEL_86;
      }
    }
    else
    {
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      v51 = "_http_safe_append";
      v27 = (char *)_os_log_send_and_compose_impl();
      LOBYTE(__src) = 16;
      type = OS_LOG_TYPE_DEFAULT;
      if (!__nwlog_fault(v27, &__src, &type))
        goto LABEL_120;
      if (__src == 17)
      {
        v28 = __nwlog_obj();
        v29 = __src;
        if (os_log_type_enabled(v28, (os_log_type_t)__src))
        {
          *(_DWORD *)buf = 136446210;
          v51 = "_http_safe_append";
          v30 = "%{public}s called with null data";
LABEL_119:
          _os_log_impl(&dword_182FBE000, v28, v29, v30, buf, 0xCu);
        }
LABEL_120:
        if (v27)
          free(v27);
        v14 = 0;
        goto LABEL_21;
      }
      if (type == OS_LOG_TYPE_DEFAULT)
      {
        v28 = __nwlog_obj();
        v29 = __src;
        if (os_log_type_enabled(v28, (os_log_type_t)__src))
        {
          *(_DWORD *)buf = 136446210;
          v51 = "_http_safe_append";
          v30 = "%{public}s called with null data, backtrace limit exceeded";
          goto LABEL_119;
        }
        goto LABEL_120;
      }
      v41 = (char *)__nw_create_backtrace_string();
      v28 = __nwlog_obj();
      v29 = __src;
      v42 = os_log_type_enabled(v28, (os_log_type_t)__src);
      if (!v41)
      {
        if (v42)
        {
          *(_DWORD *)buf = 136446210;
          v51 = "_http_safe_append";
          v30 = "%{public}s called with null data, no backtrace";
          goto LABEL_119;
        }
        goto LABEL_120;
      }
      if (v42)
      {
        *(_DWORD *)buf = 136446466;
        v51 = "_http_safe_append";
        v52 = 2082;
        v53 = v41;
        v43 = "%{public}s called with null data, dumping backtrace:%{public}s";
LABEL_86:
        _os_log_impl(&dword_182FBE000, v28, v29, v43, buf, 0x16u);
      }
    }
    free(v41);
    goto LABEL_120;
  }
LABEL_21:
  *(_QWORD *)(*(_QWORD *)(*v7 + 8) + 24) = v14;
  if (*(_QWORD *)(*(_QWORD *)(*v7 + 8) + 24))
    return;
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v51 = "nw_http_fillout_binary_message_inner_block_invoke";
  v19 = (char *)_os_log_send_and_compose_impl();
  LOBYTE(__src) = 16;
  type = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v19, &__src, &type))
  {
    if (__src == 17)
    {
      v20 = __nwlog_obj();
      v21 = __src;
      if (!os_log_type_enabled(v20, (os_log_type_t)__src))
        goto LABEL_101;
      *(_DWORD *)buf = 136446210;
      v51 = "nw_http_fillout_binary_message_inner_block_invoke";
      v22 = "%{public}s called with null cursor";
      goto LABEL_100;
    }
    if (type == OS_LOG_TYPE_DEFAULT)
    {
      v20 = __nwlog_obj();
      v21 = __src;
      if (!os_log_type_enabled(v20, (os_log_type_t)__src))
        goto LABEL_101;
      *(_DWORD *)buf = 136446210;
      v51 = "nw_http_fillout_binary_message_inner_block_invoke";
      v22 = "%{public}s called with null cursor, backtrace limit exceeded";
      goto LABEL_100;
    }
    v33 = (char *)__nw_create_backtrace_string();
    v20 = __nwlog_obj();
    v21 = __src;
    v34 = os_log_type_enabled(v20, (os_log_type_t)__src);
    if (!v33)
    {
      if (!v34)
        goto LABEL_101;
      *(_DWORD *)buf = 136446210;
      v51 = "nw_http_fillout_binary_message_inner_block_invoke";
      v22 = "%{public}s called with null cursor, no backtrace";
      goto LABEL_100;
    }
    if (v34)
    {
      *(_DWORD *)buf = 136446466;
      v51 = "nw_http_fillout_binary_message_inner_block_invoke";
      v52 = 2082;
      v53 = v33;
      _os_log_impl(&dword_182FBE000, v20, v21, "%{public}s called with null cursor, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v33);
  }
LABEL_101:
  if (v19)
LABEL_102:
    free(v19);
}

void ___ZL36nw_http_fillout_binary_message_innerP20nw_protocol_metadatabPKhmPhm_block_invoke_16(uint64_t a1, char *__s)
{
  size_t v4;
  size_t v5;
  size_t v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  char *v19;
  NSObject *v20;
  os_log_type_t v21;
  const char *v22;
  char *v23;
  NSObject *v24;
  os_log_type_t v25;
  const char *v26;
  char *v27;
  NSObject *v28;
  os_log_type_t v29;
  const char *v30;
  char *v31;
  _BOOL4 v32;
  char *v33;
  _BOOL4 v34;
  char *backtrace_string;
  _BOOL4 v36;
  const char *v37;
  NSObject *v38;
  uint64_t v39;
  _BOOL4 v40;
  char *v41;
  _BOOL4 v42;
  const char *v43;
  NSObject *v44;
  uint64_t v45;
  _BOOL4 v46;
  unint64_t __src;
  char v48;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v51;
  __int16 v52;
  const char *v53;
  __int16 v54;
  size_t v55;
  __int16 v56;
  uint64_t v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  if (!__s)
  {
    v5 = 0;
    goto LABEL_6;
  }
  v4 = strlen(__s);
  v5 = v4;
  if (v4 <= 0x3F)
  {
LABEL_6:
    __src = v5;
    v6 = 1;
    goto LABEL_7;
  }
  if (!(v4 >> 14))
  {
    __src = bswap32(v4 | 0x4000) >> 16;
    v6 = 2;
    goto LABEL_7;
  }
  if (!(v4 >> 30))
  {
    __src = bswap32(v4 | 0x80000000);
    v6 = 4;
    goto LABEL_7;
  }
  if (!(v4 >> 62))
  {
    __src = bswap64(v4 | 0xC000000000000000);
    v6 = 8;
LABEL_7:
    v8 = *(_QWORD *)(a1 + 32);
    v7 = (_QWORD *)(a1 + 32);
    v9 = *(char **)(*(_QWORD *)(v8 + 8) + 24);
    v10 = v7 + 1;
    if (v9)
    {
      v11 = *(_QWORD *)(v7[1] + 8);
      if (*(_QWORD *)(v11 + 24) >= v6)
      {
        memcpy(v9, &__src, v6);
        v12 = *(_QWORD *)(v11 + 24);
        *(_QWORD *)(v11 + 24) = v12 - v6;
        if (v12 < v6)
        {
          if (gLogDatapath)
          {
            v38 = __nwlog_obj();
            if (os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG))
            {
              v39 = *(_QWORD *)(v11 + 24);
              *(_DWORD *)buf = 136446978;
              v51 = "_http_safe_append";
              v52 = 2082;
              v53 = "*remaining";
              v54 = 2048;
              v55 = v6;
              v56 = 2048;
              v57 = v39;
              _os_log_impl(&dword_182FBE000, v38, OS_LOG_TYPE_DEBUG, "%{public}s Underflow: %{public}s, decrement %llu, result %llu", buf, 0x2Au);
            }
          }
          *(_QWORD *)(v11 + 24) = 0;
        }
        v13 = &v9[v6];
        goto LABEL_13;
      }
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      v51 = "_http_safe_append";
      v23 = (char *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      v48 = 0;
      if (!__nwlog_fault(v23, &type, &v48))
        goto LABEL_112;
      if (type == OS_LOG_TYPE_FAULT)
      {
        v24 = __nwlog_obj();
        v25 = type;
        if (os_log_type_enabled(v24, type))
        {
          *(_DWORD *)buf = 136446210;
          v51 = "_http_safe_append";
          v26 = "%{public}s called with null (*remaining >= length)";
          goto LABEL_111;
        }
        goto LABEL_112;
      }
      if (!v48)
      {
        v24 = __nwlog_obj();
        v25 = type;
        if (os_log_type_enabled(v24, type))
        {
          *(_DWORD *)buf = 136446210;
          v51 = "_http_safe_append";
          v26 = "%{public}s called with null (*remaining >= length), backtrace limit exceeded";
          goto LABEL_111;
        }
        goto LABEL_112;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v24 = __nwlog_obj();
      v25 = type;
      v40 = os_log_type_enabled(v24, type);
      if (!backtrace_string)
      {
        if (v40)
        {
          *(_DWORD *)buf = 136446210;
          v51 = "_http_safe_append";
          v26 = "%{public}s called with null (*remaining >= length), no backtrace";
          goto LABEL_111;
        }
        goto LABEL_112;
      }
      if (v40)
      {
        *(_DWORD *)buf = 136446466;
        v51 = "_http_safe_append";
        v52 = 2082;
        v53 = backtrace_string;
        v37 = "%{public}s called with null (*remaining >= length), dumping backtrace:%{public}s";
        goto LABEL_74;
      }
    }
    else
    {
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      v51 = "_http_safe_append";
      v23 = (char *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      v48 = 0;
      if (!__nwlog_fault(v23, &type, &v48))
        goto LABEL_112;
      if (type == OS_LOG_TYPE_FAULT)
      {
        v24 = __nwlog_obj();
        v25 = type;
        if (os_log_type_enabled(v24, type))
        {
          *(_DWORD *)buf = 136446210;
          v51 = "_http_safe_append";
          v26 = "%{public}s called with null buffer";
LABEL_111:
          _os_log_impl(&dword_182FBE000, v24, v25, v26, buf, 0xCu);
        }
LABEL_112:
        if (v23)
          free(v23);
        v13 = 0;
        goto LABEL_13;
      }
      if (!v48)
      {
        v24 = __nwlog_obj();
        v25 = type;
        if (os_log_type_enabled(v24, type))
        {
          *(_DWORD *)buf = 136446210;
          v51 = "_http_safe_append";
          v26 = "%{public}s called with null buffer, backtrace limit exceeded";
          goto LABEL_111;
        }
        goto LABEL_112;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v24 = __nwlog_obj();
      v25 = type;
      v36 = os_log_type_enabled(v24, type);
      if (!backtrace_string)
      {
        if (v36)
        {
          *(_DWORD *)buf = 136446210;
          v51 = "_http_safe_append";
          v26 = "%{public}s called with null buffer, no backtrace";
          goto LABEL_111;
        }
        goto LABEL_112;
      }
      if (v36)
      {
        *(_DWORD *)buf = 136446466;
        v51 = "_http_safe_append";
        v52 = 2082;
        v53 = backtrace_string;
        v37 = "%{public}s called with null buffer, dumping backtrace:%{public}s";
LABEL_74:
        _os_log_impl(&dword_182FBE000, v24, v25, v37, buf, 0x16u);
      }
    }
    free(backtrace_string);
    goto LABEL_112;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446466;
  v51 = "_http_vle_encode";
  v52 = 2048;
  v53 = (const char *)v5;
  v17 = (void *)_os_log_send_and_compose_impl();
  if (__nwlog_abort((uint64_t)v17))
  {
    __break(1u);
    return;
  }
  free(v17);
  v18 = *(_QWORD *)(a1 + 32);
  v7 = (_QWORD *)(a1 + 32);
  v13 = *(char **)(*(_QWORD *)(v18 + 8) + 24);
  v10 = v7 + 1;
LABEL_13:
  *(_QWORD *)(*(_QWORD *)(*v7 + 8) + 24) = v13;
  v14 = *(char **)(*(_QWORD *)(*v7 + 8) + 24);
  if (!v14)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v51 = "nw_http_fillout_binary_message_inner_block_invoke";
    v19 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v48 = 0;
    if (!__nwlog_fault(v19, &type, &v48))
      goto LABEL_101;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v20 = __nwlog_obj();
      v21 = type;
      if (!os_log_type_enabled(v20, type))
        goto LABEL_101;
      *(_DWORD *)buf = 136446210;
      v51 = "nw_http_fillout_binary_message_inner_block_invoke";
      v22 = "%{public}s called with null cursor";
    }
    else
    {
      if (!v48)
      {
        v20 = __nwlog_obj();
        v21 = type;
        if (!os_log_type_enabled(v20, type))
          goto LABEL_101;
        *(_DWORD *)buf = 136446210;
        v51 = "nw_http_fillout_binary_message_inner_block_invoke";
        v22 = "%{public}s called with null cursor, backtrace limit exceeded";
        goto LABEL_100;
      }
      v31 = (char *)__nw_create_backtrace_string();
      v20 = __nwlog_obj();
      v21 = type;
      v32 = os_log_type_enabled(v20, type);
      if (v31)
      {
        if (v32)
        {
          *(_DWORD *)buf = 136446466;
          v51 = "nw_http_fillout_binary_message_inner_block_invoke";
          v52 = 2082;
          v53 = v31;
          _os_log_impl(&dword_182FBE000, v20, v21, "%{public}s called with null cursor, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v31);
        if (v19)
          goto LABEL_102;
        return;
      }
      if (!v32)
        goto LABEL_101;
      *(_DWORD *)buf = 136446210;
      v51 = "nw_http_fillout_binary_message_inner_block_invoke";
      v22 = "%{public}s called with null cursor, no backtrace";
    }
LABEL_100:
    _os_log_impl(&dword_182FBE000, v20, v21, v22, buf, 0xCu);
    goto LABEL_101;
  }
  if (v5)
  {
    if (__s)
    {
      v15 = *(_QWORD *)(*v10 + 8);
      if (*(_QWORD *)(v15 + 24) >= v5)
      {
        memcpy(v14, __s, v5);
        v16 = *(_QWORD *)(v15 + 24);
        *(_QWORD *)(v15 + 24) = v16 - v5;
        if (v16 < v5)
        {
          if (gLogDatapath)
          {
            v44 = __nwlog_obj();
            if (os_log_type_enabled(v44, OS_LOG_TYPE_DEBUG))
            {
              v45 = *(_QWORD *)(v15 + 24);
              *(_DWORD *)buf = 136446978;
              v51 = "_http_safe_append";
              v52 = 2082;
              v53 = "*remaining";
              v54 = 2048;
              v55 = v5;
              v56 = 2048;
              v57 = v45;
              _os_log_impl(&dword_182FBE000, v44, OS_LOG_TYPE_DEBUG, "%{public}s Underflow: %{public}s, decrement %llu, result %llu", buf, 0x2Au);
            }
          }
          *(_QWORD *)(v15 + 24) = 0;
        }
        v14 += v5;
        goto LABEL_21;
      }
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      v51 = "_http_safe_append";
      v27 = (char *)_os_log_send_and_compose_impl();
      LOBYTE(__src) = 16;
      type = OS_LOG_TYPE_DEFAULT;
      if (!__nwlog_fault(v27, &__src, &type))
        goto LABEL_120;
      if (__src == 17)
      {
        v28 = __nwlog_obj();
        v29 = __src;
        if (os_log_type_enabled(v28, (os_log_type_t)__src))
        {
          *(_DWORD *)buf = 136446210;
          v51 = "_http_safe_append";
          v30 = "%{public}s called with null (*remaining >= length)";
          goto LABEL_119;
        }
        goto LABEL_120;
      }
      if (type == OS_LOG_TYPE_DEFAULT)
      {
        v28 = __nwlog_obj();
        v29 = __src;
        if (os_log_type_enabled(v28, (os_log_type_t)__src))
        {
          *(_DWORD *)buf = 136446210;
          v51 = "_http_safe_append";
          v30 = "%{public}s called with null (*remaining >= length), backtrace limit exceeded";
          goto LABEL_119;
        }
        goto LABEL_120;
      }
      v41 = (char *)__nw_create_backtrace_string();
      v28 = __nwlog_obj();
      v29 = __src;
      v46 = os_log_type_enabled(v28, (os_log_type_t)__src);
      if (!v41)
      {
        if (v46)
        {
          *(_DWORD *)buf = 136446210;
          v51 = "_http_safe_append";
          v30 = "%{public}s called with null (*remaining >= length), no backtrace";
          goto LABEL_119;
        }
        goto LABEL_120;
      }
      if (v46)
      {
        *(_DWORD *)buf = 136446466;
        v51 = "_http_safe_append";
        v52 = 2082;
        v53 = v41;
        v43 = "%{public}s called with null (*remaining >= length), dumping backtrace:%{public}s";
        goto LABEL_86;
      }
    }
    else
    {
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      v51 = "_http_safe_append";
      v27 = (char *)_os_log_send_and_compose_impl();
      LOBYTE(__src) = 16;
      type = OS_LOG_TYPE_DEFAULT;
      if (!__nwlog_fault(v27, &__src, &type))
        goto LABEL_120;
      if (__src == 17)
      {
        v28 = __nwlog_obj();
        v29 = __src;
        if (os_log_type_enabled(v28, (os_log_type_t)__src))
        {
          *(_DWORD *)buf = 136446210;
          v51 = "_http_safe_append";
          v30 = "%{public}s called with null data";
LABEL_119:
          _os_log_impl(&dword_182FBE000, v28, v29, v30, buf, 0xCu);
        }
LABEL_120:
        if (v27)
          free(v27);
        v14 = 0;
        goto LABEL_21;
      }
      if (type == OS_LOG_TYPE_DEFAULT)
      {
        v28 = __nwlog_obj();
        v29 = __src;
        if (os_log_type_enabled(v28, (os_log_type_t)__src))
        {
          *(_DWORD *)buf = 136446210;
          v51 = "_http_safe_append";
          v30 = "%{public}s called with null data, backtrace limit exceeded";
          goto LABEL_119;
        }
        goto LABEL_120;
      }
      v41 = (char *)__nw_create_backtrace_string();
      v28 = __nwlog_obj();
      v29 = __src;
      v42 = os_log_type_enabled(v28, (os_log_type_t)__src);
      if (!v41)
      {
        if (v42)
        {
          *(_DWORD *)buf = 136446210;
          v51 = "_http_safe_append";
          v30 = "%{public}s called with null data, no backtrace";
          goto LABEL_119;
        }
        goto LABEL_120;
      }
      if (v42)
      {
        *(_DWORD *)buf = 136446466;
        v51 = "_http_safe_append";
        v52 = 2082;
        v53 = v41;
        v43 = "%{public}s called with null data, dumping backtrace:%{public}s";
LABEL_86:
        _os_log_impl(&dword_182FBE000, v28, v29, v43, buf, 0x16u);
      }
    }
    free(v41);
    goto LABEL_120;
  }
LABEL_21:
  *(_QWORD *)(*(_QWORD *)(*v7 + 8) + 24) = v14;
  if (*(_QWORD *)(*(_QWORD *)(*v7 + 8) + 24))
    return;
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v51 = "nw_http_fillout_binary_message_inner_block_invoke";
  v19 = (char *)_os_log_send_and_compose_impl();
  LOBYTE(__src) = 16;
  type = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v19, &__src, &type))
  {
    if (__src == 17)
    {
      v20 = __nwlog_obj();
      v21 = __src;
      if (!os_log_type_enabled(v20, (os_log_type_t)__src))
        goto LABEL_101;
      *(_DWORD *)buf = 136446210;
      v51 = "nw_http_fillout_binary_message_inner_block_invoke";
      v22 = "%{public}s called with null cursor";
      goto LABEL_100;
    }
    if (type == OS_LOG_TYPE_DEFAULT)
    {
      v20 = __nwlog_obj();
      v21 = __src;
      if (!os_log_type_enabled(v20, (os_log_type_t)__src))
        goto LABEL_101;
      *(_DWORD *)buf = 136446210;
      v51 = "nw_http_fillout_binary_message_inner_block_invoke";
      v22 = "%{public}s called with null cursor, backtrace limit exceeded";
      goto LABEL_100;
    }
    v33 = (char *)__nw_create_backtrace_string();
    v20 = __nwlog_obj();
    v21 = __src;
    v34 = os_log_type_enabled(v20, (os_log_type_t)__src);
    if (!v33)
    {
      if (!v34)
        goto LABEL_101;
      *(_DWORD *)buf = 136446210;
      v51 = "nw_http_fillout_binary_message_inner_block_invoke";
      v22 = "%{public}s called with null cursor, no backtrace";
      goto LABEL_100;
    }
    if (v34)
    {
      *(_DWORD *)buf = 136446466;
      v51 = "nw_http_fillout_binary_message_inner_block_invoke";
      v52 = 2082;
      v53 = v33;
      _os_log_impl(&dword_182FBE000, v20, v21, "%{public}s called with null cursor, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v33);
  }
LABEL_101:
  if (v19)
LABEL_102:
    free(v19);
}

void ___ZL36nw_http_fillout_binary_message_innerP20nw_protocol_metadatabPKhmPhm_block_invoke_18(uint64_t a1, char *__s)
{
  size_t v4;
  size_t v5;
  size_t v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  char *v19;
  NSObject *v20;
  os_log_type_t v21;
  const char *v22;
  char *v23;
  NSObject *v24;
  os_log_type_t v25;
  const char *v26;
  char *v27;
  NSObject *v28;
  os_log_type_t v29;
  const char *v30;
  char *v31;
  _BOOL4 v32;
  char *v33;
  _BOOL4 v34;
  char *backtrace_string;
  _BOOL4 v36;
  const char *v37;
  NSObject *v38;
  uint64_t v39;
  _BOOL4 v40;
  char *v41;
  _BOOL4 v42;
  const char *v43;
  NSObject *v44;
  uint64_t v45;
  _BOOL4 v46;
  unint64_t __src;
  char v48;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v51;
  __int16 v52;
  const char *v53;
  __int16 v54;
  size_t v55;
  __int16 v56;
  uint64_t v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  if (!__s)
  {
    v5 = 0;
    goto LABEL_6;
  }
  v4 = strlen(__s);
  v5 = v4;
  if (v4 <= 0x3F)
  {
LABEL_6:
    __src = v5;
    v6 = 1;
    goto LABEL_7;
  }
  if (!(v4 >> 14))
  {
    __src = bswap32(v4 | 0x4000) >> 16;
    v6 = 2;
    goto LABEL_7;
  }
  if (!(v4 >> 30))
  {
    __src = bswap32(v4 | 0x80000000);
    v6 = 4;
    goto LABEL_7;
  }
  if (!(v4 >> 62))
  {
    __src = bswap64(v4 | 0xC000000000000000);
    v6 = 8;
LABEL_7:
    v8 = *(_QWORD *)(a1 + 32);
    v7 = (_QWORD *)(a1 + 32);
    v9 = *(char **)(*(_QWORD *)(v8 + 8) + 24);
    v10 = v7 + 1;
    if (v9)
    {
      v11 = *(_QWORD *)(v7[1] + 8);
      if (*(_QWORD *)(v11 + 24) >= v6)
      {
        memcpy(v9, &__src, v6);
        v12 = *(_QWORD *)(v11 + 24);
        *(_QWORD *)(v11 + 24) = v12 - v6;
        if (v12 < v6)
        {
          if (gLogDatapath)
          {
            v38 = __nwlog_obj();
            if (os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG))
            {
              v39 = *(_QWORD *)(v11 + 24);
              *(_DWORD *)buf = 136446978;
              v51 = "_http_safe_append";
              v52 = 2082;
              v53 = "*remaining";
              v54 = 2048;
              v55 = v6;
              v56 = 2048;
              v57 = v39;
              _os_log_impl(&dword_182FBE000, v38, OS_LOG_TYPE_DEBUG, "%{public}s Underflow: %{public}s, decrement %llu, result %llu", buf, 0x2Au);
            }
          }
          *(_QWORD *)(v11 + 24) = 0;
        }
        v13 = &v9[v6];
        goto LABEL_13;
      }
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      v51 = "_http_safe_append";
      v23 = (char *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      v48 = 0;
      if (!__nwlog_fault(v23, &type, &v48))
        goto LABEL_112;
      if (type == OS_LOG_TYPE_FAULT)
      {
        v24 = __nwlog_obj();
        v25 = type;
        if (os_log_type_enabled(v24, type))
        {
          *(_DWORD *)buf = 136446210;
          v51 = "_http_safe_append";
          v26 = "%{public}s called with null (*remaining >= length)";
          goto LABEL_111;
        }
        goto LABEL_112;
      }
      if (!v48)
      {
        v24 = __nwlog_obj();
        v25 = type;
        if (os_log_type_enabled(v24, type))
        {
          *(_DWORD *)buf = 136446210;
          v51 = "_http_safe_append";
          v26 = "%{public}s called with null (*remaining >= length), backtrace limit exceeded";
          goto LABEL_111;
        }
        goto LABEL_112;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v24 = __nwlog_obj();
      v25 = type;
      v40 = os_log_type_enabled(v24, type);
      if (!backtrace_string)
      {
        if (v40)
        {
          *(_DWORD *)buf = 136446210;
          v51 = "_http_safe_append";
          v26 = "%{public}s called with null (*remaining >= length), no backtrace";
          goto LABEL_111;
        }
        goto LABEL_112;
      }
      if (v40)
      {
        *(_DWORD *)buf = 136446466;
        v51 = "_http_safe_append";
        v52 = 2082;
        v53 = backtrace_string;
        v37 = "%{public}s called with null (*remaining >= length), dumping backtrace:%{public}s";
        goto LABEL_74;
      }
    }
    else
    {
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      v51 = "_http_safe_append";
      v23 = (char *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      v48 = 0;
      if (!__nwlog_fault(v23, &type, &v48))
        goto LABEL_112;
      if (type == OS_LOG_TYPE_FAULT)
      {
        v24 = __nwlog_obj();
        v25 = type;
        if (os_log_type_enabled(v24, type))
        {
          *(_DWORD *)buf = 136446210;
          v51 = "_http_safe_append";
          v26 = "%{public}s called with null buffer";
LABEL_111:
          _os_log_impl(&dword_182FBE000, v24, v25, v26, buf, 0xCu);
        }
LABEL_112:
        if (v23)
          free(v23);
        v13 = 0;
        goto LABEL_13;
      }
      if (!v48)
      {
        v24 = __nwlog_obj();
        v25 = type;
        if (os_log_type_enabled(v24, type))
        {
          *(_DWORD *)buf = 136446210;
          v51 = "_http_safe_append";
          v26 = "%{public}s called with null buffer, backtrace limit exceeded";
          goto LABEL_111;
        }
        goto LABEL_112;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v24 = __nwlog_obj();
      v25 = type;
      v36 = os_log_type_enabled(v24, type);
      if (!backtrace_string)
      {
        if (v36)
        {
          *(_DWORD *)buf = 136446210;
          v51 = "_http_safe_append";
          v26 = "%{public}s called with null buffer, no backtrace";
          goto LABEL_111;
        }
        goto LABEL_112;
      }
      if (v36)
      {
        *(_DWORD *)buf = 136446466;
        v51 = "_http_safe_append";
        v52 = 2082;
        v53 = backtrace_string;
        v37 = "%{public}s called with null buffer, dumping backtrace:%{public}s";
LABEL_74:
        _os_log_impl(&dword_182FBE000, v24, v25, v37, buf, 0x16u);
      }
    }
    free(backtrace_string);
    goto LABEL_112;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446466;
  v51 = "_http_vle_encode";
  v52 = 2048;
  v53 = (const char *)v5;
  v17 = (void *)_os_log_send_and_compose_impl();
  if (__nwlog_abort((uint64_t)v17))
  {
    __break(1u);
    return;
  }
  free(v17);
  v18 = *(_QWORD *)(a1 + 32);
  v7 = (_QWORD *)(a1 + 32);
  v13 = *(char **)(*(_QWORD *)(v18 + 8) + 24);
  v10 = v7 + 1;
LABEL_13:
  *(_QWORD *)(*(_QWORD *)(*v7 + 8) + 24) = v13;
  v14 = *(char **)(*(_QWORD *)(*v7 + 8) + 24);
  if (!v14)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v51 = "nw_http_fillout_binary_message_inner_block_invoke";
    v19 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v48 = 0;
    if (!__nwlog_fault(v19, &type, &v48))
      goto LABEL_101;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v20 = __nwlog_obj();
      v21 = type;
      if (!os_log_type_enabled(v20, type))
        goto LABEL_101;
      *(_DWORD *)buf = 136446210;
      v51 = "nw_http_fillout_binary_message_inner_block_invoke";
      v22 = "%{public}s called with null cursor";
    }
    else
    {
      if (!v48)
      {
        v20 = __nwlog_obj();
        v21 = type;
        if (!os_log_type_enabled(v20, type))
          goto LABEL_101;
        *(_DWORD *)buf = 136446210;
        v51 = "nw_http_fillout_binary_message_inner_block_invoke";
        v22 = "%{public}s called with null cursor, backtrace limit exceeded";
        goto LABEL_100;
      }
      v31 = (char *)__nw_create_backtrace_string();
      v20 = __nwlog_obj();
      v21 = type;
      v32 = os_log_type_enabled(v20, type);
      if (v31)
      {
        if (v32)
        {
          *(_DWORD *)buf = 136446466;
          v51 = "nw_http_fillout_binary_message_inner_block_invoke";
          v52 = 2082;
          v53 = v31;
          _os_log_impl(&dword_182FBE000, v20, v21, "%{public}s called with null cursor, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v31);
        if (v19)
          goto LABEL_102;
        return;
      }
      if (!v32)
        goto LABEL_101;
      *(_DWORD *)buf = 136446210;
      v51 = "nw_http_fillout_binary_message_inner_block_invoke";
      v22 = "%{public}s called with null cursor, no backtrace";
    }
LABEL_100:
    _os_log_impl(&dword_182FBE000, v20, v21, v22, buf, 0xCu);
    goto LABEL_101;
  }
  if (v5)
  {
    if (__s)
    {
      v15 = *(_QWORD *)(*v10 + 8);
      if (*(_QWORD *)(v15 + 24) >= v5)
      {
        memcpy(v14, __s, v5);
        v16 = *(_QWORD *)(v15 + 24);
        *(_QWORD *)(v15 + 24) = v16 - v5;
        if (v16 < v5)
        {
          if (gLogDatapath)
          {
            v44 = __nwlog_obj();
            if (os_log_type_enabled(v44, OS_LOG_TYPE_DEBUG))
            {
              v45 = *(_QWORD *)(v15 + 24);
              *(_DWORD *)buf = 136446978;
              v51 = "_http_safe_append";
              v52 = 2082;
              v53 = "*remaining";
              v54 = 2048;
              v55 = v5;
              v56 = 2048;
              v57 = v45;
              _os_log_impl(&dword_182FBE000, v44, OS_LOG_TYPE_DEBUG, "%{public}s Underflow: %{public}s, decrement %llu, result %llu", buf, 0x2Au);
            }
          }
          *(_QWORD *)(v15 + 24) = 0;
        }
        v14 += v5;
        goto LABEL_21;
      }
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      v51 = "_http_safe_append";
      v27 = (char *)_os_log_send_and_compose_impl();
      LOBYTE(__src) = 16;
      type = OS_LOG_TYPE_DEFAULT;
      if (!__nwlog_fault(v27, &__src, &type))
        goto LABEL_120;
      if (__src == 17)
      {
        v28 = __nwlog_obj();
        v29 = __src;
        if (os_log_type_enabled(v28, (os_log_type_t)__src))
        {
          *(_DWORD *)buf = 136446210;
          v51 = "_http_safe_append";
          v30 = "%{public}s called with null (*remaining >= length)";
          goto LABEL_119;
        }
        goto LABEL_120;
      }
      if (type == OS_LOG_TYPE_DEFAULT)
      {
        v28 = __nwlog_obj();
        v29 = __src;
        if (os_log_type_enabled(v28, (os_log_type_t)__src))
        {
          *(_DWORD *)buf = 136446210;
          v51 = "_http_safe_append";
          v30 = "%{public}s called with null (*remaining >= length), backtrace limit exceeded";
          goto LABEL_119;
        }
        goto LABEL_120;
      }
      v41 = (char *)__nw_create_backtrace_string();
      v28 = __nwlog_obj();
      v29 = __src;
      v46 = os_log_type_enabled(v28, (os_log_type_t)__src);
      if (!v41)
      {
        if (v46)
        {
          *(_DWORD *)buf = 136446210;
          v51 = "_http_safe_append";
          v30 = "%{public}s called with null (*remaining >= length), no backtrace";
          goto LABEL_119;
        }
        goto LABEL_120;
      }
      if (v46)
      {
        *(_DWORD *)buf = 136446466;
        v51 = "_http_safe_append";
        v52 = 2082;
        v53 = v41;
        v43 = "%{public}s called with null (*remaining >= length), dumping backtrace:%{public}s";
        goto LABEL_86;
      }
    }
    else
    {
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      v51 = "_http_safe_append";
      v27 = (char *)_os_log_send_and_compose_impl();
      LOBYTE(__src) = 16;
      type = OS_LOG_TYPE_DEFAULT;
      if (!__nwlog_fault(v27, &__src, &type))
        goto LABEL_120;
      if (__src == 17)
      {
        v28 = __nwlog_obj();
        v29 = __src;
        if (os_log_type_enabled(v28, (os_log_type_t)__src))
        {
          *(_DWORD *)buf = 136446210;
          v51 = "_http_safe_append";
          v30 = "%{public}s called with null data";
LABEL_119:
          _os_log_impl(&dword_182FBE000, v28, v29, v30, buf, 0xCu);
        }
LABEL_120:
        if (v27)
          free(v27);
        v14 = 0;
        goto LABEL_21;
      }
      if (type == OS_LOG_TYPE_DEFAULT)
      {
        v28 = __nwlog_obj();
        v29 = __src;
        if (os_log_type_enabled(v28, (os_log_type_t)__src))
        {
          *(_DWORD *)buf = 136446210;
          v51 = "_http_safe_append";
          v30 = "%{public}s called with null data, backtrace limit exceeded";
          goto LABEL_119;
        }
        goto LABEL_120;
      }
      v41 = (char *)__nw_create_backtrace_string();
      v28 = __nwlog_obj();
      v29 = __src;
      v42 = os_log_type_enabled(v28, (os_log_type_t)__src);
      if (!v41)
      {
        if (v42)
        {
          *(_DWORD *)buf = 136446210;
          v51 = "_http_safe_append";
          v30 = "%{public}s called with null data, no backtrace";
          goto LABEL_119;
        }
        goto LABEL_120;
      }
      if (v42)
      {
        *(_DWORD *)buf = 136446466;
        v51 = "_http_safe_append";
        v52 = 2082;
        v53 = v41;
        v43 = "%{public}s called with null data, dumping backtrace:%{public}s";
LABEL_86:
        _os_log_impl(&dword_182FBE000, v28, v29, v43, buf, 0x16u);
      }
    }
    free(v41);
    goto LABEL_120;
  }
LABEL_21:
  *(_QWORD *)(*(_QWORD *)(*v7 + 8) + 24) = v14;
  if (*(_QWORD *)(*(_QWORD *)(*v7 + 8) + 24))
    return;
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v51 = "nw_http_fillout_binary_message_inner_block_invoke";
  v19 = (char *)_os_log_send_and_compose_impl();
  LOBYTE(__src) = 16;
  type = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v19, &__src, &type))
  {
    if (__src == 17)
    {
      v20 = __nwlog_obj();
      v21 = __src;
      if (!os_log_type_enabled(v20, (os_log_type_t)__src))
        goto LABEL_101;
      *(_DWORD *)buf = 136446210;
      v51 = "nw_http_fillout_binary_message_inner_block_invoke";
      v22 = "%{public}s called with null cursor";
      goto LABEL_100;
    }
    if (type == OS_LOG_TYPE_DEFAULT)
    {
      v20 = __nwlog_obj();
      v21 = __src;
      if (!os_log_type_enabled(v20, (os_log_type_t)__src))
        goto LABEL_101;
      *(_DWORD *)buf = 136446210;
      v51 = "nw_http_fillout_binary_message_inner_block_invoke";
      v22 = "%{public}s called with null cursor, backtrace limit exceeded";
      goto LABEL_100;
    }
    v33 = (char *)__nw_create_backtrace_string();
    v20 = __nwlog_obj();
    v21 = __src;
    v34 = os_log_type_enabled(v20, (os_log_type_t)__src);
    if (!v33)
    {
      if (!v34)
        goto LABEL_101;
      *(_DWORD *)buf = 136446210;
      v51 = "nw_http_fillout_binary_message_inner_block_invoke";
      v22 = "%{public}s called with null cursor, no backtrace";
      goto LABEL_100;
    }
    if (v34)
    {
      *(_DWORD *)buf = 136446466;
      v51 = "nw_http_fillout_binary_message_inner_block_invoke";
      v52 = 2082;
      v53 = v33;
      _os_log_impl(&dword_182FBE000, v20, v21, "%{public}s called with null cursor, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v33);
  }
LABEL_101:
  if (v19)
LABEL_102:
    free(v19);
}

void ___ZL36nw_http_fillout_binary_message_innerP20nw_protocol_metadatabPKhmPhm_block_invoke_20(uint64_t a1, char *__s)
{
  size_t v4;
  size_t v5;
  size_t v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  char *v19;
  NSObject *v20;
  os_log_type_t v21;
  const char *v22;
  char *v23;
  NSObject *v24;
  os_log_type_t v25;
  const char *v26;
  char *v27;
  NSObject *v28;
  os_log_type_t v29;
  const char *v30;
  char *v31;
  _BOOL4 v32;
  char *v33;
  _BOOL4 v34;
  char *backtrace_string;
  _BOOL4 v36;
  const char *v37;
  NSObject *v38;
  uint64_t v39;
  _BOOL4 v40;
  char *v41;
  _BOOL4 v42;
  const char *v43;
  NSObject *v44;
  uint64_t v45;
  _BOOL4 v46;
  unint64_t __src;
  char v48;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v51;
  __int16 v52;
  const char *v53;
  __int16 v54;
  size_t v55;
  __int16 v56;
  uint64_t v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  if (!__s)
  {
    v5 = 0;
    goto LABEL_6;
  }
  v4 = strlen(__s);
  v5 = v4;
  if (v4 <= 0x3F)
  {
LABEL_6:
    __src = v5;
    v6 = 1;
    goto LABEL_7;
  }
  if (!(v4 >> 14))
  {
    __src = bswap32(v4 | 0x4000) >> 16;
    v6 = 2;
    goto LABEL_7;
  }
  if (!(v4 >> 30))
  {
    __src = bswap32(v4 | 0x80000000);
    v6 = 4;
    goto LABEL_7;
  }
  if (!(v4 >> 62))
  {
    __src = bswap64(v4 | 0xC000000000000000);
    v6 = 8;
LABEL_7:
    v8 = *(_QWORD *)(a1 + 32);
    v7 = (_QWORD *)(a1 + 32);
    v9 = *(char **)(*(_QWORD *)(v8 + 8) + 24);
    v10 = v7 + 1;
    if (v9)
    {
      v11 = *(_QWORD *)(v7[1] + 8);
      if (*(_QWORD *)(v11 + 24) >= v6)
      {
        memcpy(v9, &__src, v6);
        v12 = *(_QWORD *)(v11 + 24);
        *(_QWORD *)(v11 + 24) = v12 - v6;
        if (v12 < v6)
        {
          if (gLogDatapath)
          {
            v38 = __nwlog_obj();
            if (os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG))
            {
              v39 = *(_QWORD *)(v11 + 24);
              *(_DWORD *)buf = 136446978;
              v51 = "_http_safe_append";
              v52 = 2082;
              v53 = "*remaining";
              v54 = 2048;
              v55 = v6;
              v56 = 2048;
              v57 = v39;
              _os_log_impl(&dword_182FBE000, v38, OS_LOG_TYPE_DEBUG, "%{public}s Underflow: %{public}s, decrement %llu, result %llu", buf, 0x2Au);
            }
          }
          *(_QWORD *)(v11 + 24) = 0;
        }
        v13 = &v9[v6];
        goto LABEL_13;
      }
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      v51 = "_http_safe_append";
      v23 = (char *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      v48 = 0;
      if (!__nwlog_fault(v23, &type, &v48))
        goto LABEL_112;
      if (type == OS_LOG_TYPE_FAULT)
      {
        v24 = __nwlog_obj();
        v25 = type;
        if (os_log_type_enabled(v24, type))
        {
          *(_DWORD *)buf = 136446210;
          v51 = "_http_safe_append";
          v26 = "%{public}s called with null (*remaining >= length)";
          goto LABEL_111;
        }
        goto LABEL_112;
      }
      if (!v48)
      {
        v24 = __nwlog_obj();
        v25 = type;
        if (os_log_type_enabled(v24, type))
        {
          *(_DWORD *)buf = 136446210;
          v51 = "_http_safe_append";
          v26 = "%{public}s called with null (*remaining >= length), backtrace limit exceeded";
          goto LABEL_111;
        }
        goto LABEL_112;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v24 = __nwlog_obj();
      v25 = type;
      v40 = os_log_type_enabled(v24, type);
      if (!backtrace_string)
      {
        if (v40)
        {
          *(_DWORD *)buf = 136446210;
          v51 = "_http_safe_append";
          v26 = "%{public}s called with null (*remaining >= length), no backtrace";
          goto LABEL_111;
        }
        goto LABEL_112;
      }
      if (v40)
      {
        *(_DWORD *)buf = 136446466;
        v51 = "_http_safe_append";
        v52 = 2082;
        v53 = backtrace_string;
        v37 = "%{public}s called with null (*remaining >= length), dumping backtrace:%{public}s";
        goto LABEL_74;
      }
    }
    else
    {
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      v51 = "_http_safe_append";
      v23 = (char *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      v48 = 0;
      if (!__nwlog_fault(v23, &type, &v48))
        goto LABEL_112;
      if (type == OS_LOG_TYPE_FAULT)
      {
        v24 = __nwlog_obj();
        v25 = type;
        if (os_log_type_enabled(v24, type))
        {
          *(_DWORD *)buf = 136446210;
          v51 = "_http_safe_append";
          v26 = "%{public}s called with null buffer";
LABEL_111:
          _os_log_impl(&dword_182FBE000, v24, v25, v26, buf, 0xCu);
        }
LABEL_112:
        if (v23)
          free(v23);
        v13 = 0;
        goto LABEL_13;
      }
      if (!v48)
      {
        v24 = __nwlog_obj();
        v25 = type;
        if (os_log_type_enabled(v24, type))
        {
          *(_DWORD *)buf = 136446210;
          v51 = "_http_safe_append";
          v26 = "%{public}s called with null buffer, backtrace limit exceeded";
          goto LABEL_111;
        }
        goto LABEL_112;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v24 = __nwlog_obj();
      v25 = type;
      v36 = os_log_type_enabled(v24, type);
      if (!backtrace_string)
      {
        if (v36)
        {
          *(_DWORD *)buf = 136446210;
          v51 = "_http_safe_append";
          v26 = "%{public}s called with null buffer, no backtrace";
          goto LABEL_111;
        }
        goto LABEL_112;
      }
      if (v36)
      {
        *(_DWORD *)buf = 136446466;
        v51 = "_http_safe_append";
        v52 = 2082;
        v53 = backtrace_string;
        v37 = "%{public}s called with null buffer, dumping backtrace:%{public}s";
LABEL_74:
        _os_log_impl(&dword_182FBE000, v24, v25, v37, buf, 0x16u);
      }
    }
    free(backtrace_string);
    goto LABEL_112;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446466;
  v51 = "_http_vle_encode";
  v52 = 2048;
  v53 = (const char *)v5;
  v17 = (void *)_os_log_send_and_compose_impl();
  if (__nwlog_abort((uint64_t)v17))
  {
    __break(1u);
    return;
  }
  free(v17);
  v18 = *(_QWORD *)(a1 + 32);
  v7 = (_QWORD *)(a1 + 32);
  v13 = *(char **)(*(_QWORD *)(v18 + 8) + 24);
  v10 = v7 + 1;
LABEL_13:
  *(_QWORD *)(*(_QWORD *)(*v7 + 8) + 24) = v13;
  v14 = *(char **)(*(_QWORD *)(*v7 + 8) + 24);
  if (!v14)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v51 = "nw_http_fillout_binary_message_inner_block_invoke";
    v19 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v48 = 0;
    if (!__nwlog_fault(v19, &type, &v48))
      goto LABEL_101;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v20 = __nwlog_obj();
      v21 = type;
      if (!os_log_type_enabled(v20, type))
        goto LABEL_101;
      *(_DWORD *)buf = 136446210;
      v51 = "nw_http_fillout_binary_message_inner_block_invoke";
      v22 = "%{public}s called with null cursor";
    }
    else
    {
      if (!v48)
      {
        v20 = __nwlog_obj();
        v21 = type;
        if (!os_log_type_enabled(v20, type))
          goto LABEL_101;
        *(_DWORD *)buf = 136446210;
        v51 = "nw_http_fillout_binary_message_inner_block_invoke";
        v22 = "%{public}s called with null cursor, backtrace limit exceeded";
        goto LABEL_100;
      }
      v31 = (char *)__nw_create_backtrace_string();
      v20 = __nwlog_obj();
      v21 = type;
      v32 = os_log_type_enabled(v20, type);
      if (v31)
      {
        if (v32)
        {
          *(_DWORD *)buf = 136446466;
          v51 = "nw_http_fillout_binary_message_inner_block_invoke";
          v52 = 2082;
          v53 = v31;
          _os_log_impl(&dword_182FBE000, v20, v21, "%{public}s called with null cursor, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v31);
        if (v19)
          goto LABEL_102;
        return;
      }
      if (!v32)
        goto LABEL_101;
      *(_DWORD *)buf = 136446210;
      v51 = "nw_http_fillout_binary_message_inner_block_invoke";
      v22 = "%{public}s called with null cursor, no backtrace";
    }
LABEL_100:
    _os_log_impl(&dword_182FBE000, v20, v21, v22, buf, 0xCu);
    goto LABEL_101;
  }
  if (v5)
  {
    if (__s)
    {
      v15 = *(_QWORD *)(*v10 + 8);
      if (*(_QWORD *)(v15 + 24) >= v5)
      {
        memcpy(v14, __s, v5);
        v16 = *(_QWORD *)(v15 + 24);
        *(_QWORD *)(v15 + 24) = v16 - v5;
        if (v16 < v5)
        {
          if (gLogDatapath)
          {
            v44 = __nwlog_obj();
            if (os_log_type_enabled(v44, OS_LOG_TYPE_DEBUG))
            {
              v45 = *(_QWORD *)(v15 + 24);
              *(_DWORD *)buf = 136446978;
              v51 = "_http_safe_append";
              v52 = 2082;
              v53 = "*remaining";
              v54 = 2048;
              v55 = v5;
              v56 = 2048;
              v57 = v45;
              _os_log_impl(&dword_182FBE000, v44, OS_LOG_TYPE_DEBUG, "%{public}s Underflow: %{public}s, decrement %llu, result %llu", buf, 0x2Au);
            }
          }
          *(_QWORD *)(v15 + 24) = 0;
        }
        v14 += v5;
        goto LABEL_21;
      }
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      v51 = "_http_safe_append";
      v27 = (char *)_os_log_send_and_compose_impl();
      LOBYTE(__src) = 16;
      type = OS_LOG_TYPE_DEFAULT;
      if (!__nwlog_fault(v27, &__src, &type))
        goto LABEL_120;
      if (__src == 17)
      {
        v28 = __nwlog_obj();
        v29 = __src;
        if (os_log_type_enabled(v28, (os_log_type_t)__src))
        {
          *(_DWORD *)buf = 136446210;
          v51 = "_http_safe_append";
          v30 = "%{public}s called with null (*remaining >= length)";
          goto LABEL_119;
        }
        goto LABEL_120;
      }
      if (type == OS_LOG_TYPE_DEFAULT)
      {
        v28 = __nwlog_obj();
        v29 = __src;
        if (os_log_type_enabled(v28, (os_log_type_t)__src))
        {
          *(_DWORD *)buf = 136446210;
          v51 = "_http_safe_append";
          v30 = "%{public}s called with null (*remaining >= length), backtrace limit exceeded";
          goto LABEL_119;
        }
        goto LABEL_120;
      }
      v41 = (char *)__nw_create_backtrace_string();
      v28 = __nwlog_obj();
      v29 = __src;
      v46 = os_log_type_enabled(v28, (os_log_type_t)__src);
      if (!v41)
      {
        if (v46)
        {
          *(_DWORD *)buf = 136446210;
          v51 = "_http_safe_append";
          v30 = "%{public}s called with null (*remaining >= length), no backtrace";
          goto LABEL_119;
        }
        goto LABEL_120;
      }
      if (v46)
      {
        *(_DWORD *)buf = 136446466;
        v51 = "_http_safe_append";
        v52 = 2082;
        v53 = v41;
        v43 = "%{public}s called with null (*remaining >= length), dumping backtrace:%{public}s";
        goto LABEL_86;
      }
    }
    else
    {
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      v51 = "_http_safe_append";
      v27 = (char *)_os_log_send_and_compose_impl();
      LOBYTE(__src) = 16;
      type = OS_LOG_TYPE_DEFAULT;
      if (!__nwlog_fault(v27, &__src, &type))
        goto LABEL_120;
      if (__src == 17)
      {
        v28 = __nwlog_obj();
        v29 = __src;
        if (os_log_type_enabled(v28, (os_log_type_t)__src))
        {
          *(_DWORD *)buf = 136446210;
          v51 = "_http_safe_append";
          v30 = "%{public}s called with null data";
LABEL_119:
          _os_log_impl(&dword_182FBE000, v28, v29, v30, buf, 0xCu);
        }
LABEL_120:
        if (v27)
          free(v27);
        v14 = 0;
        goto LABEL_21;
      }
      if (type == OS_LOG_TYPE_DEFAULT)
      {
        v28 = __nwlog_obj();
        v29 = __src;
        if (os_log_type_enabled(v28, (os_log_type_t)__src))
        {
          *(_DWORD *)buf = 136446210;
          v51 = "_http_safe_append";
          v30 = "%{public}s called with null data, backtrace limit exceeded";
          goto LABEL_119;
        }
        goto LABEL_120;
      }
      v41 = (char *)__nw_create_backtrace_string();
      v28 = __nwlog_obj();
      v29 = __src;
      v42 = os_log_type_enabled(v28, (os_log_type_t)__src);
      if (!v41)
      {
        if (v42)
        {
          *(_DWORD *)buf = 136446210;
          v51 = "_http_safe_append";
          v30 = "%{public}s called with null data, no backtrace";
          goto LABEL_119;
        }
        goto LABEL_120;
      }
      if (v42)
      {
        *(_DWORD *)buf = 136446466;
        v51 = "_http_safe_append";
        v52 = 2082;
        v53 = v41;
        v43 = "%{public}s called with null data, dumping backtrace:%{public}s";
LABEL_86:
        _os_log_impl(&dword_182FBE000, v28, v29, v43, buf, 0x16u);
      }
    }
    free(v41);
    goto LABEL_120;
  }
LABEL_21:
  *(_QWORD *)(*(_QWORD *)(*v7 + 8) + 24) = v14;
  if (*(_QWORD *)(*(_QWORD *)(*v7 + 8) + 24))
    return;
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v51 = "nw_http_fillout_binary_message_inner_block_invoke";
  v19 = (char *)_os_log_send_and_compose_impl();
  LOBYTE(__src) = 16;
  type = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v19, &__src, &type))
  {
    if (__src == 17)
    {
      v20 = __nwlog_obj();
      v21 = __src;
      if (!os_log_type_enabled(v20, (os_log_type_t)__src))
        goto LABEL_101;
      *(_DWORD *)buf = 136446210;
      v51 = "nw_http_fillout_binary_message_inner_block_invoke";
      v22 = "%{public}s called with null cursor";
      goto LABEL_100;
    }
    if (type == OS_LOG_TYPE_DEFAULT)
    {
      v20 = __nwlog_obj();
      v21 = __src;
      if (!os_log_type_enabled(v20, (os_log_type_t)__src))
        goto LABEL_101;
      *(_DWORD *)buf = 136446210;
      v51 = "nw_http_fillout_binary_message_inner_block_invoke";
      v22 = "%{public}s called with null cursor, backtrace limit exceeded";
      goto LABEL_100;
    }
    v33 = (char *)__nw_create_backtrace_string();
    v20 = __nwlog_obj();
    v21 = __src;
    v34 = os_log_type_enabled(v20, (os_log_type_t)__src);
    if (!v33)
    {
      if (!v34)
        goto LABEL_101;
      *(_DWORD *)buf = 136446210;
      v51 = "nw_http_fillout_binary_message_inner_block_invoke";
      v22 = "%{public}s called with null cursor, no backtrace";
      goto LABEL_100;
    }
    if (v34)
    {
      *(_DWORD *)buf = 136446466;
      v51 = "nw_http_fillout_binary_message_inner_block_invoke";
      v52 = 2082;
      v53 = v33;
      _os_log_impl(&dword_182FBE000, v20, v21, "%{public}s called with null cursor, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v33);
  }
LABEL_101:
  if (v19)
LABEL_102:
    free(v19);
}

BOOL ___ZL36nw_http_fillout_binary_message_innerP20nw_protocol_metadatabPKhmPhm_block_invoke_22(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  void *v10;
  _BOOL8 result;
  void *v12;

  if (a3 < 0x40)
  {
    v8 = 1;
    if (a5 >= 0x40)
      goto LABEL_15;
LABEL_12:
    v9 = 1;
LABEL_23:
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) += a5 + a3 + v8 + v9;
    return 1;
  }
  if (a3 < 0x4000)
  {
    v8 = 2;
    if (a5 >= 0x40)
      goto LABEL_15;
    goto LABEL_12;
  }
  if (!(a3 >> 30))
  {
    v8 = 4;
    if (a5 >= 0x40)
      goto LABEL_15;
    goto LABEL_12;
  }
  if (a3 >> 62)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
    v10 = (void *)_os_log_send_and_compose_impl();
    result = __nwlog_abort((uint64_t)v10);
    if (result)
      goto LABEL_24;
    free(v10);
    v8 = 0;
    if (a5 < 0x40)
      goto LABEL_12;
  }
  else
  {
    v8 = 8;
    if (a5 < 0x40)
      goto LABEL_12;
  }
LABEL_15:
  if (a5 < 0x4000)
  {
    v9 = 2;
    goto LABEL_23;
  }
  if (!(a5 >> 30))
  {
    v9 = 4;
    goto LABEL_23;
  }
  if (!(a5 >> 62))
  {
    v9 = 8;
    goto LABEL_23;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
  v12 = (void *)_os_log_send_and_compose_impl();
  result = __nwlog_abort((uint64_t)v12);
  if (!result)
  {
    free(v12);
    v9 = 0;
    goto LABEL_23;
  }
LABEL_24:
  __break(1u);
  return result;
}

uint64_t ___ZL36nw_http_fillout_binary_message_innerP20nw_protocol_metadatabPKhmPhm_block_invoke_24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v4[4];
  __int128 v5;

  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZL36nw_http_fillout_binary_message_innerP20nw_protocol_metadatabPKhmPhm_block_invoke_2;
  v4[3] = &unk_1E14A3808;
  v5 = *(_OWORD *)(a1 + 32);
  nw_http_field_access_canonical(a3, v4);
  return 1;
}

BOOL ___ZL36nw_http_fillout_binary_message_innerP20nw_protocol_metadatabPKhmPhm_block_invoke_27(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  void *v10;
  _BOOL8 result;
  void *v12;

  if (a3 < 0x40)
  {
    v8 = 1;
    if (a5 >= 0x40)
      goto LABEL_15;
LABEL_12:
    v9 = 1;
LABEL_23:
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) += a5 + a3 + v8 + v9;
    return 1;
  }
  if (a3 < 0x4000)
  {
    v8 = 2;
    if (a5 >= 0x40)
      goto LABEL_15;
    goto LABEL_12;
  }
  if (!(a3 >> 30))
  {
    v8 = 4;
    if (a5 >= 0x40)
      goto LABEL_15;
    goto LABEL_12;
  }
  if (a3 >> 62)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
    v10 = (void *)_os_log_send_and_compose_impl();
    result = __nwlog_abort((uint64_t)v10);
    if (result)
      goto LABEL_24;
    free(v10);
    v8 = 0;
    if (a5 < 0x40)
      goto LABEL_12;
  }
  else
  {
    v8 = 8;
    if (a5 < 0x40)
      goto LABEL_12;
  }
LABEL_15:
  if (a5 < 0x4000)
  {
    v9 = 2;
    goto LABEL_23;
  }
  if (!(a5 >> 30))
  {
    v9 = 4;
    goto LABEL_23;
  }
  if (!(a5 >> 62))
  {
    v9 = 8;
    goto LABEL_23;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
  v12 = (void *)_os_log_send_and_compose_impl();
  result = __nwlog_abort((uint64_t)v12);
  if (!result)
  {
    free(v12);
    v9 = 0;
    goto LABEL_23;
  }
LABEL_24:
  __break(1u);
  return result;
}

uint64_t ___ZL36nw_http_fillout_binary_message_innerP20nw_protocol_metadatabPKhmPhm_block_invoke_29(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v4[4];
  __int128 v5;

  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZL36nw_http_fillout_binary_message_innerP20nw_protocol_metadatabPKhmPhm_block_invoke_2_30;
  v4[3] = &unk_1E14A3880;
  v5 = *(_OWORD *)(a1 + 32);
  nw_http_field_access_canonical(a3, v4);
  return 1;
}

void ___ZL36nw_http_fillout_binary_message_innerP20nw_protocol_metadatabPKhmPhm_block_invoke_2_30(uint64_t a1, const void *a2, size_t a3, const void *a4, size_t a5)
{
  size_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  size_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  void *v30;
  char *v31;
  NSObject *v32;
  os_log_type_t v33;
  const char *v34;
  char *v35;
  NSObject *v36;
  os_log_type_t v37;
  const char *v38;
  char *v39;
  NSObject *v40;
  os_log_type_t v41;
  const char *v42;
  char *v43;
  NSObject *v44;
  os_log_type_t v45;
  const char *v46;
  char *v47;
  NSObject *v48;
  os_log_type_t v49;
  const char *v50;
  char *v51;
  _BOOL4 v52;
  _BOOL4 v53;
  _BOOL4 v54;
  char *v55;
  _BOOL4 v56;
  char *backtrace_string;
  _BOOL4 v58;
  const char *v59;
  NSObject *v60;
  uint64_t v61;
  _BOOL4 v62;
  NSObject *v63;
  uint64_t v64;
  char *v65;
  _BOOL4 v66;
  char *v67;
  _BOOL4 v68;
  const char *v69;
  NSObject *v70;
  uint64_t v71;
  _BOOL4 v72;
  char *v73;
  _BOOL4 v74;
  const char *v75;
  NSObject *v76;
  uint64_t v77;
  _BOOL4 v78;
  unint64_t __src;
  char v80;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v83;
  __int16 v84;
  const char *v85;
  __int16 v86;
  size_t v87;
  __int16 v88;
  uint64_t v89;
  uint64_t v90;

  v90 = *MEMORY[0x1E0C80C00];
  if (a3 <= 0x3F)
  {
    __src = a3;
    v10 = 1;
    goto LABEL_9;
  }
  if (!(a3 >> 14))
  {
    __src = bswap32(a3 | 0x4000) >> 16;
    v10 = 2;
    goto LABEL_9;
  }
  if (!(a3 >> 30))
  {
    __src = bswap32(a3 | 0x80000000);
    v10 = 4;
    goto LABEL_9;
  }
  if (!(a3 >> 62))
  {
    __src = bswap64(a3 | 0xC000000000000000);
    v10 = 8;
LABEL_9:
    v11 = a1 + 32;
    v12 = *(char **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    v13 = a1 + 40;
    if (v12)
    {
      v14 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
      if (*(_QWORD *)(v14 + 24) >= v10)
      {
        memcpy(v12, &__src, v10);
        v15 = *(_QWORD *)(v14 + 24);
        *(_QWORD *)(v14 + 24) = v15 - v10;
        if (v15 < v10)
        {
          if (gLogDatapath)
          {
            v60 = __nwlog_obj();
            if (os_log_type_enabled(v60, OS_LOG_TYPE_DEBUG))
            {
              v61 = *(_QWORD *)(v14 + 24);
              *(_DWORD *)buf = 136446978;
              v83 = "_http_safe_append";
              v84 = 2082;
              v85 = "*remaining";
              v86 = 2048;
              v87 = v10;
              v88 = 2048;
              v89 = v61;
              _os_log_impl(&dword_182FBE000, v60, OS_LOG_TYPE_DEBUG, "%{public}s Underflow: %{public}s, decrement %llu, result %llu", buf, 0x2Au);
            }
          }
          *(_QWORD *)(v14 + 24) = 0;
        }
        v16 = &v12[v10];
        goto LABEL_15;
      }
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      v83 = "_http_safe_append";
      v35 = (char *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      v80 = 0;
      if (!__nwlog_fault(v35, &type, &v80))
        goto LABEL_195;
      if (type == OS_LOG_TYPE_FAULT)
      {
        v36 = __nwlog_obj();
        v37 = type;
        if (os_log_type_enabled(v36, type))
        {
          *(_DWORD *)buf = 136446210;
          v83 = "_http_safe_append";
          v38 = "%{public}s called with null (*remaining >= length)";
          goto LABEL_194;
        }
        goto LABEL_195;
      }
      if (!v80)
      {
        v36 = __nwlog_obj();
        v37 = type;
        if (os_log_type_enabled(v36, type))
        {
          *(_DWORD *)buf = 136446210;
          v83 = "_http_safe_append";
          v38 = "%{public}s called with null (*remaining >= length), backtrace limit exceeded";
          goto LABEL_194;
        }
        goto LABEL_195;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v36 = __nwlog_obj();
      v37 = type;
      v62 = os_log_type_enabled(v36, type);
      if (!backtrace_string)
      {
        if (v62)
        {
          *(_DWORD *)buf = 136446210;
          v83 = "_http_safe_append";
          v38 = "%{public}s called with null (*remaining >= length), no backtrace";
          goto LABEL_194;
        }
        goto LABEL_195;
      }
      if (v62)
      {
        *(_DWORD *)buf = 136446466;
        v83 = "_http_safe_append";
        v84 = 2082;
        v85 = backtrace_string;
        v59 = "%{public}s called with null (*remaining >= length), dumping backtrace:%{public}s";
        goto LABEL_124;
      }
    }
    else
    {
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      v83 = "_http_safe_append";
      v35 = (char *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      v80 = 0;
      if (!__nwlog_fault(v35, &type, &v80))
        goto LABEL_195;
      if (type == OS_LOG_TYPE_FAULT)
      {
        v36 = __nwlog_obj();
        v37 = type;
        if (os_log_type_enabled(v36, type))
        {
          *(_DWORD *)buf = 136446210;
          v83 = "_http_safe_append";
          v38 = "%{public}s called with null buffer";
LABEL_194:
          _os_log_impl(&dword_182FBE000, v36, v37, v38, buf, 0xCu);
        }
LABEL_195:
        if (v35)
          free(v35);
        v16 = 0;
        goto LABEL_15;
      }
      if (!v80)
      {
        v36 = __nwlog_obj();
        v37 = type;
        if (os_log_type_enabled(v36, type))
        {
          *(_DWORD *)buf = 136446210;
          v83 = "_http_safe_append";
          v38 = "%{public}s called with null buffer, backtrace limit exceeded";
          goto LABEL_194;
        }
        goto LABEL_195;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v36 = __nwlog_obj();
      v37 = type;
      v58 = os_log_type_enabled(v36, type);
      if (!backtrace_string)
      {
        if (v58)
        {
          *(_DWORD *)buf = 136446210;
          v83 = "_http_safe_append";
          v38 = "%{public}s called with null buffer, no backtrace";
          goto LABEL_194;
        }
        goto LABEL_195;
      }
      if (v58)
      {
        *(_DWORD *)buf = 136446466;
        v83 = "_http_safe_append";
        v84 = 2082;
        v85 = backtrace_string;
        v59 = "%{public}s called with null buffer, dumping backtrace:%{public}s";
LABEL_124:
        _os_log_impl(&dword_182FBE000, v36, v37, v59, buf, 0x16u);
      }
    }
    free(backtrace_string);
    goto LABEL_195;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446466;
  v83 = "_http_vle_encode";
  v84 = 2048;
  v85 = (const char *)a3;
  v28 = (void *)_os_log_send_and_compose_impl();
  if (__nwlog_abort((uint64_t)v28))
    goto LABEL_220;
  free(v28);
  v29 = *(_QWORD *)(a1 + 32);
  v11 = a1 + 32;
  v16 = *(char **)(*(_QWORD *)(v29 + 8) + 24);
  v13 = v11 + 8;
LABEL_15:
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v11 + 8) + 24) = v16;
  v17 = *(char **)(*(_QWORD *)(*(_QWORD *)v11 + 8) + 24);
  if (!v17)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v83 = "nw_http_fillout_binary_message_inner_block_invoke_2";
    v31 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v80 = 0;
    if (!__nwlog_fault(v31, &type, &v80))
      goto LABEL_184;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v32 = __nwlog_obj();
      v33 = type;
      if (!os_log_type_enabled(v32, type))
        goto LABEL_184;
      *(_DWORD *)buf = 136446210;
      v83 = "nw_http_fillout_binary_message_inner_block_invoke";
      v34 = "%{public}s called with null cursor";
LABEL_183:
      _os_log_impl(&dword_182FBE000, v32, v33, v34, buf, 0xCu);
      goto LABEL_184;
    }
    if (!v80)
    {
      v32 = __nwlog_obj();
      v33 = type;
      if (!os_log_type_enabled(v32, type))
        goto LABEL_184;
      *(_DWORD *)buf = 136446210;
      v83 = "nw_http_fillout_binary_message_inner_block_invoke";
      v34 = "%{public}s called with null cursor, backtrace limit exceeded";
      goto LABEL_183;
    }
    v51 = (char *)__nw_create_backtrace_string();
    v32 = __nwlog_obj();
    v33 = type;
    v52 = os_log_type_enabled(v32, type);
    if (!v51)
    {
      if (!v52)
        goto LABEL_184;
      *(_DWORD *)buf = 136446210;
      v83 = "nw_http_fillout_binary_message_inner_block_invoke";
      v34 = "%{public}s called with null cursor, no backtrace";
      goto LABEL_183;
    }
    if (!v52)
      goto LABEL_107;
LABEL_106:
    *(_DWORD *)buf = 136446466;
    v83 = "nw_http_fillout_binary_message_inner_block_invoke";
    v84 = 2082;
    v85 = v51;
    _os_log_impl(&dword_182FBE000, v32, v33, "%{public}s called with null cursor, dumping backtrace:%{public}s", buf, 0x16u);
    goto LABEL_107;
  }
  if (a3)
  {
    if (a2)
    {
      v18 = *(_QWORD *)(*(_QWORD *)v13 + 8);
      if (*(_QWORD *)(v18 + 24) >= a3)
      {
        memcpy(v17, a2, a3);
        v19 = *(_QWORD *)(v18 + 24);
        *(_QWORD *)(v18 + 24) = v19 - a3;
        if (v19 < a3)
        {
          if (gLogDatapath)
          {
            v70 = __nwlog_obj();
            if (os_log_type_enabled(v70, OS_LOG_TYPE_DEBUG))
            {
              v71 = *(_QWORD *)(v18 + 24);
              *(_DWORD *)buf = 136446978;
              v83 = "_http_safe_append";
              v84 = 2082;
              v85 = "*remaining";
              v86 = 2048;
              v87 = a3;
              v88 = 2048;
              v89 = v71;
              _os_log_impl(&dword_182FBE000, v70, OS_LOG_TYPE_DEBUG, "%{public}s Underflow: %{public}s, decrement %llu, result %llu", buf, 0x2Au);
            }
          }
          *(_QWORD *)(v18 + 24) = 0;
        }
        v17 += a3;
        goto LABEL_23;
      }
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      v83 = "_http_safe_append";
      v43 = (char *)_os_log_send_and_compose_impl();
      LOBYTE(__src) = 16;
      type = OS_LOG_TYPE_DEFAULT;
      if (!__nwlog_fault(v43, &__src, &type))
        goto LABEL_209;
      if (__src == 17)
      {
        v44 = __nwlog_obj();
        v45 = __src;
        if (os_log_type_enabled(v44, (os_log_type_t)__src))
        {
          *(_DWORD *)buf = 136446210;
          v83 = "_http_safe_append";
          v46 = "%{public}s called with null (*remaining >= length)";
          goto LABEL_208;
        }
        goto LABEL_209;
      }
      if (type == OS_LOG_TYPE_DEFAULT)
      {
        v44 = __nwlog_obj();
        v45 = __src;
        if (os_log_type_enabled(v44, (os_log_type_t)__src))
        {
          *(_DWORD *)buf = 136446210;
          v83 = "_http_safe_append";
          v46 = "%{public}s called with null (*remaining >= length), backtrace limit exceeded";
          goto LABEL_208;
        }
        goto LABEL_209;
      }
      v67 = (char *)__nw_create_backtrace_string();
      v44 = __nwlog_obj();
      v45 = __src;
      v72 = os_log_type_enabled(v44, (os_log_type_t)__src);
      if (!v67)
      {
        if (v72)
        {
          *(_DWORD *)buf = 136446210;
          v83 = "_http_safe_append";
          v46 = "%{public}s called with null (*remaining >= length), no backtrace";
          goto LABEL_208;
        }
        goto LABEL_209;
      }
      if (v72)
      {
        *(_DWORD *)buf = 136446466;
        v83 = "_http_safe_append";
        v84 = 2082;
        v85 = v67;
        v69 = "%{public}s called with null (*remaining >= length), dumping backtrace:%{public}s";
        goto LABEL_143;
      }
    }
    else
    {
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      v83 = "_http_safe_append";
      v43 = (char *)_os_log_send_and_compose_impl();
      LOBYTE(__src) = 16;
      type = OS_LOG_TYPE_DEFAULT;
      if (!__nwlog_fault(v43, &__src, &type))
        goto LABEL_209;
      if (__src == 17)
      {
        v44 = __nwlog_obj();
        v45 = __src;
        if (os_log_type_enabled(v44, (os_log_type_t)__src))
        {
          *(_DWORD *)buf = 136446210;
          v83 = "_http_safe_append";
          v46 = "%{public}s called with null data";
LABEL_208:
          _os_log_impl(&dword_182FBE000, v44, v45, v46, buf, 0xCu);
        }
LABEL_209:
        if (v43)
          free(v43);
        v17 = 0;
        goto LABEL_23;
      }
      if (type == OS_LOG_TYPE_DEFAULT)
      {
        v44 = __nwlog_obj();
        v45 = __src;
        if (os_log_type_enabled(v44, (os_log_type_t)__src))
        {
          *(_DWORD *)buf = 136446210;
          v83 = "_http_safe_append";
          v46 = "%{public}s called with null data, backtrace limit exceeded";
          goto LABEL_208;
        }
        goto LABEL_209;
      }
      v67 = (char *)__nw_create_backtrace_string();
      v44 = __nwlog_obj();
      v45 = __src;
      v68 = os_log_type_enabled(v44, (os_log_type_t)__src);
      if (!v67)
      {
        if (v68)
        {
          *(_DWORD *)buf = 136446210;
          v83 = "_http_safe_append";
          v46 = "%{public}s called with null data, no backtrace";
          goto LABEL_208;
        }
        goto LABEL_209;
      }
      if (v68)
      {
        *(_DWORD *)buf = 136446466;
        v83 = "_http_safe_append";
        v84 = 2082;
        v85 = v67;
        v69 = "%{public}s called with null data, dumping backtrace:%{public}s";
LABEL_143:
        _os_log_impl(&dword_182FBE000, v44, v45, v69, buf, 0x16u);
      }
    }
    free(v67);
    goto LABEL_209;
  }
LABEL_23:
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v11 + 8) + 24) = v17;
  v20 = *(char **)(*(_QWORD *)(*(_QWORD *)v11 + 8) + 24);
  if (!v20)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v83 = "nw_http_fillout_binary_message_inner_block_invoke";
    v31 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(__src) = 16;
    type = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v31, &__src, &type))
      goto LABEL_184;
    if (__src == 17)
    {
      v32 = __nwlog_obj();
      v33 = __src;
      if (!os_log_type_enabled(v32, (os_log_type_t)__src))
        goto LABEL_184;
      *(_DWORD *)buf = 136446210;
      v83 = "nw_http_fillout_binary_message_inner_block_invoke";
      v34 = "%{public}s called with null cursor";
      goto LABEL_183;
    }
    if (type == OS_LOG_TYPE_DEFAULT)
    {
      v32 = __nwlog_obj();
      v33 = __src;
      if (!os_log_type_enabled(v32, (os_log_type_t)__src))
        goto LABEL_184;
      *(_DWORD *)buf = 136446210;
      v83 = "nw_http_fillout_binary_message_inner_block_invoke";
      v34 = "%{public}s called with null cursor, backtrace limit exceeded";
      goto LABEL_183;
    }
    v51 = (char *)__nw_create_backtrace_string();
    v32 = __nwlog_obj();
    v33 = __src;
    v53 = os_log_type_enabled(v32, (os_log_type_t)__src);
    if (!v51)
    {
      if (!v53)
        goto LABEL_184;
      *(_DWORD *)buf = 136446210;
      v83 = "nw_http_fillout_binary_message_inner_block_invoke";
      v34 = "%{public}s called with null cursor, no backtrace";
      goto LABEL_183;
    }
    if (!v53)
      goto LABEL_107;
    goto LABEL_106;
  }
  if (a5 <= 0x3F)
  {
    __src = a5;
    v21 = 1;
    goto LABEL_32;
  }
  if (!(a5 >> 14))
  {
    __src = bswap32(a5 | 0x4000) >> 16;
    v21 = 2;
    goto LABEL_32;
  }
  if (!(a5 >> 30))
  {
    __src = bswap32(a5 | 0x80000000);
    v21 = 4;
    goto LABEL_32;
  }
  if (a5 >> 62)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446466;
    v83 = "_http_vle_encode";
    v84 = 2048;
    v85 = (const char *)a5;
    v30 = (void *)_os_log_send_and_compose_impl();
    if (!__nwlog_abort((uint64_t)v30))
    {
      free(v30);
      v24 = *(char **)(*(_QWORD *)(*(_QWORD *)v11 + 8) + 24);
      goto LABEL_37;
    }
LABEL_220:
    __break(1u);
    return;
  }
  __src = bswap64(a5 | 0xC000000000000000);
  v21 = 8;
LABEL_32:
  v22 = *(_QWORD *)(*(_QWORD *)v13 + 8);
  if (*(_QWORD *)(v22 + 24) >= v21)
  {
    memcpy(v20, &__src, v21);
    v23 = *(_QWORD *)(v22 + 24);
    *(_QWORD *)(v22 + 24) = v23 - v21;
    if (v23 < v21)
    {
      if (gLogDatapath)
      {
        v63 = __nwlog_obj();
        if (os_log_type_enabled(v63, OS_LOG_TYPE_DEBUG))
        {
          v64 = *(_QWORD *)(v22 + 24);
          *(_DWORD *)buf = 136446978;
          v83 = "_http_safe_append";
          v84 = 2082;
          v85 = "*remaining";
          v86 = 2048;
          v87 = v21;
          v88 = 2048;
          v89 = v64;
          _os_log_impl(&dword_182FBE000, v63, OS_LOG_TYPE_DEBUG, "%{public}s Underflow: %{public}s, decrement %llu, result %llu", buf, 0x2Au);
        }
      }
      *(_QWORD *)(v22 + 24) = 0;
    }
    v24 = &v20[v21];
    goto LABEL_37;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v83 = "_http_safe_append";
  v39 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v80 = 0;
  if (__nwlog_fault(v39, &type, &v80))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v40 = __nwlog_obj();
      v41 = type;
      if (os_log_type_enabled(v40, type))
      {
        *(_DWORD *)buf = 136446210;
        v83 = "_http_safe_append";
        v42 = "%{public}s called with null (*remaining >= length)";
LABEL_200:
        _os_log_impl(&dword_182FBE000, v40, v41, v42, buf, 0xCu);
      }
    }
    else if (v80)
    {
      v65 = (char *)__nw_create_backtrace_string();
      v40 = __nwlog_obj();
      v41 = type;
      v66 = os_log_type_enabled(v40, type);
      if (v65)
      {
        if (v66)
        {
          *(_DWORD *)buf = 136446466;
          v83 = "_http_safe_append";
          v84 = 2082;
          v85 = v65;
          _os_log_impl(&dword_182FBE000, v40, v41, "%{public}s called with null (*remaining >= length), dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v65);
        goto LABEL_201;
      }
      if (v66)
      {
        *(_DWORD *)buf = 136446210;
        v83 = "_http_safe_append";
        v42 = "%{public}s called with null (*remaining >= length), no backtrace";
        goto LABEL_200;
      }
    }
    else
    {
      v40 = __nwlog_obj();
      v41 = type;
      if (os_log_type_enabled(v40, type))
      {
        *(_DWORD *)buf = 136446210;
        v83 = "_http_safe_append";
        v42 = "%{public}s called with null (*remaining >= length), backtrace limit exceeded";
        goto LABEL_200;
      }
    }
  }
LABEL_201:
  if (v39)
    free(v39);
  v24 = 0;
LABEL_37:
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v11 + 8) + 24) = v24;
  v25 = *(char **)(*(_QWORD *)(*(_QWORD *)v11 + 8) + 24);
  if (v25)
  {
    if (!a5)
      goto LABEL_45;
    if (a4)
    {
      v26 = *(_QWORD *)(*(_QWORD *)v13 + 8);
      if (*(_QWORD *)(v26 + 24) >= a5)
      {
        memcpy(v25, a4, a5);
        v27 = *(_QWORD *)(v26 + 24);
        *(_QWORD *)(v26 + 24) = v27 - a5;
        if (v27 < a5)
        {
          if (gLogDatapath)
          {
            v76 = __nwlog_obj();
            if (os_log_type_enabled(v76, OS_LOG_TYPE_DEBUG))
            {
              v77 = *(_QWORD *)(v26 + 24);
              *(_DWORD *)buf = 136446978;
              v83 = "_http_safe_append";
              v84 = 2082;
              v85 = "*remaining";
              v86 = 2048;
              v87 = a5;
              v88 = 2048;
              v89 = v77;
              _os_log_impl(&dword_182FBE000, v76, OS_LOG_TYPE_DEBUG, "%{public}s Underflow: %{public}s, decrement %llu, result %llu", buf, 0x2Au);
            }
          }
          *(_QWORD *)(v26 + 24) = 0;
        }
        v25 += a5;
        goto LABEL_45;
      }
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      v83 = "_http_safe_append";
      v47 = (char *)_os_log_send_and_compose_impl();
      LOBYTE(__src) = 16;
      type = OS_LOG_TYPE_DEFAULT;
      if (!__nwlog_fault(v47, &__src, &type))
        goto LABEL_217;
      if (__src == 17)
      {
        v48 = __nwlog_obj();
        v49 = __src;
        if (os_log_type_enabled(v48, (os_log_type_t)__src))
        {
          *(_DWORD *)buf = 136446210;
          v83 = "_http_safe_append";
          v50 = "%{public}s called with null (*remaining >= length)";
          goto LABEL_216;
        }
        goto LABEL_217;
      }
      if (type == OS_LOG_TYPE_DEFAULT)
      {
        v48 = __nwlog_obj();
        v49 = __src;
        if (os_log_type_enabled(v48, (os_log_type_t)__src))
        {
          *(_DWORD *)buf = 136446210;
          v83 = "_http_safe_append";
          v50 = "%{public}s called with null (*remaining >= length), backtrace limit exceeded";
          goto LABEL_216;
        }
        goto LABEL_217;
      }
      v73 = (char *)__nw_create_backtrace_string();
      v48 = __nwlog_obj();
      v49 = __src;
      v78 = os_log_type_enabled(v48, (os_log_type_t)__src);
      if (!v73)
      {
        if (v78)
        {
          *(_DWORD *)buf = 136446210;
          v83 = "_http_safe_append";
          v50 = "%{public}s called with null (*remaining >= length), no backtrace";
          goto LABEL_216;
        }
        goto LABEL_217;
      }
      if (v78)
      {
        *(_DWORD *)buf = 136446466;
        v83 = "_http_safe_append";
        v84 = 2082;
        v85 = v73;
        v75 = "%{public}s called with null (*remaining >= length), dumping backtrace:%{public}s";
        goto LABEL_155;
      }
    }
    else
    {
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      v83 = "_http_safe_append";
      v47 = (char *)_os_log_send_and_compose_impl();
      LOBYTE(__src) = 16;
      type = OS_LOG_TYPE_DEFAULT;
      if (!__nwlog_fault(v47, &__src, &type))
        goto LABEL_217;
      if (__src == 17)
      {
        v48 = __nwlog_obj();
        v49 = __src;
        if (os_log_type_enabled(v48, (os_log_type_t)__src))
        {
          *(_DWORD *)buf = 136446210;
          v83 = "_http_safe_append";
          v50 = "%{public}s called with null data";
LABEL_216:
          _os_log_impl(&dword_182FBE000, v48, v49, v50, buf, 0xCu);
        }
LABEL_217:
        if (v47)
          free(v47);
        v25 = 0;
LABEL_45:
        *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v11 + 8) + 24) = v25;
        if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v11 + 8) + 24))
          return;
        __nwlog_obj();
        *(_DWORD *)buf = 136446210;
        v83 = "nw_http_fillout_binary_message_inner_block_invoke";
        v31 = (char *)_os_log_send_and_compose_impl();
        LOBYTE(__src) = 16;
        type = OS_LOG_TYPE_DEFAULT;
        if (__nwlog_fault(v31, &__src, &type))
        {
          if (__src == 17)
          {
            v32 = __nwlog_obj();
            v33 = __src;
            if (!os_log_type_enabled(v32, (os_log_type_t)__src))
              goto LABEL_184;
            *(_DWORD *)buf = 136446210;
            v83 = "nw_http_fillout_binary_message_inner_block_invoke";
            v34 = "%{public}s called with null cursor";
            goto LABEL_183;
          }
          if (type == OS_LOG_TYPE_DEFAULT)
          {
            v32 = __nwlog_obj();
            v33 = __src;
            if (!os_log_type_enabled(v32, (os_log_type_t)__src))
              goto LABEL_184;
            *(_DWORD *)buf = 136446210;
            v83 = "nw_http_fillout_binary_message_inner_block_invoke";
            v34 = "%{public}s called with null cursor, backtrace limit exceeded";
            goto LABEL_183;
          }
          v55 = (char *)__nw_create_backtrace_string();
          v32 = __nwlog_obj();
          v33 = __src;
          v56 = os_log_type_enabled(v32, (os_log_type_t)__src);
          if (!v55)
          {
            if (!v56)
              goto LABEL_184;
            *(_DWORD *)buf = 136446210;
            v83 = "nw_http_fillout_binary_message_inner_block_invoke";
            v34 = "%{public}s called with null cursor, no backtrace";
            goto LABEL_183;
          }
          if (v56)
          {
            *(_DWORD *)buf = 136446466;
            v83 = "nw_http_fillout_binary_message_inner_block_invoke";
            v84 = 2082;
            v85 = v55;
            _os_log_impl(&dword_182FBE000, v32, v33, "%{public}s called with null cursor, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v55);
        }
LABEL_184:
        if (v31)
          goto LABEL_185;
        return;
      }
      if (type == OS_LOG_TYPE_DEFAULT)
      {
        v48 = __nwlog_obj();
        v49 = __src;
        if (os_log_type_enabled(v48, (os_log_type_t)__src))
        {
          *(_DWORD *)buf = 136446210;
          v83 = "_http_safe_append";
          v50 = "%{public}s called with null data, backtrace limit exceeded";
          goto LABEL_216;
        }
        goto LABEL_217;
      }
      v73 = (char *)__nw_create_backtrace_string();
      v48 = __nwlog_obj();
      v49 = __src;
      v74 = os_log_type_enabled(v48, (os_log_type_t)__src);
      if (!v73)
      {
        if (v74)
        {
          *(_DWORD *)buf = 136446210;
          v83 = "_http_safe_append";
          v50 = "%{public}s called with null data, no backtrace";
          goto LABEL_216;
        }
        goto LABEL_217;
      }
      if (v74)
      {
        *(_DWORD *)buf = 136446466;
        v83 = "_http_safe_append";
        v84 = 2082;
        v85 = v73;
        v75 = "%{public}s called with null data, dumping backtrace:%{public}s";
LABEL_155:
        _os_log_impl(&dword_182FBE000, v48, v49, v75, buf, 0x16u);
      }
    }
    free(v73);
    goto LABEL_217;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v83 = "nw_http_fillout_binary_message_inner_block_invoke";
  v31 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v80 = 0;
  if (!__nwlog_fault(v31, &type, &v80))
    goto LABEL_184;
  if (type == OS_LOG_TYPE_FAULT)
  {
    v32 = __nwlog_obj();
    v33 = type;
    if (!os_log_type_enabled(v32, type))
      goto LABEL_184;
    *(_DWORD *)buf = 136446210;
    v83 = "nw_http_fillout_binary_message_inner_block_invoke";
    v34 = "%{public}s called with null cursor";
    goto LABEL_183;
  }
  if (!v80)
  {
    v32 = __nwlog_obj();
    v33 = type;
    if (!os_log_type_enabled(v32, type))
      goto LABEL_184;
    *(_DWORD *)buf = 136446210;
    v83 = "nw_http_fillout_binary_message_inner_block_invoke";
    v34 = "%{public}s called with null cursor, backtrace limit exceeded";
    goto LABEL_183;
  }
  v51 = (char *)__nw_create_backtrace_string();
  v32 = __nwlog_obj();
  v33 = type;
  v54 = os_log_type_enabled(v32, type);
  if (!v51)
  {
    if (!v54)
      goto LABEL_184;
    *(_DWORD *)buf = 136446210;
    v83 = "nw_http_fillout_binary_message_inner_block_invoke";
    v34 = "%{public}s called with null cursor, no backtrace";
    goto LABEL_183;
  }
  if (v54)
    goto LABEL_106;
LABEL_107:
  free(v51);
  if (v31)
LABEL_185:
    free(v31);
}

void ___ZL36nw_http_fillout_binary_message_innerP20nw_protocol_metadatabPKhmPhm_block_invoke_2(uint64_t a1, const void *a2, size_t a3, const void *a4, size_t a5)
{
  size_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  size_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  void *v30;
  char *v31;
  NSObject *v32;
  os_log_type_t v33;
  const char *v34;
  char *v35;
  NSObject *v36;
  os_log_type_t v37;
  const char *v38;
  char *v39;
  NSObject *v40;
  os_log_type_t v41;
  const char *v42;
  char *v43;
  NSObject *v44;
  os_log_type_t v45;
  const char *v46;
  char *v47;
  NSObject *v48;
  os_log_type_t v49;
  const char *v50;
  char *v51;
  _BOOL4 v52;
  _BOOL4 v53;
  _BOOL4 v54;
  char *v55;
  _BOOL4 v56;
  char *backtrace_string;
  _BOOL4 v58;
  const char *v59;
  NSObject *v60;
  uint64_t v61;
  _BOOL4 v62;
  NSObject *v63;
  uint64_t v64;
  char *v65;
  _BOOL4 v66;
  char *v67;
  _BOOL4 v68;
  const char *v69;
  NSObject *v70;
  uint64_t v71;
  _BOOL4 v72;
  char *v73;
  _BOOL4 v74;
  const char *v75;
  NSObject *v76;
  uint64_t v77;
  _BOOL4 v78;
  unint64_t __src;
  char v80;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v83;
  __int16 v84;
  const char *v85;
  __int16 v86;
  size_t v87;
  __int16 v88;
  uint64_t v89;
  uint64_t v90;

  v90 = *MEMORY[0x1E0C80C00];
  if (a3 <= 0x3F)
  {
    __src = a3;
    v10 = 1;
    goto LABEL_9;
  }
  if (!(a3 >> 14))
  {
    __src = bswap32(a3 | 0x4000) >> 16;
    v10 = 2;
    goto LABEL_9;
  }
  if (!(a3 >> 30))
  {
    __src = bswap32(a3 | 0x80000000);
    v10 = 4;
    goto LABEL_9;
  }
  if (!(a3 >> 62))
  {
    __src = bswap64(a3 | 0xC000000000000000);
    v10 = 8;
LABEL_9:
    v11 = a1 + 32;
    v12 = *(char **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    v13 = a1 + 40;
    if (v12)
    {
      v14 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
      if (*(_QWORD *)(v14 + 24) >= v10)
      {
        memcpy(v12, &__src, v10);
        v15 = *(_QWORD *)(v14 + 24);
        *(_QWORD *)(v14 + 24) = v15 - v10;
        if (v15 < v10)
        {
          if (gLogDatapath)
          {
            v60 = __nwlog_obj();
            if (os_log_type_enabled(v60, OS_LOG_TYPE_DEBUG))
            {
              v61 = *(_QWORD *)(v14 + 24);
              *(_DWORD *)buf = 136446978;
              v83 = "_http_safe_append";
              v84 = 2082;
              v85 = "*remaining";
              v86 = 2048;
              v87 = v10;
              v88 = 2048;
              v89 = v61;
              _os_log_impl(&dword_182FBE000, v60, OS_LOG_TYPE_DEBUG, "%{public}s Underflow: %{public}s, decrement %llu, result %llu", buf, 0x2Au);
            }
          }
          *(_QWORD *)(v14 + 24) = 0;
        }
        v16 = &v12[v10];
        goto LABEL_15;
      }
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      v83 = "_http_safe_append";
      v35 = (char *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      v80 = 0;
      if (!__nwlog_fault(v35, &type, &v80))
        goto LABEL_195;
      if (type == OS_LOG_TYPE_FAULT)
      {
        v36 = __nwlog_obj();
        v37 = type;
        if (os_log_type_enabled(v36, type))
        {
          *(_DWORD *)buf = 136446210;
          v83 = "_http_safe_append";
          v38 = "%{public}s called with null (*remaining >= length)";
          goto LABEL_194;
        }
        goto LABEL_195;
      }
      if (!v80)
      {
        v36 = __nwlog_obj();
        v37 = type;
        if (os_log_type_enabled(v36, type))
        {
          *(_DWORD *)buf = 136446210;
          v83 = "_http_safe_append";
          v38 = "%{public}s called with null (*remaining >= length), backtrace limit exceeded";
          goto LABEL_194;
        }
        goto LABEL_195;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v36 = __nwlog_obj();
      v37 = type;
      v62 = os_log_type_enabled(v36, type);
      if (!backtrace_string)
      {
        if (v62)
        {
          *(_DWORD *)buf = 136446210;
          v83 = "_http_safe_append";
          v38 = "%{public}s called with null (*remaining >= length), no backtrace";
          goto LABEL_194;
        }
        goto LABEL_195;
      }
      if (v62)
      {
        *(_DWORD *)buf = 136446466;
        v83 = "_http_safe_append";
        v84 = 2082;
        v85 = backtrace_string;
        v59 = "%{public}s called with null (*remaining >= length), dumping backtrace:%{public}s";
        goto LABEL_124;
      }
    }
    else
    {
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      v83 = "_http_safe_append";
      v35 = (char *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      v80 = 0;
      if (!__nwlog_fault(v35, &type, &v80))
        goto LABEL_195;
      if (type == OS_LOG_TYPE_FAULT)
      {
        v36 = __nwlog_obj();
        v37 = type;
        if (os_log_type_enabled(v36, type))
        {
          *(_DWORD *)buf = 136446210;
          v83 = "_http_safe_append";
          v38 = "%{public}s called with null buffer";
LABEL_194:
          _os_log_impl(&dword_182FBE000, v36, v37, v38, buf, 0xCu);
        }
LABEL_195:
        if (v35)
          free(v35);
        v16 = 0;
        goto LABEL_15;
      }
      if (!v80)
      {
        v36 = __nwlog_obj();
        v37 = type;
        if (os_log_type_enabled(v36, type))
        {
          *(_DWORD *)buf = 136446210;
          v83 = "_http_safe_append";
          v38 = "%{public}s called with null buffer, backtrace limit exceeded";
          goto LABEL_194;
        }
        goto LABEL_195;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v36 = __nwlog_obj();
      v37 = type;
      v58 = os_log_type_enabled(v36, type);
      if (!backtrace_string)
      {
        if (v58)
        {
          *(_DWORD *)buf = 136446210;
          v83 = "_http_safe_append";
          v38 = "%{public}s called with null buffer, no backtrace";
          goto LABEL_194;
        }
        goto LABEL_195;
      }
      if (v58)
      {
        *(_DWORD *)buf = 136446466;
        v83 = "_http_safe_append";
        v84 = 2082;
        v85 = backtrace_string;
        v59 = "%{public}s called with null buffer, dumping backtrace:%{public}s";
LABEL_124:
        _os_log_impl(&dword_182FBE000, v36, v37, v59, buf, 0x16u);
      }
    }
    free(backtrace_string);
    goto LABEL_195;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446466;
  v83 = "_http_vle_encode";
  v84 = 2048;
  v85 = (const char *)a3;
  v28 = (void *)_os_log_send_and_compose_impl();
  if (__nwlog_abort((uint64_t)v28))
    goto LABEL_220;
  free(v28);
  v29 = *(_QWORD *)(a1 + 32);
  v11 = a1 + 32;
  v16 = *(char **)(*(_QWORD *)(v29 + 8) + 24);
  v13 = v11 + 8;
LABEL_15:
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v11 + 8) + 24) = v16;
  v17 = *(char **)(*(_QWORD *)(*(_QWORD *)v11 + 8) + 24);
  if (!v17)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v83 = "nw_http_fillout_binary_message_inner_block_invoke_2";
    v31 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v80 = 0;
    if (!__nwlog_fault(v31, &type, &v80))
      goto LABEL_184;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v32 = __nwlog_obj();
      v33 = type;
      if (!os_log_type_enabled(v32, type))
        goto LABEL_184;
      *(_DWORD *)buf = 136446210;
      v83 = "nw_http_fillout_binary_message_inner_block_invoke";
      v34 = "%{public}s called with null cursor";
LABEL_183:
      _os_log_impl(&dword_182FBE000, v32, v33, v34, buf, 0xCu);
      goto LABEL_184;
    }
    if (!v80)
    {
      v32 = __nwlog_obj();
      v33 = type;
      if (!os_log_type_enabled(v32, type))
        goto LABEL_184;
      *(_DWORD *)buf = 136446210;
      v83 = "nw_http_fillout_binary_message_inner_block_invoke";
      v34 = "%{public}s called with null cursor, backtrace limit exceeded";
      goto LABEL_183;
    }
    v51 = (char *)__nw_create_backtrace_string();
    v32 = __nwlog_obj();
    v33 = type;
    v52 = os_log_type_enabled(v32, type);
    if (!v51)
    {
      if (!v52)
        goto LABEL_184;
      *(_DWORD *)buf = 136446210;
      v83 = "nw_http_fillout_binary_message_inner_block_invoke";
      v34 = "%{public}s called with null cursor, no backtrace";
      goto LABEL_183;
    }
    if (!v52)
      goto LABEL_107;
LABEL_106:
    *(_DWORD *)buf = 136446466;
    v83 = "nw_http_fillout_binary_message_inner_block_invoke";
    v84 = 2082;
    v85 = v51;
    _os_log_impl(&dword_182FBE000, v32, v33, "%{public}s called with null cursor, dumping backtrace:%{public}s", buf, 0x16u);
    goto LABEL_107;
  }
  if (a3)
  {
    if (a2)
    {
      v18 = *(_QWORD *)(*(_QWORD *)v13 + 8);
      if (*(_QWORD *)(v18 + 24) >= a3)
      {
        memcpy(v17, a2, a3);
        v19 = *(_QWORD *)(v18 + 24);
        *(_QWORD *)(v18 + 24) = v19 - a3;
        if (v19 < a3)
        {
          if (gLogDatapath)
          {
            v70 = __nwlog_obj();
            if (os_log_type_enabled(v70, OS_LOG_TYPE_DEBUG))
            {
              v71 = *(_QWORD *)(v18 + 24);
              *(_DWORD *)buf = 136446978;
              v83 = "_http_safe_append";
              v84 = 2082;
              v85 = "*remaining";
              v86 = 2048;
              v87 = a3;
              v88 = 2048;
              v89 = v71;
              _os_log_impl(&dword_182FBE000, v70, OS_LOG_TYPE_DEBUG, "%{public}s Underflow: %{public}s, decrement %llu, result %llu", buf, 0x2Au);
            }
          }
          *(_QWORD *)(v18 + 24) = 0;
        }
        v17 += a3;
        goto LABEL_23;
      }
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      v83 = "_http_safe_append";
      v43 = (char *)_os_log_send_and_compose_impl();
      LOBYTE(__src) = 16;
      type = OS_LOG_TYPE_DEFAULT;
      if (!__nwlog_fault(v43, &__src, &type))
        goto LABEL_209;
      if (__src == 17)
      {
        v44 = __nwlog_obj();
        v45 = __src;
        if (os_log_type_enabled(v44, (os_log_type_t)__src))
        {
          *(_DWORD *)buf = 136446210;
          v83 = "_http_safe_append";
          v46 = "%{public}s called with null (*remaining >= length)";
          goto LABEL_208;
        }
        goto LABEL_209;
      }
      if (type == OS_LOG_TYPE_DEFAULT)
      {
        v44 = __nwlog_obj();
        v45 = __src;
        if (os_log_type_enabled(v44, (os_log_type_t)__src))
        {
          *(_DWORD *)buf = 136446210;
          v83 = "_http_safe_append";
          v46 = "%{public}s called with null (*remaining >= length), backtrace limit exceeded";
          goto LABEL_208;
        }
        goto LABEL_209;
      }
      v67 = (char *)__nw_create_backtrace_string();
      v44 = __nwlog_obj();
      v45 = __src;
      v72 = os_log_type_enabled(v44, (os_log_type_t)__src);
      if (!v67)
      {
        if (v72)
        {
          *(_DWORD *)buf = 136446210;
          v83 = "_http_safe_append";
          v46 = "%{public}s called with null (*remaining >= length), no backtrace";
          goto LABEL_208;
        }
        goto LABEL_209;
      }
      if (v72)
      {
        *(_DWORD *)buf = 136446466;
        v83 = "_http_safe_append";
        v84 = 2082;
        v85 = v67;
        v69 = "%{public}s called with null (*remaining >= length), dumping backtrace:%{public}s";
        goto LABEL_143;
      }
    }
    else
    {
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      v83 = "_http_safe_append";
      v43 = (char *)_os_log_send_and_compose_impl();
      LOBYTE(__src) = 16;
      type = OS_LOG_TYPE_DEFAULT;
      if (!__nwlog_fault(v43, &__src, &type))
        goto LABEL_209;
      if (__src == 17)
      {
        v44 = __nwlog_obj();
        v45 = __src;
        if (os_log_type_enabled(v44, (os_log_type_t)__src))
        {
          *(_DWORD *)buf = 136446210;
          v83 = "_http_safe_append";
          v46 = "%{public}s called with null data";
LABEL_208:
          _os_log_impl(&dword_182FBE000, v44, v45, v46, buf, 0xCu);
        }
LABEL_209:
        if (v43)
          free(v43);
        v17 = 0;
        goto LABEL_23;
      }
      if (type == OS_LOG_TYPE_DEFAULT)
      {
        v44 = __nwlog_obj();
        v45 = __src;
        if (os_log_type_enabled(v44, (os_log_type_t)__src))
        {
          *(_DWORD *)buf = 136446210;
          v83 = "_http_safe_append";
          v46 = "%{public}s called with null data, backtrace limit exceeded";
          goto LABEL_208;
        }
        goto LABEL_209;
      }
      v67 = (char *)__nw_create_backtrace_string();
      v44 = __nwlog_obj();
      v45 = __src;
      v68 = os_log_type_enabled(v44, (os_log_type_t)__src);
      if (!v67)
      {
        if (v68)
        {
          *(_DWORD *)buf = 136446210;
          v83 = "_http_safe_append";
          v46 = "%{public}s called with null data, no backtrace";
          goto LABEL_208;
        }
        goto LABEL_209;
      }
      if (v68)
      {
        *(_DWORD *)buf = 136446466;
        v83 = "_http_safe_append";
        v84 = 2082;
        v85 = v67;
        v69 = "%{public}s called with null data, dumping backtrace:%{public}s";
LABEL_143:
        _os_log_impl(&dword_182FBE000, v44, v45, v69, buf, 0x16u);
      }
    }
    free(v67);
    goto LABEL_209;
  }
LABEL_23:
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v11 + 8) + 24) = v17;
  v20 = *(char **)(*(_QWORD *)(*(_QWORD *)v11 + 8) + 24);
  if (!v20)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v83 = "nw_http_fillout_binary_message_inner_block_invoke";
    v31 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(__src) = 16;
    type = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v31, &__src, &type))
      goto LABEL_184;
    if (__src == 17)
    {
      v32 = __nwlog_obj();
      v33 = __src;
      if (!os_log_type_enabled(v32, (os_log_type_t)__src))
        goto LABEL_184;
      *(_DWORD *)buf = 136446210;
      v83 = "nw_http_fillout_binary_message_inner_block_invoke";
      v34 = "%{public}s called with null cursor";
      goto LABEL_183;
    }
    if (type == OS_LOG_TYPE_DEFAULT)
    {
      v32 = __nwlog_obj();
      v33 = __src;
      if (!os_log_type_enabled(v32, (os_log_type_t)__src))
        goto LABEL_184;
      *(_DWORD *)buf = 136446210;
      v83 = "nw_http_fillout_binary_message_inner_block_invoke";
      v34 = "%{public}s called with null cursor, backtrace limit exceeded";
      goto LABEL_183;
    }
    v51 = (char *)__nw_create_backtrace_string();
    v32 = __nwlog_obj();
    v33 = __src;
    v53 = os_log_type_enabled(v32, (os_log_type_t)__src);
    if (!v51)
    {
      if (!v53)
        goto LABEL_184;
      *(_DWORD *)buf = 136446210;
      v83 = "nw_http_fillout_binary_message_inner_block_invoke";
      v34 = "%{public}s called with null cursor, no backtrace";
      goto LABEL_183;
    }
    if (!v53)
      goto LABEL_107;
    goto LABEL_106;
  }
  if (a5 <= 0x3F)
  {
    __src = a5;
    v21 = 1;
    goto LABEL_32;
  }
  if (!(a5 >> 14))
  {
    __src = bswap32(a5 | 0x4000) >> 16;
    v21 = 2;
    goto LABEL_32;
  }
  if (!(a5 >> 30))
  {
    __src = bswap32(a5 | 0x80000000);
    v21 = 4;
    goto LABEL_32;
  }
  if (a5 >> 62)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446466;
    v83 = "_http_vle_encode";
    v84 = 2048;
    v85 = (const char *)a5;
    v30 = (void *)_os_log_send_and_compose_impl();
    if (!__nwlog_abort((uint64_t)v30))
    {
      free(v30);
      v24 = *(char **)(*(_QWORD *)(*(_QWORD *)v11 + 8) + 24);
      goto LABEL_37;
    }
LABEL_220:
    __break(1u);
    return;
  }
  __src = bswap64(a5 | 0xC000000000000000);
  v21 = 8;
LABEL_32:
  v22 = *(_QWORD *)(*(_QWORD *)v13 + 8);
  if (*(_QWORD *)(v22 + 24) >= v21)
  {
    memcpy(v20, &__src, v21);
    v23 = *(_QWORD *)(v22 + 24);
    *(_QWORD *)(v22 + 24) = v23 - v21;
    if (v23 < v21)
    {
      if (gLogDatapath)
      {
        v63 = __nwlog_obj();
        if (os_log_type_enabled(v63, OS_LOG_TYPE_DEBUG))
        {
          v64 = *(_QWORD *)(v22 + 24);
          *(_DWORD *)buf = 136446978;
          v83 = "_http_safe_append";
          v84 = 2082;
          v85 = "*remaining";
          v86 = 2048;
          v87 = v21;
          v88 = 2048;
          v89 = v64;
          _os_log_impl(&dword_182FBE000, v63, OS_LOG_TYPE_DEBUG, "%{public}s Underflow: %{public}s, decrement %llu, result %llu", buf, 0x2Au);
        }
      }
      *(_QWORD *)(v22 + 24) = 0;
    }
    v24 = &v20[v21];
    goto LABEL_37;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v83 = "_http_safe_append";
  v39 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v80 = 0;
  if (__nwlog_fault(v39, &type, &v80))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v40 = __nwlog_obj();
      v41 = type;
      if (os_log_type_enabled(v40, type))
      {
        *(_DWORD *)buf = 136446210;
        v83 = "_http_safe_append";
        v42 = "%{public}s called with null (*remaining >= length)";
LABEL_200:
        _os_log_impl(&dword_182FBE000, v40, v41, v42, buf, 0xCu);
      }
    }
    else if (v80)
    {
      v65 = (char *)__nw_create_backtrace_string();
      v40 = __nwlog_obj();
      v41 = type;
      v66 = os_log_type_enabled(v40, type);
      if (v65)
      {
        if (v66)
        {
          *(_DWORD *)buf = 136446466;
          v83 = "_http_safe_append";
          v84 = 2082;
          v85 = v65;
          _os_log_impl(&dword_182FBE000, v40, v41, "%{public}s called with null (*remaining >= length), dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v65);
        goto LABEL_201;
      }
      if (v66)
      {
        *(_DWORD *)buf = 136446210;
        v83 = "_http_safe_append";
        v42 = "%{public}s called with null (*remaining >= length), no backtrace";
        goto LABEL_200;
      }
    }
    else
    {
      v40 = __nwlog_obj();
      v41 = type;
      if (os_log_type_enabled(v40, type))
      {
        *(_DWORD *)buf = 136446210;
        v83 = "_http_safe_append";
        v42 = "%{public}s called with null (*remaining >= length), backtrace limit exceeded";
        goto LABEL_200;
      }
    }
  }
LABEL_201:
  if (v39)
    free(v39);
  v24 = 0;
LABEL_37:
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v11 + 8) + 24) = v24;
  v25 = *(char **)(*(_QWORD *)(*(_QWORD *)v11 + 8) + 24);
  if (v25)
  {
    if (!a5)
      goto LABEL_45;
    if (a4)
    {
      v26 = *(_QWORD *)(*(_QWORD *)v13 + 8);
      if (*(_QWORD *)(v26 + 24) >= a5)
      {
        memcpy(v25, a4, a5);
        v27 = *(_QWORD *)(v26 + 24);
        *(_QWORD *)(v26 + 24) = v27 - a5;
        if (v27 < a5)
        {
          if (gLogDatapath)
          {
            v76 = __nwlog_obj();
            if (os_log_type_enabled(v76, OS_LOG_TYPE_DEBUG))
            {
              v77 = *(_QWORD *)(v26 + 24);
              *(_DWORD *)buf = 136446978;
              v83 = "_http_safe_append";
              v84 = 2082;
              v85 = "*remaining";
              v86 = 2048;
              v87 = a5;
              v88 = 2048;
              v89 = v77;
              _os_log_impl(&dword_182FBE000, v76, OS_LOG_TYPE_DEBUG, "%{public}s Underflow: %{public}s, decrement %llu, result %llu", buf, 0x2Au);
            }
          }
          *(_QWORD *)(v26 + 24) = 0;
        }
        v25 += a5;
        goto LABEL_45;
      }
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      v83 = "_http_safe_append";
      v47 = (char *)_os_log_send_and_compose_impl();
      LOBYTE(__src) = 16;
      type = OS_LOG_TYPE_DEFAULT;
      if (!__nwlog_fault(v47, &__src, &type))
        goto LABEL_217;
      if (__src == 17)
      {
        v48 = __nwlog_obj();
        v49 = __src;
        if (os_log_type_enabled(v48, (os_log_type_t)__src))
        {
          *(_DWORD *)buf = 136446210;
          v83 = "_http_safe_append";
          v50 = "%{public}s called with null (*remaining >= length)";
          goto LABEL_216;
        }
        goto LABEL_217;
      }
      if (type == OS_LOG_TYPE_DEFAULT)
      {
        v48 = __nwlog_obj();
        v49 = __src;
        if (os_log_type_enabled(v48, (os_log_type_t)__src))
        {
          *(_DWORD *)buf = 136446210;
          v83 = "_http_safe_append";
          v50 = "%{public}s called with null (*remaining >= length), backtrace limit exceeded";
          goto LABEL_216;
        }
        goto LABEL_217;
      }
      v73 = (char *)__nw_create_backtrace_string();
      v48 = __nwlog_obj();
      v49 = __src;
      v78 = os_log_type_enabled(v48, (os_log_type_t)__src);
      if (!v73)
      {
        if (v78)
        {
          *(_DWORD *)buf = 136446210;
          v83 = "_http_safe_append";
          v50 = "%{public}s called with null (*remaining >= length), no backtrace";
          goto LABEL_216;
        }
        goto LABEL_217;
      }
      if (v78)
      {
        *(_DWORD *)buf = 136446466;
        v83 = "_http_safe_append";
        v84 = 2082;
        v85 = v73;
        v75 = "%{public}s called with null (*remaining >= length), dumping backtrace:%{public}s";
        goto LABEL_155;
      }
    }
    else
    {
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      v83 = "_http_safe_append";
      v47 = (char *)_os_log_send_and_compose_impl();
      LOBYTE(__src) = 16;
      type = OS_LOG_TYPE_DEFAULT;
      if (!__nwlog_fault(v47, &__src, &type))
        goto LABEL_217;
      if (__src == 17)
      {
        v48 = __nwlog_obj();
        v49 = __src;
        if (os_log_type_enabled(v48, (os_log_type_t)__src))
        {
          *(_DWORD *)buf = 136446210;
          v83 = "_http_safe_append";
          v50 = "%{public}s called with null data";
LABEL_216:
          _os_log_impl(&dword_182FBE000, v48, v49, v50, buf, 0xCu);
        }
LABEL_217:
        if (v47)
          free(v47);
        v25 = 0;
LABEL_45:
        *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v11 + 8) + 24) = v25;
        if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v11 + 8) + 24))
          return;
        __nwlog_obj();
        *(_DWORD *)buf = 136446210;
        v83 = "nw_http_fillout_binary_message_inner_block_invoke";
        v31 = (char *)_os_log_send_and_compose_impl();
        LOBYTE(__src) = 16;
        type = OS_LOG_TYPE_DEFAULT;
        if (__nwlog_fault(v31, &__src, &type))
        {
          if (__src == 17)
          {
            v32 = __nwlog_obj();
            v33 = __src;
            if (!os_log_type_enabled(v32, (os_log_type_t)__src))
              goto LABEL_184;
            *(_DWORD *)buf = 136446210;
            v83 = "nw_http_fillout_binary_message_inner_block_invoke";
            v34 = "%{public}s called with null cursor";
            goto LABEL_183;
          }
          if (type == OS_LOG_TYPE_DEFAULT)
          {
            v32 = __nwlog_obj();
            v33 = __src;
            if (!os_log_type_enabled(v32, (os_log_type_t)__src))
              goto LABEL_184;
            *(_DWORD *)buf = 136446210;
            v83 = "nw_http_fillout_binary_message_inner_block_invoke";
            v34 = "%{public}s called with null cursor, backtrace limit exceeded";
            goto LABEL_183;
          }
          v55 = (char *)__nw_create_backtrace_string();
          v32 = __nwlog_obj();
          v33 = __src;
          v56 = os_log_type_enabled(v32, (os_log_type_t)__src);
          if (!v55)
          {
            if (!v56)
              goto LABEL_184;
            *(_DWORD *)buf = 136446210;
            v83 = "nw_http_fillout_binary_message_inner_block_invoke";
            v34 = "%{public}s called with null cursor, no backtrace";
            goto LABEL_183;
          }
          if (v56)
          {
            *(_DWORD *)buf = 136446466;
            v83 = "nw_http_fillout_binary_message_inner_block_invoke";
            v84 = 2082;
            v85 = v55;
            _os_log_impl(&dword_182FBE000, v32, v33, "%{public}s called with null cursor, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v55);
        }
LABEL_184:
        if (v31)
          goto LABEL_185;
        return;
      }
      if (type == OS_LOG_TYPE_DEFAULT)
      {
        v48 = __nwlog_obj();
        v49 = __src;
        if (os_log_type_enabled(v48, (os_log_type_t)__src))
        {
          *(_DWORD *)buf = 136446210;
          v83 = "_http_safe_append";
          v50 = "%{public}s called with null data, backtrace limit exceeded";
          goto LABEL_216;
        }
        goto LABEL_217;
      }
      v73 = (char *)__nw_create_backtrace_string();
      v48 = __nwlog_obj();
      v49 = __src;
      v74 = os_log_type_enabled(v48, (os_log_type_t)__src);
      if (!v73)
      {
        if (v74)
        {
          *(_DWORD *)buf = 136446210;
          v83 = "_http_safe_append";
          v50 = "%{public}s called with null data, no backtrace";
          goto LABEL_216;
        }
        goto LABEL_217;
      }
      if (v74)
      {
        *(_DWORD *)buf = 136446466;
        v83 = "_http_safe_append";
        v84 = 2082;
        v85 = v73;
        v75 = "%{public}s called with null data, dumping backtrace:%{public}s";
LABEL_155:
        _os_log_impl(&dword_182FBE000, v48, v49, v75, buf, 0x16u);
      }
    }
    free(v73);
    goto LABEL_217;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v83 = "nw_http_fillout_binary_message_inner_block_invoke";
  v31 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v80 = 0;
  if (!__nwlog_fault(v31, &type, &v80))
    goto LABEL_184;
  if (type == OS_LOG_TYPE_FAULT)
  {
    v32 = __nwlog_obj();
    v33 = type;
    if (!os_log_type_enabled(v32, type))
      goto LABEL_184;
    *(_DWORD *)buf = 136446210;
    v83 = "nw_http_fillout_binary_message_inner_block_invoke";
    v34 = "%{public}s called with null cursor";
    goto LABEL_183;
  }
  if (!v80)
  {
    v32 = __nwlog_obj();
    v33 = type;
    if (!os_log_type_enabled(v32, type))
      goto LABEL_184;
    *(_DWORD *)buf = 136446210;
    v83 = "nw_http_fillout_binary_message_inner_block_invoke";
    v34 = "%{public}s called with null cursor, backtrace limit exceeded";
    goto LABEL_183;
  }
  v51 = (char *)__nw_create_backtrace_string();
  v32 = __nwlog_obj();
  v33 = type;
  v54 = os_log_type_enabled(v32, type);
  if (!v51)
  {
    if (!v54)
      goto LABEL_184;
    *(_DWORD *)buf = 136446210;
    v83 = "nw_http_fillout_binary_message_inner_block_invoke";
    v34 = "%{public}s called with null cursor, no backtrace";
    goto LABEL_183;
  }
  if (v54)
    goto LABEL_106;
LABEL_107:
  free(v51);
  if (v31)
LABEL_185:
    free(v31);
}

BOOL nw_http_fillout_indeterminate_binary_message_header(nw_protocol_metadata *a1, unsigned __int8 *a2, uint64_t a3)
{
  return nw_http_fillout_binary_message_inner(a1, 1, 0, 0, a2, a3);
}

BOOL nw_http_fillout_indeterminate_binary_message_body_chunk(const void *a1, size_t a2, int a3, void *a4, char *__dst, unint64_t a6)
{
  char *v6;
  size_t v11;
  unint64_t v12;
  char *v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  _BYTE *v18;
  id v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  _BOOL8 result;
  char *v25;
  NSObject *v26;
  os_log_type_t v27;
  const char *v28;
  void *v29;
  void *v30;
  NSObject *v31;
  os_log_type_t v32;
  const char *v33;
  char *v34;
  NSObject *v35;
  os_log_type_t v36;
  const char *v37;
  char *backtrace_string;
  _BOOL4 v39;
  const char *v40;
  char *v41;
  NSObject *v42;
  os_log_type_t v43;
  const char *v44;
  char *v45;
  NSObject *v46;
  os_log_type_t v47;
  const char *v48;
  char *v49;
  _BOOL4 v50;
  NSObject *v51;
  uint64_t v52;
  char *v53;
  _BOOL4 v54;
  char *v55;
  _BOOL4 v56;
  _BOOL4 v57;
  NSObject *v58;
  uint64_t v59;
  char *v60;
  _BOOL4 v61;
  char *v62;
  _BOOL4 v63;
  NSObject *v64;
  uint64_t v65;
  char *v66;
  _BOOL4 v67;
  char *v68;
  NSObject *v69;
  os_log_type_t v70;
  const char *v71;
  char *v72;
  _BOOL4 v73;
  _BOOL4 v74;
  _BOOL4 v75;
  char *v76;
  _BOOL4 v77;
  _QWORD v78[6];
  unint64_t __src;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  unint64_t v83;
  os_log_type_t type[8];
  os_log_type_t *v85;
  uint64_t v86;
  char *v87;
  char v88;
  os_log_type_t v89;
  uint8_t buf[4];
  const char *v91;
  __int16 v92;
  const char *v93;
  __int16 v94;
  uint64_t v95;
  __int16 v96;
  uint64_t v97;
  uint64_t v98;

  v98 = *MEMORY[0x1E0C80C00];
  if (!__dst)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v91 = "nw_http_fillout_indeterminate_binary_message_body_chunk";
    v34 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v80) = 0;
    if (!__nwlog_fault(v34, type, &v80))
      goto LABEL_177;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      v35 = __nwlog_obj();
      v36 = type[0];
      if (os_log_type_enabled(v35, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v91 = "nw_http_fillout_indeterminate_binary_message_body_chunk";
        v37 = "%{public}s called with null buffer";
LABEL_176:
        _os_log_impl(&dword_182FBE000, v35, v36, v37, buf, 0xCu);
      }
LABEL_177:
      if (v34)
        free(v34);
      return 0;
    }
    if (!(_BYTE)v80)
    {
      v35 = __nwlog_obj();
      v36 = type[0];
      if (os_log_type_enabled(v35, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v91 = "nw_http_fillout_indeterminate_binary_message_body_chunk";
        v37 = "%{public}s called with null buffer, backtrace limit exceeded";
        goto LABEL_176;
      }
      goto LABEL_177;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v35 = __nwlog_obj();
    v36 = type[0];
    v39 = os_log_type_enabled(v35, type[0]);
    if (!backtrace_string)
    {
      if (v39)
      {
        *(_DWORD *)buf = 136446210;
        v91 = "nw_http_fillout_indeterminate_binary_message_body_chunk";
        v37 = "%{public}s called with null buffer, no backtrace";
        goto LABEL_176;
      }
      goto LABEL_177;
    }
    if (v39)
    {
      *(_DWORD *)buf = 136446466;
      v91 = "nw_http_fillout_indeterminate_binary_message_body_chunk";
      v92 = 2082;
      v93 = backtrace_string;
      v40 = "%{public}s called with null buffer, dumping backtrace:%{public}s";
LABEL_97:
      _os_log_impl(&dword_182FBE000, v35, v36, v40, buf, 0x16u);
    }
LABEL_98:
    free(backtrace_string);
    goto LABEL_177;
  }
  v6 = __dst;
  if (!a1 && a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v91 = "nw_http_fillout_indeterminate_binary_message_body_chunk";
    v34 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v80) = 0;
    if (!__nwlog_fault(v34, type, &v80))
      goto LABEL_177;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      v35 = __nwlog_obj();
      v36 = type[0];
      if (os_log_type_enabled(v35, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v91 = "nw_http_fillout_indeterminate_binary_message_body_chunk";
        v37 = "%{public}s called with null body_content";
        goto LABEL_176;
      }
      goto LABEL_177;
    }
    if (!(_BYTE)v80)
    {
      v35 = __nwlog_obj();
      v36 = type[0];
      if (os_log_type_enabled(v35, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v91 = "nw_http_fillout_indeterminate_binary_message_body_chunk";
        v37 = "%{public}s called with null body_content, backtrace limit exceeded";
        goto LABEL_176;
      }
      goto LABEL_177;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v35 = __nwlog_obj();
    v36 = type[0];
    v57 = os_log_type_enabled(v35, type[0]);
    if (!backtrace_string)
    {
      if (v57)
      {
        *(_DWORD *)buf = 136446210;
        v91 = "nw_http_fillout_indeterminate_binary_message_body_chunk";
        v37 = "%{public}s called with null body_content, no backtrace";
        goto LABEL_176;
      }
      goto LABEL_177;
    }
    if (v57)
    {
      *(_DWORD *)buf = 136446466;
      v91 = "nw_http_fillout_indeterminate_binary_message_body_chunk";
      v92 = 2082;
      v93 = backtrace_string;
      v40 = "%{public}s called with null body_content, dumping backtrace:%{public}s";
      goto LABEL_97;
    }
    goto LABEL_98;
  }
  *(_QWORD *)type = 0;
  v85 = type;
  v86 = 0x2000000000;
  v87 = __dst;
  v80 = 0;
  v81 = &v80;
  v82 = 0x2000000000;
  v83 = a6;
  if (!a2)
    goto LABEL_13;
  if (a2 <= 0x3F)
  {
    __src = a2;
    v11 = 1;
    v12 = a6 - 1;
    if (a6)
      goto LABEL_7;
LABEL_30:
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v91 = "_http_safe_append";
    v25 = (char *)_os_log_send_and_compose_impl();
    v89 = OS_LOG_TYPE_ERROR;
    v88 = 0;
    if (__nwlog_fault(v25, &v89, &v88))
    {
      if (v89 == OS_LOG_TYPE_FAULT)
      {
        v26 = __nwlog_obj();
        v27 = v89;
        if (os_log_type_enabled(v26, v89))
        {
          *(_DWORD *)buf = 136446210;
          v91 = "_http_safe_append";
          v28 = "%{public}s called with null (*remaining >= length)";
LABEL_158:
          _os_log_impl(&dword_182FBE000, v26, v27, v28, buf, 0xCu);
        }
      }
      else if (v88)
      {
        v55 = (char *)__nw_create_backtrace_string();
        v26 = __nwlog_obj();
        v27 = v89;
        v56 = os_log_type_enabled(v26, v89);
        if (v55)
        {
          if (v56)
          {
            *(_DWORD *)buf = 136446466;
            v91 = "_http_safe_append";
            v92 = 2082;
            v93 = v55;
            _os_log_impl(&dword_182FBE000, v26, v27, "%{public}s called with null (*remaining >= length), dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v55);
          goto LABEL_159;
        }
        if (v56)
        {
          *(_DWORD *)buf = 136446210;
          v91 = "_http_safe_append";
          v28 = "%{public}s called with null (*remaining >= length), no backtrace";
          goto LABEL_158;
        }
      }
      else
      {
        v26 = __nwlog_obj();
        v27 = v89;
        if (os_log_type_enabled(v26, v89))
        {
          *(_DWORD *)buf = 136446210;
          v91 = "_http_safe_append";
          v28 = "%{public}s called with null (*remaining >= length), backtrace limit exceeded";
          goto LABEL_158;
        }
      }
    }
LABEL_159:
    if (v25)
      free(v25);
    *((_QWORD *)v85 + 3) = 0;
    goto LABEL_162;
  }
  if (!(a2 >> 14))
  {
    __src = bswap32(a2 | 0x4000) >> 16;
    v11 = 2;
    v12 = a6 - 2;
    if (a6 < 2)
      goto LABEL_30;
    goto LABEL_7;
  }
  if (!(a2 >> 30))
  {
    __src = bswap32(a2 | 0x80000000);
    v11 = 4;
    v12 = a6 - 4;
    if (a6 < 4)
      goto LABEL_30;
    goto LABEL_7;
  }
  if (!(a2 >> 62))
  {
    __src = bswap64(a2 | 0xC000000000000000);
    v11 = 8;
    v12 = a6 - 8;
    if (a6 < 8)
      goto LABEL_30;
LABEL_7:
    memcpy(__dst, &__src, v11);
    v83 = v12;
    v13 = &v6[v11];
    v87 = v13;
    v14 = &v80;
    if (a1)
    {
LABEL_8:
      if (v14[3] >= a2)
      {
        memcpy(v13, a1, a2);
        v15 = v14[3];
        v14[3] = v15 - a2;
        if (v15 < a2)
        {
          if (gLogDatapath)
          {
            v51 = __nwlog_obj();
            if (os_log_type_enabled(v51, OS_LOG_TYPE_DEBUG))
            {
              v52 = v14[3];
              *(_DWORD *)buf = 136446978;
              v91 = "_http_safe_append";
              v92 = 2082;
              v93 = "*remaining";
              v94 = 2048;
              v95 = a2;
              v96 = 2048;
              v97 = v52;
              _os_log_impl(&dword_182FBE000, v51, OS_LOG_TYPE_DEBUG, "%{public}s Underflow: %{public}s, decrement %llu, result %llu", buf, 0x2Au);
            }
          }
          v14[3] = 0;
        }
        v6 = &v13[a2];
        *((_QWORD *)v85 + 3) = v6;
LABEL_13:
        if (!a3)
        {
LABEL_25:
          v23 = 1;
LABEL_26:
          _Block_object_dispose(&v80, 8);
          _Block_object_dispose(type, 8);
          return v23;
        }
        v16 = v81;
        if (v81[3])
        {
          *v6 = 0;
          v17 = v16[3];
          v16[3] = v17 - 1;
          if (!v17)
          {
            if (gLogDatapath)
            {
              v58 = __nwlog_obj();
              if (os_log_type_enabled(v58, OS_LOG_TYPE_DEBUG))
              {
                v59 = v16[3];
                *(_DWORD *)buf = 136446978;
                v91 = "_http_safe_append";
                v92 = 2082;
                v93 = "*remaining";
                v94 = 2048;
                v95 = 1;
                v96 = 2048;
                v97 = v59;
                _os_log_impl(&dword_182FBE000, v58, OS_LOG_TYPE_DEBUG, "%{public}s Underflow: %{public}s, decrement %llu, result %llu", buf, 0x2Au);
              }
            }
            v16[3] = 0;
          }
          v18 = v6 + 1;
          *((_QWORD *)v85 + 3) = v6 + 1;
          if (!a4)
            goto LABEL_20;
          v78[0] = MEMORY[0x1E0C809B0];
          v78[1] = 0x40000000;
          v78[2] = __nw_http_fillout_indeterminate_binary_message_body_chunk_block_invoke;
          v78[3] = &unk_1E14A3628;
          v78[4] = type;
          v78[5] = &v80;
          v19 = a4;
          v20 = v78;
          _nw_http_fields_enumerate_const_field((uint64_t)v19, v20);

          v18 = (_BYTE *)*((_QWORD *)v85 + 3);
          if (!v18)
          {
            __nwlog_obj();
            *(_DWORD *)buf = 136446210;
            v91 = "_http_safe_append";
            v45 = (char *)_os_log_send_and_compose_impl();
            LOBYTE(__src) = 16;
            v89 = OS_LOG_TYPE_DEFAULT;
            if (!__nwlog_fault(v45, &__src, &v89))
              goto LABEL_204;
            if (__src == 17)
            {
              v46 = __nwlog_obj();
              v47 = __src;
              if (!os_log_type_enabled(v46, (os_log_type_t)__src))
                goto LABEL_204;
              *(_DWORD *)buf = 136446210;
              v91 = "_http_safe_append";
              v48 = "%{public}s called with null buffer";
              goto LABEL_203;
            }
            if (v89 == OS_LOG_TYPE_DEFAULT)
            {
              v46 = __nwlog_obj();
              v47 = __src;
              if (!os_log_type_enabled(v46, (os_log_type_t)__src))
                goto LABEL_204;
              *(_DWORD *)buf = 136446210;
              v91 = "_http_safe_append";
              v48 = "%{public}s called with null buffer, backtrace limit exceeded";
              goto LABEL_203;
            }
            v62 = (char *)__nw_create_backtrace_string();
            v46 = __nwlog_obj();
            v47 = __src;
            v63 = os_log_type_enabled(v46, (os_log_type_t)__src);
            if (!v62)
            {
              if (!v63)
                goto LABEL_204;
              *(_DWORD *)buf = 136446210;
              v91 = "_http_safe_append";
              v48 = "%{public}s called with null buffer, no backtrace";
              goto LABEL_203;
            }
            if (v63)
            {
              *(_DWORD *)buf = 136446466;
              v91 = "_http_safe_append";
              v92 = 2082;
              v93 = v62;
              _os_log_impl(&dword_182FBE000, v46, v47, "%{public}s called with null buffer, dumping backtrace:%{public}s", buf, 0x16u);
            }
            free(v62);
          }
          else
          {
LABEL_20:
            v21 = v81;
            if (v81[3])
            {
              *v18 = 0;
              v22 = v21[3];
              v21[3] = v22 - 1;
              if (!v22)
              {
                if (gLogDatapath)
                {
                  v64 = __nwlog_obj();
                  if (os_log_type_enabled(v64, OS_LOG_TYPE_DEBUG))
                  {
                    v65 = v21[3];
                    *(_DWORD *)buf = 136446978;
                    v91 = "_http_safe_append";
                    v92 = 2082;
                    v93 = "*remaining";
                    v94 = 2048;
                    v95 = 1;
                    v96 = 2048;
                    v97 = v65;
                    _os_log_impl(&dword_182FBE000, v64, OS_LOG_TYPE_DEBUG, "%{public}s Underflow: %{public}s, decrement %llu, result %llu", buf, 0x2Au);
                  }
                }
                v21[3] = 0;
              }
              *((_QWORD *)v85 + 3) = v18 + 1;
              goto LABEL_25;
            }
            __nwlog_obj();
            *(_DWORD *)buf = 136446210;
            v91 = "_http_safe_append";
            v45 = (char *)_os_log_send_and_compose_impl();
            LOBYTE(__src) = 16;
            v89 = OS_LOG_TYPE_DEFAULT;
            if (__nwlog_fault(v45, &__src, &v89))
            {
              if (__src == 17)
              {
                v46 = __nwlog_obj();
                v47 = __src;
                if (!os_log_type_enabled(v46, (os_log_type_t)__src))
                  goto LABEL_204;
                *(_DWORD *)buf = 136446210;
                v91 = "_http_safe_append";
                v48 = "%{public}s called with null (*remaining >= length)";
                goto LABEL_203;
              }
              if (v89 == OS_LOG_TYPE_DEFAULT)
              {
                v46 = __nwlog_obj();
                v47 = __src;
                if (!os_log_type_enabled(v46, (os_log_type_t)__src))
                  goto LABEL_204;
                *(_DWORD *)buf = 136446210;
                v91 = "_http_safe_append";
                v48 = "%{public}s called with null (*remaining >= length), backtrace limit exceeded";
                goto LABEL_203;
              }
              v66 = (char *)__nw_create_backtrace_string();
              v46 = __nwlog_obj();
              v47 = __src;
              v67 = os_log_type_enabled(v46, (os_log_type_t)__src);
              if (v66)
              {
                if (v67)
                {
                  *(_DWORD *)buf = 136446466;
                  v91 = "_http_safe_append";
                  v92 = 2082;
                  v93 = v66;
                  _os_log_impl(&dword_182FBE000, v46, v47, "%{public}s called with null (*remaining >= length), dumping backtrace:%{public}s", buf, 0x16u);
                }
                free(v66);
                if (!v45)
                  goto LABEL_206;
                goto LABEL_205;
              }
              if (v67)
              {
                *(_DWORD *)buf = 136446210;
                v91 = "_http_safe_append";
                v48 = "%{public}s called with null (*remaining >= length), no backtrace";
LABEL_203:
                _os_log_impl(&dword_182FBE000, v46, v47, v48, buf, 0xCu);
              }
            }
          }
LABEL_204:
          if (!v45)
          {
LABEL_206:
            *((_QWORD *)v85 + 3) = 0;
            __nwlog_obj();
            *(_DWORD *)buf = 136446210;
            v91 = "nw_http_fillout_indeterminate_binary_message_body_chunk";
            v68 = (char *)_os_log_send_and_compose_impl();
            LOBYTE(__src) = 16;
            v89 = OS_LOG_TYPE_DEFAULT;
            if (!__nwlog_fault(v68, &__src, &v89))
              goto LABEL_220;
            if (__src == 17)
            {
              v69 = __nwlog_obj();
              v70 = __src;
              if (!os_log_type_enabled(v69, (os_log_type_t)__src))
                goto LABEL_220;
              *(_DWORD *)buf = 136446210;
              v91 = "nw_http_fillout_indeterminate_binary_message_body_chunk";
              v71 = "%{public}s called with null cursor";
              goto LABEL_219;
            }
            if (v89 == OS_LOG_TYPE_DEFAULT)
            {
              v69 = __nwlog_obj();
              v70 = __src;
              if (!os_log_type_enabled(v69, (os_log_type_t)__src))
                goto LABEL_220;
              *(_DWORD *)buf = 136446210;
              v91 = "nw_http_fillout_indeterminate_binary_message_body_chunk";
              v71 = "%{public}s called with null cursor, backtrace limit exceeded";
              goto LABEL_219;
            }
            v76 = (char *)__nw_create_backtrace_string();
            v69 = __nwlog_obj();
            v70 = __src;
            v77 = os_log_type_enabled(v69, (os_log_type_t)__src);
            if (!v76)
            {
              if (!v77)
                goto LABEL_220;
              *(_DWORD *)buf = 136446210;
              v91 = "nw_http_fillout_indeterminate_binary_message_body_chunk";
              v71 = "%{public}s called with null cursor, no backtrace";
              goto LABEL_219;
            }
            if (v77)
            {
              *(_DWORD *)buf = 136446466;
              v91 = "nw_http_fillout_indeterminate_binary_message_body_chunk";
              v92 = 2082;
              v93 = v76;
              _os_log_impl(&dword_182FBE000, v69, v70, "%{public}s called with null cursor, dumping backtrace:%{public}s", buf, 0x16u);
            }
            free(v76);
LABEL_220:
            if (!v68)
            {
LABEL_222:
              v23 = 0;
              goto LABEL_26;
            }
LABEL_221:
            free(v68);
            goto LABEL_222;
          }
LABEL_205:
          free(v45);
          goto LABEL_206;
        }
        __nwlog_obj();
        *(_DWORD *)buf = 136446210;
        v91 = "_http_safe_append";
        v41 = (char *)_os_log_send_and_compose_impl();
        LOBYTE(__src) = 16;
        v89 = OS_LOG_TYPE_DEFAULT;
        if (__nwlog_fault(v41, &__src, &v89))
        {
          if (__src == 17)
          {
            v42 = __nwlog_obj();
            v43 = __src;
            if (!os_log_type_enabled(v42, (os_log_type_t)__src))
              goto LABEL_183;
            *(_DWORD *)buf = 136446210;
            v91 = "_http_safe_append";
            v44 = "%{public}s called with null (*remaining >= length)";
LABEL_182:
            _os_log_impl(&dword_182FBE000, v42, v43, v44, buf, 0xCu);
            goto LABEL_183;
          }
          if (v89 == OS_LOG_TYPE_DEFAULT)
          {
            v42 = __nwlog_obj();
            v43 = __src;
            if (!os_log_type_enabled(v42, (os_log_type_t)__src))
              goto LABEL_183;
            *(_DWORD *)buf = 136446210;
            v91 = "_http_safe_append";
            v44 = "%{public}s called with null (*remaining >= length), backtrace limit exceeded";
            goto LABEL_182;
          }
          v60 = (char *)__nw_create_backtrace_string();
          v42 = __nwlog_obj();
          v43 = __src;
          v61 = os_log_type_enabled(v42, (os_log_type_t)__src);
          if (!v60)
          {
            if (!v61)
              goto LABEL_183;
            *(_DWORD *)buf = 136446210;
            v91 = "_http_safe_append";
            v44 = "%{public}s called with null (*remaining >= length), no backtrace";
            goto LABEL_182;
          }
          if (v61)
          {
            *(_DWORD *)buf = 136446466;
            v91 = "_http_safe_append";
            v92 = 2082;
            v93 = v60;
            _os_log_impl(&dword_182FBE000, v42, v43, "%{public}s called with null (*remaining >= length), dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v60);
        }
LABEL_183:
        if (v41)
          free(v41);
        *((_QWORD *)v85 + 3) = 0;
        __nwlog_obj();
        *(_DWORD *)buf = 136446210;
        v91 = "nw_http_fillout_indeterminate_binary_message_body_chunk";
        v68 = (char *)_os_log_send_and_compose_impl();
        LOBYTE(__src) = 16;
        v89 = OS_LOG_TYPE_DEFAULT;
        if (!__nwlog_fault(v68, &__src, &v89))
          goto LABEL_220;
        if (__src == 17)
        {
          v69 = __nwlog_obj();
          v70 = __src;
          if (!os_log_type_enabled(v69, (os_log_type_t)__src))
            goto LABEL_220;
          *(_DWORD *)buf = 136446210;
          v91 = "nw_http_fillout_indeterminate_binary_message_body_chunk";
          v71 = "%{public}s called with null cursor";
          goto LABEL_219;
        }
        if (v89 == OS_LOG_TYPE_DEFAULT)
        {
          v69 = __nwlog_obj();
          v70 = __src;
          if (!os_log_type_enabled(v69, (os_log_type_t)__src))
            goto LABEL_220;
          *(_DWORD *)buf = 136446210;
          v91 = "nw_http_fillout_indeterminate_binary_message_body_chunk";
          v71 = "%{public}s called with null cursor, backtrace limit exceeded";
          goto LABEL_219;
        }
        v72 = (char *)__nw_create_backtrace_string();
        v69 = __nwlog_obj();
        v70 = __src;
        v75 = os_log_type_enabled(v69, (os_log_type_t)__src);
        if (!v72)
        {
          if (!v75)
            goto LABEL_220;
          *(_DWORD *)buf = 136446210;
          v91 = "nw_http_fillout_indeterminate_binary_message_body_chunk";
          v71 = "%{public}s called with null cursor, no backtrace";
          goto LABEL_219;
        }
        if (!v75)
        {
LABEL_193:
          free(v72);
          if (!v68)
            goto LABEL_222;
          goto LABEL_221;
        }
LABEL_192:
        *(_DWORD *)buf = 136446466;
        v91 = "nw_http_fillout_indeterminate_binary_message_body_chunk";
        v92 = 2082;
        v93 = v72;
        _os_log_impl(&dword_182FBE000, v69, v70, "%{public}s called with null cursor, dumping backtrace:%{public}s", buf, 0x16u);
        goto LABEL_193;
      }
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      v91 = "_http_safe_append";
      v30 = (void *)_os_log_send_and_compose_impl();
      LOBYTE(__src) = 16;
      v89 = OS_LOG_TYPE_DEFAULT;
      if (__nwlog_fault((const char *)v30, &__src, &v89))
      {
        if (__src == 17)
        {
          v31 = __nwlog_obj();
          v32 = __src;
          if (!os_log_type_enabled(v31, (os_log_type_t)__src))
            goto LABEL_142;
          *(_DWORD *)buf = 136446210;
          v91 = "_http_safe_append";
          v33 = "%{public}s called with null (*remaining >= length)";
          goto LABEL_141;
        }
        if (v89 == OS_LOG_TYPE_DEFAULT)
        {
          v31 = __nwlog_obj();
          v32 = __src;
          if (!os_log_type_enabled(v31, (os_log_type_t)__src))
            goto LABEL_142;
          *(_DWORD *)buf = 136446210;
          v91 = "_http_safe_append";
          v33 = "%{public}s called with null (*remaining >= length), backtrace limit exceeded";
          goto LABEL_141;
        }
        v53 = (char *)__nw_create_backtrace_string();
        v31 = __nwlog_obj();
        v32 = __src;
        v54 = os_log_type_enabled(v31, (os_log_type_t)__src);
        if (v53)
        {
          if (v54)
          {
            *(_DWORD *)buf = 136446466;
            v91 = "_http_safe_append";
            v92 = 2082;
            v93 = v53;
            _os_log_impl(&dword_182FBE000, v31, v32, "%{public}s called with null (*remaining >= length), dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v53);
          if (!v30)
          {
LABEL_144:
            *((_QWORD *)v85 + 3) = 0;
            __nwlog_obj();
            *(_DWORD *)buf = 136446210;
            v91 = "nw_http_fillout_indeterminate_binary_message_body_chunk";
            v68 = (char *)_os_log_send_and_compose_impl();
            LOBYTE(__src) = 16;
            v89 = OS_LOG_TYPE_DEFAULT;
            if ((__nwlog_fault(v68, &__src, &v89) & 1) == 0)
              goto LABEL_220;
            if (__src == 17)
            {
              v69 = __nwlog_obj();
              v70 = __src;
              if (!os_log_type_enabled(v69, (os_log_type_t)__src))
                goto LABEL_220;
              *(_DWORD *)buf = 136446210;
              v91 = "nw_http_fillout_indeterminate_binary_message_body_chunk";
              v71 = "%{public}s called with null cursor";
            }
            else if (v89)
            {
              v72 = (char *)__nw_create_backtrace_string();
              v69 = __nwlog_obj();
              v70 = __src;
              v73 = os_log_type_enabled(v69, (os_log_type_t)__src);
              if (v72)
              {
                if (!v73)
                  goto LABEL_193;
                goto LABEL_192;
              }
              if (!v73)
                goto LABEL_220;
              *(_DWORD *)buf = 136446210;
              v91 = "nw_http_fillout_indeterminate_binary_message_body_chunk";
              v71 = "%{public}s called with null cursor, no backtrace";
            }
            else
            {
              v69 = __nwlog_obj();
              v70 = __src;
              if (!os_log_type_enabled(v69, (os_log_type_t)__src))
                goto LABEL_220;
              *(_DWORD *)buf = 136446210;
              v91 = "nw_http_fillout_indeterminate_binary_message_body_chunk";
              v71 = "%{public}s called with null cursor, backtrace limit exceeded";
            }
LABEL_219:
            _os_log_impl(&dword_182FBE000, v69, v70, v71, buf, 0xCu);
            goto LABEL_220;
          }
LABEL_143:
          free(v30);
          goto LABEL_144;
        }
        if (v54)
        {
          *(_DWORD *)buf = 136446210;
          v91 = "_http_safe_append";
          v33 = "%{public}s called with null (*remaining >= length), no backtrace";
LABEL_141:
          _os_log_impl(&dword_182FBE000, v31, v32, v33, buf, 0xCu);
          goto LABEL_142;
        }
      }
      goto LABEL_142;
    }
LABEL_43:
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v91 = "_http_safe_append";
    v30 = (void *)_os_log_send_and_compose_impl();
    LOBYTE(__src) = 16;
    v89 = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault((const char *)v30, &__src, &v89))
      goto LABEL_142;
    if (__src == 17)
    {
      v31 = __nwlog_obj();
      v32 = __src;
      if (!os_log_type_enabled(v31, (os_log_type_t)__src))
        goto LABEL_142;
      *(_DWORD *)buf = 136446210;
      v91 = "_http_safe_append";
      v33 = "%{public}s called with null data";
      goto LABEL_141;
    }
    if (v89 == OS_LOG_TYPE_DEFAULT)
    {
      v31 = __nwlog_obj();
      v32 = __src;
      if (!os_log_type_enabled(v31, (os_log_type_t)__src))
        goto LABEL_142;
      *(_DWORD *)buf = 136446210;
      v91 = "_http_safe_append";
      v33 = "%{public}s called with null data, backtrace limit exceeded";
      goto LABEL_141;
    }
    v49 = (char *)__nw_create_backtrace_string();
    v31 = __nwlog_obj();
    v32 = __src;
    v50 = os_log_type_enabled(v31, (os_log_type_t)__src);
    if (!v49)
    {
      if (!v50)
        goto LABEL_142;
      *(_DWORD *)buf = 136446210;
      v91 = "_http_safe_append";
      v33 = "%{public}s called with null data, no backtrace";
      goto LABEL_141;
    }
    if (v50)
    {
      *(_DWORD *)buf = 136446466;
      v91 = "_http_safe_append";
      v92 = 2082;
      v93 = v49;
      _os_log_impl(&dword_182FBE000, v31, v32, "%{public}s called with null data, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v49);
LABEL_142:
    if (!v30)
      goto LABEL_144;
    goto LABEL_143;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446466;
  v91 = "_http_vle_encode";
  v92 = 2048;
  v93 = (const char *)a2;
  v29 = (void *)_os_log_send_and_compose_impl();
  result = __nwlog_abort((uint64_t)v29);
  if (!result)
  {
    free(v29);
    v13 = (char *)*((_QWORD *)v85 + 3);
    if (v13)
    {
      v14 = v81;
      if (a1)
        goto LABEL_8;
      goto LABEL_43;
    }
LABEL_162:
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v91 = "nw_http_fillout_indeterminate_binary_message_body_chunk";
    v68 = (char *)_os_log_send_and_compose_impl();
    v89 = OS_LOG_TYPE_ERROR;
    v88 = 0;
    if (!__nwlog_fault(v68, &v89, &v88))
      goto LABEL_220;
    if (v89 == OS_LOG_TYPE_FAULT)
    {
      v69 = __nwlog_obj();
      v70 = v89;
      if (!os_log_type_enabled(v69, v89))
        goto LABEL_220;
      *(_DWORD *)buf = 136446210;
      v91 = "nw_http_fillout_indeterminate_binary_message_body_chunk";
      v71 = "%{public}s called with null cursor";
    }
    else if (v88)
    {
      v72 = (char *)__nw_create_backtrace_string();
      v69 = __nwlog_obj();
      v70 = v89;
      v74 = os_log_type_enabled(v69, v89);
      if (v72)
      {
        if (!v74)
          goto LABEL_193;
        goto LABEL_192;
      }
      if (!v74)
        goto LABEL_220;
      *(_DWORD *)buf = 136446210;
      v91 = "nw_http_fillout_indeterminate_binary_message_body_chunk";
      v71 = "%{public}s called with null cursor, no backtrace";
    }
    else
    {
      v69 = __nwlog_obj();
      v70 = v89;
      if (!os_log_type_enabled(v69, v89))
        goto LABEL_220;
      *(_DWORD *)buf = 136446210;
      v91 = "nw_http_fillout_indeterminate_binary_message_body_chunk";
      v71 = "%{public}s called with null cursor, backtrace limit exceeded";
    }
    goto LABEL_219;
  }
  __break(1u);
  return result;
}

uint64_t __nw_http_fillout_indeterminate_binary_message_body_chunk_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v4[4];
  __int128 v5;

  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = __nw_http_fillout_indeterminate_binary_message_body_chunk_block_invoke_2;
  v4[3] = &unk_1E14A3600;
  v5 = *(_OWORD *)(a1 + 32);
  nw_http_field_access_canonical(a3, v4);
  return 1;
}

void __nw_http_fillout_indeterminate_binary_message_body_chunk_block_invoke_2(uint64_t a1, const void *a2, size_t a3, const void *a4, size_t a5)
{
  size_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  size_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  void *v30;
  char *v31;
  NSObject *v32;
  os_log_type_t v33;
  const char *v34;
  char *v35;
  NSObject *v36;
  os_log_type_t v37;
  const char *v38;
  char *v39;
  NSObject *v40;
  os_log_type_t v41;
  const char *v42;
  char *v43;
  NSObject *v44;
  os_log_type_t v45;
  const char *v46;
  char *v47;
  NSObject *v48;
  os_log_type_t v49;
  const char *v50;
  char *v51;
  _BOOL4 v52;
  _BOOL4 v53;
  _BOOL4 v54;
  char *v55;
  _BOOL4 v56;
  char *backtrace_string;
  _BOOL4 v58;
  const char *v59;
  NSObject *v60;
  uint64_t v61;
  _BOOL4 v62;
  NSObject *v63;
  uint64_t v64;
  char *v65;
  _BOOL4 v66;
  char *v67;
  _BOOL4 v68;
  const char *v69;
  NSObject *v70;
  uint64_t v71;
  _BOOL4 v72;
  char *v73;
  _BOOL4 v74;
  const char *v75;
  NSObject *v76;
  uint64_t v77;
  _BOOL4 v78;
  unint64_t __src;
  char v80;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v83;
  __int16 v84;
  const char *v85;
  __int16 v86;
  size_t v87;
  __int16 v88;
  uint64_t v89;
  uint64_t v90;

  v90 = *MEMORY[0x1E0C80C00];
  if (a3 <= 0x3F)
  {
    __src = a3;
    v10 = 1;
    goto LABEL_9;
  }
  if (!(a3 >> 14))
  {
    __src = bswap32(a3 | 0x4000) >> 16;
    v10 = 2;
    goto LABEL_9;
  }
  if (!(a3 >> 30))
  {
    __src = bswap32(a3 | 0x80000000);
    v10 = 4;
    goto LABEL_9;
  }
  if (!(a3 >> 62))
  {
    __src = bswap64(a3 | 0xC000000000000000);
    v10 = 8;
LABEL_9:
    v11 = a1 + 32;
    v12 = *(char **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    v13 = a1 + 40;
    if (v12)
    {
      v14 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
      if (*(_QWORD *)(v14 + 24) >= v10)
      {
        memcpy(v12, &__src, v10);
        v15 = *(_QWORD *)(v14 + 24);
        *(_QWORD *)(v14 + 24) = v15 - v10;
        if (v15 < v10)
        {
          if (gLogDatapath)
          {
            v60 = __nwlog_obj();
            if (os_log_type_enabled(v60, OS_LOG_TYPE_DEBUG))
            {
              v61 = *(_QWORD *)(v14 + 24);
              *(_DWORD *)buf = 136446978;
              v83 = "_http_safe_append";
              v84 = 2082;
              v85 = "*remaining";
              v86 = 2048;
              v87 = v10;
              v88 = 2048;
              v89 = v61;
              _os_log_impl(&dword_182FBE000, v60, OS_LOG_TYPE_DEBUG, "%{public}s Underflow: %{public}s, decrement %llu, result %llu", buf, 0x2Au);
            }
          }
          *(_QWORD *)(v14 + 24) = 0;
        }
        v16 = &v12[v10];
        goto LABEL_15;
      }
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      v83 = "_http_safe_append";
      v35 = (char *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      v80 = 0;
      if (!__nwlog_fault(v35, &type, &v80))
        goto LABEL_195;
      if (type == OS_LOG_TYPE_FAULT)
      {
        v36 = __nwlog_obj();
        v37 = type;
        if (os_log_type_enabled(v36, type))
        {
          *(_DWORD *)buf = 136446210;
          v83 = "_http_safe_append";
          v38 = "%{public}s called with null (*remaining >= length)";
          goto LABEL_194;
        }
        goto LABEL_195;
      }
      if (!v80)
      {
        v36 = __nwlog_obj();
        v37 = type;
        if (os_log_type_enabled(v36, type))
        {
          *(_DWORD *)buf = 136446210;
          v83 = "_http_safe_append";
          v38 = "%{public}s called with null (*remaining >= length), backtrace limit exceeded";
          goto LABEL_194;
        }
        goto LABEL_195;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v36 = __nwlog_obj();
      v37 = type;
      v62 = os_log_type_enabled(v36, type);
      if (!backtrace_string)
      {
        if (v62)
        {
          *(_DWORD *)buf = 136446210;
          v83 = "_http_safe_append";
          v38 = "%{public}s called with null (*remaining >= length), no backtrace";
          goto LABEL_194;
        }
        goto LABEL_195;
      }
      if (v62)
      {
        *(_DWORD *)buf = 136446466;
        v83 = "_http_safe_append";
        v84 = 2082;
        v85 = backtrace_string;
        v59 = "%{public}s called with null (*remaining >= length), dumping backtrace:%{public}s";
        goto LABEL_124;
      }
    }
    else
    {
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      v83 = "_http_safe_append";
      v35 = (char *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      v80 = 0;
      if (!__nwlog_fault(v35, &type, &v80))
        goto LABEL_195;
      if (type == OS_LOG_TYPE_FAULT)
      {
        v36 = __nwlog_obj();
        v37 = type;
        if (os_log_type_enabled(v36, type))
        {
          *(_DWORD *)buf = 136446210;
          v83 = "_http_safe_append";
          v38 = "%{public}s called with null buffer";
LABEL_194:
          _os_log_impl(&dword_182FBE000, v36, v37, v38, buf, 0xCu);
        }
LABEL_195:
        if (v35)
          free(v35);
        v16 = 0;
        goto LABEL_15;
      }
      if (!v80)
      {
        v36 = __nwlog_obj();
        v37 = type;
        if (os_log_type_enabled(v36, type))
        {
          *(_DWORD *)buf = 136446210;
          v83 = "_http_safe_append";
          v38 = "%{public}s called with null buffer, backtrace limit exceeded";
          goto LABEL_194;
        }
        goto LABEL_195;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v36 = __nwlog_obj();
      v37 = type;
      v58 = os_log_type_enabled(v36, type);
      if (!backtrace_string)
      {
        if (v58)
        {
          *(_DWORD *)buf = 136446210;
          v83 = "_http_safe_append";
          v38 = "%{public}s called with null buffer, no backtrace";
          goto LABEL_194;
        }
        goto LABEL_195;
      }
      if (v58)
      {
        *(_DWORD *)buf = 136446466;
        v83 = "_http_safe_append";
        v84 = 2082;
        v85 = backtrace_string;
        v59 = "%{public}s called with null buffer, dumping backtrace:%{public}s";
LABEL_124:
        _os_log_impl(&dword_182FBE000, v36, v37, v59, buf, 0x16u);
      }
    }
    free(backtrace_string);
    goto LABEL_195;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446466;
  v83 = "_http_vle_encode";
  v84 = 2048;
  v85 = (const char *)a3;
  v28 = (void *)_os_log_send_and_compose_impl();
  if (__nwlog_abort((uint64_t)v28))
    goto LABEL_220;
  free(v28);
  v29 = *(_QWORD *)(a1 + 32);
  v11 = a1 + 32;
  v16 = *(char **)(*(_QWORD *)(v29 + 8) + 24);
  v13 = v11 + 8;
LABEL_15:
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v11 + 8) + 24) = v16;
  v17 = *(char **)(*(_QWORD *)(*(_QWORD *)v11 + 8) + 24);
  if (!v17)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v83 = "nw_http_fillout_indeterminate_binary_message_body_chunk_block_invoke_2";
    v31 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v80 = 0;
    if (!__nwlog_fault(v31, &type, &v80))
      goto LABEL_184;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v32 = __nwlog_obj();
      v33 = type;
      if (!os_log_type_enabled(v32, type))
        goto LABEL_184;
      *(_DWORD *)buf = 136446210;
      v83 = "nw_http_fillout_indeterminate_binary_message_body_chunk_block_invoke";
      v34 = "%{public}s called with null cursor";
LABEL_183:
      _os_log_impl(&dword_182FBE000, v32, v33, v34, buf, 0xCu);
      goto LABEL_184;
    }
    if (!v80)
    {
      v32 = __nwlog_obj();
      v33 = type;
      if (!os_log_type_enabled(v32, type))
        goto LABEL_184;
      *(_DWORD *)buf = 136446210;
      v83 = "nw_http_fillout_indeterminate_binary_message_body_chunk_block_invoke";
      v34 = "%{public}s called with null cursor, backtrace limit exceeded";
      goto LABEL_183;
    }
    v51 = (char *)__nw_create_backtrace_string();
    v32 = __nwlog_obj();
    v33 = type;
    v52 = os_log_type_enabled(v32, type);
    if (!v51)
    {
      if (!v52)
        goto LABEL_184;
      *(_DWORD *)buf = 136446210;
      v83 = "nw_http_fillout_indeterminate_binary_message_body_chunk_block_invoke";
      v34 = "%{public}s called with null cursor, no backtrace";
      goto LABEL_183;
    }
    if (!v52)
      goto LABEL_107;
LABEL_106:
    *(_DWORD *)buf = 136446466;
    v83 = "nw_http_fillout_indeterminate_binary_message_body_chunk_block_invoke";
    v84 = 2082;
    v85 = v51;
    _os_log_impl(&dword_182FBE000, v32, v33, "%{public}s called with null cursor, dumping backtrace:%{public}s", buf, 0x16u);
    goto LABEL_107;
  }
  if (a3)
  {
    if (a2)
    {
      v18 = *(_QWORD *)(*(_QWORD *)v13 + 8);
      if (*(_QWORD *)(v18 + 24) >= a3)
      {
        memcpy(v17, a2, a3);
        v19 = *(_QWORD *)(v18 + 24);
        *(_QWORD *)(v18 + 24) = v19 - a3;
        if (v19 < a3)
        {
          if (gLogDatapath)
          {
            v70 = __nwlog_obj();
            if (os_log_type_enabled(v70, OS_LOG_TYPE_DEBUG))
            {
              v71 = *(_QWORD *)(v18 + 24);
              *(_DWORD *)buf = 136446978;
              v83 = "_http_safe_append";
              v84 = 2082;
              v85 = "*remaining";
              v86 = 2048;
              v87 = a3;
              v88 = 2048;
              v89 = v71;
              _os_log_impl(&dword_182FBE000, v70, OS_LOG_TYPE_DEBUG, "%{public}s Underflow: %{public}s, decrement %llu, result %llu", buf, 0x2Au);
            }
          }
          *(_QWORD *)(v18 + 24) = 0;
        }
        v17 += a3;
        goto LABEL_23;
      }
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      v83 = "_http_safe_append";
      v43 = (char *)_os_log_send_and_compose_impl();
      LOBYTE(__src) = 16;
      type = OS_LOG_TYPE_DEFAULT;
      if (!__nwlog_fault(v43, &__src, &type))
        goto LABEL_209;
      if (__src == 17)
      {
        v44 = __nwlog_obj();
        v45 = __src;
        if (os_log_type_enabled(v44, (os_log_type_t)__src))
        {
          *(_DWORD *)buf = 136446210;
          v83 = "_http_safe_append";
          v46 = "%{public}s called with null (*remaining >= length)";
          goto LABEL_208;
        }
        goto LABEL_209;
      }
      if (type == OS_LOG_TYPE_DEFAULT)
      {
        v44 = __nwlog_obj();
        v45 = __src;
        if (os_log_type_enabled(v44, (os_log_type_t)__src))
        {
          *(_DWORD *)buf = 136446210;
          v83 = "_http_safe_append";
          v46 = "%{public}s called with null (*remaining >= length), backtrace limit exceeded";
          goto LABEL_208;
        }
        goto LABEL_209;
      }
      v67 = (char *)__nw_create_backtrace_string();
      v44 = __nwlog_obj();
      v45 = __src;
      v72 = os_log_type_enabled(v44, (os_log_type_t)__src);
      if (!v67)
      {
        if (v72)
        {
          *(_DWORD *)buf = 136446210;
          v83 = "_http_safe_append";
          v46 = "%{public}s called with null (*remaining >= length), no backtrace";
          goto LABEL_208;
        }
        goto LABEL_209;
      }
      if (v72)
      {
        *(_DWORD *)buf = 136446466;
        v83 = "_http_safe_append";
        v84 = 2082;
        v85 = v67;
        v69 = "%{public}s called with null (*remaining >= length), dumping backtrace:%{public}s";
        goto LABEL_143;
      }
    }
    else
    {
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      v83 = "_http_safe_append";
      v43 = (char *)_os_log_send_and_compose_impl();
      LOBYTE(__src) = 16;
      type = OS_LOG_TYPE_DEFAULT;
      if (!__nwlog_fault(v43, &__src, &type))
        goto LABEL_209;
      if (__src == 17)
      {
        v44 = __nwlog_obj();
        v45 = __src;
        if (os_log_type_enabled(v44, (os_log_type_t)__src))
        {
          *(_DWORD *)buf = 136446210;
          v83 = "_http_safe_append";
          v46 = "%{public}s called with null data";
LABEL_208:
          _os_log_impl(&dword_182FBE000, v44, v45, v46, buf, 0xCu);
        }
LABEL_209:
        if (v43)
          free(v43);
        v17 = 0;
        goto LABEL_23;
      }
      if (type == OS_LOG_TYPE_DEFAULT)
      {
        v44 = __nwlog_obj();
        v45 = __src;
        if (os_log_type_enabled(v44, (os_log_type_t)__src))
        {
          *(_DWORD *)buf = 136446210;
          v83 = "_http_safe_append";
          v46 = "%{public}s called with null data, backtrace limit exceeded";
          goto LABEL_208;
        }
        goto LABEL_209;
      }
      v67 = (char *)__nw_create_backtrace_string();
      v44 = __nwlog_obj();
      v45 = __src;
      v68 = os_log_type_enabled(v44, (os_log_type_t)__src);
      if (!v67)
      {
        if (v68)
        {
          *(_DWORD *)buf = 136446210;
          v83 = "_http_safe_append";
          v46 = "%{public}s called with null data, no backtrace";
          goto LABEL_208;
        }
        goto LABEL_209;
      }
      if (v68)
      {
        *(_DWORD *)buf = 136446466;
        v83 = "_http_safe_append";
        v84 = 2082;
        v85 = v67;
        v69 = "%{public}s called with null data, dumping backtrace:%{public}s";
LABEL_143:
        _os_log_impl(&dword_182FBE000, v44, v45, v69, buf, 0x16u);
      }
    }
    free(v67);
    goto LABEL_209;
  }
LABEL_23:
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v11 + 8) + 24) = v17;
  v20 = *(char **)(*(_QWORD *)(*(_QWORD *)v11 + 8) + 24);
  if (!v20)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v83 = "nw_http_fillout_indeterminate_binary_message_body_chunk_block_invoke";
    v31 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(__src) = 16;
    type = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v31, &__src, &type))
      goto LABEL_184;
    if (__src == 17)
    {
      v32 = __nwlog_obj();
      v33 = __src;
      if (!os_log_type_enabled(v32, (os_log_type_t)__src))
        goto LABEL_184;
      *(_DWORD *)buf = 136446210;
      v83 = "nw_http_fillout_indeterminate_binary_message_body_chunk_block_invoke";
      v34 = "%{public}s called with null cursor";
      goto LABEL_183;
    }
    if (type == OS_LOG_TYPE_DEFAULT)
    {
      v32 = __nwlog_obj();
      v33 = __src;
      if (!os_log_type_enabled(v32, (os_log_type_t)__src))
        goto LABEL_184;
      *(_DWORD *)buf = 136446210;
      v83 = "nw_http_fillout_indeterminate_binary_message_body_chunk_block_invoke";
      v34 = "%{public}s called with null cursor, backtrace limit exceeded";
      goto LABEL_183;
    }
    v51 = (char *)__nw_create_backtrace_string();
    v32 = __nwlog_obj();
    v33 = __src;
    v53 = os_log_type_enabled(v32, (os_log_type_t)__src);
    if (!v51)
    {
      if (!v53)
        goto LABEL_184;
      *(_DWORD *)buf = 136446210;
      v83 = "nw_http_fillout_indeterminate_binary_message_body_chunk_block_invoke";
      v34 = "%{public}s called with null cursor, no backtrace";
      goto LABEL_183;
    }
    if (!v53)
      goto LABEL_107;
    goto LABEL_106;
  }
  if (a5 <= 0x3F)
  {
    __src = a5;
    v21 = 1;
    goto LABEL_32;
  }
  if (!(a5 >> 14))
  {
    __src = bswap32(a5 | 0x4000) >> 16;
    v21 = 2;
    goto LABEL_32;
  }
  if (!(a5 >> 30))
  {
    __src = bswap32(a5 | 0x80000000);
    v21 = 4;
    goto LABEL_32;
  }
  if (a5 >> 62)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446466;
    v83 = "_http_vle_encode";
    v84 = 2048;
    v85 = (const char *)a5;
    v30 = (void *)_os_log_send_and_compose_impl();
    if (!__nwlog_abort((uint64_t)v30))
    {
      free(v30);
      v24 = *(char **)(*(_QWORD *)(*(_QWORD *)v11 + 8) + 24);
      goto LABEL_37;
    }
LABEL_220:
    __break(1u);
    return;
  }
  __src = bswap64(a5 | 0xC000000000000000);
  v21 = 8;
LABEL_32:
  v22 = *(_QWORD *)(*(_QWORD *)v13 + 8);
  if (*(_QWORD *)(v22 + 24) >= v21)
  {
    memcpy(v20, &__src, v21);
    v23 = *(_QWORD *)(v22 + 24);
    *(_QWORD *)(v22 + 24) = v23 - v21;
    if (v23 < v21)
    {
      if (gLogDatapath)
      {
        v63 = __nwlog_obj();
        if (os_log_type_enabled(v63, OS_LOG_TYPE_DEBUG))
        {
          v64 = *(_QWORD *)(v22 + 24);
          *(_DWORD *)buf = 136446978;
          v83 = "_http_safe_append";
          v84 = 2082;
          v85 = "*remaining";
          v86 = 2048;
          v87 = v21;
          v88 = 2048;
          v89 = v64;
          _os_log_impl(&dword_182FBE000, v63, OS_LOG_TYPE_DEBUG, "%{public}s Underflow: %{public}s, decrement %llu, result %llu", buf, 0x2Au);
        }
      }
      *(_QWORD *)(v22 + 24) = 0;
    }
    v24 = &v20[v21];
    goto LABEL_37;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v83 = "_http_safe_append";
  v39 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v80 = 0;
  if (__nwlog_fault(v39, &type, &v80))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v40 = __nwlog_obj();
      v41 = type;
      if (os_log_type_enabled(v40, type))
      {
        *(_DWORD *)buf = 136446210;
        v83 = "_http_safe_append";
        v42 = "%{public}s called with null (*remaining >= length)";
LABEL_200:
        _os_log_impl(&dword_182FBE000, v40, v41, v42, buf, 0xCu);
      }
    }
    else if (v80)
    {
      v65 = (char *)__nw_create_backtrace_string();
      v40 = __nwlog_obj();
      v41 = type;
      v66 = os_log_type_enabled(v40, type);
      if (v65)
      {
        if (v66)
        {
          *(_DWORD *)buf = 136446466;
          v83 = "_http_safe_append";
          v84 = 2082;
          v85 = v65;
          _os_log_impl(&dword_182FBE000, v40, v41, "%{public}s called with null (*remaining >= length), dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v65);
        goto LABEL_201;
      }
      if (v66)
      {
        *(_DWORD *)buf = 136446210;
        v83 = "_http_safe_append";
        v42 = "%{public}s called with null (*remaining >= length), no backtrace";
        goto LABEL_200;
      }
    }
    else
    {
      v40 = __nwlog_obj();
      v41 = type;
      if (os_log_type_enabled(v40, type))
      {
        *(_DWORD *)buf = 136446210;
        v83 = "_http_safe_append";
        v42 = "%{public}s called with null (*remaining >= length), backtrace limit exceeded";
        goto LABEL_200;
      }
    }
  }
LABEL_201:
  if (v39)
    free(v39);
  v24 = 0;
LABEL_37:
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v11 + 8) + 24) = v24;
  v25 = *(char **)(*(_QWORD *)(*(_QWORD *)v11 + 8) + 24);
  if (v25)
  {
    if (!a5)
      goto LABEL_45;
    if (a4)
    {
      v26 = *(_QWORD *)(*(_QWORD *)v13 + 8);
      if (*(_QWORD *)(v26 + 24) >= a5)
      {
        memcpy(v25, a4, a5);
        v27 = *(_QWORD *)(v26 + 24);
        *(_QWORD *)(v26 + 24) = v27 - a5;
        if (v27 < a5)
        {
          if (gLogDatapath)
          {
            v76 = __nwlog_obj();
            if (os_log_type_enabled(v76, OS_LOG_TYPE_DEBUG))
            {
              v77 = *(_QWORD *)(v26 + 24);
              *(_DWORD *)buf = 136446978;
              v83 = "_http_safe_append";
              v84 = 2082;
              v85 = "*remaining";
              v86 = 2048;
              v87 = a5;
              v88 = 2048;
              v89 = v77;
              _os_log_impl(&dword_182FBE000, v76, OS_LOG_TYPE_DEBUG, "%{public}s Underflow: %{public}s, decrement %llu, result %llu", buf, 0x2Au);
            }
          }
          *(_QWORD *)(v26 + 24) = 0;
        }
        v25 += a5;
        goto LABEL_45;
      }
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      v83 = "_http_safe_append";
      v47 = (char *)_os_log_send_and_compose_impl();
      LOBYTE(__src) = 16;
      type = OS_LOG_TYPE_DEFAULT;
      if (!__nwlog_fault(v47, &__src, &type))
        goto LABEL_217;
      if (__src == 17)
      {
        v48 = __nwlog_obj();
        v49 = __src;
        if (os_log_type_enabled(v48, (os_log_type_t)__src))
        {
          *(_DWORD *)buf = 136446210;
          v83 = "_http_safe_append";
          v50 = "%{public}s called with null (*remaining >= length)";
          goto LABEL_216;
        }
        goto LABEL_217;
      }
      if (type == OS_LOG_TYPE_DEFAULT)
      {
        v48 = __nwlog_obj();
        v49 = __src;
        if (os_log_type_enabled(v48, (os_log_type_t)__src))
        {
          *(_DWORD *)buf = 136446210;
          v83 = "_http_safe_append";
          v50 = "%{public}s called with null (*remaining >= length), backtrace limit exceeded";
          goto LABEL_216;
        }
        goto LABEL_217;
      }
      v73 = (char *)__nw_create_backtrace_string();
      v48 = __nwlog_obj();
      v49 = __src;
      v78 = os_log_type_enabled(v48, (os_log_type_t)__src);
      if (!v73)
      {
        if (v78)
        {
          *(_DWORD *)buf = 136446210;
          v83 = "_http_safe_append";
          v50 = "%{public}s called with null (*remaining >= length), no backtrace";
          goto LABEL_216;
        }
        goto LABEL_217;
      }
      if (v78)
      {
        *(_DWORD *)buf = 136446466;
        v83 = "_http_safe_append";
        v84 = 2082;
        v85 = v73;
        v75 = "%{public}s called with null (*remaining >= length), dumping backtrace:%{public}s";
        goto LABEL_155;
      }
    }
    else
    {
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      v83 = "_http_safe_append";
      v47 = (char *)_os_log_send_and_compose_impl();
      LOBYTE(__src) = 16;
      type = OS_LOG_TYPE_DEFAULT;
      if (!__nwlog_fault(v47, &__src, &type))
        goto LABEL_217;
      if (__src == 17)
      {
        v48 = __nwlog_obj();
        v49 = __src;
        if (os_log_type_enabled(v48, (os_log_type_t)__src))
        {
          *(_DWORD *)buf = 136446210;
          v83 = "_http_safe_append";
          v50 = "%{public}s called with null data";
LABEL_216:
          _os_log_impl(&dword_182FBE000, v48, v49, v50, buf, 0xCu);
        }
LABEL_217:
        if (v47)
          free(v47);
        v25 = 0;
LABEL_45:
        *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v11 + 8) + 24) = v25;
        if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v11 + 8) + 24))
          return;
        __nwlog_obj();
        *(_DWORD *)buf = 136446210;
        v83 = "nw_http_fillout_indeterminate_binary_message_body_chunk_block_invoke";
        v31 = (char *)_os_log_send_and_compose_impl();
        LOBYTE(__src) = 16;
        type = OS_LOG_TYPE_DEFAULT;
        if (__nwlog_fault(v31, &__src, &type))
        {
          if (__src == 17)
          {
            v32 = __nwlog_obj();
            v33 = __src;
            if (!os_log_type_enabled(v32, (os_log_type_t)__src))
              goto LABEL_184;
            *(_DWORD *)buf = 136446210;
            v83 = "nw_http_fillout_indeterminate_binary_message_body_chunk_block_invoke";
            v34 = "%{public}s called with null cursor";
            goto LABEL_183;
          }
          if (type == OS_LOG_TYPE_DEFAULT)
          {
            v32 = __nwlog_obj();
            v33 = __src;
            if (!os_log_type_enabled(v32, (os_log_type_t)__src))
              goto LABEL_184;
            *(_DWORD *)buf = 136446210;
            v83 = "nw_http_fillout_indeterminate_binary_message_body_chunk_block_invoke";
            v34 = "%{public}s called with null cursor, backtrace limit exceeded";
            goto LABEL_183;
          }
          v55 = (char *)__nw_create_backtrace_string();
          v32 = __nwlog_obj();
          v33 = __src;
          v56 = os_log_type_enabled(v32, (os_log_type_t)__src);
          if (!v55)
          {
            if (!v56)
              goto LABEL_184;
            *(_DWORD *)buf = 136446210;
            v83 = "nw_http_fillout_indeterminate_binary_message_body_chunk_block_invoke";
            v34 = "%{public}s called with null cursor, no backtrace";
            goto LABEL_183;
          }
          if (v56)
          {
            *(_DWORD *)buf = 136446466;
            v83 = "nw_http_fillout_indeterminate_binary_message_body_chunk_block_invoke";
            v84 = 2082;
            v85 = v55;
            _os_log_impl(&dword_182FBE000, v32, v33, "%{public}s called with null cursor, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v55);
        }
LABEL_184:
        if (v31)
          goto LABEL_185;
        return;
      }
      if (type == OS_LOG_TYPE_DEFAULT)
      {
        v48 = __nwlog_obj();
        v49 = __src;
        if (os_log_type_enabled(v48, (os_log_type_t)__src))
        {
          *(_DWORD *)buf = 136446210;
          v83 = "_http_safe_append";
          v50 = "%{public}s called with null data, backtrace limit exceeded";
          goto LABEL_216;
        }
        goto LABEL_217;
      }
      v73 = (char *)__nw_create_backtrace_string();
      v48 = __nwlog_obj();
      v49 = __src;
      v74 = os_log_type_enabled(v48, (os_log_type_t)__src);
      if (!v73)
      {
        if (v74)
        {
          *(_DWORD *)buf = 136446210;
          v83 = "_http_safe_append";
          v50 = "%{public}s called with null data, no backtrace";
          goto LABEL_216;
        }
        goto LABEL_217;
      }
      if (v74)
      {
        *(_DWORD *)buf = 136446466;
        v83 = "_http_safe_append";
        v84 = 2082;
        v85 = v73;
        v75 = "%{public}s called with null data, dumping backtrace:%{public}s";
LABEL_155:
        _os_log_impl(&dword_182FBE000, v48, v49, v75, buf, 0x16u);
      }
    }
    free(v73);
    goto LABEL_217;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v83 = "nw_http_fillout_indeterminate_binary_message_body_chunk_block_invoke";
  v31 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v80 = 0;
  if (!__nwlog_fault(v31, &type, &v80))
    goto LABEL_184;
  if (type == OS_LOG_TYPE_FAULT)
  {
    v32 = __nwlog_obj();
    v33 = type;
    if (!os_log_type_enabled(v32, type))
      goto LABEL_184;
    *(_DWORD *)buf = 136446210;
    v83 = "nw_http_fillout_indeterminate_binary_message_body_chunk_block_invoke";
    v34 = "%{public}s called with null cursor";
    goto LABEL_183;
  }
  if (!v80)
  {
    v32 = __nwlog_obj();
    v33 = type;
    if (!os_log_type_enabled(v32, type))
      goto LABEL_184;
    *(_DWORD *)buf = 136446210;
    v83 = "nw_http_fillout_indeterminate_binary_message_body_chunk_block_invoke";
    v34 = "%{public}s called with null cursor, backtrace limit exceeded";
    goto LABEL_183;
  }
  v51 = (char *)__nw_create_backtrace_string();
  v32 = __nwlog_obj();
  v33 = type;
  v54 = os_log_type_enabled(v32, type);
  if (!v51)
  {
    if (!v54)
      goto LABEL_184;
    *(_DWORD *)buf = 136446210;
    v83 = "nw_http_fillout_indeterminate_binary_message_body_chunk_block_invoke";
    v34 = "%{public}s called with null cursor, no backtrace";
    goto LABEL_183;
  }
  if (v54)
    goto LABEL_106;
LABEL_107:
  free(v51);
  if (v31)
LABEL_185:
    free(v31);
}

id *nw_http_copy_metadata_from_binary_message(_DWORD *a1, unint64_t a2, size_t *a3, BOOL *a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  NSObject *v11;
  uint32_t v12;
  _DWORD *v13;
  unint64_t v14;
  unint64_t v15;
  void *v16;
  void *v17;
  NSObject *v18;
  const char *v19;
  uint64_t v20;
  id *metadata_with_parsed_fields;
  NSObject *v22;
  uint32_t v23;
  unint64_t v24;
  char *v25;
  unint64_t v26;
  size_t v27;
  uint64_t v28;
  unint64_t v29;
  NSObject *v30;
  uint64_t v31;
  char *v32;
  BOOL v33;
  unint64_t v34;
  char *v35;
  NSObject *v36;
  os_log_type_t v37;
  const char *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  char *v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  size_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  BOOL v52;
  uint64_t v53;
  size_t v54;
  uint64_t v55;
  char *v56;
  unint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  char *v69;
  BOOL v70;
  uint64_t v71;
  char *v72;
  _BOOL4 v73;
  size_t v74;
  unint64_t v75;
  char *v76;
  unint64_t v77;
  char *v78;
  NSObject *v79;
  os_log_type_t v80;
  const char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  void *v88;
  size_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  unint64_t v93;
  char *v94;
  size_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  NSObject *v103;
  os_log_type_t v104;
  const char *v105;
  char *v106;
  uint64_t v107;
  NSObject *v108;
  const char *v109;
  char *backtrace_string;
  _BOOL4 v111;
  const char *v112;
  _BOOL4 v113;
  NSObject *v114;
  NSObject *v116;
  NSObject *v117;
  uint32_t v118;
  char *v119;
  _BOOL4 v120;
  char *v121;
  uint64_t v122;
  char *v123;
  unint64_t v124;
  char *v125;
  unint64_t v126;
  char *v127;
  NSObject *v128;
  os_log_type_t v129;
  const char *v130;
  char *v132;
  NSObject *v133;
  os_log_type_t v134;
  const char *v135;
  char *v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  unint64_t v142;
  char *v143;
  size_t v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  _BOOL8 v151;
  void *v152;
  char *v153;
  _BOOL4 v154;
  char *v155;
  _BOOL4 v156;
  char *v157;
  NSObject *v158;
  os_log_type_t v159;
  const char *v160;
  char *v161;
  char *v162;
  NSObject *v163;
  os_log_type_t v164;
  const char *v165;
  uint64_t v166;
  char *v167;
  _BOOL4 v168;
  char *v169;
  NSObject *v170;
  os_log_type_t v171;
  const char *v172;
  char *v174;
  _BOOL4 v175;
  char *v176;
  NSObject *v177;
  _BOOL4 v178;
  NSObject *v179;
  os_log_type_t v180;
  char *v181;
  NSObject *v182;
  os_log_type_t v183;
  const char *v184;
  char *v185;
  NSObject *v186;
  os_log_type_t v187;
  const char *v188;
  char *v189;
  _BOOL4 v190;
  char *v191;
  _BOOL4 v192;
  char *v193;
  NSObject *v194;
  os_log_type_t v195;
  const char *v196;
  char *v197;
  _BOOL4 v198;
  os_log_type_t v199;
  char *v200;
  char v201;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v204;
  __int16 v205;
  const char *v206;
  __int16 v207;
  uint64_t v208;
  __int16 v209;
  unint64_t v210;
  __int16 v211;
  char *v212;
  uint64_t v213;

  v213 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v204 = "nw_http_copy_metadata_from_binary_message";
    v102 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v201 = 0;
    if (!__nwlog_fault(v102, &type, &v201))
      goto LABEL_368;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v201)
      {
        v103 = __nwlog_obj();
        v104 = type;
        if (!os_log_type_enabled(v103, type))
          goto LABEL_368;
        *(_DWORD *)buf = 136446210;
        v204 = "nw_http_copy_metadata_from_binary_message";
        v105 = "%{public}s called with null buffer, backtrace limit exceeded";
        goto LABEL_367;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v103 = __nwlog_obj();
      v104 = type;
      v111 = os_log_type_enabled(v103, type);
      if (!backtrace_string)
      {
        if (!v111)
          goto LABEL_368;
        *(_DWORD *)buf = 136446210;
        v204 = "nw_http_copy_metadata_from_binary_message";
        v105 = "%{public}s called with null buffer, no backtrace";
        goto LABEL_367;
      }
      if (v111)
      {
        *(_DWORD *)buf = 136446466;
        v204 = "nw_http_copy_metadata_from_binary_message";
        v205 = 2082;
        v206 = backtrace_string;
        v112 = "%{public}s called with null buffer, dumping backtrace:%{public}s";
LABEL_306:
        _os_log_impl(&dword_182FBE000, v103, v104, v112, buf, 0x16u);
      }
LABEL_307:
      free(backtrace_string);
      goto LABEL_368;
    }
    v103 = __nwlog_obj();
    v104 = type;
    if (!os_log_type_enabled(v103, type))
      goto LABEL_368;
    *(_DWORD *)buf = 136446210;
    v204 = "nw_http_copy_metadata_from_binary_message";
    v105 = "%{public}s called with null buffer";
LABEL_367:
    _os_log_impl(&dword_182FBE000, v103, v104, v105, buf, 0xCu);
LABEL_368:
    if (v102)
      free(v102);
    return 0;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v204 = "nw_http_copy_metadata_from_binary_message";
    v102 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v201 = 0;
    if (!__nwlog_fault(v102, &type, &v201))
      goto LABEL_368;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v103 = __nwlog_obj();
      v104 = type;
      if (!os_log_type_enabled(v103, type))
        goto LABEL_368;
      *(_DWORD *)buf = 136446210;
      v204 = "nw_http_copy_metadata_from_binary_message";
      v105 = "%{public}s called with null buffer_length";
      goto LABEL_367;
    }
    if (!v201)
    {
      v103 = __nwlog_obj();
      v104 = type;
      if (!os_log_type_enabled(v103, type))
        goto LABEL_368;
      *(_DWORD *)buf = 136446210;
      v204 = "nw_http_copy_metadata_from_binary_message";
      v105 = "%{public}s called with null buffer_length, backtrace limit exceeded";
      goto LABEL_367;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v103 = __nwlog_obj();
    v104 = type;
    v113 = os_log_type_enabled(v103, type);
    if (backtrace_string)
    {
      if (v113)
      {
        *(_DWORD *)buf = 136446466;
        v204 = "nw_http_copy_metadata_from_binary_message";
        v205 = 2082;
        v206 = backtrace_string;
        v112 = "%{public}s called with null buffer_length, dumping backtrace:%{public}s";
        goto LABEL_306;
      }
      goto LABEL_307;
    }
    if (!v113)
      goto LABEL_368;
    *(_DWORD *)buf = 136446210;
    v204 = "nw_http_copy_metadata_from_binary_message";
    v105 = "%{public}s called with null buffer_length, no backtrace";
    goto LABEL_367;
  }
  v7 = *(unsigned __int8 *)a1;
  if (v7 <= 0x3F)
  {
    v8 = 1;
    goto LABEL_5;
  }
  if (v7 >> 6 == 2)
  {
    if (a2 < 4)
      goto LABEL_19;
    v7 = bswap32(*a1 & 0xFFFFFF7F);
    v8 = 4;
  }
  else
  {
    if (v7 >> 6 == 1)
    {
      if (a2 >= 2)
      {
        v7 = bswap32(*(_WORD *)a1 & 0xFFBF) >> 16;
        v8 = 2;
        goto LABEL_5;
      }
LABEL_19:
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v20 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446210;
        v204 = "nw_http_copy_metadata_from_binary_message";
        v10 = "%{public}s Failed to decode integer";
        v11 = v20;
        v12 = 12;
        goto LABEL_21;
      }
      return 0;
    }
    if (a2 < 8)
      goto LABEL_19;
    v7 = bswap64(*(_QWORD *)a1 & 0xFFFFFFFFFFFFFF3FLL);
    v8 = 8;
  }
LABEL_5:
  if (v7 >= 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v9 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v204 = "nw_http_copy_metadata_from_binary_message";
      v205 = 2048;
      v206 = (const char *)v7;
      v207 = 2048;
      v208 = 3;
      v10 = "%{public}s _output %llu > _max %llu";
      v11 = v9;
      v12 = 32;
LABEL_21:
      _os_log_impl(&dword_182FBE000, v11, OS_LOG_TYPE_ERROR, v10, buf, v12);
      return 0;
    }
    return 0;
  }
  v13 = (_DWORD *)((char *)a1 + v8);
  v14 = a2 - v8;
  v15 = v7 & 0xFFFFFFFFFFFFFFFDLL;
  v16 = (void *)_nw_http_parsed_fields_create();
  v17 = v16;
  if ((v7 & 0xFFFFFFFFFFFFFFFDLL) == 0)
  {
    if (a2 == v8)
    {
LABEL_23:
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v18 = gLogObj;
      if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
        goto LABEL_27;
      *(_DWORD *)buf = 136446210;
      v204 = "nw_http_copy_metadata_from_binary_message";
      v19 = "%{public}s Failed to decode integer";
      goto LABEL_25;
    }
    v27 = *(unsigned __int8 *)v13;
    if (v27 <= 0x3F)
    {
      v28 = 1;
      goto LABEL_35;
    }
    if (v27 >> 6 == 2)
    {
      if (v14 < 4)
        goto LABEL_23;
      v27 = bswap32(*v13 & 0xFFFFFF7F);
      v28 = 4;
    }
    else
    {
      if (v27 >> 6 == 1)
      {
        if (v14 < 2)
          goto LABEL_23;
        v27 = bswap32(*(_WORD *)v13 & 0xFFBF) >> 16;
        v28 = 2;
        goto LABEL_35;
      }
      if (v14 < 8)
        goto LABEL_23;
      v27 = bswap64(*(_QWORD *)v13 & 0xFFFFFFFFFFFFFF3FLL);
      v28 = 8;
    }
    if (v27 >= 0x10000)
    {
      v30 = __nwlog_obj();
      if (!os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
        goto LABEL_27;
      goto LABEL_515;
    }
LABEL_35:
    v29 = v14 - v28;
    if (v27 > v14 - v28)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v30 = gLogObj;
      if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
        goto LABEL_27;
      goto LABEL_404;
    }
    v32 = (char *)v13 + v28;
    if (!nw_http_parsed_fields_add(v16, ":method", 0xFFFFFFFFFFFFFFFFLL, v32, v27))
      goto LABEL_27;
    v33 = v29 >= v27;
    v34 = v29 - v27;
    if (!v33)
    {
      __nwlog_obj();
      *(_DWORD *)buf = 136446978;
      v204 = "nw_http_copy_metadata_from_binary_message";
      v205 = 2082;
      v206 = "remaining";
      v207 = 2048;
      v208 = v27;
      v209 = 2048;
      v210 = v34;
      v35 = (char *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      v201 = 0;
      if (!__nwlog_fault(v35, &type, &v201))
        goto LABEL_216;
      if (type == OS_LOG_TYPE_FAULT)
      {
        v36 = __nwlog_obj();
        v37 = type;
        if (!os_log_type_enabled(v36, type))
          goto LABEL_216;
        *(_DWORD *)buf = 136446978;
        v204 = "nw_http_copy_metadata_from_binary_message";
        v205 = 2082;
        v206 = "remaining";
        v207 = 2048;
        v208 = v27;
        v209 = 2048;
        v210 = v34;
        v38 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu";
      }
      else if (v201)
      {
        v72 = (char *)__nw_create_backtrace_string();
        v36 = __nwlog_obj();
        v37 = type;
        v73 = os_log_type_enabled(v36, type);
        if (v72)
        {
          if (v73)
          {
            *(_DWORD *)buf = 136447234;
            v204 = "nw_http_copy_metadata_from_binary_message";
            v205 = 2082;
            v206 = "remaining";
            v207 = 2048;
            v208 = v27;
            v209 = 2048;
            v210 = v34;
            v211 = 2082;
            v212 = v72;
            _os_log_impl(&dword_182FBE000, v36, v37, "%{public}s Underflow: %{public}s, decrement %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
          }
          free(v72);
          goto LABEL_216;
        }
        if (!v73)
        {
LABEL_216:
          if (v35)
            free(v35);
          goto LABEL_218;
        }
        *(_DWORD *)buf = 136446978;
        v204 = "nw_http_copy_metadata_from_binary_message";
        v205 = 2082;
        v206 = "remaining";
        v207 = 2048;
        v208 = v27;
        v209 = 2048;
        v210 = v34;
        v38 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, no backtrace";
      }
      else
      {
        v36 = __nwlog_obj();
        v37 = type;
        if (!os_log_type_enabled(v36, type))
          goto LABEL_216;
        *(_DWORD *)buf = 136446978;
        v204 = "nw_http_copy_metadata_from_binary_message";
        v205 = 2082;
        v206 = "remaining";
        v207 = 2048;
        v208 = v27;
        v209 = 2048;
        v210 = v34;
        v38 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, backtrace limit exceeded";
      }
      _os_log_impl(&dword_182FBE000, v36, v37, v38, buf, 0x2Au);
      goto LABEL_216;
    }
    if (!v34)
      goto LABEL_218;
    v58 = &v32[v27];
    v27 = v32[v27];
    if (v27 <= 0x3F)
    {
      v59 = 1;
      goto LABEL_116;
    }
    if (v27 >> 6 == 2)
    {
      if (v34 < 4)
        goto LABEL_218;
      v27 = bswap32(*(_DWORD *)v58 & 0xFFFFFF7F);
      v59 = 4;
    }
    else
    {
      if (v27 >> 6 == 1)
      {
        if (v34 >= 2)
        {
          v27 = bswap32(*(_WORD *)v58 & 0xFFBF) >> 16;
          v59 = 2;
          goto LABEL_116;
        }
LABEL_218:
        v18 = __nwlog_obj();
        if (!os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
          goto LABEL_27;
        *(_DWORD *)buf = 136446210;
        v204 = "nw_http_copy_metadata_from_binary_message";
        v19 = "%{public}s Failed to decode integer";
        goto LABEL_25;
      }
      if (v34 < 8)
        goto LABEL_218;
      v27 = bswap64(*(_QWORD *)v58 & 0xFFFFFFFFFFFFFF3FLL);
      v59 = 8;
    }
    if (v27 >= 0x10000)
    {
      v30 = __nwlog_obj();
      if (!os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
        goto LABEL_27;
      goto LABEL_515;
    }
LABEL_116:
    v29 = v34 - v59;
    if (v27 > v29)
    {
      v30 = __nwlog_obj();
      if (!os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
        goto LABEL_27;
      goto LABEL_404;
    }
    v76 = &v58[v59];
    if (v27 && !nw_http_parsed_fields_add(v17, ":scheme", 0xFFFFFFFFFFFFFFFFLL, &v58[v59], v27))
      goto LABEL_27;
    v33 = v29 >= v27;
    v77 = v29 - v27;
    if (!v33)
    {
      __nwlog_obj();
      *(_DWORD *)buf = 136446978;
      v204 = "nw_http_copy_metadata_from_binary_message";
      v205 = 2082;
      v206 = "remaining";
      v207 = 2048;
      v208 = v27;
      v209 = 2048;
      v210 = v77;
      v78 = (char *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      v201 = 0;
      if (!__nwlog_fault(v78, &type, &v201))
        goto LABEL_375;
      if (type == OS_LOG_TYPE_FAULT)
      {
        v79 = __nwlog_obj();
        v80 = type;
        if (!os_log_type_enabled(v79, type))
          goto LABEL_375;
        *(_DWORD *)buf = 136446978;
        v204 = "nw_http_copy_metadata_from_binary_message";
        v205 = 2082;
        v206 = "remaining";
        v207 = 2048;
        v208 = v27;
        v209 = 2048;
        v210 = v77;
        v81 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu";
      }
      else if (v201)
      {
        v119 = (char *)__nw_create_backtrace_string();
        v79 = __nwlog_obj();
        v80 = type;
        v120 = os_log_type_enabled(v79, type);
        if (v119)
        {
          if (v120)
          {
            *(_DWORD *)buf = 136447234;
            v204 = "nw_http_copy_metadata_from_binary_message";
            v205 = 2082;
            v206 = "remaining";
            v207 = 2048;
            v208 = v27;
            v209 = 2048;
            v210 = v77;
            v211 = 2082;
            v212 = v119;
            _os_log_impl(&dword_182FBE000, v79, v80, "%{public}s Underflow: %{public}s, decrement %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
          }
          free(v119);
          goto LABEL_375;
        }
        if (!v120)
        {
LABEL_375:
          if (v78)
            free(v78);
          goto LABEL_377;
        }
        *(_DWORD *)buf = 136446978;
        v204 = "nw_http_copy_metadata_from_binary_message";
        v205 = 2082;
        v206 = "remaining";
        v207 = 2048;
        v208 = v27;
        v209 = 2048;
        v210 = v77;
        v81 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, no backtrace";
      }
      else
      {
        v79 = __nwlog_obj();
        v80 = type;
        if (!os_log_type_enabled(v79, type))
          goto LABEL_375;
        *(_DWORD *)buf = 136446978;
        v204 = "nw_http_copy_metadata_from_binary_message";
        v205 = 2082;
        v206 = "remaining";
        v207 = 2048;
        v208 = v27;
        v209 = 2048;
        v210 = v77;
        v81 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, backtrace limit exceeded";
      }
      _os_log_impl(&dword_182FBE000, v79, v80, v81, buf, 0x2Au);
      goto LABEL_375;
    }
    if (!v77)
      goto LABEL_377;
    v106 = &v76[v27];
    v27 = v76[v27];
    if (v27 <= 0x3F)
    {
      v107 = 1;
      goto LABEL_291;
    }
    if (v27 >> 6 == 2)
    {
      if (v77 < 4)
        goto LABEL_377;
      v27 = bswap32(*(_DWORD *)v106 & 0xFFFFFF7F);
      v107 = 4;
    }
    else
    {
      if (v27 >> 6 == 1)
      {
        if (v77 >= 2)
        {
          v27 = bswap32(*(_WORD *)v106 & 0xFFBF) >> 16;
          v107 = 2;
          goto LABEL_291;
        }
LABEL_377:
        v18 = __nwlog_obj();
        if (!os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
          goto LABEL_27;
        *(_DWORD *)buf = 136446210;
        v204 = "nw_http_copy_metadata_from_binary_message";
        v19 = "%{public}s Failed to decode integer";
        goto LABEL_25;
      }
      if (v77 < 8)
        goto LABEL_377;
      v27 = bswap64(*(_QWORD *)v106 & 0xFFFFFFFFFFFFFF3FLL);
      v107 = 8;
    }
    if (v27 >= 0x10000)
    {
      v30 = __nwlog_obj();
      if (!os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
        goto LABEL_27;
      goto LABEL_515;
    }
LABEL_291:
    v29 = v77 - v107;
    if (v27 > v29)
    {
      v30 = __nwlog_obj();
      if (!os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
        goto LABEL_27;
      goto LABEL_404;
    }
    v125 = &v106[v107];
    if (v27 && !nw_http_parsed_fields_add(v17, ":authority", 0xFFFFFFFFFFFFFFFFLL, &v106[v107], v27))
      goto LABEL_27;
    v33 = v29 >= v27;
    v126 = v29 - v27;
    if (!v33)
    {
      __nwlog_obj();
      *(_DWORD *)buf = 136446978;
      v204 = "nw_http_copy_metadata_from_binary_message";
      v205 = 2082;
      v206 = "remaining";
      v207 = 2048;
      v208 = v27;
      v209 = 2048;
      v210 = v126;
      v127 = (char *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      v201 = 0;
      if (!__nwlog_fault(v127, &type, &v201))
        goto LABEL_503;
      if (type == OS_LOG_TYPE_FAULT)
      {
        v128 = __nwlog_obj();
        v129 = type;
        if (!os_log_type_enabled(v128, type))
          goto LABEL_503;
        *(_DWORD *)buf = 136446978;
        v204 = "nw_http_copy_metadata_from_binary_message";
        v205 = 2082;
        v206 = "remaining";
        v207 = 2048;
        v208 = v27;
        v209 = 2048;
        v210 = v126;
        v130 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu";
      }
      else if (v201)
      {
        v155 = (char *)__nw_create_backtrace_string();
        v128 = __nwlog_obj();
        v129 = type;
        v156 = os_log_type_enabled(v128, type);
        if (v155)
        {
          if (v156)
          {
            *(_DWORD *)buf = 136447234;
            v204 = "nw_http_copy_metadata_from_binary_message";
            v205 = 2082;
            v206 = "remaining";
            v207 = 2048;
            v208 = v27;
            v209 = 2048;
            v210 = v126;
            v211 = 2082;
            v212 = v155;
            _os_log_impl(&dword_182FBE000, v128, v129, "%{public}s Underflow: %{public}s, decrement %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
          }
          free(v155);
          goto LABEL_503;
        }
        if (!v156)
        {
LABEL_503:
          if (v127)
            free(v127);
          goto LABEL_505;
        }
        *(_DWORD *)buf = 136446978;
        v204 = "nw_http_copy_metadata_from_binary_message";
        v205 = 2082;
        v206 = "remaining";
        v207 = 2048;
        v208 = v27;
        v209 = 2048;
        v210 = v126;
        v130 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, no backtrace";
      }
      else
      {
        v128 = __nwlog_obj();
        v129 = type;
        if (!os_log_type_enabled(v128, type))
          goto LABEL_503;
        *(_DWORD *)buf = 136446978;
        v204 = "nw_http_copy_metadata_from_binary_message";
        v205 = 2082;
        v206 = "remaining";
        v207 = 2048;
        v208 = v27;
        v209 = 2048;
        v210 = v126;
        v130 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, backtrace limit exceeded";
      }
      _os_log_impl(&dword_182FBE000, v128, v129, v130, buf, 0x2Au);
      goto LABEL_503;
    }
    if (!v126)
      goto LABEL_505;
    v136 = &v125[v27];
    v27 = v125[v27];
    if (v27 <= 0x3F)
    {
      v137 = 1;
      goto LABEL_402;
    }
    if (v27 >> 6 == 2)
    {
      if (v126 < 4)
        goto LABEL_505;
      v27 = bswap32(*(_DWORD *)v136 & 0xFFFFFF7F);
      v137 = 4;
    }
    else
    {
      if (v27 >> 6 == 1)
      {
        if (v126 >= 2)
        {
          v27 = bswap32(*(_WORD *)v136 & 0xFFBF) >> 16;
          v137 = 2;
          goto LABEL_402;
        }
LABEL_505:
        v18 = __nwlog_obj();
        if (!os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
          goto LABEL_27;
        *(_DWORD *)buf = 136446210;
        v204 = "nw_http_copy_metadata_from_binary_message";
        v19 = "%{public}s Failed to decode integer";
        goto LABEL_25;
      }
      if (v126 < 8)
        goto LABEL_505;
      v27 = bswap64(*(_QWORD *)v136 & 0xFFFFFFFFFFFFFF3FLL);
      v137 = 8;
    }
    if (v27 < 0x10000)
    {
LABEL_402:
      v29 = v126 - v137;
      if (v27 > v29)
      {
        v30 = __nwlog_obj();
        if (!os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
          goto LABEL_27;
LABEL_404:
        *(_DWORD *)buf = 136446722;
        v204 = "nw_http_copy_metadata_from_binary_message";
        v205 = 2048;
        v206 = (const char *)v27;
        v207 = 2048;
        v208 = v29;
        v19 = "%{public}s _length %llu > remaining %zu";
        goto LABEL_172;
      }
      v161 = &v136[v137];
      if (v27 && !nw_http_parsed_fields_add(v17, ":path", 0xFFFFFFFFFFFFFFFFLL, &v136[v137], v27))
        goto LABEL_27;
      v200 = &v161[v27];
      v26 = v29 - v27;
      if (v29 >= v27)
      {
        v25 = &v161[v27];
        goto LABEL_64;
      }
      __nwlog_obj();
      *(_DWORD *)buf = 136446978;
      v204 = "nw_http_copy_metadata_from_binary_message";
      v205 = 2082;
      v206 = "remaining";
      v207 = 2048;
      v208 = v27;
      v209 = 2048;
      v210 = v29 - v27;
      v162 = (char *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      v201 = 0;
      if (__nwlog_fault(v162, &type, &v201))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          v163 = __nwlog_obj();
          v164 = type;
          if (os_log_type_enabled(v163, type))
          {
            *(_DWORD *)buf = 136446978;
            v204 = "nw_http_copy_metadata_from_binary_message";
            v205 = 2082;
            v206 = "remaining";
            v207 = 2048;
            v208 = v27;
            v209 = 2048;
            v210 = v26;
            v165 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu";
LABEL_556:
            v179 = v163;
            v180 = v164;
LABEL_557:
            _os_log_impl(&dword_182FBE000, v179, v180, v165, buf, 0x2Au);
          }
        }
        else if (v201)
        {
          v176 = (char *)__nw_create_backtrace_string();
          v177 = __nwlog_obj();
          v199 = type;
          v178 = os_log_type_enabled(v177, type);
          if (v176)
          {
            if (v178)
            {
              *(_DWORD *)buf = 136447234;
              v204 = "nw_http_copy_metadata_from_binary_message";
              v205 = 2082;
              v206 = "remaining";
              v207 = 2048;
              v208 = v27;
              v209 = 2048;
              v210 = v26;
              v211 = 2082;
              v212 = v176;
              _os_log_impl(&dword_182FBE000, v177, v199, "%{public}s Underflow: %{public}s, decrement %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
            }
            free(v176);
            goto LABEL_558;
          }
          if (v178)
          {
            *(_DWORD *)buf = 136446978;
            v204 = "nw_http_copy_metadata_from_binary_message";
            v205 = 2082;
            v206 = "remaining";
            v207 = 2048;
            v208 = v27;
            v209 = 2048;
            v210 = v26;
            v165 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, no backtrace";
            v179 = v177;
            v180 = v199;
            goto LABEL_557;
          }
        }
        else
        {
          v163 = __nwlog_obj();
          v164 = type;
          if (os_log_type_enabled(v163, type))
          {
            *(_DWORD *)buf = 136446978;
            v204 = "nw_http_copy_metadata_from_binary_message";
            v205 = 2082;
            v206 = "remaining";
            v207 = 2048;
            v208 = v27;
            v209 = 2048;
            v210 = v26;
            v165 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, backtrace limit exceeded";
            goto LABEL_556;
          }
        }
      }
LABEL_558:
      if (v162)
        free(v162);
      v26 = 0;
      v25 = v200;
      goto LABEL_64;
    }
    v30 = __nwlog_obj();
    if (!os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      goto LABEL_27;
LABEL_515:
    *(_DWORD *)buf = 136446722;
    v204 = "nw_http_copy_metadata_from_binary_message";
    v205 = 2048;
    v206 = (const char *)v27;
    v207 = 2048;
    v208 = 0xFFFFLL;
    v19 = "%{public}s _output %llu > _max %llu";
    goto LABEL_172;
  }
  if (a2 == v8)
  {
LABEL_14:
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v18 = gLogObj;
    if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      goto LABEL_27;
    *(_DWORD *)buf = 136446210;
    v204 = "nw_http_copy_metadata_from_binary_message";
    v19 = "%{public}s Failed to decode integer";
    goto LABEL_25;
  }
  v24 = *(unsigned __int8 *)v13;
  if (v24 > 0x3F)
  {
    if (v24 >> 6 == 2)
    {
      if (v14 < 4)
        goto LABEL_14;
      v24 = bswap32(*v13 & 0xFFFFFF7F);
      v31 = 4;
    }
    else if (v24 >> 6 == 1)
    {
      if (v14 < 2)
        goto LABEL_14;
      v24 = bswap32(*(_WORD *)v13 & 0xFFBF) >> 16;
      v31 = 2;
    }
    else
    {
      if (v14 < 8)
        goto LABEL_14;
      v24 = bswap64(*(_QWORD *)v13 & 0xFFFFFFFFFFFFFF3FLL);
      v31 = 8;
    }
    if (v24 >= 0x3E9)
    {
      v30 = __nwlog_obj();
      if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446722;
        v204 = "nw_http_copy_metadata_from_binary_message";
        v205 = 2048;
        v206 = (const char *)v24;
        v207 = 2048;
        v208 = 1000;
        v19 = "%{public}s _output %llu > _max %llu";
        goto LABEL_172;
      }
      goto LABEL_27;
    }
    v25 = (char *)v13 + v31;
    v26 = v14 - v31;
  }
  else
  {
    v25 = (char *)v13 + 1;
    v26 = v14 - 1;
  }
  if (v24 - 601 <= 0xFFFFFFFFFFFFFE6ELL)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v39 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      v204 = "nw_http_copy_metadata_from_binary_message";
      v205 = 2048;
      v206 = (const char *)v24;
      v19 = "%{public}s Informational statuses not supported: %llu";
      v22 = v39;
      v23 = 22;
      goto LABEL_26;
    }
    goto LABEL_27;
  }
  snprintf((char *)buf, 4uLL, "%llu", v24);
  nw_http_parsed_fields_add(v17, ":status", 0xFFFFFFFFFFFFFFFFLL, (char *)buf, 0xFFFFFFFFFFFFFFFFLL);
LABEL_64:
  v40 = v7 & 2;
  if (a4)
    *a4 = v40 == 2;
  if (v40 != 2)
  {
    if (v26)
    {
      v54 = *v25;
      if (v54 <= 0x3F)
      {
        v55 = 1;
LABEL_102:
        v56 = &v25[v55];
LABEL_103:
        v57 = v26 - v55;
        if (v54 > v26 - v55)
        {
          v30 = __nwlog_obj();
          if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446722;
            v204 = "nw_http_copy_metadata_from_binary_message";
            v205 = 2048;
            v206 = (const char *)v54;
            v207 = 2048;
            v208 = v57;
            v19 = "%{public}s _length %llu > remaining %zu";
            goto LABEL_172;
          }
          goto LABEL_27;
        }
        v60 = &v56[v54];
        while (1)
        {
          if (v56 >= v60)
          {
            if (v56)
            {
              if (!v57)
                goto LABEL_361;
              v54 = *v56;
              if (v54 <= 0x3F)
              {
                v85 = 1;
                goto LABEL_231;
              }
              if (v54 >> 6 == 2)
              {
                if (v57 < 4)
                  goto LABEL_361;
                v54 = bswap32(*(_DWORD *)v56 & 0xFFFFFF7F);
                v85 = 4;
              }
              else
              {
                if (v54 >> 6 == 1)
                {
                  if (v57 >= 2)
                  {
                    v54 = bswap32(*(_WORD *)v56 & 0xFFBF) >> 16;
                    v85 = 2;
                    goto LABEL_231;
                  }
LABEL_361:
                  v18 = __nwlog_obj();
                  if (!os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
                    goto LABEL_27;
                  *(_DWORD *)buf = 136446210;
                  v204 = "nw_http_copy_metadata_from_binary_message";
                  v19 = "%{public}s Failed to decode integer";
                  goto LABEL_25;
                }
                if (v57 < 8)
                  goto LABEL_361;
                v54 = bswap64(*(_QWORD *)v56 & 0xFFFFFFFFFFFFFF3FLL);
                v85 = 8;
              }
LABEL_231:
              v63 = v57 - v85;
              v86 = v57 - v85 - v54;
              if (v57 - v85 < v54)
              {
                v30 = __nwlog_obj();
                if (!os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
                  goto LABEL_27;
                goto LABEL_233;
              }
              if (a3)
                *a3 = v54;
              if (v63 == v54)
                goto LABEL_167;
              v121 = &v56[v85 + v54];
              v54 = *v121;
              if (v54 <= 0x3F)
              {
                v122 = 1;
                goto LABEL_331;
              }
              if (v54 >> 6 == 2)
              {
                if (v86 < 4)
                  goto LABEL_460;
                v54 = bswap32(*(_DWORD *)v121 & 0xFFFFFF7F);
                v122 = 4;
LABEL_331:
                v123 = &v121[v122];
              }
              else
              {
                if (v54 >> 6 == 1)
                {
                  if (v86 >= 2)
                  {
                    v54 = bswap32(*(_WORD *)v121 & 0xFFBF) >> 16;
                    v122 = 2;
                    goto LABEL_331;
                  }
LABEL_460:
                  v18 = __nwlog_obj();
                  if (!os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
                    goto LABEL_27;
                  *(_DWORD *)buf = 136446210;
                  v204 = "nw_http_copy_metadata_from_binary_message";
                  v19 = "%{public}s Failed to decode integer";
                  goto LABEL_25;
                }
                if (v86 < 8)
                  goto LABEL_460;
                v166 = *(_QWORD *)v121;
                v123 = v121 + 8;
                v54 = bswap64(v166 & 0xFFFFFFFFFFFFFF3FLL);
                if (HIDWORD(v54))
                {
                  v30 = __nwlog_obj();
                  if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
                    goto LABEL_481;
                  goto LABEL_27;
                }
                v122 = 8;
              }
              v124 = v86 - v122;
              if (v54 > v86 - v122)
              {
                v30 = __nwlog_obj();
                if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 136446722;
                  v204 = "nw_http_copy_metadata_from_binary_message";
                  v205 = 2048;
                  v206 = (const char *)v54;
                  v207 = 2048;
                  v208 = v124;
                  v19 = "%{public}s _length %llu > remaining %zu";
                  goto LABEL_172;
                }
                goto LABEL_27;
              }
              if (!v54)
                goto LABEL_167;
              v88 = 0;
              v138 = &v123[v54];
              while (2)
              {
                if (v123 >= v138)
                {
LABEL_444:
                  metadata_with_parsed_fields = nw_http_create_metadata_with_parsed_fields(v17, v15 == 0);
                  if (!v88)
                    goto LABEL_28;
                  v151 = nw_http_parsed_fields_copy_trailer_fields(v88);
                  if (v151)
                  {
                    v152 = (void *)v151;
                    nw_http_metadata_set_trailer_fields(metadata_with_parsed_fields, (void *)v151);
                    os_release(v152);
                    goto LABEL_553;
                  }
                  __nwlog_obj();
                  *(_DWORD *)buf = 136446210;
                  v204 = "nw_http_copy_metadata_from_binary_message";
                  v185 = (char *)_os_log_send_and_compose_impl();
                  type = OS_LOG_TYPE_ERROR;
                  v201 = 0;
                  if (!__nwlog_fault(v185, &type, &v201))
                    goto LABEL_601;
                  if (type == OS_LOG_TYPE_FAULT)
                  {
                    v186 = __nwlog_obj();
                    v187 = type;
                    if (os_log_type_enabled(v186, type))
                    {
                      *(_DWORD *)buf = 136446210;
                      v204 = "nw_http_copy_metadata_from_binary_message";
                      v188 = "%{public}s called with null extracted_trailer_fields";
                      goto LABEL_600;
                    }
                    goto LABEL_601;
                  }
                  if (v201)
                  {
                    v191 = (char *)__nw_create_backtrace_string();
                    v186 = __nwlog_obj();
                    v187 = type;
                    v192 = os_log_type_enabled(v186, type);
                    if (v191)
                    {
                      if (v192)
                      {
                        *(_DWORD *)buf = 136446466;
                        v204 = "nw_http_copy_metadata_from_binary_message";
                        v205 = 2082;
                        v206 = v191;
                        _os_log_impl(&dword_182FBE000, v186, v187, "%{public}s called with null extracted_trailer_fields, dumping backtrace:%{public}s", buf, 0x16u);
                      }
                      free(v191);
                      goto LABEL_601;
                    }
                    if (!v192)
                    {
LABEL_601:
                      if (v185)
                        free(v185);
                      metadata_with_parsed_fields = 0;
                      goto LABEL_553;
                    }
                    *(_DWORD *)buf = 136446210;
                    v204 = "nw_http_copy_metadata_from_binary_message";
                    v188 = "%{public}s called with null extracted_trailer_fields, no backtrace";
                  }
                  else
                  {
                    v186 = __nwlog_obj();
                    v187 = type;
                    if (!os_log_type_enabled(v186, type))
                      goto LABEL_601;
                    *(_DWORD *)buf = 136446210;
                    v204 = "nw_http_copy_metadata_from_binary_message";
                    v188 = "%{public}s called with null extracted_trailer_fields, backtrace limit exceeded";
                  }
LABEL_600:
                  _os_log_impl(&dword_182FBE000, v186, v187, v188, buf, 0xCu);
                  goto LABEL_601;
                }
                if (!v88)
                  v88 = (void *)_nw_http_parsed_fields_create();
                if (!v123)
                {
                  __nwlog_obj();
                  *(_DWORD *)buf = 136446210;
                  v204 = "_http_vle_decode";
                  v193 = (char *)_os_log_send_and_compose_impl();
                  type = OS_LOG_TYPE_ERROR;
                  v201 = 0;
                  if (!__nwlog_fault(v193, &type, &v201))
                    goto LABEL_614;
                  if (type == OS_LOG_TYPE_FAULT)
                  {
                    v194 = __nwlog_obj();
                    v195 = type;
                    if (os_log_type_enabled(v194, type))
                    {
                      *(_DWORD *)buf = 136446210;
                      v204 = "_http_vle_decode";
                      v196 = "%{public}s called with null *buffer";
                      goto LABEL_613;
                    }
                    goto LABEL_614;
                  }
                  if (!v201)
                  {
                    v194 = __nwlog_obj();
                    v195 = type;
                    if (!os_log_type_enabled(v194, type))
                      goto LABEL_614;
                    *(_DWORD *)buf = 136446210;
                    v204 = "_http_vle_decode";
                    v196 = "%{public}s called with null *buffer, backtrace limit exceeded";
                    goto LABEL_613;
                  }
                  v197 = (char *)__nw_create_backtrace_string();
                  v194 = __nwlog_obj();
                  v195 = type;
                  v198 = os_log_type_enabled(v194, type);
                  if (v197)
                  {
                    if (v198)
                    {
                      *(_DWORD *)buf = 136446466;
                      v204 = "_http_vle_decode";
                      v205 = 2082;
                      v206 = v197;
                      _os_log_impl(&dword_182FBE000, v194, v195, "%{public}s called with null *buffer, dumping backtrace:%{public}s", buf, 0x16u);
                    }
                    free(v197);
                    goto LABEL_614;
                  }
                  if (v198)
                  {
                    *(_DWORD *)buf = 136446210;
                    v204 = "_http_vle_decode";
                    v196 = "%{public}s called with null *buffer, no backtrace";
LABEL_613:
                    _os_log_impl(&dword_182FBE000, v194, v195, v196, buf, 0xCu);
                  }
LABEL_614:
                  if (v193)
                    free(v193);
LABEL_616:
                  v108 = __nwlog_obj();
                  if (!os_log_type_enabled(v108, OS_LOG_TYPE_ERROR))
                    goto LABEL_552;
                  *(_DWORD *)buf = 136446210;
                  v204 = "nw_http_copy_metadata_from_binary_message";
                  v109 = "%{public}s Failed to decode integer";
LABEL_550:
                  v116 = v108;
                  v118 = 12;
LABEL_551:
                  _os_log_impl(&dword_182FBE000, v116, OS_LOG_TYPE_ERROR, v109, buf, v118);
                  goto LABEL_552;
                }
                if (!v124)
                  goto LABEL_616;
                v89 = *v123;
                if (v89 <= 0x3F)
                {
                  v139 = 1;
                  goto LABEL_422;
                }
                if (v89 >> 6 == 2)
                {
                  if (v124 < 4)
                    goto LABEL_616;
                  v89 = bswap32(*(_DWORD *)v123 & 0xFFFFFF7F);
                  v139 = 4;
LABEL_422:
                  v140 = &v123[v139];
                }
                else
                {
                  if (v89 >> 6 == 1)
                  {
                    if (v124 < 2)
                      goto LABEL_616;
                    v89 = bswap32(*(_WORD *)v123 & 0xFFBF) >> 16;
                    v139 = 2;
                    goto LABEL_422;
                  }
                  if (v124 < 8)
                    goto LABEL_616;
                  v147 = *(_QWORD *)v123;
                  v146 = v123 + 8;
                  v89 = bswap64(v147 & 0xFFFFFFFFFFFFFF3FLL);
                  if (HIDWORD(v89))
                  {
                    v114 = __nwlog_obj();
                    if (os_log_type_enabled(v114, OS_LOG_TYPE_ERROR))
                    {
LABEL_391:
                      *(_DWORD *)buf = 136446722;
                      v204 = "nw_http_copy_metadata_from_binary_message";
                      v205 = 2048;
                      v206 = (const char *)v89;
                      v207 = 2048;
                      v208 = 0xFFFFFFFFLL;
                      v109 = "%{public}s _output %llu > _max %llu";
                      goto LABEL_310;
                    }
LABEL_552:
                    metadata_with_parsed_fields = 0;
                    if (!v88)
                      goto LABEL_28;
LABEL_553:
                    os_release(v88);
                    goto LABEL_28;
                  }
                  v139 = 8;
                  v140 = v146;
                }
                v141 = v124 - v139;
                v33 = v124 - v139 >= v89;
                v142 = v124 - v139 - v89;
                if (!v33)
                {
                  v114 = __nwlog_obj();
                  if (!os_log_type_enabled(v114, OS_LOG_TYPE_ERROR))
                    goto LABEL_552;
                  *(_DWORD *)buf = 136446722;
                  v204 = "nw_http_copy_metadata_from_binary_message";
                  v205 = 2048;
                  v206 = (const char *)v89;
                  v207 = 2048;
                  v208 = v141;
                  v109 = "%{public}s _length %llu > remaining %zu";
LABEL_310:
                  v116 = v114;
LABEL_314:
                  v118 = 32;
                  goto LABEL_551;
                }
                if (!v142)
                  goto LABEL_507;
                v143 = &v140[v89];
                v144 = v140[v89];
                if (v144 <= 0x3F)
                {
                  v145 = 1;
                  goto LABEL_437;
                }
                if (v144 >> 6 == 2)
                {
                  if (v142 < 4)
                    goto LABEL_507;
                  v144 = bswap32(*(_DWORD *)v143 & 0xFFFFFF7F);
                  v145 = 4;
LABEL_437:
                  v148 = &v143[v145];
                }
                else
                {
                  if (v144 >> 6 == 1)
                  {
                    if (v142 < 2)
                      goto LABEL_507;
                    v144 = bswap32(*(_WORD *)v143 & 0xFFBF) >> 16;
                    v145 = 2;
                    goto LABEL_437;
                  }
                  if (v142 < 8)
                  {
LABEL_507:
                    v108 = __nwlog_obj();
                    if (!os_log_type_enabled(v108, OS_LOG_TYPE_ERROR))
                      goto LABEL_552;
                    *(_DWORD *)buf = 136446210;
                    v204 = "nw_http_copy_metadata_from_binary_message";
                    v109 = "%{public}s Failed to decode integer";
                    goto LABEL_550;
                  }
                  v150 = *(_QWORD *)v143;
                  v148 = v143 + 8;
                  v144 = bswap64(v150 & 0xFFFFFFFFFFFFFF3FLL);
                  if (HIDWORD(v144))
                  {
                    v117 = __nwlog_obj();
                    if (!os_log_type_enabled(v117, OS_LOG_TYPE_ERROR))
                      goto LABEL_552;
                    *(_DWORD *)buf = 136446722;
                    v204 = "nw_http_copy_metadata_from_binary_message";
                    v205 = 2048;
                    v206 = (const char *)v144;
                    v207 = 2048;
                    v208 = 0xFFFFFFFFLL;
                    v109 = "%{public}s _output %llu > _max %llu";
                    goto LABEL_313;
                  }
                  v145 = 8;
                }
                v149 = v142 - v145;
                v124 = v142 - v145 - v144;
                if (v142 - v145 < v144)
                {
                  v117 = __nwlog_obj();
                  if (!os_log_type_enabled(v117, OS_LOG_TYPE_ERROR))
                    goto LABEL_552;
                  *(_DWORD *)buf = 136446722;
                  v204 = "nw_http_copy_metadata_from_binary_message";
                  v205 = 2048;
                  v206 = (const char *)v144;
                  v207 = 2048;
                  v208 = v149;
                  v109 = "%{public}s _length %llu > remaining %zu";
LABEL_313:
                  v116 = v117;
                  goto LABEL_314;
                }
                v123 = &v148[v144];
                if (!nw_http_parsed_fields_add(v88, v140, v89, v148, v144))
                  goto LABEL_552;
                continue;
              }
            }
            __nwlog_obj();
            *(_DWORD *)buf = 136446210;
            v204 = "_http_vle_decode";
            v181 = (char *)_os_log_send_and_compose_impl();
            type = OS_LOG_TYPE_ERROR;
            v201 = 0;
            if (!__nwlog_fault(v181, &type, &v201))
              goto LABEL_594;
            if (type == OS_LOG_TYPE_FAULT)
            {
              v182 = __nwlog_obj();
              v183 = type;
              if (os_log_type_enabled(v182, type))
              {
                *(_DWORD *)buf = 136446210;
                v204 = "_http_vle_decode";
                v184 = "%{public}s called with null *buffer";
                goto LABEL_593;
              }
              goto LABEL_594;
            }
            if (v201)
            {
              v189 = (char *)__nw_create_backtrace_string();
              v182 = __nwlog_obj();
              v183 = type;
              v190 = os_log_type_enabled(v182, type);
              if (v189)
              {
                if (v190)
                {
                  *(_DWORD *)buf = 136446466;
                  v204 = "_http_vle_decode";
                  v205 = 2082;
                  v206 = v189;
                  _os_log_impl(&dword_182FBE000, v182, v183, "%{public}s called with null *buffer, dumping backtrace:%{public}s", buf, 0x16u);
                }
                free(v189);
                goto LABEL_594;
              }
              if (!v190)
              {
LABEL_594:
                if (v181)
                  free(v181);
                goto LABEL_361;
              }
              *(_DWORD *)buf = 136446210;
              v204 = "_http_vle_decode";
              v184 = "%{public}s called with null *buffer, no backtrace";
            }
            else
            {
              v182 = __nwlog_obj();
              v183 = type;
              if (!os_log_type_enabled(v182, type))
                goto LABEL_594;
              *(_DWORD *)buf = 136446210;
              v204 = "_http_vle_decode";
              v184 = "%{public}s called with null *buffer, backtrace limit exceeded";
            }
LABEL_593:
            _os_log_impl(&dword_182FBE000, v182, v183, v184, buf, 0xCu);
            goto LABEL_594;
          }
          if (!v56)
          {
            __nwlog_obj();
            *(_DWORD *)buf = 136446210;
            v204 = "_http_vle_decode";
            v157 = (char *)_os_log_send_and_compose_impl();
            type = OS_LOG_TYPE_ERROR;
            v201 = 0;
            if (!__nwlog_fault(v157, &type, &v201))
              goto LABEL_532;
            if (type == OS_LOG_TYPE_FAULT)
            {
              v158 = __nwlog_obj();
              v159 = type;
              if (os_log_type_enabled(v158, type))
              {
                *(_DWORD *)buf = 136446210;
                v204 = "_http_vle_decode";
                v160 = "%{public}s called with null *buffer";
                goto LABEL_531;
              }
              goto LABEL_532;
            }
            if (!v201)
            {
              v158 = __nwlog_obj();
              v159 = type;
              if (!os_log_type_enabled(v158, type))
                goto LABEL_532;
              *(_DWORD *)buf = 136446210;
              v204 = "_http_vle_decode";
              v160 = "%{public}s called with null *buffer, backtrace limit exceeded";
              goto LABEL_531;
            }
            v167 = (char *)__nw_create_backtrace_string();
            v158 = __nwlog_obj();
            v159 = type;
            v168 = os_log_type_enabled(v158, type);
            if (v167)
            {
              if (v168)
              {
                *(_DWORD *)buf = 136446466;
                v204 = "_http_vle_decode";
                v205 = 2082;
                v206 = v167;
                _os_log_impl(&dword_182FBE000, v158, v159, "%{public}s called with null *buffer, dumping backtrace:%{public}s", buf, 0x16u);
              }
              free(v167);
              goto LABEL_532;
            }
            if (v168)
            {
              *(_DWORD *)buf = 136446210;
              v204 = "_http_vle_decode";
              v160 = "%{public}s called with null *buffer, no backtrace";
LABEL_531:
              _os_log_impl(&dword_182FBE000, v158, v159, v160, buf, 0xCu);
            }
LABEL_532:
            if (v157)
              free(v157);
LABEL_534:
            v18 = __nwlog_obj();
            if (!os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
              goto LABEL_27;
            *(_DWORD *)buf = 136446210;
            v204 = "nw_http_copy_metadata_from_binary_message";
            v19 = "%{public}s Failed to decode integer";
LABEL_25:
            v22 = v18;
            v23 = 12;
            goto LABEL_26;
          }
          if (!v57)
            goto LABEL_534;
          v54 = *v56;
          if (v54 <= 0x3F)
            break;
          if (v54 >> 6 == 2)
          {
            if (v57 < 4)
              goto LABEL_534;
            v54 = bswap32(*(_DWORD *)v56 & 0xFFFFFF7F);
            v61 = 4;
            goto LABEL_135;
          }
          if (v54 >> 6 == 1)
          {
            if (v57 < 2)
              goto LABEL_534;
            v54 = bswap32(*(_WORD *)v56 & 0xFFBF) >> 16;
            v61 = 2;
            goto LABEL_135;
          }
          if (v57 < 8)
            goto LABEL_534;
          v68 = *(_QWORD *)v56;
          v67 = v56 + 8;
          v54 = bswap64(v68 & 0xFFFFFFFFFFFFFF3FLL);
          if (HIDWORD(v54))
          {
            v30 = __nwlog_obj();
            if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
              goto LABEL_481;
            goto LABEL_27;
          }
          v61 = 8;
          v62 = v67;
LABEL_136:
          v63 = v57 - v61;
          v33 = v57 - v61 >= v54;
          v64 = v57 - v61 - v54;
          if (!v33)
          {
            v30 = __nwlog_obj();
            if (!os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
              goto LABEL_27;
LABEL_233:
            *(_DWORD *)buf = 136446722;
            v204 = "nw_http_copy_metadata_from_binary_message";
            v205 = 2048;
            v206 = (const char *)v54;
            v207 = 2048;
            v208 = v63;
            v19 = "%{public}s _length %llu > remaining %zu";
            goto LABEL_172;
          }
          if (!v64)
            goto LABEL_211;
          v65 = &v62[v54];
          v27 = v62[v54];
          if (v27 <= 0x3F)
          {
            v66 = 1;
LABEL_150:
            v69 = &v65[v66];
            goto LABEL_151;
          }
          if (v27 >> 6 == 2)
          {
            if (v64 < 4)
              goto LABEL_211;
            v27 = bswap32(*(_DWORD *)v65 & 0xFFFFFF7F);
            v66 = 4;
            goto LABEL_150;
          }
          if (v27 >> 6 == 1)
          {
            if (v64 < 2)
              goto LABEL_211;
            v27 = bswap32(*(_WORD *)v65 & 0xFFBF) >> 16;
            v66 = 2;
            goto LABEL_150;
          }
          if (v64 < 8)
          {
LABEL_211:
            v18 = __nwlog_obj();
            if (!os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
              goto LABEL_27;
            *(_DWORD *)buf = 136446210;
            v204 = "nw_http_copy_metadata_from_binary_message";
            v19 = "%{public}s Failed to decode integer";
            goto LABEL_25;
          }
          v71 = *(_QWORD *)v65;
          v69 = v65 + 8;
          v27 = bswap64(v71 & 0xFFFFFFFFFFFFFF3FLL);
          if (HIDWORD(v27))
          {
            v30 = __nwlog_obj();
            if (!os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
              goto LABEL_27;
LABEL_287:
            *(_DWORD *)buf = 136446722;
            v204 = "nw_http_copy_metadata_from_binary_message";
            v205 = 2048;
            v206 = (const char *)v27;
            v207 = 2048;
            v208 = 0xFFFFFFFFLL;
            v19 = "%{public}s _output %llu > _max %llu";
            goto LABEL_172;
          }
          v66 = 8;
LABEL_151:
          v29 = v64 - v66;
          v57 = v64 - v66 - v27;
          if (v64 - v66 < v27)
          {
            v30 = __nwlog_obj();
            if (!os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
              goto LABEL_27;
            goto LABEL_404;
          }
          v56 = &v69[v27];
          v70 = nw_http_parsed_fields_add(v17, v62, v54, v69, v27);
          metadata_with_parsed_fields = 0;
          if (!v70)
            goto LABEL_28;
        }
        v61 = 1;
LABEL_135:
        v62 = &v56[v61];
        goto LABEL_136;
      }
      if (v54 >> 6 == 2)
      {
        if (v26 >= 4)
        {
          v54 = bswap32(*(_DWORD *)v25 & 0xFFFFFF7F);
          v55 = 4;
          goto LABEL_102;
        }
      }
      else if (v54 >> 6 == 1)
      {
        if (v26 >= 2)
        {
          v54 = bswap32(*(_WORD *)v25 & 0xFFBF) >> 16;
          v55 = 2;
          goto LABEL_102;
        }
      }
      else if (v26 >= 8)
      {
        v84 = *(_QWORD *)v25;
        v56 = v25 + 8;
        v54 = bswap64(v84 & 0xFFFFFFFFFFFFFF3FLL);
        if (HIDWORD(v54))
        {
          v30 = __nwlog_obj();
          if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
            goto LABEL_481;
          goto LABEL_27;
        }
        v55 = 8;
        goto LABEL_103;
      }
    }
    v18 = __nwlog_obj();
    if (!os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      goto LABEL_27;
    *(_DWORD *)buf = 136446210;
    v204 = "nw_http_copy_metadata_from_binary_message";
    v19 = "%{public}s Failed to decode integer";
    goto LABEL_25;
  }
  while (1)
  {
    if (!v26)
    {
      if (a4)
      {
LABEL_167:
        metadata_with_parsed_fields = nw_http_create_metadata_with_parsed_fields(v17, v15 == 0);
        goto LABEL_28;
      }
      v74 = 0;
      v75 = 0;
      goto LABEL_238;
    }
    if (!v25)
    {
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      v204 = "_http_vle_decode";
      v132 = (char *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      v201 = 0;
      if (__nwlog_fault(v132, &type, &v201))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          v133 = __nwlog_obj();
          v134 = type;
          if (os_log_type_enabled(v133, type))
          {
            *(_DWORD *)buf = 136446210;
            v204 = "_http_vle_decode";
            v135 = "%{public}s called with null *buffer";
LABEL_486:
            _os_log_impl(&dword_182FBE000, v133, v134, v135, buf, 0xCu);
          }
        }
        else if (v201)
        {
          v153 = (char *)__nw_create_backtrace_string();
          v133 = __nwlog_obj();
          v134 = type;
          v154 = os_log_type_enabled(v133, type);
          if (v153)
          {
            if (v154)
            {
              *(_DWORD *)buf = 136446466;
              v204 = "_http_vle_decode";
              v205 = 2082;
              v206 = v153;
              _os_log_impl(&dword_182FBE000, v133, v134, "%{public}s called with null *buffer, dumping backtrace:%{public}s", buf, 0x16u);
            }
            free(v153);
          }
          else if (v154)
          {
            *(_DWORD *)buf = 136446210;
            v204 = "_http_vle_decode";
            v135 = "%{public}s called with null *buffer, no backtrace";
            goto LABEL_486;
          }
        }
        else
        {
          v133 = __nwlog_obj();
          v134 = type;
          if (os_log_type_enabled(v133, type))
          {
            *(_DWORD *)buf = 136446210;
            v204 = "_http_vle_decode";
            v135 = "%{public}s called with null *buffer, backtrace limit exceeded";
            goto LABEL_486;
          }
        }
      }
      if (v132)
        free(v132);
LABEL_489:
      v18 = __nwlog_obj();
      if (!os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        goto LABEL_27;
      *(_DWORD *)buf = 136446210;
      v204 = "nw_http_copy_metadata_from_binary_message";
      v19 = "%{public}s Failed to decode integer";
      goto LABEL_25;
    }
    v27 = *v25;
    if (v27 <= 0x3F)
    {
      v41 = 1;
      goto LABEL_77;
    }
    if (v27 >> 6 == 2)
    {
      if (v26 < 4)
        goto LABEL_489;
      v27 = bswap32(*(_DWORD *)v25 & 0xFFFFFF7F);
      v41 = 4;
LABEL_77:
      v42 = &v25[v41];
      v43 = v26 - v41;
      if (!v27)
        break;
      goto LABEL_78;
    }
    if (v27 >> 6 == 1)
    {
      if (v26 < 2)
        goto LABEL_489;
      v27 = bswap32(*(_WORD *)v25 & 0xFFBF) >> 16;
      v41 = 2;
      goto LABEL_77;
    }
    if (v26 < 8)
      goto LABEL_489;
    v49 = *(_QWORD *)v25;
    v48 = v25 + 8;
    v27 = bswap64(v49 & 0xFFFFFFFFFFFFFF3FLL);
    if (HIDWORD(v27))
    {
      v30 = __nwlog_obj();
      if (!os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
        goto LABEL_27;
      goto LABEL_287;
    }
    v42 = v48;
    v43 = v26 - 8;
    if (!v27)
      break;
LABEL_78:
    v44 = v43 - v27;
    if (v43 < v27)
    {
      v30 = __nwlog_obj();
      if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446722;
        v204 = "nw_http_copy_metadata_from_binary_message";
        v205 = 2048;
        v206 = (const char *)v27;
        v207 = 2048;
        v208 = v43;
        v19 = "%{public}s _length %llu > remaining %zu";
        goto LABEL_172;
      }
      goto LABEL_27;
    }
    if (v43 == v27)
    {
LABEL_157:
      v18 = __nwlog_obj();
      if (!os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        goto LABEL_27;
      *(_DWORD *)buf = 136446210;
      v204 = "nw_http_copy_metadata_from_binary_message";
      v19 = "%{public}s Failed to decode integer";
      goto LABEL_25;
    }
    v45 = &v42[v27];
    v46 = v42[v27];
    if (v46 <= 0x3F)
    {
      v47 = 1;
LABEL_92:
      v50 = &v45[v47];
      goto LABEL_93;
    }
    if (v46 >> 6 == 2)
    {
      if (v44 < 4)
        goto LABEL_157;
      v46 = bswap32(*(_DWORD *)v45 & 0xFFFFFF7F);
      v47 = 4;
      goto LABEL_92;
    }
    if (v46 >> 6 == 1)
    {
      if (v44 < 2)
        goto LABEL_157;
      v46 = bswap32(*(_WORD *)v45 & 0xFFBF) >> 16;
      v47 = 2;
      goto LABEL_92;
    }
    if (v44 < 8)
      goto LABEL_157;
    v53 = *(_QWORD *)v45;
    v50 = v45 + 8;
    v46 = bswap64(v53 & 0xFFFFFFFFFFFFFF3FLL);
    if (HIDWORD(v46))
    {
      v30 = __nwlog_obj();
      if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446722;
        v204 = "nw_http_copy_metadata_from_binary_message";
        v205 = 2048;
        v206 = (const char *)v46;
        v207 = 2048;
        v208 = 0xFFFFFFFFLL;
        v19 = "%{public}s _output %llu > _max %llu";
        goto LABEL_172;
      }
      goto LABEL_27;
    }
    v47 = 8;
LABEL_93:
    v51 = v44 - v47;
    v26 = v44 - v47 - v46;
    if (v44 - v47 < v46)
    {
      v30 = __nwlog_obj();
      if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446722;
        v204 = "nw_http_copy_metadata_from_binary_message";
        v205 = 2048;
        v206 = (const char *)v46;
        v207 = 2048;
        v208 = v51;
        v19 = "%{public}s _length %llu > remaining %zu";
        goto LABEL_172;
      }
      goto LABEL_27;
    }
    v25 = &v50[v46];
    v52 = nw_http_parsed_fields_add(v17, v42, v27, v50, v46);
    metadata_with_parsed_fields = 0;
    if (!v52)
      goto LABEL_28;
  }
  if (a4)
    goto LABEL_167;
  v74 = 0;
  if (!v43)
  {
LABEL_236:
    v75 = 0;
LABEL_237:
    v25 = v42;
LABEL_238:
    if (a3)
      *a3 = v74;
    v88 = 0;
    while (1)
    {
      if (!v75)
        goto LABEL_444;
      if (!v25)
      {
        __nwlog_obj();
        *(_DWORD *)buf = 136446210;
        v204 = "_http_vle_decode";
        v169 = (char *)_os_log_send_and_compose_impl();
        type = OS_LOG_TYPE_ERROR;
        v201 = 0;
        if (!__nwlog_fault(v169, &type, &v201))
          goto LABEL_546;
        if (type == OS_LOG_TYPE_FAULT)
        {
          v170 = __nwlog_obj();
          v171 = type;
          if (os_log_type_enabled(v170, type))
          {
            *(_DWORD *)buf = 136446210;
            v204 = "_http_vle_decode";
            v172 = "%{public}s called with null *buffer";
            goto LABEL_545;
          }
LABEL_546:
          if (v169)
            free(v169);
LABEL_548:
          v108 = __nwlog_obj();
          if (!os_log_type_enabled(v108, OS_LOG_TYPE_ERROR))
            goto LABEL_552;
          *(_DWORD *)buf = 136446210;
          v204 = "nw_http_copy_metadata_from_binary_message";
          v109 = "%{public}s Failed to decode integer";
          goto LABEL_550;
        }
        if (v201)
        {
          v174 = (char *)__nw_create_backtrace_string();
          v170 = __nwlog_obj();
          v171 = type;
          v175 = os_log_type_enabled(v170, type);
          if (v174)
          {
            if (v175)
            {
              *(_DWORD *)buf = 136446466;
              v204 = "_http_vle_decode";
              v205 = 2082;
              v206 = v174;
              _os_log_impl(&dword_182FBE000, v170, v171, "%{public}s called with null *buffer, dumping backtrace:%{public}s", buf, 0x16u);
            }
            free(v174);
            goto LABEL_546;
          }
          if (!v175)
            goto LABEL_546;
          *(_DWORD *)buf = 136446210;
          v204 = "_http_vle_decode";
          v172 = "%{public}s called with null *buffer, no backtrace";
        }
        else
        {
          v170 = __nwlog_obj();
          v171 = type;
          if (!os_log_type_enabled(v170, type))
            goto LABEL_546;
          *(_DWORD *)buf = 136446210;
          v204 = "_http_vle_decode";
          v172 = "%{public}s called with null *buffer, backtrace limit exceeded";
        }
LABEL_545:
        _os_log_impl(&dword_182FBE000, v170, v171, v172, buf, 0xCu);
        goto LABEL_546;
      }
      v89 = *v25;
      if (v89 <= 0x3F)
        break;
      if (v89 >> 6 == 2)
      {
        if (v75 < 4)
          goto LABEL_548;
        v89 = bswap32(*(_DWORD *)v25 & 0xFFFFFF7F);
        v90 = 4;
        goto LABEL_252;
      }
      if (v89 >> 6 == 1)
      {
        if (v75 < 2)
          goto LABEL_548;
        v89 = bswap32(*(_WORD *)v25 & 0xFFBF) >> 16;
        v90 = 2;
        goto LABEL_252;
      }
      if (v75 < 8)
        goto LABEL_548;
      v98 = *(_QWORD *)v25;
      v97 = v25 + 8;
      v89 = bswap64(v98 & 0xFFFFFFFFFFFFFF3FLL);
      if (HIDWORD(v89))
      {
        v114 = __nwlog_obj();
        if (!os_log_type_enabled(v114, OS_LOG_TYPE_ERROR))
          goto LABEL_552;
        goto LABEL_391;
      }
      v90 = 8;
      v91 = v97;
      if (!v89)
        goto LABEL_444;
LABEL_253:
      v92 = v75 - v90;
      v33 = v75 - v90 >= v89;
      v93 = v75 - v90 - v89;
      if (!v33)
      {
        v114 = __nwlog_obj();
        if (os_log_type_enabled(v114, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446722;
          v204 = "nw_http_copy_metadata_from_binary_message";
          v205 = 2048;
          v206 = (const char *)v89;
          v207 = 2048;
          v208 = v92;
          v109 = "%{public}s _length %llu > remaining %zu";
          goto LABEL_310;
        }
        goto LABEL_552;
      }
      if (!v93)
        goto LABEL_296;
      v94 = &v91[v89];
      v95 = v91[v89];
      if (v95 <= 0x3F)
      {
        v96 = 1;
LABEL_268:
        v99 = &v94[v96];
        goto LABEL_269;
      }
      if (v95 >> 6 == 2)
      {
        if (v93 < 4)
          goto LABEL_296;
        v95 = bswap32(*(_DWORD *)v94 & 0xFFFFFF7F);
        v96 = 4;
        goto LABEL_268;
      }
      if (v95 >> 6 == 1)
      {
        if (v93 < 2)
          goto LABEL_296;
        v95 = bswap32(*(_WORD *)v94 & 0xFFBF) >> 16;
        v96 = 2;
        goto LABEL_268;
      }
      if (v93 < 8)
      {
LABEL_296:
        v108 = __nwlog_obj();
        if (!os_log_type_enabled(v108, OS_LOG_TYPE_ERROR))
          goto LABEL_552;
        *(_DWORD *)buf = 136446210;
        v204 = "nw_http_copy_metadata_from_binary_message";
        v109 = "%{public}s Failed to decode integer";
        goto LABEL_550;
      }
      v101 = *(_QWORD *)v94;
      v99 = v94 + 8;
      v95 = bswap64(v101 & 0xFFFFFFFFFFFFFF3FLL);
      if (HIDWORD(v95))
      {
        v117 = __nwlog_obj();
        if (!os_log_type_enabled(v117, OS_LOG_TYPE_ERROR))
          goto LABEL_552;
        *(_DWORD *)buf = 136446722;
        v204 = "nw_http_copy_metadata_from_binary_message";
        v205 = 2048;
        v206 = (const char *)v95;
        v207 = 2048;
        v208 = 0xFFFFFFFFLL;
        v109 = "%{public}s _output %llu > _max %llu";
        goto LABEL_313;
      }
      v96 = 8;
LABEL_269:
      v100 = v93 - v96;
      v75 = v93 - v96 - v95;
      if (v93 - v96 < v95)
      {
        v117 = __nwlog_obj();
        if (!os_log_type_enabled(v117, OS_LOG_TYPE_ERROR))
          goto LABEL_552;
        *(_DWORD *)buf = 136446722;
        v204 = "nw_http_copy_metadata_from_binary_message";
        v205 = 2048;
        v206 = (const char *)v95;
        v207 = 2048;
        v208 = v100;
        v109 = "%{public}s _length %llu > remaining %zu";
        goto LABEL_313;
      }
      if (!v88)
        v88 = (void *)_nw_http_parsed_fields_create();
      v25 = &v99[v95];
      if (!nw_http_parsed_fields_add(v88, v91, v89, v99, v95))
        goto LABEL_552;
    }
    v90 = 1;
LABEL_252:
    v91 = &v25[v90];
    if (!v89)
      goto LABEL_444;
    goto LABEL_253;
  }
  while (2)
  {
    v54 = *v42;
    if (v54 <= 0x3F)
    {
      v82 = 1;
LABEL_200:
      v42 += v82;
      v75 = v43 - v82;
      if (!v54)
        goto LABEL_237;
LABEL_201:
      if (v75 < v54)
      {
        v30 = __nwlog_obj();
        if (!os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
          goto LABEL_27;
        *(_DWORD *)buf = 136446722;
        v204 = "nw_http_copy_metadata_from_binary_message";
        v205 = 2048;
        v206 = (const char *)v54;
        v207 = 2048;
        v208 = v75;
        v19 = "%{public}s _length %llu > remaining %zu";
        goto LABEL_172;
      }
      v74 += v54;
      v42 += v54;
      v43 = v75 - v54;
      if (v75 == v54)
        goto LABEL_236;
      continue;
    }
    break;
  }
  if (v54 >> 6 == 2)
  {
    if (v43 < 4)
      goto LABEL_352;
    v54 = bswap32(*(_DWORD *)v42 & 0xFFFFFF7F);
    v82 = 4;
    goto LABEL_200;
  }
  if (v54 >> 6 == 1)
  {
    if (v43 < 2)
      goto LABEL_352;
    v54 = bswap32(*(_WORD *)v42 & 0xFFBF) >> 16;
    v82 = 2;
    goto LABEL_200;
  }
  if (v43 < 8)
  {
LABEL_352:
    v18 = __nwlog_obj();
    if (!os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      goto LABEL_27;
    *(_DWORD *)buf = 136446210;
    v204 = "nw_http_copy_metadata_from_binary_message";
    v19 = "%{public}s Failed to decode integer";
    goto LABEL_25;
  }
  v83 = *(_QWORD *)v42;
  v42 += 8;
  v54 = bswap64(v83 & 0xFFFFFFFFFFFFFF3FLL);
  if (!HIDWORD(v54))
  {
    v75 = v43 - 8;
    if (!v54)
      goto LABEL_237;
    goto LABEL_201;
  }
  v30 = __nwlog_obj();
  if (!os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    goto LABEL_27;
LABEL_481:
  *(_DWORD *)buf = 136446722;
  v204 = "nw_http_copy_metadata_from_binary_message";
  v205 = 2048;
  v206 = (const char *)v54;
  v207 = 2048;
  v208 = 0xFFFFFFFFLL;
  v19 = "%{public}s _output %llu > _max %llu";
LABEL_172:
  v22 = v30;
  v23 = 32;
LABEL_26:
  _os_log_impl(&dword_182FBE000, v22, OS_LOG_TYPE_ERROR, v19, buf, v23);
LABEL_27:
  metadata_with_parsed_fields = 0;
LABEL_28:
  if (v17)
    os_release(v17);
  return metadata_with_parsed_fields;
}

BOOL nw_http_fillout_body_from_binary_message(_DWORD *a1, unint64_t a2, char *__dst, size_t a4, size_t *a5)
{
  unint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  unint64_t v14;
  unsigned int v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 result;
  unint64_t v19;
  unint64_t v20;
  _DWORD *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  _DWORD *v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  BOOL v30;
  unint64_t v31;
  _DWORD *v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  unsigned int v38;
  NSObject *v39;
  unint64_t v40;
  uint64_t v41;
  char *v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  unint64_t v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  unint64_t v50;
  BOOL v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  char *v56;
  size_t v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int v60;
  size_t v61;
  size_t v62;
  uint64_t v63;
  char *v64;
  unint64_t v65;
  size_t v66;
  uint64_t v68;
  unsigned int v69;
  char *v70;
  NSObject *v71;
  os_log_type_t v72;
  const char *v73;
  char *backtrace_string;
  _BOOL4 v75;
  const char *v76;
  _BOOL4 v77;
  _BOOL4 v78;
  _BOOL4 v79;
  unsigned int v80;
  char v81;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v84;
  __int16 v85;
  unint64_t v86;
  uint64_t v87;

  v87 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v84 = "nw_http_fillout_body_from_binary_message";
    v70 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v81 = 0;
    if (!__nwlog_fault(v70, &type, &v81))
      goto LABEL_231;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v71 = __nwlog_obj();
      v72 = type;
      if (!os_log_type_enabled(v71, type))
        goto LABEL_231;
      *(_DWORD *)buf = 136446210;
      v84 = "nw_http_fillout_body_from_binary_message";
      v73 = "%{public}s called with null buffer";
      goto LABEL_230;
    }
    if (!v81)
    {
      v71 = __nwlog_obj();
      v72 = type;
      if (!os_log_type_enabled(v71, type))
        goto LABEL_231;
      *(_DWORD *)buf = 136446210;
      v84 = "nw_http_fillout_body_from_binary_message";
      v73 = "%{public}s called with null buffer, backtrace limit exceeded";
      goto LABEL_230;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v71 = __nwlog_obj();
    v72 = type;
    v75 = os_log_type_enabled(v71, type);
    if (!backtrace_string)
    {
      if (!v75)
        goto LABEL_231;
      *(_DWORD *)buf = 136446210;
      v84 = "nw_http_fillout_body_from_binary_message";
      v73 = "%{public}s called with null buffer, no backtrace";
      goto LABEL_230;
    }
    if (!v75)
      goto LABEL_205;
    *(_DWORD *)buf = 136446466;
    v84 = "nw_http_fillout_body_from_binary_message";
    v85 = 2082;
    v86 = (unint64_t)backtrace_string;
    v76 = "%{public}s called with null buffer, dumping backtrace:%{public}s";
LABEL_204:
    _os_log_impl(&dword_182FBE000, v71, v72, v76, buf, 0x16u);
    goto LABEL_205;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v84 = "nw_http_fillout_body_from_binary_message";
    v70 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v81 = 0;
    if (!__nwlog_fault(v70, &type, &v81))
      goto LABEL_231;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v71 = __nwlog_obj();
      v72 = type;
      if (!os_log_type_enabled(v71, type))
        goto LABEL_231;
      *(_DWORD *)buf = 136446210;
      v84 = "nw_http_fillout_body_from_binary_message";
      v73 = "%{public}s called with null buffer_length";
      goto LABEL_230;
    }
    if (!v81)
    {
      v71 = __nwlog_obj();
      v72 = type;
      if (!os_log_type_enabled(v71, type))
        goto LABEL_231;
      *(_DWORD *)buf = 136446210;
      v84 = "nw_http_fillout_body_from_binary_message";
      v73 = "%{public}s called with null buffer_length, backtrace limit exceeded";
      goto LABEL_230;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v71 = __nwlog_obj();
    v72 = type;
    v77 = os_log_type_enabled(v71, type);
    if (!backtrace_string)
    {
      if (!v77)
        goto LABEL_231;
      *(_DWORD *)buf = 136446210;
      v84 = "nw_http_fillout_body_from_binary_message";
      v73 = "%{public}s called with null buffer_length, no backtrace";
      goto LABEL_230;
    }
    if (!v77)
      goto LABEL_205;
    *(_DWORD *)buf = 136446466;
    v84 = "nw_http_fillout_body_from_binary_message";
    v85 = 2082;
    v86 = (unint64_t)backtrace_string;
    v76 = "%{public}s called with null buffer_length, dumping backtrace:%{public}s";
    goto LABEL_204;
  }
  if (!__dst)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v84 = "nw_http_fillout_body_from_binary_message";
    v70 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v81 = 0;
    if (!__nwlog_fault(v70, &type, &v81))
      goto LABEL_231;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v71 = __nwlog_obj();
      v72 = type;
      if (!os_log_type_enabled(v71, type))
        goto LABEL_231;
      *(_DWORD *)buf = 136446210;
      v84 = "nw_http_fillout_body_from_binary_message";
      v73 = "%{public}s called with null body_buffer";
      goto LABEL_230;
    }
    if (!v81)
    {
      v71 = __nwlog_obj();
      v72 = type;
      if (!os_log_type_enabled(v71, type))
        goto LABEL_231;
      *(_DWORD *)buf = 136446210;
      v84 = "nw_http_fillout_body_from_binary_message";
      v73 = "%{public}s called with null body_buffer, backtrace limit exceeded";
      goto LABEL_230;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v71 = __nwlog_obj();
    v72 = type;
    v78 = os_log_type_enabled(v71, type);
    if (!backtrace_string)
    {
      if (!v78)
        goto LABEL_231;
      *(_DWORD *)buf = 136446210;
      v84 = "nw_http_fillout_body_from_binary_message";
      v73 = "%{public}s called with null body_buffer, no backtrace";
      goto LABEL_230;
    }
    if (!v78)
      goto LABEL_205;
    *(_DWORD *)buf = 136446466;
    v84 = "nw_http_fillout_body_from_binary_message";
    v85 = 2082;
    v86 = (unint64_t)backtrace_string;
    v76 = "%{public}s called with null body_buffer, dumping backtrace:%{public}s";
    goto LABEL_204;
  }
  if (!a4)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v84 = "nw_http_fillout_body_from_binary_message";
    v70 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v81 = 0;
    if (!__nwlog_fault(v70, &type, &v81))
      goto LABEL_231;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v71 = __nwlog_obj();
      v72 = type;
      if (!os_log_type_enabled(v71, type))
        goto LABEL_231;
      *(_DWORD *)buf = 136446210;
      v84 = "nw_http_fillout_body_from_binary_message";
      v73 = "%{public}s called with null body_buffer_length";
      goto LABEL_230;
    }
    if (!v81)
    {
      v71 = __nwlog_obj();
      v72 = type;
      if (!os_log_type_enabled(v71, type))
        goto LABEL_231;
      *(_DWORD *)buf = 136446210;
      v84 = "nw_http_fillout_body_from_binary_message";
      v73 = "%{public}s called with null body_buffer_length, backtrace limit exceeded";
      goto LABEL_230;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v71 = __nwlog_obj();
    v72 = type;
    v79 = os_log_type_enabled(v71, type);
    if (backtrace_string)
    {
      if (v79)
      {
        *(_DWORD *)buf = 136446466;
        v84 = "nw_http_fillout_body_from_binary_message";
        v85 = 2082;
        v86 = (unint64_t)backtrace_string;
        v76 = "%{public}s called with null body_buffer_length, dumping backtrace:%{public}s";
        goto LABEL_204;
      }
LABEL_205:
      free(backtrace_string);
      goto LABEL_231;
    }
    if (!v79)
      goto LABEL_231;
    *(_DWORD *)buf = 136446210;
    v84 = "nw_http_fillout_body_from_binary_message";
    v73 = "%{public}s called with null body_buffer_length, no backtrace";
LABEL_230:
    _os_log_impl(&dword_182FBE000, v71, v72, v73, buf, 0xCu);
LABEL_231:
    if (v70)
      free(v70);
    return 0;
  }
  v8 = *(unsigned __int8 *)a1;
  if (v8 > 0x3F)
  {
    v15 = v8 >> 6;
    if (v15 == 2)
    {
      if (a2 < 4)
        return 0;
      v8 = bswap32(*a1 & 0xFFFFFF7F);
      v9 = 4;
    }
    else if (v15 == 1)
    {
      if (a2 < 2)
        return 0;
      v8 = bswap32(*(_WORD *)a1 & 0xFFBF) >> 16;
      v9 = 2;
    }
    else
    {
      if (a2 < 8)
        return 0;
      v8 = bswap64(*(_QWORD *)a1 & 0xFFFFFFFFFFFFFF3FLL);
      v9 = 8;
    }
  }
  else
  {
    v9 = 1;
  }
  if (v8 > 3)
    return 0;
  v10 = (_DWORD *)((char *)a1 + v9);
  v11 = a2 - v9;
  if ((v8 & 0xFFFFFFFFFFFFFFFDLL) == 0)
  {
    if (a2 != v9)
    {
      v16 = *(unsigned __int8 *)v10;
      if (v16 > 0x3F)
      {
        v38 = v16 >> 6;
        if (v38 == 2)
        {
          if (v11 < 4)
            return 0;
          v16 = bswap32(*v10 & 0xFFFFFF7F);
          v17 = 4;
        }
        else if (v38 == 1)
        {
          if (v11 < 2)
            return 0;
          v16 = bswap32(*(_WORD *)v10 & 0xFFBF) >> 16;
          v17 = 2;
        }
        else
        {
          if (v11 < 8)
            return 0;
          v16 = bswap64(*(_QWORD *)v10 & 0xFFFFFFFFFFFFFF3FLL);
          v17 = 8;
        }
      }
      else
      {
        v17 = 1;
      }
      result = 0;
      if (v16 >> 16)
        return result;
      v19 = v11 - v17;
      if (v19 < v16)
        return result;
      v20 = v19 - v16;
      if (v20)
      {
        v21 = (_DWORD *)((char *)v10 + v17 + v16);
        v22 = *(unsigned __int8 *)v21;
        if (v22 > 0x3F)
        {
          v59 = v22 >> 6;
          if (v59 == 2)
          {
            if (v20 < 4)
              return 0;
            v22 = bswap32(*v21 & 0xFFFFFF7F);
            v23 = 4;
          }
          else if (v59 == 1)
          {
            if (v20 < 2)
              return 0;
            v22 = bswap32(*(_WORD *)v21 & 0xFFBF) >> 16;
            v23 = 2;
          }
          else
          {
            if (v20 < 8)
              return 0;
            v22 = bswap64(*(_QWORD *)v21 & 0xFFFFFFFFFFFFFF3FLL);
            v23 = 8;
          }
        }
        else
        {
          v23 = 1;
        }
        result = 0;
        if (v22 >> 16)
          return result;
        v24 = v20 - v23;
        if (v24 < v22)
          return result;
        v25 = v24 - v22;
        if (v25)
        {
          v26 = (_DWORD *)((char *)v21 + v23 + v22);
          v27 = *(unsigned __int8 *)v26;
          if (v27 > 0x3F)
          {
            v69 = v27 >> 6;
            if (v69 == 2)
            {
              if (v25 < 4)
                return 0;
              v27 = bswap32(*v26 & 0xFFFFFF7F);
              v28 = 4;
            }
            else if (v69 == 1)
            {
              if (v25 < 2)
                return 0;
              v27 = bswap32(*(_WORD *)v26 & 0xFFBF) >> 16;
              v28 = 2;
            }
            else
            {
              if (v25 < 8)
                return 0;
              v27 = bswap64(*(_QWORD *)v26 & 0xFFFFFFFFFFFFFF3FLL);
              v28 = 8;
            }
          }
          else
          {
            v28 = 1;
          }
          v29 = v25 - v28;
          if (v27 >> 16)
            v30 = 0;
          else
            v30 = v29 >= v27;
          if (!v30)
            return 0;
          v31 = v29 - v27;
          if (!v31)
            return 0;
          v32 = (_DWORD *)((char *)v26 + v28 + v27);
          v33 = *(unsigned __int8 *)v32;
          if (v33 > 0x3F)
          {
            v80 = v33 >> 6;
            if (v80 == 2)
            {
              if (v31 < 4)
                return 0;
              v33 = bswap32(*v32 & 0xFFFFFF7F);
              v34 = 4;
            }
            else if (v80 == 1)
            {
              if (v31 < 2)
                return 0;
              v33 = bswap32(*(_WORD *)v32 & 0xFFBF) >> 16;
              v34 = 2;
            }
            else
            {
              if (v31 < 8)
                return 0;
              v33 = bswap64(*(_QWORD *)v32 & 0xFFFFFFFFFFFFFF3FLL);
              v34 = 8;
            }
          }
          else
          {
            v34 = 1;
          }
          v35 = v31 - v34;
          if (v33 >> 16)
            v36 = 0;
          else
            v36 = v35 >= v33;
          if (!v36)
            return 0;
          v13 = (char *)v32 + v34 + v33;
          v14 = v35 - v33;
          goto LABEL_64;
        }
      }
    }
    return 0;
  }
  if (a2 == v9)
    return 0;
  v12 = *(unsigned __int8 *)v10;
  if (v12 > 0x3F)
  {
    if (v12 >> 6 == 2)
    {
      if (v11 < 4)
        return 0;
      v12 = bswap32(*v10 & 0xFFFFFF7F);
      v37 = 4;
    }
    else if (v12 >> 6 == 1)
    {
      if (v11 < 2)
        return 0;
      v12 = bswap32(*(_WORD *)v10 & 0xFFBF) >> 16;
      v37 = 2;
    }
    else
    {
      if (v11 < 8)
        return 0;
      v12 = bswap64(*(_QWORD *)v10 & 0xFFFFFFFFFFFFFF3FLL);
      v37 = 8;
    }
    if (v12 > 0x3E8)
      return 0;
    v13 = (char *)v10 + v37;
    v14 = v11 - v37;
  }
  else
  {
    v13 = (char *)v10 + 1;
    v14 = v11 - 1;
  }
  if (v12 - 601 <= 0xFFFFFFFFFFFFFE6ELL)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v39 = gLogObj;
    result = os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    *(_DWORD *)buf = 136446466;
    v84 = "nw_http_fillout_body_from_binary_message";
    v85 = 2048;
    v86 = v12;
    _os_log_impl(&dword_182FBE000, v39, OS_LOG_TYPE_ERROR, "%{public}s Informational statuses not supported: %llu", buf, 0x16u);
    return 0;
  }
LABEL_64:
  if ((v8 & 0x3FFFFFFFFFFFFFFELL) == 2)
  {
    if (!v14)
      goto LABEL_148;
    while (1)
    {
      v40 = *v13;
      if (v40 <= 0x3F)
      {
        v41 = 1;
        goto LABEL_74;
      }
      if (v40 >> 6 == 2)
      {
        if (v14 < 4)
          return 0;
        v40 = bswap32(*(_DWORD *)v13 & 0xFFFFFF7F);
        v41 = 4;
LABEL_74:
        v42 = &v13[v41];
        v43 = v14 - v41;
        if (!v40)
          break;
        goto LABEL_75;
      }
      if (v40 >> 6 == 1)
      {
        if (v14 < 2)
          return 0;
        v40 = bswap32(*(_WORD *)v13 & 0xFFBF) >> 16;
        v41 = 2;
        goto LABEL_74;
      }
      if (v14 < 8)
        return 0;
      v49 = *(_QWORD *)v13;
      v42 = v13 + 8;
      v40 = bswap64(v49 & 0xFFFFFFFFFFFFFF3FLL);
      if (HIDWORD(v40))
        return 0;
      v43 = v14 - 8;
      if (!v40)
        break;
LABEL_75:
      v44 = v43 - v40;
      if (v43 <= v40)
        return 0;
      v45 = &v42[v40];
      v46 = v42[v40];
      if (v46 > 0x3F)
      {
        v48 = v46 >> 6;
        if (v48 == 2)
        {
          if (v44 < 4)
            return 0;
          v46 = bswap32(*(_DWORD *)v45 & 0xFFFFFF7F);
          v47 = 4;
        }
        else if (v48 == 1)
        {
          if (v44 < 2)
            return 0;
          v46 = bswap32(*(_WORD *)v45 & 0xFFBF) >> 16;
          v47 = 2;
        }
        else
        {
          if (v44 < 8)
            return 0;
          v46 = bswap64(*(_QWORD *)v45 & 0xFFFFFFFFFFFFFF3FLL);
          v47 = 8;
        }
      }
      else
      {
        v47 = 1;
      }
      v50 = v44 - v47;
      if (HIDWORD(v46))
        v51 = 0;
      else
        v51 = v50 >= v46;
      if (!v51)
        return 0;
      v13 = &v45[v47 + v46];
      v14 = v50 - v46;
      if (!v14)
        goto LABEL_148;
    }
    if (!v43)
    {
LABEL_148:
      v66 = 0;
      goto LABEL_149;
    }
    v61 = 0;
    while (1)
    {
      v62 = *v42;
      if (v62 <= 0x3F)
      {
        v63 = 1;
        goto LABEL_137;
      }
      if (v62 >> 6 == 2)
        break;
      if (v62 >> 6 == 1)
      {
        if (v43 < 2)
          return 0;
        v62 = bswap32(*(_WORD *)v42 & 0xFFBF) >> 16;
        v63 = 2;
        goto LABEL_137;
      }
      if (v43 < 8)
        return 0;
      v68 = *(_QWORD *)v42;
      v64 = v42 + 8;
      v62 = bswap64(v68 & 0xFFFFFFFFFFFFFF3FLL);
      if (HIDWORD(v62))
        return 0;
      v63 = 8;
      if (!v62)
      {
LABEL_147:
        v66 = v61;
LABEL_149:
        if (a5)
          *a5 = v66;
        return 1;
      }
LABEL_138:
      v65 = v43 - v63;
      v66 = v62 + v61;
      if (v43 - v63 < v62 || v66 > a4)
        return 0;
      memcpy(&__dst[v61], v64, v62);
      v42 = &v64[v62];
      v61 = v66;
      v43 = v65 - v62;
      if (v65 == v62)
        goto LABEL_149;
    }
    if (v43 < 4)
      return 0;
    v62 = bswap32(*(_DWORD *)v42 & 0xFFFFFF7F);
    v63 = 4;
LABEL_137:
    v64 = &v42[v63];
    if (!v62)
      goto LABEL_147;
    goto LABEL_138;
  }
  if (!v14)
    return 0;
  v52 = *v13;
  if (v52 > 0x3F)
  {
    v60 = v52 >> 6;
    if (v60 == 2)
    {
      if (v14 < 4)
        return 0;
      v52 = bswap32(*(_DWORD *)v13 & 0xFFFFFF7F);
      v53 = 4;
    }
    else if (v60 == 1)
    {
      if (v14 < 2)
        return 0;
      v52 = bswap32(*(_WORD *)v13 & 0xFFBF) >> 16;
      v53 = 2;
    }
    else
    {
      if (v14 < 8)
        return 0;
      v52 = bswap64(*(_QWORD *)v13 & 0xFFFFFFFFFFFFFF3FLL);
      v53 = 8;
    }
  }
  else
  {
    v53 = 1;
  }
  result = 0;
  if (HIDWORD(v52))
    return result;
  v54 = v14 - v53;
  if (v54 < v52)
    return result;
  v55 = v54 - v52;
  if (!v55)
    return 0;
  v56 = &v13[v53 + v52];
  v57 = *v56;
  if (v57 > 0x3F)
  {
    if (v57 >> 6 == 2)
    {
      if (v55 >= 4)
      {
        v57 = bswap32(*(_DWORD *)v56 & 0xFFFFFF7F);
        v58 = 4;
        goto LABEL_105;
      }
    }
    else if (v57 >> 6 == 1)
    {
      if (v55 >= 2)
      {
        v57 = bswap32(*(_WORD *)v56 & 0xFFBF) >> 16;
        v58 = 2;
        goto LABEL_105;
      }
    }
    else if (v55 >= 8)
    {
      v57 = bswap64(*(_QWORD *)v56 & 0xFFFFFFFFFFFFFF3FLL);
      v58 = 8;
      goto LABEL_105;
    }
    return 0;
  }
  v58 = 1;
LABEL_105:
  result = 0;
  if (v57 <= a4 && v57 <= v55 - v58)
  {
    memcpy(__dst, &v56[v58], v57);
    if (a5)
      *a5 = v57;
    return 1;
  }
  return result;
}

char *nw_http_access_body_chunk_from_indeterminate_binary_message(_DWORD *a1, unint64_t a2, int a3, unint64_t *a4, _BYTE *a5, char **a6, unint64_t *a7)
{
  unint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  unint64_t v10;
  unint64_t v11;
  _DWORD *v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t v15;
  const char *v16;
  NSObject *v17;
  uint32_t v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  _DWORD *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _DWORD *v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  _DWORD *v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  BOOL v38;
  uint64_t v39;
  NSObject *v40;
  uint64_t v41;
  unint64_t v42;
  BOOL v43;
  unint64_t v45;
  uint64_t v46;
  unsigned int v47;
  unint64_t v48;
  _DWORD *v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  BOOL v55;
  char *v56;
  char *v57;
  uint64_t v58;
  char *v60;
  NSObject *v61;
  os_log_type_t v62;
  const char *v63;
  char *backtrace_string;
  _BOOL4 v65;
  const char *v66;
  _BOOL4 v67;
  _BOOL4 v68;
  _BOOL4 v69;
  _BOOL4 v70;
  _BOOL4 v71;
  unsigned int v72;
  char v73;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v76;
  __int16 v77;
  unint64_t v78;
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v76 = "nw_http_access_body_chunk_from_indeterminate_binary_message";
    v60 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v73 = 0;
    if (!__nwlog_fault(v60, &type, &v73))
      goto LABEL_218;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v61 = __nwlog_obj();
      v62 = type;
      if (!os_log_type_enabled(v61, type))
        goto LABEL_218;
      *(_DWORD *)buf = 136446210;
      v76 = "nw_http_access_body_chunk_from_indeterminate_binary_message";
      v63 = "%{public}s called with null buffer";
      goto LABEL_217;
    }
    if (!v73)
    {
      v61 = __nwlog_obj();
      v62 = type;
      if (!os_log_type_enabled(v61, type))
        goto LABEL_218;
      *(_DWORD *)buf = 136446210;
      v76 = "nw_http_access_body_chunk_from_indeterminate_binary_message";
      v63 = "%{public}s called with null buffer, backtrace limit exceeded";
      goto LABEL_217;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v61 = __nwlog_obj();
    v62 = type;
    v65 = os_log_type_enabled(v61, type);
    if (!backtrace_string)
    {
      if (!v65)
        goto LABEL_218;
      *(_DWORD *)buf = 136446210;
      v76 = "nw_http_access_body_chunk_from_indeterminate_binary_message";
      v63 = "%{public}s called with null buffer, no backtrace";
      goto LABEL_217;
    }
    if (!v65)
      goto LABEL_188;
    *(_DWORD *)buf = 136446466;
    v76 = "nw_http_access_body_chunk_from_indeterminate_binary_message";
    v77 = 2082;
    v78 = (unint64_t)backtrace_string;
    v66 = "%{public}s called with null buffer, dumping backtrace:%{public}s";
LABEL_187:
    _os_log_impl(&dword_182FBE000, v61, v62, v66, buf, 0x16u);
    goto LABEL_188;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v76 = "nw_http_access_body_chunk_from_indeterminate_binary_message";
    v60 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v73 = 0;
    if (!__nwlog_fault(v60, &type, &v73))
      goto LABEL_218;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v61 = __nwlog_obj();
      v62 = type;
      if (!os_log_type_enabled(v61, type))
        goto LABEL_218;
      *(_DWORD *)buf = 136446210;
      v76 = "nw_http_access_body_chunk_from_indeterminate_binary_message";
      v63 = "%{public}s called with null buffer_length";
      goto LABEL_217;
    }
    if (!v73)
    {
      v61 = __nwlog_obj();
      v62 = type;
      if (!os_log_type_enabled(v61, type))
        goto LABEL_218;
      *(_DWORD *)buf = 136446210;
      v76 = "nw_http_access_body_chunk_from_indeterminate_binary_message";
      v63 = "%{public}s called with null buffer_length, backtrace limit exceeded";
      goto LABEL_217;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v61 = __nwlog_obj();
    v62 = type;
    v67 = os_log_type_enabled(v61, type);
    if (!backtrace_string)
    {
      if (!v67)
        goto LABEL_218;
      *(_DWORD *)buf = 136446210;
      v76 = "nw_http_access_body_chunk_from_indeterminate_binary_message";
      v63 = "%{public}s called with null buffer_length, no backtrace";
      goto LABEL_217;
    }
    if (!v67)
      goto LABEL_188;
    *(_DWORD *)buf = 136446466;
    v76 = "nw_http_access_body_chunk_from_indeterminate_binary_message";
    v77 = 2082;
    v78 = (unint64_t)backtrace_string;
    v66 = "%{public}s called with null buffer_length, dumping backtrace:%{public}s";
    goto LABEL_187;
  }
  if (!a4)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v76 = "nw_http_access_body_chunk_from_indeterminate_binary_message";
    v60 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v73 = 0;
    if (!__nwlog_fault(v60, &type, &v73))
      goto LABEL_218;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v61 = __nwlog_obj();
      v62 = type;
      if (!os_log_type_enabled(v61, type))
        goto LABEL_218;
      *(_DWORD *)buf = 136446210;
      v76 = "nw_http_access_body_chunk_from_indeterminate_binary_message";
      v63 = "%{public}s called with null out_chunk_length";
      goto LABEL_217;
    }
    if (!v73)
    {
      v61 = __nwlog_obj();
      v62 = type;
      if (!os_log_type_enabled(v61, type))
        goto LABEL_218;
      *(_DWORD *)buf = 136446210;
      v76 = "nw_http_access_body_chunk_from_indeterminate_binary_message";
      v63 = "%{public}s called with null out_chunk_length, backtrace limit exceeded";
      goto LABEL_217;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v61 = __nwlog_obj();
    v62 = type;
    v68 = os_log_type_enabled(v61, type);
    if (!backtrace_string)
    {
      if (!v68)
        goto LABEL_218;
      *(_DWORD *)buf = 136446210;
      v76 = "nw_http_access_body_chunk_from_indeterminate_binary_message";
      v63 = "%{public}s called with null out_chunk_length, no backtrace";
      goto LABEL_217;
    }
    if (!v68)
      goto LABEL_188;
    *(_DWORD *)buf = 136446466;
    v76 = "nw_http_access_body_chunk_from_indeterminate_binary_message";
    v77 = 2082;
    v78 = (unint64_t)backtrace_string;
    v66 = "%{public}s called with null out_chunk_length, dumping backtrace:%{public}s";
    goto LABEL_187;
  }
  if (!a5)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v76 = "nw_http_access_body_chunk_from_indeterminate_binary_message";
    v60 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v73 = 0;
    if (!__nwlog_fault(v60, &type, &v73))
      goto LABEL_218;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v61 = __nwlog_obj();
      v62 = type;
      if (!os_log_type_enabled(v61, type))
        goto LABEL_218;
      *(_DWORD *)buf = 136446210;
      v76 = "nw_http_access_body_chunk_from_indeterminate_binary_message";
      v63 = "%{public}s called with null out_is_complete";
      goto LABEL_217;
    }
    if (!v73)
    {
      v61 = __nwlog_obj();
      v62 = type;
      if (!os_log_type_enabled(v61, type))
        goto LABEL_218;
      *(_DWORD *)buf = 136446210;
      v76 = "nw_http_access_body_chunk_from_indeterminate_binary_message";
      v63 = "%{public}s called with null out_is_complete, backtrace limit exceeded";
      goto LABEL_217;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v61 = __nwlog_obj();
    v62 = type;
    v69 = os_log_type_enabled(v61, type);
    if (!backtrace_string)
    {
      if (!v69)
        goto LABEL_218;
      *(_DWORD *)buf = 136446210;
      v76 = "nw_http_access_body_chunk_from_indeterminate_binary_message";
      v63 = "%{public}s called with null out_is_complete, no backtrace";
      goto LABEL_217;
    }
    if (!v69)
      goto LABEL_188;
    *(_DWORD *)buf = 136446466;
    v76 = "nw_http_access_body_chunk_from_indeterminate_binary_message";
    v77 = 2082;
    v78 = (unint64_t)backtrace_string;
    v66 = "%{public}s called with null out_is_complete, dumping backtrace:%{public}s";
    goto LABEL_187;
  }
  if (!a6)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v76 = "nw_http_access_body_chunk_from_indeterminate_binary_message";
    v60 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v73 = 0;
    if (!__nwlog_fault(v60, &type, &v73))
      goto LABEL_218;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v61 = __nwlog_obj();
      v62 = type;
      if (!os_log_type_enabled(v61, type))
        goto LABEL_218;
      *(_DWORD *)buf = 136446210;
      v76 = "nw_http_access_body_chunk_from_indeterminate_binary_message";
      v63 = "%{public}s called with null out_next_chunk";
      goto LABEL_217;
    }
    if (!v73)
    {
      v61 = __nwlog_obj();
      v62 = type;
      if (!os_log_type_enabled(v61, type))
        goto LABEL_218;
      *(_DWORD *)buf = 136446210;
      v76 = "nw_http_access_body_chunk_from_indeterminate_binary_message";
      v63 = "%{public}s called with null out_next_chunk, backtrace limit exceeded";
      goto LABEL_217;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v61 = __nwlog_obj();
    v62 = type;
    v70 = os_log_type_enabled(v61, type);
    if (!backtrace_string)
    {
      if (!v70)
        goto LABEL_218;
      *(_DWORD *)buf = 136446210;
      v76 = "nw_http_access_body_chunk_from_indeterminate_binary_message";
      v63 = "%{public}s called with null out_next_chunk, no backtrace";
      goto LABEL_217;
    }
    if (!v70)
      goto LABEL_188;
    *(_DWORD *)buf = 136446466;
    v76 = "nw_http_access_body_chunk_from_indeterminate_binary_message";
    v77 = 2082;
    v78 = (unint64_t)backtrace_string;
    v66 = "%{public}s called with null out_next_chunk, dumping backtrace:%{public}s";
    goto LABEL_187;
  }
  if (!a7)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v76 = "nw_http_access_body_chunk_from_indeterminate_binary_message";
    v60 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v73 = 0;
    if (!__nwlog_fault(v60, &type, &v73))
      goto LABEL_218;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v61 = __nwlog_obj();
      v62 = type;
      if (!os_log_type_enabled(v61, type))
        goto LABEL_218;
      *(_DWORD *)buf = 136446210;
      v76 = "nw_http_access_body_chunk_from_indeterminate_binary_message";
      v63 = "%{public}s called with null out_remaining_length";
      goto LABEL_217;
    }
    if (!v73)
    {
      v61 = __nwlog_obj();
      v62 = type;
      if (!os_log_type_enabled(v61, type))
        goto LABEL_218;
      *(_DWORD *)buf = 136446210;
      v76 = "nw_http_access_body_chunk_from_indeterminate_binary_message";
      v63 = "%{public}s called with null out_remaining_length, backtrace limit exceeded";
      goto LABEL_217;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v61 = __nwlog_obj();
    v62 = type;
    v71 = os_log_type_enabled(v61, type);
    if (backtrace_string)
    {
      if (v71)
      {
        *(_DWORD *)buf = 136446466;
        v76 = "nw_http_access_body_chunk_from_indeterminate_binary_message";
        v77 = 2082;
        v78 = (unint64_t)backtrace_string;
        v66 = "%{public}s called with null out_remaining_length, dumping backtrace:%{public}s";
        goto LABEL_187;
      }
LABEL_188:
      free(backtrace_string);
      goto LABEL_218;
    }
    if (!v71)
      goto LABEL_218;
    *(_DWORD *)buf = 136446210;
    v76 = "nw_http_access_body_chunk_from_indeterminate_binary_message";
    v63 = "%{public}s called with null out_remaining_length, no backtrace";
LABEL_217:
    _os_log_impl(&dword_182FBE000, v61, v62, v63, buf, 0xCu);
LABEL_218:
    if (v60)
      free(v60);
    return 0;
  }
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  *a7 = a2;
  if (!a3)
    goto LABEL_110;
  v7 = *(unsigned __int8 *)a1;
  if (v7 > 0x3F)
  {
    v14 = v7 >> 6;
    if (v14 == 2)
    {
      if (a2 < 4)
        return 0;
      v7 = bswap32(*a1 & 0xFFFFFF7F);
      v8 = 4;
    }
    else if (v14 == 1)
    {
      if (a2 < 2)
        return 0;
      v7 = bswap32(*(_WORD *)a1 & 0xFFBF) >> 16;
      v8 = 2;
    }
    else
    {
      if (a2 < 8)
        return 0;
      v7 = bswap64(*(_QWORD *)a1 & 0xFFFFFFFFFFFFFF3FLL);
      v8 = 8;
    }
  }
  else
  {
    v8 = 1;
  }
  if (v7 > 3)
    return 0;
  if ((v7 & 0x3FFFFFFFFFFFFFFELL) != 2)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v15 = gLogObj;
    if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      return 0;
    *(_DWORD *)buf = 136446210;
    v76 = "nw_http_access_body_chunk_from_indeterminate_binary_message";
    v16 = "%{public}s Message is not indeterminate";
    v17 = v15;
    v18 = 12;
    goto LABEL_22;
  }
  v9 = (_DWORD *)((char *)a1 + v8);
  v10 = a2 - v8;
  if ((v7 & 0xFFFFFFFFFFFFFFFDLL) != 0)
  {
    if (a2 == v8)
      return 0;
    v11 = *(unsigned __int8 *)v9;
    if (v11 <= 0x3F)
    {
      v12 = (_DWORD *)((char *)v9 + 1);
      v13 = v10 - 1;
      goto LABEL_65;
    }
    if (v11 >> 6 == 2)
    {
      if (v10 < 4)
        return 0;
      v11 = bswap32(*v9 & 0xFFFFFF7F);
      v39 = 4;
    }
    else if (v11 >> 6 == 1)
    {
      if (v10 < 2)
        return 0;
      v11 = bswap32(*(_WORD *)v9 & 0xFFBF) >> 16;
      v39 = 2;
    }
    else
    {
      if (v10 < 8)
        return 0;
      v11 = bswap64(*(_QWORD *)v9 & 0xFFFFFFFFFFFFFF3FLL);
      v39 = 8;
    }
    if (v11 <= 0x3E8)
    {
      v12 = (_DWORD *)((char *)v9 + v39);
      v13 = v10 - v39;
LABEL_65:
      if (v11 - 601 <= 0xFFFFFFFFFFFFFE6ELL)
      {
        v40 = __nwlog_obj();
        if (!os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
          return 0;
        *(_DWORD *)buf = 136446466;
        v76 = "nw_http_access_body_chunk_from_indeterminate_binary_message";
        v77 = 2048;
        v78 = v11;
        v16 = "%{public}s Informational statuses not supported: %llu";
        v17 = v40;
        v18 = 22;
LABEL_22:
        _os_log_impl(&dword_182FBE000, v17, OS_LOG_TYPE_ERROR, v16, buf, v18);
        return 0;
      }
      goto LABEL_68;
    }
    return 0;
  }
  if (a2 == v8)
    return 0;
  v19 = *(unsigned __int8 *)v9;
  if (v19 > 0x3F)
  {
    if (v19 >> 6 == 2)
    {
      if (v10 < 4)
        return 0;
      v19 = bswap32(*v9 & 0xFFFFFF7F);
      v20 = 4;
    }
    else if (v19 >> 6 == 1)
    {
      if (v10 < 2)
        return 0;
      v19 = bswap32(*(_WORD *)v9 & 0xFFBF) >> 16;
      v20 = 2;
    }
    else
    {
      if (v10 < 8)
        return 0;
      v19 = bswap64(*(_QWORD *)v9 & 0xFFFFFFFFFFFFFF3FLL);
      v20 = 8;
    }
  }
  else
  {
    v20 = 1;
  }
  v21 = 0;
  if (v19 >> 16)
    return v21;
  v22 = v10 - v20;
  if (v22 < v19)
    return v21;
  v23 = v22 - v19;
  if (!v23)
    return 0;
  v24 = (_DWORD *)((char *)v9 + v20 + v19);
  v25 = *(unsigned __int8 *)v24;
  if (v25 > 0x3F)
  {
    if (v25 >> 6 == 2)
    {
      if (v23 < 4)
        return 0;
      v25 = bswap32(*v24 & 0xFFFFFF7F);
      v26 = 4;
    }
    else if (v25 >> 6 == 1)
    {
      if (v23 < 2)
        return 0;
      v25 = bswap32(*(_WORD *)v24 & 0xFFBF) >> 16;
      v26 = 2;
    }
    else
    {
      if (v23 < 8)
        return 0;
      v25 = bswap64(*(_QWORD *)v24 & 0xFFFFFFFFFFFFFF3FLL);
      v26 = 8;
    }
  }
  else
  {
    v26 = 1;
  }
  v21 = 0;
  if (v25 >> 16)
    return v21;
  v27 = v23 - v26;
  if (v27 < v25)
    return v21;
  v28 = v27 - v25;
  if (!v28)
    return 0;
  v29 = (_DWORD *)((char *)v24 + v26 + v25);
  v30 = *(unsigned __int8 *)v29;
  if (v30 > 0x3F)
  {
    if (v30 >> 6 == 2)
    {
      if (v28 < 4)
        return 0;
      v30 = bswap32(*v29 & 0xFFFFFF7F);
      v31 = 4;
    }
    else if (v30 >> 6 == 1)
    {
      if (v28 < 2)
        return 0;
      v30 = bswap32(*(_WORD *)v29 & 0xFFBF) >> 16;
      v31 = 2;
    }
    else
    {
      if (v28 < 8)
        return 0;
      v30 = bswap64(*(_QWORD *)v29 & 0xFFFFFFFFFFFFFF3FLL);
      v31 = 8;
    }
  }
  else
  {
    v31 = 1;
  }
  v21 = 0;
  if (v30 >> 16)
    return v21;
  v32 = v28 - v31;
  if (v32 < v30)
    return v21;
  v33 = v32 - v30;
  if (!v33)
    return 0;
  v34 = (_DWORD *)((char *)v29 + v31 + v30);
  v35 = *(unsigned __int8 *)v34;
  if (v35 > 0x3F)
  {
    v72 = v35 >> 6;
    if (v72 == 2)
    {
      if (v33 < 4)
        return 0;
      v35 = bswap32(*v34 & 0xFFFFFF7F);
      v36 = 4;
    }
    else if (v72 == 1)
    {
      if (v33 < 2)
        return 0;
      v35 = bswap32(*(_WORD *)v34 & 0xFFBF) >> 16;
      v36 = 2;
    }
    else
    {
      if (v33 < 8)
        return 0;
      v35 = bswap64(*(_QWORD *)v34 & 0xFFFFFFFFFFFFFF3FLL);
      v36 = 8;
    }
  }
  else
  {
    v36 = 1;
  }
  v37 = v33 - v36;
  if (v35 >> 16)
    v38 = 0;
  else
    v38 = v37 >= v35;
  if (!v38)
    return 0;
  v12 = (_DWORD *)((char *)v34 + v36 + v35);
  v13 = v37 - v35;
LABEL_68:
  if (!v13)
    return 0;
  while (1)
  {
    v45 = *(unsigned __int8 *)v12;
    if (v45 <= 0x3F)
    {
      v46 = 1;
      goto LABEL_86;
    }
    v47 = v45 >> 6;
    if (v47 != 2)
      break;
    if (v13 < 4)
      return 0;
    v45 = bswap32(*v12 & 0xFFFFFF7F);
    v46 = 4;
LABEL_86:
    a1 = (_DWORD *)((char *)v12 + v46);
    a2 = v13 - v46;
    if (!v45)
      goto LABEL_109;
LABEL_87:
    v48 = a2 - v45;
    if (a2 <= v45)
      return 0;
    v49 = (_DWORD *)((char *)a1 + v45);
    v50 = *((unsigned __int8 *)a1 + v45);
    if (v50 <= 0x3F)
    {
      v41 = 1;
    }
    else if (v50 >> 6 == 2)
    {
      if (v48 < 4)
        return 0;
      v50 = bswap32(*v49 & 0xFFFFFF7F);
      v41 = 4;
    }
    else if (v50 >> 6 == 1)
    {
      if (v48 < 2)
        return 0;
      v50 = bswap32(*(_WORD *)v49 & 0xFFBF) >> 16;
      v41 = 2;
    }
    else
    {
      if (v48 < 8)
        return 0;
      v50 = bswap64(*(_QWORD *)v49 & 0xFFFFFFFFFFFFFF3FLL);
      v41 = 8;
    }
    v21 = 0;
    v42 = v48 - v41;
    v12 = (_DWORD *)((char *)v49 + v41 + v50);
    v13 = v48 - v41 - v50;
    if (HIDWORD(v50))
      v43 = 0;
    else
      v43 = v42 >= v50;
    if (!v43 || v13 == 0)
      return v21;
  }
  if (v47 == 1)
  {
    if (v13 < 2)
      return 0;
    v45 = bswap32(*(_WORD *)v12 & 0xFFBF) >> 16;
    v46 = 2;
    goto LABEL_86;
  }
  if (v13 < 8)
    return 0;
  v51 = *(_QWORD *)v12;
  a1 = v12 + 2;
  v45 = bswap64(v51 & 0xFFFFFFFFFFFFFF3FLL);
  if (HIDWORD(v45))
    return 0;
  a2 = v13 - 8;
  if (v45)
    goto LABEL_87;
LABEL_109:
  if (!a2)
    return 0;
LABEL_110:
  v52 = *(unsigned __int8 *)a1;
  if (v52 <= 0x3F)
  {
    v53 = 1;
    goto LABEL_112;
  }
  if (v52 >> 6 == 2)
  {
    if (a2 < 4)
      return 0;
    v52 = bswap32(*a1 & 0xFFFFFF7F);
    v53 = 4;
LABEL_112:
    v21 = (char *)a1 + v53;
    v54 = a2 - v53;
    if (!v52)
      goto LABEL_126;
  }
  else
  {
    if (v52 >> 6 == 1)
    {
      if (a2 >= 2)
      {
        v52 = bswap32(*(_WORD *)a1 & 0xFFBF) >> 16;
        v53 = 2;
        goto LABEL_112;
      }
      return 0;
    }
    if (a2 < 8)
      return 0;
    v58 = *(_QWORD *)a1;
    v57 = (char *)(a1 + 2);
    v52 = bswap64(v58 & 0xFFFFFFFFFFFFFF3FLL);
    if (HIDWORD(v52))
      return 0;
    v53 = 8;
    v21 = v57;
    v54 = a2 - 8;
    if (!v52)
    {
LABEL_126:
      *a5 = 1;
      *a7 = v54;
      if (a2 == v53)
        v21 = 0;
      *a6 = v21;
      return 0;
    }
  }
  v55 = v54 == v52;
  if (v54 < v52)
    return 0;
  *a4 = v52;
  *a7 = v54 - v52;
  v56 = &v21[v52];
  if (v55)
    v56 = 0;
  *a6 = v56;
  return v21;
}

uint64_t nw_http_copy_trailer_fields_from_indeterminate_binary_message(char *a1, unint64_t a2)
{
  unint64_t v2;
  char *v3;
  id v4;
  size_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  char *v13;
  size_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  NSObject *v24;
  uint64_t v25;
  uint32_t v26;
  char *v27;
  NSObject *v28;
  os_log_type_t v29;
  const char *v30;
  char *v31;
  _BOOL4 v32;
  char *v33;
  NSObject *v34;
  os_log_type_t v35;
  const char *v36;
  uint64_t result;
  char *backtrace_string;
  _BOOL4 v39;
  const char *v40;
  _BOOL4 v41;
  char v42;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v45;
  __int16 v46;
  size_t v47;
  __int16 v48;
  uint64_t v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v45 = "nw_http_copy_trailer_fields_from_indeterminate_binary_message";
    v33 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v42 = 0;
    if (!__nwlog_fault(v33, &type, &v42))
      goto LABEL_104;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v34 = __nwlog_obj();
      v35 = type;
      if (os_log_type_enabled(v34, type))
      {
        *(_DWORD *)buf = 136446210;
        v45 = "nw_http_copy_trailer_fields_from_indeterminate_binary_message";
        v36 = "%{public}s called with null buffer";
LABEL_103:
        _os_log_impl(&dword_182FBE000, v34, v35, v36, buf, 0xCu);
      }
LABEL_104:
      if (v33)
        free(v33);
      return 0;
    }
    if (!v42)
    {
      v34 = __nwlog_obj();
      v35 = type;
      if (os_log_type_enabled(v34, type))
      {
        *(_DWORD *)buf = 136446210;
        v45 = "nw_http_copy_trailer_fields_from_indeterminate_binary_message";
        v36 = "%{public}s called with null buffer, backtrace limit exceeded";
        goto LABEL_103;
      }
      goto LABEL_104;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v34 = __nwlog_obj();
    v35 = type;
    v39 = os_log_type_enabled(v34, type);
    if (!backtrace_string)
    {
      if (v39)
      {
        *(_DWORD *)buf = 136446210;
        v45 = "nw_http_copy_trailer_fields_from_indeterminate_binary_message";
        v36 = "%{public}s called with null buffer, no backtrace";
        goto LABEL_103;
      }
      goto LABEL_104;
    }
    if (v39)
    {
      *(_DWORD *)buf = 136446466;
      v45 = "nw_http_copy_trailer_fields_from_indeterminate_binary_message";
      v46 = 2082;
      v47 = (size_t)backtrace_string;
      v40 = "%{public}s called with null buffer, dumping backtrace:%{public}s";
LABEL_93:
      _os_log_impl(&dword_182FBE000, v34, v35, v40, buf, 0x16u);
    }
LABEL_94:
    free(backtrace_string);
    goto LABEL_104;
  }
  v2 = a2;
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v45 = "nw_http_copy_trailer_fields_from_indeterminate_binary_message";
    v33 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v42 = 0;
    if (!__nwlog_fault(v33, &type, &v42))
      goto LABEL_104;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v34 = __nwlog_obj();
      v35 = type;
      if (os_log_type_enabled(v34, type))
      {
        *(_DWORD *)buf = 136446210;
        v45 = "nw_http_copy_trailer_fields_from_indeterminate_binary_message";
        v36 = "%{public}s called with null buffer_length";
        goto LABEL_103;
      }
      goto LABEL_104;
    }
    if (!v42)
    {
      v34 = __nwlog_obj();
      v35 = type;
      if (os_log_type_enabled(v34, type))
      {
        *(_DWORD *)buf = 136446210;
        v45 = "nw_http_copy_trailer_fields_from_indeterminate_binary_message";
        v36 = "%{public}s called with null buffer_length, backtrace limit exceeded";
        goto LABEL_103;
      }
      goto LABEL_104;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v34 = __nwlog_obj();
    v35 = type;
    v41 = os_log_type_enabled(v34, type);
    if (!backtrace_string)
    {
      if (v41)
      {
        *(_DWORD *)buf = 136446210;
        v45 = "nw_http_copy_trailer_fields_from_indeterminate_binary_message";
        v36 = "%{public}s called with null buffer_length, no backtrace";
        goto LABEL_103;
      }
      goto LABEL_104;
    }
    if (v41)
    {
      *(_DWORD *)buf = 136446466;
      v45 = "nw_http_copy_trailer_fields_from_indeterminate_binary_message";
      v46 = 2082;
      v47 = (size_t)backtrace_string;
      v40 = "%{public}s called with null buffer_length, dumping backtrace:%{public}s";
      goto LABEL_93;
    }
    goto LABEL_94;
  }
  v3 = a1;
  v4 = 0;
  while (1)
  {
    if (!v2)
    {
LABEL_39:
      if (!v4)
        return 0;
      v4 = v4;
      v19 = _nw_http_parsed_fields_copy_trailer_fields(v4);

      goto LABEL_83;
    }
    if (!v3)
    {
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      v45 = "_http_vle_decode";
      v27 = (char *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      v42 = 0;
      if (__nwlog_fault(v27, &type, &v42))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          v28 = __nwlog_obj();
          v29 = type;
          if (os_log_type_enabled(v28, type))
          {
            *(_DWORD *)buf = 136446210;
            v45 = "_http_vle_decode";
            v30 = "%{public}s called with null *buffer";
LABEL_75:
            _os_log_impl(&dword_182FBE000, v28, v29, v30, buf, 0xCu);
          }
        }
        else if (v42)
        {
          v31 = (char *)__nw_create_backtrace_string();
          v28 = __nwlog_obj();
          v29 = type;
          v32 = os_log_type_enabled(v28, type);
          if (v31)
          {
            if (v32)
            {
              *(_DWORD *)buf = 136446466;
              v45 = "_http_vle_decode";
              v46 = 2082;
              v47 = (size_t)v31;
              _os_log_impl(&dword_182FBE000, v28, v29, "%{public}s called with null *buffer, dumping backtrace:%{public}s", buf, 0x16u);
            }
            free(v31);
          }
          else if (v32)
          {
            *(_DWORD *)buf = 136446210;
            v45 = "_http_vle_decode";
            v30 = "%{public}s called with null *buffer, no backtrace";
            goto LABEL_75;
          }
        }
        else
        {
          v28 = __nwlog_obj();
          v29 = type;
          if (os_log_type_enabled(v28, type))
          {
            *(_DWORD *)buf = 136446210;
            v45 = "_http_vle_decode";
            v30 = "%{public}s called with null *buffer, backtrace limit exceeded";
            goto LABEL_75;
          }
        }
      }
      if (v27)
        free(v27);
LABEL_78:
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v20 = gLogObj;
      if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
        goto LABEL_82;
      *(_DWORD *)buf = 136446210;
      v45 = "nw_http_copy_trailer_fields_from_indeterminate_binary_message";
      v21 = "%{public}s Failed to decode integer";
LABEL_80:
      v24 = v20;
      v26 = 12;
      goto LABEL_81;
    }
    v5 = *v3;
    if (v5 > 0x3F)
    {
      if (v5 >> 6 == 2)
      {
        if (v2 < 4)
          goto LABEL_78;
        v5 = bswap32(*(_DWORD *)v3 & 0xFFFFFF7F);
        v6 = 4;
        v7 = v3 + 4;
        if (!v5)
          goto LABEL_39;
      }
      else if (v5 >> 6 == 1)
      {
        if (v2 < 2)
          goto LABEL_78;
        v5 = bswap32(*(_WORD *)v3 & 0xFFBF) >> 16;
        v6 = 2;
        v7 = v3 + 2;
        if (!v5)
          goto LABEL_39;
      }
      else
      {
        if (v2 < 8)
          goto LABEL_78;
        v9 = *(_QWORD *)v3;
        v8 = v3 + 8;
        v5 = bswap64(v9 & 0xFFFFFFFFFFFFFF3FLL);
        if (HIDWORD(v5))
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v22 = gLogObj;
          if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
            goto LABEL_82;
          *(_DWORD *)buf = 136446722;
          v45 = "nw_http_copy_trailer_fields_from_indeterminate_binary_message";
          v46 = 2048;
          v47 = v5;
          v48 = 2048;
          v49 = 0xFFFFFFFFLL;
          v21 = "%{public}s _output %llu > _max %llu";
LABEL_45:
          v24 = v22;
LABEL_49:
          v26 = 32;
LABEL_81:
          _os_log_impl(&dword_182FBE000, v24, OS_LOG_TYPE_ERROR, v21, buf, v26);
          goto LABEL_82;
        }
        v6 = 8;
        v7 = v8;
        if (!v5)
          goto LABEL_39;
      }
    }
    else
    {
      v6 = 1;
      v7 = v3 + 1;
      if (!*v3)
        goto LABEL_39;
    }
    v10 = v2 - v6;
    v11 = v2 - v6 >= v5;
    v12 = v2 - v6 - v5;
    if (!v11)
      break;
    if (!v12)
      goto LABEL_41;
    v13 = &v7[v5];
    v14 = v7[v5];
    if (v14 <= 0x3F)
    {
      v15 = 1;
LABEL_32:
      v16 = &v13[v15];
      goto LABEL_33;
    }
    if (v14 >> 6 == 2)
    {
      if (v12 < 4)
        goto LABEL_41;
      v14 = bswap32(*(_DWORD *)v13 & 0xFFFFFF7F);
      v15 = 4;
      goto LABEL_32;
    }
    if (v14 >> 6 == 1)
    {
      if (v12 < 2)
        goto LABEL_41;
      v14 = bswap32(*(_WORD *)v13 & 0xFFBF) >> 16;
      v15 = 2;
      goto LABEL_32;
    }
    if (v12 < 8)
    {
LABEL_41:
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v20 = gLogObj;
      if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
        goto LABEL_82;
      *(_DWORD *)buf = 136446210;
      v45 = "nw_http_copy_trailer_fields_from_indeterminate_binary_message";
      v21 = "%{public}s Failed to decode integer";
      goto LABEL_80;
    }
    v18 = *(_QWORD *)v13;
    v16 = v13 + 8;
    v14 = bswap64(v18 & 0xFFFFFFFFFFFFFF3FLL);
    if (HIDWORD(v14))
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v25 = gLogObj;
      if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
        goto LABEL_82;
      *(_DWORD *)buf = 136446722;
      v45 = "nw_http_copy_trailer_fields_from_indeterminate_binary_message";
      v46 = 2048;
      v47 = v14;
      v48 = 2048;
      v49 = 0xFFFFFFFFLL;
      v21 = "%{public}s _output %llu > _max %llu";
      goto LABEL_48;
    }
    v15 = 8;
LABEL_33:
    v17 = v12 - v15;
    v2 = v12 - v15 - v14;
    if (v12 - v15 < v14)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v25 = gLogObj;
      if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
        goto LABEL_82;
      *(_DWORD *)buf = 136446722;
      v45 = "nw_http_copy_trailer_fields_from_indeterminate_binary_message";
      v46 = 2048;
      v47 = v14;
      v48 = 2048;
      v49 = v17;
      v21 = "%{public}s _length %llu > remaining %zu";
LABEL_48:
      v24 = v25;
      goto LABEL_49;
    }
    if (!v4)
      v4 = (id)_nw_http_parsed_fields_create();
    v3 = &v16[v14];
    if (!nw_http_parsed_fields_add(v4, v7, v5, v16, v14))
      goto LABEL_82;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v22 = gLogObj;
  if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446722;
    v45 = "nw_http_copy_trailer_fields_from_indeterminate_binary_message";
    v46 = 2048;
    v47 = v5;
    v48 = 2048;
    v49 = v10;
    v21 = "%{public}s _length %llu > remaining %zu";
    goto LABEL_45;
  }
LABEL_82:
  v19 = 0;
  result = 0;
  if (!v4)
    return result;
LABEL_83:
  os_release(v4);
  return v19;
}

nw_protocol_definition_t __nw_protocol_tcpconverter_copy_definition_block_invoke()
{
  nw_protocol_definition_t result;

  result = nw_framer_create_definition("TCP-Converter", 0, &__block_literal_global_6_48371);
  nw_protocol_tcpconverter_copy_definition::definition = (uint64_t)result;
  return result;
}

uint64_t __nw_protocol_tcpconverter_copy_definition_block_invoke_2(uint64_t a1, void *a2)
{
  _DWORD *v3;
  NSObject *v4;
  NSObject *v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  nw_endpoint_t v10;
  _BOOL8 v11;
  const sockaddr *address;
  NSObject *v13;
  uint64_t v14;
  Class isa;
  uint64_t v16;
  void (*v17)(Class, uint64_t);
  void *v18;
  unsigned int *v19;
  unsigned int *v20;
  size_t v21;
  size_t v22;
  size_t v23;
  size_t v24;
  unsigned __int16 v25;
  char *v26;
  NSObject *v27;
  os_log_type_t v28;
  const char *v29;
  NSObject *v30;
  os_log_type_t v31;
  char *v32;
  _BOOL4 v33;
  int v34;
  NSObject *v35;
  char *backtrace_string;
  _BOOL4 v37;
  NSObject *v38;
  os_log_type_t v39;
  uint64_t result;
  NSObject *v41;
  void *v42;
  void *v43;
  char *v44;
  NSObject *v45;
  os_log_type_t v46;
  const char *v47;
  char *v48;
  _BOOL4 v49;
  _QWORD stop_handler[5];
  _QWORD cleanup_handler[5];
  _QWORD output_handler[5];
  _QWORD input_handler[6];
  _BYTE buf[22];
  __int16 v55;
  uint64_t v56;
  __int16 v57;
  unsigned int v58;
  __int16 v59;
  nw_endpoint_t v60;
  char v61[46];
  _WORD v62[2];
  uint64_t v63;
  int v64;
  uint8_t output_buffer[4];
  __int16 v66;
  unsigned __int16 v67;
  __int128 v68;
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  v3 = malloc_type_calloc(1uLL, 0x58uLL, 0xEAFB8F1AuLL);
  if (v3)
    goto LABEL_2;
  v41 = __nwlog_obj();
  os_log_type_enabled(v41, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  *(_QWORD *)&buf[4] = "strict_calloc";
  *(_WORD *)&buf[12] = 2048;
  *(_QWORD *)&buf[14] = 1;
  v55 = 2048;
  v56 = 88;
  v42 = (void *)_os_log_send_and_compose_impl();
  result = __nwlog_abort((uint64_t)v42);
  if (!(_DWORD)result)
  {
    free(v42);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_tcpconverter_copy_definition_block_invoke_2";
    v43 = (void *)_os_log_send_and_compose_impl();
    result = __nwlog_abort((uint64_t)v43);
    if (!(_DWORD)result)
    {
      free(v43);
LABEL_2:
      *v3 = 0;
      v4 = a2;
      v5 = v4;
      v6 = 84;
      v7 = 609;
      while (1)
      {
        v8 = *((unsigned __int8 *)&v4->isa + v7);
        *((_BYTE *)v3 + v7 - 605) = v8;
        if (!v8)
          break;
        --v6;
        ++v7;
        if (v6 <= 1)
        {
          *((_BYTE *)v3 + v7 - 605) = 0;
          break;
        }
      }

      v9 = MEMORY[0x1E0C809B0];
      input_handler[0] = MEMORY[0x1E0C809B0];
      input_handler[1] = 0x40000000;
      input_handler[2] = __nw_protocol_tcpconverter_copy_definition_block_invoke_7;
      input_handler[3] = &__block_descriptor_tmp_13_48375;
      input_handler[4] = v3;
      input_handler[5] = v5;
      nw_framer_set_input_handler(v5, input_handler);
      output_handler[0] = v9;
      output_handler[1] = 0x40000000;
      output_handler[2] = __nw_protocol_tcpconverter_copy_definition_block_invoke_2_14;
      output_handler[3] = &__block_descriptor_tmp_16_48376;
      output_handler[4] = v3;
      nw_framer_set_output_handler(v5, output_handler);
      cleanup_handler[0] = v9;
      cleanup_handler[1] = 0x40000000;
      cleanup_handler[2] = __nw_protocol_tcpconverter_copy_definition_block_invoke_17;
      cleanup_handler[3] = &__block_descriptor_tmp_19_48377;
      cleanup_handler[4] = v3;
      nw_framer_set_cleanup_handler(v5, cleanup_handler);
      stop_handler[0] = v9;
      stop_handler[1] = 0x40000000;
      stop_handler[2] = __nw_protocol_tcpconverter_copy_definition_block_invoke_2_20;
      stop_handler[3] = &__block_descriptor_tmp_22_48378;
      stop_handler[4] = v3;
      nw_framer_set_stop_handler(v5, stop_handler);
      if (v5)
      {
        v10 = nw_framer_copy_remote_endpoint(v5);
        if (nw_endpoint_get_type(v10) == nw_endpoint_type_address)
        {
          v11 = nw_endpoint_copy_proxy_original_endpoint(v10);
          if (nw_endpoint_get_type((nw_endpoint_t)v11) == nw_endpoint_type_address)
          {
            v64 = 0;
            *(_DWORD *)output_buffer = 1663174145;
            v66 = 1290;
            v63 = 0;
            v62[0] = 528;
            v62[1] = __rev16(nw_endpoint_get_port((nw_endpoint_t)v11));
            address = nw_endpoint_get_address((nw_endpoint_t)v11);
            if (address->sa_family == 30)
            {
              v13 = v5;
              nw_context_assert_queue(v13[46].isa);
              isa = v13[42].isa;
              if (isa
                && (v16 = *((_QWORD *)isa + 3)) != 0
                && (v17 = *(void (**)(Class, uint64_t))(v16 + 120)) != 0)
              {
                v17(isa, v14);
                v18 = (void *)objc_claimAutoreleasedReturnValue();
              }
              else
              {
                v18 = 0;
              }

              if (nw_path_has_nat64_prefixes(v18))
              {
                v19 = (unsigned int *)nw_path_nat64_prefixes(v18);
                v20 = v19;
                *(_QWORD *)buf = 0;
                *(_QWORD *)&buf[8] = 0;
                v21 = v19[4];
                if ((_DWORD)v21)
                {
                  *(_DWORD *)buf = v19[4];
                  memcpy(&buf[4], v19, v21);
                  if (nw_nat64_extract_v4((unsigned int *)buf, &address->sa_data[6], (uint64_t)&v63))
                    goto LABEL_23;
                }
                v22 = v20[9];
                if ((_DWORD)v22)
                {
                  *(_DWORD *)buf = v20[9];
                  memcpy(&buf[4], v20, v22);
                  if ((nw_nat64_extract_v4((unsigned int *)buf, &address->sa_data[6], (uint64_t)&v63) & 1) != 0)
                    goto LABEL_23;
                }
                if ((v23 = v20[14], (_DWORD)v23)
                  && (*(_DWORD *)buf = v20[14],
                      memcpy(&buf[4], v20, v23),
                      (nw_nat64_extract_v4((unsigned int *)buf, &address->sa_data[6], (uint64_t)&v63) & 1) != 0)
                  || (v24 = v20[19], (_DWORD)v24)
                  && (*(_DWORD *)buf = v20[19],
                      memcpy(&buf[4], v20, v24),
                      (nw_nat64_extract_v4((unsigned int *)buf, &address->sa_data[6], (uint64_t)&v63) & 1) != 0))
                {
LABEL_23:
                  HIBYTE(v62[0]) = 2;
                  address = (const sockaddr *)v62;
                }
              }
            }
            v25 = *(_WORD *)address->sa_data;
            if (address->sa_family == 30)
            {
              v68 = *(_OWORD *)&address->sa_data[6];
            }
            else
            {
              v34 = *(_DWORD *)&address->sa_data[2];
              *(_QWORD *)&v68 = 0;
              DWORD2(v68) = -65536;
              HIDWORD(v68) = v34;
            }
            v67 = v25;
            nw_framer_write_output(v5, output_buffer, 0x18uLL);
            inet_ntop(30, &v68, v61, 0x2Eu);
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v35 = gLogObj;
            if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136447234;
              *(_QWORD *)&buf[4] = "nw_tcpconverter_send_connect";
              *(_WORD *)&buf[12] = 2080;
              *(_QWORD *)&buf[14] = v3 + 1;
              v55 = 2080;
              v56 = (uint64_t)v61;
              v57 = 1024;
              v58 = bswap32(v67) >> 16;
              v59 = 2112;
              v60 = v10;
              _os_log_impl(&dword_182FBE000, v35, OS_LOG_TYPE_DEBUG, "%{public}s %s Sent TCP-converter connect to IP %s, port %u via proxy %@", buf, 0x30u);
            }
            *v3 = 1;
            if (v10)
              os_release(v10);
            if (v11)
              os_release((void *)v11);
            return 2;
          }
          if (v10)
            os_release(v10);
          if (v11)
            os_release((void *)v11);
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_tcpconverter_send_connect";
          *(_WORD *)&buf[12] = 2112;
          *(_QWORD *)&buf[14] = 0;
          v26 = (char *)_os_log_send_and_compose_impl();
          v61[0] = 16;
          output_buffer[0] = 0;
          if (__nwlog_fault(v26, v61, output_buffer))
          {
            if (v61[0] == 17)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v30 = gLogObj;
              v31 = v61[0];
              if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v61[0]))
                goto LABEL_67;
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "nw_tcpconverter_send_connect";
              *(_WORD *)&buf[12] = 2112;
              *(_QWORD *)&buf[14] = 0;
              v29 = "%{public}s Received incorrect endpoint-type: %@";
              goto LABEL_65;
            }
            if (!output_buffer[0])
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v30 = gLogObj;
              v31 = v61[0];
              if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v61[0]))
                goto LABEL_67;
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "nw_tcpconverter_send_connect";
              *(_WORD *)&buf[12] = 2112;
              *(_QWORD *)&buf[14] = 0;
              v29 = "%{public}s Received incorrect endpoint-type: %@, backtrace limit exceeded";
              goto LABEL_65;
            }
            backtrace_string = (char *)__nw_create_backtrace_string();
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v30 = gLogObj;
            v31 = v61[0];
            v37 = os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v61[0]);
            if (backtrace_string)
            {
              if (v37)
              {
                *(_DWORD *)buf = 136446722;
                *(_QWORD *)&buf[4] = "nw_tcpconverter_send_connect";
                *(_WORD *)&buf[12] = 2112;
                *(_QWORD *)&buf[14] = 0;
                v55 = 2082;
                v56 = (uint64_t)backtrace_string;
                _os_log_impl(&dword_182FBE000, v30, v31, "%{public}s Received incorrect endpoint-type: %@, dumping backtrace:%{public}s", buf, 0x20u);
              }
              free(backtrace_string);
              if (!v26)
                goto LABEL_69;
              goto LABEL_68;
            }
            if (v37)
            {
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "nw_tcpconverter_send_connect";
              *(_WORD *)&buf[12] = 2112;
              *(_QWORD *)&buf[14] = 0;
              v29 = "%{public}s Received incorrect endpoint-type: %@, no backtrace";
LABEL_65:
              v38 = v30;
              v39 = v31;
              goto LABEL_66;
            }
          }
LABEL_67:
          if (!v26)
          {
LABEL_69:
            nw_framer_mark_failed_with_error(v5, 22);
            return 2;
          }
LABEL_68:
          free(v26);
          goto LABEL_69;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_tcpconverter_send_connect";
        *(_WORD *)&buf[12] = 2112;
        *(_QWORD *)&buf[14] = v10;
        v26 = (char *)_os_log_send_and_compose_impl();
        v61[0] = 16;
        output_buffer[0] = 0;
        if (!__nwlog_fault(v26, v61, output_buffer))
          goto LABEL_67;
        if (v61[0] == 17)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v27 = gLogObj;
          v28 = v61[0];
          if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v61[0]))
            goto LABEL_67;
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_tcpconverter_send_connect";
          *(_WORD *)&buf[12] = 2112;
          *(_QWORD *)&buf[14] = v10;
          v29 = "%{public}s Received incorrect remote-endpoint-type: %@";
        }
        else if (output_buffer[0])
        {
          v32 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v27 = gLogObj;
          v28 = v61[0];
          v33 = os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v61[0]);
          if (v32)
          {
            if (v33)
            {
              *(_DWORD *)buf = 136446722;
              *(_QWORD *)&buf[4] = "nw_tcpconverter_send_connect";
              *(_WORD *)&buf[12] = 2112;
              *(_QWORD *)&buf[14] = v10;
              v55 = 2082;
              v56 = (uint64_t)v32;
              _os_log_impl(&dword_182FBE000, v27, v28, "%{public}s Received incorrect remote-endpoint-type: %@, dumping backtrace:%{public}s", buf, 0x20u);
            }
            free(v32);
            goto LABEL_67;
          }
          if (!v33)
            goto LABEL_67;
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_tcpconverter_send_connect";
          *(_WORD *)&buf[12] = 2112;
          *(_QWORD *)&buf[14] = v10;
          v29 = "%{public}s Received incorrect remote-endpoint-type: %@, no backtrace";
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v27 = gLogObj;
          v28 = v61[0];
          if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v61[0]))
            goto LABEL_67;
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_tcpconverter_send_connect";
          *(_WORD *)&buf[12] = 2112;
          *(_QWORD *)&buf[14] = v10;
          v29 = "%{public}s Received incorrect remote-endpoint-type: %@, backtrace limit exceeded";
        }
        v38 = v27;
        v39 = v28;
LABEL_66:
        _os_log_impl(&dword_182FBE000, v38, v39, v29, buf, 0x16u);
        goto LABEL_67;
      }
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_tcpconverter_send_connect";
      v44 = (char *)_os_log_send_and_compose_impl();
      v61[0] = 16;
      output_buffer[0] = 0;
      if (__nwlog_fault(v44, v61, output_buffer))
      {
        if (v61[0] == 17)
        {
          v45 = __nwlog_obj();
          v46 = v61[0];
          if (!os_log_type_enabled(v45, (os_log_type_t)v61[0]))
            goto LABEL_89;
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_tcpconverter_send_connect";
          v47 = "%{public}s called with null framer";
          goto LABEL_88;
        }
        if (!output_buffer[0])
        {
          v45 = __nwlog_obj();
          v46 = v61[0];
          if (!os_log_type_enabled(v45, (os_log_type_t)v61[0]))
            goto LABEL_89;
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_tcpconverter_send_connect";
          v47 = "%{public}s called with null framer, backtrace limit exceeded";
          goto LABEL_88;
        }
        v48 = (char *)__nw_create_backtrace_string();
        v45 = __nwlog_obj();
        v46 = v61[0];
        v49 = os_log_type_enabled(v45, (os_log_type_t)v61[0]);
        if (v48)
        {
          if (v49)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_tcpconverter_send_connect";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v48;
            _os_log_impl(&dword_182FBE000, v45, v46, "%{public}s called with null framer, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v48);
          goto LABEL_89;
        }
        if (v49)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_tcpconverter_send_connect";
          v47 = "%{public}s called with null framer, no backtrace";
LABEL_88:
          _os_log_impl(&dword_182FBE000, v45, v46, v47, buf, 0xCu);
        }
      }
LABEL_89:
      if (v44)
        free(v44);
      return 2;
    }
  }
  __break(1u);
  return result;
}

void sub_18385EF10(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL __nw_protocol_tcpconverter_copy_definition_block_invoke_7(uint64_t a1, NSObject *a2)
{
  _DWORD *v3;
  int v4;
  NSObject *v6;
  uint64_t v7;
  const char *v8;
  NSObject *v9;
  uint64_t *v10;
  NSObject *v11;
  uint64_t v12;
  unint64_t v13;
  uint8_t *v14;
  uint8_t *v15;
  NSObject *v16;
  void *v17;
  _BOOL8 result;
  NSObject *v19;
  const char *v20;
  uint8_t *v21;
  size_t v22;
  _BOOL4 v23;
  int v24;
  char *v25;
  NSObject *v26;
  os_log_type_t v27;
  const char *v28;
  char *backtrace_string;
  _BOOL4 v30;
  _QWORD parse[6];
  char v32;
  os_log_type_t type;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t *v38;
  uint64_t *v39;
  _DWORD *v40;
  NSObject *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint8_t v51[4];
  const char *v52;
  __int16 v53;
  char *v54;
  _BYTE buf[24];
  void *v56;
  uint64_t *v57;
  uint64_t *v58;
  _DWORD *v59;
  NSObject *v60;
  _BYTE temp_buffer[24];
  uint64_t v62;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  v3 = *(_DWORD **)(a1 + 32);
  v4 = *v3;
  if (*v3 == 2)
  {
    *(_QWORD *)temp_buffer = 0;
    *(_QWORD *)&temp_buffer[8] = temp_buffer;
    *(_QWORD *)&temp_buffer[16] = 0x2000000000;
    v62 = 0;
    v34 = 0;
    v35 = (uint64_t)&v34;
    v36 = 0x2000000000;
    LOBYTE(v37) = 0;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v6 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEFAULT))
    {
      v7 = *(_QWORD *)(a1 + 32);
      if (v7)
        v8 = (const char *)(v7 + 4);
      else
        v8 = "";
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_protocol_tcpconverter_copy_definition_block_invoke";
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = v8;
      _os_log_impl(&dword_182FBE000, v6, OS_LOG_TYPE_DEFAULT, "%{public}s %s Received incoming data while connected", buf, 0x16u);
    }
    parse[0] = MEMORY[0x1E0C809B0];
    parse[1] = 0x40000000;
    parse[2] = __nw_protocol_tcpconverter_copy_definition_block_invoke_9;
    parse[3] = &unk_1E14A3950;
    parse[4] = temp_buffer;
    parse[5] = &v34;
    nw_framer_parse_input(a2, 1uLL, 0xFFFFFFFFuLL, 0, parse);
    v9 = nw_framer_message_create(*(nw_framer_t *)(a1 + 40));
    nw_framer_deliver_input_no_copy(a2, *(_QWORD *)(*(_QWORD *)&temp_buffer[8] + 24), v9, *(_BYTE *)(v35 + 24));
    if (v9)
      os_release(v9);
    _Block_object_dispose(&v34, 8);
    v10 = (uint64_t *)temp_buffer;
    goto LABEL_22;
  }
  v11 = *(NSObject **)(a1 + 40);
  v47 = 0;
  v48 = &v47;
  v49 = 0x2000000000;
  v50 = 0;
  v43 = 0;
  v44 = &v43;
  v45 = 0x2000000000;
  v46 = 0;
  if (v4 != 1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v19 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)temp_buffer = 136446466;
      *(_QWORD *)&temp_buffer[4] = "nw_tcpconverter_parse_response";
      *(_WORD *)&temp_buffer[12] = 2080;
      *(_QWORD *)&temp_buffer[14] = v3 + 1;
      v20 = "%{public}s %s Received response although we haven't yet sent a connect-message";
      v21 = temp_buffer;
LABEL_19:
      _os_log_impl(&dword_182FBE000, v19, OS_LOG_TYPE_ERROR, v20, v21, 0x16u);
    }
LABEL_20:
    nw_framer_mark_failed_with_error(v11, 22);
    goto LABEL_21;
  }
  v12 = MEMORY[0x1E0C809B0];
  v34 = MEMORY[0x1E0C809B0];
  v35 = 0x40000000;
  v36 = (uint64_t)___ZL30nw_tcpconverter_parse_responseP9nw_framerP15nw_tcpconverter_block_invoke;
  v37 = &unk_1E14A39F8;
  v40 = v3;
  v41 = v11;
  v42 = 4;
  v38 = &v47;
  v39 = &v43;
  if (!nw_framer_parse_input(v11, 4uLL, 4uLL, temp_buffer, &v34) || !*((_BYTE *)v44 + 24))
    goto LABEL_21;
  v13 = v48[3];
  if (v13 < 0x81)
  {
    v15 = 0;
    v14 = temp_buffer;
LABEL_24:
    *((_BYTE *)v44 + 24) = 0;
    v22 = v48[3];
    *(_QWORD *)buf = v12;
    *(_QWORD *)&buf[8] = 0x40000000;
    *(_QWORD *)&buf[16] = ___ZL30nw_tcpconverter_parse_responseP9nw_framerP15nw_tcpconverter_block_invoke_30;
    v56 = &unk_1E14A3A20;
    v59 = v3;
    v60 = v11;
    v57 = &v47;
    v58 = &v43;
    v23 = nw_framer_parse_input(v11, v22, v22, v14, buf);
    if (v15)
      free(v15);
    if (!v23 || !*((_BYTE *)v44 + 24))
      goto LABEL_21;
    v24 = *v3;
    if (*v3 == 2)
    {
      nw_framer_pass_through_input(v11);
      nw_framer_pass_through_output(v11);
      nw_framer_mark_ready(v11);
      goto LABEL_21;
    }
    if (v24 != 1)
    {
      if (!v24)
      {
        __nwlog_obj();
        *(_DWORD *)v51 = 136446210;
        v52 = "nw_tcpconverter_parse_response";
        v25 = (char *)_os_log_send_and_compose_impl();
        type = OS_LOG_TYPE_ERROR;
        v32 = 0;
        if (!__nwlog_fault(v25, &type, &v32))
          goto LABEL_48;
        if (type == OS_LOG_TYPE_FAULT)
        {
          v26 = __nwlog_obj();
          v27 = type;
          if (!os_log_type_enabled(v26, type))
            goto LABEL_48;
          *(_DWORD *)v51 = 136446210;
          v52 = "nw_tcpconverter_parse_response";
          v28 = "%{public}s Can't be in initial after parsing response";
        }
        else if (v32)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          v26 = __nwlog_obj();
          v27 = type;
          v30 = os_log_type_enabled(v26, type);
          if (backtrace_string)
          {
            if (v30)
            {
              *(_DWORD *)v51 = 136446466;
              v52 = "nw_tcpconverter_parse_response";
              v53 = 2082;
              v54 = backtrace_string;
              _os_log_impl(&dword_182FBE000, v26, v27, "%{public}s Can't be in initial after parsing response, dumping backtrace:%{public}s", v51, 0x16u);
            }
            free(backtrace_string);
            goto LABEL_48;
          }
          if (!v30)
          {
LABEL_48:
            if (v25)
              free(v25);
            goto LABEL_21;
          }
          *(_DWORD *)v51 = 136446210;
          v52 = "nw_tcpconverter_parse_response";
          v28 = "%{public}s Can't be in initial after parsing response, no backtrace";
        }
        else
        {
          v26 = __nwlog_obj();
          v27 = type;
          if (!os_log_type_enabled(v26, type))
            goto LABEL_48;
          *(_DWORD *)v51 = 136446210;
          v52 = "nw_tcpconverter_parse_response";
          v28 = "%{public}s Can't be in initial after parsing response, backtrace limit exceeded";
        }
        _os_log_impl(&dword_182FBE000, v26, v27, v28, v51, 0xCu);
        goto LABEL_48;
      }
LABEL_21:
      _Block_object_dispose(&v43, 8);
      v10 = &v47;
LABEL_22:
      _Block_object_dispose(v10, 8);
      return 0;
    }
    v19 = __nwlog_obj();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v51 = 136446466;
      v52 = "nw_tcpconverter_parse_response";
      v53 = 2080;
      v54 = (char *)(v3 + 1);
      v20 = "%{public}s %s Received unexpected response - we remained in 'connect_sent' state";
      v21 = v51;
      goto LABEL_19;
    }
    goto LABEL_20;
  }
  v14 = (uint8_t *)malloc_type_malloc(v48[3], 0xF2B69DE5uLL);
  v15 = v14;
  if (v14)
    goto LABEL_24;
  v16 = __nwlog_obj();
  os_log_type_enabled(v16, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446466;
  *(_QWORD *)&buf[4] = "strict_malloc";
  *(_WORD *)&buf[12] = 2048;
  *(_QWORD *)&buf[14] = v13;
  v17 = (void *)_os_log_send_and_compose_impl();
  result = __nwlog_abort((uint64_t)v17);
  if (!result)
  {
    free(v17);
    v14 = 0;
    v15 = 0;
    goto LABEL_24;
  }
  __break(1u);
  return result;
}

BOOL __nw_protocol_tcpconverter_copy_definition_block_invoke_2_14(_BOOL8 result, NSObject *a2, uint64_t a3, size_t a4)
{
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  const char *v9;
  int v10;
  const char *v11;
  __int16 v12;
  const char *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (**(_DWORD **)(result + 32) == 2)
  {
    v6 = result;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v7 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEFAULT))
    {
      v8 = *(_QWORD *)(v6 + 32);
      if (v8)
        v9 = (const char *)(v8 + 4);
      else
        v9 = "";
      v10 = 136446466;
      v11 = "nw_protocol_tcpconverter_copy_definition_block_invoke_2";
      v12 = 2080;
      v13 = v9;
      _os_log_impl(&dword_182FBE000, v7, OS_LOG_TYPE_DEFAULT, "%{public}s %s Received outgoing data while connected", (uint8_t *)&v10, 0x16u);
    }
    return nw_framer_write_output_no_copy(a2, a4);
  }
  return result;
}

void __nw_protocol_tcpconverter_copy_definition_block_invoke_17(uint64_t a1)
{
  void *v1;

  v1 = *(void **)(a1 + 32);
  if (v1)
    free(v1);
}

uint64_t __nw_protocol_tcpconverter_copy_definition_block_invoke_2_20(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  const char *v4;
  int v6;
  const char *v7;
  __int16 v8;
  const char *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v2 = gLogObj;
  if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (v3)
      v4 = (const char *)(v3 + 4);
    else
      v4 = "";
    v6 = 136446466;
    v7 = "nw_protocol_tcpconverter_copy_definition_block_invoke_2";
    v8 = 2080;
    v9 = v4;
    _os_log_impl(&dword_182FBE000, v2, OS_LOG_TYPE_DEFAULT, "%{public}s %s Got stop indication", (uint8_t *)&v6, 0x16u);
  }
  return 1;
}

uint64_t __nw_protocol_tcpconverter_copy_definition_block_invoke_9(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = a3;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = a4;
  return 0;
}

uint64_t ___ZL30nw_tcpconverter_parse_responseP9nw_framerP15nw_tcpconverter_block_invoke(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  unint64_t v8;
  NSObject *v10;
  uint64_t v11;
  const char *v12;
  NSObject *v13;
  uint64_t v14;
  const char *v15;
  BOOL v16;
  int v17;
  const char *v18;
  uint64_t v19;
  const char *v20;
  const char *v21;
  unsigned int v22;
  NSObject *v23;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  int v28;
  const char *v29;
  __int16 v30;
  const char *v31;
  __int16 v32;
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if (!a2)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v10 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      v11 = *(_QWORD *)(a1 + 48);
      if (v11)
        v12 = (const char *)(v11 + 4);
      else
        v12 = "";
      v28 = 136446466;
      v29 = "nw_tcpconverter_parse_response_block_invoke";
      v30 = 2080;
      v31 = v12;
      _os_log_impl(&dword_182FBE000, v10, OS_LOG_TYPE_ERROR, "%{public}s %s Received NULL header", (uint8_t *)&v28, 0x16u);
    }
    return 0;
  }
  if (*a2 != 1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v13 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
    {
      v14 = *(_QWORD *)(a1 + 48);
      v15 = (const char *)(v14 + 4);
      v16 = v14 == 0;
      v17 = *a2;
      if (v16)
        v15 = "";
      v28 = 136446722;
      v29 = "nw_tcpconverter_parse_response_block_invoke";
      v30 = 2080;
      v31 = v15;
      v32 = 1024;
      LODWORD(v33) = v17;
      v18 = "%{public}s %s Received invalid TCP Converter version %d";
      goto LABEL_20;
    }
LABEL_21:
    nw_framer_mark_failed_with_error(*(nw_framer_t *)(a1 + 56), 22);
    return 0;
  }
  if (*((_WORD *)a2 + 1) != 25378)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v13 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
    {
      v19 = *(_QWORD *)(a1 + 48);
      v20 = "";
      v21 = (const char *)(v19 + 4);
      v16 = v19 == 0;
      v22 = *((unsigned __int16 *)a2 + 1);
      if (!v16)
        v20 = v21;
      v28 = 136446722;
      v29 = "nw_tcpconverter_parse_response_block_invoke";
      v30 = 2080;
      v31 = v20;
      v32 = 1024;
      LODWORD(v33) = bswap32(v22) >> 16;
      v18 = "%{public}s %s Invalid magic number received: %u";
LABEL_20:
      _os_log_impl(&dword_182FBE000, v13, OS_LOG_TYPE_INFO, v18, (uint8_t *)&v28, 0x1Cu);
      goto LABEL_21;
    }
    goto LABEL_21;
  }
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 4 * a2[1];
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v5 = *(_QWORD *)(v4 + 24);
  v6 = *(_QWORD *)(a1 + 64);
  v7 = v5 > v6;
  v8 = v5 - v6;
  if (v7)
  {
    *(_QWORD *)(v4 + 24) = v8;
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
    return *(_QWORD *)(a1 + 64);
  }
  else
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v23 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
    {
      v25 = *(_QWORD *)(a1 + 48);
      if (v25)
        v26 = (const char *)(v25 + 4);
      else
        v26 = "";
      v27 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
      v28 = 136446722;
      v29 = "nw_tcpconverter_parse_response_block_invoke";
      v30 = 2080;
      v31 = v26;
      v32 = 2048;
      v33 = v27;
      _os_log_impl(&dword_182FBE000, v23, OS_LOG_TYPE_INFO, "%{public}s %s Received too small total_length in the fixed header: %ld", (uint8_t *)&v28, 0x20u);
    }
    nw_framer_mark_failed_with_error(*(nw_framer_t *)(a1 + 56), 22);
    return 4;
  }
}

uint64_t ___ZL30nw_tcpconverter_parse_responseP9nw_framerP15nw_tcpconverter_block_invoke_30(_QWORD *a1, uint64_t a2)
{
  unint64_t v3;
  unsigned int v5;
  unint64_t v6;
  int v7;
  int v8;
  unint64_t v9;
  NSObject *v10;
  uint64_t v11;
  const char *v12;
  BOOL v13;
  const char *v14;
  const char *v15;
  NSObject *v16;
  uint64_t v17;
  const char *v18;
  const char *v19;
  NSObject *v21;
  uint64_t v22;
  const char *v23;
  const char *v24;
  uint64_t v25;
  NSObject *v26;
  int v27;
  unsigned __int8 *v28;
  int v29;
  unsigned int v30;
  const char *v31;
  const char *v32;
  void *v33;
  NSObject *v34;
  uint64_t v35;
  const char *v36;
  const char *v37;
  _BYTE buf[12];
  __int16 v39;
  const char *v40;
  __int16 v41;
  _BYTE v42[10];
  _BYTE v43[10];
  __int16 v44;
  unsigned int v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24);
  if (v3 < 2)
  {
LABEL_23:
    *(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 24) = 1;
    return *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24);
  }
  else
  {
    v5 = 0;
    v6 = 1;
    while (1)
    {
      v7 = *(unsigned __int8 *)(a2 + v5);
      v8 = 4 * *(unsigned __int8 *)(a2 + v6);
      v9 = v8 + v5;
      if (v3 < v9)
        break;
      if (v7 == 20)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v16 = gLogObj;
        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEFAULT))
        {
          v17 = a1[6];
          v18 = (const char *)(v17 + 4);
          v13 = v17 == 0;
          v19 = "";
          if (!v13)
            v19 = v18;
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_tcpconverter_parse_response_block_invoke";
          v39 = 2080;
          v40 = v19;
          _os_log_impl(&dword_182FBE000, v16, OS_LOG_TYPE_DEFAULT, "%{public}s %s Connection successfully established", buf, 0x16u);
        }
        *(_DWORD *)a1[6] = 2;
      }
      else
      {
        if (v7 == 30)
        {
          v28 = (unsigned __int8 *)(a2 + v5);
          v29 = v28[1];
          *(_QWORD *)buf = 0;
          v30 = v28[2];
          if (v30 >= 0x20)
          {
            if (v30 >= 0x40)
            {
              if (v30 >= 0x60)
              {
                if ((v30 & 0x80u) != 0)
                  v31 = "Unknown error class";
                else
                  v31 = "Destination-server side error";
              }
              else
              {
                v31 = "Converter-side error";
              }
            }
            else
            {
              v31 = "Client-side error";
            }
          }
          else
          {
            v31 = "Message validation and processing error";
          }
          v32 = "Unsupported Version";
          switch(*(_BYTE *)(a2 + v5 + 2))
          {
            case 0:
              break;
            case 1:
              v32 = "Malformed Message";
              break;
            case 2:
              v32 = "Unsupported Message";
              break;
            case 3:
              v32 = "Missing Cookie";
              break;
            case 0x20:
              v32 = "Not Authorized";
              break;
            case 0x21:
              v32 = "Unsupported TCP Option";
              break;
            case 0x40:
              v32 = "Resource Exceeded";
              break;
            case 0x41:
              v32 = "Network Failure";
              break;
            case 0x60:
              v32 = "Connection Reset";
              break;
            case 0x61:
              v32 = "Destination Unreachable";
              break;
            default:
              v32 = "Unknown error code";
              break;
          }
          asprintf((char **)buf, "Error class %s (%u), type %s (%u), length %u, value %u", v31, v30, v32, v30, 4 * v29, v28[3]);
          v33 = *(void **)buf;
          if (*(_QWORD *)buf)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v34 = gLogObj;
            if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEFAULT))
            {
              v35 = a1[6];
              v36 = (const char *)(v35 + 4);
              v13 = v35 == 0;
              v37 = "";
              if (!v13)
                v37 = v36;
              *(_DWORD *)buf = 136446722;
              *(_QWORD *)&buf[4] = "nw_tcpconverter_parse_response_block_invoke";
              v39 = 2080;
              v40 = v37;
              v41 = 2080;
              *(_QWORD *)v42 = v33;
              _os_log_impl(&dword_182FBE000, v34, OS_LOG_TYPE_DEFAULT, "%{public}s %s Received ERROR: %s", buf, 0x20u);
            }
            free(v33);
          }
          v27 = 22;
          switch(v28[2])
          {
            case '@':
              v27 = 35;
              break;
            case 'A':
              v27 = 51;
              break;
            case 'B':
            case 'C':
            case 'D':
            case 'E':
            case 'F':
            case 'G':
            case 'H':
            case 'I':
            case 'J':
            case 'K':
            case 'L':
            case 'M':
            case 'N':
            case 'O':
            case 'P':
            case 'Q':
            case 'R':
            case 'S':
            case 'T':
            case 'U':
            case 'V':
            case 'W':
            case 'X':
            case 'Y':
            case 'Z':
            case '[':
            case '\\':
            case ']':
            case '^':
            case '_':
              break;
              v27 = 61;
              break;
            case 'a':
              v27 = 65;
              break;
            default:
              if (v28[2] == 32)
                v27 = 1;
              break;
          }
          *(_DWORD *)a1[6] = 3;
          v26 = a1[7];
          goto LABEL_63;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v10 = gLogObj;
        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
        {
          v11 = a1[6];
          v12 = (const char *)(v11 + 4);
          v13 = v11 == 0;
          v14 = "";
          if (!v13)
            v14 = v12;
          v15 = "RESERVED";
          switch(v7)
          {
            case 0:
              break;
            case 1:
              v15 = "INFO";
              break;
            case 10:
              v15 = "CONNECT";
              break;
            case 20:
              v15 = "EXTENDED";
              break;
            case 21:
              v15 = "EXTENSIONS";
              break;
            case 22:
              v15 = "COOKIE";
              break;
            default:
              v15 = "UNKNOWN";
              break;
          }
          *(_DWORD *)buf = 136447234;
          *(_QWORD *)&buf[4] = "nw_tcpconverter_parse_response_block_invoke";
          v39 = 2080;
          v40 = v14;
          v41 = 2080;
          *(_QWORD *)v42 = v15;
          *(_WORD *)&v42[8] = 1024;
          *(_DWORD *)v43 = v7;
          *(_WORD *)&v43[4] = 1024;
          *(_DWORD *)&v43[6] = v8;
          _os_log_impl(&dword_182FBE000, v10, OS_LOG_TYPE_ERROR, "%{public}s %s Received unexpected Converter-type %s(%u) with length %u -> Skipping", buf, 0x2Cu);
        }
      }
      v6 = v9 | 1;
      v3 = *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24);
      v5 = v9;
      if (v3 <= v6)
        goto LABEL_23;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v21 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      v22 = a1[6];
      v23 = (const char *)(v22 + 4);
      v13 = v22 == 0;
      v24 = "";
      if (!v13)
        v24 = v23;
      v25 = *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24);
      *(_DWORD *)buf = 136447490;
      *(_QWORD *)&buf[4] = "nw_tcpconverter_parse_response_block_invoke";
      v39 = 2080;
      v40 = v24;
      v41 = 1024;
      *(_DWORD *)v42 = v7;
      *(_WORD *)&v42[4] = 1024;
      *(_DWORD *)&v42[6] = v8;
      *(_WORD *)v43 = 2048;
      *(_QWORD *)&v43[2] = v25;
      v44 = 1024;
      v45 = v5;
      _os_log_impl(&dword_182FBE000, v21, OS_LOG_TYPE_ERROR, "%{public}s %s Insufficient data for TLV of type %u, length %d, total_length %ld, index %u", buf, 0x32u);
    }
    v26 = a1[7];
    v27 = 22;
LABEL_63:
    nw_framer_mark_failed_with_error(v26, v27);
    return 0;
  }
}

void nw_http_capsule_framer_cleanup(_QWORD *a1, __n128 a2)
{
  uint64_t v3;
  _DWORD *v4;
  NSObject *v5;
  _BOOL4 v6;
  int v7;
  _QWORD *v8;
  uint64_t v9;
  _DWORD *v10;
  _BOOL4 v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char *v20;
  NSObject *v21;
  os_log_type_t v22;
  const char *v23;
  NSObject *v24;
  NSObject *v25;
  char *backtrace_string;
  _BOOL4 v27;
  NSObject *log;
  __n128 v29;
  __n128 v30;
  char v31;
  os_log_type_t type;
  _BYTE buf[24];
  void *v34;
  _QWORD *v35;
  char v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v3 = *a1;
    a2.n128_u64[0] = 136446722;
    while (v3)
    {
      v4 = (_DWORD *)v3;
      v3 = *(_QWORD *)(v3 + 32);
      if (gLogDatapath)
      {
        v29 = a2;
        v5 = __nwlog_obj();
        v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG);
        a2 = v29;
        if (v6)
        {
          v7 = nw_frame_unclaimed_length(v4);
          *(_DWORD *)buf = v29.n128_u32[0];
          *(_QWORD *)&buf[4] = "nw_http_capsule_framer_cleanup_block_invoke";
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v4;
          *(_WORD *)&buf[22] = 1024;
          LODWORD(v34) = v7;
          _os_log_impl(&dword_182FBE000, v5, OS_LOG_TYPE_DEBUG, "%{public}s unprocessed_frames still has frames in it: frame %p (%u bytes)", buf, 0x1Cu);
          a2 = v29;
        }
      }
    }
    v8 = a1 + 2;
    v9 = a1[2];
    while (v9)
    {
      v10 = (_DWORD *)v9;
      v9 = *(_QWORD *)(v9 + 32);
      if (gLogDatapath)
      {
        v30 = a2;
        log = __nwlog_obj();
        v11 = os_log_type_enabled(log, OS_LOG_TYPE_DEBUG);
        a2 = v30;
        if (v11)
        {
          v12 = nw_frame_unclaimed_length(v10);
          *(_DWORD *)buf = v30.n128_u32[0];
          *(_QWORD *)&buf[4] = "nw_http_capsule_framer_cleanup_block_invoke";
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v10;
          *(_WORD *)&buf[22] = 1024;
          LODWORD(v34) = v12;
          _os_log_impl(&dword_182FBE000, log, OS_LOG_TYPE_DEBUG, "%{public}s processed_frames still has frames in it: frame %p (%u bytes)", buf, 0x1Cu);
          a2 = v30;
        }
      }
    }
    if (gLogDatapath)
    {
      v24 = __nwlog_obj();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_finalize_temp_frame_array";
        _os_log_impl(&dword_182FBE000, v24, OS_LOG_TYPE_DEBUG, "%{public}s called", buf, 0xCu);
      }
    }
    v13 = MEMORY[0x1E0C809B0];
    *(_QWORD *)buf = MEMORY[0x1E0C809B0];
    *(_QWORD *)&buf[8] = 0x40000000;
    *(_QWORD *)&buf[16] = ___ZL37nw_protocol_finalize_temp_frame_arrayP16nw_frame_array_sb_block_invoke_48470;
    v34 = &__block_descriptor_tmp_10_48471;
    v35 = a1;
    v36 = 0;
    v14 = *a1;
    do
    {
      if (!v14)
        break;
      v15 = *(_QWORD *)(v14 + 32);
      v16 = (*(uint64_t (**)(_BYTE *, __n128))&buf[16])(buf, a2);
      v14 = v15;
    }
    while ((v16 & 1) != 0);
    if (gLogDatapath)
    {
      v25 = __nwlog_obj();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_finalize_temp_frame_array";
        _os_log_impl(&dword_182FBE000, v25, OS_LOG_TYPE_DEBUG, "%{public}s called", buf, 0xCu);
      }
    }
    *(_QWORD *)buf = v13;
    *(_QWORD *)&buf[8] = 0x40000000;
    *(_QWORD *)&buf[16] = ___ZL37nw_protocol_finalize_temp_frame_arrayP16nw_frame_array_sb_block_invoke_48470;
    v34 = &__block_descriptor_tmp_10_48471;
    v35 = v8;
    v36 = 0;
    v17 = *v8;
    do
    {
      if (!v17)
        break;
      v18 = *(_QWORD *)(v17 + 32);
      v19 = (*(uint64_t (**)(_BYTE *, __n128))&buf[16])(buf, a2);
      v17 = v18;
    }
    while ((v19 & 1) != 0);
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_http_capsule_framer_cleanup";
  v20 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v31 = 0;
  if (__nwlog_fault(v20, &type, &v31))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v21 = __nwlog_obj();
      v22 = type;
      if (!os_log_type_enabled(v21, type))
        goto LABEL_39;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http_capsule_framer_cleanup";
      v23 = "%{public}s called with null framer";
      goto LABEL_38;
    }
    if (!v31)
    {
      v21 = __nwlog_obj();
      v22 = type;
      if (!os_log_type_enabled(v21, type))
        goto LABEL_39;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http_capsule_framer_cleanup";
      v23 = "%{public}s called with null framer, backtrace limit exceeded";
      goto LABEL_38;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v21 = __nwlog_obj();
    v22 = type;
    v27 = os_log_type_enabled(v21, type);
    if (backtrace_string)
    {
      if (v27)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http_capsule_framer_cleanup";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v21, v22, "%{public}s called with null framer, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_39;
    }
    if (v27)
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http_capsule_framer_cleanup";
      v23 = "%{public}s called with null framer, no backtrace";
LABEL_38:
      _os_log_impl(&dword_182FBE000, v21, v22, v23, buf, 0xCu);
    }
  }
LABEL_39:
  if (v20)
    free(v20);
}

uint64_t ___ZL37nw_protocol_finalize_temp_frame_arrayP16nw_frame_array_sb_block_invoke_48470(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(a2 + 32);
  v3 = *(_QWORD **)(a2 + 40);
  if (v2)
  {
    *(_QWORD *)(v2 + 40) = v3;
    v3 = *(_QWORD **)(a2 + 40);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) = v3;
  }
  *v3 = v2;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  nw_frame_finalize(a2);
  return 1;
}

uint64_t __nw_http_capsule_framer_read_capsule_block_invoke(_QWORD *a1, uint64_t a2)
{
  const void *v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  unsigned __int16 v8;
  _DWORD *v9;
  unint64_t v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  char v15;
  unsigned int v16;
  unsigned int v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unsigned int v28;
  uint8_t buf[4];
  const char *v30;
  __int16 v31;
  uint64_t v32;
  __int16 v33;
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v28 = 0;
  v4 = (const void *)nw_frame_unclaimed_bytes(a2, &v28);
  v5 = a1[5];
  if (!v4)
  {
LABEL_30:
    v25 = *(_QWORD *)(a2 + 32);
    v26 = *(_QWORD **)(a2 + 40);
    if (v25)
    {
      *(_QWORD *)(v25 + 40) = v26;
      v26 = *(_QWORD **)(a2 + 40);
    }
    else
    {
      *(_QWORD *)(v5 + 8) = v26;
    }
    *v26 = v25;
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 40) = 0;
    v24 = 1;
    nw_frame_finalize(a2);
    return v24;
  }
  v6 = *(unsigned __int16 *)(v5 + 72);
  if (16 - v6 >= (unint64_t)v28)
    v7 = v28;
  else
    v7 = 16 - v6;
  memcpy((void *)(v5 + v6 + 56), v4, v7);
  v5 = a1[5];
  v8 = *(_WORD *)(v5 + 72) + v7;
  *(_WORD *)(v5 + 72) = v8;
  if (!v8)
    goto LABEL_23;
  v9 = (_DWORD *)(v5 + 56);
  v10 = *(unsigned __int8 *)(v5 + 56);
  if (v10 <= 0x3F)
  {
    v11 = 1;
    goto LABEL_8;
  }
  v16 = v10 >> 6;
  if (v16 == 2)
  {
    if (v8 < 4u)
      goto LABEL_23;
    v10 = bswap32(*v9 & 0xFFFFFF7F);
    v11 = 4;
  }
  else
  {
    if (v16 == 1)
    {
      if (v8 >= 2u)
      {
        v10 = bswap32(*(_WORD *)v9 & 0xFFBF) >> 16;
        v11 = 2;
        goto LABEL_8;
      }
LABEL_23:
      v11 = 0;
      goto LABEL_24;
    }
    if (v8 < 8u)
      goto LABEL_23;
    v10 = bswap64(*(_QWORD *)v9 & 0xFFFFFFFFFFFFFF3FLL);
    v11 = 8;
  }
LABEL_8:
  *(_QWORD *)(v5 + 48) = v10;
  v12 = v8 - (unint64_t)v11;
  if (v8 != (unint64_t)v11)
  {
    v13 = *((unsigned __int8 *)v9 + v11);
    if (v13 <= 0x3F)
    {
      v14 = 1;
LABEL_11:
      v11 += v14;
      *(_WORD *)(v5 + 72) = 0;
      v15 = 1;
      *(_QWORD *)(v5 + 32) = v13;
      *(_QWORD *)(v5 + 40) = v13;
      goto LABEL_25;
    }
    v17 = v13 >> 6;
    if (v17 == 2)
    {
      if (v12 >= 4)
      {
        v13 = bswap32(*(_DWORD *)((char *)v9 + v11) & 0xFFFFFF7F);
        v14 = 4;
        goto LABEL_11;
      }
    }
    else if (v17 == 1)
    {
      if (v12 >= 2)
      {
        v13 = bswap32(*(_WORD *)((_BYTE *)v9 + v11) & 0xFFBF) >> 16;
        v14 = 2;
        goto LABEL_11;
      }
    }
    else if (v12 >= 8)
    {
      v13 = bswap64(*(_QWORD *)((_BYTE *)v9 + v11) & 0xFFFFFFFFFFFFFF3FLL);
      v14 = 8;
      goto LABEL_11;
    }
  }
LABEL_24:
  v15 = 0;
LABEL_25:
  *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = v15;
  if (!*(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24))
    goto LABEL_30;
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v18 = gLogObj;
  if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
  {
    v20 = a1[5];
    v21 = *(_QWORD *)(v20 + 48);
    v22 = *(_QWORD *)(v20 + 32);
    *(_DWORD *)buf = 136446722;
    v30 = "nw_http_capsule_framer_read_capsule_block_invoke";
    v31 = 2048;
    v32 = v21;
    v33 = 2048;
    v34 = v22;
    _os_log_impl(&dword_182FBE000, v18, OS_LOG_TYPE_DEBUG, "%{public}s Parsed capsule header for type %llx, length %lld", buf, 0x20u);
  }
  nw_frame_claim(a2, v19, v11 - v6, 0);
  v23 = (unsigned int *)a1[7];
  v24 = 0;
  if (v23)
    *v23 = v11;
  return v24;
}

uint64_t ___ZL43nw_http_capsule_framer_process_capsule_bodyP22nw_http_capsule_framerP11nw_protocolPb_block_invoke(uint64_t a1, _DWORD *a2)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) += nw_frame_unclaimed_length(a2);
  ++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
  return 1;
}

uint64_t ___ZL43nw_http_capsule_framer_process_capsule_bodyP22nw_http_capsule_framerP11nw_protocolPb_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  char *v25;
  NSObject *v26;
  os_log_type_t v27;
  const char *v28;
  char *backtrace_string;
  _BOOL4 v30;
  char v31;
  os_log_type_t type;
  uint64_t v33;
  uint8_t buf[4];
  const char *v35;
  __int16 v36;
  char *v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD **)(a2 + 40);
  v6 = (_QWORD *)(a2 + 32);
  if (v4)
  {
    *(_QWORD *)(v4 + 40) = v5;
    v5 = *(_QWORD **)(a2 + 40);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) = v5;
  }
  *v5 = v4;
  *v6 = 0;
  *(_QWORD *)(a2 + 40) = 0;
  v7 = nw_frame_unclaimed_length((_DWORD *)a2);
  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(v8 + 40);
  v10 = v7;
  if (v9 < v7)
  {
    v33 = a2;
    v11 = nw_frame_split(&v33, v9);
    v12 = *(_QWORD *)(a1 + 48);
    v13 = *(_QWORD *)(v12 + 40) - v9;
    *(_QWORD *)(v12 + 40) = v13;
    if (!v13)
      **(_BYTE **)(a1 + 56) = 1;
    if (v11)
    {
      *(_QWORD *)(v11 + 32) = 0;
      v14 = *(uint64_t **)(v12 + 24);
      *(_QWORD *)(v11 + 40) = v14;
      *v14 = v11;
      *(_QWORD *)(v12 + 24) = v11 + 32;
      ++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
      v15 = *(uint64_t **)(a1 + 48);
      v16 = v33;
      v17 = *v15;
      v18 = v33;
      *(_QWORD *)(v33 + 32) = *v15;
      v19 = v18 + 32;
      if (v17)
        v20 = (uint64_t *)(v17 + 40);
      else
        v20 = v15 + 1;
      *v20 = v19;
      *v15 = v16;
      *(_QWORD *)(v16 + 40) = v15;
      return 0;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446210;
    v35 = "nw_http_capsule_framer_process_capsule_body_block_invoke_2";
    v25 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v31 = 0;
    if (__nwlog_fault(v25, &type, &v31))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v26 = gLogObj;
        v27 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type))
          goto LABEL_28;
        *(_DWORD *)buf = 136446210;
        v35 = "nw_http_capsule_framer_process_capsule_body_block_invoke";
        v28 = "%{public}s nw_frame_split returned NULL frame";
        goto LABEL_27;
      }
      if (!v31)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v26 = gLogObj;
        v27 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type))
          goto LABEL_28;
        *(_DWORD *)buf = 136446210;
        v35 = "nw_http_capsule_framer_process_capsule_body_block_invoke";
        v28 = "%{public}s nw_frame_split returned NULL frame, backtrace limit exceeded";
        goto LABEL_27;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v26 = gLogObj;
      v27 = type;
      v30 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (backtrace_string)
      {
        if (v30)
        {
          *(_DWORD *)buf = 136446466;
          v35 = "nw_http_capsule_framer_process_capsule_body_block_invoke";
          v36 = 2082;
          v37 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v26, v27, "%{public}s nw_frame_split returned NULL frame, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_28;
      }
      if (v30)
      {
        *(_DWORD *)buf = 136446210;
        v35 = "nw_http_capsule_framer_process_capsule_body_block_invoke";
        v28 = "%{public}s nw_frame_split returned NULL frame, no backtrace";
LABEL_27:
        _os_log_impl(&dword_182FBE000, v26, v27, v28, buf, 0xCu);
      }
    }
LABEL_28:
    if (v25)
      free(v25);
    return 0;
  }
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) += v7;
  *(_QWORD *)(a2 + 32) = 0;
  v21 = *(uint64_t **)(v8 + 24);
  *(_QWORD *)(a2 + 40) = v21;
  *v21 = a2;
  *(_QWORD *)(v8 + 24) = v6;
  ++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
  v22 = *(_QWORD *)(a1 + 48);
  result = 1;
  v24 = *(_QWORD *)(v22 + 40) - v10;
  *(_QWORD *)(v22 + 40) = v24;
  if (v24)
    return result;
  **(_BYTE **)(a1 + 56) = 1;
  return 0;
}

BOOL nw_http_capsule_framer_get_output_frames(uint64_t a1, uint64_t a2, unint64_t a3, unsigned int a4, unsigned int a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v8;
  uint64_t v9;
  int v15;
  void *v16;
  _BOOL8 result;
  int v18;
  int v19;
  int v20;
  BOOL v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  NSObject *v28;
  char *v29;
  NSObject *v30;
  os_log_type_t v31;
  const char *v32;
  char *backtrace_string;
  _BOOL4 v34;
  const char *v35;
  _BOOL4 v36;
  NSObject *v37;
  int v38;
  _QWORD v39[2];
  uint64_t (*v40)(_QWORD *);
  void *v41;
  _BYTE *v42;
  uint64_t v43;
  int v44;
  char v45;
  os_log_type_t type;
  _BYTE buf[24];
  uint64_t v48;
  __int16 v49;
  uint64_t v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_capsule_framer_get_output_frames";
    v29 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v45 = 0;
    if (!__nwlog_fault(v29, &type, &v45))
      goto LABEL_75;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v45)
      {
        v30 = __nwlog_obj();
        v31 = type;
        if (!os_log_type_enabled(v30, type))
          goto LABEL_75;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http_capsule_framer_get_output_frames";
        v32 = "%{public}s called with null framer, backtrace limit exceeded";
        goto LABEL_74;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v30 = __nwlog_obj();
      v31 = type;
      v34 = os_log_type_enabled(v30, type);
      if (!backtrace_string)
      {
        if (!v34)
          goto LABEL_75;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http_capsule_framer_get_output_frames";
        v32 = "%{public}s called with null framer, no backtrace";
        goto LABEL_74;
      }
      if (v34)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http_capsule_framer_get_output_frames";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        v35 = "%{public}s called with null framer, dumping backtrace:%{public}s";
LABEL_59:
        _os_log_impl(&dword_182FBE000, v30, v31, v35, buf, 0x16u);
      }
LABEL_60:
      free(backtrace_string);
      goto LABEL_75;
    }
    v30 = __nwlog_obj();
    v31 = type;
    if (!os_log_type_enabled(v30, type))
      goto LABEL_75;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_capsule_framer_get_output_frames";
    v32 = "%{public}s called with null framer";
LABEL_74:
    _os_log_impl(&dword_182FBE000, v30, v31, v32, buf, 0xCu);
LABEL_75:
    if (v29)
      free(v29);
    return 0;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_capsule_framer_get_output_frames";
    v29 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v45 = 0;
    if (!__nwlog_fault(v29, &type, &v45))
      goto LABEL_75;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v30 = __nwlog_obj();
      v31 = type;
      if (!os_log_type_enabled(v30, type))
        goto LABEL_75;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http_capsule_framer_get_output_frames";
      v32 = "%{public}s called with null protocol";
      goto LABEL_74;
    }
    if (!v45)
    {
      v30 = __nwlog_obj();
      v31 = type;
      if (!os_log_type_enabled(v30, type))
        goto LABEL_75;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http_capsule_framer_get_output_frames";
      v32 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_74;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v30 = __nwlog_obj();
    v31 = type;
    v36 = os_log_type_enabled(v30, type);
    if (backtrace_string)
    {
      if (v36)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http_capsule_framer_get_output_frames";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        v35 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
        goto LABEL_59;
      }
      goto LABEL_60;
    }
    if (!v36)
      goto LABEL_75;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_capsule_framer_get_output_frames";
    v32 = "%{public}s called with null protocol, no backtrace";
    goto LABEL_74;
  }
  v8 = *(_QWORD *)(a2 + 32);
  if (!v8 || (v9 = *(_QWORD *)(v8 + 24)) == 0 || !*(_QWORD *)(v9 + 88))
  {
    v28 = __nwlog_obj();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_http_capsule_framer_get_output_frames";
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v8;
      _os_log_impl(&dword_182FBE000, v28, OS_LOG_TYPE_ERROR, "%{public}s Output handler (%p)'s get_output_frames callback is not properly set", buf, 0x16u);
    }
    return 0;
  }
  if (a3 < 0x40)
  {
    v15 = 1;
LABEL_16:
    if (a4 >> 30)
      v18 = 8;
    else
      v18 = 4;
    if (a4 < 0x4000)
      v18 = 2;
    if (a4 >= 0x40)
      v19 = v18;
    else
      v19 = 1;
    v20 = v19 + v15;
    v21 = __CFADD__(a4, v20);
    v22 = a4 + v20;
    if (v21)
    {
      if (gLogDatapath)
      {
        v37 = __nwlog_obj();
        if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
        {
          if (v22 >= 0x40)
          {
            if (v22 >= 0x4000)
            {
              if (v22 >> 30)
                v38 = 8;
              else
                v38 = 4;
            }
            else
            {
              v38 = 2;
            }
          }
          else
          {
            v38 = 1;
          }
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_http_capsule_framer_get_output_frames";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = "minimum_bytes";
          *(_WORD *)&buf[22] = 2048;
          v48 = (v38 + v15);
          v49 = 2048;
          v50 = v22;
          _os_log_impl(&dword_182FBE000, v37, OS_LOG_TYPE_DEBUG, "%{public}s Overflow: %{public}s, increment %llu, result %llu", buf, 0x2Au);
        }
      }
      v22 = 0xFFFFFFFFLL;
    }
    if (a5 >= 0x4000)
      v23 = 4;
    else
      v23 = 2;
    if (a5 < 0x40)
      v23 = 1;
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    LODWORD(v48) = 0;
    *(_QWORD *)&buf[16] = 0x2000000000;
    LODWORD(v48) = nw_protocol_get_output_frames(v8, a2, v22, v23 + v15 + a5, a6, (uint64_t)a7);
    if (*(_DWORD *)(*(_QWORD *)&buf[8] + 24))
    {
      v39[0] = MEMORY[0x1E0C809B0];
      v39[1] = 0x40000000;
      v40 = (uint64_t (*)(_QWORD *))__nw_http_capsule_framer_get_output_frames_block_invoke;
      v41 = &unk_1E14A3A70;
      v44 = v15;
      v42 = buf;
      v43 = a2;
      v24 = *a7;
      do
      {
        if (!v24)
          break;
        v25 = *(_QWORD *)(v24 + 32);
        v26 = v40(v39);
        v24 = v25;
      }
      while ((v26 & 1) != 0);
      v27 = *(unsigned int *)(*(_QWORD *)&buf[8] + 24);
    }
    else
    {
      v27 = 0;
    }
    _Block_object_dispose(buf, 8);
    return v27;
  }
  if (a3 < 0x4000)
  {
    v15 = 2;
    goto LABEL_16;
  }
  if (!(a3 >> 30))
  {
    v15 = 4;
    goto LABEL_16;
  }
  if (!(a3 >> 62))
  {
    v15 = 8;
    goto LABEL_16;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446466;
  *(_QWORD *)&buf[4] = "_http_vle_length";
  *(_WORD *)&buf[12] = 2048;
  *(_QWORD *)&buf[14] = a3;
  v16 = (void *)_os_log_send_and_compose_impl();
  result = __nwlog_abort((uint64_t)v16);
  if (!result)
  {
    free(v16);
    v15 = 0;
    goto LABEL_16;
  }
  __break(1u);
  return result;
}

uint64_t __nw_http_capsule_framer_get_output_frames_block_invoke(uint64_t a1, _DWORD *a2)
{
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  const char *v13;
  char *backtrace_string;
  _BOOL4 v15;
  char v17;
  os_log_type_t type;
  unsigned int v19;
  uint8_t buf[4];
  const char *v21;
  __int16 v22;
  char *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v19 = 0;
  nw_frame_get_buffer((uint64_t)a2, &v19);
  v4 = *(_DWORD *)(a1 + 48);
  if (v19 >> 30)
    v5 = 8;
  else
    v5 = 4;
  if (v19 >= 0x4000)
    v6 = v5;
  else
    v6 = 2;
  if (v19 >= 0x40)
    v7 = v6;
  else
    v7 = 1;
  v8 = v7 + v4;
  if (v7 + v4 < nw_frame_unclaimed_length(a2))
  {
    nw_frame_claim((uint64_t)a2, v9, v8, 0);
    return 1;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)buf = 136446210;
  v21 = "nw_http_capsule_framer_get_output_frames_block_invoke";
  v10 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v17 = 0;
  if (__nwlog_fault(v10, &type, &v17))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v11 = gLogObj;
      v12 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        *(_DWORD *)buf = 136446210;
        v21 = "nw_http_capsule_framer_get_output_frames_block_invoke";
        v13 = "%{public}s Received frame contains less than minimum unclaimed bytes";
LABEL_25:
        _os_log_impl(&dword_182FBE000, v11, v12, v13, buf, 0xCu);
      }
    }
    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v11 = gLogObj;
      v12 = type;
      v15 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          v21 = "nw_http_capsule_framer_get_output_frames_block_invoke";
          v22 = 2082;
          v23 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s Received frame contains less than minimum unclaimed bytes, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_26;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        v21 = "nw_http_capsule_framer_get_output_frames_block_invoke";
        v13 = "%{public}s Received frame contains less than minimum unclaimed bytes, no backtrace";
        goto LABEL_25;
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v11 = gLogObj;
      v12 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        *(_DWORD *)buf = 136446210;
        v21 = "nw_http_capsule_framer_get_output_frames_block_invoke";
        v13 = "%{public}s Received frame contains less than minimum unclaimed bytes, backtrace limit exceeded";
        goto LABEL_25;
      }
    }
  }
LABEL_26:
  if (v10)
    free(v10);
  nw_frame_finalize((uint64_t)a2);
  --*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return 1;
}

uint64_t nw_http_capsule_framer_finalize_output_frames(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  const char *v14;
  char *backtrace_string;
  _BOOL4 v16;
  char *v17;
  _BOOL4 v18;
  const char *v19;
  _BOOL4 v20;
  _QWORD v21[2];
  BOOL (*v22)(uint64_t, uint64_t);
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  os_log_type_t v28;
  uint8_t buf[4];
  const char *v30;
  __int16 v31;
  char *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v30 = "nw_http_capsule_framer_finalize_output_frames";
    v11 = (char *)_os_log_send_and_compose_impl();
    v28 = OS_LOG_TYPE_ERROR;
    v27 = 0;
    if (!__nwlog_fault(v11, &v28, &v27))
      goto LABEL_52;
    if (v28 == OS_LOG_TYPE_FAULT)
    {
      v12 = __nwlog_obj();
      v13 = v28;
      if (!os_log_type_enabled(v12, v28))
        goto LABEL_52;
      *(_DWORD *)buf = 136446210;
      v30 = "nw_http_capsule_framer_finalize_output_frames";
      v14 = "%{public}s called with null framer";
    }
    else if (v27)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v12 = __nwlog_obj();
      v13 = v28;
      v16 = os_log_type_enabled(v12, v28);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          v30 = "nw_http_capsule_framer_finalize_output_frames";
          v31 = 2082;
          v32 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v12, v13, "%{public}s called with null framer, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_52:
        if (!v11)
          return 0;
LABEL_53:
        free(v11);
        return 0;
      }
      if (!v16)
        goto LABEL_52;
      *(_DWORD *)buf = 136446210;
      v30 = "nw_http_capsule_framer_finalize_output_frames";
      v14 = "%{public}s called with null framer, no backtrace";
    }
    else
    {
      v12 = __nwlog_obj();
      v13 = v28;
      if (!os_log_type_enabled(v12, v28))
        goto LABEL_52;
      *(_DWORD *)buf = 136446210;
      v30 = "nw_http_capsule_framer_finalize_output_frames";
      v14 = "%{public}s called with null framer, backtrace limit exceeded";
    }
    goto LABEL_51;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v30 = "nw_http_capsule_framer_finalize_output_frames";
    v11 = (char *)_os_log_send_and_compose_impl();
    v28 = OS_LOG_TYPE_ERROR;
    v27 = 0;
    if (!__nwlog_fault(v11, &v28, &v27))
      goto LABEL_52;
    if (v28 != OS_LOG_TYPE_FAULT)
    {
      if (!v27)
      {
        v12 = __nwlog_obj();
        v13 = v28;
        if (!os_log_type_enabled(v12, v28))
          goto LABEL_52;
        *(_DWORD *)buf = 136446210;
        v30 = "nw_http_capsule_framer_finalize_output_frames";
        v14 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_51;
      }
      v17 = (char *)__nw_create_backtrace_string();
      v12 = __nwlog_obj();
      v13 = v28;
      v18 = os_log_type_enabled(v12, v28);
      if (!v17)
      {
        if (!v18)
          goto LABEL_52;
        *(_DWORD *)buf = 136446210;
        v30 = "nw_http_capsule_framer_finalize_output_frames";
        v14 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_51;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446466;
        v30 = "nw_http_capsule_framer_finalize_output_frames";
        v31 = 2082;
        v32 = v17;
        v19 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_36:
        _os_log_impl(&dword_182FBE000, v12, v13, v19, buf, 0x16u);
      }
LABEL_37:
      free(v17);
      if (!v11)
        return 0;
      goto LABEL_53;
    }
    v12 = __nwlog_obj();
    v13 = v28;
    if (!os_log_type_enabled(v12, v28))
      goto LABEL_52;
    *(_DWORD *)buf = 136446210;
    v30 = "nw_http_capsule_framer_finalize_output_frames";
    v14 = "%{public}s called with null protocol";
LABEL_51:
    _os_log_impl(&dword_182FBE000, v12, v13, v14, buf, 0xCu);
    goto LABEL_52;
  }
  if (!a4)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v30 = "nw_http_capsule_framer_finalize_output_frames";
    v11 = (char *)_os_log_send_and_compose_impl();
    v28 = OS_LOG_TYPE_ERROR;
    v27 = 0;
    if (!__nwlog_fault(v11, &v28, &v27))
      goto LABEL_52;
    if (v28 == OS_LOG_TYPE_FAULT)
    {
      v12 = __nwlog_obj();
      v13 = v28;
      if (!os_log_type_enabled(v12, v28))
        goto LABEL_52;
      *(_DWORD *)buf = 136446210;
      v30 = "nw_http_capsule_framer_finalize_output_frames";
      v14 = "%{public}s called with null frames";
      goto LABEL_51;
    }
    if (!v27)
    {
      v12 = __nwlog_obj();
      v13 = v28;
      if (!os_log_type_enabled(v12, v28))
        goto LABEL_52;
      *(_DWORD *)buf = 136446210;
      v30 = "nw_http_capsule_framer_finalize_output_frames";
      v14 = "%{public}s called with null frames, backtrace limit exceeded";
      goto LABEL_51;
    }
    v17 = (char *)__nw_create_backtrace_string();
    v12 = __nwlog_obj();
    v13 = v28;
    v20 = os_log_type_enabled(v12, v28);
    if (!v17)
    {
      if (!v20)
        goto LABEL_52;
      *(_DWORD *)buf = 136446210;
      v30 = "nw_http_capsule_framer_finalize_output_frames";
      v14 = "%{public}s called with null frames, no backtrace";
      goto LABEL_51;
    }
    if (v20)
    {
      *(_DWORD *)buf = 136446466;
      v30 = "nw_http_capsule_framer_finalize_output_frames";
      v31 = 2082;
      v32 = v17;
      v19 = "%{public}s called with null frames, dumping backtrace:%{public}s";
      goto LABEL_36;
    }
    goto LABEL_37;
  }
  v5 = *(_QWORD *)(a2 + 32);
  if (!v5)
    return 0;
  v6 = *(_QWORD *)(v5 + 24);
  if (!v6 || !*(_QWORD *)(v6 + 96))
    return 0;
  v21[0] = MEMORY[0x1E0C809B0];
  v21[1] = 0x40000000;
  v22 = __nw_http_capsule_framer_finalize_output_frames_block_invoke;
  v23 = &__block_descriptor_tmp_8_48531;
  v24 = a3;
  v25 = a1;
  v26 = a2;
  v7 = *a4;
  do
  {
    if (!v7)
      break;
    v8 = *(_QWORD *)(v7 + 32);
    v9 = ((uint64_t (*)(_QWORD *))v22)(v21);
    v7 = v8;
  }
  while ((v9 & 1) != 0);
  return nw_protocol_finalize_output_frames(v5, (uint64_t)a4);
}

BOOL __nw_http_capsule_framer_finalize_output_frames_block_invoke(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unsigned int v5;
  int v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  const char *v10;
  char *backtrace_string;
  _BOOL4 v12;
  const char *v13;
  void *v14;
  _BOOL8 result;
  int v16;
  int v17;
  int v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  char *v25;
  _BOOL4 v26;
  void *v27;
  char *v28;
  size_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  _BOOL4 v34;
  os_log_type_t type[15];
  char v36;
  uint8_t buf[4];
  const char *v38;
  __int16 v39;
  unint64_t v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 32);
  if (v4 == 420171067 && (nw_frame_is_metadata_complete(a2) & 1) != 0)
    v4 = 420171068;
  if (!*(_QWORD *)(a1 + 48))
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v38 = "nw_http_capsule_framer_write_capsule_header";
    v7 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    v36 = 0;
    if (!__nwlog_fault(v7, type, &v36))
      goto LABEL_68;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      v8 = __nwlog_obj();
      v9 = type[0];
      if (!os_log_type_enabled(v8, type[0]))
        goto LABEL_68;
      *(_DWORD *)buf = 136446210;
      v38 = "nw_http_capsule_framer_write_capsule_header";
      v10 = "%{public}s called with null protocol";
    }
    else if (v36)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v8 = __nwlog_obj();
      v9 = type[0];
      v12 = os_log_type_enabled(v8, type[0]);
      if (backtrace_string)
      {
        if (!v12)
          goto LABEL_89;
        *(_DWORD *)buf = 136446466;
        v38 = "nw_http_capsule_framer_write_capsule_header";
        v39 = 2082;
        v40 = (unint64_t)backtrace_string;
        v13 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
        goto LABEL_88;
      }
      if (!v12)
        goto LABEL_68;
      *(_DWORD *)buf = 136446210;
      v38 = "nw_http_capsule_framer_write_capsule_header";
      v10 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      v8 = __nwlog_obj();
      v9 = type[0];
      if (!os_log_type_enabled(v8, type[0]))
        goto LABEL_68;
      *(_DWORD *)buf = 136446210;
      v38 = "nw_http_capsule_framer_write_capsule_header";
      v10 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
LABEL_67:
    _os_log_impl(&dword_182FBE000, v8, v9, v10, buf, 0xCu);
    goto LABEL_68;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v38 = "nw_http_capsule_framer_write_capsule_header";
    v7 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    v36 = 0;
    if (!__nwlog_fault(v7, type, &v36))
      goto LABEL_68;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      v8 = __nwlog_obj();
      v9 = type[0];
      if (!os_log_type_enabled(v8, type[0]))
        goto LABEL_68;
      *(_DWORD *)buf = 136446210;
      v38 = "nw_http_capsule_framer_write_capsule_header";
      v10 = "%{public}s called with null frame";
      goto LABEL_67;
    }
    if (v36)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v8 = __nwlog_obj();
      v9 = type[0];
      v34 = os_log_type_enabled(v8, type[0]);
      if (backtrace_string)
      {
        if (!v34)
          goto LABEL_89;
        *(_DWORD *)buf = 136446466;
        v38 = "nw_http_capsule_framer_write_capsule_header";
        v39 = 2082;
        v40 = (unint64_t)backtrace_string;
        v13 = "%{public}s called with null frame, dumping backtrace:%{public}s";
LABEL_88:
        _os_log_impl(&dword_182FBE000, v8, v9, v13, buf, 0x16u);
LABEL_89:
        free(backtrace_string);
        if (!v7)
          return 1;
        goto LABEL_69;
      }
      if (!v34)
        goto LABEL_68;
      *(_DWORD *)buf = 136446210;
      v38 = "nw_http_capsule_framer_write_capsule_header";
      v10 = "%{public}s called with null frame, no backtrace";
    }
    else
    {
      v8 = __nwlog_obj();
      v9 = type[0];
      if (!os_log_type_enabled(v8, type[0]))
        goto LABEL_68;
      *(_DWORD *)buf = 136446210;
      v38 = "nw_http_capsule_framer_write_capsule_header";
      v10 = "%{public}s called with null frame, backtrace limit exceeded";
    }
    goto LABEL_67;
  }
  if ((*(_WORD *)(a2 + 204) & 0x100) != 0
    && g_channel_check_validity
    && !g_channel_check_validity(a2, *(_QWORD *)(a2 + 88)))
  {
    v5 = 0;
    if (v4 < 0x40)
      goto LABEL_10;
LABEL_24:
    if (v4 >= 0x4000)
    {
      if (v4 >> 30)
      {
        if (v4 >> 62)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
          *(_DWORD *)buf = 136446466;
          v38 = "_http_vle_length";
          v39 = 2048;
          v40 = v4;
          v14 = (void *)_os_log_send_and_compose_impl();
          result = __nwlog_abort((uint64_t)v14);
          if (result)
            goto LABEL_99;
          free(v14);
          v6 = 0;
        }
        else
        {
          v6 = 8;
        }
      }
      else
      {
        v6 = 4;
      }
    }
    else
    {
      v6 = 2;
    }
    goto LABEL_32;
  }
  v5 = *(_DWORD *)(a2 + 48);
  if (v4 >= 0x40)
    goto LABEL_24;
LABEL_10:
  v6 = 1;
LABEL_32:
  if (v5 >> 30)
    v16 = 8;
  else
    v16 = 4;
  if (v5 >= 0x4000)
    v17 = v16;
  else
    v17 = 2;
  if (v5 >= 0x40)
    v18 = v17;
  else
    v18 = 1;
  v19 = v18 + v6;
  nw_frame_unclaim(a2, a2, v18 + v6, 0);
  if (!*(_QWORD *)(a2 + 112)
    || (*(_WORD *)(a2 + 204) & 0x100) != 0
    && g_channel_check_validity
    && !g_channel_check_validity(a2, *(_QWORD *)(a2 + 88)))
  {
    goto LABEL_50;
  }
  v20 = *(_DWORD *)(a2 + 52);
  v21 = *(unsigned int *)(a2 + 56);
  if (!v20)
  {
    v22 = 0;
    v23 = *(_QWORD *)(a2 + 112);
    if (v23)
      goto LABEL_47;
    goto LABEL_50;
  }
  v22 = v20 - (v21 + *(_DWORD *)(a2 + 60));
  v23 = *(_QWORD *)(a2 + 112);
  if (!v23)
  {
LABEL_50:
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446210;
    v38 = "nw_http_capsule_framer_write_capsule_header";
    v7 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    v36 = 0;
    if (!__nwlog_fault(v7, type, &v36))
      goto LABEL_68;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v8 = gLogObj;
      v9 = type[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, type[0]))
        goto LABEL_68;
      *(_DWORD *)buf = 136446210;
      v38 = "nw_http_capsule_framer_write_capsule_header";
      v10 = "%{public}s Unable to fillout capsule header because nw_frame_unclaimed_bytes() returned NULL";
      goto LABEL_67;
    }
    if (!v36)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v8 = gLogObj;
      v9 = type[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, type[0]))
        goto LABEL_68;
      *(_DWORD *)buf = 136446210;
      v38 = "nw_http_capsule_framer_write_capsule_header";
      v10 = "%{public}s Unable to fillout capsule header because nw_frame_unclaimed_bytes() returned NULL, backtrace limit exceeded";
      goto LABEL_67;
    }
    v25 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v8 = gLogObj;
    v9 = type[0];
    v26 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
    if (!v25)
    {
      if (!v26)
        goto LABEL_68;
      *(_DWORD *)buf = 136446210;
      v38 = "nw_http_capsule_framer_write_capsule_header";
      v10 = "%{public}s Unable to fillout capsule header because nw_frame_unclaimed_bytes() returned NULL, no backtrace";
      goto LABEL_67;
    }
    if (v26)
    {
      *(_DWORD *)buf = 136446466;
      v38 = "nw_http_capsule_framer_write_capsule_header";
      v39 = 2082;
      v40 = (unint64_t)v25;
      _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s Unable to fillout capsule header because nw_frame_unclaimed_bytes() returned NULL, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v25);
LABEL_68:
    if (!v7)
      return 1;
LABEL_69:
    free(v7);
    return 1;
  }
LABEL_47:
  *(_QWORD *)type = 0;
  if (v4 <= 0x3F)
  {
    *(_QWORD *)type = v4;
    v24 = 1;
LABEL_74:
    v28 = (char *)(v23 + v21);
    v29 = v22 - v19;
    v30 = v24;
    memcpy(v28, type, v24);
    if (v29 > 0x3F)
    {
      if (v29 >> 14)
      {
        if (v29 >> 30)
        {
          *(_QWORD *)type = bswap64(v29 | 0xC000000000000000);
          v31 = 8;
        }
        else
        {
          *(_QWORD *)type = bswap32(v29 | 0x80000000);
          v31 = 4;
        }
      }
      else
      {
        *(_QWORD *)type = bswap32(v29 | 0x4000) >> 16;
        v31 = 2;
      }
    }
    else
    {
      *(_QWORD *)type = v22 - v19;
      v31 = 1;
    }
    memcpy(&v28[v30], type, v31);
    v32 = v31 + v30;
    if (v32 < v19)
    {
      memmove(&v28[v32], &v28[v19], v29);
      nw_frame_claim(a2, v33, 0, v19 - v32);
    }
    return 1;
  }
  if (!(v4 >> 14))
  {
    *(_QWORD *)type = bswap32(v4 | 0x4000) >> 16;
    v24 = 2;
    goto LABEL_74;
  }
  if (!(v4 >> 30))
  {
    *(_QWORD *)type = bswap32(v4 | 0x80000000);
    v24 = 4;
    goto LABEL_74;
  }
  if (!(v4 >> 62))
  {
    *(_QWORD *)type = bswap64(v4 | 0xC000000000000000);
    v24 = 8;
    goto LABEL_74;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446466;
  v38 = "_http_vle_encode";
  v39 = 2048;
  v40 = v4;
  v27 = (void *)_os_log_send_and_compose_impl();
  result = __nwlog_abort((uint64_t)v27);
  if (!result)
  {
    free(v27);
    v24 = 0;
    goto LABEL_74;
  }
LABEL_99:
  __break(1u);
  return result;
}

uint64_t nw_http_capsule_framer_parse_vle_value(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  _QWORD v8[2];
  uint64_t (*v9)(_QWORD *);
  void *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  char v20;
  _QWORD v21[3];
  char v22;
  _QWORD v23[4];
  _QWORD v24[2];

  v24[1] = *MEMORY[0x1E0C80C00];
  v23[0] = 0;
  v23[1] = v23;
  v23[2] = 0x2000000000;
  v23[3] = v24;
  v24[0] = 0;
  v21[0] = 0;
  v21[1] = v21;
  v21[2] = 0x2000000000;
  v22 = 0;
  v17 = 0;
  v18 = &v17;
  v19 = 0x2000000000;
  v20 = 0;
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 0x40000000;
  v9 = (uint64_t (*)(_QWORD *))__nw_http_capsule_framer_parse_vle_value_block_invoke;
  v10 = &unk_1E14A3AB8;
  v11 = v21;
  v12 = v23;
  v13 = &v17;
  v14 = a3;
  v15 = a2;
  v16 = a1;
  v3 = *(_QWORD *)(a1 + 16);
  do
  {
    if (!v3)
      break;
    v4 = *(_QWORD *)(v3 + 32);
    v5 = v9(v8);
    v3 = v4;
  }
  while ((v5 & 1) != 0);
  v6 = *((unsigned __int8 *)v18 + 24);
  _Block_object_dispose(&v17, 8);
  _Block_object_dispose(v21, 8);
  _Block_object_dispose(v23, 8);
  return v6;
}

BOOL __nw_http_capsule_framer_parse_vle_value_block_invoke(_QWORD *a1, uint64_t a2)
{
  const void *v4;
  uint64_t v5;
  size_t v6;
  uint64_t v7;
  _DWORD *v8;
  unint64_t *v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  int v13;
  uint64_t v15;
  _QWORD *v16;
  unsigned int v17;
  char *v18;
  NSObject *v19;
  os_log_type_t v20;
  const char *v21;
  char *backtrace_string;
  _BOOL4 v23;
  char *v24;
  _BOOL4 v25;
  unsigned int v26;
  char v27;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v30;
  __int16 v31;
  char *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v26 = 0;
  v4 = (const void *)nw_frame_unclaimed_bytes(a2, &v26);
  if (!v4)
    goto LABEL_11;
  v5 = *(unsigned __int8 *)(*(_QWORD *)(a1[4] + 8) + 24);
  if (8 - v5 <= (unint64_t)v26)
    v6 = (8 - v5);
  else
    v6 = v26;
  memcpy(*(void **)(*(_QWORD *)(a1[5] + 8) + 24), v4, v6);
  *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) += v6;
  v8 = *(_DWORD **)(*(_QWORD *)(a1[5] + 8) + 24);
  if (!v8)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v30 = "_http_vle_decode";
    v18 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v27 = 0;
    if (!__nwlog_fault(v18, &type, &v27))
      goto LABEL_53;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v19 = __nwlog_obj();
      v20 = type;
      if (!os_log_type_enabled(v19, type))
        goto LABEL_53;
      *(_DWORD *)buf = 136446210;
      v30 = "_http_vle_decode";
      v21 = "%{public}s called with null *buffer";
      goto LABEL_52;
    }
    if (!v27)
    {
      v19 = __nwlog_obj();
      v20 = type;
      if (!os_log_type_enabled(v19, type))
        goto LABEL_53;
      *(_DWORD *)buf = 136446210;
      v30 = "_http_vle_decode";
      v21 = "%{public}s called with null *buffer, backtrace limit exceeded";
      goto LABEL_52;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v19 = __nwlog_obj();
    v20 = type;
    v23 = os_log_type_enabled(v19, type);
    if (!backtrace_string)
    {
      if (!v23)
        goto LABEL_53;
      *(_DWORD *)buf = 136446210;
      v30 = "_http_vle_decode";
      v21 = "%{public}s called with null *buffer, no backtrace";
      goto LABEL_52;
    }
    if (v23)
    {
      *(_DWORD *)buf = 136446466;
      v30 = "_http_vle_decode";
      v31 = 2082;
      v32 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v19, v20, "%{public}s called with null *buffer, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(backtrace_string);
LABEL_53:
    if (!v18)
      goto LABEL_11;
    goto LABEL_54;
  }
  v9 = (unint64_t *)a1[7];
  if (!v9)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v30 = "_http_vle_decode";
    v18 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v27 = 0;
    if (!__nwlog_fault(v18, &type, &v27))
      goto LABEL_53;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v19 = __nwlog_obj();
      v20 = type;
      if (!os_log_type_enabled(v19, type))
        goto LABEL_53;
      *(_DWORD *)buf = 136446210;
      v30 = "_http_vle_decode";
      v21 = "%{public}s called with null decoded_val";
      goto LABEL_52;
    }
    if (!v27)
    {
      v19 = __nwlog_obj();
      v20 = type;
      if (!os_log_type_enabled(v19, type))
        goto LABEL_53;
      *(_DWORD *)buf = 136446210;
      v30 = "_http_vle_decode";
      v21 = "%{public}s called with null decoded_val, backtrace limit exceeded";
      goto LABEL_52;
    }
    v24 = (char *)__nw_create_backtrace_string();
    v19 = __nwlog_obj();
    v20 = type;
    v25 = os_log_type_enabled(v19, type);
    if (v24)
    {
      if (v25)
      {
        *(_DWORD *)buf = 136446466;
        v30 = "_http_vle_decode";
        v31 = 2082;
        v32 = v24;
        _os_log_impl(&dword_182FBE000, v19, v20, "%{public}s called with null decoded_val, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v24);
      if (!v18)
        goto LABEL_11;
LABEL_54:
      free(v18);
      goto LABEL_11;
    }
    if (v25)
    {
      *(_DWORD *)buf = 136446210;
      v30 = "_http_vle_decode";
      v21 = "%{public}s called with null decoded_val, no backtrace";
LABEL_52:
      _os_log_impl(&dword_182FBE000, v19, v20, v21, buf, 0xCu);
      goto LABEL_53;
    }
    goto LABEL_53;
  }
  v10 = *(_QWORD *)(a1[4] + 8);
  v11 = *(unsigned __int8 *)(v10 + 24);
  if (!*(_BYTE *)(v10 + 24))
    goto LABEL_11;
  v12 = *(unsigned __int8 *)v8;
  if (v12 <= 0x3F)
  {
    v13 = 1;
LABEL_10:
    *v9 = v12;
    *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) = 1;
    nw_frame_claim(a2, v7, v13 - v5, 0);
    goto LABEL_11;
  }
  v17 = v12 >> 6;
  if (v17 == 2)
  {
    if (v11 >= 4)
    {
      v12 = bswap32(*v8 & 0xFFFFFF7F);
      v13 = 4;
      goto LABEL_10;
    }
  }
  else if (v17 == 1)
  {
    if (v11 >= 2)
    {
      v12 = bswap32(*(_WORD *)v8 & 0xFFBF) >> 16;
      v13 = 2;
      goto LABEL_10;
    }
  }
  else if (v11 >= 8)
  {
    v12 = bswap64(*(_QWORD *)v8 & 0xFFFFFFFFFFFFFF3FLL);
    v13 = 8;
    goto LABEL_10;
  }
LABEL_11:
  if (*(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24))
    return 0;
  v15 = *(_QWORD *)(a2 + 32);
  v16 = *(_QWORD **)(a2 + 40);
  if (v15)
  {
    *(_QWORD *)(v15 + 40) = v16;
    v16 = *(_QWORD **)(a2 + 40);
  }
  else
  {
    *(_QWORD *)(a1[9] + 24) = v16;
  }
  *v16 = v15;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  nw_frame_finalize(a2);
  return *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) == 0;
}

void sub_1838632F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, objc_super a14)
{
  a14.super_class = (Class)NWConcrete_nw_unique_connection_request;
  -[_Unwind_Exception dealloc](&a14, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_183863700(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

char *nw_service_connector_copy_connection_description(NWConcrete_nw_connection *a1)
{
  NWConcrete_nw_connection *v1;
  char *v2;
  NSObject *v3;
  NSObject *v4;
  nw_endpoint_t v5;
  nw_endpoint_t v6;
  const char *logging_description;
  char *v9;

  v1 = a1;
  v2 = nw_connection_copy_description(&v1->super);
  if (v2)
  {
    v3 = nw_connection_copy_current_path(&v1->super);
    v4 = v3;
    if (v3)
    {
      v5 = nw_path_copy_effective_local_endpoint(v3);
      v6 = v5;
      if (v5)
      {
        logging_description = nw_endpoint_get_logging_description(v5);
        if (logging_description)
        {
          v9 = 0;
          asprintf(&v9, "%s local %s", v2, logging_description);
          free(v2);
          v2 = v9;
        }
      }
    }
    else
    {
      v6 = 0;
    }

  }
  else
  {
    v6 = 0;
  }

  return v2;
}

void sub_183863820(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_183863E54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, objc_super a14)
{
  a14.super_class = (Class)NWConcrete_nw_unique_connection;
  -[_Unwind_Exception dealloc](&a14, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1838641FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_183864554(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)NWConcrete_nw_service_connector;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

id nw_service_connector_create(int a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  NWConcrete_nw_service_connector *v8;
  NWConcrete_nw_service_connector *v9;
  unint64_t v10;
  id v11;
  _BOOL8 v12;
  OS_nw_parameters *clientParameters;
  id v14;
  char *v15;
  NSObject *v16;
  os_log_type_t v17;
  _BOOL8 v18;
  OS_nw_array *pendingUnverifiedIncomingRequests;
  OS_nw_dictionary *v20;
  OS_nw_dictionary *pendingIncomingRequests;
  OS_nw_dictionary *v22;
  OS_nw_dictionary *activeConnections;
  OS_nw_dictionary *v24;
  OS_nw_dictionary *activeOutgoingRequests;
  OS_xpc_object *v26;
  OS_xpc_object *remotePubKeys;
  NWConcrete_nw_service_connector *v28;
  SecAccessControlRef v29;
  SecAccessControlRef v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  const __CFDictionary *v36;
  SecKeyRef v37;
  int v38;
  id v39;
  os_log_type_t v40;
  char *v41;
  os_log_type_t v42;
  _BOOL4 v43;
  id v44;
  os_log_type_t v45;
  os_log_type_t v46;
  _BOOL4 v47;
  id v48;
  os_log_type_t v49;
  const char *backtrace_string;
  char *v51;
  NSObject *v52;
  os_log_type_t v53;
  os_log_type_t v54;
  id v55;
  os_log_type_t v56;
  os_log_type_t v57;
  _BOOL4 v58;
  os_log_type_t v59;
  os_log_type_t v60;
  _BOOL4 v61;
  os_log_type_t v62;
  os_log_type_t v63;
  os_log_type_t v64;
  os_log_type_t v65;
  void *v67;
  char *v68;
  NSObject *v69;
  os_log_type_t v70;
  void *v71;
  os_log_type_t v72;
  char *v73;
  os_log_type_t v74;
  _BOOL4 v75;
  char *v76;
  os_log_type_t v77;
  _BOOL4 v78;
  os_log_type_t v79;
  os_log_type_t v80;
  NSObject *v81;
  NSObject *v82;
  __SecKey *localPrivKey;
  CFErrorRef error;
  _BYTE buf[24];
  _QWORD v86[2];
  _QWORD v87[2];
  os_log_type_t type[8];
  uint64_t v89;
  uint64_t v90;
  uint8_t v91[4];
  const char *v92;
  __int16 v93;
  CFErrorRef v94;
  uint64_t v95;

  v95 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (a1)
  {
    if (v6)
    {
      v8 = objc_alloc_init(NWConcrete_nw_service_connector);
      v9 = v8;
      if (v8)
      {
        do
          v10 = __ldaxr(&nw_service_connector_create::sNWSCUniqueID);
        while (__stlxr(v10 + 1, &nw_service_connector_create::sNWSCUniqueID));
        v8->uniqueID = v10;
        v8->state = 1;
        v8->localPortHBO = a1;
        objc_storeStrong((id *)&v8->serviceConnectorQueue, a3);
        if (v5)
        {
          v11 = v5;
          v12 = -[NWConcrete_nw_parameters initWithParameters:stripConnected:shallowCopy:]((id *)[NWConcrete_nw_parameters alloc], v11, 0, 0);

          clientParameters = v9->clientParameters;
          v9->clientParameters = (OS_nw_parameters *)v12;
        }
        else
        {
          clientParameters = v9->clientParameters;
          v9->clientParameters = 0;
        }

        v18 = nw_array_create();
        pendingUnverifiedIncomingRequests = v9->pendingUnverifiedIncomingRequests;
        v9->pendingUnverifiedIncomingRequests = (OS_nw_array *)v18;

        v20 = (OS_nw_dictionary *)nw_dictionary_create();
        pendingIncomingRequests = v9->pendingIncomingRequests;
        v9->pendingIncomingRequests = v20;

        if (v9->pendingIncomingRequests)
        {
          v22 = (OS_nw_dictionary *)nw_dictionary_create();
          activeConnections = v9->activeConnections;
          v9->activeConnections = v22;

          if (!v9->activeConnections)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v44 = (id)gLogObj;
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_service_connector_create";
            v15 = (char *)_os_log_send_and_compose_impl();

            type[0] = OS_LOG_TYPE_ERROR;
            v91[0] = 0;
            if (!__nwlog_fault(v15, type, v91))
              goto LABEL_97;
            if (type[0] == OS_LOG_TYPE_FAULT)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v16 = (id)gLogObj;
              v45 = type[0];
              if (os_log_type_enabled(v16, type[0]))
              {
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_service_connector_create";
                _os_log_impl(&dword_182FBE000, v16, v45, "%{public}s nw_dictionary_create failed", buf, 0xCu);
              }
            }
            else if (v91[0])
            {
              backtrace_string = __nw_create_backtrace_string();
              if (backtrace_string)
              {
                v51 = (char *)backtrace_string;
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                v52 = (id)gLogObj;
                v53 = type[0];
                if (os_log_type_enabled(v52, type[0]))
                {
                  *(_DWORD *)buf = 136446466;
                  *(_QWORD *)&buf[4] = "nw_service_connector_create";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = v51;
                  _os_log_impl(&dword_182FBE000, v52, v53, "%{public}s nw_dictionary_create failed, dumping backtrace:%{public}s", buf, 0x16u);
                }

                free(v51);
                if (!v15)
                  goto LABEL_99;
                goto LABEL_98;
              }
              __nwlog_obj();
              v16 = objc_claimAutoreleasedReturnValue();
              v63 = type[0];
              if (os_log_type_enabled(v16, type[0]))
              {
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_service_connector_create";
                _os_log_impl(&dword_182FBE000, v16, v63, "%{public}s nw_dictionary_create failed, no backtrace", buf, 0xCu);
              }
            }
            else
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v16 = (id)gLogObj;
              v62 = type[0];
              if (os_log_type_enabled(v16, type[0]))
              {
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_service_connector_create";
                _os_log_impl(&dword_182FBE000, v16, v62, "%{public}s nw_dictionary_create failed, backtrace limit exceeded", buf, 0xCu);
              }
            }
            goto LABEL_96;
          }
          v24 = (OS_nw_dictionary *)nw_dictionary_create();
          activeOutgoingRequests = v9->activeOutgoingRequests;
          v9->activeOutgoingRequests = v24;

          if (v9->activeOutgoingRequests)
          {
            v26 = (OS_xpc_object *)xpc_dictionary_create(0, 0, 0);
            remotePubKeys = v9->remotePubKeys;
            v9->remotePubKeys = v26;

            if (v9->remotePubKeys)
            {
              v28 = v9;
              error = 0;
              v29 = SecAccessControlCreateWithFlags((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (CFTypeRef)*MEMORY[0x1E0CD68D8], 0x40000000uLL, &error);
              v30 = v29;
              if (v29)
              {
                v31 = *MEMORY[0x1E0CD6A60];
                v32 = *MEMORY[0x1E0CD6B98];
                *(_QWORD *)type = *MEMORY[0x1E0CD6A38];
                v89 = v32;
                v33 = *MEMORY[0x1E0CD6BA0];
                *(_QWORD *)buf = v31;
                *(_QWORD *)&buf[8] = v33;
                v90 = *MEMORY[0x1E0CD6FC0];
                v34 = *MEMORY[0x1E0CD6890];
                v86[0] = *MEMORY[0x1E0CD69D8];
                v86[1] = v34;
                v87[0] = MEMORY[0x1E0C9AAA0];
                v87[1] = v29;
                objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v87, v86, 2);
                v35 = (void *)objc_claimAutoreleasedReturnValue();
                *(_QWORD *)&buf[16] = v35;
                objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", buf, type, 3);
                v36 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();

                CFRelease(v30);
                v37 = SecKeyCreateRandomKey(v36, &error);
                v28->localPrivKey = v37;
                if (v37)
                {
                  v38 = SecKeyCopyPublicBytes();
                  __nwlog_obj();
                  v82 = objc_claimAutoreleasedReturnValue();
                  if (os_log_type_enabled(v82, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)v91 = 136446466;
                    v92 = "nwsc_generate_keys";
                    v93 = 1024;
                    LODWORD(v94) = v38;
                    _os_log_impl(&dword_182FBE000, v82, OS_LOG_TYPE_ERROR, "%{public}s SecKeyCopyPublicBytes failed with error %d", v91, 0x12u);
                  }

                  localPrivKey = v28->localPrivKey;
                  if (localPrivKey)
                  {
                    CFRelease(localPrivKey);
                    v28->localPrivKey = 0;
                  }
                }
                else
                {
                  __nwlog_obj();
                  v81 = objc_claimAutoreleasedReturnValue();
                  if (os_log_type_enabled(v81, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)v91 = 136446466;
                    v92 = "nwsc_generate_keys";
                    v93 = 2112;
                    v94 = error;
                    _os_log_impl(&dword_182FBE000, v81, OS_LOG_TYPE_ERROR, "%{public}s SecKeyCreateRandomKey failed with error %@", v91, 0x16u);
                  }

                }
              }
              else
              {
                __nwlog_obj();
                v36 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled((os_log_t)v36, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)v91 = 136446466;
                  v92 = "nwsc_generate_keys";
                  v93 = 2112;
                  v94 = error;
                  _os_log_impl(&dword_182FBE000, (os_log_t)v36, OS_LOG_TYPE_ERROR, "%{public}s SecAccessControlCreateWithFlags failed with error %@", v91, 0x16u);
                }
              }

              goto LABEL_99;
            }
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v55 = (id)gLogObj;
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_service_connector_create";
            v15 = (char *)_os_log_send_and_compose_impl();

            type[0] = OS_LOG_TYPE_ERROR;
            v91[0] = 0;
            if (!__nwlog_fault(v15, type, v91))
            {
LABEL_97:
              if (!v15)
              {
LABEL_99:

                goto LABEL_100;
              }
LABEL_98:
              free(v15);
              goto LABEL_99;
            }
            if (type[0] == OS_LOG_TYPE_FAULT)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v16 = (id)gLogObj;
              v56 = type[0];
              if (os_log_type_enabled(v16, type[0]))
              {
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_service_connector_create";
                _os_log_impl(&dword_182FBE000, v16, v56, "%{public}s xpc_dictionary_create failed", buf, 0xCu);
              }
LABEL_96:

              goto LABEL_97;
            }
            if (!v91[0])
            {
              __nwlog_obj();
              v16 = objc_claimAutoreleasedReturnValue();
              v65 = type[0];
              if (os_log_type_enabled(v16, type[0]))
              {
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_service_connector_create";
                _os_log_impl(&dword_182FBE000, v16, v65, "%{public}s xpc_dictionary_create failed, backtrace limit exceeded", buf, 0xCu);
              }
              goto LABEL_96;
            }
            v41 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            v16 = objc_claimAutoreleasedReturnValue();
            v60 = type[0];
            v61 = os_log_type_enabled(v16, type[0]);
            if (!v41)
            {
              if (v61)
              {
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_service_connector_create";
                _os_log_impl(&dword_182FBE000, v16, v60, "%{public}s xpc_dictionary_create failed, no backtrace", buf, 0xCu);
              }
              goto LABEL_96;
            }
            if (v61)
            {
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "nw_service_connector_create";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v41;
              _os_log_impl(&dword_182FBE000, v16, v60, "%{public}s xpc_dictionary_create failed, dumping backtrace:%{public}s", buf, 0x16u);
            }
          }
          else
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v48 = (id)gLogObj;
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_service_connector_create";
            v15 = (char *)_os_log_send_and_compose_impl();

            type[0] = OS_LOG_TYPE_ERROR;
            v91[0] = 0;
            if (!__nwlog_fault(v15, type, v91))
              goto LABEL_97;
            if (type[0] == OS_LOG_TYPE_FAULT)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v16 = (id)gLogObj;
              v49 = type[0];
              if (os_log_type_enabled(v16, type[0]))
              {
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_service_connector_create";
                _os_log_impl(&dword_182FBE000, v16, v49, "%{public}s nw_dictionary_create failed", buf, 0xCu);
              }
              goto LABEL_96;
            }
            if (!v91[0])
            {
              __nwlog_obj();
              v16 = objc_claimAutoreleasedReturnValue();
              v64 = type[0];
              if (os_log_type_enabled(v16, type[0]))
              {
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_service_connector_create";
                _os_log_impl(&dword_182FBE000, v16, v64, "%{public}s nw_dictionary_create failed, backtrace limit exceeded", buf, 0xCu);
              }
              goto LABEL_96;
            }
            v41 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            v16 = objc_claimAutoreleasedReturnValue();
            v57 = type[0];
            v58 = os_log_type_enabled(v16, type[0]);
            if (!v41)
            {
              if (v58)
              {
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_service_connector_create";
                _os_log_impl(&dword_182FBE000, v16, v57, "%{public}s nw_dictionary_create failed, no backtrace", buf, 0xCu);
              }
              goto LABEL_96;
            }
            if (v58)
            {
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "nw_service_connector_create";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v41;
              _os_log_impl(&dword_182FBE000, v16, v57, "%{public}s nw_dictionary_create failed, dumping backtrace:%{public}s", buf, 0x16u);
            }
          }
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v39 = (id)gLogObj;
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_service_connector_create";
          v15 = (char *)_os_log_send_and_compose_impl();

          type[0] = OS_LOG_TYPE_ERROR;
          v91[0] = 0;
          if (!__nwlog_fault(v15, type, v91))
            goto LABEL_97;
          if (type[0] == OS_LOG_TYPE_FAULT)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v16 = (id)gLogObj;
            v40 = type[0];
            if (os_log_type_enabled(v16, type[0]))
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_service_connector_create";
              _os_log_impl(&dword_182FBE000, v16, v40, "%{public}s nw_dictionary_create failed", buf, 0xCu);
            }
            goto LABEL_96;
          }
          if (!v91[0])
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v16 = (id)gLogObj;
            v59 = type[0];
            if (os_log_type_enabled(v16, type[0]))
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_service_connector_create";
              _os_log_impl(&dword_182FBE000, v16, v59, "%{public}s nw_dictionary_create failed, backtrace limit exceeded", buf, 0xCu);
            }
            goto LABEL_96;
          }
          v41 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v16 = (id)gLogObj;
          v46 = type[0];
          v47 = os_log_type_enabled(v16, type[0]);
          if (!v41)
          {
            if (v47)
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_service_connector_create";
              _os_log_impl(&dword_182FBE000, v16, v46, "%{public}s nw_dictionary_create failed, no backtrace", buf, 0xCu);
            }
            goto LABEL_96;
          }
          if (v47)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_service_connector_create";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v41;
            _os_log_impl(&dword_182FBE000, v16, v46, "%{public}s nw_dictionary_create failed, dumping backtrace:%{public}s", buf, 0x16u);
          }
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v14 = (id)gLogObj;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_service_connector_create";
        v15 = (char *)_os_log_send_and_compose_impl();

        type[0] = OS_LOG_TYPE_ERROR;
        v91[0] = 0;
        if (!__nwlog_fault(v15, type, v91))
          goto LABEL_97;
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v16 = (id)gLogObj;
          v17 = type[0];
          if (os_log_type_enabled(v16, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_service_connector_create";
            _os_log_impl(&dword_182FBE000, v16, v17, "%{public}s [nw_service_connector_t init:] failed", buf, 0xCu);
          }
          goto LABEL_96;
        }
        if (!v91[0])
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v16 = (id)gLogObj;
          v54 = type[0];
          if (os_log_type_enabled(v16, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_service_connector_create";
            _os_log_impl(&dword_182FBE000, v16, v54, "%{public}s [nw_service_connector_t init:] failed, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_96;
        }
        v41 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v16 = (id)gLogObj;
        v42 = type[0];
        v43 = os_log_type_enabled(v16, type[0]);
        if (!v41)
        {
          if (v43)
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_service_connector_create";
            _os_log_impl(&dword_182FBE000, v16, v42, "%{public}s [nw_service_connector_t init:] failed, no backtrace", buf, 0xCu);
          }
          goto LABEL_96;
        }
        if (v43)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_service_connector_create";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v41;
          _os_log_impl(&dword_182FBE000, v16, v42, "%{public}s [nw_service_connector_t init:] failed, dumping backtrace:%{public}s", buf, 0x16u);
        }
      }

      free(v41);
      if (!v15)
        goto LABEL_99;
      goto LABEL_98;
    }
    __nwlog_obj();
    v71 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_service_connector_create";
    v68 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    v91[0] = 0;
    if (!__nwlog_fault(v68, type, v91))
      goto LABEL_134;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v69 = objc_claimAutoreleasedReturnValue();
      v72 = type[0];
      if (os_log_type_enabled(v69, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_service_connector_create";
        _os_log_impl(&dword_182FBE000, v69, v72, "%{public}s called with null queue", buf, 0xCu);
      }
    }
    else if (v91[0])
    {
      v76 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v69 = objc_claimAutoreleasedReturnValue();
      v77 = type[0];
      v78 = os_log_type_enabled(v69, type[0]);
      if (v76)
      {
        if (v78)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_service_connector_create";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v76;
          _os_log_impl(&dword_182FBE000, v69, v77, "%{public}s called with null queue, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v76);
LABEL_134:
        if (!v68)
          goto LABEL_100;
LABEL_135:
        free(v68);
        goto LABEL_100;
      }
      if (v78)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_service_connector_create";
        _os_log_impl(&dword_182FBE000, v69, v77, "%{public}s called with null queue, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v69 = objc_claimAutoreleasedReturnValue();
      v80 = type[0];
      if (os_log_type_enabled(v69, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_service_connector_create";
        _os_log_impl(&dword_182FBE000, v69, v80, "%{public}s called with null queue, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_133:

    goto LABEL_134;
  }
  __nwlog_obj();
  v67 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_service_connector_create";
  v68 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  v91[0] = 0;
  if (!__nwlog_fault(v68, type, v91))
    goto LABEL_134;
  if (type[0] == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v69 = objc_claimAutoreleasedReturnValue();
    v70 = type[0];
    if (os_log_type_enabled(v69, type[0]))
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_service_connector_create";
      _os_log_impl(&dword_182FBE000, v69, v70, "%{public}s called with null (localPort != 0)", buf, 0xCu);
    }
    goto LABEL_133;
  }
  if (!v91[0])
  {
    __nwlog_obj();
    v69 = objc_claimAutoreleasedReturnValue();
    v79 = type[0];
    if (os_log_type_enabled(v69, type[0]))
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_service_connector_create";
      _os_log_impl(&dword_182FBE000, v69, v79, "%{public}s called with null (localPort != 0), backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_133;
  }
  v73 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v69 = objc_claimAutoreleasedReturnValue();
  v74 = type[0];
  v75 = os_log_type_enabled(v69, type[0]);
  if (!v73)
  {
    if (v75)
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_service_connector_create";
      _os_log_impl(&dword_182FBE000, v69, v74, "%{public}s called with null (localPort != 0), no backtrace", buf, 0xCu);
    }
    goto LABEL_133;
  }
  if (v75)
  {
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "nw_service_connector_create";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v73;
    _os_log_impl(&dword_182FBE000, v69, v74, "%{public}s called with null (localPort != 0), dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v73);
  if (v68)
    goto LABEL_135;
LABEL_100:

  return 0;
}

void sub_183865D6C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void nw_service_connector_set_service_available_block(void *a1, void *a2)
{
  _QWORD *v3;
  id v4;
  void *v5;
  NSObject *v6;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  void *v11;
  os_log_type_t v12;
  char *backtrace_string;
  os_log_type_t v14;
  _BOOL4 v15;
  char *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  os_log_type_t v19;
  os_log_type_t v20;
  _QWORD block[4];
  _QWORD *v22;
  id v23;
  char v24;
  os_log_type_t v25;
  uint8_t buf[4];
  const char *v27;
  __int16 v28;
  char *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v27 = "nw_service_connector_set_service_available_block";
    v8 = (char *)_os_log_send_and_compose_impl();

    v25 = OS_LOG_TYPE_ERROR;
    v24 = 0;
    if (!__nwlog_fault(v8, &v25, &v24))
      goto LABEL_38;
    if (v25 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = v25;
      if (os_log_type_enabled(v9, v25))
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_service_connector_set_service_available_block";
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null serviceConnector", buf, 0xCu);
      }
    }
    else if (v24)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = v25;
      v15 = os_log_type_enabled(v9, v25);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          v27 = "nw_service_connector_set_service_available_block";
          v28 = 2082;
          v29 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null serviceConnector, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v8)
          goto LABEL_4;
LABEL_39:
        free(v8);
        goto LABEL_4;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_service_connector_set_service_available_block";
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null serviceConnector, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v19 = v25;
      if (os_log_type_enabled(v9, v25))
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_service_connector_set_service_available_block";
        _os_log_impl(&dword_182FBE000, v9, v19, "%{public}s called with null serviceConnector, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_37:

    goto LABEL_38;
  }
  if (v4)
  {
    v6 = v3[4];
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __nw_service_connector_set_service_available_block_block_invoke;
    block[3] = &unk_1E14ACE18;
    v22 = v3;
    v23 = v5;
    dispatch_async(v6, block);

    goto LABEL_4;
  }
  __nwlog_obj();
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v27 = "nw_service_connector_set_service_available_block";
  v8 = (char *)_os_log_send_and_compose_impl();

  v25 = OS_LOG_TYPE_ERROR;
  v24 = 0;
  if (!__nwlog_fault(v8, &v25, &v24))
    goto LABEL_38;
  if (v25 == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v9 = objc_claimAutoreleasedReturnValue();
    v12 = v25;
    if (os_log_type_enabled(v9, v25))
    {
      *(_DWORD *)buf = 136446210;
      v27 = "nw_service_connector_set_service_available_block";
      _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null serviceAvailableBlock", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (!v24)
  {
    __nwlog_obj();
    v9 = objc_claimAutoreleasedReturnValue();
    v20 = v25;
    if (os_log_type_enabled(v9, v25))
    {
      *(_DWORD *)buf = 136446210;
      v27 = "nw_service_connector_set_service_available_block";
      _os_log_impl(&dword_182FBE000, v9, v20, "%{public}s called with null serviceAvailableBlock, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_37;
  }
  v16 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v9 = objc_claimAutoreleasedReturnValue();
  v17 = v25;
  v18 = os_log_type_enabled(v9, v25);
  if (!v16)
  {
    if (v18)
    {
      *(_DWORD *)buf = 136446210;
      v27 = "nw_service_connector_set_service_available_block";
      _os_log_impl(&dword_182FBE000, v9, v17, "%{public}s called with null serviceAvailableBlock, no backtrace", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (v18)
  {
    *(_DWORD *)buf = 136446466;
    v27 = "nw_service_connector_set_service_available_block";
    v28 = 2082;
    v29 = v16;
    _os_log_impl(&dword_182FBE000, v9, v17, "%{public}s called with null serviceAvailableBlock, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v16);
  if (v8)
    goto LABEL_39;
LABEL_4:

}

void __nw_service_connector_set_service_available_block_block_invoke(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  v2 = _Block_copy(*(const void **)(a1 + 40));
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(void **)(v3 + 64);
  *(_QWORD *)(v3 + 64) = v2;

}

void nw_service_connector_start(void *a1)
{
  _QWORD *v1;
  void *v2;
  NSObject *v3;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  char *backtrace_string;
  os_log_type_t v9;
  _BOOL4 v10;
  os_log_type_t v11;
  _QWORD block[4];
  _QWORD *v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = v1[4];
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __nw_service_connector_start_block_invoke;
    block[3] = &unk_1E14ACFD0;
    v13 = v1;
    dispatch_async(v3, block);

    goto LABEL_3;
  }
  __nwlog_obj();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_service_connector_start";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_service_connector_start";
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null serviceConnector", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_service_connector_start";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null serviceConnector, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_service_connector_start";
        _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null serviceConnector, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_service_connector_start";
        _os_log_impl(&dword_182FBE000, v6, v11, "%{public}s called with null serviceConnector, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v5)
    free(v5);
LABEL_3:

}

void __nw_service_connector_start_block_invoke(uint64_t a1)
{
  uint64_t v2;
  id v3;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  void *v8;
  int v9;
  NSObject *v10;
  _BOOL4 v11;
  void *v12;
  const char *v13;
  char *v14;
  os_log_type_t v15;
  _BOOL4 v16;
  void *v17;
  void *v18;
  uint64_t v19;
  int v20;
  NSObject *v21;
  void *v22;
  NSObject *address;
  void *v24;
  id v25;
  NSObject *legacy_tcp_socket;
  void *v27;
  os_log_type_t v28;
  void *v29;
  id v30;
  char *v31;
  NSObject *v32;
  os_log_type_t v33;
  void *v34;
  NSObject *v35;
  NSObject *v36;
  uint64_t v37;
  void *v38;
  nw_listener_t v39;
  NSObject *v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  NSObject *v44;
  uint64_t v45;
  NSObject *v46;
  _QWORD *v47;
  NSObject *v48;
  NSObject *v49;
  unsigned __int8 *v50;
  int v51;
  int v52;
  int v53;
  int v54;
  id v55;
  char *v56;
  NSObject *v57;
  os_log_type_t v58;
  char *v59;
  os_log_type_t v60;
  _BOOL4 v61;
  char *backtrace_string;
  os_log_type_t v63;
  _BOOL4 v64;
  void *v65;
  os_log_type_t v66;
  os_log_type_t v67;
  char *v68;
  os_log_type_t v69;
  _BOOL4 v70;
  os_log_type_t v71;
  os_log_type_t v72;
  _QWORD v73[4];
  _QWORD *v74;
  NSObject *v75;
  _QWORD handler[4];
  _QWORD *v77;
  NSObject *v78;
  char v79;
  os_log_type_t type[2];
  __int16 v81;
  int v82;
  __int128 v83;
  int v84;
  os_log_type_t v85;
  uint8_t buf[4];
  const char *v87;
  __int16 v88;
  void *v89;
  __int16 v90;
  _BYTE v91[10];
  uint64_t v92;
  int v93;
  uint64_t v94;

  v94 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  if (*(_DWORD *)(v2 + 16) != 4)
  {
    v9 = *(unsigned __int8 *)(v2 + 50);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v10 = (id)gLogObj;
    v11 = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
    if (v9)
    {
      if (!v11)
        goto LABEL_19;
      v12 = *(void **)(a1 + 32);
      *(_DWORD *)buf = 136446466;
      v87 = "nw_service_connector_start_block_invoke";
      v88 = 2114;
      v89 = v12;
      v13 = "%{public}s %{public}@ restarting";
    }
    else
    {
      if (!v11)
        goto LABEL_19;
      v18 = *(void **)(a1 + 32);
      *(_DWORD *)buf = 136446466;
      v87 = "nw_service_connector_start_block_invoke";
      v88 = 2114;
      v89 = v18;
      v13 = "%{public}s Client starting %{public}@";
    }
    _os_log_impl(&dword_182FBE000, v10, OS_LOG_TYPE_DEFAULT, v13, buf, 0x16u);
LABEL_19:

    v19 = *(_QWORD *)(a1 + 32);
    v20 = *(_DWORD *)(v19 + 16);
    if (v20 != 1)
    {
      if (v20 == 2)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v21 = (id)gLogObj;
        if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
        {
          v22 = *(void **)(a1 + 32);
          *(_DWORD *)buf = 136446466;
          v87 = "nw_service_connector_start_block_invoke";
          v88 = 2114;
          v89 = v22;
          _os_log_impl(&dword_182FBE000, v21, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ Service connector already started", buf, 0x16u);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v21 = (id)gLogObj;
        if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
        {
          v27 = *(void **)(a1 + 32);
          *(_DWORD *)buf = 136446466;
          v87 = "nw_service_connector_start_block_invoke";
          v88 = 2114;
          v89 = v27;
          _os_log_impl(&dword_182FBE000, v21, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ Service connector could not be started", buf, 0x16u);
        }
      }

      return;
    }
    *(_WORD *)type = 7708;
    v81 = bswap32(*(unsigned __int16 *)(v19 + 48)) >> 16;
    v82 = 0;
    v83 = *MEMORY[0x1E0C83920];
    v84 = 0;
    address = nw_endpoint_create_address((const sockaddr *)type);
    if (address)
    {
      v24 = *(void **)(*(_QWORD *)(a1 + 32) + 24);
      if (v24)
      {
        v25 = v24;
        nw_parameters_set_data_mode(v25, 2u);
        legacy_tcp_socket = v25;
        *((_WORD *)legacy_tcp_socket[13].isa + 50) |= 0x10u;

        nw_parameters_set_tfo(legacy_tcp_socket, 1);
        goto LABEL_44;
      }
      legacy_tcp_socket = nw_parameters_create_legacy_tcp_socket(&__block_literal_global_48827);
      if (legacy_tcp_socket)
      {
LABEL_44:
        nw_parameters_set_local_endpoint(legacy_tcp_socket, address);
        v35 = legacy_tcp_socket;
        v35[12].isa = (Class)((unint64_t)v35[12].isa | 0x8000000);

        v36 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 8);
        if (v36)
        {
          nw_listener_cancel(v36);
          v37 = *(_QWORD *)(a1 + 32);
          v38 = *(void **)(v37 + 8);
          *(_QWORD *)(v37 + 8) = 0;

        }
        v39 = nw_listener_create(v35);
        if (v39)
        {
          objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 8), v39);
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v40 = (id)gLogObj;
          if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
          {
            v41 = *(_QWORD **)(a1 + 32);
            v42 = v41[1];
            *(_DWORD *)buf = 136446978;
            v87 = "nw_service_connector_start_block_invoke";
            v88 = 2114;
            v89 = v41;
            v90 = 2048;
            *(_QWORD *)v91 = v42;
            *(_WORD *)&v91[8] = 2112;
            v92 = v42;
            _os_log_impl(&dword_182FBE000, v40, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ Created listener<%p> %@", buf, 0x2Au);
          }

          v43 = *(_QWORD **)(a1 + 32);
          v44 = v43[1];
          v45 = MEMORY[0x1E0C809B0];
          handler[0] = MEMORY[0x1E0C809B0];
          handler[1] = 3221225472;
          handler[2] = __nw_service_connector_start_block_invoke_96;
          handler[3] = &unk_1E14A3B70;
          v77 = v43;
          v46 = v39;
          v78 = v46;
          nw_listener_set_new_connection_handler(v44, handler);
          v47 = *(_QWORD **)(a1 + 32);
          v48 = v47[1];
          v73[0] = v45;
          v73[1] = 3221225472;
          v73[2] = __nw_service_connector_start_block_invoke_98;
          v73[3] = &unk_1E14AD048;
          v74 = v47;
          v75 = v46;
          nw_listener_set_state_changed_handler(v48, v73);
          nw_listener_set_queue(*(nw_listener_t *)(*(_QWORD *)(a1 + 32) + 8), *(dispatch_queue_t *)(*(_QWORD *)(a1 + 32) + 32));
          nw_listener_start(*(nw_listener_t *)(*(_QWORD *)(a1 + 32) + 8));
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v49 = (id)gLogObj;
          if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
          {
            v50 = *(unsigned __int8 **)(a1 + 32);
            v51 = v50[120];
            v52 = v50[121];
            v53 = v50[122];
            v54 = v50[123];
            *(_DWORD *)buf = 136447490;
            v87 = "nw_service_connector_start_block_invoke";
            v88 = 2114;
            v89 = v50;
            v90 = 1024;
            *(_DWORD *)v91 = v51;
            *(_WORD *)&v91[4] = 1024;
            *(_DWORD *)&v91[6] = v52;
            LOWORD(v92) = 1024;
            *(_DWORD *)((char *)&v92 + 2) = v53;
            HIWORD(v92) = 1024;
            v93 = v54;
            _os_log_impl(&dword_182FBE000, v49, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ Listener started, localPubKeyStart %02x%02x%02x%02x", buf, 0x2Eu);
          }

LABEL_93:
LABEL_102:

          return;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v55 = (id)gLogObj;
        *(_DWORD *)buf = 136446210;
        v87 = "nw_service_connector_start_block_invoke";
        v56 = (char *)_os_log_send_and_compose_impl();

        v85 = OS_LOG_TYPE_ERROR;
        v79 = 0;
        if (__nwlog_fault(v56, &v85, &v79))
        {
          if (v85 == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            v57 = objc_claimAutoreleasedReturnValue();
            v58 = v85;
            if (os_log_type_enabled(v57, v85))
            {
              *(_DWORD *)buf = 136446210;
              v87 = "nw_service_connector_start_block_invoke";
              _os_log_impl(&dword_182FBE000, v57, v58, "%{public}s nw_listener_create failed", buf, 0xCu);
            }
          }
          else if (v79)
          {
            backtrace_string = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            v57 = objc_claimAutoreleasedReturnValue();
            v63 = v85;
            v64 = os_log_type_enabled(v57, v85);
            if (backtrace_string)
            {
              if (v64)
              {
                *(_DWORD *)buf = 136446466;
                v87 = "nw_service_connector_start_block_invoke";
                v88 = 2082;
                v89 = backtrace_string;
                _os_log_impl(&dword_182FBE000, v57, v63, "%{public}s nw_listener_create failed, dumping backtrace:%{public}s", buf, 0x16u);
              }

              free(backtrace_string);
              goto LABEL_91;
            }
            if (v64)
            {
              *(_DWORD *)buf = 136446210;
              v87 = "nw_service_connector_start_block_invoke";
              _os_log_impl(&dword_182FBE000, v57, v63, "%{public}s nw_listener_create failed, no backtrace", buf, 0xCu);
            }
          }
          else
          {
            __nwlog_obj();
            v57 = objc_claimAutoreleasedReturnValue();
            v71 = v85;
            if (os_log_type_enabled(v57, v85))
            {
              *(_DWORD *)buf = 136446210;
              v87 = "nw_service_connector_start_block_invoke";
              _os_log_impl(&dword_182FBE000, v57, v71, "%{public}s nw_listener_create failed, backtrace limit exceeded", buf, 0xCu);
            }
          }

        }
LABEL_91:
        if (v56)
          free(v56);
        goto LABEL_93;
      }
      __nwlog_obj();
      v65 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      v87 = "nw_service_connector_start_block_invoke_2";
      v31 = (char *)_os_log_send_and_compose_impl();

      v85 = OS_LOG_TYPE_ERROR;
      v79 = 0;
      if (!__nwlog_fault(v31, &v85, &v79))
        goto LABEL_100;
      if (v85 == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v32 = objc_claimAutoreleasedReturnValue();
        v66 = v85;
        if (os_log_type_enabled(v32, v85))
        {
          *(_DWORD *)buf = 136446210;
          v87 = "nw_service_connector_start_block_invoke";
          _os_log_impl(&dword_182FBE000, v32, v66, "%{public}s nw_parameters_create failed", buf, 0xCu);
        }
      }
      else if (v79)
      {
        v68 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v32 = objc_claimAutoreleasedReturnValue();
        v69 = v85;
        v70 = os_log_type_enabled(v32, v85);
        if (v68)
        {
          if (v70)
          {
            *(_DWORD *)buf = 136446466;
            v87 = "nw_service_connector_start_block_invoke";
            v88 = 2082;
            v89 = v68;
            _os_log_impl(&dword_182FBE000, v32, v69, "%{public}s nw_parameters_create failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v68);
          if (!v31)
            goto LABEL_102;
          goto LABEL_101;
        }
        if (v70)
        {
          *(_DWORD *)buf = 136446210;
          v87 = "nw_service_connector_start_block_invoke";
          _os_log_impl(&dword_182FBE000, v32, v69, "%{public}s nw_parameters_create failed, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v32 = objc_claimAutoreleasedReturnValue();
        v72 = v85;
        if (os_log_type_enabled(v32, v85))
        {
          *(_DWORD *)buf = 136446210;
          v87 = "nw_service_connector_start_block_invoke";
          _os_log_impl(&dword_182FBE000, v32, v72, "%{public}s nw_parameters_create failed, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v30 = (id)gLogObj;
      *(_DWORD *)buf = 136446210;
      v87 = "nw_service_connector_start_block_invoke";
      v31 = (char *)_os_log_send_and_compose_impl();

      v85 = OS_LOG_TYPE_ERROR;
      v79 = 0;
      if (!__nwlog_fault(v31, &v85, &v79))
        goto LABEL_100;
      if (v85 == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v32 = (id)gLogObj;
        v33 = v85;
        if (os_log_type_enabled(v32, v85))
        {
          *(_DWORD *)buf = 136446210;
          v87 = "nw_service_connector_start_block_invoke";
          _os_log_impl(&dword_182FBE000, v32, v33, "%{public}s nw_endpoint_create_address failed", buf, 0xCu);
        }
      }
      else if (v79)
      {
        v59 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v32 = objc_claimAutoreleasedReturnValue();
        v60 = v85;
        v61 = os_log_type_enabled(v32, v85);
        if (v59)
        {
          if (v61)
          {
            *(_DWORD *)buf = 136446466;
            v87 = "nw_service_connector_start_block_invoke";
            v88 = 2082;
            v89 = v59;
            _os_log_impl(&dword_182FBE000, v32, v60, "%{public}s nw_endpoint_create_address failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v59);
          if (!v31)
            goto LABEL_102;
          goto LABEL_101;
        }
        if (v61)
        {
          *(_DWORD *)buf = 136446210;
          v87 = "nw_service_connector_start_block_invoke";
          _os_log_impl(&dword_182FBE000, v32, v60, "%{public}s nw_endpoint_create_address failed, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v32 = objc_claimAutoreleasedReturnValue();
        v67 = v85;
        if (os_log_type_enabled(v32, v85))
        {
          *(_DWORD *)buf = 136446210;
          v87 = "nw_service_connector_start_block_invoke";
          _os_log_impl(&dword_182FBE000, v32, v67, "%{public}s nw_endpoint_create_address failed, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }

LABEL_100:
    if (!v31)
      goto LABEL_102;
LABEL_101:
    free(v31);
    goto LABEL_102;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v3 = (id)gLogObj;
  v4 = *(void **)(a1 + 32);
  *(_DWORD *)buf = 136446466;
  v87 = "nw_service_connector_start_block_invoke";
  v88 = 2114;
  v89 = v4;
  v5 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  v85 = OS_LOG_TYPE_DEFAULT;
  if (!__nwlog_fault(v5, type, &v85))
    goto LABEL_41;
  if (type[0] == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v6 = (id)gLogObj;
    v7 = type[0];
    if (os_log_type_enabled(v6, type[0]))
    {
      v8 = *(void **)(a1 + 32);
      *(_DWORD *)buf = 136446466;
      v87 = "nw_service_connector_start_block_invoke";
      v88 = 2114;
      v89 = v8;
      _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s %{public}@ already cancelled", buf, 0x16u);
    }
LABEL_40:

LABEL_41:
    if (!v5)
      return;
    goto LABEL_42;
  }
  if (v85 == OS_LOG_TYPE_DEFAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v6 = (id)gLogObj;
    v28 = type[0];
    if (os_log_type_enabled(v6, type[0]))
    {
      v29 = *(void **)(a1 + 32);
      *(_DWORD *)buf = 136446466;
      v87 = "nw_service_connector_start_block_invoke";
      v88 = 2114;
      v89 = v29;
      _os_log_impl(&dword_182FBE000, v6, v28, "%{public}s %{public}@ already cancelled, backtrace limit exceeded", buf, 0x16u);
    }
    goto LABEL_40;
  }
  v14 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v6 = (id)gLogObj;
  v15 = type[0];
  v16 = os_log_type_enabled(v6, type[0]);
  if (!v14)
  {
    if (v16)
    {
      v34 = *(void **)(a1 + 32);
      *(_DWORD *)buf = 136446466;
      v87 = "nw_service_connector_start_block_invoke";
      v88 = 2114;
      v89 = v34;
      _os_log_impl(&dword_182FBE000, v6, v15, "%{public}s %{public}@ already cancelled, no backtrace", buf, 0x16u);
    }
    goto LABEL_40;
  }
  if (v16)
  {
    v17 = *(void **)(a1 + 32);
    *(_DWORD *)buf = 136446722;
    v87 = "nw_service_connector_start_block_invoke";
    v88 = 2114;
    v89 = v17;
    v90 = 2082;
    *(_QWORD *)v91 = v14;
    _os_log_impl(&dword_182FBE000, v6, v15, "%{public}s %{public}@ already cancelled, dumping backtrace:%{public}s", buf, 0x20u);
  }

  free(v14);
  if (v5)
LABEL_42:
    free(v5);
}

void sub_1838674B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,void *a25)
{
  void *v25;
  void *v26;
  void *v27;

  _Unwind_Resume(a1);
}

void __nw_service_connector_start_block_invoke_96(uint64_t a1, void *a2)
{
  NSObject *v3;
  NWConcrete_nw_connection *v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  const char *v8;
  NSObject *v9;
  os_log_type_t v10;
  uint32_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  const char *v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  NWConcrete_nw_connection *v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = (NWConcrete_nw_connection *)v3;
  v5 = *(_QWORD *)(a1 + 32);
  if (*(_DWORD *)(v5 + 16) == 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v6 = (id)gLogObj;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v7 = *(_QWORD *)(a1 + 32);
      v15 = 136446722;
      v16 = "nw_service_connector_start_block_invoke";
      v17 = 2114;
      v18 = v7;
      v19 = 2114;
      v20 = v4;
      v8 = "%{public}s %{public}@ already cancelled, ignoring new connection %{public}@";
      v9 = v6;
      v10 = OS_LOG_TYPE_ERROR;
      v11 = 32;
LABEL_7:
      _os_log_impl(&dword_182FBE000, v9, v10, v8, (uint8_t *)&v15, v11);
    }
  }
  else
  {
    if (*(_QWORD *)(v5 + 8) == *(_QWORD *)(a1 + 40))
    {
      nw_connection_set_state_changed_handler(v3, 0);
      nw_connection_set_queue(&v4->super, *(dispatch_queue_t *)(*(_QWORD *)(a1 + 32) + 32));
      nw_connection_start(&v4->super);
      nw_service_connector_should_accept_connection(*(NWConcrete_nw_service_connector **)(a1 + 32), v4, 1);
      goto LABEL_9;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v6 = (id)gLogObj;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      v12 = *(_QWORD *)(a1 + 32);
      v13 = *(_QWORD *)(a1 + 40);
      v14 = *(_QWORD *)(v12 + 8);
      v15 = 136447234;
      v16 = "nw_service_connector_start_block_invoke";
      v17 = 2114;
      v18 = v12;
      v19 = 2114;
      v20 = v4;
      v21 = 2048;
      v22 = v14;
      v23 = 2048;
      v24 = v13;
      v8 = "%{public}s %{public}@ Ignoring new connection %{public}@ for stale listener (%p != %p)";
      v9 = v6;
      v10 = OS_LOG_TYPE_DEFAULT;
      v11 = 52;
      goto LABEL_7;
    }
  }

  nw_connection_cancel(&v4->super);
LABEL_9:

}

void sub_1838676F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void __nw_service_connector_start_block_invoke_98(uint64_t a1, unsigned int a2, void *a3)
{
  NSObject *v5;
  NSObject *v6;
  _BOOL4 v7;
  const char *v8;
  const char *v9;
  uint64_t (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  const char *v12;
  NSObject *v13;
  uint32_t v14;
  uint64_t (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  int v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t);
  _QWORD *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  unsigned __int8 *v29;
  int v30;
  int error_code;
  unsigned int v32;
  NSObject *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  dispatch_time_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  int v44;
  char *v45;
  NSObject *v46;
  os_log_type_t v47;
  uint64_t v48;
  int v49;
  char *backtrace_string;
  os_log_type_t v51;
  _BOOL4 v52;
  uint64_t v53;
  int v54;
  os_log_type_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  int v59;
  void *v60;
  char *v61;
  NSObject *v62;
  os_log_type_t v63;
  void *v64;
  os_log_type_t v65;
  char *v66;
  os_log_type_t v67;
  _BOOL4 v68;
  char *v69;
  os_log_type_t v70;
  _BOOL4 v71;
  os_log_type_t v72;
  os_log_type_t v73;
  _QWORD v74[4];
  _QWORD *v75;
  _QWORD v76[4];
  _QWORD *v77;
  os_log_type_t type[8];
  uint64_t v79;
  uint64_t (*v80)(uint64_t, uint64_t, void *);
  void *v81;
  id v82;
  _BYTE *v83;
  _BYTE buf[24];
  uint64_t (*v85)(uint64_t, uint64_t);
  _BYTE v86[20];
  uint64_t v87;

  v87 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v6 = (id)gLogObj;
  v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
  if (v5)
  {
    if (!v7)
      goto LABEL_13;
    if (a2 > 4)
      v8 = "<unknown>";
    else
      v8 = off_1E149CE68[a2];
    v11 = *(_QWORD *)(a1 + 32);
    v10 = *(uint64_t (**)(uint64_t, uint64_t))(a1 + 40);
    *(_DWORD *)buf = 136447234;
    *(_QWORD *)&buf[4] = "nw_service_connector_start_block_invoke";
    *(_WORD *)&buf[12] = 2114;
    *(_QWORD *)&buf[14] = v11;
    *(_WORD *)&buf[22] = 2048;
    v85 = v10;
    *(_WORD *)v86 = 2082;
    *(_QWORD *)&v86[2] = v8;
    *(_WORD *)&v86[10] = 2114;
    *(_QWORD *)&v86[12] = v5;
    v12 = "%{public}s %{public}@ Listener(%p) entered state %{public}s with error %{public}@";
    v13 = v6;
    v14 = 52;
  }
  else
  {
    if (!v7)
      goto LABEL_13;
    if (a2 > 4)
      v9 = "<unknown>";
    else
      v9 = off_1E149CE68[a2];
    v16 = *(_QWORD *)(a1 + 32);
    v15 = *(uint64_t (**)(uint64_t, uint64_t))(a1 + 40);
    *(_DWORD *)buf = 136446978;
    *(_QWORD *)&buf[4] = "nw_service_connector_start_block_invoke";
    *(_WORD *)&buf[12] = 2114;
    *(_QWORD *)&buf[14] = v16;
    *(_WORD *)&buf[22] = 2048;
    v85 = v15;
    *(_WORD *)v86 = 2082;
    *(_QWORD *)&v86[2] = v9;
    v12 = "%{public}s %{public}@ Listener(%p) entered state %{public}s";
    v13 = v6;
    v14 = 42;
  }
  _os_log_impl(&dword_182FBE000, v13, OS_LOG_TYPE_DEFAULT, v12, buf, v14);
LABEL_13:

  v17 = *(_QWORD *)(a1 + 32);
  v18 = *(_DWORD *)(v17 + 16);
  if (v18 == 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v19 = (id)gLogObj;
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      v20 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_service_connector_start_block_invoke";
      *(_WORD *)&buf[12] = 2114;
      *(_QWORD *)&buf[14] = v20;
      _os_log_impl(&dword_182FBE000, v19, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ already cancelled, ignoring listener state change", buf, 0x16u);
    }
LABEL_16:

    goto LABEL_60;
  }
  if (*(_QWORD *)(v17 + 8) != *(_QWORD *)(a1 + 40))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v19 = (id)gLogObj;
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      v21 = *(_QWORD *)(a1 + 32);
      v22 = *(_QWORD *)(a1 + 40);
      v23 = *(uint64_t (**)(uint64_t, uint64_t))(v21 + 8);
      *(_DWORD *)buf = 136446978;
      *(_QWORD *)&buf[4] = "nw_service_connector_start_block_invoke";
      *(_WORD *)&buf[12] = 2114;
      *(_QWORD *)&buf[14] = v21;
      *(_WORD *)&buf[22] = 2048;
      v85 = v23;
      *(_WORD *)v86 = 2048;
      *(_QWORD *)&v86[2] = v22;
      _os_log_impl(&dword_182FBE000, v19, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ Ignoring state update for stale listener (%p != %p)", buf, 0x2Au);
    }
    goto LABEL_16;
  }
  if (a2 == 4)
  {
    v30 = 4;
LABEL_59:
    *(_DWORD *)(v17 + 16) = v30;
    goto LABEL_60;
  }
  if (a2 == 3)
  {
    error_code = nw_error_get_error_code(v5);
    v17 = *(_QWORD *)(a1 + 32);
    if (error_code != 48)
    {
LABEL_58:
      v30 = 3;
      goto LABEL_59;
    }
    v32 = *(unsigned __int8 *)(v17 + 50);
    if (v32 <= 4)
    {
      *(_BYTE *)(v17 + 50) = v32 + 1;
      __nwlog_obj();
      v33 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
      {
        v34 = *(_QWORD *)(a1 + 32);
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_service_connector_start_block_invoke";
        *(_WORD *)&buf[12] = 2114;
        *(_QWORD *)&buf[14] = v34;
        _os_log_impl(&dword_182FBE000, v33, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ scheduling a retry as the address is in use", buf, 0x16u);
      }

      v36 = *(_QWORD **)(a1 + 32);
      v37 = v36[7];
      if (v37)
      {
        nw_queue_cancel_source(v37, v35);
        *(_QWORD *)(*(_QWORD *)(a1 + 32) + 56) = 0;
        v36 = *(_QWORD **)(a1 + 32);
      }
      v74[0] = MEMORY[0x1E0C809B0];
      v74[1] = 3221225472;
      v74[2] = __nw_service_connector_start_block_invoke_99;
      v74[3] = &unk_1E14ACFD0;
      v75 = v36;
      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 56) = nw_queue_context_create_source(0, 2, 3, 0, v74, 0);
      v38 = *(_QWORD *)(a1 + 32);
      v39 = *(_QWORD *)(v38 + 56);
      v40 = dispatch_time(0x8000000000000000, 200000000 * *(unsigned __int8 *)(v38 + 50));
      nw_queue_set_timer_values(v39, v40, 0xFFFFFFFFFFFFFFFFLL, 0xF4240uLL);
      nw_queue_activate_source(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 56), v41);

      goto LABEL_60;
    }
    __nwlog_obj();
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    v43 = *(_QWORD *)(a1 + 32);
    v44 = *(unsigned __int8 *)(v43 + 50);
    *(_DWORD *)buf = 136446978;
    *(_QWORD *)&buf[4] = "nw_service_connector_start_block_invoke_2";
    *(_WORD *)&buf[12] = 2114;
    *(_QWORD *)&buf[14] = v43;
    *(_WORD *)&buf[22] = 2114;
    v85 = (uint64_t (*)(uint64_t, uint64_t))v5;
    *(_WORD *)v86 = 1024;
    *(_DWORD *)&v86[2] = v44;
    v45 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v76[0]) = 0;
    if (__nwlog_fault(v45, type, v76))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v46 = objc_claimAutoreleasedReturnValue();
        v47 = type[0];
        if (os_log_type_enabled(v46, type[0]))
        {
          v48 = *(_QWORD *)(a1 + 32);
          v49 = *(unsigned __int8 *)(v48 + 50);
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_service_connector_start_block_invoke";
          *(_WORD *)&buf[12] = 2114;
          *(_QWORD *)&buf[14] = v48;
          *(_WORD *)&buf[22] = 2114;
          v85 = (uint64_t (*)(uint64_t, uint64_t))v5;
          *(_WORD *)v86 = 1024;
          *(_DWORD *)&v86[2] = v49;
          _os_log_impl(&dword_182FBE000, v46, v47, "%{public}s %{public}@ Listener failed to become ready due to error %{public}@ after %d retries", buf, 0x26u);
        }
      }
      else if (LOBYTE(v76[0]))
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v46 = objc_claimAutoreleasedReturnValue();
        v51 = type[0];
        v52 = os_log_type_enabled(v46, type[0]);
        if (backtrace_string)
        {
          if (v52)
          {
            v53 = *(_QWORD *)(a1 + 32);
            v54 = *(unsigned __int8 *)(v53 + 50);
            *(_DWORD *)buf = 136447234;
            *(_QWORD *)&buf[4] = "nw_service_connector_start_block_invoke";
            *(_WORD *)&buf[12] = 2114;
            *(_QWORD *)&buf[14] = v53;
            *(_WORD *)&buf[22] = 2114;
            v85 = (uint64_t (*)(uint64_t, uint64_t))v5;
            *(_WORD *)v86 = 1024;
            *(_DWORD *)&v86[2] = v54;
            *(_WORD *)&v86[6] = 2082;
            *(_QWORD *)&v86[8] = backtrace_string;
            _os_log_impl(&dword_182FBE000, v46, v51, "%{public}s %{public}@ Listener failed to become ready due to error %{public}@ after %d retries, dumping backtrace:%{public}s", buf, 0x30u);
          }

          free(backtrace_string);
          goto LABEL_55;
        }
        if (v52)
        {
          v58 = *(_QWORD *)(a1 + 32);
          v59 = *(unsigned __int8 *)(v58 + 50);
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_service_connector_start_block_invoke";
          *(_WORD *)&buf[12] = 2114;
          *(_QWORD *)&buf[14] = v58;
          *(_WORD *)&buf[22] = 2114;
          v85 = (uint64_t (*)(uint64_t, uint64_t))v5;
          *(_WORD *)v86 = 1024;
          *(_DWORD *)&v86[2] = v59;
          _os_log_impl(&dword_182FBE000, v46, v51, "%{public}s %{public}@ Listener failed to become ready due to error %{public}@ after %d retries, no backtrace", buf, 0x26u);
        }
      }
      else
      {
        __nwlog_obj();
        v46 = objc_claimAutoreleasedReturnValue();
        v55 = type[0];
        if (os_log_type_enabled(v46, type[0]))
        {
          v56 = *(_QWORD *)(a1 + 32);
          v57 = *(unsigned __int8 *)(v56 + 50);
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_service_connector_start_block_invoke";
          *(_WORD *)&buf[12] = 2114;
          *(_QWORD *)&buf[14] = v56;
          *(_WORD *)&buf[22] = 2114;
          v85 = (uint64_t (*)(uint64_t, uint64_t))v5;
          *(_WORD *)v86 = 1024;
          *(_DWORD *)&v86[2] = v57;
          _os_log_impl(&dword_182FBE000, v46, v55, "%{public}s %{public}@ Listener failed to become ready due to error %{public}@ after %d retries, backtrace limit exceeded", buf, 0x26u);
        }
      }

    }
LABEL_55:
    if (v45)
      free(v45);
    v17 = *(_QWORD *)(a1 + 32);
    goto LABEL_58;
  }
  if (a2 == 2 && v18 != 2)
  {
    *(_DWORD *)(v17 + 16) = 2;
    v24 = *(id *)(a1 + 32);
    v25 = v24;
    if (v24)
    {
      v26 = v24[12];
      if (v26)
      {
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = buf;
        *(_QWORD *)&buf[16] = 0x3032000000;
        v85 = __Block_byref_object_copy__48854;
        *(_QWORD *)v86 = __Block_byref_object_dispose__48855;
        *(_QWORD *)&v86[8] = 0;
        v27 = MEMORY[0x1E0C809B0];
        *(_QWORD *)type = MEMORY[0x1E0C809B0];
        v79 = 3221225472;
        v80 = ___ZL49nwsc_start_outgoing_requests_waiting_for_listenerP31NWConcrete_nw_service_connector_block_invoke;
        v81 = &unk_1E14AB4B0;
        v28 = v24;
        v82 = v28;
        v83 = buf;
        nw_dictionary_apply(v26, (uint64_t)type);
        v29 = *(unsigned __int8 **)(*(_QWORD *)&buf[8] + 40);
        if (v29)
        {
          v76[0] = v27;
          v76[1] = 3221225472;
          v76[2] = ___ZL49nwsc_start_outgoing_requests_waiting_for_listenerP31NWConcrete_nw_service_connector_block_invoke_168;
          v76[3] = &unk_1E14AC200;
          v77 = v28;
          nw_array_apply(v29, (uint64_t)v76);

        }
        _Block_object_dispose(buf, 8);

        goto LABEL_30;
      }
      __nwlog_obj();
      v64 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nwsc_start_outgoing_requests_waiting_for_listener";
      v61 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(v76[0]) = 0;
      if (__nwlog_fault(v61, type, v76))
      {
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v62 = objc_claimAutoreleasedReturnValue();
          v65 = type[0];
          if (os_log_type_enabled(v62, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nwsc_start_outgoing_requests_waiting_for_listener";
            _os_log_impl(&dword_182FBE000, v62, v65, "%{public}s called with null serviceConnector->activeOutgoingRequests", buf, 0xCu);
          }
        }
        else if (LOBYTE(v76[0]))
        {
          v69 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v62 = objc_claimAutoreleasedReturnValue();
          v70 = type[0];
          v71 = os_log_type_enabled(v62, type[0]);
          if (v69)
          {
            if (v71)
            {
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "nwsc_start_outgoing_requests_waiting_for_listener";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v69;
              _os_log_impl(&dword_182FBE000, v62, v70, "%{public}s called with null serviceConnector->activeOutgoingRequests, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(v69);
            if (!v61)
              goto LABEL_30;
            goto LABEL_95;
          }
          if (v71)
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nwsc_start_outgoing_requests_waiting_for_listener";
            _os_log_impl(&dword_182FBE000, v62, v70, "%{public}s called with null serviceConnector->activeOutgoingRequests, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          __nwlog_obj();
          v62 = objc_claimAutoreleasedReturnValue();
          v73 = type[0];
          if (os_log_type_enabled(v62, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nwsc_start_outgoing_requests_waiting_for_listener";
            _os_log_impl(&dword_182FBE000, v62, v73, "%{public}s called with null serviceConnector->activeOutgoingRequests, backtrace limit exceeded", buf, 0xCu);
          }
        }
        goto LABEL_93;
      }
LABEL_94:
      if (!v61)
      {
LABEL_30:

        goto LABEL_60;
      }
LABEL_95:
      free(v61);
      goto LABEL_30;
    }
    __nwlog_obj();
    v60 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nwsc_start_outgoing_requests_waiting_for_listener";
    v61 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v76[0]) = 0;
    if (!__nwlog_fault(v61, type, v76))
      goto LABEL_94;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v62 = objc_claimAutoreleasedReturnValue();
      v63 = type[0];
      if (os_log_type_enabled(v62, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nwsc_start_outgoing_requests_waiting_for_listener";
        _os_log_impl(&dword_182FBE000, v62, v63, "%{public}s called with null serviceConnector", buf, 0xCu);
      }
    }
    else if (LOBYTE(v76[0]))
    {
      v66 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v62 = objc_claimAutoreleasedReturnValue();
      v67 = type[0];
      v68 = os_log_type_enabled(v62, type[0]);
      if (v66)
      {
        if (v68)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nwsc_start_outgoing_requests_waiting_for_listener";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v66;
          _os_log_impl(&dword_182FBE000, v62, v67, "%{public}s called with null serviceConnector, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v66);
        goto LABEL_94;
      }
      if (v68)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nwsc_start_outgoing_requests_waiting_for_listener";
        _os_log_impl(&dword_182FBE000, v62, v67, "%{public}s called with null serviceConnector, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v62 = objc_claimAutoreleasedReturnValue();
      v72 = type[0];
      if (os_log_type_enabled(v62, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nwsc_start_outgoing_requests_waiting_for_listener";
        _os_log_impl(&dword_182FBE000, v62, v72, "%{public}s called with null serviceConnector, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_93:

    goto LABEL_94;
  }
LABEL_60:

}

void sub_1838683A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__48854(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__48855(uint64_t a1)
{

}

uint64_t ___ZL49nwsc_start_outgoing_requests_waiting_for_listenerP31NWConcrete_nw_service_connector_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  _BYTE *v4;
  NSObject *v5;
  uint64_t v6;
  void *v7;
  _BOOL4 v8;
  uint64_t v9;
  _BOOL8 v10;
  uint64_t v11;
  void *v12;
  int v14;
  const char *v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  _BYTE *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v4[616] &= ~8u;
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v5 = (id)gLogObj;
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(_QWORD *)(a1 + 32);
    v14 = 136446722;
    v15 = "nwsc_start_outgoing_requests_waiting_for_listener_block_invoke";
    v16 = 2114;
    v17 = v6;
    v18 = 2114;
    v19 = v4;
    _os_log_impl(&dword_182FBE000, v5, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ starting connection for request %{public}@ due to listener ready", (uint8_t *)&v14, 0x20u);
  }

  nwsc_request_create_and_start_connection_inner(*(void **)(a1 + 32), v4, 0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = v7 == 0;

  if (v8)
  {
    v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
    if (!v9)
    {
      v10 = nw_array_create();
      v11 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
      v12 = *(void **)(v11 + 40);
      *(_QWORD *)(v11 + 40) = v10;

      v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
    }
    nw_array_append(v9, v4);
  }

  return 1;
}

void sub_183868558(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZL49nwsc_start_outgoing_requests_waiting_for_listenerP31NWConcrete_nw_service_connector_block_invoke_168(uint64_t a1, uint64_t a2, void *a3)
{
  NWConcrete_nw_unique_connection_request *v4;

  v4 = a3;
  nw_service_connector_trigger_request_complete_block_inner(*(void **)(a1 + 32), v4, 0, 0, 12);
  nw_service_connector_remove_active_outgoing_request(*(NWConcrete_nw_service_connector **)(a1 + 32), v4);

  return 1;
}

void sub_1838685CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t __nw_service_connector_start_block_invoke_99(uint64_t a1)
{
  return nw_service_connector_start(*(_QWORD *)(a1 + 32));
}

void nw_service_connector_trigger_request_complete_block_inner(void *a1, void *a2, void *a3, void *a4, int a5)
{
  _QWORD *v9;
  _BYTE *v10;
  id v11;
  id v12;
  id v13;
  char *v14;
  NSObject *v15;
  os_log_type_t v16;
  _DWORD *posix_error;
  id v18;
  char *v19;
  NSObject *v20;
  os_log_type_t v21;
  char *backtrace_string;
  os_log_type_t v23;
  _BOOL4 v24;
  id v25;
  os_log_type_t v26;
  os_log_type_t v27;
  const char *v28;
  char *v29;
  NSObject *v30;
  os_log_type_t v31;
  char *v32;
  os_log_type_t v33;
  _BOOL4 v34;
  os_log_type_t v35;
  os_log_type_t v36;
  os_log_type_t v37;
  NSObject *v38;
  _DWORD *v39;
  _QWORD block[4];
  _BYTE *v41;
  id v42;
  id v43;
  _QWORD *v44;
  id v45;
  char v46;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v49;
  __int16 v50;
  _BYTE v51[18];
  __int16 v52;
  char *v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  v9 = a1;
  v10 = a2;
  v11 = a3;
  v12 = a4;
  if (v10 && v11)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v13 = (id)gLogObj;
    *(_DWORD *)buf = 136446722;
    v49 = "nw_service_connector_trigger_request_complete_block_inner";
    v50 = 2114;
    *(_QWORD *)v51 = v9;
    *(_WORD *)&v51[8] = 2114;
    *(_QWORD *)&v51[10] = v10;
    v14 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v46 = 0;
    if (!__nwlog_fault(v14, &type, &v46))
      goto LABEL_52;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v15 = (id)gLogObj;
      v16 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446722;
        v49 = "nw_service_connector_trigger_request_complete_block_inner";
        v50 = 2114;
        *(_QWORD *)v51 = v9;
        *(_WORD *)&v51[8] = 2114;
        *(_QWORD *)&v51[10] = v10;
        _os_log_impl(&dword_182FBE000, v15, v16, "%{public}s %{public}@ cannot call this with both request %{public}@ and otherRequestBlock", buf, 0x20u);
      }
    }
    else if (v46)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v15 = (id)gLogObj;
      v23 = type;
      v24 = os_log_type_enabled(v15, type);
      if (backtrace_string)
      {
        if (v24)
        {
          *(_DWORD *)buf = 136446978;
          v49 = "nw_service_connector_trigger_request_complete_block_inner";
          v50 = 2114;
          *(_QWORD *)v51 = v9;
          *(_WORD *)&v51[8] = 2114;
          *(_QWORD *)&v51[10] = v10;
          v52 = 2082;
          v53 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v15, v23, "%{public}s %{public}@ cannot call this with both request %{public}@ and otherRequestBlock, dumping backtrace:%{public}s", buf, 0x2Au);
        }

        free(backtrace_string);
        if (v14)
          goto LABEL_53;
        goto LABEL_64;
      }
      if (v24)
      {
        *(_DWORD *)buf = 136446722;
        v49 = "nw_service_connector_trigger_request_complete_block_inner";
        v50 = 2114;
        *(_QWORD *)v51 = v9;
        *(_WORD *)&v51[8] = 2114;
        *(_QWORD *)&v51[10] = v10;
        _os_log_impl(&dword_182FBE000, v15, v23, "%{public}s %{public}@ cannot call this with both request %{public}@ and otherRequestBlock, no backtrace", buf, 0x20u);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v15 = (id)gLogObj;
      v27 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446722;
        v49 = "nw_service_connector_trigger_request_complete_block_inner";
        v50 = 2114;
        *(_QWORD *)v51 = v9;
        *(_WORD *)&v51[8] = 2114;
        *(_QWORD *)&v51[10] = v10;
        _os_log_impl(&dword_182FBE000, v15, v27, "%{public}s %{public}@ cannot call this with both request %{public}@ and otherRequestBlock, backtrace limit exceeded", buf, 0x20u);
      }
    }
    goto LABEL_51;
  }
  if (!v10 || (v10[616] & 1) == 0)
  {
    if (a5)
    {
      posix_error = nw_error_create_posix_error(a5);
      if (posix_error)
      {
LABEL_63:
        v38 = v9[4];
        block[0] = MEMORY[0x1E0C809B0];
        block[1] = 3221225472;
        block[2] = ___ZL57nw_service_connector_trigger_request_complete_block_innerP31NWConcrete_nw_service_connectorP39NWConcrete_nw_unique_connection_requestU13block_pointerFvP24NWConcrete_nw_connectionP9__CFErrorES4_i_block_invoke;
        block[3] = &unk_1E14A3D40;
        v45 = v11;
        v41 = v10;
        v42 = posix_error;
        v43 = v12;
        v44 = v9;
        v39 = posix_error;
        dispatch_async(v38, block);

        goto LABEL_64;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v18 = (id)gLogObj;
      *(_DWORD *)buf = 136446466;
      v49 = "nw_service_connector_trigger_request_complete_block_inner";
      v50 = 1024;
      *(_DWORD *)v51 = a5;
      v19 = (char *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v46 = 0;
      if (__nwlog_fault(v19, &type, &v46))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v20 = (id)gLogObj;
          v21 = type;
          if (os_log_type_enabled(v20, type))
          {
            *(_DWORD *)buf = 136446466;
            v49 = "nw_service_connector_trigger_request_complete_block_inner";
            v50 = 1024;
            *(_DWORD *)v51 = a5;
            _os_log_impl(&dword_182FBE000, v20, v21, "%{public}s nw_error_create_posix_error(%d) failed", buf, 0x12u);
          }
        }
        else if (v46)
        {
          v32 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v20 = objc_claimAutoreleasedReturnValue();
          v33 = type;
          v34 = os_log_type_enabled(v20, type);
          if (v32)
          {
            if (v34)
            {
              *(_DWORD *)buf = 136446722;
              v49 = "nw_service_connector_trigger_request_complete_block_inner";
              v50 = 1024;
              *(_DWORD *)v51 = a5;
              *(_WORD *)&v51[4] = 2082;
              *(_QWORD *)&v51[6] = v32;
              _os_log_impl(&dword_182FBE000, v20, v33, "%{public}s nw_error_create_posix_error(%d) failed, dumping backtrace:%{public}s", buf, 0x1Cu);
            }

            free(v32);
            if (!v19)
              goto LABEL_62;
            goto LABEL_61;
          }
          if (v34)
          {
            *(_DWORD *)buf = 136446466;
            v49 = "nw_service_connector_trigger_request_complete_block_inner";
            v50 = 1024;
            *(_DWORD *)v51 = a5;
            _os_log_impl(&dword_182FBE000, v20, v33, "%{public}s nw_error_create_posix_error(%d) failed, no backtrace", buf, 0x12u);
          }
        }
        else
        {
          __nwlog_obj();
          v20 = objc_claimAutoreleasedReturnValue();
          v37 = type;
          if (os_log_type_enabled(v20, type))
          {
            *(_DWORD *)buf = 136446466;
            v49 = "nw_service_connector_trigger_request_complete_block_inner";
            v50 = 1024;
            *(_DWORD *)v51 = a5;
            _os_log_impl(&dword_182FBE000, v20, v37, "%{public}s nw_error_create_posix_error(%d) failed, backtrace limit exceeded", buf, 0x12u);
          }
        }

      }
      if (v19)
LABEL_61:
        free(v19);
    }
LABEL_62:
    posix_error = 0;
    goto LABEL_63;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v25 = (id)gLogObj;
  *(_DWORD *)buf = 136446722;
  v49 = "nw_service_connector_trigger_request_complete_block_inner";
  v50 = 2114;
  *(_QWORD *)v51 = v9;
  *(_WORD *)&v51[8] = 2114;
  *(_QWORD *)&v51[10] = v10;
  v14 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v46 = 0;
  if (!__nwlog_fault(v14, &type, &v46))
    goto LABEL_52;
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v15 = (id)gLogObj;
    v26 = type;
    if (os_log_type_enabled(v15, type))
    {
      *(_DWORD *)buf = 136446722;
      v49 = "nw_service_connector_trigger_request_complete_block_inner";
      v50 = 2114;
      *(_QWORD *)v51 = v9;
      *(_WORD *)&v51[8] = 2114;
      *(_QWORD *)&v51[10] = v10;
      _os_log_impl(&dword_182FBE000, v15, v26, "%{public}s %{public}@ Cannot trigger request complete block on incoming request %{public}@", buf, 0x20u);
    }
  }
  else if (v46)
  {
    v28 = __nw_create_backtrace_string();
    if (v28)
    {
      v29 = (char *)v28;
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v30 = (id)gLogObj;
      v31 = type;
      if (os_log_type_enabled(v30, type))
      {
        *(_DWORD *)buf = 136446978;
        v49 = "nw_service_connector_trigger_request_complete_block_inner";
        v50 = 2114;
        *(_QWORD *)v51 = v9;
        *(_WORD *)&v51[8] = 2114;
        *(_QWORD *)&v51[10] = v10;
        v52 = 2082;
        v53 = v29;
        _os_log_impl(&dword_182FBE000, v30, v31, "%{public}s %{public}@ Cannot trigger request complete block on incoming request %{public}@, dumping backtrace:%{public}s", buf, 0x2Au);
      }

      free(v29);
      if (v14)
        goto LABEL_53;
      goto LABEL_64;
    }
    __nwlog_obj();
    v15 = objc_claimAutoreleasedReturnValue();
    v36 = type;
    if (os_log_type_enabled(v15, type))
    {
      *(_DWORD *)buf = 136446722;
      v49 = "nw_service_connector_trigger_request_complete_block_inner";
      v50 = 2114;
      *(_QWORD *)v51 = v9;
      *(_WORD *)&v51[8] = 2114;
      *(_QWORD *)&v51[10] = v10;
      _os_log_impl(&dword_182FBE000, v15, v36, "%{public}s %{public}@ Cannot trigger request complete block on incoming request %{public}@, no backtrace", buf, 0x20u);
    }
  }
  else
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v15 = (id)gLogObj;
    v35 = type;
    if (os_log_type_enabled(v15, type))
    {
      *(_DWORD *)buf = 136446722;
      v49 = "nw_service_connector_trigger_request_complete_block_inner";
      v50 = 2114;
      *(_QWORD *)v51 = v9;
      *(_WORD *)&v51[8] = 2114;
      *(_QWORD *)&v51[10] = v10;
      _os_log_impl(&dword_182FBE000, v15, v35, "%{public}s %{public}@ Cannot trigger request complete block on incoming request %{public}@, backtrace limit exceeded", buf, 0x20u);
    }
  }
LABEL_51:

LABEL_52:
  if (v14)
LABEL_53:
    free(v14);
LABEL_64:

}

void sub_183868F90(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void nw_service_connector_remove_active_outgoing_request(NWConcrete_nw_service_connector *a1, NWConcrete_nw_unique_connection_request *a2)
{
  NWConcrete_nw_service_connector *v3;
  NWConcrete_nw_unique_connection_request *v4;
  NWConcrete_nw_unique_connection_request *v5;
  id v6;
  OS_nw_endpoint *endpoint;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  OS_nw_endpoint *v11;
  char *v12;
  os_log_type_t v13;
  _BOOL4 v14;
  OS_nw_endpoint *v15;
  os_log_type_t v16;
  OS_nw_endpoint *v17;
  OS_nw_endpoint *v18;
  void *v19;
  NSObject *v20;
  os_log_type_t v21;
  void *v22;
  os_log_type_t v23;
  void *v24;
  os_log_type_t v25;
  char *backtrace_string;
  os_log_type_t v27;
  _BOOL4 v28;
  char *v29;
  os_log_type_t v30;
  _BOOL4 v31;
  os_log_type_t v32;
  _BOOL4 v33;
  os_log_type_t v34;
  os_log_type_t v35;
  os_log_type_t v36;
  char v37;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v40;
  __int16 v41;
  OS_nw_endpoint *v42;
  __int16 v43;
  char *service;
  __int16 v45;
  char *v46;
  uint8_t v47[32];
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  int v73;
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)v47 = 136446210;
    *(_QWORD *)&v47[4] = "nw_service_connector_remove_active_outgoing_request";
    v8 = (char *)_os_log_send_and_compose_impl();

    buf[0] = 16;
    type = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v8, buf, &type))
      goto LABEL_23;
    if (buf[0] == 17)
    {
      __nwlog_obj();
      v20 = objc_claimAutoreleasedReturnValue();
      v21 = buf[0];
      if (os_log_type_enabled(v20, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)v47 = 136446210;
        *(_QWORD *)&v47[4] = "nw_service_connector_remove_active_outgoing_request";
        _os_log_impl(&dword_182FBE000, v20, v21, "%{public}s called with null serviceConnector", v47, 0xCu);
      }
    }
    else if (type)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v20 = objc_claimAutoreleasedReturnValue();
      v27 = buf[0];
      v28 = os_log_type_enabled(v20, (os_log_type_t)buf[0]);
      if (backtrace_string)
      {
        if (v28)
        {
          *(_DWORD *)v47 = 136446466;
          *(_QWORD *)&v47[4] = "nw_service_connector_remove_active_outgoing_request";
          *(_WORD *)&v47[12] = 2082;
          *(_QWORD *)&v47[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v20, v27, "%{public}s called with null serviceConnector, dumping backtrace:%{public}s", v47, 0x16u);
        }

        free(backtrace_string);
LABEL_23:
        if (!v8)
          goto LABEL_25;
LABEL_24:
        free(v8);
        goto LABEL_25;
      }
      if (v28)
      {
        *(_DWORD *)v47 = 136446210;
        *(_QWORD *)&v47[4] = "nw_service_connector_remove_active_outgoing_request";
        _os_log_impl(&dword_182FBE000, v20, v27, "%{public}s called with null serviceConnector, no backtrace", v47, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v20 = objc_claimAutoreleasedReturnValue();
      v34 = buf[0];
      if (os_log_type_enabled(v20, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)v47 = 136446210;
        *(_QWORD *)&v47[4] = "nw_service_connector_remove_active_outgoing_request";
        _os_log_impl(&dword_182FBE000, v20, v34, "%{public}s called with null serviceConnector, backtrace limit exceeded", v47, 0xCu);
      }
    }
LABEL_74:

    goto LABEL_23;
  }
  if (!v3->activeOutgoingRequests)
  {
    __nwlog_obj();
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)v47 = 136446210;
    *(_QWORD *)&v47[4] = "nw_service_connector_remove_active_outgoing_request";
    v8 = (char *)_os_log_send_and_compose_impl();

    buf[0] = 16;
    type = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v8, buf, &type))
      goto LABEL_23;
    if (buf[0] == 17)
    {
      __nwlog_obj();
      v20 = objc_claimAutoreleasedReturnValue();
      v23 = buf[0];
      if (os_log_type_enabled(v20, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)v47 = 136446210;
        *(_QWORD *)&v47[4] = "nw_service_connector_remove_active_outgoing_request";
        _os_log_impl(&dword_182FBE000, v20, v23, "%{public}s called with null serviceConnector->activeOutgoingRequests", v47, 0xCu);
      }
      goto LABEL_74;
    }
    if (type == OS_LOG_TYPE_DEFAULT)
    {
      __nwlog_obj();
      v20 = objc_claimAutoreleasedReturnValue();
      v35 = buf[0];
      if (os_log_type_enabled(v20, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)v47 = 136446210;
        *(_QWORD *)&v47[4] = "nw_service_connector_remove_active_outgoing_request";
        _os_log_impl(&dword_182FBE000, v20, v35, "%{public}s called with null serviceConnector->activeOutgoingRequests, backtrace limit exceeded", v47, 0xCu);
      }
      goto LABEL_74;
    }
    v29 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v20 = objc_claimAutoreleasedReturnValue();
    v30 = buf[0];
    v31 = os_log_type_enabled(v20, (os_log_type_t)buf[0]);
    if (!v29)
    {
      if (v31)
      {
        *(_DWORD *)v47 = 136446210;
        *(_QWORD *)&v47[4] = "nw_service_connector_remove_active_outgoing_request";
        _os_log_impl(&dword_182FBE000, v20, v30, "%{public}s called with null serviceConnector->activeOutgoingRequests, no backtrace", v47, 0xCu);
      }
      goto LABEL_74;
    }
    if (v31)
    {
      *(_DWORD *)v47 = 136446466;
      *(_QWORD *)&v47[4] = "nw_service_connector_remove_active_outgoing_request";
      *(_WORD *)&v47[12] = 2082;
      *(_QWORD *)&v47[14] = v29;
      _os_log_impl(&dword_182FBE000, v20, v30, "%{public}s called with null serviceConnector->activeOutgoingRequests, dumping backtrace:%{public}s", v47, 0x16u);
    }
    goto LABEL_55;
  }
  if (!v4)
  {
    __nwlog_obj();
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)v47 = 136446210;
    *(_QWORD *)&v47[4] = "nw_service_connector_remove_active_outgoing_request";
    v8 = (char *)_os_log_send_and_compose_impl();

    buf[0] = 16;
    type = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v8, buf, &type))
      goto LABEL_23;
    if (buf[0] == 17)
    {
      __nwlog_obj();
      v20 = objc_claimAutoreleasedReturnValue();
      v25 = buf[0];
      if (os_log_type_enabled(v20, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)v47 = 136446210;
        *(_QWORD *)&v47[4] = "nw_service_connector_remove_active_outgoing_request";
        _os_log_impl(&dword_182FBE000, v20, v25, "%{public}s called with null request", v47, 0xCu);
      }
      goto LABEL_74;
    }
    if (type == OS_LOG_TYPE_DEFAULT)
    {
      __nwlog_obj();
      v20 = objc_claimAutoreleasedReturnValue();
      v36 = buf[0];
      if (os_log_type_enabled(v20, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)v47 = 136446210;
        *(_QWORD *)&v47[4] = "nw_service_connector_remove_active_outgoing_request";
        _os_log_impl(&dword_182FBE000, v20, v36, "%{public}s called with null request, backtrace limit exceeded", v47, 0xCu);
      }
      goto LABEL_74;
    }
    v29 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v20 = objc_claimAutoreleasedReturnValue();
    v32 = buf[0];
    v33 = os_log_type_enabled(v20, (os_log_type_t)buf[0]);
    if (!v29)
    {
      if (v33)
      {
        *(_DWORD *)v47 = 136446210;
        *(_QWORD *)&v47[4] = "nw_service_connector_remove_active_outgoing_request";
        _os_log_impl(&dword_182FBE000, v20, v32, "%{public}s called with null request, no backtrace", v47, 0xCu);
      }
      goto LABEL_74;
    }
    if (v33)
    {
      *(_DWORD *)v47 = 136446466;
      *(_QWORD *)&v47[4] = "nw_service_connector_remove_active_outgoing_request";
      *(_WORD *)&v47[12] = 2082;
      *(_QWORD *)&v47[14] = v29;
      _os_log_impl(&dword_182FBE000, v20, v32, "%{public}s called with null request, dumping backtrace:%{public}s", v47, 0x16u);
    }
LABEL_55:

    free(v29);
    if (!v8)
      goto LABEL_25;
    goto LABEL_24;
  }
  nwsc_request_stop_path_watcher(v4);
  *((_BYTE *)v5 + 616) &= 0xE7u;
  v73 = 0;
  v71 = 0u;
  v72 = 0u;
  v69 = 0u;
  v70 = 0u;
  v67 = 0u;
  v68 = 0u;
  v65 = 0u;
  v66 = 0u;
  v63 = 0u;
  v64 = 0u;
  v61 = 0u;
  v62 = 0u;
  v59 = 0u;
  v60 = 0u;
  v57 = 0u;
  v58 = 0u;
  v55 = 0u;
  v56 = 0u;
  v53 = 0u;
  v54 = 0u;
  v51 = 0u;
  v52 = 0u;
  v49 = 0u;
  v50 = 0u;
  v48 = 0u;
  memset(v47, 0, sizeof(v47));
  if (nwsc_get_identifier(v5->endpoint, (uint64_t)v5->service, v47))
  {
    nw_dictionary_set_value((uint64_t)v3->activeOutgoingRequests, (const char *)v47, 0);
    goto LABEL_25;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v6 = (id)gLogObj;
  endpoint = v5->endpoint;
  *(_DWORD *)buf = 136446722;
  v40 = "nw_service_connector_remove_active_outgoing_request";
  v41 = 2114;
  v42 = endpoint;
  v43 = 2082;
  service = v5->service;
  v8 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v37 = 0;
  if (!__nwlog_fault(v8, &type, &v37))
    goto LABEL_23;
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v9 = (id)gLogObj;
    v10 = type;
    if (os_log_type_enabled(v9, type))
    {
      v11 = v5->endpoint;
      *(_DWORD *)buf = 136446722;
      v40 = "nw_service_connector_remove_active_outgoing_request";
      v41 = 2114;
      v42 = v11;
      v43 = 2082;
      service = v5->service;
      _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s Could not get identifier for endpoint %{public}@, service %{public}s", buf, 0x20u);
    }
LABEL_22:

    goto LABEL_23;
  }
  if (!v37)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v9 = (id)gLogObj;
    v16 = type;
    if (os_log_type_enabled(v9, type))
    {
      v17 = v5->endpoint;
      *(_DWORD *)buf = 136446722;
      v40 = "nw_service_connector_remove_active_outgoing_request";
      v41 = 2114;
      v42 = v17;
      v43 = 2082;
      service = v5->service;
      _os_log_impl(&dword_182FBE000, v9, v16, "%{public}s Could not get identifier for endpoint %{public}@, service %{public}s, backtrace limit exceeded", buf, 0x20u);
    }
    goto LABEL_22;
  }
  v12 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v9 = (id)gLogObj;
  v13 = type;
  v14 = os_log_type_enabled(v9, type);
  if (!v12)
  {
    if (v14)
    {
      v18 = v5->endpoint;
      *(_DWORD *)buf = 136446722;
      v40 = "nw_service_connector_remove_active_outgoing_request";
      v41 = 2114;
      v42 = v18;
      v43 = 2082;
      service = v5->service;
      _os_log_impl(&dword_182FBE000, v9, v13, "%{public}s Could not get identifier for endpoint %{public}@, service %{public}s, no backtrace", buf, 0x20u);
    }
    goto LABEL_22;
  }
  if (v14)
  {
    v15 = v5->endpoint;
    *(_DWORD *)buf = 136446978;
    v40 = "nw_service_connector_remove_active_outgoing_request";
    v41 = 2114;
    v42 = v15;
    v43 = 2082;
    service = v5->service;
    v45 = 2082;
    v46 = v12;
    _os_log_impl(&dword_182FBE000, v9, v13, "%{public}s Could not get identifier for endpoint %{public}@, service %{public}s, dumping backtrace:%{public}s", buf, 0x2Au);
  }

  free(v12);
  if (v8)
    goto LABEL_24;
LABEL_25:

}

void sub_1838699AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void nwsc_request_stop_path_watcher(NWConcrete_nw_unique_connection_request *a1)
{
  NWConcrete_nw_unique_connection_request *v1;
  NSObject *v2;
  OS_nw_path_evaluator *pathEvaluator;
  OS_nw_path_evaluator *v4;
  int v5;
  const char *v6;
  __int16 v7;
  NWConcrete_nw_unique_connection_request *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v2 = (id)gLogObj;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v5 = 136446466;
    v6 = "nwsc_request_stop_path_watcher";
    v7 = 2114;
    v8 = v1;
    _os_log_impl(&dword_182FBE000, v2, OS_LOG_TYPE_DEFAULT, "%{public}s stopping path watcher request %{public}@", (uint8_t *)&v5, 0x16u);
  }

  pathEvaluator = v1->pathEvaluator;
  if (pathEvaluator)
  {
    nw_path_evaluator_cancel(pathEvaluator);
    v4 = v1->pathEvaluator;
    v1->pathEvaluator = 0;

  }
  *((_BYTE *)v1 + 616) &= ~0x80u;

}

void sub_183869AC8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL nwsc_get_identifier(void *a1, uint64_t a2, _BYTE *a3)
{
  id v5;
  uint64_t endpoint_identifier;
  unint64_t v7;
  _BYTE *v8;
  unint64_t v9;
  NSObject *v10;
  void *v11;
  _BOOL8 result;
  uint64_t v13;
  int v14;
  NSObject *v15;
  void *v16;
  NSObject *v17;
  void *v18;
  NSObject *v19;
  void *v20;
  NSObject *v21;
  void *v22;
  unint64_t v23;

  v5 = a1;
  endpoint_identifier = nwsc_get_endpoint_identifier(v5, (uint64_t)a3);
  if ((endpoint_identifier & 1) == 0)
  {
LABEL_25:

    return endpoint_identifier;
  }
  if (!a3)
  {
    __nwlog_obj();
    v15 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v15, OS_LOG_TYPE_ERROR);
    v16 = (void *)_os_log_send_and_compose_impl();

    result = __nwlog_abort((uint64_t)v16);
    if (result)
      goto LABEL_35;
    free(v16);
  }
  v7 = 436;
  v8 = a3;
  while (*v8)
  {
    ++v8;
    if (!--v7)
      goto LABEL_10;
  }
  if (v7 >= 2)
    *v8++ = 64;
  *v8 = 0;
LABEL_10:
  if (!a3)
  {
    __nwlog_obj();
    v17 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v17, OS_LOG_TYPE_ERROR);
    v18 = (void *)_os_log_send_and_compose_impl();

    result = __nwlog_abort((uint64_t)v18);
    if (result)
      goto LABEL_35;
    free(v18);
    if (a2)
      goto LABEL_12;
LABEL_30:
    __nwlog_obj();
    v19 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v19, OS_LOG_TYPE_ERROR);
    v20 = (void *)_os_log_send_and_compose_impl();

    result = __nwlog_abort((uint64_t)v20);
    if (result)
      goto LABEL_35;
    free(v20);
    goto LABEL_12;
  }
  if (!a2)
    goto LABEL_30;
LABEL_12:
  v9 = 436;
  do
  {
    if (!*a3)
    {
      if (a2)
      {
        if (v9 >= 2)
        {
LABEL_20:
          v13 = 0;
          while (1)
          {
            v14 = *(unsigned __int8 *)(a2 + v13);
            a3[v13] = v14;
            if (!v14)
              goto LABEL_25;
            --v9;
            ++v13;
            if (v9 <= 1)
            {
              a3 += v13;
              break;
            }
          }
        }
      }
      else
      {
        v23 = v9;
        __nwlog_obj();
        v21 = objc_claimAutoreleasedReturnValue();
        os_log_type_enabled(v21, OS_LOG_TYPE_ERROR);
        v22 = (void *)_os_log_send_and_compose_impl();

        result = __nwlog_abort((uint64_t)v22);
        if (result)
          goto LABEL_35;
        free(v22);
        v9 = v23;
        if (v23 >= 2)
          goto LABEL_20;
      }
      *a3 = 0;
      goto LABEL_25;
    }
    ++a3;
    --v9;
  }
  while (v9);
  if (a2)
    goto LABEL_25;
  __nwlog_obj();
  v10 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);
  v11 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v11);
  if (!result)
  {
    free(v11);
    goto LABEL_25;
  }
LABEL_35:
  __break(1u);
  return result;
}

void sub_183869ED8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t nwsc_get_endpoint_identifier(void *a1, uint64_t a2)
{
  NSObject *v3;
  char *v4;
  unint64_t v5;
  _BYTE *v6;
  NSObject *v7;
  uint64_t v8;
  int v9;
  int address_family;
  unint64_t v11;
  char *v12;
  char v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v20;
  const char *v21;
  __int16 v22;
  NSObject *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_OWORD *)(a2 + 144) = 0u;
  *(_OWORD *)(a2 + 160) = 0u;
  *(_OWORD *)(a2 + 176) = 0u;
  *(_OWORD *)(a2 + 192) = 0u;
  *(_OWORD *)(a2 + 208) = 0u;
  *(_OWORD *)(a2 + 224) = 0u;
  *(_OWORD *)(a2 + 240) = 0u;
  *(_OWORD *)(a2 + 256) = 0u;
  *(_OWORD *)(a2 + 272) = 0u;
  *(_OWORD *)(a2 + 288) = 0u;
  *(_OWORD *)(a2 + 304) = 0u;
  *(_OWORD *)(a2 + 320) = 0u;
  *(_OWORD *)(a2 + 336) = 0u;
  *(_OWORD *)(a2 + 352) = 0u;
  *(_OWORD *)(a2 + 368) = 0u;
  *(_OWORD *)(a2 + 384) = 0u;
  *(_OWORD *)(a2 + 400) = 0u;
  *(_OWORD *)(a2 + 416) = 0u;
  *(_DWORD *)(a2 + 432) = 0;
  v4 = nw_endpoint_copy_address_string(v3);
  if (!v4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v7 = (id)gLogObj;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v20 = 136446466;
      v21 = "nwsc_get_endpoint_identifier";
      v22 = 2112;
      v23 = v3;
      _os_log_impl(&dword_182FBE000, v7, OS_LOG_TYPE_ERROR, "%{public}s Could not get address string from endpoint %@", (uint8_t *)&v20, 0x16u);
    }
    goto LABEL_35;
  }
  v5 = 436;
  v6 = (_BYTE *)a2;
  while (*v6)
  {
    ++v6;
    if (!--v5)
      goto LABEL_15;
  }
  if (v5 < 2)
  {
LABEL_14:
    *v6 = 0;
  }
  else
  {
    v8 = 0;
    while (1)
    {
      v9 = v4[v8];
      v6[v8] = v9;
      if (!v9)
        break;
      --v5;
      ++v8;
      if (v5 <= 1)
      {
        v6 += v8;
        goto LABEL_14;
      }
    }
  }
LABEL_15:
  free(v4);
  address_family = nw_endpoint_get_address_family(v3);
  v11 = 436;
  v12 = (char *)a2;
  if (address_family == 30)
  {
    while (*v12)
    {
      ++v12;
      if (!--v11)
        goto LABEL_28;
    }
    if (v11 < 2)
      goto LABEL_27;
    v13 = 46;
    goto LABEL_26;
  }
  while (*v12)
  {
    ++v12;
    if (!--v11)
      goto LABEL_28;
  }
  if (v11 >= 2)
  {
    v13 = 58;
LABEL_26:
    *v12++ = v13;
  }
LABEL_27:
  *v12 = 0;
LABEL_28:
  v14 = nw_endpoint_copy_port_string(v3);
  if (!v14)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v7 = (id)gLogObj;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v20 = 136446466;
      v21 = "nwsc_get_endpoint_identifier";
      v22 = 2112;
      v23 = v3;
      _os_log_impl(&dword_182FBE000, v7, OS_LOG_TYPE_ERROR, "%{public}s Could not get port string from endpoint %@", (uint8_t *)&v20, 0x16u);
    }
LABEL_35:

    v16 = 0;
    *(_DWORD *)(a2 + 432) = 0;
    *(_OWORD *)(a2 + 400) = 0u;
    *(_OWORD *)(a2 + 416) = 0u;
    *(_OWORD *)(a2 + 368) = 0u;
    *(_OWORD *)(a2 + 384) = 0u;
    *(_OWORD *)(a2 + 336) = 0u;
    *(_OWORD *)(a2 + 352) = 0u;
    *(_OWORD *)(a2 + 304) = 0u;
    *(_OWORD *)(a2 + 320) = 0u;
    *(_OWORD *)(a2 + 272) = 0u;
    *(_OWORD *)(a2 + 288) = 0u;
    *(_OWORD *)(a2 + 240) = 0u;
    *(_OWORD *)(a2 + 256) = 0u;
    *(_OWORD *)(a2 + 208) = 0u;
    *(_OWORD *)(a2 + 224) = 0u;
    *(_OWORD *)(a2 + 176) = 0u;
    *(_OWORD *)(a2 + 192) = 0u;
    *(_OWORD *)(a2 + 144) = 0u;
    *(_OWORD *)(a2 + 160) = 0u;
    *(_OWORD *)(a2 + 112) = 0u;
    *(_OWORD *)(a2 + 128) = 0u;
    *(_OWORD *)(a2 + 80) = 0u;
    *(_OWORD *)(a2 + 96) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)a2 = 0u;
    goto LABEL_43;
  }
  v15 = 436;
  while (*(_BYTE *)a2)
  {
    ++a2;
    if (!--v15)
      goto LABEL_42;
  }
  if (v15 < 2)
  {
LABEL_41:
    *(_BYTE *)a2 = 0;
  }
  else
  {
    v17 = 0;
    while (1)
    {
      v18 = v14[v17];
      *(_BYTE *)(a2 + v17) = v18;
      if (!v18)
        break;
      --v15;
      ++v17;
      if (v15 <= 1)
      {
        a2 += v17;
        goto LABEL_41;
      }
    }
  }
LABEL_42:
  free(v14);
  v16 = 1;
LABEL_43:

  return v16;
}

void sub_18386A208(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZL57nw_service_connector_trigger_request_complete_block_innerP31NWConcrete_nw_service_connectorP39NWConcrete_nw_unique_connection_requestU13block_pointerFvP24NWConcrete_nw_connectionP9__CFErrorES4_i_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void (**v5)(void *, _QWORD, CFErrorRef);
  uint64_t v6;
  void *v7;
  NWConcrete_nw_unique_connection_request *v8;
  NSObject *v9;
  CFErrorRef v10;
  void *v11;
  os_unfair_lock_s *v12;
  os_unfair_lock_s *v13;
  char *v14;
  _QWORD *v15;
  void *v16;
  NSObject *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  NSObject *v28;
  os_log_type_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  char *backtrace_string;
  os_log_type_t v35;
  _BOOL4 v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  os_log_type_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  os_log_type_t type;
  _BYTE buf[24];
  void *v53;
  _BYTE v54[10];
  __int16 v55;
  uint64_t v56;
  __int16 v57;
  char *v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  v2 = _Block_copy(*(const void **)(a1 + 64));
  v3 = v2;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    v5 = (void (**)(void *, _QWORD, CFErrorRef))_Block_copy(*(const void **)(v4 + 592));

    v6 = *(_QWORD *)(a1 + 32);
    v7 = *(void **)(v6 + 592);
    *(_QWORD *)(v6 + 592) = 0;

    v8 = (NWConcrete_nw_unique_connection_request *)*(id *)(a1 + 32);
    nwsc_request_stop_path_watcher(v8);
    *((_BYTE *)v8 + 616) &= 0xE7u;

    v9 = *(NSObject **)(a1 + 40);
    if (v9)
      goto LABEL_3;
  }
  else
  {
    v5 = (void (**)(void *, _QWORD, CFErrorRef))v2;
    v9 = *(NSObject **)(a1 + 40);
    if (v9)
    {
LABEL_3:
      v10 = nw_error_copy_cf_error(v9);
      if (v5)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  v10 = 0;
  if (v5)
  {
LABEL_4:
    v11 = *(void **)(a1 + 48);
    if (v11)
    {
      v12 = v11;
      v13 = v12 + 34;
      *(_QWORD *)buf = MEMORY[0x1E0C809B0];
      *(_QWORD *)&buf[8] = 3221225472;
      *(_QWORD *)&buf[16] = __nw_connection_allow_reset_queue_block_invoke;
      v53 = &unk_1E14ACFD0;
      v14 = v12;
      *(_QWORD *)v54 = v14;
      os_unfair_lock_lock(v13);
      __nw_connection_allow_reset_queue_block_invoke((uint64_t)buf);
      os_unfair_lock_unlock(v13);

      v15 = *(_QWORD **)(a1 + 32);
      if (v15)
      {
        v16 = (void *)v15[2];
        if (v16)
        {
          if (!v10)
            nw_service_connector_apply_user_parameters(*(void **)(a1 + 56), v15, *(void **)(a1 + 48), v16);
        }
      }
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v17 = (id)gLogObj;
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      v19 = *(void **)(a1 + 48);
      v18 = *(_QWORD *)(a1 + 56);
      v21 = *(_QWORD *)(a1 + 32);
      v20 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)buf = 136447234;
      *(_QWORD *)&buf[4] = "nw_service_connector_trigger_request_complete_block_inner_block_invoke";
      *(_WORD *)&buf[12] = 2114;
      *(_QWORD *)&buf[14] = v18;
      *(_WORD *)&buf[22] = 2114;
      v53 = v19;
      *(_WORD *)v54 = 2114;
      *(_QWORD *)&v54[2] = v20;
      v55 = 2114;
      v56 = v21;
      _os_log_impl(&dword_182FBE000, v17, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ calling request completion block with connection %{public}@ error %{public}@ for %{public}@", buf, 0x34u);
    }

    v5[2](v5, *(_QWORD *)(a1 + 48), v10);
    goto LABEL_21;
  }
LABEL_14:
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v22 = (id)gLogObj;
  v24 = *(void **)(a1 + 48);
  v23 = *(_QWORD *)(a1 + 56);
  v26 = *(_QWORD *)(a1 + 32);
  v25 = *(_QWORD *)(a1 + 40);
  *(_DWORD *)buf = 136447234;
  *(_QWORD *)&buf[4] = "nw_service_connector_trigger_request_complete_block_inner_block_invoke";
  *(_WORD *)&buf[12] = 2114;
  *(_QWORD *)&buf[14] = v23;
  *(_WORD *)&buf[22] = 2114;
  v53 = v24;
  *(_WORD *)v54 = 2114;
  *(_QWORD *)&v54[2] = v25;
  v55 = 2114;
  v56 = v26;
  v27 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v50 = 0;
  if (!__nwlog_fault(v27, &type, &v50))
    goto LABEL_19;
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v28 = (id)gLogObj;
    v29 = type;
    if (os_log_type_enabled(v28, type))
    {
      v31 = *(void **)(a1 + 48);
      v30 = *(_QWORD *)(a1 + 56);
      v33 = *(_QWORD *)(a1 + 32);
      v32 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)buf = 136447234;
      *(_QWORD *)&buf[4] = "nw_service_connector_trigger_request_complete_block_inner_block_invoke";
      *(_WORD *)&buf[12] = 2114;
      *(_QWORD *)&buf[14] = v30;
      *(_WORD *)&buf[22] = 2114;
      v53 = v31;
      *(_WORD *)v54 = 2114;
      *(_QWORD *)&v54[2] = v32;
      v55 = 2114;
      v56 = v33;
      _os_log_impl(&dword_182FBE000, v28, v29, "%{public}s %{public}@ tried to call missing request completion block with connection %{public}@ error %{public}@ for %{public}@", buf, 0x34u);
    }
LABEL_18:

LABEL_19:
    if (!v27)
      goto LABEL_21;
    goto LABEL_20;
  }
  if (!v50)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v28 = (id)gLogObj;
    v41 = type;
    if (os_log_type_enabled(v28, type))
    {
      v43 = *(void **)(a1 + 48);
      v42 = *(_QWORD *)(a1 + 56);
      v45 = *(_QWORD *)(a1 + 32);
      v44 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)buf = 136447234;
      *(_QWORD *)&buf[4] = "nw_service_connector_trigger_request_complete_block_inner_block_invoke";
      *(_WORD *)&buf[12] = 2114;
      *(_QWORD *)&buf[14] = v42;
      *(_WORD *)&buf[22] = 2114;
      v53 = v43;
      *(_WORD *)v54 = 2114;
      *(_QWORD *)&v54[2] = v44;
      v55 = 2114;
      v56 = v45;
      _os_log_impl(&dword_182FBE000, v28, v41, "%{public}s %{public}@ tried to call missing request completion block with connection %{public}@ error %{public}@ for %{public}@, backtrace limit exceeded", buf, 0x34u);
    }
    goto LABEL_18;
  }
  backtrace_string = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v28 = (id)gLogObj;
  v35 = type;
  v36 = os_log_type_enabled(v28, type);
  if (!backtrace_string)
  {
    if (v36)
    {
      v47 = *(void **)(a1 + 48);
      v46 = *(_QWORD *)(a1 + 56);
      v49 = *(_QWORD *)(a1 + 32);
      v48 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)buf = 136447234;
      *(_QWORD *)&buf[4] = "nw_service_connector_trigger_request_complete_block_inner_block_invoke";
      *(_WORD *)&buf[12] = 2114;
      *(_QWORD *)&buf[14] = v46;
      *(_WORD *)&buf[22] = 2114;
      v53 = v47;
      *(_WORD *)v54 = 2114;
      *(_QWORD *)&v54[2] = v48;
      v55 = 2114;
      v56 = v49;
      _os_log_impl(&dword_182FBE000, v28, v35, "%{public}s %{public}@ tried to call missing request completion block with connection %{public}@ error %{public}@ for %{public}@, no backtrace", buf, 0x34u);
    }
    goto LABEL_18;
  }
  if (v36)
  {
    v38 = *(void **)(a1 + 48);
    v37 = *(_QWORD *)(a1 + 56);
    v40 = *(_QWORD *)(a1 + 32);
    v39 = *(_QWORD *)(a1 + 40);
    *(_DWORD *)buf = 136447490;
    *(_QWORD *)&buf[4] = "nw_service_connector_trigger_request_complete_block_inner_block_invoke";
    *(_WORD *)&buf[12] = 2114;
    *(_QWORD *)&buf[14] = v37;
    *(_WORD *)&buf[22] = 2114;
    v53 = v38;
    *(_WORD *)v54 = 2114;
    *(_QWORD *)&v54[2] = v39;
    v55 = 2114;
    v56 = v40;
    v57 = 2082;
    v58 = backtrace_string;
    _os_log_impl(&dword_182FBE000, v28, v35, "%{public}s %{public}@ tried to call missing request completion block with connection %{public}@ error %{public}@ for %{public}@, dumping backtrace:%{public}s", buf, 0x3Eu);
  }

  free(backtrace_string);
  if (v27)
LABEL_20:
    free(v27);
LABEL_21:
  if (v10)
    CFRelease(v10);

}

void sub_18386A798(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18386A7AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_service_connector_apply_user_parameters(void *a1, void *a2, void *a3, void *a4)
{
  char *v7;
  id v8;
  NSObject *v9;
  id v10;
  nw_path_t v11;
  nw_path_t v12;
  NWConcrete_nw_path *v13;
  int effective_traffic_class;
  int traffic_class;
  int v16;
  NSObject *v17;
  void *v18;
  char *v19;
  NSObject *v20;
  os_log_type_t v21;
  void *v22;
  os_log_type_t v23;
  char *backtrace_string;
  os_log_type_t v25;
  _BOOL4 v26;
  char *v27;
  os_log_type_t v28;
  _BOOL4 v29;
  os_log_type_t v30;
  os_log_type_t v31;
  char v32;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v35;
  __int16 v36;
  char *v37;
  __int16 v38;
  int v39;
  __int16 v40;
  NSObject *v41;
  __int16 v42;
  id v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v7 = a1;
  v8 = a2;
  v9 = a3;
  v10 = a4;
  if (!v7)
  {
    __nwlog_obj();
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v35 = "nw_service_connector_apply_user_parameters";
    v19 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v32 = 0;
    if (!__nwlog_fault(v19, &type, &v32))
      goto LABEL_49;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v20 = objc_claimAutoreleasedReturnValue();
      v21 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        v35 = "nw_service_connector_apply_user_parameters";
        _os_log_impl(&dword_182FBE000, v20, v21, "%{public}s called with null serviceConnector", buf, 0xCu);
      }
    }
    else if (v32)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v20 = objc_claimAutoreleasedReturnValue();
      v25 = type;
      v26 = os_log_type_enabled(v20, type);
      if (backtrace_string)
      {
        if (v26)
        {
          *(_DWORD *)buf = 136446466;
          v35 = "nw_service_connector_apply_user_parameters";
          v36 = 2082;
          v37 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v20, v25, "%{public}s called with null serviceConnector, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_49:
        if (!v19)
          goto LABEL_15;
LABEL_50:
        free(v19);
        goto LABEL_15;
      }
      if (v26)
      {
        *(_DWORD *)buf = 136446210;
        v35 = "nw_service_connector_apply_user_parameters";
        _os_log_impl(&dword_182FBE000, v20, v25, "%{public}s called with null serviceConnector, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v20 = objc_claimAutoreleasedReturnValue();
      v30 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        v35 = "nw_service_connector_apply_user_parameters";
        _os_log_impl(&dword_182FBE000, v20, v30, "%{public}s called with null serviceConnector, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_48:

    goto LABEL_49;
  }
  if (v9)
  {
    v11 = nw_connection_copy_current_path(v9);
    v12 = v11;
    if (v11)
    {
      v13 = v11;
      if (nw_path_network_is_satisfied_update_reason(v13, 0))
      {
        effective_traffic_class = v13->effective_traffic_class;
        if (!effective_traffic_class)
          effective_traffic_class = nw_parameters_get_traffic_class(v13->parameters);
      }
      else
      {
        effective_traffic_class = 0;
      }

    }
    else
    {
      effective_traffic_class = 0;
    }
    traffic_class = nw_parameters_get_traffic_class(v10);
    if (traffic_class != effective_traffic_class)
    {
      v16 = traffic_class;
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v17 = (id)gLogObj;
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136447234;
        v35 = "nw_service_connector_apply_user_parameters";
        v36 = 2114;
        v37 = v7;
        v38 = 1024;
        v39 = v16;
        v40 = 2114;
        v41 = v9;
        v42 = 2114;
        v43 = v8;
        _os_log_impl(&dword_182FBE000, v17, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ resetting traffic class to %u for connection %{public}@ for %{public}@", buf, 0x30u);
      }

      nw_connection_reset_traffic_class(v9, v16);
    }

    goto LABEL_15;
  }
  __nwlog_obj();
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v35 = "nw_service_connector_apply_user_parameters";
  v19 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v32 = 0;
  if (!__nwlog_fault(v19, &type, &v32))
    goto LABEL_49;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v20 = objc_claimAutoreleasedReturnValue();
    v23 = type;
    if (os_log_type_enabled(v20, type))
    {
      *(_DWORD *)buf = 136446210;
      v35 = "nw_service_connector_apply_user_parameters";
      _os_log_impl(&dword_182FBE000, v20, v23, "%{public}s called with null acceptedConnection", buf, 0xCu);
    }
    goto LABEL_48;
  }
  if (!v32)
  {
    __nwlog_obj();
    v20 = objc_claimAutoreleasedReturnValue();
    v31 = type;
    if (os_log_type_enabled(v20, type))
    {
      *(_DWORD *)buf = 136446210;
      v35 = "nw_service_connector_apply_user_parameters";
      _os_log_impl(&dword_182FBE000, v20, v31, "%{public}s called with null acceptedConnection, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_48;
  }
  v27 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v20 = objc_claimAutoreleasedReturnValue();
  v28 = type;
  v29 = os_log_type_enabled(v20, type);
  if (!v27)
  {
    if (v29)
    {
      *(_DWORD *)buf = 136446210;
      v35 = "nw_service_connector_apply_user_parameters";
      _os_log_impl(&dword_182FBE000, v20, v28, "%{public}s called with null acceptedConnection, no backtrace", buf, 0xCu);
    }
    goto LABEL_48;
  }
  if (v29)
  {
    *(_DWORD *)buf = 136446466;
    v35 = "nw_service_connector_apply_user_parameters";
    v36 = 2082;
    v37 = v27;
    _os_log_impl(&dword_182FBE000, v20, v28, "%{public}s called with null acceptedConnection, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v27);
  if (v19)
    goto LABEL_50;
LABEL_15:

}

void sub_18386ADA0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

nw_connection_t nwsc_request_create_and_start_connection_inner(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  unint64_t v7;
  void *v8;
  id v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  void *v13;
  NSObject *v14;
  void *v15;
  unsigned __int16 *v16;
  char *v17;
  unint64_t v18;
  BOOL v19;
  size_t v20;
  size_t v21;
  unsigned int v22;
  unsigned __int8 v23;
  char *backtrace_string;
  os_log_type_t v25;
  _BOOL4 v26;
  id v27;
  os_log_type_t v28;
  id v29;
  char *v30;
  NSObject *v31;
  os_log_type_t v32;
  os_log_type_t v33;
  const __CFData *v34;
  CFDataRef v35;
  CFDataRef v36;
  char *v37;
  dispatch_data_t v38;
  NSObject *v39;
  NSObject *v40;
  const char *v41;
  char *v42;
  NSObject *v43;
  os_log_type_t v44;
  id v45;
  os_log_type_t v46;
  const char *v47;
  char *v48;
  NSObject *v49;
  os_log_type_t v50;
  id v51;
  char *v52;
  NSObject *v53;
  os_log_type_t v54;
  char *v55;
  NSObject *v56;
  os_log_type_t v57;
  _BOOL4 v58;
  os_log_type_t v59;
  char *v60;
  _BOOL4 v61;
  os_log_type_t v62;
  os_log_type_t v63;
  nw_connection_t v64;
  os_log_type_t v65;
  os_log_type_t v66;
  os_log_type_t v67;
  NSObject *v68;
  void *v69;
  id v70;
  NSObject *legacy_tcp_socket;
  id v72;
  char *v73;
  NSObject *v74;
  os_log_type_t v75;
  char *v76;
  os_log_type_t v77;
  _BOOL4 v78;
  unsigned __int16 *v79;
  NSObject *v80;
  char *v81;
  NSObject *v82;
  NSObject *v83;
  os_log_type_t v84;
  id v85;
  char *v86;
  NSObject *v87;
  os_log_type_t v88;
  id v89;
  char *v90;
  NSObject *v91;
  os_log_type_t v92;
  char *v93;
  os_log_type_t v94;
  _BOOL4 v95;
  char *v96;
  os_log_type_t v97;
  _BOOL4 v98;
  os_log_type_t v99;
  os_log_type_t v100;
  void *v102;
  os_log_type_t v103;
  char *v104;
  NSObject *v105;
  os_log_type_t v106;
  _BOOL4 v107;
  NSObject *v108;
  os_log_type_t v109;
  os_log_type_t v110;
  NSObject *endpoint;
  _QWORD handler[4];
  unsigned __int16 *v113;
  NSObject *v114;
  char *v115;
  char v116;
  char v117;
  os_log_type_t v118;
  CFErrorRef error;
  os_log_type_t type[4];
  const char *v121;
  __int16 v122;
  CFErrorRef v123;
  uint8_t buf[4];
  const char *v125;
  _OWORD v126[21];
  uint64_t v127;

  v127 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = a3;
  v8 = (void *)v7;
  if (!((unint64_t)v6 | v7))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v9 = (id)gLogObj;
    *(_DWORD *)buf = 136446466;
    v125 = "nwsc_request_create_and_start_connection_inner";
    LOWORD(v126[0]) = 2114;
    *(_QWORD *)((char *)v126 + 2) = v5;
    v10 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(error) = 0;
    if (!__nwlog_fault(v10, type, &error))
      goto LABEL_101;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v11 = (id)gLogObj;
      v12 = type[0];
      if (os_log_type_enabled(v11, type[0]))
      {
        *(_DWORD *)buf = 136446466;
        v125 = "nwsc_request_create_and_start_connection_inner";
        LOWORD(v126[0]) = 2114;
        *(_QWORD *)((char *)v126 + 2) = v5;
        _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s %{public}@ tried to start connection on without request nor endpoint", buf, 0x16u);
      }
    }
    else if ((_BYTE)error)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v11 = (id)gLogObj;
      v25 = type[0];
      v26 = os_log_type_enabled(v11, type[0]);
      if (backtrace_string)
      {
        if (v26)
        {
          *(_DWORD *)buf = 136446722;
          v125 = "nwsc_request_create_and_start_connection_inner";
          LOWORD(v126[0]) = 2114;
          *(_QWORD *)((char *)v126 + 2) = v5;
          WORD5(v126[0]) = 2082;
          *(_QWORD *)((char *)v126 + 12) = backtrace_string;
          _os_log_impl(&dword_182FBE000, v11, v25, "%{public}s %{public}@ tried to start connection on without request nor endpoint, dumping backtrace:%{public}s", buf, 0x20u);
        }

        free(backtrace_string);
        if (!v10)
          goto LABEL_103;
        goto LABEL_102;
      }
      if (v26)
      {
        *(_DWORD *)buf = 136446466;
        v125 = "nwsc_request_create_and_start_connection_inner";
        LOWORD(v126[0]) = 2114;
        *(_QWORD *)((char *)v126 + 2) = v5;
        _os_log_impl(&dword_182FBE000, v11, v25, "%{public}s %{public}@ tried to start connection on without request nor endpoint, no backtrace", buf, 0x16u);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v11 = (id)gLogObj;
      v33 = type[0];
      if (os_log_type_enabled(v11, type[0]))
      {
        *(_DWORD *)buf = 136446466;
        v125 = "nwsc_request_create_and_start_connection_inner";
        LOWORD(v126[0]) = 2114;
        *(_QWORD *)((char *)v126 + 2) = v5;
        _os_log_impl(&dword_182FBE000, v11, v33, "%{public}s %{public}@ tried to start connection on without request nor endpoint, backtrace limit exceeded", buf, 0x16u);
      }
    }
    goto LABEL_100;
  }
  v13 = (void *)v7;
  if (!v6)
  {
LABEL_14:
    endpoint = v13;
    v16 = (unsigned __int16 *)v5;
    v17 = (char *)v6;
    if (v16)
    {
      if (!v16[24])
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v29 = (id)gLogObj;
        *(_DWORD *)buf = 136446210;
        v125 = "nw_service_connector_create_initial_payload_for_request";
        v30 = (char *)_os_log_send_and_compose_impl();

        type[0] = OS_LOG_TYPE_ERROR;
        LOBYTE(error) = 0;
        if (!__nwlog_fault(v30, type, &error))
          goto LABEL_116;
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v31 = (id)gLogObj;
          v32 = type[0];
          if (os_log_type_enabled(v31, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            v125 = "nw_service_connector_create_initial_payload_for_request";
            _os_log_impl(&dword_182FBE000, v31, v32, "%{public}s Bad local port", buf, 0xCu);
          }
        }
        else if ((_BYTE)error)
        {
          v47 = __nw_create_backtrace_string();
          if (v47)
          {
            v48 = (char *)v47;
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v49 = (id)gLogObj;
            v50 = type[0];
            if (os_log_type_enabled(v49, type[0]))
            {
              *(_DWORD *)buf = 136446466;
              v125 = "nw_service_connector_create_initial_payload_for_request";
              LOWORD(v126[0]) = 2082;
              *(_QWORD *)((char *)v126 + 2) = v48;
              _os_log_impl(&dword_182FBE000, v49, v50, "%{public}s Bad local port, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(v48);
            if (!v30)
              goto LABEL_118;
            goto LABEL_117;
          }
          __nwlog_obj();
          v31 = objc_claimAutoreleasedReturnValue();
          v65 = type[0];
          if (os_log_type_enabled(v31, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            v125 = "nw_service_connector_create_initial_payload_for_request";
            _os_log_impl(&dword_182FBE000, v31, v65, "%{public}s Bad local port, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v31 = (id)gLogObj;
          v62 = type[0];
          if (os_log_type_enabled(v31, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            v125 = "nw_service_connector_create_initial_payload_for_request";
            _os_log_impl(&dword_182FBE000, v31, v62, "%{public}s Bad local port, backtrace limit exceeded", buf, 0xCu);
          }
        }
        goto LABEL_214;
      }
      if (nw_service_connector_get_new_sequence_number(void)::onceToken != -1)
        dispatch_once(&nw_service_connector_get_new_sequence_number(void)::onceToken, &__block_literal_global_181);
      do
        v18 = __ldaxr((unint64_t *)&nw_service_connector_get_new_sequence_number(void)::sNWSCSequenceNumber);
      while (__stlxr(v18 + 1, (unint64_t *)&nw_service_connector_get_new_sequence_number(void)::sNWSCSequenceNumber));
      if (!v18)
      {
        do
        {
          v18 = __ldaxr((unint64_t *)&nw_service_connector_get_new_sequence_number(void)::sNWSCSequenceNumber);
          if (__stlxr(v18 + 1, (unint64_t *)&nw_service_connector_get_new_sequence_number(void)::sNWSCSequenceNumber))
          {
            v19 = 1;
          }
          else
          {
            v19 = v18 == 0;
          }
        }
        while (v19);
      }
      if (!v6)
      {
        v23 = 0;
        v22 = 79;
LABEL_47:
        memset(v126, 0, sizeof(v126));
        *(_WORD *)buf = bswap32(v22) >> 16;
        *(_WORD *)&buf[2] = bswap32(v16[24]) >> 16;
        v125 = (const char *)bswap64(v18);
        if (v6)
        {
          v126[0] = *((_OWORD *)v17 + 30);
          LOBYTE(v126[1]) = v23;
          memcpy((char *)&v126[1] + 1, v17 + 24, v23);
        }
        v34 = (const __CFData *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBytesNoCopy:length:freeWhenDone:", buf, (unsigned __int16)v22 + 2, 0);
        error = 0;
        v35 = SecKeyCreateSignature(*((SecKeyRef *)v16 + 14), (SecKeyAlgorithm)*MEMORY[0x1E0CD6E20], v34, &error);
        v36 = v35;
        if (!v35)
        {
          __nwlog_obj();
          v108 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v108, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)type = 136446466;
            v121 = "nw_service_connector_create_initial_payload_for_request";
            v122 = 2112;
            v123 = error;
            _os_log_impl(&dword_182FBE000, v108, OS_LOG_TYPE_ERROR, "%{public}s SecKeyCreateSignature failed with error %@", (uint8_t *)type, 0x16u);
          }

          if (error)
          {
            CFRelease(error);
            v68 = 0;
            error = 0;
          }
          else
          {
            v68 = 0;
          }
LABEL_126:

          if (v68)
          {
            if (v6)
            {
              v69 = (void *)*((_QWORD *)v17 + 2);
              if (v69)
              {
                v70 = v69;
                legacy_tcp_socket = -[NWConcrete_nw_parameters initWithParameters:stripConnected:shallowCopy:]((id *)[NWConcrete_nw_parameters alloc], v70, 0, 0);

                nw_parameters_set_data_mode(legacy_tcp_socket, 2u);
                nw_parameters_set_allow_socket_access(legacy_tcp_socket, 1);
                nw_parameters_set_tfo(legacy_tcp_socket, 1);
                goto LABEL_142;
              }
            }
            legacy_tcp_socket = nw_parameters_create_legacy_tcp_socket(&__block_literal_global_189_48961);
            if (legacy_tcp_socket)
            {
LABEL_142:
              nw_parameters_set_fast_open_enabled(legacy_tcp_socket, 1);
              nw_parameters_set_fast_open_force_enable(legacy_tcp_socket, 1);
              nw_parameters_set_no_proxy(legacy_tcp_socket, 1);
              v64 = nw_connection_create(endpoint, legacy_tcp_socket);
              if (v64)
              {
                if (v6)
                {
                  nwsc_request_stop_path_watcher((NWConcrete_nw_unique_connection_request *)v17);
                  objc_storeStrong((id *)v17 + 72, v64);
                }
                nw_connection_set_queue(v64, *((dispatch_queue_t *)v16 + 4));
                nw_connection_send(v64, v68, (nw_content_context_t)&__block_literal_global_41718, 1, &__block_literal_global_24144);
                handler[0] = MEMORY[0x1E0C809B0];
                handler[1] = 3221225472;
                handler[2] = ___ZL46nwsc_request_create_and_start_connection_innerP31NWConcrete_nw_service_connectorP39NWConcrete_nw_unique_connection_requestPU25objcproto14OS_nw_endpoint8NSObject21nwsc_operation_code_e_block_invoke_190;
                handler[3] = &unk_1E14A3CC8;
                v79 = v16;
                v113 = v79;
                v80 = v64;
                v114 = v80;
                v81 = v17;
                v115 = v81;
                v116 = 0;
                nw_connection_set_state_changed_handler(v80, handler);
                nw_connection_start(v80);
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                v82 = (id)gLogObj;
                if (os_log_type_enabled(v82, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)buf = 136446722;
                  v125 = "nwsc_request_create_and_start_connection_inner";
                  LOWORD(v126[0]) = 2114;
                  *(_QWORD *)((char *)v126 + 2) = v79;
                  WORD5(v126[0]) = 2114;
                  *(_QWORD *)((char *)v126 + 12) = v81;
                  _os_log_impl(&dword_182FBE000, v82, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ sending connection request %{public}@", buf, 0x20u);
                }

                v83 = v80;
LABEL_188:

LABEL_195:
                goto LABEL_196;
              }
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v85 = (id)gLogObj;
              *(_DWORD *)buf = 136446210;
              v125 = "nwsc_request_create_and_start_connection_inner";
              v86 = (char *)_os_log_send_and_compose_impl();

              type[0] = OS_LOG_TYPE_ERROR;
              LOBYTE(error) = 0;
              if (__nwlog_fault(v86, type, &error))
              {
                if (type[0] == OS_LOG_TYPE_FAULT)
                {
                  __nwlog_obj();
                  v87 = objc_claimAutoreleasedReturnValue();
                  v88 = type[0];
                  if (os_log_type_enabled(v87, type[0]))
                  {
                    *(_DWORD *)buf = 136446210;
                    v125 = "nwsc_request_create_and_start_connection_inner";
                    _os_log_impl(&dword_182FBE000, v87, v88, "%{public}s nw_connection_create failed", buf, 0xCu);
                  }
                }
                else if ((_BYTE)error)
                {
                  v93 = (char *)__nw_create_backtrace_string();
                  __nwlog_obj();
                  v87 = objc_claimAutoreleasedReturnValue();
                  v94 = type[0];
                  v95 = os_log_type_enabled(v87, type[0]);
                  if (v93)
                  {
                    if (v95)
                    {
                      *(_DWORD *)buf = 136446466;
                      v125 = "nwsc_request_create_and_start_connection_inner";
                      LOWORD(v126[0]) = 2082;
                      *(_QWORD *)((char *)v126 + 2) = v93;
                      _os_log_impl(&dword_182FBE000, v87, v94, "%{public}s nw_connection_create failed, dumping backtrace:%{public}s", buf, 0x16u);
                    }

                    free(v93);
                    goto LABEL_186;
                  }
                  if (v95)
                  {
                    *(_DWORD *)buf = 136446210;
                    v125 = "nwsc_request_create_and_start_connection_inner";
                    _os_log_impl(&dword_182FBE000, v87, v94, "%{public}s nw_connection_create failed, no backtrace", buf, 0xCu);
                  }
                }
                else
                {
                  __nwlog_obj();
                  v87 = objc_claimAutoreleasedReturnValue();
                  v99 = type[0];
                  if (os_log_type_enabled(v87, type[0]))
                  {
                    *(_DWORD *)buf = 136446210;
                    v125 = "nwsc_request_create_and_start_connection_inner";
                    _os_log_impl(&dword_182FBE000, v87, v99, "%{public}s nw_connection_create failed, backtrace limit exceeded", buf, 0xCu);
                  }
                }

              }
LABEL_186:
              if (v86)
                free(v86);
              goto LABEL_188;
            }
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v89 = (id)gLogObj;
            *(_DWORD *)buf = 136446210;
            v125 = "nwsc_request_create_and_start_connection_inner";
            v90 = (char *)_os_log_send_and_compose_impl();

            type[0] = OS_LOG_TYPE_ERROR;
            LOBYTE(error) = 0;
            if (__nwlog_fault(v90, type, &error))
            {
              if (type[0] == OS_LOG_TYPE_FAULT)
              {
                __nwlog_obj();
                v91 = objc_claimAutoreleasedReturnValue();
                v92 = type[0];
                if (os_log_type_enabled(v91, type[0]))
                {
                  *(_DWORD *)buf = 136446210;
                  v125 = "nwsc_request_create_and_start_connection_inner";
                  _os_log_impl(&dword_182FBE000, v91, v92, "%{public}s nw_parameters_create failed", buf, 0xCu);
                }
              }
              else if ((_BYTE)error)
              {
                v96 = (char *)__nw_create_backtrace_string();
                __nwlog_obj();
                v91 = objc_claimAutoreleasedReturnValue();
                v97 = type[0];
                v98 = os_log_type_enabled(v91, type[0]);
                if (v96)
                {
                  if (v98)
                  {
                    *(_DWORD *)buf = 136446466;
                    v125 = "nwsc_request_create_and_start_connection_inner";
                    LOWORD(v126[0]) = 2082;
                    *(_QWORD *)((char *)v126 + 2) = v96;
                    _os_log_impl(&dword_182FBE000, v91, v97, "%{public}s nw_parameters_create failed, dumping backtrace:%{public}s", buf, 0x16u);
                  }

                  free(v96);
                  goto LABEL_192;
                }
                if (v98)
                {
                  *(_DWORD *)buf = 136446210;
                  v125 = "nwsc_request_create_and_start_connection_inner";
                  _os_log_impl(&dword_182FBE000, v91, v97, "%{public}s nw_parameters_create failed, no backtrace", buf, 0xCu);
                }
              }
              else
              {
                __nwlog_obj();
                v91 = objc_claimAutoreleasedReturnValue();
                v100 = type[0];
                if (os_log_type_enabled(v91, type[0]))
                {
                  *(_DWORD *)buf = 136446210;
                  v125 = "nwsc_request_create_and_start_connection_inner";
                  _os_log_impl(&dword_182FBE000, v91, v100, "%{public}s nw_parameters_create failed, backtrace limit exceeded", buf, 0xCu);
                }
              }

            }
LABEL_192:
            if (v90)
              free(v90);
            v64 = 0;
            goto LABEL_195;
          }
LABEL_130:
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v72 = (id)gLogObj;
          *(_DWORD *)buf = 136446210;
          v125 = "nwsc_request_create_and_start_connection_inner";
          v73 = (char *)_os_log_send_and_compose_impl();

          type[0] = OS_LOG_TYPE_ERROR;
          LOBYTE(error) = 0;
          if (__nwlog_fault(v73, type, &error))
          {
            if (type[0] == OS_LOG_TYPE_FAULT)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v74 = (id)gLogObj;
              v75 = type[0];
              if (os_log_type_enabled(v74, type[0]))
              {
                *(_DWORD *)buf = 136446210;
                v125 = "nwsc_request_create_and_start_connection_inner";
                _os_log_impl(&dword_182FBE000, v74, v75, "%{public}s nw_service_connector_create_initial_payload_for_request failed", buf, 0xCu);
              }
            }
            else if ((_BYTE)error)
            {
              v76 = (char *)__nw_create_backtrace_string();
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v74 = (id)gLogObj;
              v77 = type[0];
              v78 = os_log_type_enabled(v74, type[0]);
              if (v76)
              {
                if (v78)
                {
                  *(_DWORD *)buf = 136446466;
                  v125 = "nwsc_request_create_and_start_connection_inner";
                  LOWORD(v126[0]) = 2082;
                  *(_QWORD *)((char *)v126 + 2) = v76;
                  _os_log_impl(&dword_182FBE000, v74, v77, "%{public}s nw_service_connector_create_initial_payload_for_request failed, dumping backtrace:%{public}s", buf, 0x16u);
                }

                free(v76);
                if (!v73)
                  goto LABEL_156;
                goto LABEL_155;
              }
              if (v78)
              {
                *(_DWORD *)buf = 136446210;
                v125 = "nwsc_request_create_and_start_connection_inner";
                _os_log_impl(&dword_182FBE000, v74, v77, "%{public}s nw_service_connector_create_initial_payload_for_request failed, no backtrace", buf, 0xCu);
              }
            }
            else
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v74 = (id)gLogObj;
              v84 = type[0];
              if (os_log_type_enabled(v74, type[0]))
              {
                *(_DWORD *)buf = 136446210;
                v125 = "nwsc_request_create_and_start_connection_inner";
                _os_log_impl(&dword_182FBE000, v74, v84, "%{public}s nw_service_connector_create_initial_payload_for_request failed, backtrace limit exceeded", buf, 0xCu);
              }
            }

          }
          if (!v73)
          {
LABEL_156:
            v64 = 0;
LABEL_196:

            goto LABEL_197;
          }
LABEL_155:
          free(v73);
          goto LABEL_156;
        }
        if (v6)
          v37 = (char *)&v126[1] + v23 + 1;
        else
          v37 = (char *)v126 + 4;
        -[__CFData getBytes:length:](v35, "getBytes:length:", v37, 64);
        v38 = dispatch_data_create(buf, (unsigned __int16)v22 + 2, 0, 0);
        v39 = v38;
        if (v38)
        {
          v40 = v38;
LABEL_125:
          v68 = v39;

          goto LABEL_126;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v51 = (id)gLogObj;
        *(_DWORD *)type = 136446210;
        v121 = "nw_service_connector_create_initial_payload_for_request";
        v52 = (char *)_os_log_send_and_compose_impl();

        v118 = OS_LOG_TYPE_ERROR;
        v117 = 0;
        if (__nwlog_fault(v52, &v118, &v117))
        {
          if (v118 == OS_LOG_TYPE_FAULT)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v53 = (id)gLogObj;
            v54 = v118;
            if (os_log_type_enabled(v53, v118))
            {
              *(_DWORD *)type = 136446210;
              v121 = "nw_service_connector_create_initial_payload_for_request";
              _os_log_impl(&dword_182FBE000, v53, v54, "%{public}s dispatch_data_create failed", (uint8_t *)type, 0xCu);
            }
          }
          else if (v117)
          {
            v60 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            v53 = objc_claimAutoreleasedReturnValue();
            v110 = v118;
            v61 = os_log_type_enabled(v53, v118);
            if (v60)
            {
              if (v61)
              {
                *(_DWORD *)type = 136446466;
                v121 = "nw_service_connector_create_initial_payload_for_request";
                v122 = 2082;
                v123 = (CFErrorRef)v60;
                _os_log_impl(&dword_182FBE000, v53, v110, "%{public}s dispatch_data_create failed, dumping backtrace:%{public}s", (uint8_t *)type, 0x16u);
              }

              free(v60);
              if (!v52)
                goto LABEL_124;
              goto LABEL_123;
            }
            if (v61)
            {
              *(_DWORD *)type = 136446210;
              v121 = "nw_service_connector_create_initial_payload_for_request";
              _os_log_impl(&dword_182FBE000, v53, v110, "%{public}s dispatch_data_create failed, no backtrace", (uint8_t *)type, 0xCu);
            }
          }
          else
          {
            __nwlog_obj();
            v53 = objc_claimAutoreleasedReturnValue();
            v67 = v118;
            if (os_log_type_enabled(v53, v118))
            {
              *(_DWORD *)type = 136446210;
              v121 = "nw_service_connector_create_initial_payload_for_request";
              _os_log_impl(&dword_182FBE000, v53, v67, "%{public}s dispatch_data_create failed, backtrace limit exceeded", (uint8_t *)type, 0xCu);
            }
          }

        }
        if (!v52)
        {
LABEL_124:
          v39 = 0;
          goto LABEL_125;
        }
LABEL_123:
        free(v52);
        goto LABEL_124;
      }
      *((_QWORD *)v17 + 58) = v18;
      v20 = strnlen(v17 + 24, 0x100uLL);
      v21 = v20;
      if (v20 < 0x100)
      {
        v22 = v20 + 91;
        v23 = v20;
        goto LABEL_47;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v45 = (id)gLogObj;
      *(_DWORD *)buf = 136446466;
      v125 = "nw_service_connector_create_initial_payload_for_request";
      LOWORD(v126[0]) = 2048;
      *(_QWORD *)((char *)v126 + 2) = v21;
      v30 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(error) = 0;
      if (__nwlog_fault(v30, type, &error))
      {
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v31 = (id)gLogObj;
          v46 = type[0];
          if (os_log_type_enabled(v31, type[0]))
          {
            *(_DWORD *)buf = 136446466;
            v125 = "nw_service_connector_create_initial_payload_for_request";
            LOWORD(v126[0]) = 2048;
            *(_QWORD *)((char *)v126 + 2) = v21;
            _os_log_impl(&dword_182FBE000, v31, v46, "%{public}s Service name too long %zu", buf, 0x16u);
          }
        }
        else
        {
          if ((_BYTE)error)
          {
            v55 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            v56 = objc_claimAutoreleasedReturnValue();
            v57 = type[0];
            v58 = os_log_type_enabled(v56, type[0]);
            if (v55)
            {
              if (v58)
              {
                *(_DWORD *)buf = 136446722;
                v125 = "nw_service_connector_create_initial_payload_for_request";
                LOWORD(v126[0]) = 2048;
                *(_QWORD *)((char *)v126 + 2) = v21;
                WORD5(v126[0]) = 2082;
                *(_QWORD *)((char *)v126 + 12) = v55;
                _os_log_impl(&dword_182FBE000, v56, v57, "%{public}s Service name too long %zu, dumping backtrace:%{public}s", buf, 0x20u);
              }

              free(v55);
              if (!v30)
                goto LABEL_118;
              goto LABEL_117;
            }
            if (v58)
            {
              *(_DWORD *)buf = 136446466;
              v125 = "nw_service_connector_create_initial_payload_for_request";
              LOWORD(v126[0]) = 2048;
              *(_QWORD *)((char *)v126 + 2) = v21;
              _os_log_impl(&dword_182FBE000, v56, v57, "%{public}s Service name too long %zu, no backtrace", buf, 0x16u);
            }

            goto LABEL_116;
          }
          __nwlog_obj();
          v31 = objc_claimAutoreleasedReturnValue();
          v66 = type[0];
          if (os_log_type_enabled(v31, type[0]))
          {
            *(_DWORD *)buf = 136446466;
            v125 = "nw_service_connector_create_initial_payload_for_request";
            LOWORD(v126[0]) = 2048;
            *(_QWORD *)((char *)v126 + 2) = v21;
            _os_log_impl(&dword_182FBE000, v31, v66, "%{public}s Service name too long %zu, backtrace limit exceeded", buf, 0x16u);
          }
        }
        goto LABEL_214;
      }
LABEL_116:
      if (!v30)
      {
LABEL_118:

        goto LABEL_130;
      }
LABEL_117:
      free(v30);
      goto LABEL_118;
    }
    __nwlog_obj();
    v102 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v125 = "nw_service_connector_create_initial_payload_for_request";
    v30 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(error) = 0;
    if (!__nwlog_fault(v30, type, &error))
      goto LABEL_116;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v31 = objc_claimAutoreleasedReturnValue();
      v103 = type[0];
      if (os_log_type_enabled(v31, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v125 = "nw_service_connector_create_initial_payload_for_request";
        _os_log_impl(&dword_182FBE000, v31, v103, "%{public}s called with null serviceConnector", buf, 0xCu);
      }
    }
    else
    {
      if ((_BYTE)error)
      {
        v104 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v105 = objc_claimAutoreleasedReturnValue();
        v106 = type[0];
        v107 = os_log_type_enabled(v105, type[0]);
        if (v104)
        {
          if (v107)
          {
            *(_DWORD *)buf = 136446466;
            v125 = "nw_service_connector_create_initial_payload_for_request";
            LOWORD(v126[0]) = 2082;
            *(_QWORD *)((char *)v126 + 2) = v104;
            _os_log_impl(&dword_182FBE000, v105, v106, "%{public}s called with null serviceConnector, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v104);
        }
        else
        {
          if (v107)
          {
            *(_DWORD *)buf = 136446210;
            v125 = "nw_service_connector_create_initial_payload_for_request";
            _os_log_impl(&dword_182FBE000, v105, v106, "%{public}s called with null serviceConnector, no backtrace", buf, 0xCu);
          }

        }
        goto LABEL_116;
      }
      __nwlog_obj();
      v31 = objc_claimAutoreleasedReturnValue();
      v109 = type[0];
      if (os_log_type_enabled(v31, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v125 = "nw_service_connector_create_initial_payload_for_request";
        _os_log_impl(&dword_182FBE000, v31, v109, "%{public}s called with null serviceConnector, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_214:

    goto LABEL_116;
  }
  if ((*((_BYTE *)v6 + 616) & 1) == 0)
  {
    if (*((_QWORD *)v6 + 72))
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v14 = (id)gLogObj;
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446722;
        v125 = "nwsc_request_create_and_start_connection_inner";
        LOWORD(v126[0]) = 2114;
        *(_QWORD *)((char *)v126 + 2) = v5;
        WORD5(v126[0]) = 2114;
        *(_QWORD *)((char *)v126 + 12) = v6;
        _os_log_impl(&dword_182FBE000, v14, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ cancelling previous connection on request %{public}@", buf, 0x20u);
      }

      nw_connection_cancel(*((nw_connection_t *)v6 + 72));
      v15 = (void *)*((_QWORD *)v6 + 72);
      *((_QWORD *)v6 + 72) = 0;

    }
    v13 = (void *)*((_QWORD *)v6 + 1);
    goto LABEL_14;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v27 = (id)gLogObj;
  *(_DWORD *)buf = 136446722;
  v125 = "nwsc_request_create_and_start_connection_inner";
  LOWORD(v126[0]) = 2114;
  *(_QWORD *)((char *)v126 + 2) = v5;
  WORD5(v126[0]) = 2114;
  *(_QWORD *)((char *)v126 + 12) = v6;
  v10 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  LOBYTE(error) = 0;
  if (!__nwlog_fault(v10, type, &error))
    goto LABEL_101;
  if (type[0] == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v11 = (id)gLogObj;
    v28 = type[0];
    if (os_log_type_enabled(v11, type[0]))
    {
      *(_DWORD *)buf = 136446722;
      v125 = "nwsc_request_create_and_start_connection_inner";
      LOWORD(v126[0]) = 2114;
      *(_QWORD *)((char *)v126 + 2) = v5;
      WORD5(v126[0]) = 2114;
      *(_QWORD *)((char *)v126 + 12) = v6;
      _os_log_impl(&dword_182FBE000, v11, v28, "%{public}s %{public}@ tried to start connection on incoming request %{public}@", buf, 0x20u);
    }
  }
  else if ((_BYTE)error)
  {
    v41 = __nw_create_backtrace_string();
    if (v41)
    {
      v42 = (char *)v41;
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v43 = (id)gLogObj;
      v44 = type[0];
      if (os_log_type_enabled(v43, type[0]))
      {
        *(_DWORD *)buf = 136446978;
        v125 = "nwsc_request_create_and_start_connection_inner";
        LOWORD(v126[0]) = 2114;
        *(_QWORD *)((char *)v126 + 2) = v5;
        WORD5(v126[0]) = 2114;
        *(_QWORD *)((char *)v126 + 12) = v6;
        WORD2(v126[1]) = 2082;
        *(_QWORD *)((char *)&v126[1] + 6) = v42;
        _os_log_impl(&dword_182FBE000, v43, v44, "%{public}s %{public}@ tried to start connection on incoming request %{public}@, dumping backtrace:%{public}s", buf, 0x2Au);
      }

      free(v42);
      if (!v10)
        goto LABEL_103;
      goto LABEL_102;
    }
    __nwlog_obj();
    v11 = objc_claimAutoreleasedReturnValue();
    v63 = type[0];
    if (os_log_type_enabled(v11, type[0]))
    {
      *(_DWORD *)buf = 136446722;
      v125 = "nwsc_request_create_and_start_connection_inner";
      LOWORD(v126[0]) = 2114;
      *(_QWORD *)((char *)v126 + 2) = v5;
      WORD5(v126[0]) = 2114;
      *(_QWORD *)((char *)v126 + 12) = v6;
      _os_log_impl(&dword_182FBE000, v11, v63, "%{public}s %{public}@ tried to start connection on incoming request %{public}@, no backtrace", buf, 0x20u);
    }
  }
  else
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v11 = (id)gLogObj;
    v59 = type[0];
    if (os_log_type_enabled(v11, type[0]))
    {
      *(_DWORD *)buf = 136446722;
      v125 = "nwsc_request_create_and_start_connection_inner";
      LOWORD(v126[0]) = 2114;
      *(_QWORD *)((char *)v126 + 2) = v5;
      WORD5(v126[0]) = 2114;
      *(_QWORD *)((char *)v126 + 12) = v6;
      _os_log_impl(&dword_182FBE000, v11, v59, "%{public}s %{public}@ tried to start connection on incoming request %{public}@, backtrace limit exceeded", buf, 0x20u);
    }
  }
LABEL_100:

LABEL_101:
  if (v10)
LABEL_102:
    free(v10);
LABEL_103:
  v64 = 0;
LABEL_197:

  return v64;
}

void sub_18386C9D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,void *a23,void *a24)
{
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;

  _Unwind_Resume(a1);
}

void ___ZL46nwsc_request_create_and_start_connection_innerP31NWConcrete_nw_service_connectorP39NWConcrete_nw_unique_connection_requestPU25objcproto14OS_nw_endpoint8NSObject21nwsc_operation_code_e_block_invoke_190(uint64_t a1, unsigned int a2, void *a3)
{
  NSObject *v5;
  int v6;
  NSObject *v7;
  NSObject *v8;
  const char *v9;
  const char *v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  NWConcrete_nw_unique_connection_request *v19;
  NSObject *v20;
  NSObject *v21;
  nw_protocol_metadata_t v22;
  id v23;
  NSObject *v24;
  uint64_t v25;
  NSObject *v26;
  const char *v27;
  NSObject *v28;
  uint64_t v29;
  const char *v30;
  void *v31;
  void *v32;
  int error_code;
  NSObject *v34;
  uint64_t v35;
  NSObject *v36;
  const char *v37;
  _QWORD v38[4];
  NSObject *v39;
  id v40;
  NSObject *v41;
  uint8_t buf[4];
  const char *v43;
  __int16 v44;
  uint64_t v45;
  __int16 v46;
  NSObject *v47;
  __int16 v48;
  const char *v49;
  __int16 v50;
  NSObject *v51;
  __int16 v52;
  uint64_t v53;
  __int16 v54;
  int v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  v6 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 16);
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v7 = (id)gLogObj;
  v8 = v7;
  if (v6 == 4)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      if (a2 > 5)
        v9 = "unknown";
      else
        v9 = off_1E149DE10[a2];
      v12 = *(_QWORD *)(a1 + 32);
      v11 = *(NSObject **)(a1 + 40);
      v13 = *(_QWORD *)(a1 + 48);
      v14 = *(unsigned __int8 *)(a1 + 56);
      *(_DWORD *)buf = 136447746;
      v43 = "nwsc_request_create_and_start_connection_inner_block_invoke";
      v44 = 2114;
      v45 = v12;
      v46 = 2114;
      v47 = v11;
      v48 = 2082;
      v49 = v9;
      v50 = 2114;
      v51 = v5;
      v52 = 2114;
      v53 = v13;
      v54 = 1024;
      v55 = v14;
      _os_log_impl(&dword_182FBE000, v8, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ already cancelled, ignoring connection %{public}@ received state %{public}s error %{public}@ for request %{public}@ opCode %u", buf, 0x44u);
    }

    goto LABEL_11;
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    if (a2 > 5)
      v10 = "unknown";
    else
      v10 = off_1E149DE10[a2];
    v16 = *(_QWORD *)(a1 + 32);
    v15 = *(NSObject **)(a1 + 40);
    v17 = *(_QWORD *)(a1 + 48);
    v18 = *(unsigned __int8 *)(a1 + 56);
    *(_DWORD *)buf = 136447746;
    v43 = "nwsc_request_create_and_start_connection_inner_block_invoke";
    v44 = 2114;
    v45 = v16;
    v46 = 2114;
    v47 = v15;
    v48 = 2082;
    v49 = v10;
    v50 = 2114;
    v51 = v5;
    v52 = 2114;
    v53 = v17;
    v54 = 1024;
    v55 = v18;
    _os_log_impl(&dword_182FBE000, v8, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ connection %{public}@ received state %{public}s error %{public}@ for request %{public}@ opCode %u", buf, 0x44u);
  }

  if ((a2 & 0xFFFFFFFE) == 2)
  {
    v19 = *(NWConcrete_nw_unique_connection_request **)(a1 + 48);
    if (v19)
      nwsc_request_stop_path_watcher(v19);
  }
  if (a2 == 3)
  {
    v20 = *(NSObject **)(a1 + 40);
    if (nw_protocol_setup_tcp_definition(void)::onceToken != -1)
      dispatch_once(&nw_protocol_setup_tcp_definition(void)::onceToken, &__block_literal_global_62963);
    v21 = (id)g_tcp_definition;
    v22 = nw_connection_copy_protocol_metadata(v20, v21);

    if (v22)
    {
      if (nw_context_copy_implicit_context::onceToken[0] != -1)
        dispatch_once(nw_context_copy_implicit_context::onceToken, &__block_literal_global_14);
      v23 = (id)nw_context_copy_implicit_context::implicit_context;
      v38[0] = MEMORY[0x1E0C809B0];
      v38[1] = 3221225472;
      v38[2] = ___ZL46nwsc_request_create_and_start_connection_innerP31NWConcrete_nw_service_connectorP39NWConcrete_nw_unique_connection_requestPU25objcproto14OS_nw_endpoint8NSObject21nwsc_operation_code_e_block_invoke_191;
      v38[3] = &unk_1E14AAAA0;
      v39 = *(id *)(a1 + 32);
      v40 = *(id *)(a1 + 48);
      v41 = v22;
      nw_queue_context_async_if_needed(v23, v38);

      v24 = v39;
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v24 = (id)gLogObj;
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
      {
        v25 = *(_QWORD *)(a1 + 32);
        v26 = *(NSObject **)(a1 + 40);
        v27 = *(const char **)(a1 + 48);
        *(_DWORD *)buf = 136446978;
        v43 = "nwsc_request_create_and_start_connection_inner_block_invoke";
        v44 = 2114;
        v45 = v25;
        v46 = 2114;
        v47 = v26;
        v48 = 2114;
        v49 = v27;
        _os_log_impl(&dword_182FBE000, v24, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ metadata for connection %{public}@ is nil -- unable to enable keep alives for request %{public}@", buf, 0x2Au);
      }
    }

    nw_connection_set_state_changed_handler(*(nw_connection_t *)(a1 + 40), 0);
    nw_connection_set_path_changed_handler(*(nw_connection_t *)(a1 + 40), 0);
    nw_service_connector_should_accept_connection(*(NWConcrete_nw_service_connector **)(a1 + 32), *(NWConcrete_nw_connection **)(a1 + 40), 0);

  }
  else if (a2 == 4 || a2 == 1)
  {
    if (!*(_QWORD *)(a1 + 48))
    {
LABEL_11:
      nw_connection_cancel(*(nw_connection_t *)(a1 + 40));
      goto LABEL_33;
    }
    if (nwsc_is_error_allowlisted(v5, a2 == 1))
    {
      if (a2 == 4)
      {
        nwsc_request_start_path_watcher(*(NWConcrete_nw_service_connector **)(a1 + 32), *(NWConcrete_nw_unique_connection_request **)(a1 + 48), *(NWConcrete_nw_connection **)(a1 + 40), 1);
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v34 = (id)gLogObj;
        if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
        {
          v35 = *(_QWORD *)(a1 + 32);
          v36 = *(NSObject **)(a1 + 40);
          v37 = *(const char **)(a1 + 48);
          *(_DWORD *)buf = 136446978;
          v43 = "nwsc_request_create_and_start_connection_inner_block_invoke";
          v44 = 2114;
          v45 = v35;
          v46 = 2114;
          v47 = v36;
          v48 = 2114;
          v49 = v37;
          _os_log_impl(&dword_182FBE000, v34, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ connection %{public}@ in waiting state for request %{public}@", buf, 0x2Au);
        }

        *(_BYTE *)(*(_QWORD *)(a1 + 48) + 616) |= 0x80u;
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v28 = (id)gLogObj;
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
      {
        v29 = *(_QWORD *)(a1 + 32);
        v30 = *(const char **)(a1 + 48);
        *(_DWORD *)buf = 136446978;
        v43 = "nwsc_request_create_and_start_connection_inner_block_invoke";
        v44 = 2114;
        v45 = v29;
        v46 = 2114;
        v47 = v5;
        v48 = 2114;
        v49 = v30;
        _os_log_impl(&dword_182FBE000, v28, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ received unrecoverable error %{public}@, cancelling request %{public}@", buf, 0x2Au);
      }

      nw_service_connector_cancel_request_inner(*(void **)(a1 + 32), *(void **)(*(_QWORD *)(a1 + 48) + 8), *(_QWORD *)(a1 + 48) + 24, *(void **)(a1 + 40), 0);
      v31 = *(void **)(a1 + 32);
      v32 = *(void **)(a1 + 48);
      error_code = nw_error_get_error_code(v5);
      nw_service_connector_trigger_request_complete_block_inner(v31, v32, 0, 0, error_code);
    }
  }
LABEL_33:

}

void sub_18386D05C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void ___ZL46nwsc_request_create_and_start_connection_innerP31NWConcrete_nw_service_connectorP39NWConcrete_nw_unique_connection_requestPU25objcproto14OS_nw_endpoint8NSObject21nwsc_operation_code_e_block_invoke_191(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  NSObject *v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  char *backtrace_string;
  _BOOL4 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  int v35;
  __int16 v36;
  char *v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v2 = (id)gLogObj;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(_QWORD *)(a1 + 40);
    *(_DWORD *)buf = 136446722;
    v29 = "nwsc_request_create_and_start_connection_inner_block_invoke";
    v30 = 2114;
    v31 = v3;
    v32 = 2114;
    v33 = v4;
    _os_log_impl(&dword_182FBE000, v2, OS_LOG_TYPE_INFO, "%{public}s %{public}@ enabling keep alives for request %{public}@", buf, 0x20u);
  }

  if (nw_tcp_reset_keepalives(*(void **)(a1 + 48), 1, 5, 5, 5))
  {
    v5 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v6 = (id)gLogObj;
    v7 = v6;
    if (v5 == 22)
    {
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        v8 = *(_QWORD *)(a1 + 32);
        v9 = *(_QWORD *)(a1 + 40);
        *(_DWORD *)buf = 136446978;
        v29 = "nwsc_request_create_and_start_connection_inner_block_invoke";
        v30 = 2114;
        v31 = v8;
        v32 = 2114;
        v33 = v9;
        v34 = 1024;
        v35 = 22;
        _os_log_impl(&dword_182FBE000, v7, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ error enabling keep alives for request %{public}@ %{darwin.errno}d", buf, 0x26u);
      }

      return;
    }
    v10 = *(_QWORD *)(a1 + 32);
    v11 = *(_QWORD *)(a1 + 40);
    *(_DWORD *)buf = 136446978;
    v29 = "nwsc_request_create_and_start_connection_inner_block_invoke";
    v30 = 2114;
    v31 = v10;
    v32 = 2114;
    v33 = v11;
    v34 = 1024;
    v35 = v5;
    v12 = (void *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v26 = 0;
    if (__nwlog_fault((const char *)v12, &type, &v26))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v13 = (id)gLogObj;
        v14 = type;
        if (!os_log_type_enabled(v13, type))
          goto LABEL_25;
        v15 = *(_QWORD *)(a1 + 32);
        v16 = *(_QWORD *)(a1 + 40);
        *(_DWORD *)buf = 136446978;
        v29 = "nwsc_request_create_and_start_connection_inner_block_invoke";
        v30 = 2114;
        v31 = v15;
        v32 = 2114;
        v33 = v16;
        v34 = 1024;
        v35 = v5;
        v17 = "%{public}s %{public}@ error enabling keep alives for request %{public}@ %{darwin.errno}d";
        goto LABEL_24;
      }
      if (!v26)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v13 = (id)gLogObj;
        v14 = type;
        if (!os_log_type_enabled(v13, type))
          goto LABEL_25;
        v22 = *(_QWORD *)(a1 + 32);
        v23 = *(_QWORD *)(a1 + 40);
        *(_DWORD *)buf = 136446978;
        v29 = "nwsc_request_create_and_start_connection_inner_block_invoke";
        v30 = 2114;
        v31 = v22;
        v32 = 2114;
        v33 = v23;
        v34 = 1024;
        v35 = v5;
        v17 = "%{public}s %{public}@ error enabling keep alives for request %{public}@ %{darwin.errno}d, backtrace limit exceeded";
        goto LABEL_24;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v13 = (id)gLogObj;
      v14 = type;
      v19 = os_log_type_enabled(v13, type);
      if (!backtrace_string)
      {
        if (!v19)
          goto LABEL_25;
        v24 = *(_QWORD *)(a1 + 32);
        v25 = *(_QWORD *)(a1 + 40);
        *(_DWORD *)buf = 136446978;
        v29 = "nwsc_request_create_and_start_connection_inner_block_invoke";
        v30 = 2114;
        v31 = v24;
        v32 = 2114;
        v33 = v25;
        v34 = 1024;
        v35 = v5;
        v17 = "%{public}s %{public}@ error enabling keep alives for request %{public}@ %{darwin.errno}d, no backtrace";
LABEL_24:
        _os_log_impl(&dword_182FBE000, v13, v14, v17, buf, 0x26u);
LABEL_25:

        if (!v12)
          return;
LABEL_18:
        free(v12);
        return;
      }
      if (v19)
      {
        v20 = *(_QWORD *)(a1 + 32);
        v21 = *(_QWORD *)(a1 + 40);
        *(_DWORD *)buf = 136447234;
        v29 = "nwsc_request_create_and_start_connection_inner_block_invoke";
        v30 = 2114;
        v31 = v20;
        v32 = 2114;
        v33 = v21;
        v34 = 1024;
        v35 = v5;
        v36 = 2082;
        v37 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s %{public}@ error enabling keep alives for request %{public}@ %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x30u);
      }

      free(backtrace_string);
    }
    if (!v12)
      return;
    goto LABEL_18;
  }
}

void nw_service_connector_should_accept_connection(NWConcrete_nw_service_connector *a1, NWConcrete_nw_connection *a2, int a3)
{
  NWConcrete_nw_service_connector *v5;
  NWConcrete_nw_connection *v6;
  NSObject *v7;
  const char *v8;
  NWConcrete_nw_service_connector *v9;
  NWConcrete_nw_connection *v10;
  _QWORD v11[4];
  NWConcrete_nw_service_connector *v12;
  NWConcrete_nw_connection *v13;
  char v14;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  NWConcrete_nw_service_connector *v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  NWConcrete_nw_connection *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v7 = (id)gLogObj;
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    v8 = "outgoing";
    *(_DWORD *)buf = 136446978;
    v16 = "nw_service_connector_should_accept_connection";
    v17 = 2114;
    v18 = v5;
    if (a3)
      v8 = "incoming";
    v19 = 2082;
    v20 = v8;
    v21 = 2114;
    v22 = v6;
    _os_log_impl(&dword_182FBE000, v7, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ performing first read on %{public}s connection %{public}@", buf, 0x2Au);
  }

  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = ___ZL45nw_service_connector_should_accept_connectionP31NWConcrete_nw_service_connectorP24NWConcrete_nw_connectionb_block_invoke;
  v11[3] = &unk_1E14A3C10;
  v9 = v5;
  v12 = v9;
  v10 = v6;
  v13 = v10;
  v14 = a3;
  nw_connection_receive_internal(v10, 0, 2u, 2u, v11);

}

void sub_18386D6C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

uint64_t nwsc_is_error_allowlisted(void *a1, char a2)
{
  id v3;
  void *v4;
  _DWORD *v5;
  int v6;
  uint64_t v7;

  v3 = a1;
  v4 = v3;
  if (v3)
  {
    v5 = v3;
    v6 = v5[3];

    if ((a2 & 1) != 0 || v6 != 60)
    {
      v7 = 1;
      switch(v6)
      {
        case 0:
        case 5:
        case 6:
        case 12:
        case 32:
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 60:
        case 61:
        case 64:
        case 65:
        case 96:
          break;
        default:
          goto LABEL_4;
      }
    }
    else
    {
LABEL_4:
      v7 = 0;
    }
  }
  else
  {
    v7 = 1;
  }

  return v7;
}

void nwsc_request_start_path_watcher(NWConcrete_nw_service_connector *a1, NWConcrete_nw_unique_connection_request *a2, NWConcrete_nw_connection *a3, int a4)
{
  NWConcrete_nw_service_connector *v7;
  NWConcrete_nw_unique_connection_request *v8;
  NWConcrete_nw_connection *v9;
  NSObject *p_super;
  NSObject *v11;
  id v12;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  char *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  nw_endpoint_t v19;
  nw_parameters_t v20;
  NWConcrete_nw_path_evaluator *evaluator_for_endpoint;
  void **v22;
  NWConcrete_nw_unique_connection_request *v23;
  os_unfair_lock_s *v24;
  void *v25;
  NSObject *v26;
  NSObject *v27;
  NSObject *v28;
  id *v29;
  id v30;
  os_log_type_t v31;
  id v32;
  char *v33;
  NSObject *v34;
  os_log_type_t v35;
  char *backtrace_string;
  os_log_type_t v37;
  _BOOL4 v38;
  os_log_type_t v39;
  _QWORD aBlock[4];
  void **v41;
  NWConcrete_nw_unique_connection_request *v42;
  os_unfair_lock_s *v43;
  char v44;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v47;
  __int16 v48;
  void *v49;
  __int16 v50;
  NWConcrete_nw_unique_connection_request *v51;
  __int16 v52;
  char *v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  v7 = a1;
  v8 = a2;
  v9 = a3;
  p_super = &v9->super;
  if ((*((_BYTE *)v8 + 616) & 1) == 0)
  {
    if (v8->pathEvaluator)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v11 = (id)gLogObj;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446722;
        v47 = "nwsc_request_start_path_watcher";
        v48 = 2114;
        v49 = v7;
        v50 = 2114;
        v51 = v8;
        _os_log_impl(&dword_182FBE000, v11, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ path watcher already started for request %{public}@", buf, 0x20u);
      }

      goto LABEL_40;
    }
    v19 = nw_connection_copy_endpoint(&v9->super);
    v20 = nw_connection_copy_parameters(p_super);
    evaluator_for_endpoint = nw_path_create_evaluator_for_endpoint(v19, v20);

    if (evaluator_for_endpoint)
    {
      objc_storeStrong((id *)&v8->pathEvaluator, evaluator_for_endpoint);
      *((_BYTE *)v8 + 616) |= 0x80u;
      aBlock[0] = MEMORY[0x1E0C809B0];
      aBlock[1] = 3221225472;
      aBlock[2] = ___ZL31nwsc_request_start_path_watcherP31NWConcrete_nw_service_connectorP39NWConcrete_nw_unique_connection_requestP24NWConcrete_nw_connectionb_block_invoke;
      aBlock[3] = &unk_1E14A3D18;
      v22 = v7;
      v41 = v22;
      v23 = v8;
      v42 = v23;
      v24 = evaluator_for_endpoint;
      v43 = v24;
      v25 = _Block_copy(aBlock);
      nw_path_evaluator_set_update_handler(v24, v22[4], v25);
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v26 = (id)gLogObj;
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446722;
        v47 = "nwsc_request_start_path_watcher";
        v48 = 2114;
        v49 = v22;
        v50 = 2114;
        v51 = v23;
        _os_log_impl(&dword_182FBE000, v26, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ registered for path updates for request %{public}@", buf, 0x20u);
      }

      if (a4)
      {
        v27 = nw_connection_copy_current_path(p_super);
        if (nw_path_get_status(v27) == nw_path_status_unsatisfied)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v28 = (id)gLogObj;
          if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136446722;
            v47 = "nwsc_request_start_path_watcher";
            v48 = 2114;
            v49 = v22;
            v50 = 2114;
            v51 = v23;
            _os_log_impl(&dword_182FBE000, v28, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ forcing a path update for request %{public}@", buf, 0x20u);
          }

          v29 = v24;
          os_unfair_lock_lock(v24 + 24);
          v30 = v29[6];
          os_unfair_lock_unlock(v24 + 24);

          (*((void (**)(void *, id))v25 + 2))(v25, v30);
        }

      }
      goto LABEL_39;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v32 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v47 = "nwsc_request_start_path_watcher";
    v33 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v44 = 0;
    if (__nwlog_fault(v33, &type, &v44))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v34 = (id)gLogObj;
        v35 = type;
        if (os_log_type_enabled(v34, type))
        {
          *(_DWORD *)buf = 136446210;
          v47 = "nwsc_request_start_path_watcher";
          _os_log_impl(&dword_182FBE000, v34, v35, "%{public}s nw_path_create_evaluator_for_endpoint failed", buf, 0xCu);
        }
      }
      else if (v44)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v34 = objc_claimAutoreleasedReturnValue();
        v37 = type;
        v38 = os_log_type_enabled(v34, type);
        if (backtrace_string)
        {
          if (v38)
          {
            *(_DWORD *)buf = 136446466;
            v47 = "nwsc_request_start_path_watcher";
            v48 = 2082;
            v49 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v34, v37, "%{public}s nw_path_create_evaluator_for_endpoint failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          if (!v33)
            goto LABEL_39;
          goto LABEL_38;
        }
        if (v38)
        {
          *(_DWORD *)buf = 136446210;
          v47 = "nwsc_request_start_path_watcher";
          _os_log_impl(&dword_182FBE000, v34, v37, "%{public}s nw_path_create_evaluator_for_endpoint failed, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v34 = objc_claimAutoreleasedReturnValue();
        v39 = type;
        if (os_log_type_enabled(v34, type))
        {
          *(_DWORD *)buf = 136446210;
          v47 = "nwsc_request_start_path_watcher";
          _os_log_impl(&dword_182FBE000, v34, v39, "%{public}s nw_path_create_evaluator_for_endpoint failed, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
    if (!v33)
    {
LABEL_39:

      goto LABEL_40;
    }
LABEL_38:
    free(v33);
    goto LABEL_39;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v12 = (id)gLogObj;
  *(_DWORD *)buf = 136446722;
  v47 = "nwsc_request_start_path_watcher";
  v48 = 2114;
  v49 = v7;
  v50 = 2114;
  v51 = v8;
  v13 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v44 = 0;
  if (!__nwlog_fault(v13, &type, &v44))
    goto LABEL_11;
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v14 = (id)gLogObj;
    v15 = type;
    if (os_log_type_enabled(v14, type))
    {
      *(_DWORD *)buf = 136446722;
      v47 = "nwsc_request_start_path_watcher";
      v48 = 2114;
      v49 = v7;
      v50 = 2114;
      v51 = v8;
      _os_log_impl(&dword_182FBE000, v14, v15, "%{public}s %{public}@ tried to start path watcher on incoming request %{public}@", buf, 0x20u);
    }
LABEL_10:

LABEL_11:
    if (!v13)
      goto LABEL_40;
LABEL_12:
    free(v13);
    goto LABEL_40;
  }
  if (!v44)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v14 = (id)gLogObj;
    v31 = type;
    if (os_log_type_enabled(v14, type))
    {
      *(_DWORD *)buf = 136446722;
      v47 = "nwsc_request_start_path_watcher";
      v48 = 2114;
      v49 = v7;
      v50 = 2114;
      v51 = v8;
      _os_log_impl(&dword_182FBE000, v14, v31, "%{public}s %{public}@ tried to start path watcher on incoming request %{public}@, backtrace limit exceeded", buf, 0x20u);
    }
    goto LABEL_10;
  }
  v16 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v14 = (id)gLogObj;
  v17 = type;
  v18 = os_log_type_enabled(v14, type);
  if (!v16)
  {
    if (v18)
    {
      *(_DWORD *)buf = 136446722;
      v47 = "nwsc_request_start_path_watcher";
      v48 = 2114;
      v49 = v7;
      v50 = 2114;
      v51 = v8;
      _os_log_impl(&dword_182FBE000, v14, v17, "%{public}s %{public}@ tried to start path watcher on incoming request %{public}@, no backtrace", buf, 0x20u);
    }
    goto LABEL_10;
  }
  if (v18)
  {
    *(_DWORD *)buf = 136446978;
    v47 = "nwsc_request_start_path_watcher";
    v48 = 2114;
    v49 = v7;
    v50 = 2114;
    v51 = v8;
    v52 = 2082;
    v53 = v16;
    _os_log_impl(&dword_182FBE000, v14, v17, "%{public}s %{public}@ tried to start path watcher on incoming request %{public}@, dumping backtrace:%{public}s", buf, 0x2Au);
  }

  free(v16);
  if (v13)
    goto LABEL_12;
LABEL_40:

}

void sub_18386E00C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, void *a19)
{
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;

  _Unwind_Resume(a1);
}

void nw_service_connector_cancel_request_inner(void *a1, void *a2, uint64_t a3, void *a4, int a5)
{
  NWConcrete_nw_service_connector *v9;
  id v10;
  NSObject *v11;
  void *v12;
  NSObject *v13;
  _BOOL4 v14;
  NSObject *v15;
  id v16;
  char *v17;
  NSObject *v18;
  os_log_type_t v19;
  char *backtrace_string;
  os_log_type_t v21;
  _BOOL4 v22;
  os_log_type_t v23;
  uint64_t v24;
  uint64_t v25;
  NWConcrete_nw_service_connector *v26;
  NSObject *v27;
  NSObject *v28;
  uint64_t activeConnections;
  NSObject *v30;
  NWConcrete_nw_unique_connection *v31;
  NSObject *v32;
  const char *v33;
  NWConcrete_nw_unique_connection *v34;
  NWConcrete_nw_connection *connection;
  os_unfair_lock_s *v36;
  os_unfair_lock_s *v37;
  char *v38;
  NSObject *v39;
  uint64_t (*v40)(uint64_t, uint64_t);
  void *v41;
  char *v42;
  NSObject *v43;
  os_log_type_t v44;
  void *v45;
  os_log_type_t v46;
  char *v47;
  _BOOL4 v48;
  char *v49;
  _BOOL4 v50;
  os_log_type_t v51;
  os_log_type_t v52;
  os_log_type_t v53;
  os_log_type_t v54;
  os_log_type_t type[8];
  uint64_t v56;
  uint64_t v57;
  void *v58;
  NSObject *v59;
  _BYTE *v60;
  char v61;
  os_log_type_t v62;
  _BYTE buf[24];
  uint64_t (*v64)(uint64_t, uint64_t);
  _BYTE v65[20];
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  v9 = a1;
  v10 = a2;
  v11 = a4;
  v12 = nw_service_connector_copy_active_outgoing_request(v9, v10, a3);
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v13 = (id)gLogObj;
  v14 = os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
  if (v12)
  {
    if (v14)
    {
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = "nw_service_connector_cancel_request_inner";
      *(_WORD *)&buf[12] = 2114;
      *(_QWORD *)&buf[14] = v9;
      *(_WORD *)&buf[22] = 2114;
      v64 = (uint64_t (*)(uint64_t, uint64_t))v12;
      _os_log_impl(&dword_182FBE000, v13, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ cancelling active request %{public}@", buf, 0x20u);
    }

    v15 = *((_QWORD *)v12 + 72);
    if (!v15 || v15 == v11)
      goto LABEL_31;
    if (!v11)
    {
LABEL_30:
      nw_connection_cancel(v15);
      v15 = *((_QWORD *)v12 + 72);
LABEL_31:
      *((_QWORD *)v12 + 72) = 0;

      *((_BYTE *)v12 + 616) &= ~0x10u;
      v25 = *((_QWORD *)v12 + 76);
      if (v25)
      {
        nw_queue_cancel_source(v25, v24);
        *((_QWORD *)v12 + 76) = 0;
      }
      nw_service_connector_remove_active_outgoing_request(v9, (NWConcrete_nw_unique_connection_request *)v12);
      goto LABEL_34;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v16 = (id)gLogObj;
    *(_DWORD *)buf = 136446978;
    *(_QWORD *)&buf[4] = "nw_service_connector_cancel_request_inner";
    *(_WORD *)&buf[12] = 2114;
    *(_QWORD *)&buf[14] = v9;
    *(_WORD *)&buf[22] = 2114;
    v64 = (uint64_t (*)(uint64_t, uint64_t))v12;
    *(_WORD *)v65 = 2114;
    *(_QWORD *)&v65[2] = v11;
    v17 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    v62 = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v17, type, &v62))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v18 = (id)gLogObj;
        v19 = type[0];
        if (os_log_type_enabled(v18, type[0]))
        {
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_service_connector_cancel_request_inner";
          *(_WORD *)&buf[12] = 2114;
          *(_QWORD *)&buf[14] = v9;
          *(_WORD *)&buf[22] = 2114;
          v64 = (uint64_t (*)(uint64_t, uint64_t))v12;
          *(_WORD *)v65 = 2114;
          *(_QWORD *)&v65[2] = v11;
          _os_log_impl(&dword_182FBE000, v18, v19, "%{public}s %{public}@ trying to cancel mismatched connections %{public}@ %{public}@", buf, 0x2Au);
        }
      }
      else if (v62)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v18 = (id)gLogObj;
        v21 = type[0];
        v22 = os_log_type_enabled(v18, type[0]);
        if (backtrace_string)
        {
          if (v22)
          {
            *(_DWORD *)buf = 136447234;
            *(_QWORD *)&buf[4] = "nw_service_connector_cancel_request_inner";
            *(_WORD *)&buf[12] = 2114;
            *(_QWORD *)&buf[14] = v9;
            *(_WORD *)&buf[22] = 2114;
            v64 = (uint64_t (*)(uint64_t, uint64_t))v12;
            *(_WORD *)v65 = 2114;
            *(_QWORD *)&v65[2] = v11;
            *(_WORD *)&v65[10] = 2082;
            *(_QWORD *)&v65[12] = backtrace_string;
            _os_log_impl(&dword_182FBE000, v18, v21, "%{public}s %{public}@ trying to cancel mismatched connections %{public}@ %{public}@, dumping backtrace:%{public}s", buf, 0x34u);
          }

          free(backtrace_string);
          if (!v17)
            goto LABEL_29;
          goto LABEL_28;
        }
        if (v22)
        {
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_service_connector_cancel_request_inner";
          *(_WORD *)&buf[12] = 2114;
          *(_QWORD *)&buf[14] = v9;
          *(_WORD *)&buf[22] = 2114;
          v64 = (uint64_t (*)(uint64_t, uint64_t))v12;
          *(_WORD *)v65 = 2114;
          *(_QWORD *)&v65[2] = v11;
          _os_log_impl(&dword_182FBE000, v18, v21, "%{public}s %{public}@ trying to cancel mismatched connections %{public}@ %{public}@, no backtrace", buf, 0x2Au);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v18 = (id)gLogObj;
        v23 = type[0];
        if (os_log_type_enabled(v18, type[0]))
        {
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_service_connector_cancel_request_inner";
          *(_WORD *)&buf[12] = 2114;
          *(_QWORD *)&buf[14] = v9;
          *(_WORD *)&buf[22] = 2114;
          v64 = (uint64_t (*)(uint64_t, uint64_t))v12;
          *(_WORD *)v65 = 2114;
          *(_QWORD *)&v65[2] = v11;
          _os_log_impl(&dword_182FBE000, v18, v23, "%{public}s %{public}@ trying to cancel mismatched connections %{public}@ %{public}@, backtrace limit exceeded", buf, 0x2Au);
        }
      }

    }
    if (!v17)
    {
LABEL_29:
      v15 = *((_QWORD *)v12 + 72);
      goto LABEL_30;
    }
LABEL_28:
    free(v17);
    goto LABEL_29;
  }
  if (v14)
  {
    *(_DWORD *)buf = 136447234;
    *(_QWORD *)&buf[4] = "nw_service_connector_cancel_request_inner";
    *(_WORD *)&buf[12] = 2114;
    *(_QWORD *)&buf[14] = v9;
    *(_WORD *)&buf[22] = 2114;
    v64 = (uint64_t (*)(uint64_t, uint64_t))v10;
    *(_WORD *)v65 = 2082;
    *(_QWORD *)&v65[2] = a3;
    *(_WORD *)&v65[10] = 2114;
    *(_QWORD *)&v65[12] = v11;
    _os_log_impl(&dword_182FBE000, v13, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ no active request to cancel for %{public}@ \"%{public}s\" %{public}@", buf, 0x34u);
  }

LABEL_34:
  if (v11)
  {
    v26 = v9;
    v27 = v11;
    v28 = v27;
    if (!v26)
    {
      __nwlog_obj();
      v41 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_service_connector_copy_active_connection_for_connection";
      v42 = (char *)_os_log_send_and_compose_impl();

      v62 = OS_LOG_TYPE_ERROR;
      v61 = 0;
      if (!__nwlog_fault(v42, &v62, &v61))
        goto LABEL_87;
      if (v62 == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v43 = objc_claimAutoreleasedReturnValue();
        v44 = v62;
        if (os_log_type_enabled(v43, v62))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_service_connector_copy_active_connection_for_connection";
          _os_log_impl(&dword_182FBE000, v43, v44, "%{public}s called with null serviceConnector", buf, 0xCu);
        }
      }
      else if (v61)
      {
        v47 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v43 = objc_claimAutoreleasedReturnValue();
        v53 = v62;
        v48 = os_log_type_enabled(v43, v62);
        if (v47)
        {
          if (v48)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_service_connector_copy_active_connection_for_connection";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v47;
            _os_log_impl(&dword_182FBE000, v43, v53, "%{public}s called with null serviceConnector, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v47);
          if (!v42)
            goto LABEL_89;
          goto LABEL_88;
        }
        if (v48)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_service_connector_copy_active_connection_for_connection";
          _os_log_impl(&dword_182FBE000, v43, v53, "%{public}s called with null serviceConnector, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v43 = objc_claimAutoreleasedReturnValue();
        v51 = v62;
        if (os_log_type_enabled(v43, v62))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_service_connector_copy_active_connection_for_connection";
          _os_log_impl(&dword_182FBE000, v43, v51, "%{public}s called with null serviceConnector, backtrace limit exceeded", buf, 0xCu);
        }
      }
      goto LABEL_86;
    }
    activeConnections = (uint64_t)v26->activeConnections;
    if (activeConnections)
    {
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0x3032000000;
      v64 = __Block_byref_object_copy__48854;
      *(_QWORD *)v65 = __Block_byref_object_dispose__48855;
      *(_QWORD *)&v65[8] = 0;
      *(_QWORD *)type = MEMORY[0x1E0C809B0];
      v56 = 3221225472;
      v57 = (uint64_t)___ZL58nw_service_connector_copy_active_connection_for_connectionP31NWConcrete_nw_service_connectorP24NWConcrete_nw_connection_block_invoke;
      v58 = &unk_1E14AB4B0;
      v30 = v27;
      v59 = v30;
      v60 = buf;
      nw_dictionary_apply(activeConnections, (uint64_t)type);
      v31 = (NWConcrete_nw_unique_connection *)*(id *)(*(_QWORD *)&buf[8] + 40);

      _Block_object_dispose(buf, 8);
      if (v31)
        nw_service_connector_remove_active_connection(v26, v31);
      goto LABEL_39;
    }
    __nwlog_obj();
    v45 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_service_connector_copy_active_connection_for_connection";
    v42 = (char *)_os_log_send_and_compose_impl();

    v62 = OS_LOG_TYPE_ERROR;
    v61 = 0;
    if (__nwlog_fault(v42, &v62, &v61))
    {
      if (v62 == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v43 = objc_claimAutoreleasedReturnValue();
        v46 = v62;
        if (os_log_type_enabled(v43, v62))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_service_connector_copy_active_connection_for_connection";
          _os_log_impl(&dword_182FBE000, v43, v46, "%{public}s called with null serviceConnector->activeConnections", buf, 0xCu);
        }
LABEL_86:

        goto LABEL_87;
      }
      if (!v61)
      {
        __nwlog_obj();
        v43 = objc_claimAutoreleasedReturnValue();
        v52 = v62;
        if (os_log_type_enabled(v43, v62))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_service_connector_copy_active_connection_for_connection";
          _os_log_impl(&dword_182FBE000, v43, v52, "%{public}s called with null serviceConnector->activeConnections, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_86;
      }
      v49 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v43 = objc_claimAutoreleasedReturnValue();
      v54 = v62;
      v50 = os_log_type_enabled(v43, v62);
      if (!v49)
      {
        if (v50)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_service_connector_copy_active_connection_for_connection";
          _os_log_impl(&dword_182FBE000, v43, v54, "%{public}s called with null serviceConnector->activeConnections, no backtrace", buf, 0xCu);
        }
        goto LABEL_86;
      }
      if (v50)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_service_connector_copy_active_connection_for_connection";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v49;
        _os_log_impl(&dword_182FBE000, v43, v54, "%{public}s called with null serviceConnector->activeConnections, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(v49);
    }
LABEL_87:
    if (!v42)
    {
LABEL_89:

      v31 = 0;
LABEL_39:
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v32 = (id)gLogObj;
      if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
      {
        v33 = "";
        *(_DWORD *)buf = 136447234;
        *(_QWORD *)&buf[4] = "nw_service_connector_cancel_request_inner";
        *(_QWORD *)&buf[14] = v26;
        *(_WORD *)&buf[12] = 2114;
        if (a5)
          v33 = "force-";
        *(_WORD *)&buf[22] = 2082;
        v64 = (uint64_t (*)(uint64_t, uint64_t))v33;
        *(_WORD *)v65 = 2114;
        *(_QWORD *)&v65[2] = v28;
        *(_WORD *)&v65[10] = 2114;
        *(_QWORD *)&v65[12] = v12;
        _os_log_impl(&dword_182FBE000, v32, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ %{public}scancelling connection %{public}@ for request %{public}@", buf, 0x34u);
      }

      if (a5)
        nw_connection_cancel_current_endpoint(v28);
      else
        nw_connection_cancel(v28);
      goto LABEL_53;
    }
LABEL_88:
    free(v42);
    goto LABEL_89;
  }
  v34 = (NWConcrete_nw_unique_connection *)nw_service_connector_copy_active_connection_with_endpoint_and_service(v9, v10, a3);
  v31 = v34;
  if (v34)
  {
    connection = v34->connection;
    if (!connection)
      goto LABEL_50;
    v36 = connection;
    *(_QWORD *)type = 0;
    v56 = (uint64_t)type;
    v57 = 0x2020000000;
    LOBYTE(v58) = 0;
    v37 = v36 + 34;
    *(_QWORD *)buf = MEMORY[0x1E0C809B0];
    *(_QWORD *)&buf[8] = 3221225472;
    *(_QWORD *)&buf[16] = __nw_connection_is_cancelled_or_failed_block_invoke;
    v64 = (uint64_t (*)(uint64_t, uint64_t))&unk_1E14ACE40;
    *(_QWORD *)&v65[8] = type;
    v38 = v36;
    *(_QWORD *)v65 = v38;
    os_unfair_lock_lock(v37);
    __nw_connection_is_cancelled_or_failed_block_invoke((uint64_t)buf);
    os_unfair_lock_unlock(v37);
    LODWORD(v37) = *(unsigned __int8 *)(v56 + 24);

    _Block_object_dispose(type, 8);
    if ((_DWORD)v37)
    {
      nw_service_connector_remove_active_connection(v9, v31);
    }
    else
    {
LABEL_50:
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v39 = (id)gLogObj;
      if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
      {
        v40 = (uint64_t (*)(uint64_t, uint64_t))v31->connection;
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = "nw_service_connector_cancel_request_inner";
        *(_WORD *)&buf[12] = 2114;
        *(_QWORD *)&buf[14] = v9;
        *(_WORD *)&buf[22] = 2114;
        v64 = v40;
        _os_log_impl(&dword_182FBE000, v39, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ did not remove connection %{public}@ as it is active", buf, 0x20u);
      }

    }
  }
LABEL_53:

}

void sub_18386ECD8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void *nw_service_connector_copy_active_outgoing_request(void *a1, void *a2, uint64_t a3)
{
  uint64_t *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  const char *v10;
  NSObject *v11;
  os_log_type_t v12;
  char *v13;
  os_log_type_t v14;
  _BOOL4 v15;
  os_log_type_t v16;
  char *v17;
  void *v19;
  const char *v20;
  NSObject *v21;
  os_log_type_t v22;
  void *v23;
  os_log_type_t v24;
  void *v25;
  os_log_type_t v26;
  void *v27;
  os_log_type_t v28;
  char *backtrace_string;
  os_log_type_t v30;
  _BOOL4 v31;
  os_log_type_t v32;
  _BOOL4 v33;
  os_log_type_t v34;
  _BOOL4 v35;
  os_log_type_t v36;
  _BOOL4 v37;
  os_log_type_t v38;
  os_log_type_t v39;
  os_log_type_t v40;
  os_log_type_t v41;
  char v42;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v45;
  __int16 v46;
  void *v47;
  __int16 v48;
  uint64_t v49;
  __int16 v50;
  char *v51;
  uint8_t v52[32];
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  int v78;
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = v6;
  if (!v5)
  {
    __nwlog_obj();
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)v52 = 136446210;
    *(_QWORD *)&v52[4] = "nw_service_connector_copy_active_outgoing_request";
    v20 = (const char *)_os_log_send_and_compose_impl();

    buf[0] = 16;
    type = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v20, buf, &type))
      goto LABEL_69;
    if (buf[0] == 17)
    {
      __nwlog_obj();
      v21 = objc_claimAutoreleasedReturnValue();
      v22 = buf[0];
      if (os_log_type_enabled(v21, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)v52 = 136446210;
        *(_QWORD *)&v52[4] = "nw_service_connector_copy_active_outgoing_request";
        _os_log_impl(&dword_182FBE000, v21, v22, "%{public}s called with null serviceConnector", v52, 0xCu);
      }
      goto LABEL_94;
    }
    if (type == OS_LOG_TYPE_DEFAULT)
    {
      __nwlog_obj();
      v21 = objc_claimAutoreleasedReturnValue();
      v38 = buf[0];
      if (os_log_type_enabled(v21, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)v52 = 136446210;
        *(_QWORD *)&v52[4] = "nw_service_connector_copy_active_outgoing_request";
        _os_log_impl(&dword_182FBE000, v21, v38, "%{public}s called with null serviceConnector, backtrace limit exceeded", v52, 0xCu);
      }
      goto LABEL_94;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v21 = objc_claimAutoreleasedReturnValue();
    v30 = buf[0];
    v31 = os_log_type_enabled(v21, (os_log_type_t)buf[0]);
    if (!backtrace_string)
    {
      if (v31)
      {
        *(_DWORD *)v52 = 136446210;
        *(_QWORD *)&v52[4] = "nw_service_connector_copy_active_outgoing_request";
        _os_log_impl(&dword_182FBE000, v21, v30, "%{public}s called with null serviceConnector, no backtrace", v52, 0xCu);
      }
      goto LABEL_94;
    }
    if (v31)
    {
      *(_DWORD *)v52 = 136446466;
      *(_QWORD *)&v52[4] = "nw_service_connector_copy_active_outgoing_request";
      *(_WORD *)&v52[12] = 2082;
      *(_QWORD *)&v52[14] = backtrace_string;
      _os_log_impl(&dword_182FBE000, v21, v30, "%{public}s called with null serviceConnector, dumping backtrace:%{public}s", v52, 0x16u);
    }
LABEL_68:

    free(backtrace_string);
    goto LABEL_69;
  }
  if (!v5[12])
  {
    __nwlog_obj();
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)v52 = 136446210;
    *(_QWORD *)&v52[4] = "nw_service_connector_copy_active_outgoing_request";
    v20 = (const char *)_os_log_send_and_compose_impl();

    buf[0] = 16;
    type = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v20, buf, &type))
      goto LABEL_69;
    if (buf[0] == 17)
    {
      __nwlog_obj();
      v21 = objc_claimAutoreleasedReturnValue();
      v24 = buf[0];
      if (os_log_type_enabled(v21, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)v52 = 136446210;
        *(_QWORD *)&v52[4] = "nw_service_connector_copy_active_outgoing_request";
        _os_log_impl(&dword_182FBE000, v21, v24, "%{public}s called with null serviceConnector->activeOutgoingRequests", v52, 0xCu);
      }
      goto LABEL_94;
    }
    if (type == OS_LOG_TYPE_DEFAULT)
    {
      __nwlog_obj();
      v21 = objc_claimAutoreleasedReturnValue();
      v39 = buf[0];
      if (os_log_type_enabled(v21, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)v52 = 136446210;
        *(_QWORD *)&v52[4] = "nw_service_connector_copy_active_outgoing_request";
        _os_log_impl(&dword_182FBE000, v21, v39, "%{public}s called with null serviceConnector->activeOutgoingRequests, backtrace limit exceeded", v52, 0xCu);
      }
      goto LABEL_94;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v21 = objc_claimAutoreleasedReturnValue();
    v32 = buf[0];
    v33 = os_log_type_enabled(v21, (os_log_type_t)buf[0]);
    if (!backtrace_string)
    {
      if (v33)
      {
        *(_DWORD *)v52 = 136446210;
        *(_QWORD *)&v52[4] = "nw_service_connector_copy_active_outgoing_request";
        _os_log_impl(&dword_182FBE000, v21, v32, "%{public}s called with null serviceConnector->activeOutgoingRequests, no backtrace", v52, 0xCu);
      }
      goto LABEL_94;
    }
    if (v33)
    {
      *(_DWORD *)v52 = 136446466;
      *(_QWORD *)&v52[4] = "nw_service_connector_copy_active_outgoing_request";
      *(_WORD *)&v52[12] = 2082;
      *(_QWORD *)&v52[14] = backtrace_string;
      _os_log_impl(&dword_182FBE000, v21, v32, "%{public}s called with null serviceConnector->activeOutgoingRequests, dumping backtrace:%{public}s", v52, 0x16u);
    }
    goto LABEL_68;
  }
  if (!v6)
  {
    __nwlog_obj();
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)v52 = 136446210;
    *(_QWORD *)&v52[4] = "nw_service_connector_copy_active_outgoing_request";
    v20 = (const char *)_os_log_send_and_compose_impl();

    buf[0] = 16;
    type = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v20, buf, &type))
      goto LABEL_69;
    if (buf[0] == 17)
    {
      __nwlog_obj();
      v21 = objc_claimAutoreleasedReturnValue();
      v26 = buf[0];
      if (os_log_type_enabled(v21, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)v52 = 136446210;
        *(_QWORD *)&v52[4] = "nw_service_connector_copy_active_outgoing_request";
        _os_log_impl(&dword_182FBE000, v21, v26, "%{public}s called with null endpoint", v52, 0xCu);
      }
      goto LABEL_94;
    }
    if (type == OS_LOG_TYPE_DEFAULT)
    {
      __nwlog_obj();
      v21 = objc_claimAutoreleasedReturnValue();
      v40 = buf[0];
      if (os_log_type_enabled(v21, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)v52 = 136446210;
        *(_QWORD *)&v52[4] = "nw_service_connector_copy_active_outgoing_request";
        _os_log_impl(&dword_182FBE000, v21, v40, "%{public}s called with null endpoint, backtrace limit exceeded", v52, 0xCu);
      }
      goto LABEL_94;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v21 = objc_claimAutoreleasedReturnValue();
    v34 = buf[0];
    v35 = os_log_type_enabled(v21, (os_log_type_t)buf[0]);
    if (!backtrace_string)
    {
      if (v35)
      {
        *(_DWORD *)v52 = 136446210;
        *(_QWORD *)&v52[4] = "nw_service_connector_copy_active_outgoing_request";
        _os_log_impl(&dword_182FBE000, v21, v34, "%{public}s called with null endpoint, no backtrace", v52, 0xCu);
      }
      goto LABEL_94;
    }
    if (v35)
    {
      *(_DWORD *)v52 = 136446466;
      *(_QWORD *)&v52[4] = "nw_service_connector_copy_active_outgoing_request";
      *(_WORD *)&v52[12] = 2082;
      *(_QWORD *)&v52[14] = backtrace_string;
      _os_log_impl(&dword_182FBE000, v21, v34, "%{public}s called with null endpoint, dumping backtrace:%{public}s", v52, 0x16u);
    }
    goto LABEL_68;
  }
  if (!a3)
  {
    __nwlog_obj();
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)v52 = 136446210;
    *(_QWORD *)&v52[4] = "nw_service_connector_copy_active_outgoing_request";
    v20 = (const char *)_os_log_send_and_compose_impl();

    buf[0] = 16;
    type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v20, buf, &type))
    {
      if (buf[0] == 17)
      {
        __nwlog_obj();
        v21 = objc_claimAutoreleasedReturnValue();
        v28 = buf[0];
        if (os_log_type_enabled(v21, (os_log_type_t)buf[0]))
        {
          *(_DWORD *)v52 = 136446210;
          *(_QWORD *)&v52[4] = "nw_service_connector_copy_active_outgoing_request";
          _os_log_impl(&dword_182FBE000, v21, v28, "%{public}s called with null service", v52, 0xCu);
        }
LABEL_94:

        goto LABEL_69;
      }
      if (type == OS_LOG_TYPE_DEFAULT)
      {
        __nwlog_obj();
        v21 = objc_claimAutoreleasedReturnValue();
        v41 = buf[0];
        if (os_log_type_enabled(v21, (os_log_type_t)buf[0]))
        {
          *(_DWORD *)v52 = 136446210;
          *(_QWORD *)&v52[4] = "nw_service_connector_copy_active_outgoing_request";
          _os_log_impl(&dword_182FBE000, v21, v41, "%{public}s called with null service, backtrace limit exceeded", v52, 0xCu);
        }
        goto LABEL_94;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v21 = objc_claimAutoreleasedReturnValue();
      v36 = buf[0];
      v37 = os_log_type_enabled(v21, (os_log_type_t)buf[0]);
      if (!backtrace_string)
      {
        if (v37)
        {
          *(_DWORD *)v52 = 136446210;
          *(_QWORD *)&v52[4] = "nw_service_connector_copy_active_outgoing_request";
          _os_log_impl(&dword_182FBE000, v21, v36, "%{public}s called with null service, no backtrace", v52, 0xCu);
        }
        goto LABEL_94;
      }
      if (v37)
      {
        *(_DWORD *)v52 = 136446466;
        *(_QWORD *)&v52[4] = "nw_service_connector_copy_active_outgoing_request";
        *(_WORD *)&v52[12] = 2082;
        *(_QWORD *)&v52[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v21, v36, "%{public}s called with null service, dumping backtrace:%{public}s", v52, 0x16u);
      }
      goto LABEL_68;
    }
LABEL_69:
    if (!v20)
      goto LABEL_27;
    v17 = (char *)v20;
    goto LABEL_26;
  }
  v78 = 0;
  v76 = 0u;
  v77 = 0u;
  v74 = 0u;
  v75 = 0u;
  v72 = 0u;
  v73 = 0u;
  v70 = 0u;
  v71 = 0u;
  v68 = 0u;
  v69 = 0u;
  v66 = 0u;
  v67 = 0u;
  v64 = 0u;
  v65 = 0u;
  v62 = 0u;
  v63 = 0u;
  v60 = 0u;
  v61 = 0u;
  v58 = 0u;
  v59 = 0u;
  v56 = 0u;
  v57 = 0u;
  v54 = 0u;
  v55 = 0u;
  v53 = 0u;
  memset(v52, 0, sizeof(v52));
  if (!nwsc_get_identifier(v6, a3, v52))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v9 = (id)gLogObj;
    *(_DWORD *)buf = 136446722;
    v45 = "nw_service_connector_copy_active_outgoing_request";
    v46 = 2114;
    v47 = v7;
    v48 = 2082;
    v49 = a3;
    v10 = (const char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v42 = 0;
    if (__nwlog_fault(v10, &type, &v42))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v11 = (id)gLogObj;
        v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446722;
          v45 = "nw_service_connector_copy_active_outgoing_request";
          v46 = 2114;
          v47 = v7;
          v48 = 2082;
          v49 = a3;
          _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s Could not get identifier for endpoint %{public}@, service %{public}s", buf, 0x20u);
        }
      }
      else if (v42)
      {
        v13 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v11 = (id)gLogObj;
        v14 = type;
        v15 = os_log_type_enabled(v11, type);
        if (v13)
        {
          if (v15)
          {
            *(_DWORD *)buf = 136446978;
            v45 = "nw_service_connector_copy_active_outgoing_request";
            v46 = 2114;
            v47 = v7;
            v48 = 2082;
            v49 = a3;
            v50 = 2082;
            v51 = v13;
            _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s Could not get identifier for endpoint %{public}@, service %{public}s, dumping backtrace:%{public}s", buf, 0x2Au);
          }

          free(v13);
          if (!v10)
            goto LABEL_27;
LABEL_25:
          v17 = (char *)v10;
LABEL_26:
          free(v17);
          goto LABEL_27;
        }
        if (v15)
        {
          *(_DWORD *)buf = 136446722;
          v45 = "nw_service_connector_copy_active_outgoing_request";
          v46 = 2114;
          v47 = v7;
          v48 = 2082;
          v49 = a3;
          _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s Could not get identifier for endpoint %{public}@, service %{public}s, no backtrace", buf, 0x20u);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v11 = (id)gLogObj;
        v16 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446722;
          v45 = "nw_service_connector_copy_active_outgoing_request";
          v46 = 2114;
          v47 = v7;
          v48 = 2082;
          v49 = a3;
          _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s Could not get identifier for endpoint %{public}@, service %{public}s, backtrace limit exceeded", buf, 0x20u);
        }
      }

    }
    if (!v10)
    {
LABEL_27:
      v8 = 0;
      goto LABEL_28;
    }
    goto LABEL_25;
  }
  v8 = nw_dictionary_copy_value(v5[12], (uint64_t)v52);
LABEL_28:

  return v8;
}

void sub_18386F8F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

BOOL ___ZL58nw_service_connector_copy_active_connection_for_connectionP31NWConcrete_nw_service_connectorP24NWConcrete_nw_connection_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v5 = a3;
  v6 = v5[61];
  v7 = *(_QWORD *)(a1 + 32);
  if (v6 == v7)
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a3);

  return v6 != v7;
}

void nw_service_connector_remove_active_connection(NWConcrete_nw_service_connector *a1, NWConcrete_nw_unique_connection *a2)
{
  NWConcrete_nw_service_connector *v3;
  NWConcrete_nw_unique_connection *v4;
  void **p_isa;
  id v6;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  void *v11;
  char *v12;
  os_log_type_t v13;
  _BOOL4 v14;
  void *v15;
  os_log_type_t v16;
  void *v17;
  void *v18;
  void *v19;
  NSObject *v20;
  os_log_type_t v21;
  void *v22;
  os_log_type_t v23;
  void *v24;
  os_log_type_t v25;
  char *backtrace_string;
  os_log_type_t v27;
  _BOOL4 v28;
  char *v29;
  os_log_type_t v30;
  _BOOL4 v31;
  os_log_type_t v32;
  _BOOL4 v33;
  os_log_type_t v34;
  os_log_type_t v35;
  os_log_type_t v36;
  char v37;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v40;
  __int16 v41;
  void *v42;
  __int16 v43;
  void **v44;
  __int16 v45;
  char *v46;
  uint8_t v47[32];
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  int v73;
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  p_isa = (void **)&v4->super.isa;
  if (!v3)
  {
    __nwlog_obj();
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)v47 = 136446210;
    *(_QWORD *)&v47[4] = "nw_service_connector_remove_active_connection";
    v8 = (char *)_os_log_send_and_compose_impl();

    buf[0] = 16;
    type = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v8, buf, &type))
      goto LABEL_23;
    if (buf[0] == 17)
    {
      __nwlog_obj();
      v20 = objc_claimAutoreleasedReturnValue();
      v21 = buf[0];
      if (os_log_type_enabled(v20, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)v47 = 136446210;
        *(_QWORD *)&v47[4] = "nw_service_connector_remove_active_connection";
        _os_log_impl(&dword_182FBE000, v20, v21, "%{public}s called with null serviceConnector", v47, 0xCu);
      }
    }
    else if (type)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v20 = objc_claimAutoreleasedReturnValue();
      v27 = buf[0];
      v28 = os_log_type_enabled(v20, (os_log_type_t)buf[0]);
      if (backtrace_string)
      {
        if (v28)
        {
          *(_DWORD *)v47 = 136446466;
          *(_QWORD *)&v47[4] = "nw_service_connector_remove_active_connection";
          *(_WORD *)&v47[12] = 2082;
          *(_QWORD *)&v47[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v20, v27, "%{public}s called with null serviceConnector, dumping backtrace:%{public}s", v47, 0x16u);
        }

        free(backtrace_string);
LABEL_23:
        if (!v8)
          goto LABEL_25;
LABEL_24:
        free(v8);
        goto LABEL_25;
      }
      if (v28)
      {
        *(_DWORD *)v47 = 136446210;
        *(_QWORD *)&v47[4] = "nw_service_connector_remove_active_connection";
        _os_log_impl(&dword_182FBE000, v20, v27, "%{public}s called with null serviceConnector, no backtrace", v47, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v20 = objc_claimAutoreleasedReturnValue();
      v34 = buf[0];
      if (os_log_type_enabled(v20, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)v47 = 136446210;
        *(_QWORD *)&v47[4] = "nw_service_connector_remove_active_connection";
        _os_log_impl(&dword_182FBE000, v20, v34, "%{public}s called with null serviceConnector, backtrace limit exceeded", v47, 0xCu);
      }
    }
LABEL_74:

    goto LABEL_23;
  }
  if (!v3->activeConnections)
  {
    __nwlog_obj();
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)v47 = 136446210;
    *(_QWORD *)&v47[4] = "nw_service_connector_remove_active_connection";
    v8 = (char *)_os_log_send_and_compose_impl();

    buf[0] = 16;
    type = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v8, buf, &type))
      goto LABEL_23;
    if (buf[0] == 17)
    {
      __nwlog_obj();
      v20 = objc_claimAutoreleasedReturnValue();
      v23 = buf[0];
      if (os_log_type_enabled(v20, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)v47 = 136446210;
        *(_QWORD *)&v47[4] = "nw_service_connector_remove_active_connection";
        _os_log_impl(&dword_182FBE000, v20, v23, "%{public}s called with null serviceConnector->activeConnections", v47, 0xCu);
      }
      goto LABEL_74;
    }
    if (type == OS_LOG_TYPE_DEFAULT)
    {
      __nwlog_obj();
      v20 = objc_claimAutoreleasedReturnValue();
      v35 = buf[0];
      if (os_log_type_enabled(v20, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)v47 = 136446210;
        *(_QWORD *)&v47[4] = "nw_service_connector_remove_active_connection";
        _os_log_impl(&dword_182FBE000, v20, v35, "%{public}s called with null serviceConnector->activeConnections, backtrace limit exceeded", v47, 0xCu);
      }
      goto LABEL_74;
    }
    v29 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v20 = objc_claimAutoreleasedReturnValue();
    v30 = buf[0];
    v31 = os_log_type_enabled(v20, (os_log_type_t)buf[0]);
    if (!v29)
    {
      if (v31)
      {
        *(_DWORD *)v47 = 136446210;
        *(_QWORD *)&v47[4] = "nw_service_connector_remove_active_connection";
        _os_log_impl(&dword_182FBE000, v20, v30, "%{public}s called with null serviceConnector->activeConnections, no backtrace", v47, 0xCu);
      }
      goto LABEL_74;
    }
    if (v31)
    {
      *(_DWORD *)v47 = 136446466;
      *(_QWORD *)&v47[4] = "nw_service_connector_remove_active_connection";
      *(_WORD *)&v47[12] = 2082;
      *(_QWORD *)&v47[14] = v29;
      _os_log_impl(&dword_182FBE000, v20, v30, "%{public}s called with null serviceConnector->activeConnections, dumping backtrace:%{public}s", v47, 0x16u);
    }
    goto LABEL_55;
  }
  if (!v4)
  {
    __nwlog_obj();
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)v47 = 136446210;
    *(_QWORD *)&v47[4] = "nw_service_connector_remove_active_connection";
    v8 = (char *)_os_log_send_and_compose_impl();

    buf[0] = 16;
    type = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v8, buf, &type))
      goto LABEL_23;
    if (buf[0] == 17)
    {
      __nwlog_obj();
      v20 = objc_claimAutoreleasedReturnValue();
      v25 = buf[0];
      if (os_log_type_enabled(v20, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)v47 = 136446210;
        *(_QWORD *)&v47[4] = "nw_service_connector_remove_active_connection";
        _os_log_impl(&dword_182FBE000, v20, v25, "%{public}s called with null activeConnection", v47, 0xCu);
      }
      goto LABEL_74;
    }
    if (type == OS_LOG_TYPE_DEFAULT)
    {
      __nwlog_obj();
      v20 = objc_claimAutoreleasedReturnValue();
      v36 = buf[0];
      if (os_log_type_enabled(v20, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)v47 = 136446210;
        *(_QWORD *)&v47[4] = "nw_service_connector_remove_active_connection";
        _os_log_impl(&dword_182FBE000, v20, v36, "%{public}s called with null activeConnection, backtrace limit exceeded", v47, 0xCu);
      }
      goto LABEL_74;
    }
    v29 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v20 = objc_claimAutoreleasedReturnValue();
    v32 = buf[0];
    v33 = os_log_type_enabled(v20, (os_log_type_t)buf[0]);
    if (!v29)
    {
      if (v33)
      {
        *(_DWORD *)v47 = 136446210;
        *(_QWORD *)&v47[4] = "nw_service_connector_remove_active_connection";
        _os_log_impl(&dword_182FBE000, v20, v32, "%{public}s called with null activeConnection, no backtrace", v47, 0xCu);
      }
      goto LABEL_74;
    }
    if (v33)
    {
      *(_DWORD *)v47 = 136446466;
      *(_QWORD *)&v47[4] = "nw_service_connector_remove_active_connection";
      *(_WORD *)&v47[12] = 2082;
      *(_QWORD *)&v47[14] = v29;
      _os_log_impl(&dword_182FBE000, v20, v32, "%{public}s called with null activeConnection, dumping backtrace:%{public}s", v47, 0x16u);
    }
LABEL_55:

    free(v29);
    if (!v8)
      goto LABEL_25;
    goto LABEL_24;
  }
  nwsc_unique_connection_shutdown_socket(v3, v4);
  v73 = 0;
  v71 = 0u;
  v72 = 0u;
  v69 = 0u;
  v70 = 0u;
  v67 = 0u;
  v68 = 0u;
  v65 = 0u;
  v66 = 0u;
  v63 = 0u;
  v64 = 0u;
  v61 = 0u;
  v62 = 0u;
  v59 = 0u;
  v60 = 0u;
  v57 = 0u;
  v58 = 0u;
  v55 = 0u;
  v56 = 0u;
  v53 = 0u;
  v54 = 0u;
  v51 = 0u;
  v52 = 0u;
  v49 = 0u;
  v50 = 0u;
  v48 = 0u;
  memset(v47, 0, sizeof(v47));
  if (nwsc_get_identifier(p_isa[1], (uint64_t)(p_isa + 2), v47))
  {
    nw_dictionary_set_value((uint64_t)v3->activeConnections, (const char *)v47, 0);
    goto LABEL_25;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v6 = (id)gLogObj;
  v7 = p_isa[1];
  *(_DWORD *)buf = 136446722;
  v40 = "nw_service_connector_remove_active_connection";
  v41 = 2114;
  v42 = v7;
  v43 = 2082;
  v44 = p_isa + 2;
  v8 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v37 = 0;
  if (!__nwlog_fault(v8, &type, &v37))
    goto LABEL_23;
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v9 = (id)gLogObj;
    v10 = type;
    if (os_log_type_enabled(v9, type))
    {
      v11 = p_isa[1];
      *(_DWORD *)buf = 136446722;
      v40 = "nw_service_connector_remove_active_connection";
      v41 = 2114;
      v42 = v11;
      v43 = 2082;
      v44 = p_isa + 2;
      _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s Could not get identifier for endpoint %{public}@, service %{public}s", buf, 0x20u);
    }
LABEL_22:

    goto LABEL_23;
  }
  if (!v37)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v9 = (id)gLogObj;
    v16 = type;
    if (os_log_type_enabled(v9, type))
    {
      v17 = p_isa[1];
      *(_DWORD *)buf = 136446722;
      v40 = "nw_service_connector_remove_active_connection";
      v41 = 2114;
      v42 = v17;
      v43 = 2082;
      v44 = p_isa + 2;
      _os_log_impl(&dword_182FBE000, v9, v16, "%{public}s Could not get identifier for endpoint %{public}@, service %{public}s, backtrace limit exceeded", buf, 0x20u);
    }
    goto LABEL_22;
  }
  v12 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v9 = (id)gLogObj;
  v13 = type;
  v14 = os_log_type_enabled(v9, type);
  if (!v12)
  {
    if (v14)
    {
      v18 = p_isa[1];
      *(_DWORD *)buf = 136446722;
      v40 = "nw_service_connector_remove_active_connection";
      v41 = 2114;
      v42 = v18;
      v43 = 2082;
      v44 = p_isa + 2;
      _os_log_impl(&dword_182FBE000, v9, v13, "%{public}s Could not get identifier for endpoint %{public}@, service %{public}s, no backtrace", buf, 0x20u);
    }
    goto LABEL_22;
  }
  if (v14)
  {
    v15 = p_isa[1];
    *(_DWORD *)buf = 136446978;
    v40 = "nw_service_connector_remove_active_connection";
    v41 = 2114;
    v42 = v15;
    v43 = 2082;
    v44 = p_isa + 2;
    v45 = 2082;
    v46 = v12;
    _os_log_impl(&dword_182FBE000, v9, v13, "%{public}s Could not get identifier for endpoint %{public}@, service %{public}s, dumping backtrace:%{public}s", buf, 0x2Au);
  }

  free(v12);
  if (v8)
    goto LABEL_24;
LABEL_25:

}

void sub_183870374(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void *nw_service_connector_copy_active_connection_with_endpoint_and_service(void *a1, void *a2, uint64_t a3)
{
  uint64_t *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  const char *v10;
  NSObject *v11;
  os_log_type_t v12;
  char *v13;
  os_log_type_t v14;
  _BOOL4 v15;
  os_log_type_t v16;
  char *v17;
  void *v19;
  const char *v20;
  NSObject *v21;
  os_log_type_t v22;
  void *v23;
  os_log_type_t v24;
  void *v25;
  os_log_type_t v26;
  void *v27;
  os_log_type_t v28;
  char *backtrace_string;
  os_log_type_t v30;
  _BOOL4 v31;
  os_log_type_t v32;
  _BOOL4 v33;
  os_log_type_t v34;
  _BOOL4 v35;
  os_log_type_t v36;
  _BOOL4 v37;
  os_log_type_t v38;
  os_log_type_t v39;
  os_log_type_t v40;
  os_log_type_t v41;
  char v42;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v45;
  __int16 v46;
  void *v47;
  __int16 v48;
  uint64_t v49;
  __int16 v50;
  char *v51;
  uint8_t v52[32];
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  int v78;
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = v6;
  if (!v5)
  {
    __nwlog_obj();
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)v52 = 136446210;
    *(_QWORD *)&v52[4] = "nw_service_connector_copy_active_connection_with_endpoint_and_service";
    v20 = (const char *)_os_log_send_and_compose_impl();

    buf[0] = 16;
    type = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v20, buf, &type))
      goto LABEL_69;
    if (buf[0] == 17)
    {
      __nwlog_obj();
      v21 = objc_claimAutoreleasedReturnValue();
      v22 = buf[0];
      if (os_log_type_enabled(v21, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)v52 = 136446210;
        *(_QWORD *)&v52[4] = "nw_service_connector_copy_active_connection_with_endpoint_and_service";
        _os_log_impl(&dword_182FBE000, v21, v22, "%{public}s called with null serviceConnector", v52, 0xCu);
      }
      goto LABEL_94;
    }
    if (type == OS_LOG_TYPE_DEFAULT)
    {
      __nwlog_obj();
      v21 = objc_claimAutoreleasedReturnValue();
      v38 = buf[0];
      if (os_log_type_enabled(v21, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)v52 = 136446210;
        *(_QWORD *)&v52[4] = "nw_service_connector_copy_active_connection_with_endpoint_and_service";
        _os_log_impl(&dword_182FBE000, v21, v38, "%{public}s called with null serviceConnector, backtrace limit exceeded", v52, 0xCu);
      }
      goto LABEL_94;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v21 = objc_claimAutoreleasedReturnValue();
    v30 = buf[0];
    v31 = os_log_type_enabled(v21, (os_log_type_t)buf[0]);
    if (!backtrace_string)
    {
      if (v31)
      {
        *(_DWORD *)v52 = 136446210;
        *(_QWORD *)&v52[4] = "nw_service_connector_copy_active_connection_with_endpoint_and_service";
        _os_log_impl(&dword_182FBE000, v21, v30, "%{public}s called with null serviceConnector, no backtrace", v52, 0xCu);
      }
      goto LABEL_94;
    }
    if (v31)
    {
      *(_DWORD *)v52 = 136446466;
      *(_QWORD *)&v52[4] = "nw_service_connector_copy_active_connection_with_endpoint_and_service";
      *(_WORD *)&v52[12] = 2082;
      *(_QWORD *)&v52[14] = backtrace_string;
      _os_log_impl(&dword_182FBE000, v21, v30, "%{public}s called with null serviceConnector, dumping backtrace:%{public}s", v52, 0x16u);
    }
LABEL_68:

    free(backtrace_string);
    goto LABEL_69;
  }
  if (!v5[11])
  {
    __nwlog_obj();
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)v52 = 136446210;
    *(_QWORD *)&v52[4] = "nw_service_connector_copy_active_connection_with_endpoint_and_service";
    v20 = (const char *)_os_log_send_and_compose_impl();

    buf[0] = 16;
    type = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v20, buf, &type))
      goto LABEL_69;
    if (buf[0] == 17)
    {
      __nwlog_obj();
      v21 = objc_claimAutoreleasedReturnValue();
      v24 = buf[0];
      if (os_log_type_enabled(v21, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)v52 = 136446210;
        *(_QWORD *)&v52[4] = "nw_service_connector_copy_active_connection_with_endpoint_and_service";
        _os_log_impl(&dword_182FBE000, v21, v24, "%{public}s called with null serviceConnector->activeConnections", v52, 0xCu);
      }
      goto LABEL_94;
    }
    if (type == OS_LOG_TYPE_DEFAULT)
    {
      __nwlog_obj();
      v21 = objc_claimAutoreleasedReturnValue();
      v39 = buf[0];
      if (os_log_type_enabled(v21, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)v52 = 136446210;
        *(_QWORD *)&v52[4] = "nw_service_connector_copy_active_connection_with_endpoint_and_service";
        _os_log_impl(&dword_182FBE000, v21, v39, "%{public}s called with null serviceConnector->activeConnections, backtrace limit exceeded", v52, 0xCu);
      }
      goto LABEL_94;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v21 = objc_claimAutoreleasedReturnValue();
    v32 = buf[0];
    v33 = os_log_type_enabled(v21, (os_log_type_t)buf[0]);
    if (!backtrace_string)
    {
      if (v33)
      {
        *(_DWORD *)v52 = 136446210;
        *(_QWORD *)&v52[4] = "nw_service_connector_copy_active_connection_with_endpoint_and_service";
        _os_log_impl(&dword_182FBE000, v21, v32, "%{public}s called with null serviceConnector->activeConnections, no backtrace", v52, 0xCu);
      }
      goto LABEL_94;
    }
    if (v33)
    {
      *(_DWORD *)v52 = 136446466;
      *(_QWORD *)&v52[4] = "nw_service_connector_copy_active_connection_with_endpoint_and_service";
      *(_WORD *)&v52[12] = 2082;
      *(_QWORD *)&v52[14] = backtrace_string;
      _os_log_impl(&dword_182FBE000, v21, v32, "%{public}s called with null serviceConnector->activeConnections, dumping backtrace:%{public}s", v52, 0x16u);
    }
    goto LABEL_68;
  }
  if (!v6)
  {
    __nwlog_obj();
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)v52 = 136446210;
    *(_QWORD *)&v52[4] = "nw_service_connector_copy_active_connection_with_endpoint_and_service";
    v20 = (const char *)_os_log_send_and_compose_impl();

    buf[0] = 16;
    type = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v20, buf, &type))
      goto LABEL_69;
    if (buf[0] == 17)
    {
      __nwlog_obj();
      v21 = objc_claimAutoreleasedReturnValue();
      v26 = buf[0];
      if (os_log_type_enabled(v21, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)v52 = 136446210;
        *(_QWORD *)&v52[4] = "nw_service_connector_copy_active_connection_with_endpoint_and_service";
        _os_log_impl(&dword_182FBE000, v21, v26, "%{public}s called with null endpoint", v52, 0xCu);
      }
      goto LABEL_94;
    }
    if (type == OS_LOG_TYPE_DEFAULT)
    {
      __nwlog_obj();
      v21 = objc_claimAutoreleasedReturnValue();
      v40 = buf[0];
      if (os_log_type_enabled(v21, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)v52 = 136446210;
        *(_QWORD *)&v52[4] = "nw_service_connector_copy_active_connection_with_endpoint_and_service";
        _os_log_impl(&dword_182FBE000, v21, v40, "%{public}s called with null endpoint, backtrace limit exceeded", v52, 0xCu);
      }
      goto LABEL_94;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v21 = objc_claimAutoreleasedReturnValue();
    v34 = buf[0];
    v35 = os_log_type_enabled(v21, (os_log_type_t)buf[0]);
    if (!backtrace_string)
    {
      if (v35)
      {
        *(_DWORD *)v52 = 136446210;
        *(_QWORD *)&v52[4] = "nw_service_connector_copy_active_connection_with_endpoint_and_service";
        _os_log_impl(&dword_182FBE000, v21, v34, "%{public}s called with null endpoint, no backtrace", v52, 0xCu);
      }
      goto LABEL_94;
    }
    if (v35)
    {
      *(_DWORD *)v52 = 136446466;
      *(_QWORD *)&v52[4] = "nw_service_connector_copy_active_connection_with_endpoint_and_service";
      *(_WORD *)&v52[12] = 2082;
      *(_QWORD *)&v52[14] = backtrace_string;
      _os_log_impl(&dword_182FBE000, v21, v34, "%{public}s called with null endpoint, dumping backtrace:%{public}s", v52, 0x16u);
    }
    goto LABEL_68;
  }
  if (!a3)
  {
    __nwlog_obj();
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)v52 = 136446210;
    *(_QWORD *)&v52[4] = "nw_service_connector_copy_active_connection_with_endpoint_and_service";
    v20 = (const char *)_os_log_send_and_compose_impl();

    buf[0] = 16;
    type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v20, buf, &type))
    {
      if (buf[0] == 17)
      {
        __nwlog_obj();
        v21 = objc_claimAutoreleasedReturnValue();
        v28 = buf[0];
        if (os_log_type_enabled(v21, (os_log_type_t)buf[0]))
        {
          *(_DWORD *)v52 = 136446210;
          *(_QWORD *)&v52[4] = "nw_service_connector_copy_active_connection_with_endpoint_and_service";
          _os_log_impl(&dword_182FBE000, v21, v28, "%{public}s called with null service", v52, 0xCu);
        }
LABEL_94:

        goto LABEL_69;
      }
      if (type == OS_LOG_TYPE_DEFAULT)
      {
        __nwlog_obj();
        v21 = objc_claimAutoreleasedReturnValue();
        v41 = buf[0];
        if (os_log_type_enabled(v21, (os_log_type_t)buf[0]))
        {
          *(_DWORD *)v52 = 136446210;
          *(_QWORD *)&v52[4] = "nw_service_connector_copy_active_connection_with_endpoint_and_service";
          _os_log_impl(&dword_182FBE000, v21, v41, "%{public}s called with null service, backtrace limit exceeded", v52, 0xCu);
        }
        goto LABEL_94;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v21 = objc_claimAutoreleasedReturnValue();
      v36 = buf[0];
      v37 = os_log_type_enabled(v21, (os_log_type_t)buf[0]);
      if (!backtrace_string)
      {
        if (v37)
        {
          *(_DWORD *)v52 = 136446210;
          *(_QWORD *)&v52[4] = "nw_service_connector_copy_active_connection_with_endpoint_and_service";
          _os_log_impl(&dword_182FBE000, v21, v36, "%{public}s called with null service, no backtrace", v52, 0xCu);
        }
        goto LABEL_94;
      }
      if (v37)
      {
        *(_DWORD *)v52 = 136446466;
        *(_QWORD *)&v52[4] = "nw_service_connector_copy_active_connection_with_endpoint_and_service";
        *(_WORD *)&v52[12] = 2082;
        *(_QWORD *)&v52[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v21, v36, "%{public}s called with null service, dumping backtrace:%{public}s", v52, 0x16u);
      }
      goto LABEL_68;
    }
LABEL_69:
    if (!v20)
      goto LABEL_27;
    v17 = (char *)v20;
    goto LABEL_26;
  }
  v78 = 0;
  v76 = 0u;
  v77 = 0u;
  v74 = 0u;
  v75 = 0u;
  v72 = 0u;
  v73 = 0u;
  v70 = 0u;
  v71 = 0u;
  v68 = 0u;
  v69 = 0u;
  v66 = 0u;
  v67 = 0u;
  v64 = 0u;
  v65 = 0u;
  v62 = 0u;
  v63 = 0u;
  v60 = 0u;
  v61 = 0u;
  v58 = 0u;
  v59 = 0u;
  v56 = 0u;
  v57 = 0u;
  v54 = 0u;
  v55 = 0u;
  v53 = 0u;
  memset(v52, 0, sizeof(v52));
  if (!nwsc_get_identifier(v6, a3, v52))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v9 = (id)gLogObj;
    *(_DWORD *)buf = 136446722;
    v45 = "nw_service_connector_copy_active_connection_with_endpoint_and_service";
    v46 = 2114;
    v47 = v7;
    v48 = 2082;
    v49 = a3;
    v10 = (const char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v42 = 0;
    if (__nwlog_fault(v10, &type, &v42))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v11 = (id)gLogObj;
        v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446722;
          v45 = "nw_service_connector_copy_active_connection_with_endpoint_and_service";
          v46 = 2114;
          v47 = v7;
          v48 = 2082;
          v49 = a3;
          _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s Could not get identifier for endpoint %{public}@, service %{public}s", buf, 0x20u);
        }
      }
      else if (v42)
      {
        v13 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v11 = (id)gLogObj;
        v14 = type;
        v15 = os_log_type_enabled(v11, type);
        if (v13)
        {
          if (v15)
          {
            *(_DWORD *)buf = 136446978;
            v45 = "nw_service_connector_copy_active_connection_with_endpoint_and_service";
            v46 = 2114;
            v47 = v7;
            v48 = 2082;
            v49 = a3;
            v50 = 2082;
            v51 = v13;
            _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s Could not get identifier for endpoint %{public}@, service %{public}s, dumping backtrace:%{public}s", buf, 0x2Au);
          }

          free(v13);
          if (!v10)
            goto LABEL_27;
LABEL_25:
          v17 = (char *)v10;
LABEL_26:
          free(v17);
          goto LABEL_27;
        }
        if (v15)
        {
          *(_DWORD *)buf = 136446722;
          v45 = "nw_service_connector_copy_active_connection_with_endpoint_and_service";
          v46 = 2114;
          v47 = v7;
          v48 = 2082;
          v49 = a3;
          _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s Could not get identifier for endpoint %{public}@, service %{public}s, no backtrace", buf, 0x20u);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v11 = (id)gLogObj;
        v16 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446722;
          v45 = "nw_service_connector_copy_active_connection_with_endpoint_and_service";
          v46 = 2114;
          v47 = v7;
          v48 = 2082;
          v49 = a3;
          _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s Could not get identifier for endpoint %{public}@, service %{public}s, backtrace limit exceeded", buf, 0x20u);
        }
      }

    }
    if (!v10)
    {
LABEL_27:
      v8 = 0;
      goto LABEL_28;
    }
    goto LABEL_25;
  }
  v8 = nw_dictionary_copy_value(v5[11], (uint64_t)v52);
LABEL_28:

  return v8;
}

void sub_183870F64(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void nwsc_unique_connection_shutdown_socket(NWConcrete_nw_service_connector *a1, NWConcrete_nw_unique_connection *a2)
{
  NWConcrete_nw_service_connector *v3;
  NWConcrete_nw_unique_connection *v4;
  int *v5;
  int dupedSocketFD;
  int v7;
  NSObject *v8;
  const char *v9;
  NSObject *v10;
  os_log_type_t v11;
  uint32_t v12;
  void *v13;
  char *v14;
  NSObject *v15;
  os_log_type_t v16;
  void *v17;
  os_log_type_t v18;
  char *backtrace_string;
  os_log_type_t v20;
  _BOOL4 v21;
  char *v22;
  os_log_type_t v23;
  _BOOL4 v24;
  os_log_type_t v25;
  os_log_type_t v26;
  char v27;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v30;
  __int16 v31;
  void *v32;
  __int16 v33;
  int *v34;
  __int16 v35;
  int v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = (int *)v4;
  if (!v3)
  {
    __nwlog_obj();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v30 = "nwsc_unique_connection_shutdown_socket";
    v14 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v27 = 0;
    if (!__nwlog_fault(v14, &type, &v27))
      goto LABEL_45;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v15 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nwsc_unique_connection_shutdown_socket";
        _os_log_impl(&dword_182FBE000, v15, v16, "%{public}s called with null serviceConnector", buf, 0xCu);
      }
    }
    else if (v27)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v15 = objc_claimAutoreleasedReturnValue();
      v20 = type;
      v21 = os_log_type_enabled(v15, type);
      if (backtrace_string)
      {
        if (v21)
        {
          *(_DWORD *)buf = 136446466;
          v30 = "nwsc_unique_connection_shutdown_socket";
          v31 = 2082;
          v32 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v15, v20, "%{public}s called with null serviceConnector, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_45:
        if (!v14)
          goto LABEL_11;
        goto LABEL_46;
      }
      if (v21)
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nwsc_unique_connection_shutdown_socket";
        _os_log_impl(&dword_182FBE000, v15, v20, "%{public}s called with null serviceConnector, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v15 = objc_claimAutoreleasedReturnValue();
      v25 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nwsc_unique_connection_shutdown_socket";
        _os_log_impl(&dword_182FBE000, v15, v25, "%{public}s called with null serviceConnector, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_44:

    goto LABEL_45;
  }
  if (!v4)
  {
    __nwlog_obj();
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v30 = "nwsc_unique_connection_shutdown_socket";
    v14 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v27 = 0;
    if (!__nwlog_fault(v14, &type, &v27))
      goto LABEL_45;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v15 = objc_claimAutoreleasedReturnValue();
      v18 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nwsc_unique_connection_shutdown_socket";
        _os_log_impl(&dword_182FBE000, v15, v18, "%{public}s called with null uniqueConnection", buf, 0xCu);
      }
    }
    else if (v27)
    {
      v22 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v15 = objc_claimAutoreleasedReturnValue();
      v23 = type;
      v24 = os_log_type_enabled(v15, type);
      if (v22)
      {
        if (v24)
        {
          *(_DWORD *)buf = 136446466;
          v30 = "nwsc_unique_connection_shutdown_socket";
          v31 = 2082;
          v32 = v22;
          _os_log_impl(&dword_182FBE000, v15, v23, "%{public}s called with null uniqueConnection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v22);
        if (!v14)
          goto LABEL_11;
LABEL_46:
        free(v14);
        goto LABEL_11;
      }
      if (v24)
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nwsc_unique_connection_shutdown_socket";
        _os_log_impl(&dword_182FBE000, v15, v23, "%{public}s called with null uniqueConnection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v15 = objc_claimAutoreleasedReturnValue();
      v26 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nwsc_unique_connection_shutdown_socket";
        _os_log_impl(&dword_182FBE000, v15, v26, "%{public}s called with null uniqueConnection, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_44;
  }
  dupedSocketFD = v4->dupedSocketFD;
  if ((dupedSocketFD & 0x80000000) == 0)
  {
    if (shutdown(dupedSocketFD, 2))
    {
      v7 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v8 = (id)gLogObj;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446978;
        v30 = "nwsc_unique_connection_shutdown_socket";
        v31 = 2114;
        v32 = v3;
        v33 = 2114;
        v34 = v5;
        v35 = 1024;
        v36 = v7;
        v9 = "%{public}s %{public}@ failed to shutdown socket on %{public}@ %{darwin.errno}d";
        v10 = v8;
        v11 = OS_LOG_TYPE_ERROR;
        v12 = 38;
LABEL_9:
        _os_log_impl(&dword_182FBE000, v10, v11, v9, buf, v12);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v8 = (id)gLogObj;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446722;
        v30 = "nwsc_unique_connection_shutdown_socket";
        v31 = 2114;
        v32 = v3;
        v33 = 2114;
        v34 = v5;
        v9 = "%{public}s %{public}@ shutdown socket on %{public}@";
        v10 = v8;
        v11 = OS_LOG_TYPE_DEFAULT;
        v12 = 32;
        goto LABEL_9;
      }
    }

    close(v5[124]);
    v5[124] = -1;
  }
LABEL_11:

}

void sub_183871570(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void ___ZL31nwsc_request_start_path_watcherP31NWConcrete_nw_service_connectorP39NWConcrete_nw_unique_connection_requestP24NWConcrete_nw_connectionb_block_invoke(_QWORD *a1, void *a2)
{
  NSObject *v3;
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  const char *v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL4 v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  NSObject *v16;
  NSObject *v17;
  uint64_t v18;
  NSObject *v19;
  int v20;
  const char *v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  NSObject *v25;
  __int16 v26;
  NSObject *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (*(_DWORD *)(a1[4] + 16) == 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v4 = (id)gLogObj;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v5 = a1[4];
      v6 = a1[5];
      v20 = 136446978;
      v21 = "nwsc_request_start_path_watcher_block_invoke";
      v22 = 2114;
      v23 = v5;
      v24 = 2114;
      v25 = v3;
      v26 = 2114;
      v27 = v6;
      v7 = "%{public}s %{public}@ already cancelled, ignoring received path update %{public}@ for request %{public}@";
      v8 = v4;
      v9 = OS_LOG_TYPE_ERROR;
LABEL_7:
      _os_log_impl(&dword_182FBE000, v8, v9, v7, (uint8_t *)&v20, 0x2Au);
      goto LABEL_8;
    }
    goto LABEL_8;
  }
  v10 = a1[6];
  v11 = *(_QWORD *)(a1[5] + 584);
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v4 = (id)gLogObj;
  v12 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (v11 != v10)
  {
    if (v12)
    {
      v13 = a1[4];
      v14 = a1[5];
      v20 = 136446978;
      v21 = "nwsc_request_start_path_watcher_block_invoke";
      v22 = 2114;
      v23 = v13;
      v24 = 2114;
      v25 = v3;
      v26 = 2114;
      v27 = v14;
      v7 = "%{public}s %{public}@ ignoring received path update %{public}@ for request %{public}@";
      v8 = v4;
      v9 = OS_LOG_TYPE_DEFAULT;
      goto LABEL_7;
    }
LABEL_8:

    goto LABEL_9;
  }
  if (v12)
  {
    v15 = a1[4];
    v16 = a1[5];
    v20 = 136446978;
    v21 = "nwsc_request_start_path_watcher_block_invoke";
    v22 = 2114;
    v23 = v15;
    v24 = 2114;
    v25 = v3;
    v26 = 2114;
    v27 = v16;
    _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ received path update %{public}@ for request %{public}@", (uint8_t *)&v20, 0x2Au);
  }

  if ((nw_path_get_status(v3) & 0xFFFFFFFD) == 1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v17 = (id)gLogObj;
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      v18 = a1[4];
      v19 = a1[5];
      v20 = 136446978;
      v21 = "nwsc_request_start_path_watcher_block_invoke";
      v22 = 2114;
      v23 = v18;
      v24 = 2114;
      v25 = v19;
      v26 = 2114;
      v27 = v3;
      _os_log_impl(&dword_182FBE000, v17, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ restarting connection for request %{public}@ due to path update %{public}@", (uint8_t *)&v20, 0x2Au);
    }

    nwsc_request_create_and_start_connection_inner(a1[4], a1[5], 0);
    v4 = objc_claimAutoreleasedReturnValue();
    goto LABEL_8;
  }
LABEL_9:

}

void sub_183871858(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZL45nw_service_connector_should_accept_connectionP31NWConcrete_nw_service_connectorP24NWConcrete_nw_connectionb_block_invoke(uint64_t a1, void *a2, uint64_t a3, int a4, void *a5)
{
  NSObject *v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  NSObject *v12;
  NSObject *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  char *v21;
  NSObject *v22;
  os_log_type_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  char *backtrace_string;
  os_log_type_t v29;
  _BOOL4 v30;
  os_log_type_t v31;
  _QWORD v32[4];
  id v33;
  id v34;
  __int16 v35;
  unsigned __int16 v36;
  char v37;
  unsigned __int16 v38;
  _QWORD v39[4];
  os_log_type_t type[8];
  os_log_type_t *v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE applier[24];
  _BYTE v45[32];
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v8 = a2;
  if ((nw_service_connector_verify_read_succeeded(*(void **)(a1 + 32), *(void **)(a1 + 40), *(unsigned __int8 *)(a1 + 48), 2, v8, a4, a5, "first") & 1) == 0)goto LABEL_42;
  v38 = 0;
  *(_QWORD *)type = 0;
  v41 = type;
  v42 = 0x2000000000;
  v43 = 0;
  v39[0] = 0;
  v39[1] = v39;
  v39[2] = 0x2000000000;
  v39[3] = &v38;
  if (v8)
  {
    *(_QWORD *)applier = MEMORY[0x1E0C809B0];
    *(_QWORD *)&applier[8] = 0x40000000;
    *(_QWORD *)&applier[16] = __nw_dispatch_data_copyout_block_invoke;
    *(_QWORD *)v45 = &unk_1E14A3448;
    *(_QWORD *)&v45[16] = v39;
    *(_QWORD *)&v45[24] = 2;
    *(_QWORD *)&v45[8] = type;
    dispatch_data_apply(v8, applier);
    v9 = *((_QWORD *)v41 + 3);
  }
  else
  {
    v9 = 0;
  }
  _Block_object_dispose(v39, 8);
  _Block_object_dispose(type, 8);
  if (v9 != 2)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v17 = (id)gLogObj;
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      v18 = *(_QWORD *)(a1 + 32);
      v19 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)applier = 136446978;
      *(_QWORD *)&applier[4] = "nw_service_connector_should_accept_connection_block_invoke";
      *(_WORD *)&applier[12] = 2114;
      *(_QWORD *)&applier[14] = v18;
      *(_WORD *)&applier[22] = 2048;
      *(_QWORD *)v45 = v9;
      *(_WORD *)&v45[8] = 2114;
      *(_QWORD *)&v45[10] = v19;
      _os_log_impl(&dword_182FBE000, v17, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ first read copyout had insufficient length %zu, cancelling %{public}@", applier, 0x2Au);
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v20 = (id)gLogObj;
    *(_DWORD *)applier = 136446210;
    *(_QWORD *)&applier[4] = "nw_service_connector_should_accept_connection_block_invoke";
    v21 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v39[0]) = 0;
    if (__nwlog_fault(v21, type, v39))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v22 = (id)gLogObj;
        v23 = type[0];
        if (os_log_type_enabled(v22, type[0]))
        {
          *(_DWORD *)applier = 136446210;
          *(_QWORD *)&applier[4] = "nw_service_connector_should_accept_connection_block_invoke";
          _os_log_impl(&dword_182FBE000, v22, v23, "%{public}s first nw_dispatch_data_copyout failed", applier, 0xCu);
        }
      }
      else if (LOBYTE(v39[0]))
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v22 = (id)gLogObj;
        v29 = type[0];
        v30 = os_log_type_enabled(v22, type[0]);
        if (backtrace_string)
        {
          if (v30)
          {
            *(_DWORD *)applier = 136446466;
            *(_QWORD *)&applier[4] = "nw_service_connector_should_accept_connection_block_invoke";
            *(_WORD *)&applier[12] = 2082;
            *(_QWORD *)&applier[14] = backtrace_string;
            _os_log_impl(&dword_182FBE000, v22, v29, "%{public}s first nw_dispatch_data_copyout failed, dumping backtrace:%{public}s", applier, 0x16u);
          }

          free(backtrace_string);
          if (!v21)
            goto LABEL_41;
          goto LABEL_40;
        }
        if (v30)
        {
          *(_DWORD *)applier = 136446210;
          *(_QWORD *)&applier[4] = "nw_service_connector_should_accept_connection_block_invoke";
          _os_log_impl(&dword_182FBE000, v22, v29, "%{public}s first nw_dispatch_data_copyout failed, no backtrace", applier, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v22 = (id)gLogObj;
        v31 = type[0];
        if (os_log_type_enabled(v22, type[0]))
        {
          *(_DWORD *)applier = 136446210;
          *(_QWORD *)&applier[4] = "nw_service_connector_should_accept_connection_block_invoke";
          _os_log_impl(&dword_182FBE000, v22, v31, "%{public}s first nw_dispatch_data_copyout failed, backtrace limit exceeded", applier, 0xCu);
        }
      }

    }
    if (!v21)
    {
LABEL_41:
      nw_connection_cancel(*(nw_connection_t *)(a1 + 40));
      goto LABEL_42;
    }
LABEL_40:
    free(v21);
    goto LABEL_41;
  }
  v10 = bswap32(v38) >> 16;
  if (*(_BYTE *)(a1 + 48))
    v11 = 79;
  else
    v11 = 42;
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v12 = (id)gLogObj;
  v13 = v12;
  if (v11 <= v10)
  {
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      v24 = "incoming";
      if (!*(_BYTE *)(a1 + 48))
        v24 = "outgoing";
      v25 = *(_QWORD *)(a1 + 32);
      v26 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)applier = 136447234;
      *(_QWORD *)&applier[4] = "nw_service_connector_should_accept_connection_block_invoke";
      *(_WORD *)&applier[12] = 2114;
      *(_QWORD *)&applier[14] = v25;
      *(_WORD *)&applier[22] = 1024;
      *(_DWORD *)v45 = v10;
      *(_WORD *)&v45[4] = 2082;
      *(_QWORD *)&v45[6] = v24;
      *(_WORD *)&v45[14] = 2114;
      *(_QWORD *)&v45[16] = v26;
      _os_log_impl(&dword_182FBE000, v13, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ performing second read of length %u on %{public}s connection %{public}@", applier, 0x30u);
    }

    v32[0] = MEMORY[0x1E0C809B0];
    v32[1] = 3221225472;
    v32[2] = ___ZL45nw_service_connector_should_accept_connectionP31NWConcrete_nw_service_connectorP24NWConcrete_nw_connectionb_block_invoke_174;
    v32[3] = &unk_1E14A3BE8;
    v27 = *(void **)(a1 + 40);
    v33 = *(id *)(a1 + 32);
    v34 = *(id *)(a1 + 40);
    v37 = *(_BYTE *)(a1 + 48);
    v35 = v10;
    v36 = v38;
    nw_connection_receive_internal(v27, 0, v10, v10, v32);

  }
  else
  {
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      v14 = "incoming";
      v15 = *(_QWORD *)(a1 + 32);
      v16 = *(_QWORD *)(a1 + 40);
      if (!*(_BYTE *)(a1 + 48))
        v14 = "outgoing";
      *(_DWORD *)applier = 136447490;
      *(_QWORD *)&applier[4] = "nw_service_connector_should_accept_connection_block_invoke";
      *(_WORD *)&applier[12] = 2114;
      *(_QWORD *)&applier[14] = v15;
      *(_WORD *)&applier[22] = 1024;
      *(_DWORD *)v45 = v10;
      *(_WORD *)&v45[4] = 1024;
      *(_DWORD *)&v45[6] = v11;
      *(_WORD *)&v45[10] = 2082;
      *(_QWORD *)&v45[12] = v14;
      *(_WORD *)&v45[20] = 2114;
      *(_QWORD *)&v45[22] = v16;
      _os_log_impl(&dword_182FBE000, v13, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ message length %u < %u on %{public}s connection %{public}@", applier, 0x36u);
    }

    nw_connection_cancel(*(nw_connection_t *)(a1 + 40));
  }
LABEL_42:

}

void sub_183871EE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  void *v19;

  _Unwind_Resume(a1);
}

uint64_t nw_service_connector_verify_read_succeeded(void *a1, void *a2, int a3, int a4, void *a5, int a6, void *a7, void *a8)
{
  NWConcrete_nw_service_connector *v15;
  NWConcrete_nw_connection *v16;
  id v17;
  void *v18;
  NSObject *v19;
  _DWORD *v20;
  int v21;
  NSObject *v22;
  const char *v23;
  const char *v24;
  id v25;
  const char *v26;
  char *v27;
  NSObject *v28;
  os_log_type_t v29;
  NSObject *v30;
  NSObject *v31;
  int size;
  const char *v33;
  char *v34;
  NSObject *v35;
  os_log_type_t v36;
  id v37;
  char *v38;
  NSObject *v39;
  os_log_type_t v40;
  NSObject *v41;
  NSObject *v42;
  const char *v43;
  uint64_t v44;
  const char *v45;
  os_log_type_t v46;
  os_log_type_t v47;
  NWConcrete_nw_unique_connection_request *v48;
  NSObject *v49;
  _BOOL4 v50;
  NSObject *v51;
  NSObject *v52;
  void *v54;
  char *v55;
  NSObject *v56;
  os_log_type_t v57;
  void *v58;
  char *v59;
  NSObject *v60;
  os_log_type_t v61;
  char *v62;
  os_log_type_t v63;
  _BOOL4 v64;
  char *v65;
  _BOOL4 v66;
  char *v67;
  _BOOL4 v68;
  os_log_type_t v69;
  os_log_type_t v70;
  os_log_type_t v71;
  void *v72;
  char *v73;
  NSObject *v74;
  os_log_type_t v75;
  void *v76;
  os_log_type_t v77;
  char *backtrace_string;
  os_log_type_t v79;
  _BOOL4 v80;
  os_log_type_t v81;
  _BOOL4 v82;
  os_log_type_t v83;
  os_log_type_t v84;
  os_log_type_t v85;
  os_log_type_t v86;
  NSObject *data;
  char v88;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v91;
  __int16 v92;
  void *v93;
  __int16 v94;
  _BYTE v95[40];
  uint64_t v96;

  v96 = *MEMORY[0x1E0C80C00];
  v15 = a1;
  v16 = a2;
  data = a5;
  v17 = a7;
  v18 = v17;
  if (!v15)
  {
    __nwlog_obj();
    v72 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v91 = "nw_service_connector_verify_read_succeeded";
    v73 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v88 = 0;
    if (!__nwlog_fault(v73, &type, &v88))
      goto LABEL_177;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v74 = objc_claimAutoreleasedReturnValue();
      v75 = type;
      if (os_log_type_enabled(v74, type))
      {
        *(_DWORD *)buf = 136446210;
        v91 = "nw_service_connector_verify_read_succeeded";
        _os_log_impl(&dword_182FBE000, v74, v75, "%{public}s called with null serviceConnector", buf, 0xCu);
      }
      goto LABEL_176;
    }
    if (!v88)
    {
      __nwlog_obj();
      v74 = objc_claimAutoreleasedReturnValue();
      v83 = type;
      if (os_log_type_enabled(v74, type))
      {
        *(_DWORD *)buf = 136446210;
        v91 = "nw_service_connector_verify_read_succeeded";
        _os_log_impl(&dword_182FBE000, v74, v83, "%{public}s called with null serviceConnector, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_176;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v74 = objc_claimAutoreleasedReturnValue();
    v79 = type;
    v80 = os_log_type_enabled(v74, type);
    if (!backtrace_string)
    {
      if (v80)
      {
        *(_DWORD *)buf = 136446210;
        v91 = "nw_service_connector_verify_read_succeeded";
        _os_log_impl(&dword_182FBE000, v74, v79, "%{public}s called with null serviceConnector, no backtrace", buf, 0xCu);
      }
      goto LABEL_176;
    }
    if (v80)
    {
      *(_DWORD *)buf = 136446466;
      v91 = "nw_service_connector_verify_read_succeeded";
      v92 = 2082;
      v93 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v74, v79, "%{public}s called with null serviceConnector, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_164;
  }
  if (!v16)
  {
    __nwlog_obj();
    v76 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v91 = "nw_service_connector_verify_read_succeeded";
    v73 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v88 = 0;
    if (!__nwlog_fault(v73, &type, &v88))
      goto LABEL_177;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v74 = objc_claimAutoreleasedReturnValue();
      v77 = type;
      if (os_log_type_enabled(v74, type))
      {
        *(_DWORD *)buf = 136446210;
        v91 = "nw_service_connector_verify_read_succeeded";
        _os_log_impl(&dword_182FBE000, v74, v77, "%{public}s called with null connection", buf, 0xCu);
      }
LABEL_176:

LABEL_177:
      if (v73)
        free(v73);
      goto LABEL_92;
    }
    if (!v88)
    {
      __nwlog_obj();
      v74 = objc_claimAutoreleasedReturnValue();
      v84 = type;
      if (os_log_type_enabled(v74, type))
      {
        *(_DWORD *)buf = 136446210;
        v91 = "nw_service_connector_verify_read_succeeded";
        _os_log_impl(&dword_182FBE000, v74, v84, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_176;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v74 = objc_claimAutoreleasedReturnValue();
    v81 = type;
    v82 = os_log_type_enabled(v74, type);
    if (!backtrace_string)
    {
      if (v82)
      {
        *(_DWORD *)buf = 136446210;
        v91 = "nw_service_connector_verify_read_succeeded";
        _os_log_impl(&dword_182FBE000, v74, v81, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
      goto LABEL_176;
    }
    if (v82)
    {
      *(_DWORD *)buf = 136446466;
      v91 = "nw_service_connector_verify_read_succeeded";
      v92 = 2082;
      v93 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v74, v81, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_164:

    free(backtrace_string);
    goto LABEL_177;
  }
  if (v15->state == 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v19 = (id)gLogObj;
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v91 = "nw_service_connector_verify_read_succeeded";
      v92 = 2114;
      v93 = v15;
      v94 = 2082;
      *(_QWORD *)v95 = a8;
      _os_log_impl(&dword_182FBE000, v19, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ already cancelled, ignoring %{public}s read data", buf, 0x20u);
    }

    nw_connection_cancel(&v16->super);
    goto LABEL_92;
  }
  if (!v17)
  {
    v21 = 0;
    if (data)
      goto LABEL_27;
LABEL_11:
    if (v21)
      goto LABEL_27;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v22 = (id)gLogObj;
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      v23 = "in";
      *(_DWORD *)buf = 136447490;
      v91 = "nw_service_connector_verify_read_succeeded";
      v92 = 2114;
      v93 = v15;
      if (a6)
        v23 = "";
      v94 = 2082;
      *(_QWORD *)v95 = v23;
      v24 = "incoming";
      *(_WORD *)&v95[8] = 2082;
      if (!a3)
        v24 = "outgoing";
      *(_QWORD *)&v95[10] = a8;
      *(_WORD *)&v95[18] = 2082;
      *(_QWORD *)&v95[20] = v24;
      *(_WORD *)&v95[28] = 2114;
      *(_QWORD *)&v95[30] = v16;
      _os_log_impl(&dword_182FBE000, v22, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ received %{public}scomplete empty %{public}s read on %{public}s %{public}@", buf, 0x3Eu);
    }

    if ((a6 & 1) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v25 = (id)gLogObj;
      *(_DWORD *)buf = 136446722;
      v91 = "nw_service_connector_verify_read_succeeded";
      if (a3)
        v26 = "incoming";
      else
        v26 = "outgoing";
      v92 = 2082;
      v93 = (void *)v26;
      v94 = 2082;
      *(_QWORD *)v95 = a8;
      v27 = (char *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v88 = 0;
      if (!__nwlog_fault(v27, &type, &v88))
      {
LABEL_70:
        if (!v27)
          goto LABEL_72;
        goto LABEL_71;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v28 = (id)gLogObj;
        v29 = type;
        if (os_log_type_enabled(v28, type))
        {
          *(_DWORD *)buf = 136446722;
          v91 = "nw_service_connector_verify_read_succeeded";
          v92 = 2082;
          v93 = (void *)v26;
          v94 = 2082;
          *(_QWORD *)v95 = a8;
          _os_log_impl(&dword_182FBE000, v28, v29, "%{public}s %{public}s %{public}s read got no error no data but not complete failed", buf, 0x20u);
        }
LABEL_69:

        goto LABEL_70;
      }
      if (!v88)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v28 = (id)gLogObj;
        v46 = type;
        if (os_log_type_enabled(v28, type))
        {
          *(_DWORD *)buf = 136446722;
          v91 = "nw_service_connector_verify_read_succeeded";
          v92 = 2082;
          v93 = (void *)v26;
          v94 = 2082;
          *(_QWORD *)v95 = a8;
          _os_log_impl(&dword_182FBE000, v28, v46, "%{public}s %{public}s %{public}s read got no error no data but not complete failed, backtrace limit exceeded", buf, 0x20u);
        }
        goto LABEL_69;
      }
      v33 = __nw_create_backtrace_string();
      if (!v33)
      {
        __nwlog_obj();
        v28 = objc_claimAutoreleasedReturnValue();
        v47 = type;
        if (os_log_type_enabled(v28, type))
        {
          *(_DWORD *)buf = 136446722;
          v91 = "nw_service_connector_verify_read_succeeded";
          v92 = 2082;
          v93 = (void *)v26;
          v94 = 2082;
          *(_QWORD *)v95 = a8;
          _os_log_impl(&dword_182FBE000, v28, v47, "%{public}s %{public}s %{public}s read got no error no data but not complete failed, no backtrace", buf, 0x20u);
        }
        goto LABEL_69;
      }
      v34 = (char *)v33;
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v35 = (id)gLogObj;
      v36 = type;
      if (os_log_type_enabled(v35, type))
      {
        *(_DWORD *)buf = 136446978;
        v91 = "nw_service_connector_verify_read_succeeded";
        v92 = 2082;
        v93 = (void *)v26;
        v94 = 2082;
        *(_QWORD *)v95 = a8;
        *(_WORD *)&v95[8] = 2082;
        *(_QWORD *)&v95[10] = v34;
        _os_log_impl(&dword_182FBE000, v35, v36, "%{public}s %{public}s %{public}s read got no error no data but not complete failed, dumping backtrace:%{public}s", buf, 0x2Au);
      }

      free(v34);
      if (v27)
LABEL_71:
        free(v27);
    }
LABEL_72:
    v21 = 5;
    if (a3)
    {
LABEL_29:
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v30 = (id)gLogObj;
      if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136447234;
        v91 = "nw_service_connector_verify_read_succeeded";
        v92 = 2114;
        v93 = v15;
        v94 = 2082;
        *(_QWORD *)v95 = a8;
        *(_WORD *)&v95[8] = 2114;
        *(_QWORD *)&v95[10] = v16;
        *(_WORD *)&v95[18] = 1024;
        *(_DWORD *)&v95[20] = v21;
        _os_log_impl(&dword_182FBE000, v30, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ failed %{public}s read for incoming request on %{public}@ %{darwin.errno}d", buf, 0x30u);
      }

      if ((v21 - 32) <= 0x39 && ((1 << (v21 - 32)) & 0x200000212420001) != 0
        || v21 == 5)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v31 = (id)gLogObj;
        if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446722;
          v91 = "nw_service_connector_verify_read_succeeded";
          v92 = 2082;
          v93 = a8;
          v94 = 1024;
          *(_DWORD *)v95 = v21;
          _os_log_impl(&dword_182FBE000, v31, OS_LOG_TYPE_ERROR, "%{public}s Failed %{public}s read of incoming request %{darwin.errno}d", buf, 0x1Cu);
        }

        goto LABEL_36;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v37 = (id)gLogObj;
      *(_DWORD *)buf = 136446722;
      v91 = "nw_service_connector_verify_read_succeeded";
      v92 = 2082;
      v93 = a8;
      v94 = 1024;
      *(_DWORD *)v95 = v21;
      v38 = (char *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v88 = 0;
      if (__nwlog_fault(v38, &type, &v88))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v39 = objc_claimAutoreleasedReturnValue();
          v40 = type;
          if (os_log_type_enabled(v39, type))
          {
            *(_DWORD *)buf = 136446722;
            v91 = "nw_service_connector_verify_read_succeeded";
            v92 = 2082;
            v93 = a8;
            v94 = 1024;
            *(_DWORD *)v95 = v21;
            _os_log_impl(&dword_182FBE000, v39, v40, "%{public}s Failed %{public}s read of incoming request %{darwin.errno}d", buf, 0x1Cu);
          }
        }
        else if (v88)
        {
          v62 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v39 = objc_claimAutoreleasedReturnValue();
          v63 = type;
          v64 = os_log_type_enabled(v39, type);
          if (v62)
          {
            if (v64)
            {
              *(_DWORD *)buf = 136446978;
              v91 = "nw_service_connector_verify_read_succeeded";
              v92 = 2082;
              v93 = a8;
              v94 = 1024;
              *(_DWORD *)v95 = v21;
              *(_WORD *)&v95[4] = 2082;
              *(_QWORD *)&v95[6] = v62;
              _os_log_impl(&dword_182FBE000, v39, v63, "%{public}s Failed %{public}s read of incoming request %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x26u);
            }

            free(v62);
            goto LABEL_130;
          }
          if (v64)
          {
            *(_DWORD *)buf = 136446722;
            v91 = "nw_service_connector_verify_read_succeeded";
            v92 = 2082;
            v93 = a8;
            v94 = 1024;
            *(_DWORD *)v95 = v21;
            _os_log_impl(&dword_182FBE000, v39, v63, "%{public}s Failed %{public}s read of incoming request %{darwin.errno}d, no backtrace", buf, 0x1Cu);
          }
        }
        else
        {
          __nwlog_obj();
          v39 = objc_claimAutoreleasedReturnValue();
          v69 = type;
          if (os_log_type_enabled(v39, type))
          {
            *(_DWORD *)buf = 136446722;
            v91 = "nw_service_connector_verify_read_succeeded";
            v92 = 2082;
            v93 = a8;
            v94 = 1024;
            *(_DWORD *)v95 = v21;
            _os_log_impl(&dword_182FBE000, v39, v69, "%{public}s Failed %{public}s read of incoming request %{darwin.errno}d, backtrace limit exceeded", buf, 0x1Cu);
          }
        }

      }
LABEL_130:
      if (v38)
        free(v38);
LABEL_36:
      if (v21 != 89)
        nw_connection_cancel(&v16->super);
      goto LABEL_92;
    }
LABEL_73:
    v48 = (NWConcrete_nw_unique_connection_request *)nw_service_connector_copy_active_request_for_connection(v15, v16);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v49 = (id)gLogObj;
    v50 = os_log_type_enabled(v49, OS_LOG_TYPE_ERROR);
    if (v48)
    {
      if (v50)
      {
        *(_DWORD *)buf = 136447234;
        v91 = "nw_service_connector_verify_read_succeeded";
        v92 = 2114;
        v93 = v15;
        v94 = 2082;
        *(_QWORD *)v95 = a8;
        *(_WORD *)&v95[8] = 2114;
        *(_QWORD *)&v95[10] = v48;
        *(_WORD *)&v95[18] = 1024;
        *(_DWORD *)&v95[20] = v21;
        _os_log_impl(&dword_182FBE000, v49, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ failed %{public}s read of reply to %{public}@ %{darwin.errno}d", buf, 0x30u);
      }

      switch(v21)
      {
        case ' ':
        case '1':
        case '6':
        case '9':
        case '<':
        case 'A':
        case 'Y':
          goto LABEL_77;
        case '!':
        case '"':
        case '#':
        case '$':
        case '%':
        case '&':
        case '\'':
        case '(':
        case ')':
        case '*':
        case '+':
        case ',':
        case '-':
        case '.':
        case '/':
        case '0':
        case '2':
        case '3':
        case '4':
        case '5':
        case '7':
        case '8':
        case ':':
        case ';':
        case '=':
        case '>':
        case '?':
        case '@':
        case 'B':
        case 'C':
        case 'D':
        case 'E':
        case 'F':
        case 'G':
        case 'H':
        case 'I':
        case 'J':
        case 'K':
        case 'L':
        case 'M':
        case 'N':
        case 'O':
        case 'P':
        case 'Q':
        case 'R':
        case 'S':
        case 'T':
        case 'U':
        case 'V':
        case 'W':
        case 'X':
        case 'Z':
        case '[':
        case '\\':
        case ']':
        case '^':
        case '_':
          goto LABEL_95;
        default:
          if (v21 == 5)
          {
LABEL_77:
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v51 = (id)gLogObj;
            if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136446722;
              v91 = "nw_service_connector_verify_read_succeeded";
              v92 = 2082;
              v93 = a8;
              v94 = 1024;
              *(_DWORD *)v95 = v21;
              _os_log_impl(&dword_182FBE000, v51, OS_LOG_TYPE_ERROR, "%{public}s Failed %{public}s read of reply (with known request) %{darwin.errno}d", buf, 0x1Cu);
            }

            goto LABEL_80;
          }
LABEL_95:
          __nwlog_obj();
          v54 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 136446722;
          v91 = "nw_service_connector_verify_read_succeeded";
          v92 = 2082;
          v93 = a8;
          v94 = 1024;
          *(_DWORD *)v95 = v21;
          v55 = (char *)_os_log_send_and_compose_impl();

          type = OS_LOG_TYPE_ERROR;
          v88 = 0;
          if (!__nwlog_fault(v55, &type, &v88))
            goto LABEL_135;
          if (type == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            v56 = objc_claimAutoreleasedReturnValue();
            v57 = type;
            if (os_log_type_enabled(v56, type))
            {
              *(_DWORD *)buf = 136446722;
              v91 = "nw_service_connector_verify_read_succeeded";
              v92 = 2082;
              v93 = a8;
              v94 = 1024;
              *(_DWORD *)v95 = v21;
              _os_log_impl(&dword_182FBE000, v56, v57, "%{public}s Failed %{public}s read of reply (with known request) %{darwin.errno}d", buf, 0x1Cu);
            }
LABEL_134:

            goto LABEL_135;
          }
          if (!v88)
          {
            __nwlog_obj();
            v56 = objc_claimAutoreleasedReturnValue();
            v70 = type;
            if (os_log_type_enabled(v56, type))
            {
              *(_DWORD *)buf = 136446722;
              v91 = "nw_service_connector_verify_read_succeeded";
              v92 = 2082;
              v93 = a8;
              v94 = 1024;
              *(_DWORD *)v95 = v21;
              _os_log_impl(&dword_182FBE000, v56, v70, "%{public}s Failed %{public}s read of reply (with known request) %{darwin.errno}d, backtrace limit exceeded", buf, 0x1Cu);
            }
            goto LABEL_134;
          }
          v65 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v56 = objc_claimAutoreleasedReturnValue();
          v85 = type;
          v66 = os_log_type_enabled(v56, type);
          if (!v65)
          {
            if (v66)
            {
              *(_DWORD *)buf = 136446722;
              v91 = "nw_service_connector_verify_read_succeeded";
              v92 = 2082;
              v93 = a8;
              v94 = 1024;
              *(_DWORD *)v95 = v21;
              _os_log_impl(&dword_182FBE000, v56, v85, "%{public}s Failed %{public}s read of reply (with known request) %{darwin.errno}d, no backtrace", buf, 0x1Cu);
            }
            goto LABEL_134;
          }
          if (v66)
          {
            *(_DWORD *)buf = 136446978;
            v91 = "nw_service_connector_verify_read_succeeded";
            v92 = 2082;
            v93 = a8;
            v94 = 1024;
            *(_DWORD *)v95 = v21;
            *(_WORD *)&v95[4] = 2082;
            *(_QWORD *)&v95[6] = v65;
            _os_log_impl(&dword_182FBE000, v56, v85, "%{public}s Failed %{public}s read of reply (with known request) %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x26u);
          }

          free(v65);
LABEL_135:
          if (v55)
            free(v55);
LABEL_80:
          if (nwsc_is_error_allowlisted(v18, 0))
          {
            nwsc_request_start_path_watcher(v15, v48, v16, 0);
          }
          else
          {
            nw_service_connector_cancel_request_inner(v15, v48->endpoint, (uint64_t)v48->service, v16, 0);
            nw_service_connector_trigger_request_complete_block_inner(v15, v48, 0, 0, v21);
          }
          break;
      }
LABEL_91:

LABEL_92:
      v44 = 0;
      goto LABEL_93;
    }
    if (v50)
    {
      *(_DWORD *)buf = 136447234;
      v91 = "nw_service_connector_verify_read_succeeded";
      v92 = 2114;
      v93 = v15;
      v94 = 2082;
      *(_QWORD *)v95 = a8;
      *(_WORD *)&v95[8] = 2114;
      *(_QWORD *)&v95[10] = v16;
      *(_WORD *)&v95[18] = 1024;
      *(_DWORD *)&v95[20] = v21;
      _os_log_impl(&dword_182FBE000, v49, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ failed %{public}s read reply on %{public}@ %{darwin.errno}d", buf, 0x30u);
    }

    switch(v21)
    {
      case ' ':
      case '1':
      case '6':
      case '9':
      case '<':
      case 'A':
      case 'Y':
        goto LABEL_85;
      case '!':
      case '"':
      case '#':
      case '$':
      case '%':
      case '&':
      case '\'':
      case '(':
      case ')':
      case '*':
      case '+':
      case ',':
      case '-':
      case '.':
      case '/':
      case '0':
      case '2':
      case '3':
      case '4':
      case '5':
      case '7':
      case '8':
      case ':':
      case ';':
      case '=':
      case '>':
      case '?':
      case '@':
      case 'B':
      case 'C':
      case 'D':
      case 'E':
      case 'F':
      case 'G':
      case 'H':
      case 'I':
      case 'J':
      case 'K':
      case 'L':
      case 'M':
      case 'N':
      case 'O':
      case 'P':
      case 'Q':
      case 'R':
      case 'S':
      case 'T':
      case 'U':
      case 'V':
      case 'W':
      case 'X':
      case 'Z':
      case '[':
      case '\\':
      case ']':
      case '^':
      case '_':
        goto LABEL_101;
      default:
        if (v21 == 5)
        {
LABEL_85:
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v52 = (id)gLogObj;
          if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446722;
            v91 = "nw_service_connector_verify_read_succeeded";
            v92 = 2082;
            v93 = a8;
            v94 = 1024;
            *(_DWORD *)v95 = v21;
            _os_log_impl(&dword_182FBE000, v52, OS_LOG_TYPE_ERROR, "%{public}s Failed %{public}s read of reply (did not find request) %{darwin.errno}d", buf, 0x1Cu);
          }

          goto LABEL_88;
        }
LABEL_101:
        __nwlog_obj();
        v58 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136446722;
        v91 = "nw_service_connector_verify_read_succeeded";
        v92 = 2082;
        v93 = a8;
        v94 = 1024;
        *(_DWORD *)v95 = v21;
        v59 = (char *)_os_log_send_and_compose_impl();

        type = OS_LOG_TYPE_ERROR;
        v88 = 0;
        if (!__nwlog_fault(v59, &type, &v88))
          goto LABEL_143;
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v60 = objc_claimAutoreleasedReturnValue();
          v61 = type;
          if (os_log_type_enabled(v60, type))
          {
            *(_DWORD *)buf = 136446722;
            v91 = "nw_service_connector_verify_read_succeeded";
            v92 = 2082;
            v93 = a8;
            v94 = 1024;
            *(_DWORD *)v95 = v21;
            _os_log_impl(&dword_182FBE000, v60, v61, "%{public}s Failed %{public}s read of reply (did not find request) %{darwin.errno}d", buf, 0x1Cu);
          }
        }
        else if (v88)
        {
          v67 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v60 = objc_claimAutoreleasedReturnValue();
          v86 = type;
          v68 = os_log_type_enabled(v60, type);
          if (v67)
          {
            if (v68)
            {
              *(_DWORD *)buf = 136446978;
              v91 = "nw_service_connector_verify_read_succeeded";
              v92 = 2082;
              v93 = a8;
              v94 = 1024;
              *(_DWORD *)v95 = v21;
              *(_WORD *)&v95[4] = 2082;
              *(_QWORD *)&v95[6] = v67;
              _os_log_impl(&dword_182FBE000, v60, v86, "%{public}s Failed %{public}s read of reply (did not find request) %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x26u);
            }

            free(v67);
LABEL_143:
            if (v59)
              free(v59);
LABEL_88:
            if (v21 != 89)
              nw_connection_cancel(&v16->super);
            goto LABEL_91;
          }
          if (v68)
          {
            *(_DWORD *)buf = 136446722;
            v91 = "nw_service_connector_verify_read_succeeded";
            v92 = 2082;
            v93 = a8;
            v94 = 1024;
            *(_DWORD *)v95 = v21;
            _os_log_impl(&dword_182FBE000, v60, v86, "%{public}s Failed %{public}s read of reply (did not find request) %{darwin.errno}d, no backtrace", buf, 0x1Cu);
          }
        }
        else
        {
          __nwlog_obj();
          v60 = objc_claimAutoreleasedReturnValue();
          v71 = type;
          if (os_log_type_enabled(v60, type))
          {
            *(_DWORD *)buf = 136446722;
            v91 = "nw_service_connector_verify_read_succeeded";
            v92 = 2082;
            v93 = a8;
            v94 = 1024;
            *(_DWORD *)v95 = v21;
            _os_log_impl(&dword_182FBE000, v60, v71, "%{public}s Failed %{public}s read of reply (did not find request) %{darwin.errno}d, backtrace limit exceeded", buf, 0x1Cu);
          }
        }

        goto LABEL_143;
    }
  }
  v20 = v17;
  v21 = v20[3];

  if (!data)
    goto LABEL_11;
LABEL_27:
  if (v21)
  {
    if (a3)
      goto LABEL_29;
    goto LABEL_73;
  }
  if (data)
    size = dispatch_data_get_size(data);
  else
    size = 0;
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v41 = (id)gLogObj;
  v42 = v41;
  if (size != a4)
  {
    if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
    {
      v45 = "outgoing";
      *(_DWORD *)buf = 136447746;
      v91 = "nw_service_connector_verify_read_succeeded";
      v92 = 2114;
      v93 = v15;
      if (a3)
        v45 = "incoming";
      v94 = 2082;
      *(_QWORD *)v95 = a8;
      *(_WORD *)&v95[8] = 1024;
      *(_DWORD *)&v95[10] = size;
      *(_WORD *)&v95[14] = 1024;
      *(_DWORD *)&v95[16] = a4;
      *(_WORD *)&v95[20] = 2082;
      *(_QWORD *)&v95[22] = v45;
      *(_WORD *)&v95[30] = 2114;
      *(_QWORD *)&v95[32] = v16;
      _os_log_impl(&dword_182FBE000, v42, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ received %{public}s read with length %u but expected %u on %{public}s %{public}@", buf, 0x40u);
    }

    goto LABEL_72;
  }
  if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
  {
    v43 = "outgoing";
    *(_DWORD *)buf = 136447490;
    v91 = "nw_service_connector_verify_read_succeeded";
    v92 = 2114;
    v93 = v15;
    if (a3)
      v43 = "incoming";
    v94 = 2082;
    *(_QWORD *)v95 = a8;
    *(_WORD *)&v95[8] = 1024;
    *(_DWORD *)&v95[10] = a4;
    *(_WORD *)&v95[14] = 2082;
    *(_QWORD *)&v95[16] = v43;
    *(_WORD *)&v95[24] = 2114;
    *(_QWORD *)&v95[26] = v16;
    _os_log_impl(&dword_182FBE000, v42, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ received %{public}s read with length %u on %{public}s %{public}@", buf, 0x3Au);
  }

  v44 = 1;
LABEL_93:

  return v44;
}

void sub_183873634(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void ___ZL45nw_service_connector_should_accept_connectionP31NWConcrete_nw_service_connectorP24NWConcrete_nw_connectionb_block_invoke_174(uint64_t a1, void *a2, void *a3, int a4, void *a5)
{
  NSObject *v9;
  id v10;
  NWConcrete_nw_unique_connection_request *v11;
  unint64_t v12;
  unint64_t v13;
  id v14;
  char *v15;
  NSObject *v16;
  os_log_type_t v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  __int16 v21;
  NSObject *v22;
  const sockaddr *address;
  size_t v24;
  nw_endpoint_t v25;
  NSObject *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  void *v31;
  nw_endpoint_t v32;
  id v33;
  NSObject *v34;
  NSObject *v35;
  void *v36;
  void *v37;
  NSObject *v38;
  void *v39;
  char *v40;
  NSObject *v41;
  os_log_type_t v42;
  id v43;
  char *v44;
  NSObject *v45;
  os_log_type_t v46;
  const char *v47;
  char *v48;
  NSObject *v49;
  os_log_type_t v50;
  id v51;
  uint64_t v52;
  nw_endpoint_type_t v53;
  uint64_t v54;
  char *v55;
  NSObject *v56;
  os_log_type_t sa_len;
  uint64_t v58;
  nw_endpoint_type_t v59;
  uint64_t v60;
  char *v61;
  os_log_type_t v62;
  _BOOL4 v63;
  void *v64;
  NSObject *v65;
  id v66;
  char *v67;
  NSObject *v68;
  os_log_type_t v69;
  char *v70;
  os_log_type_t v71;
  _BOOL4 v72;
  uint64_t v73;
  nw_endpoint_type_t v74;
  uint64_t v75;
  char *v76;
  NSObject *v77;
  os_log_type_t v78;
  _BOOL4 v79;
  os_log_type_t v80;
  void *v81;
  char *v82;
  NSObject *v83;
  os_log_type_t v84;
  os_log_type_t v85;
  os_log_type_t v86;
  void *v87;
  char *v88;
  NSObject *v89;
  os_log_type_t v90;
  os_log_type_t v91;
  uint64_t v92;
  nw_endpoint_type_t v93;
  uint64_t v94;
  char *v95;
  os_log_type_t v96;
  _BOOL4 v97;
  os_log_type_t v98;
  void *v99;
  char *v100;
  NSObject *v101;
  os_log_type_t v102;
  char *backtrace_string;
  NSObject *v104;
  _BOOL4 v105;
  uint64_t v106;
  nw_endpoint_type_t v107;
  uint64_t v108;
  char *v109;
  os_log_type_t v110;
  _BOOL4 v111;
  int v112;
  NSObject *v113;
  uint64_t v114;
  uint64_t v115;
  const char *v116;
  NSObject *v117;
  os_log_type_t v118;
  uint32_t v119;
  size_t v120;
  NSObject *v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  os_log_type_t v125;
  _BOOL4 v126;
  os_log_type_t v127;
  os_log_type_t v128;
  uint64_t v129;
  uint64_t v130;
  _WORD *v131;
  uint64_t v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  size_t v136;
  os_log_type_t v137;
  int v138;
  int v139;
  NSObject *v140;
  NSObject *v141;
  _BOOL4 v142;
  const char *v143;
  NSObject *v144;
  uint32_t v145;
  NSObject *v146;
  unsigned __int8 *v147;
  NSObject *v148;
  NSObject *v149;
  nw_protocol_metadata_t v150;
  id v151;
  uint64_t v152;
  NWConcrete_nw_unique_connection_request *v153;
  NSObject *v154;
  NSObject *v155;
  _BOOL4 v156;
  const char *v157;
  uint64_t v158;
  NWConcrete_nw_service_connector *v159;
  NSObject *v160;
  NSObject *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  void *v165;
  void *v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  NSObject *v170;
  os_log_type_t v171;
  uint64_t v172;
  uint64_t v173;
  char *v174;
  os_log_type_t v175;
  _BOOL4 v176;
  uint64_t v177;
  uint64_t v178;
  os_log_type_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  NSObject *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unint64_t new_sequence_number;
  os_log_type_t v190;
  uint64_t v191;
  uint64_t v192;
  void *v193;
  void *v194;
  NSObject *v195;
  os_log_type_t v196;
  void *v197;
  os_log_type_t v198;
  void *v199;
  os_log_type_t v200;
  char *v201;
  NSObject *v202;
  os_log_type_t v203;
  _BOOL4 v204;
  os_log_type_t v205;
  _BOOL4 v206;
  char *v207;
  os_log_type_t v208;
  _BOOL4 v209;
  os_log_type_t v210;
  os_log_type_t v211;
  os_log_type_t v212;
  NSObject *v213;
  void *v214;
  os_log_type_t v215;
  NSObject *v216;
  char v217;
  nw_endpoint_t v218;
  unint64_t v219;
  char *v220;
  id v221;
  _QWORD v222[4];
  id v223;
  NWConcrete_nw_unique_connection_request *v224;
  id v225;
  _QWORD v226[4];
  id v227;
  NWConcrete_nw_unique_connection_request *v228;
  NSObject *v229;
  char v230;
  __int128 v231;
  __int128 v232;
  sockaddr __dst[3];
  os_log_type_t type[8];
  __int128 v235;
  __int128 v236;
  _BYTE applier[58];
  uint64_t v238;
  __int16 v239;
  _BYTE v240[10];
  __int16 v241;
  int v242;
  __int16 v243;
  int v244;
  __int16 v245;
  NSObject *v246;
  __int128 buffer;
  __int128 v248;
  uint64_t v249;
  uint8_t buf[32];
  _QWORD v251[4];
  __int128 v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  _OWORD v268[7];
  int v269;
  uint64_t v270;

  v270 = *MEMORY[0x1E0C80C00];
  v9 = a2;
  v221 = a3;
  v10 = a5;
  if ((nw_service_connector_verify_read_succeeded(*(void **)(a1 + 32), *(void **)(a1 + 40), *(unsigned __int8 *)(a1 + 52), *(unsigned __int16 *)(a1 + 48), v9, a4, v10, "second") & 1) == 0)goto LABEL_271;
  if (!*(_BYTE *)(a1 + 52))
  {
    v220 = (char *)nw_service_connector_copy_active_request_for_connection(*(NWConcrete_nw_service_connector **)(a1 + 32), *(NWConcrete_nw_connection **)(a1 + 40));
    memset(__dst, 0, 44);
    *(_QWORD *)applier = 0;
    *(_QWORD *)&applier[8] = applier;
    *(_QWORD *)&applier[16] = 0x2000000000;
    *(_QWORD *)&applier[24] = 0;
    *(_QWORD *)&buffer = 0;
    *((_QWORD *)&buffer + 1) = &buffer;
    *(_QWORD *)&v248 = 0x2000000000;
    *((_QWORD *)&v248 + 1) = __dst[0].sa_data;
    if (v9)
    {
      *(_QWORD *)buf = MEMORY[0x1E0C809B0];
      *(_QWORD *)&buf[8] = 0x40000000;
      *(_QWORD *)&buf[16] = __nw_dispatch_data_copyout_block_invoke;
      *(_QWORD *)&buf[24] = &unk_1E14A3448;
      v251[2] = 42;
      v251[0] = applier;
      v251[1] = &buffer;
      dispatch_data_apply(v9, buf);
      v13 = *(_QWORD *)(*(_QWORD *)&applier[8] + 24);
    }
    else
    {
      v13 = 0;
    }
    _Block_object_dispose(&buffer, 8);
    _Block_object_dispose(applier, 8);
    if (*(unsigned __int16 *)(a1 + 48) >= 0x2Au)
      v29 = 42;
    else
      v29 = *(unsigned __int16 *)(a1 + 48);
    if (v13 == v29)
    {
      v217 = __dst[0].sa_data[0];
      v30 = bswap64(*(unint64_t *)&__dst[0].sa_data[2]);
      v232 = 0u;
      v231 = 0u;
      if (v13 >= 0x2A)
      {
        v231 = *(_OWORD *)&__dst[0].sa_data[10];
        v232 = *(_OWORD *)&__dst[1].sa_data[10];
      }
      v31 = *(void **)(a1 + 32);
      v32 = nw_connection_copy_endpoint(*(nw_connection_t *)(a1 + 40));
      v33 = v31;
      v34 = v32;
      v35 = v34;
      v219 = v30;
      if (v33)
      {
        if (*((_QWORD *)v33 + 13))
        {
          if (v34)
          {
            v269 = 0;
            v267 = 0u;
            memset(v268, 0, sizeof(v268));
            v265 = 0u;
            v266 = 0u;
            v263 = 0u;
            v264 = 0u;
            v261 = 0u;
            v262 = 0u;
            v259 = 0u;
            v260 = 0u;
            v257 = 0u;
            v258 = 0u;
            v255 = 0u;
            v256 = 0u;
            v253 = 0u;
            v254 = 0u;
            v252 = 0u;
            memset(v251, 0, sizeof(v251));
            memset(buf, 0, sizeof(buf));
            if ((nwsc_get_endpoint_identifier(v34, (uint64_t)buf) & 1) != 0)
            {
              xpc_dictionary_get_value(*((xpc_object_t *)v33 + 13), (const char *)buf);
              v36 = (void *)objc_claimAutoreleasedReturnValue();
              v37 = v36;
              v249 = 0;
              buffer = 0u;
              v248 = 0u;
              if (!v36 || xpc_data_get_bytes(v36, &buffer, 0, 0x28uLL) >= 0x28)
                goto LABEL_188;
              __nwlog_obj();
              v38 = v35;
              v39 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)applier = 136446210;
              *(_QWORD *)&applier[4] = "nwsc_save_remote_pub_key";
              v40 = (char *)_os_log_send_and_compose_impl();

              v35 = v38;
              type[0] = OS_LOG_TYPE_ERROR;
              v230 = 0;
              if (__nwlog_fault(v40, type, &v230))
              {
                if (type[0] == OS_LOG_TYPE_FAULT)
                {
                  __nwlog_obj();
                  v41 = objc_claimAutoreleasedReturnValue();
                  v42 = type[0];
                  if (os_log_type_enabled(v41, type[0]))
                  {
                    *(_DWORD *)applier = 136446210;
                    *(_QWORD *)&applier[4] = "nwsc_save_remote_pub_key";
                    _os_log_impl(&dword_182FBE000, v41, v42, "%{public}s Insufficient length in remotePubKeys", applier, 0xCu);
                  }
                }
                else
                {
                  if (v230)
                  {
                    backtrace_string = (char *)__nw_create_backtrace_string();
                    __nwlog_obj();
                    v104 = objc_claimAutoreleasedReturnValue();
                    v215 = type[0];
                    v105 = os_log_type_enabled(v104, type[0]);
                    if (backtrace_string)
                    {
                      if (v105)
                      {
                        *(_DWORD *)applier = 136446466;
                        *(_QWORD *)&applier[4] = "nwsc_save_remote_pub_key";
                        *(_WORD *)&applier[12] = 2082;
                        *(_QWORD *)&applier[14] = backtrace_string;
                        _os_log_impl(&dword_182FBE000, v104, v215, "%{public}s Insufficient length in remotePubKeys, dumping backtrace:%{public}s", applier, 0x16u);
                      }

                      free(backtrace_string);
                    }
                    else
                    {
                      if (v105)
                      {
                        *(_DWORD *)applier = 136446210;
                        *(_QWORD *)&applier[4] = "nwsc_save_remote_pub_key";
                        _os_log_impl(&dword_182FBE000, v104, v215, "%{public}s Insufficient length in remotePubKeys, no backtrace", applier, 0xCu);
                      }

                    }
                    goto LABEL_185;
                  }
                  __nwlog_obj();
                  v41 = objc_claimAutoreleasedReturnValue();
                  v128 = type[0];
                  if (os_log_type_enabled(v41, type[0]))
                  {
                    *(_DWORD *)applier = 136446210;
                    *(_QWORD *)&applier[4] = "nwsc_save_remote_pub_key";
                    _os_log_impl(&dword_182FBE000, v41, v128, "%{public}s Insufficient length in remotePubKeys, backtrace limit exceeded", applier, 0xCu);
                  }
                }

              }
LABEL_185:
              if (v40)
                free(v40);
              *(_QWORD *)&buffer = 0;
LABEL_188:
              v138 = cc_cmp_safe();
              v139 = v138;
              if ((unint64_t)buffer > v219)
              {
                if (v138)
                {
                  __nwlog_obj();
                  v140 = objc_claimAutoreleasedReturnValue();
                  if (os_log_type_enabled(v140, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)applier = 136449282;
                    *(_QWORD *)&applier[4] = "nwsc_save_remote_pub_key";
                    *(_WORD *)&applier[12] = 2114;
                    *(_QWORD *)&applier[14] = v33;
                    *(_WORD *)&applier[22] = 2048;
                    *(_QWORD *)&applier[24] = v219;
                    *(_WORD *)&applier[32] = 1024;
                    *(_DWORD *)&applier[34] = v231;
                    *(_WORD *)&applier[38] = 1024;
                    *(_DWORD *)&applier[40] = BYTE1(v231);
                    *(_WORD *)&applier[44] = 1024;
                    *(_DWORD *)&applier[46] = BYTE2(v231);
                    *(_WORD *)&applier[50] = 1024;
                    *(_DWORD *)&applier[52] = BYTE3(v231);
                    *(_WORD *)&applier[56] = 2048;
                    v238 = buffer;
                    v239 = 1024;
                    *(_DWORD *)v240 = BYTE8(buffer);
                    *(_WORD *)&v240[4] = 1024;
                    *(_DWORD *)&v240[6] = BYTE9(buffer);
                    v241 = 1024;
                    v242 = BYTE10(buffer);
                    v243 = 1024;
                    v244 = BYTE11(buffer);
                    v245 = 2114;
                    v246 = v35;
                    _os_log_impl(&dword_182FBE000, v140, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ ignoring received seq %llu pubKey %02x%02x%02x%02x previous seq %llu %02x%02x%02x%02x for %{public}@", applier, 0x64u);
                  }

                }
                goto LABEL_200;
              }
              __nwlog_obj();
              v141 = objc_claimAutoreleasedReturnValue();
              v142 = os_log_type_enabled(v141, OS_LOG_TYPE_DEFAULT);
              if (v139)
              {
                if (v142)
                {
                  *(_DWORD *)applier = 136449282;
                  *(_QWORD *)&applier[4] = "nwsc_save_remote_pub_key";
                  *(_WORD *)&applier[12] = 2114;
                  *(_QWORD *)&applier[14] = v33;
                  *(_WORD *)&applier[22] = 2048;
                  *(_QWORD *)&applier[24] = v219;
                  *(_WORD *)&applier[32] = 1024;
                  *(_DWORD *)&applier[34] = v231;
                  *(_WORD *)&applier[38] = 1024;
                  *(_DWORD *)&applier[40] = BYTE1(v231);
                  *(_WORD *)&applier[44] = 1024;
                  *(_DWORD *)&applier[46] = BYTE2(v231);
                  *(_WORD *)&applier[50] = 1024;
                  *(_DWORD *)&applier[52] = BYTE3(v231);
                  *(_WORD *)&applier[56] = 2048;
                  v238 = buffer;
                  v239 = 1024;
                  *(_DWORD *)v240 = BYTE8(buffer);
                  *(_WORD *)&v240[4] = 1024;
                  *(_DWORD *)&v240[6] = BYTE9(buffer);
                  v241 = 1024;
                  v242 = BYTE10(buffer);
                  v243 = 1024;
                  v244 = BYTE11(buffer);
                  v245 = 2114;
                  v246 = v35;
                  v143 = "%{public}s %{public}@ saving different received seq %llu pubKey %02x%02x%02x%02x previous seq %"
                         "llu %02x%02x%02x%02x for %{public}@";
                  v144 = v141;
                  v145 = 100;
LABEL_198:
                  _os_log_impl(&dword_182FBE000, v144, OS_LOG_TYPE_DEFAULT, v143, applier, v145);
                }
              }
              else if (v142)
              {
                *(_DWORD *)applier = 136448258;
                *(_QWORD *)&applier[4] = "nwsc_save_remote_pub_key";
                *(_WORD *)&applier[12] = 2114;
                *(_QWORD *)&applier[14] = v33;
                *(_WORD *)&applier[22] = 2048;
                *(_QWORD *)&applier[24] = v219;
                *(_WORD *)&applier[32] = 1024;
                *(_DWORD *)&applier[34] = v231;
                *(_WORD *)&applier[38] = 1024;
                *(_DWORD *)&applier[40] = BYTE1(v231);
                *(_WORD *)&applier[44] = 1024;
                *(_DWORD *)&applier[46] = BYTE2(v231);
                *(_WORD *)&applier[50] = 1024;
                *(_DWORD *)&applier[52] = BYTE3(v231);
                *(_WORD *)&applier[56] = 2048;
                v238 = buffer;
                v239 = 2114;
                *(_QWORD *)v240 = v35;
                v143 = "%{public}s %{public}@ saving same pubKey received seq %llu pubKey %02x%02x%02x%02x previous seq %"
                       "llu for %{public}@";
                v144 = v141;
                v145 = 76;
                goto LABEL_198;
              }

              v146 = v35;
              *(_QWORD *)type = v219;
              v235 = v231;
              v236 = v232;
              xpc_dictionary_set_data(*((xpc_object_t *)v33 + 13), (const char *)buf, type, 0x28uLL);
              v147 = (unsigned __int8 *)*((_QWORD *)v33 + 9);
              *(_QWORD *)applier = MEMORY[0x1E0C809B0];
              *(_QWORD *)&applier[8] = 3221225472;
              *(_QWORD *)&applier[16] = ___ZL24nwsc_save_remote_pub_keyP31NWConcrete_nw_service_connectorPU25objcproto14OS_nw_endpoint8NSObjectyPh_block_invoke;
              *(_QWORD *)&applier[24] = &unk_1E14A3CF0;
              *(_QWORD *)&applier[32] = v33;
              *(_QWORD *)&applier[40] = v219;
              nw_array_apply(v147, (uint64_t)applier);

              v35 = v146;
LABEL_200:

              goto LABEL_201;
            }
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v65 = v35;
            v66 = (id)gLogObj;
            *(_DWORD *)applier = 136446466;
            *(_QWORD *)&applier[4] = "nwsc_save_remote_pub_key";
            *(_WORD *)&applier[12] = 2114;
            *(_QWORD *)&applier[14] = v65;
            v67 = (char *)_os_log_send_and_compose_impl();

            v35 = v65;
            LOBYTE(buffer) = 16;
            type[0] = OS_LOG_TYPE_DEFAULT;
            if (!__nwlog_fault(v67, &buffer, type))
              goto LABEL_144;
            if (buffer == 17)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v68 = (id)gLogObj;
              v69 = buffer;
              if (os_log_type_enabled(v68, (os_log_type_t)buffer))
              {
                *(_DWORD *)applier = 136446466;
                *(_QWORD *)&applier[4] = "nwsc_save_remote_pub_key";
                *(_WORD *)&applier[12] = 2114;
                *(_QWORD *)&applier[14] = v65;
                _os_log_impl(&dword_182FBE000, v68, v69, "%{public}s Could not get identifier for endpoint %{public}@", applier, 0x16u);
              }
            }
            else
            {
              if (type[0])
              {
                v76 = (char *)__nw_create_backtrace_string();
                __nwlog_obj();
                v77 = objc_claimAutoreleasedReturnValue();
                v78 = buffer;
                v79 = os_log_type_enabled(v77, (os_log_type_t)buffer);
                if (v76)
                {
                  if (v79)
                  {
                    *(_DWORD *)applier = 136446722;
                    *(_QWORD *)&applier[4] = "nwsc_save_remote_pub_key";
                    *(_WORD *)&applier[12] = 2114;
                    *(_QWORD *)&applier[14] = v35;
                    *(_WORD *)&applier[22] = 2082;
                    *(_QWORD *)&applier[24] = v76;
                    _os_log_impl(&dword_182FBE000, v77, v78, "%{public}s Could not get identifier for endpoint %{public}@, dumping backtrace:%{public}s", applier, 0x20u);
                  }

                  free(v76);
                }
                else
                {
                  if (v79)
                  {
                    *(_DWORD *)applier = 136446466;
                    *(_QWORD *)&applier[4] = "nwsc_save_remote_pub_key";
                    *(_WORD *)&applier[12] = 2114;
                    *(_QWORD *)&applier[14] = v35;
                    _os_log_impl(&dword_182FBE000, v77, v78, "%{public}s Could not get identifier for endpoint %{public}@, no backtrace", applier, 0x16u);
                  }

                }
                goto LABEL_144;
              }
              __nwlog_obj();
              v68 = objc_claimAutoreleasedReturnValue();
              v98 = buffer;
              if (os_log_type_enabled(v68, (os_log_type_t)buffer))
              {
                *(_DWORD *)applier = 136446466;
                *(_QWORD *)&applier[4] = "nwsc_save_remote_pub_key";
                *(_WORD *)&applier[12] = 2114;
                *(_QWORD *)&applier[14] = v65;
                _os_log_impl(&dword_182FBE000, v68, v98, "%{public}s Could not get identifier for endpoint %{public}@, backtrace limit exceeded", applier, 0x16u);
              }
            }

LABEL_144:
            if (v67)
              free(v67);
LABEL_201:

            if (v220)
            {
              v148 = *(NSObject **)(a1 + 40);
              if (nw_protocol_setup_tcp_definition(void)::onceToken != -1)
                dispatch_once(&nw_protocol_setup_tcp_definition(void)::onceToken, &__block_literal_global_62963);
              v149 = (id)g_tcp_definition;
              v150 = nw_connection_copy_protocol_metadata(v148, v149);

              if (nw_context_copy_implicit_context::onceToken[0] != -1)
                dispatch_once(nw_context_copy_implicit_context::onceToken, &__block_literal_global_14);
              v151 = (id)nw_context_copy_implicit_context::implicit_context;
              v152 = MEMORY[0x1E0C809B0];
              v226[0] = MEMORY[0x1E0C809B0];
              v226[1] = 3221225472;
              v226[2] = ___ZL45nw_service_connector_should_accept_connectionP31NWConcrete_nw_service_connectorP24NWConcrete_nw_connectionb_block_invoke_176;
              v226[3] = &unk_1E14AAAA0;
              v227 = *(id *)(a1 + 32);
              v153 = v220;
              v228 = v153;
              v154 = v150;
              v229 = v154;
              nw_queue_context_async_if_needed(v151, v226);

              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v155 = (id)gLogObj;
              v156 = os_log_type_enabled(v155, OS_LOG_TYPE_DEFAULT);
              if (v217 < 0)
              {
                if (v156)
                {
                  v164 = *(_QWORD *)(a1 + 32);
                  *(_DWORD *)buf = 136446978;
                  *(_QWORD *)&buf[4] = "nw_service_connector_should_accept_connection_block_invoke";
                  *(_WORD *)&buf[12] = 2114;
                  *(_QWORD *)&buf[14] = v164;
                  *(_WORD *)&buf[22] = 2114;
                  *(_QWORD *)&buf[24] = v153;
                  LOWORD(v251[0]) = 2048;
                  *(_QWORD *)((char *)v251 + 2) = v219;
                  _os_log_impl(&dword_182FBE000, v155, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ outgoing request %{public}@ was accepted by peer with reply seq %llu", buf, 0x2Au);
                }

                v153->sequenceNumber = v219;
                v165 = *(void **)(a1 + 32);
                v166 = *(void **)(a1 + 40);
                v222[0] = v152;
                v222[1] = 3221225472;
                v222[2] = ___ZL45nw_service_connector_should_accept_connectionP31NWConcrete_nw_service_connectorP24NWConcrete_nw_connectionb_block_invoke_177;
                v222[3] = &unk_1E14A3BC0;
                v223 = v165;
                v224 = v153;
                v225 = *(id *)(a1 + 40);
                nw_service_connector_accept_connection_for_request(v223, v166, v224, v222);

              }
              else
              {
                if (v156)
                {
                  v157 = "";
                  v158 = *(_QWORD *)(a1 + 32);
                  *(_QWORD *)&buf[4] = "nw_service_connector_should_accept_connection_block_invoke";
                  *(_DWORD *)buf = 136447234;
                  if ((v217 & 0x40) == 0)
                    v157 = "not ";
                  *(_WORD *)&buf[12] = 2114;
                  *(_QWORD *)&buf[14] = v158;
                  *(_WORD *)&buf[22] = 2114;
                  *(_QWORD *)&buf[24] = v153;
                  LOWORD(v251[0]) = 2082;
                  *(_QWORD *)((char *)v251 + 2) = v157;
                  WORD1(v251[1]) = 2048;
                  *(_QWORD *)((char *)&v251[1] + 4) = v219;
                  _os_log_impl(&dword_182FBE000, v155, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ outgoing request %{public}@ was rejected (%{public}sby policy) by peer with reply seq %llu", buf, 0x34u);
                }

                v159 = *(NWConcrete_nw_service_connector **)(a1 + 32);
                if ((v217 & 0x40) != 0)
                {
                  nw_service_connector_cancel_request_inner(v159, v153->endpoint, (uint64_t)v153->service, *(void **)(a1 + 40), 0);
                  nw_service_connector_trigger_request_complete_block_inner(*(void **)(a1 + 32), v153, 0, 0, 61);
                }
                else
                {
                  nwsc_request_start_path_watcher(v159, v153, *(NWConcrete_nw_connection **)(a1 + 40), 0);
                }
              }

              goto LABEL_269;
            }
            __nwlog_obj();
            v160 = objc_claimAutoreleasedReturnValue();
            v161 = v160;
            if ((v217 & 0x80) == 0)
            {
              if (os_log_type_enabled(v160, OS_LOG_TYPE_DEFAULT))
              {
                v162 = *(_QWORD *)(a1 + 32);
                v163 = *(_QWORD *)(a1 + 40);
                *(_DWORD *)buf = 136446978;
                *(_QWORD *)&buf[4] = "nw_service_connector_should_accept_connection_block_invoke";
                *(_WORD *)&buf[12] = 2114;
                *(_QWORD *)&buf[14] = v162;
                *(_WORD *)&buf[22] = 2114;
                *(_QWORD *)&buf[24] = v163;
                LOWORD(v251[0]) = 2048;
                *(_QWORD *)((char *)v251 + 2) = v219;
                _os_log_impl(&dword_182FBE000, v161, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ did not find a matching outgoing request for %{public}@, denied with seq %llu", buf, 0x2Au);
              }

LABEL_240:
              v64 = 0;
              nw_connection_cancel(*(nw_connection_t *)(a1 + 40));
              goto LABEL_270;
            }
            v167 = *(_QWORD *)(a1 + 32);
            v168 = *(_QWORD *)(a1 + 40);
            *(_DWORD *)buf = 136446978;
            *(_QWORD *)&buf[4] = "nw_service_connector_should_accept_connection_block_invoke";
            *(_WORD *)&buf[12] = 2114;
            *(_QWORD *)&buf[14] = v167;
            *(_WORD *)&buf[22] = 2114;
            *(_QWORD *)&buf[24] = v168;
            LOWORD(v251[0]) = 2048;
            *(_QWORD *)((char *)v251 + 2) = v219;
            v169 = (char *)_os_log_send_and_compose_impl();

            applier[0] = 16;
            LOBYTE(buffer) = 0;
            if (__nwlog_fault(v169, applier, &buffer))
            {
              if (applier[0] == 17)
              {
                __nwlog_obj();
                v170 = objc_claimAutoreleasedReturnValue();
                v171 = applier[0];
                if (os_log_type_enabled(v170, (os_log_type_t)applier[0]))
                {
                  v172 = *(_QWORD *)(a1 + 32);
                  v173 = *(_QWORD *)(a1 + 40);
                  *(_DWORD *)buf = 136446978;
                  *(_QWORD *)&buf[4] = "nw_service_connector_should_accept_connection_block_invoke";
                  *(_WORD *)&buf[12] = 2114;
                  *(_QWORD *)&buf[14] = v172;
                  *(_WORD *)&buf[22] = 2114;
                  *(_QWORD *)&buf[24] = v173;
                  LOWORD(v251[0]) = 2048;
                  *(_QWORD *)((char *)v251 + 2) = v219;
                  _os_log_impl(&dword_182FBE000, v170, v171, "%{public}s %{public}@ did not find a matching outgoing request for %{public}@, accepted with seq %llu", buf, 0x2Au);
                }
              }
              else if ((_BYTE)buffer)
              {
                v174 = (char *)__nw_create_backtrace_string();
                __nwlog_obj();
                v170 = objc_claimAutoreleasedReturnValue();
                v175 = applier[0];
                v176 = os_log_type_enabled(v170, (os_log_type_t)applier[0]);
                if (v174)
                {
                  if (v176)
                  {
                    v177 = *(_QWORD *)(a1 + 32);
                    v178 = *(_QWORD *)(a1 + 40);
                    *(_DWORD *)buf = 136447234;
                    *(_QWORD *)&buf[4] = "nw_service_connector_should_accept_connection_block_invoke";
                    *(_WORD *)&buf[12] = 2114;
                    *(_QWORD *)&buf[14] = v177;
                    *(_WORD *)&buf[22] = 2114;
                    *(_QWORD *)&buf[24] = v178;
                    LOWORD(v251[0]) = 2048;
                    *(_QWORD *)((char *)v251 + 2) = v219;
                    WORD1(v251[1]) = 2082;
                    *(_QWORD *)((char *)&v251[1] + 4) = v174;
                    _os_log_impl(&dword_182FBE000, v170, v175, "%{public}s %{public}@ did not find a matching outgoing request for %{public}@, accepted with seq %llu, dumping backtrace:%{public}s", buf, 0x34u);
                  }

                  free(v174);
                  goto LABEL_238;
                }
                if (v176)
                {
                  v182 = *(_QWORD *)(a1 + 32);
                  v183 = *(_QWORD *)(a1 + 40);
                  *(_DWORD *)buf = 136446978;
                  *(_QWORD *)&buf[4] = "nw_service_connector_should_accept_connection_block_invoke";
                  *(_WORD *)&buf[12] = 2114;
                  *(_QWORD *)&buf[14] = v182;
                  *(_WORD *)&buf[22] = 2114;
                  *(_QWORD *)&buf[24] = v183;
                  LOWORD(v251[0]) = 2048;
                  *(_QWORD *)((char *)v251 + 2) = v219;
                  _os_log_impl(&dword_182FBE000, v170, v175, "%{public}s %{public}@ did not find a matching outgoing request for %{public}@, accepted with seq %llu, no backtrace", buf, 0x2Au);
                }
              }
              else
              {
                __nwlog_obj();
                v170 = objc_claimAutoreleasedReturnValue();
                v179 = applier[0];
                if (os_log_type_enabled(v170, (os_log_type_t)applier[0]))
                {
                  v180 = *(_QWORD *)(a1 + 32);
                  v181 = *(_QWORD *)(a1 + 40);
                  *(_DWORD *)buf = 136446978;
                  *(_QWORD *)&buf[4] = "nw_service_connector_should_accept_connection_block_invoke";
                  *(_WORD *)&buf[12] = 2114;
                  *(_QWORD *)&buf[14] = v180;
                  *(_WORD *)&buf[22] = 2114;
                  *(_QWORD *)&buf[24] = v181;
                  LOWORD(v251[0]) = 2048;
                  *(_QWORD *)((char *)v251 + 2) = v219;
                  _os_log_impl(&dword_182FBE000, v170, v179, "%{public}s %{public}@ did not find a matching outgoing request for %{public}@, accepted with seq %llu, backtrace limit exceeded", buf, 0x2Au);
                }
              }

            }
LABEL_238:
            if (v169)
              free(v169);
            goto LABEL_240;
          }
          __nwlog_obj();
          v216 = 0;
          v199 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nwsc_save_remote_pub_key";
          v194 = (void *)_os_log_send_and_compose_impl();

          applier[0] = 16;
          LOBYTE(buffer) = 0;
          if (!__nwlog_fault((const char *)v194, applier, &buffer))
          {
LABEL_321:
            if (!v194)
            {
LABEL_323:
              v35 = v216;
              goto LABEL_201;
            }
LABEL_322:
            free(v194);
            goto LABEL_323;
          }
          if (applier[0] == 17)
          {
            __nwlog_obj();
            v195 = objc_claimAutoreleasedReturnValue();
            v200 = applier[0];
            if (os_log_type_enabled(v195, (os_log_type_t)applier[0]))
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nwsc_save_remote_pub_key";
              _os_log_impl(&dword_182FBE000, v195, v200, "%{public}s called with null endpoint", buf, 0xCu);
            }
LABEL_311:

            goto LABEL_321;
          }
          if (!(_BYTE)buffer)
          {
            __nwlog_obj();
            v195 = objc_claimAutoreleasedReturnValue();
            v212 = applier[0];
            if (os_log_type_enabled(v195, (os_log_type_t)applier[0]))
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nwsc_save_remote_pub_key";
              _os_log_impl(&dword_182FBE000, v195, v212, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
            }
            goto LABEL_311;
          }
          v207 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v202 = objc_claimAutoreleasedReturnValue();
          v208 = applier[0];
          v209 = os_log_type_enabled(v202, (os_log_type_t)applier[0]);
          if (v207)
          {
            if (v209)
            {
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "nwsc_save_remote_pub_key";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v207;
              _os_log_impl(&dword_182FBE000, v202, v208, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(v207);
            goto LABEL_321;
          }
          if (v209)
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nwsc_save_remote_pub_key";
            _os_log_impl(&dword_182FBE000, v202, v208, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
          }
LABEL_320:

          goto LABEL_321;
        }
        __nwlog_obj();
        v216 = v35;
        v197 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nwsc_save_remote_pub_key";
        v194 = (void *)_os_log_send_and_compose_impl();

        applier[0] = 16;
        LOBYTE(buffer) = 0;
        if (!__nwlog_fault((const char *)v194, applier, &buffer))
          goto LABEL_321;
        if (applier[0] == 17)
        {
          __nwlog_obj();
          v195 = objc_claimAutoreleasedReturnValue();
          v198 = applier[0];
          if (os_log_type_enabled(v195, (os_log_type_t)applier[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nwsc_save_remote_pub_key";
            _os_log_impl(&dword_182FBE000, v195, v198, "%{public}s called with null serviceConnector->remotePubKeys", buf, 0xCu);
          }
          goto LABEL_311;
        }
        if (!(_BYTE)buffer)
        {
          __nwlog_obj();
          v195 = objc_claimAutoreleasedReturnValue();
          v211 = applier[0];
          if (os_log_type_enabled(v195, (os_log_type_t)applier[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nwsc_save_remote_pub_key";
            _os_log_impl(&dword_182FBE000, v195, v211, "%{public}s called with null serviceConnector->remotePubKeys, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_311;
        }
        v201 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v202 = objc_claimAutoreleasedReturnValue();
        v205 = applier[0];
        v206 = os_log_type_enabled(v202, (os_log_type_t)applier[0]);
        if (!v201)
        {
          if (v206)
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nwsc_save_remote_pub_key";
            _os_log_impl(&dword_182FBE000, v202, v205, "%{public}s called with null serviceConnector->remotePubKeys, no backtrace", buf, 0xCu);
          }
          goto LABEL_320;
        }
        if (v206)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nwsc_save_remote_pub_key";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v201;
          _os_log_impl(&dword_182FBE000, v202, v205, "%{public}s called with null serviceConnector->remotePubKeys, dumping backtrace:%{public}s", buf, 0x16u);
        }
      }
      else
      {
        __nwlog_obj();
        v216 = v35;
        v193 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nwsc_save_remote_pub_key";
        v194 = (void *)_os_log_send_and_compose_impl();

        applier[0] = 16;
        LOBYTE(buffer) = 0;
        if (!__nwlog_fault((const char *)v194, applier, &buffer))
          goto LABEL_321;
        if (applier[0] == 17)
        {
          __nwlog_obj();
          v195 = objc_claimAutoreleasedReturnValue();
          v196 = applier[0];
          if (os_log_type_enabled(v195, (os_log_type_t)applier[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nwsc_save_remote_pub_key";
            _os_log_impl(&dword_182FBE000, v195, v196, "%{public}s called with null serviceConnector", buf, 0xCu);
          }
          goto LABEL_311;
        }
        if (!(_BYTE)buffer)
        {
          __nwlog_obj();
          v195 = objc_claimAutoreleasedReturnValue();
          v210 = applier[0];
          if (os_log_type_enabled(v195, (os_log_type_t)applier[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nwsc_save_remote_pub_key";
            _os_log_impl(&dword_182FBE000, v195, v210, "%{public}s called with null serviceConnector, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_311;
        }
        v201 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v202 = objc_claimAutoreleasedReturnValue();
        v203 = applier[0];
        v204 = os_log_type_enabled(v202, (os_log_type_t)applier[0]);
        if (!v201)
        {
          if (v204)
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nwsc_save_remote_pub_key";
            _os_log_impl(&dword_182FBE000, v202, v203, "%{public}s called with null serviceConnector, no backtrace", buf, 0xCu);
          }
          goto LABEL_320;
        }
        if (v204)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nwsc_save_remote_pub_key";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v201;
          _os_log_impl(&dword_182FBE000, v202, v203, "%{public}s called with null serviceConnector, dumping backtrace:%{public}s", buf, 0x16u);
        }
      }

      free(v201);
      if (!v194)
        goto LABEL_323;
      goto LABEL_322;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v43 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_service_connector_should_accept_connection_block_invoke";
    v44 = (char *)_os_log_send_and_compose_impl();

    applier[0] = 16;
    LOBYTE(buffer) = 0;
    if (__nwlog_fault(v44, applier, &buffer))
    {
      if (applier[0] == 17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v45 = (id)gLogObj;
        v46 = applier[0];
        if (os_log_type_enabled(v45, (os_log_type_t)applier[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_service_connector_should_accept_connection_block_invoke";
          _os_log_impl(&dword_182FBE000, v45, v46, "%{public}s nw_dispatch_data_copyout failed", buf, 0xCu);
        }
      }
      else if ((_BYTE)buffer)
      {
        v61 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v45 = objc_claimAutoreleasedReturnValue();
        v62 = applier[0];
        v63 = os_log_type_enabled(v45, (os_log_type_t)applier[0]);
        if (v61)
        {
          if (v63)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_service_connector_should_accept_connection_block_invoke";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v61;
            _os_log_impl(&dword_182FBE000, v45, v62, "%{public}s nw_dispatch_data_copyout failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v61);
          v64 = v220;
          if (!v44)
            goto LABEL_108;
          goto LABEL_107;
        }
        if (v63)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_service_connector_should_accept_connection_block_invoke";
          _os_log_impl(&dword_182FBE000, v45, v62, "%{public}s nw_dispatch_data_copyout failed, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v45 = objc_claimAutoreleasedReturnValue();
        v85 = applier[0];
        if (os_log_type_enabled(v45, (os_log_type_t)applier[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_service_connector_should_accept_connection_block_invoke";
          _os_log_impl(&dword_182FBE000, v45, v85, "%{public}s nw_dispatch_data_copyout failed, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
    v64 = v220;
    if (!v44)
    {
LABEL_108:
      nw_connection_cancel(*(nw_connection_t *)(a1 + 40));
      goto LABEL_270;
    }
LABEL_107:
    free(v44);
    goto LABEL_108;
  }
  v11 = objc_alloc_init(NWConcrete_nw_unique_connection_request);
  v220 = (char *)v11;
  if (!v11)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v14 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_service_connector_should_accept_connection_block_invoke";
    v15 = (char *)_os_log_send_and_compose_impl();

    applier[0] = 16;
    __dst[0].sa_len = 0;
    if (__nwlog_fault(v15, applier, __dst))
    {
      if (applier[0] == 17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v16 = (id)gLogObj;
        v17 = applier[0];
        if (os_log_type_enabled(v16, (os_log_type_t)applier[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_service_connector_should_accept_connection_block_invoke";
          _os_log_impl(&dword_182FBE000, v16, v17, "%{public}s [nw_unique_connection_request init:] failed", buf, 0xCu);
        }
      }
      else if (__dst[0].sa_len)
      {
        v47 = __nw_create_backtrace_string();
        if (v47)
        {
          v48 = (char *)v47;
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v49 = (id)gLogObj;
          v50 = applier[0];
          if (os_log_type_enabled(v49, (os_log_type_t)applier[0]))
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_service_connector_should_accept_connection_block_invoke";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v48;
            _os_log_impl(&dword_182FBE000, v49, v50, "%{public}s [nw_unique_connection_request init:] failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v48);
          if (!v15)
            goto LABEL_102;
          goto LABEL_101;
        }
        __nwlog_obj();
        v16 = objc_claimAutoreleasedReturnValue();
        v86 = applier[0];
        if (os_log_type_enabled(v16, (os_log_type_t)applier[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_service_connector_should_accept_connection_block_invoke";
          _os_log_impl(&dword_182FBE000, v16, v86, "%{public}s [nw_unique_connection_request init:] failed, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v16 = (id)gLogObj;
        v80 = applier[0];
        if (os_log_type_enabled(v16, (os_log_type_t)applier[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_service_connector_should_accept_connection_block_invoke";
          _os_log_impl(&dword_182FBE000, v16, v80, "%{public}s [nw_unique_connection_request init:] failed, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
    if (!v15)
    {
LABEL_102:
      nw_connection_cancel(*(nw_connection_t *)(a1 + 40));
      v64 = 0;
LABEL_270:

LABEL_271:
      return;
    }
LABEL_101:
    free(v15);
    goto LABEL_102;
  }
  *((_BYTE *)v11 + 616) |= 1u;
  v267 = 0u;
  memset(v268, 0, 28);
  v265 = 0u;
  v266 = 0u;
  v263 = 0u;
  v264 = 0u;
  v261 = 0u;
  v262 = 0u;
  v259 = 0u;
  v260 = 0u;
  v257 = 0u;
  v258 = 0u;
  v255 = 0u;
  v256 = 0u;
  v253 = 0u;
  v254 = 0u;
  v252 = 0u;
  memset(v251, 0, sizeof(v251));
  memset(buf, 0, sizeof(buf));
  *(_QWORD *)&__dst[0].sa_len = 0;
  *(_QWORD *)&__dst[0].sa_data[6] = __dst;
  *(_QWORD *)&__dst[1].sa_len = 0x2000000000;
  *(_QWORD *)&__dst[1].sa_data[6] = 0;
  *(_QWORD *)&buffer = 0;
  *((_QWORD *)&buffer + 1) = &buffer;
  *(_QWORD *)&v248 = 0x2000000000;
  *((_QWORD *)&v248 + 1) = &buf[2];
  if (v9)
  {
    *(_QWORD *)applier = MEMORY[0x1E0C809B0];
    *(_QWORD *)&applier[8] = 0x40000000;
    *(_QWORD *)&applier[16] = __nw_dispatch_data_copyout_block_invoke;
    *(_QWORD *)&applier[24] = &unk_1E14A3448;
    *(_QWORD *)&applier[40] = &buffer;
    *(_QWORD *)&applier[48] = 346;
    *(_QWORD *)&applier[32] = __dst;
    dispatch_data_apply(v9, applier);
    v12 = *(_QWORD *)(*(_QWORD *)&__dst[0].sa_data[6] + 24);
  }
  else
  {
    v12 = 0;
  }
  _Block_object_dispose(&buffer, 8);
  _Block_object_dispose(__dst, 8);
  if (v12 <= 0x4E)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v18 = (id)gLogObj;
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      v19 = *(_QWORD *)(a1 + 32);
      v20 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)applier = 136446978;
      *(_QWORD *)&applier[4] = "nw_service_connector_should_accept_connection_block_invoke";
      *(_WORD *)&applier[12] = 2114;
      *(_QWORD *)&applier[14] = v19;
      *(_WORD *)&applier[22] = 2048;
      *(_QWORD *)&applier[24] = v12;
      *(_WORD *)&applier[32] = 2114;
      *(_QWORD *)&applier[34] = v20;
      _os_log_impl(&dword_182FBE000, v18, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ second read copyout insufficient req length %zu, cancelling %{public}@", applier, 0x2Au);
    }

    nw_connection_cancel(*(nw_connection_t *)(a1 + 40));
    goto LABEL_269;
  }
  v21 = *(_WORD *)&buf[2];
  v22 = nw_connection_copy_endpoint(*(nw_connection_t *)(a1 + 40));
  if (nw_endpoint_get_type(v22) != nw_endpoint_type_address)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v51 = (id)gLogObj;
    v52 = *(_QWORD *)(a1 + 32);
    v53 = nw_endpoint_get_type(v22);
    v54 = *(_QWORD *)(a1 + 40);
    *(_DWORD *)applier = 136447234;
    *(_QWORD *)&applier[4] = "nw_service_connector_should_accept_connection_block_invoke";
    *(_WORD *)&applier[12] = 2114;
    *(_QWORD *)&applier[14] = v52;
    *(_WORD *)&applier[22] = 2114;
    *(_QWORD *)&applier[24] = v22;
    *(_WORD *)&applier[32] = 1024;
    *(_DWORD *)&applier[34] = v53;
    *(_WORD *)&applier[38] = 2114;
    *(_QWORD *)&applier[40] = v54;
    v55 = (char *)_os_log_send_and_compose_impl();

    __dst[0].sa_len = 16;
    LOBYTE(buffer) = 0;
    if (__nwlog_fault(v55, __dst, &buffer))
    {
      if (__dst[0].sa_len == 17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v56 = (id)gLogObj;
        sa_len = __dst[0].sa_len;
        if (os_log_type_enabled(v56, (os_log_type_t)__dst[0].sa_len))
        {
          v58 = *(_QWORD *)(a1 + 32);
          v59 = nw_endpoint_get_type(v22);
          v60 = *(_QWORD *)(a1 + 40);
          *(_DWORD *)applier = 136447234;
          *(_QWORD *)&applier[4] = "nw_service_connector_should_accept_connection_block_invoke";
          *(_WORD *)&applier[12] = 2114;
          *(_QWORD *)&applier[14] = v58;
          *(_WORD *)&applier[22] = 2114;
          *(_QWORD *)&applier[24] = v22;
          *(_WORD *)&applier[32] = 1024;
          *(_DWORD *)&applier[34] = v59;
          *(_WORD *)&applier[38] = 2114;
          *(_QWORD *)&applier[40] = v60;
          _os_log_impl(&dword_182FBE000, v56, sa_len, "%{public}s %{public}@ got bad endpoint %{public}@ type %u from %{public}@", applier, 0x30u);
        }
      }
      else if ((_BYTE)buffer)
      {
        v70 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v56 = objc_claimAutoreleasedReturnValue();
        v71 = __dst[0].sa_len;
        v72 = os_log_type_enabled(v56, (os_log_type_t)__dst[0].sa_len);
        if (v70)
        {
          if (v72)
          {
            v73 = *(_QWORD *)(a1 + 32);
            v74 = nw_endpoint_get_type(v22);
            v75 = *(_QWORD *)(a1 + 40);
            *(_DWORD *)applier = 136447490;
            *(_QWORD *)&applier[4] = "nw_service_connector_should_accept_connection_block_invoke";
            *(_WORD *)&applier[12] = 2114;
            *(_QWORD *)&applier[14] = v73;
            *(_WORD *)&applier[22] = 2114;
            *(_QWORD *)&applier[24] = v22;
            *(_WORD *)&applier[32] = 1024;
            *(_DWORD *)&applier[34] = v74;
            *(_WORD *)&applier[38] = 2114;
            *(_QWORD *)&applier[40] = v75;
            *(_WORD *)&applier[48] = 2082;
            *(_QWORD *)&applier[50] = v70;
            _os_log_impl(&dword_182FBE000, v56, v71, "%{public}s %{public}@ got bad endpoint %{public}@ type %u from %{public}@, dumping backtrace:%{public}s", applier, 0x3Au);
          }

          free(v70);
          goto LABEL_138;
        }
        if (v72)
        {
          v106 = *(_QWORD *)(a1 + 32);
          v107 = nw_endpoint_get_type(v22);
          v108 = *(_QWORD *)(a1 + 40);
          *(_DWORD *)applier = 136447234;
          *(_QWORD *)&applier[4] = "nw_service_connector_should_accept_connection_block_invoke";
          *(_WORD *)&applier[12] = 2114;
          *(_QWORD *)&applier[14] = v106;
          *(_WORD *)&applier[22] = 2114;
          *(_QWORD *)&applier[24] = v22;
          *(_WORD *)&applier[32] = 1024;
          *(_DWORD *)&applier[34] = v107;
          *(_WORD *)&applier[38] = 2114;
          *(_QWORD *)&applier[40] = v108;
          _os_log_impl(&dword_182FBE000, v56, v71, "%{public}s %{public}@ got bad endpoint %{public}@ type %u from %{public}@, no backtrace", applier, 0x30u);
        }
      }
      else
      {
        __nwlog_obj();
        v56 = objc_claimAutoreleasedReturnValue();
        v91 = __dst[0].sa_len;
        if (os_log_type_enabled(v56, (os_log_type_t)__dst[0].sa_len))
        {
          v92 = *(_QWORD *)(a1 + 32);
          v93 = nw_endpoint_get_type(v22);
          v94 = *(_QWORD *)(a1 + 40);
          *(_DWORD *)applier = 136447234;
          *(_QWORD *)&applier[4] = "nw_service_connector_should_accept_connection_block_invoke";
          *(_WORD *)&applier[12] = 2114;
          *(_QWORD *)&applier[14] = v92;
          *(_WORD *)&applier[22] = 2114;
          *(_QWORD *)&applier[24] = v22;
          *(_WORD *)&applier[32] = 1024;
          *(_DWORD *)&applier[34] = v93;
          *(_WORD *)&applier[38] = 2114;
          *(_QWORD *)&applier[40] = v94;
          _os_log_impl(&dword_182FBE000, v56, v91, "%{public}s %{public}@ got bad endpoint %{public}@ type %u from %{public}@, backtrace limit exceeded", applier, 0x30u);
        }
      }

    }
LABEL_138:
    if (v55)
      free(v55);
    goto LABEL_257;
  }
  address = nw_endpoint_get_address(v22);
  if (!address)
  {
    __nwlog_obj();
    v81 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)applier = 136446210;
    *(_QWORD *)&applier[4] = "nw_service_connector_should_accept_connection_block_invoke";
    v82 = (char *)_os_log_send_and_compose_impl();

    __dst[0].sa_len = 16;
    LOBYTE(buffer) = 0;
    if (__nwlog_fault(v82, __dst, &buffer))
    {
      if (__dst[0].sa_len == 17)
      {
        __nwlog_obj();
        v83 = objc_claimAutoreleasedReturnValue();
        v84 = __dst[0].sa_len;
        if (os_log_type_enabled(v83, (os_log_type_t)__dst[0].sa_len))
        {
          *(_DWORD *)applier = 136446210;
          *(_QWORD *)&applier[4] = "nw_service_connector_should_accept_connection_block_invoke";
          _os_log_impl(&dword_182FBE000, v83, v84, "%{public}s nw_endpoint_get_address failed", applier, 0xCu);
        }
      }
      else if ((_BYTE)buffer)
      {
        v95 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v83 = objc_claimAutoreleasedReturnValue();
        v96 = __dst[0].sa_len;
        v97 = os_log_type_enabled(v83, (os_log_type_t)__dst[0].sa_len);
        if (v95)
        {
          if (v97)
          {
            *(_DWORD *)applier = 136446466;
            *(_QWORD *)&applier[4] = "nw_service_connector_should_accept_connection_block_invoke";
            *(_WORD *)&applier[12] = 2082;
            *(_QWORD *)&applier[14] = v95;
            _os_log_impl(&dword_182FBE000, v83, v96, "%{public}s nw_endpoint_get_address failed, dumping backtrace:%{public}s", applier, 0x16u);
          }

          free(v95);
          goto LABEL_173;
        }
        if (v97)
        {
          *(_DWORD *)applier = 136446210;
          *(_QWORD *)&applier[4] = "nw_service_connector_should_accept_connection_block_invoke";
          _os_log_impl(&dword_182FBE000, v83, v96, "%{public}s nw_endpoint_get_address failed, no backtrace", applier, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v83 = objc_claimAutoreleasedReturnValue();
        v127 = __dst[0].sa_len;
        if (os_log_type_enabled(v83, (os_log_type_t)__dst[0].sa_len))
        {
          *(_DWORD *)applier = 136446210;
          *(_QWORD *)&applier[4] = "nw_service_connector_should_accept_connection_block_invoke";
          _os_log_impl(&dword_182FBE000, v83, v127, "%{public}s nw_endpoint_get_address failed, backtrace limit exceeded", applier, 0xCu);
        }
      }

    }
LABEL_173:
    if (v82)
      free(v82);
    goto LABEL_257;
  }
  memset(__dst, 0, 28);
  if (address->sa_len >= 0x1Cu)
    v24 = 28;
  else
    v24 = address->sa_len;
  memcpy(__dst, address, v24);
  if (__dst[0].sa_family != 2 && __dst[0].sa_family != 30)
  {
    __nwlog_obj();
    v87 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)applier = 136446466;
    *(_QWORD *)&applier[4] = "nw_service_connector_should_accept_connection_block_invoke";
    *(_WORD *)&applier[12] = 1024;
    *(_DWORD *)&applier[14] = __dst[0].sa_family;
    v88 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(buffer) = 16;
    type[0] = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v88, &buffer, type))
    {
      if (buffer == 17)
      {
        __nwlog_obj();
        v89 = objc_claimAutoreleasedReturnValue();
        v90 = buffer;
        if (os_log_type_enabled(v89, (os_log_type_t)buffer))
        {
          *(_DWORD *)applier = 136446466;
          *(_QWORD *)&applier[4] = "nw_service_connector_should_accept_connection_block_invoke";
          *(_WORD *)&applier[12] = 1024;
          *(_DWORD *)&applier[14] = __dst[0].sa_family;
          _os_log_impl(&dword_182FBE000, v89, v90, "%{public}s Unsupported address family %u", applier, 0x12u);
        }
      }
      else if (type[0])
      {
        v109 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v89 = objc_claimAutoreleasedReturnValue();
        v110 = buffer;
        v111 = os_log_type_enabled(v89, (os_log_type_t)buffer);
        if (v109)
        {
          if (v111)
          {
            *(_DWORD *)applier = 136446722;
            *(_QWORD *)&applier[4] = "nw_service_connector_should_accept_connection_block_invoke";
            *(_WORD *)&applier[12] = 1024;
            *(_DWORD *)&applier[14] = __dst[0].sa_family;
            *(_WORD *)&applier[18] = 2082;
            *(_QWORD *)&applier[20] = v109;
            _os_log_impl(&dword_182FBE000, v89, v110, "%{public}s Unsupported address family %u, dumping backtrace:%{public}s", applier, 0x1Cu);
          }

          free(v109);
          goto LABEL_255;
        }
        if (v111)
        {
          *(_DWORD *)applier = 136446466;
          *(_QWORD *)&applier[4] = "nw_service_connector_should_accept_connection_block_invoke";
          *(_WORD *)&applier[12] = 1024;
          *(_DWORD *)&applier[14] = __dst[0].sa_family;
          _os_log_impl(&dword_182FBE000, v89, v110, "%{public}s Unsupported address family %u, no backtrace", applier, 0x12u);
        }
      }
      else
      {
        __nwlog_obj();
        v89 = objc_claimAutoreleasedReturnValue();
        v137 = buffer;
        if (os_log_type_enabled(v89, (os_log_type_t)buffer))
        {
          *(_DWORD *)applier = 136446466;
          *(_QWORD *)&applier[4] = "nw_service_connector_should_accept_connection_block_invoke";
          *(_WORD *)&applier[12] = 1024;
          *(_DWORD *)&applier[14] = __dst[0].sa_family;
          _os_log_impl(&dword_182FBE000, v89, v137, "%{public}s Unsupported address family %u, backtrace limit exceeded", applier, 0x12u);
        }
      }

    }
LABEL_255:
    if (v88)
      free(v88);
LABEL_257:
    nw_connection_cancel(*(nw_connection_t *)(a1 + 40));
LABEL_268:

LABEL_269:
    v64 = v220;
    goto LABEL_270;
  }
  *(_WORD *)__dst[0].sa_data = v21;
  v25 = nw_endpoint_create_address(__dst);
  v218 = v25;
  if (!v25)
  {
    __nwlog_obj();
    v99 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)applier = 136446210;
    *(_QWORD *)&applier[4] = "nw_service_connector_should_accept_connection_block_invoke";
    v100 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(buffer) = 16;
    type[0] = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v100, &buffer, type))
    {
      if (buffer == 17)
      {
        __nwlog_obj();
        v101 = objc_claimAutoreleasedReturnValue();
        v102 = buffer;
        if (os_log_type_enabled(v101, (os_log_type_t)buffer))
        {
          *(_DWORD *)applier = 136446210;
          *(_QWORD *)&applier[4] = "nw_service_connector_should_accept_connection_block_invoke";
          _os_log_impl(&dword_182FBE000, v101, v102, "%{public}s nw_endpoint_create_address failed", applier, 0xCu);
        }
      }
      else if (type[0])
      {
        v124 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v101 = objc_claimAutoreleasedReturnValue();
        v125 = buffer;
        v126 = os_log_type_enabled(v101, (os_log_type_t)buffer);
        if (v124)
        {
          if (v126)
          {
            *(_DWORD *)applier = 136446466;
            *(_QWORD *)&applier[4] = "nw_service_connector_should_accept_connection_block_invoke";
            *(_WORD *)&applier[12] = 2082;
            *(_QWORD *)&applier[14] = v124;
            _os_log_impl(&dword_182FBE000, v101, v125, "%{public}s nw_endpoint_create_address failed, dumping backtrace:%{public}s", applier, 0x16u);
          }

          free(v124);
          goto LABEL_264;
        }
        if (v126)
        {
          *(_DWORD *)applier = 136446210;
          *(_QWORD *)&applier[4] = "nw_service_connector_should_accept_connection_block_invoke";
          _os_log_impl(&dword_182FBE000, v101, v125, "%{public}s nw_endpoint_create_address failed, no backtrace", applier, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v101 = objc_claimAutoreleasedReturnValue();
        v190 = buffer;
        if (os_log_type_enabled(v101, (os_log_type_t)buffer))
        {
          *(_DWORD *)applier = 136446210;
          *(_QWORD *)&applier[4] = "nw_service_connector_should_accept_connection_block_invoke";
          _os_log_impl(&dword_182FBE000, v101, v190, "%{public}s nw_endpoint_create_address failed, backtrace limit exceeded", applier, 0xCu);
        }
      }

    }
LABEL_264:
    if (v100)
      free(v100);
    nw_connection_cancel(*(nw_connection_t *)(a1 + 40));
    goto LABEL_267;
  }
  objc_storeStrong((id *)v220 + 1, v25);
  objc_storeStrong((id *)v220 + 72, *(id *)(a1 + 40));
  if (!*(_DWORD *)&buf[12])
  {
    v112 = v253;
    if (v253 == 1)
    {
      __nwlog_obj();
      v184 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v184, OS_LOG_TYPE_DEFAULT))
      {
        v185 = *(_QWORD *)(a1 + 32);
        v186 = *(_QWORD *)(a1 + 40);
        *(_DWORD *)applier = 136446978;
        *(_QWORD *)&applier[4] = "nw_service_connector_should_accept_connection_block_invoke";
        *(_WORD *)&applier[12] = 2114;
        *(_QWORD *)&applier[14] = v185;
        *(_WORD *)&applier[22] = 2114;
        *(_QWORD *)&applier[24] = v218;
        *(_WORD *)&applier[32] = 2114;
        *(_QWORD *)&applier[34] = v186;
        _os_log_impl(&dword_182FBE000, v184, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ received operation code retry from %{public}@ on %{public}@", applier, 0x2Au);
      }

      nwsc_restart_outgoing_requests_waiting_for_path(*(void **)(a1 + 32), v218);
      goto LABEL_248;
    }
    if ((_BYTE)v253)
    {
      __nwlog_obj();
      v113 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v113, OS_LOG_TYPE_ERROR))
      {
        v187 = *(_QWORD *)(a1 + 32);
        v188 = *(_QWORD *)(a1 + 40);
        *(_DWORD *)applier = 136447234;
        *(_QWORD *)&applier[4] = "nw_service_connector_should_accept_connection_block_invoke";
        *(_WORD *)&applier[12] = 2114;
        *(_QWORD *)&applier[14] = v187;
        *(_WORD *)&applier[22] = 1024;
        *(_DWORD *)&applier[24] = v112;
        *(_WORD *)&applier[28] = 2114;
        *(_QWORD *)&applier[30] = v218;
        *(_WORD *)&applier[38] = 2114;
        *(_QWORD *)&applier[40] = v188;
        v116 = "%{public}s %{public}@ received unsupported operation code %u from %{public}@ on %{public}@";
        v117 = v113;
        v118 = OS_LOG_TYPE_ERROR;
        v119 = 48;
        goto LABEL_246;
      }
    }
    else
    {
      __nwlog_obj();
      v113 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v113, OS_LOG_TYPE_DEFAULT))
      {
        v114 = *(_QWORD *)(a1 + 32);
        v115 = *(_QWORD *)(a1 + 40);
        *(_DWORD *)applier = 136446978;
        *(_QWORD *)&applier[4] = "nw_service_connector_should_accept_connection_block_invoke";
        *(_WORD *)&applier[12] = 2114;
        *(_QWORD *)&applier[14] = v114;
        *(_WORD *)&applier[22] = 2114;
        *(_QWORD *)&applier[24] = v218;
        *(_WORD *)&applier[32] = 2114;
        *(_QWORD *)&applier[34] = v115;
        v116 = "%{public}s %{public}@ received operation code no-op from %{public}@ on %{public}@";
        v117 = v113;
        v118 = OS_LOG_TYPE_DEFAULT;
        v119 = 42;
LABEL_246:
        _os_log_impl(&dword_182FBE000, v117, v118, v116, applier, v119);
      }
    }

LABEL_248:
    new_sequence_number = nw_service_connector_get_new_sequence_number();
    nwsc_send_feedback(*(void **)(a1 + 32), *(void **)(a1 + 40), new_sequence_number, 0, 0, 0);
    goto LABEL_267;
  }
  if (v12 <= 0x5A)
  {
    __nwlog_obj();
    v26 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      v27 = *(_QWORD *)(a1 + 32);
      v28 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)applier = 136446978;
      *(_QWORD *)&applier[4] = "nw_service_connector_should_accept_connection_block_invoke";
      *(_WORD *)&applier[12] = 2114;
      *(_QWORD *)&applier[14] = v27;
      *(_WORD *)&applier[22] = 2048;
      *(_QWORD *)&applier[24] = v12;
      *(_WORD *)&applier[32] = 2114;
      *(_QWORD *)&applier[34] = v28;
      _os_log_impl(&dword_182FBE000, v26, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ second read copyout insufficient start req length %zu, cancelling %{public}@", applier, 0x2Au);
    }
    goto LABEL_30;
  }
  *((_QWORD *)v220 + 58) = bswap64(*(unint64_t *)&buf[4]);
  *((_OWORD *)v220 + 30) = *(_OWORD *)((unint64_t)buf | 0xC);
  v120 = buf[28];
  if (v12 < (unint64_t)buf[28] + 91)
  {
    __nwlog_obj();
    v121 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v121, OS_LOG_TYPE_ERROR))
    {
      v122 = *(_QWORD *)(a1 + 32);
      v123 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)applier = 136447234;
      *(_QWORD *)&applier[4] = "nw_service_connector_should_accept_connection_block_invoke";
      *(_WORD *)&applier[12] = 2114;
      *(_QWORD *)&applier[14] = v122;
      *(_WORD *)&applier[22] = 2048;
      *(_QWORD *)&applier[24] = v12;
      *(_WORD *)&applier[32] = 1024;
      *(_DWORD *)&applier[34] = v120;
      *(_WORD *)&applier[38] = 2114;
      *(_QWORD *)&applier[40] = v123;
      _os_log_impl(&dword_182FBE000, v121, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ second read copyout insufficient start req length %zu for service length %u, cancelling %{public}@", applier, 0x30u);
    }

    nw_connection_cancel(*(nw_connection_t *)(a1 + 40));
    goto LABEL_267;
  }
  *(_OWORD *)(v220 + 24) = 0u;
  *((_DWORD *)v220 + 114) = 0;
  *(_OWORD *)(v220 + 424) = 0u;
  *(_OWORD *)(v220 + 440) = 0u;
  *(_OWORD *)(v220 + 392) = 0u;
  *(_OWORD *)(v220 + 408) = 0u;
  *(_OWORD *)(v220 + 360) = 0u;
  *(_OWORD *)(v220 + 376) = 0u;
  *(_OWORD *)(v220 + 328) = 0u;
  *(_OWORD *)(v220 + 344) = 0u;
  *(_OWORD *)(v220 + 296) = 0u;
  *(_OWORD *)(v220 + 312) = 0u;
  *(_OWORD *)(v220 + 264) = 0u;
  *(_OWORD *)(v220 + 280) = 0u;
  *(_OWORD *)(v220 + 232) = 0u;
  *(_OWORD *)(v220 + 248) = 0u;
  *(_OWORD *)(v220 + 200) = 0u;
  *(_OWORD *)(v220 + 216) = 0u;
  *(_OWORD *)(v220 + 168) = 0u;
  *(_OWORD *)(v220 + 184) = 0u;
  *(_OWORD *)(v220 + 136) = 0u;
  *(_OWORD *)(v220 + 152) = 0u;
  *(_OWORD *)(v220 + 104) = 0u;
  *(_OWORD *)(v220 + 120) = 0u;
  *(_OWORD *)(v220 + 72) = 0u;
  *(_OWORD *)(v220 + 88) = 0u;
  *(_OWORD *)(v220 + 40) = 0u;
  *(_OWORD *)(v220 + 56) = 0u;
  memcpy(v220 + 24, &buf[29], v120);
  v129 = *(unsigned __int16 *)(a1 + 48);
  v130 = v129 + 2;
  *((_DWORD *)v220 + 142) = v129 + 2;
  v131 = malloc_type_malloc(v129 + 2, 0xF2B69DE5uLL);
  if (v131)
  {
LABEL_177:
    *((_QWORD *)v220 + 70) = v131;
    *v131 = *(_WORD *)(a1 + 50);
    v132 = nw_dispatch_data_copyout(v9, *((_QWORD *)v220 + 70) + 2, *(unsigned __int16 *)(a1 + 48));
    if (v132 == *(unsigned __int16 *)(a1 + 48))
    {
      v133 = *(_OWORD *)&buf[v120 + 29];
      v134 = *(_OWORD *)((char *)&v251[1] + v120 + 5);
      v135 = *(__int128 *)((char *)&v252 + v120 + 13);
      *((_OWORD *)v220 + 33) = *(_OWORD *)((char *)&v251[3] + v120 + 5);
      *((_OWORD *)v220 + 34) = v135;
      *((_OWORD *)v220 + 31) = v133;
      *((_OWORD *)v220 + 32) = v134;
      v136 = *((_QWORD *)v220 + 70) + v120;
      *(_OWORD *)(v136 + 45) = 0u;
      *(_OWORD *)(v136 + 61) = 0u;
      *(_OWORD *)(v136 + 77) = 0u;
      *(_OWORD *)(v136 + 29) = 0u;
      nwsc_process_incoming_request(*(NWConcrete_nw_service_connector **)(a1 + 32), (NWConcrete_nw_unique_connection_request *)v220);
      nwsc_restart_outgoing_requests_waiting_for_path(*(void **)(a1 + 32), v218);
      goto LABEL_267;
    }
    v191 = v132;
    __nwlog_obj();
    v26 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      v192 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)applier = 136446978;
      *(_QWORD *)&applier[4] = "nw_service_connector_should_accept_connection_block_invoke";
      *(_WORD *)&applier[12] = 2114;
      *(_QWORD *)&applier[14] = v192;
      *(_WORD *)&applier[22] = 2048;
      *(_QWORD *)&applier[24] = v191;
      *(_WORD *)&applier[32] = 2114;
      *(_QWORD *)&applier[34] = v220;
      _os_log_impl(&dword_182FBE000, v26, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ copyout for sig insufficient req length %zu, cancelling %{public}@", applier, 0x2Au);
    }
LABEL_30:

    nw_connection_cancel(*(nw_connection_t *)(a1 + 40));
LABEL_267:

    goto LABEL_268;
  }
  __nwlog_obj();
  v213 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v213, OS_LOG_TYPE_ERROR);
  *(_DWORD *)applier = 136446466;
  *(_QWORD *)&applier[4] = "strict_malloc";
  *(_WORD *)&applier[12] = 2048;
  *(_QWORD *)&applier[14] = v130;
  v214 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v214))
  {
    free(v214);
    v131 = 0;
    goto LABEL_177;
  }
  __break(1u);
}

void sub_18387645C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,void *a23)
{
  void *v23;
  void *v24;
  void *v25;

  _Unwind_Resume(a1);
}

void nwsc_restart_outgoing_requests_waiting_for_path(void *a1, void *a2)
{
  _QWORD *v3;
  id v4;
  void *v5;
  uint64_t v6;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  void *v11;
  os_log_type_t v12;
  char *backtrace_string;
  os_log_type_t v14;
  _BOOL4 v15;
  char *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  os_log_type_t v19;
  os_log_type_t v20;
  _QWORD v21[4];
  id v22;
  _QWORD *v23;
  char v24;
  os_log_type_t v25;
  uint8_t buf[4];
  const char *v27;
  __int16 v28;
  char *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v27 = "nwsc_restart_outgoing_requests_waiting_for_path";
    v8 = (char *)_os_log_send_and_compose_impl();

    v25 = OS_LOG_TYPE_ERROR;
    v24 = 0;
    if (!__nwlog_fault(v8, &v25, &v24))
      goto LABEL_38;
    if (v25 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = v25;
      if (os_log_type_enabled(v9, v25))
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nwsc_restart_outgoing_requests_waiting_for_path";
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null serviceConnector", buf, 0xCu);
      }
    }
    else if (v24)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = v25;
      v15 = os_log_type_enabled(v9, v25);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          v27 = "nwsc_restart_outgoing_requests_waiting_for_path";
          v28 = 2082;
          v29 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null serviceConnector, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v8)
          goto LABEL_4;
LABEL_39:
        free(v8);
        goto LABEL_4;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nwsc_restart_outgoing_requests_waiting_for_path";
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null serviceConnector, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v19 = v25;
      if (os_log_type_enabled(v9, v25))
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nwsc_restart_outgoing_requests_waiting_for_path";
        _os_log_impl(&dword_182FBE000, v9, v19, "%{public}s called with null serviceConnector, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_37:

    goto LABEL_38;
  }
  v6 = v3[12];
  if (v6)
  {
    v21[0] = MEMORY[0x1E0C809B0];
    v21[1] = 3221225472;
    v21[2] = ___ZL47nwsc_restart_outgoing_requests_waiting_for_pathP31NWConcrete_nw_service_connectorPU25objcproto14OS_nw_endpoint8NSObject_block_invoke;
    v21[3] = &unk_1E14A3C38;
    v22 = v4;
    v23 = v3;
    nw_dictionary_apply(v6, (uint64_t)v21);

    goto LABEL_4;
  }
  __nwlog_obj();
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v27 = "nwsc_restart_outgoing_requests_waiting_for_path";
  v8 = (char *)_os_log_send_and_compose_impl();

  v25 = OS_LOG_TYPE_ERROR;
  v24 = 0;
  if (!__nwlog_fault(v8, &v25, &v24))
    goto LABEL_38;
  if (v25 == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v9 = objc_claimAutoreleasedReturnValue();
    v12 = v25;
    if (os_log_type_enabled(v9, v25))
    {
      *(_DWORD *)buf = 136446210;
      v27 = "nwsc_restart_outgoing_requests_waiting_for_path";
      _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null serviceConnector->activeOutgoingRequests", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (!v24)
  {
    __nwlog_obj();
    v9 = objc_claimAutoreleasedReturnValue();
    v20 = v25;
    if (os_log_type_enabled(v9, v25))
    {
      *(_DWORD *)buf = 136446210;
      v27 = "nwsc_restart_outgoing_requests_waiting_for_path";
      _os_log_impl(&dword_182FBE000, v9, v20, "%{public}s called with null serviceConnector->activeOutgoingRequests, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_37;
  }
  v16 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v9 = objc_claimAutoreleasedReturnValue();
  v17 = v25;
  v18 = os_log_type_enabled(v9, v25);
  if (!v16)
  {
    if (v18)
    {
      *(_DWORD *)buf = 136446210;
      v27 = "nwsc_restart_outgoing_requests_waiting_for_path";
      _os_log_impl(&dword_182FBE000, v9, v17, "%{public}s called with null serviceConnector->activeOutgoingRequests, no backtrace", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (v18)
  {
    *(_DWORD *)buf = 136446466;
    v27 = "nwsc_restart_outgoing_requests_waiting_for_path";
    v28 = 2082;
    v29 = v16;
    _os_log_impl(&dword_182FBE000, v9, v17, "%{public}s called with null serviceConnector->activeOutgoingRequests, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v16);
  if (v8)
    goto LABEL_39;
LABEL_4:

}

unint64_t nw_service_connector_get_new_sequence_number(void)
{
  unint64_t result;
  BOOL v1;

  if (nw_service_connector_get_new_sequence_number(void)::onceToken != -1)
    dispatch_once(&nw_service_connector_get_new_sequence_number(void)::onceToken, &__block_literal_global_181);
  do
    result = __ldaxr((unint64_t *)&nw_service_connector_get_new_sequence_number(void)::sNWSCSequenceNumber);
  while (__stlxr(result + 1, (unint64_t *)&nw_service_connector_get_new_sequence_number(void)::sNWSCSequenceNumber));
  if (!result)
  {
    do
    {
      result = __ldaxr((unint64_t *)&nw_service_connector_get_new_sequence_number(void)::sNWSCSequenceNumber);
      if (__stlxr(result + 1, (unint64_t *)&nw_service_connector_get_new_sequence_number(void)::sNWSCSequenceNumber))
      {
        v1 = 1;
      }
      else
      {
        v1 = result == 0;
      }
    }
    while (v1);
  }
  return result;
}

void nwsc_send_feedback(void *a1, void *a2, unint64_t a3, int a4, int a5, void *a6)
{
  char *v11;
  id v12;
  id v13;
  __int16 v14;
  NSObject *v15;
  void *v16;
  NSObject *v17;
  id v18;
  char *v19;
  NSObject *v20;
  os_log_type_t v21;
  char *backtrace_string;
  os_log_type_t v23;
  _BOOL4 v24;
  os_log_type_t v25;
  _QWORD completion[4];
  char *v27;
  NSObject *v28;
  void *v29;
  id v30;
  unint64_t v31;
  char v32;
  char v33;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v36;
  __int16 v37;
  char *v38;
  int buffer;
  unint64_t v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v11 = a1;
  v12 = a2;
  v13 = a6;
  buffer = 10752;
  if ((a4 & 1) != 0 || a5)
  {
    if (a4)
      v14 = 128;
    else
      v14 = 64;
    HIWORD(buffer) = v14;
  }
  v40 = bswap64(a3);
  v41 = *(_OWORD *)(v11 + 120);
  v42 = *(_OWORD *)(v11 + 136);
  v15 = dispatch_data_create(&buffer, 0x2CuLL, 0, 0);
  if (v15)
  {
    if (a4)
      v16 = &__block_literal_global_41718;
    else
      v16 = &__block_literal_global_3_41726;
    completion[0] = MEMORY[0x1E0C809B0];
    completion[1] = 3221225472;
    completion[2] = ___ZL18nwsc_send_feedbackP31NWConcrete_nw_service_connectorP24NWConcrete_nw_connectionybbU13block_pointerFviE_block_invoke;
    completion[3] = &unk_1E14A3C80;
    v27 = v11;
    v28 = v12;
    v32 = a4;
    v30 = v13;
    v31 = a3;
    v29 = v16;
    v17 = v16;
    nw_connection_send(v28, v15, v17, 1, completion);

    goto LABEL_21;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v18 = (id)gLogObj;
  *(_DWORD *)buf = 136446210;
  v36 = "nwsc_send_feedback";
  v19 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v33 = 0;
  if (!__nwlog_fault(v19, &type, &v33))
  {
LABEL_17:
    if (!v19)
      goto LABEL_19;
    goto LABEL_18;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v20 = (id)gLogObj;
    v21 = type;
    if (os_log_type_enabled(v20, type))
    {
      *(_DWORD *)buf = 136446210;
      v36 = "nwsc_send_feedback";
      _os_log_impl(&dword_182FBE000, v20, v21, "%{public}s dispatch_data_create failed", buf, 0xCu);
    }
LABEL_16:

    goto LABEL_17;
  }
  if (!v33)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v20 = (id)gLogObj;
    v25 = type;
    if (os_log_type_enabled(v20, type))
    {
      *(_DWORD *)buf = 136446210;
      v36 = "nwsc_send_feedback";
      _os_log_impl(&dword_182FBE000, v20, v25, "%{public}s dispatch_data_create failed, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_16;
  }
  backtrace_string = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v20 = (id)gLogObj;
  v23 = type;
  v24 = os_log_type_enabled(v20, type);
  if (!backtrace_string)
  {
    if (v24)
    {
      *(_DWORD *)buf = 136446210;
      v36 = "nwsc_send_feedback";
      _os_log_impl(&dword_182FBE000, v20, v23, "%{public}s dispatch_data_create failed, no backtrace", buf, 0xCu);
    }
    goto LABEL_16;
  }
  if (v24)
  {
    *(_DWORD *)buf = 136446466;
    v36 = "nwsc_send_feedback";
    v37 = 2082;
    v38 = backtrace_string;
    _os_log_impl(&dword_182FBE000, v20, v23, "%{public}s dispatch_data_create failed, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(backtrace_string);
  if (!v19)
    goto LABEL_19;
LABEL_18:
  free(v19);
LABEL_19:
  if (v13)
    (*((void (**)(id, uint64_t))v13 + 2))(v13, 12);
LABEL_21:

}

void sub_183876F54(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void nwsc_process_incoming_request(NWConcrete_nw_service_connector *a1, NWConcrete_nw_unique_connection_request *a2)
{
  NWConcrete_nw_service_connector *v3;
  NWConcrete_nw_unique_connection_request *v4;
  NWConcrete_nw_unique_connection_request *v5;
  OS_nw_endpoint *endpoint;
  NWConcrete_nw_service_connector *v7;
  OS_nw_endpoint *v8;
  OS_nw_endpoint *v9;
  void *v10;
  void *v11;
  id v12;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  NSObject *v16;
  id v17;
  char *v18;
  NSObject *v19;
  os_log_type_t v20;
  char *v21;
  os_log_type_t v22;
  _BOOL4 v23;
  os_log_type_t v24;
  char *backtrace_string;
  os_log_type_t v26;
  _BOOL4 v27;
  unint64_t v28;
  os_log_type_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const __CFData *v33;
  __SecKey *v34;
  const __CFData *v35;
  const __CFData *v36;
  int v37;
  NSObject *v38;
  int v39;
  int v40;
  int v41;
  int v42;
  void *v43;
  id v44;
  void *v45;
  os_unfair_lock_s *v46;
  os_unfair_lock_s *v47;
  char *v48;
  int v49;
  NSObject *v50;
  NSObject *v51;
  NSObject *v52;
  unint64_t v53;
  unint64_t sequenceNumber;
  char *v55;
  char *v56;
  NSObject *v57;
  char *v58;
  uint64_t v59;
  char v60;
  void *v61;
  NSObject *v62;
  NSObject *v63;
  _BOOL4 v64;
  void *v65;
  char *v66;
  NSObject *v67;
  os_log_type_t v68;
  char v69;
  uint64_t v70;
  NSObject *v71;
  NSObject *v72;
  int v73;
  const char *v74;
  NWConcrete_nw_connection *connection;
  id *v76;
  id *v77;
  id *v78;
  NSObject *v79;
  uint64_t v80;
  uint64_t v81;
  NWConcrete_nw_connection *v82;
  char *v83;
  char *v84;
  NSObject *v85;
  os_log_type_t v86;
  char *v87;
  os_log_type_t v88;
  _BOOL4 v89;
  char *v90;
  os_log_type_t v91;
  _BOOL4 v92;
  os_log_type_t v93;
  os_log_type_t v94;
  void *v95;
  NSObject *v96;
  os_log_type_t v97;
  NSObject *v98;
  NSObject *v99;
  NSObject *v100;
  int v101;
  int v102;
  int v103;
  int v104;
  id v105;
  NSObject *v106;
  int v107;
  int v108;
  int v109;
  int v110;
  int v111;
  int v112;
  int v113;
  int v114;
  void *v115;
  os_log_type_t v116;
  void *v117;
  os_log_type_t v118;
  NSObject *v119;
  os_log_type_t v120;
  _BOOL4 v121;
  os_log_type_t v122;
  _BOOL4 v123;
  char *v124;
  os_log_type_t v125;
  _BOOL4 v126;
  os_log_type_t v127;
  os_log_type_t v128;
  os_log_type_t v129;
  NSObject *v130;
  const __CFDictionary *attributes;
  NWConcrete_nw_service_connector *v132;
  _QWORD v133[4];
  NWConcrete_nw_service_connector *v134;
  char *v135;
  NWConcrete_nw_unique_connection_request *v136;
  _QWORD v137[4];
  NWConcrete_nw_service_connector *v138;
  char *v139;
  NWConcrete_nw_unique_connection_request *v140;
  char v141;
  os_log_type_t type;
  _QWORD v143[2];
  _QWORD v144[2];
  __int128 v145;
  __int128 v146;
  _BYTE buf[12];
  __int16 v148;
  char *v149;
  _QWORD buffer[6];
  char key[64];
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  int v175;
  uint64_t v176;

  v176 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  v132 = v3;
  if ((*((_BYTE *)v4 + 616) & 0x40) == 0)
  {
    v145 = 0u;
    v146 = 0u;
    endpoint = v4->endpoint;
    v7 = v3;
    v8 = endpoint;
    v9 = v8;
    if (v7)
    {
      if (v7->remotePubKeys)
      {
        if (v8)
        {
          v175 = 0;
          v173 = 0u;
          v174 = 0u;
          v171 = 0u;
          v172 = 0u;
          v169 = 0u;
          v170 = 0u;
          v167 = 0u;
          v168 = 0u;
          v165 = 0u;
          v166 = 0u;
          v163 = 0u;
          v164 = 0u;
          v161 = 0u;
          v162 = 0u;
          v159 = 0u;
          v160 = 0u;
          v157 = 0u;
          v158 = 0u;
          v155 = 0u;
          v156 = 0u;
          v153 = 0u;
          v154 = 0u;
          v152 = 0u;
          memset(key, 0, sizeof(key));
          if ((nwsc_get_endpoint_identifier(v8, (uint64_t)key) & 1) != 0)
          {
            xpc_dictionary_get_value(v7->remotePubKeys, key);
            v10 = (void *)objc_claimAutoreleasedReturnValue();
            v11 = v10;
            memset(buffer, 0, 40);
            if (!v10 || xpc_data_get_bytes(v10, buffer, 0, 0x28uLL) >= 0x28)
              goto LABEL_51;
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v12 = (id)gLogObj;
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nwsc_get_remote_pub_key";
            v13 = (char *)_os_log_send_and_compose_impl();

            type = OS_LOG_TYPE_ERROR;
            v141 = 0;
            if (__nwlog_fault(v13, &type, &v141))
            {
              if (type == OS_LOG_TYPE_FAULT)
              {
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                v14 = (id)gLogObj;
                v15 = type;
                if (os_log_type_enabled(v14, type))
                {
                  *(_DWORD *)buf = 136446210;
                  *(_QWORD *)&buf[4] = "nwsc_get_remote_pub_key";
                  _os_log_impl(&dword_182FBE000, v14, v15, "%{public}s Insufficient length in remotePubKeys", buf, 0xCu);
                }
              }
              else if (v141)
              {
                backtrace_string = (char *)__nw_create_backtrace_string();
                __nwlog_obj();
                v14 = objc_claimAutoreleasedReturnValue();
                v26 = type;
                v27 = os_log_type_enabled(v14, type);
                if (backtrace_string)
                {
                  if (v27)
                  {
                    *(_DWORD *)buf = 136446466;
                    *(_QWORD *)&buf[4] = "nwsc_get_remote_pub_key";
                    v148 = 2082;
                    v149 = backtrace_string;
                    _os_log_impl(&dword_182FBE000, v14, v26, "%{public}s Insufficient length in remotePubKeys, dumping backtrace:%{public}s", buf, 0x16u);
                  }

                  free(backtrace_string);
                  if (!v13)
                    goto LABEL_51;
                  goto LABEL_50;
                }
                if (v27)
                {
                  *(_DWORD *)buf = 136446210;
                  *(_QWORD *)&buf[4] = "nwsc_get_remote_pub_key";
                  _os_log_impl(&dword_182FBE000, v14, v26, "%{public}s Insufficient length in remotePubKeys, no backtrace", buf, 0xCu);
                }
              }
              else
              {
                __nwlog_obj();
                v14 = objc_claimAutoreleasedReturnValue();
                v29 = type;
                if (os_log_type_enabled(v14, type))
                {
                  *(_DWORD *)buf = 136446210;
                  *(_QWORD *)&buf[4] = "nwsc_get_remote_pub_key";
                  _os_log_impl(&dword_182FBE000, v14, v29, "%{public}s Insufficient length in remotePubKeys, backtrace limit exceeded", buf, 0xCu);
                }
              }

            }
            if (!v13)
            {
LABEL_51:
              v145 = *(_OWORD *)&buffer[1];
              v146 = *(_OWORD *)&buffer[3];
              v28 = buffer[0];

LABEL_52:
              v30 = *MEMORY[0x1E0CD6A60];
              v31 = *MEMORY[0x1E0CD69F8];
              v143[0] = *MEMORY[0x1E0CD6A38];
              v143[1] = v31;
              v32 = *MEMORY[0x1E0CD6A10];
              v144[0] = v30;
              v144[1] = v32;
              objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v144, v143, 2);
              attributes = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
              v33 = (const __CFData *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBytesNoCopy:length:freeWhenDone:", &v145, 32, 0);
              *(_QWORD *)buf = 0;
              v34 = SecKeyCreateWithData(v33, attributes, (CFErrorRef *)buf);
              if (v34)
              {
                v35 = (const __CFData *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBytesNoCopy:length:freeWhenDone:", v5->incomingReqBytesToVerify, v5->incomingReqBytesToVerifyLen, 0);
                v36 = (const __CFData *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBytesNoCopy:length:freeWhenDone:", v5->signature, 64, 0);
                v37 = SecKeyVerifySignature(v34, (SecKeyAlgorithm)*MEMORY[0x1E0CD6E20], v35, v36, (CFErrorRef *)buf);
                CFRelease(v34);

                if (v37)
                {
                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                  networkd_settings_init();
                  v38 = (id)gLogObj;
                  if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
                  {
                    v39 = v5->signature[0];
                    v40 = v5->signature[1];
                    v41 = v5->signature[2];
                    v42 = v5->signature[3];
                    *(_DWORD *)key = 136448770;
                    *(_QWORD *)&key[4] = "nwsc_process_incoming_request";
                    *(_WORD *)&key[12] = 2114;
                    *(_QWORD *)&key[14] = v7;
                    *(_WORD *)&key[22] = 2114;
                    *(_QWORD *)&key[24] = v5;
                    *(_WORD *)&key[32] = 1024;
                    *(_DWORD *)&key[34] = v39;
                    *(_WORD *)&key[38] = 1024;
                    *(_DWORD *)&key[40] = v40;
                    *(_WORD *)&key[44] = 1024;
                    *(_DWORD *)&key[46] = v41;
                    *(_WORD *)&key[50] = 1024;
                    *(_DWORD *)&key[52] = v42;
                    *(_WORD *)&key[56] = 1024;
                    *(_DWORD *)&key[58] = v145;
                    *(_WORD *)&key[62] = 1024;
                    LODWORD(v152) = BYTE1(v145);
                    WORD2(v152) = 1024;
                    *(_DWORD *)((char *)&v152 + 6) = BYTE2(v145);
                    WORD5(v152) = 1024;
                    HIDWORD(v152) = BYTE3(v145);
                    _os_log_impl(&dword_182FBE000, v38, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ verified signature on incoming request %{public}@ sig %02x%02x%02x%02x remotePubKey %02x%02x%02x%02x", (uint8_t *)key, 0x50u);
                  }

                  *((_BYTE *)v5 + 616) |= 0x40u;
                  if ((*((_BYTE *)v7 + 152) & 4) != 0)
                  {
                    __nwlog_obj();
                    v119 = objc_claimAutoreleasedReturnValue();
                    if (os_log_type_enabled(v119, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_DWORD *)key = 136446722;
                      *(_QWORD *)&key[4] = "nwsc_process_incoming_request";
                      *(_WORD *)&key[12] = 2114;
                      *(_QWORD *)&key[14] = v7;
                      *(_WORD *)&key[22] = 2114;
                      *(_QWORD *)&key[24] = v5;
                      _os_log_impl(&dword_182FBE000, v119, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ failing incoming connection for testing: %{public}@", (uint8_t *)key, 0x20u);
                    }

                    nw_connection_cancel_current_endpoint(&v5->connection->super);
                  }
                  nw_service_connector_remove_pending_unverified_incoming_request(v7, v5);
                  v43 = nw_service_connector_copy_active_connection_with_endpoint_and_service(v7, v5->endpoint, (uint64_t)v5->service);
                  v44 = v43;
                  if (v43)
                  {
                    v45 = (void *)*((_QWORD *)v43 + 61);
                    if (!v45)
                      goto LABEL_60;
                    v46 = v45;
                    buffer[0] = 0;
                    buffer[1] = buffer;
                    buffer[2] = 0x2020000000;
                    LOBYTE(buffer[3]) = 0;
                    v47 = v46 + 34;
                    *(_QWORD *)key = MEMORY[0x1E0C809B0];
                    *(_QWORD *)&key[8] = 3221225472;
                    *(_QWORD *)&key[16] = __nw_connection_is_cancelled_or_failed_block_invoke;
                    *(_QWORD *)&key[24] = &unk_1E14ACE40;
                    *(_QWORD *)&key[40] = buffer;
                    v48 = v46;
                    *(_QWORD *)&key[32] = v48;
                    os_unfair_lock_lock(v47);
                    (*(void (**)(char *))&key[16])(key);
                    os_unfair_lock_unlock(v47);
                    v49 = *(unsigned __int8 *)(buffer[1] + 24);

                    _Block_object_dispose(buffer, 8);
                    if (v49)
                    {
LABEL_60:
                      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                      networkd_settings_init();
                      v50 = (id)gLogObj;
                      if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
                      {
                        *(_DWORD *)key = 136446978;
                        *(_QWORD *)&key[4] = "nwsc_process_incoming_request";
                        *(_WORD *)&key[12] = 2114;
                        *(_QWORD *)&key[14] = v7;
                        *(_WORD *)&key[22] = 2114;
                        *(_QWORD *)&key[24] = v44;
                        *(_WORD *)&key[32] = 2114;
                        *(_QWORD *)&key[34] = v5;
                        _os_log_impl(&dword_182FBE000, v50, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ Cleaning up dead activeConnection %{public}@ due to receiving incoming request %{public}@", (uint8_t *)key, 0x2Au);
                      }

                      nw_service_connector_cancel_request_inner(v7, v5->endpoint, (uint64_t)v5->service, *((void **)v44 + 61), 0);
LABEL_74:
                      v58 = (char *)nw_service_connector_copy_active_outgoing_request(v7, v5->endpoint, (uint64_t)v5->service);
                      v56 = v58;
                      if (!v58)
                      {
LABEL_81:
                        v56 = 0;
                        nw_service_connector_handle_unsolicited_requests(v7, v5);
                        v44 = 0;
LABEL_112:

                        goto LABEL_113;
                      }
                      v60 = v58[616];
                      if ((v60 & 0x10) == 0)
                      {
                        v61 = (void *)*((_QWORD *)v58 + 72);
                        if (!v61 || nw_connection_is_cancelled(v61))
                        {
                          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                          networkd_settings_init();
                          v62 = (id)gLogObj;
                          if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
                          {
                            *(_DWORD *)key = 136446978;
                            *(_QWORD *)&key[4] = "nwsc_process_incoming_request";
                            *(_WORD *)&key[12] = 2114;
                            *(_QWORD *)&key[14] = v7;
                            *(_WORD *)&key[22] = 2114;
                            *(_QWORD *)&key[24] = v56;
                            *(_WORD *)&key[32] = 2114;
                            *(_QWORD *)&key[34] = v5;
                            _os_log_impl(&dword_182FBE000, v62, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ Cleaning up dead outgoing request %{public}@ due to receiving incoming request %{public}@", (uint8_t *)key, 0x2Au);
                          }

                          nw_service_connector_cancel_request_inner(v7, v5->endpoint, (uint64_t)v5->service, *((void **)v56 + 72), 0);
                          goto LABEL_81;
                        }
                        v60 = v56[616];
                      }
                      v69 = v60 & 0xEF;
                      v56[616] = v69;
                      v70 = *((_QWORD *)v56 + 76);
                      if (v70)
                      {
                        nw_queue_cancel_source(v70, v59);
                        *((_QWORD *)v56 + 76) = 0;
                        v69 = v56[616];
                      }
                      if ((v69 & 0x80) == 0 && nwsc_compare_uuid((unsigned __int8 *)v56 + 480, v5->uuid))
                      {
                        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                        networkd_settings_init();
                        v71 = (id)gLogObj;
                        if (os_log_type_enabled(v71, OS_LOG_TYPE_DEFAULT))
                        {
                          *(_DWORD *)key = 136446978;
                          *(_QWORD *)&key[4] = "nwsc_process_incoming_request";
                          *(_WORD *)&key[12] = 2114;
                          *(_QWORD *)&key[14] = v7;
                          *(_WORD *)&key[22] = 2114;
                          *(_QWORD *)&key[24] = v56;
                          *(_WORD *)&key[32] = 2114;
                          *(_QWORD *)&key[34] = v5;
                          _os_log_impl(&dword_182FBE000, v71, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ existing outgoing request %{public}@ has a larger UUID, rejecting incoming request %{public}@", (uint8_t *)key, 0x2Au);
                        }

                        nw_service_connector_reject_incoming_request(v7, v5, 0);
                        v44 = 0;
                        goto LABEL_112;
                      }
                      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                      networkd_settings_init();
                      v72 = (id)gLogObj;
                      if (os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT))
                      {
                        v73 = v56[616];
                        v74 = "has a smaller UUID";
                        *(_QWORD *)&key[4] = "nwsc_process_incoming_request";
                        *(_DWORD *)key = 136447234;
                        *(_WORD *)&key[12] = 2114;
                        if (v73 < 0)
                          v74 = "is waiting for path";
                        *(_QWORD *)&key[14] = v7;
                        *(_WORD *)&key[22] = 2114;
                        *(_QWORD *)&key[24] = v56;
                        *(_WORD *)&key[32] = 2082;
                        *(_QWORD *)&key[34] = v74;
                        *(_WORD *)&key[42] = 2114;
                        *(_QWORD *)&key[44] = v5;
                        _os_log_impl(&dword_182FBE000, v72, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ existing outgoing request %{public}@ %{public}s, cancelling our outgoing request and accepting incoming request %{public}@", (uint8_t *)key, 0x34u);
                      }

                      nw_service_connector_cancel_request_inner(v7, *((void **)v56 + 1), (uint64_t)(v56 + 24), *((void **)v56 + 72), 0);
                      connection = v5->connection;
                      v137[0] = MEMORY[0x1E0C809B0];
                      v137[1] = 3221225472;
                      v137[2] = ___ZL29nwsc_process_incoming_requestP31NWConcrete_nw_service_connectorP39NWConcrete_nw_unique_connection_request_block_invoke;
                      v137[3] = &unk_1E14A3BC0;
                      v138 = v7;
                      v56 = v56;
                      v139 = v56;
                      v140 = v5;
                      nw_service_connector_accept_connection_for_request(v138, connection, v140, v137);
                      v44 = 0;
                      v76 = (id *)&v138;
                      v77 = (id *)&v139;
                      v78 = (id *)&v140;
LABEL_111:

                      goto LABEL_112;
                    }
                  }
                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                  networkd_settings_init();
                  v51 = (id)gLogObj;
                  if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)key = 136446978;
                    *(_QWORD *)&key[4] = "nwsc_process_incoming_request";
                    *(_WORD *)&key[12] = 2114;
                    *(_QWORD *)&key[14] = v7;
                    *(_WORD *)&key[22] = 2114;
                    *(_QWORD *)&key[24] = v5;
                    *(_WORD *)&key[32] = 2114;
                    *(_QWORD *)&key[34] = v44;
                    _os_log_impl(&dword_182FBE000, v51, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ Received incoming request %{public}@ activeConnection %{public}@", (uint8_t *)key, 0x2Au);
                  }

                  if (!v44)
                    goto LABEL_74;
                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                  networkd_settings_init();
                  v52 = (id)gLogObj;
                  if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)key = 136446978;
                    *(_QWORD *)&key[4] = "nwsc_process_incoming_request";
                    *(_WORD *)&key[12] = 2114;
                    *(_QWORD *)&key[14] = v7;
                    *(_WORD *)&key[22] = 2114;
                    *(_QWORD *)&key[24] = v5;
                    *(_WORD *)&key[32] = 2114;
                    *(_QWORD *)&key[34] = v44;
                    _os_log_impl(&dword_182FBE000, v52, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ received incoming request %{public}@ while we have activeConnection %{public}@", (uint8_t *)key, 0x2Au);
                  }

                  v53 = *((_QWORD *)v44 + 57);
                  sequenceNumber = v5->sequenceNumber;
                  if (v53 < sequenceNumber)
                  {
                    v55 = (char *)nw_service_connector_copy_active_outgoing_request(v7, v5->endpoint, (uint64_t)v5->service);
                    v56 = v55;
                    if (!v55 || (v55[616] & 0x10) == 0)
                    {
                      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                      networkd_settings_init();
                      v57 = (id)gLogObj;
                      if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
                      {
                        *(_DWORD *)key = 136446978;
                        *(_QWORD *)&key[4] = "nwsc_process_incoming_request";
                        *(_WORD *)&key[12] = 2114;
                        *(_QWORD *)&key[14] = v7;
                        *(_WORD *)&key[22] = 2114;
                        *(_QWORD *)&key[24] = v44;
                        *(_WORD *)&key[32] = 2114;
                        *(_QWORD *)&key[34] = v5;
                        _os_log_impl(&dword_182FBE000, v57, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ active connection %{public}@ has a lower sequence number than incoming request %{public}@, accepting incoming request and cancelling active connection", (uint8_t *)key, 0x2Au);
                      }

                      nw_service_connector_cancel_request_inner(v7, *((void **)v44 + 1), (uint64_t)v44 + 16, *((void **)v44 + 61), 1);
                      nw_service_connector_handle_unsolicited_requests(v7, v5);
                      goto LABEL_112;
                    }
                    __nwlog_obj();
                    v79 = objc_claimAutoreleasedReturnValue();
                    if (os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_DWORD *)key = 136447234;
                      *(_QWORD *)&key[4] = "nwsc_process_incoming_request";
                      *(_WORD *)&key[12] = 2114;
                      *(_QWORD *)&key[14] = v7;
                      *(_WORD *)&key[22] = 2114;
                      *(_QWORD *)&key[24] = v44;
                      *(_WORD *)&key[32] = 2114;
                      *(_QWORD *)&key[34] = v5;
                      *(_WORD *)&key[42] = 2114;
                      *(_QWORD *)&key[44] = v56;
                      _os_log_impl(&dword_182FBE000, v79, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ active connection %{public}@ has a lower sequence number than incoming request %{public}@, accepting incoming request, cancelling active connection and using %{public}@", (uint8_t *)key, 0x34u);
                    }

                    v56[616] &= ~0x10u;
                    v81 = *((_QWORD *)v56 + 76);
                    if (v81)
                    {
                      nw_queue_cancel_source(v81, v80);
                      *((_QWORD *)v56 + 76) = 0;
                    }
                    nw_service_connector_cancel_request_inner(v7, *((void **)v44 + 1), (uint64_t)v44 + 16, *((void **)v44 + 61), 1);
                    v82 = v5->connection;
                    v133[0] = MEMORY[0x1E0C809B0];
                    v133[1] = 3221225472;
                    v133[2] = ___ZL29nwsc_process_incoming_requestP31NWConcrete_nw_service_connectorP39NWConcrete_nw_unique_connection_request_block_invoke_188;
                    v133[3] = &unk_1E14A3BC0;
                    v134 = v7;
                    v83 = v56;
                    v135 = v83;
                    v136 = v5;
                    nw_service_connector_accept_connection_for_request(v134, v82, v136, v133);
                    v76 = (id *)&v134;
                    v77 = (id *)&v135;
                    v78 = (id *)&v136;
                    v56 = v83;
                    goto LABEL_111;
                  }
                  if (v53 > sequenceNumber)
                  {
                    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                    networkd_settings_init();
                    v63 = (id)gLogObj;
                    if (os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_DWORD *)key = 136446978;
                      *(_QWORD *)&key[4] = "nwsc_process_incoming_request";
                      *(_WORD *)&key[12] = 2114;
                      *(_QWORD *)&key[14] = v7;
                      *(_WORD *)&key[22] = 2114;
                      *(_QWORD *)&key[24] = v44;
                      *(_WORD *)&key[32] = 2114;
                      *(_QWORD *)&key[34] = v5;
                      _os_log_impl(&dword_182FBE000, v63, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ active connection %{public}@ has a higher sequence number than incoming request %{public}@, rejecting incoming request", (uint8_t *)key, 0x2Au);
                    }

                    goto LABEL_140;
                  }
                  v64 = nwsc_compare_uuid((unsigned __int8 *)v44 + 472, v5->uuid);
                  __nwlog_obj();
                  v65 = (void *)objc_claimAutoreleasedReturnValue();
                  if (v64)
                  {
                    *(_DWORD *)key = 136446978;
                    *(_QWORD *)&key[4] = "nwsc_process_incoming_request";
                    *(_WORD *)&key[12] = 2114;
                    *(_QWORD *)&key[14] = v7;
                    *(_WORD *)&key[22] = 2114;
                    *(_QWORD *)&key[24] = v44;
                    *(_WORD *)&key[32] = 2114;
                    *(_QWORD *)&key[34] = v5;
                    v66 = (char *)_os_log_send_and_compose_impl();

                    LOBYTE(buffer[0]) = 16;
                    type = OS_LOG_TYPE_DEFAULT;
                    if (__nwlog_fault(v66, buffer, &type))
                    {
                      if (LOBYTE(buffer[0]) == 17)
                      {
                        __nwlog_obj();
                        v67 = objc_claimAutoreleasedReturnValue();
                        v68 = buffer[0];
                        if (os_log_type_enabled(v67, buffer[0]))
                        {
                          *(_DWORD *)key = 136446978;
                          *(_QWORD *)&key[4] = "nwsc_process_incoming_request";
                          *(_WORD *)&key[12] = 2114;
                          *(_QWORD *)&key[14] = v7;
                          *(_WORD *)&key[22] = 2114;
                          *(_QWORD *)&key[24] = v44;
                          *(_WORD *)&key[32] = 2114;
                          *(_QWORD *)&key[34] = v5;
                          _os_log_impl(&dword_182FBE000, v67, v68, "%{public}s %{public}@ active connection %{public}@ has same sequence number than incoming request %{public}@ but higher UUID, rejecting incoming request", (uint8_t *)key, 0x2Au);
                        }
                      }
                      else if (type)
                      {
                        v87 = (char *)__nw_create_backtrace_string();
                        __nwlog_obj();
                        v67 = objc_claimAutoreleasedReturnValue();
                        v88 = buffer[0];
                        v89 = os_log_type_enabled(v67, buffer[0]);
                        if (v87)
                        {
                          if (v89)
                          {
                            *(_DWORD *)key = 136447234;
                            *(_QWORD *)&key[4] = "nwsc_process_incoming_request";
                            *(_WORD *)&key[12] = 2114;
                            *(_QWORD *)&key[14] = v7;
                            *(_WORD *)&key[22] = 2114;
                            *(_QWORD *)&key[24] = v44;
                            *(_WORD *)&key[32] = 2114;
                            *(_QWORD *)&key[34] = v5;
                            *(_WORD *)&key[42] = 2082;
                            *(_QWORD *)&key[44] = v87;
                            _os_log_impl(&dword_182FBE000, v67, v88, "%{public}s %{public}@ active connection %{public}@ has same sequence number than incoming request %{public}@ but higher UUID, rejecting incoming request, dumping backtrace:%{public}s", (uint8_t *)key, 0x34u);
                          }

                          free(v87);
                          goto LABEL_138;
                        }
                        if (v89)
                        {
                          *(_DWORD *)key = 136446978;
                          *(_QWORD *)&key[4] = "nwsc_process_incoming_request";
                          *(_WORD *)&key[12] = 2114;
                          *(_QWORD *)&key[14] = v7;
                          *(_WORD *)&key[22] = 2114;
                          *(_QWORD *)&key[24] = v44;
                          *(_WORD *)&key[32] = 2114;
                          *(_QWORD *)&key[34] = v5;
                          _os_log_impl(&dword_182FBE000, v67, v88, "%{public}s %{public}@ active connection %{public}@ has same sequence number than incoming request %{public}@ but higher UUID, rejecting incoming request, no backtrace", (uint8_t *)key, 0x2Au);
                        }
                      }
                      else
                      {
                        __nwlog_obj();
                        v67 = objc_claimAutoreleasedReturnValue();
                        v93 = buffer[0];
                        if (os_log_type_enabled(v67, buffer[0]))
                        {
                          *(_DWORD *)key = 136446978;
                          *(_QWORD *)&key[4] = "nwsc_process_incoming_request";
                          *(_WORD *)&key[12] = 2114;
                          *(_QWORD *)&key[14] = v7;
                          *(_WORD *)&key[22] = 2114;
                          *(_QWORD *)&key[24] = v44;
                          *(_WORD *)&key[32] = 2114;
                          *(_QWORD *)&key[34] = v5;
                          _os_log_impl(&dword_182FBE000, v67, v93, "%{public}s %{public}@ active connection %{public}@ has same sequence number than incoming request %{public}@ but higher UUID, rejecting incoming request, backtrace limit exceeded", (uint8_t *)key, 0x2Au);
                        }
                      }

                    }
LABEL_138:
                    if (v66)
                      free(v66);
LABEL_140:
                    nw_service_connector_reject_incoming_request(v7, v5, 0);
                    goto LABEL_113;
                  }
                  *(_DWORD *)key = 136446978;
                  *(_QWORD *)&key[4] = "nwsc_process_incoming_request";
                  *(_WORD *)&key[12] = 2114;
                  *(_QWORD *)&key[14] = v7;
                  *(_WORD *)&key[22] = 2114;
                  *(_QWORD *)&key[24] = v44;
                  *(_WORD *)&key[32] = 2114;
                  *(_QWORD *)&key[34] = v5;
                  v84 = (char *)_os_log_send_and_compose_impl();

                  LOBYTE(buffer[0]) = 16;
                  type = OS_LOG_TYPE_DEFAULT;
                  if (__nwlog_fault(v84, buffer, &type))
                  {
                    if (LOBYTE(buffer[0]) == 17)
                    {
                      __nwlog_obj();
                      v85 = objc_claimAutoreleasedReturnValue();
                      v86 = buffer[0];
                      if (os_log_type_enabled(v85, buffer[0]))
                      {
                        *(_DWORD *)key = 136446978;
                        *(_QWORD *)&key[4] = "nwsc_process_incoming_request";
                        *(_WORD *)&key[12] = 2114;
                        *(_QWORD *)&key[14] = v7;
                        *(_WORD *)&key[22] = 2114;
                        *(_QWORD *)&key[24] = v44;
                        *(_WORD *)&key[32] = 2114;
                        *(_QWORD *)&key[34] = v5;
                        _os_log_impl(&dword_182FBE000, v85, v86, "%{public}s %{public}@ active connection %{public}@ has same sequence number than incoming request %{public}@ but lower UUID, accepting incoming request and cancelling active connection", (uint8_t *)key, 0x2Au);
                      }
                    }
                    else if (type)
                    {
                      v90 = (char *)__nw_create_backtrace_string();
                      __nwlog_obj();
                      v85 = objc_claimAutoreleasedReturnValue();
                      v91 = buffer[0];
                      v92 = os_log_type_enabled(v85, buffer[0]);
                      if (v90)
                      {
                        if (v92)
                        {
                          *(_DWORD *)key = 136447234;
                          *(_QWORD *)&key[4] = "nwsc_process_incoming_request";
                          *(_WORD *)&key[12] = 2114;
                          *(_QWORD *)&key[14] = v7;
                          *(_WORD *)&key[22] = 2114;
                          *(_QWORD *)&key[24] = v44;
                          *(_WORD *)&key[32] = 2114;
                          *(_QWORD *)&key[34] = v5;
                          *(_WORD *)&key[42] = 2082;
                          *(_QWORD *)&key[44] = v90;
                          _os_log_impl(&dword_182FBE000, v85, v91, "%{public}s %{public}@ active connection %{public}@ has same sequence number than incoming request %{public}@ but lower UUID, accepting incoming request and cancelling active connection, dumping backtrace:%{public}s", (uint8_t *)key, 0x34u);
                        }

                        free(v90);
                        goto LABEL_144;
                      }
                      if (v92)
                      {
                        *(_DWORD *)key = 136446978;
                        *(_QWORD *)&key[4] = "nwsc_process_incoming_request";
                        *(_WORD *)&key[12] = 2114;
                        *(_QWORD *)&key[14] = v7;
                        *(_WORD *)&key[22] = 2114;
                        *(_QWORD *)&key[24] = v44;
                        *(_WORD *)&key[32] = 2114;
                        *(_QWORD *)&key[34] = v5;
                        _os_log_impl(&dword_182FBE000, v85, v91, "%{public}s %{public}@ active connection %{public}@ has same sequence number than incoming request %{public}@ but lower UUID, accepting incoming request and cancelling active connection, no backtrace", (uint8_t *)key, 0x2Au);
                      }
                    }
                    else
                    {
                      __nwlog_obj();
                      v85 = objc_claimAutoreleasedReturnValue();
                      v94 = buffer[0];
                      if (os_log_type_enabled(v85, buffer[0]))
                      {
                        *(_DWORD *)key = 136446978;
                        *(_QWORD *)&key[4] = "nwsc_process_incoming_request";
                        *(_WORD *)&key[12] = 2114;
                        *(_QWORD *)&key[14] = v7;
                        *(_WORD *)&key[22] = 2114;
                        *(_QWORD *)&key[24] = v44;
                        *(_WORD *)&key[32] = 2114;
                        *(_QWORD *)&key[34] = v5;
                        _os_log_impl(&dword_182FBE000, v85, v94, "%{public}s %{public}@ active connection %{public}@ has same sequence number than incoming request %{public}@ but lower UUID, accepting incoming request and cancelling active connection, backtrace limit exceeded", (uint8_t *)key, 0x2Au);
                      }
                    }

                  }
LABEL_144:
                  if (v84)
                    free(v84);
                  nw_service_connector_handle_unsolicited_requests(v7, v5);
                  nw_service_connector_cancel_request_inner(v7, *((void **)v44 + 1), (uint64_t)v44 + 16, *((void **)v44 + 61), 1);
                  goto LABEL_113;
                }
              }
              else
              {
                __nwlog_obj();
                v98 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v98, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)key = 136446466;
                  *(_QWORD *)&key[4] = "nwsc_process_incoming_request";
                  *(_WORD *)&key[12] = 2112;
                  *(_QWORD *)&key[14] = *(_QWORD *)buf;
                  _os_log_impl(&dword_182FBE000, v98, OS_LOG_TYPE_ERROR, "%{public}s SecKeyCreateWithData failed with error %@", (uint8_t *)key, 0x16u);
                }

                if (*(_QWORD *)buf)
                {
                  CFRelease(*(CFTypeRef *)buf);
                  *(_QWORD *)buf = 0;
                }
              }
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v99 = (id)gLogObj;
              if (os_log_type_enabled(v99, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)key = 136446722;
                *(_QWORD *)&key[4] = "nwsc_process_incoming_request";
                *(_WORD *)&key[12] = 2114;
                *(_QWORD *)&key[14] = v7;
                *(_WORD *)&key[22] = 2114;
                *(_QWORD *)&key[24] = *(_QWORD *)buf;
                _os_log_impl(&dword_182FBE000, v99, OS_LOG_TYPE_DEBUG, "%{public}s %{public}@ signature verification error: %{public}@", (uint8_t *)key, 0x20u);
              }

              if (*(_QWORD *)buf)
              {
                CFRelease(*(CFTypeRef *)buf);
                *(_QWORD *)buf = 0;
              }
              if (v28 >= v5->sequenceNumber)
              {
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                v106 = (id)gLogObj;
                if (os_log_type_enabled(v106, OS_LOG_TYPE_ERROR))
                {
                  v107 = v5->signature[0];
                  v108 = v5->signature[1];
                  v109 = v5->signature[2];
                  v110 = v5->signature[3];
                  *(_DWORD *)key = 136449026;
                  *(_QWORD *)&key[4] = "nwsc_process_incoming_request";
                  *(_WORD *)&key[12] = 2114;
                  *(_QWORD *)&key[14] = v7;
                  *(_WORD *)&key[22] = 2114;
                  *(_QWORD *)&key[24] = v5;
                  *(_WORD *)&key[32] = 1024;
                  *(_DWORD *)&key[34] = v107;
                  *(_WORD *)&key[38] = 1024;
                  *(_DWORD *)&key[40] = v108;
                  *(_WORD *)&key[44] = 1024;
                  *(_DWORD *)&key[46] = v109;
                  *(_WORD *)&key[50] = 1024;
                  *(_DWORD *)&key[52] = v110;
                  *(_WORD *)&key[56] = 1024;
                  *(_DWORD *)&key[58] = v145;
                  *(_WORD *)&key[62] = 1024;
                  LODWORD(v152) = BYTE1(v145);
                  WORD2(v152) = 1024;
                  *(_DWORD *)((char *)&v152 + 6) = BYTE2(v145);
                  WORD5(v152) = 1024;
                  HIDWORD(v152) = BYTE3(v145);
                  LOWORD(v153) = 2048;
                  *(_QWORD *)((char *)&v153 + 2) = v28;
                  _os_log_impl(&dword_182FBE000, v106, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ cancelling due to bad signature on incoming request %{public}@ sig %02x%02x%02x%02x remotePubKey %02x%02x%02x%02x remotePubKeySeqNo %llu", (uint8_t *)key, 0x5Au);
                }

                *((_BYTE *)v5 + 616) |= 0x40u;
                nw_service_connector_reject_incoming_request(v7, v5, 0);
                goto LABEL_169;
              }
              if ((*((_BYTE *)v5 + 616) & 0x20) == 0)
              {
                *((_BYTE *)v5 + 616) |= 0x20u;
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                v100 = (id)gLogObj;
                if (os_log_type_enabled(v100, OS_LOG_TYPE_DEFAULT))
                {
                  v101 = v5->signature[0];
                  v102 = v5->signature[1];
                  v103 = v5->signature[2];
                  v104 = v5->signature[3];
                  *(_DWORD *)key = 136448770;
                  *(_QWORD *)&key[4] = "nwsc_process_incoming_request";
                  *(_WORD *)&key[12] = 2114;
                  *(_QWORD *)&key[14] = v7;
                  *(_WORD *)&key[22] = 2114;
                  *(_QWORD *)&key[24] = v5;
                  *(_WORD *)&key[32] = 1024;
                  *(_DWORD *)&key[34] = v101;
                  *(_WORD *)&key[38] = 1024;
                  *(_DWORD *)&key[40] = v102;
                  *(_WORD *)&key[44] = 1024;
                  *(_DWORD *)&key[46] = v103;
                  *(_WORD *)&key[50] = 1024;
                  *(_DWORD *)&key[52] = v104;
                  *(_WORD *)&key[56] = 1024;
                  *(_DWORD *)&key[58] = v145;
                  *(_WORD *)&key[62] = 1024;
                  LODWORD(v152) = BYTE1(v145);
                  WORD2(v152) = 1024;
                  *(_DWORD *)((char *)&v152 + 6) = BYTE2(v145);
                  WORD5(v152) = 1024;
                  HIDWORD(v152) = BYTE3(v145);
                  _os_log_impl(&dword_182FBE000, v100, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ signature did not verify on incoming request %{public}@ sig %02x%02x%02x%02x remotePubKey %02x%02x%02x%02x requesting newer remotePubKey", (uint8_t *)key, 0x50u);
                }

                if ((*((_BYTE *)v7 + 152) & 2) != 0)
                {
                  __nwlog_obj();
                  v130 = objc_claimAutoreleasedReturnValue();
                  if (os_log_type_enabled(v130, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)key = 136446722;
                    *(_QWORD *)&key[4] = "nwsc_process_incoming_request";
                    *(_WORD *)&key[12] = 2114;
                    *(_QWORD *)&key[14] = v7;
                    *(_WORD *)&key[22] = 2114;
                    *(_QWORD *)&key[24] = v5;
                    _os_log_impl(&dword_182FBE000, v130, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ failing incoming connection for testing: %{public}@", (uint8_t *)key, 0x20u);
                  }

                  nw_connection_cancel_current_endpoint(&v5->connection->super);
                }
                v105 = (id)nwsc_request_create_and_start_connection_inner(v7, 0, v5->endpoint);
                nw_array_append((uint64_t)v7->pendingUnverifiedIncomingRequests, v5);
                goto LABEL_169;
              }
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v44 = (id)gLogObj;
              if (os_log_type_enabled((os_log_t)v44, OS_LOG_TYPE_DEFAULT))
              {
                v111 = v5->signature[0];
                v112 = v5->signature[1];
                v113 = v5->signature[2];
                v114 = v5->signature[3];
                *(_DWORD *)key = 136448770;
                *(_QWORD *)&key[4] = "nwsc_process_incoming_request";
                *(_WORD *)&key[12] = 2114;
                *(_QWORD *)&key[14] = v7;
                *(_WORD *)&key[22] = 2114;
                *(_QWORD *)&key[24] = v5;
                *(_WORD *)&key[32] = 1024;
                *(_DWORD *)&key[34] = v111;
                *(_WORD *)&key[38] = 1024;
                *(_DWORD *)&key[40] = v112;
                *(_WORD *)&key[44] = 1024;
                *(_DWORD *)&key[46] = v113;
                *(_WORD *)&key[50] = 1024;
                *(_DWORD *)&key[52] = v114;
                *(_WORD *)&key[56] = 1024;
                *(_DWORD *)&key[58] = v145;
                *(_WORD *)&key[62] = 1024;
                LODWORD(v152) = BYTE1(v145);
                WORD2(v152) = 1024;
                *(_DWORD *)((char *)&v152 + 6) = BYTE2(v145);
                WORD5(v152) = 1024;
                HIDWORD(v152) = BYTE3(v145);
                _os_log_impl(&dword_182FBE000, (os_log_t)v44, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ signature did not verify on incoming request %{public}@ sig %02x%02x%02x%02x remotePubKey %02x%02x%02x%02x not requesting newer remotePubKey", (uint8_t *)key, 0x50u);
              }
LABEL_113:

LABEL_169:
              goto LABEL_170;
            }
LABEL_50:
            free(v13);
            goto LABEL_51;
          }
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v17 = (id)gLogObj;
          LODWORD(buffer[0]) = 136446466;
          *(_QWORD *)((char *)buffer + 4) = "nwsc_get_remote_pub_key";
          WORD2(buffer[1]) = 2114;
          *(_QWORD *)((char *)&buffer[1] + 6) = v9;
          v18 = (char *)_os_log_send_and_compose_impl();

          buf[0] = 16;
          type = OS_LOG_TYPE_DEFAULT;
          if (__nwlog_fault(v18, buf, &type))
          {
            if (buf[0] == 17)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v19 = (id)gLogObj;
              v20 = buf[0];
              if (os_log_type_enabled(v19, (os_log_type_t)buf[0]))
              {
                LODWORD(buffer[0]) = 136446466;
                *(_QWORD *)((char *)buffer + 4) = "nwsc_get_remote_pub_key";
                WORD2(buffer[1]) = 2114;
                *(_QWORD *)((char *)&buffer[1] + 6) = v9;
                _os_log_impl(&dword_182FBE000, v19, v20, "%{public}s Could not get identifier for endpoint %{public}@", (uint8_t *)buffer, 0x16u);
              }
LABEL_39:

              goto LABEL_40;
            }
            if (type == OS_LOG_TYPE_DEFAULT)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v19 = (id)gLogObj;
              v24 = buf[0];
              if (os_log_type_enabled(v19, (os_log_type_t)buf[0]))
              {
                LODWORD(buffer[0]) = 136446466;
                *(_QWORD *)((char *)buffer + 4) = "nwsc_get_remote_pub_key";
                WORD2(buffer[1]) = 2114;
                *(_QWORD *)((char *)&buffer[1] + 6) = v9;
                _os_log_impl(&dword_182FBE000, v19, v24, "%{public}s Could not get identifier for endpoint %{public}@, backtrace limit exceeded", (uint8_t *)buffer, 0x16u);
              }
              goto LABEL_39;
            }
            v21 = (char *)__nw_create_backtrace_string();
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v19 = (id)gLogObj;
            v22 = buf[0];
            v23 = os_log_type_enabled(v19, (os_log_type_t)buf[0]);
            if (!v21)
            {
              if (v23)
              {
                LODWORD(buffer[0]) = 136446466;
                *(_QWORD *)((char *)buffer + 4) = "nwsc_get_remote_pub_key";
                WORD2(buffer[1]) = 2114;
                *(_QWORD *)((char *)&buffer[1] + 6) = v9;
                _os_log_impl(&dword_182FBE000, v19, v22, "%{public}s Could not get identifier for endpoint %{public}@, no backtrace", (uint8_t *)buffer, 0x16u);
              }
              goto LABEL_39;
            }
            if (v23)
            {
              LODWORD(buffer[0]) = 136446722;
              *(_QWORD *)((char *)buffer + 4) = "nwsc_get_remote_pub_key";
              WORD2(buffer[1]) = 2114;
              *(_QWORD *)((char *)&buffer[1] + 6) = v9;
              HIWORD(buffer[2]) = 2082;
              buffer[3] = v21;
              _os_log_impl(&dword_182FBE000, v19, v22, "%{public}s Could not get identifier for endpoint %{public}@, dumping backtrace:%{public}s", (uint8_t *)buffer, 0x20u);
            }

LABEL_26:
            free(v21);
            if (!v18)
              goto LABEL_42;
            goto LABEL_41;
          }
LABEL_40:
          if (!v18)
          {
LABEL_42:
            v28 = 0;
            goto LABEL_52;
          }
LABEL_41:
          free(v18);
          goto LABEL_42;
        }
        __nwlog_obj();
        v117 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)key = 136446210;
        *(_QWORD *)&key[4] = "nwsc_get_remote_pub_key";
        v18 = (char *)_os_log_send_and_compose_impl();

        LOBYTE(buffer[0]) = 16;
        buf[0] = 0;
        if (!__nwlog_fault(v18, buffer, buf))
          goto LABEL_40;
        if (LOBYTE(buffer[0]) == 17)
        {
          __nwlog_obj();
          v96 = objc_claimAutoreleasedReturnValue();
          v118 = buffer[0];
          if (os_log_type_enabled(v96, buffer[0]))
          {
            *(_DWORD *)key = 136446210;
            *(_QWORD *)&key[4] = "nwsc_get_remote_pub_key";
            _os_log_impl(&dword_182FBE000, v96, v118, "%{public}s called with null endpoint", (uint8_t *)key, 0xCu);
          }
        }
        else if (buf[0])
        {
          v124 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v96 = objc_claimAutoreleasedReturnValue();
          v125 = buffer[0];
          v126 = os_log_type_enabled(v96, buffer[0]);
          if (v124)
          {
            if (v126)
            {
              *(_DWORD *)key = 136446466;
              *(_QWORD *)&key[4] = "nwsc_get_remote_pub_key";
              *(_WORD *)&key[12] = 2082;
              *(_QWORD *)&key[14] = v124;
              _os_log_impl(&dword_182FBE000, v96, v125, "%{public}s called with null endpoint, dumping backtrace:%{public}s", (uint8_t *)key, 0x16u);
            }

            free(v124);
            goto LABEL_40;
          }
          if (v126)
          {
            *(_DWORD *)key = 136446210;
            *(_QWORD *)&key[4] = "nwsc_get_remote_pub_key";
            _os_log_impl(&dword_182FBE000, v96, v125, "%{public}s called with null endpoint, no backtrace", (uint8_t *)key, 0xCu);
          }
        }
        else
        {
          __nwlog_obj();
          v96 = objc_claimAutoreleasedReturnValue();
          v129 = buffer[0];
          if (os_log_type_enabled(v96, buffer[0]))
          {
            *(_DWORD *)key = 136446210;
            *(_QWORD *)&key[4] = "nwsc_get_remote_pub_key";
            _os_log_impl(&dword_182FBE000, v96, v129, "%{public}s called with null endpoint, backtrace limit exceeded", (uint8_t *)key, 0xCu);
          }
        }
LABEL_218:

        goto LABEL_40;
      }
      __nwlog_obj();
      v115 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)key = 136446210;
      *(_QWORD *)&key[4] = "nwsc_get_remote_pub_key";
      v18 = (char *)_os_log_send_and_compose_impl();

      LOBYTE(buffer[0]) = 16;
      buf[0] = 0;
      if (!__nwlog_fault(v18, buffer, buf))
        goto LABEL_40;
      if (LOBYTE(buffer[0]) == 17)
      {
        __nwlog_obj();
        v96 = objc_claimAutoreleasedReturnValue();
        v116 = buffer[0];
        if (os_log_type_enabled(v96, buffer[0]))
        {
          *(_DWORD *)key = 136446210;
          *(_QWORD *)&key[4] = "nwsc_get_remote_pub_key";
          _os_log_impl(&dword_182FBE000, v96, v116, "%{public}s called with null serviceConnector->remotePubKeys", (uint8_t *)key, 0xCu);
        }
        goto LABEL_218;
      }
      if (!buf[0])
      {
        __nwlog_obj();
        v96 = objc_claimAutoreleasedReturnValue();
        v128 = buffer[0];
        if (os_log_type_enabled(v96, buffer[0]))
        {
          *(_DWORD *)key = 136446210;
          *(_QWORD *)&key[4] = "nwsc_get_remote_pub_key";
          _os_log_impl(&dword_182FBE000, v96, v128, "%{public}s called with null serviceConnector->remotePubKeys, backtrace limit exceeded", (uint8_t *)key, 0xCu);
        }
        goto LABEL_218;
      }
      v21 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v96 = objc_claimAutoreleasedReturnValue();
      v122 = buffer[0];
      v123 = os_log_type_enabled(v96, buffer[0]);
      if (!v21)
      {
        if (v123)
        {
          *(_DWORD *)key = 136446210;
          *(_QWORD *)&key[4] = "nwsc_get_remote_pub_key";
          _os_log_impl(&dword_182FBE000, v96, v122, "%{public}s called with null serviceConnector->remotePubKeys, no backtrace", (uint8_t *)key, 0xCu);
        }
        goto LABEL_218;
      }
      if (v123)
      {
        *(_DWORD *)key = 136446466;
        *(_QWORD *)&key[4] = "nwsc_get_remote_pub_key";
        *(_WORD *)&key[12] = 2082;
        *(_QWORD *)&key[14] = v21;
        _os_log_impl(&dword_182FBE000, v96, v122, "%{public}s called with null serviceConnector->remotePubKeys, dumping backtrace:%{public}s", (uint8_t *)key, 0x16u);
      }
    }
    else
    {
      __nwlog_obj();
      v95 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)key = 136446210;
      *(_QWORD *)&key[4] = "nwsc_get_remote_pub_key";
      v18 = (char *)_os_log_send_and_compose_impl();

      LOBYTE(buffer[0]) = 16;
      buf[0] = 0;
      if (!__nwlog_fault(v18, buffer, buf))
        goto LABEL_40;
      if (LOBYTE(buffer[0]) == 17)
      {
        __nwlog_obj();
        v96 = objc_claimAutoreleasedReturnValue();
        v97 = buffer[0];
        if (os_log_type_enabled(v96, buffer[0]))
        {
          *(_DWORD *)key = 136446210;
          *(_QWORD *)&key[4] = "nwsc_get_remote_pub_key";
          _os_log_impl(&dword_182FBE000, v96, v97, "%{public}s called with null serviceConnector", (uint8_t *)key, 0xCu);
        }
        goto LABEL_218;
      }
      if (!buf[0])
      {
        __nwlog_obj();
        v96 = objc_claimAutoreleasedReturnValue();
        v127 = buffer[0];
        if (os_log_type_enabled(v96, buffer[0]))
        {
          *(_DWORD *)key = 136446210;
          *(_QWORD *)&key[4] = "nwsc_get_remote_pub_key";
          _os_log_impl(&dword_182FBE000, v96, v127, "%{public}s called with null serviceConnector, backtrace limit exceeded", (uint8_t *)key, 0xCu);
        }
        goto LABEL_218;
      }
      v21 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v96 = objc_claimAutoreleasedReturnValue();
      v120 = buffer[0];
      v121 = os_log_type_enabled(v96, buffer[0]);
      if (!v21)
      {
        if (v121)
        {
          *(_DWORD *)key = 136446210;
          *(_QWORD *)&key[4] = "nwsc_get_remote_pub_key";
          _os_log_impl(&dword_182FBE000, v96, v120, "%{public}s called with null serviceConnector, no backtrace", (uint8_t *)key, 0xCu);
        }
        goto LABEL_218;
      }
      if (v121)
      {
        *(_DWORD *)key = 136446466;
        *(_QWORD *)&key[4] = "nwsc_get_remote_pub_key";
        *(_WORD *)&key[12] = 2082;
        *(_QWORD *)&key[14] = v21;
        _os_log_impl(&dword_182FBE000, v96, v120, "%{public}s called with null serviceConnector, dumping backtrace:%{public}s", (uint8_t *)key, 0x16u);
      }
    }

    goto LABEL_26;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v16 = (id)gLogObj;
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)key = 136446722;
    *(_QWORD *)&key[4] = "nwsc_process_incoming_request";
    *(_WORD *)&key[12] = 2114;
    *(_QWORD *)&key[14] = v132;
    *(_WORD *)&key[22] = 2114;
    *(_QWORD *)&key[24] = v5;
    _os_log_impl(&dword_182FBE000, v16, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ already processed incoming request %{public}@", (uint8_t *)key, 0x20u);
  }

LABEL_170:
}

void sub_183879178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21,void *a22)
{
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;

  _Unwind_Resume(a1);
}

id nw_service_connector_copy_active_request_for_connection(NWConcrete_nw_service_connector *a1, NWConcrete_nw_connection *a2)
{
  NWConcrete_nw_service_connector *v3;
  NWConcrete_nw_connection *v4;
  NWConcrete_nw_connection *v5;
  uint64_t activeOutgoingRequests;
  id v7;
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  void *v13;
  os_log_type_t v14;
  void *v15;
  os_log_type_t v16;
  char *backtrace_string;
  os_log_type_t v18;
  _BOOL4 v19;
  os_log_type_t v20;
  _BOOL4 v21;
  os_log_type_t v22;
  _BOOL4 v23;
  os_log_type_t v24;
  os_log_type_t v25;
  os_log_type_t v26;
  _QWORD v27[4];
  NWConcrete_nw_connection *v28;
  _BYTE *v29;
  char v30;
  os_log_type_t type;
  _BYTE buf[24];
  uint64_t (*v33)(uint64_t, uint64_t);
  void (*v34)(uint64_t);
  id v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_service_connector_copy_active_request_for_connection";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v30 = 0;
    if (!__nwlog_fault(v10, &type, &v30))
      goto LABEL_54;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_service_connector_copy_active_request_for_connection";
        _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null serviceConnector", buf, 0xCu);
      }
      goto LABEL_53;
    }
    if (!v30)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v24 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_service_connector_copy_active_request_for_connection";
        _os_log_impl(&dword_182FBE000, v11, v24, "%{public}s called with null serviceConnector, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_53;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v11 = objc_claimAutoreleasedReturnValue();
    v18 = type;
    v19 = os_log_type_enabled(v11, type);
    if (!backtrace_string)
    {
      if (v19)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_service_connector_copy_active_request_for_connection";
        _os_log_impl(&dword_182FBE000, v11, v18, "%{public}s called with null serviceConnector, no backtrace", buf, 0xCu);
      }
      goto LABEL_53;
    }
    if (v19)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_service_connector_copy_active_request_for_connection";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = backtrace_string;
      _os_log_impl(&dword_182FBE000, v11, v18, "%{public}s called with null serviceConnector, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_35:

    free(backtrace_string);
    goto LABEL_54;
  }
  activeOutgoingRequests = (uint64_t)v3->activeOutgoingRequests;
  if (!activeOutgoingRequests)
  {
    __nwlog_obj();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_service_connector_copy_active_request_for_connection";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v30 = 0;
    if (!__nwlog_fault(v10, &type, &v30))
      goto LABEL_54;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_service_connector_copy_active_request_for_connection";
        _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s called with null serviceConnector->activeOutgoingRequests", buf, 0xCu);
      }
      goto LABEL_53;
    }
    if (!v30)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v25 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_service_connector_copy_active_request_for_connection";
        _os_log_impl(&dword_182FBE000, v11, v25, "%{public}s called with null serviceConnector->activeOutgoingRequests, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_53;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v11 = objc_claimAutoreleasedReturnValue();
    v20 = type;
    v21 = os_log_type_enabled(v11, type);
    if (!backtrace_string)
    {
      if (v21)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_service_connector_copy_active_request_for_connection";
        _os_log_impl(&dword_182FBE000, v11, v20, "%{public}s called with null serviceConnector->activeOutgoingRequests, no backtrace", buf, 0xCu);
      }
      goto LABEL_53;
    }
    if (v21)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_service_connector_copy_active_request_for_connection";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = backtrace_string;
      _os_log_impl(&dword_182FBE000, v11, v20, "%{public}s called with null serviceConnector->activeOutgoingRequests, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_35;
  }
  if (v4)
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x3032000000;
    v33 = __Block_byref_object_copy__48854;
    v34 = __Block_byref_object_dispose__48855;
    v35 = 0;
    v27[0] = MEMORY[0x1E0C809B0];
    v27[1] = 3221225472;
    v27[2] = ___ZL55nw_service_connector_copy_active_request_for_connectionP31NWConcrete_nw_service_connectorP24NWConcrete_nw_connection_block_invoke;
    v27[3] = &unk_1E14AB4B0;
    v28 = v4;
    v29 = buf;
    nw_dictionary_apply(activeOutgoingRequests, (uint64_t)v27);
    v7 = *(id *)(*(_QWORD *)&buf[8] + 40);

    _Block_object_dispose(buf, 8);
    goto LABEL_5;
  }
  __nwlog_obj();
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_service_connector_copy_active_request_for_connection";
  v10 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v30 = 0;
  if (__nwlog_fault(v10, &type, &v30))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_service_connector_copy_active_request_for_connection";
        _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null connection", buf, 0xCu);
      }
LABEL_53:

      goto LABEL_54;
    }
    if (!v30)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v26 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_service_connector_copy_active_request_for_connection";
        _os_log_impl(&dword_182FBE000, v11, v26, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_53;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v11 = objc_claimAutoreleasedReturnValue();
    v22 = type;
    v23 = os_log_type_enabled(v11, type);
    if (!backtrace_string)
    {
      if (v23)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_service_connector_copy_active_request_for_connection";
        _os_log_impl(&dword_182FBE000, v11, v22, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
      goto LABEL_53;
    }
    if (v23)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_service_connector_copy_active_request_for_connection";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = backtrace_string;
      _os_log_impl(&dword_182FBE000, v11, v22, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_35;
  }
LABEL_54:
  if (v10)
    free(v10);
  v7 = 0;
LABEL_5:

  return v7;
}

uint64_t ___ZL24nwsc_save_remote_pub_keyP31NWConcrete_nw_service_connectorPU25objcproto14OS_nw_endpoint8NSObjectyPh_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  _QWORD *v5;
  NSObject *v6;
  id v7;
  _QWORD block[4];
  _QWORD *v10;
  id v11;
  uint64_t v12;

  v4 = a3;
  v5 = *(_QWORD **)(a1 + 32);
  v6 = v5[4];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZL24nwsc_save_remote_pub_keyP31NWConcrete_nw_service_connectorPU25objcproto14OS_nw_endpoint8NSObjectyPh_block_invoke_2;
  block[3] = &unk_1E14AB278;
  v10 = v5;
  v11 = v4;
  v12 = *(_QWORD *)(a1 + 40);
  v7 = v4;
  dispatch_async(v6, block);

  return 1;
}

void ___ZL45nw_service_connector_should_accept_connectionP31NWConcrete_nw_service_connectorP24NWConcrete_nw_connectionb_block_invoke_176(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  char *backtrace_string;
  _BOOL4 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  int v33;
  __int16 v34;
  char *v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v2 = (id)gLogObj;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(_QWORD *)(a1 + 40);
    *(_DWORD *)buf = 136446722;
    v27 = "nw_service_connector_should_accept_connection_block_invoke";
    v28 = 2114;
    v29 = v3;
    v30 = 2114;
    v31 = v4;
    _os_log_impl(&dword_182FBE000, v2, OS_LOG_TYPE_INFO, "%{public}s %{public}@ disabling keep alives for request %{public}@", buf, 0x20u);
  }

  v5 = nw_tcp_reset_keepalives(*(void **)(a1 + 48), 0, 0, 0, 0);
  if (v5)
  {
    v6 = v5;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v7 = (id)gLogObj;
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_QWORD *)(a1 + 40);
    *(_DWORD *)buf = 136446978;
    v27 = "nw_service_connector_should_accept_connection_block_invoke";
    v28 = 2114;
    v29 = v8;
    v30 = 2114;
    v31 = v9;
    v32 = 1024;
    v33 = v6;
    v10 = (void *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v24 = 0;
    if (__nwlog_fault((const char *)v10, &type, &v24))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v11 = (id)gLogObj;
        v12 = type;
        if (!os_log_type_enabled(v11, type))
          goto LABEL_21;
        v13 = *(_QWORD *)(a1 + 32);
        v14 = *(_QWORD *)(a1 + 40);
        *(_DWORD *)buf = 136446978;
        v27 = "nw_service_connector_should_accept_connection_block_invoke";
        v28 = 2114;
        v29 = v13;
        v30 = 2114;
        v31 = v14;
        v32 = 1024;
        v33 = v6;
        v15 = "%{public}s %{public}@ error disabling keep alives for request %{public}@ %{darwin.errno}d";
        goto LABEL_20;
      }
      if (!v24)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v11 = (id)gLogObj;
        v12 = type;
        if (!os_log_type_enabled(v11, type))
          goto LABEL_21;
        v20 = *(_QWORD *)(a1 + 32);
        v21 = *(_QWORD *)(a1 + 40);
        *(_DWORD *)buf = 136446978;
        v27 = "nw_service_connector_should_accept_connection_block_invoke";
        v28 = 2114;
        v29 = v20;
        v30 = 2114;
        v31 = v21;
        v32 = 1024;
        v33 = v6;
        v15 = "%{public}s %{public}@ error disabling keep alives for request %{public}@ %{darwin.errno}d, backtrace limit exceeded";
        goto LABEL_20;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v11 = (id)gLogObj;
      v12 = type;
      v17 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (!v17)
          goto LABEL_21;
        v22 = *(_QWORD *)(a1 + 32);
        v23 = *(_QWORD *)(a1 + 40);
        *(_DWORD *)buf = 136446978;
        v27 = "nw_service_connector_should_accept_connection_block_invoke";
        v28 = 2114;
        v29 = v22;
        v30 = 2114;
        v31 = v23;
        v32 = 1024;
        v33 = v6;
        v15 = "%{public}s %{public}@ error disabling keep alives for request %{public}@ %{darwin.errno}d, no backtrace";
LABEL_20:
        _os_log_impl(&dword_182FBE000, v11, v12, v15, buf, 0x26u);
LABEL_21:

        if (!v10)
          return;
LABEL_14:
        free(v10);
        return;
      }
      if (v17)
      {
        v18 = *(_QWORD *)(a1 + 32);
        v19 = *(_QWORD *)(a1 + 40);
        *(_DWORD *)buf = 136447234;
        v27 = "nw_service_connector_should_accept_connection_block_invoke";
        v28 = 2114;
        v29 = v18;
        v30 = 2114;
        v31 = v19;
        v32 = 1024;
        v33 = v6;
        v34 = 2082;
        v35 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s %{public}@ error disabling keep alives for request %{public}@ %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x30u);
      }

      free(backtrace_string);
    }
    if (!v10)
      return;
    goto LABEL_14;
  }
}

void ___ZL45nw_service_connector_should_accept_connectionP31NWConcrete_nw_service_connectorP24NWConcrete_nw_connectionb_block_invoke_177(void **a1, int a2)
{
  NSObject *v4;
  void *v5;
  void *v6;
  void **v7;
  void *v8;
  int v9;
  const char *v10;
  __int16 v11;
  void *v12;
  __int16 v13;
  void *v14;
  __int16 v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v4 = (id)gLogObj;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v5 = a1[4];
      v6 = a1[5];
      v9 = 136446978;
      v10 = "nw_service_connector_should_accept_connection_block_invoke";
      v11 = 2114;
      v12 = v5;
      v13 = 2114;
      v14 = v6;
      v15 = 1024;
      v16 = a2;
      _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ error when accepting request %{public}@ %{darwin.errno}d", (uint8_t *)&v9, 0x26u);
    }

    v8 = a1[4];
    v7 = a1 + 4;
    nw_service_connector_cancel_request_inner(v8, *((void **)v7[1] + 1), (uint64_t)v7[1] + 24, v7[2], 0);
    nw_service_connector_trigger_request_complete_block_inner(*v7, v7[1], 0, 0, a2);
  }
  else
  {
    nw_service_connector_trigger_request_complete_block_inner(a1[4], a1[5], 0, a1[6], 0);
  }
}

void nw_service_connector_accept_connection_for_request(void *a1, void *a2, void *a3, void *a4)
{
  NWConcrete_nw_unique_connection_request *v7;
  NWConcrete_nw_unique_connection *v8;
  NWConcrete_nw_unique_connection *v9;
  void **p_endpoint;
  unint64_t v11;
  char *service;
  uint64_t v13;
  int v14;
  os_unfair_lock_s *v15;
  uint64_t v16;
  os_unfair_lock_s *v17;
  char *v18;
  int v19;
  NSObject *v20;
  uint64_t v21;
  char *v22;
  void *v23;
  int v24;
  int v25;
  int v26;
  NSObject *v27;
  id v28;
  void *v29;
  void *v30;
  id v31;
  id v32;
  char *v33;
  NSObject *v34;
  os_log_type_t v35;
  NSObject *v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  id v40;
  void *v41;
  char *v42;
  NSObject *v43;
  os_log_type_t v44;
  void *v45;
  char *v46;
  NSObject *v47;
  os_log_type_t v48;
  _BOOL4 v49;
  void *v50;
  char *backtrace_string;
  NSObject *v52;
  os_log_type_t v53;
  _BOOL4 v54;
  os_log_type_t v55;
  void *v56;
  void *v57;
  os_log_type_t v58;
  NSObject *v59;
  unint64_t v60;
  BOOL v61;
  NSObject *v62;
  void *v63;
  char *v64;
  NSObject *v65;
  os_log_type_t v66;
  void *v67;
  char *v68;
  NSObject *v69;
  os_log_type_t v70;
  char *v71;
  os_log_type_t v72;
  _BOOL4 v73;
  char *v74;
  os_log_type_t v75;
  _BOOL4 v76;
  os_log_type_t v77;
  os_log_type_t v78;
  void *v79;
  NSObject *v80;
  os_log_type_t v81;
  void *v82;
  os_log_type_t v83;
  char *v84;
  NSObject *v85;
  os_log_type_t v86;
  _BOOL4 v87;
  char *v88;
  os_log_type_t v89;
  _BOOL4 v90;
  os_log_type_t v91;
  os_log_type_t v92;
  NWConcrete_nw_unique_connection *v93;
  NWConcrete_nw_service_connector *v94;
  id v95;
  void (**v96)(id, uint64_t);
  id v97;
  char v98;
  os_log_type_t type;
  _BYTE v100[24];
  char *v101;
  __int16 v102;
  char *v103;
  __int16 v104;
  char *v105;
  uint8_t buf[64];
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  int v130;
  uint64_t v131;

  v131 = *MEMORY[0x1E0C80C00];
  v95 = a1;
  v97 = a2;
  v7 = a3;
  v96 = a4;
  if (v96)
  {
    v8 = objc_alloc_init(NWConcrete_nw_unique_connection);
    v9 = v8;
    if (v8)
    {
      objc_storeStrong((id *)&v8->connection, a2);
      p_endpoint = (void **)&v9->endpoint;
      objc_storeStrong((id *)&v9->endpoint, v7->endpoint);
      v11 = 436;
      service = v9->service;
      while (*service)
      {
        ++service;
        if (!--v11)
          goto LABEL_13;
      }
      if (v11 < 2)
      {
LABEL_12:
        *service = 0;
      }
      else
      {
        v13 = 0;
        while (1)
        {
          v14 = v7->service[v13];
          service[v13] = v14;
          if (!v14)
            break;
          --v11;
          ++v13;
          if (v11 <= 1)
          {
            service += v13;
            goto LABEL_12;
          }
        }
      }
LABEL_13:
      *(_OWORD *)v9->uuid = *(_OWORD *)v7->uuid;
      v9->receivedSequenceNumber = v7->sequenceNumber;
      *((_BYTE *)v9 + 500) = *((_BYTE *)v9 + 500) & 0xFE | *((_BYTE *)v7 + 616) & 1;
      if (!v97)
        goto LABEL_15;
      v15 = (os_unfair_lock_s *)v97;
      *(_QWORD *)v100 = 0;
      *(_QWORD *)&v100[8] = v100;
      *(_QWORD *)&v100[16] = 0x2020000000;
      LOBYTE(v101) = 0;
      v16 = MEMORY[0x1E0C809B0];
      v17 = v15 + 34;
      *(_QWORD *)buf = MEMORY[0x1E0C809B0];
      *(_QWORD *)&buf[8] = 3221225472;
      *(_QWORD *)&buf[16] = __nw_connection_is_cancelled_or_failed_block_invoke;
      *(_QWORD *)&buf[24] = &unk_1E14ACE40;
      *(_QWORD *)&buf[40] = v100;
      v18 = v15;
      *(_QWORD *)&buf[32] = v18;
      os_unfair_lock_lock(v17);
      (*(void (**)(uint8_t *))&buf[16])(buf);
      os_unfair_lock_unlock(v17);
      v19 = *(unsigned __int8 *)(*(_QWORD *)&v100[8] + 24);

      _Block_object_dispose(v100, 8);
      if (v19)
      {
LABEL_15:
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v20 = (id)gLogObj;
        if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)&buf[4] = "nw_service_connector_accept_connection_for_request";
          *(_WORD *)&buf[12] = 2114;
          *(_QWORD *)&buf[14] = v95;
          *(_WORD *)&buf[22] = 2114;
          *(_QWORD *)&buf[24] = v7;
          _os_log_impl(&dword_182FBE000, v20, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ Bad connection for request %{public}@", buf, 0x20u);
        }

        v21 = 57;
LABEL_18:
        v96[2](v96, v21);
LABEL_19:

        goto LABEL_20;
      }
      v22 = v18;
      *(_QWORD *)v100 = 0;
      *(_QWORD *)&v100[8] = v100;
      LODWORD(v101) = -1;
      *(_QWORD *)&v100[16] = 0x2020000000;
      *(_QWORD *)buf = v16;
      *(_QWORD *)&buf[8] = 3221225472;
      *(_QWORD *)&buf[16] = __nw_connection_get_connected_socket_block_invoke;
      *(_QWORD *)&buf[24] = &unk_1E14ACE40;
      *(_QWORD *)&buf[32] = v22;
      *(_QWORD *)&buf[40] = v100;
      v23 = *(void **)&buf[32];
      os_unfair_lock_lock(v17);
      (*(void (**)(uint8_t *))&buf[16])(buf);
      os_unfair_lock_unlock(v17);
      v24 = *(_DWORD *)(*(_QWORD *)&v100[8] + 24);

      _Block_object_dispose(v100, 8);
      if (v24 < 0)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v36 = (id)gLogObj;
        if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_service_connector_accept_connection_for_request";
          *(_WORD *)&buf[12] = 2114;
          *(_QWORD *)&buf[14] = v95;
          *(_WORD *)&buf[22] = 2114;
          *(_QWORD *)&buf[24] = v23;
          *(_WORD *)&buf[32] = 2114;
          *(_QWORD *)&buf[34] = v9;
          _os_log_impl(&dword_182FBE000, v36, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ failed to extract socket of connection %{public}@ for activeConnection %{public}@", buf, 0x2Au);
        }

        v37 = 57;
LABEL_79:
        v96[2](v96, v37);
        goto LABEL_19;
      }
      v25 = dup(v24);
      v26 = v25;
      if (v25 < 0)
      {
        v38 = **(unsigned int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v39 = (id)gLogObj;
        if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136447490;
          *(_QWORD *)&buf[4] = "nw_service_connector_accept_connection_for_request";
          *(_WORD *)&buf[12] = 2114;
          *(_QWORD *)&buf[14] = v95;
          *(_WORD *)&buf[22] = 1024;
          *(_DWORD *)&buf[24] = v24;
          *(_WORD *)&buf[28] = 2114;
          *(_QWORD *)&buf[30] = v23;
          *(_WORD *)&buf[38] = 2114;
          *(_QWORD *)&buf[40] = v9;
          *(_WORD *)&buf[48] = 1024;
          *(_DWORD *)&buf[50] = v38;
          _os_log_impl(&dword_182FBE000, v39, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ failed to dup socket from internal [socket%d] of connection %{public}@ for activeConnection %{public}@ %{darwin.errno}d", buf, 0x36u);
        }

        v96[2](v96, v38);
        goto LABEL_19;
      }
      v9->dupedSocketFD = v25;
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v27 = (id)gLogObj;
      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136447490;
        *(_QWORD *)&buf[4] = "nw_service_connector_accept_connection_for_request";
        *(_WORD *)&buf[12] = 2114;
        *(_QWORD *)&buf[14] = v95;
        *(_WORD *)&buf[22] = 1024;
        *(_DWORD *)&buf[24] = v26;
        *(_WORD *)&buf[28] = 1024;
        *(_DWORD *)&buf[30] = v24;
        *(_WORD *)&buf[34] = 2114;
        *(_QWORD *)&buf[36] = v23;
        *(_WORD *)&buf[44] = 2114;
        *(_QWORD *)&buf[46] = v9;
        _os_log_impl(&dword_182FBE000, v27, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ duped [socket%d] from internal [socket%d] of connection %{public}@ for activeConnection %{public}@", buf, 0x36u);
      }

      v28 = v95;
      v93 = v9;
      v94 = (NWConcrete_nw_service_connector *)v28;
      if (v28)
      {
        if (*((_QWORD *)v28 + 11))
        {
          v130 = 0;
          v128 = 0u;
          v129 = 0u;
          v126 = 0u;
          v127 = 0u;
          v124 = 0u;
          v125 = 0u;
          v122 = 0u;
          v123 = 0u;
          v120 = 0u;
          v121 = 0u;
          v118 = 0u;
          v119 = 0u;
          v116 = 0u;
          v117 = 0u;
          v114 = 0u;
          v115 = 0u;
          v112 = 0u;
          v113 = 0u;
          v110 = 0u;
          v111 = 0u;
          v108 = 0u;
          v109 = 0u;
          v107 = 0u;
          memset(buf, 0, sizeof(buf));
          if (nwsc_get_identifier(*p_endpoint, (uint64_t)v9->service, buf))
          {
            v29 = nw_dictionary_copy_value(*((_QWORD *)v28 + 11), (uint64_t)buf);
            v30 = v29;
            if (!v29 || (*((_DWORD *)v29 + 124) & 0x80000000) != 0)
            {
LABEL_74:
              nw_dictionary_set_value(*((_QWORD *)v28 + 11), (const char *)buf, v93);

              goto LABEL_75;
            }
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v31 = (id)gLogObj;
            *(_DWORD *)v100 = 136446978;
            *(_QWORD *)&v100[4] = "nw_service_connector_add_active_connection";
            *(_WORD *)&v100[12] = 2114;
            v32 = v28;
            *(_QWORD *)&v100[14] = v28;
            *(_WORD *)&v100[22] = 2114;
            v101 = (char *)v30;
            v102 = 2114;
            v103 = (char *)v93;
            v33 = (char *)_os_log_send_and_compose_impl();

            type = OS_LOG_TYPE_ERROR;
            v98 = 0;
            if (__nwlog_fault(v33, &type, &v98))
            {
              if (type == OS_LOG_TYPE_FAULT)
              {
                __nwlog_obj();
                v34 = objc_claimAutoreleasedReturnValue();
                v35 = type;
                if (os_log_type_enabled(v34, type))
                {
                  *(_DWORD *)v100 = 136446978;
                  *(_QWORD *)&v100[4] = "nw_service_connector_add_active_connection";
                  *(_WORD *)&v100[12] = 2114;
                  *(_QWORD *)&v100[14] = v28;
                  *(_WORD *)&v100[22] = 2114;
                  v101 = (char *)v30;
                  v102 = 2114;
                  v103 = (char *)v93;
                  _os_log_impl(&dword_182FBE000, v34, v35, "%{public}s %{public}@ previous %{public}@ has socket when adding new %{public}@", v100, 0x2Au);
                }
              }
              else
              {
                if (v98)
                {
                  backtrace_string = (char *)__nw_create_backtrace_string();
                  __nwlog_obj();
                  v52 = objc_claimAutoreleasedReturnValue();
                  v53 = type;
                  v54 = os_log_type_enabled(v52, type);
                  if (backtrace_string)
                  {
                    if (v54)
                    {
                      *(_DWORD *)v100 = 136447234;
                      *(_QWORD *)&v100[4] = "nw_service_connector_add_active_connection";
                      *(_WORD *)&v100[12] = 2114;
                      *(_QWORD *)&v100[14] = v32;
                      *(_WORD *)&v100[22] = 2114;
                      v101 = (char *)v30;
                      v102 = 2114;
                      v103 = (char *)v93;
                      v104 = 2082;
                      v105 = backtrace_string;
                      _os_log_impl(&dword_182FBE000, v52, v53, "%{public}s %{public}@ previous %{public}@ has socket when adding new %{public}@, dumping backtrace:%{public}s", v100, 0x34u);
                    }

                    free(backtrace_string);
                  }
                  else
                  {
                    if (v54)
                    {
                      *(_DWORD *)v100 = 136446978;
                      *(_QWORD *)&v100[4] = "nw_service_connector_add_active_connection";
                      *(_WORD *)&v100[12] = 2114;
                      *(_QWORD *)&v100[14] = v32;
                      *(_WORD *)&v100[22] = 2114;
                      v101 = (char *)v30;
                      v102 = 2114;
                      v103 = (char *)v93;
                      _os_log_impl(&dword_182FBE000, v52, v53, "%{public}s %{public}@ previous %{public}@ has socket when adding new %{public}@, no backtrace", v100, 0x2Au);
                    }

                  }
                  goto LABEL_71;
                }
                __nwlog_obj();
                v34 = objc_claimAutoreleasedReturnValue();
                v58 = type;
                if (os_log_type_enabled(v34, type))
                {
                  *(_DWORD *)v100 = 136446978;
                  *(_QWORD *)&v100[4] = "nw_service_connector_add_active_connection";
                  *(_WORD *)&v100[12] = 2114;
                  *(_QWORD *)&v100[14] = v28;
                  *(_WORD *)&v100[22] = 2114;
                  v101 = (char *)v30;
                  v102 = 2114;
                  v103 = (char *)v93;
                  _os_log_impl(&dword_182FBE000, v34, v58, "%{public}s %{public}@ previous %{public}@ has socket when adding new %{public}@, backtrace limit exceeded", v100, 0x2Au);
                }
              }

            }
LABEL_71:
            if (v33)
              free(v33);
            v28 = v32;
            goto LABEL_74;
          }
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v40 = (id)gLogObj;
          v41 = *p_endpoint;
          *(_DWORD *)v100 = 136446722;
          *(_QWORD *)&v100[4] = "nw_service_connector_add_active_connection";
          *(_WORD *)&v100[12] = 2114;
          *(_QWORD *)&v100[14] = v41;
          *(_WORD *)&v100[22] = 2082;
          v101 = v9->service;
          v42 = (char *)_os_log_send_and_compose_impl();

          type = OS_LOG_TYPE_ERROR;
          v98 = 0;
          if (__nwlog_fault(v42, &type, &v98))
          {
            if (type == OS_LOG_TYPE_FAULT)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v43 = (id)gLogObj;
              v44 = type;
              if (os_log_type_enabled(v43, type))
              {
                v45 = *p_endpoint;
                *(_DWORD *)v100 = 136446722;
                *(_QWORD *)&v100[4] = "nw_service_connector_add_active_connection";
                *(_WORD *)&v100[12] = 2114;
                *(_QWORD *)&v100[14] = v45;
                *(_WORD *)&v100[22] = 2082;
                v101 = v9->service;
                _os_log_impl(&dword_182FBE000, v43, v44, "%{public}s Could not get identifier for endpoint %{public}@, service %{public}s", v100, 0x20u);
              }
            }
            else
            {
              if (v98)
              {
                v46 = (char *)__nw_create_backtrace_string();
                __nwlog_obj();
                v47 = objc_claimAutoreleasedReturnValue();
                v48 = type;
                v49 = os_log_type_enabled(v47, type);
                if (v46)
                {
                  if (v49)
                  {
                    v50 = *p_endpoint;
                    *(_DWORD *)v100 = 136446978;
                    *(_QWORD *)&v100[4] = "nw_service_connector_add_active_connection";
                    *(_WORD *)&v100[12] = 2114;
                    *(_QWORD *)&v100[14] = v50;
                    *(_WORD *)&v100[22] = 2082;
                    v101 = v9->service;
                    v102 = 2082;
                    v103 = v46;
                    _os_log_impl(&dword_182FBE000, v47, v48, "%{public}s Could not get identifier for endpoint %{public}@, service %{public}s, dumping backtrace:%{public}s", v100, 0x2Au);
                  }

                  free(v46);
                  if (!v42)
                    goto LABEL_75;
                  goto LABEL_64;
                }
                if (v49)
                {
                  v57 = *p_endpoint;
                  *(_DWORD *)v100 = 136446722;
                  *(_QWORD *)&v100[4] = "nw_service_connector_add_active_connection";
                  *(_WORD *)&v100[12] = 2114;
                  *(_QWORD *)&v100[14] = v57;
                  *(_WORD *)&v100[22] = 2082;
                  v101 = v9->service;
                  _os_log_impl(&dword_182FBE000, v47, v48, "%{public}s Could not get identifier for endpoint %{public}@, service %{public}s, no backtrace", v100, 0x20u);
                }

                goto LABEL_63;
              }
              __nwlog_obj();
              v43 = objc_claimAutoreleasedReturnValue();
              v55 = type;
              if (os_log_type_enabled(v43, type))
              {
                v56 = *p_endpoint;
                *(_DWORD *)v100 = 136446722;
                *(_QWORD *)&v100[4] = "nw_service_connector_add_active_connection";
                *(_WORD *)&v100[12] = 2114;
                *(_QWORD *)&v100[14] = v56;
                *(_WORD *)&v100[22] = 2082;
                v101 = v9->service;
                _os_log_impl(&dword_182FBE000, v43, v55, "%{public}s Could not get identifier for endpoint %{public}@, service %{public}s, backtrace limit exceeded", v100, 0x20u);
              }
            }

          }
LABEL_63:
          if (!v42)
          {
LABEL_75:

            if ((*((_BYTE *)v7 + 616) & 1) != 0)
            {
              if (nw_service_connector_get_new_sequence_number(void)::onceToken != -1)
                dispatch_once(&nw_service_connector_get_new_sequence_number(void)::onceToken, &__block_literal_global_181);
              do
                v60 = __ldaxr((unint64_t *)&nw_service_connector_get_new_sequence_number(void)::sNWSCSequenceNumber);
              while (__stlxr(v60 + 1, (unint64_t *)&nw_service_connector_get_new_sequence_number(void)::sNWSCSequenceNumber));
              if (!v60)
              {
                do
                {
                  v60 = __ldaxr((unint64_t *)&nw_service_connector_get_new_sequence_number(void)::sNWSCSequenceNumber);
                  if (__stlxr(v60 + 1, (unint64_t *)&nw_service_connector_get_new_sequence_number(void)::sNWSCSequenceNumber))
                  {
                    v61 = 1;
                  }
                  else
                  {
                    v61 = v60 == 0;
                  }
                }
                while (v61);
              }
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v62 = (id)gLogObj;
              if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 136447234;
                *(_QWORD *)&buf[4] = "nw_service_connector_accept_connection_for_request";
                *(_WORD *)&buf[12] = 2114;
                *(_QWORD *)&buf[14] = v94;
                *(_WORD *)&buf[22] = 2114;
                *(_QWORD *)&buf[24] = v7;
                *(_WORD *)&buf[32] = 2114;
                *(_QWORD *)&buf[34] = v93;
                *(_WORD *)&buf[42] = 2048;
                *(_QWORD *)&buf[44] = v60;
                _os_log_impl(&dword_182FBE000, v62, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ accepting incoming request %{public}@ activeConnection %{public}@ reply seq %llu", buf, 0x34u);
              }

              nwsc_send_feedback(v94, v23, v60, 1, 0, v96);
              goto LABEL_19;
            }
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v59 = (id)gLogObj;
            if (os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 136446978;
              *(_QWORD *)&buf[4] = "nw_service_connector_accept_connection_for_request";
              *(_WORD *)&buf[12] = 2114;
              *(_QWORD *)&buf[14] = v94;
              *(_WORD *)&buf[22] = 2114;
              *(_QWORD *)&buf[24] = v23;
              *(_WORD *)&buf[32] = 2114;
              *(_QWORD *)&buf[34] = v93;
              _os_log_impl(&dword_182FBE000, v59, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ outgoing connection %{public}@ was accepted activeConnection %{public}@", buf, 0x2Au);
            }

            nw_service_connector_remove_active_outgoing_request(v94, v7);
            v37 = 0;
            goto LABEL_79;
          }
LABEL_64:
          free(v42);
          goto LABEL_75;
        }
        __nwlog_obj();
        v82 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_service_connector_add_active_connection";
        v42 = (char *)_os_log_send_and_compose_impl();

        v100[0] = 16;
        type = OS_LOG_TYPE_DEFAULT;
        if (!__nwlog_fault(v42, v100, &type))
          goto LABEL_63;
        if (v100[0] == 17)
        {
          __nwlog_obj();
          v80 = objc_claimAutoreleasedReturnValue();
          v83 = v100[0];
          if (os_log_type_enabled(v80, (os_log_type_t)v100[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_service_connector_add_active_connection";
            _os_log_impl(&dword_182FBE000, v80, v83, "%{public}s called with null serviceConnector->activeConnections", buf, 0xCu);
          }
LABEL_154:

          goto LABEL_63;
        }
        if (type == OS_LOG_TYPE_DEFAULT)
        {
          __nwlog_obj();
          v80 = objc_claimAutoreleasedReturnValue();
          v92 = v100[0];
          if (os_log_type_enabled(v80, (os_log_type_t)v100[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_service_connector_add_active_connection";
            _os_log_impl(&dword_182FBE000, v80, v92, "%{public}s called with null serviceConnector->activeConnections, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_154;
        }
        v88 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v85 = objc_claimAutoreleasedReturnValue();
        v89 = v100[0];
        v90 = os_log_type_enabled(v85, (os_log_type_t)v100[0]);
        if (v88)
        {
          if (v90)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_service_connector_add_active_connection";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v88;
            _os_log_impl(&dword_182FBE000, v85, v89, "%{public}s called with null serviceConnector->activeConnections, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v88);
          if (!v42)
            goto LABEL_75;
          goto LABEL_64;
        }
        if (v90)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_service_connector_add_active_connection";
          _os_log_impl(&dword_182FBE000, v85, v89, "%{public}s called with null serviceConnector->activeConnections, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v79 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_service_connector_add_active_connection";
        v42 = (char *)_os_log_send_and_compose_impl();

        v100[0] = 16;
        type = OS_LOG_TYPE_DEFAULT;
        if (!__nwlog_fault(v42, v100, &type))
          goto LABEL_63;
        if (v100[0] == 17)
        {
          __nwlog_obj();
          v80 = objc_claimAutoreleasedReturnValue();
          v81 = v100[0];
          if (os_log_type_enabled(v80, (os_log_type_t)v100[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_service_connector_add_active_connection";
            _os_log_impl(&dword_182FBE000, v80, v81, "%{public}s called with null serviceConnector", buf, 0xCu);
          }
          goto LABEL_154;
        }
        if (type == OS_LOG_TYPE_DEFAULT)
        {
          __nwlog_obj();
          v80 = objc_claimAutoreleasedReturnValue();
          v91 = v100[0];
          if (os_log_type_enabled(v80, (os_log_type_t)v100[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_service_connector_add_active_connection";
            _os_log_impl(&dword_182FBE000, v80, v91, "%{public}s called with null serviceConnector, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_154;
        }
        v84 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v85 = objc_claimAutoreleasedReturnValue();
        v86 = v100[0];
        v87 = os_log_type_enabled(v85, (os_log_type_t)v100[0]);
        if (v84)
        {
          if (v87)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_service_connector_add_active_connection";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v84;
            _os_log_impl(&dword_182FBE000, v85, v86, "%{public}s called with null serviceConnector, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v84);
          goto LABEL_63;
        }
        if (v87)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_service_connector_add_active_connection";
          _os_log_impl(&dword_182FBE000, v85, v86, "%{public}s called with null serviceConnector, no backtrace", buf, 0xCu);
        }
      }

      goto LABEL_63;
    }
    __nwlog_obj();
    v67 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_service_connector_accept_connection_for_request";
    v68 = (char *)_os_log_send_and_compose_impl();

    v100[0] = 16;
    type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v68, v100, &type))
    {
      if (v100[0] == 17)
      {
        __nwlog_obj();
        v69 = objc_claimAutoreleasedReturnValue();
        v70 = v100[0];
        if (os_log_type_enabled(v69, (os_log_type_t)v100[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_service_connector_accept_connection_for_request";
          _os_log_impl(&dword_182FBE000, v69, v70, "%{public}s [nw_unique_connection init:] failed", buf, 0xCu);
        }
      }
      else if (type)
      {
        v74 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v69 = objc_claimAutoreleasedReturnValue();
        v75 = v100[0];
        v76 = os_log_type_enabled(v69, (os_log_type_t)v100[0]);
        if (v74)
        {
          if (v76)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_service_connector_accept_connection_for_request";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v74;
            _os_log_impl(&dword_182FBE000, v69, v75, "%{public}s [nw_unique_connection init:] failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v74);
          goto LABEL_125;
        }
        if (v76)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_service_connector_accept_connection_for_request";
          _os_log_impl(&dword_182FBE000, v69, v75, "%{public}s [nw_unique_connection init:] failed, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v69 = objc_claimAutoreleasedReturnValue();
        v78 = v100[0];
        if (os_log_type_enabled(v69, (os_log_type_t)v100[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_service_connector_accept_connection_for_request";
          _os_log_impl(&dword_182FBE000, v69, v78, "%{public}s [nw_unique_connection init:] failed, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_125:
    if (v68)
      free(v68);
    v21 = 12;
    goto LABEL_18;
  }
  __nwlog_obj();
  v63 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446722;
  *(_QWORD *)&buf[4] = "nw_service_connector_accept_connection_for_request";
  *(_WORD *)&buf[12] = 2114;
  *(_QWORD *)&buf[14] = v95;
  *(_WORD *)&buf[22] = 2114;
  *(_QWORD *)&buf[24] = v7;
  v64 = (char *)_os_log_send_and_compose_impl();

  v100[0] = 16;
  type = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v64, v100, &type))
  {
    if (v100[0] == 17)
    {
      __nwlog_obj();
      v65 = objc_claimAutoreleasedReturnValue();
      v66 = v100[0];
      if (os_log_type_enabled(v65, (os_log_type_t)v100[0]))
      {
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = "nw_service_connector_accept_connection_for_request";
        *(_WORD *)&buf[12] = 2114;
        *(_QWORD *)&buf[14] = v95;
        *(_WORD *)&buf[22] = 2114;
        *(_QWORD *)&buf[24] = v7;
        _os_log_impl(&dword_182FBE000, v65, v66, "%{public}s %{public}@ Expected completion block %{public}@", buf, 0x20u);
      }
    }
    else if (type)
    {
      v71 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v65 = objc_claimAutoreleasedReturnValue();
      v72 = v100[0];
      v73 = os_log_type_enabled(v65, (os_log_type_t)v100[0]);
      if (v71)
      {
        if (v73)
        {
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_service_connector_accept_connection_for_request";
          *(_WORD *)&buf[12] = 2114;
          *(_QWORD *)&buf[14] = v95;
          *(_WORD *)&buf[22] = 2114;
          *(_QWORD *)&buf[24] = v7;
          *(_WORD *)&buf[32] = 2082;
          *(_QWORD *)&buf[34] = v71;
          _os_log_impl(&dword_182FBE000, v65, v72, "%{public}s %{public}@ Expected completion block %{public}@, dumping backtrace:%{public}s", buf, 0x2Au);
        }

        free(v71);
        goto LABEL_120;
      }
      if (v73)
      {
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = "nw_service_connector_accept_connection_for_request";
        *(_WORD *)&buf[12] = 2114;
        *(_QWORD *)&buf[14] = v95;
        *(_WORD *)&buf[22] = 2114;
        *(_QWORD *)&buf[24] = v7;
        _os_log_impl(&dword_182FBE000, v65, v72, "%{public}s %{public}@ Expected completion block %{public}@, no backtrace", buf, 0x20u);
      }
    }
    else
    {
      __nwlog_obj();
      v65 = objc_claimAutoreleasedReturnValue();
      v77 = v100[0];
      if (os_log_type_enabled(v65, (os_log_type_t)v100[0]))
      {
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = "nw_service_connector_accept_connection_for_request";
        *(_WORD *)&buf[12] = 2114;
        *(_QWORD *)&buf[14] = v95;
        *(_WORD *)&buf[22] = 2114;
        *(_QWORD *)&buf[24] = v7;
        _os_log_impl(&dword_182FBE000, v65, v77, "%{public}s %{public}@ Expected completion block %{public}@, backtrace limit exceeded", buf, 0x20u);
      }
    }

  }
LABEL_120:
  if (v64)
    free(v64);
LABEL_20:

}

void sub_18387B5E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, void *a19)
{
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

void ___ZL24nwsc_save_remote_pub_keyP31NWConcrete_nw_service_connectorPU25objcproto14OS_nw_endpoint8NSObjectyPh_block_invoke_2(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  os_unfair_lock_s *v7;
  os_unfair_lock_s *v8;
  char *v9;
  NSObject *v10;
  uint64_t v11;
  void *v12;
  NWConcrete_nw_unique_connection_request *v13;
  NSObject *p_super;
  NSObject *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  char v22;
  _BYTE buf[24];
  void *v24;
  __int128 v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(*(_QWORD *)(a1 + 32) + 16) == 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v2 = (id)gLogObj;
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      v3 = *(_QWORD *)(a1 + 32);
      v4 = *(void **)(a1 + 40);
      v5 = *(_QWORD *)(a1 + 48);
      *(_DWORD *)buf = 136446978;
      *(_QWORD *)&buf[4] = "nwsc_save_remote_pub_key_block_invoke_2";
      *(_WORD *)&buf[12] = 2114;
      *(_QWORD *)&buf[14] = v3;
      *(_WORD *)&buf[22] = 2114;
      v24 = v4;
      LOWORD(v25) = 2048;
      *(_QWORD *)((char *)&v25 + 2) = v5;
      _os_log_impl(&dword_182FBE000, v2, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ already cancelled, not reevaluating %{public}@ due to received seq %llu", buf, 0x2Au);
    }

  }
  else
  {
    v6 = *(void **)(*(_QWORD *)(a1 + 40) + 576);
    if (!v6)
      goto LABEL_7;
    v7 = v6;
    v19 = 0;
    v20 = &v19;
    v21 = 0x2020000000;
    v22 = 0;
    v8 = v7 + 34;
    *(_QWORD *)buf = MEMORY[0x1E0C809B0];
    *(_QWORD *)&buf[8] = 3221225472;
    *(_QWORD *)&buf[16] = __nw_connection_is_cancelled_or_failed_block_invoke;
    v24 = &unk_1E14ACE40;
    *((_QWORD *)&v25 + 1) = &v19;
    v9 = v7;
    *(_QWORD *)&v25 = v9;
    os_unfair_lock_lock(v8);
    __nw_connection_is_cancelled_or_failed_block_invoke((uint64_t)buf);
    os_unfair_lock_unlock(v8);
    LODWORD(v8) = *((unsigned __int8 *)v20 + 24);

    _Block_object_dispose(&v19, 8);
    if (!(_DWORD)v8)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v15 = (id)gLogObj;
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        v16 = *(_QWORD *)(a1 + 32);
        v17 = *(void **)(a1 + 40);
        v18 = *(_QWORD *)(a1 + 48);
        *(_DWORD *)buf = 136446978;
        *(_QWORD *)&buf[4] = "nwsc_save_remote_pub_key_block_invoke";
        *(_WORD *)&buf[12] = 2114;
        *(_QWORD *)&buf[14] = v16;
        *(_WORD *)&buf[22] = 2114;
        v24 = v17;
        LOWORD(v25) = 2048;
        *(_QWORD *)((char *)&v25 + 2) = v18;
        _os_log_impl(&dword_182FBE000, v15, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ reevaluating %{public}@ due to received seq %llu", buf, 0x2Au);
      }

      nwsc_process_incoming_request(*(NWConcrete_nw_service_connector **)(a1 + 32), *(NWConcrete_nw_unique_connection_request **)(a1 + 40));
    }
    else
    {
LABEL_7:
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v10 = (id)gLogObj;
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        v11 = *(_QWORD *)(a1 + 32);
        v12 = *(void **)(a1 + 40);
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = "nwsc_save_remote_pub_key_block_invoke";
        *(_WORD *)&buf[12] = 2114;
        *(_QWORD *)&buf[14] = v11;
        *(_WORD *)&buf[22] = 2114;
        v24 = v12;
        _os_log_impl(&dword_182FBE000, v10, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ removing unverified incoming request %{public}@ with bad connection", buf, 0x20u);
      }

      v13 = *(NWConcrete_nw_unique_connection_request **)(a1 + 40);
      p_super = &v13->connection->super;
      if (p_super)
      {
        nw_connection_cancel(p_super);
        v13 = *(NWConcrete_nw_unique_connection_request **)(a1 + 40);
      }
      nw_service_connector_remove_pending_unverified_incoming_request(*(NWConcrete_nw_service_connector **)(a1 + 32), v13);
    }
  }
}

void nw_service_connector_remove_pending_unverified_incoming_request(NWConcrete_nw_service_connector *a1, NWConcrete_nw_unique_connection_request *a2)
{
  NWConcrete_nw_service_connector *v3;
  NWConcrete_nw_unique_connection_request *v4;
  uint64_t v5;
  char *incomingReqBytesToVerify;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  void *v11;
  os_log_type_t v12;
  void *v13;
  os_log_type_t v14;
  char *backtrace_string;
  os_log_type_t v16;
  _BOOL4 v17;
  char *v18;
  os_log_type_t v19;
  _BOOL4 v20;
  os_log_type_t v21;
  _BOOL4 v22;
  os_log_type_t v23;
  os_log_type_t v24;
  os_log_type_t v25;
  char v26;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v29;
  __int16 v30;
  char *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = (uint64_t)v4;
  if (!v3)
  {
    __nwlog_obj();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v29 = "nw_service_connector_remove_pending_unverified_incoming_request";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v26 = 0;
    if (!__nwlog_fault(v8, &type, &v26))
      goto LABEL_57;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_service_connector_remove_pending_unverified_incoming_request";
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null serviceConnector", buf, 0xCu);
      }
    }
    else if (v26)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      v17 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          v29 = "nw_service_connector_remove_pending_unverified_incoming_request";
          v30 = 2082;
          v31 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v9, v16, "%{public}s called with null serviceConnector, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_57:
        if (!v8)
          goto LABEL_7;
LABEL_58:
        free(v8);
        goto LABEL_7;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_service_connector_remove_pending_unverified_incoming_request";
        _os_log_impl(&dword_182FBE000, v9, v16, "%{public}s called with null serviceConnector, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v23 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_service_connector_remove_pending_unverified_incoming_request";
        _os_log_impl(&dword_182FBE000, v9, v23, "%{public}s called with null serviceConnector, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_56:

    goto LABEL_57;
  }
  if (!v3->pendingUnverifiedIncomingRequests)
  {
    __nwlog_obj();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v29 = "nw_service_connector_remove_pending_unverified_incoming_request";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v26 = 0;
    if (!__nwlog_fault(v8, &type, &v26))
      goto LABEL_57;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_service_connector_remove_pending_unverified_incoming_request";
        _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null serviceConnector->pendingUnverifiedIncomingRequests", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (!v26)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v24 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_service_connector_remove_pending_unverified_incoming_request";
        _os_log_impl(&dword_182FBE000, v9, v24, "%{public}s called with null serviceConnector->pendingUnverifiedIncomingRequests, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_56;
    }
    v18 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v9 = objc_claimAutoreleasedReturnValue();
    v19 = type;
    v20 = os_log_type_enabled(v9, type);
    if (!v18)
    {
      if (v20)
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_service_connector_remove_pending_unverified_incoming_request";
        _os_log_impl(&dword_182FBE000, v9, v19, "%{public}s called with null serviceConnector->pendingUnverifiedIncomingRequests, no backtrace", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (v20)
    {
      *(_DWORD *)buf = 136446466;
      v29 = "nw_service_connector_remove_pending_unverified_incoming_request";
      v30 = 2082;
      v31 = v18;
      _os_log_impl(&dword_182FBE000, v9, v19, "%{public}s called with null serviceConnector->pendingUnverifiedIncomingRequests, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_37;
  }
  if (!v4)
  {
    __nwlog_obj();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v29 = "nw_service_connector_remove_pending_unverified_incoming_request";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v26 = 0;
    if (!__nwlog_fault(v8, &type, &v26))
      goto LABEL_57;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_service_connector_remove_pending_unverified_incoming_request";
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null request", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (!v26)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v25 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_service_connector_remove_pending_unverified_incoming_request";
        _os_log_impl(&dword_182FBE000, v9, v25, "%{public}s called with null request, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_56;
    }
    v18 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v9 = objc_claimAutoreleasedReturnValue();
    v21 = type;
    v22 = os_log_type_enabled(v9, type);
    if (!v18)
    {
      if (v22)
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_service_connector_remove_pending_unverified_incoming_request";
        _os_log_impl(&dword_182FBE000, v9, v21, "%{public}s called with null request, no backtrace", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (v22)
    {
      *(_DWORD *)buf = 136446466;
      v29 = "nw_service_connector_remove_pending_unverified_incoming_request";
      v30 = 2082;
      v31 = v18;
      _os_log_impl(&dword_182FBE000, v9, v21, "%{public}s called with null request, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_37:

    free(v18);
    if (!v8)
      goto LABEL_7;
    goto LABEL_58;
  }
  incomingReqBytesToVerify = v4->incomingReqBytesToVerify;
  if (incomingReqBytesToVerify)
  {
    free(incomingReqBytesToVerify);
    *(_QWORD *)(v5 + 560) = 0;
  }
  *(_DWORD *)(v5 + 568) = 0;
  nw_array_remove_object((uint64_t)v3->pendingUnverifiedIncomingRequests, v5);
LABEL_7:

}

BOOL ___ZL55nw_service_connector_copy_active_request_for_connectionP31NWConcrete_nw_service_connectorP24NWConcrete_nw_connection_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v5 = a3;
  v6 = v5[72];
  v7 = *(_QWORD *)(a1 + 32);
  if (v6 == v7)
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a3);

  return v6 != v7;
}

void nw_service_connector_reject_incoming_request(NWConcrete_nw_service_connector *a1, NWConcrete_nw_unique_connection_request *a2, int a3)
{
  NWConcrete_nw_service_connector *v5;
  NWConcrete_nw_unique_connection_request *v6;
  uint64_t v7;
  NWConcrete_nw_unique_connection_request *v8;
  char v9;
  id v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t rejectTimer;
  uint64_t *v15;
  NWConcrete_nw_unique_connection_request *v16;
  NWConcrete_nw_unique_connection_request *v17;
  char *v18;
  os_log_type_t v19;
  _BOOL4 v20;
  id v21;
  OS_nw_endpoint *endpoint;
  void *v23;
  NSObject *v24;
  os_log_type_t v25;
  OS_nw_endpoint *v26;
  os_log_type_t v27;
  const char *backtrace_string;
  char *v29;
  NSObject *v30;
  os_log_type_t v31;
  OS_nw_endpoint *v32;
  os_log_type_t v33;
  OS_nw_endpoint *v34;
  os_log_type_t v35;
  OS_nw_endpoint *v36;
  char v37;
  unint64_t v38;
  BOOL v39;
  NSObject *v40;
  NWConcrete_nw_connection *connection;
  NWConcrete_nw_connection *v42;
  NSObject *v43;
  void *v44;
  NSObject *v45;
  os_log_type_t v46;
  void *v47;
  os_log_type_t v48;
  char *v49;
  os_log_type_t v50;
  _BOOL4 v51;
  os_log_type_t v52;
  _BOOL4 v53;
  os_log_type_t v54;
  os_log_type_t v55;
  char v56;
  os_log_type_t v57;
  os_log_type_t type[4];
  const char *v59;
  __int16 v60;
  OS_nw_endpoint *v61;
  __int16 v62;
  char *service;
  __int16 v64;
  char *v65;
  uint8_t buf[32];
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  int v92;
  uint64_t v93;

  v93 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v8 = v6;
  v9 = *((_BYTE *)v6 + 616);
  if ((v9 & 1) != 0)
  {
    rejectTimer = (uint64_t)v6->rejectTimer;
    if (rejectTimer)
    {
      nw_queue_cancel_source(rejectTimer, v7);
      v8->rejectTimer = 0;
      v9 = *((_BYTE *)v8 + 616);
    }
    if ((v9 & 2) == 0)
      goto LABEL_49;
    v15 = v5;
    v16 = v8;
    v17 = v16;
    if (v15)
    {
      if (v15[10])
      {
        v92 = 0;
        v90 = 0u;
        v91 = 0u;
        v88 = 0u;
        v89 = 0u;
        v86 = 0u;
        v87 = 0u;
        v84 = 0u;
        v85 = 0u;
        v82 = 0u;
        v83 = 0u;
        v80 = 0u;
        v81 = 0u;
        v78 = 0u;
        v79 = 0u;
        v76 = 0u;
        v77 = 0u;
        v74 = 0u;
        v75 = 0u;
        v72 = 0u;
        v73 = 0u;
        v70 = 0u;
        v71 = 0u;
        v68 = 0u;
        v69 = 0u;
        v67 = 0u;
        memset(buf, 0, sizeof(buf));
        if (nwsc_get_identifier(v16->endpoint, (uint64_t)v16->service, buf))
        {
          nw_dictionary_set_value(v15[10], (const char *)buf, 0);
          goto LABEL_48;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v21 = (id)gLogObj;
        endpoint = v17->endpoint;
        *(_DWORD *)type = 136446722;
        v59 = "nw_service_connector_remove_pending_incoming_request";
        v60 = 2114;
        v61 = endpoint;
        v62 = 2082;
        service = v17->service;
        v23 = (void *)_os_log_send_and_compose_impl();

        v57 = OS_LOG_TYPE_ERROR;
        v56 = 0;
        if (__nwlog_fault((const char *)v23, &v57, &v56))
        {
          if (v57 == OS_LOG_TYPE_FAULT)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v24 = (id)gLogObj;
            v25 = v57;
            if (os_log_type_enabled(v24, v57))
            {
              v26 = v17->endpoint;
              *(_DWORD *)type = 136446722;
              v59 = "nw_service_connector_remove_pending_incoming_request";
              v60 = 2114;
              v61 = v26;
              v62 = 2082;
              service = v17->service;
              _os_log_impl(&dword_182FBE000, v24, v25, "%{public}s Could not get identifier for endpoint %{public}@, service %{public}s", (uint8_t *)type, 0x20u);
            }
LABEL_45:

            goto LABEL_46;
          }
          if (!v56)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v24 = (id)gLogObj;
            v33 = v57;
            if (os_log_type_enabled(v24, v57))
            {
              v34 = v17->endpoint;
              *(_DWORD *)type = 136446722;
              v59 = "nw_service_connector_remove_pending_incoming_request";
              v60 = 2114;
              v61 = v34;
              v62 = 2082;
              service = v17->service;
              _os_log_impl(&dword_182FBE000, v24, v33, "%{public}s Could not get identifier for endpoint %{public}@, service %{public}s, backtrace limit exceeded", (uint8_t *)type, 0x20u);
            }
            goto LABEL_45;
          }
          backtrace_string = __nw_create_backtrace_string();
          if (!backtrace_string)
          {
            __nwlog_obj();
            v24 = objc_claimAutoreleasedReturnValue();
            v35 = v57;
            if (os_log_type_enabled(v24, v57))
            {
              v36 = v17->endpoint;
              *(_DWORD *)type = 136446722;
              v59 = "nw_service_connector_remove_pending_incoming_request";
              v60 = 2114;
              v61 = v36;
              v62 = 2082;
              service = v17->service;
              _os_log_impl(&dword_182FBE000, v24, v35, "%{public}s Could not get identifier for endpoint %{public}@, service %{public}s, no backtrace", (uint8_t *)type, 0x20u);
            }
            goto LABEL_45;
          }
          v29 = (char *)backtrace_string;
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v30 = (id)gLogObj;
          v31 = v57;
          if (os_log_type_enabled(v30, v57))
          {
            v32 = v17->endpoint;
            *(_DWORD *)type = 136446978;
            v59 = "nw_service_connector_remove_pending_incoming_request";
            v60 = 2114;
            v61 = v32;
            v62 = 2082;
            service = v17->service;
            v64 = 2082;
            v65 = v29;
            _os_log_impl(&dword_182FBE000, v30, v31, "%{public}s Could not get identifier for endpoint %{public}@, service %{public}s, dumping backtrace:%{public}s", (uint8_t *)type, 0x2Au);
          }

LABEL_33:
          free(v29);
          if (!v23)
          {
LABEL_48:

            v37 = *((_BYTE *)v8 + 616);
            *((_BYTE *)v8 + 616) = v37 & 0xFD;
            if ((v37 & 4) != 0)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v43 = (id)gLogObj;
              if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 136446722;
                *(_QWORD *)&buf[4] = "nw_service_connector_reject_incoming_request";
                *(_WORD *)&buf[12] = 2114;
                *(_QWORD *)&buf[14] = v15;
                *(_WORD *)&buf[22] = 2114;
                *(_QWORD *)&buf[24] = v17;
                _os_log_impl(&dword_182FBE000, v43, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ not rejecting accepted incoming request %{public}@", buf, 0x20u);
              }

              goto LABEL_64;
            }
LABEL_49:
            if (v8->connection)
            {
              if (nw_service_connector_get_new_sequence_number(void)::onceToken != -1)
                dispatch_once(&nw_service_connector_get_new_sequence_number(void)::onceToken, &__block_literal_global_181);
              do
                v38 = __ldaxr((unint64_t *)&nw_service_connector_get_new_sequence_number(void)::sNWSCSequenceNumber);
              while (__stlxr(v38 + 1, (unint64_t *)&nw_service_connector_get_new_sequence_number(void)::sNWSCSequenceNumber));
              if (!v38)
              {
                do
                {
                  v38 = __ldaxr((unint64_t *)&nw_service_connector_get_new_sequence_number(void)::sNWSCSequenceNumber);
                  if (__stlxr(v38 + 1, (unint64_t *)&nw_service_connector_get_new_sequence_number(void)::sNWSCSequenceNumber))
                  {
                    v39 = 1;
                  }
                  else
                  {
                    v39 = v38 == 0;
                  }
                }
                while (v39);
              }
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v40 = (id)gLogObj;
              if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 136446978;
                *(_QWORD *)&buf[4] = "nw_service_connector_reject_incoming_request";
                *(_WORD *)&buf[12] = 2114;
                *(_QWORD *)&buf[14] = v5;
                *(_WORD *)&buf[22] = 2114;
                *(_QWORD *)&buf[24] = v8;
                LOWORD(v67) = 2048;
                *(_QWORD *)((char *)&v67 + 2) = v38;
                _os_log_impl(&dword_182FBE000, v40, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ rejecting incoming request %{public}@ reply seq %llu", buf, 0x2Au);
              }

              connection = v8->connection;
              v8->connection = 0;
              v42 = connection;

              nwsc_send_feedback(v5, v42, v38, 0, a3, 0);
            }
            goto LABEL_64;
          }
LABEL_47:
          free(v23);
          goto LABEL_48;
        }
LABEL_46:
        if (!v23)
          goto LABEL_48;
        goto LABEL_47;
      }
      __nwlog_obj();
      v47 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_service_connector_remove_pending_incoming_request";
      v23 = (void *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      v57 = OS_LOG_TYPE_DEFAULT;
      if (!__nwlog_fault((const char *)v23, type, &v57))
        goto LABEL_46;
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v45 = objc_claimAutoreleasedReturnValue();
        v48 = type[0];
        if (os_log_type_enabled(v45, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_service_connector_remove_pending_incoming_request";
          _os_log_impl(&dword_182FBE000, v45, v48, "%{public}s called with null serviceConnector->pendingIncomingRequests", buf, 0xCu);
        }
      }
      else if (v57)
      {
        v29 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v45 = objc_claimAutoreleasedReturnValue();
        v52 = type[0];
        v53 = os_log_type_enabled(v45, type[0]);
        if (v29)
        {
          if (v53)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_service_connector_remove_pending_incoming_request";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v29;
            _os_log_impl(&dword_182FBE000, v45, v52, "%{public}s called with null serviceConnector->pendingIncomingRequests, dumping backtrace:%{public}s", buf, 0x16u);
          }

          goto LABEL_33;
        }
        if (v53)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_service_connector_remove_pending_incoming_request";
          _os_log_impl(&dword_182FBE000, v45, v52, "%{public}s called with null serviceConnector->pendingIncomingRequests, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v45 = objc_claimAutoreleasedReturnValue();
        v55 = type[0];
        if (os_log_type_enabled(v45, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_service_connector_remove_pending_incoming_request";
          _os_log_impl(&dword_182FBE000, v45, v55, "%{public}s called with null serviceConnector->pendingIncomingRequests, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
    else
    {
      __nwlog_obj();
      v44 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_service_connector_remove_pending_incoming_request";
      v23 = (void *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      v57 = OS_LOG_TYPE_DEFAULT;
      if (!__nwlog_fault((const char *)v23, type, &v57))
        goto LABEL_46;
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v45 = objc_claimAutoreleasedReturnValue();
        v46 = type[0];
        if (os_log_type_enabled(v45, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_service_connector_remove_pending_incoming_request";
          _os_log_impl(&dword_182FBE000, v45, v46, "%{public}s called with null serviceConnector", buf, 0xCu);
        }
      }
      else if (v57)
      {
        v49 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v45 = objc_claimAutoreleasedReturnValue();
        v50 = type[0];
        v51 = os_log_type_enabled(v45, type[0]);
        if (v49)
        {
          if (v51)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_service_connector_remove_pending_incoming_request";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v49;
            _os_log_impl(&dword_182FBE000, v45, v50, "%{public}s called with null serviceConnector, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v49);
          goto LABEL_46;
        }
        if (v51)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_service_connector_remove_pending_incoming_request";
          _os_log_impl(&dword_182FBE000, v45, v50, "%{public}s called with null serviceConnector, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v45 = objc_claimAutoreleasedReturnValue();
        v54 = type[0];
        if (os_log_type_enabled(v45, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_service_connector_remove_pending_incoming_request";
          _os_log_impl(&dword_182FBE000, v45, v54, "%{public}s called with null serviceConnector, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }

    goto LABEL_46;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v10 = (id)gLogObj;
  *(_DWORD *)buf = 136446722;
  *(_QWORD *)&buf[4] = "nw_service_connector_reject_incoming_request";
  *(_WORD *)&buf[12] = 2114;
  *(_QWORD *)&buf[14] = v5;
  *(_WORD *)&buf[22] = 2114;
  *(_QWORD *)&buf[24] = v8;
  v11 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  v57 = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v11, type, &v57))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v12 = (id)gLogObj;
      v13 = type[0];
      if (os_log_type_enabled(v12, type[0]))
      {
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = "nw_service_connector_reject_incoming_request";
        *(_WORD *)&buf[12] = 2114;
        *(_QWORD *)&buf[14] = v5;
        *(_WORD *)&buf[22] = 2114;
        *(_QWORD *)&buf[24] = v8;
        _os_log_impl(&dword_182FBE000, v12, v13, "%{public}s %{public}@ attempted to reject outgoing request %{public}@", buf, 0x20u);
      }
    }
    else if (v57)
    {
      v18 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v12 = (id)gLogObj;
      v19 = type[0];
      v20 = os_log_type_enabled(v12, type[0]);
      if (v18)
      {
        if (v20)
        {
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_service_connector_reject_incoming_request";
          *(_WORD *)&buf[12] = 2114;
          *(_QWORD *)&buf[14] = v5;
          *(_WORD *)&buf[22] = 2114;
          *(_QWORD *)&buf[24] = v8;
          LOWORD(v67) = 2082;
          *(_QWORD *)((char *)&v67 + 2) = v18;
          _os_log_impl(&dword_182FBE000, v12, v19, "%{public}s %{public}@ attempted to reject outgoing request %{public}@, dumping backtrace:%{public}s", buf, 0x2Au);
        }

        free(v18);
        if (v11)
          goto LABEL_39;
        goto LABEL_64;
      }
      if (v20)
      {
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = "nw_service_connector_reject_incoming_request";
        *(_WORD *)&buf[12] = 2114;
        *(_QWORD *)&buf[14] = v5;
        *(_WORD *)&buf[22] = 2114;
        *(_QWORD *)&buf[24] = v8;
        _os_log_impl(&dword_182FBE000, v12, v19, "%{public}s %{public}@ attempted to reject outgoing request %{public}@, no backtrace", buf, 0x20u);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v12 = (id)gLogObj;
      v27 = type[0];
      if (os_log_type_enabled(v12, type[0]))
      {
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = "nw_service_connector_reject_incoming_request";
        *(_WORD *)&buf[12] = 2114;
        *(_QWORD *)&buf[14] = v5;
        *(_WORD *)&buf[22] = 2114;
        *(_QWORD *)&buf[24] = v8;
        _os_log_impl(&dword_182FBE000, v12, v27, "%{public}s %{public}@ attempted to reject outgoing request %{public}@, backtrace limit exceeded", buf, 0x20u);
      }
    }

  }
  if (v11)
LABEL_39:
    free(v11);
LABEL_64:

}

void sub_18387CD8C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

BOOL nwsc_compare_uuid(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned int v2;
  unsigned int v3;

  v2 = *a1;
  v3 = *a2;
  if (v2 != v3)
    return v2 > v3;
  v2 = a1[1];
  v3 = a2[1];
  if (v2 != v3)
    return v2 > v3;
  v2 = a1[2];
  v3 = a2[2];
  if (v2 != v3)
    return v2 > v3;
  v2 = a1[3];
  v3 = a2[3];
  if (v2 != v3)
    return v2 > v3;
  v2 = a1[4];
  v3 = a2[4];
  if (v2 != v3)
    return v2 > v3;
  v2 = a1[5];
  v3 = a2[5];
  if (v2 != v3)
    return v2 > v3;
  v2 = a1[6];
  v3 = a2[6];
  if (v2 != v3)
    return v2 > v3;
  v2 = a1[7];
  v3 = a2[7];
  if (v2 != v3)
    return v2 > v3;
  v2 = a1[8];
  v3 = a2[8];
  if (v2 != v3)
    return v2 > v3;
  v2 = a1[9];
  v3 = a2[9];
  if (v2 != v3)
    return v2 > v3;
  v2 = a1[10];
  v3 = a2[10];
  if (v2 != v3)
    return v2 > v3;
  v2 = a1[11];
  v3 = a2[11];
  if (v2 != v3)
    return v2 > v3;
  v2 = a1[12];
  v3 = a2[12];
  if (v2 != v3)
    return v2 > v3;
  v2 = a1[13];
  v3 = a2[13];
  if (v2 == v3 && (v2 = a1[14], v3 = a2[14], v2 == v3) && (v2 = a1[15], v3 = a2[15], v2 == v3))
    return 0;
  else
    return v2 > v3;
}

void ___ZL29nwsc_process_incoming_requestP31NWConcrete_nw_service_connectorP39NWConcrete_nw_unique_connection_request_block_invoke(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  const char *v8;
  __int16 v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v4 = (id)gLogObj;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v5 = *(_QWORD *)(a1 + 32);
      v6 = *(_QWORD *)(a1 + 48);
      v7 = 136446978;
      v8 = "nwsc_process_incoming_request_block_invoke";
      v9 = 2114;
      v10 = v5;
      v11 = 2114;
      v12 = v6;
      v13 = 1024;
      v14 = a2;
      _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ error when accepting request %{public}@ %{darwin.errno}d", (uint8_t *)&v7, 0x26u);
    }

    nw_service_connector_cancel_request_inner(*(void **)(a1 + 32), *(void **)(*(_QWORD *)(a1 + 48) + 8), *(_QWORD *)(a1 + 48) + 24, *(void **)(*(_QWORD *)(a1 + 48) + 576), 0);
    nw_service_connector_trigger_request_complete_block_inner(*(void **)(a1 + 32), *(void **)(a1 + 40), 0, 0, a2);
  }
  else
  {
    nw_service_connector_trigger_request_complete_block_inner(*(void **)(a1 + 32), *(void **)(a1 + 40), 0, *(void **)(*(_QWORD *)(a1 + 48) + 576), 0);
  }
}

void nw_service_connector_handle_unsolicited_requests(NWConcrete_nw_service_connector *a1, NWConcrete_nw_unique_connection_request *a2)
{
  NWConcrete_nw_service_connector *v3;
  NWConcrete_nw_unique_connection_request *v4;
  NSObject *v5;
  NWConcrete_nw_unique_connection_request *v6;
  NWConcrete_nw_unique_connection_request *v7;
  unint64_t sequenceNumber;
  unint64_t v9;
  NSObject *v10;
  _BOOL4 v11;
  NWConcrete_nw_service_connector *v12;
  NWConcrete_nw_unique_connection_request *v13;
  NWConcrete_nw_unique_connection_request *v14;
  id v15;
  OS_nw_endpoint *endpoint;
  const char *v17;
  NSObject *v18;
  os_log_type_t v19;
  OS_nw_endpoint *v20;
  char *backtrace_string;
  os_log_type_t v22;
  _BOOL4 v23;
  OS_nw_endpoint *v24;
  os_log_type_t v25;
  OS_nw_endpoint *v26;
  OS_nw_endpoint *v27;
  char *v28;
  NSObject *serviceConnectorQueue;
  void *v30;
  const char *v31;
  NSObject *v32;
  os_log_type_t v33;
  void *v34;
  os_log_type_t v35;
  char *v36;
  os_log_type_t v37;
  _BOOL4 v38;
  char *v39;
  os_log_type_t v40;
  _BOOL4 v41;
  os_log_type_t v42;
  os_log_type_t v43;
  _QWORD block[4];
  NWConcrete_nw_unique_connection_request *v45;
  NWConcrete_nw_unique_connection_request *v46;
  char v47;
  os_log_type_t type;
  uint8_t v49[4];
  const char *v50;
  __int16 v51;
  OS_nw_endpoint *v52;
  __int16 v53;
  char *service;
  __int16 v55;
  char *v56;
  uint8_t buf[32];
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  int v83;
  uint64_t v84;

  v84 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v5 = (id)gLogObj;
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446722;
    *(_QWORD *)&buf[4] = "nw_service_connector_handle_unsolicited_requests";
    *(_WORD *)&buf[12] = 2114;
    *(_QWORD *)&buf[14] = v3;
    *(_WORD *)&buf[22] = 2114;
    *(_QWORD *)&buf[24] = v4;
    _os_log_impl(&dword_182FBE000, v5, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ handling unsolicited incoming request %{public}@", buf, 0x20u);
  }

  v6 = (NWConcrete_nw_unique_connection_request *)nw_service_connector_copy_pending_incoming_request(v3, v4->endpoint, (uint64_t)v4->service);
  v7 = v6;
  if (!v6)
  {
LABEL_11:

    v12 = v3;
    v13 = v4;
    v14 = v13;
    if (v12)
    {
      if (v12->pendingIncomingRequests)
      {
        *((_BYTE *)v13 + 616) |= 2u;
        v83 = 0;
        v81 = 0u;
        v82 = 0u;
        v79 = 0u;
        v80 = 0u;
        v77 = 0u;
        v78 = 0u;
        v75 = 0u;
        v76 = 0u;
        v73 = 0u;
        v74 = 0u;
        v71 = 0u;
        v72 = 0u;
        v69 = 0u;
        v70 = 0u;
        v67 = 0u;
        v68 = 0u;
        v65 = 0u;
        v66 = 0u;
        v63 = 0u;
        v64 = 0u;
        v61 = 0u;
        v62 = 0u;
        v59 = 0u;
        v60 = 0u;
        v58 = 0u;
        memset(buf, 0, sizeof(buf));
        if (nwsc_get_identifier(v4->endpoint, (uint64_t)v4->service, buf))
        {
          nw_dictionary_set_value((uint64_t)v12->pendingIncomingRequests, (const char *)buf, v14);
LABEL_35:

          serviceConnectorQueue = v12->serviceConnectorQueue;
          block[0] = MEMORY[0x1E0C809B0];
          block[1] = 3221225472;
          block[2] = ___ZL48nw_service_connector_handle_unsolicited_requestsP31NWConcrete_nw_service_connectorP39NWConcrete_nw_unique_connection_request_block_invoke;
          block[3] = &unk_1E14ACE68;
          v45 = v12;
          v46 = v14;
          dispatch_async(serviceConnectorQueue, block);

          v7 = v45;
          goto LABEL_36;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v15 = (id)gLogObj;
        endpoint = v4->endpoint;
        *(_DWORD *)v49 = 136446722;
        v50 = "nw_service_connector_add_pending_incoming_request";
        v51 = 2114;
        v52 = endpoint;
        v53 = 2082;
        service = v4->service;
        v17 = (const char *)_os_log_send_and_compose_impl();

        type = OS_LOG_TYPE_ERROR;
        v47 = 0;
        if (__nwlog_fault(v17, &type, &v47))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v18 = (id)gLogObj;
            v19 = type;
            if (os_log_type_enabled(v18, type))
            {
              v20 = v4->endpoint;
              *(_DWORD *)v49 = 136446722;
              v50 = "nw_service_connector_add_pending_incoming_request";
              v51 = 2114;
              v52 = v20;
              v53 = 2082;
              service = v4->service;
              _os_log_impl(&dword_182FBE000, v18, v19, "%{public}s Could not get identifier for endpoint %{public}@, service %{public}s", v49, 0x20u);
            }
          }
          else if (v47)
          {
            backtrace_string = (char *)__nw_create_backtrace_string();
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v18 = (id)gLogObj;
            v22 = type;
            v23 = os_log_type_enabled(v18, type);
            if (backtrace_string)
            {
              if (v23)
              {
                v24 = v4->endpoint;
                *(_DWORD *)v49 = 136446978;
                v50 = "nw_service_connector_add_pending_incoming_request";
                v51 = 2114;
                v52 = v24;
                v53 = 2082;
                service = v4->service;
                v55 = 2082;
                v56 = backtrace_string;
                _os_log_impl(&dword_182FBE000, v18, v22, "%{public}s Could not get identifier for endpoint %{public}@, service %{public}s, dumping backtrace:%{public}s", v49, 0x2Au);
              }

              free(backtrace_string);
              if (!v17)
                goto LABEL_35;
LABEL_33:
              v28 = (char *)v17;
LABEL_34:
              free(v28);
              goto LABEL_35;
            }
            if (v23)
            {
              v27 = v4->endpoint;
              *(_DWORD *)v49 = 136446722;
              v50 = "nw_service_connector_add_pending_incoming_request";
              v51 = 2114;
              v52 = v27;
              v53 = 2082;
              service = v4->service;
              _os_log_impl(&dword_182FBE000, v18, v22, "%{public}s Could not get identifier for endpoint %{public}@, service %{public}s, no backtrace", v49, 0x20u);
            }
          }
          else
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v18 = (id)gLogObj;
            v25 = type;
            if (os_log_type_enabled(v18, type))
            {
              v26 = v4->endpoint;
              *(_DWORD *)v49 = 136446722;
              v50 = "nw_service_connector_add_pending_incoming_request";
              v51 = 2114;
              v52 = v26;
              v53 = 2082;
              service = v4->service;
              _os_log_impl(&dword_182FBE000, v18, v25, "%{public}s Could not get identifier for endpoint %{public}@, service %{public}s, backtrace limit exceeded", v49, 0x20u);
            }
          }

        }
        if (!v17)
          goto LABEL_35;
        goto LABEL_33;
      }
      __nwlog_obj();
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_service_connector_add_pending_incoming_request";
      v31 = (const char *)_os_log_send_and_compose_impl();

      v49[0] = 16;
      type = OS_LOG_TYPE_DEFAULT;
      if (!__nwlog_fault(v31, v49, &type))
        goto LABEL_70;
      if (v49[0] == 17)
      {
        __nwlog_obj();
        v32 = objc_claimAutoreleasedReturnValue();
        v35 = v49[0];
        if (os_log_type_enabled(v32, (os_log_type_t)v49[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_service_connector_add_pending_incoming_request";
          _os_log_impl(&dword_182FBE000, v32, v35, "%{public}s called with null serviceConnector->pendingIncomingRequests", buf, 0xCu);
        }
      }
      else if (type)
      {
        v39 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v32 = objc_claimAutoreleasedReturnValue();
        v40 = v49[0];
        v41 = os_log_type_enabled(v32, (os_log_type_t)v49[0]);
        if (v39)
        {
          if (v41)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_service_connector_add_pending_incoming_request";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v39;
            _os_log_impl(&dword_182FBE000, v32, v40, "%{public}s called with null serviceConnector->pendingIncomingRequests, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v39);
          if (!v31)
            goto LABEL_35;
LABEL_71:
          v28 = (char *)v31;
          goto LABEL_34;
        }
        if (v41)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_service_connector_add_pending_incoming_request";
          _os_log_impl(&dword_182FBE000, v32, v40, "%{public}s called with null serviceConnector->pendingIncomingRequests, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v32 = objc_claimAutoreleasedReturnValue();
        v43 = v49[0];
        if (os_log_type_enabled(v32, (os_log_type_t)v49[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_service_connector_add_pending_incoming_request";
          _os_log_impl(&dword_182FBE000, v32, v43, "%{public}s called with null serviceConnector->pendingIncomingRequests, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
    else
    {
      __nwlog_obj();
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_service_connector_add_pending_incoming_request";
      v31 = (const char *)_os_log_send_and_compose_impl();

      v49[0] = 16;
      type = OS_LOG_TYPE_DEFAULT;
      if (!__nwlog_fault(v31, v49, &type))
        goto LABEL_70;
      if (v49[0] == 17)
      {
        __nwlog_obj();
        v32 = objc_claimAutoreleasedReturnValue();
        v33 = v49[0];
        if (os_log_type_enabled(v32, (os_log_type_t)v49[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_service_connector_add_pending_incoming_request";
          _os_log_impl(&dword_182FBE000, v32, v33, "%{public}s called with null serviceConnector", buf, 0xCu);
        }
      }
      else if (type)
      {
        v36 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v32 = objc_claimAutoreleasedReturnValue();
        v37 = v49[0];
        v38 = os_log_type_enabled(v32, (os_log_type_t)v49[0]);
        if (v36)
        {
          if (v38)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_service_connector_add_pending_incoming_request";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v36;
            _os_log_impl(&dword_182FBE000, v32, v37, "%{public}s called with null serviceConnector, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v36);
LABEL_70:
          if (!v31)
            goto LABEL_35;
          goto LABEL_71;
        }
        if (v38)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_service_connector_add_pending_incoming_request";
          _os_log_impl(&dword_182FBE000, v32, v37, "%{public}s called with null serviceConnector, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v32 = objc_claimAutoreleasedReturnValue();
        v42 = v49[0];
        if (os_log_type_enabled(v32, (os_log_type_t)v49[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_service_connector_add_pending_incoming_request";
          _os_log_impl(&dword_182FBE000, v32, v42, "%{public}s called with null serviceConnector, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }

    goto LABEL_70;
  }
  sequenceNumber = v6->sequenceNumber;
  v9 = v4->sequenceNumber;
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v10 = (id)gLogObj;
  v11 = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
  if (sequenceNumber <= v9)
  {
    if (v11)
    {
      *(_DWORD *)buf = 136446978;
      *(_QWORD *)&buf[4] = "nw_service_connector_handle_unsolicited_requests";
      *(_WORD *)&buf[12] = 2114;
      *(_QWORD *)&buf[14] = v3;
      *(_WORD *)&buf[22] = 2114;
      *(_QWORD *)&buf[24] = v7;
      LOWORD(v58) = 2114;
      *(_QWORD *)((char *)&v58 + 2) = v4;
      _os_log_impl(&dword_182FBE000, v10, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ rejecting %{public}@ in favor of %{public}@", buf, 0x2Au);
    }

    nw_service_connector_reject_incoming_request(v3, v7, 0);
    goto LABEL_11;
  }
  if (v11)
  {
    *(_DWORD *)buf = 136446978;
    *(_QWORD *)&buf[4] = "nw_service_connector_handle_unsolicited_requests";
    *(_WORD *)&buf[12] = 2114;
    *(_QWORD *)&buf[14] = v3;
    *(_WORD *)&buf[22] = 2114;
    *(_QWORD *)&buf[24] = v4;
    LOWORD(v58) = 2114;
    *(_QWORD *)((char *)&v58 + 2) = v7;
    _os_log_impl(&dword_182FBE000, v10, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ rejecting %{public}@ in favor of %{public}@", buf, 0x2Au);
  }

  nw_service_connector_reject_incoming_request(v3, v4, 0);
LABEL_36:

}

void sub_18387DA94(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void ___ZL29nwsc_process_incoming_requestP31NWConcrete_nw_service_connectorP39NWConcrete_nw_unique_connection_request_block_invoke_188(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  const char *v8;
  __int16 v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v4 = (id)gLogObj;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v5 = *(_QWORD *)(a1 + 32);
      v6 = *(_QWORD *)(a1 + 48);
      v7 = 136446978;
      v8 = "nwsc_process_incoming_request_block_invoke";
      v9 = 2114;
      v10 = v5;
      v11 = 2114;
      v12 = v6;
      v13 = 1024;
      v14 = a2;
      _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ error when accepting request %{public}@ %{darwin.errno}d", (uint8_t *)&v7, 0x26u);
    }

    nw_service_connector_cancel_request_inner(*(void **)(a1 + 32), *(void **)(*(_QWORD *)(a1 + 48) + 8), *(_QWORD *)(a1 + 48) + 24, *(void **)(*(_QWORD *)(a1 + 48) + 576), 0);
    nw_service_connector_trigger_request_complete_block_inner(*(void **)(a1 + 32), *(void **)(a1 + 40), 0, 0, a2);
  }
  else
  {
    nw_service_connector_trigger_request_complete_block_inner(*(void **)(a1 + 32), *(void **)(a1 + 40), 0, *(void **)(*(_QWORD *)(a1 + 48) + 576), 0);
  }
}

void *nw_service_connector_copy_pending_incoming_request(void *a1, void *a2, uint64_t a3)
{
  uint64_t *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  const char *v10;
  NSObject *v11;
  os_log_type_t v12;
  char *v13;
  os_log_type_t v14;
  _BOOL4 v15;
  os_log_type_t v16;
  char *v17;
  void *v19;
  const char *v20;
  NSObject *v21;
  os_log_type_t v22;
  void *v23;
  os_log_type_t v24;
  void *v25;
  os_log_type_t v26;
  void *v27;
  os_log_type_t v28;
  char *backtrace_string;
  os_log_type_t v30;
  _BOOL4 v31;
  os_log_type_t v32;
  _BOOL4 v33;
  os_log_type_t v34;
  _BOOL4 v35;
  os_log_type_t v36;
  _BOOL4 v37;
  os_log_type_t v38;
  os_log_type_t v39;
  os_log_type_t v40;
  os_log_type_t v41;
  char v42;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v45;
  __int16 v46;
  void *v47;
  __int16 v48;
  uint64_t v49;
  __int16 v50;
  char *v51;
  uint8_t v52[32];
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  int v78;
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = v6;
  if (!v5)
  {
    __nwlog_obj();
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)v52 = 136446210;
    *(_QWORD *)&v52[4] = "nw_service_connector_copy_pending_incoming_request";
    v20 = (const char *)_os_log_send_and_compose_impl();

    buf[0] = 16;
    type = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v20, buf, &type))
      goto LABEL_69;
    if (buf[0] == 17)
    {
      __nwlog_obj();
      v21 = objc_claimAutoreleasedReturnValue();
      v22 = buf[0];
      if (os_log_type_enabled(v21, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)v52 = 136446210;
        *(_QWORD *)&v52[4] = "nw_service_connector_copy_pending_incoming_request";
        _os_log_impl(&dword_182FBE000, v21, v22, "%{public}s called with null serviceConnector", v52, 0xCu);
      }
      goto LABEL_94;
    }
    if (type == OS_LOG_TYPE_DEFAULT)
    {
      __nwlog_obj();
      v21 = objc_claimAutoreleasedReturnValue();
      v38 = buf[0];
      if (os_log_type_enabled(v21, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)v52 = 136446210;
        *(_QWORD *)&v52[4] = "nw_service_connector_copy_pending_incoming_request";
        _os_log_impl(&dword_182FBE000, v21, v38, "%{public}s called with null serviceConnector, backtrace limit exceeded", v52, 0xCu);
      }
      goto LABEL_94;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v21 = objc_claimAutoreleasedReturnValue();
    v30 = buf[0];
    v31 = os_log_type_enabled(v21, (os_log_type_t)buf[0]);
    if (!backtrace_string)
    {
      if (v31)
      {
        *(_DWORD *)v52 = 136446210;
        *(_QWORD *)&v52[4] = "nw_service_connector_copy_pending_incoming_request";
        _os_log_impl(&dword_182FBE000, v21, v30, "%{public}s called with null serviceConnector, no backtrace", v52, 0xCu);
      }
      goto LABEL_94;
    }
    if (v31)
    {
      *(_DWORD *)v52 = 136446466;
      *(_QWORD *)&v52[4] = "nw_service_connector_copy_pending_incoming_request";
      *(_WORD *)&v52[12] = 2082;
      *(_QWORD *)&v52[14] = backtrace_string;
      _os_log_impl(&dword_182FBE000, v21, v30, "%{public}s called with null serviceConnector, dumping backtrace:%{public}s", v52, 0x16u);
    }
LABEL_68:

    free(backtrace_string);
    goto LABEL_69;
  }
  if (!v5[10])
  {
    __nwlog_obj();
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)v52 = 136446210;
    *(_QWORD *)&v52[4] = "nw_service_connector_copy_pending_incoming_request";
    v20 = (const char *)_os_log_send_and_compose_impl();

    buf[0] = 16;
    type = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v20, buf, &type))
      goto LABEL_69;
    if (buf[0] == 17)
    {
      __nwlog_obj();
      v21 = objc_claimAutoreleasedReturnValue();
      v24 = buf[0];
      if (os_log_type_enabled(v21, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)v52 = 136446210;
        *(_QWORD *)&v52[4] = "nw_service_connector_copy_pending_incoming_request";
        _os_log_impl(&dword_182FBE000, v21, v24, "%{public}s called with null serviceConnector->pendingIncomingRequests", v52, 0xCu);
      }
      goto LABEL_94;
    }
    if (type == OS_LOG_TYPE_DEFAULT)
    {
      __nwlog_obj();
      v21 = objc_claimAutoreleasedReturnValue();
      v39 = buf[0];
      if (os_log_type_enabled(v21, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)v52 = 136446210;
        *(_QWORD *)&v52[4] = "nw_service_connector_copy_pending_incoming_request";
        _os_log_impl(&dword_182FBE000, v21, v39, "%{public}s called with null serviceConnector->pendingIncomingRequests, backtrace limit exceeded", v52, 0xCu);
      }
      goto LABEL_94;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v21 = objc_claimAutoreleasedReturnValue();
    v32 = buf[0];
    v33 = os_log_type_enabled(v21, (os_log_type_t)buf[0]);
    if (!backtrace_string)
    {
      if (v33)
      {
        *(_DWORD *)v52 = 136446210;
        *(_QWORD *)&v52[4] = "nw_service_connector_copy_pending_incoming_request";
        _os_log_impl(&dword_182FBE000, v21, v32, "%{public}s called with null serviceConnector->pendingIncomingRequests, no backtrace", v52, 0xCu);
      }
      goto LABEL_94;
    }
    if (v33)
    {
      *(_DWORD *)v52 = 136446466;
      *(_QWORD *)&v52[4] = "nw_service_connector_copy_pending_incoming_request";
      *(_WORD *)&v52[12] = 2082;
      *(_QWORD *)&v52[14] = backtrace_string;
      _os_log_impl(&dword_182FBE000, v21, v32, "%{public}s called with null serviceConnector->pendingIncomingRequests, dumping backtrace:%{public}s", v52, 0x16u);
    }
    goto LABEL_68;
  }
  if (!v6)
  {
    __nwlog_obj();
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)v52 = 136446210;
    *(_QWORD *)&v52[4] = "nw_service_connector_copy_pending_incoming_request";
    v20 = (const char *)_os_log_send_and_compose_impl();

    buf[0] = 16;
    type = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v20, buf, &type))
      goto LABEL_69;
    if (buf[0] == 17)
    {
      __nwlog_obj();
      v21 = objc_claimAutoreleasedReturnValue();
      v26 = buf[0];
      if (os_log_type_enabled(v21, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)v52 = 136446210;
        *(_QWORD *)&v52[4] = "nw_service_connector_copy_pending_incoming_request";
        _os_log_impl(&dword_182FBE000, v21, v26, "%{public}s called with null endpoint", v52, 0xCu);
      }
      goto LABEL_94;
    }
    if (type == OS_LOG_TYPE_DEFAULT)
    {
      __nwlog_obj();
      v21 = objc_claimAutoreleasedReturnValue();
      v40 = buf[0];
      if (os_log_type_enabled(v21, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)v52 = 136446210;
        *(_QWORD *)&v52[4] = "nw_service_connector_copy_pending_incoming_request";
        _os_log_impl(&dword_182FBE000, v21, v40, "%{public}s called with null endpoint, backtrace limit exceeded", v52, 0xCu);
      }
      goto LABEL_94;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v21 = objc_claimAutoreleasedReturnValue();
    v34 = buf[0];
    v35 = os_log_type_enabled(v21, (os_log_type_t)buf[0]);
    if (!backtrace_string)
    {
      if (v35)
      {
        *(_DWORD *)v52 = 136446210;
        *(_QWORD *)&v52[4] = "nw_service_connector_copy_pending_incoming_request";
        _os_log_impl(&dword_182FBE000, v21, v34, "%{public}s called with null endpoint, no backtrace", v52, 0xCu);
      }
      goto LABEL_94;
    }
    if (v35)
    {
      *(_DWORD *)v52 = 136446466;
      *(_QWORD *)&v52[4] = "nw_service_connector_copy_pending_incoming_request";
      *(_WORD *)&v52[12] = 2082;
      *(_QWORD *)&v52[14] = backtrace_string;
      _os_log_impl(&dword_182FBE000, v21, v34, "%{public}s called with null endpoint, dumping backtrace:%{public}s", v52, 0x16u);
    }
    goto LABEL_68;
  }
  if (!a3)
  {
    __nwlog_obj();
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)v52 = 136446210;
    *(_QWORD *)&v52[4] = "nw_service_connector_copy_pending_incoming_request";
    v20 = (const char *)_os_log_send_and_compose_impl();

    buf[0] = 16;
    type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v20, buf, &type))
    {
      if (buf[0] == 17)
      {
        __nwlog_obj();
        v21 = objc_claimAutoreleasedReturnValue();
        v28 = buf[0];
        if (os_log_type_enabled(v21, (os_log_type_t)buf[0]))
        {
          *(_DWORD *)v52 = 136446210;
          *(_QWORD *)&v52[4] = "nw_service_connector_copy_pending_incoming_request";
          _os_log_impl(&dword_182FBE000, v21, v28, "%{public}s called with null service", v52, 0xCu);
        }
LABEL_94:

        goto LABEL_69;
      }
      if (type == OS_LOG_TYPE_DEFAULT)
      {
        __nwlog_obj();
        v21 = objc_claimAutoreleasedReturnValue();
        v41 = buf[0];
        if (os_log_type_enabled(v21, (os_log_type_t)buf[0]))
        {
          *(_DWORD *)v52 = 136446210;
          *(_QWORD *)&v52[4] = "nw_service_connector_copy_pending_incoming_request";
          _os_log_impl(&dword_182FBE000, v21, v41, "%{public}s called with null service, backtrace limit exceeded", v52, 0xCu);
        }
        goto LABEL_94;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v21 = objc_claimAutoreleasedReturnValue();
      v36 = buf[0];
      v37 = os_log_type_enabled(v21, (os_log_type_t)buf[0]);
      if (!backtrace_string)
      {
        if (v37)
        {
          *(_DWORD *)v52 = 136446210;
          *(_QWORD *)&v52[4] = "nw_service_connector_copy_pending_incoming_request";
          _os_log_impl(&dword_182FBE000, v21, v36, "%{public}s called with null service, no backtrace", v52, 0xCu);
        }
        goto LABEL_94;
      }
      if (v37)
      {
        *(_DWORD *)v52 = 136446466;
        *(_QWORD *)&v52[4] = "nw_service_connector_copy_pending_incoming_request";
        *(_WORD *)&v52[12] = 2082;
        *(_QWORD *)&v52[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v21, v36, "%{public}s called with null service, dumping backtrace:%{public}s", v52, 0x16u);
      }
      goto LABEL_68;
    }
LABEL_69:
    if (!v20)
      goto LABEL_27;
    v17 = (char *)v20;
    goto LABEL_26;
  }
  v78 = 0;
  v76 = 0u;
  v77 = 0u;
  v74 = 0u;
  v75 = 0u;
  v72 = 0u;
  v73 = 0u;
  v70 = 0u;
  v71 = 0u;
  v68 = 0u;
  v69 = 0u;
  v66 = 0u;
  v67 = 0u;
  v64 = 0u;
  v65 = 0u;
  v62 = 0u;
  v63 = 0u;
  v60 = 0u;
  v61 = 0u;
  v58 = 0u;
  v59 = 0u;
  v56 = 0u;
  v57 = 0u;
  v54 = 0u;
  v55 = 0u;
  v53 = 0u;
  memset(v52, 0, sizeof(v52));
  if (!nwsc_get_identifier(v6, a3, v52))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v9 = (id)gLogObj;
    *(_DWORD *)buf = 136446722;
    v45 = "nw_service_connector_copy_pending_incoming_request";
    v46 = 2114;
    v47 = v7;
    v48 = 2082;
    v49 = a3;
    v10 = (const char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v42 = 0;
    if (__nwlog_fault(v10, &type, &v42))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v11 = (id)gLogObj;
        v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446722;
          v45 = "nw_service_connector_copy_pending_incoming_request";
          v46 = 2114;
          v47 = v7;
          v48 = 2082;
          v49 = a3;
          _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s Could not get identifier for endpoint %{public}@, service %{public}s", buf, 0x20u);
        }
      }
      else if (v42)
      {
        v13 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v11 = (id)gLogObj;
        v14 = type;
        v15 = os_log_type_enabled(v11, type);
        if (v13)
        {
          if (v15)
          {
            *(_DWORD *)buf = 136446978;
            v45 = "nw_service_connector_copy_pending_incoming_request";
            v46 = 2114;
            v47 = v7;
            v48 = 2082;
            v49 = a3;
            v50 = 2082;
            v51 = v13;
            _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s Could not get identifier for endpoint %{public}@, service %{public}s, dumping backtrace:%{public}s", buf, 0x2Au);
          }

          free(v13);
          if (!v10)
            goto LABEL_27;
LABEL_25:
          v17 = (char *)v10;
LABEL_26:
          free(v17);
          goto LABEL_27;
        }
        if (v15)
        {
          *(_DWORD *)buf = 136446722;
          v45 = "nw_service_connector_copy_pending_incoming_request";
          v46 = 2114;
          v47 = v7;
          v48 = 2082;
          v49 = a3;
          _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s Could not get identifier for endpoint %{public}@, service %{public}s, no backtrace", buf, 0x20u);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v11 = (id)gLogObj;
        v16 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446722;
          v45 = "nw_service_connector_copy_pending_incoming_request";
          v46 = 2114;
          v47 = v7;
          v48 = 2082;
          v49 = a3;
          _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s Could not get identifier for endpoint %{public}@, service %{public}s, backtrace limit exceeded", buf, 0x20u);
        }
      }

    }
    if (!v10)
    {
LABEL_27:
      v8 = 0;
      goto LABEL_28;
    }
    goto LABEL_25;
  }
  v8 = nw_dictionary_copy_value(v5[10], (uint64_t)v52);
LABEL_28:

  return v8;
}

void sub_18387E814(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void ___ZL48nw_service_connector_handle_unsolicited_requestsP31NWConcrete_nw_service_connectorP39NWConcrete_nw_unique_connection_request_block_invoke(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  _BOOL4 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  dispatch_time_t v16;
  uint64_t v17;
  _QWORD v18[4];
  id v19;
  id v20;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  uint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  if (*(_DWORD *)(v2 + 16) == 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v3 = (id)gLogObj;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      v4 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 136446466;
      v22 = "nw_service_connector_handle_unsolicited_requests_block_invoke";
      v23 = 2114;
      v24 = v4;
      _os_log_impl(&dword_182FBE000, v3, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ already cancelled, ignoring unsolicited request", buf, 0x16u);
    }

  }
  else
  {
    v5 = *(_QWORD *)(v2 + 64);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v6 = (id)gLogObj;
    v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
    if (v5)
    {
      if (v7)
      {
        v8 = *(_QWORD *)(a1 + 32);
        v9 = *(_QWORD *)(a1 + 40);
        v10 = *(_QWORD *)(v9 + 8);
        *(_DWORD *)buf = 136447234;
        v22 = "nw_service_connector_handle_unsolicited_requests_block_invoke";
        v23 = 2114;
        v24 = v8;
        v25 = 2114;
        v26 = v10;
        v27 = 2082;
        v28 = v9 + 24;
        v29 = 2114;
        v30 = v9;
        _os_log_impl(&dword_182FBE000, v6, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ calling client service available block with %{public}@ \"%{public}s\" for %{public}@", buf, 0x34u);
      }

      (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 64) + 16))();
    }
    else
    {
      if (v7)
      {
        v11 = *(_QWORD *)(a1 + 32);
        v12 = *(_QWORD *)(a1 + 40);
        *(_DWORD *)buf = 136446722;
        v22 = "nw_service_connector_handle_unsolicited_requests_block_invoke";
        v23 = 2114;
        v24 = v11;
        v25 = 2114;
        v26 = v12;
        _os_log_impl(&dword_182FBE000, v6, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ no client service available block to call for %{public}@", buf, 0x20u);
      }

    }
    objc_initWeak((id *)buf, *(id *)(a1 + 40));
    v14 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 600);
    if (v14)
    {
      nw_queue_cancel_source(v14, v13);
      *(_QWORD *)(*(_QWORD *)(a1 + 40) + 600) = 0;
    }
    v18[0] = MEMORY[0x1E0C809B0];
    v18[1] = 3221225472;
    v18[2] = ___ZL48nw_service_connector_handle_unsolicited_requestsP31NWConcrete_nw_service_connectorP39NWConcrete_nw_unique_connection_request_block_invoke_192;
    v18[3] = &unk_1E14AB250;
    v19 = *(id *)(a1 + 32);
    objc_copyWeak(&v20, (id *)buf);
    *(_QWORD *)(*(_QWORD *)(a1 + 40) + 600) = nw_queue_context_create_source(0, 2, 3, 0, v18, 0);
    v15 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 600);
    v16 = dispatch_time(0x8000000000000000, 20000000000);
    nw_queue_set_timer_values(v15, v16, 0xFFFFFFFFFFFFFFFFLL, 0xF4240uLL);
    nw_queue_activate_source(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 600), v17);
    objc_destroyWeak(&v20);

    objc_destroyWeak((id *)buf);
  }
}

void sub_18387EB34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void ___ZL48nw_service_connector_handle_unsolicited_requestsP31NWConcrete_nw_service_connectorP39NWConcrete_nw_unique_connection_request_block_invoke_192(uint64_t a1)
{
  NSObject *v2;
  _QWORD v3[4];
  id v4;
  id v5;

  v2 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 32);
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = ___ZL48nw_service_connector_handle_unsolicited_requestsP31NWConcrete_nw_service_connectorP39NWConcrete_nw_unique_connection_request_block_invoke_2;
  v3[3] = &unk_1E14AB250;
  objc_copyWeak(&v5, (id *)(a1 + 40));
  v4 = *(id *)(a1 + 32);
  dispatch_async(v2, v3);

  objc_destroyWeak(&v5);
}

void ___ZL48nw_service_connector_handle_unsolicited_requestsP31NWConcrete_nw_service_connectorP39NWConcrete_nw_unique_connection_request_block_invoke_2(uint64_t a1)
{
  NWConcrete_nw_unique_connection_request *WeakRetained;
  NWConcrete_nw_unique_connection_request *v3;
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  OS_nw_endpoint *endpoint;
  int v9;
  const char *v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  OS_nw_endpoint *v14;
  __int16 v15;
  char *service;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  NWConcrete_nw_unique_connection_request *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  WeakRetained = (NWConcrete_nw_unique_connection_request *)objc_loadWeakRetained((id *)(a1 + 40));
  v3 = WeakRetained;
  if (WeakRetained)
  {
    if (*(_DWORD *)(*(_QWORD *)(a1 + 32) + 16) == 4)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v4 = (id)gLogObj;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        v5 = *(_QWORD *)(a1 + 32);
        v9 = 136446466;
        v10 = "nw_service_connector_handle_unsolicited_requests_block_invoke_2";
        v11 = 2114;
        v12 = v5;
        _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ already cancelled, ignoring unsolicited request timeout", (uint8_t *)&v9, 0x16u);
      }

    }
    else if ((*((_BYTE *)WeakRetained + 616) & 2) != 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v6 = (id)gLogObj;
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        v7 = *(_QWORD *)(a1 + 32);
        endpoint = v3->endpoint;
        v9 = 136447490;
        v10 = "nw_service_connector_handle_unsolicited_requests_block_invoke";
        v11 = 2114;
        v12 = v7;
        v13 = 2114;
        v14 = endpoint;
        v15 = 2082;
        service = v3->service;
        v17 = 2048;
        v18 = 20;
        v19 = 2114;
        v20 = v3;
        _os_log_impl(&dword_182FBE000, v6, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ client did not react to service available block for %{public}@ \"%{public}s\" after %llds, rejecting %{public}@", (uint8_t *)&v9, 0x3Eu);
      }

      nw_service_connector_reject_incoming_request(*(NWConcrete_nw_service_connector **)(a1 + 32), v3, 1);
    }
  }

}

void sub_18387EDF0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZL18nwsc_send_feedbackP31NWConcrete_nw_service_connectorP24NWConcrete_nw_connectionybbU13block_pointerFviE_block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  NSObject *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  const char *v13;
  const char *v14;
  uint64_t v15;
  NSObject *v16;
  int v17;
  const char *v18;
  NSObject *v19;
  uint64_t v20;
  const char *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  int v26;
  const char *v27;
  char *v28;
  NSObject *v29;
  os_log_type_t v30;
  const char *v31;
  char *backtrace_string;
  os_log_type_t v33;
  _BOOL4 v34;
  const char *v35;
  os_log_type_t v36;
  const char *v37;
  const char *v38;
  char v39;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v42;
  __int16 v43;
  const char *v44;
  __int16 v45;
  _BYTE v46[18];
  __int16 v47;
  uint64_t v48;
  __int16 v49;
  int v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = v3;
  if (*(_DWORD *)(*(_QWORD *)(a1 + 32) + 16) == 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v5 = (id)gLogObj;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v6 = *(const char **)(a1 + 32);
      v7 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)buf = 136446722;
      v42 = "nwsc_send_feedback_block_invoke";
      v43 = 2114;
      v44 = v6;
      v45 = 2114;
      *(_QWORD *)v46 = v7;
      _os_log_impl(&dword_182FBE000, v5, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ already cancelled, ignoring connection %{public}@ send callback", buf, 0x20u);
    }

    nw_connection_cancel(*(nw_connection_t *)(a1 + 40));
    v8 = *(_QWORD *)(a1 + 56);
    if (v8)
      (*(void (**)(uint64_t, uint64_t))(v8 + 16))(v8, 22);
    goto LABEL_30;
  }
  if (!v3)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v19 = (id)gLogObj;
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      v20 = *(_QWORD *)(a1 + 64);
      if (*(_BYTE *)(a1 + 72))
        v21 = "accept";
      else
        v21 = "deny";
      v22 = *(const char **)(a1 + 32);
      v23 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)buf = 136447234;
      v42 = "nwsc_send_feedback_block_invoke";
      v43 = 2114;
      v44 = v22;
      v45 = 2082;
      *(_QWORD *)v46 = v21;
      *(_WORD *)&v46[8] = 2048;
      *(_QWORD *)&v46[10] = v20;
      v47 = 2114;
      v48 = v23;
      _os_log_impl(&dword_182FBE000, v19, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ sent %{public}s feedback seq %llu on connection %{public}@", buf, 0x34u);
    }

    v10 = 0;
    goto LABEL_26;
  }
  v9 = (unsigned int *)v3;
  v10 = v9[3];

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v11 = (id)gLogObj;
  if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
  {
    v12 = *(_QWORD *)(a1 + 64);
    if (*(_BYTE *)(a1 + 72))
      v13 = "accept";
    else
      v13 = "deny";
    v14 = *(const char **)(a1 + 32);
    v15 = *(_QWORD *)(a1 + 40);
    *(_DWORD *)buf = 136447490;
    v42 = "nwsc_send_feedback_block_invoke";
    v43 = 2114;
    v44 = v14;
    v45 = 2082;
    *(_QWORD *)v46 = v13;
    *(_WORD *)&v46[8] = 2048;
    *(_QWORD *)&v46[10] = v12;
    v47 = 2114;
    v48 = v15;
    v49 = 1024;
    v50 = v10;
    _os_log_impl(&dword_182FBE000, v11, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ failed to send %{public}s feedback seq %llu on %{public}@ %{darwin.errno}d", buf, 0x3Au);
  }

  if ((v10 - 32) > 0x39 || ((1 << (v10 - 32)) & 0x200000212420001) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v25 = (id)gLogObj;
    v26 = *(unsigned __int8 *)(a1 + 72);
    *(_DWORD *)buf = 136446722;
    v42 = "nwsc_send_feedback_block_invoke";
    if (v26)
      v27 = "accept";
    else
      v27 = "deny";
    v43 = 2082;
    v44 = v27;
    v45 = 1024;
    *(_DWORD *)v46 = v10;
    v28 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v39 = 0;
    if (__nwlog_fault(v28, &type, &v39))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v29 = objc_claimAutoreleasedReturnValue();
        v30 = type;
        if (os_log_type_enabled(v29, type))
        {
          if (*(_BYTE *)(a1 + 72))
            v31 = "accept";
          else
            v31 = "deny";
          *(_DWORD *)buf = 136446722;
          v42 = "nwsc_send_feedback_block_invoke";
          v43 = 2082;
          v44 = v31;
          v45 = 1024;
          *(_DWORD *)v46 = v10;
          _os_log_impl(&dword_182FBE000, v29, v30, "%{public}s Failed to send %{public}s feedback %{darwin.errno}d", buf, 0x1Cu);
        }
      }
      else if (v39)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v29 = objc_claimAutoreleasedReturnValue();
        v33 = type;
        v34 = os_log_type_enabled(v29, type);
        if (backtrace_string)
        {
          if (v34)
          {
            if (*(_BYTE *)(a1 + 72))
              v35 = "accept";
            else
              v35 = "deny";
            *(_DWORD *)buf = 136446978;
            v42 = "nwsc_send_feedback_block_invoke";
            v43 = 2082;
            v44 = v35;
            v45 = 1024;
            *(_DWORD *)v46 = v10;
            *(_WORD *)&v46[4] = 2082;
            *(_QWORD *)&v46[6] = backtrace_string;
            _os_log_impl(&dword_182FBE000, v29, v33, "%{public}s Failed to send %{public}s feedback %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x26u);
          }

          free(backtrace_string);
          goto LABEL_62;
        }
        if (v34)
        {
          if (*(_BYTE *)(a1 + 72))
            v38 = "accept";
          else
            v38 = "deny";
          *(_DWORD *)buf = 136446722;
          v42 = "nwsc_send_feedback_block_invoke";
          v43 = 2082;
          v44 = v38;
          v45 = 1024;
          *(_DWORD *)v46 = v10;
          _os_log_impl(&dword_182FBE000, v29, v33, "%{public}s Failed to send %{public}s feedback %{darwin.errno}d, no backtrace", buf, 0x1Cu);
        }
      }
      else
      {
        __nwlog_obj();
        v29 = objc_claimAutoreleasedReturnValue();
        v36 = type;
        if (os_log_type_enabled(v29, type))
        {
          if (*(_BYTE *)(a1 + 72))
            v37 = "accept";
          else
            v37 = "deny";
          *(_DWORD *)buf = 136446722;
          v42 = "nwsc_send_feedback_block_invoke";
          v43 = 2082;
          v44 = v37;
          v45 = 1024;
          *(_DWORD *)v46 = v10;
          _os_log_impl(&dword_182FBE000, v29, v36, "%{public}s Failed to send %{public}s feedback %{darwin.errno}d, backtrace limit exceeded", buf, 0x1Cu);
        }
      }

    }
LABEL_62:
    if (v28)
      free(v28);
    goto LABEL_26;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v16 = (id)gLogObj;
  if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
  {
    v17 = *(unsigned __int8 *)(a1 + 72);
    v42 = "nwsc_send_feedback_block_invoke";
    *(_DWORD *)buf = 136446722;
    if (v17)
      v18 = "accept";
    else
      v18 = "deny";
    v43 = 2082;
    v44 = v18;
    v45 = 1024;
    *(_DWORD *)v46 = v10;
    _os_log_impl(&dword_182FBE000, v16, OS_LOG_TYPE_ERROR, "%{public}s Failed to send %{public}s feedback %{darwin.errno}d", buf, 0x1Cu);
  }

LABEL_26:
  if (*(_UNKNOWN **)(a1 + 48) == &__block_literal_global_3_41726)
    nwsc_drain_and_cancel_connection(*(NWConcrete_nw_service_connector **)(a1 + 32), *(NWConcrete_nw_connection **)(a1 + 40), v4 == 0);
  v24 = *(_QWORD *)(a1 + 56);
  if (v24)
    (*(void (**)(uint64_t, uint64_t))(v24 + 16))(v24, v10);
LABEL_30:

}

void sub_18387F4D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nwsc_drain_and_cancel_connection(NWConcrete_nw_service_connector *a1, NWConcrete_nw_connection *a2, char a3)
{
  NWConcrete_nw_service_connector *v5;
  NWConcrete_nw_connection *v6;
  NWConcrete_nw_connection *v7;
  NSObject *v8;
  _QWORD v9[4];
  NWConcrete_nw_service_connector *v10;
  NWConcrete_nw_connection *v11;
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  NWConcrete_nw_service_connector *v15;
  __int16 v16;
  NWConcrete_nw_connection *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = v6;
  if ((a3 & 1) != 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v8 = (id)gLogObj;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446722;
      v13 = "nwsc_drain_and_cancel_connection";
      v14 = 2114;
      v15 = v5;
      v16 = 2114;
      v17 = v7;
      _os_log_impl(&dword_182FBE000, v8, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ draining %{public}@", buf, 0x20u);
    }

    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 3221225472;
    v9[2] = ___ZL32nwsc_drain_and_cancel_connectionP31NWConcrete_nw_service_connectorP24NWConcrete_nw_connectionb_block_invoke;
    v9[3] = &unk_1E14A9C10;
    v10 = v5;
    v11 = v7;
    nw_connection_receive_internal(v11, 0, 1u, 0xFFFFFFFF, v9);

  }
  else
  {
    nw_connection_cancel(&v6->super);
  }

}

void sub_18387F65C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void ___ZL32nwsc_drain_and_cancel_connectionP31NWConcrete_nw_service_connectorP24NWConcrete_nw_connectionb_block_invoke(uint64_t a1, void *a2, uint64_t a3, int a4, void *a5)
{
  NSObject *v8;
  id v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  size_t size;
  const char *v14;
  char v15;
  int v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  size_t v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  id v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v8 = a2;
  v9 = a5;
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v10 = (id)gLogObj;
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    v12 = *(_QWORD *)(a1 + 32);
    v11 = *(_QWORD *)(a1 + 40);
    if (v8)
      size = dispatch_data_get_size(v8);
    else
      size = 0;
    v14 = "in";
    v16 = 136447490;
    v17 = "nwsc_drain_and_cancel_connection_block_invoke";
    v19 = v12;
    v18 = 2114;
    if (a4)
      v14 = "";
    v20 = 2114;
    v21 = v11;
    v22 = 2048;
    v23 = size;
    v24 = 2082;
    v25 = v14;
    v26 = 2114;
    v27 = v9;
    _os_log_impl(&dword_182FBE000, v10, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ drained %{public}@ %zu bytes %{public}scomplete error %{public}@", (uint8_t *)&v16, 0x3Eu);
  }

  if (v9)
    v15 = 0;
  else
    v15 = a4 ^ 1;
  nwsc_drain_and_cancel_connection(*(NWConcrete_nw_service_connector **)(a1 + 32), *(NWConcrete_nw_connection **)(a1 + 40), v15);

}

void sub_18387F804(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t ___ZL47nwsc_restart_outgoing_requests_waiting_for_pathP31NWConcrete_nw_service_connectorPU25objcproto14OS_nw_endpoint8NSObject_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  void **v4;
  NSObject *v5;
  uint64_t v6;
  int v8;
  const char *v9;
  __int16 v10;
  uint64_t v11;
  __int16 v12;
  void **v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if ((char)v4[77] < 0 && nw_endpoint_is_equal(*(void **)(a1 + 32), v4[1], 0))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v5 = (id)gLogObj;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v6 = *(_QWORD *)(a1 + 40);
      v8 = 136446722;
      v9 = "nwsc_restart_outgoing_requests_waiting_for_path_block_invoke";
      v10 = 2114;
      v11 = v6;
      v12 = 2114;
      v13 = v4;
      _os_log_impl(&dword_182FBE000, v5, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ restarting connection for request %{public}@ due to external trigger", (uint8_t *)&v8, 0x20u);
    }

    nwsc_request_create_and_start_connection_inner(*(_QWORD *)(a1 + 40), v4, 0);
  }

  return 1;
}

void sub_18387F950(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZL46nwsc_request_create_and_start_connection_innerP31NWConcrete_nw_service_connectorP39NWConcrete_nw_unique_connection_requestPU25objcproto14OS_nw_endpoint8NSObject21nwsc_operation_code_e_block_invoke(int a1, nw_protocol_options_t options)
{
  nw_tcp_options_set_enable_fast_open(options, 1);
}

uint64_t ___ZL44nw_service_connector_get_new_sequence_numberv_block_invoke()
{
  uint64_t v0;
  uint64_t result;
  mach_timebase_info info;

  info = 0;
  mach_timebase_info(&info);
  v0 = mach_boottime_usec();
  result = mach_continuous_time();
  nw_service_connector_get_new_sequence_number(void)::sNWSCSequenceNumber = v0
                                                                          + ((result * info.numer / (1000 * info.denom)) >> 1);
  return result;
}

void __nw_service_connector_start_block_invoke_93(int a1, nw_protocol_options_t options)
{
  nw_tcp_options_set_enable_fast_open(options, 1);
}

void nw_service_connector_use_large_uuid_for_testing(void *a1, char a2)
{
  _QWORD *v3;
  void *v4;
  NSObject *v5;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  _QWORD block[4];
  _QWORD *v15;
  char v16;
  char v17;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v20;
  __int16 v21;
  char *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    v5 = v3[4];
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __nw_service_connector_use_large_uuid_for_testing_block_invoke;
    block[3] = &unk_1E14A9B98;
    v15 = v3;
    v16 = a2;
    dispatch_async(v5, block);

    goto LABEL_3;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v20 = "nw_service_connector_use_large_uuid_for_testing";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v17 = 0;
  if (__nwlog_fault(v7, &type, &v17))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v20 = "nw_service_connector_use_large_uuid_for_testing";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null serviceConnector", buf, 0xCu);
      }
    }
    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          v20 = "nw_service_connector_use_large_uuid_for_testing";
          v21 = 2082;
          v22 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null serviceConnector, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v20 = "nw_service_connector_use_large_uuid_for_testing";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null serviceConnector, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v20 = "nw_service_connector_use_large_uuid_for_testing";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null serviceConnector, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v7)
    free(v7);
LABEL_3:

}

uint64_t __nw_service_connector_use_large_uuid_for_testing_block_invoke(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(result + 32) + 152) = *(_BYTE *)(*(_QWORD *)(result + 32) + 152) & 0xFE | *(_BYTE *)(result + 40);
  return result;
}

void nw_service_connector_fail_connection_after_verification_fails_for_testing(void *a1, char a2)
{
  _QWORD *v3;
  void *v4;
  NSObject *v5;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  _QWORD block[4];
  _QWORD *v15;
  char v16;
  char v17;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v20;
  __int16 v21;
  char *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    v5 = v3[4];
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __nw_service_connector_fail_connection_after_verification_fails_for_testing_block_invoke;
    block[3] = &unk_1E14A9B98;
    v15 = v3;
    v16 = a2;
    dispatch_async(v5, block);

    goto LABEL_3;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v20 = "nw_service_connector_fail_connection_after_verification_fails_for_testing";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v17 = 0;
  if (__nwlog_fault(v7, &type, &v17))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v20 = "nw_service_connector_fail_connection_after_verification_fails_for_testing";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null serviceConnector", buf, 0xCu);
      }
    }
    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          v20 = "nw_service_connector_fail_connection_after_verification_fails_for_testing";
          v21 = 2082;
          v22 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null serviceConnector, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v20 = "nw_service_connector_fail_connection_after_verification_fails_for_testing";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null serviceConnector, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v20 = "nw_service_connector_fail_connection_after_verification_fails_for_testing";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null serviceConnector, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v7)
    free(v7);
LABEL_3:

}

uint64_t __nw_service_connector_fail_connection_after_verification_fails_for_testing_block_invoke(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(result + 32) + 152) = *(_BYTE *)(*(_QWORD *)(result + 32) + 152) & 0xFD | (2 * *(_BYTE *)(result + 40));
  return result;
}

void nw_service_connector_fail_connection_after_verification_passes_for_testing(void *a1, char a2)
{
  _QWORD *v3;
  void *v4;
  NSObject *v5;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  _QWORD block[4];
  _QWORD *v15;
  char v16;
  char v17;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v20;
  __int16 v21;
  char *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    v5 = v3[4];
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __nw_service_connector_fail_connection_after_verification_passes_for_testing_block_invoke;
    block[3] = &unk_1E14A9B98;
    v15 = v3;
    v16 = a2;
    dispatch_async(v5, block);

    goto LABEL_3;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v20 = "nw_service_connector_fail_connection_after_verification_passes_for_testing";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v17 = 0;
  if (__nwlog_fault(v7, &type, &v17))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v20 = "nw_service_connector_fail_connection_after_verification_passes_for_testing";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null serviceConnector", buf, 0xCu);
      }
    }
    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          v20 = "nw_service_connector_fail_connection_after_verification_passes_for_testing";
          v21 = 2082;
          v22 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null serviceConnector, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v20 = "nw_service_connector_fail_connection_after_verification_passes_for_testing";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null serviceConnector, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v20 = "nw_service_connector_fail_connection_after_verification_passes_for_testing";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null serviceConnector, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v7)
    free(v7);
LABEL_3:

}

uint64_t __nw_service_connector_fail_connection_after_verification_passes_for_testing_block_invoke(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(result + 32) + 152) = *(_BYTE *)(*(_QWORD *)(result + 32) + 152) & 0xFB | (4 * *(_BYTE *)(result + 40));
  return result;
}

void nw_service_connector_cancel(void *a1)
{
  _QWORD *v1;
  void *v2;
  NSObject *v3;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  char *backtrace_string;
  os_log_type_t v9;
  _BOOL4 v10;
  os_log_type_t v11;
  _QWORD block[4];
  _QWORD *v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = v1[4];
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __nw_service_connector_cancel_block_invoke;
    block[3] = &unk_1E14ACFD0;
    v13 = v1;
    dispatch_async(v3, block);

    goto LABEL_3;
  }
  __nwlog_obj();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_service_connector_cancel";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_service_connector_cancel";
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null serviceConnector", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_service_connector_cancel";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null serviceConnector, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_service_connector_cancel";
        _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null serviceConnector, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_service_connector_cancel";
        _os_log_impl(&dword_182FBE000, v6, v11, "%{public}s called with null serviceConnector, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v5)
    free(v5);
LABEL_3:

}

void __nw_service_connector_cancel_block_invoke(uint64_t a1)
{
  int v2;
  NSObject *v3;
  NSObject *v4;
  uint64_t v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  void *v30;
  void *v31;
  char *v32;
  os_log_type_t v33;
  _BOOL4 v34;
  uint64_t v35;
  os_log_type_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  char *v41;
  NSObject *v42;
  os_log_type_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  char *v47;
  NSObject *v48;
  os_log_type_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  uint64_t v55;
  char *backtrace_string;
  os_log_type_t v57;
  _BOOL4 v58;
  uint64_t v59;
  char *v60;
  os_log_type_t v61;
  _BOOL4 v62;
  uint64_t v63;
  char *v64;
  os_log_type_t v65;
  _BOOL4 v66;
  uint64_t v67;
  os_log_type_t v68;
  uint64_t v69;
  os_log_type_t v70;
  uint64_t v71;
  os_log_type_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD v77[4];
  id v78;
  _QWORD v79[4];
  id v80;
  _QWORD v81[4];
  _QWORD *v82;
  char v83;
  os_log_type_t v84;
  uint8_t buf[4];
  const char *v86;
  __int16 v87;
  uint64_t v88;
  __int16 v89;
  char *v90;
  uint64_t v91;

  v91 = *MEMORY[0x1E0C80C00];
  v2 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 16);
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v3 = (id)gLogObj;
  v4 = v3;
  if (v2 != 4)
  {
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      v10 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 136446466;
      v86 = "nw_service_connector_cancel_block_invoke";
      v87 = 2114;
      v88 = v10;
      _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_DEFAULT, "%{public}s Client cancelling %{public}@", buf, 0x16u);
    }

    v12 = *(_QWORD *)(a1 + 32);
    v13 = *(_QWORD *)(v12 + 56);
    if (v13)
    {
      nw_queue_cancel_source(v13, v11);
      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 56) = 0;
      v12 = *(_QWORD *)(a1 + 32);
    }
    *(_DWORD *)(v12 + 16) = 4;
    v14 = *(_QWORD *)(a1 + 32);
    v15 = *(NSObject **)(v14 + 8);
    if (v15)
    {
      nw_listener_cancel(v15);
      v16 = *(_QWORD *)(a1 + 32);
      v17 = *(void **)(v16 + 8);
      *(_QWORD *)(v16 + 8) = 0;

      v14 = *(_QWORD *)(a1 + 32);
    }
    v18 = *(void **)(v14 + 64);
    *(_QWORD *)(v14 + 64) = 0;

    v19 = *(_QWORD **)(a1 + 32);
    v20 = v19[11];
    v21 = MEMORY[0x1E0C809B0];
    if (v20)
    {
      v81[0] = MEMORY[0x1E0C809B0];
      v81[1] = 3221225472;
      v81[2] = __nw_service_connector_cancel_block_invoke_101;
      v81[3] = &unk_1E14A8D48;
      v82 = v19;
      nw_dictionary_apply(v20, (uint64_t)v81);
      v22 = *(_QWORD *)(a1 + 32);
      v23 = *(void **)(v22 + 88);
      *(_QWORD *)(v22 + 88) = 0;

      goto LABEL_15;
    }
    __nwlog_obj();
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    v40 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 136446466;
    v86 = "nw_service_connector_cancel_block_invoke_2";
    v87 = 2114;
    v88 = v40;
    v41 = (char *)_os_log_send_and_compose_impl();

    v84 = OS_LOG_TYPE_ERROR;
    v83 = 0;
    if (__nwlog_fault(v41, &v84, &v83))
    {
      if (v84 == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v42 = objc_claimAutoreleasedReturnValue();
        v43 = v84;
        if (os_log_type_enabled(v42, v84))
        {
          v44 = *(_QWORD *)(a1 + 32);
          *(_DWORD *)buf = 136446466;
          v86 = "nw_service_connector_cancel_block_invoke";
          v87 = 2114;
          v88 = v44;
          _os_log_impl(&dword_182FBE000, v42, v43, "%{public}s %{public}@ trying to apply NULL activeConnections", buf, 0x16u);
        }
      }
      else if (v83)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v42 = objc_claimAutoreleasedReturnValue();
        v57 = v84;
        v58 = os_log_type_enabled(v42, v84);
        if (backtrace_string)
        {
          if (v58)
          {
            v59 = *(_QWORD *)(a1 + 32);
            *(_DWORD *)buf = 136446722;
            v86 = "nw_service_connector_cancel_block_invoke";
            v87 = 2114;
            v88 = v59;
            v89 = 2082;
            v90 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v42, v57, "%{public}s %{public}@ trying to apply NULL activeConnections, dumping backtrace:%{public}s", buf, 0x20u);
          }

          free(backtrace_string);
          goto LABEL_76;
        }
        if (v58)
        {
          v74 = *(_QWORD *)(a1 + 32);
          *(_DWORD *)buf = 136446466;
          v86 = "nw_service_connector_cancel_block_invoke";
          v87 = 2114;
          v88 = v74;
          _os_log_impl(&dword_182FBE000, v42, v57, "%{public}s %{public}@ trying to apply NULL activeConnections, no backtrace", buf, 0x16u);
        }
      }
      else
      {
        __nwlog_obj();
        v42 = objc_claimAutoreleasedReturnValue();
        v68 = v84;
        if (os_log_type_enabled(v42, v84))
        {
          v69 = *(_QWORD *)(a1 + 32);
          *(_DWORD *)buf = 136446466;
          v86 = "nw_service_connector_cancel_block_invoke";
          v87 = 2114;
          v88 = v69;
          _os_log_impl(&dword_182FBE000, v42, v68, "%{public}s %{public}@ trying to apply NULL activeConnections, backtrace limit exceeded", buf, 0x16u);
        }
      }

    }
LABEL_76:
    if (v41)
      free(v41);
LABEL_15:
    v24 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 96);
    if (v24)
    {
      v25 = (void *)nw_dictionary_copy(v24);
      v79[0] = v21;
      v79[1] = 3221225472;
      v79[2] = __nw_service_connector_cancel_block_invoke_104;
      v79[3] = &unk_1E14A8D48;
      v80 = *(id *)(a1 + 32);
      nw_dictionary_apply((uint64_t)v25, (uint64_t)v79);

      v26 = *(void **)(*(_QWORD *)(a1 + 32) + 96);
      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 96) = 0;

      goto LABEL_17;
    }
    __nwlog_obj();
    v45 = (void *)objc_claimAutoreleasedReturnValue();
    v46 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 136446466;
    v86 = "nw_service_connector_cancel_block_invoke_2";
    v87 = 2114;
    v88 = v46;
    v47 = (char *)_os_log_send_and_compose_impl();

    v84 = OS_LOG_TYPE_ERROR;
    v83 = 0;
    if (__nwlog_fault(v47, &v84, &v83))
    {
      if (v84 == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v48 = objc_claimAutoreleasedReturnValue();
        v49 = v84;
        if (os_log_type_enabled(v48, v84))
        {
          v50 = *(_QWORD *)(a1 + 32);
          *(_DWORD *)buf = 136446466;
          v86 = "nw_service_connector_cancel_block_invoke";
          v87 = 2114;
          v88 = v50;
          _os_log_impl(&dword_182FBE000, v48, v49, "%{public}s %{public}@ trying to apply NULL activeOutgoingRequests", buf, 0x16u);
        }
      }
      else if (v83)
      {
        v60 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v48 = objc_claimAutoreleasedReturnValue();
        v61 = v84;
        v62 = os_log_type_enabled(v48, v84);
        if (v60)
        {
          if (v62)
          {
            v63 = *(_QWORD *)(a1 + 32);
            *(_DWORD *)buf = 136446722;
            v86 = "nw_service_connector_cancel_block_invoke";
            v87 = 2114;
            v88 = v63;
            v89 = 2082;
            v90 = v60;
            _os_log_impl(&dword_182FBE000, v48, v61, "%{public}s %{public}@ trying to apply NULL activeOutgoingRequests, dumping backtrace:%{public}s", buf, 0x20u);
          }

          free(v60);
          goto LABEL_81;
        }
        if (v62)
        {
          v75 = *(_QWORD *)(a1 + 32);
          *(_DWORD *)buf = 136446466;
          v86 = "nw_service_connector_cancel_block_invoke";
          v87 = 2114;
          v88 = v75;
          _os_log_impl(&dword_182FBE000, v48, v61, "%{public}s %{public}@ trying to apply NULL activeOutgoingRequests, no backtrace", buf, 0x16u);
        }
      }
      else
      {
        __nwlog_obj();
        v48 = objc_claimAutoreleasedReturnValue();
        v70 = v84;
        if (os_log_type_enabled(v48, v84))
        {
          v71 = *(_QWORD *)(a1 + 32);
          *(_DWORD *)buf = 136446466;
          v86 = "nw_service_connector_cancel_block_invoke";
          v87 = 2114;
          v88 = v71;
          _os_log_impl(&dword_182FBE000, v48, v70, "%{public}s %{public}@ trying to apply NULL activeOutgoingRequests, backtrace limit exceeded", buf, 0x16u);
        }
      }

    }
LABEL_81:
    if (v47)
      free(v47);
LABEL_17:
    v27 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 80);
    if (v27)
    {
      v28 = (void *)nw_dictionary_copy(v27);
      v77[0] = v21;
      v77[1] = 3221225472;
      v77[2] = __nw_service_connector_cancel_block_invoke_105;
      v77[3] = &unk_1E14A8D48;
      v30 = *(void **)(a1 + 32);
      v29 = a1 + 32;
      v78 = v30;
      nw_dictionary_apply((uint64_t)v28, (uint64_t)v77);

      v31 = *(void **)(*(_QWORD *)v29 + 80);
      *(_QWORD *)(*(_QWORD *)v29 + 80) = 0;

      return;
    }
    __nwlog_obj();
    v51 = (void *)objc_claimAutoreleasedReturnValue();
    v52 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 136446466;
    v86 = "nw_service_connector_cancel_block_invoke_2";
    v87 = 2114;
    v88 = v52;
    v6 = (char *)_os_log_send_and_compose_impl();

    v84 = OS_LOG_TYPE_ERROR;
    v83 = 0;
    if (__nwlog_fault(v6, &v84, &v83))
    {
      if (v84 == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v53 = objc_claimAutoreleasedReturnValue();
        v54 = v84;
        if (os_log_type_enabled(v53, v84))
        {
          v55 = *(_QWORD *)(a1 + 32);
          *(_DWORD *)buf = 136446466;
          v86 = "nw_service_connector_cancel_block_invoke";
          v87 = 2114;
          v88 = v55;
          _os_log_impl(&dword_182FBE000, v53, v54, "%{public}s %{public}@ trying to apply NULL pendingIncomingRequests", buf, 0x16u);
        }
LABEL_85:

        goto LABEL_31;
      }
      if (!v83)
      {
        __nwlog_obj();
        v53 = objc_claimAutoreleasedReturnValue();
        v72 = v84;
        if (os_log_type_enabled(v53, v84))
        {
          v73 = *(_QWORD *)(a1 + 32);
          *(_DWORD *)buf = 136446466;
          v86 = "nw_service_connector_cancel_block_invoke";
          v87 = 2114;
          v88 = v73;
          _os_log_impl(&dword_182FBE000, v53, v72, "%{public}s %{public}@ trying to apply NULL pendingIncomingRequests, backtrace limit exceeded", buf, 0x16u);
        }
        goto LABEL_85;
      }
      v64 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v53 = objc_claimAutoreleasedReturnValue();
      v65 = v84;
      v66 = os_log_type_enabled(v53, v84);
      if (!v64)
      {
        if (v66)
        {
          v76 = *(_QWORD *)(a1 + 32);
          *(_DWORD *)buf = 136446466;
          v86 = "nw_service_connector_cancel_block_invoke";
          v87 = 2114;
          v88 = v76;
          _os_log_impl(&dword_182FBE000, v53, v65, "%{public}s %{public}@ trying to apply NULL pendingIncomingRequests, no backtrace", buf, 0x16u);
        }
        goto LABEL_85;
      }
      if (v66)
      {
        v67 = *(_QWORD *)(a1 + 32);
        *(_DWORD *)buf = 136446722;
        v86 = "nw_service_connector_cancel_block_invoke";
        v87 = 2114;
        v88 = v67;
        v89 = 2082;
        v90 = v64;
        _os_log_impl(&dword_182FBE000, v53, v65, "%{public}s %{public}@ trying to apply NULL pendingIncomingRequests, dumping backtrace:%{public}s", buf, 0x20u);
      }

      free(v64);
    }
LABEL_31:
    if (!v6)
      return;
    goto LABEL_32;
  }
  v5 = *(_QWORD *)(a1 + 32);
  *(_DWORD *)buf = 136446466;
  v86 = "nw_service_connector_cancel_block_invoke";
  v87 = 2114;
  v88 = v5;
  v6 = (char *)_os_log_send_and_compose_impl();

  v84 = OS_LOG_TYPE_ERROR;
  v83 = 0;
  if (!__nwlog_fault(v6, &v84, &v83))
    goto LABEL_31;
  if (v84 == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v7 = (id)gLogObj;
    v8 = v84;
    if (os_log_type_enabled(v7, v84))
    {
      v9 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 136446466;
      v86 = "nw_service_connector_cancel_block_invoke";
      v87 = 2114;
      v88 = v9;
      _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s %{public}@ already cancelled", buf, 0x16u);
    }
LABEL_30:

    goto LABEL_31;
  }
  if (!v83)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v7 = (id)gLogObj;
    v36 = v84;
    if (os_log_type_enabled(v7, v84))
    {
      v37 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 136446466;
      v86 = "nw_service_connector_cancel_block_invoke";
      v87 = 2114;
      v88 = v37;
      _os_log_impl(&dword_182FBE000, v7, v36, "%{public}s %{public}@ already cancelled, backtrace limit exceeded", buf, 0x16u);
    }
    goto LABEL_30;
  }
  v32 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v7 = (id)gLogObj;
  v33 = v84;
  v34 = os_log_type_enabled(v7, v84);
  if (!v32)
  {
    if (v34)
    {
      v38 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 136446466;
      v86 = "nw_service_connector_cancel_block_invoke";
      v87 = 2114;
      v88 = v38;
      _os_log_impl(&dword_182FBE000, v7, v33, "%{public}s %{public}@ already cancelled, no backtrace", buf, 0x16u);
    }
    goto LABEL_30;
  }
  if (v34)
  {
    v35 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 136446722;
    v86 = "nw_service_connector_cancel_block_invoke";
    v87 = 2114;
    v88 = v35;
    v89 = 2082;
    v90 = v32;
    _os_log_impl(&dword_182FBE000, v7, v33, "%{public}s %{public}@ already cancelled, dumping backtrace:%{public}s", buf, 0x20u);
  }

  free(v32);
  if (v6)
LABEL_32:
    free(v6);
}

uint64_t __nw_service_connector_cancel_block_invoke_101(uint64_t a1, int a2, NWConcrete_nw_unique_connection *a3)
{
  nwsc_unique_connection_shutdown_socket(*(NWConcrete_nw_service_connector **)(a1 + 32), a3);
  return 1;
}

uint64_t __nw_service_connector_cancel_block_invoke_104(uint64_t a1, uint64_t a2, void *a3)
{
  void **v4;

  v4 = a3;
  nw_service_connector_cancel_request_inner(*(void **)(a1 + 32), v4[1], (uint64_t)(v4 + 3), v4[72], 1);
  nw_service_connector_trigger_request_complete_block_inner(*(void **)(a1 + 32), v4, 0, 0, 89);

  return 1;
}

void sub_1838812B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t __nw_service_connector_cancel_block_invoke_105(uint64_t a1, int a2, NWConcrete_nw_unique_connection_request *a3)
{
  nw_service_connector_reject_incoming_request(*(NWConcrete_nw_service_connector **)(a1 + 32), a3, 1);
  return 1;
}

void nw_service_connector_start_request(void *a1, void *a2, const char *a3, void *a4, void *a5)
{
  _QWORD *v9;
  id v10;
  id v11;
  void *v12;
  id v13;
  int v14;
  size_t v15;
  id v16;
  char *v17;
  NSObject *v18;
  os_log_type_t v19;
  id v20;
  char *v21;
  NSObject *v22;
  os_log_type_t v23;
  size_t v24;
  xpc_object_t v25;
  void *v26;
  NSObject *v27;
  char *v28;
  os_log_type_t v29;
  _BOOL4 v30;
  char *v31;
  os_log_type_t v32;
  _BOOL4 v33;
  id v34;
  char *v35;
  NSObject *v36;
  os_log_type_t v37;
  os_log_type_t v38;
  os_log_type_t v39;
  char *v40;
  os_log_type_t v41;
  _BOOL4 v42;
  os_log_type_t v43;
  void *v44;
  char *v45;
  NSObject *v46;
  os_log_type_t v47;
  void *v48;
  os_log_type_t v49;
  void *v50;
  os_log_type_t v51;
  void *v52;
  os_log_type_t v53;
  char *backtrace_string;
  os_log_type_t v55;
  _BOOL4 v56;
  char *v57;
  os_log_type_t v58;
  _BOOL4 v59;
  os_log_type_t v60;
  _BOOL4 v61;
  os_log_type_t v62;
  _BOOL4 v63;
  os_log_type_t v64;
  os_log_type_t v65;
  os_log_type_t v66;
  os_log_type_t v67;
  id v68;
  _QWORD block[4];
  id v70;
  _QWORD *v71;
  id v72;
  id v73;
  id v74;
  char v75;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v78;
  __int16 v79;
  size_t v80;
  __int16 v81;
  _QWORD v82[5];

  v82[3] = *MEMORY[0x1E0C80C00];
  v9 = a1;
  v10 = a2;
  v68 = a4;
  v11 = a5;
  v12 = v11;
  if (!v9)
  {
    __nwlog_obj();
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v78 = "nw_service_connector_start_request";
    v45 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v75 = 0;
    if (!__nwlog_fault(v45, &type, &v75))
      goto LABEL_136;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v46 = objc_claimAutoreleasedReturnValue();
      v47 = type;
      if (os_log_type_enabled(v46, type))
      {
        *(_DWORD *)buf = 136446210;
        v78 = "nw_service_connector_start_request";
        _os_log_impl(&dword_182FBE000, v46, v47, "%{public}s called with null serviceConnector", buf, 0xCu);
      }
    }
    else if (v75)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v46 = objc_claimAutoreleasedReturnValue();
      v55 = type;
      v56 = os_log_type_enabled(v46, type);
      if (backtrace_string)
      {
        if (v56)
        {
          *(_DWORD *)buf = 136446466;
          v78 = "nw_service_connector_start_request";
          v79 = 2082;
          v80 = (size_t)backtrace_string;
          _os_log_impl(&dword_182FBE000, v46, v55, "%{public}s called with null serviceConnector, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_136:
        if (!v45)
          goto LABEL_70;
LABEL_137:
        free(v45);
        goto LABEL_70;
      }
      if (v56)
      {
        *(_DWORD *)buf = 136446210;
        v78 = "nw_service_connector_start_request";
        _os_log_impl(&dword_182FBE000, v46, v55, "%{public}s called with null serviceConnector, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v46 = objc_claimAutoreleasedReturnValue();
      v64 = type;
      if (os_log_type_enabled(v46, type))
      {
        *(_DWORD *)buf = 136446210;
        v78 = "nw_service_connector_start_request";
        _os_log_impl(&dword_182FBE000, v46, v64, "%{public}s called with null serviceConnector, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_135:

    goto LABEL_136;
  }
  if (!v10)
  {
    __nwlog_obj();
    v48 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v78 = "nw_service_connector_start_request";
    v45 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v75 = 0;
    if (!__nwlog_fault(v45, &type, &v75))
      goto LABEL_136;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v46 = objc_claimAutoreleasedReturnValue();
      v49 = type;
      if (os_log_type_enabled(v46, type))
      {
        *(_DWORD *)buf = 136446210;
        v78 = "nw_service_connector_start_request";
        _os_log_impl(&dword_182FBE000, v46, v49, "%{public}s called with null endpoint", buf, 0xCu);
      }
      goto LABEL_135;
    }
    if (!v75)
    {
      __nwlog_obj();
      v46 = objc_claimAutoreleasedReturnValue();
      v65 = type;
      if (os_log_type_enabled(v46, type))
      {
        *(_DWORD *)buf = 136446210;
        v78 = "nw_service_connector_start_request";
        _os_log_impl(&dword_182FBE000, v46, v65, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_135;
    }
    v57 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v46 = objc_claimAutoreleasedReturnValue();
    v58 = type;
    v59 = os_log_type_enabled(v46, type);
    if (!v57)
    {
      if (v59)
      {
        *(_DWORD *)buf = 136446210;
        v78 = "nw_service_connector_start_request";
        _os_log_impl(&dword_182FBE000, v46, v58, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
      goto LABEL_135;
    }
    if (v59)
    {
      *(_DWORD *)buf = 136446466;
      v78 = "nw_service_connector_start_request";
      v79 = 2082;
      v80 = (size_t)v57;
      _os_log_impl(&dword_182FBE000, v46, v58, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_110;
  }
  if (!a3)
  {
    __nwlog_obj();
    v50 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v78 = "nw_service_connector_start_request";
    v45 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v75 = 0;
    if (!__nwlog_fault(v45, &type, &v75))
      goto LABEL_136;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v46 = objc_claimAutoreleasedReturnValue();
      v51 = type;
      if (os_log_type_enabled(v46, type))
      {
        *(_DWORD *)buf = 136446210;
        v78 = "nw_service_connector_start_request";
        _os_log_impl(&dword_182FBE000, v46, v51, "%{public}s called with null userService", buf, 0xCu);
      }
      goto LABEL_135;
    }
    if (!v75)
    {
      __nwlog_obj();
      v46 = objc_claimAutoreleasedReturnValue();
      v66 = type;
      if (os_log_type_enabled(v46, type))
      {
        *(_DWORD *)buf = 136446210;
        v78 = "nw_service_connector_start_request";
        _os_log_impl(&dword_182FBE000, v46, v66, "%{public}s called with null userService, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_135;
    }
    v57 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v46 = objc_claimAutoreleasedReturnValue();
    v60 = type;
    v61 = os_log_type_enabled(v46, type);
    if (!v57)
    {
      if (v61)
      {
        *(_DWORD *)buf = 136446210;
        v78 = "nw_service_connector_start_request";
        _os_log_impl(&dword_182FBE000, v46, v60, "%{public}s called with null userService, no backtrace", buf, 0xCu);
      }
      goto LABEL_135;
    }
    if (v61)
    {
      *(_DWORD *)buf = 136446466;
      v78 = "nw_service_connector_start_request";
      v79 = 2082;
      v80 = (size_t)v57;
      _os_log_impl(&dword_182FBE000, v46, v60, "%{public}s called with null userService, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_110;
  }
  if (!v11)
  {
    __nwlog_obj();
    v52 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v78 = "nw_service_connector_start_request";
    v45 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v75 = 0;
    if (!__nwlog_fault(v45, &type, &v75))
      goto LABEL_136;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v46 = objc_claimAutoreleasedReturnValue();
      v53 = type;
      if (os_log_type_enabled(v46, type))
      {
        *(_DWORD *)buf = 136446210;
        v78 = "nw_service_connector_start_request";
        _os_log_impl(&dword_182FBE000, v46, v53, "%{public}s called with null requestBlock", buf, 0xCu);
      }
      goto LABEL_135;
    }
    if (!v75)
    {
      __nwlog_obj();
      v46 = objc_claimAutoreleasedReturnValue();
      v67 = type;
      if (os_log_type_enabled(v46, type))
      {
        *(_DWORD *)buf = 136446210;
        v78 = "nw_service_connector_start_request";
        _os_log_impl(&dword_182FBE000, v46, v67, "%{public}s called with null requestBlock, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_135;
    }
    v57 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v46 = objc_claimAutoreleasedReturnValue();
    v62 = type;
    v63 = os_log_type_enabled(v46, type);
    if (!v57)
    {
      if (v63)
      {
        *(_DWORD *)buf = 136446210;
        v78 = "nw_service_connector_start_request";
        _os_log_impl(&dword_182FBE000, v46, v62, "%{public}s called with null requestBlock, no backtrace", buf, 0xCu);
      }
      goto LABEL_135;
    }
    if (v63)
    {
      *(_DWORD *)buf = 136446466;
      v78 = "nw_service_connector_start_request";
      v79 = 2082;
      v80 = (size_t)v57;
      _os_log_impl(&dword_182FBE000, v46, v62, "%{public}s called with null requestBlock, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_110:

    free(v57);
    if (!v45)
      goto LABEL_70;
    goto LABEL_137;
  }
  v13 = v10;
  v14 = objc_msgSend(v13, "type");

  if (v14 != 1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v20 = (id)gLogObj;
    *(_DWORD *)buf = 136446466;
    v78 = "nw_service_connector_start_request";
    v79 = 2114;
    v80 = (size_t)v13;
    v21 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v75 = 0;
    if (__nwlog_fault(v21, &type, &v75))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v22 = (id)gLogObj;
        v23 = type;
        if (os_log_type_enabled(v22, type))
        {
          *(_DWORD *)buf = 136446466;
          v78 = "nw_service_connector_start_request";
          v79 = 2114;
          v80 = (size_t)v13;
          _os_log_impl(&dword_182FBE000, v22, v23, "%{public}s Specified endpoint %{public}@ is not an address endpoint", buf, 0x16u);
        }
      }
      else if (v75)
      {
        v28 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v22 = (id)gLogObj;
        v29 = type;
        v30 = os_log_type_enabled(v22, type);
        if (v28)
        {
          if (v30)
          {
            *(_DWORD *)buf = 136446722;
            v78 = "nw_service_connector_start_request";
            v79 = 2114;
            v80 = (size_t)v13;
            v81 = 2082;
            v82[0] = v28;
            _os_log_impl(&dword_182FBE000, v22, v29, "%{public}s Specified endpoint %{public}@ is not an address endpoint, dumping backtrace:%{public}s", buf, 0x20u);
          }

          free(v28);
          if (!v21)
            goto LABEL_44;
          goto LABEL_43;
        }
        if (v30)
        {
          *(_DWORD *)buf = 136446466;
          v78 = "nw_service_connector_start_request";
          v79 = 2114;
          v80 = (size_t)v13;
          _os_log_impl(&dword_182FBE000, v22, v29, "%{public}s Specified endpoint %{public}@ is not an address endpoint, no backtrace", buf, 0x16u);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v22 = (id)gLogObj;
        v38 = type;
        if (os_log_type_enabled(v22, type))
        {
          *(_DWORD *)buf = 136446466;
          v78 = "nw_service_connector_start_request";
          v79 = 2114;
          v80 = (size_t)v13;
          _os_log_impl(&dword_182FBE000, v22, v38, "%{public}s Specified endpoint %{public}@ is not an address endpoint, backtrace limit exceeded", buf, 0x16u);
        }
      }

    }
    if (!v21)
      goto LABEL_44;
LABEL_43:
    free(v21);
    goto LABEL_44;
  }
  v15 = strlen(a3);
  if (v15 <= 0x100)
  {
    v24 = v15;
    v25 = xpc_string_create(a3);
    v26 = v25;
    if (v25)
    {
      v27 = v9[4];
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = __nw_service_connector_start_request_block_invoke;
      block[3] = &unk_1E14A3D40;
      v70 = v25;
      v71 = v9;
      v72 = v68;
      v73 = v13;
      v74 = v12;
      dispatch_async(v27, block);

LABEL_69:
      goto LABEL_70;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v34 = (id)gLogObj;
    *(_DWORD *)buf = 136446466;
    v78 = "nw_service_connector_start_request";
    v79 = 2048;
    v80 = v24;
    v35 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v75 = 0;
    if (__nwlog_fault(v35, &type, &v75))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v36 = (id)gLogObj;
        v37 = type;
        if (os_log_type_enabled(v36, type))
        {
          *(_DWORD *)buf = 136446466;
          v78 = "nw_service_connector_start_request";
          v79 = 2048;
          v80 = v24;
          _os_log_impl(&dword_182FBE000, v36, v37, "%{public}s xpc_string_create(%zu) failed", buf, 0x16u);
        }
      }
      else if (v75)
      {
        v40 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v36 = objc_claimAutoreleasedReturnValue();
        v41 = type;
        v42 = os_log_type_enabled(v36, type);
        if (v40)
        {
          if (v42)
          {
            *(_DWORD *)buf = 136446722;
            v78 = "nw_service_connector_start_request";
            v79 = 2048;
            v80 = v24;
            v81 = 2082;
            v82[0] = v40;
            _os_log_impl(&dword_182FBE000, v36, v41, "%{public}s xpc_string_create(%zu) failed, dumping backtrace:%{public}s", buf, 0x20u);
          }

          free(v40);
          if (!v35)
            goto LABEL_68;
          goto LABEL_67;
        }
        if (v42)
        {
          *(_DWORD *)buf = 136446466;
          v78 = "nw_service_connector_start_request";
          v79 = 2048;
          v80 = v24;
          _os_log_impl(&dword_182FBE000, v36, v41, "%{public}s xpc_string_create(%zu) failed, no backtrace", buf, 0x16u);
        }
      }
      else
      {
        __nwlog_obj();
        v36 = objc_claimAutoreleasedReturnValue();
        v43 = type;
        if (os_log_type_enabled(v36, type))
        {
          *(_DWORD *)buf = 136446466;
          v78 = "nw_service_connector_start_request";
          v79 = 2048;
          v80 = v24;
          _os_log_impl(&dword_182FBE000, v36, v43, "%{public}s xpc_string_create(%zu) failed, backtrace limit exceeded", buf, 0x16u);
        }
      }

    }
    if (!v35)
    {
LABEL_68:
      nw_service_connector_trigger_request_complete_block_inner(v9, 0, v12, 0, 12);
      goto LABEL_69;
    }
LABEL_67:
    free(v35);
    goto LABEL_68;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v16 = (id)gLogObj;
  *(_DWORD *)buf = 136446722;
  v78 = "nw_service_connector_start_request";
  v79 = 2082;
  v80 = (size_t)a3;
  v81 = 1024;
  LODWORD(v82[0]) = 256;
  v17 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v75 = 0;
  if (__nwlog_fault(v17, &type, &v75))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v18 = (id)gLogObj;
      v19 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)buf = 136446722;
        v78 = "nw_service_connector_start_request";
        v79 = 2082;
        v80 = (size_t)a3;
        v81 = 1024;
        LODWORD(v82[0]) = 256;
        _os_log_impl(&dword_182FBE000, v18, v19, "%{public}s Service name \"%{public}s\" too long. Max allowed length is %d", buf, 0x1Cu);
      }
    }
    else if (v75)
    {
      v31 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v18 = (id)gLogObj;
      v32 = type;
      v33 = os_log_type_enabled(v18, type);
      if (v31)
      {
        if (v33)
        {
          *(_DWORD *)buf = 136446978;
          v78 = "nw_service_connector_start_request";
          v79 = 2082;
          v80 = (size_t)a3;
          v81 = 1024;
          LODWORD(v82[0]) = 256;
          WORD2(v82[0]) = 2082;
          *(_QWORD *)((char *)v82 + 6) = v31;
          _os_log_impl(&dword_182FBE000, v18, v32, "%{public}s Service name \"%{public}s\" too long. Max allowed length is %d, dumping backtrace:%{public}s", buf, 0x26u);
        }

        free(v31);
        if (!v17)
          goto LABEL_44;
        goto LABEL_58;
      }
      if (v33)
      {
        *(_DWORD *)buf = 136446722;
        v78 = "nw_service_connector_start_request";
        v79 = 2082;
        v80 = (size_t)a3;
        v81 = 1024;
        LODWORD(v82[0]) = 256;
        _os_log_impl(&dword_182FBE000, v18, v32, "%{public}s Service name \"%{public}s\" too long. Max allowed length is %d, no backtrace", buf, 0x1Cu);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v18 = (id)gLogObj;
      v39 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)buf = 136446722;
        v78 = "nw_service_connector_start_request";
        v79 = 2082;
        v80 = (size_t)a3;
        v81 = 1024;
        LODWORD(v82[0]) = 256;
        _os_log_impl(&dword_182FBE000, v18, v39, "%{public}s Service name \"%{public}s\" too long. Max allowed length is %d, backtrace limit exceeded", buf, 0x1Cu);
      }
    }

  }
  if (v17)
LABEL_58:
    free(v17);
LABEL_44:
  nw_service_connector_trigger_request_complete_block_inner(v9, 0, v12, 0, 22);
LABEL_70:

}

void sub_18388250C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void __nw_service_connector_start_request_block_invoke(uint64_t a1)
{
  const char *string_ptr;
  uint64_t v3;
  int v4;
  NSObject *v5;
  NSObject *v6;
  _BOOL4 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL4 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  NSObject *v16;
  uint32_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  void *v23;
  void *v24;
  Class isa;
  NWConcrete_nw_unique_connection_request *v26;
  NWConcrete_nw_unique_connection *v27;
  NWConcrete_nw_unique_connection *v28;
  NWConcrete_nw_connection *connection;
  os_unfair_lock_s *v30;
  os_unfair_lock_s *v31;
  char *v32;
  int v33;
  NSObject *v34;
  uint64_t v35;
  int v36;
  NSObject *v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  void *v41;
  NSObject *v42;
  uint64_t v43;
  NWConcrete_nw_unique_connection_request *v44;
  char *v45;
  void *v46;
  void *v47;
  void **v48;
  void *v49;
  id v50;
  _BOOL8 v51;
  void *v52;
  char *v53;
  unint64_t v54;
  _BYTE *v55;
  NSObject *v56;
  void *v57;
  id v58;
  char *v59;
  NSObject *v60;
  os_log_type_t v61;
  uint64_t v62;
  int v63;
  _DWORD *v64;
  NSObject *v65;
  uint64_t v66;
  void *v67;
  void *v68;
  const char *v69;
  char *v70;
  NSObject *v71;
  os_log_type_t v72;
  id v73;
  char *v74;
  NSObject *v75;
  os_log_type_t v76;
  os_log_type_t v77;
  char *backtrace_string;
  NSObject *v79;
  os_log_type_t v80;
  _BOOL4 v81;
  os_log_type_t v82;
  char *v83;
  os_log_type_t v84;
  NSObject *v85;
  void *v86;
  NSObject *v87;
  uint64_t v88;
  _DWORD *v89;
  NSObject *v90;
  uint64_t v91;
  void *v92;
  _BOOL4 v93;
  uint64_t *v94;
  id v95;
  void *v96;
  void *v97;
  NSObject *v98;
  os_log_type_t v99;
  void *v100;
  char *v101;
  NSObject *v102;
  os_log_type_t v103;
  _BOOL4 v104;
  void *v105;
  os_log_type_t v106;
  void *v107;
  void *v108;
  void *v109;
  NSObject *v110;
  os_log_type_t v111;
  void *v112;
  os_log_type_t v113;
  char *v114;
  NSObject *v115;
  os_log_type_t v116;
  _BOOL4 v117;
  os_log_type_t v118;
  _BOOL4 v119;
  os_log_type_t v120;
  os_log_type_t v121;
  void *v122;
  NSObject *v123;
  void *v124;
  NWConcrete_nw_unique_connection *v125;
  _QWORD v126[4];
  NWConcrete_nw_unique_connection *v127;
  NWConcrete_nw_unique_connection_request *v128;
  id v129;
  char v130;
  os_log_type_t v131;
  _BYTE type[24];
  char *v133;
  __int16 v134;
  char *v135;
  _OWORD buf[27];
  int v137;
  uint64_t v138;

  v138 = *MEMORY[0x1E0C80C00];
  string_ptr = xpc_string_get_string_ptr(*(xpc_object_t *)(a1 + 32));
  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(_DWORD *)(*(_QWORD *)(a1 + 40) + 16);
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v5 = (id)gLogObj;
  v6 = v5;
  if (v4 == 4)
  {
    v7 = os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
    if (v3)
    {
      if (v7)
      {
        v9 = *(_QWORD *)(a1 + 48);
        v8 = *(_QWORD *)(a1 + 56);
        v10 = *(_QWORD *)(a1 + 40);
        LODWORD(buf[0]) = 136447234;
        *(_QWORD *)((char *)buf + 4) = "nw_service_connector_start_request_block_invoke";
        WORD6(buf[0]) = 2114;
        *(_QWORD *)((char *)buf + 14) = v10;
        WORD3(buf[1]) = 2082;
        *((_QWORD *)&buf[1] + 1) = string_ptr;
        LOWORD(buf[2]) = 2114;
        *(_QWORD *)((char *)&buf[2] + 2) = v8;
        WORD5(buf[2]) = 2114;
        *(_QWORD *)((char *)&buf[2] + 12) = v9;
        _os_log_impl(&dword_182FBE000, v6, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ already cancelled, ignoring client requesting service \"%{public}s\" to %{public}@ parameters %{public}@", (uint8_t *)buf, 0x34u);
      }
    }
    else if (v7)
    {
      v18 = *(_QWORD *)(a1 + 40);
      v19 = *(_QWORD *)(a1 + 56);
      LODWORD(buf[0]) = 136446978;
      *(_QWORD *)((char *)buf + 4) = "nw_service_connector_start_request_block_invoke";
      WORD6(buf[0]) = 2114;
      *(_QWORD *)((char *)buf + 14) = v18;
      WORD3(buf[1]) = 2082;
      *((_QWORD *)&buf[1] + 1) = string_ptr;
      LOWORD(buf[2]) = 2114;
      *(_QWORD *)((char *)&buf[2] + 2) = v19;
      _os_log_impl(&dword_182FBE000, v6, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ already cancelled, ignoring client requesting service \"%{public}s\" to %{public}@", (uint8_t *)buf, 0x2Au);
    }
    goto LABEL_141;
  }
  v11 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    if (v11)
    {
      v13 = *(_QWORD *)(a1 + 48);
      v12 = *(_QWORD *)(a1 + 56);
      v14 = *(_QWORD *)(a1 + 40);
      LODWORD(buf[0]) = 136447234;
      *(_QWORD *)((char *)buf + 4) = "nw_service_connector_start_request_block_invoke";
      WORD6(buf[0]) = 2114;
      *(_QWORD *)((char *)buf + 14) = v14;
      WORD3(buf[1]) = 2082;
      *((_QWORD *)&buf[1] + 1) = string_ptr;
      LOWORD(buf[2]) = 2114;
      *(_QWORD *)((char *)&buf[2] + 2) = v12;
      WORD5(buf[2]) = 2114;
      *(_QWORD *)((char *)&buf[2] + 12) = v13;
      v15 = "%{public}s %{public}@ client requesting service \"%{public}s\" to %{public}@ parameters %{public}@";
      v16 = v6;
      v17 = 52;
LABEL_12:
      _os_log_impl(&dword_182FBE000, v16, OS_LOG_TYPE_DEFAULT, v15, (uint8_t *)buf, v17);
    }
  }
  else if (v11)
  {
    v20 = *(_QWORD *)(a1 + 40);
    v21 = *(_QWORD *)(a1 + 56);
    LODWORD(buf[0]) = 136446978;
    *(_QWORD *)((char *)buf + 4) = "nw_service_connector_start_request_block_invoke";
    WORD6(buf[0]) = 2114;
    *(_QWORD *)((char *)buf + 14) = v20;
    WORD3(buf[1]) = 2082;
    *((_QWORD *)&buf[1] + 1) = string_ptr;
    LOWORD(buf[2]) = 2114;
    *(_QWORD *)((char *)&buf[2] + 2) = v21;
    v15 = "%{public}s %{public}@ client requesting service \"%{public}s\" to %{public}@";
    v16 = v6;
    v17 = 42;
    goto LABEL_12;
  }

  v22 = nw_service_connector_copy_pending_incoming_request(*(void **)(a1 + 40), *(void **)(a1 + 56), (uint64_t)string_ptr);
  v6 = v22;
  if (v22 && ((uint64_t)v22[77].isa & 4) == 0)
  {
    LOBYTE(v22[77].isa) |= 4u;
    v23 = *(void **)(a1 + 48);
    if (v23)
      nw_service_connector_apply_user_parameters(*(void **)(a1 + 40), v22, v22[72].isa, v23);
    v24 = *(void **)(a1 + 40);
    isa = v6[72].isa;
    v126[0] = MEMORY[0x1E0C809B0];
    v126[1] = 3221225472;
    v126[2] = __nw_service_connector_start_request_block_invoke_106;
    v126[3] = &unk_1E14A3B98;
    v127 = v24;
    v129 = *(id *)(a1 + 64);
    v26 = v6;
    v128 = v26;
    nw_service_connector_accept_connection_for_request(v127, isa, v26, v126);
    nw_service_connector_reject_incoming_request(*(NWConcrete_nw_service_connector **)(a1 + 40), v26, 0);

    v27 = v127;
    goto LABEL_140;
  }
  v28 = (NWConcrete_nw_unique_connection *)nw_service_connector_copy_active_connection_with_endpoint_and_service(*(void **)(a1 + 40), *(void **)(a1 + 56), (uint64_t)string_ptr);
  v125 = v28;
  if (v28)
  {
    connection = v28->connection;
    if (!connection)
      goto LABEL_21;
    v30 = connection;
    *(_QWORD *)type = 0;
    *(_QWORD *)&type[8] = type;
    *(_QWORD *)&type[16] = 0x2020000000;
    LOBYTE(v133) = 0;
    v31 = v30 + 34;
    *(_QWORD *)&buf[0] = MEMORY[0x1E0C809B0];
    *((_QWORD *)&buf[0] + 1) = 3221225472;
    *(_QWORD *)&buf[1] = __nw_connection_is_cancelled_or_failed_block_invoke;
    *((_QWORD *)&buf[1] + 1) = &unk_1E14ACE40;
    *((_QWORD *)&buf[2] + 1) = type;
    v32 = v30;
    *(_QWORD *)&buf[2] = v32;
    os_unfair_lock_lock(v31);
    (*(void (**)(_OWORD *))&buf[1])(buf);
    os_unfair_lock_unlock(v31);
    v33 = *(unsigned __int8 *)(*(_QWORD *)&type[8] + 24);

    _Block_object_dispose(type, 8);
    if (!v33)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v37 = (id)gLogObj;
      if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
      {
        v38 = *(_QWORD *)(a1 + 40);
        LODWORD(buf[0]) = 136446722;
        *(_QWORD *)((char *)buf + 4) = "nw_service_connector_start_request_block_invoke";
        WORD6(buf[0]) = 2114;
        *(_QWORD *)((char *)buf + 14) = v38;
        WORD3(buf[1]) = 2114;
        *((_QWORD *)&buf[1] + 1) = v125;
        _os_log_impl(&dword_182FBE000, v37, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ got request for already existing activeConnection %{public}@", (uint8_t *)buf, 0x20u);
      }

      v36 = 1;
    }
    else
    {
LABEL_21:
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v34 = (id)gLogObj;
      if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
      {
        v35 = *(_QWORD *)(a1 + 40);
        LODWORD(buf[0]) = 136446722;
        *(_QWORD *)((char *)buf + 4) = "nw_service_connector_start_request_block_invoke";
        WORD6(buf[0]) = 2114;
        *(_QWORD *)((char *)buf + 14) = v35;
        WORD3(buf[1]) = 2114;
        *((_QWORD *)&buf[1] + 1) = v125;
        _os_log_impl(&dword_182FBE000, v34, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ cleaning up dead activeConnection %{public}@", (uint8_t *)buf, 0x20u);
      }

      nw_service_connector_cancel_request_inner(*(void **)(a1 + 40), *(void **)(a1 + 56), (uint64_t)string_ptr, v125->connection, 0);
      v36 = 0;
    }
  }
  else
  {
    v36 = 0;
  }
  v39 = nw_service_connector_copy_active_outgoing_request(*(void **)(a1 + 40), *(void **)(a1 + 56), (uint64_t)string_ptr);
  v40 = v39;
  v124 = v39;
  if (v39)
  {
    v41 = (void *)v39[72];
    if (!v41 || nw_connection_is_cancelled(v41))
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v42 = (id)gLogObj;
      if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
      {
        v43 = *(_QWORD *)(a1 + 40);
        LODWORD(buf[0]) = 136446722;
        *(_QWORD *)((char *)buf + 4) = "nw_service_connector_start_request_block_invoke";
        WORD6(buf[0]) = 2114;
        *(_QWORD *)((char *)buf + 14) = v43;
        WORD3(buf[1]) = 2114;
        *((_QWORD *)&buf[1] + 1) = v40;
        _os_log_impl(&dword_182FBE000, v42, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ cleaning up dead request %{public}@", (uint8_t *)buf, 0x20u);
      }

      nw_service_connector_cancel_request_inner(*(void **)(a1 + 40), *(void **)(a1 + 56), (uint64_t)string_ptr, *((void **)v124 + 72), 0);
      goto LABEL_34;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v65 = (id)gLogObj;
    if (os_log_type_enabled(v65, OS_LOG_TYPE_ERROR))
    {
      v66 = *(_QWORD *)(a1 + 40);
      LODWORD(buf[0]) = 136446722;
      *(_QWORD *)((char *)buf + 4) = "nw_service_connector_start_request_block_invoke";
      WORD6(buf[0]) = 2114;
      *(_QWORD *)((char *)buf + 14) = v66;
      WORD3(buf[1]) = 2114;
      *((_QWORD *)&buf[1] + 1) = v40;
      _os_log_impl(&dword_182FBE000, v65, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ we already have active request %{public}@", (uint8_t *)buf, 0x20u);
    }

    v45 = (char *)_Block_copy(*((const void **)v124 + 74));
    if (v45)
    {
      v67 = _Block_copy(*(const void **)(a1 + 64));
      v68 = (void *)*((_QWORD *)v124 + 74);
      *((_QWORD *)v124 + 74) = v67;

      nw_service_connector_trigger_request_complete_block_inner(*(void **)(a1 + 40), 0, v45, 0, 36);
LABEL_129:
      v83 = v45;
      goto LABEL_139;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v73 = (id)gLogObj;
    LODWORD(buf[0]) = 136446210;
    *(_QWORD *)((char *)buf + 4) = "nw_service_connector_start_request_block_invoke";
    v74 = (char *)_os_log_send_and_compose_impl();

    type[0] = 16;
    v131 = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v74, type, &v131))
    {
      if (type[0] == 17)
      {
        __nwlog_obj();
        v75 = objc_claimAutoreleasedReturnValue();
        v76 = type[0];
        if (os_log_type_enabled(v75, (os_log_type_t)type[0]))
        {
          LODWORD(buf[0]) = 136446210;
          *(_QWORD *)((char *)buf + 4) = "nw_service_connector_start_request_block_invoke";
          _os_log_impl(&dword_182FBE000, v75, v76, "%{public}s Found an old request without a request completion block", (uint8_t *)buf, 0xCu);
        }
      }
      else
      {
        if (v131)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v79 = objc_claimAutoreleasedReturnValue();
          v80 = type[0];
          v81 = os_log_type_enabled(v79, (os_log_type_t)type[0]);
          if (backtrace_string)
          {
            if (v81)
            {
              LODWORD(buf[0]) = 136446466;
              *(_QWORD *)((char *)buf + 4) = "nw_service_connector_start_request_block_invoke";
              WORD6(buf[0]) = 2082;
              *(_QWORD *)((char *)buf + 14) = backtrace_string;
              _os_log_impl(&dword_182FBE000, v79, v80, "%{public}s Found an old request without a request completion block, dumping backtrace:%{public}s", (uint8_t *)buf, 0x16u);
            }

            free(backtrace_string);
          }
          else
          {
            if (v81)
            {
              LODWORD(buf[0]) = 136446210;
              *(_QWORD *)((char *)buf + 4) = "nw_service_connector_start_request_block_invoke";
              _os_log_impl(&dword_182FBE000, v79, v80, "%{public}s Found an old request without a request completion block, no backtrace", (uint8_t *)buf, 0xCu);
            }

          }
          goto LABEL_99;
        }
        __nwlog_obj();
        v75 = objc_claimAutoreleasedReturnValue();
        v84 = type[0];
        if (os_log_type_enabled(v75, (os_log_type_t)type[0]))
        {
          LODWORD(buf[0]) = 136446210;
          *(_QWORD *)((char *)buf + 4) = "nw_service_connector_start_request_block_invoke";
          _os_log_impl(&dword_182FBE000, v75, v84, "%{public}s Found an old request without a request completion block, backtrace limit exceeded", (uint8_t *)buf, 0xCu);
        }
      }

    }
LABEL_99:
    if (v74)
      free(v74);
    nw_service_connector_trigger_request_complete_block_inner(*(void **)(a1 + 40), 0, *(void **)(a1 + 64), 0, 36);
    v83 = 0;
    goto LABEL_139;
  }
LABEL_34:
  v44 = objc_alloc_init(NWConcrete_nw_unique_connection_request);
  v45 = (char *)v44;
  if (!v44)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v58 = (id)gLogObj;
    LODWORD(buf[0]) = 136446210;
    *(_QWORD *)((char *)buf + 4) = "nw_service_connector_start_request_block_invoke";
    v59 = (char *)_os_log_send_and_compose_impl();

    type[0] = 16;
    v131 = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v59, type, &v131))
    {
      if (type[0] == 17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v60 = (id)gLogObj;
        v61 = type[0];
        if (os_log_type_enabled(v60, (os_log_type_t)type[0]))
        {
          LODWORD(buf[0]) = 136446210;
          *(_QWORD *)((char *)buf + 4) = "nw_service_connector_start_request_block_invoke";
          _os_log_impl(&dword_182FBE000, v60, v61, "%{public}s [nw_unique_connection_request init:] failed", (uint8_t *)buf, 0xCu);
        }
      }
      else if (v131)
      {
        v69 = __nw_create_backtrace_string();
        if (v69)
        {
          v70 = (char *)v69;
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v71 = (id)gLogObj;
          v72 = type[0];
          if (os_log_type_enabled(v71, (os_log_type_t)type[0]))
          {
            LODWORD(buf[0]) = 136446466;
            *(_QWORD *)((char *)buf + 4) = "nw_service_connector_start_request_block_invoke";
            WORD6(buf[0]) = 2082;
            *(_QWORD *)((char *)buf + 14) = v70;
            _os_log_impl(&dword_182FBE000, v71, v72, "%{public}s [nw_unique_connection_request init:] failed, dumping backtrace:%{public}s", (uint8_t *)buf, 0x16u);
          }

          free(v70);
          if (!v59)
            goto LABEL_92;
          goto LABEL_91;
        }
        __nwlog_obj();
        v60 = objc_claimAutoreleasedReturnValue();
        v82 = type[0];
        if (os_log_type_enabled(v60, (os_log_type_t)type[0]))
        {
          LODWORD(buf[0]) = 136446210;
          *(_QWORD *)((char *)buf + 4) = "nw_service_connector_start_request_block_invoke";
          _os_log_impl(&dword_182FBE000, v60, v82, "%{public}s [nw_unique_connection_request init:] failed, no backtrace", (uint8_t *)buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v60 = objc_claimAutoreleasedReturnValue();
        v77 = type[0];
        if (os_log_type_enabled(v60, (os_log_type_t)type[0]))
        {
          LODWORD(buf[0]) = 136446210;
          *(_QWORD *)((char *)buf + 4) = "nw_service_connector_start_request_block_invoke";
          _os_log_impl(&dword_182FBE000, v60, v77, "%{public}s [nw_unique_connection_request init:] failed, backtrace limit exceeded", (uint8_t *)buf, 0xCu);
        }
      }

    }
    if (!v59)
    {
LABEL_92:
      nw_service_connector_trigger_request_complete_block_inner(*(void **)(a1 + 40), 0, *(void **)(a1 + 64), 0, 12);
      v83 = 0;
LABEL_139:

      v27 = v125;
LABEL_140:

LABEL_141:
      return;
    }
LABEL_91:
    free(v59);
    goto LABEL_92;
  }
  *((_BYTE *)v44 + 616) &= ~1u;
  v46 = _Block_copy(*(const void **)(a1 + 64));
  v47 = (void *)*((_QWORD *)v45 + 74);
  *((_QWORD *)v45 + 74) = v46;

  v48 = (void **)(v45 + 8);
  objc_storeStrong((id *)v45 + 1, *(id *)(a1 + 56));
  v49 = *(void **)(a1 + 48);
  if (v49)
  {
    v50 = v49;
    v51 = -[NWConcrete_nw_parameters initWithParameters:stripConnected:shallowCopy:]((id *)[NWConcrete_nw_parameters alloc], v50, 0, 0);

    v52 = (void *)*((_QWORD *)v45 + 2);
    *((_QWORD *)v45 + 2) = v51;

  }
  if (!string_ptr)
  {
    __nwlog_obj();
    v85 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v85, OS_LOG_TYPE_ERROR);
    LODWORD(buf[0]) = 136446210;
    *(_QWORD *)((char *)buf + 4) = "_strict_strlcat";
    v86 = (void *)_os_log_send_and_compose_impl();

    if (__nwlog_abort((uint64_t)v86))
      goto LABEL_177;
    free(v86);
  }
  v53 = v45 + 24;
  v54 = 436;
  v55 = v45 + 24;
  while (*v55)
  {
    ++v55;
    if (!--v54)
    {
      if (!string_ptr)
      {
        __nwlog_obj();
        v56 = objc_claimAutoreleasedReturnValue();
        os_log_type_enabled(v56, OS_LOG_TYPE_ERROR);
        LODWORD(buf[0]) = 136446210;
        *(_QWORD *)((char *)buf + 4) = "_strict_strlcpy";
        v57 = (void *)_os_log_send_and_compose_impl();

        if (__nwlog_abort((uint64_t)v57))
          goto LABEL_177;
        free(v57);
      }
LABEL_56:
      v64 = v45 + 480;
      do
      {
        do
          uuid_generate_random((unsigned __int8 *)v45 + 480);
        while (!*v64);
      }
      while (!*((_DWORD *)v45 + 121) || !*((_DWORD *)v45 + 122) || !*((_DWORD *)v45 + 123));
      if ((*(_BYTE *)(*(_QWORD *)(a1 + 40) + 152) & 1) != 0)
      {
        __nwlog_obj();
        v87 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v87, OS_LOG_TYPE_DEFAULT))
        {
          v88 = *(_QWORD *)(a1 + 40);
          LODWORD(buf[0]) = 136446722;
          *(_QWORD *)((char *)buf + 4) = "nw_service_connector_start_request_block_invoke";
          WORD6(buf[0]) = 2114;
          *(_QWORD *)((char *)buf + 14) = v88;
          WORD3(buf[1]) = 2114;
          *((_QWORD *)&buf[1] + 1) = v45;
          _os_log_impl(&dword_182FBE000, v87, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ using large TEST UUID for request: %{public}@", (uint8_t *)buf, 0x20u);
        }

        *v64 = -1;
        if (!v36)
          goto LABEL_107;
LABEL_63:
        v45[616] |= 0x10u;
        nwsc_schedule_prexisting_connection_retry(*(NWConcrete_nw_service_connector **)(a1 + 40), (NWConcrete_nw_unique_connection_request *)v45, v125, 0);
      }
      else
      {
        if (v36)
          goto LABEL_63;
LABEL_107:
        v89 = *(_DWORD **)(a1 + 40);
        if (v89[4] == 1)
        {
          v45[616] |= 8u;
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v90 = (id)gLogObj;
          if (os_log_type_enabled(v90, OS_LOG_TYPE_DEFAULT))
          {
            v91 = *(_QWORD *)(a1 + 40);
            LODWORD(buf[0]) = 136446722;
            *(_QWORD *)((char *)buf + 4) = "nw_service_connector_start_request_block_invoke";
            WORD6(buf[0]) = 2114;
            *(_QWORD *)((char *)buf + 14) = v91;
            WORD3(buf[1]) = 2114;
            *((_QWORD *)&buf[1] + 1) = v45;
            _os_log_impl(&dword_182FBE000, v90, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ holding request for listener ready: %{public}@", (uint8_t *)buf, 0x20u);
          }

        }
        else
        {
          nwsc_request_create_and_start_connection_inner(v89, v45, 0);
          v92 = (void *)objc_claimAutoreleasedReturnValue();
          v93 = v92 == 0;

          if (v93)
          {
            nw_service_connector_cancel_request_inner(*(void **)(a1 + 40), *v48, (uint64_t)(v45 + 24), 0, 0);
            nw_service_connector_trigger_request_complete_block_inner(*(void **)(a1 + 40), v45, 0, 0, 12);
            goto LABEL_129;
          }
        }
      }
      v94 = (uint64_t *)*(id *)(a1 + 40);
      v83 = v45;
      if (v94)
      {
        if (v94[12])
        {
          v137 = 0;
          memset(buf, 0, sizeof(buf));
          if (nwsc_get_identifier(*v48, (uint64_t)(v45 + 24), buf))
          {
            nw_dictionary_set_value(v94[12], (const char *)buf, v83);
LABEL_138:

            goto LABEL_139;
          }
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v95 = (id)gLogObj;
          v96 = *v48;
          *(_DWORD *)type = 136446722;
          *(_QWORD *)&type[4] = "nw_service_connector_add_active_outgoing_request";
          *(_WORD *)&type[12] = 2114;
          *(_QWORD *)&type[14] = v96;
          *(_WORD *)&type[22] = 2082;
          v133 = v45 + 24;
          v97 = (void *)_os_log_send_and_compose_impl();

          v131 = OS_LOG_TYPE_ERROR;
          v130 = 0;
          if (__nwlog_fault((const char *)v97, &v131, &v130))
          {
            if (v131 == OS_LOG_TYPE_FAULT)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v98 = (id)gLogObj;
              v99 = v131;
              if (os_log_type_enabled(v98, v131))
              {
                v100 = *v48;
                *(_DWORD *)type = 136446722;
                *(_QWORD *)&type[4] = "nw_service_connector_add_active_outgoing_request";
                *(_WORD *)&type[12] = 2114;
                *(_QWORD *)&type[14] = v100;
                *(_WORD *)&type[22] = 2082;
                v133 = v53;
                _os_log_impl(&dword_182FBE000, v98, v99, "%{public}s Could not get identifier for endpoint %{public}@, service %{public}s", type, 0x20u);
              }
              goto LABEL_120;
            }
            if (v130)
            {
              v101 = (char *)__nw_create_backtrace_string();
              __nwlog_obj();
              v102 = objc_claimAutoreleasedReturnValue();
              v103 = v131;
              v104 = os_log_type_enabled(v102, v131);
              if (v101)
              {
                if (v104)
                {
                  v105 = *v48;
                  *(_DWORD *)type = 136446978;
                  *(_QWORD *)&type[4] = "nw_service_connector_add_active_outgoing_request";
                  *(_WORD *)&type[12] = 2114;
                  *(_QWORD *)&type[14] = v105;
                  *(_WORD *)&type[22] = 2082;
                  v133 = v53;
                  v134 = 2082;
                  v135 = v101;
                  _os_log_impl(&dword_182FBE000, v102, v103, "%{public}s Could not get identifier for endpoint %{public}@, service %{public}s, dumping backtrace:%{public}s", type, 0x2Au);
                }

LABEL_126:
                free(v101);
                if (!v97)
                  goto LABEL_138;
LABEL_137:
                free(v97);
                goto LABEL_138;
              }
              if (v104)
              {
                v108 = *v48;
                *(_DWORD *)type = 136446722;
                *(_QWORD *)&type[4] = "nw_service_connector_add_active_outgoing_request";
                *(_WORD *)&type[12] = 2114;
                *(_QWORD *)&type[14] = v108;
                *(_WORD *)&type[22] = 2082;
                v133 = v53;
                _os_log_impl(&dword_182FBE000, v102, v103, "%{public}s Could not get identifier for endpoint %{public}@, service %{public}s, no backtrace", type, 0x20u);
              }

            }
            else
            {
              __nwlog_obj();
              v98 = objc_claimAutoreleasedReturnValue();
              v106 = v131;
              if (os_log_type_enabled(v98, v131))
              {
                v107 = *v48;
                *(_DWORD *)type = 136446722;
                *(_QWORD *)&type[4] = "nw_service_connector_add_active_outgoing_request";
                *(_WORD *)&type[12] = 2114;
                *(_QWORD *)&type[14] = v107;
                *(_WORD *)&type[22] = 2082;
                v133 = v53;
                _os_log_impl(&dword_182FBE000, v98, v106, "%{public}s Could not get identifier for endpoint %{public}@, service %{public}s, backtrace limit exceeded", type, 0x20u);
              }
LABEL_120:

            }
          }
LABEL_136:
          if (!v97)
            goto LABEL_138;
          goto LABEL_137;
        }
        __nwlog_obj();
        v112 = (void *)objc_claimAutoreleasedReturnValue();
        LODWORD(buf[0]) = 136446210;
        *(_QWORD *)((char *)buf + 4) = "nw_service_connector_add_active_outgoing_request";
        v97 = (void *)_os_log_send_and_compose_impl();

        type[0] = 16;
        v131 = OS_LOG_TYPE_DEFAULT;
        if (!__nwlog_fault((const char *)v97, type, &v131))
          goto LABEL_136;
        if (type[0] == 17)
        {
          __nwlog_obj();
          v110 = objc_claimAutoreleasedReturnValue();
          v113 = type[0];
          if (os_log_type_enabled(v110, (os_log_type_t)type[0]))
          {
            LODWORD(buf[0]) = 136446210;
            *(_QWORD *)((char *)buf + 4) = "nw_service_connector_add_active_outgoing_request";
            _os_log_impl(&dword_182FBE000, v110, v113, "%{public}s called with null serviceConnector->activeOutgoingRequests", (uint8_t *)buf, 0xCu);
          }
LABEL_170:

          goto LABEL_136;
        }
        if (v131 == OS_LOG_TYPE_DEFAULT)
        {
          __nwlog_obj();
          v110 = objc_claimAutoreleasedReturnValue();
          v121 = type[0];
          if (os_log_type_enabled(v110, (os_log_type_t)type[0]))
          {
            LODWORD(buf[0]) = 136446210;
            *(_QWORD *)((char *)buf + 4) = "nw_service_connector_add_active_outgoing_request";
            _os_log_impl(&dword_182FBE000, v110, v121, "%{public}s called with null serviceConnector->activeOutgoingRequests, backtrace limit exceeded", (uint8_t *)buf, 0xCu);
          }
          goto LABEL_170;
        }
        v101 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v115 = objc_claimAutoreleasedReturnValue();
        v118 = type[0];
        v119 = os_log_type_enabled(v115, (os_log_type_t)type[0]);
        if (v101)
        {
          if (v119)
          {
            LODWORD(buf[0]) = 136446466;
            *(_QWORD *)((char *)buf + 4) = "nw_service_connector_add_active_outgoing_request";
            WORD6(buf[0]) = 2082;
            *(_QWORD *)((char *)buf + 14) = v101;
            _os_log_impl(&dword_182FBE000, v115, v118, "%{public}s called with null serviceConnector->activeOutgoingRequests, dumping backtrace:%{public}s", (uint8_t *)buf, 0x16u);
          }

          goto LABEL_126;
        }
        if (v119)
        {
          LODWORD(buf[0]) = 136446210;
          *(_QWORD *)((char *)buf + 4) = "nw_service_connector_add_active_outgoing_request";
          _os_log_impl(&dword_182FBE000, v115, v118, "%{public}s called with null serviceConnector->activeOutgoingRequests, no backtrace", (uint8_t *)buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v109 = (void *)objc_claimAutoreleasedReturnValue();
        LODWORD(buf[0]) = 136446210;
        *(_QWORD *)((char *)buf + 4) = "nw_service_connector_add_active_outgoing_request";
        v97 = (void *)_os_log_send_and_compose_impl();

        type[0] = 16;
        v131 = OS_LOG_TYPE_DEFAULT;
        if (!__nwlog_fault((const char *)v97, type, &v131))
          goto LABEL_136;
        if (type[0] == 17)
        {
          __nwlog_obj();
          v110 = objc_claimAutoreleasedReturnValue();
          v111 = type[0];
          if (os_log_type_enabled(v110, (os_log_type_t)type[0]))
          {
            LODWORD(buf[0]) = 136446210;
            *(_QWORD *)((char *)buf + 4) = "nw_service_connector_add_active_outgoing_request";
            _os_log_impl(&dword_182FBE000, v110, v111, "%{public}s called with null serviceConnector", (uint8_t *)buf, 0xCu);
          }
          goto LABEL_170;
        }
        if (v131 == OS_LOG_TYPE_DEFAULT)
        {
          __nwlog_obj();
          v110 = objc_claimAutoreleasedReturnValue();
          v120 = type[0];
          if (os_log_type_enabled(v110, (os_log_type_t)type[0]))
          {
            LODWORD(buf[0]) = 136446210;
            *(_QWORD *)((char *)buf + 4) = "nw_service_connector_add_active_outgoing_request";
            _os_log_impl(&dword_182FBE000, v110, v120, "%{public}s called with null serviceConnector, backtrace limit exceeded", (uint8_t *)buf, 0xCu);
          }
          goto LABEL_170;
        }
        v114 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v115 = objc_claimAutoreleasedReturnValue();
        v116 = type[0];
        v117 = os_log_type_enabled(v115, (os_log_type_t)type[0]);
        if (v114)
        {
          if (v117)
          {
            LODWORD(buf[0]) = 136446466;
            *(_QWORD *)((char *)buf + 4) = "nw_service_connector_add_active_outgoing_request";
            WORD6(buf[0]) = 2082;
            *(_QWORD *)((char *)buf + 14) = v114;
            _os_log_impl(&dword_182FBE000, v115, v116, "%{public}s called with null serviceConnector, dumping backtrace:%{public}s", (uint8_t *)buf, 0x16u);
          }

          free(v114);
          goto LABEL_136;
        }
        if (v117)
        {
          LODWORD(buf[0]) = 136446210;
          *(_QWORD *)((char *)buf + 4) = "nw_service_connector_add_active_outgoing_request";
          _os_log_impl(&dword_182FBE000, v115, v116, "%{public}s called with null serviceConnector, no backtrace", (uint8_t *)buf, 0xCu);
        }
      }

      goto LABEL_136;
    }
  }
  if (string_ptr)
  {
    if (v54 >= 2)
      goto LABEL_51;
    goto LABEL_55;
  }
  __nwlog_obj();
  v123 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v123, OS_LOG_TYPE_ERROR);
  LODWORD(buf[0]) = 136446210;
  *(_QWORD *)((char *)buf + 4) = "_strict_strlcpy";
  v122 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v122))
  {
    free(v122);
    if (v54 >= 2)
    {
LABEL_51:
      v62 = 0;
      while (1)
      {
        v63 = string_ptr[v62];
        v55[v62] = v63;
        if (!v63)
          goto LABEL_56;
        --v54;
        ++v62;
        if (v54 <= 1)
        {
          v55 += v62;
          break;
        }
      }
    }
LABEL_55:
    *v55 = 0;
    goto LABEL_56;
  }
LABEL_177:
  __break(1u);
}

void sub_183883CF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void __nw_service_connector_start_request_block_invoke_106(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  const char *v8;
  __int16 v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v4 = (id)gLogObj;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v5 = *(_QWORD *)(a1 + 32);
      v6 = *(_QWORD *)(a1 + 40);
      v7 = 136446978;
      v8 = "nw_service_connector_start_request_block_invoke";
      v9 = 2114;
      v10 = v5;
      v11 = 2114;
      v12 = v6;
      v13 = 1024;
      v14 = a2;
      _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ error when accepting request %{public}@ %{darwin.errno}d", (uint8_t *)&v7, 0x26u);
    }

    nw_service_connector_cancel_request_inner(*(void **)(a1 + 32), *(void **)(*(_QWORD *)(a1 + 40) + 8), *(_QWORD *)(a1 + 40) + 24, *(void **)(*(_QWORD *)(a1 + 40) + 576), 0);
    nw_service_connector_trigger_request_complete_block_inner(*(void **)(a1 + 32), 0, *(void **)(a1 + 48), 0, a2);
  }
  else
  {
    nw_service_connector_trigger_request_complete_block_inner(*(void **)(a1 + 32), 0, *(void **)(a1 + 48), *(void **)(*(_QWORD *)(a1 + 40) + 576), 0);
  }
}

void nwsc_schedule_prexisting_connection_retry(NWConcrete_nw_service_connector *a1, NWConcrete_nw_unique_connection_request *a2, NWConcrete_nw_unique_connection *a3, unsigned int a4)
{
  NWConcrete_nw_service_connector *v7;
  NWConcrete_nw_unique_connection_request *v8;
  uint64_t v9;
  NWConcrete_nw_unique_connection *v10;
  NSObject *v11;
  uint64_t preexistingConnectionTimer;
  _BOOL8 source;
  dispatch_time_t v14;
  uint64_t v15;
  _QWORD v16[4];
  NWConcrete_nw_service_connector *v17;
  NWConcrete_nw_unique_connection *v18;
  id v19;
  unsigned int v20;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  NWConcrete_nw_service_connector *v24;
  __int16 v25;
  NWConcrete_nw_unique_connection_request *v26;
  __int16 v27;
  NWConcrete_nw_unique_connection *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v7 = a1;
  v8 = a2;
  v10 = a3;
  if (a4 < 0x14)
  {
    preexistingConnectionTimer = (uint64_t)v8->preexistingConnectionTimer;
    if (preexistingConnectionTimer)
    {
      nw_queue_cancel_source(preexistingConnectionTimer, v9);
      v8->preexistingConnectionTimer = 0;
    }
    objc_initWeak((id *)buf, v8);
    v16[0] = MEMORY[0x1E0C809B0];
    v16[1] = 3221225472;
    v16[2] = ___ZL41nwsc_schedule_prexisting_connection_retryP31NWConcrete_nw_service_connectorP39NWConcrete_nw_unique_connection_requestP31NWConcrete_nw_unique_connectionj_block_invoke;
    v16[3] = &unk_1E14A3D68;
    v17 = v7;
    objc_copyWeak(&v19, (id *)buf);
    v18 = v10;
    v20 = a4;
    source = nw_queue_context_create_source(0, 2, 3, 0, v16, 0);
    v8->preexistingConnectionTimer = (void *)source;
    v14 = dispatch_time(0x8000000000000000, 100000000);
    nw_queue_set_timer_values(source, v14, 0xFFFFFFFFFFFFFFFFLL, 0xF4240uLL);
    nw_queue_activate_source((uint64_t)v8->preexistingConnectionTimer, v15);

    objc_destroyWeak(&v19);
    objc_destroyWeak((id *)buf);
  }
  else
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v11 = (id)gLogObj;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446978;
      v22 = "nwsc_schedule_prexisting_connection_retry";
      v23 = 2114;
      v24 = v7;
      v25 = 2114;
      v26 = v8;
      v27 = 2114;
      v28 = v10;
      _os_log_impl(&dword_182FBE000, v11, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ request %{public}@ still has existing activeConnection %{public}@", buf, 0x2Au);
    }

    nw_service_connector_cancel_request_inner(v7, v8->endpoint, (uint64_t)v8->service, 0, 0);
    nw_service_connector_trigger_request_complete_block_inner(v7, v8, 0, 0, 17);
  }

}

void sub_18388416C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, id location)
{
  void *v17;
  void *v18;
  void *v19;
  id *v20;

  objc_destroyWeak(v20);
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

void ___ZL41nwsc_schedule_prexisting_connection_retryP31NWConcrete_nw_service_connectorP39NWConcrete_nw_unique_connection_requestP31NWConcrete_nw_unique_connectionj_block_invoke(uint64_t a1)
{
  NSObject *v2;
  _QWORD v3[4];
  id v4;
  id v5;
  id v6;
  int v7;

  v2 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 32);
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = ___ZL41nwsc_schedule_prexisting_connection_retryP31NWConcrete_nw_service_connectorP39NWConcrete_nw_unique_connection_requestP31NWConcrete_nw_unique_connectionj_block_invoke_2;
  v3[3] = &unk_1E14A3D68;
  objc_copyWeak(&v6, (id *)(a1 + 48));
  v4 = *(id *)(a1 + 32);
  v5 = *(id *)(a1 + 40);
  v7 = *(_DWORD *)(a1 + 56);
  dispatch_async(v2, v3);

  objc_destroyWeak(&v6);
}

void ___ZL41nwsc_schedule_prexisting_connection_retryP31NWConcrete_nw_service_connectorP39NWConcrete_nw_unique_connection_requestP31NWConcrete_nw_unique_connectionj_block_invoke_2(uint64_t a1)
{
  NWConcrete_nw_unique_connection_request *WeakRetained;
  NWConcrete_nw_unique_connection_request *v3;
  NSObject *v4;
  uint64_t v5;
  void *v6;
  os_unfair_lock_s *v7;
  os_unfair_lock_s *v8;
  char *v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  NWConcrete_nw_unique_connection *v13;
  NSObject *p_super;
  uint64_t v15;
  void *v16;
  void *v17;
  _BOOL4 v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  char v22;
  _BYTE buf[24];
  NWConcrete_nw_unique_connection_request *v24;
  __int128 v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  WeakRetained = (NWConcrete_nw_unique_connection_request *)objc_loadWeakRetained((id *)(a1 + 48));
  v3 = WeakRetained;
  if (WeakRetained)
  {
    if (*(_DWORD *)(*(_QWORD *)(a1 + 32) + 16) == 4)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v4 = (id)gLogObj;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        v5 = *(_QWORD *)(a1 + 32);
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nwsc_schedule_prexisting_connection_retry_block_invoke_2";
        *(_WORD *)&buf[12] = 2114;
        *(_QWORD *)&buf[14] = v5;
        _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ already cancelled, ignoring connection retry", buf, 0x16u);
      }

    }
    else if ((*((_BYTE *)WeakRetained + 616) & 0x10) != 0)
    {
      v6 = *(void **)(*(_QWORD *)(a1 + 40) + 488);
      if (!v6)
        goto LABEL_9;
      v7 = v6;
      v19 = 0;
      v20 = &v19;
      v21 = 0x2020000000;
      v22 = 0;
      v8 = v7 + 34;
      *(_QWORD *)buf = MEMORY[0x1E0C809B0];
      *(_QWORD *)&buf[8] = 3221225472;
      *(_QWORD *)&buf[16] = __nw_connection_is_cancelled_or_failed_block_invoke;
      v24 = (NWConcrete_nw_unique_connection_request *)&unk_1E14ACE40;
      *((_QWORD *)&v25 + 1) = &v19;
      v9 = v7;
      *(_QWORD *)&v25 = v9;
      os_unfair_lock_lock(v8);
      __nw_connection_is_cancelled_or_failed_block_invoke((uint64_t)buf);
      os_unfair_lock_unlock(v8);
      LODWORD(v8) = *((unsigned __int8 *)v20 + 24);

      _Block_object_dispose(&v19, 8);
      if (!(_DWORD)v8)
      {
        nwsc_schedule_prexisting_connection_retry(*(NWConcrete_nw_service_connector **)(a1 + 32), v3, *(NWConcrete_nw_unique_connection **)(a1 + 40), *(_DWORD *)(a1 + 56) + 1);
      }
      else
      {
LABEL_9:
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v10 = (id)gLogObj;
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          v11 = *(_QWORD *)(a1 + 32);
          v12 = *(_QWORD *)(a1 + 40);
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nwsc_schedule_prexisting_connection_retry_block_invoke";
          *(_WORD *)&buf[12] = 2114;
          *(_QWORD *)&buf[14] = v11;
          *(_WORD *)&buf[22] = 2114;
          v24 = v3;
          LOWORD(v25) = 2114;
          *(_QWORD *)((char *)&v25 + 2) = v12;
          _os_log_impl(&dword_182FBE000, v10, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ restarting request %{public}@ with inactive activeConnection %{public}@", buf, 0x2Au);
        }

        v13 = *(NWConcrete_nw_unique_connection **)(a1 + 40);
        p_super = &v13->connection->super;
        if (p_super)
        {
          nw_connection_cancel(p_super);
          v15 = *(_QWORD *)(a1 + 40);
          v16 = *(void **)(v15 + 488);
          *(_QWORD *)(v15 + 488) = 0;

          v13 = *(NWConcrete_nw_unique_connection **)(a1 + 40);
        }
        nw_service_connector_remove_active_connection(*(NWConcrete_nw_service_connector **)(a1 + 32), v13);
        *((_BYTE *)v3 + 616) &= ~0x10u;
        nwsc_request_create_and_start_connection_inner(*(void **)(a1 + 32), v3, 0);
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        v18 = v17 == 0;

        if (v18)
        {
          nw_service_connector_cancel_request_inner(*(void **)(a1 + 32), v3->endpoint, (uint64_t)v3->service, 0, 0);
          nw_service_connector_trigger_request_complete_block_inner(*(void **)(a1 + 32), v3, 0, 0, 12);
        }
      }
    }
  }

}

void sub_18388455C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_service_connector_cancel_request(void *a1, void *a2, const char *a3)
{
  _QWORD *v5;
  id v6;
  void *v7;
  size_t v8;
  id v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  size_t v13;
  xpc_object_t v14;
  void *v15;
  NSObject *v16;
  char *v17;
  os_log_type_t v18;
  _BOOL4 v19;
  id v20;
  char *v21;
  NSObject *v22;
  os_log_type_t v23;
  os_log_type_t v24;
  char *v25;
  os_log_type_t v26;
  _BOOL4 v27;
  os_log_type_t v28;
  void *v29;
  NSObject *v30;
  os_log_type_t v31;
  void *v32;
  os_log_type_t v33;
  void *v34;
  os_log_type_t v35;
  char *backtrace_string;
  os_log_type_t v37;
  _BOOL4 v38;
  char *v39;
  os_log_type_t v40;
  _BOOL4 v41;
  os_log_type_t v42;
  _BOOL4 v43;
  os_log_type_t v44;
  os_log_type_t v45;
  os_log_type_t v46;
  _QWORD block[4];
  id v48;
  _QWORD *v49;
  id v50;
  char v51;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v54;
  __int16 v55;
  size_t v56;
  __int16 v57;
  _QWORD v58[3];

  v58[2] = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = v6;
  if (!v5)
  {
    __nwlog_obj();
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v54 = "nw_service_connector_cancel_request";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v51 = 0;
    if (!__nwlog_fault(v10, &type, &v51))
      goto LABEL_35;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v30 = objc_claimAutoreleasedReturnValue();
      v31 = type;
      if (os_log_type_enabled(v30, type))
      {
        *(_DWORD *)buf = 136446210;
        v54 = "nw_service_connector_cancel_request";
        _os_log_impl(&dword_182FBE000, v30, v31, "%{public}s called with null serviceConnector", buf, 0xCu);
      }
    }
    else if (v51)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v30 = objc_claimAutoreleasedReturnValue();
      v37 = type;
      v38 = os_log_type_enabled(v30, type);
      if (backtrace_string)
      {
        if (v38)
        {
          *(_DWORD *)buf = 136446466;
          v54 = "nw_service_connector_cancel_request";
          v55 = 2082;
          v56 = (size_t)backtrace_string;
          _os_log_impl(&dword_182FBE000, v30, v37, "%{public}s called with null serviceConnector, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_35;
      }
      if (v38)
      {
        *(_DWORD *)buf = 136446210;
        v54 = "nw_service_connector_cancel_request";
        _os_log_impl(&dword_182FBE000, v30, v37, "%{public}s called with null serviceConnector, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v30 = objc_claimAutoreleasedReturnValue();
      v44 = type;
      if (os_log_type_enabled(v30, type))
      {
        *(_DWORD *)buf = 136446210;
        v54 = "nw_service_connector_cancel_request";
        _os_log_impl(&dword_182FBE000, v30, v44, "%{public}s called with null serviceConnector, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_95:

    goto LABEL_35;
  }
  if (!v6)
  {
    __nwlog_obj();
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v54 = "nw_service_connector_cancel_request";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v51 = 0;
    if (!__nwlog_fault(v10, &type, &v51))
      goto LABEL_35;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v30 = objc_claimAutoreleasedReturnValue();
      v33 = type;
      if (os_log_type_enabled(v30, type))
      {
        *(_DWORD *)buf = 136446210;
        v54 = "nw_service_connector_cancel_request";
        _os_log_impl(&dword_182FBE000, v30, v33, "%{public}s called with null endpoint", buf, 0xCu);
      }
      goto LABEL_95;
    }
    if (!v51)
    {
      __nwlog_obj();
      v30 = objc_claimAutoreleasedReturnValue();
      v45 = type;
      if (os_log_type_enabled(v30, type))
      {
        *(_DWORD *)buf = 136446210;
        v54 = "nw_service_connector_cancel_request";
        _os_log_impl(&dword_182FBE000, v30, v45, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_95;
    }
    v39 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v30 = objc_claimAutoreleasedReturnValue();
    v40 = type;
    v41 = os_log_type_enabled(v30, type);
    if (!v39)
    {
      if (v41)
      {
        *(_DWORD *)buf = 136446210;
        v54 = "nw_service_connector_cancel_request";
        _os_log_impl(&dword_182FBE000, v30, v40, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
      goto LABEL_95;
    }
    if (v41)
    {
      *(_DWORD *)buf = 136446466;
      v54 = "nw_service_connector_cancel_request";
      v55 = 2082;
      v56 = (size_t)v39;
      _os_log_impl(&dword_182FBE000, v30, v40, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_76;
  }
  if (!a3)
  {
    __nwlog_obj();
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v54 = "nw_service_connector_cancel_request";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v51 = 0;
    if (!__nwlog_fault(v10, &type, &v51))
      goto LABEL_35;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v30 = objc_claimAutoreleasedReturnValue();
      v35 = type;
      if (os_log_type_enabled(v30, type))
      {
        *(_DWORD *)buf = 136446210;
        v54 = "nw_service_connector_cancel_request";
        _os_log_impl(&dword_182FBE000, v30, v35, "%{public}s called with null userService", buf, 0xCu);
      }
      goto LABEL_95;
    }
    if (!v51)
    {
      __nwlog_obj();
      v30 = objc_claimAutoreleasedReturnValue();
      v46 = type;
      if (os_log_type_enabled(v30, type))
      {
        *(_DWORD *)buf = 136446210;
        v54 = "nw_service_connector_cancel_request";
        _os_log_impl(&dword_182FBE000, v30, v46, "%{public}s called with null userService, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_95;
    }
    v39 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v30 = objc_claimAutoreleasedReturnValue();
    v42 = type;
    v43 = os_log_type_enabled(v30, type);
    if (!v39)
    {
      if (v43)
      {
        *(_DWORD *)buf = 136446210;
        v54 = "nw_service_connector_cancel_request";
        _os_log_impl(&dword_182FBE000, v30, v42, "%{public}s called with null userService, no backtrace", buf, 0xCu);
      }
      goto LABEL_95;
    }
    if (v43)
    {
      *(_DWORD *)buf = 136446466;
      v54 = "nw_service_connector_cancel_request";
      v55 = 2082;
      v56 = (size_t)v39;
      _os_log_impl(&dword_182FBE000, v30, v42, "%{public}s called with null userService, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_76:

    free(v39);
    if (!v10)
      goto LABEL_46;
    goto LABEL_36;
  }
  v8 = strlen(a3);
  if (v8 < 0x101)
  {
    v13 = v8;
    v14 = xpc_string_create(a3);
    v15 = v14;
    if (v14)
    {
      v16 = v5[4];
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = __nw_service_connector_cancel_request_block_invoke;
      block[3] = &unk_1E14AAAA0;
      v48 = v14;
      v49 = v5;
      v50 = v7;
      dispatch_async(v16, block);

LABEL_45:
      goto LABEL_46;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v20 = (id)gLogObj;
    *(_DWORD *)buf = 136446466;
    v54 = "nw_service_connector_cancel_request";
    v55 = 2048;
    v56 = v13;
    v21 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v51 = 0;
    if (__nwlog_fault(v21, &type, &v51))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v22 = (id)gLogObj;
        v23 = type;
        if (os_log_type_enabled(v22, type))
        {
          *(_DWORD *)buf = 136446466;
          v54 = "nw_service_connector_cancel_request";
          v55 = 2048;
          v56 = v13;
          _os_log_impl(&dword_182FBE000, v22, v23, "%{public}s xpc_string_create(%zu) failed", buf, 0x16u);
        }
      }
      else if (v51)
      {
        v25 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v22 = (id)gLogObj;
        v26 = type;
        v27 = os_log_type_enabled(v22, type);
        if (v25)
        {
          if (v27)
          {
            *(_DWORD *)buf = 136446722;
            v54 = "nw_service_connector_cancel_request";
            v55 = 2048;
            v56 = v13;
            v57 = 2082;
            v58[0] = v25;
            _os_log_impl(&dword_182FBE000, v22, v26, "%{public}s xpc_string_create(%zu) failed, dumping backtrace:%{public}s", buf, 0x20u);
          }

          free(v25);
          if (!v21)
            goto LABEL_45;
          goto LABEL_44;
        }
        if (v27)
        {
          *(_DWORD *)buf = 136446466;
          v54 = "nw_service_connector_cancel_request";
          v55 = 2048;
          v56 = v13;
          _os_log_impl(&dword_182FBE000, v22, v26, "%{public}s xpc_string_create(%zu) failed, no backtrace", buf, 0x16u);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v22 = (id)gLogObj;
        v28 = type;
        if (os_log_type_enabled(v22, type))
        {
          *(_DWORD *)buf = 136446466;
          v54 = "nw_service_connector_cancel_request";
          v55 = 2048;
          v56 = v13;
          _os_log_impl(&dword_182FBE000, v22, v28, "%{public}s xpc_string_create(%zu) failed, backtrace limit exceeded", buf, 0x16u);
        }
      }

    }
    if (!v21)
      goto LABEL_45;
LABEL_44:
    free(v21);
    goto LABEL_45;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v9 = (id)gLogObj;
  *(_DWORD *)buf = 136446722;
  v54 = "nw_service_connector_cancel_request";
  v55 = 2082;
  v56 = (size_t)a3;
  v57 = 1024;
  LODWORD(v58[0]) = 256;
  v10 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v51 = 0;
  if (__nwlog_fault(v10, &type, &v51))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v11 = (id)gLogObj;
      v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446722;
        v54 = "nw_service_connector_cancel_request";
        v55 = 2082;
        v56 = (size_t)a3;
        v57 = 1024;
        LODWORD(v58[0]) = 256;
        _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s Service name \"%{public}s\" too long. Max allowed length is %d", buf, 0x1Cu);
      }
    }
    else if (v51)
    {
      v17 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v11 = (id)gLogObj;
      v18 = type;
      v19 = os_log_type_enabled(v11, type);
      if (v17)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446978;
          v54 = "nw_service_connector_cancel_request";
          v55 = 2082;
          v56 = (size_t)a3;
          v57 = 1024;
          LODWORD(v58[0]) = 256;
          WORD2(v58[0]) = 2082;
          *(_QWORD *)((char *)v58 + 6) = v17;
          _os_log_impl(&dword_182FBE000, v11, v18, "%{public}s Service name \"%{public}s\" too long. Max allowed length is %d, dumping backtrace:%{public}s", buf, 0x26u);
        }

        free(v17);
        if (v10)
          goto LABEL_36;
        goto LABEL_46;
      }
      if (v19)
      {
        *(_DWORD *)buf = 136446722;
        v54 = "nw_service_connector_cancel_request";
        v55 = 2082;
        v56 = (size_t)a3;
        v57 = 1024;
        LODWORD(v58[0]) = 256;
        _os_log_impl(&dword_182FBE000, v11, v18, "%{public}s Service name \"%{public}s\" too long. Max allowed length is %d, no backtrace", buf, 0x1Cu);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v11 = (id)gLogObj;
      v24 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446722;
        v54 = "nw_service_connector_cancel_request";
        v55 = 2082;
        v56 = (size_t)a3;
        v57 = 1024;
        LODWORD(v58[0]) = 256;
        _os_log_impl(&dword_182FBE000, v11, v24, "%{public}s Service name \"%{public}s\" too long. Max allowed length is %d, backtrace limit exceeded", buf, 0x1Cu);
      }
    }

  }
LABEL_35:
  if (v10)
LABEL_36:
    free(v10);
LABEL_46:

}

void sub_183885240(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void __nw_service_connector_cancel_request_block_invoke(xpc_object_t *a1)
{
  const char *string_ptr;
  int v3;
  NSObject *v4;
  NWConcrete_nw_unique_connection_request *v5;
  xpc_object_t v6;
  xpc_object_t v7;
  xpc_object_t v8;
  xpc_object_t v9;
  NSObject *v10;
  xpc_object_t v11;
  void *v12;
  NSObject *v13;
  xpc_object_t v14;
  int v15;
  const char *v16;
  __int16 v17;
  xpc_object_t v18;
  __int16 v19;
  void *v20;
  __int16 v21;
  xpc_object_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  string_ptr = xpc_string_get_string_ptr(a1[4]);
  v3 = *((_DWORD *)a1[5] + 4);
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v4 = (id)gLogObj;
  v5 = (NWConcrete_nw_unique_connection_request *)v4;
  if (v3 == 4)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v6 = a1[5];
      v7 = a1[6];
      v15 = 136446978;
      v16 = "nw_service_connector_cancel_request_block_invoke";
      v17 = 2114;
      v18 = v6;
      v19 = 2082;
      v20 = (void *)string_ptr;
      v21 = 2114;
      v22 = v7;
      _os_log_impl(&dword_182FBE000, &v5->super, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ already cancelled, ignoring client cancelling service \"%{public}s\" to %{public}@", (uint8_t *)&v15, 0x2Au);
    }
  }
  else
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v8 = a1[5];
      v9 = a1[6];
      v15 = 136446978;
      v16 = "nw_service_connector_cancel_request_block_invoke";
      v17 = 2114;
      v18 = v8;
      v19 = 2082;
      v20 = (void *)string_ptr;
      v21 = 2114;
      v22 = v9;
      _os_log_impl(&dword_182FBE000, &v5->super, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ client cancelling request for service \"%{public}s\" to %{public}@", (uint8_t *)&v15, 0x2Au);
    }

    v5 = (NWConcrete_nw_unique_connection_request *)nw_service_connector_copy_pending_incoming_request(a1[5], a1[6], (uint64_t)string_ptr);
    if (v5)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v10 = (id)gLogObj;
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        v11 = a1[5];
        v15 = 136446722;
        v16 = "nw_service_connector_cancel_request_block_invoke";
        v17 = 2114;
        v18 = v11;
        v19 = 2114;
        v20 = v5;
        _os_log_impl(&dword_182FBE000, v10, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ client cancel: rejecting incoming %{public}@", (uint8_t *)&v15, 0x20u);
      }

      nw_service_connector_reject_incoming_request((NWConcrete_nw_service_connector *)a1[5], v5, 1);
    }
    v12 = nw_service_connector_copy_active_outgoing_request(a1[5], a1[6], (uint64_t)string_ptr);
    nw_service_connector_cancel_request_inner(a1[5], a1[6], (uint64_t)string_ptr, 0, 0);
    if (v12)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v13 = (id)gLogObj;
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        v14 = a1[5];
        v15 = 136446722;
        v16 = "nw_service_connector_cancel_request_block_invoke";
        v17 = 2114;
        v18 = v14;
        v19 = 2114;
        v20 = v5;
        _os_log_impl(&dword_182FBE000, v13, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ client cancel: cancelling outgoing %{public}@", (uint8_t *)&v15, 0x20u);
      }

      nw_service_connector_trigger_request_complete_block_inner(a1[5], v12, 0, 0, 89);
    }

  }
}

void sub_183885558(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_service_connector_cancel_active_connection(void *a1, void *a2, const char *a3, void *a4)
{
  dispatch_queue_t *v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  int v12;
  size_t v13;
  id v14;
  const char *v15;
  NSObject *v16;
  os_log_type_t v17;
  id v18;
  const char *v19;
  NSObject *v20;
  os_log_type_t v21;
  id v22;
  os_log_type_t v23;
  id v24;
  NSObject *v25;
  os_log_type_t v26;
  char *v27;
  os_log_type_t v28;
  _BOOL4 v29;
  os_log_type_t v30;
  _BOOL4 v31;
  size_t v32;
  xpc_object_t v33;
  void *v34;
  NSObject *v35;
  char *v36;
  os_log_type_t v37;
  _BOOL4 v38;
  os_log_type_t v39;
  char *v40;
  os_log_type_t v41;
  _BOOL4 v42;
  os_log_type_t v43;
  id v44;
  char *v45;
  NSObject *v46;
  os_log_type_t v47;
  os_log_type_t v48;
  char *v49;
  os_log_type_t v50;
  char *v51;
  os_log_type_t v52;
  _BOOL4 v53;
  os_log_type_t v54;
  void *v55;
  char *v56;
  NSObject *v57;
  os_log_type_t v58;
  void *v59;
  os_log_type_t v60;
  char *backtrace_string;
  os_log_type_t v62;
  _BOOL4 v63;
  char *v64;
  os_log_type_t v65;
  _BOOL4 v66;
  os_log_type_t v67;
  os_log_type_t v68;
  _QWORD block[4];
  id v70;
  dispatch_queue_t *v71;
  id v72;
  id v73;
  char v74;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v77;
  __int16 v78;
  size_t v79;
  __int16 v80;
  _QWORD v81[3];

  v81[2] = *MEMORY[0x1E0C80C00];
  v7 = a1;
  v8 = a2;
  v9 = a4;
  v10 = v9;
  if (!v7)
  {
    __nwlog_obj();
    v55 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v77 = "nw_service_connector_cancel_active_connection";
    v56 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v74 = 0;
    if (!__nwlog_fault(v56, &type, &v74))
      goto LABEL_136;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v57 = objc_claimAutoreleasedReturnValue();
      v58 = type;
      if (os_log_type_enabled(v57, type))
      {
        *(_DWORD *)buf = 136446210;
        v77 = "nw_service_connector_cancel_active_connection";
        _os_log_impl(&dword_182FBE000, v57, v58, "%{public}s called with null serviceConnector", buf, 0xCu);
      }
    }
    else if (v74)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v57 = objc_claimAutoreleasedReturnValue();
      v62 = type;
      v63 = os_log_type_enabled(v57, type);
      if (backtrace_string)
      {
        if (v63)
        {
          *(_DWORD *)buf = 136446466;
          v77 = "nw_service_connector_cancel_active_connection";
          v78 = 2082;
          v79 = (size_t)backtrace_string;
          _os_log_impl(&dword_182FBE000, v57, v62, "%{public}s called with null serviceConnector, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_136:
        if (!v56)
          goto LABEL_79;
LABEL_137:
        free(v56);
        goto LABEL_79;
      }
      if (v63)
      {
        *(_DWORD *)buf = 136446210;
        v77 = "nw_service_connector_cancel_active_connection";
        _os_log_impl(&dword_182FBE000, v57, v62, "%{public}s called with null serviceConnector, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v57 = objc_claimAutoreleasedReturnValue();
      v67 = type;
      if (os_log_type_enabled(v57, type))
      {
        *(_DWORD *)buf = 136446210;
        v77 = "nw_service_connector_cancel_active_connection";
        _os_log_impl(&dword_182FBE000, v57, v67, "%{public}s called with null serviceConnector, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_135:

    goto LABEL_136;
  }
  if (v9)
  {
    if (v8)
    {
      if (a3)
      {
        v11 = v8;
        v12 = objc_msgSend(v11, "type");

        if (v12 == 1)
        {
          v13 = strlen(a3);
          if (v13 >= 0x101)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v14 = (id)gLogObj;
            *(_DWORD *)buf = 136446722;
            v77 = "nw_service_connector_cancel_active_connection";
            v78 = 2082;
            v79 = (size_t)a3;
            v80 = 1024;
            LODWORD(v81[0]) = 256;
            v15 = (const char *)_os_log_send_and_compose_impl();

            type = OS_LOG_TYPE_ERROR;
            v74 = 0;
            if (__nwlog_fault(v15, &type, &v74))
            {
              if (type == OS_LOG_TYPE_FAULT)
              {
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                v16 = (id)gLogObj;
                v17 = type;
                if (os_log_type_enabled(v16, type))
                {
                  *(_DWORD *)buf = 136446722;
                  v77 = "nw_service_connector_cancel_active_connection";
                  v78 = 2082;
                  v79 = (size_t)a3;
                  v80 = 1024;
                  LODWORD(v81[0]) = 256;
                  _os_log_impl(&dword_182FBE000, v16, v17, "%{public}s Service name \"%{public}s\" too long. Max allowed length is %d", buf, 0x1Cu);
                }
              }
              else if (v74)
              {
                v40 = (char *)__nw_create_backtrace_string();
                __nwlog_obj();
                v16 = objc_claimAutoreleasedReturnValue();
                v41 = type;
                v42 = os_log_type_enabled(v16, type);
                if (v40)
                {
                  if (v42)
                  {
                    *(_DWORD *)buf = 136446978;
                    v77 = "nw_service_connector_cancel_active_connection";
                    v78 = 2082;
                    v79 = (size_t)a3;
                    v80 = 1024;
                    LODWORD(v81[0]) = 256;
                    WORD2(v81[0]) = 2082;
                    *(_QWORD *)((char *)v81 + 6) = v40;
                    _os_log_impl(&dword_182FBE000, v16, v41, "%{public}s Service name \"%{public}s\" too long. Max allowed length is %d, dumping backtrace:%{public}s", buf, 0x26u);
                  }

                  free(v40);
                  if (!v15)
                    goto LABEL_78;
LABEL_92:
                  v49 = (char *)v15;
                  goto LABEL_77;
                }
                if (v42)
                {
                  *(_DWORD *)buf = 136446722;
                  v77 = "nw_service_connector_cancel_active_connection";
                  v78 = 2082;
                  v79 = (size_t)a3;
                  v80 = 1024;
                  LODWORD(v81[0]) = 256;
                  _os_log_impl(&dword_182FBE000, v16, v41, "%{public}s Service name \"%{public}s\" too long. Max allowed length is %d, no backtrace", buf, 0x1Cu);
                }
              }
              else
              {
                __nwlog_obj();
                v16 = objc_claimAutoreleasedReturnValue();
                v50 = type;
                if (os_log_type_enabled(v16, type))
                {
                  *(_DWORD *)buf = 136446722;
                  v77 = "nw_service_connector_cancel_active_connection";
                  v78 = 2082;
                  v79 = (size_t)a3;
                  v80 = 1024;
                  LODWORD(v81[0]) = 256;
                  _os_log_impl(&dword_182FBE000, v16, v50, "%{public}s Service name \"%{public}s\" too long. Max allowed length is %d, backtrace limit exceeded", buf, 0x1Cu);
                }
              }

            }
            if (!v15)
              goto LABEL_78;
            goto LABEL_92;
          }
          v32 = v13;
          v33 = xpc_string_create(a3);
          v34 = v33;
          if (v33)
          {
            v35 = v7[4];
            block[0] = MEMORY[0x1E0C809B0];
            block[1] = 3221225472;
            block[2] = __nw_service_connector_cancel_active_connection_block_invoke;
            block[3] = &unk_1E14AAE78;
            v70 = v33;
            v71 = v7;
            v72 = v11;
            v73 = v10;
            dispatch_async(v35, block);

LABEL_102:
            goto LABEL_79;
          }
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v44 = (id)gLogObj;
          *(_DWORD *)buf = 136446466;
          v77 = "nw_service_connector_cancel_active_connection";
          v78 = 2048;
          v79 = v32;
          v45 = (char *)_os_log_send_and_compose_impl();

          type = OS_LOG_TYPE_ERROR;
          v74 = 0;
          if (__nwlog_fault(v45, &type, &v74))
          {
            if (type == OS_LOG_TYPE_FAULT)
            {
              __nwlog_obj();
              v46 = objc_claimAutoreleasedReturnValue();
              v47 = type;
              if (os_log_type_enabled(v46, type))
              {
                *(_DWORD *)buf = 136446466;
                v77 = "nw_service_connector_cancel_active_connection";
                v78 = 2048;
                v79 = v32;
                _os_log_impl(&dword_182FBE000, v46, v47, "%{public}s xpc_string_create(%zu) failed", buf, 0x16u);
              }
            }
            else if (v74)
            {
              v51 = (char *)__nw_create_backtrace_string();
              __nwlog_obj();
              v46 = objc_claimAutoreleasedReturnValue();
              v52 = type;
              v53 = os_log_type_enabled(v46, type);
              if (v51)
              {
                if (v53)
                {
                  *(_DWORD *)buf = 136446722;
                  v77 = "nw_service_connector_cancel_active_connection";
                  v78 = 2048;
                  v79 = v32;
                  v80 = 2082;
                  v81[0] = v51;
                  _os_log_impl(&dword_182FBE000, v46, v52, "%{public}s xpc_string_create(%zu) failed, dumping backtrace:%{public}s", buf, 0x20u);
                }

                free(v51);
                goto LABEL_99;
              }
              if (v53)
              {
                *(_DWORD *)buf = 136446466;
                v77 = "nw_service_connector_cancel_active_connection";
                v78 = 2048;
                v79 = v32;
                _os_log_impl(&dword_182FBE000, v46, v52, "%{public}s xpc_string_create(%zu) failed, no backtrace", buf, 0x16u);
              }
            }
            else
            {
              __nwlog_obj();
              v46 = objc_claimAutoreleasedReturnValue();
              v54 = type;
              if (os_log_type_enabled(v46, type))
              {
                *(_DWORD *)buf = 136446466;
                v77 = "nw_service_connector_cancel_active_connection";
                v78 = 2048;
                v79 = v32;
                _os_log_impl(&dword_182FBE000, v46, v54, "%{public}s xpc_string_create(%zu) failed, backtrace limit exceeded", buf, 0x16u);
              }
            }

          }
LABEL_99:
          if (v45)
            free(v45);
          dispatch_async(v7[4], v10);
          goto LABEL_102;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v24 = (id)gLogObj;
        *(_DWORD *)buf = 136446466;
        v77 = "nw_service_connector_cancel_active_connection";
        v78 = 2114;
        v79 = (size_t)v11;
        v19 = (const char *)_os_log_send_and_compose_impl();

        type = OS_LOG_TYPE_ERROR;
        v74 = 0;
        if (!__nwlog_fault(v19, &type, &v74))
          goto LABEL_75;
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v25 = (id)gLogObj;
          v26 = type;
          if (os_log_type_enabled(v25, type))
          {
            *(_DWORD *)buf = 136446466;
            v77 = "nw_service_connector_cancel_active_connection";
            v78 = 2114;
            v79 = (size_t)v11;
            _os_log_impl(&dword_182FBE000, v25, v26, "%{public}s Specified endpoint %{public}@ is not an address endpoint", buf, 0x16u);
          }
LABEL_74:

LABEL_75:
          if (!v19)
          {
LABEL_78:
            dispatch_async(v7[4], v10);
            goto LABEL_79;
          }
          goto LABEL_76;
        }
        if (!v74)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v25 = (id)gLogObj;
          v48 = type;
          if (os_log_type_enabled(v25, type))
          {
            *(_DWORD *)buf = 136446466;
            v77 = "nw_service_connector_cancel_active_connection";
            v78 = 2114;
            v79 = (size_t)v11;
            _os_log_impl(&dword_182FBE000, v25, v48, "%{public}s Specified endpoint %{public}@ is not an address endpoint, backtrace limit exceeded", buf, 0x16u);
          }
          goto LABEL_74;
        }
        v36 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v25 = (id)gLogObj;
        v37 = type;
        v38 = os_log_type_enabled(v25, type);
        if (!v36)
        {
          if (v38)
          {
            *(_DWORD *)buf = 136446466;
            v77 = "nw_service_connector_cancel_active_connection";
            v78 = 2114;
            v79 = (size_t)v11;
            _os_log_impl(&dword_182FBE000, v25, v37, "%{public}s Specified endpoint %{public}@ is not an address endpoint, no backtrace", buf, 0x16u);
          }
          goto LABEL_74;
        }
        if (v38)
        {
          *(_DWORD *)buf = 136446722;
          v77 = "nw_service_connector_cancel_active_connection";
          v78 = 2114;
          v79 = (size_t)v11;
          v80 = 2082;
          v81[0] = v36;
          _os_log_impl(&dword_182FBE000, v25, v37, "%{public}s Specified endpoint %{public}@ is not an address endpoint, dumping backtrace:%{public}s", buf, 0x20u);
        }

        free(v36);
        if (!v19)
          goto LABEL_78;
LABEL_76:
        v49 = (char *)v19;
LABEL_77:
        free(v49);
        goto LABEL_78;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v22 = (id)gLogObj;
      *(_DWORD *)buf = 136446210;
      v77 = "nw_service_connector_cancel_active_connection";
      v19 = (const char *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v74 = 0;
      if (!__nwlog_fault(v19, &type, &v74))
        goto LABEL_75;
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v20 = (id)gLogObj;
        v23 = type;
        if (os_log_type_enabled(v20, type))
        {
          *(_DWORD *)buf = 136446210;
          v77 = "nw_service_connector_cancel_active_connection";
          _os_log_impl(&dword_182FBE000, v20, v23, "%{public}s called with null service", buf, 0xCu);
        }
LABEL_71:

        goto LABEL_75;
      }
      if (!v74)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v20 = (id)gLogObj;
        v43 = type;
        if (os_log_type_enabled(v20, type))
        {
          *(_DWORD *)buf = 136446210;
          v77 = "nw_service_connector_cancel_active_connection";
          _os_log_impl(&dword_182FBE000, v20, v43, "%{public}s called with null service, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_71;
      }
      v27 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v20 = (id)gLogObj;
      v30 = type;
      v31 = os_log_type_enabled(v20, type);
      if (!v27)
      {
        if (v31)
        {
          *(_DWORD *)buf = 136446210;
          v77 = "nw_service_connector_cancel_active_connection";
          _os_log_impl(&dword_182FBE000, v20, v30, "%{public}s called with null service, no backtrace", buf, 0xCu);
        }
        goto LABEL_71;
      }
      if (v31)
      {
        *(_DWORD *)buf = 136446466;
        v77 = "nw_service_connector_cancel_active_connection";
        v78 = 2082;
        v79 = (size_t)v27;
        _os_log_impl(&dword_182FBE000, v20, v30, "%{public}s called with null service, dumping backtrace:%{public}s", buf, 0x16u);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v18 = (id)gLogObj;
      *(_DWORD *)buf = 136446210;
      v77 = "nw_service_connector_cancel_active_connection";
      v19 = (const char *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v74 = 0;
      if (!__nwlog_fault(v19, &type, &v74))
        goto LABEL_75;
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v20 = (id)gLogObj;
        v21 = type;
        if (os_log_type_enabled(v20, type))
        {
          *(_DWORD *)buf = 136446210;
          v77 = "nw_service_connector_cancel_active_connection";
          _os_log_impl(&dword_182FBE000, v20, v21, "%{public}s called with null endpoint", buf, 0xCu);
        }
        goto LABEL_71;
      }
      if (!v74)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v20 = (id)gLogObj;
        v39 = type;
        if (os_log_type_enabled(v20, type))
        {
          *(_DWORD *)buf = 136446210;
          v77 = "nw_service_connector_cancel_active_connection";
          _os_log_impl(&dword_182FBE000, v20, v39, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_71;
      }
      v27 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v20 = (id)gLogObj;
      v28 = type;
      v29 = os_log_type_enabled(v20, type);
      if (!v27)
      {
        if (v29)
        {
          *(_DWORD *)buf = 136446210;
          v77 = "nw_service_connector_cancel_active_connection";
          _os_log_impl(&dword_182FBE000, v20, v28, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
        }
        goto LABEL_71;
      }
      if (v29)
      {
        *(_DWORD *)buf = 136446466;
        v77 = "nw_service_connector_cancel_active_connection";
        v78 = 2082;
        v79 = (size_t)v27;
        _os_log_impl(&dword_182FBE000, v20, v28, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
      }
    }

    free(v27);
    if (!v19)
      goto LABEL_78;
    goto LABEL_76;
  }
  __nwlog_obj();
  v59 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v77 = "nw_service_connector_cancel_active_connection";
  v56 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v74 = 0;
  if (!__nwlog_fault(v56, &type, &v74))
    goto LABEL_136;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v57 = objc_claimAutoreleasedReturnValue();
    v60 = type;
    if (os_log_type_enabled(v57, type))
    {
      *(_DWORD *)buf = 136446210;
      v77 = "nw_service_connector_cancel_active_connection";
      _os_log_impl(&dword_182FBE000, v57, v60, "%{public}s called with null completionBlock", buf, 0xCu);
    }
    goto LABEL_135;
  }
  if (!v74)
  {
    __nwlog_obj();
    v57 = objc_claimAutoreleasedReturnValue();
    v68 = type;
    if (os_log_type_enabled(v57, type))
    {
      *(_DWORD *)buf = 136446210;
      v77 = "nw_service_connector_cancel_active_connection";
      _os_log_impl(&dword_182FBE000, v57, v68, "%{public}s called with null completionBlock, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_135;
  }
  v64 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v57 = objc_claimAutoreleasedReturnValue();
  v65 = type;
  v66 = os_log_type_enabled(v57, type);
  if (!v64)
  {
    if (v66)
    {
      *(_DWORD *)buf = 136446210;
      v77 = "nw_service_connector_cancel_active_connection";
      _os_log_impl(&dword_182FBE000, v57, v65, "%{public}s called with null completionBlock, no backtrace", buf, 0xCu);
    }
    goto LABEL_135;
  }
  if (v66)
  {
    *(_DWORD *)buf = 136446466;
    v77 = "nw_service_connector_cancel_active_connection";
    v78 = 2082;
    v79 = (size_t)v64;
    _os_log_impl(&dword_182FBE000, v57, v65, "%{public}s called with null completionBlock, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v64);
  if (v56)
    goto LABEL_137;
LABEL_79:

}

void sub_1838867AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void __nw_service_connector_cancel_active_connection_block_invoke(uint64_t a1)
{
  const char *string_ptr;
  _DWORD *v3;
  NWConcrete_nw_unique_connection *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  NWConcrete_nw_connection *connection;
  os_unfair_lock_s *v13;
  os_unfair_lock_s *v14;
  char *v15;
  NWConcrete_nw_connection *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  char v22;
  _BYTE buf[24];
  const char *v24;
  _BYTE v25[20];
  __int16 v26;
  NWConcrete_nw_unique_connection *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  string_ptr = xpc_string_get_string_ptr(*(xpc_object_t *)(a1 + 32));
  v3 = *(_DWORD **)(a1 + 40);
  if (v3[4] == 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v4 = (NWConcrete_nw_unique_connection *)(id)gLogObj;
    if (os_log_type_enabled(&v4->super, OS_LOG_TYPE_ERROR))
    {
      v5 = *(_QWORD *)(a1 + 40);
      v6 = *(_QWORD *)(a1 + 48);
      *(_DWORD *)buf = 136446978;
      *(_QWORD *)&buf[4] = "nw_service_connector_cancel_active_connection_block_invoke";
      *(_WORD *)&buf[12] = 2114;
      *(_QWORD *)&buf[14] = v5;
      *(_WORD *)&buf[22] = 2082;
      v24 = string_ptr;
      *(_WORD *)v25 = 2114;
      *(_QWORD *)&v25[2] = v6;
      _os_log_impl(&dword_182FBE000, &v4->super, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ already cancelled, ignoring client cancelling active connection for service \"%{public}s\" to %{public}@", buf, 0x2Au);
    }
  }
  else
  {
    v4 = (NWConcrete_nw_unique_connection *)nw_service_connector_copy_active_connection_with_endpoint_and_service(v3, *(void **)(a1 + 48), (uint64_t)string_ptr);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v7 = (id)gLogObj;
    v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
    if (v4)
    {
      if (v8)
      {
        v10 = *(_QWORD *)(a1 + 40);
        v9 = *(_QWORD *)(a1 + 48);
        v11 = "dead";
        connection = v4->connection;
        if (connection)
        {
          v13 = connection;
          v19 = 0;
          v20 = &v19;
          v21 = 0x2020000000;
          v22 = 0;
          v14 = v13 + 34;
          *(_QWORD *)buf = MEMORY[0x1E0C809B0];
          *(_QWORD *)&buf[8] = 3221225472;
          *(_QWORD *)&buf[16] = __nw_connection_is_cancelled_or_failed_block_invoke;
          v24 = (const char *)&unk_1E14ACE40;
          *(_QWORD *)&v25[8] = &v19;
          v15 = v13;
          *(_QWORD *)v25 = v15;
          os_unfair_lock_lock(v14);
          __nw_connection_is_cancelled_or_failed_block_invoke((uint64_t)buf);
          os_unfair_lock_unlock(v14);
          LODWORD(v14) = *((unsigned __int8 *)v20 + 24);

          _Block_object_dispose(&v19, 8);
          if (!(_DWORD)v14)
            v11 = "alive";
        }
        *(_DWORD *)buf = 136447490;
        *(_QWORD *)&buf[4] = "nw_service_connector_cancel_active_connection_block_invoke";
        *(_WORD *)&buf[12] = 2114;
        *(_QWORD *)&buf[14] = v10;
        *(_WORD *)&buf[22] = 2082;
        v24 = string_ptr;
        *(_WORD *)v25 = 2114;
        *(_QWORD *)&v25[2] = v9;
        *(_WORD *)&v25[10] = 2082;
        *(_QWORD *)&v25[12] = v11;
        v26 = 2114;
        v27 = v4;
        _os_log_impl(&dword_182FBE000, v7, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ client cancelling active connection for service \"%{public}s\" to %{public}@: %{public}s activeConnection %{public}@", buf, 0x3Eu);
      }

      nwsc_unique_connection_shutdown_socket(*(NWConcrete_nw_service_connector **)(a1 + 40), v4);
      v16 = v4->connection;
    }
    else
    {
      if (v8)
      {
        v17 = *(_QWORD *)(a1 + 40);
        v18 = *(_QWORD *)(a1 + 48);
        *(_DWORD *)buf = 136446978;
        *(_QWORD *)&buf[4] = "nw_service_connector_cancel_active_connection_block_invoke";
        *(_WORD *)&buf[12] = 2114;
        *(_QWORD *)&buf[14] = v17;
        *(_WORD *)&buf[22] = 2082;
        v24 = string_ptr;
        *(_WORD *)v25 = 2114;
        *(_QWORD *)&v25[2] = v18;
        _os_log_impl(&dword_182FBE000, v7, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ client cancelling active connection for service \"%{public}s\" to %{public}@ but no active connection", buf, 0x2Au);
      }

      v16 = 0;
    }
    nw_service_connector_cancel_request_inner(*(void **)(a1 + 40), *(void **)(a1 + 48), (uint64_t)string_ptr, v16, 0);
    dispatch_async(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 40) + 32), *(dispatch_block_t *)(a1 + 56));

  }
}

void sub_183886B20(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void lsqpack_enc_cleanup(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  FILE *v6;

  v2 = *(_QWORD **)(a1 + 56);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)v2[2];
      free(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(_QWORD **)(a1 + 80);
  if (v4)
  {
    do
    {
      v5 = (_QWORD *)*v4;
      free(v4);
      v4 = v5;
    }
    while (v5);
  }
  free(*(void **)(a1 + 72));
  free(*(void **)(a1 + 216));
  v6 = *(FILE **)(a1 + 200);
  if (v6)
  {
    fwrite("qenc: debug: ", 0xDuLL, 1uLL, v6);
    fwrite("cleaned up", 0xAuLL, 1uLL, *(FILE **)(a1 + 200));
    fputc(10, *(FILE **)(a1 + 200));
  }
}

unint64_t lsqpack_enc_enc_str(char a1, _BYTE *a2, unint64_t a3, unsigned __int8 *__src, size_t __n)
{
  char *v7;
  unsigned __int8 *v8;
  char *v9;
  int64_t v10;
  unsigned int v11;
  unsigned __int8 *v12;
  int v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  int64x2_t v22;
  int v23;
  uint64x2_t v24;
  int16x8_t v25;
  uint8x8_t v26;
  unint64_t result;
  int v28;
  unint64_t v29;
  int64x2_t v30;
  int v31;
  uint64x2_t v32;
  int16x8_t v33;
  __int32 v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;
  _BYTE *v39;
  unint64_t v40;
  unint64_t v41;
  int v42;
  unint64_t v43;
  _BYTE *v44;
  unint64_t v45;
  unint64_t v46;
  _BYTE *v47;
  unsigned int v48;
  uint64_t v49;
  _BYTE *v50;
  uint64_t v51;
  unsigned __int8 *v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  unsigned __int16 *v58;
  char v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  unsigned int v63;
  unsigned int *v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t v67;
  _BYTE *v68;
  unsigned int v69;
  char v70;
  uint64_t v71;
  int v72;

  v7 = (char *)&__src[__n];
  if ((_DWORD)__n)
  {
    v8 = __src + 1;
    if (v7 <= (char *)__src + 1)
      v9 = (char *)(__src + 1);
    else
      v9 = (char *)&__src[__n];
    v10 = v9 - (char *)__src;
    if ((unint64_t)(v9 - (char *)__src) >= 2)
    {
      v13 = 0;
      v14 = 0;
      v15 = v10 & 0xFFFFFFFFFFFFFFFELL;
      v16 = v10 & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        v17 = *(v8 - 1);
        v18 = *v8;
        v8 += 2;
        v13 += encode_table[2 * v17 + 1];
        v14 += encode_table[2 * v18 + 1];
        v16 -= 2;
      }
      while (v16);
      v11 = v14 + v13;
      if (v10 == v15)
        goto LABEL_13;
      v12 = &__src[v15];
    }
    else
    {
      v11 = 0;
      v12 = __src;
    }
    do
    {
      v19 = *v12++;
      v11 += encode_table[2 * v19 + 1];
    }
    while (v12 < (unsigned __int8 *)v7);
  }
  else
  {
    v11 = 0;
  }
LABEL_13:
  LODWORD(v20) = v11 >> 3;
  if ((v11 & 7) != 0)
    v20 = (v20 + 1);
  else
    v20 = v20;
  if (v20 < __n)
  {
    v21 = ~(-1 << a1);
    v22 = vdupq_n_s64(-1 << a1);
    if (v21 > v20)
      v23 = 1;
    else
      v23 = 2;
    v24 = (uint64x2_t)vdupq_n_s64(v20);
    v25 = (int16x8_t)vandq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_u64(v24, (uint64x2_t)vsubq_s64((int64x2_t)xmmword_183C6F1B0, v22)), (int32x4_t)vcgeq_u64(v24, (uint64x2_t)vsubq_s64((int64x2_t)xmmword_183C6F1C0, v22))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_u64(v24, (uint64x2_t)vsubq_s64((int64x2_t)xmmword_183C6F1D0, v22)), (int32x4_t)vcgeq_u64(v24, (uint64x2_t)vsubq_s64((int64x2_t)xmmword_183C6F1E0, v22)))), (int8x16_t)xmmword_183C6F1F0);
    v25.i32[0] = vaddvq_s16(v25);
    v26 = (uint8x8_t)vcnt_s8(*(int8x8_t *)v25.i8);
    v26.i16[0] = vaddlv_u8(v26);
    result = (v23 + v26.i32[0] + v20);
    if (result <= a3)
    {
      v28 = *a2 & (-2 << a1) | (1 << a1);
      if (v21 <= v20)
      {
        v37 = -1 << a1;
        v38 = ~v37;
        *a2 = v28 | ~(_BYTE)v37;
        v39 = a2 + 1;
        v40 = v20 - v38;
        if (v20 - v38 < 0x80)
        {
          LOBYTE(v20) = v20 - v38;
        }
        else
        {
          do
          {
            *v39++ = v40 | 0x80;
            v20 = v40 >> 7;
            v41 = v40 >> 14;
            v40 >>= 7;
          }
          while (v41);
        }
        *v39 = v20;
      }
      else
      {
        *a2 = v28 | v20;
      }
      v47 = &a2[v23 + v26.i32[0]];
      if (__n < 0xF)
      {
        v49 = 0;
        v48 = 0;
        if (__src != (unsigned __int8 *)v7)
        {
          do
          {
LABEL_47:
            v62 = v49;
            while (1)
            {
              v63 = *__src++;
              v64 = &encode_table[2 * v63];
              v49 = *v64;
              v65 = v64[1];
              v66 = v65 + v48;
              if (v65 + v48 > 0x3F)
                break;
              v62 = (v62 << v65) | v49;
              v48 += v65;
              if (__src == (unsigned __int8 *)v7)
              {
                v68 = v47;
                v49 = v62;
                v48 = v66;
                goto LABEL_52;
              }
            }
            v67 = v62 << -(uint64_t)v48;
            v48 = v65 - (64 - v48);
            *v47 = HIBYTE(v67);
            v47[1] = BYTE6(v67);
            v47[2] = BYTE5(v67);
            v47[3] = BYTE4(v67);
            LODWORD(v67) = v67 | (v49 >> v48);
            v47[4] = BYTE3(v67);
            v47[5] = BYTE2(v67);
            v47[6] = BYTE1(v67);
            v68 = v47 + 8;
            v47[7] = v67;
            v47 += 8;
          }
          while (__src != (unsigned __int8 *)v7);
LABEL_52:
          if (!v48)
            goto LABEL_65;
          goto LABEL_56;
        }
      }
      else
      {
        v48 = 0;
        v49 = 0;
        v50 = &a2[v23 + v26.i32[0]];
        while (1)
        {
          v52 = __src + 2;
          v51 = *(unsigned __int16 *)__src;
          v53 = hencs[2 * v51];
          v54 = v53 + v48;
          if (v53 + v48 > 0x3F)
          {
            v58 = (unsigned __int16 *)__src;
          }
          else
          {
            do
            {
              v48 = v54;
              v55 = v49 << v53;
              v56 = hencs[2 * v51 + 1];
              v57 = *(unsigned __int16 *)v52;
              v52 += 2;
              v51 = v57;
              v49 = v55 | v56;
              v53 = hencs[2 * v57];
              v54 += v53;
            }
            while (v54 < 0x40);
            v58 = (unsigned __int16 *)(v52 - 2);
          }
          __src = v52;
          if (v53 > 0x3F)
            break;
          v59 = 64 - v48;
          v60 = v49 << -(uint64_t)v48;
          v49 = hencs[2 * v51 + 1];
          v48 = v53 - (64 - v48);
          *v50 = HIBYTE(v60);
          v50[1] = BYTE6(v60);
          v50[2] = BYTE5(v60);
          v50[3] = BYTE4(v60);
          v61 = v60 | (v49 >> (v53 - v59));
          v50[4] = HIBYTE(v61);
          v50[5] = BYTE2(v61);
          v50[6] = BYTE1(v61);
          v47 = v50 + 8;
          v50[7] = v61;
          v50 += 8;
          if (__src + 14 >= (unsigned __int8 *)v7)
          {
            if (__src == (unsigned __int8 *)v7)
              goto LABEL_55;
            goto LABEL_47;
          }
        }
        v47 = v50;
        __src = (unsigned __int8 *)v58;
        if (v58 != (unsigned __int16 *)v7)
          goto LABEL_47;
      }
LABEL_55:
      v68 = v47;
      if (!v48)
      {
LABEL_65:
        if ((_DWORD)result != (_DWORD)v68 - (_DWORD)a2)
          __assert_rtn("lsqpack_enc_enc_str", "lsqpack.c", 823, "(unsigned) (p - dst) == len_size + enc_size_bytes");
        return result;
      }
LABEL_56:
      v69 = v48 + 7;
      v70 = ((v48 + 7) & 0xF8) - v48;
      v71 = v49 << v70;
      v72 = (v49 << v70) | ~(-1 << v70);
      switch(v69 >> 3)
      {
        case 2u:
          goto LABEL_63;
        case 3u:
          goto LABEL_62;
        case 4u:
          goto LABEL_61;
        case 5u:
          goto LABEL_60;
        case 6u:
          goto LABEL_59;
        case 7u:
          goto LABEL_58;
        case 8u:
          *v68++ = HIBYTE(v71);
LABEL_58:
          *v68++ = BYTE6(v71);
LABEL_59:
          *v68++ = BYTE5(v71);
LABEL_60:
          *v68++ = BYTE4(v71);
LABEL_61:
          *v68++ = HIBYTE(v72);
LABEL_62:
          *v68++ = BYTE2(v72);
LABEL_63:
          *v68++ = BYTE1(v72);
          break;
        default:
          break;
      }
      *v68 = v72;
      LODWORD(v68) = (_DWORD)v68 + 1;
      goto LABEL_65;
    }
    return 0xFFFFFFFFLL;
  }
  v29 = ~(-1 << a1);
  v30 = vdupq_n_s64(-1 << a1);
  if (v29 > __n)
    v31 = 1;
  else
    v31 = 2;
  v32 = (uint64x2_t)vdupq_n_s64(__n);
  v33 = (int16x8_t)vandq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_u64(v32, (uint64x2_t)vsubq_s64((int64x2_t)xmmword_183C6F1B0, v30)), (int32x4_t)vcgeq_u64(v32, (uint64x2_t)vsubq_s64((int64x2_t)xmmword_183C6F1C0, v30))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_u64(v32, (uint64x2_t)vsubq_s64((int64x2_t)xmmword_183C6F1D0, v30)), (int32x4_t)vcgeq_u64(v32, (uint64x2_t)vsubq_s64((int64x2_t)xmmword_183C6F1E0, v30)))), (int8x16_t)xmmword_183C6F1F0);
  v33.i32[0] = vaddvq_s16(v33);
  *(int8x8_t *)v33.i8 = vcnt_s8(*(int8x8_t *)v33.i8);
  v33.i16[0] = vaddlv_u8(*(uint8x8_t *)v33.i8);
  v34 = v31 + v33.i32[0];
  v35 = (v34 + __n);
  if (v35 > a3)
    return 0xFFFFFFFFLL;
  v36 = *a2 & (-2 << a1);
  if (v29 <= __n)
  {
    v42 = -1 << a1;
    v43 = ~v42;
    *a2 = v36 | ~(_BYTE)v42;
    v44 = a2 + 1;
    v45 = __n - v43;
    if (v45 < 0x80)
    {
      LOBYTE(v43) = __n - v43;
    }
    else
    {
      do
      {
        *v44++ = v45 | 0x80;
        v43 = v45 >> 7;
        v46 = v45 >> 14;
        v45 >>= 7;
      }
      while (v46);
    }
    *v44 = v43;
  }
  else
  {
    *a2 = v36 | __n;
  }
  memcpy(&a2[v34], __src, __n);
  return v35;
}

uint64_t lsqpack_enc_end_header(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  float v5;
  float v6;
  FILE *v7;
  float v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  FILE *v13;
  unint64_t v14;
  unint64_t v15;
  FILE *v16;
  _QWORD *v17;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  _BYTE *v28;
  unsigned int v29;
  unsigned int v30;
  BOOL v31;
  unsigned int v32;
  char v33;
  uint64_t v34;
  char v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  FILE *v42;

  if ((*(_BYTE *)(a1 + 12) & 1) == 0)
    return -1;
  if (*(_QWORD *)(a1 + 216))
  {
    v5 = *(float *)(a1 + 212);
    v6 = (float)*(unsigned int *)(a1 + 144);
    if (v5 != 0.0)
      v6 = v5 + (float)(v6 - v5) * 0.4;
    *(float *)(a1 + 212) = v6;
    v7 = *(FILE **)(a1 + 200);
    if (v7)
    {
      fwrite("qenc: debug: ", 0xDuLL, 1uLL, v7);
      fprintf(*(FILE **)(a1 + 200), "header count actual: %u; exponential moving average: %.3f",
        *(_DWORD *)(a1 + 144),
        *(float *)(a1 + 212));
      fputc(10, *(FILE **)(a1 + 200));
    }
    v8 = *(float *)(a1 + 208);
    if (v8 != 0.0 && v8 > *(float *)(a1 + 212))
    {
      v9 = vabds_f32((float)*(unsigned int *)(a1 + 228), v8);
      if (v9 >= 1.5 || (float)(v9 / v8) >= 0.1)
        qenc_hist_update_size(a1, vcvtas_u32_f32(v8));
    }
  }
  v10 = *(_QWORD *)(a1 + 128);
  if (!v10 || !*(_DWORD *)(v10 + 60))
  {
    *(_WORD *)a2 = 0;
    v15 = *(_QWORD *)(a1 + 128);
    v16 = *(FILE **)(a1 + 200);
    if (v15)
    {
      if (v16)
      {
        fwrite("qenc: debug: ", 0xDuLL, 1uLL, v16);
        fprintf(*(FILE **)(a1 + 200), "ended header for stream %llu; dynamic table not referenced",
          *(_QWORD *)(*(_QWORD *)(a1 + 128) + 40));
        fputc(10, *(FILE **)(a1 + 200));
        v15 = *(_QWORD *)(a1 + 128);
      }
      v17 = (_QWORD *)(a1 + 80);
      do
      {
        v17 = (_QWORD *)*v17;
        if (!v17)
          __assert_rtn("enc_free_hinfo", "lsqpack.c", 347, "0");
      }
      while ((unint64_t)(v17 + 2) > v15 || (unint64_t)(v17 + 514) <= v15);
      v19 = (v15 - (unint64_t)(v17 + 2)) >> 6;
      v17[1] &= ~(1 << v19);
      v20 = &v17[8 * (unint64_t)v19];
      v21 = v20[2];
      v22 = (_QWORD *)v20[3];
      v23 = v20 + 2;
      if (v21)
      {
        *(_QWORD *)(v21 + 8) = v22;
        v22 = (_QWORD *)v23[1];
      }
      else
      {
        *(_QWORD *)(a1 + 104) = v22;
      }
      *v22 = v21;
      *(_QWORD *)(a1 + 128) = 0;
    }
    else if (v16)
    {
      fwrite("qenc: debug: ", 0xDuLL, 1uLL, v16);
      fwrite("ended header; hinfo absent", 0x1AuLL, 1uLL, *(FILE **)(a1 + 200));
      fputc(10, *(FILE **)(a1 + 200));
    }
    *(_DWORD *)(a1 + 12) &= ~1u;
    v27 = 2;
    result = 2;
    goto LABEL_67;
  }
  *(_BYTE *)a2 = 0;
  v11 = *(_DWORD *)(v10 + 60) % (2 * *(_DWORD *)(a1 + 28));
  v12 = v11 + 1;
  v13 = *(FILE **)(a1 + 200);
  if (v13)
  {
    fwrite("qenc: debug: ", 0xDuLL, 1uLL, v13);
    fprintf(*(FILE **)(a1 + 200), "LargestRef for stream %llu is encoded as %u", *(_QWORD *)(v10 + 40), v11 + 1);
    fputc(10, *(FILE **)(a1 + 200));
  }
  if (v11 > 0xFD)
  {
    *(_BYTE *)a2 = -1;
    v24 = v11 - 254;
    if ((unint64_t)(v11 - 254) <= 0x7F)
    {
      *(_BYTE *)(a2 + 1) = v11 + 2;
      v14 = 2;
    }
    else
    {
      *(_BYTE *)(a2 + 1) = (v11 + 2) | 0x80;
      if (v24 < 0x4000)
      {
        v25 = v24 >> 7;
        v14 = 3;
        v26 = 2;
      }
      else
      {
        *(_BYTE *)(a2 + 2) = (v24 >> 7) | 0x80;
        if (v24 < 0x200000)
        {
          v25 = v24 >> 14;
          v14 = 4;
          v26 = 3;
        }
        else
        {
          *(_BYTE *)(a2 + 3) = (v24 >> 14) | 0x80;
          v25 = v24 >> 28;
          if (v24 >> 28)
          {
            *(_BYTE *)(a2 + 4) = (v24 >> 21) | 0x80;
            v14 = 6;
            v26 = 5;
          }
          else
          {
            v25 = v24 >> 21;
            v14 = 5;
            v26 = 4;
          }
        }
      }
      *(_BYTE *)(a2 + v26) = v25;
    }
  }
  else
  {
    *(_BYTE *)a2 |= v12;
    v14 = 1;
  }
  v28 = (_BYTE *)(a2 + v14);
  v29 = *(_DWORD *)(a1 + 156);
  v30 = *(_DWORD *)(v10 + 60);
  v31 = v29 >= v30;
  v32 = v29 - v30;
  v33 = v29 < v30;
  LODWORD(v34) = v30 + ~v29;
  if (v31)
    v34 = v32;
  else
    v34 = v34;
  if (v31)
    v35 = 0;
  else
    v35 = 0x80;
  *v28 = v33 << 7;
  if (v34 <= 0x7E)
  {
    *v28 = v35 | v34;
    v36 = (unint64_t)(v28 + 1);
LABEL_62:
    if (*(_DWORD *)(v10 + 60) > *(_DWORD *)(a1 + 4))
      qenc_add_to_risked_list(a1, (_QWORD *)v10);
    v42 = *(FILE **)(a1 + 200);
    if (v42)
    {
      fwrite("qenc: debug: ", 0xDuLL, 1uLL, v42);
      fprintf(*(FILE **)(a1 + 200), "ended header for stream %llu; max ref: %u encoded as %u; risked: %d",
        *(_QWORD *)(v10 + 40),
        *(_DWORD *)(v10 + 60),
        v12,
        *(_DWORD *)(v10 + 60) > *(_DWORD *)(a1 + 4));
      fputc(10, *(FILE **)(a1 + 200));
    }
    *(_QWORD *)(a1 + 128) = 0;
    *(_DWORD *)(a1 + 12) &= ~1u;
    result = v36 - a2;
    v27 = v36 - a2;
LABEL_67:
    *(_DWORD *)(a1 + 196) += v27;
    return result;
  }
  *v28 = v35 | 0x7F;
  v37 = v34 - 127;
  if (v37 < 0x80)
  {
    v41 = v14 + 1;
LABEL_61:
    v36 = a2 + v14 + 2;
    *(_BYTE *)(a2 + v41) = v37;
    if (v36 > (unint64_t)v28)
      goto LABEL_62;
  }
  else
  {
    v38 = v37;
    while (1)
    {
      v39 = v14++;
      if (v14 > 0x15)
        break;
      *(_BYTE *)(a2 + 1 + v39) = v38 | 0x80;
      v37 = v38 >> 7;
      v40 = v38 >> 14;
      v38 >>= 7;
      if (!v40)
      {
        v41 = v39 + 2;
        if ((uint64_t)(v39 + 2) <= 21)
          goto LABEL_61;
        return 0;
      }
    }
  }
  return 0;
}

void qenc_hist_update_size(uint64_t a1, unsigned int a2)
{
  _QWORD *v4;
  _QWORD *v5;
  FILE *v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  unint64_t v10;
  unsigned int v11;
  int v12;
  unsigned int v13;

  if (*(_DWORD *)(a1 + 228) != a2)
  {
    if (!a2)
    {
      *(_DWORD *)(a1 + 232) = 0;
      *(_QWORD *)(a1 + 224) = 0;
      return;
    }
    v4 = malloc_type_malloc(8 * (a2 + 1), 0x100004000313F17uLL);
    if (!v4)
      return;
    v5 = v4;
    v6 = *(FILE **)(a1 + 200);
    if (v6)
    {
      fwrite("qenc: debug: ", 0xDuLL, 1uLL, v6);
      fprintf(*(FILE **)(a1 + 200), "history size change from %u to %u", *(_DWORD *)(a1 + 228), a2);
      fputc(10, *(FILE **)(a1 + 200));
    }
    v7 = *(_DWORD *)(a1 + 224);
    if (*(_DWORD *)(a1 + 232))
    {
      v8 = v7 + 1;
      v7 = *(_DWORD *)(a1 + 228);
      v9 = v8 % v7;
    }
    else
    {
      v9 = 0;
      if (!v7)
      {
        LODWORD(v10) = 0;
LABEL_15:
        v13 = v10 % a2;
        *(_DWORD *)(a1 + 224) = v13;
        *(_DWORD *)(a1 + 228) = a2;
        *(_DWORD *)(a1 + 232) = v13 == 0;
        free(*(void **)(a1 + 216));
        *(_QWORD *)(a1 + 216) = v5;
        return;
      }
    }
    v10 = 0;
    v11 = v7 - 1;
    do
    {
      v12 = v10;
      v5[v10] = *(_QWORD *)(*(_QWORD *)(a1 + 216) + 8 * ((v9 + v10) % *(_DWORD *)(a1 + 228)));
      ++v10;
    }
    while (v11 != v12 && v10 < a2);
    goto LABEL_15;
  }
}

uint64_t qenc_add_to_risked_list(uint64_t result, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  FILE *v6;

  a2[2] = 0;
  v2 = *(_QWORD **)(result + 120);
  a2[3] = v2;
  *v2 = a2;
  *(_QWORD *)(result + 120) = a2 + 2;
  v3 = *(_QWORD *)(result + 136);
  if (v3)
  {
    a2[4] = *(_QWORD *)(v3 + 32);
    *(_QWORD *)(v3 + 32) = a2;
  }
  else
  {
    v4 = result;
    v5 = *(_DWORD *)(result + 40) + 1;
    *(_DWORD *)(result + 40) = v5;
    v6 = *(FILE **)(result + 200);
    if (v6)
    {
      fwrite("qenc: debug: ", 0xDuLL, 1uLL, v6);
      fprintf(*(FILE **)(v4 + 200), "streams at risk: %u", *(_DWORD *)(v4 + 40));
      result = fputc(10, *(FILE **)(v4 + 200));
      v5 = *(_DWORD *)(v4 + 40);
    }
    if (v5 > *(_DWORD *)(v4 + 36))
      __assert_rtn("qenc_add_to_risked_list", "lsqpack.c", 1156, "enc->qpe_cur_streams_at_risk <= enc->qpe_max_risked_streams");
  }
  return result;
}

uint64_t XXH_INLINE_XXH32(int *a1, unint64_t a2, int a3)
{
  unint64_t v3;
  int v4;
  int v5;
  int v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  int v10;
  int v11;
  unsigned int v12;
  int v13;
  unint64_t v14;
  int v15;
  unint64_t v16;
  unsigned int v17;

  if (!a1)
  {
    v12 = a3 + 374761393;
    goto LABEL_12;
  }
  if (a2 < 0x10)
  {
    v12 = a3 + 374761393 + a2;
    if (a2 < 4)
      goto LABEL_10;
    goto LABEL_9;
  }
  v3 = (unint64_t)a1 + a2 - 15;
  v4 = a3 + 606290984;
  v5 = a3 - 2048144777;
  v6 = a3 + 1640531535;
  do
  {
    HIDWORD(v7) = v4 - 2048144777 * *a1;
    LODWORD(v7) = HIDWORD(v7);
    v4 = -1640531535 * (v7 >> 19);
    HIDWORD(v7) = v5 - 2048144777 * a1[1];
    LODWORD(v7) = HIDWORD(v7);
    v5 = -1640531535 * (v7 >> 19);
    HIDWORD(v7) = a3 - 2048144777 * a1[2];
    LODWORD(v7) = HIDWORD(v7);
    a3 = -1640531535 * (v7 >> 19);
    HIDWORD(v7) = v6 - 2048144777 * a1[3];
    LODWORD(v7) = HIDWORD(v7);
    v6 = -1640531535 * (v7 >> 19);
    a1 += 4;
  }
  while ((unint64_t)a1 < v3);
  HIDWORD(v9) = v4;
  LODWORD(v9) = v4;
  v8 = v9 >> 31;
  HIDWORD(v9) = v5;
  LODWORD(v9) = v5;
  v10 = v9 >> 25;
  HIDWORD(v9) = a3;
  LODWORD(v9) = a3;
  v11 = v9 >> 20;
  HIDWORD(v9) = v6;
  LODWORD(v9) = v6;
  v12 = v8 + a2 + v10 + v11 + (v9 >> 14);
  a2 &= 0xFu;
  if (a2 >= 4)
  {
    do
    {
LABEL_9:
      v13 = *a1++;
      HIDWORD(v14) = v12 - 1028477379 * v13;
      LODWORD(v14) = HIDWORD(v14);
      v12 = 668265263 * (v14 >> 15);
      a2 -= 4;
    }
    while (a2 > 3);
  }
LABEL_10:
  while (a2)
  {
    v15 = *(unsigned __int8 *)a1;
    a1 = (int *)((char *)a1 + 1);
    HIDWORD(v16) = v12 + 374761393 * v15;
    LODWORD(v16) = HIDWORD(v16);
    v12 = -1640531535 * (v16 >> 21);
    --a2;
  }
LABEL_12:
  v17 = -1028477379 * ((-2048144777 * (v12 ^ (v12 >> 15))) ^ ((-2048144777 * (v12 ^ (v12 >> 15))) >> 13));
  return v17 ^ HIWORD(v17);
}

uint64_t qenc_has_or_can_evict_at_least(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  int v3;
  uint64_t *v4;
  unsigned int v5;
  unsigned int v6;
  BOOL v7;
  uint64_t v8;
  unsigned int v9;
  BOOL v10;
  uint64_t v11;
  unsigned int v12;

  v2 = (*(_DWORD *)(a1 + 20) - *(_DWORD *)(a1 + 16));
  if (v2 >= a2)
    return 1;
  v3 = *(_DWORD *)(a1 + 152);
  if ((v3 & 4) == 0)
  {
    v4 = *(uint64_t **)(a1 + 96);
    if (v4)
    {
      v5 = 0;
      do
      {
        v6 = *((_DWORD *)v4 + 14);
        if (!v5 || (v6 ? (v7 = v6 >= v5) : (v7 = 1), !v7))
          v5 = *((_DWORD *)v4 + 14);
        v4 = (uint64_t *)*v4;
      }
      while (v4);
    }
    else
    {
      v5 = 0;
    }
    *(_DWORD *)(a1 + 148) = v5;
    *(_DWORD *)(a1 + 152) = v3 | 4;
    v8 = *(_QWORD *)(a1 + 128);
    if (!v8)
      goto LABEL_24;
    goto LABEL_18;
  }
  v5 = *(_DWORD *)(a1 + 148);
  v8 = *(_QWORD *)(a1 + 128);
  if (v8)
  {
LABEL_18:
    v9 = *(_DWORD *)(v8 + 56);
    if (!v5 || (v9 ? (v10 = v9 >= v5) : (v10 = 1), !v10))
      v5 = v9;
  }
LABEL_24:
  v11 = *(_QWORD *)(a1 + 56);
  if (v11)
  {
    if (v5)
    {
      do
      {
        v12 = *(_DWORD *)(v11 + 24);
        if (v12 >= v5 || v12 > *(_DWORD *)(a1 + 4))
          break;
        v2 += (*(_DWORD *)(v11 + 48) + *(_DWORD *)(v11 + 52) + 32);
        if (v2 >= a2)
          return 1;
        v11 = *(_QWORD *)(v11 + 16);
      }
      while (v11);
    }
    else
    {
      do
      {
        if (*(_DWORD *)(v11 + 24) > *(_DWORD *)(a1 + 4))
          break;
        v2 += (*(_DWORD *)(v11 + 48) + *(_DWORD *)(v11 + 52) + 32);
        if (v2 >= a2)
          return 1;
        v11 = *(_QWORD *)(v11 + 16);
      }
      while (v11);
    }
  }
  return 0;
}

_QWORD *lsqpack_enc_push_entry(uint64_t a1, int a2, int a3, const void *a4, unsigned int a5, const void *a6, unsigned int a7)
{
  const void *v8;
  int v13;
  uint64_t v14;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t *i;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  char *v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  _DWORD *v34;
  int v35;
  _DWORD *v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  FILE *v41;
  _QWORD v44[3];

  v8 = a6;
  v44[2] = *MEMORY[0x1E0C80C00];
  v13 = *(_DWORD *)(a1 + 52);
  v14 = 1 << v13;
  if (*(_DWORD *)(a1 + 48) >= (1 << v13) >> 1)
  {
    v16 = malloc_type_malloc(32 * (1 << (v13 + 1)), 0xA004088793A40uLL);
    if (!v16)
      return v16;
    v17 = 0;
    v18 = (1 << (v13 + 1)) - 1;
    v19 = *(_QWORD **)(a1 + 72);
    v8 = a6;
    do
    {
      v20 = &v16[4 * v17];
      v21 = &v16[4 * (v14 + v17)];
      v44[0] = v20;
      v44[1] = v21;
      *v20 = 0;
      v20[1] = v20;
      *v21 = 0;
      v21[1] = v21;
      v20[2] = 0;
      v20[3] = v20 + 2;
      v21[2] = 0;
      v21[3] = v21 + 2;
      for (i = &v19[4 * v17]; ; i = &v19[4 * v17])
      {
        v25 = *i;
        if (!*i)
          break;
        v26 = *(_QWORD *)(v25 + 8);
        *i = v26;
        if (!v26)
          i[1] = (uint64_t)i;
        v23 = ((*(_DWORD *)(v25 + 44) & v18) >> v13) & 1;
        *(_QWORD *)(v25 + 8) = 0;
        v24 = v44[v23];
        **(_QWORD **)(v24 + 8) = v25;
        *(_QWORD *)(v24 + 8) = v25 + 8;
        v19 = *(_QWORD **)(a1 + 72);
      }
      while (1)
      {
        v29 = (char *)&v19[4 * v17];
        v32 = (uint64_t *)*((_QWORD *)v29 + 2);
        v31 = (uint64_t *)(v29 + 16);
        v30 = v32;
        if (!v32)
          break;
        v33 = *v30;
        *v31 = *v30;
        if (!v33)
          v19[4 * v17 + 3] = v31;
        v27 = (((_DWORD)v30[5] & v18) >> v13) & 1;
        *v30 = 0;
        v28 = v44[v27];
        **(_QWORD **)(v28 + 24) = v30;
        *(_QWORD *)(v28 + 24) = v30;
        v19 = *(_QWORD **)(a1 + 72);
      }
      ++v17;
    }
    while (v17 != v14);
    free(v19);
    *(_DWORD *)(a1 + 52) = v13 + 1;
    *(_QWORD *)(a1 + 72) = v16;
  }
  v34 = malloc_type_malloc(a5 + (unint64_t)a7 + 56, 0x5A4B1079uLL);
  v16 = v34;
  if (v34)
  {
    v34[10] = a3;
    v34[11] = a2;
    v34[12] = a5;
    v34[13] = a7;
    v34[7] = *(_DWORD *)(a1 + 16);
    v34[8] = *(_DWORD *)(a1 + 32);
    v35 = *(_DWORD *)a1 + 1;
    *(_DWORD *)a1 = v35;
    v34[6] = v35;
    v36 = v34 + 14;
    memcpy(v34 + 14, a4, a5);
    memcpy((char *)v36 + a5, v8, a7);
    v16[2] = 0;
    **(_QWORD **)(a1 + 64) = v16;
    *(_QWORD *)(a1 + 64) = v16 + 2;
    v37 = -1 << *(_DWORD *)(a1 + 52);
    *v16 = 0;
    v38 = 32 * (a3 & ~v37);
    **(_QWORD **)(*(_QWORD *)(a1 + 72) + v38 + 24) = v16;
    v39 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(v39 + v38 + 24) = v16;
    v16[1] = 0;
    v40 = 32 * (a2 & ~v37);
    **(_QWORD **)(v39 + v40 + 8) = v16;
    *(_QWORD *)(*(_QWORD *)(a1 + 72) + v40 + 8) = v16 + 1;
    *(_DWORD *)(a1 + 16) += a5 + a7 + 32;
    ++*(_DWORD *)(a1 + 48);
    v41 = *(FILE **)(a1 + 200);
    if (v41)
    {
      fwrite("qenc: debug: ", 0xDuLL, 1uLL, v41);
        *((_DWORD *)v16 + 6),
        *((_DWORD *)v16 + 12),
        (const char *)v16 + 56,
        *((_DWORD *)v16 + 13),
        (const char *)v16 + *((unsigned int *)v16 + 12) + 56,
        *(_DWORD *)(a1 + 48),
        *(_DWORD *)(a1 + 16));
      fputc(10, *(FILE **)(a1 + 200));
    }
  }
  return v16;
}

void qenc_remove_overflow_entries(uint64_t a1)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  void **v5;
  int v6;
  char *v7;
  FILE *v8;
  _QWORD *v9;
  void *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  char *v16;
  uint64_t v17;
  void **v18;
  void *v19;
  FILE *v20;
  BOOL v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  float v25;
  float v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  _DWORD *v31;
  int v32;
  uint64_t v33;
  int v34;
  float v35;
  float v36;
  FILE *v37;
  FILE *v38;
  unsigned int v39;

  v2 = *(_DWORD *)(a1 + 16);
  v3 = *(_DWORD *)(a1 + 20);
  v4 = v3;
  if (v2 > v3)
  {
    v5 = (void **)(a1 + 56);
    do
    {
      v7 = (char *)*v5;
      if (!*v5)
        __assert_rtn("qenc_drop_oldest_entry", "lsqpack.c", 852, "entry");
      v8 = *(FILE **)(a1 + 200);
      v9 = *v5;
      if (v8)
      {
        fwrite("qenc: debug: ", 0xDuLL, 1uLL, v8);
          *((_DWORD *)v7 + 6),
          *((_DWORD *)v7 + 12),
          v7 + 56,
          *((_DWORD *)v7 + 13),
          &v7[*((unsigned int *)v7 + 12) + 56],
          *(_DWORD *)(a1 + 48) - 1,
          *(_DWORD *)(a1 + 16) - (*((_DWORD *)v7 + 12) + *((_DWORD *)v7 + 13)) - 32);
        fputc(10, *(FILE **)(a1 + 200));
        v9 = *(_QWORD **)(a1 + 56);
      }
      v10 = (void *)v9[2];
      *v5 = v10;
      if (!v10)
        *(_QWORD *)(a1 + 64) = v5;
      v11 = -1 << *(_DWORD *)(a1 + 52);
      v12 = *((_DWORD *)v7 + 10) & ~v11;
      v13 = *(_QWORD *)(a1 + 72);
      v14 = v13 + 32 * v12;
      v16 = *(char **)(v14 + 16);
      v15 = (_QWORD *)(v14 + 16);
      if (v7 != v16)
        __assert_rtn("qenc_drop_oldest_entry", "lsqpack.c", 859, "entry == STAILQ_FIRST(&enc->qpe_buckets[buckno].by_nameval)");
      v17 = *(_QWORD *)v7;
      *v15 = *(_QWORD *)v7;
      if (!v17)
        *(_QWORD *)(v13 + 32 * v12 + 24) = v15;
      v18 = (void **)(v13 + 32 * (*((_DWORD *)v7 + 11) & ~v11));
      if (v7 != *v18)
        __assert_rtn("qenc_drop_oldest_entry", "lsqpack.c", 862, "entry == STAILQ_FIRST(&enc->qpe_buckets[buckno].by_name)");
      v19 = (void *)*((_QWORD *)v7 + 1);
      *v18 = v19;
      if (!v19)
        v18[1] = v18;
      v6 = *((_DWORD *)v7 + 12) + *((_DWORD *)v7 + 13) + 32;
      *(_DWORD *)(a1 + 32) += v6;
      *(_DWORD *)(a1 + 16) -= v6;
      --*(_DWORD *)(a1 + 48);
      free(v7);
      v4 = *(_DWORD *)(a1 + 20);
    }
    while (*(_DWORD *)(a1 + 16) > v4);
  }
  v20 = *(FILE **)(a1 + 200);
  if (v4)
    v21 = v20 == 0;
  else
    v21 = 1;
  if (!v21)
  {
    v22 = *(_DWORD *)(a1 + 12);
    fwrite("qenc: debug: ", 0xDuLL, 1uLL, v20);
    v24 = *(_DWORD *)(a1 + 16);
    v23 = *(_DWORD *)(a1 + 20);
    v25 = (float)v23;
    v26 = (float)v24 / (float)v23;
    v27 = v26;
    if ((v22 & 2) != 0)
    {
      if (!v23)
        __assert_rtn("qenc_effective_fill", "lsqpack.c", 878, "enc->qpe_cur_max_capacity");
      v28 = *(_QWORD *)(a1 + 56);
      v39 = v2;
      v38 = *(FILE **)(a1 + 200);
      if (v28 && (v29 = *(_QWORD *)(v28 + 16)) != 0)
      {
        v30 = 0;
        do
        {
          v31 = (_DWORD *)v28;
          v28 = v29;
          v32 = v31[12];
          v33 = v29;
          while (1)
          {
            if (*(_DWORD *)(v33 + 48) == v32)
            {
              v34 = *(_DWORD *)(v33 + 52);
              if (v34 == v31[13] && !memcmp((const void *)(v33 + 56), v31 + 14, (v34 + v32)))
                break;
            }
            v33 = *(_QWORD *)(v33 + 16);
            if (!v33)
              goto LABEL_25;
          }
          v30 += v32 + v34 + 32;
LABEL_25:
          v29 = *(_QWORD *)(v28 + 16);
        }
        while (v29);
      }
      else
      {
        v30 = 0;
      }
      fprintf(v38, "fill: %.2f; effective fill: %.2f", v27, (float)((float)(v24 - v30) / v25));
      v2 = v39;
    }
    else
    {
      fprintf(*(FILE **)(a1 + 200), "fill: %.2f", v26);
    }
    fputc(10, *(FILE **)(a1 + 200));
  }
  if (v2 > v3 && *(_QWORD *)(a1 + 216))
  {
    v35 = *(float *)(a1 + 208);
    v36 = (float)*(unsigned int *)(a1 + 48);
    if (v35 != 0.0)
      v36 = v35 + (float)(v36 - v35) * 0.4;
    *(float *)(a1 + 208) = v36;
    v37 = *(FILE **)(a1 + 200);
    if (v37)
    {
      fwrite("qenc: debug: ", 0xDuLL, 1uLL, v37);
      fprintf(*(FILE **)(a1 + 200), "table size actual: %u; exponential moving average: %.3f",
        *(_DWORD *)(a1 + 48),
        *(float *)(a1 + 208));
      fputc(10, *(FILE **)(a1 + 200));
    }
  }
}

uint64_t enc_proc_stream_cancel(uint64_t a1, unint64_t a2)
{
  FILE *v4;
  FILE *v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  FILE *v10;
  _QWORD *v11;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  FILE *v18;

  v4 = *(FILE **)(a1 + 200);
  if (v4)
  {
    fwrite("qenc: debug: ", 0xDuLL, 1uLL, v4);
    fprintf(*(FILE **)(a1 + 200), "got Cancel Stream instruction; stream=%llu", a2);
    fputc(10, *(FILE **)(a1 + 200));
  }
  if (!(a2 >> 62))
  {
    v7 = *(_QWORD *)(a1 + 96);
    if (v7)
    {
      v8 = 0;
      do
      {
        v9 = *(_QWORD *)v7;
        if (*(_QWORD *)(v7 + 40) == a2)
        {
          v10 = *(FILE **)(a1 + 200);
          if (v10)
          {
            fwrite("qenc: debug: ", 0xDuLL, 1uLL, v10);
            fprintf(*(FILE **)(a1 + 200), "cancel header block for stream %llu, seqno %u", a2, *(_DWORD *)(v7 + 48));
            fputc(10, *(FILE **)(a1 + 200));
          }
          if (*(_DWORD *)(v7 + 60) > *(_DWORD *)(a1 + 4))
            qenc_remove_from_risked_list(a1, (_QWORD *)v7);
          v11 = (_QWORD *)(a1 + 80);
          do
          {
            v11 = (_QWORD *)*v11;
            if (!v11)
              __assert_rtn("enc_free_hinfo", "lsqpack.c", 347, "0");
          }
          while ((unint64_t)(v11 + 2) > v7 || (unint64_t)(v11 + 514) <= v7);
          v13 = (v7 - (unint64_t)(v11 + 2)) >> 6;
          v11[1] &= ~(1 << v13);
          v14 = &v11[8 * (unint64_t)v13];
          v15 = v14[2];
          v16 = (_QWORD *)v14[3];
          v17 = v14 + 2;
          if (v15)
          {
            *(_QWORD *)(v15 + 8) = v16;
            v16 = (_QWORD *)v17[1];
          }
          else
          {
            *(_QWORD *)(a1 + 104) = v16;
          }
          *v16 = v15;
          ++v8;
        }
        v7 = v9;
      }
      while (v9);
    }
    else
    {
      v8 = 0;
    }
    v18 = *(FILE **)(a1 + 200);
    if (!v18)
      return 0;
    fwrite("qenc: debug: ", 0xDuLL, 1uLL, v18);
    fprintf(*(FILE **)(a1 + 200), "cancelled %u header block%.*s of stream %llu", v8, v8 != 1, "s", a2);
    v6 = 0;
    goto LABEL_29;
  }
  v5 = *(FILE **)(a1 + 200);
  if (v5)
  {
    fwrite("qenc: info: ", 0xCuLL, 1uLL, v5);
    fprintf(*(FILE **)(a1 + 200), "Invalid stream ID %llu in Cancel Stream", a2);
    v6 = 0xFFFFFFFFLL;
LABEL_29:
    fputc(10, *(FILE **)(a1 + 200));
    return v6;
  }
  return 0xFFFFFFFFLL;
}

uint64_t enc_proc_header_ack(uint64_t a1, unint64_t a2)
{
  FILE *v4;
  uint64_t result;
  unint64_t v6;
  uint64_t v7;
  FILE *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;

  v4 = *(FILE **)(a1 + 200);
  if (v4)
  {
    fwrite("qenc: debug: ", 0xDuLL, 1uLL, v4);
    fprintf(*(FILE **)(a1 + 200), "got Header Ack instruction, stream=%llu", a2);
    fputc(10, *(FILE **)(a1 + 200));
  }
  if (!(a2 >> 62))
  {
    v6 = a1 + 96;
    while (1)
    {
      v6 = *(_QWORD *)v6;
      if (!v6)
        break;
      if (*(_QWORD *)(v6 + 40) == a2)
      {
        if (*(_DWORD *)(v6 + 60) > *(_DWORD *)(a1 + 4))
        {
          qenc_remove_from_risked_list(a1, (_QWORD *)v6);
          *(_DWORD *)(a1 + 4) = *(_DWORD *)(v6 + 60);
          v7 = *(_QWORD *)(a1 + 112);
          if (v7)
          {
            do
            {
              v16 = *(_QWORD *)(v7 + 16);
              if (*(_DWORD *)(v7 + 60) <= *(_DWORD *)(a1 + 4))
                qenc_remove_from_risked_list(a1, (_QWORD *)v7);
              v7 = v16;
            }
            while (v16);
          }
          v8 = *(FILE **)(a1 + 200);
          if (v8)
          {
            fwrite("qenc: debug: ", 0xDuLL, 1uLL, v8);
            fprintf(*(FILE **)(a1 + 200), "max acked ID is now %u", *(_DWORD *)(a1 + 4));
            fputc(10, *(FILE **)(a1 + 200));
          }
        }
        v9 = (_QWORD *)(a1 + 80);
        do
        {
          v9 = (_QWORD *)*v9;
          if (!v9)
            __assert_rtn("enc_free_hinfo", "lsqpack.c", 347, "0");
          v10 = v9 + 2;
        }
        while ((unint64_t)(v9 + 2) > v6 || (unint64_t)(v9 + 514) <= v6);
        v9[1] &= ~(1 << ((v6 - (unint64_t)v10) >> 6));
        v12 = &v9[8 * (unint64_t)((v6 - (unint64_t)v10) >> 6)];
        v13 = v12[2];
        v14 = (_QWORD *)v12[3];
        v15 = v12 + 2;
        if (v13)
        {
          *(_QWORD *)(v13 + 8) = v14;
          v14 = (_QWORD *)v15[1];
        }
        else
        {
          *(_QWORD *)(a1 + 104) = v14;
        }
        result = 0;
        *v14 = v13;
        return result;
      }
    }
  }
  return 0xFFFFFFFFLL;
}

uint64_t enc_proc_ici(uint64_t a1, unint64_t a2)
{
  FILE *v4;
  FILE *v5;
  FILE *v6;
  unsigned int v7;
  FILE *v8;
  uint64_t v9;
  FILE *v11;
  uint64_t v12;
  FILE *v13;

  v4 = *(FILE **)(a1 + 200);
  if (v4)
  {
    fwrite("qenc: debug: ", 0xDuLL, 1uLL, v4);
    fprintf(*(FILE **)(a1 + 200), "got ICI instruction, count=%llu", a2);
    fputc(10, *(FILE **)(a1 + 200));
  }
  if (!a2)
  {
    v6 = *(FILE **)(a1 + 200);
    if (v6)
    {
      fwrite("qenc: info: ", 0xCuLL, 1uLL, v6);
      fwrite("ICI=0 is an error", 0x11uLL, 1uLL, *(FILE **)(a1 + 200));
      goto LABEL_12;
    }
    return 0xFFFFFFFFLL;
  }
  if (HIDWORD(a2))
  {
    v5 = *(FILE **)(a1 + 200);
    if (v5)
    {
      fwrite("qenc: info: ", 0xCuLL, 1uLL, v5);
      fprintf(*(FILE **)(a1 + 200), "insertion count too high: %llu");
LABEL_12:
      v9 = 0xFFFFFFFFLL;
LABEL_13:
      fputc(10, *(FILE **)(a1 + 200));
      return v9;
    }
    return 0xFFFFFFFFLL;
  }
  v7 = *(_DWORD *)(a1 + 8) + a2;
  if (v7 > *(_DWORD *)a1)
  {
    v8 = *(FILE **)(a1 + 200);
    if (v8)
    {
      fwrite("qenc: debug: ", 0xDuLL, 1uLL, v8);
      fprintf(*(FILE **)(a1 + 200), "ICI: max_acked %u is larger than number of inserts %u");
      goto LABEL_12;
    }
    return 0xFFFFFFFFLL;
  }
  if (v7 <= *(_DWORD *)(a1 + 4))
  {
    v13 = *(FILE **)(a1 + 200);
    if (v13)
    {
      fwrite("qenc: debug: ", 0xDuLL, 1uLL, v13);
      fprintf(*(FILE **)(a1 + 200), "duplicate ICI: %u", v7);
      v9 = 0;
      goto LABEL_13;
    }
    return 0;
  }
  *(_DWORD *)(a1 + 4) = v7;
  *(_DWORD *)(a1 + 8) = v7;
  v11 = *(FILE **)(a1 + 200);
  if (v11)
  {
    fwrite("qenc: debug: ", 0xDuLL, 1uLL, v11);
    fprintf(*(FILE **)(a1 + 200), "max acked ID is now %u", *(_DWORD *)(a1 + 4));
    fputc(10, *(FILE **)(a1 + 200));
  }
  v12 = *(_QWORD *)(a1 + 112);
  if (!v12)
    return 0;
  do
  {
    v9 = *(_QWORD *)(v12 + 16);
    if (*(_DWORD *)(v12 + 60) <= *(_DWORD *)(a1 + 4))
      qenc_remove_from_risked_list(a1, (_QWORD *)v12);
    v12 = v9;
  }
  while (v9);
  return v9;
}

uint64_t qenc_remove_from_risked_list(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  int v8;
  FILE *v9;

  v2 = result;
  if (*(_QWORD *)(result + 112))
  {
    v3 = a2[2];
    v4 = (_QWORD *)a2[3];
    if (v3)
    {
      *(_QWORD *)(v3 + 24) = v4;
      v4 = (_QWORD *)a2[3];
    }
    else
    {
      *(_QWORD *)(result + 120) = v4;
    }
    *v4 = v3;
    v5 = (_QWORD *)a2[4];
    if (v5 == a2)
    {
      v8 = *(_DWORD *)(result + 40);
      if (!v8)
        __assert_rtn("qenc_remove_from_risked_list", "lsqpack.c", 1174, "enc->qpe_cur_streams_at_risk > 0");
      *(_DWORD *)(result + 40) = v8 - 1;
      v9 = *(FILE **)(result + 200);
      if (v9)
      {
        fwrite("qenc: debug: ", 0xDuLL, 1uLL, v9);
        fprintf(*(FILE **)(v2 + 200), "streams at risk: %u", *(_DWORD *)(v2 + 40));
        return fputc(10, *(FILE **)(v2 + 200));
      }
    }
    else
    {
      v6 = (_QWORD *)a2[4];
      do
      {
        v7 = v6;
        v6 = (_QWORD *)v6[4];
      }
      while (v6 != a2);
      v7[4] = v5;
      a2[4] = a2;
    }
  }
  else if (*(_DWORD *)(result + 40))
  {
    __assert_rtn("qenc_remove_from_risked_list", "lsqpack.c", 1168, "enc->qpe_cur_streams_at_risk == 0");
  }
  return result;
}

void lsqpack_dec_cleanup(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  int v4;
  _DWORD *v5;
  int v6;
  unsigned int v7;
  int v8;
  FILE *v9;

  v2 = *(_QWORD **)(a1 + 80);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      free(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(_DWORD *)(a1 + 232);
  if ((v4 - 1) > 4)
  {
    if ((v4 - 8) > 6)
      goto LABEL_9;
    v5 = *(_DWORD **)(a1 + 280);
    if (!v5)
      goto LABEL_9;
  }
  else
  {
    v5 = *(_DWORD **)(a1 + 288);
    if (!v5)
      goto LABEL_9;
  }
LABEL_8:
  free(v5);
LABEL_9:
  v6 = *(_DWORD *)(a1 + 60);
  v7 = *(_DWORD *)(a1 + 64);
  while (v6 != v7)
  {
    v5 = *(_DWORD **)(*(_QWORD *)(a1 + 72) + 8 * v7);
    v7 = (v7 + 1) % *(_DWORD *)(a1 + 56);
    *(_DWORD *)(a1 + 64) = v7;
    v8 = v5[2] - 1;
    v5[2] = v8;
    if (!v8)
      goto LABEL_8;
  }
  free(*(void **)(a1 + 72));
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  v9 = *(FILE **)(a1 + 48);
  if (v9)
  {
    fwrite("qdec: debug: ", 0xDuLL, 1uLL, v9);
    fwrite("cleaned up", 0xAuLL, 1uLL, *(FILE **)(a1 + 48));
    fputc(10, *(FILE **)(a1 + 48));
  }
}

uint64_t lsqpack_huff_decode_full(_BYTE *a1, int a2, _BYTE *a3, uint64_t a4, uint64_t a5, int a6)
{
  _BYTE *v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  unsigned int v10;
  unsigned __int8 *v11;
  unsigned __int8 v12;
  char *v13;
  char v14;
  char v15;

  if ((_DWORD)a4)
  {
    v6 = &a3[(int)a4];
    v7 = a1;
    v8 = a3;
    switch(*(_DWORD *)a5)
    {
      case 0:
        *(_WORD *)(a5 + 4) = 256;
        v7 = a1;
        v8 = a3;
        goto LABEL_6;
      case 1:
        goto LABEL_6;
      case 2:
        goto LABEL_8;
      case 3:
        v10 = *(unsigned __int8 *)(a5 + 4);
        v7 = a1;
        v8 = a3;
        break;
      default:
        goto LABEL_20;
    }
    while (1)
    {
      v13 = (char *)&decode_tables + 48 * v10 + 3 * (*v7 & 0xF);
      v14 = v13[1];
      if ((v14 & 4) != 0)
      {
LABEL_19:
        a4 = 0;
        v9 = 3;
        return v9 | (a4 << 32);
      }
      v15 = *v13;
      if ((v13[1] & 2) != 0)
      {
        *v8++ = v13[2];
        *(_BYTE *)(a5 + 4) = v15;
        *(_BYTE *)(a5 + 5) = v14 & 1;
        ++v7;
      }
      else
      {
        *(_BYTE *)(a5 + 4) = v15;
        *(_BYTE *)(a5 + 5) = v14 & 1;
        if (!v8)
          goto LABEL_19;
        ++v7;
      }
LABEL_6:
      if (v7 == &a1[a2])
        break;
      if (v8 == v6)
      {
        v9 = 2;
        *(_DWORD *)a5 = 2;
        return v9 | (a4 << 32);
      }
LABEL_8:
      v11 = (unsigned __int8 *)&decode_tables
          + 48 * *(unsigned __int8 *)(a5 + 4)
          + 3 * ((unint64_t)*v7 >> 4);
      v12 = v11[1];
      if ((v12 & 4) != 0)
        goto LABEL_19;
      v10 = *v11;
      if ((v11[1] & 2) != 0)
      {
        *v8++ = v11[2];
        *(_BYTE *)(a5 + 4) = v10;
        *(_BYTE *)(a5 + 5) = v12 & 1;
        if (v8 == v6)
          goto LABEL_17;
      }
      else
      {
        *(_BYTE *)(a5 + 4) = v10;
        *(_BYTE *)(a5 + 5) = v12 & 1;
        if (!v8)
          goto LABEL_19;
        if (v8 == v6)
        {
LABEL_17:
          *(_DWORD *)a5 = 3;
          v9 = 2;
          return v9 | (a4 << 32);
        }
      }
    }
LABEL_20:
    if (a6)
    {
      v9 = 3;
      if (*(_BYTE *)(a5 + 5))
        v9 = 0;
    }
    else
    {
      v9 = 1;
      *(_DWORD *)a5 = 1;
    }
    a4 = ((_DWORD)v8 - (_DWORD)a3);
  }
  else
  {
    v9 = 2;
  }
  return v9 | (a4 << 32);
}

uint64_t qdec_header_process(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4, _BYTE *a5, uint64_t *a6)
{
  _QWORD *v9;
  unint64_t v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  FILE *v17;
  FILE **v18;
  _OWORD *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _QWORD *v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  FILE *v33;
  uint64_t v34;
  FILE *v35;
  FILE *v36;
  float v37;
  float v38;
  unint64_t v39;
  _BYTE *v40;
  int v41;
  unsigned int v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  FILE *v47;
  FILE *v48;
  unsigned int v49;
  float v50;
  _BYTE *v51;
  _BYTE *v52;
  unint64_t v53;
  unint64_t v54;
  _BYTE *v55;
  FILE *v56;
  int v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;

  v9 = a2;
  a2[14] = *a3;
  a2[15] = a4;
  a2[16] = 0;
  v11 = a2[7];
  while (2)
  {
    if (v11)
    {
      v12 = *((_DWORD *)v9 + 26);
      if ((v12 & 1) != 0)
        v13 = v11;
      else
        v13 = 1;
      v14 = v9[16];
      v15 = v9[14];
      if (v9[15] - v14 >= v13)
        v16 = v13;
      else
        v16 = v9[15] - v14;
      v9[16] = v16 + v14;
      if (v16)
      {
        v9[7] = v11 - v16;
        switch(((unsigned int (*)(uint64_t, _QWORD *, uint64_t, unint64_t))v9[12])(a1, v9, v15 + v14, v16))
        {
          case 0u:
            goto LABEL_31;
          case 1u:
            v12 = *((_DWORD *)v9 + 26);
            goto LABEL_15;
          case 2u:
            v11 = v9[7];
            if (!v11)
              goto LABEL_12;
            continue;
          case 3u:
LABEL_12:
            v18 = (FILE **)(a1 + 48);
            v17 = *(FILE **)(a1 + 48);
            if (!v17)
              goto LABEL_62;
            fwrite("qdec: debug: ", 0xDuLL, 1uLL, v17);
            fprintf(*v18, "header block for stream %llu has had an error");
            break;
          default:
            __assert_rtn("qdec_header_process", "lsqpack.c", 4223, "st == LQRHS_ERROR");
        }
        goto LABEL_27;
      }
LABEL_15:
      if ((v12 & 0x10) != 0)
        goto LABEL_18;
      v19 = malloc_type_malloc(0xC0uLL, 0x10F0040D151BEFFuLL);
      if (v19)
      {
        v20 = *((_OWORD *)v9 + 3);
        v22 = *(_OWORD *)v9;
        v21 = *((_OWORD *)v9 + 1);
        v19[2] = *((_OWORD *)v9 + 2);
        v19[3] = v20;
        *v19 = v22;
        v19[1] = v21;
        v23 = *((_OWORD *)v9 + 4);
        v24 = *((_OWORD *)v9 + 5);
        v25 = *((_OWORD *)v9 + 7);
        v19[6] = *((_OWORD *)v9 + 6);
        v19[7] = v25;
        v19[4] = v23;
        v19[5] = v24;
        v26 = *((_OWORD *)v9 + 8);
        v27 = *((_OWORD *)v9 + 9);
        v28 = *((_OWORD *)v9 + 11);
        v19[10] = *((_OWORD *)v9 + 10);
        v19[11] = v28;
        v19[8] = v26;
        v19[9] = v27;
        v29 = *(_QWORD **)(a1 + 88);
        *(_QWORD *)v19 = 0;
        *((_QWORD *)v19 + 1) = v29;
        *v29 = v19;
        *(_QWORD *)(a1 + 88) = v19;
        v12 = *((_DWORD *)v19 + 26) | 0x10;
        *((_DWORD *)v19 + 26) = v12;
        v9 = v19;
LABEL_18:
        if (!v16)
        {
          *a3 += v9[16];
          v35 = *(FILE **)(a1 + 48);
          if (v35)
          {
            fwrite("qdec: debug: ", 0xDuLL, 1uLL, v35);
            fprintf(*(FILE **)(a1 + 48), "header block for stream %llu needs more bytes", v9[5]);
            fputc(10, *(FILE **)(a1 + 48));
          }
          return 2;
        }
        v30 = *(_DWORD *)(a1 + 224);
        if (v30 < *(_DWORD *)(a1 + 16))
        {
          v31 = v9[8] & 7;
          v9[2] = 0;
          v32 = a1 + 16 * v31;
          v9[3] = *(_QWORD *)(v32 + 104);
          **(_QWORD **)(v32 + 104) = v9;
          *(_QWORD *)(v32 + 104) = v9 + 2;
          *(_DWORD *)(a1 + 224) = v30 + 1;
          *((_DWORD *)v9 + 26) = v12 | 4;
          *a3 += v9[16];
          v33 = *(FILE **)(a1 + 48);
          v34 = 1;
          if (v33)
          {
            fwrite("qdec: debug: ", 0xDuLL, 1uLL, v33);
            fprintf(*(FILE **)(a1 + 48), "header block for stream %llu is blocked", v9[5]);
            fputc(10, *(FILE **)(a1 + 48));
          }
          return v34;
        }
        v18 = (FILE **)(a1 + 48);
        v36 = *(FILE **)(a1 + 48);
        if (v36)
        {
          fwrite("qdec: info: ", 0xCuLL, 1uLL, v36);
          fprintf(*(FILE **)(a1 + 48), "cannot block another header: reached maximum of %u");
LABEL_27:
          v34 = 3;
LABEL_28:
          fputc(10, *v18);
          goto LABEL_63;
        }
      }
LABEL_62:
      v34 = 3;
      goto LABEL_63;
    }
    break;
  }
LABEL_31:
  v37 = *(float *)(a1 + 228);
  v38 = (float)*((unsigned int *)v9 + 18);
  if (v37 != 0.0)
    v38 = v37 + (float)(v38 - v37) * 0.4;
  *(float *)(a1 + 228) = v38;
  if (a6 && a5 && (v9[13] & 2) != 0)
  {
    if (!*a6)
      goto LABEL_62;
    v39 = v9[5];
    *a5 = 0x80;
    if (*a6 <= 0)
      __assert_rtn("lsqpack_enc_int", "lsqpack.c", 759, "dst < end");
    if (v39 > 0x7E)
    {
      v51 = &a5[*a6];
      *a5 = -1;
      v52 = a5 + 1;
      v53 = v39 - 127;
      if (v39 - 127 >= 0x80)
      {
        while (v52 < v51)
        {
          *v52++ = v53 | 0x80;
          v39 = v53 >> 7;
          v54 = v53 >> 14;
          v53 >>= 7;
          if (!v54)
          {
            v55 = v52 - 1;
            goto LABEL_60;
          }
        }
        goto LABEL_62;
      }
      v55 = a5;
      LOBYTE(v39) = v39 - 127;
LABEL_60:
      if (v52 >= v51)
        goto LABEL_62;
      v40 = v55 + 2;
      *v52 = v39;
      if (v55 + 2 <= a5)
        goto LABEL_62;
    }
    else
    {
      *a5 = v39 | 0x80;
      v40 = a5 + 1;
    }
    v41 = (_DWORD)v40 - (_DWORD)a5;
    *a6 = v40 - a5;
    v42 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 24) += v41;
    if (v42)
    {
      v43 = *((_DWORD *)v9 + 16);
      v44 = 2 * v42 + v43 - *(_DWORD *)(a1 + 36);
      if (~(v44 / (2 * v42) * 2 * v42) + v44 < v42)
        *(_DWORD *)(a1 + 36) = v43;
    }
  }
  else if (a6)
  {
    *a6 = 0;
  }
  *a3 += v9[16];
  v45 = *(_DWORD *)(a1 + 28);
  v46 = *(_DWORD *)(a1 + 24) + *((_DWORD *)v9 + 12);
  *(_DWORD *)(a1 + 24) = v46;
  if (v45 >= 0x80000001)
  {
    *(_DWORD *)(a1 + 24) = (float)((float)((float)v46 * 1000.0) / (float)v45);
    *(_DWORD *)(a1 + 28) = 1000;
    v47 = *(FILE **)(a1 + 48);
    if (v47)
    {
      fwrite("qdec: debug: ", 0xDuLL, 1uLL, v47);
      v48 = *(FILE **)(a1 + 48);
      v49 = *(_DWORD *)(a1 + 28);
      if (v49)
      {
        v50 = (float)*(unsigned int *)(a1 + 24) / (float)v49;
        if (v48)
        {
          fwrite("qdec: debug: ", 0xDuLL, 1uLL, *(FILE **)(a1 + 48));
          fprintf(*(FILE **)(a1 + 48), "bytes in: %u; bytes out: %u, ratio: %.3f",
            *(_DWORD *)(a1 + 28),
            *(_DWORD *)(a1 + 24),
            v50);
          fputc(10, *(FILE **)(a1 + 48));
        }
      }
      else
      {
        v50 = 0.0;
      }
      fprintf(v48, "reset bytes in/out counters, ratio: %.3f", v50);
      fputc(10, *(FILE **)(a1 + 48));
    }
  }
  v18 = (FILE **)(a1 + 48);
  v56 = *(FILE **)(a1 + 48);
  if (v56)
  {
    fwrite("qdec: debug: ", 0xDuLL, 1uLL, v56);
    fprintf(*v18, "header block for stream %llu is done", v9[5]);
    v34 = 0;
    goto LABEL_28;
  }
  v34 = 0;
LABEL_63:
  v57 = *((_DWORD *)v9 + 26);
  if ((v57 & 0x10) != 0)
  {
    v58 = *v9;
    v59 = (_QWORD *)v9[1];
    if (*v9)
    {
      *(_QWORD *)(v58 + 8) = v59;
      *(_QWORD *)v9[1] = v58;
      if ((v57 & 4) == 0)
        goto LABEL_72;
    }
    else
    {
      *(_QWORD *)(a1 + 88) = v59;
      *v59 = 0;
      if ((v57 & 4) == 0)
      {
LABEL_72:
        free(v9);
        return v34;
      }
    }
    v60 = v9[2];
    if (v60)
      *(_QWORD *)(v60 + 24) = v9[3];
    else
      *(_QWORD *)(a1 + 16 * (v9[8] & 7) + 104) = v9[3];
    *(_QWORD *)v9[3] = v60;
    --*(_DWORD *)(a1 + 224);
    goto LABEL_72;
  }
  return v34;
}

uint64_t parse_header_prefix(uint64_t a1, uint64_t a2, unsigned __int8 *__src, uint64_t a4)
{
  unsigned __int8 *v4;
  char v5;
  unint64_t v6;
  unsigned int v7;
  unsigned __int8 *v8;
  char v9;
  unint64_t v10;
  unsigned int v11;
  unsigned __int8 *v12;
  char v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  int v17;
  unint64_t v18;
  unsigned int v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unint64_t v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  int v32;
  unsigned int v33;
  unint64_t v34;
  unsigned int v35;

  if (a4 < 1)
  {
LABEL_26:
    if (*(_QWORD *)(a2 + 56))
      return 2;
    else
      return 3;
  }
  v4 = &__src[a4];
  switch(*(_DWORD *)(a2 + 136))
  {
    case 0:
      *(_DWORD *)(a2 + 144) = 0;
      *(_DWORD *)(a2 + 136) = 1;
      goto LABEL_6;
    case 1:
      if (!*(_DWORD *)(a2 + 144))
      {
LABEL_6:
        v8 = __src + 1;
        v6 = *__src;
        if (v6 == 255)
        {
          v7 = 0;
          v5 = 1;
          goto LABEL_13;
        }
        goto LABEL_17;
      }
      v5 = 0;
      v6 = *(_QWORD *)(a2 + 160);
      v7 = *(_DWORD *)(a2 + 148);
      v8 = __src;
      do
      {
        v15 = *v8++;
        v14 = v15;
        v6 += (unint64_t)(v15 & 0x7F) << v7;
        v7 += 7;
        if ((v15 & 0x80) == 0)
        {
          if (v7 >= 0x40)
          {
            if (v7 != 70)
              return 3;
            v22 = 3;
            if (v14 > 1 || (v6 & 0x8000000000000000) == 0)
              return v22;
            *(_QWORD *)(a2 + 168) = v6;
            goto LABEL_18;
          }
LABEL_17:
          *(_QWORD *)(a2 + 168) = v6;
          if (!v6)
          {
            *(_DWORD *)(a2 + 104) |= 1u;
            *(_DWORD *)(a2 + 136) = 2;
LABEL_22:
            __src = v8;
            if (v8 >= v4)
              goto LABEL_26;
LABEL_23:
            *(_DWORD *)(a2 + 176) = *__src >> 7;
            *(_DWORD *)(a2 + 144) = 0;
            *(_DWORD *)(a2 + 136) = 3;
            v13 = 7;
            goto LABEL_24;
          }
LABEL_18:
          v17 = *(_DWORD *)(a1 + 20);
          v18 = (2 * v17);
          if (v6 > v18)
            return 3;
          if (v17)
            v19 = (v6 + v18 - 2) % v18;
          else
            v19 = 0;
          *(_DWORD *)(a2 + 64) = v19;
          *(_DWORD *)(a2 + 104) |= 3u;
          *(_DWORD *)(a2 + 136) = 2;
          v26 = *(_DWORD *)(a1 + 20);
          v27 = *(_DWORD *)(a1 + 32);
          v28 = v27 - v26;
          if (v27 >= v26)
          {
            v22 = 1;
            if (v27 < v19 || v28 + 1 > v19)
              return v22;
          }
          else if (v27 < v19 && v27 + v26 >= v19)
          {
            return 1;
          }
          goto LABEL_22;
        }
LABEL_13:
        ;
      }
      while (v8 < v4);
      if ((v5 & 1) != 0)
        v16 = 0;
      else
        v16 = *(_DWORD *)(a2 + 152);
      v23 = v16 + (_DWORD)v8 - (_DWORD)__src;
      if (v23 > 0xA)
        return 3;
      *(_QWORD *)(a2 + 160) = v6;
      *(_DWORD *)(a2 + 148) = v7;
      *(_DWORD *)(a2 + 152) = v23;
      v24 = 1;
      *(_DWORD *)(a2 + 144) = 1;
      v25 = 2 * *(_DWORD *)(a1 + 20);
      if (v25 >= 0xFF)
        v24 = 2;
      if (v25 > 0x17E)
        ++v24;
      if (v25 > 0x40FE)
        ++v24;
      if (v25 > 0x2000FE)
        ++v24;
      if (v25 > 0x100000FE)
        ++v24;
      if (*(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 56) <= v24)
        return 2;
      else
        return 3;
    case 2:
      goto LABEL_23;
    case 3:
      if (*(_DWORD *)(a2 + 144))
      {
        v9 = 0;
        v10 = *(_QWORD *)(a2 + 160);
        v11 = *(_DWORD *)(a2 + 148);
        v12 = __src;
        while (1)
        {
          v30 = *v12++;
          v29 = v30;
          v10 += (unint64_t)(v30 & 0x7F) << v11;
          v11 += 7;
          if ((v30 & 0x80) == 0)
            break;
LABEL_57:
          if (v12 >= v4)
          {
            if ((v9 & 1) != 0)
              v31 = 0;
            else
              v31 = *(_DWORD *)(a2 + 152);
            v35 = v31 + (_DWORD)v12 - (_DWORD)__src;
            if (v35 < 0xB)
            {
              *(_QWORD *)(a2 + 160) = v10;
              *(_DWORD *)(a2 + 148) = v11;
              *(_DWORD *)(a2 + 152) = v35;
              *(_DWORD *)(a2 + 144) = 1;
              return 2;
            }
            return 3;
          }
        }
        if (v11 >= 0x40)
        {
          if (v11 != 70)
            return 3;
          v22 = 3;
          if (v29 > 1 || (v10 & 0x8000000000000000) == 0)
            return v22;
        }
      }
      else
      {
        v13 = -1;
LABEL_24:
        v20 = -1 << v13;
        v12 = __src + 1;
        v21 = v20 & 0x80 ^ 0xFFu;
        v10 = *__src & v21;
        if (v10 >= v21)
        {
          v11 = 0;
          v9 = 1;
          goto LABEL_57;
        }
      }
      *(_QWORD *)(a2 + 168) = v10;
      if ((*(_BYTE *)(a2 + 104) & 2) == 0)
      {
        v32 = 0;
LABEL_76:
        *(_DWORD *)(a2 + 68) = v32;
        *(_QWORD *)(a2 + 96) = parse_header_data;
        *(_DWORD *)(a2 + 136) = 0;
        if (v4 == v12)
          return 2;
        return parse_header_data(a1, a2, v12, v4 - v12);
      }
      v32 = *(_DWORD *)(a1 + 20);
      if (*(_DWORD *)(a2 + 176))
      {
        if (!v32)
          goto LABEL_76;
        v33 = 2 * v32;
        v34 = *(_DWORD *)(a2 + 64) + v33 + ~v10;
      }
      else
      {
        if (!v32)
          goto LABEL_76;
        v34 = v10 + *(unsigned int *)(a2 + 64);
        v33 = 2 * v32;
      }
      v32 = v34 % v33;
      goto LABEL_76;
    default:
      __assert_rtn("parse_header_prefix", "lsqpack.c", 3987, "0");
  }
}

uint64_t parse_header_data(uint64_t a1, uint64_t a2, unsigned __int8 *__src, uint64_t a4)
{
  unsigned __int8 *v4;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unsigned __int8 *v10;
  int v11;
  char v12;
  uint64_t v13;
  unsigned int v14;
  char v15;
  uint64_t v16;
  unsigned int v17;
  char v18;
  uint64_t v19;
  char v20;
  int64_t v21;
  uint64_t v22;
  unint64_t v23;
  unsigned int v24;
  int v25;
  uint64_t v26;
  unsigned int v27;
  unsigned __int8 *v28;
  uint64_t v29;
  unsigned __int8 *v30;
  unsigned int v31;
  unsigned int v32;
  size_t v33;
  uint64_t v34;
  unsigned int v35;
  char v36;
  unsigned int v37;
  int v38;
  uint64_t v39;
  unsigned int v40;
  unsigned __int8 *v41;
  unsigned int v42;
  unsigned int v43;
  size_t v44;
  uint64_t v45;
  unsigned int v46;
  char v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unsigned int v52;
  unint64_t v53;
  int v54;
  unint64_t v55;
  int v56;
  unsigned int v57;
  BOOL v58;
  unsigned int v59;
  int v60;
  unsigned int v61;
  unint64_t v62;
  int v63;
  int v64;
  unsigned int v65;
  unsigned int v66;
  int v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int *v84;
  int v85;
  int v86;
  unsigned int v87;
  unsigned int v88;
  uint64_t v89;
  char **v90;
  size_t v91;
  size_t v92;
  uint64_t v93;
  _DWORD *v94;
  char *v95;
  char *v96;
  int v97;
  unsigned int v98;
  int v99;
  int v100;
  unsigned int v101;
  unsigned int v102;
  int v103;
  unsigned int v104;
  int v105;
  int v106;
  unsigned int v107;
  unsigned int v108;
  unsigned __int8 *v109;
  int v110;
  uint64_t v111;
  char **v112;
  size_t v113;
  uint64_t v114;
  _DWORD *v115;
  char v116;
  char *v117;
  char *v118;
  unsigned int v119;
  unsigned int v120;
  unsigned int v121;
  unsigned int v122;
  unsigned int v123;
  unsigned int v124;
  unsigned int v125;
  int v126;
  unsigned int *v127;
  int v128;
  int v129;
  int v130;
  unsigned int v131;
  unsigned int v132;
  unsigned int v133;
  unsigned int v134;
  int v135;
  unsigned int v136;
  uint64_t v137;
  uint64_t v138;
  int v139;
  int v141;
  int v142;
  int v143;
  int v144;
  int v145;
  int v146;
  int v147;
  int v148;
  unsigned __int8 *v150;
  int v151;
  unsigned int v152;
  unsigned __int8 *v154;
  BOOL v156;
  int v157;
  unsigned __int8 *v159;
  unsigned int v162;
  int v163;
  uint64_t v164;
  FILE *v165;
  unsigned __int8 *v166;
  uint64_t v167;
  unsigned int v168;
  unsigned int v169;
  _DWORD *v170;

  v4 = __src;
  v7 = __src;
  if (a4 < 1)
  {
LABEL_219:
    if (*(_QWORD *)(a2 + 56))
      return 2;
    if (*(_DWORD *)(a2 + 136))
    {
      v163 = 3843;
      goto LABEL_348;
    }
    v141 = *(_DWORD *)(a2 + 104);
    if ((v141 & 0x22) == 2)
    {
      v163 = 3837;
      goto LABEL_348;
    }
    if ((v141 & 0x40) != 0)
    {
      v163 = 3839;
      goto LABEL_348;
    }
    return 0;
  }
  v8 = &__src[a4];
  v170 = (_DWORD *)(a2 + 184);
  v9 = 0xFFFFFFFFLL;
  v10 = __src;
  while (2)
  {
    switch(*(_DWORD *)(a2 + 136))
    {
      case 0:
        v11 = (char)*v10;
        if (v11 < 0)
        {
          *(_DWORD *)(a2 + 144) = v11 & 0x40;
          *(_DWORD *)(a2 + 160) = 0;
          v9 = 6;
          *(_DWORD *)(a2 + 136) = 1;
LABEL_58:
          v7 = v10 + 1;
          v50 = *v10;
          v51 = ~(-1 << v9);
          v13 = v50 & v51;
          if ((v50 & v51) >= v51)
          {
            v14 = 0;
            v12 = 1;
            do
            {
              if (v7 >= v8)
              {
                if ((v12 & 1) != 0)
                  v143 = 0;
                else
                  v143 = *(_DWORD *)(a2 + 168);
                v152 = v143 + (_DWORD)v7 - (_DWORD)v10;
                if (v152 < 0xB)
                {
                  *(_QWORD *)(a2 + 176) = v13;
                  goto LABEL_327;
                }
                v163 = 3590;
                v4 = __src;
                goto LABEL_349;
              }
LABEL_128:
              v88 = *v7++;
              v87 = v88;
              v13 += (unint64_t)(v88 & 0x7F) << v14;
              v14 += 7;
            }
            while ((v88 & 0x80) != 0);
            if (v14 >= 0x40)
            {
              if (v13 > -1 || v87 > 1)
                v154 = v10;
              else
                v154 = v7;
              v156 = v14 == 70;
              v163 = 3590;
              if (v156)
                v10 = v154;
              v4 = __src;
              goto LABEL_349;
            }
            if (!((unint64_t)v13 >> 24))
              goto LABEL_131;
            v163 = 3590;
            goto LABEL_277;
          }
LABEL_131:
          if (*(_DWORD *)(a2 + 144))
          {
            if ((unint64_t)v13 > 0x62
              || (v168 = v9,
                  v89 = 4 * (*(_DWORD *)a1 & 1),
                  v90 = &(&static_table)[3 * v13],
                  v92 = *((unsigned int *)v90 + 4),
                  v91 = *((unsigned int *)v90 + 5),
                  v167 = (v91 + v92),
                  (v93 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)(a1 + 40) + 8))(*(_QWORD *)(a2 + 32), 0, v167 + v89)) == 0))
            {
              v163 = 3585;
LABEL_277:
              v10 = v7;
              v4 = __src;
              goto LABEL_349;
            }
            v94 = (_DWORD *)v93;
            v166 = v8;
            *(_BYTE *)(v93 + 35) = v89;
            *(_BYTE *)(v93 + 31) = v13;
            *(_BYTE *)(v93 + 33) |= 0x3Au;
            *(_WORD *)(v93 + 24) = v92;
            *(_WORD *)(v93 + 26) = v91;
            *(_DWORD *)(v93 + 8) = name_hashes[v13];
            *(_DWORD *)(v93 + 12) = nameval_hashes[v13];
            v95 = (char *)(*(_QWORD *)v93 + *(int *)(v93 + 16));
            memcpy(v95, (&static_table)[3 * v13], v92);
            v96 = &v95[v92];
            if ((_DWORD)v89)
            {
              *(_WORD *)v96 = 8250;
              v96 += 2;
            }
            v94[5] = (unsigned __int16)((_WORD)v96 - *v94);
            memcpy(v96, (&static_table)[3 * v13 + 1], v91);
            if ((_DWORD)v89)
              *(_WORD *)&v96[v91] = 2573;
            v4 = __src;
            if ((*(unsigned int (**)(_QWORD, _DWORD *))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a2 + 32), v94))
            {
LABEL_250:
              v163 = 3585;
              goto LABEL_348;
            }
            *(_DWORD *)(a1 + 28) += v167;
            v9 = v168;
            v8 = v166;
          }
          else
          {
            v97 = *(_DWORD *)(a1 + 20);
            if (v97)
              v98 = (2 * v97 - (int)v13 + *(_DWORD *)(a2 + 68)) % (2 * v97);
            else
              v98 = 0;
            v4 = __src;
            v99 = header_out_dynamic_entry((unsigned int *)a1, a2, v98);
            v100 = *(_DWORD *)(a2 + 104);
            if ((v100 & 2) != 0)
            {
              *(_DWORD *)(a2 + 104) = v100 | (32 * (*(_DWORD *)(a2 + 64) == v98));
              if (v99)
                goto LABEL_250;
            }
            else
            {
              *(_DWORD *)(a2 + 104) = v100 | 0x40;
              if (v99)
                goto LABEL_250;
            }
          }
        }
        else
        {
          if ((v11 & 0x40) != 0)
          {
            *(_DWORD *)(a2 + 148) = v11 & 0x20;
            *(_DWORD *)(a2 + 144) = *v10 & 0x10;
            *(_DWORD *)(a2 + 160) = 0;
            *(_DWORD *)(a2 + 136) = 3;
            v9 = 4;
LABEL_102:
            v7 = v10 + 1;
            v68 = *v10;
            v69 = ~(-1 << v9);
            v19 = v68 & v69;
            if ((v68 & v69) >= v69)
            {
              v14 = 0;
              v18 = 1;
              do
              {
                if (v7 >= v8)
                {
                  if ((v18 & 1) != 0)
                    v144 = 0;
                  else
                    v144 = *(_DWORD *)(a2 + 168);
                  v152 = v144 + (_DWORD)v7 - (_DWORD)v10;
                  if (v152 < 0xB)
                  {
                    *(_QWORD *)(a2 + 176) = v19;
                    goto LABEL_327;
                  }
                  v163 = 3621;
                  goto LABEL_349;
                }
LABEL_163:
                v108 = *v7++;
                v107 = v108;
                v19 += (unint64_t)(v108 & 0x7F) << v14;
                v14 += 7;
              }
              while ((v108 & 0x80) != 0);
              if (v14 >= 0x40)
              {
                v148 = 3621;
                if (v19 > -1 || v107 > 1)
                  v150 = v10;
                else
                  v150 = v7;
                v151 = 3621;
                goto LABEL_285;
              }
              if (!((unint64_t)v19 >> 24))
                goto LABEL_166;
              v163 = 3621;
              goto LABEL_348;
            }
LABEL_166:
            if (*(_DWORD *)(a2 + 144))
            {
              if (*(_QWORD *)(a2 + 80))
                __assert_rtn("header_out_begin_static_nameref", "lsqpack.c", 3088, "!read_ctx->hbrc_out.xhdr");
              if (v19 > 0x62)
              {
                v163 = 3602;
                goto LABEL_348;
              }
              v169 = v9;
              v109 = v8;
              v110 = *(_DWORD *)(a2 + 148);
              v111 = 4 * (*(_DWORD *)a1 & 1);
              v112 = &(&static_table)[3 * v19];
              v113 = *((unsigned int *)v112 + 4);
              v114 = (*(uint64_t (**)(_QWORD, _QWORD, size_t))(*(_QWORD *)(a1 + 40) + 8))(*(_QWORD *)(a2 + 32), 0, v111 + v113);
              *(_QWORD *)(a2 + 80) = v114;
              if (!v114)
              {
                v163 = 3602;
                v10 = v7;
                v4 = __src;
                goto LABEL_349;
              }
              v115 = (_DWORD *)v114;
              *(_BYTE *)(v114 + 35) = v111;
              *(_BYTE *)(v114 + 31) = v19;
              v116 = *(_BYTE *)(v114 + 33);
              *(_BYTE *)(v114 + 33) = v116 | 0xA;
              *(_DWORD *)(v114 + 8) = name_hashes[v19];
              if (v110)
                *(_BYTE *)(v114 + 33) = v116 | 0x4A;
              *(_WORD *)(v114 + 24) = v113;
              v117 = (char *)(*(_QWORD *)v114 + *(int *)(v114 + 16));
              memcpy(v117, *v112, v113);
              v118 = &v117[v113];
              if ((_DWORD)v111)
              {
                *(_WORD *)v118 = 8250;
                LOWORD(v118) = (_WORD)v118 + 2;
              }
              v8 = v109;
              v4 = __src;
              v9 = v169;
              v115[5] = (unsigned __int16)((_WORD)v118 - *v115);
              *(_QWORD *)(a2 + 88) = 1;
            }
            else
            {
              v119 = *(_DWORD *)(a1 + 20);
              if (v119)
              {
                v120 = 2 * v119;
                v119 = (v120 - v19 + *(_DWORD *)(a2 + 68)) % v120;
                v121 = (v120 - v119 + *(_DWORD *)(a1 + 32)) % v120;
              }
              else
              {
                v121 = 0;
              }
              v122 = *(_DWORD *)(a1 + 56);
              if (!v122
                || ((v123 = *(_DWORD *)(a1 + 60),
                     v124 = *(_DWORD *)(a1 + 64),
                     v58 = v123 >= v124,
                     v125 = v123 - v124,
                     v58)
                  ? (v126 = 0)
                  : (v126 = *(_DWORD *)(a1 + 56)),
                    v125 + v126 <= v121
                 || (v127 = *(unsigned int **)(*(_QWORD *)(a1 + 72) + 8 * ((v122 + ~v121 + v123) % v122))) == 0))
              {
                v163 = 3609;
                goto LABEL_348;
              }
              v128 = *(_DWORD *)(a2 + 104);
              if ((v128 & 2) != 0)
                v129 = v128 | (32 * (*(_DWORD *)(a2 + 64) == v119));
              else
                v129 = v128 | 0x40;
              *(_DWORD *)(a2 + 104) = v129;
              if (header_out_begin_dynamic_nameref((unsigned int *)a1, (_QWORD *)a2, v127, *(_DWORD *)(a2 + 148)))
              {
                v163 = 3613;
                goto LABEL_348;
              }
            }
            goto LABEL_190;
          }
          if ((v11 & 0x20) != 0)
          {
            *(_DWORD *)(a2 + 148) = v11 & 0x10;
            *(_DWORD *)(a2 + 152) = *v10 & 8;
            *(_DWORD *)(a2 + 160) = 0;
            *(_DWORD *)(a2 + 136) = 8;
            v9 = 3;
LABEL_105:
            v7 = v10 + 1;
            v70 = *v10;
            v71 = ~(-1 << v9);
            v16 = v70 & v71;
            if ((v70 & v71) >= v71)
            {
              v17 = 0;
              v36 = 1;
              do
              {
                if (v7 >= v8)
                {
                  if ((v36 & 1) != 0)
                    v145 = 0;
                  else
                    v145 = *(_DWORD *)(a2 + 168);
                  v162 = v145 + (_DWORD)v7 - (_DWORD)v10;
                  if (v162 >= 0xB)
                  {
                    v163 = 3731;
                    goto LABEL_349;
                  }
LABEL_340:
                  *(_QWORD *)(a2 + 176) = v16;
                  *(_DWORD *)(a2 + 164) = v17;
                  *(_DWORD *)(a2 + 168) = v162;
                  *(_DWORD *)(a2 + 160) = 1;
                  return 2;
                }
LABEL_203:
                v134 = *v7++;
                v133 = v134;
                v16 += (unint64_t)(v134 & 0x7F) << v17;
                v17 += 7;
              }
              while ((v134 & 0x80) != 0);
              if (v17 >= 0x40)
              {
                v157 = 3731;
                if (v16 > -1 || v133 > 1)
                  v159 = v10;
                else
                  v159 = v7;
                v163 = 3731;
LABEL_314:
                if (v17 == 70)
                  v10 = v159;
                else
                  v163 = v157;
                goto LABEL_349;
              }
              if (!((unint64_t)v16 >> 24))
                goto LABEL_206;
              v163 = 3731;
              goto LABEL_348;
            }
LABEL_206:
            *(_DWORD *)(a2 + 140) = v16;
            if (*(_QWORD *)(a2 + 80))
              __assert_rtn("header_out_begin_literal", "lsqpack.c", 3177, "!read_ctx->hbrc_out.xhdr");
            v135 = *(_DWORD *)(a2 + 148);
            if (*(_DWORD *)(a2 + 152))
              v136 = v16 >> 1;
            else
              v136 = 0;
            v137 = 4 * (*(_DWORD *)a1 & 1);
            v138 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)(a1 + 40) + 8))(*(_QWORD *)(a2 + 32), 0, v137 + v136 + v16);
            *(_QWORD *)(a2 + 80) = v138;
            if (!v138)
            {
              v163 = 3719;
              goto LABEL_348;
            }
            *(_BYTE *)(v138 + 35) = v137;
            if (v135)
              *(_BYTE *)(v138 + 33) |= 0x40u;
            *(_QWORD *)(a2 + 88) = 0;
            if (*(_DWORD *)(a2 + 152))
            {
              *(_DWORD *)(a2 + 184) = 0;
              v139 = 9;
            }
            else
            {
              v139 = 10;
            }
            *(_DWORD *)(a2 + 136) = v139;
            goto LABEL_5;
          }
          if ((v11 & 0x10) == 0)
          {
            *(_DWORD *)(a2 + 148) = v11 & 8;
            *(_DWORD *)(a2 + 160) = 0;
            *(_DWORD *)(a2 + 136) = 11;
            v9 = 3;
LABEL_55:
            v7 = v10 + 1;
            v48 = *v10;
            v49 = ~(-1 << v9);
            v16 = v48 & v49;
            if ((v48 & v49) >= v49)
            {
              v17 = 0;
              v47 = 1;
              do
              {
                if (v7 >= v8)
                {
                  if ((v47 & 1) != 0)
                    v146 = 0;
                  else
                    v146 = *(_DWORD *)(a2 + 168);
                  v162 = v146 + (_DWORD)v7 - (_DWORD)v10;
                  if (v162 >= 0xB)
                  {
                    v163 = 3802;
                    goto LABEL_349;
                  }
                  goto LABEL_340;
                }
LABEL_111:
                v75 = *v7++;
                v74 = v75;
                v16 += (unint64_t)(v75 & 0x7F) << v17;
                v17 += 7;
              }
              while ((v75 & 0x80) != 0);
              if (v17 >= 0x40)
              {
                v157 = 3802;
                if (v16 > -1 || v74 > 1)
                  v159 = v10;
                else
                  v159 = v7;
                v163 = 3802;
                goto LABEL_314;
              }
              if (!((unint64_t)v16 >> 24))
                goto LABEL_114;
              v163 = 3802;
              goto LABEL_348;
            }
LABEL_114:
            v76 = *(_DWORD *)(a1 + 20);
            if (v76)
            {
              v77 = 2 * v76;
              v78 = ((int)v16 + *(_DWORD *)(a2 + 68) + 1) % v77;
              v76 = (v77 - v78 + *(_DWORD *)(a1 + 32)) % v77;
              v79 = *(_DWORD *)(a1 + 56);
              if (!v79)
                goto LABEL_227;
            }
            else
            {
              v78 = 0;
              v79 = *(_DWORD *)(a1 + 56);
              if (!v79)
              {
LABEL_227:
                v163 = 3792;
                goto LABEL_348;
              }
            }
            v80 = *(_DWORD *)(a1 + 60);
            v81 = *(_DWORD *)(a1 + 64);
            v58 = v80 >= v81;
            v82 = v80 - v81;
            if (v58)
              v83 = 0;
            else
              v83 = v79;
            if (v82 + v83 <= v76)
              goto LABEL_227;
            v84 = *(unsigned int **)(*(_QWORD *)(a1 + 72) + 8 * ((v79 + ~v76 + v80) % v79));
            if (!v84)
              goto LABEL_227;
            v85 = *(_DWORD *)(a2 + 104);
            if ((v85 & 2) != 0)
              v86 = v85 | (32 * (*(_DWORD *)(a2 + 64) == v78));
            else
              v86 = v85 | 0x40;
            *(_DWORD *)(a2 + 104) = v86;
            if (header_out_begin_dynamic_nameref((unsigned int *)a1, (_QWORD *)a2, v84, *(_DWORD *)(a2 + 148)))
            {
              v163 = 3796;
              goto LABEL_348;
            }
LABEL_190:
            v130 = 4;
            goto LABEL_202;
          }
          *(_DWORD *)(a2 + 160) = 0;
          *(_DWORD *)(a2 + 136) = 2;
          v9 = 4;
LABEL_108:
          v7 = v10 + 1;
          v72 = *v10;
          v73 = ~(-1 << v9);
          v16 = v72 & v73;
          if ((v72 & v73) >= v73)
          {
            v17 = 0;
            v15 = 1;
            do
            {
              if (v7 >= v8)
              {
                if ((v15 & 1) != 0)
                  v147 = 0;
                else
                  v147 = *(_DWORD *)(a2 + 168);
                v162 = v147 + (_DWORD)v7 - (_DWORD)v10;
                if (v162 >= 0xB)
                {
                  v163 = 3821;
                  goto LABEL_349;
                }
                goto LABEL_340;
              }
LABEL_150:
              v102 = *v7++;
              v101 = v102;
              v16 += (unint64_t)(v102 & 0x7F) << v17;
              v17 += 7;
            }
            while ((v102 & 0x80) != 0);
            if (v17 >= 0x40)
            {
              v157 = 3821;
              if (v16 > -1 || v101 > 1)
                v159 = v10;
              else
                v159 = v7;
              v163 = 3821;
              goto LABEL_314;
            }
            if (!((unint64_t)v16 >> 24))
              goto LABEL_153;
            v163 = 3821;
            goto LABEL_348;
          }
LABEL_153:
          v103 = *(_DWORD *)(a1 + 20);
          if (v103)
            v104 = ((int)v16 + *(_DWORD *)(a2 + 68) + 1) % (2 * v103);
          else
            v104 = 0;
          v105 = header_out_dynamic_entry((unsigned int *)a1, a2, v104);
          v106 = *(_DWORD *)(a2 + 104);
          if ((v106 & 2) != 0)
          {
            *(_DWORD *)(a2 + 104) = v106 | (32 * (*(_DWORD *)(a2 + 64) == v104));
            if (v105)
            {
LABEL_261:
              v163 = 3816;
              goto LABEL_348;
            }
          }
          else
          {
            *(_DWORD *)(a2 + 104) = v106 | 0x40;
            if (v105)
              goto LABEL_261;
          }
        }
        goto LABEL_4;
      case 1:
        if (!*(_DWORD *)(a2 + 160))
          goto LABEL_58;
        v12 = 0;
        v13 = *(_QWORD *)(a2 + 176);
        v14 = *(_DWORD *)(a2 + 164);
        v7 = v10;
        goto LABEL_128;
      case 2:
        if (!*(_DWORD *)(a2 + 160))
          goto LABEL_108;
        v15 = 0;
        v16 = *(_QWORD *)(a2 + 176);
        v17 = *(_DWORD *)(a2 + 164);
        v7 = v10;
        goto LABEL_150;
      case 3:
        if (!*(_DWORD *)(a2 + 160))
          goto LABEL_102;
        v18 = 0;
        v19 = *(_QWORD *)(a2 + 176);
        v14 = *(_DWORD *)(a2 + 164);
        v7 = v10;
        goto LABEL_163;
      case 4:
        *(_DWORD *)(a2 + 152) = *v10 & 0x80;
        *(_DWORD *)(a2 + 160) = 0;
        *(_DWORD *)(a2 + 136) = 5;
        v9 = 7;
        goto LABEL_21;
      case 5:
        if (*(_DWORD *)(a2 + 160))
        {
          v20 = 0;
          v21 = *(_QWORD *)(a2 + 176);
          v14 = *(_DWORD *)(a2 + 164);
          v7 = v10;
          goto LABEL_191;
        }
LABEL_21:
        v7 = v10 + 1;
        v22 = *v10;
        v23 = ~(-1 << v9);
        v21 = v22 & v23;
        if ((v22 & v23) < v23)
          goto LABEL_194;
        v14 = 0;
        v20 = 1;
        do
        {
          if (v7 >= v8)
          {
            if ((v20 & 1) != 0)
              v142 = 0;
            else
              v142 = *(_DWORD *)(a2 + 168);
            v152 = v142 + (_DWORD)v7 - (_DWORD)v10;
            if (v152 >= 0xB)
            {
              v163 = 3658;
              goto LABEL_349;
            }
            *(_QWORD *)(a2 + 176) = v21;
LABEL_327:
            *(_DWORD *)(a2 + 164) = v14;
            *(_DWORD *)(a2 + 168) = v152;
            *(_DWORD *)(a2 + 160) = 1;
            return 2;
          }
LABEL_191:
          v132 = *v7++;
          v131 = v132;
          v21 += (unint64_t)(v132 & 0x7F) << v14;
          v14 += 7;
        }
        while ((v132 & 0x80) != 0);
        if (v14 >= 0x40)
        {
          v148 = 3658;
          if (v21 > -1 || v131 > 1)
            v150 = v10;
          else
            v150 = v7;
          v151 = 3658;
LABEL_285:
          v156 = v14 == 70;
          if (v14 == 70)
            v163 = v151;
          else
            v163 = v148;
          if (v156)
            v10 = v150;
          goto LABEL_349;
        }
        if ((unint64_t)v21 >> 24)
        {
          v163 = 3658;
          goto LABEL_348;
        }
LABEL_194:
        *(_DWORD *)(a2 + 140) = v21;
        if (!(_DWORD)v21)
        {
          if (header_out_write_value((int *)a1, a2, 0, 1))
          {
            v163 = 3653;
            goto LABEL_348;
          }
LABEL_4:
          *(_DWORD *)(a2 + 136) = 0;
LABEL_5:
          v10 = v7;
          if (v7 >= v8)
            goto LABEL_219;
          continue;
        }
        if (!*(_DWORD *)(a2 + 152))
        {
          if (guarantee_out_bytes(a1, a2, v21))
          {
            v163 = 3646;
            goto LABEL_348;
          }
          v130 = 7;
LABEL_202:
          *(_DWORD *)(a2 + 136) = v130;
          goto LABEL_5;
        }
        if (!guarantee_out_bytes(a1, a2, v21 + (v21 >> 1)))
        {
          *(_DWORD *)(a2 + 184) = 0;
          v130 = 6;
          goto LABEL_202;
        }
        v163 = 3639;
LABEL_348:
        v10 = v7;
LABEL_349:
        *(_DWORD *)(a1 + 332) = v163;
        *(_DWORD *)(a1 + 328) = 0;
        v164 = *(_QWORD *)(a2 + 40);
        *(_QWORD *)(a1 + 336) = &v10[*(_QWORD *)(a2 + 48)] - &v4[*(_QWORD *)(a2 + 56)];
        *(_QWORD *)(a1 + 344) = v164;
        v165 = *(FILE **)(a1 + 48);
        if (v165)
        {
          fwrite("qdec: debug: ", 0xDuLL, 1uLL, v165);
          fprintf(*(FILE **)(a1 + 48), "header block error on line %d, offset %llu, stream id %llu", *(_DWORD *)(a1 + 332), *(_QWORD *)(a1 + 336), *(_QWORD *)(a1 + 344));
          fputc(10, *(FILE **)(a1 + 48));
        }
        return 3;
      case 6:
        v24 = *(_DWORD *)(a2 + 140);
        if (v24 >= (int)v8 - (int)v10)
          v25 = (_DWORD)v8 - (_DWORD)v10;
        else
          v25 = *(_DWORD *)(a2 + 140);
        if (!v25)
        {
          v163 = 3663;
          goto LABEL_349;
        }
        v26 = *(_QWORD *)(a2 + 80);
        if (!v26)
          goto LABEL_352;
        if (*(_DWORD *)(a2 + 88))
          v27 = *(_DWORD *)(v26 + 20) - *(_DWORD *)(v26 + 16) + *(_DWORD *)(a2 + 92);
        else
          v27 = *(_DWORD *)(a2 + 92);
        v52 = *(unsigned __int16 *)(v26 + 26);
        if (v52 < v27)
          goto LABEL_353;
        v53 = lsqpack_huff_decode(v10, v25, (char *)(*(_QWORD *)v26 + *(int *)(v26 + 16) + v27), v52 - v27, v170, v24 <= (int)v8 - (int)v10);
        v55 = HIDWORD(v53);
        v7 = &v10[v54];
        v56 = *(_DWORD *)(a2 + 140);
        *(_DWORD *)(a2 + 140) = v56 - v54;
        if ((_DWORD)v53 == 2)
        {
          if (HIDWORD(v53))
            *(_DWORD *)(a2 + 92) += HIDWORD(v53);
          if (header_out_grow_buf(a1, a2))
          {
            v163 = 3688;
            goto LABEL_348;
          }
          goto LABEL_5;
        }
        if ((_DWORD)v53 == 1)
          goto LABEL_83;
        if ((_DWORD)v53)
        {
          v163 = 3691;
          goto LABEL_348;
        }
        if (header_out_write_value((int *)a1, a2, SHIDWORD(v53), v56 == v54))
        {
          v163 = 3674;
          goto LABEL_348;
        }
        if (!*(_DWORD *)(a2 + 140))
          goto LABEL_4;
        goto LABEL_5;
      case 7:
        v28 = v8;
        v29 = v9;
        v30 = v28;
        v31 = (_DWORD)v28 - (_DWORD)v10;
        v32 = *(_DWORD *)(a2 + 140);
        if (v32 >= v31)
          v33 = v31;
        else
          v33 = v32;
        if (!(_DWORD)v33)
        {
          v163 = 3697;
          goto LABEL_349;
        }
        v34 = *(_QWORD *)(a2 + 80);
        if (!v34)
          goto LABEL_352;
        if (*(_DWORD *)(a2 + 88))
          v35 = *(_DWORD *)(v34 + 20) - *(_DWORD *)(v34 + 16) + *(_DWORD *)(a2 + 92);
        else
          v35 = *(_DWORD *)(a2 + 92);
        v57 = *(unsigned __int16 *)(v34 + 26);
        v58 = v57 >= v35;
        v59 = v57 - v35;
        if (!v58)
          goto LABEL_353;
        if (v59 < v33)
        {
          v163 = 3700;
          goto LABEL_349;
        }
        memcpy((void *)(*(_QWORD *)v34 + *(int *)(v34 + 16) + v35), v10, v33);
        if (header_out_write_value((int *)a1, a2, v33, *(_DWORD *)(a2 + 140) == v33))
        {
          v163 = 3704;
          goto LABEL_349;
        }
        v7 = &v10[v33];
        v60 = *(_DWORD *)(a2 + 140) - v33;
        *(_DWORD *)(a2 + 140) = v60;
        if (!v60)
          *(_DWORD *)(a2 + 136) = 0;
        goto LABEL_92;
      case 8:
        if (!*(_DWORD *)(a2 + 160))
          goto LABEL_105;
        v36 = 0;
        v16 = *(_QWORD *)(a2 + 176);
        v17 = *(_DWORD *)(a2 + 164);
        v7 = v10;
        goto LABEL_203;
      case 9:
        v37 = *(_DWORD *)(a2 + 140);
        if (v37 >= (int)v8 - (int)v10)
          v38 = (_DWORD)v8 - (_DWORD)v10;
        else
          v38 = *(_DWORD *)(a2 + 140);
        if (!v38)
        {
          v163 = 3736;
          goto LABEL_349;
        }
        v39 = *(_QWORD *)(a2 + 80);
        if (!v39)
          goto LABEL_352;
        if (*(_DWORD *)(a2 + 88))
          v40 = *(_DWORD *)(v39 + 20) - *(_DWORD *)(v39 + 16) + *(_DWORD *)(a2 + 92);
        else
          v40 = *(_DWORD *)(a2 + 92);
        v61 = *(unsigned __int16 *)(v39 + 26);
        if (v61 < v40)
          goto LABEL_353;
        v62 = lsqpack_huff_decode(v10, v38, (char *)(*(_QWORD *)v39 + *(int *)(v39 + 16) + v40), v61 - v40, v170, v37 <= (int)v8 - (int)v10);
        v55 = HIDWORD(v62);
        v7 = &v10[v63];
        v64 = *(_DWORD *)(a2 + 140);
        *(_DWORD *)(a2 + 140) = v64 - v63;
        if ((_DWORD)v62 == 2)
        {
          if (HIDWORD(v62))
            *(_DWORD *)(a2 + 92) += HIDWORD(v62);
          if (header_out_grow_buf(a1, a2))
          {
            v163 = 3761;
            goto LABEL_348;
          }
        }
        else if ((_DWORD)v62 == 1)
        {
LABEL_83:
          if ((_DWORD)v55)
            *(_DWORD *)(a2 + 92) += v55;
        }
        else
        {
          if ((_DWORD)v62)
          {
            v163 = 3764;
            goto LABEL_348;
          }
          if (header_out_write_name((int *)a1, a2, SHIDWORD(v62), v64 == v63))
          {
            v163 = 3747;
            goto LABEL_348;
          }
          if (!*(_DWORD *)(a2 + 140))
            goto LABEL_190;
        }
        goto LABEL_5;
      case 0xA:
        v41 = v8;
        v29 = v9;
        v30 = v41;
        v42 = (_DWORD)v41 - (_DWORD)v10;
        v43 = *(_DWORD *)(a2 + 140);
        if (v43 >= v42)
          v44 = v42;
        else
          v44 = v43;
        if (!(_DWORD)v44)
        {
          v163 = 3770;
          goto LABEL_349;
        }
        v45 = *(_QWORD *)(a2 + 80);
        if (!v45)
LABEL_352:
          __assert_rtn("get_dst", "lsqpack.c", 3359, "read_ctx->hbrc_out.xhdr");
        if (*(_DWORD *)(a2 + 88))
          v46 = *(_DWORD *)(v45 + 20) - *(_DWORD *)(v45 + 16) + *(_DWORD *)(a2 + 92);
        else
          v46 = *(_DWORD *)(a2 + 92);
        v65 = *(unsigned __int16 *)(v45 + 26);
        v58 = v65 >= v46;
        v66 = v65 - v46;
        if (!v58)
LABEL_353:
          __assert_rtn("get_dst", "lsqpack.c", 3366, "read_ctx->hbrc_out.xhdr->val_len >= off");
        if (v66 < v44)
        {
          v163 = 3773;
          goto LABEL_349;
        }
        memcpy((void *)(*(_QWORD *)v45 + *(int *)(v45 + 16) + v46), v10, v44);
        if (header_out_write_name((int *)a1, a2, v44, *(_DWORD *)(a2 + 140) == v44))
        {
          v163 = 3777;
          goto LABEL_349;
        }
        v7 = &v10[v44];
        v67 = *(_DWORD *)(a2 + 140) - v44;
        *(_DWORD *)(a2 + 140) = v67;
        if (!v67)
          *(_DWORD *)(a2 + 136) = 4;
LABEL_92:
        v9 = v29;
        v8 = v30;
        goto LABEL_5;
      case 0xB:
        if (!*(_DWORD *)(a2 + 160))
          goto LABEL_55;
        v47 = 0;
        v16 = *(_QWORD *)(a2 + 176);
        v17 = *(_DWORD *)(a2 + 164);
        v7 = v10;
        goto LABEL_111;
      default:
        __assert_rtn("parse_header_data", "lsqpack.c", 3826, "0");
    }
  }
}

uint64_t header_out_dynamic_entry(unsigned int *a1, uint64_t a2, int a3)
{
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  size_t v17;
  unsigned int v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t result;

  v5 = a1[5];
  if (v5)
    v5 = (2 * v5 - a3 + a1[8]) % (2 * v5);
  v6 = a1[14];
  if (!v6)
    return 0xFFFFFFFFLL;
  v7 = a1[15];
  v8 = a1[16];
  v9 = v7 >= v8;
  v10 = v7 - v8;
  v11 = v9 ? 0 : a1[14];
  if (v10 + v11 <= v5)
    return 0xFFFFFFFFLL;
  v12 = *(unsigned int **)(*((_QWORD *)a1 + 9) + 8 * ((v6 + ~v5 + v7) % v6));
  if (!v12)
    return 0xFFFFFFFFLL;
  v13 = 4 * (*a1 & 1);
  v14 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(*((_QWORD *)a1 + 5) + 8))(*(_QWORD *)(a2 + 32), 0, v12[1] + *v12 + v13);
  if (!v14)
    return 0xFFFFFFFFLL;
  v15 = v14;
  qdec_maybe_update_entry_hashes(*a1, v12);
  v16 = v12[6];
  if ((v16 & 1) == 0)
  {
    if ((v16 & 2) == 0)
      goto LABEL_12;
LABEL_23:
    *(_BYTE *)(v15 + 33) |= 0x10u;
    *(_DWORD *)(v15 + 12) = v12[4];
    if ((v12[6] & 4) == 0)
      goto LABEL_14;
    goto LABEL_13;
  }
  *(_BYTE *)(v15 + 33) |= 8u;
  *(_DWORD *)(v15 + 8) = v12[3];
  v16 = v12[6];
  if ((v16 & 2) != 0)
    goto LABEL_23;
LABEL_12:
  if ((v16 & 4) != 0)
  {
LABEL_13:
    *(_BYTE *)(v15 + 33) |= 2u;
    *(_BYTE *)(v15 + 31) = v12[5];
  }
LABEL_14:
  *(_BYTE *)(v15 + 35) = v13;
  v17 = *v12;
  v18 = v12[1];
  *(_WORD *)(v15 + 24) = v17;
  *(_WORD *)(v15 + 26) = v18;
  v19 = (char *)(*(_QWORD *)v15 + *(int *)(v15 + 16));
  memcpy(v19, v12 + 7, v17);
  v20 = *v12;
  v21 = &v19[v20];
  if ((_DWORD)v13)
  {
    *(_WORD *)v21 = 8250;
    v21 += 2;
    v20 = *v12;
  }
  *(_DWORD *)(v15 + 20) = (unsigned __int16)((_WORD)v21 - *(_DWORD *)v15);
  memcpy(v21, (char *)v12 + v20 + 28, v12[1]);
  if ((_DWORD)v13)
    *(_WORD *)&v21[v12[1]] = 2573;
  result = (*(uint64_t (**)(_QWORD, uint64_t))(*((_QWORD *)a1 + 5) + 16))(*(_QWORD *)(a2 + 32), v15);
  if (!(_DWORD)result)
    a1[7] += v12[1] + *v12;
  return result;
}

uint64_t header_out_begin_dynamic_nameref(unsigned int *a1, _QWORD *a2, unsigned int *a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if (a2[10])
    __assert_rtn("header_out_begin_dynamic_nameref", "lsqpack.c", 3131, "!read_ctx->hbrc_out.xhdr");
  v8 = 4 * (*a1 & 1);
  v9 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(*((_QWORD *)a1 + 5) + 8))(a2[4], 0, v8 + *a3);
  a2[10] = v9;
  if (!v9)
    return 0xFFFFFFFFLL;
  v10 = v9;
  *(_BYTE *)(v9 + 35) = v8;
  if (a4)
    *(_BYTE *)(v9 + 33) |= 0x40u;
  qdec_maybe_update_entry_hashes(*a1, a3);
  v11 = a3[6];
  if ((v11 & 1) != 0)
  {
    *(_BYTE *)(v10 + 33) |= 8u;
    *(_DWORD *)(v10 + 8) = a3[3];
    v11 = a3[6];
  }
  if ((v11 & 4) != 0)
  {
    *(_BYTE *)(v10 + 33) |= 2u;
    *(_BYTE *)(v10 + 31) = a3[5];
  }
  v12 = *a3;
  *(_WORD *)(v10 + 24) = v12;
  v13 = (char *)(*(_QWORD *)v10 + *(int *)(v10 + 16));
  memcpy(v13, a3 + 7, v12);
  v14 = &v13[*a3];
  if ((_DWORD)v8)
  {
    *(_WORD *)v14 = 8250;
    LOWORD(v14) = (_WORD)v14 + 2;
  }
  result = 0;
  *(_DWORD *)(v10 + 20) = (unsigned __int16)((_WORD)v14 - *(_DWORD *)v10);
  a2[11] = 1;
  return result;
}

uint64_t guarantee_out_bytes(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  int v5;
  int v6;
  BOOL v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;

  v4 = *(_QWORD *)(a2 + 80);
  if (!v4)
    __assert_rtn("guarantee_out_bytes", "lsqpack.c", 3332, "read_ctx->hbrc_out.xhdr");
  if (*(_DWORD *)(a2 + 88) != 1)
    __assert_rtn("guarantee_out_bytes", "lsqpack.c", 3333, "read_ctx->hbrc_out.state == XOUT_VALUE");
  v6 = *(_DWORD *)(v4 + 16);
  v5 = *(_DWORD *)(v4 + 20);
  v7 = __OFSUB__(v5, v6);
  v8 = v5 - v6;
  if (v8 < 0 != v7)
    __assert_rtn("guarantee_out_bytes", "lsqpack.c", 3335, "read_ctx->hbrc_out.xhdr->val_offset >= read_ctx->hbrc_out.xhdr->name_offset");
  v9 = *(_DWORD *)(a2 + 92) + v8;
  v10 = *(unsigned __int16 *)(v4 + 26);
  v11 = v10 >= v9;
  v12 = v10 - v9;
  if (!v11)
    __assert_rtn("guarantee_out_bytes", "lsqpack.c", 3339, "read_ctx->hbrc_out.xhdr->val_len >= off");
  if (v12 >= a3)
    return 0;
  v13 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(a1 + 40) + 8))(*(_QWORD *)(a2 + 32));
  *(_QWORD *)(a2 + 80) = v13;
  if (v13)
    return 0;
  else
    return 0xFFFFFFFFLL;
}

uint64_t header_out_write_value(int *a1, uint64_t a2, int a3, int a4)
{
  unsigned int v4;
  _QWORD *v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  char v12;
  uint64_t result;

  v4 = *(_DWORD *)(a2 + 92) + a3;
  *(_DWORD *)(a2 + 92) = v4;
  if (!a4)
    return 0;
  v7 = (_QWORD *)(a2 + 80);
  v8 = *(_QWORD *)(a2 + 80);
  v9 = *a1;
  if ((*a1 & 1) != 0)
  {
    v10 = *(_DWORD *)(v8 + 20);
    if (v4 + v10 + 2 > *(unsigned __int16 *)(v8 + 26))
    {
      v11 = (*(uint64_t (**)(_QWORD, _QWORD))(*((_QWORD *)a1 + 5) + 8))(*(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 80));
      *(_QWORD *)(a2 + 80) = v11;
      if (!v11)
        return 0xFFFFFFFFLL;
      v8 = v11;
      v10 = *(_DWORD *)(v11 + 20);
      v4 = *(_DWORD *)(a2 + 92);
    }
    *(_WORD *)(*(_QWORD *)v8 + v10 + v4) = 2573;
    LOWORD(v4) = *(_WORD *)(a2 + 92);
    v9 = *a1;
  }
  *(_WORD *)(v8 + 26) = v4;
  if ((v9 & 2) != 0)
  {
    v12 = *(_BYTE *)(v8 + 33);
    if ((v12 & 8) == 0)
      __assert_rtn("header_out_write_value", "lsqpack.c", 3266, "xhdr->flags & LSXPACK_NAME_HASH");
    *(_DWORD *)(v8 + 12) = XXH_INLINE_XXH32((int *)(*(_QWORD *)v8 + *(int *)(v8 + 20)), (unsigned __int16)v4, *(_DWORD *)(v8 + 8));
    *(_BYTE *)(v8 + 33) = v12 | 0x10;
  }
  result = (*(uint64_t (**)(_QWORD, uint64_t))(*((_QWORD *)a1 + 5) + 16))(*(_QWORD *)(a2 + 32), v8);
  if ((_DWORD)result)
    result = 0xFFFFFFFFLL;
  else
    a1[7] += *(unsigned __int16 *)(v8 + 26) + *(unsigned __int16 *)(v8 + 24);
  ++*(_DWORD *)(a2 + 72);
  *v7 = 0;
  v7[1] = 0;
  return result;
}

uint64_t lsqpack_huff_decode(unsigned __int8 *a1, int a2, char *a3, uint64_t a4, _DWORD *a5, int a6)
{
  int v6;
  unint64_t v7;
  unsigned int v8;
  unint64_t v9;
  char *v10;
  char *v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unsigned int v14;
  unint64_t v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  char *v19;
  unsigned int v20;
  __int16 v21;
  BOOL v22;
  char *v23;
  unsigned int v24;
  int v25;
  char *v26;
  char v28;
  char v29;
  char v30;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  char *v37;
  int v38;
  int v39;
  uint64_t v40;
  int v41;
  int v42;
  char *v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  char *v47;
  BOOL v48;
  char v49;
  char v50;
  char v51;

  v6 = a4;
  if (!a6 || *a5)
    return lsqpack_huff_decode_full(a1, a2, a3, a4, (uint64_t)a5, a6);
  v7 = 0;
  v8 = 0;
  v9 = (unint64_t)&a1[a2];
  v10 = &a3[(int)a4];
  v11 = a3;
  do
  {
    while (1)
    {
LABEL_4:
      v12 = a1 + 8;
      if ((unint64_t)(a1 + 8) <= v9)
      {
        v16 = (64 - v8) >> 3;
        if (v16 != 7)
        {
          if (v16 != 8)
          {
LABEL_20:
            v14 = ((64 - (_BYTE)v8) & 0x78) + v8;
            v13 = a1 + 5;
            v15 = (v7 << 48) | ((unint64_t)*a1 << 40) | ((unint64_t)a1[1] << 32) | ((unint64_t)a1[2] << 24) | ((unint64_t)a1[3] << 16) | ((unint64_t)a1[4] << 8);
            v12 = a1 + 6;
            goto LABEL_21;
          }
          v17 = *a1++;
          v7 = v17;
        }
        v18 = *a1++;
        v7 = v18 | (v7 << 8);
        goto LABEL_20;
      }
      if ((unint64_t)a1 >= v9)
      {
        if (v8 >= 5)
        {
          v42 = ((_DWORD)v7 << (16 - v8)) & 0xFFFE | (-1 << (16 - v8)) & 0xFFFE ^ 0xFFFF;
          if (v8 <= 7 && v42 == 0xFFFF)
            goto LABEL_91;
          v43 = &hdecs[4 * v42];
          v44 = *v43;
          v45 = v8 - (v44 >> 2);
          if (v8 < v44 >> 2)
          {
LABEL_92:
            v34 = 0;
            v35 = 3;
            return v35 | (v34 << 32);
          }
          v46 = v44 & 3;
          v47 = &v11[v46];
          if ((_DWORD)v46)
            v48 = v47 > v10;
          else
            v48 = 1;
          if (v48)
          {
            if (v47 > v10)
              goto LABEL_51;
            goto LABEL_92;
          }
          v49 = v43[1];
          v50 = v43[2];
          if ((_DWORD)v46 == 2)
          {
            *v11 = v49;
            v11[1] = v50;
            LODWORD(v11) = (_DWORD)v11 + 2;
          }
          else if ((_DWORD)v46 == 3)
          {
            v51 = v43[3];
            *v11 = v49;
            v11[1] = v50;
            v11[2] = v51;
            LODWORD(v11) = (_DWORD)v11 + 3;
          }
          else
          {
            *v11 = v49;
            LODWORD(v11) = (_DWORD)v11 + 1;
          }
          v8 = v45;
        }
        if (!v8 || (~(_DWORD)v7 & ~(-1 << v8)) == 0)
        {
LABEL_91:
          v35 = 0;
          v34 = ((_DWORD)v11 - (_DWORD)a3);
          return v35 | (v34 << 32);
        }
        goto LABEL_92;
      }
      v13 = a1 + 1;
      v7 = *a1 | (v7 << 8);
      if ((unint64_t)(a1 + 1) >= v9)
      {
        v14 = v8 + 8;
        goto LABEL_27;
      }
      v13 = a1 + 2;
      v7 = a1[1] | (v7 << 8);
      if ((unint64_t)(a1 + 2) >= v9)
      {
        v14 = v8 + 16;
        goto LABEL_27;
      }
      v13 = a1 + 3;
      v7 = a1[2] | (v7 << 8);
      if ((unint64_t)(a1 + 3) >= v9)
      {
        v14 = v8 + 24;
        goto LABEL_27;
      }
      v13 = a1 + 4;
      v7 = a1[3] | (v7 << 8);
      if ((unint64_t)(a1 + 4) >= v9)
      {
        v14 = v8 + 32;
        goto LABEL_27;
      }
      v13 = a1 + 5;
      v7 = a1[4] | (v7 << 8);
      if ((unint64_t)(a1 + 5) >= v9)
      {
        v14 = v8 + 40;
        goto LABEL_27;
      }
      v13 = a1 + 6;
      v7 = a1[5] | (v7 << 8);
      v14 = v8 + 48;
      if ((unint64_t)(a1 + 6) < v9 && v8 <= 8)
      {
        v13 = a1 + 7;
        v7 = a1[6] | (v7 << 8);
        v14 = v8 + 56;
        if ((unint64_t)(a1 + 7) < v9 && !v8)
        {
          v15 = v7 << 8;
          v14 = 64;
LABEL_21:
          v7 = v15 | *v13;
          v13 = v12;
        }
      }
LABEL_27:
      if (v10 - v11 < 12 || v14 < 0x10)
        break;
      v8 = v14;
      do
      {
        v19 = &hdecs[4 * (unsigned __int16)(v7 >> (v8 - 16))];
        v20 = *v19;
        v21 = *(_WORD *)(v19 + 1);
        LOBYTE(v19) = v19[3];
        *(_WORD *)v11 = v21;
        v11[2] = (char)v19;
        v11 += v20 & 3;
        v8 -= v20 >> 2;
        if (v20)
          v22 = v8 > 0xF;
        else
          v22 = 0;
      }
      while (v22);
      a1 = v13;
      if (v8 >= 0x10)
        goto LABEL_60;
    }
    v8 = v14;
    a1 = v13;
  }
  while (v14 < 0x10);
  while (1)
  {
    v23 = &hdecs[4 * (unsigned __int16)(v7 >> (v14 - 16))];
    v24 = *v23;
    v25 = v24 & 3;
    v26 = &v11[v24 & 3];
    if ((v24 & 3) == 0 || v26 > v10)
      break;
    v28 = v23[1];
    v29 = v23[2];
    if (v25 == 2)
    {
      *v11 = v28;
      v11[1] = v29;
      v11 += 2;
    }
    else if (v25 == 3)
    {
      v30 = v23[3];
      *v11 = v28;
      v11[1] = v29;
      v11[2] = v30;
      v11 += 3;
    }
    else
    {
      *v11++ = v28;
    }
    v14 -= v24 >> 2;
    if (v14 <= 0xF)
    {
      v8 = v14;
      a1 = v13;
      goto LABEL_4;
    }
  }
  v8 = v14;
  if (v26 <= v10)
  {
LABEL_60:
    v36 = v8 & 7;
    if ((v8 & 7) != 0 && v11 > a3)
    {
      v37 = v11 - 1;
      do
      {
        v22 = v37 > a3;
        v38 = *v37--;
        v8 += encode_table[2 * v38 + 1];
        v36 = v8 & 7;
      }
      while (v22 && (v8 & 7) != 0);
      v11 = v37 + 1;
    }
    if (v36)
      __assert_rtn("huff_decode_fast", "lsqpack.c", 5398, "(avail_bits & 7) == 0");
    v39 = (_DWORD)v10 - (_DWORD)v11;
    v40 = lsqpack_huff_decode_full(&v13[-(v8 >> 3)], v9 - ((_DWORD)v13 - (v8 >> 3)), v11, ((_DWORD)v10 - (_DWORD)v11), (uint64_t)a5, 1);
    v41 = v6 - v39;
    if ((v40 & 0xFFFFFFFD) != 0)
      v41 = 0;
    v34 = (v41 + HIDWORD(v40));
    v35 = v40;
  }
  else
  {
LABEL_51:
    v32 = v8 & 7;
    if ((v8 & 7) != 0 && v11 > a3)
    {
      --v11;
      do
      {
        v22 = v11 > a3;
        v33 = *v11--;
        v8 += encode_table[2 * v33 + 1];
        v32 = v8 & 7;
      }
      while (v22 && (v8 & 7) != 0);
      LODWORD(v11) = (_DWORD)v11 + 1;
    }
    if (v32)
      __assert_rtn("huff_decode_fast", "lsqpack.c", 5386, "(avail_bits & 7) == 0");
    v34 = ((_DWORD)v11 - (_DWORD)v10 + v6);
    v35 = 2;
  }
  return v35 | (v34 << 32);
}

uint64_t header_out_grow_buf(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  unsigned int v6;
  unsigned int v7;
  BOOL v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  FILE *v12;

  v4 = (_QWORD *)(a2 + 80);
  v3 = *(_QWORD *)(a2 + 80);
  if (!v3)
    __assert_rtn("header_out_grow_buf", "lsqpack.c", 3291, "read_ctx->hbrc_out.xhdr");
  if (*(_DWORD *)(a2 + 88))
    v6 = *(_DWORD *)(v3 + 20) - *(_DWORD *)(v3 + 16) + *(_DWORD *)(a2 + 92);
  else
    v6 = *(_DWORD *)(a2 + 92);
  v7 = *(unsigned __int16 *)(v3 + 26);
  v8 = v7 >= v6;
  v9 = v7 - v6;
  if (!v8)
    __assert_rtn("header_out_grow_buf", "lsqpack.c", 3303, "read_ctx->hbrc_out.xhdr->val_len >= off");
  if (v9 <= 2)
    v9 = 2;
  if ((v9 >> 1) + (unint64_t)*(unsigned __int16 *)(v3 + 26) >= 0xFFFF)
    v10 = 0xFFFFLL;
  else
    v10 = (v9 >> 1) + (unint64_t)*(unsigned __int16 *)(v3 + 26);
  v11 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(a1 + 40) + 8))(*(_QWORD *)(a2 + 32));
  *(_QWORD *)(a2 + 80) = v11;
  if (!v11)
    return 0xFFFFFFFFLL;
  if (v10 > *(unsigned __int16 *)(v11 + 26))
  {
    v12 = *(FILE **)(a1 + 48);
    if (v12)
    {
      fwrite("qdec: info: ", 0xCuLL, 1uLL, v12);
      fprintf(*(FILE **)(a1 + 48), "allocated xhdr size (%zd) is smaller than requested (%zd)", *(unsigned __int16 *)(*v4 + 26), v10);
      fputc(10, *(FILE **)(a1 + 48));
    }
    *v4 = 0;
    v4[1] = 0;
    return 0xFFFFFFFFLL;
  }
  return 0;
}

uint64_t header_out_write_name(int *a1, uint64_t a2, int a3, int a4)
{
  unint64_t v4;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  int *v11;
  unint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  unint64_t v17;
  int v18;
  unint64_t v19;
  int v20;
  int v21;
  unsigned int v22;
  uint64_t result;
  int v24;
  unint64_t v25;
  int v26;
  unint64_t v27;
  unsigned int v28;

  LODWORD(v4) = *(_DWORD *)(a2 + 92) + a3;
  *(_DWORD *)(a2 + 92) = v4;
  if (!a4)
    return 0;
  v7 = *(_QWORD *)(a2 + 80);
  v8 = *a1;
  if ((*a1 & 1) == 0)
  {
    v9 = *(_DWORD *)(v7 + 16);
    *(_DWORD *)(v7 + 20) = (unsigned __int16)(v9 + v4);
    goto LABEL_8;
  }
  if ((int)v4 + 2 <= *(unsigned __int16 *)(v7 + 26))
  {
LABEL_7:
    *(_WORD *)(*(_QWORD *)v7 + *(int *)(v7 + 16) + v4) = 8250;
    v9 = *(_DWORD *)(v7 + 16);
    LODWORD(v4) = *(_DWORD *)(a2 + 92);
    *(_DWORD *)(v7 + 20) = (unsigned __int16)(v9 + v4 + 2);
    v8 = *a1;
LABEL_8:
    *(_WORD *)(v7 + 24) = v4;
    *(_QWORD *)(a2 + 88) = 1;
    if ((v8 & 6) != 0)
    {
      if (!*(_QWORD *)v7)
      {
        v22 = 414139866;
LABEL_21:
        result = 0;
        v28 = (-2048144777 * (v22 ^ (v22 >> 15))) ^ ((-2048144777 * (v22 ^ (v22 >> 15))) >> 13);
        *(_DWORD *)(v7 + 8) = (-1028477379 * v28) ^ ((-1028477379 * v28) >> 16);
        *(_BYTE *)(v7 + 33) |= 8u;
        return result;
      }
      v11 = (int *)(*(_QWORD *)v7 + v9);
      v4 = (unsigned __int16)v4;
      if ((unsigned __int16)v4 < 0x10u)
      {
        v22 = (unsigned __int16)v4 + 414139866;
        if ((unsigned __int16)v4 < 4uLL)
          goto LABEL_19;
      }
      else
      {
        v12 = (unint64_t)v11 + (unsigned __int16)v4 - 15;
        v13 = 1679910008;
        v14 = 39378473;
        v15 = -2008766304;
        v16 = 645669457;
        do
        {
          HIDWORD(v17) = v16 - 2048144777 * *v11;
          LODWORD(v17) = HIDWORD(v17);
          v16 = -1640531535 * (v17 >> 19);
          HIDWORD(v17) = v15 - 2048144777 * v11[1];
          LODWORD(v17) = HIDWORD(v17);
          v15 = -1640531535 * (v17 >> 19);
          HIDWORD(v17) = v14 - 2048144777 * v11[2];
          LODWORD(v17) = HIDWORD(v17);
          v14 = -1640531535 * (v17 >> 19);
          HIDWORD(v17) = v13 - 2048144777 * v11[3];
          LODWORD(v17) = HIDWORD(v17);
          v13 = -1640531535 * (v17 >> 19);
          v11 += 4;
        }
        while ((unint64_t)v11 < v12);
        HIDWORD(v19) = v16;
        LODWORD(v19) = v16;
        v18 = v19 >> 31;
        HIDWORD(v19) = v15;
        LODWORD(v19) = v15;
        v20 = v19 >> 25;
        HIDWORD(v19) = v14;
        LODWORD(v19) = v14;
        v21 = v19 >> 20;
        HIDWORD(v19) = v13;
        LODWORD(v19) = v13;
        v22 = v18 + (unsigned __int16)v4 + v20 + v21 + (v19 >> 14);
        v4 &= 0xFu;
        if (v4 < 4)
        {
LABEL_19:
          while (v4)
          {
            v26 = *(unsigned __int8 *)v11;
            v11 = (int *)((char *)v11 + 1);
            HIDWORD(v27) = v22 + 374761393 * v26;
            LODWORD(v27) = HIDWORD(v27);
            v22 = -1640531535 * (v27 >> 21);
            --v4;
          }
          goto LABEL_21;
        }
      }
      do
      {
        v24 = *v11++;
        HIDWORD(v25) = v22 - 1028477379 * v24;
        LODWORD(v25) = HIDWORD(v25);
        v22 = 668265263 * (v25 >> 15);
        v4 -= 4;
      }
      while (v4 > 3);
      goto LABEL_19;
    }
    return 0;
  }
  v10 = (*(uint64_t (**)(_QWORD))(*((_QWORD *)a1 + 5) + 8))(*(_QWORD *)(a2 + 32));
  *(_QWORD *)(a2 + 80) = v10;
  if (v10)
  {
    v7 = v10;
    LODWORD(v4) = *(_DWORD *)(a2 + 92);
    goto LABEL_7;
  }
  return 0xFFFFFFFFLL;
}

uint64_t qdec_maybe_update_entry_hashes(uint64_t result, unsigned int *a2)
{
  unsigned int v3;
  int *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  unint64_t v11;
  int v12;
  unint64_t v13;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  unsigned int v21;
  unsigned int v22;

  if ((result & 6) != 0)
  {
    v3 = a2[6];
    if ((v3 & 1) == 0)
    {
      a2[6] = v3 | 1;
      v4 = (int *)(a2 + 7);
      v5 = *a2;
      if (v5 < 0x10)
      {
        v16 = v5 + 414139866;
      }
      else
      {
        v6 = (unint64_t)v4 + v5 - 15;
        v7 = 1679910008;
        v8 = 39378473;
        v9 = -2008766304;
        v10 = 645669457;
        do
        {
          HIDWORD(v11) = v10 - 2048144777 * *v4;
          LODWORD(v11) = HIDWORD(v11);
          v10 = -1640531535 * (v11 >> 19);
          HIDWORD(v11) = v9 - 2048144777 * v4[1];
          LODWORD(v11) = HIDWORD(v11);
          v9 = -1640531535 * (v11 >> 19);
          HIDWORD(v11) = v8 - 2048144777 * v4[2];
          LODWORD(v11) = HIDWORD(v11);
          v8 = -1640531535 * (v11 >> 19);
          HIDWORD(v11) = v7 - 2048144777 * v4[3];
          LODWORD(v11) = HIDWORD(v11);
          v7 = -1640531535 * (v11 >> 19);
          v4 += 4;
        }
        while ((unint64_t)v4 < v6);
        HIDWORD(v13) = v10;
        LODWORD(v13) = v10;
        v12 = v13 >> 31;
        HIDWORD(v13) = v9;
        LODWORD(v13) = v9;
        v14 = v13 >> 25;
        HIDWORD(v13) = v8;
        LODWORD(v13) = v8;
        v15 = v13 >> 20;
        HIDWORD(v13) = v7;
        LODWORD(v13) = v7;
        v16 = v12 + v5 + v14 + v15 + (v13 >> 14);
        v5 &= 0xFu;
      }
      if (v5 >= 4)
      {
        do
        {
          v17 = *v4++;
          HIDWORD(v18) = v16 - 1028477379 * v17;
          LODWORD(v18) = HIDWORD(v18);
          v16 = 668265263 * (v18 >> 15);
          v5 -= 4;
        }
        while (v5 > 3);
      }
      for (; v5; --v5)
      {
        v19 = *(unsigned __int8 *)v4;
        v4 = (int *)((char *)v4 + 1);
        HIDWORD(v20) = v16 + 374761393 * v19;
        LODWORD(v20) = HIDWORD(v20);
        v16 = -1640531535 * (v20 >> 21);
      }
      v21 = -1028477379 * ((-2048144777 * (v16 ^ (v16 >> 15))) ^ ((-2048144777 * (v16 ^ (v16 >> 15))) >> 13));
      a2[3] = v21 ^ HIWORD(v21);
    }
  }
  if ((result & 4) != 0)
  {
    v22 = a2[6];
    if ((v22 & 2) == 0)
    {
      if ((v22 & 1) == 0)
        __assert_rtn("qdec_maybe_update_entry_hashes", "lsqpack.c", 2964, "entry->dte_flags & DTEF_NAME_HASH");
      a2[6] = v22 | 2;
      result = XXH_INLINE_XXH32((int *)((char *)a2 + *a2 + 28), a2[1], a2[3]);
      a2[4] = result;
    }
  }
  return result;
}

uint64_t lsqpack_dec_push_entry(uint64_t a1, const char *a2)
{
  unsigned int v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  FILE *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  FILE *v20;

  v4 = *(_DWORD *)(a1 + 56);
  if (v4)
  {
    if ((*(_DWORD *)(a1 + 60) + 1) % v4 != *(_DWORD *)(a1 + 64))
    {
      v6 = *(_QWORD **)(a1 + 72);
      goto LABEL_12;
    }
    v5 = malloc_type_malloc(16 * v4, 0x80040B8603338uLL);
    if (v5)
    {
      v6 = v5;
      v7 = *(unsigned int *)(a1 + 60);
      v8 = *(unsigned int *)(a1 + 64);
      if (v7 >= v8)
      {
        v11 = v7 - v8;
        memcpy(v5, (const void *)(*(_QWORD *)(a1 + 72) + 8 * v8), 8 * (v7 - v8 + 1));
        v9 = 0;
        *(_DWORD *)(a1 + 60) = v11;
      }
      else
      {
        memcpy(v5, *(const void **)(a1 + 72), 8 * v7 + 8);
        memcpy(&v6[*(unsigned int *)(a1 + 56) + *(unsigned int *)(a1 + 64)], (const void *)(*(_QWORD *)(a1 + 72) + 8 * *(unsigned int *)(a1 + 64)), 8 * (*(_DWORD *)(a1 + 56) - *(_DWORD *)(a1 + 64)));
        v9 = *(_DWORD *)(a1 + 64) + *(_DWORD *)(a1 + 56);
      }
      *(_DWORD *)(a1 + 64) = v9;
      free(*(void **)(a1 + 72));
      *(_QWORD *)(a1 + 72) = v6;
      v4 = 2 * *(_DWORD *)(a1 + 56);
      goto LABEL_11;
    }
    return 0xFFFFFFFFLL;
  }
  v10 = malloc_type_malloc(0x20uLL, 0x80040B8603338uLL);
  *(_QWORD *)(a1 + 72) = v10;
  if (!v10)
    return 0xFFFFFFFFLL;
  v6 = v10;
  v4 = 4;
LABEL_11:
  *(_DWORD *)(a1 + 56) = v4;
LABEL_12:
  v12 = *(unsigned int *)(a1 + 60);
  v6[v12] = a2;
  *(_DWORD *)(a1 + 60) = ((int)v12 + 1) % v4;
  *(_DWORD *)(a1 + 12) += *(_DWORD *)a2 + *((_DWORD *)a2 + 1) + 32;
  v13 = *(FILE **)(a1 + 48);
  if (v13)
  {
    fwrite("qdec: debug: ", 0xDuLL, 1uLL, v13);
    fputc(10, *(FILE **)(a1 + 48));
  }
  v14 = *(_DWORD *)(a1 + 20);
  if (v14)
    v14 = (*(_DWORD *)(a1 + 32) + 1) % (2 * v14);
  *(_DWORD *)(a1 + 32) = v14;
  qdec_remove_overflow_entries(a1);
  v15 = a1 + 16 * (*(_DWORD *)(a1 + 32) & 7);
  v16 = *(_QWORD *)(v15 + 96);
  if (v16)
  {
    v17 = (_QWORD *)(v15 + 104);
    do
    {
      v18 = *(_QWORD *)(v16 + 16);
      if (*(_DWORD *)(v16 + 64) == *(_DWORD *)(a1 + 32))
      {
        *(_DWORD *)(v16 + 104) &= ~4u;
        v19 = (_QWORD *)(v18 + 24);
        if (!v18)
          v19 = v17;
        *v19 = *(_QWORD *)(v16 + 24);
        **(_QWORD **)(v16 + 24) = v18;
        --*(_DWORD *)(a1 + 224);
        v20 = *(FILE **)(a1 + 48);
        if (v20)
        {
          fwrite("qdec: debug: ", 0xDuLL, 1uLL, v20);
          fprintf(*(FILE **)(a1 + 48), "header block for stream %llu has become unblocked", *(_QWORD *)(v16 + 40));
          fputc(10, *(FILE **)(a1 + 48));
        }
        (**(void (***)(_QWORD))(a1 + 40))(*(_QWORD *)(v16 + 32));
      }
      v16 = v18;
    }
    while (v18);
  }
  if (*(_DWORD *)(a1 + 12) > *(_DWORD *)(a1 + 8))
    return 0xFFFFFFFFLL;
  return 0;
}

void qdec_remove_overflow_entries(uint64_t a1)
{
  unsigned int v1;
  FILE *v3;
  uint64_t v4;
  _DWORD *v5;
  int v6;

  v1 = *(_DWORD *)(a1 + 12);
  while (v1 > *(_DWORD *)(a1 + 8))
  {
    v3 = *(FILE **)(a1 + 48);
    if (v3)
    {
      fwrite("qdec: debug: ", 0xDuLL, 1uLL, v3);
      fprintf(*(FILE **)(a1 + 48), "capacity %u, drop entry", *(_DWORD *)(a1 + 12));
      fputc(10, *(FILE **)(a1 + 48));
      v1 = *(_DWORD *)(a1 + 12);
    }
    v4 = *(unsigned int *)(a1 + 64);
    v5 = *(_DWORD **)(*(_QWORD *)(a1 + 72) + 8 * v4);
    *(_DWORD *)(a1 + 64) = (v4 + 1) % *(_DWORD *)(a1 + 56);
    v1 = v1 - (*v5 + v5[1]) - 32;
    *(_DWORD *)(a1 + 12) = v1;
    v6 = v5[2] - 1;
    v5[2] = v6;
    if (!v6)
    {
      free(v5);
      v1 = *(_DWORD *)(a1 + 12);
    }
  }
}

void sub_18388BB08(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18388BC2C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18388BCD0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL nw_endpoint_create_with_cfurl(const __CFURL *a1)
{
  void *v2;
  char *v3;
  NSObject *v4;
  os_log_type_t v5;
  const char *v6;
  char *backtrace_string;
  _BOOL4 v8;
  char v9;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v12;
  __int16 v13;
  char *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (a1)
    return -[NWConcrete_nw_url_endpoint initWithURL:]([NWConcrete_nw_url_endpoint alloc], a1);
  __nwlog_obj();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v12 = "nw_endpoint_create_with_cfurl";
  v3 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v9 = 0;
  if (__nwlog_fault(v3, &type, &v9))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v4 = objc_claimAutoreleasedReturnValue();
      v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        v12 = "nw_endpoint_create_with_cfurl";
        v6 = "%{public}s called with null url";
LABEL_16:
        _os_log_impl(&dword_182FBE000, v4, v5, v6, buf, 0xCu);
      }
    }
    else
    {
      if (v9)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v4 = objc_claimAutoreleasedReturnValue();
        v5 = type;
        v8 = os_log_type_enabled(v4, type);
        if (backtrace_string)
        {
          if (v8)
          {
            *(_DWORD *)buf = 136446466;
            v12 = "nw_endpoint_create_with_cfurl";
            v13 = 2082;
            v14 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v4, v5, "%{public}s called with null url, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_18;
        }
        if (!v8)
          goto LABEL_17;
        *(_DWORD *)buf = 136446210;
        v12 = "nw_endpoint_create_with_cfurl";
        v6 = "%{public}s called with null url, no backtrace";
        goto LABEL_16;
      }
      __nwlog_obj();
      v4 = objc_claimAutoreleasedReturnValue();
      v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        v12 = "nw_endpoint_create_with_cfurl";
        v6 = "%{public}s called with null url, backtrace limit exceeded";
        goto LABEL_16;
      }
    }
LABEL_17:

  }
LABEL_18:
  if (v3)
    free(v3);
  return 0;
}

uint64_t nw_endpoint_get_url_port(void *a1, char a2)
{
  id v3;
  void *v4;
  id v5;
  int v6;
  _BYTE *v7;
  uint64_t v8;
  id v9;
  id v10;
  int v11;
  const char *v12;
  NSObject *v13;
  os_log_type_t v14;
  id v15;
  int v16;
  char *v17;
  os_log_type_t v18;
  _BOOL4 v19;
  id v20;
  int v21;
  os_log_type_t v22;
  id v23;
  int v24;
  id v25;
  int v26;
  char *v27;
  void *v29;
  const char *v30;
  NSObject *v31;
  os_log_type_t v32;
  char *backtrace_string;
  os_log_type_t v34;
  _BOOL4 v35;
  os_log_type_t v36;
  uint64_t v37;
  char v38;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v41;
  __int16 v42;
  _WORD v43[17];

  *(_QWORD *)&v43[13] = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v41 = "nw_endpoint_get_url_port";
    v30 = (const char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v38 = 0;
    if (__nwlog_fault(v30, &type, &v38))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v31 = objc_claimAutoreleasedReturnValue();
        v32 = type;
        if (os_log_type_enabled(v31, type))
        {
          *(_DWORD *)buf = 136446210;
          v41 = "nw_endpoint_get_url_port";
          _os_log_impl(&dword_182FBE000, v31, v32, "%{public}s called with null endpoint", buf, 0xCu);
        }
      }
      else if (v38)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v31 = objc_claimAutoreleasedReturnValue();
        v34 = type;
        v35 = os_log_type_enabled(v31, type);
        if (backtrace_string)
        {
          if (v35)
          {
            *(_DWORD *)buf = 136446466;
            v41 = "nw_endpoint_get_url_port";
            v42 = 2082;
            *(_QWORD *)v43 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v31, v34, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_46;
        }
        if (v35)
        {
          *(_DWORD *)buf = 136446210;
          v41 = "nw_endpoint_get_url_port";
          _os_log_impl(&dword_182FBE000, v31, v34, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v31 = objc_claimAutoreleasedReturnValue();
        v36 = type;
        if (os_log_type_enabled(v31, type))
        {
          *(_DWORD *)buf = 136446210;
          v41 = "nw_endpoint_get_url_port";
          _os_log_impl(&dword_182FBE000, v31, v36, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_46:
    if (!v30)
      goto LABEL_28;
    v27 = (char *)v30;
    goto LABEL_27;
  }
  v5 = v3;
  v6 = objc_msgSend(v5, "type");

  if (v6 != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v9 = (id)gLogObj;
    v10 = v5;
    v11 = objc_msgSend(v10, "type");

    *(_DWORD *)buf = 136446466;
    v41 = "nw_endpoint_get_url_port";
    v42 = 1024;
    *(_DWORD *)v43 = v11;
    LODWORD(v37) = 18;
    v12 = (const char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v38 = 0;
    if (__nwlog_fault(v12, &type, &v38))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v13 = (id)gLogObj;
        v14 = type;
        if (os_log_type_enabled(v13, type))
        {
          v15 = v10;
          v16 = objc_msgSend(v15, "type", buf, v37);

          *(_DWORD *)buf = 136446466;
          v41 = "nw_endpoint_get_url_port";
          v42 = 1024;
          *(_DWORD *)v43 = v16;
          _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s incorrect endpoint type %u", buf, 0x12u);
        }
      }
      else if (v38)
      {
        v17 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v13 = (id)gLogObj;
        v18 = type;
        v19 = os_log_type_enabled(v13, type);
        if (v17)
        {
          if (v19)
          {
            v20 = v10;
            v21 = objc_msgSend(v20, "type", buf, v37);

            *(_DWORD *)buf = 136446722;
            v41 = "nw_endpoint_get_url_port";
            v42 = 1024;
            *(_DWORD *)v43 = v21;
            v43[2] = 2082;
            *(_QWORD *)&v43[3] = v17;
            _os_log_impl(&dword_182FBE000, v13, v18, "%{public}s incorrect endpoint type %u, dumping backtrace:%{public}s", buf, 0x1Cu);
          }

          free(v17);
          if (!v12)
            goto LABEL_28;
LABEL_26:
          v27 = (char *)v12;
LABEL_27:
          free(v27);
          goto LABEL_28;
        }
        if (v19)
        {
          v25 = v10;
          v26 = objc_msgSend(v25, "type", buf, v37);

          *(_DWORD *)buf = 136446466;
          v41 = "nw_endpoint_get_url_port";
          v42 = 1024;
          *(_DWORD *)v43 = v26;
          _os_log_impl(&dword_182FBE000, v13, v18, "%{public}s incorrect endpoint type %u, no backtrace", buf, 0x12u);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v13 = (id)gLogObj;
        v22 = type;
        if (os_log_type_enabled(v13, type))
        {
          v23 = v10;
          v24 = objc_msgSend(v23, "type", buf, v37);

          *(_DWORD *)buf = 136446466;
          v41 = "nw_endpoint_get_url_port";
          v42 = 1024;
          *(_DWORD *)v43 = v24;
          _os_log_impl(&dword_182FBE000, v13, v22, "%{public}s incorrect endpoint type %u, backtrace limit exceeded", buf, 0x12u);
        }
      }

    }
    if (!v12)
    {
LABEL_28:
      v8 = 0;
      goto LABEL_29;
    }
    goto LABEL_26;
  }
  v7 = v5;
  if ((a2 & 1) == 0 && (v7[297] & 1) != 0)
    v8 = 0;
  else
    v8 = bswap32(*((unsigned __int16 *)v7 + 120)) >> 16;

LABEL_29:
  return v8;
}

void sub_18388C608(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t nw_endpoint_get_url_path(void *a1)
{
  id v1;
  void *v2;
  id v3;
  int v4;
  _QWORD *v5;
  uint64_t v6;
  id v7;
  id v8;
  int v9;
  const char *v10;
  NSObject *v11;
  os_log_type_t v12;
  id v13;
  int v14;
  char *v15;
  os_log_type_t v16;
  _BOOL4 v17;
  id v18;
  int v19;
  os_log_type_t v20;
  id v21;
  int v22;
  id v23;
  int v24;
  char *v25;
  void *v27;
  const char *v28;
  NSObject *v29;
  os_log_type_t v30;
  char *backtrace_string;
  os_log_type_t v32;
  _BOOL4 v33;
  os_log_type_t v34;
  uint64_t v35;
  _QWORD v36[4];
  id v37;
  char v38;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v41;
  __int16 v42;
  _WORD v43[17];

  *(_QWORD *)&v43[13] = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v41 = "nw_endpoint_get_url_path";
    v28 = (const char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v38 = 0;
    if (__nwlog_fault(v28, &type, &v38))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v29 = objc_claimAutoreleasedReturnValue();
        v30 = type;
        if (os_log_type_enabled(v29, type))
        {
          *(_DWORD *)buf = 136446210;
          v41 = "nw_endpoint_get_url_path";
          _os_log_impl(&dword_182FBE000, v29, v30, "%{public}s called with null endpoint", buf, 0xCu);
        }
      }
      else if (v38)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v29 = objc_claimAutoreleasedReturnValue();
        v32 = type;
        v33 = os_log_type_enabled(v29, type);
        if (backtrace_string)
        {
          if (v33)
          {
            *(_DWORD *)buf = 136446466;
            v41 = "nw_endpoint_get_url_path";
            v42 = 2082;
            *(_QWORD *)v43 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v29, v32, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_42;
        }
        if (v33)
        {
          *(_DWORD *)buf = 136446210;
          v41 = "nw_endpoint_get_url_path";
          _os_log_impl(&dword_182FBE000, v29, v32, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v29 = objc_claimAutoreleasedReturnValue();
        v34 = type;
        if (os_log_type_enabled(v29, type))
        {
          *(_DWORD *)buf = 136446210;
          v41 = "nw_endpoint_get_url_path";
          _os_log_impl(&dword_182FBE000, v29, v34, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_42:
    if (!v28)
      goto LABEL_24;
    v25 = (char *)v28;
    goto LABEL_23;
  }
  v3 = v1;
  v4 = objc_msgSend(v3, "type");

  if (v4 != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v7 = (id)gLogObj;
    v8 = v3;
    v9 = objc_msgSend(v8, "type");

    *(_DWORD *)buf = 136446466;
    v41 = "nw_endpoint_get_url_path";
    v42 = 1024;
    *(_DWORD *)v43 = v9;
    LODWORD(v35) = 18;
    v10 = (const char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v38 = 0;
    if (__nwlog_fault(v10, &type, &v38))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v11 = (id)gLogObj;
        v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          v13 = v8;
          v14 = objc_msgSend(v13, "type", buf, v35);

          *(_DWORD *)buf = 136446466;
          v41 = "nw_endpoint_get_url_path";
          v42 = 1024;
          *(_DWORD *)v43 = v14;
          _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s incorrect endpoint type %u", buf, 0x12u);
        }
      }
      else if (v38)
      {
        v15 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v11 = (id)gLogObj;
        v16 = type;
        v17 = os_log_type_enabled(v11, type);
        if (v15)
        {
          if (v17)
          {
            v18 = v8;
            v19 = objc_msgSend(v18, "type", buf, v35);

            *(_DWORD *)buf = 136446722;
            v41 = "nw_endpoint_get_url_path";
            v42 = 1024;
            *(_DWORD *)v43 = v19;
            v43[2] = 2082;
            *(_QWORD *)&v43[3] = v15;
            _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s incorrect endpoint type %u, dumping backtrace:%{public}s", buf, 0x1Cu);
          }

          free(v15);
          if (!v10)
            goto LABEL_24;
LABEL_22:
          v25 = (char *)v10;
LABEL_23:
          free(v25);
          goto LABEL_24;
        }
        if (v17)
        {
          v23 = v8;
          v24 = objc_msgSend(v23, "type", buf, v35);

          *(_DWORD *)buf = 136446466;
          v41 = "nw_endpoint_get_url_path";
          v42 = 1024;
          *(_DWORD *)v43 = v24;
          _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s incorrect endpoint type %u, no backtrace", buf, 0x12u);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v11 = (id)gLogObj;
        v20 = type;
        if (os_log_type_enabled(v11, type))
        {
          v21 = v8;
          v22 = objc_msgSend(v21, "type", buf, v35);

          *(_DWORD *)buf = 136446466;
          v41 = "nw_endpoint_get_url_path";
          v42 = 1024;
          *(_DWORD *)v43 = v22;
          _os_log_impl(&dword_182FBE000, v11, v20, "%{public}s incorrect endpoint type %u, backtrace limit exceeded", buf, 0x12u);
        }
      }

    }
    if (!v10)
    {
LABEL_24:
      v6 = 0;
      goto LABEL_25;
    }
    goto LABEL_22;
  }
  v5 = v3;
  v36[0] = MEMORY[0x1E0C809B0];
  v36[1] = 3221225472;
  v36[2] = __nw_endpoint_get_url_path_block_invoke;
  v36[3] = &unk_1E14ACFD0;
  v37 = v5;
  nw_endpoint_locked(v5, v36);
  v6 = v5[34];

LABEL_25:
  return v6;
}

void sub_18388CC70(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void __nw_endpoint_get_url_path_block_invoke(uint64_t a1)
{
  uint64_t v1;
  const __CFString *v3;
  const __CFString *v4;

  v1 = *(_QWORD *)(a1 + 32);
  if (!*(_QWORD *)(v1 + 272))
  {
    v3 = CFURLCopyPath(*(CFURLRef *)(v1 + 232));
    if (v3)
    {
      v4 = v3;
      if (CFStringGetLength(v3) >= 1)
        *(_QWORD *)(*(_QWORD *)(a1 + 32) + 272) = nw_utilities_create_c_string_from_cfstring(v4);
      CFRelease(v4);
    }
  }
}

CFTypeRef nw_endpoint_copy_cfurl(void *a1)
{
  id v1;
  void *v2;
  CFTypeRef *v3;
  int v4;
  CFTypeRef v5;
  id v6;
  CFTypeRef *v7;
  int v8;
  const char *v9;
  NSObject *v10;
  os_log_type_t v11;
  CFTypeRef *v12;
  int v13;
  char *v14;
  os_log_type_t v15;
  _BOOL4 v16;
  CFTypeRef *v17;
  int v18;
  os_log_type_t v19;
  CFTypeRef *v20;
  int v21;
  CFTypeRef *v22;
  int v23;
  char *v24;
  void *v26;
  const char *v27;
  NSObject *v28;
  os_log_type_t v29;
  char *backtrace_string;
  os_log_type_t v31;
  _BOOL4 v32;
  os_log_type_t v33;
  uint64_t v34;
  char v35;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v38;
  __int16 v39;
  _WORD v40[17];

  *(_QWORD *)&v40[13] = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v38 = "nw_endpoint_copy_cfurl";
    v27 = (const char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v35 = 0;
    if (__nwlog_fault(v27, &type, &v35))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v28 = objc_claimAutoreleasedReturnValue();
        v29 = type;
        if (os_log_type_enabled(v28, type))
        {
          *(_DWORD *)buf = 136446210;
          v38 = "nw_endpoint_copy_cfurl";
          _os_log_impl(&dword_182FBE000, v28, v29, "%{public}s called with null endpoint", buf, 0xCu);
        }
      }
      else if (v35)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v28 = objc_claimAutoreleasedReturnValue();
        v31 = type;
        v32 = os_log_type_enabled(v28, type);
        if (backtrace_string)
        {
          if (v32)
          {
            *(_DWORD *)buf = 136446466;
            v38 = "nw_endpoint_copy_cfurl";
            v39 = 2082;
            *(_QWORD *)v40 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v28, v31, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_42;
        }
        if (v32)
        {
          *(_DWORD *)buf = 136446210;
          v38 = "nw_endpoint_copy_cfurl";
          _os_log_impl(&dword_182FBE000, v28, v31, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v28 = objc_claimAutoreleasedReturnValue();
        v33 = type;
        if (os_log_type_enabled(v28, type))
        {
          *(_DWORD *)buf = 136446210;
          v38 = "nw_endpoint_copy_cfurl";
          _os_log_impl(&dword_182FBE000, v28, v33, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_42:
    if (!v27)
      goto LABEL_24;
    v24 = (char *)v27;
    goto LABEL_23;
  }
  v3 = (CFTypeRef *)v1;
  v4 = -[CFTypeRef type](v3, "type");

  if (v4 != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v6 = (id)gLogObj;
    v7 = v3;
    v8 = -[CFTypeRef type](v7, "type");

    *(_DWORD *)buf = 136446466;
    v38 = "nw_endpoint_copy_cfurl";
    v39 = 1024;
    *(_DWORD *)v40 = v8;
    LODWORD(v34) = 18;
    v9 = (const char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v35 = 0;
    if (__nwlog_fault(v9, &type, &v35))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v10 = (id)gLogObj;
        v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          v12 = v7;
          v13 = -[CFTypeRef type](v12, "type", buf, v34);

          *(_DWORD *)buf = 136446466;
          v38 = "nw_endpoint_copy_cfurl";
          v39 = 1024;
          *(_DWORD *)v40 = v13;
          _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s incorrect endpoint type %u", buf, 0x12u);
        }
      }
      else if (v35)
      {
        v14 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v10 = (id)gLogObj;
        v15 = type;
        v16 = os_log_type_enabled(v10, type);
        if (v14)
        {
          if (v16)
          {
            v17 = v7;
            v18 = -[CFTypeRef type](v17, "type", buf, v34);

            *(_DWORD *)buf = 136446722;
            v38 = "nw_endpoint_copy_cfurl";
            v39 = 1024;
            *(_DWORD *)v40 = v18;
            v40[2] = 2082;
            *(_QWORD *)&v40[3] = v14;
            _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s incorrect endpoint type %u, dumping backtrace:%{public}s", buf, 0x1Cu);
          }

          free(v14);
          if (!v9)
            goto LABEL_24;
LABEL_22:
          v24 = (char *)v9;
LABEL_23:
          free(v24);
          goto LABEL_24;
        }
        if (v16)
        {
          v22 = v7;
          v23 = -[CFTypeRef type](v22, "type", buf, v34);

          *(_DWORD *)buf = 136446466;
          v38 = "nw_endpoint_copy_cfurl";
          v39 = 1024;
          *(_DWORD *)v40 = v23;
          _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s incorrect endpoint type %u, no backtrace", buf, 0x12u);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v10 = (id)gLogObj;
        v19 = type;
        if (os_log_type_enabled(v10, type))
        {
          v20 = v7;
          v21 = -[CFTypeRef type](v20, "type", buf, v34);

          *(_DWORD *)buf = 136446466;
          v38 = "nw_endpoint_copy_cfurl";
          v39 = 1024;
          *(_DWORD *)v40 = v21;
          _os_log_impl(&dword_182FBE000, v10, v19, "%{public}s incorrect endpoint type %u, backtrace limit exceeded", buf, 0x12u);
        }
      }

    }
    if (!v9)
    {
LABEL_24:
      v5 = 0;
      goto LABEL_25;
    }
    goto LABEL_22;
  }
  v5 = CFRetain(v3[29]);
LABEL_25:

  return v5;
}

void sub_18388D32C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t countOfBytesExpectedToReceive(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0
    && (objc_msgSend(v1, "valueForHTTPHeaderField:", CFSTR("Content-Encoding")),
        (v2 = (void *)objc_claimAutoreleasedReturnValue()) != 0)
    && (v3 = v2, v4 = objc_msgSend(v2, "caseInsensitiveCompare:", CFSTR("identity")), v3, v4))
  {
    v5 = *MEMORY[0x1E0C92BE0];
  }
  else
  {
    v5 = objc_msgSend(v1, "expectedContentLength");
  }

  return v5;
}

BOOL nw_ws_allocate_options(void *a1)
{
  id v1;
  _QWORD *v2;
  _BOOL8 result;
  NSObject *v4;
  void *v5;

  v1 = a1;
  v2 = malloc_type_calloc(1uLL, 0x48uLL, 0xEAFB8F1AuLL);
  if (v2)
    goto LABEL_2;
  __nwlog_obj();
  v4 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  v5 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v5);
  if (!result)
  {
    free(v5);
LABEL_2:
    v2[8] = 0;
    *((_OWORD *)v2 + 2) = 0u;
    *((_OWORD *)v2 + 3) = 0u;
    *(_OWORD *)v2 = 0u;
    *((_OWORD *)v2 + 1) = 0u;

    return (BOOL)v2;
  }
  __break(1u);
  return result;
}

void sub_18388F9B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

nw_protocol_options_t nw_ws_create_options(nw_ws_version_t version)
{
  id v2;
  NWConcrete_nw_protocol_options *options;
  _QWORD v5[4];
  nw_ws_version_t v6;

  if (nw_protocol_copy_ws_definition::onceToken != -1)
    dispatch_once(&nw_protocol_copy_ws_definition::onceToken, &__block_literal_global_3588);
  v2 = (id)nw_protocol_copy_ws_definition::definition;
  options = nw_protocol_create_options(v2);

  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = __nw_ws_create_options_block_invoke;
  v5[3] = &__block_descriptor_36_e9_B16__0_v8l;
  v6 = version;
  nw_protocol_options_access_handle(options, v5);
  return &options->super;
}

void sub_18388FA78(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t __nw_ws_create_options_block_invoke(uint64_t a1, uint64_t a2)
{
  xpc_object_t v3;
  void *v4;
  xpc_object_t v5;
  void *v6;
  xpc_object_t v7;
  void *v8;

  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 32);
  v3 = xpc_array_create(0, 0);
  v4 = *(void **)a2;
  *(_QWORD *)a2 = v3;

  v5 = xpc_array_create(0, 0);
  v6 = *(void **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v5;

  v7 = xpc_array_create(0, 0);
  v8 = *(void **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v7;

  *(_BYTE *)(a2 + 70) = *(_BYTE *)(a2 + 70) & 0xC7 | 0x30;
  *(_WORD *)(a2 + 68) = 3855;
  *(_QWORD *)(a2 + 60) = 0x100000001000;
  return 1;
}

BOOL nw_ws_copy_options(void *a1, uint64_t a2)
{
  id v3;
  char *v4;
  void *v5;
  void *v6;
  char v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  _BOOL8 result;
  void *v13;
  char *v14;
  NSObject *v15;
  os_log_type_t v16;
  NSObject *v17;
  void *v18;
  char *backtrace_string;
  os_log_type_t v20;
  _BOOL4 v21;
  os_log_type_t v22;
  char v23;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  uint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  if (!a2)
  {
    __nwlog_obj();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v26 = "nw_ws_copy_options";
    v14 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (__nwlog_fault(v14, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v15 = objc_claimAutoreleasedReturnValue();
        v16 = type;
        if (os_log_type_enabled(v15, type))
        {
          *(_DWORD *)buf = 136446210;
          v26 = "nw_ws_copy_options";
          _os_log_impl(&dword_182FBE000, v15, v16, "%{public}s called with null existing_handle", buf, 0xCu);
        }
      }
      else if (v23)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v15 = objc_claimAutoreleasedReturnValue();
        v20 = type;
        v21 = os_log_type_enabled(v15, type);
        if (backtrace_string)
        {
          if (v21)
          {
            *(_DWORD *)buf = 136446466;
            v26 = "nw_ws_copy_options";
            v27 = 2082;
            v28 = (uint64_t)backtrace_string;
            _os_log_impl(&dword_182FBE000, v15, v20, "%{public}s called with null existing_handle, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_23;
        }
        if (v21)
        {
          *(_DWORD *)buf = 136446210;
          v26 = "nw_ws_copy_options";
          _os_log_impl(&dword_182FBE000, v15, v20, "%{public}s called with null existing_handle, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v15 = objc_claimAutoreleasedReturnValue();
        v22 = type;
        if (os_log_type_enabled(v15, type))
        {
          *(_DWORD *)buf = 136446210;
          v26 = "nw_ws_copy_options";
          _os_log_impl(&dword_182FBE000, v15, v22, "%{public}s called with null existing_handle, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_23:
    if (v14)
      free(v14);
    v4 = 0;
    goto LABEL_4;
  }
  v4 = (char *)malloc_type_calloc(1uLL, 0x48uLL, 0xEAFB8F1AuLL);
  if (v4)
  {
LABEL_3:
    *((_QWORD *)v4 + 8) = 0;
    *((_OWORD *)v4 + 2) = 0u;
    *((_OWORD *)v4 + 3) = 0u;
    *(_OWORD *)v4 = 0u;
    *((_OWORD *)v4 + 1) = 0u;
    objc_storeStrong((id *)v4, *(id *)a2);
    objc_storeStrong((id *)v4 + 1, *(id *)(a2 + 8));
    objc_storeStrong((id *)v4 + 2, *(id *)(a2 + 16));
    v5 = _Block_copy(*(const void **)(a2 + 40));
    v6 = (void *)*((_QWORD *)v4 + 5);
    *((_QWORD *)v4 + 5) = v5;

    objc_storeStrong((id *)v4 + 6, *(id *)(a2 + 48));
    v7 = v4[70];
    *((_DWORD *)v4 + 14) = *(_DWORD *)(a2 + 56);
    v4[70] = v7 & 0xFE | *(_BYTE *)(a2 + 70) & 1;
    *((_QWORD *)v4 + 4) = *(_QWORD *)(a2 + 32);
    objc_storeStrong((id *)v4 + 3, *(id *)(a2 + 24));
    v8 = v4[70] & 0xFD | (2 * ((*(unsigned __int8 *)(a2 + 70) >> 1) & 1));
    v4[70] = v8;
    v9 = v8 & 0xFFFFFFFB | (4 * ((*(unsigned __int8 *)(a2 + 70) >> 2) & 1));
    v4[70] = v9;
    v10 = v9 & 0xFFFFFFF7 | (8 * ((*(unsigned __int8 *)(a2 + 70) >> 3) & 1));
    v4[70] = v10;
    v11 = v10 & 0xFFFFFFEF | (16 * ((*(unsigned __int8 *)(a2 + 70) >> 4) & 1));
    v4[70] = v11;
    v4[70] = v11 & 0xDF | *(_BYTE *)(a2 + 70) & 0x20;
    *((_WORD *)v4 + 34) = *(_WORD *)(a2 + 68);
    *(_QWORD *)(v4 + 60) = *(_QWORD *)(a2 + 60);
LABEL_4:

    return (BOOL)v4;
  }
  __nwlog_obj();
  v17 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v17, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  v26 = "strict_calloc";
  v27 = 2048;
  v28 = 1;
  v29 = 2048;
  v30 = 72;
  v18 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v18);
  if (!result)
  {
    free(v18);
    goto LABEL_3;
  }
  __break(1u);
  return result;
}

void sub_18388FF74(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_ws_deallocate_options(uint64_t a1, id *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;

  v3 = *a2;
  *a2 = 0;

  v4 = a2[1];
  a2[1] = 0;

  v5 = a2[2];
  a2[2] = 0;

  v6 = a2[5];
  a2[5] = 0;

  v7 = a2[6];
  a2[6] = 0;

  free(a2);
}

BOOL nw_ws_option_is_equal(void *a1, uint64_t a2, uint64_t a3)
{
  id v5;
  size_t count;
  size_t v7;
  size_t v8;
  size_t v9;
  _BYTE *v11;
  _BYTE *v12;
  size_t v13;
  void *v14;
  void *v15;
  size_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  _BOOL8 v20;
  _BOOL8 result;
  NSObject *v22;
  void *v23;
  id v24;

  v5 = a1;
  count = xpc_array_get_count(*(xpc_object_t *)(a2 + 8));
  v7 = xpc_array_get_count(*(xpc_object_t *)(a3 + 8));
  v8 = xpc_array_get_count(*(xpc_object_t *)(a2 + 8));
  v9 = v8;
  if (count != v7 || v8 == 0)
  {
    if (count != v7)
      goto LABEL_35;
LABEL_22:
    if (nw_unordered_xpc_array_is_equal(*(xpc_object_t *)a2, *(xpc_object_t *)a3)
      && *(_QWORD *)(a2 + 40) == *(_QWORD *)(a3 + 40)
      && *(_QWORD *)(a2 + 48) == *(_QWORD *)(a3 + 48)
      && *(_DWORD *)(a2 + 56) == *(_DWORD *)(a3 + 56)
      && ((*(_BYTE *)(a3 + 70) ^ *(_BYTE *)(a2 + 70)) & 1) == 0
      && *(_QWORD *)(a2 + 32) == *(_QWORD *)(a3 + 32))
    {
      v20 = 0;
      if (((*(_BYTE *)(a3 + 70) ^ *(_BYTE *)(a2 + 70)) & 0x3E) == 0 && *(_QWORD *)(a2 + 24) == *(_QWORD *)(a3 + 24))
      {
        if (*(unsigned __int8 *)(a2 + 68) != *(unsigned __int8 *)(a3 + 68)
          || *(unsigned __int8 *)(a2 + 69) != *(unsigned __int8 *)(a3 + 69)
          || *(_DWORD *)(a2 + 60) != *(_DWORD *)(a3 + 60))
        {
          goto LABEL_35;
        }
        v20 = *(_DWORD *)(a2 + 64) == *(_DWORD *)(a3 + 64);
      }
    }
    else
    {
LABEL_35:
      v20 = 0;
    }

    return v20;
  }
  else
  {
    v24 = v5;
    v11 = malloc_type_calloc(1uLL, v8, 0xEAFB8F1AuLL);
    v12 = v11;
    if (v11)
      goto LABEL_9;
    __nwlog_obj();
    v22 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v22, OS_LOG_TYPE_ERROR);
    v23 = (void *)_os_log_send_and_compose_impl();

    result = __nwlog_abort((uint64_t)v23);
    if (!result)
    {
      free(v23);
LABEL_9:
      v13 = 0;
      while (1)
      {
        xpc_array_get_value(*(xpc_object_t *)(a2 + 8), v13);
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        xpc_array_get_value(*(xpc_object_t *)(a2 + 16), v13);
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        v16 = 0;
        while (v12[v16])
        {
LABEL_11:
          if (v9 == ++v16)
            goto LABEL_17;
        }
        xpc_array_get_value(*(xpc_object_t *)(a3 + 8), v16);
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        xpc_array_get_value(*(xpc_object_t *)(a3 + 16), v16);
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        if (!xpc_equal(v14, v17) || !xpc_equal(v15, v18))
          break;
        v12[v16] = 1;

LABEL_17:
        if (++v13 == v9)
        {
          v19 = 0;
          v5 = v24;
          while (v12[v19])
          {
            if (v9 == ++v19)
            {
              free(v12);
              goto LABEL_22;
            }
          }
          free(v12);
          goto LABEL_35;
        }
      }

      goto LABEL_11;
    }
    __break(1u);
  }
  return result;
}

void sub_183890350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{

  _Unwind_Resume(a1);
}

BOOL nw_protocol_options_is_ws(void *a1)
{
  id v1;
  void *v2;
  id *v3;
  id v4;
  id v5;
  _BOOL8 is_equal_unsafe;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  char *backtrace_string;
  os_log_type_t v13;
  _BOOL4 v14;
  os_log_type_t v15;
  char v16;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = (id *)v1;
    v4 = v3[1];

    if (nw_protocol_copy_ws_definition::onceToken != -1)
      dispatch_once(&nw_protocol_copy_ws_definition::onceToken, &__block_literal_global_3588);
    v5 = (id)nw_protocol_copy_ws_definition::definition;
    is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v4, (uint64_t)v5);

    goto LABEL_5;
  }
  __nwlog_obj();
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v19 = "nw_protocol_options_is_ws";
  v9 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v16 = 0;
  if (__nwlog_fault(v9, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_protocol_options_is_ws";
        _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null options", buf, 0xCu);
      }
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      v14 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          v19 = "nw_protocol_options_is_ws";
          v20 = 2082;
          v21 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_protocol_options_is_ws";
        _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_protocol_options_is_ws";
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_22:
  if (v9)
    free(v9);
  is_equal_unsafe = 0;
LABEL_5:

  return is_equal_unsafe;
}

void sub_1838906A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void nw_ws_options_add_additional_header(nw_protocol_options_t options, const char *name, const char *value)
{
  NSObject *v5;
  NSObject *v6;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  void *v11;
  os_log_type_t v12;
  void *v13;
  os_log_type_t v14;
  char *backtrace_string;
  os_log_type_t v16;
  _BOOL4 v17;
  char *v18;
  os_log_type_t v19;
  _BOOL4 v20;
  os_log_type_t v21;
  _BOOL4 v22;
  os_log_type_t v23;
  os_log_type_t v24;
  os_log_type_t v25;
  _QWORD v26[6];
  char v27;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v30;
  __int16 v31;
  const char *v32;
  __int16 v33;
  const char *v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v5 = options;
  if (!nw_protocol_options_is_ws(v5))
  {
    __nwlog_obj();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v30 = "nw_ws_options_add_additional_header";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v27 = 0;
    if (!__nwlog_fault(v8, &type, &v27))
      goto LABEL_63;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_ws_options_add_additional_header";
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null nw_protocol_options_is_ws(options)", buf, 0xCu);
      }
    }
    else if (v27)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      v17 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          v30 = "nw_ws_options_add_additional_header";
          v31 = 2082;
          v32 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v9, v16, "%{public}s called with null nw_protocol_options_is_ws(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_63:
        if (!v8)
          goto LABEL_13;
LABEL_64:
        free(v8);
        goto LABEL_13;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_ws_options_add_additional_header";
        _os_log_impl(&dword_182FBE000, v9, v16, "%{public}s called with null nw_protocol_options_is_ws(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v23 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_ws_options_add_additional_header";
        _os_log_impl(&dword_182FBE000, v9, v23, "%{public}s called with null nw_protocol_options_is_ws(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_62:

    goto LABEL_63;
  }
  if (!name)
  {
    __nwlog_obj();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v30 = "nw_ws_options_add_additional_header";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v27 = 0;
    if (!__nwlog_fault(v8, &type, &v27))
      goto LABEL_63;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_ws_options_add_additional_header";
        _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null name", buf, 0xCu);
      }
      goto LABEL_62;
    }
    if (!v27)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v24 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_ws_options_add_additional_header";
        _os_log_impl(&dword_182FBE000, v9, v24, "%{public}s called with null name, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_62;
    }
    v18 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v9 = objc_claimAutoreleasedReturnValue();
    v19 = type;
    v20 = os_log_type_enabled(v9, type);
    if (!v18)
    {
      if (v20)
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_ws_options_add_additional_header";
        _os_log_impl(&dword_182FBE000, v9, v19, "%{public}s called with null name, no backtrace", buf, 0xCu);
      }
      goto LABEL_62;
    }
    if (v20)
    {
      *(_DWORD *)buf = 136446466;
      v30 = "nw_ws_options_add_additional_header";
      v31 = 2082;
      v32 = v18;
      _os_log_impl(&dword_182FBE000, v9, v19, "%{public}s called with null name, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_43;
  }
  if (!value)
  {
    __nwlog_obj();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v30 = "nw_ws_options_add_additional_header";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v27 = 0;
    if (!__nwlog_fault(v8, &type, &v27))
      goto LABEL_63;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_ws_options_add_additional_header";
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null value", buf, 0xCu);
      }
      goto LABEL_62;
    }
    if (!v27)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v25 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_ws_options_add_additional_header";
        _os_log_impl(&dword_182FBE000, v9, v25, "%{public}s called with null value, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_62;
    }
    v18 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v9 = objc_claimAutoreleasedReturnValue();
    v21 = type;
    v22 = os_log_type_enabled(v9, type);
    if (!v18)
    {
      if (v22)
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_ws_options_add_additional_header";
        _os_log_impl(&dword_182FBE000, v9, v21, "%{public}s called with null value, no backtrace", buf, 0xCu);
      }
      goto LABEL_62;
    }
    if (v22)
    {
      *(_DWORD *)buf = 136446466;
      v30 = "nw_ws_options_add_additional_header";
      v31 = 2082;
      v32 = v18;
      _os_log_impl(&dword_182FBE000, v9, v21, "%{public}s called with null value, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_43:

    free(v18);
    if (!v8)
      goto LABEL_13;
    goto LABEL_64;
  }
  if (!strcasecmp(name, "Sec-WebSocket-Key")
    || !strcasecmp(name, "Sec-WebSocket-Protocol")
    || !strcasecmp(name, "Sec-WebSocket-Version")
    || !strcasecmp(name, "Upgrade")
    || !strcasecmp(name, "Connection"))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v6 = (id)gLogObj;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v30 = "nw_ws_options_add_additional_header";
      v31 = 2080;
      v32 = name;
      v33 = 2080;
      v34 = value;
      _os_log_impl(&dword_182FBE000, v6, OS_LOG_TYPE_ERROR, "%{public}s Cannot override (%s, %s) header in the client's request", buf, 0x20u);
    }

  }
  else
  {
    v26[0] = MEMORY[0x1E0C809B0];
    v26[1] = 3221225472;
    v26[2] = __nw_ws_options_add_additional_header_block_invoke;
    v26[3] = &__block_descriptor_48_e9_B16__0_v8l;
    v26[4] = name;
    v26[5] = value;
    nw_protocol_options_access_handle(v5, v26);
  }
LABEL_13:

}

void sub_183890E98(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t __nw_ws_options_add_additional_header_block_invoke(uint64_t a1, uint64_t a2)
{
  void *v4;
  xpc_object_t v5;
  void *v6;
  xpc_object_t v7;

  v4 = *(void **)(a2 + 8);
  v5 = xpc_string_create(*(const char **)(a1 + 32));
  xpc_array_append_value(v4, v5);

  v6 = *(void **)(a2 + 16);
  v7 = xpc_string_create(*(const char **)(a1 + 40));
  xpc_array_append_value(v6, v7);

  return 1;
}

void sub_183890F18(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_ws_options_set_maximum_message_size(nw_protocol_options_t options, size_t maximum_message_size)
{
  NSObject *v3;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  char *backtrace_string;
  os_log_type_t v9;
  _BOOL4 v10;
  os_log_type_t v11;
  _QWORD v12[5];
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = options;
  if (nw_protocol_options_is_ws(v3))
  {
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __nw_ws_options_set_maximum_message_size_block_invoke;
    v12[3] = &__block_descriptor_40_e9_B16__0_v8l;
    v12[4] = maximum_message_size;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }
  __nwlog_obj();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_ws_options_set_maximum_message_size";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_ws_options_set_maximum_message_size";
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null nw_protocol_options_is_ws(options)", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_ws_options_set_maximum_message_size";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_options_is_ws(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_ws_options_set_maximum_message_size";
        _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_options_is_ws(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_ws_options_set_maximum_message_size";
        _os_log_impl(&dword_182FBE000, v6, v11, "%{public}s called with null nw_protocol_options_is_ws(options), backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v5)
    free(v5);
LABEL_3:

}

void sub_1838911F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t __nw_ws_options_set_maximum_message_size_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  return 1;
}

void nw_ws_options_add_subprotocol(nw_protocol_options_t options, const char *subprotocol)
{
  NSObject *v3;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  void *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  char *v13;
  os_log_type_t v14;
  _BOOL4 v15;
  os_log_type_t v16;
  os_log_type_t v17;
  _QWORD v18[5];
  char v19;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  char *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v3 = options;
  if (!nw_protocol_options_is_ws(v3))
  {
    __nwlog_obj();
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v22 = "nw_ws_options_add_subprotocol";
    v5 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v19 = 0;
    if (!__nwlog_fault(v5, &type, &v19))
      goto LABEL_38;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_ws_options_add_subprotocol";
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null nw_protocol_options_is_ws(options)", buf, 0xCu);
      }
    }
    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      v12 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          v22 = "nw_ws_options_add_subprotocol";
          v23 = 2082;
          v24 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v11, "%{public}s called with null nw_protocol_options_is_ws(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v5)
          goto LABEL_4;
LABEL_39:
        free(v5);
        goto LABEL_4;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_ws_options_add_subprotocol";
        _os_log_impl(&dword_182FBE000, v6, v11, "%{public}s called with null nw_protocol_options_is_ws(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_ws_options_add_subprotocol";
        _os_log_impl(&dword_182FBE000, v6, v16, "%{public}s called with null nw_protocol_options_is_ws(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_37:

    goto LABEL_38;
  }
  if (subprotocol)
  {
    v18[0] = MEMORY[0x1E0C809B0];
    v18[1] = 3221225472;
    v18[2] = __nw_ws_options_add_subprotocol_block_invoke;
    v18[3] = &__block_descriptor_40_e9_B16__0_v8l;
    v18[4] = subprotocol;
    nw_protocol_options_access_handle(v3, v18);
    goto LABEL_4;
  }
  __nwlog_obj();
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v22 = "nw_ws_options_add_subprotocol";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v19 = 0;
  if (!__nwlog_fault(v5, &type, &v19))
    goto LABEL_38;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v6 = objc_claimAutoreleasedReturnValue();
    v9 = type;
    if (os_log_type_enabled(v6, type))
    {
      *(_DWORD *)buf = 136446210;
      v22 = "nw_ws_options_add_subprotocol";
      _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null subprotocol", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (!v19)
  {
    __nwlog_obj();
    v6 = objc_claimAutoreleasedReturnValue();
    v17 = type;
    if (os_log_type_enabled(v6, type))
    {
      *(_DWORD *)buf = 136446210;
      v22 = "nw_ws_options_add_subprotocol";
      _os_log_impl(&dword_182FBE000, v6, v17, "%{public}s called with null subprotocol, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_37;
  }
  v13 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v6 = objc_claimAutoreleasedReturnValue();
  v14 = type;
  v15 = os_log_type_enabled(v6, type);
  if (!v13)
  {
    if (v15)
    {
      *(_DWORD *)buf = 136446210;
      v22 = "nw_ws_options_add_subprotocol";
      _os_log_impl(&dword_182FBE000, v6, v14, "%{public}s called with null subprotocol, no backtrace", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (v15)
  {
    *(_DWORD *)buf = 136446466;
    v22 = "nw_ws_options_add_subprotocol";
    v23 = 2082;
    v24 = v13;
    _os_log_impl(&dword_182FBE000, v6, v14, "%{public}s called with null subprotocol, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v13);
  if (v5)
    goto LABEL_39;
LABEL_4:

}

void sub_1838916F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t __nw_ws_options_add_subprotocol_block_invoke(uint64_t a1, void **a2)
{
  void *v2;
  xpc_object_t v3;

  v2 = *a2;
  v3 = xpc_string_create(*(const char **)(a1 + 32));
  xpc_array_append_value(v2, v3);

  return 1;
}

void sub_183891744(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_ws_options_set_auto_reply_ping(nw_protocol_options_t options, BOOL auto_reply_ping)
{
  NSObject *v3;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  char *backtrace_string;
  os_log_type_t v9;
  _BOOL4 v10;
  os_log_type_t v11;
  _QWORD v12[4];
  BOOL v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = options;
  if (nw_protocol_options_is_ws(v3))
  {
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __nw_ws_options_set_auto_reply_ping_block_invoke;
    v12[3] = &__block_descriptor_33_e9_B16__0_v8l;
    v13 = auto_reply_ping;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }
  __nwlog_obj();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_ws_options_set_auto_reply_ping";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_ws_options_set_auto_reply_ping";
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null nw_protocol_options_is_ws(options)", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_ws_options_set_auto_reply_ping";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_options_is_ws(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_ws_options_set_auto_reply_ping";
        _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_options_is_ws(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_ws_options_set_auto_reply_ping";
        _os_log_impl(&dword_182FBE000, v6, v11, "%{public}s called with null nw_protocol_options_is_ws(options), backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v5)
    free(v5);
LABEL_3:

}

void sub_183891A24(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t __nw_ws_options_set_auto_reply_ping_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 70) = *(_BYTE *)(a2 + 70) & 0xFE | *(_BYTE *)(a1 + 32);
  return 1;
}

void nw_ws_options_set_skip_handshake(nw_protocol_options_t options, BOOL skip_handshake)
{
  NSObject *v3;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  char *backtrace_string;
  os_log_type_t v9;
  _BOOL4 v10;
  os_log_type_t v11;
  _QWORD v12[4];
  BOOL v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = options;
  if (nw_protocol_options_is_ws(v3))
  {
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __nw_ws_options_set_skip_handshake_block_invoke;
    v12[3] = &__block_descriptor_33_e9_B16__0_v8l;
    v13 = skip_handshake;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }
  __nwlog_obj();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_ws_options_set_skip_handshake";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_ws_options_set_skip_handshake";
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null nw_protocol_options_is_ws(options)", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_ws_options_set_skip_handshake";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_options_is_ws(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_ws_options_set_skip_handshake";
        _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_options_is_ws(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_ws_options_set_skip_handshake";
        _os_log_impl(&dword_182FBE000, v6, v11, "%{public}s called with null nw_protocol_options_is_ws(options), backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v5)
    free(v5);
LABEL_3:

}

void sub_183891D1C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t __nw_ws_options_set_skip_handshake_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 70) = *(_BYTE *)(a2 + 70) & 0xFD | (2 * *(_BYTE *)(a1 + 32));
  return 1;
}

void nw_ws_options_set_prepend_data(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  _QWORD v13[4];
  id v14;
  char v15;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (nw_protocol_options_is_ws(v3))
  {
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 3221225472;
    v13[2] = __nw_ws_options_set_prepend_data_block_invoke;
    v13[3] = &unk_1E14A9F20;
    v14 = v4;
    nw_protocol_options_access_handle(v3, v13);

    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v18 = "nw_ws_options_set_prepend_data";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v15 = 0;
  if (__nwlog_fault(v6, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_ws_options_set_prepend_data";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null nw_protocol_options_is_ws(options)", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v18 = "nw_ws_options_set_prepend_data";
          v19 = 2082;
          v20 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null nw_protocol_options_is_ws(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_ws_options_set_prepend_data";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null nw_protocol_options_is_ws(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_ws_options_set_prepend_data";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null nw_protocol_options_is_ws(options), backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
LABEL_3:

}

void sub_18389202C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

uint64_t __nw_ws_options_set_prepend_data_block_invoke(uint64_t a1, uint64_t a2)
{
  objc_storeStrong((id *)(a2 + 24), *(id *)(a1 + 32));
  return 1;
}

void nw_ws_options_set_client_request_handler(nw_protocol_options_t options, dispatch_queue_t client_queue, nw_ws_client_request_handler_t handler)
{
  NSObject *v5;
  NSObject *v6;
  nw_ws_client_request_handler_t v7;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  void *v12;
  os_log_type_t v13;
  void *v14;
  os_log_type_t v15;
  char *backtrace_string;
  os_log_type_t v17;
  _BOOL4 v18;
  char *v19;
  os_log_type_t v20;
  _BOOL4 v21;
  os_log_type_t v22;
  _BOOL4 v23;
  os_log_type_t v24;
  os_log_type_t v25;
  os_log_type_t v26;
  _QWORD v27[4];
  NSObject *v28;
  id v29;
  char v30;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v33;
  __int16 v34;
  char *v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v5 = options;
  v6 = client_queue;
  v7 = handler;
  if (!nw_protocol_options_is_ws(v5))
  {
    __nwlog_obj();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v33 = "nw_ws_options_set_client_request_handler";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v30 = 0;
    if (!__nwlog_fault(v9, &type, &v30))
      goto LABEL_55;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v33 = "nw_ws_options_set_client_request_handler";
        _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null nw_protocol_options_is_ws(options)", buf, 0xCu);
      }
    }
    else if (v30)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      v18 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446466;
          v33 = "nw_ws_options_set_client_request_handler";
          v34 = 2082;
          v35 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v10, v17, "%{public}s called with null nw_protocol_options_is_ws(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_55:
        if (!v9)
          goto LABEL_5;
LABEL_56:
        free(v9);
        goto LABEL_5;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        v33 = "nw_ws_options_set_client_request_handler";
        _os_log_impl(&dword_182FBE000, v10, v17, "%{public}s called with null nw_protocol_options_is_ws(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v24 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v33 = "nw_ws_options_set_client_request_handler";
        _os_log_impl(&dword_182FBE000, v10, v24, "%{public}s called with null nw_protocol_options_is_ws(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_54:

    goto LABEL_55;
  }
  if (!v6)
  {
    __nwlog_obj();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v33 = "nw_ws_options_set_client_request_handler";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v30 = 0;
    if (!__nwlog_fault(v9, &type, &v30))
      goto LABEL_55;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v33 = "nw_ws_options_set_client_request_handler";
        _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null client_queue", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v30)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v25 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v33 = "nw_ws_options_set_client_request_handler";
        _os_log_impl(&dword_182FBE000, v10, v25, "%{public}s called with null client_queue, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    v19 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v10 = objc_claimAutoreleasedReturnValue();
    v20 = type;
    v21 = os_log_type_enabled(v10, type);
    if (!v19)
    {
      if (v21)
      {
        *(_DWORD *)buf = 136446210;
        v33 = "nw_ws_options_set_client_request_handler";
        _os_log_impl(&dword_182FBE000, v10, v20, "%{public}s called with null client_queue, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v21)
    {
      *(_DWORD *)buf = 136446466;
      v33 = "nw_ws_options_set_client_request_handler";
      v34 = 2082;
      v35 = v19;
      _os_log_impl(&dword_182FBE000, v10, v20, "%{public}s called with null client_queue, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_35;
  }
  if (!v7)
  {
    __nwlog_obj();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v33 = "nw_ws_options_set_client_request_handler";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v30 = 0;
    if (!__nwlog_fault(v9, &type, &v30))
      goto LABEL_55;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v33 = "nw_ws_options_set_client_request_handler";
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null handler", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v30)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v26 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v33 = "nw_ws_options_set_client_request_handler";
        _os_log_impl(&dword_182FBE000, v10, v26, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    v19 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v10 = objc_claimAutoreleasedReturnValue();
    v22 = type;
    v23 = os_log_type_enabled(v10, type);
    if (!v19)
    {
      if (v23)
      {
        *(_DWORD *)buf = 136446210;
        v33 = "nw_ws_options_set_client_request_handler";
        _os_log_impl(&dword_182FBE000, v10, v22, "%{public}s called with null handler, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v23)
    {
      *(_DWORD *)buf = 136446466;
      v33 = "nw_ws_options_set_client_request_handler";
      v34 = 2082;
      v35 = v19;
      _os_log_impl(&dword_182FBE000, v10, v22, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_35:

    free(v19);
    if (!v9)
      goto LABEL_5;
    goto LABEL_56;
  }
  v27[0] = MEMORY[0x1E0C809B0];
  v27[1] = 3221225472;
  v27[2] = __nw_ws_options_set_client_request_handler_block_invoke;
  v27[3] = &unk_1E14AA370;
  v28 = v6;
  v29 = v7;
  nw_protocol_options_access_handle(v5, v27);

LABEL_5:
}

void sub_1838927A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

uint64_t __nw_ws_options_set_client_request_handler_block_invoke(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;

  objc_storeStrong((id *)(a2 + 48), *(id *)(a1 + 32));
  v4 = _Block_copy(*(const void **)(a1 + 40));
  v5 = *(void **)(a2 + 40);
  *(_QWORD *)(a2 + 40) = v4;

  return 1;
}

void nw_ws_options_set_permessage_deflate(void *a1, char a2)
{
  id v3;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  char *backtrace_string;
  os_log_type_t v9;
  _BOOL4 v10;
  os_log_type_t v11;
  _QWORD v12[4];
  char v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  if (nw_protocol_options_is_ws(v3))
  {
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __nw_ws_options_set_permessage_deflate_block_invoke;
    v12[3] = &__block_descriptor_33_e9_B16__0_v8l;
    v13 = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }
  __nwlog_obj();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_ws_options_set_permessage_deflate";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_ws_options_set_permessage_deflate";
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null nw_protocol_options_is_ws(options)", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_ws_options_set_permessage_deflate";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_options_is_ws(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_ws_options_set_permessage_deflate";
        _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_options_is_ws(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_ws_options_set_permessage_deflate";
        _os_log_impl(&dword_182FBE000, v6, v11, "%{public}s called with null nw_protocol_options_is_ws(options), backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v5)
    free(v5);
LABEL_3:

}

void sub_183892AE4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t __nw_ws_options_set_permessage_deflate_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 70) = *(_BYTE *)(a2 + 70) & 0xF7 | (8 * *(_BYTE *)(a1 + 32));
  return 1;
}

BOOL nw_ws_options_get_permessage_deflate(void *a1)
{
  id v1;
  _BOOL8 v2;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  char *backtrace_string;
  os_log_type_t v9;
  _BOOL4 v10;
  os_log_type_t v11;
  _QWORD v12[5];
  char v13;
  os_log_type_t type;
  _BYTE buf[24];
  char v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (nw_protocol_options_is_ws(v1))
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x2020000000;
    v16 = 0;
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __nw_ws_options_get_permessage_deflate_block_invoke;
    v12[3] = &unk_1E14A9D68;
    v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    v2 = *(_BYTE *)(*(_QWORD *)&buf[8] + 24) != 0;
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  __nwlog_obj();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_ws_options_get_permessage_deflate";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_ws_options_get_permessage_deflate";
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null nw_protocol_options_is_ws(options)", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_ws_options_get_permessage_deflate";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_options_is_ws(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_ws_options_get_permessage_deflate";
        _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_options_is_ws(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_ws_options_get_permessage_deflate";
        _os_log_impl(&dword_182FBE000, v6, v11, "%{public}s called with null nw_protocol_options_is_ws(options), backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v5)
    free(v5);
  v2 = 0;
LABEL_3:

  return v2;
}

void sub_183892E10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  void *v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

uint64_t __nw_ws_options_get_permessage_deflate_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = (*(_BYTE *)(a2 + 70) & 8) != 0;
  return 1;
}

void nw_ws_options_set_permessage_deflate_server_context_takeover(void *a1, char a2)
{
  id v3;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  char *backtrace_string;
  os_log_type_t v9;
  _BOOL4 v10;
  os_log_type_t v11;
  _QWORD v12[4];
  char v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  if (nw_protocol_options_is_ws(v3))
  {
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __nw_ws_options_set_permessage_deflate_server_context_takeover_block_invoke;
    v12[3] = &__block_descriptor_33_e9_B16__0_v8l;
    v13 = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }
  __nwlog_obj();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_ws_options_set_permessage_deflate_server_context_takeover";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_ws_options_set_permessage_deflate_server_context_takeover";
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null nw_protocol_options_is_ws(options)", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_ws_options_set_permessage_deflate_server_context_takeover";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_options_is_ws(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_ws_options_set_permessage_deflate_server_context_takeover";
        _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_options_is_ws(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_ws_options_set_permessage_deflate_server_context_takeover";
        _os_log_impl(&dword_182FBE000, v6, v11, "%{public}s called with null nw_protocol_options_is_ws(options), backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v5)
    free(v5);
LABEL_3:

}

void sub_183893124(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t __nw_ws_options_set_permessage_deflate_server_context_takeover_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 70) = *(_BYTE *)(a2 + 70) & 0xEF | (16 * *(_BYTE *)(a1 + 32));
  return 1;
}

void nw_ws_options_set_permessage_deflate_server_max_window_bits(void *a1, char a2)
{
  id v3;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  char *backtrace_string;
  os_log_type_t v9;
  _BOOL4 v10;
  os_log_type_t v11;
  _QWORD v12[4];
  char v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  if (nw_protocol_options_is_ws(v3))
  {
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __nw_ws_options_set_permessage_deflate_server_max_window_bits_block_invoke;
    v12[3] = &__block_descriptor_33_e9_B16__0_v8l;
    v13 = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }
  __nwlog_obj();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_ws_options_set_permessage_deflate_server_max_window_bits";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_ws_options_set_permessage_deflate_server_max_window_bits";
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null nw_protocol_options_is_ws(options)", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_ws_options_set_permessage_deflate_server_max_window_bits";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_options_is_ws(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_ws_options_set_permessage_deflate_server_max_window_bits";
        _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_options_is_ws(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_ws_options_set_permessage_deflate_server_max_window_bits";
        _os_log_impl(&dword_182FBE000, v6, v11, "%{public}s called with null nw_protocol_options_is_ws(options), backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v5)
    free(v5);
LABEL_3:

}

void sub_18389341C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t __nw_ws_options_set_permessage_deflate_server_max_window_bits_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 68) = *(_BYTE *)(a1 + 32);
  return 1;
}

void nw_ws_options_set_permessage_deflate_client_context_takeover(void *a1, char a2)
{
  id v3;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  char *backtrace_string;
  os_log_type_t v9;
  _BOOL4 v10;
  os_log_type_t v11;
  _QWORD v12[4];
  char v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  if (nw_protocol_options_is_ws(v3))
  {
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __nw_ws_options_set_permessage_deflate_client_context_takeover_block_invoke;
    v12[3] = &__block_descriptor_33_e9_B16__0_v8l;
    v13 = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }
  __nwlog_obj();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_ws_options_set_permessage_deflate_client_context_takeover";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_ws_options_set_permessage_deflate_client_context_takeover";
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null nw_protocol_options_is_ws(options)", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_ws_options_set_permessage_deflate_client_context_takeover";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_options_is_ws(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_ws_options_set_permessage_deflate_client_context_takeover";
        _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_options_is_ws(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_ws_options_set_permessage_deflate_client_context_takeover";
        _os_log_impl(&dword_182FBE000, v6, v11, "%{public}s called with null nw_protocol_options_is_ws(options), backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v5)
    free(v5);
LABEL_3:

}

void sub_183893708(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t __nw_ws_options_set_permessage_deflate_client_context_takeover_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 70) = *(_BYTE *)(a2 + 70) & 0xDF | (32 * *(_BYTE *)(a1 + 32));
  return 1;
}

void nw_ws_options_set_permessage_deflate_client_max_window_bits(void *a1, char a2)
{
  id v3;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  char *backtrace_string;
  os_log_type_t v9;
  _BOOL4 v10;
  os_log_type_t v11;
  _QWORD v12[4];
  char v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  if (nw_protocol_options_is_ws(v3))
  {
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __nw_ws_options_set_permessage_deflate_client_max_window_bits_block_invoke;
    v12[3] = &__block_descriptor_33_e9_B16__0_v8l;
    v13 = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }
  __nwlog_obj();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_ws_options_set_permessage_deflate_client_max_window_bits";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_ws_options_set_permessage_deflate_client_max_window_bits";
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null nw_protocol_options_is_ws(options)", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_ws_options_set_permessage_deflate_client_max_window_bits";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_options_is_ws(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_ws_options_set_permessage_deflate_client_max_window_bits";
        _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_options_is_ws(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_ws_options_set_permessage_deflate_client_max_window_bits";
        _os_log_impl(&dword_182FBE000, v6, v11, "%{public}s called with null nw_protocol_options_is_ws(options), backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v5)
    free(v5);
LABEL_3:

}

void sub_183893A00(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t __nw_ws_options_set_permessage_deflate_client_max_window_bits_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 69) = *(_BYTE *)(a1 + 32);
  return 1;
}

void nw_ws_options_set_permessage_deflate_incoming_buffer_size(void *a1, int a2)
{
  id v3;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  char *backtrace_string;
  os_log_type_t v9;
  _BOOL4 v10;
  os_log_type_t v11;
  _QWORD v12[4];
  int v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  if (nw_protocol_options_is_ws(v3))
  {
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __nw_ws_options_set_permessage_deflate_incoming_buffer_size_block_invoke;
    v12[3] = &__block_descriptor_36_e9_B16__0_v8l;
    v13 = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }
  __nwlog_obj();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_ws_options_set_permessage_deflate_incoming_buffer_size";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_ws_options_set_permessage_deflate_incoming_buffer_size";
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null nw_protocol_options_is_ws(options)", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_ws_options_set_permessage_deflate_incoming_buffer_size";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_options_is_ws(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_ws_options_set_permessage_deflate_incoming_buffer_size";
        _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_options_is_ws(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_ws_options_set_permessage_deflate_incoming_buffer_size";
        _os_log_impl(&dword_182FBE000, v6, v11, "%{public}s called with null nw_protocol_options_is_ws(options), backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v5)
    free(v5);
LABEL_3:

}

void sub_183893CEC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t __nw_ws_options_set_permessage_deflate_incoming_buffer_size_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 60) = *(_DWORD *)(a1 + 32);
  return 1;
}

void nw_ws_options_set_permessage_deflate_outgoing_buffer_size(void *a1, int a2)
{
  id v3;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  char *backtrace_string;
  os_log_type_t v9;
  _BOOL4 v10;
  os_log_type_t v11;
  _QWORD v12[4];
  int v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  if (nw_protocol_options_is_ws(v3))
  {
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __nw_ws_options_set_permessage_deflate_outgoing_buffer_size_block_invoke;
    v12[3] = &__block_descriptor_36_e9_B16__0_v8l;
    v13 = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }
  __nwlog_obj();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_ws_options_set_permessage_deflate_outgoing_buffer_size";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_ws_options_set_permessage_deflate_outgoing_buffer_size";
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null nw_protocol_options_is_ws(options)", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_ws_options_set_permessage_deflate_outgoing_buffer_size";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_options_is_ws(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_ws_options_set_permessage_deflate_outgoing_buffer_size";
        _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_options_is_ws(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_ws_options_set_permessage_deflate_outgoing_buffer_size";
        _os_log_impl(&dword_182FBE000, v6, v11, "%{public}s called with null nw_protocol_options_is_ws(options), backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v5)
    free(v5);
LABEL_3:

}

void sub_183893FD8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t __nw_ws_options_set_permessage_deflate_outgoing_buffer_size_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 64) = *(_DWORD *)(a1 + 32);
  return 1;
}

BOOL nw_protocol_metadata_is_ws(nw_protocol_metadata_t metadata)
{
  NSObject *v1;
  NSObject *v2;
  id *v3;
  id v4;
  id v5;
  BOOL is_equal_unsafe;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  char *backtrace_string;
  os_log_type_t v13;
  _BOOL4 v14;
  os_log_type_t v15;
  char v16;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v1 = metadata;
  v2 = v1;
  if (v1)
  {
    v3 = v1;
    v4 = v3[1];

    if (nw_protocol_copy_ws_definition::onceToken != -1)
      dispatch_once(&nw_protocol_copy_ws_definition::onceToken, &__block_literal_global_3588);
    v5 = (id)nw_protocol_copy_ws_definition::definition;
    is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v4, (uint64_t)v5);

    goto LABEL_5;
  }
  __nwlog_obj();
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v19 = "nw_protocol_metadata_is_ws";
  v9 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v16 = 0;
  if (__nwlog_fault(v9, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_protocol_metadata_is_ws";
        _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null metadata", buf, 0xCu);
      }
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      v14 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          v19 = "nw_protocol_metadata_is_ws";
          v20 = 2082;
          v21 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_protocol_metadata_is_ws";
        _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_protocol_metadata_is_ws";
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_22:
  if (v9)
    free(v9);
  is_equal_unsafe = 0;
LABEL_5:

  return is_equal_unsafe;
}

void sub_1838942EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

nw_protocol_metadata_t nw_ws_create_metadata(nw_ws_opcode_t opcode)
{
  id v2;
  NSObject *singleton;
  NSObject *v4;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (nw_protocol_copy_ws_definition::onceToken != -1)
    dispatch_once(&nw_protocol_copy_ws_definition::onceToken, &__block_literal_global_3588);
  v2 = (id)nw_protocol_copy_ws_definition::definition;
  singleton = nw_protocol_metadata_create_singleton(v2);

  if (singleton)
  {
    nw_framer_message_set_value(singleton, "opcode", (void *)(int)opcode, 0);
    nw_framer_message_set_value(singleton, "close", (void *)0x3ED, 0);
    nw_framer_message_set_value(singleton, "permessage_deflate", (void *)1, 0);
    v4 = singleton;
    goto LABEL_5;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_ws_create_metadata";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_ws_create_metadata";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null metadata", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_ws_create_metadata";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_ws_create_metadata";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_ws_create_metadata";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_22:
  if (v7)
    free(v7);
LABEL_5:

  return singleton;
}

void sub_183894620(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

nw_ws_opcode_t nw_ws_metadata_get_opcode(nw_protocol_metadata_t metadata)
{
  NSObject *v1;
  nw_ws_opcode_t v2;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  char *backtrace_string;
  os_log_type_t v9;
  _BOOL4 v10;
  os_log_type_t v11;
  _QWORD access_value[5];
  char v13;
  os_log_type_t type;
  _BYTE buf[24];
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v1 = metadata;
  if (nw_protocol_metadata_is_ws(v1))
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    v16 = -1;
    *(_QWORD *)&buf[16] = 0x2020000000;
    access_value[0] = MEMORY[0x1E0C809B0];
    access_value[1] = 3221225472;
    access_value[2] = __nw_ws_metadata_get_opcode_block_invoke;
    access_value[3] = &unk_1E14A4848;
    access_value[4] = buf;
    nw_framer_message_access_value(v1, "opcode", access_value);
    v2 = *(_DWORD *)(*(_QWORD *)&buf[8] + 24);
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  __nwlog_obj();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_ws_metadata_get_opcode";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_ws_metadata_get_opcode";
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null nw_protocol_metadata_is_ws(metadata)", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_ws_metadata_get_opcode";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_metadata_is_ws(metadata), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_ws_metadata_get_opcode";
        _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_metadata_is_ws(metadata), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_ws_metadata_get_opcode";
        _os_log_impl(&dword_182FBE000, v6, v11, "%{public}s called with null nw_protocol_metadata_is_ws(metadata), backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v5)
    free(v5);
  v2 = nw_ws_opcode_invalid;
LABEL_3:

  return v2;
}

void sub_183894940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  void *v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

uint64_t __nw_ws_metadata_get_opcode_block_invoke(uint64_t a1, int a2)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = a2;
  return 1;
}

void nw_ws_metadata_set_close_code(nw_protocol_metadata_t metadata, nw_ws_close_code_t close_code)
{
  NSObject *v3;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  char *backtrace_string;
  os_log_type_t v9;
  _BOOL4 v10;
  os_log_type_t v11;
  char v12;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v3 = metadata;
  if (nw_protocol_metadata_is_ws(v3))
  {
    nw_framer_message_set_value(v3, "close", (void *)close_code, 0);
    goto LABEL_3;
  }
  __nwlog_obj();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v15 = "nw_ws_metadata_set_close_code";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v12 = 0;
  if (__nwlog_fault(v5, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_ws_metadata_set_close_code";
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null nw_protocol_metadata_is_ws(metadata)", buf, 0xCu);
      }
    }
    else if (v12)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          v15 = "nw_ws_metadata_set_close_code";
          v16 = 2082;
          v17 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_metadata_is_ws(metadata), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_ws_metadata_set_close_code";
        _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_metadata_is_ws(metadata), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_ws_metadata_set_close_code";
        _os_log_impl(&dword_182FBE000, v6, v11, "%{public}s called with null nw_protocol_metadata_is_ws(metadata), backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v5)
    free(v5);
LABEL_3:

}

void sub_183894C28(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

nw_ws_close_code_t nw_ws_metadata_get_close_code(nw_protocol_metadata_t metadata)
{
  NSObject *v1;
  nw_ws_close_code_t v2;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  char *backtrace_string;
  os_log_type_t v9;
  _BOOL4 v10;
  os_log_type_t v11;
  _QWORD access_value[5];
  char v13;
  os_log_type_t type;
  _BYTE buf[24];
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v1 = metadata;
  if (nw_protocol_metadata_is_ws(v1))
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    v16 = 1005;
    *(_QWORD *)&buf[16] = 0x2020000000;
    access_value[0] = MEMORY[0x1E0C809B0];
    access_value[1] = 3221225472;
    access_value[2] = __nw_ws_metadata_get_close_code_block_invoke;
    access_value[3] = &unk_1E14A4848;
    access_value[4] = buf;
    nw_framer_message_access_value(v1, "close", access_value);
    v2 = *(_DWORD *)(*(_QWORD *)&buf[8] + 24);
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  __nwlog_obj();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_ws_metadata_get_close_code";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_ws_metadata_get_close_code";
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null nw_protocol_metadata_is_ws(metadata)", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_ws_metadata_get_close_code";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_metadata_is_ws(metadata), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_ws_metadata_get_close_code";
        _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_metadata_is_ws(metadata), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_ws_metadata_get_close_code";
        _os_log_impl(&dword_182FBE000, v6, v11, "%{public}s called with null nw_protocol_metadata_is_ws(metadata), backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v5)
    free(v5);
  v2 = nw_ws_close_code_no_status_received;
LABEL_3:

  return v2;
}

void sub_183894F3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  void *v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

uint64_t __nw_ws_metadata_get_close_code_block_invoke(uint64_t a1, int a2)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = a2;
  return 1;
}

void nw_ws_metadata_set_pong_handler(nw_protocol_metadata_t metadata, dispatch_queue_t client_queue, nw_ws_pong_handler_t pong_handler)
{
  NSObject *v5;
  NSObject *v6;
  nw_ws_pong_handler_t v7;
  NSObject *v8;
  _QWORD *v9;
  void *v10;
  _QWORD *v11;
  void *v12;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  void *v16;
  os_log_type_t v17;
  void *v18;
  os_log_type_t v19;
  char *backtrace_string;
  os_log_type_t v21;
  _BOOL4 v22;
  char *v23;
  os_log_type_t v24;
  _BOOL4 v25;
  os_log_type_t v26;
  _BOOL4 v27;
  os_log_type_t v28;
  os_log_type_t v29;
  os_log_type_t v30;
  _QWORD dispose_value[4];
  NSObject *v32;
  char v33;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v36;
  __int16 v37;
  char *v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v5 = metadata;
  v6 = client_queue;
  v7 = pong_handler;
  if (!nw_protocol_metadata_is_ws(v5))
  {
    __nwlog_obj();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v36 = "nw_ws_metadata_set_pong_handler";
    v13 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v33 = 0;
    if (!__nwlog_fault(v13, &type, &v33))
      goto LABEL_55;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        v36 = "nw_ws_metadata_set_pong_handler";
        _os_log_impl(&dword_182FBE000, v14, v15, "%{public}s called with null nw_protocol_metadata_is_ws(metadata)", buf, 0xCu);
      }
    }
    else if (v33)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v21 = type;
      v22 = os_log_type_enabled(v14, type);
      if (backtrace_string)
      {
        if (v22)
        {
          *(_DWORD *)buf = 136446466;
          v36 = "nw_ws_metadata_set_pong_handler";
          v37 = 2082;
          v38 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v14, v21, "%{public}s called with null nw_protocol_metadata_is_ws(metadata), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_55:
        if (!v13)
          goto LABEL_5;
LABEL_56:
        free(v13);
        goto LABEL_5;
      }
      if (v22)
      {
        *(_DWORD *)buf = 136446210;
        v36 = "nw_ws_metadata_set_pong_handler";
        _os_log_impl(&dword_182FBE000, v14, v21, "%{public}s called with null nw_protocol_metadata_is_ws(metadata), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v28 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        v36 = "nw_ws_metadata_set_pong_handler";
        _os_log_impl(&dword_182FBE000, v14, v28, "%{public}s called with null nw_protocol_metadata_is_ws(metadata), backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_54:

    goto LABEL_55;
  }
  if (!v6)
  {
    __nwlog_obj();
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v36 = "nw_ws_metadata_set_pong_handler";
    v13 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v33 = 0;
    if (!__nwlog_fault(v13, &type, &v33))
      goto LABEL_55;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        v36 = "nw_ws_metadata_set_pong_handler";
        _os_log_impl(&dword_182FBE000, v14, v17, "%{public}s called with null client_queue", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v33)
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v29 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        v36 = "nw_ws_metadata_set_pong_handler";
        _os_log_impl(&dword_182FBE000, v14, v29, "%{public}s called with null client_queue, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    v23 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v14 = objc_claimAutoreleasedReturnValue();
    v24 = type;
    v25 = os_log_type_enabled(v14, type);
    if (!v23)
    {
      if (v25)
      {
        *(_DWORD *)buf = 136446210;
        v36 = "nw_ws_metadata_set_pong_handler";
        _os_log_impl(&dword_182FBE000, v14, v24, "%{public}s called with null client_queue, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v25)
    {
      *(_DWORD *)buf = 136446466;
      v36 = "nw_ws_metadata_set_pong_handler";
      v37 = 2082;
      v38 = v23;
      _os_log_impl(&dword_182FBE000, v14, v24, "%{public}s called with null client_queue, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_35;
  }
  if (!v7)
  {
    __nwlog_obj();
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v36 = "nw_ws_metadata_set_pong_handler";
    v13 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v33 = 0;
    if (!__nwlog_fault(v13, &type, &v33))
      goto LABEL_55;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v19 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        v36 = "nw_ws_metadata_set_pong_handler";
        _os_log_impl(&dword_182FBE000, v14, v19, "%{public}s called with null pong_handler", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v33)
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v30 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        v36 = "nw_ws_metadata_set_pong_handler";
        _os_log_impl(&dword_182FBE000, v14, v30, "%{public}s called with null pong_handler, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    v23 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v14 = objc_claimAutoreleasedReturnValue();
    v26 = type;
    v27 = os_log_type_enabled(v14, type);
    if (!v23)
    {
      if (v27)
      {
        *(_DWORD *)buf = 136446210;
        v36 = "nw_ws_metadata_set_pong_handler";
        _os_log_impl(&dword_182FBE000, v14, v26, "%{public}s called with null pong_handler, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v27)
    {
      *(_DWORD *)buf = 136446466;
      v36 = "nw_ws_metadata_set_pong_handler";
      v37 = 2082;
      v38 = v23;
      _os_log_impl(&dword_182FBE000, v14, v26, "%{public}s called with null pong_handler, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_35:

    free(v23);
    if (!v13)
      goto LABEL_5;
    goto LABEL_56;
  }
  v8 = v6;
  nw_framer_message_set_value(v5, "client_queue", v8, &__block_literal_global_50471);
  v9 = nw_dictionary_create();
  v10 = _Block_copy(v7);
  nw_dictionary_set_value((uint64_t)v9, "handler", v10);

  v11 = v9;
  dispose_value[0] = MEMORY[0x1E0C809B0];
  dispose_value[1] = 3221225472;
  dispose_value[2] = __nw_ws_metadata_set_pong_handler_block_invoke_2;
  dispose_value[3] = &unk_1E14A4890;
  v32 = v8;
  nw_framer_message_set_value(v5, "pong_handler", v11, dispose_value);

LABEL_5:
}

void sub_1838956FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

void __nw_ws_metadata_set_pong_handler_block_invoke_2(uint64_t a1, void *a2)
{
  void *v4;
  void *v5;
  NSObject *v6;
  _QWORD block[4];
  id v8;

  if (a2)
  {
    v4 = nw_dictionary_copy_value((uint64_t)a2, (uint64_t)"handler");
    v5 = v4;
    if (v4)
    {
      v6 = *(NSObject **)(a1 + 32);
      if (v6)
      {
        block[0] = MEMORY[0x1E0C809B0];
        block[1] = 3221225472;
        block[2] = __nw_ws_metadata_set_pong_handler_block_invoke_3;
        block[3] = &unk_1E14AC390;
        v8 = v4;
        dispatch_async(v6, block);

      }
    }

  }
}

void __nw_ws_metadata_set_pong_handler_block_invoke_3(uint64_t a1)
{
  uint64_t v1;
  _DWORD *v2;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = -[NWConcrete_nw_error initWithDomain:code:]([NWConcrete_nw_error alloc], 1, 89);
  (*(void (**)(uint64_t))(v1 + 16))(v1);

}

void sub_183895828(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void *__Block_byref_object_copy__50482(uint64_t a1, uint64_t a2)
{
  void *result;

  result = _Block_copy(*(const void **)(a2 + 40));
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void __Block_byref_object_dispose__50483(uint64_t a1)
{

}

uint64_t __nw_ws_metadata_copy_pong_handler_block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;

  v3 = a2;
  v4 = v3;
  if (v3)
  {
    v5 = nw_dictionary_copy_value((uint64_t)v3, (uint64_t)"handler");
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v7 = *(void **)(v6 + 40);
    *(_QWORD *)(v6 + 40) = v5;

    nw_dictionary_set_value((uint64_t)v4, "handler", 0);
  }

  return 1;
}

uint64_t __Block_byref_object_copy__21_50491(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__22_50492(uint64_t a1)
{

}

uint64_t __nw_ws_metadata_copy_client_queue_block_invoke(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
  return 1;
}

nw_ws_response_t nw_ws_metadata_copy_server_response(nw_protocol_metadata_t metadata)
{
  NSObject *v1;
  NSObject *v2;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  char *backtrace_string;
  os_log_type_t v9;
  _BOOL4 v10;
  os_log_type_t v11;
  _QWORD access_value[5];
  char v13;
  os_log_type_t type;
  _BYTE buf[24];
  uint64_t (*v16)(uint64_t, uint64_t);
  void (*v17)(uint64_t);
  id v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = metadata;
  if (nw_protocol_metadata_is_ws(v1))
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x3032000000;
    v16 = __Block_byref_object_copy__21_50491;
    v17 = __Block_byref_object_dispose__22_50492;
    v18 = 0;
    access_value[0] = MEMORY[0x1E0C809B0];
    access_value[1] = 3221225472;
    access_value[2] = __nw_ws_metadata_copy_server_response_block_invoke;
    access_value[3] = &unk_1E14A4848;
    access_value[4] = buf;
    nw_framer_message_access_value(v1, "server_response", access_value);
    v2 = *(id *)(*(_QWORD *)&buf[8] + 40);
    _Block_object_dispose(buf, 8);

    goto LABEL_3;
  }
  __nwlog_obj();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_ws_metadata_copy_server_response";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_ws_metadata_copy_server_response";
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null nw_protocol_metadata_is_ws(metadata)", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_ws_metadata_copy_server_response";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_metadata_is_ws(metadata), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_ws_metadata_copy_server_response";
        _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_metadata_is_ws(metadata), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_ws_metadata_copy_server_response";
        _os_log_impl(&dword_182FBE000, v6, v11, "%{public}s called with null nw_protocol_metadata_is_ws(metadata), backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v5)
    free(v5);
  v2 = 0;
LABEL_3:

  return v2;
}

void sub_183895C44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;

  _Block_object_dispose(&a19, 8);

  _Unwind_Resume(a1);
}

uint64_t __nw_ws_metadata_copy_server_response_block_invoke(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
  return 1;
}

BOOL nw_ws_metadata_get_negotiated_permessage_deflate(void *a1)
{
  NSObject *v1;
  _BOOL8 v2;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  char *backtrace_string;
  os_log_type_t v9;
  _BOOL4 v10;
  os_log_type_t v11;
  _QWORD access_value[5];
  char v13;
  os_log_type_t type;
  _BYTE buf[24];
  char v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (nw_protocol_metadata_is_ws(v1))
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x2020000000;
    v16 = 0;
    access_value[0] = MEMORY[0x1E0C809B0];
    access_value[1] = 3221225472;
    access_value[2] = __nw_ws_metadata_get_negotiated_permessage_deflate_block_invoke;
    access_value[3] = &unk_1E14A4848;
    access_value[4] = buf;
    nw_framer_message_access_value(v1, "negotiated_permessage_deflate", access_value);
    v2 = *(_BYTE *)(*(_QWORD *)&buf[8] + 24) != 0;
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  __nwlog_obj();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_ws_metadata_get_negotiated_permessage_deflate";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_ws_metadata_get_negotiated_permessage_deflate";
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null nw_protocol_metadata_is_ws(metadata)", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_ws_metadata_get_negotiated_permessage_deflate";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_metadata_is_ws(metadata), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_ws_metadata_get_negotiated_permessage_deflate";
        _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_metadata_is_ws(metadata), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_ws_metadata_get_negotiated_permessage_deflate";
        _os_log_impl(&dword_182FBE000, v6, v11, "%{public}s called with null nw_protocol_metadata_is_ws(metadata), backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v5)
    free(v5);
  v2 = 0;
LABEL_3:

  return v2;
}

void sub_183895FA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  void *v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

uint64_t __nw_ws_metadata_get_negotiated_permessage_deflate_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = a2 != 0;
  return 1;
}

void nw_ws_metadata_set_negotiated_permessage_deflate(void *a1, unsigned int a2)
{
  NSObject *v3;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  char *backtrace_string;
  os_log_type_t v9;
  _BOOL4 v10;
  os_log_type_t v11;
  char v12;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  if (nw_protocol_metadata_is_ws(v3))
  {
    nw_framer_message_set_value(v3, "negotiated_permessage_deflate", (void *)a2, 0);
    goto LABEL_3;
  }
  __nwlog_obj();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v15 = "nw_ws_metadata_set_negotiated_permessage_deflate";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v12 = 0;
  if (__nwlog_fault(v5, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_ws_metadata_set_negotiated_permessage_deflate";
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null nw_protocol_metadata_is_ws(metadata)", buf, 0xCu);
      }
    }
    else if (v12)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          v15 = "nw_ws_metadata_set_negotiated_permessage_deflate";
          v16 = 2082;
          v17 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_metadata_is_ws(metadata), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_ws_metadata_set_negotiated_permessage_deflate";
        _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_metadata_is_ws(metadata), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_ws_metadata_set_negotiated_permessage_deflate";
        _os_log_impl(&dword_182FBE000, v6, v11, "%{public}s called with null nw_protocol_metadata_is_ws(metadata), backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v5)
    free(v5);
LABEL_3:

}

void sub_183896294(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL nw_ws_metadata_get_permessage_deflate(void *a1)
{
  NSObject *v1;
  _BOOL8 v2;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  char *backtrace_string;
  os_log_type_t v9;
  _BOOL4 v10;
  os_log_type_t v11;
  _QWORD access_value[5];
  char v13;
  os_log_type_t type;
  _BYTE buf[24];
  char v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (nw_protocol_metadata_is_ws(v1))
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x2020000000;
    v16 = 1;
    access_value[0] = MEMORY[0x1E0C809B0];
    access_value[1] = 3221225472;
    access_value[2] = __nw_ws_metadata_get_permessage_deflate_block_invoke;
    access_value[3] = &unk_1E14A4848;
    access_value[4] = buf;
    nw_framer_message_access_value(v1, "permessage_deflate", access_value);
    v2 = *(_BYTE *)(*(_QWORD *)&buf[8] + 24) != 0;
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  __nwlog_obj();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_ws_metadata_get_permessage_deflate";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_ws_metadata_get_permessage_deflate";
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null nw_protocol_metadata_is_ws(metadata)", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_ws_metadata_get_permessage_deflate";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_metadata_is_ws(metadata), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_ws_metadata_get_permessage_deflate";
        _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_metadata_is_ws(metadata), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_ws_metadata_get_permessage_deflate";
        _os_log_impl(&dword_182FBE000, v6, v11, "%{public}s called with null nw_protocol_metadata_is_ws(metadata), backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v5)
    free(v5);
  v2 = 0;
LABEL_3:

  return v2;
}

void sub_1838965B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  void *v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

uint64_t __nw_ws_metadata_get_permessage_deflate_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = a2 != 0;
  return 1;
}

void nw_ws_metadata_set_permessage_deflate(void *a1, unsigned int a2)
{
  NSObject *v3;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  char *backtrace_string;
  os_log_type_t v9;
  _BOOL4 v10;
  os_log_type_t v11;
  char v12;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  if (nw_protocol_metadata_is_ws(v3))
  {
    nw_framer_message_set_value(v3, "permessage_deflate", (void *)a2, 0);
    goto LABEL_3;
  }
  __nwlog_obj();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v15 = "nw_ws_metadata_set_permessage_deflate";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v12 = 0;
  if (__nwlog_fault(v5, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_ws_metadata_set_permessage_deflate";
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null nw_protocol_metadata_is_ws(metadata)", buf, 0xCu);
      }
    }
    else if (v12)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          v15 = "nw_ws_metadata_set_permessage_deflate";
          v16 = 2082;
          v17 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_metadata_is_ws(metadata), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_ws_metadata_set_permessage_deflate";
        _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_metadata_is_ws(metadata), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_ws_metadata_set_permessage_deflate";
        _os_log_impl(&dword_182FBE000, v6, v11, "%{public}s called with null nw_protocol_metadata_is_ws(metadata), backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v5)
    free(v5);
LABEL_3:

}

void sub_1838968A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *std::vector<nw_object_wrapper_t>::__emplace_back_slow_path<nw_object *&>(uint64_t a1, void *a2)
{
  _QWORD *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  void *v13;
  char *v14;
  _QWORD *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  void *v21;
  void *v22;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  uint64_t v27;
  __int128 v28;

  v2 = *(_QWORD **)a1;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = v3 - *(_QWORD *)a1;
  v5 = v4 >> 3;
  v6 = (v4 >> 3) + 1;
  if (v6 >> 61)
    abort();
  v9 = *(_QWORD *)(a1 + 16) - (_QWORD)v2;
  if (v9 >> 2 > v6)
    v6 = v9 >> 2;
  if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
    v10 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v10 = v6;
  if (v10)
  {
    if (v10 >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v11 = (char *)operator new(8 * v10);
    v12 = &v11[8 * v5];
    if (a2)
      goto LABEL_10;
  }
  else
  {
    v11 = 0;
    v12 = (char *)(8 * v5);
    if (a2)
    {
LABEL_10:
      v13 = os_retain(a2);
      v2 = *(_QWORD **)a1;
      v3 = *(_QWORD *)(a1 + 8);
      goto LABEL_13;
    }
  }
  v13 = 0;
LABEL_13:
  v14 = &v11[8 * v10];
  *(_QWORD *)v12 = v13;
  v15 = v12 + 8;
  if ((_QWORD *)v3 == v2)
  {
    *(_QWORD *)a1 = v12;
    *(_QWORD *)(a1 + 8) = v15;
    *(_QWORD *)(a1 + 16) = v14;
    goto LABEL_25;
  }
  v16 = v3 - (_QWORD)v2 - 8;
  if (v16 <= 0x77
    || (unint64_t)&v11[v4 - (v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v3
    && v3 - (v16 & 0xFFFFFFFFFFFFFFF8) - 8 < (unint64_t)v12)
  {
    v17 = (_QWORD *)v3;
    do
    {
LABEL_18:
      v18 = *--v17;
      *((_QWORD *)v12 - 1) = v18;
      v12 -= 8;
      *v17 = 0;
    }
    while (v17 != v2);
    goto LABEL_19;
  }
  v24 = (v16 >> 3) + 1;
  v17 = (_QWORD *)(v3 - 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL));
  v25 = &v11[8 * v5 - 16];
  v26 = (_OWORD *)(v3 - 32);
  v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v28 = v26[1];
    *((_OWORD *)v25 - 1) = *v26;
    *(_OWORD *)v25 = v28;
    *v26 = 0uLL;
    v26[1] = 0uLL;
    v26 -= 2;
    v25 -= 32;
    v27 -= 4;
  }
  while (v27);
  v12 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
  if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
    goto LABEL_18;
LABEL_19:
  v2 = *(_QWORD **)a1;
  v19 = *(_QWORD **)(a1 + 8);
  *(_QWORD *)a1 = v12;
  *(_QWORD *)(a1 + 8) = v15;
  *(_QWORD *)(a1 + 16) = v14;
  if (v19 != v2)
  {
    v20 = v19;
    do
    {
      v22 = (void *)*--v20;
      v21 = v22;
      if (v22)
        os_release(v21);
      *(v19 - 1) = 0;
      v19 = v20;
    }
    while (v20 != v2);
  }
LABEL_25:
  if (v2)
    operator delete(v2);
  return v15;
}

void nw_array_insert_object_at_index(uint64_t a1, void *a2, char *a3)
{
  char *v4;
  unint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  const char *v11;
  char *v12;
  _BOOL4 v13;
  NSObject *v14;
  os_log_type_t v15;
  uint32_t v16;
  NSObject *v17;
  os_log_type_t v18;
  char *backtrace_string;
  _BOOL4 v20;
  const char *v21;
  _BOOL4 v22;
  char v23;
  os_log_type_t type;
  void *v25;
  uint8_t buf[4];
  const char *v27;
  __int16 v28;
  char *v29;
  __int16 v30;
  char *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v25 = a2;
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v27 = "nw_array_insert_object_at_index";
    v4 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (!__nwlog_fault(v4, &type, &v23))
      goto LABEL_23;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v17 = __nwlog_obj();
      v18 = type;
      if (!os_log_type_enabled(v17, type))
        goto LABEL_23;
      *(_DWORD *)buf = 136446210;
      v27 = "nw_array_insert_object_at_index";
      v11 = "%{public}s called with null array";
      goto LABEL_52;
    }
    if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v17 = __nwlog_obj();
      v18 = type;
      v20 = os_log_type_enabled(v17, type);
      if (backtrace_string)
      {
        if (!v20)
          goto LABEL_42;
        *(_DWORD *)buf = 136446466;
        v27 = "nw_array_insert_object_at_index";
        v28 = 2082;
        v29 = backtrace_string;
        v21 = "%{public}s called with null array, dumping backtrace:%{public}s";
        goto LABEL_41;
      }
      if (!v20)
        goto LABEL_23;
      *(_DWORD *)buf = 136446210;
      v27 = "nw_array_insert_object_at_index";
      v11 = "%{public}s called with null array, no backtrace";
    }
    else
    {
      v17 = __nwlog_obj();
      v18 = type;
      if (!os_log_type_enabled(v17, type))
        goto LABEL_23;
      *(_DWORD *)buf = 136446210;
      v27 = "nw_array_insert_object_at_index";
      v11 = "%{public}s called with null array, backtrace limit exceeded";
    }
LABEL_52:
    v14 = v17;
    v15 = v18;
    v16 = 12;
    goto LABEL_22;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v27 = "nw_array_insert_object_at_index";
    v4 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (!__nwlog_fault(v4, &type, &v23))
      goto LABEL_23;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v17 = __nwlog_obj();
      v18 = type;
      if (!os_log_type_enabled(v17, type))
        goto LABEL_23;
      *(_DWORD *)buf = 136446210;
      v27 = "nw_array_insert_object_at_index";
      v11 = "%{public}s called with null object";
      goto LABEL_52;
    }
    if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v17 = __nwlog_obj();
      v18 = type;
      v22 = os_log_type_enabled(v17, type);
      if (backtrace_string)
      {
        if (!v22)
          goto LABEL_42;
        *(_DWORD *)buf = 136446466;
        v27 = "nw_array_insert_object_at_index";
        v28 = 2082;
        v29 = backtrace_string;
        v21 = "%{public}s called with null object, dumping backtrace:%{public}s";
LABEL_41:
        _os_log_impl(&dword_182FBE000, v17, v18, v21, buf, 0x16u);
LABEL_42:
        free(backtrace_string);
        if (v4)
          goto LABEL_5;
        return;
      }
      if (!v22)
        goto LABEL_23;
      *(_DWORD *)buf = 136446210;
      v27 = "nw_array_insert_object_at_index";
      v11 = "%{public}s called with null object, no backtrace";
    }
    else
    {
      v17 = __nwlog_obj();
      v18 = type;
      if (!os_log_type_enabled(v17, type))
        goto LABEL_23;
      *(_DWORD *)buf = 136446210;
      v27 = "nw_array_insert_object_at_index";
      v11 = "%{public}s called with null object, backtrace limit exceeded";
    }
    goto LABEL_52;
  }
  if (!atomic_load((unsigned __int8 *)(a1 + 40)))
  {
    v7 = *(_QWORD *)(a1 + 16);
    v6 = (unint64_t *)(a1 + 16);
    v8 = v7 + 8 * (_QWORD)a3;
    if (v6[1] >= v8)
    {
      std::vector<nw_object_wrapper_t>::emplace<nw_object *&>(v6, v8, &v25);
      return;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446466;
    v27 = "nw_array_insert_object_at_index";
    v28 = 2048;
    v29 = a3;
    v4 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (!__nwlog_fault(v4, &type, &v23))
      goto LABEL_23;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v9 = gLogObj;
      v10 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_23;
      *(_DWORD *)buf = 136446466;
      v27 = "nw_array_insert_object_at_index";
      v28 = 2048;
      v29 = a3;
      v11 = "%{public}s array index out of range: %lu";
LABEL_21:
      v14 = v9;
      v15 = v10;
      v16 = 22;
LABEL_22:
      _os_log_impl(&dword_182FBE000, v14, v15, v11, buf, v16);
      goto LABEL_23;
    }
    if (!v23)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v9 = gLogObj;
      v10 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_23;
      *(_DWORD *)buf = 136446466;
      v27 = "nw_array_insert_object_at_index";
      v28 = 2048;
      v29 = a3;
      v11 = "%{public}s array index out of range: %lu, backtrace limit exceeded";
      goto LABEL_21;
    }
    v12 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v9 = gLogObj;
    v10 = type;
    v13 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!v12)
    {
      if (!v13)
        goto LABEL_23;
      *(_DWORD *)buf = 136446466;
      v27 = "nw_array_insert_object_at_index";
      v28 = 2048;
      v29 = a3;
      v11 = "%{public}s array index out of range: %lu, no backtrace";
      goto LABEL_21;
    }
    if (v13)
    {
      *(_DWORD *)buf = 136446722;
      v27 = "nw_array_insert_object_at_index";
      v28 = 2048;
      v29 = a3;
      v30 = 2082;
      v31 = v12;
      _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s array index out of range: %lu, dumping backtrace:%{public}s", buf, 0x20u);
    }
    free(v12);
LABEL_23:
    if (v4)
      goto LABEL_5;
    return;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446210;
  v27 = "nw_array_insert_object_at_index";
  v4 = (char *)_os_log_send_and_compose_impl();
  if (!__nwlog_abort((uint64_t)v4))
  {
LABEL_5:
    free(v4);
    return;
  }
  __break(1u);
}

BOOL nw_array_is_empty(uint64_t a1)
{
  char *v2;
  NSObject *v3;
  os_log_type_t v4;
  const char *v5;
  char *backtrace_string;
  _BOOL4 v7;
  char v8;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v11;
  __int16 v12;
  char *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (a1)
    return *(_QWORD *)(a1 + 16) == *(_QWORD *)(a1 + 24);
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v11 = "nw_array_is_empty";
  v2 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v8 = 0;
  if (__nwlog_fault(v2, &type, &v8))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (os_log_type_enabled(v3, type))
      {
        *(_DWORD *)buf = 136446210;
        v11 = "nw_array_is_empty";
        v5 = "%{public}s called with null array";
LABEL_17:
        _os_log_impl(&dword_182FBE000, v3, v4, v5, buf, 0xCu);
      }
    }
    else if (v8)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v3 = __nwlog_obj();
      v4 = type;
      v7 = os_log_type_enabled(v3, type);
      if (backtrace_string)
      {
        if (v7)
        {
          *(_DWORD *)buf = 136446466;
          v11 = "nw_array_is_empty";
          v12 = 2082;
          v13 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v3, v4, "%{public}s called with null array, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_18;
      }
      if (v7)
      {
        *(_DWORD *)buf = 136446210;
        v11 = "nw_array_is_empty";
        v5 = "%{public}s called with null array, no backtrace";
        goto LABEL_17;
      }
    }
    else
    {
      v3 = __nwlog_obj();
      v4 = type;
      if (os_log_type_enabled(v3, type))
      {
        *(_DWORD *)buf = 136446210;
        v11 = "nw_array_is_empty";
        v5 = "%{public}s called with null array, backtrace limit exceeded";
        goto LABEL_17;
      }
    }
  }
LABEL_18:
  if (v2)
    free(v2);
  return 1;
}

void nw_array_set_object_at_index(uint64_t a1, void *object, char *a3)
{
  char *v4;
  void **v6;
  void *v7;
  NSObject *v8;
  os_log_type_t v9;
  const char *v10;
  char *v11;
  _BOOL4 v12;
  NSObject *v13;
  os_log_type_t v14;
  uint32_t v15;
  NSObject *v16;
  os_log_type_t v17;
  char *backtrace_string;
  _BOOL4 v19;
  const char *v20;
  _BOOL4 v21;
  char v22;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v25;
  __int16 v26;
  char *v27;
  __int16 v28;
  char *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v25 = "nw_array_set_object_at_index";
    v4 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (!__nwlog_fault(v4, &type, &v22))
      goto LABEL_25;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v16 = __nwlog_obj();
      v17 = type;
      if (!os_log_type_enabled(v16, type))
        goto LABEL_25;
      *(_DWORD *)buf = 136446210;
      v25 = "nw_array_set_object_at_index";
      v10 = "%{public}s called with null array";
      goto LABEL_54;
    }
    if (v22)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v16 = __nwlog_obj();
      v17 = type;
      v19 = os_log_type_enabled(v16, type);
      if (backtrace_string)
      {
        if (!v19)
          goto LABEL_44;
        *(_DWORD *)buf = 136446466;
        v25 = "nw_array_set_object_at_index";
        v26 = 2082;
        v27 = backtrace_string;
        v20 = "%{public}s called with null array, dumping backtrace:%{public}s";
        goto LABEL_43;
      }
      if (!v19)
        goto LABEL_25;
      *(_DWORD *)buf = 136446210;
      v25 = "nw_array_set_object_at_index";
      v10 = "%{public}s called with null array, no backtrace";
    }
    else
    {
      v16 = __nwlog_obj();
      v17 = type;
      if (!os_log_type_enabled(v16, type))
        goto LABEL_25;
      *(_DWORD *)buf = 136446210;
      v25 = "nw_array_set_object_at_index";
      v10 = "%{public}s called with null array, backtrace limit exceeded";
    }
LABEL_54:
    v13 = v16;
    v14 = v17;
    v15 = 12;
    goto LABEL_24;
  }
  if (!object)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v25 = "nw_array_set_object_at_index";
    v4 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (!__nwlog_fault(v4, &type, &v22))
      goto LABEL_25;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v16 = __nwlog_obj();
      v17 = type;
      if (!os_log_type_enabled(v16, type))
        goto LABEL_25;
      *(_DWORD *)buf = 136446210;
      v25 = "nw_array_set_object_at_index";
      v10 = "%{public}s called with null object";
      goto LABEL_54;
    }
    if (v22)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v16 = __nwlog_obj();
      v17 = type;
      v21 = os_log_type_enabled(v16, type);
      if (backtrace_string)
      {
        if (!v21)
          goto LABEL_44;
        *(_DWORD *)buf = 136446466;
        v25 = "nw_array_set_object_at_index";
        v26 = 2082;
        v27 = backtrace_string;
        v20 = "%{public}s called with null object, dumping backtrace:%{public}s";
LABEL_43:
        _os_log_impl(&dword_182FBE000, v16, v17, v20, buf, 0x16u);
LABEL_44:
        free(backtrace_string);
        if (v4)
          goto LABEL_5;
        return;
      }
      if (!v21)
        goto LABEL_25;
      *(_DWORD *)buf = 136446210;
      v25 = "nw_array_set_object_at_index";
      v10 = "%{public}s called with null object, no backtrace";
    }
    else
    {
      v16 = __nwlog_obj();
      v17 = type;
      if (!os_log_type_enabled(v16, type))
        goto LABEL_25;
      *(_DWORD *)buf = 136446210;
      v25 = "nw_array_set_object_at_index";
      v10 = "%{public}s called with null object, backtrace limit exceeded";
    }
    goto LABEL_54;
  }
  if (!atomic_load((unsigned __int8 *)(a1 + 40)))
  {
    v6 = (void **)(*(_QWORD *)(a1 + 16) + 8 * (_QWORD)a3);
    if ((unint64_t)v6 < *(_QWORD *)(a1 + 24))
    {
      v7 = os_retain(object);
      if (*v6)
        os_release(*v6);
      *v6 = v7;
      return;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446466;
    v25 = "nw_array_set_object_at_index";
    v26 = 2048;
    v27 = a3;
    v4 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (!__nwlog_fault(v4, &type, &v22))
      goto LABEL_25;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v8 = gLogObj;
      v9 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_25;
      *(_DWORD *)buf = 136446466;
      v25 = "nw_array_set_object_at_index";
      v26 = 2048;
      v27 = a3;
      v10 = "%{public}s array index out of range: %lu";
LABEL_23:
      v13 = v8;
      v14 = v9;
      v15 = 22;
LABEL_24:
      _os_log_impl(&dword_182FBE000, v13, v14, v10, buf, v15);
      goto LABEL_25;
    }
    if (!v22)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v8 = gLogObj;
      v9 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_25;
      *(_DWORD *)buf = 136446466;
      v25 = "nw_array_set_object_at_index";
      v26 = 2048;
      v27 = a3;
      v10 = "%{public}s array index out of range: %lu, backtrace limit exceeded";
      goto LABEL_23;
    }
    v11 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v8 = gLogObj;
    v9 = type;
    v12 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!v11)
    {
      if (!v12)
        goto LABEL_25;
      *(_DWORD *)buf = 136446466;
      v25 = "nw_array_set_object_at_index";
      v26 = 2048;
      v27 = a3;
      v10 = "%{public}s array index out of range: %lu, no backtrace";
      goto LABEL_23;
    }
    if (v12)
    {
      *(_DWORD *)buf = 136446722;
      v25 = "nw_array_set_object_at_index";
      v26 = 2048;
      v27 = a3;
      v28 = 2082;
      v29 = v11;
      _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s array index out of range: %lu, dumping backtrace:%{public}s", buf, 0x20u);
    }
    free(v11);
LABEL_25:
    if (v4)
      goto LABEL_5;
    return;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446210;
  v25 = "nw_array_set_object_at_index";
  v4 = (char *)_os_log_send_and_compose_impl();
  if (!__nwlog_abort((uint64_t)v4))
  {
LABEL_5:
    free(v4);
    return;
  }
  __break(1u);
}

void *nw_array_remove_object_at_index(uint64_t a1, char *a2)
{
  unint64_t v4;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  const char *v9;
  char *v10;
  _BOOL4 v11;
  void *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  void *v19;
  NSObject *v20;
  os_log_type_t v21;
  uint32_t v22;
  NSObject *v24;
  os_log_type_t v25;
  char *backtrace_string;
  _BOOL4 v27;
  char v28;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v31;
  __int16 v32;
  char *v33;
  __int16 v34;
  char *v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v31 = "nw_array_remove_object_at_index";
    v6 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v28 = 0;
    if (!__nwlog_fault(v6, &type, &v28))
      goto LABEL_33;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v24 = __nwlog_obj();
      v25 = type;
      if (!os_log_type_enabled(v24, type))
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v31 = "nw_array_remove_object_at_index";
      v9 = "%{public}s called with null array";
    }
    else if (v28)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v24 = __nwlog_obj();
      v25 = type;
      v27 = os_log_type_enabled(v24, type);
      if (backtrace_string)
      {
        if (v27)
        {
          *(_DWORD *)buf = 136446466;
          v31 = "nw_array_remove_object_at_index";
          v32 = 2082;
          v33 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v24, v25, "%{public}s called with null array, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        if (!v6)
          return 0;
        goto LABEL_34;
      }
      if (!v27)
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v31 = "nw_array_remove_object_at_index";
      v9 = "%{public}s called with null array, no backtrace";
    }
    else
    {
      v24 = __nwlog_obj();
      v25 = type;
      if (!os_log_type_enabled(v24, type))
        goto LABEL_33;
      *(_DWORD *)buf = 136446210;
      v31 = "nw_array_remove_object_at_index";
      v9 = "%{public}s called with null array, backtrace limit exceeded";
    }
    v20 = v24;
    v21 = v25;
    v22 = 12;
    goto LABEL_32;
  }
  v4 = *(_QWORD *)(a1 + 16) + 8 * (_QWORD)a2;
  if (v4 >= *(_QWORD *)(a1 + 24))
  {
LABEL_6:
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446466;
    v31 = "nw_array_remove_object_at_index";
    v32 = 2048;
    v33 = a2;
    v6 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v28 = 0;
    if (!__nwlog_fault(v6, &type, &v28))
      goto LABEL_33;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v7 = gLogObj;
      v8 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_33;
      *(_DWORD *)buf = 136446466;
      v31 = "nw_array_remove_object_at_index";
      v32 = 2048;
      v33 = a2;
      v9 = "%{public}s array index out of range: %lu";
LABEL_31:
      v20 = v7;
      v21 = v8;
      v22 = 22;
LABEL_32:
      _os_log_impl(&dword_182FBE000, v20, v21, v9, buf, v22);
      goto LABEL_33;
    }
    if (!v28)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v7 = gLogObj;
      v8 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_33;
      *(_DWORD *)buf = 136446466;
      v31 = "nw_array_remove_object_at_index";
      v32 = 2048;
      v33 = a2;
      v9 = "%{public}s array index out of range: %lu, backtrace limit exceeded";
      goto LABEL_31;
    }
    v10 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v7 = gLogObj;
    v8 = type;
    v11 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!v10)
    {
      if (!v11)
        goto LABEL_33;
      *(_DWORD *)buf = 136446466;
      v31 = "nw_array_remove_object_at_index";
      v32 = 2048;
      v33 = a2;
      v9 = "%{public}s array index out of range: %lu, no backtrace";
      goto LABEL_31;
    }
    if (v11)
    {
      *(_DWORD *)buf = 136446722;
      v31 = "nw_array_remove_object_at_index";
      v32 = 2048;
      v33 = a2;
      v34 = 2082;
      v35 = v10;
      _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s array index out of range: %lu, dumping backtrace:%{public}s", buf, 0x20u);
    }
    free(v10);
LABEL_33:
    if (!v6)
      return 0;
LABEL_34:
    free(v6);
    return 0;
  }
  if (atomic_load((unsigned __int8 *)(a1 + 40)))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    v31 = "nw_array_remove_object_at_index";
    v6 = (char *)_os_log_send_and_compose_impl();
    if (!__nwlog_abort((uint64_t)v6))
      goto LABEL_34;
    __break(1u);
    goto LABEL_6;
  }
  v12 = *(void **)v4;
  *(_QWORD *)v4 = 0;
  v13 = v4 + 8;
  v14 = *(_QWORD *)(a1 + 24);
  if (v4 + 8 != v14)
  {
    do
    {
      if (*(_QWORD *)v4)
        os_release(*(void **)v4);
      v15 = v4 + 8;
      *(_QWORD *)v4 = *(_QWORD *)(v4 + 8);
      *(_QWORD *)(v4 + 8) = 0;
      v16 = v4 + 16;
      v4 += 8;
    }
    while (v16 != v14);
    v13 = *(_QWORD *)(a1 + 24);
    v4 = v15;
    if (v13 == v15)
      goto LABEL_26;
    goto LABEL_22;
  }
  if (v13 != v4)
  {
LABEL_22:
    v17 = v13;
    do
    {
      v19 = *(void **)(v17 - 8);
      v17 -= 8;
      v18 = v19;
      if (v19)
        os_release(v18);
      *(_QWORD *)(v13 - 8) = 0;
      v13 = v17;
    }
    while (v17 != v4);
  }
LABEL_26:
  *(_QWORD *)(a1 + 24) = v4;
  return v12;
}

void nw_array_remove_all_objects(uint64_t a1)
{
  const char *v1;
  unsigned __int8 *v3;
  int v4;
  const char *v5;
  const char *v6;
  void *v7;
  void *v8;
  int v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  const char *v13;
  NSObject *v14;
  NSObject *v15;
  char *backtrace_string;
  _BOOL4 v17;
  int v18;
  char v19;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  char *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    v18 = 136446210;
    *(_DWORD *)buf = 136446210;
    v1 = "nw_array_remove_all_objects";
    v22 = "nw_array_remove_all_objects";
    v10 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v19 = 0;
    if (!__nwlog_fault(v10, &type, &v19))
      goto LABEL_35;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v11 = __nwlog_obj();
      v12 = type;
      if (!os_log_type_enabled(v11, type))
        goto LABEL_35;
      *(_DWORD *)buf = 136446210;
      v22 = "nw_array_remove_all_objects";
      v13 = "%{public}s called with null array";
      goto LABEL_34;
    }
LABEL_24:
    if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v11 = __nwlog_obj();
      v12 = type;
      v17 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          v22 = "nw_array_remove_all_objects";
          v23 = 2082;
          v24 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null array, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        if (!v10)
          return;
LABEL_36:
        free(v10);
        return;
      }
      if (!v17)
      {
LABEL_35:
        if (!v10)
          return;
        goto LABEL_36;
      }
      *(_DWORD *)buf = v18;
      v22 = "nw_array_remove_all_objects";
      v13 = "%{public}s called with null array, no backtrace";
    }
    else
    {
      v11 = __nwlog_obj();
      v12 = type;
      if (!os_log_type_enabled(v11, type))
        goto LABEL_35;
      *(_DWORD *)buf = v18;
      v22 = v1;
      v13 = "%{public}s called with null array, backtrace limit exceeded";
    }
LABEL_34:
    _os_log_impl(&dword_182FBE000, v11, v12, v13, buf, 0xCu);
    goto LABEL_35;
  }
  v3 = (unsigned __int8 *)(a1 + 40);
  do
    v4 = __ldxr(v3);
  while (__stxr(0xFFu, v3));
  if (v4)
  {
    v14 = __nwlog_obj();
    os_log_type_enabled(v14, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    v22 = "nw_array_remove_all_objects";
    v10 = (char *)_os_log_send_and_compose_impl();
    if (!__nwlog_abort((uint64_t)v10))
    {
      free(v10);
      do
        __ldxr(v3);
      while (__stlxr(v4, v3));
      return;
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v5 = *(const char **)(a1 + 16);
  v1 = *(const char **)(a1 + 24);
  if (v1 != v5)
  {
    v6 = *(const char **)(a1 + 24);
    do
    {
      v8 = (void *)*((_QWORD *)v6 - 1);
      v6 -= 8;
      v7 = v8;
      if (v8)
        os_release(v7);
      *((_QWORD *)v1 - 1) = 0;
      v1 = v6;
    }
    while (v6 != v5);
  }
  *(_QWORD *)(a1 + 24) = v5;
  do
    v9 = __ldxr(v3);
  while (__stlxr(0, v3));
  if (v9 != 255)
  {
    v15 = __nwlog_obj();
    os_log_type_enabled(v15, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    v22 = "nw_array_remove_all_objects";
    v10 = (char *)_os_log_send_and_compose_impl();
    if (!__nwlog_abort((uint64_t)v10))
      goto LABEL_36;
    goto LABEL_23;
  }
}

void nw_array_assign(uint64_t a1, uint64_t a2)
{
  const char *v2;
  unsigned __int8 *v3;
  int v4;
  int v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  const char *v9;
  NSObject *v10;
  NSObject *v11;
  char *backtrace_string;
  _BOOL4 v13;
  const char *v14;
  _BOOL4 v15;
  int v16;
  char v17;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v20;
  __int16 v21;
  char *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    v16 = 136446210;
    *(_DWORD *)buf = 136446210;
    v2 = "nw_array_assign";
    v20 = "nw_array_assign";
    v6 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v17 = 0;
    if (!__nwlog_fault(v6, &type, &v17))
      goto LABEL_45;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v7 = __nwlog_obj();
      v8 = type;
      if (!os_log_type_enabled(v7, type))
        goto LABEL_45;
      *(_DWORD *)buf = 136446210;
      v20 = "nw_array_assign";
      v9 = "%{public}s called with null to";
      goto LABEL_44;
    }
LABEL_25:
    if (!v17)
    {
      v7 = __nwlog_obj();
      v8 = type;
      if (!os_log_type_enabled(v7, type))
        goto LABEL_45;
      *(_DWORD *)buf = v16;
      v20 = v2;
      v9 = "%{public}s called with null to, backtrace limit exceeded";
      goto LABEL_44;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v7 = __nwlog_obj();
    v8 = type;
    v13 = os_log_type_enabled(v7, type);
    if (backtrace_string)
    {
      if (!v13)
        goto LABEL_34;
      *(_DWORD *)buf = 136446466;
      v20 = "nw_array_assign";
      v21 = 2082;
      v22 = backtrace_string;
      v14 = "%{public}s called with null to, dumping backtrace:%{public}s";
      goto LABEL_33;
    }
    if (v13)
    {
      *(_DWORD *)buf = v16;
      v20 = "nw_array_assign";
      v9 = "%{public}s called with null to, no backtrace";
LABEL_44:
      _os_log_impl(&dword_182FBE000, v7, v8, v9, buf, 0xCu);
      goto LABEL_45;
    }
    goto LABEL_45;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v20 = "nw_array_assign";
    v6 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v17 = 0;
    if (!__nwlog_fault(v6, &type, &v17))
      goto LABEL_45;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v7 = __nwlog_obj();
      v8 = type;
      if (!os_log_type_enabled(v7, type))
        goto LABEL_45;
      *(_DWORD *)buf = 136446210;
      v20 = "nw_array_assign";
      v9 = "%{public}s called with null from";
      goto LABEL_44;
    }
    if (!v17)
    {
      v7 = __nwlog_obj();
      v8 = type;
      if (!os_log_type_enabled(v7, type))
        goto LABEL_45;
      *(_DWORD *)buf = 136446210;
      v20 = "nw_array_assign";
      v9 = "%{public}s called with null from, backtrace limit exceeded";
      goto LABEL_44;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v7 = __nwlog_obj();
    v8 = type;
    v15 = os_log_type_enabled(v7, type);
    if (backtrace_string)
    {
      if (!v15)
        goto LABEL_34;
      *(_DWORD *)buf = 136446466;
      v20 = "nw_array_assign";
      v21 = 2082;
      v22 = backtrace_string;
      v14 = "%{public}s called with null from, dumping backtrace:%{public}s";
LABEL_33:
      _os_log_impl(&dword_182FBE000, v7, v8, v14, buf, 0x16u);
LABEL_34:
      free(backtrace_string);
      if (!v6)
        return;
LABEL_46:
      free(v6);
      return;
    }
    if (v15)
    {
      *(_DWORD *)buf = 136446210;
      v20 = "nw_array_assign";
      v9 = "%{public}s called with null from, no backtrace";
      goto LABEL_44;
    }
LABEL_45:
    if (!v6)
      return;
    goto LABEL_46;
  }
  v3 = (unsigned __int8 *)(a1 + 40);
  do
    v4 = __ldxr(v3);
  while (__stxr(0xFFu, v3));
  if (v4)
  {
    v10 = __nwlog_obj();
    os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    v20 = "nw_array_assign";
    v6 = (char *)_os_log_send_and_compose_impl();
    if (!__nwlog_abort((uint64_t)v6))
    {
      free(v6);
      do
        __ldxr(v3);
      while (__stlxr(v4, v3));
      return;
    }
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (a1 != a2)
    std::vector<nw_object_wrapper_t>::__assign_with_size[abi:nn180100]<nw_object_wrapper_t*,nw_object_wrapper_t*>(a1 + 16, *(void ***)(a2 + 16), *(void ***)(a2 + 24), (uint64_t)(*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 3);
  do
    v5 = __ldxr(v3);
  while (__stlxr(0, v3));
  if (v5 != 255)
  {
    v11 = __nwlog_obj();
    os_log_type_enabled(v11, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    v20 = "nw_array_assign";
    v6 = (char *)_os_log_send_and_compose_impl();
    if (!__nwlog_abort((uint64_t)v6))
      goto LABEL_46;
    goto LABEL_24;
  }
}

void std::vector<nw_object_wrapper_t>::__assign_with_size[abi:nn180100]<nw_object_wrapper_t*,nw_object_wrapper_t*>(uint64_t a1, void **a2, void **a3, unint64_t a4)
{
  void **v6;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  void *v13;
  void *v14;
  _QWORD *v15;
  unint64_t v16;
  void **v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  BOOL v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  void *v26;
  _QWORD *v27;
  void *v28;
  _QWORD *v29;
  void *v30;
  void *v31;

  v6 = a2;
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD **)a1;
  if (a4 > (v8 - *(_QWORD *)a1) >> 3)
  {
    if (v9)
    {
      v10 = *(_QWORD **)(a1 + 8);
      v11 = *(_QWORD **)a1;
      if (v10 != v9)
      {
        v12 = *(_QWORD **)(a1 + 8);
        do
        {
          v14 = (void *)*--v12;
          v13 = v14;
          if (v14)
            os_release(v13);
          *(v10 - 1) = 0;
          v10 = v12;
        }
        while (v12 != v9);
        v11 = *(_QWORD **)a1;
      }
      *(_QWORD *)(a1 + 8) = v9;
      operator delete(v11);
      v8 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (a4 >> 61)
      goto LABEL_47;
    v21 = v8 >> 2;
    if (v8 >> 2 <= a4)
      v21 = a4;
    v22 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8;
    v23 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v22)
      v23 = v21;
    if (v23 >> 61)
LABEL_47:
      abort();
    v24 = v23;
    v25 = operator new(8 * v23);
    *(_QWORD *)a1 = v25;
    *(_QWORD *)(a1 + 8) = v25;
    *(_QWORD *)(a1 + 16) = &v25[v24];
    while (v6 != a3)
    {
      v26 = *v6;
      if (*v6)
        v26 = os_retain(v26);
      *v25++ = v26;
      ++v6;
    }
    *(_QWORD *)(a1 + 8) = v25;
    return;
  }
  v15 = *(_QWORD **)(a1 + 8);
  v16 = v15 - v9;
  if (v16 >= a4)
  {
    if (a2 == a3)
    {
      if (v15 == v9)
      {
LABEL_46:
        *(_QWORD *)(a1 + 8) = v9;
        return;
      }
    }
    else
    {
      do
      {
        v20 = *v6;
        if (*v6)
          v20 = os_retain(v20);
        *v9++ = v20;
        ++v6;
      }
      while (v6 != a3);
      v15 = *(_QWORD **)(a1 + 8);
      if (v15 == v9)
        goto LABEL_46;
    }
    v29 = v15;
    do
    {
      v31 = (void *)*--v29;
      v30 = v31;
      if (v31)
        os_release(v30);
      *(v15 - 1) = 0;
      v15 = v29;
    }
    while (v29 != v9);
    goto LABEL_46;
  }
  v17 = &a2[v16];
  if (v15 != v9)
  {
    v18 = 8 * v16;
    do
    {
      v19 = *v6;
      if (*v6)
        v19 = os_retain(v19);
      *v9++ = v19;
      ++v6;
      v18 -= 8;
    }
    while (v18);
    v9 = *(_QWORD **)(a1 + 8);
  }
  v27 = v9;
  if (v17 != a3)
  {
    v27 = v9;
    do
    {
      v28 = *v17;
      if (*v17)
        v28 = os_retain(v28);
      *v27++ = v28;
      ++v17;
    }
    while (v17 != a3);
  }
  *(_QWORD *)(a1 + 8) = v27;
}

uint64_t nw_array_is_equal(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  int v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;

  if (a1)
    v3 = a2 == 0;
  else
    v3 = 1;
  v4 = v3;
  if (a1 == a2)
    result = 1;
  else
    result = v4 ^ 1u;
  if ((v4 & 1) == 0 && a1 != a2)
  {
    v7 = *(_QWORD *)(a1 + 16);
    v6 = *(_QWORD *)(a1 + 24);
    v8 = *(uint64_t **)(a2 + 16);
    if (v6 - v7 == *(_QWORD *)(a2 + 24) - (_QWORD)v8)
    {
      if (v7 == v6)
      {
        return 1;
      }
      else
      {
        v9 = v7 + 8;
        do
        {
          v10 = *v8++;
          result = *(_QWORD *)(v9 - 8) == v10;
          v11 = *(_QWORD *)(v9 - 8) != v10 || v9 == v6;
          v9 += 8;
        }
        while (!v11);
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void *nw_array_create_combined_array(void *a1, void *object)
{
  void *v3;
  uint64_t v4;

  v3 = a1;
  if (a1 && object)
  {
    v4 = nw_array_create();
    std::vector<nw_object_wrapper_t>::reserve(v4 + 16, ((uint64_t)(*((_QWORD *)object + 3) - *((_QWORD *)object + 2)) >> 3)+ ((uint64_t)(*((_QWORD *)v3 + 3) - *((_QWORD *)v3 + 2)) >> 3));
    std::vector<nw_object_wrapper_t>::__insert_with_size[abi:nn180100]<std::__wrap_iter<nw_object_wrapper_t*>,std::__wrap_iter<nw_object_wrapper_t*>>((int64_t *)(v4 + 16), *(_QWORD *)(v4 + 16), *((void ***)v3 + 2), *((void ***)v3 + 3), (uint64_t)(*((_QWORD *)v3 + 3) - *((_QWORD *)v3 + 2)) >> 3);
    std::vector<nw_object_wrapper_t>::__insert_with_size[abi:nn180100]<std::__wrap_iter<nw_object_wrapper_t*>,std::__wrap_iter<nw_object_wrapper_t*>>((int64_t *)(v4 + 16), *(_QWORD *)(v4 + 24), *((void ***)object + 2), *((void ***)object + 3), (uint64_t)(*((_QWORD *)object + 3) - *((_QWORD *)object + 2)) >> 3);
    return (void *)v4;
  }
  if (a1)
    return os_retain(a1);
  if (object)
  {
    a1 = object;
    return os_retain(a1);
  }
  return (void *)nw_array_create();
}

void std::vector<nw_object_wrapper_t>::__insert_with_size[abi:nn180100]<std::__wrap_iter<nw_object_wrapper_t*>,std::__wrap_iter<nw_object_wrapper_t*>>(int64_t *a1, uint64_t a2, void **a3, void **a4, uint64_t a5)
{
  void **v6;
  int64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void **v19;
  void **v20;
  char *v21;
  void *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  void *v29;
  char *v30;
  int64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  BOOL v39;
  uint64_t v40;
  _OWORD *v41;
  char *v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  char *v46;
  unint64_t v47;
  char *v48;
  unint64_t v49;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  __int128 v55;
  char *v56;
  uint64_t v57;
  char *v58;
  char *v59;
  unint64_t v60;
  char *v61;
  unint64_t v62;
  unint64_t v63;
  BOOL v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  _OWORD *v68;
  uint64_t v69;
  __int128 v70;
  void **v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  char *v75;
  char *v76;
  void *v77;
  void *v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int64_t v83;
  _OWORD *v84;

  if (a5 < 1)
    return;
  v6 = a3;
  v8 = *a1;
  v9 = a1[1];
  v10 = a2 - *a1;
  v11 = v10 >> 3;
  v12 = (char *)(*a1 + (v10 & 0xFFFFFFFFFFFFFFF8));
  v13 = a1[2];
  if (a5 > (uint64_t)(v13 - v9) >> 3)
  {
    v14 = a5 + ((uint64_t)(v9 - v8) >> 3);
    if (v14 >> 61)
      abort();
    v15 = v13 - v8;
    if (v15 >> 2 > v14)
      v14 = v15 >> 2;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    v81 = a2 - *a1;
    v83 = *a1;
    v79 = v14;
    if (v14)
    {
      if (v14 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v16 = (char *)operator new(8 * v14);
    }
    else
    {
      v16 = 0;
    }
    v23 = v11;
    v24 = v16;
    v25 = &v16[8 * v11];
    v26 = 8 * a5;
    v27 = &v25[8 * a5];
    v28 = v25;
    do
    {
      v29 = *v6;
      if (*v6)
        v29 = os_retain(v29);
      *(_QWORD *)v28 = v29;
      v28 += 8;
      ++v6;
      v26 -= 8;
    }
    while (v26);
    v30 = (char *)*a1;
    if ((char *)*a1 == v12)
    {
      v32 = v81;
      v31 = v83;
      v35 = v79;
      goto LABEL_37;
    }
    v32 = v81;
    v31 = v83;
    v33 = (v81 & 0xFFFFFFFFFFFFFFF8) + v83 - (_QWORD)v30 - 8;
    if (v33 >= 0x78)
    {
      v36 = (v81 & 0xFFFFFFFFFFFFFFF8) - (v33 & 0xFFFFFFFFFFFFFFF8) - 8;
      v37 = (unint64_t)&v24[v36];
      v38 = v83 + v36;
      v39 = v37 >= (unint64_t)v12 || v38 >= (unint64_t)v25;
      v34 = v12;
      v35 = v79;
      if (v39)
      {
        v40 = (v33 >> 3) + 1;
        v34 = &v12[-8 * (v40 & 0x3FFFFFFFFFFFFFFCLL)];
        v41 = (_OWORD *)(8 * v23 + v83 - 32);
        v42 = &v24[8 * v23 - 16];
        v43 = v40 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v44 = v41[1];
          *((_OWORD *)v42 - 1) = *v41;
          *(_OWORD *)v42 = v44;
          *v41 = 0uLL;
          v41[1] = 0uLL;
          v41 -= 2;
          v42 -= 32;
          v43 -= 4;
        }
        while (v43);
        v25 -= 8 * (v40 & 0x3FFFFFFFFFFFFFFCLL);
        if (v40 == (v40 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_37:
          v46 = (char *)a1[1];
          if (v46 == v12)
          {
LABEL_78:
            v75 = (char *)*a1;
            *a1 = (int64_t)v25;
            a1[1] = (int64_t)v27;
            a1[2] = (int64_t)&v24[8 * v35];
            if (v12 != v75)
            {
              v76 = v12;
              do
              {
                v78 = (void *)*((_QWORD *)v76 - 1);
                v76 -= 8;
                v77 = v78;
                if (v78)
                  os_release(v77);
                *((_QWORD *)v12 - 1) = 0;
                v12 = v76;
              }
              while (v76 != v75);
            }
            if (v75)
              operator delete(v75);
            return;
          }
          v47 = (unint64_t)&v46[-(v32 & 0xFFFFFFFFFFFFFFF8) - v31 - 8];
          if (v47 >= 0xA8)
          {
            v49 = (v32 & 0xFFFFFFFFFFFFFFF8) + (v47 & 0xFFFFFFFFFFFFFFF8);
            if ((unint64_t)v27 >= v49 + v31 + 8 || v12 >= &v24[8 * a5 + 8 + v49])
            {
              v51 = (v47 >> 3) + 1;
              v52 = 8 * (v51 & 0x3FFFFFFFFFFFFFFCLL);
              v48 = &v12[v52];
              v53 = &v24[8 * v23 + 16 + 8 * a5];
              v54 = v51 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v55 = *((_OWORD *)v12 + 1);
                *((_OWORD *)v53 - 1) = *(_OWORD *)v12;
                *(_OWORD *)v53 = v55;
                *(_OWORD *)v12 = 0uLL;
                *((_OWORD *)v12 + 1) = 0uLL;
                v12 += 32;
                v53 += 32;
                v54 -= 4;
              }
              while (v54);
              v27 += v52;
              if (v51 == (v51 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_77;
            }
            else
            {
              v48 = v12;
            }
          }
          else
          {
            v48 = v12;
          }
          do
          {
            *(_QWORD *)v27 = *(_QWORD *)v48;
            v27 += 8;
            *(_QWORD *)v48 = 0;
            v48 += 8;
          }
          while (v48 != v46);
LABEL_77:
          v12 = (char *)a1[1];
          goto LABEL_78;
        }
      }
    }
    else
    {
      v34 = v12;
      v35 = v79;
    }
    do
    {
      v45 = *((_QWORD *)v34 - 1);
      v34 -= 8;
      *((_QWORD *)v25 - 1) = v45;
      v25 -= 8;
      *(_QWORD *)v34 = 0;
    }
    while (v34 != v30);
    goto LABEL_37;
  }
  v80 = v10 >> 3;
  v17 = (uint64_t)(v9 - (_QWORD)v12) >> 3;
  if (v17 >= a5)
  {
    v19 = &a3[a5];
    v21 = (char *)a1[1];
    goto LABEL_51;
  }
  v19 = &a3[v17];
  if (v19 == a4)
  {
    v21 = (char *)a1[1];
  }
  else
  {
    v82 = a2 - *a1;
    v84 = (_OWORD *)*a1;
    v20 = &a3[v17];
    v21 = (char *)a1[1];
    do
    {
      v22 = *v20;
      if (*v20)
        v22 = os_retain(v22);
      *(_QWORD *)v21 = v22;
      v21 += 8;
      ++v20;
    }
    while (v20 != a4);
    v10 = v82;
    v8 = (int64_t)v84;
  }
  a1[1] = (int64_t)v21;
  if ((uint64_t)(v9 - (_QWORD)v12) >= 1)
  {
LABEL_51:
    v56 = &v12[8 * a5];
    v57 = v21 - v56;
    v58 = &v21[-8 * a5];
    v59 = v21;
    if ((unint64_t)v58 < v9)
    {
      v60 = (v10 & 0xFFFFFFFFFFFFFFF8) + v57;
      v61 = (char *)(v60 + v8);
      v62 = v60 + v8 + 8;
      if (v9 > v62)
        v62 = v9;
      v63 = v62 + ~v8 - v60;
      if (v63 > 0xE7
        && (v21 < &v61[(v63 & 0xFFFFFFFFFFFFFFF8) + 8]
          ? (v64 = v58 >= &v21[(v63 & 0xFFFFFFFFFFFFFFF8) + 8])
          : (v64 = 1),
            v64))
      {
        v65 = (v63 >> 3) + 1;
        v66 = 8 * (v65 & 0x3FFFFFFFFFFFFFFCLL);
        v67 = &v58[v66];
        v68 = v21 + 16;
        v69 = v65 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v70 = *((_OWORD *)v58 + 1);
          *(v68 - 1) = *(_OWORD *)v58;
          *v68 = v70;
          *(_OWORD *)v58 = 0uLL;
          *((_OWORD *)v58 + 1) = 0uLL;
          v58 += 32;
          v68 += 2;
          v69 -= 4;
        }
        while (v69);
        v59 = &v21[v66];
        if (v65 == (v65 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_66;
      }
      else
      {
        v67 = &v21[-8 * a5];
        v59 = v21;
      }
      do
      {
        *(_QWORD *)v59 = *(_QWORD *)v67;
        v59 += 8;
        *(_QWORD *)v67 = 0;
        v67 += 8;
      }
      while ((unint64_t)v67 < v9);
    }
LABEL_66:
    a1[1] = (int64_t)v59;
    if (v21 != v56)
    {
      v71 = (void **)(v21 - 8);
      v72 = 8 * (v57 >> 3);
      v73 = v8 + 8 * v80 - 8;
      do
      {
        if (*v71)
          os_release(*v71);
        *v71-- = *(void **)(v73 + v72);
        *(_QWORD *)(v73 + v72) = 0;
        v72 -= 8;
      }
      while (v72);
    }
    for (; v6 != v19; ++v6)
    {
      v74 = *v6;
      if (*v6)
        v74 = os_retain(v74);
      *(_QWORD *)v12 = v74;
      v12 += 8;
    }
  }
}

BOOL nw_array_compare(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  BOOL v7;
  unint64_t i;
  uint64_t object_at_index;
  uint64_t v10;

  if (a1)
  {
    v6 = (uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3;
    if (a2)
      goto LABEL_3;
  }
  else
  {
    v6 = 0;
    if (a2)
    {
LABEL_3:
      if (v6 == (uint64_t)(*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 3)
        goto LABEL_4;
      return 0;
    }
  }
  if (v6)
    return 0;
LABEL_4:
  if (v6)
  {
    v7 = 0;
    for (i = 0; i != v6; v7 = i >= v6)
    {
      object_at_index = nw_array_get_object_at_index(a1, i);
      v10 = nw_array_get_object_at_index(a2, i);
      if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 16))(a3, object_at_index, v10) & 1) == 0)
        break;
      ++i;
    }
  }
  else
  {
    return 1;
  }
  return v7;
}

void nw_array_review_change(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t v7;
  char *v8;
  char *v9;
  void **v10;
  void **v11;
  uint64_t v12;
  void *object_at_index;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void **v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void **v23;
  void **v24;
  __int128 v25;
  int64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  void **v31;
  void *v32;
  void *v33;
  char *v34;
  unint64_t v35;
  char *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  char *v46;
  char *v47;
  void *v48;
  void *v49;
  void **v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void **v60;
  uint64_t v61;
  int v62;
  BOOL v64;
  void **v65;
  void *v66;
  void *v67;
  char *v68;
  void *v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  void *object;
  char *objecta;
  uint64_t v75;
  void **v76;
  char *v77;
  unint64_t v78;
  void **v79;
  void **v80;
  uint64_t v81;

  v6 = a1;
  if (a1)
    v75 = (uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3;
  else
    v75 = 0;
  v79 = 0;
  v80 = 0;
  v81 = 0;
  if (a2)
    std::vector<nw_object_wrapper_t>::__assign_with_size[abi:nn180100]<nw_object_wrapper_t*,nw_object_wrapper_t*>((uint64_t)&v79, *(void ***)(a2 + 16), *(void ***)(a2 + 24), (uint64_t)(*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 3);
  v72 = a4;
  if (v75)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = v80;
    v76 = v79;
    v77 = 0;
    v11 = v80;
    v12 = v6;
    v71 = v6;
    while (1)
    {
      object_at_index = (void *)nw_array_get_object_at_index(v6, v7);
      v15 = (char *)v11 - (char *)v76;
      v14 = v11 == v76;
      v11 = v76;
      if (v14)
        goto LABEL_19;
      object = object_at_index;
      v16 = 0;
      v17 = v15 >> 3;
      if (v17 <= 1)
        v18 = 1;
      else
        v18 = v17;
      v19 = v79;
      v10 = v80;
      v20 = v80 - v79;
      do
      {
        v21 = nw_array_get_object_at_index(v12, v7);
        if (v20 == v16)
          goto LABEL_104;
        if ((*(unsigned int (**)(uint64_t, uint64_t, void *))(a3 + 16))(a3, v21, v19[v16]))
        {
          v11 = &v76[v16];
          v6 = v12;
          if (v11 + 1 == v10)
          {
            if (v10 == v11)
            {
LABEL_42:
              v80 = v11;
              v10 = v11;
              goto LABEL_9;
            }
          }
          else
          {
            do
            {
              if (*v11)
                os_release(*v11);
              v23 = v11 + 1;
              *v11 = v11[1];
              v11[1] = 0;
              v24 = v11 + 2;
              ++v11;
            }
            while (v24 != v10);
            v11 = v23;
            if (v10 == v23)
              goto LABEL_42;
          }
          v31 = v10;
          do
          {
            v33 = *--v31;
            v32 = v33;
            if (v33)
              os_release(v32);
            *(v10 - 1) = 0;
            v10 = v31;
          }
          while (v31 != v11);
          goto LABEL_42;
        }
        ++v16;
      }
      while (v18 != v16);
      v11 = v10;
      v6 = v12;
      object_at_index = object;
LABEL_19:
      if (object_at_index)
        v22 = os_retain(object_at_index);
      else
        v22 = 0;
      v25 = 0uLL;
      if (v9 < v77)
      {
        *(_QWORD *)v9 = v22;
        v9 += 8;
        goto LABEL_9;
      }
      v26 = v9 - v8;
      v27 = (v9 - v8) >> 3;
      v28 = v27 + 1;
      if ((unint64_t)(v27 + 1) >> 61)
        goto LABEL_104;
      if ((v77 - v8) >> 2 > v28)
        v28 = (v77 - v8) >> 2;
      v29 = 0x1FFFFFFFFFFFFFFFLL;
      if ((unint64_t)(v77 - v8) < 0x7FFFFFFFFFFFFFF8)
        v29 = v28;
      v78 = v29;
      if (v29)
      {
        if (v29 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v30 = (char *)operator new(8 * v29);
        v25 = 0uLL;
      }
      else
      {
        v30 = 0;
      }
      v34 = &v30[8 * v27];
      *(_QWORD *)v34 = v22;
      objecta = v34 + 8;
      if (v9 == v8)
      {
        v6 = v71;
        v37 = v78;
      }
      else
      {
        v35 = v9 - v8 - 8;
        if (v35 < 0x138)
        {
          v36 = v9;
          goto LABEL_58;
        }
        v38 = v35 & 0xFFFFFFFFFFFFFFF8;
        if (&v30[v26 - 8 - (v35 & 0xFFFFFFFFFFFFFFF8)] > &v30[v26 - 8])
        {
          v36 = v9;
          goto LABEL_58;
        }
        if (&v9[-v38 - 8] > v9 - 8)
        {
          v36 = v9;
          goto LABEL_58;
        }
        v39 = v35 >> 3;
        if (&v30[v26 - v38 - 8] < v9)
        {
          v36 = v9;
          if (&v9[-8 * v39 - 8] < v34)
            goto LABEL_108;
        }
        v40 = v39 + 1;
        v36 = &v9[-8 * (v40 & 0x3FFFFFFFFFFFFFFCLL)];
        v41 = &v30[8 * ((v9 - v8) >> 3) - 16];
        v42 = v9 - 32;
        v43 = v40 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v44 = *((_OWORD *)v42 + 1);
          *((_OWORD *)v41 - 1) = *(_OWORD *)v42;
          *(_OWORD *)v41 = v44;
          *(_OWORD *)v42 = v25;
          *((_OWORD *)v42 + 1) = v25;
          v42 -= 32;
          v41 -= 32;
          v43 -= 4;
        }
        while (v43);
        v34 -= 8 * (v40 & 0x3FFFFFFFFFFFFFFCLL);
        if (v40 != (v40 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_108:
          do
          {
LABEL_58:
            v45 = *((_QWORD *)v36 - 1);
            v36 -= 8;
            *((_QWORD *)v34 - 1) = v45;
            v34 -= 8;
            *(_QWORD *)v36 = 0;
          }
          while (v36 != v8);
        }
        v46 = v30;
        v47 = v9;
        do
        {
          v49 = (void *)*((_QWORD *)v47 - 1);
          v47 -= 8;
          v48 = v49;
          if (v49)
            os_release(v48);
          *((_QWORD *)v9 - 1) = 0;
          v9 = v47;
        }
        while (v47 != v8);
        v6 = v12;
        v37 = v78;
        v30 = v46;
      }
      v77 = &v30[8 * v37];
      if (v8)
        operator delete(v8);
      v9 = objecta;
      v8 = v34;
LABEL_9:
      if (++v7 == v75)
        goto LABEL_68;
    }
  }
  v9 = 0;
  v8 = 0;
  v10 = v80;
LABEL_68:
  v50 = v79;
  v51 = v10 - v79;
  v52 = (v9 - v8) >> 3;
  if (v9 == v8)
  {
    v53 = 0;
    if (v10 != v79)
    {
LABEL_76:
      if (v51 <= 1)
        v57 = 1;
      else
        v57 = v51;
      v58 = v57 - 1;
      v59 = v53 - v52 + 1;
      v60 = v50;
      while (v51)
      {
        v61 = (uint64_t)*v60++;
        v62 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, BOOL))(v72 + 16))(v72, v61, 1, v59 == v51);
        v64 = v58-- != 0;
        if (v62)
        {
          --v51;
          if (v64)
            continue;
        }
        goto LABEL_89;
      }
LABEL_104:
      abort();
    }
  }
  else
  {
    if (v52 <= 1)
      v53 = 1;
    else
      v53 = (v9 - v8) >> 3;
    v54 = v51 + v52 - 1;
    v55 = v8;
    v56 = v53;
    do
    {
      if (((*(uint64_t (**)(uint64_t, _QWORD, uint64_t, BOOL))(v72 + 16))(v72, *(_QWORD *)v55, 2, v54 == 0) & 1) == 0)
        goto LABEL_88;
      --v54;
      v55 += 8;
      --v56;
    }
    while (v56);
    if (v10 != v50)
      goto LABEL_76;
  }
LABEL_88:
  if (v50)
  {
LABEL_89:
    if (v10 != v50)
    {
      v65 = v10;
      do
      {
        v67 = *--v65;
        v66 = v67;
        if (v67)
          os_release(v66);
        *(v10 - 1) = 0;
        v10 = v65;
      }
      while (v65 != v50);
      v10 = v79;
    }
    operator delete(v10);
  }
  if (v8)
  {
    if (v9 != v8)
    {
      v68 = v9;
      do
      {
        v70 = (void *)*((_QWORD *)v68 - 1);
        v68 -= 8;
        v69 = v70;
        if (v70)
          os_release(v69);
        *((_QWORD *)v9 - 1) = 0;
        v9 = v68;
      }
      while (v68 != v8);
    }
    operator delete(v8);
  }
}

uint64_t in_adjust_cksum(uint64_t a1, int a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6)
{
  unsigned int v6;
  unsigned __int8 *v7;
  unint64_t v8;
  uint32x2_t *v9;
  uint64_t v10;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v27;
  unsigned int v28;
  uint32x4_t v29;
  uint32x4_t v30;
  uint32x4_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int32 v34;
  unsigned int v35;
  unsigned __int8 *v36;
  unint64_t v37;
  uint32x2_t *v38;
  uint64_t v39;
  unsigned __int8 *v40;
  unint64_t v41;
  unsigned int v42;
  uint32x2_t *v43;
  unsigned int v44;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v52;
  unint64_t v53;
  unsigned int v54;
  unsigned int v55;
  uint32x4_t v56;
  uint32x4_t v57;
  uint32x4_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned __int32 v61;
  unsigned int v62;
  uint64_t v63;
  unsigned int v64;
  unint64_t v68;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint32x4_t v75;
  uint32x4_t v76;
  uint32x4_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned __int32 v80;
  unsigned int v81;

  v6 = a4 - a3;
  if ((int)(a4 - a3) >= 1)
  {
    v7 = (unsigned __int8 *)(a1 + a3);
    if ((v7 & 1) != 0)
    {
      v9 = (uint32x2_t *)(v7 + 1);
      v8 = (unint64_t)*v7 << 8;
      --v6;
      if ((((_DWORD)v7 + 1) & 2) == 0)
      {
LABEL_4:
        if (v6 >= 0x40)
          goto LABEL_5;
        goto LABEL_34;
      }
    }
    else
    {
      v8 = 0;
      v9 = (uint32x2_t *)(a1 + a3);
      if ((v7 & 2) == 0)
        goto LABEL_4;
    }
    v27 = v6 - 2;
    if (v6 < 2)
    {
      v10 = 0;
      if ((v6 & 1) == 0)
        goto LABEL_18;
      goto LABEL_17;
    }
    v28 = v9->u16[0];
    v9 = (uint32x2_t *)((char *)v9 + 2);
    v8 += v28;
    v6 -= 2;
    if (v27 >= 0x40)
    {
LABEL_5:
      v10 = 0;
      _X13 = v9;
      do
      {
        __asm { PRFM            #0, [X13,#0x20] }
        v9 = _X13 + 8;
        __asm { PRFM            #0, [X13,#0x40] }
        v8 += vaddvq_s64(vaddq_s64(vaddq_s64((int64x2_t)vaddl_u32(*_X13, _X13[4]), (int64x2_t)vaddl_u32(_X13[2], _X13[6])), vaddq_s64((int64x2_t)vaddl_high_u32(*(uint32x4_t *)_X13->i8, *(uint32x4_t *)_X13[4].i8), (int64x2_t)vaddl_high_u32(*(uint32x4_t *)_X13[2].i8, *(uint32x4_t *)_X13[6].i8))));
        v6 -= 64;
        v17 = __ROR8__(v8, 56);
        if ((v7 & 1) == 0)
          v17 = v8;
        v18 = v10 + HIDWORD(v17) + v17;
        if (v8 >> 62)
        {
          v8 = 0;
          v10 = v18;
        }
        _X13 += 8;
      }
      while (v6 > 0x3F);
      if (v6 < 0x20)
      {
LABEL_12:
        if ((v6 & 0x10) == 0)
          goto LABEL_13;
        goto LABEL_36;
      }
LABEL_35:
      v29 = *(uint32x4_t *)v9->i8;
      v30 = *(uint32x4_t *)v9[2].i8;
      v9 += 4;
      v8 += vaddvq_s64(vaddq_s64((int64x2_t)vaddl_u32(*(uint32x2_t *)v29.i8, *(uint32x2_t *)v30.i8), (int64x2_t)vaddl_high_u32(v29, v30)));
      if ((v6 & 0x10) == 0)
      {
LABEL_13:
        if ((v6 & 8) == 0)
          goto LABEL_14;
        goto LABEL_37;
      }
LABEL_36:
      v31 = *(uint32x4_t *)v9->i8;
      v9 += 2;
      v8 += vaddlvq_u32(v31);
      if ((v6 & 8) == 0)
      {
LABEL_14:
        if ((v6 & 4) == 0)
          goto LABEL_15;
        goto LABEL_38;
      }
LABEL_37:
      v32 = v9->u32[0];
      v33 = v9->u32[1];
      ++v9;
      v8 += v32 + v33;
      if ((v6 & 4) == 0)
      {
LABEL_15:
        if ((v6 & 2) == 0)
          goto LABEL_16;
        goto LABEL_39;
      }
LABEL_38:
      v34 = v9->i32[0];
      v9 = (uint32x2_t *)((char *)v9 + 4);
      v8 += v34;
      if ((v6 & 2) == 0)
      {
LABEL_16:
        if ((v6 & 1) == 0)
        {
LABEL_18:
          v19 = __ROR8__(v8, 56);
          if ((v7 & 1) != 0)
            v20 = v19;
          else
            v20 = v8;
          v21 = ((unint64_t)(v10 + v20 + HIDWORD(v20)) >> 32)
              + (v10 + v20 + HIDWORD(v20));
          v22 = (unsigned __int16)(((HIDWORD(v21) + (unsigned __int16)v21 + WORD1(v21)) >> 16)
                                 + WORD2(v21)
                                 + v21
                                 + WORD1(v21)
                                 + ((((HIDWORD(v21) + (unsigned __int16)v21 + WORD1(v21)) >> 16)
                                   + (unsigned __int16)(WORD2(v21) + v21 + WORD1(v21))) >> 16));
          goto LABEL_22;
        }
LABEL_17:
        v8 += v9->u8[0];
        goto LABEL_18;
      }
LABEL_39:
      v35 = v9->u16[0];
      v9 = (uint32x2_t *)((char *)v9 + 2);
      v8 += v35;
      if ((v6 & 1) == 0)
        goto LABEL_18;
      goto LABEL_17;
    }
LABEL_34:
    v10 = 0;
    if (v6 < 0x20)
      goto LABEL_12;
    goto LABEL_35;
  }
  if ((v6 & 0x80000000) == 0)
  {
    v22 = 0;
    goto LABEL_22;
  }
  v40 = (unsigned __int8 *)(a1 + a4);
  if ((v40 & 1) != 0)
  {
    v43 = (uint32x2_t *)(v40 + 1);
    v41 = (unint64_t)*v40 << 8;
    v42 = ~v6;
  }
  else
  {
    v41 = 0;
    v42 = a3 - a4;
    v43 = (uint32x2_t *)(a1 + a4);
  }
  if ((v43 & 2) != 0)
  {
    if (v42 < 2)
    {
      v63 = 0;
      if ((v42 & 1) == 0)
        goto LABEL_105;
      goto LABEL_104;
    }
    v64 = v43->u16[0];
    v43 = (uint32x2_t *)((char *)v43 + 2);
    v41 += v64;
    v42 -= 2;
  }
  if (v42 < 0x40)
  {
    v63 = 0;
  }
  else
  {
    v63 = 0;
    _X13 = v43;
    if ((v40 & 1) != 0)
    {
      do
      {
        __asm { PRFM            #0, [X13,#0x20] }
        v43 = _X13 + 8;
        __asm { PRFM            #0, [X13,#0x40] }
        v41 += vaddvq_s64(vaddq_s64(vaddq_s64((int64x2_t)vaddl_u32(*_X13, _X13[4]), (int64x2_t)vaddl_u32(_X13[2], _X13[6])), vaddq_s64((int64x2_t)vaddl_high_u32(*(uint32x4_t *)_X13->i8, *(uint32x4_t *)_X13[4].i8), (int64x2_t)vaddl_high_u32(*(uint32x4_t *)_X13[2].i8, *(uint32x4_t *)_X13[6].i8))));
        v42 -= 64;
        v71 = __ROR8__(v41, 56);
        v72 = v63 + HIDWORD(v71) + v71;
        if (v41 >> 62)
        {
          v41 = 0;
          v63 = v72;
        }
        _X13 += 8;
      }
      while (v42 > 0x3F);
    }
    else
    {
      do
      {
        __asm { PRFM            #0, [X13,#0x20] }
        v43 = _X13 + 8;
        __asm { PRFM            #0, [X13,#0x40] }
        v41 += vaddvq_s64(vaddq_s64(vaddq_s64((int64x2_t)vaddl_u32(*_X13, _X13[4]), (int64x2_t)vaddl_u32(_X13[2], _X13[6])), vaddq_s64((int64x2_t)vaddl_high_u32(*(uint32x4_t *)_X13->i8, *(uint32x4_t *)_X13[4].i8), (int64x2_t)vaddl_high_u32(*(uint32x4_t *)_X13[2].i8, *(uint32x4_t *)_X13[6].i8))));
        v42 -= 64;
        v68 = v63 + HIDWORD(v41) + v41;
        if (v41 >> 62)
        {
          v41 = 0;
          v63 = v68;
        }
        _X13 += 8;
      }
      while (v42 > 0x3F);
    }
  }
  if (v42 >= 0x20)
  {
    v75 = *(uint32x4_t *)v43->i8;
    v76 = *(uint32x4_t *)v43[2].i8;
    v43 += 4;
    v41 += vaddvq_s64(vaddq_s64((int64x2_t)vaddl_u32(*(uint32x2_t *)v75.i8, *(uint32x2_t *)v76.i8), (int64x2_t)vaddl_high_u32(v75, v76)));
    if ((v42 & 0x10) == 0)
    {
LABEL_100:
      if ((v42 & 8) == 0)
        goto LABEL_101;
      goto LABEL_110;
    }
  }
  else if ((v42 & 0x10) == 0)
  {
    goto LABEL_100;
  }
  v77 = *(uint32x4_t *)v43->i8;
  v43 += 2;
  v41 += vaddlvq_u32(v77);
  if ((v42 & 8) == 0)
  {
LABEL_101:
    if ((v42 & 4) == 0)
      goto LABEL_102;
    goto LABEL_111;
  }
LABEL_110:
  v78 = v43->u32[0];
  v79 = v43->u32[1];
  ++v43;
  v41 += v78 + v79;
  if ((v42 & 4) == 0)
  {
LABEL_102:
    if ((v42 & 2) == 0)
      goto LABEL_103;
LABEL_112:
    v81 = v43->u16[0];
    v43 = (uint32x2_t *)((char *)v43 + 2);
    v41 += v81;
    if ((v42 & 1) == 0)
      goto LABEL_105;
    goto LABEL_104;
  }
LABEL_111:
  v80 = v43->i32[0];
  v43 = (uint32x2_t *)((char *)v43 + 4);
  v41 += v80;
  if ((v42 & 2) != 0)
    goto LABEL_112;
LABEL_103:
  if ((v42 & 1) != 0)
LABEL_104:
    v41 += v43->u8[0];
LABEL_105:
  v22 = 0;
  _ZF = (v40 & 1) == 0;
  v73 = __ROR8__(v41, 56);
  if (_ZF)
    v73 = v41;
  v74 = ((unint64_t)(v63 + v73 + HIDWORD(v73)) >> 32) + (v63 + v73 + HIDWORD(v73));
  a6 += (unsigned __int16)(((HIDWORD(v74) + (unsigned __int16)v74 + WORD1(v74)) >> 16)
                         + WORD2(v74)
                         + v74
                         + WORD1(v74)
                         + ((((HIDWORD(v74) + (unsigned __int16)v74 + WORD1(v74)) >> 16)
                           + (unsigned __int16)(WORD2(v74) + v74 + WORD1(v74))) >> 16));
LABEL_22:
  v23 = a2 - (a4 + a5);
  if ((int)v23 < 1)
    goto LABEL_23;
  v36 = (unsigned __int8 *)(a1 + a4 + a5);
  if ((v36 & 1) != 0)
  {
    v38 = (uint32x2_t *)(v36 + 1);
    v37 = (unint64_t)*v36 << 8;
    --v23;
  }
  else
  {
    v37 = 0;
    v38 = (uint32x2_t *)(a1 + a4 + a5);
  }
  if ((v38 & 2) != 0)
  {
    if (v23 < 2)
    {
      v39 = 0;
      if ((v23 & 1) == 0)
        goto LABEL_69;
      goto LABEL_68;
    }
    v44 = v38->u16[0];
    v38 = (uint32x2_t *)((char *)v38 + 2);
    v37 += v44;
    v23 -= 2;
  }
  if (v23 < 0x40)
  {
    v39 = 0;
  }
  else
  {
    v39 = 0;
    _X14 = v38;
    do
    {
      __asm { PRFM            #0, [X14,#0x20] }
      v38 = _X14 + 8;
      __asm { PRFM            #0, [X14,#0x40] }
      v37 += vaddvq_s64(vaddq_s64(vaddq_s64((int64x2_t)vaddl_u32(*_X14, _X14[4]), (int64x2_t)vaddl_u32(_X14[2], _X14[6])), vaddq_s64((int64x2_t)vaddl_high_u32(*(uint32x4_t *)_X14->i8, *(uint32x4_t *)_X14[4].i8), (int64x2_t)vaddl_high_u32(*(uint32x4_t *)_X14[2].i8, *(uint32x4_t *)_X14[6].i8))));
      v23 -= 64;
      v48 = __ROR8__(v37, 56);
      if ((v36 & 1) == 0)
        v48 = v37;
      v49 = v39 + HIDWORD(v48) + v48;
      if (v37 >> 62)
      {
        v37 = 0;
        v39 = v49;
      }
      _X14 += 8;
    }
    while (v23 > 0x3F);
  }
  if (v23 >= 0x20)
  {
    v56 = *(uint32x4_t *)v38->i8;
    v57 = *(uint32x4_t *)v38[2].i8;
    v38 += 4;
    v37 += vaddvq_s64(vaddq_s64((int64x2_t)vaddl_u32(*(uint32x2_t *)v56.i8, *(uint32x2_t *)v57.i8), (int64x2_t)vaddl_high_u32(v56, v57)));
    if ((v23 & 0x10) == 0)
    {
LABEL_64:
      if ((v23 & 8) == 0)
        goto LABEL_65;
      goto LABEL_77;
    }
  }
  else if ((v23 & 0x10) == 0)
  {
    goto LABEL_64;
  }
  v58 = *(uint32x4_t *)v38->i8;
  v38 += 2;
  v37 += vaddlvq_u32(v58);
  if ((v23 & 8) == 0)
  {
LABEL_65:
    if ((v23 & 4) == 0)
      goto LABEL_66;
    goto LABEL_78;
  }
LABEL_77:
  v59 = v38->u32[0];
  v60 = v38->u32[1];
  ++v38;
  v37 += v59 + v60;
  if ((v23 & 4) == 0)
  {
LABEL_66:
    if ((v23 & 2) == 0)
      goto LABEL_67;
LABEL_79:
    v62 = v38->u16[0];
    v38 = (uint32x2_t *)((char *)v38 + 2);
    v37 += v62;
    if ((v23 & 1) == 0)
      goto LABEL_69;
    goto LABEL_68;
  }
LABEL_78:
  v61 = v38->i32[0];
  v38 = (uint32x2_t *)((char *)v38 + 4);
  v37 += v61;
  if ((v23 & 2) != 0)
    goto LABEL_79;
LABEL_67:
  if ((v23 & 1) != 0)
LABEL_68:
    v37 += v38->u8[0];
LABEL_69:
  v50 = __ROR8__(v37, 56);
  _ZF = (v36 & 1) == 0;
  if ((v36 & 1) != 0)
    v52 = v50;
  else
    v52 = v37;
  v53 = ((unint64_t)(v39 + v52 + HIDWORD(v52)) >> 32) + (v39 + v52 + HIDWORD(v52));
  LODWORD(v53) = ((HIDWORD(v53) + (unsigned __int16)v53 + WORD1(v53)) >> 16)
               + (unsigned __int16)(WORD2(v53) + v53 + WORD1(v53));
  v54 = v53 + WORD1(v53);
  v55 = bswap32(v54) >> 16;
  if (!_ZF)
    LOWORD(v54) = v55;
  v22 = ((v22 + (unsigned __int16)v54) >> 16) + (unsigned __int16)(v22 + v54);
LABEL_23:
  v24 = a6 - v22;
  if (a6 <= v22)
    v24 = (unsigned __int16)(a6 + ~(_WORD)v22);
  if (v22)
    v25 = v24;
  else
    v25 = a6;
  return (unsigned __int16)(((HIWORD(v25) + (unsigned __int16)v25) >> 16)
                          + HIWORD(v25)
                          + v25
                          + ((((HIWORD(v25) + (unsigned __int16)v25) >> 16)
                            + (unsigned __int16)(HIWORD(v25) + v25)) >> 16));
}

uint64_t in6_pseudo(unsigned __int16 *a1, unsigned __int16 *a2, int a3)
{
  unsigned int v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  BOOL v10;
  unsigned int v11;

  v3 = *a1;
  v4 = *a1;
  if (v4 == 255)
  {
    if ((((v3 >> 8) & 0xF) != 2 || (BYTE1(v3) & 0xF0) == 48) && (BYTE1(v3) & 0xF) != 1)
      goto LABEL_4;
  }
  else if (v4 != 254 || (BYTE1(v3) & 0xC0) != 0x80)
  {
LABEL_4:
    v3 += a1[1];
  }
  v5 = *a2;
  v6 = v3 + a1[2] + a1[3] + a1[4] + a1[5] + a1[6] + a1[7] + v5;
  v7 = *a2;
  if (v7 != 255)
  {
    if (v7 == 254 && (BYTE1(v5) & 0xC0) == 0x80)
      goto LABEL_25;
LABEL_24:
    v6 += a2[1];
    goto LABEL_25;
  }
  v10 = ((v5 >> 8) & 0xF) != 2 || (BYTE1(v5) & 0xF0) == 48;
  if (v10 && (BYTE1(v5) & 0xF) != 1)
    goto LABEL_24;
LABEL_25:
  v11 = vaddvq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)(a2 + 2))) + a2[6] + v6 + a2[7] + a3;
  return (unsigned __int16)(((HIWORD(v11) + (unsigned __int16)v11) >> 16)
                          + HIWORD(v11)
                          + v11
                          + ((((HIWORD(v11) + (unsigned __int16)v11) >> 16)
                            + (unsigned __int16)(HIWORD(v11) + v11)) >> 16));
}

BOOL ___ZL24__nw_signpost_is_enabledv_block_invoke_51699()
{
  _BOOL8 result;

  result = networkd_settings_get_BOOL((const char *)nw_setting_enable_signposts);
  _nw_signposts_enabled = result;
  return result;
}

NWConcrete_nw_read_request *nw_read_request_create_multiple(unint64_t a1, unint64_t a2, void *a3, void *a4)
{
  id v8;
  id v9;
  unint64_t v10;
  unint64_t v11;
  id v12;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  NWConcrete_nw_read_request *v16;
  void *v17;
  id data_multiple_completion;
  _BOOL8 v19;
  OS_nw_array *read_array;
  _BOOL8 v21;
  OS_nw_array *context_array;
  NWConcrete_nw_read_request *v23;
  char *backtrace_string;
  os_log_type_t v25;
  _BOOL4 v26;
  id v27;
  char *v28;
  NSObject *v29;
  os_log_type_t v30;
  os_log_type_t v31;
  char *v32;
  os_log_type_t v33;
  _BOOL4 v34;
  os_log_type_t v35;
  void *v37;
  os_log_type_t v38;
  char *v39;
  os_log_type_t v40;
  _BOOL4 v41;
  os_log_type_t v42;
  char v43;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v46;
  __int16 v47;
  unint64_t v48;
  __int16 v49;
  unint64_t v50;
  __int16 v51;
  char *v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v9 = a4;
  if (v9)
  {
    if (a1 <= 1)
      v10 = 1;
    else
      v10 = a1;
    if (a2 >= 0x100)
      v11 = 256;
    else
      v11 = a2;
    if (v10 > v11)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v12 = (id)gLogObj;
      *(_DWORD *)buf = 136446722;
      v46 = "nw_read_request_create_multiple";
      v47 = 2048;
      v48 = v10;
      v49 = 2048;
      v50 = v11;
      v13 = (char *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v43 = 0;
      if (!__nwlog_fault(v13, &type, &v43))
        goto LABEL_44;
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v14 = (id)gLogObj;
        v15 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)buf = 136446722;
          v46 = "nw_read_request_create_multiple";
          v47 = 2048;
          v48 = v10;
          v49 = 2048;
          v50 = v11;
          _os_log_impl(&dword_182FBE000, v14, v15, "%{public}s min_data_count (%zu) > max_data_count (%zu)", buf, 0x20u);
        }
      }
      else if (v43)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v14 = (id)gLogObj;
        v25 = type;
        v26 = os_log_type_enabled(v14, type);
        if (backtrace_string)
        {
          if (v26)
          {
            *(_DWORD *)buf = 136446978;
            v46 = "nw_read_request_create_multiple";
            v47 = 2048;
            v48 = v10;
            v49 = 2048;
            v50 = v11;
            v51 = 2082;
            v52 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v14, v25, "%{public}s min_data_count (%zu) > max_data_count (%zu), dumping backtrace:%{public}s", buf, 0x2Au);
          }

          free(backtrace_string);
          if (!v13)
            goto LABEL_46;
          goto LABEL_45;
        }
        if (v26)
        {
          *(_DWORD *)buf = 136446722;
          v46 = "nw_read_request_create_multiple";
          v47 = 2048;
          v48 = v10;
          v49 = 2048;
          v50 = v11;
          _os_log_impl(&dword_182FBE000, v14, v25, "%{public}s min_data_count (%zu) > max_data_count (%zu), no backtrace", buf, 0x20u);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v14 = (id)gLogObj;
        v31 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)buf = 136446722;
          v46 = "nw_read_request_create_multiple";
          v47 = 2048;
          v48 = v10;
          v49 = 2048;
          v50 = v11;
          _os_log_impl(&dword_182FBE000, v14, v31, "%{public}s min_data_count (%zu) > max_data_count (%zu), backtrace limit exceeded", buf, 0x20u);
        }
      }
      goto LABEL_43;
    }
    v16 = objc_alloc_init(NWConcrete_nw_read_request);
    if (v16)
    {
      v17 = _Block_copy(v9);
      data_multiple_completion = v16->data_multiple_completion;
      v16->data_multiple_completion = v17;

      objc_storeStrong((id *)&v16->connection, a3);
      v16->qos_class = qos_class_self();
      v16->min = v10;
      v16->max = v11;
      v19 = nw_array_create();
      read_array = v16->read_array;
      v16->read_array = (OS_nw_array *)v19;

      v21 = nw_array_create();
      context_array = v16->context_array;
      v16->context_array = (OS_nw_array *)v21;

      v16->variant = 3;
      if (_nw_signposts_once != -1)
        dispatch_once(&_nw_signposts_once, &__block_literal_global_51698);
      if (_nw_signposts_enabled && kdebug_is_enabled())
        kdebug_trace();
      v23 = v16;
      goto LABEL_55;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v27 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v46 = "nw_read_request_create_multiple";
    v28 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v43 = 0;
    if (__nwlog_fault(v28, &type, &v43))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v29 = (id)gLogObj;
        v30 = type;
        if (os_log_type_enabled(v29, type))
        {
          *(_DWORD *)buf = 136446210;
          v46 = "nw_read_request_create_multiple";
          _os_log_impl(&dword_182FBE000, v29, v30, "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_read_request) alloc] init] failed", buf, 0xCu);
        }
      }
      else if (v43)
      {
        v32 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v29 = (id)gLogObj;
        v33 = type;
        v34 = os_log_type_enabled(v29, type);
        if (v32)
        {
          if (v34)
          {
            *(_DWORD *)buf = 136446466;
            v46 = "nw_read_request_create_multiple";
            v47 = 2082;
            v48 = (unint64_t)v32;
            _os_log_impl(&dword_182FBE000, v29, v33, "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_read_request) alloc] init] failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v32);
          if (!v28)
            goto LABEL_55;
          goto LABEL_54;
        }
        if (v34)
        {
          *(_DWORD *)buf = 136446210;
          v46 = "nw_read_request_create_multiple";
          _os_log_impl(&dword_182FBE000, v29, v33, "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_read_request) alloc] init] failed, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v29 = (id)gLogObj;
        v35 = type;
        if (os_log_type_enabled(v29, type))
        {
          *(_DWORD *)buf = 136446210;
          v46 = "nw_read_request_create_multiple";
          _os_log_impl(&dword_182FBE000, v29, v35, "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_read_request) alloc] init] failed, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
    if (!v28)
    {
LABEL_55:

      goto LABEL_56;
    }
LABEL_54:
    free(v28);
    goto LABEL_55;
  }
  __nwlog_obj();
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v46 = "nw_read_request_create_multiple";
  v13 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v43 = 0;
  if (__nwlog_fault(v13, &type, &v43))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v38 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        v46 = "nw_read_request_create_multiple";
        _os_log_impl(&dword_182FBE000, v14, v38, "%{public}s called with null completion", buf, 0xCu);
      }
LABEL_43:

      goto LABEL_44;
    }
    if (!v43)
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v42 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        v46 = "nw_read_request_create_multiple";
        _os_log_impl(&dword_182FBE000, v14, v42, "%{public}s called with null completion, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_43;
    }
    v39 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v14 = objc_claimAutoreleasedReturnValue();
    v40 = type;
    v41 = os_log_type_enabled(v14, type);
    if (!v39)
    {
      if (v41)
      {
        *(_DWORD *)buf = 136446210;
        v46 = "nw_read_request_create_multiple";
        _os_log_impl(&dword_182FBE000, v14, v40, "%{public}s called with null completion, no backtrace", buf, 0xCu);
      }
      goto LABEL_43;
    }
    if (v41)
    {
      *(_DWORD *)buf = 136446466;
      v46 = "nw_read_request_create_multiple";
      v47 = 2082;
      v48 = (unint64_t)v39;
      _os_log_impl(&dword_182FBE000, v14, v40, "%{public}s called with null completion, dumping backtrace:%{public}s", buf, 0x16u);
    }

    free(v39);
  }
LABEL_44:
  if (v13)
LABEL_45:
    free(v13);
LABEL_46:
  v16 = 0;
LABEL_56:

  return v16;
}

void sub_18389A69C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t nw_read_request_get_maximum_datagram_count(void *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t maximum_datagram_count;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    if (*((_DWORD *)v1 + 17) == 3)
    {
      v3 = v1[10];
    }
    else
    {
      maximum_datagram_count = v1[1];
      if (maximum_datagram_count)
        maximum_datagram_count = nw_read_request_get_maximum_datagram_count();
      v3 = maximum_datagram_count + 1;
    }
    goto LABEL_7;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_read_request_get_maximum_datagram_count";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_read_request_get_maximum_datagram_count";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null request", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_read_request_get_maximum_datagram_count";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null request, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_24;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_read_request_get_maximum_datagram_count";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null request, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_read_request_get_maximum_datagram_count";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null request, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_24:
  if (v7)
    free(v7);
  v3 = 0;
LABEL_7:

  return v3;
}

void sub_18389A970(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_read_request_fail(void *a1, int a2)
{
  _QWORD *v3;
  _DWORD *posix_error;
  void *v5;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  if (v3)
  {
    posix_error = nw_error_create_posix_error(a2);
    v5 = (void *)v3[19];
    v3[19] = posix_error;

    nw_read_request_report(v3, 0);
    goto LABEL_3;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_read_request_fail";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_read_request_fail";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null request", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_read_request_fail";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null request, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_read_request_fail";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null request, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_read_request_fail";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null request, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v7)
    free(v7);
LABEL_3:

}

void sub_18389AC30(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_read_request_report(void *a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  void *v6;
  _DWORD *v7;
  int v8;
  uint64_t v9;
  NSObject *v10;
  int v11;
  const char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint32_t v15;
  void *v16;
  _DWORD *v17;
  int v18;
  uint64_t v19;
  NSObject *v20;
  int v21;
  const char *v22;
  NSObject *v23;
  os_log_type_t v24;
  uint32_t v25;
  uint64_t v26;
  size_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  void *v31;
  void *v32;
  _DWORD *v33;
  int v34;
  uint64_t v35;
  NSObject *v36;
  int v37;
  const char *v38;
  NSObject *v39;
  os_log_type_t v40;
  uint32_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  uint64_t error_code;
  void *v48;
  void *v49;
  unsigned __int8 *v50;
  void *v51;
  _DWORD *v52;
  int v53;
  uint64_t v54;
  NSObject *v55;
  int v56;
  const char *v57;
  NSObject *v58;
  os_log_type_t v59;
  uint32_t v60;
  void *v61;
  uint64_t i;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  id v70;
  char v71;
  id v72;
  void *v73;
  void *v74;
  dispatch_qos_class_t v75;
  id v76;
  id v77;
  id v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  void *v84;
  _DWORD *v85;
  int v86;
  uint64_t v87;
  void *v88;
  void *v89;
  dispatch_qos_class_t v90;
  id v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  id v95;
  char v96;
  id v97;
  void *v98;
  void *v99;
  dispatch_qos_class_t v100;
  id v101;
  id v102;
  id v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  id v107;
  int v108;
  void *v109;
  void *v110;
  dispatch_qos_class_t v111;
  id v112;
  id v113;
  void *v114;
  void *v115;
  void *v116;
  NSObject *v117;
  void *v118;
  NSObject *v119;
  void *v120;
  NSObject *v121;
  void *v122;
  NSObject *v123;
  void *v124;
  _QWORD v125[4];
  id v126;
  id v127;
  id v128;
  id v129;
  BOOL v130;
  _QWORD v131[4];
  id v132;
  uint64_t v133;
  int v134;
  _QWORD v135[4];
  id v136;
  id v137;
  uint64_t *v138;
  uint64_t *v139;
  size_t v140;
  int v141;
  _QWORD v142[4];
  id v143;
  uint64_t *v144;
  uint64_t *v145;
  uint64_t v146;
  size_t v147;
  uint64_t v148;
  uint64_t *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t *v153;
  uint64_t v154;
  uint64_t v155;
  _QWORD v156[4];
  id v157;
  id v158;
  id v159;
  id v160;
  BOOL v161;
  uint8_t buf[4];
  const char *v163;
  __int16 v164;
  _BYTE v165[18];
  uint64_t v166;

  v166 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if ((*((_BYTE *)v3 + 176) & 1) == 0)
  {
    *((_BYTE *)v3 + 176) |= 1u;
    switch(*((_DWORD *)v3 + 17))
    {
      case 0:
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v5 = (id)gLogObj;
        if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446210;
          v163 = "nw_read_request_report";
          _os_log_impl(&dword_182FBE000, v5, OS_LOG_TYPE_ERROR, "%{public}s Invalid request", buf, 0xCu);
        }
        goto LABEL_5;
      case 1:
        v30 = *((id *)v3 + 16);
        v31 = (void *)*((_QWORD *)v3 + 16);
        *((_QWORD *)v3 + 16) = 0;

        if (!*((_QWORD *)v3 + 7))
        {
          (*(void (**)(void))(*((_QWORD *)v3 + 3) + 16))();
          goto LABEL_111;
        }
        v32 = (void *)*((_QWORD *)v3 + 19);
        if (!v32)
          goto LABEL_110;
        v33 = v32;
        v34 = v33[2];

        if (v34 == 1 && nw_error_get_error_code(*((nw_error_t *)v3 + 19)) == 89)
        {
          v35 = *(_QWORD *)(*((_QWORD *)v3 + 7) + 16);
          if (v35 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v35 + 104)))
          {
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v36 = (id)gconnectionLogObj;
            if (!os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
              goto LABEL_109;
            v37 = *(_DWORD *)(*((_QWORD *)v3 + 7) + 448);
            *(_DWORD *)buf = 136446466;
            v163 = "nw_read_request_report";
            v164 = 1024;
            *(_DWORD *)v165 = v37;
            v38 = "%{public}s [C%u] Receive cancelled";
            v39 = v36;
            v40 = OS_LOG_TYPE_INFO;
            v41 = 18;
LABEL_108:
            _os_log_impl(&dword_182FBE000, v39, v40, v38, buf, v41);
LABEL_109:

          }
        }
        else
        {
          v92 = *(_QWORD *)(*((_QWORD *)v3 + 7) + 16);
          if (v92 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v92 + 104)))
          {
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v36 = (id)gconnectionLogObj;
            if (!os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
              goto LABEL_109;
            v93 = *(_DWORD *)(*((_QWORD *)v3 + 7) + 448);
            v94 = *((_QWORD *)v3 + 19);
            *(_DWORD *)buf = 136446722;
            v163 = "nw_read_request_report";
            v164 = 1024;
            *(_DWORD *)v165 = v93;
            *(_WORD *)&v165[4] = 2114;
            *(_QWORD *)&v165[6] = v94;
            v38 = "%{public}s [C%u] Receive failed with error \"%{public}@\"";
            v39 = v36;
            v40 = OS_LOG_TYPE_ERROR;
            v41 = 28;
            goto LABEL_108;
          }
        }
LABEL_110:
        v95 = *((id *)v3 + 17);
        v96 = *((_BYTE *)v3 + 176);
        v97 = *((id *)v3 + 19);
        v98 = _Block_copy(*((const void **)v3 + 3));
        v99 = (void *)*((_QWORD *)v3 + 7);
        v100 = *((_DWORD *)v3 + 16);
        v156[0] = MEMORY[0x1E0C809B0];
        v156[1] = 3221225472;
        v156[2] = ___ZL22nw_read_request_reportP26NWConcrete_nw_read_requestPU28objcproto17OS_dispatch_queue8NSObject_block_invoke;
        v156[3] = &unk_1E14A4948;
        v160 = v98;
        v157 = v30;
        v158 = v95;
        v161 = (v96 & 2) != 0;
        v159 = v97;
        v101 = v97;
        v102 = v95;
        v103 = v98;
        nw_connection_async_client_if_needed_with_override(v99, v4, v100, v156);

LABEL_111:
        break;
      case 2:
        if (*((_QWORD *)v3 + 7))
        {
          v16 = (void *)*((_QWORD *)v3 + 19);
          if (!v16)
            goto LABEL_100;
          v17 = v16;
          v18 = v17[2];

          if (v18 == 1 && nw_error_get_error_code(*((nw_error_t *)v3 + 19)) == 89)
          {
            v19 = *(_QWORD *)(*((_QWORD *)v3 + 7) + 16);
            if (v19 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v19 + 104)))
            {
              if (__nwlog_connection_log::onceToken != -1)
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
              v20 = (id)gconnectionLogObj;
              if (!os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
                goto LABEL_97;
              v21 = *(_DWORD *)(*((_QWORD *)v3 + 7) + 448);
              *(_DWORD *)buf = 136446466;
              v163 = "nw_read_request_report";
              v164 = 1024;
              *(_DWORD *)v165 = v21;
              v22 = "%{public}s [C%u] Receive cancelled";
              v23 = v20;
              v24 = OS_LOG_TYPE_INFO;
              v25 = 18;
LABEL_96:
              _os_log_impl(&dword_182FBE000, v23, v24, v22, buf, v25);
LABEL_97:

            }
          }
          else
          {
            v81 = *(_QWORD *)(*((_QWORD *)v3 + 7) + 16);
            if (v81 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v81 + 104)))
            {
              if (__nwlog_connection_log::onceToken != -1)
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
              v20 = (id)gconnectionLogObj;
              if (!os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
                goto LABEL_97;
              v82 = *(_DWORD *)(*((_QWORD *)v3 + 7) + 448);
              v83 = *((_QWORD *)v3 + 19);
              *(_DWORD *)buf = 136446722;
              v163 = "nw_read_request_report";
              v164 = 1024;
              *(_DWORD *)v165 = v82;
              *(_WORD *)&v165[4] = 2114;
              *(_QWORD *)&v165[6] = v83;
              v22 = "%{public}s [C%u] Receive failed with error \"%{public}@\"";
              v23 = v20;
              v24 = OS_LOG_TYPE_ERROR;
              v25 = 28;
              goto LABEL_96;
            }
          }
          v84 = (void *)*((_QWORD *)v3 + 19);
          if (v84)
          {
            v85 = v84;
            v86 = v85[3];

LABEL_101:
            v87 = *((_QWORD *)v3 + 11);
            v88 = _Block_copy(*((const void **)v3 + 6));
            v89 = (void *)*((_QWORD *)v3 + 7);
            v90 = *((_DWORD *)v3 + 16);
            v131[0] = MEMORY[0x1E0C809B0];
            v131[1] = 3221225472;
            v131[2] = ___ZL22nw_read_request_reportP26NWConcrete_nw_read_requestPU28objcproto17OS_dispatch_queue8NSObject_block_invoke_103;
            v131[3] = &unk_1E14AD070;
            v132 = v88;
            v133 = v87;
            v134 = v86;
            v91 = v88;
            nw_connection_async_client_if_needed_with_override(v89, v4, v90, v131);

            break;
          }
LABEL_100:
          v86 = 0;
          goto LABEL_101;
        }
        v44 = *((_QWORD *)v3 + 6);
        v45 = *((_QWORD *)v3 + 11);
        v46 = *((_QWORD *)v3 + 19);
        if (v46)
          error_code = nw_error_get_error_code(v46);
        else
          error_code = 0;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v44 + 16))(v44, v45, error_code);
        break;
      case 3:
        v26 = *((_QWORD *)v3 + 20);
        if (v26)
        {
          v27 = (uint64_t)(*(_QWORD *)(v26 + 24) - *(_QWORD *)(v26 + 16)) >> 3;
          v28 = *((_QWORD *)v3 + 21);
          if (v28)
          {
LABEL_28:
            v29 = (uint64_t)(*(_QWORD *)(v28 + 24) - *(_QWORD *)(v28 + 16)) >> 3;
            goto LABEL_47;
          }
        }
        else
        {
          v27 = 0;
          v28 = *((_QWORD *)v3 + 21);
          if (v28)
            goto LABEL_28;
        }
        v29 = 0;
LABEL_47:
        v152 = 0;
        v153 = &v152;
        v154 = 0x2020000000;
        v155 = 0;
        v148 = 0;
        v149 = &v148;
        v150 = 0x2020000000;
        v151 = 0;
        if (!v27)
          goto LABEL_53;
        if (!(v27 >> 61))
          goto LABEL_49;
        __nwlog_obj();
        v117 = objc_claimAutoreleasedReturnValue();
        os_log_type_enabled(v117, OS_LOG_TYPE_ERROR);
        *(_DWORD *)buf = 136446210;
        v163 = "strict_calloc";
        v118 = (void *)_os_log_send_and_compose_impl();

        if (__nwlog_abort((uint64_t)v118))
          goto LABEL_138;
        free(v118);
LABEL_49:
        v48 = malloc_type_calloc(v27, 8uLL, 0xEAFB8F1AuLL);
        if (v48)
          goto LABEL_50;
        __nwlog_obj();
        v119 = objc_claimAutoreleasedReturnValue();
        os_log_type_enabled(v119, OS_LOG_TYPE_ERROR);
        *(_DWORD *)buf = 136446722;
        v163 = "strict_calloc";
        v164 = 2048;
        *(_QWORD *)v165 = v27;
        *(_WORD *)&v165[8] = 2048;
        *(_QWORD *)&v165[10] = 8;
        v120 = (void *)_os_log_send_and_compose_impl();

        if (__nwlog_abort((uint64_t)v120))
          goto LABEL_138;
        free(v120);
LABEL_50:
        v153[3] = (uint64_t)v48;
        if (!(v27 >> 61))
          goto LABEL_51;
        __nwlog_obj();
        v121 = objc_claimAutoreleasedReturnValue();
        os_log_type_enabled(v121, OS_LOG_TYPE_ERROR);
        *(_DWORD *)buf = 136446210;
        v163 = "strict_calloc";
        v122 = (void *)_os_log_send_and_compose_impl();

        if (__nwlog_abort((uint64_t)v122))
          goto LABEL_138;
        free(v122);
LABEL_51:
        v49 = malloc_type_calloc(v27, 8uLL, 0xEAFB8F1AuLL);
        if (v49)
          goto LABEL_52;
        __nwlog_obj();
        v123 = objc_claimAutoreleasedReturnValue();
        os_log_type_enabled(v123, OS_LOG_TYPE_ERROR);
        *(_DWORD *)buf = 136446722;
        v163 = "strict_calloc";
        v164 = 2048;
        *(_QWORD *)v165 = v27;
        *(_WORD *)&v165[8] = 2048;
        *(_QWORD *)&v165[10] = 8;
        v124 = (void *)_os_log_send_and_compose_impl();

        if (!__nwlog_abort((uint64_t)v124))
        {
          free(v124);
LABEL_52:
          v149[3] = (uint64_t)v49;
          v50 = (unsigned __int8 *)*((_QWORD *)v3 + 20);
          v142[0] = MEMORY[0x1E0C809B0];
          v142[1] = 3221225472;
          v142[2] = ___ZL22nw_read_request_reportP26NWConcrete_nw_read_requestPU28objcproto17OS_dispatch_queue8NSObject_block_invoke_2;
          v142[3] = &unk_1E14A4970;
          v146 = v29;
          v147 = v27;
          v144 = &v152;
          v145 = &v148;
          v143 = v3;
          nw_array_apply(v50, (uint64_t)v142);

LABEL_53:
          if (!*((_QWORD *)v3 + 7))
          {
            (*(void (**)(_QWORD, uint64_t))(*((_QWORD *)v3 + 5) + 16))(*((_QWORD *)v3 + 5), v153[3]);
            v61 = (void *)v153[3];
            if (v61 || v149[3])
            {
              if (v27)
              {
                for (i = 0; i != v27; ++i)
                {
                  v63 = v153[3];
                  if (v63)
                  {
                    v64 = *(void **)(v63 + 8 * i);
                    if (v64)
                    {
                      *(_QWORD *)(v63 + 8 * i) = 0;

                    }
                  }
                  v65 = v149[3];
                  if (v65)
                  {
                    v66 = *(void **)(v65 + 8 * i);
                    if (v66)
                    {
                      *(_QWORD *)(v65 + 8 * i) = 0;

                    }
                  }
                }
                v61 = (void *)v153[3];
              }
              if (v61)
              {
                free(v61);
                v153[3] = 0;
              }
              v114 = (void *)v149[3];
              if (v114)
              {
                free(v114);
                v149[3] = 0;
              }
            }
            goto LABEL_126;
          }
          v51 = (void *)*((_QWORD *)v3 + 19);
          if (!v51)
          {
LABEL_120:
            v107 = *((id *)v3 + 19);
            v108 = *((_DWORD *)v3 + 22);
            v109 = _Block_copy(*((const void **)v3 + 5));
            v110 = (void *)*((_QWORD *)v3 + 7);
            v111 = *((_DWORD *)v3 + 16);
            v135[0] = MEMORY[0x1E0C809B0];
            v135[1] = 3221225472;
            v135[2] = ___ZL22nw_read_request_reportP26NWConcrete_nw_read_requestPU28objcproto17OS_dispatch_queue8NSObject_block_invoke_102;
            v135[3] = &unk_1E14A4998;
            v138 = &v152;
            v139 = &v148;
            v141 = v108;
            v136 = v107;
            v137 = v109;
            v140 = v27;
            v112 = v107;
            v113 = v109;
            nw_connection_async_client_if_needed_with_override(v110, v4, v111, v135);

LABEL_126:
            v115 = (void *)*((_QWORD *)v3 + 20);
            *((_QWORD *)v3 + 20) = 0;

            v116 = (void *)*((_QWORD *)v3 + 21);
            *((_QWORD *)v3 + 21) = 0;

            _Block_object_dispose(&v148, 8);
            _Block_object_dispose(&v152, 8);
            break;
          }
          v52 = v51;
          v53 = v52[2];

          if (v53 == 1 && nw_error_get_error_code(*((nw_error_t *)v3 + 19)) == 89)
          {
            v54 = *(_QWORD *)(*((_QWORD *)v3 + 7) + 16);
            if (!v54 || nw_path_parameters_get_logging_disabled(*(_QWORD *)(v54 + 104)))
              goto LABEL_120;
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v55 = (id)gconnectionLogObj;
            if (!os_log_type_enabled(v55, OS_LOG_TYPE_INFO))
              goto LABEL_119;
            v56 = *(_DWORD *)(*((_QWORD *)v3 + 7) + 448);
            *(_DWORD *)buf = 136446466;
            v163 = "nw_read_request_report";
            v164 = 1024;
            *(_DWORD *)v165 = v56;
            v57 = "%{public}s [C%u] Receive cancelled";
            v58 = v55;
            v59 = OS_LOG_TYPE_INFO;
            v60 = 18;
          }
          else
          {
            v104 = *(_QWORD *)(*((_QWORD *)v3 + 7) + 16);
            if (!v104 || nw_path_parameters_get_logging_disabled(*(_QWORD *)(v104 + 104)))
              goto LABEL_120;
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v55 = (id)gconnectionLogObj;
            if (!os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
              goto LABEL_119;
            v105 = *(_DWORD *)(*((_QWORD *)v3 + 7) + 448);
            v106 = *((_QWORD *)v3 + 19);
            *(_DWORD *)buf = 136446722;
            v163 = "nw_read_request_report";
            v164 = 1024;
            *(_DWORD *)v165 = v105;
            *(_WORD *)&v165[4] = 2114;
            *(_QWORD *)&v165[6] = v106;
            v57 = "%{public}s [C%u] Receive failed with error \"%{public}@\"";
            v58 = v55;
            v59 = OS_LOG_TYPE_ERROR;
            v60 = 28;
          }
          _os_log_impl(&dword_182FBE000, v58, v59, v57, buf, v60);
LABEL_119:

          goto LABEL_120;
        }
LABEL_138:
        __break(1u);
        return;
      case 4:
        if (!*((_QWORD *)v3 + 7))
        {
          (*(void (**)(void))(*((_QWORD *)v3 + 4) + 16))();
          goto LABEL_87;
        }
        v6 = (void *)*((_QWORD *)v3 + 19);
        if (!v6)
          goto LABEL_83;
        v7 = v6;
        v8 = v7[2];

        if (v8 == 1 && nw_error_get_error_code(*((nw_error_t *)v3 + 19)) == 89)
        {
          v9 = *(_QWORD *)(*((_QWORD *)v3 + 7) + 16);
          if (v9 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v9 + 104)))
          {
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v10 = (id)gconnectionLogObj;
            if (!os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
              goto LABEL_82;
            v11 = *(_DWORD *)(*((_QWORD *)v3 + 7) + 448);
            *(_DWORD *)buf = 136446466;
            v163 = "nw_read_request_report";
            v164 = 1024;
            *(_DWORD *)v165 = v11;
            v12 = "%{public}s [C%u] Receive cancelled";
            v13 = v10;
            v14 = OS_LOG_TYPE_INFO;
            v15 = 18;
LABEL_81:
            _os_log_impl(&dword_182FBE000, v13, v14, v12, buf, v15);
LABEL_82:

          }
        }
        else
        {
          v67 = *(_QWORD *)(*((_QWORD *)v3 + 7) + 16);
          if (v67 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v67 + 104)))
          {
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v10 = (id)gconnectionLogObj;
            if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
              goto LABEL_82;
            v68 = *(_DWORD *)(*((_QWORD *)v3 + 7) + 448);
            v69 = *((_QWORD *)v3 + 19);
            *(_DWORD *)buf = 136446722;
            v163 = "nw_read_request_report";
            v164 = 1024;
            *(_DWORD *)v165 = v68;
            *(_WORD *)&v165[4] = 2114;
            *(_QWORD *)&v165[6] = v69;
            v12 = "%{public}s [C%u] Receive failed with error \"%{public}@\"";
            v13 = v10;
            v14 = OS_LOG_TYPE_ERROR;
            v15 = 28;
            goto LABEL_81;
          }
        }
LABEL_83:
        if ((*((_BYTE *)v3 + 176) & 2) == 0 && !*((_QWORD *)v3 + 19))
          *((_BYTE *)v3 + 176) |= 2u;
        v70 = *((id *)v3 + 17);
        v71 = *((_BYTE *)v3 + 176);
        v72 = *((id *)v3 + 19);
        v73 = _Block_copy(*((const void **)v3 + 4));
        v74 = (void *)*((_QWORD *)v3 + 7);
        v75 = *((_DWORD *)v3 + 16);
        v125[0] = MEMORY[0x1E0C809B0];
        v125[1] = 3221225472;
        v125[2] = ___ZL22nw_read_request_reportP26NWConcrete_nw_read_requestPU28objcproto17OS_dispatch_queue8NSObject_block_invoke_104;
        v125[3] = &unk_1E14A4948;
        v129 = v73;
        v126 = v3;
        v127 = v70;
        v130 = (v71 & 2) != 0;
        v128 = v72;
        v76 = v72;
        v77 = v70;
        v78 = v73;
        nw_connection_async_client_if_needed_with_override(v74, v4, v75, v125);

LABEL_87:
        v79 = *((_QWORD *)v3 + 13);
        if (v79)
        {
          nw_queue_cancel_source(v79, v43);
          *((_QWORD *)v3 + 13) = 0;
        }
        v80 = (void *)*((_QWORD *)v3 + 4);
        *((_QWORD *)v3 + 4) = 0;

        break;
      default:
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v5 = (id)gLogObj;
        if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
        {
          v42 = *((_DWORD *)v3 + 17);
          *(_DWORD *)buf = 136446466;
          v163 = "nw_read_request_report";
          v164 = 1024;
          *(_DWORD *)v165 = v42;
          _os_log_impl(&dword_182FBE000, v5, OS_LOG_TYPE_ERROR, "%{public}s Unknown request type %d", buf, 0x12u);
        }
LABEL_5:

        break;
    }
  }

}

void sub_18389BC9C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t ___ZL22nw_read_request_reportP26NWConcrete_nw_read_requestPU28objcproto17OS_dispatch_queue8NSObject_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 56) + 16))(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 64), *(_QWORD *)(a1 + 48));
}

uint64_t ___ZL22nw_read_request_reportP26NWConcrete_nw_read_requestPU28objcproto17OS_dispatch_queue8NSObject_block_invoke_2(_QWORD *a1, unint64_t a2, void *a3)
{
  id v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  v6 = a3;
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) + 8 * a2), a3);
  if (a1[7] == a1[8])
  {
    nw_array_get_object_at_index(*(_QWORD *)(a1[4] + 168), a2);
    v7 = objc_claimAutoreleasedReturnValue();
    v8 = *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24);
    v9 = *(void **)(v8 + 8 * a2);
    *(_QWORD *)(v8 + 8 * a2) = v7;

  }
  return 1;
}

void ___ZL22nw_read_request_reportP26NWConcrete_nw_read_requestPU28objcproto17OS_dispatch_queue8NSObject_block_invoke_102(_QWORD *a1)
{
  void *v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;

  (*(void (**)(void))(a1[5] + 16))();
  v2 = *(void **)(*(_QWORD *)(a1[6] + 8) + 24);
  if (v2 || *(_QWORD *)(*(_QWORD *)(a1[7] + 8) + 24))
  {
    if (a1[8])
    {
      v3 = 0;
      do
      {
        v4 = *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24);
        if (v4)
        {
          v5 = *(void **)(v4 + 8 * v3);
          if (v5)
          {
            *(_QWORD *)(v4 + 8 * v3) = 0;

          }
        }
        v6 = *(_QWORD *)(*(_QWORD *)(a1[7] + 8) + 24);
        if (v6)
        {
          v7 = *(void **)(v6 + 8 * v3);
          if (v7)
          {
            *(_QWORD *)(v6 + 8 * v3) = 0;

          }
        }
        ++v3;
      }
      while (v3 < a1[8]);
      v2 = *(void **)(*(_QWORD *)(a1[6] + 8) + 24);
    }
    if (v2)
    {
      free(v2);
      *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24) = 0;
    }
    v8 = *(void **)(*(_QWORD *)(a1[7] + 8) + 24);
    if (v8)
    {
      free(v8);
      *(_QWORD *)(*(_QWORD *)(a1[7] + 8) + 24) = 0;
    }
  }
}

uint64_t ___ZL22nw_read_request_reportP26NWConcrete_nw_read_requestPU28objcproto17OS_dispatch_queue8NSObject_block_invoke_103(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(unsigned int *)(a1 + 48));
}

uint64_t ___ZL22nw_read_request_reportP26NWConcrete_nw_read_requestPU28objcproto17OS_dispatch_queue8NSObject_block_invoke_104(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 56) + 16))(*(_QWORD *)(a1 + 56), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 88), *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 64), *(_QWORD *)(a1 + 48));
}

uint64_t __Block_byref_object_copy__51808(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__51809(uint64_t a1)
{

}

uint64_t __nw_read_request_receive_block_invoke(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  id v9;
  void *v10;
  unint64_t v11;
  _DWORD *posix_error;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  dispatch_data_t subrange;
  uint64_t v19;
  void *v20;
  _QWORD v22[6];
  unsigned int v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;

  v9 = a2;
  if (*(_DWORD *)(a1 + 72) < a5)
    a5 = *(_DWORD *)(a1 + 72);
  v24 = 0;
  v25 = &v24;
  v26 = 0x2020000000;
  v27 = 0;
  v10 = *(void **)(*(_QWORD *)(a1 + 32) + 96);
  v22[0] = MEMORY[0x1E0C809B0];
  v22[1] = 3221225472;
  v22[2] = __nw_read_request_receive_block_invoke_2;
  v22[3] = &unk_1E14A48D8;
  v22[4] = &v24;
  v22[5] = a4;
  v23 = a5;
  nw_fd_wrapper_get_fd(v10, v22);
  v11 = v25[3];
  if (v11)
  {
    if (v11 == -1)
    {
      posix_error = nw_error_create_posix_error(**(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8));
      v13 = *(_QWORD *)(a1 + 32);
      v14 = *(void **)(v13 + 152);
      *(_QWORD *)(v13 + 152) = posix_error;

      nw_read_request_report(*(void **)(a1 + 32), 0);
      v15 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
      v16 = *(void **)(v15 + 40);
      *(_QWORD *)(v15 + 40) = 0;

      v17 = 0;
    }
    else if (v11 >= a5)
    {
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) += v11;
      v17 = 1;
    }
    else
    {
      subrange = dispatch_data_create_subrange(*(dispatch_data_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), v11 + a3, *(_QWORD *)(a1 + 64) - (v11 + a3));
      v19 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
      v20 = *(void **)(v19 + 40);
      *(_QWORD *)(v19 + 40) = subrange;

      v17 = 0;
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) += *((_DWORD *)v25 + 6);
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = 1;
    }
  }
  else
  {
    v17 = 0;
    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 176) |= 8u;
  }
  _Block_object_dispose(&v24, 8);

  return v17;
}

void sub_18389C148(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

void ___ZL34nw_read_request_start_file_updatesP26NWConcrete_nw_read_request_block_invoke(uint64_t a1)
{
  const void **WeakRetained;
  const void **v2;
  void *v3;
  void *v4;
  void *v5;
  dispatch_qos_class_t v6;
  _QWORD v7[4];
  const void **v8;
  id v9;

  WeakRetained = (const void **)objc_loadWeakRetained((id *)(a1 + 32));
  v2 = WeakRetained;
  if (WeakRetained)
  {
    v3 = _Block_copy(WeakRetained[4]);
    v4 = v3;
    if (v3)
    {
      v5 = (void *)v2[7];
      v6 = *((_DWORD *)v2 + 16);
      v7[0] = MEMORY[0x1E0C809B0];
      v7[1] = 3221225472;
      v7[2] = ___ZL34nw_read_request_start_file_updatesP26NWConcrete_nw_read_request_block_invoke_2;
      v7[3] = &unk_1E14ACE18;
      v9 = v3;
      v8 = v2;
      nw_connection_async_client_if_needed_with_override(v5, 0, v6, v7);

    }
  }

}

void sub_18389C22C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void ___ZL34nw_read_request_start_file_updatesP26NWConcrete_nw_read_request_block_invoke_2(uint64_t a1)
{
  void *v2;
  _DWORD *v3;

  if (((*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))() & 1) == 0)
  {
    v2 = *(void **)(a1 + 32);
    v3 = -[NWConcrete_nw_error initWithDomain:code:]([NWConcrete_nw_error alloc], 1, 89);
    nw_read_request_report_error_with_override(v2, 0, v3);

  }
}

void sub_18389C2DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t __nw_read_request_receive_block_invoke_2(uint64_t a1, int __fd)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = write(__fd, *(const void **)(a1 + 40), *(unsigned int *)(a1 + 48));
  return 1;
}

void __nw_http_alt_svc_storage_copy_shared_block_invoke()
{
  NWConcrete_nw_http_alt_svc_storage *v0;
  void *v1;
  uint64_t v2;
  void *v3;

  v0 = objc_alloc_init(NWConcrete_nw_http_alt_svc_storage);
  v1 = (void *)nw_http_alt_svc_storage_copy_shared_storage;
  nw_http_alt_svc_storage_copy_shared_storage = (uint64_t)v0;

  objc_msgSend(MEMORY[0x1E0C92D18], "sharedPersistentStore");
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(void **)(nw_http_alt_svc_storage_copy_shared_storage + 8);
  *(_QWORD *)(nw_http_alt_svc_storage_copy_shared_storage + 8) = v2;

}

NWConcrete_nw_http_alt_svc_storage *nw_http_alt_svc_storage_create_ns(void *a1)
{
  _NSHTTPAlternativeServicesStorage *v1;
  NWConcrete_nw_http_alt_svc_storage *v2;
  _NSHTTPAlternativeServicesStorage *storage;

  v1 = a1;
  v2 = objc_alloc_init(NWConcrete_nw_http_alt_svc_storage);
  storage = v2->storage;
  v2->storage = v1;

  return v2;
}

void check_certs_and_store_entry(void *a1, void *a2, void *a3)
{
  id *v5;
  id v6;
  id v7;
  CFMutableArrayRef Mutable;
  NSObject *v9;
  void *v10;
  __CFArray *v11;
  uint64_t v12;
  uint64_t i;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t j;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  char v25;
  NSObject *v26;
  uint64_t v27;
  NSObject *v28;
  id v29;
  id *v30;
  uint64_t v31;
  __CFArray *v32;
  _QWORD handler[5];
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint8_t v42[128];
  uint8_t buf[4];
  const char *v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = a3;
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v9 = v7;
  handler[0] = MEMORY[0x1E0C809B0];
  handler[1] = 3221225472;
  handler[2] = __check_certs_and_store_entry_block_invoke;
  handler[3] = &__block_descriptor_40_e38_v16__0__NSObject_OS_sec_certificate__8l;
  handler[4] = Mutable;
  sec_protocol_metadata_access_peer_certificate_chain(v9, handler);
  objc_msgSend(v6, "alternateHost");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v38 = 0u;
  v39 = 0u;
  v40 = 0u;
  v41 = 0u;
  v11 = Mutable;
  v31 = -[__CFArray countByEnumeratingWithState:objects:count:](v11, "countByEnumeratingWithState:objects:count:", &v38, buf, 16);
  if (v31)
  {
    v12 = *(_QWORD *)v39;
    v29 = v6;
    v30 = v5;
    v27 = *(_QWORD *)v39;
    v28 = v9;
    v32 = v11;
    do
    {
      for (i = 0; i != v31; ++i)
      {
        if (*(_QWORD *)v39 != v12)
          objc_enumerationMutation(v11);
        v14 = (void *)SecCertificateCopyDNSNames();
        v34 = 0u;
        v35 = 0u;
        v36 = 0u;
        v37 = 0u;
        v15 = v14;
        v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v34, v42, 16);
        if (v16)
        {
          v17 = v16;
          v18 = *(_QWORD *)v35;
          while (2)
          {
            for (j = 0; j != v17; ++j)
            {
              if (*(_QWORD *)v35 != v18)
                objc_enumerationMutation(v15);
              v20 = *(void **)(*((_QWORD *)&v34 + 1) + 8 * j);
              if ((objc_msgSend(v20, "isEqualToString:", v10) & 1) != 0)
                goto LABEL_26;
              if (objc_msgSend(v20, "hasPrefix:", CFSTR("*"))
                && (unint64_t)objc_msgSend(v20, "length") >= 2)
              {
                objc_msgSend(v20, "substringFromIndex:", 1);
                v21 = (void *)objc_claimAutoreleasedReturnValue();
                v22 = objc_msgSend(v10, "rangeOfString:", CFSTR("."));
                if (v23)
                {
                  objc_msgSend(v10, "substringFromIndex:", v22);
                  v24 = (void *)objc_claimAutoreleasedReturnValue();
                  v25 = objc_msgSend(v24, "isEqualToString:", v21);

                  if ((v25 & 1) != 0)
                  {

LABEL_26:
                    v11 = v32;

                    v6 = v29;
                    v5 = v30;
                    objc_msgSend(v30[1], "storeHTTPServiceEntry:", v29);
                    v9 = v28;
                    goto LABEL_27;
                  }
                }

              }
            }
            v17 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v34, v42, 16);
            if (v17)
              continue;
            break;
          }
        }

        v11 = v32;
        v12 = v27;
      }
      v6 = v29;
      v5 = v30;
      v9 = v28;
      v31 = -[__CFArray countByEnumeratingWithState:objects:count:](v32, "countByEnumeratingWithState:objects:count:", &v38, buf, 16);
    }
    while (v31);
  }

  if (gLogDatapath)
  {
    __nwlog_obj();
    v26 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446210;
      v44 = "check_certs_and_store_entry";
      _os_log_impl(&dword_182FBE000, v26, OS_LOG_TYPE_DEBUG, "%{public}s Ignoring the alternative service header since it is not covered under the setting origin's certificate", buf, 0xCu);
    }

  }
LABEL_27:
  if (v11)
    CFRelease(v11);

}

void __check_certs_and_store_entry_block_invoke(uint64_t a1, sec_certificate_t certificate)
{
  SecCertificateRef v3;

  v3 = sec_certificate_copy_ref(certificate);
  CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 32), v3);
  if (v3)
    CFRelease(v3);
}

uint64_t __Block_byref_object_copy__51996(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__51997(uint64_t a1)
{

}

void nw_ip_channel_inbox_input_available(nw_protocol *a1, nw_protocol *a2)
{
  void *v4;
  uint64_t v5;
  _BOOL8 v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  void *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  void *v15;
  char *v16;
  NSObject *v17;
  os_log_type_t v18;
  void *v19;
  os_log_type_t v20;
  char *v21;
  os_log_type_t v22;
  _BOOL4 v23;
  char *v24;
  os_log_type_t v25;
  _BOOL4 v26;
  char *backtrace_string;
  os_log_type_t v28;
  _BOOL4 v29;
  os_log_type_t v30;
  os_log_type_t v31;
  os_log_type_t v32;
  _QWORD v33[2];
  uint64_t (*v34)(uint64_t, void *);
  void *v35;
  id v36;
  id v37;
  os_log_type_t *v38;
  nw_protocol *v39;
  uint8_t *v40;
  os_log_type_t type[8];
  os_log_type_t *v42;
  char v43;
  uint8_t buf[32];
  __int128 v45;
  __int128 v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v4 = a1->handle;
    if (v4)
    {
      if (a2)
      {
        *(_QWORD *)type = 0;
        v42 = type;
        v45 = 0u;
        v46 = 0u;
        memset(buf, 0, sizeof(buf));
        v5 = MEMORY[0x1E0C809B0];
        while (((unsigned int (*)(nw_protocol *, nw_protocol *, uint64_t, uint64_t, uint64_t, os_log_type_t *))a2->callbacks->get_input_frames)(a2, a1, 1, 0xFFFFFFFFLL, 0xFFFFFFFFLL, type))
        {
          v6 = nw_array_create();
          v33[0] = v5;
          v33[1] = 3221225472;
          v34 = ___ZL35nw_ip_channel_inbox_input_availableP11nw_protocolS0__block_invoke;
          v35 = &unk_1E14A4A28;
          v38 = type;
          v36 = v4;
          v39 = a2;
          v7 = (id)v6;
          v37 = v7;
          v40 = buf;
          v8 = *(_QWORD *)type;
          do
          {
            if (!v8)
              break;
            v9 = *(_QWORD *)(v8 + 32);
            v10 = ((uint64_t (*)(_QWORD *))v34)(v33);
            v8 = v9;
          }
          while ((v10 & 1) != 0);

        }
        goto LABEL_63;
      }
      __nwlog_obj();
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_ip_channel_inbox_input_available";
      v16 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      v43 = 0;
      if (__nwlog_fault(v16, type, &v43))
      {
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v17 = objc_claimAutoreleasedReturnValue();
          v20 = type[0];
          if (os_log_type_enabled(v17, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_ip_channel_inbox_input_available";
            _os_log_impl(&dword_182FBE000, v17, v20, "%{public}s called with null from", buf, 0xCu);
          }
        }
        else if (v43)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v17 = objc_claimAutoreleasedReturnValue();
          v28 = type[0];
          v29 = os_log_type_enabled(v17, type[0]);
          if (backtrace_string)
          {
            if (v29)
            {
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "nw_ip_channel_inbox_input_available";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = backtrace_string;
              _os_log_impl(&dword_182FBE000, v17, v28, "%{public}s called with null from, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(backtrace_string);
            if (!v16)
              goto LABEL_63;
            goto LABEL_62;
          }
          if (v29)
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_ip_channel_inbox_input_available";
            _os_log_impl(&dword_182FBE000, v17, v28, "%{public}s called with null from, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          __nwlog_obj();
          v17 = objc_claimAutoreleasedReturnValue();
          v32 = type[0];
          if (os_log_type_enabled(v17, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_ip_channel_inbox_input_available";
            _os_log_impl(&dword_182FBE000, v17, v32, "%{public}s called with null from, backtrace limit exceeded", buf, 0xCu);
          }
        }
        goto LABEL_60;
      }
LABEL_61:
      if (!v16)
      {
LABEL_63:

        return;
      }
LABEL_62:
      free(v16);
      goto LABEL_63;
    }
    __nwlog_obj();
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_ip_channel_inbox_input_available";
    v16 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    v43 = 0;
    if (!__nwlog_fault(v16, type, &v43))
      goto LABEL_61;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v17 = objc_claimAutoreleasedReturnValue();
      v18 = type[0];
      if (os_log_type_enabled(v17, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_ip_channel_inbox_input_available";
        _os_log_impl(&dword_182FBE000, v17, v18, "%{public}s called with null inbox", buf, 0xCu);
      }
    }
    else if (v43)
    {
      v24 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v17 = objc_claimAutoreleasedReturnValue();
      v25 = type[0];
      v26 = os_log_type_enabled(v17, type[0]);
      if (v24)
      {
        if (v26)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_ip_channel_inbox_input_available";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v24;
          _os_log_impl(&dword_182FBE000, v17, v25, "%{public}s called with null inbox, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v24);
        goto LABEL_61;
      }
      if (v26)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_ip_channel_inbox_input_available";
        _os_log_impl(&dword_182FBE000, v17, v25, "%{public}s called with null inbox, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v17 = objc_claimAutoreleasedReturnValue();
      v31 = type[0];
      if (os_log_type_enabled(v17, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_ip_channel_inbox_input_available";
        _os_log_impl(&dword_182FBE000, v17, v31, "%{public}s called with null inbox, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_60:

    goto LABEL_61;
  }
  __nwlog_obj();
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_ip_channel_inbox_input_available";
  v12 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  v43 = 0;
  if (__nwlog_fault(v12, type, &v43))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v14 = type[0];
      if (os_log_type_enabled(v13, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_ip_channel_inbox_input_available";
        _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s called with null to", buf, 0xCu);
      }
    }
    else if (v43)
    {
      v21 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v22 = type[0];
      v23 = os_log_type_enabled(v13, type[0]);
      if (v21)
      {
        if (v23)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_ip_channel_inbox_input_available";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v21;
          _os_log_impl(&dword_182FBE000, v13, v22, "%{public}s called with null to, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v21);
        goto LABEL_53;
      }
      if (v23)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_ip_channel_inbox_input_available";
        _os_log_impl(&dword_182FBE000, v13, v22, "%{public}s called with null to, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v30 = type[0];
      if (os_log_type_enabled(v13, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_ip_channel_inbox_input_available";
        _os_log_impl(&dword_182FBE000, v13, v30, "%{public}s called with null to, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_53:
  if (v12)
    free(v12);
}

void sub_18389CFC4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id nw_ip_channel_inbox_get_parameters(nw_protocol *a1)
{
  id *v1;
  id *v2;
  id v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  char *v13;
  os_log_type_t v14;
  _BOOL4 v15;
  char *backtrace_string;
  os_log_type_t v17;
  _BOOL4 v18;
  os_log_type_t v19;
  os_log_type_t v20;
  char v21;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v24;
  __int16 v25;
  char *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v1 = a1->handle;
    v2 = v1;
    if (v1)
    {
      v3 = v1[6];
LABEL_4:

      return v3;
    }
    __nwlog_obj();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v24 = "nw_ip_channel_inbox_get_parameters";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v21 = 0;
    if (__nwlog_fault(v10, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          v24 = "nw_ip_channel_inbox_get_parameters";
          _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null inbox", buf, 0xCu);
        }
      }
      else if (v21)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v17 = type;
        v18 = os_log_type_enabled(v11, type);
        if (backtrace_string)
        {
          if (v18)
          {
            *(_DWORD *)buf = 136446466;
            v24 = "nw_ip_channel_inbox_get_parameters";
            v25 = 2082;
            v26 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v11, v17, "%{public}s called with null inbox, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_40;
        }
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          v24 = "nw_ip_channel_inbox_get_parameters";
          _os_log_impl(&dword_182FBE000, v11, v17, "%{public}s called with null inbox, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v20 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          v24 = "nw_ip_channel_inbox_get_parameters";
          _os_log_impl(&dword_182FBE000, v11, v20, "%{public}s called with null inbox, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_40:
    if (v10)
      free(v10);
    v3 = 0;
    goto LABEL_4;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v24 = "nw_ip_channel_inbox_get_parameters";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v21 = 0;
  if (__nwlog_fault(v6, &type, &v21))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v24 = "nw_ip_channel_inbox_get_parameters";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null protocol", buf, 0xCu);
      }
    }
    else if (v21)
    {
      v13 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      v15 = os_log_type_enabled(v7, type);
      if (v13)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          v24 = "nw_ip_channel_inbox_get_parameters";
          v25 = 2082;
          v26 = v13;
          _os_log_impl(&dword_182FBE000, v7, v14, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v13);
        goto LABEL_34;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        v24 = "nw_ip_channel_inbox_get_parameters";
        _os_log_impl(&dword_182FBE000, v7, v14, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v19 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v24 = "nw_ip_channel_inbox_get_parameters";
        _os_log_impl(&dword_182FBE000, v7, v19, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_34:
  if (v6)
    free(v6);
  return 0;
}

uint64_t ___ZL35nw_ip_channel_inbox_input_availableP11nw_protocolS0__block_invoke(uint64_t a1, void *a2)
{
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  _QWORD *v6;

  v3 = a2;
  v4 = v3;
  v5 = v3[4];
  v6 = (_QWORD *)v3[5];
  if (v5)
  {
    *(_QWORD *)(v5 + 40) = v6;
    v6 = (_QWORD *)v3[5];
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) = v6;
  }
  *v6 = v5;
  v3[4] = 0;
  v3[5] = 0;
  nw_ip_channel_inbox_handle_input_frame(*(void **)(a1 + 32), *(_QWORD *)(a1 + 56), v3, *(void **)(a1 + 40), *(unsigned __int8 **)(a1 + 64));

  return 1;
}

void sub_18389D4F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_ip_channel_inbox_handle_input_frame(void *a1, uint64_t a2, void *a3, void *a4, unsigned __int8 *a5)
{
  const void **v9;
  id v10;
  int v11;
  int v12;
  unsigned __int8 *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  const char *v19;
  unsigned __int8 *v20;
  _BOOL4 v21;
  _BOOL4 v22;
  int v23;
  __int16 v24;
  int v25;
  size_t v26;
  char v27;
  unsigned __int16 *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint8_t *v33;
  unsigned int v34;
  int v35;
  _BYTE *v36;
  unsigned int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  NSObject *v42;
  const char *v43;
  uint8_t *v44;
  NSObject *v45;
  __int16 *v46;
  __int16 v47;
  __int16 v48;
  NSObject *v49;
  os_log_type_t v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  char *v54;
  char *v55;
  NSObject *v56;
  uint64_t v57;
  uint16x4_t *v58;
  int32x4_t v59;
  uint64_t v60;
  int32x4_t v61;
  unsigned int v62;
  int v63;
  unsigned int v64;
  int v65;
  int v66;
  int v67;
  BOOL v68;
  int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  int v73;
  NSObject *v74;
  const char *v75;
  uint8_t *v76;
  NSObject *v77;
  os_log_type_t v78;
  int sa_family;
  NSObject *v80;
  unsigned int v81;
  uint64_t v82;
  int v83;
  char *v84;
  char *v85;
  _BOOL4 v86;
  nw_endpoint_t v87;
  NSObject *v88;
  const char *description;
  const char *logging_description;
  unsigned __int8 *v91;
  void **v92;
  id v93;
  size_t source_connection_id_length;
  uint64_t v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  NSObject *v100;
  const char *v101;
  const char *v102;
  NSObject *v103;
  uint64_t v104;
  unint64_t v105;
  NSObject *v106;
  void *v107;
  NSObject *v108;
  __int128 *identifier;
  id v110;
  void *v111;
  uint64_t quic_instance_by_id;
  NSObject *v113;
  uint64_t v114;
  void (*v115)(void);
  NSObject *v116;
  void *v117;
  void *v118;
  void **v119;
  NSObject *v120;
  int v121;
  int v123;
  size_t v124;
  unsigned __int16 v125;
  int v126;
  const void *v127;
  uint64_t v128;
  dispatch_data_t v129;
  NSObject *v130;
  NWConcrete_nw_interface_option_details *v131;
  NSObject *v132;
  void *v133;
  uint64_t v134;
  _BOOL8 v135;
  uint64_t v136;
  void (*v137)(_QWORD *, _QWORD, _BOOL8);
  void *v138;
  id v139;
  nw_protocol_stack_t v140;
  char *v141;
  int v142;
  int ipv4_netmask;
  int ipv4_broadcast;
  int address_family;
  nw_endpoint_t v146;
  nw_protocol_options_t v147;
  NSObject *v148;
  void *v149;
  char *v150;
  void **v151;
  NWConcrete_nw_parameters *v152;
  NSObject *v153;
  uint32_t int64_with_default;
  char *v155;
  NSObject *v156;
  void *v157;
  const char *v158;
  const char *v159;
  char *v160;
  _QWORD *v161;
  void *v162;
  void **v163;
  char flow_id;
  NSObject *v165;
  const char *v166;
  const char *v167;
  NSObject *v168;
  const char *v169;
  const char *v170;
  NSObject *v171;
  const char *v172;
  NSObject *v173;
  NSObject *v175;
  int v176;
  void *v177;
  NSObject *v178;
  NSObject *v179;
  _BOOL4 v180;
  char *backtrace_string;
  _BOOL4 v182;
  NSObject *v183;
  void *v184;
  NSObject *v185;
  _BOOL4 v186;
  uint64_t v187;
  const char *v188;
  void *v189;
  NSObject *v190;
  const char *v191;
  char *v192;
  _BOOL4 v193;
  const char *v194;
  const char *v195;
  const char *v196;
  _BYTE *v197;
  uint64_t v198;
  os_log_type_t v199;
  NSObject *v200;
  os_log_type_t v201;
  NSObject *v202;
  char *v203;
  NWConcrete_nw_interface_option_details *v204;
  dispatch_data_t v205;
  dispatch_data_t v206;
  int is_null;
  _QWORD *v208;
  void *v209;
  os_log_type_t v210;
  void *v211;
  NSObject *v212;
  id type;
  NSObject *typea;
  os_log_type_t typeb;
  NSObject *typec;
  os_log_type_t typed;
  nw_endpoint_t v218;
  unsigned __int8 *v219;
  id v220;
  NSObject *v221;
  char *v222;
  nw_parameters_t parameters;
  NSObject *parametersa;
  int v225;
  int log;
  NSObject *loga;
  NSObject *logb;
  os_log_t logc;
  unsigned __int8 *object;
  char v231;
  os_log_type_t v232;
  _QWORD v233[4];
  void **v234;
  _BYTE *v235;
  dispatch_data_s *v236;
  _QWORD v237[4];
  id v238;
  _BYTE v239[28];
  _BYTE v240[28];
  sockaddr __dst[2];
  sockaddr __src[2];
  _BYTE v243[24];
  void *v244;
  _BYTE address[20];
  uint64_t v246;
  _BYTE buf[52];
  uint64_t v248;
  uint64_t v249;

  v249 = *MEMORY[0x1E0C80C00];
  v9 = a1;
  v10 = a3;
  object = a4;
  memset(__src, 0, 28);
  memset(__dst, 0, 28);
  v11 = *((_DWORD *)v9 + 14);
  if (v11 != 2)
  {
    v225 = *((unsigned __int8 *)v9 + 166);
    v20 = (unsigned __int8 *)v9[19];
    if (v20)
    {
      memcpy(__dst, v9[19], *v20);
      v21 = 0;
      v22 = 0;
      v23 = 0;
      if (v20[1] == 2)
        v24 = 528;
      else
        v24 = 7708;
      *(_WORD *)&__src[0].sa_len = v24;
    }
    else
    {
      v21 = 0;
      v22 = 0;
      v23 = 0;
    }
    goto LABEL_14;
  }
  v12 = *((_DWORD *)v9 + 40);
  LODWORD(v236) = 0;
  v13 = (unsigned __int8 *)nw_frame_unclaimed_bytes((uint64_t)v10, &v236);
  if (!(_DWORD)v236)
    goto LABEL_324;
  v14 = *v13 >> 4;
  if (v14 != 6)
  {
    if (v14 != 4)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v18 = gLogObj;
      if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
        goto LABEL_324;
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_ip_parse";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v14;
      v19 = "%{public}s Unknown IP version: %u";
      goto LABEL_38;
    }
    *(_DWORD *)address = 0;
    v15 = nw_frame_unclaimed_bytes((uint64_t)v10, address);
    v248 = 0;
    memset(&buf[20], 0, 32);
    v17 = *(_DWORD *)address;
    if (*(_DWORD *)address <= 0x13u)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v18 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)v243 = 136446466;
        *(_QWORD *)&v243[4] = "ipv4_parse";
        *(_WORD *)&v243[12] = 1024;
        *(_DWORD *)&v243[14] = *(_DWORD *)address;
        v19 = "%{public}s Received IPv4 packet with incorrect length %u";
LABEL_110:
        v33 = v243;
        goto LABEL_111;
      }
      goto LABEL_324;
    }
    *(_OWORD *)buf = *(_OWORD *)v15;
    *(_DWORD *)&buf[16] = *(_DWORD *)(v15 + 16);
    v34 = 4 * (buf[0] & 0xF);
    if (v34 < 0x14 || *(_DWORD *)address < v34)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v18 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)v243 = 136446466;
        *(_QWORD *)&v243[4] = "ipv4_parse";
        *(_WORD *)&v243[12] = 1024;
        *(_DWORD *)&v243[14] = v34;
        v19 = "%{public}s Invalid IPv4 header length: %u";
        goto LABEL_110;
      }
LABEL_324:
      nw_frame_finalize((uint64_t)v10);
      goto LABEL_325;
    }
    v35 = *(unsigned __int16 *)&buf[10];
    *(_WORD *)&buf[10] = 0;
    v36 = buf;
    if (v34 - 2 >= 0xE)
    {
      v57 = ((v34 - 2) >> 1) + 1;
      v58 = (uint16x4_t *)&buf[8];
      v59 = 0uLL;
      v60 = v57 & 0xFFFFFFF8;
      v61 = 0uLL;
      do
      {
        v59 = (int32x4_t)vaddw_u16((uint32x4_t)v59, v58[-1]);
        v61 = (int32x4_t)vaddw_u16((uint32x4_t)v61, *v58);
        v58 += 2;
        v60 -= 8;
      }
      while (v60);
      v37 = vaddvq_s32(vaddq_s32(v61, v59));
      if ((v57 & 0xFFFFFFF8) == v57)
        goto LABEL_85;
      v36 = &buf[2 * (v57 & 0xFFFFFFF8)];
      v38 = v34 - 2 * (v57 & 0xFFFFFFF8);
    }
    else
    {
      v37 = 0;
      v38 = 4 * (buf[0] & 0xF);
    }
    v62 = v38 + 2;
    do
    {
      v63 = *(unsigned __int16 *)v36;
      v36 += 2;
      v37 += v63;
      v62 -= 2;
    }
    while (v62 > 3);
LABEL_85:
    if (v35 != (unsigned __int16)~(HIWORD(v37) + v37 + ((HIWORD(v37) + (unsigned __int16)v37) >> 16)))
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v18 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)v243 = 136446466;
        *(_QWORD *)&v243[4] = "ipv4_parse";
        *(_WORD *)&v243[12] = 1024;
        *(_DWORD *)&v243[14] = v35;
        v19 = "%{public}s Invalid ipv4 header checksum 0x%x";
        goto LABEL_110;
      }
      goto LABEL_324;
    }
    v64 = bswap32(*(unsigned __int16 *)&buf[2]) >> 16;
    if (*(_DWORD *)address < v64)
    {
      v42 = __nwlog_obj();
      if (!os_log_type_enabled(v42, OS_LOG_TYPE_INFO))
        goto LABEL_324;
      *(_DWORD *)v243 = 136446722;
      *(_QWORD *)&v243[4] = "ipv4_parse";
      *(_WORD *)&v243[12] = 1024;
      *(_DWORD *)&v243[14] = v64;
      *(_WORD *)&v243[18] = 1024;
      *(_DWORD *)&v243[20] = *(_DWORD *)address;
      v43 = "%{public}s Received IPv4 packet with incorrect length, expected %u received %u";
      v44 = v243;
      goto LABEL_46;
    }
    if (*(_DWORD *)address > v64)
    {
      if (gLogDatapath)
      {
        v185 = __nwlog_obj();
        v186 = os_log_type_enabled(v185, OS_LOG_TYPE_DEBUG);
        v17 = *(_DWORD *)address;
        if (v186)
        {
          *(_DWORD *)v243 = 136446722;
          *(_QWORD *)&v243[4] = "ipv4_parse";
          *(_WORD *)&v243[12] = 1024;
          *(_DWORD *)&v243[14] = v64;
          *(_WORD *)&v243[18] = 1024;
          *(_DWORD *)&v243[20] = *(_DWORD *)address;
          _os_log_impl(&dword_182FBE000, v185, OS_LOG_TYPE_DEBUG, "%{public}s Received length mismatch with IP total length %u != %u", v243, 0x18u);
          v17 = *(_DWORD *)address;
        }
      }
      nw_frame_claim((uint64_t)v10, v16, 0, v17 - v64);
    }
    if ((buf[12] & 0xF0) == 0xE0)
    {
      v80 = __nwlog_obj();
      if (!os_log_type_enabled(v80, OS_LOG_TYPE_INFO))
        goto LABEL_324;
      *(_DWORD *)v243 = 136446210;
      *(_QWORD *)&v243[4] = "ipv4_parse";
      v75 = "%{public}s Invalid source address";
      v76 = v243;
      goto LABEL_120;
    }
    v21 = (*(_WORD *)&buf[6] & 0xFF3F) != 0;
    v125 = *(_WORD *)&buf[4];
    if ((*(_WORD *)&buf[6] & 0xFF3F) == 0)
      v125 = 0;
    v23 = v125;
    v22 = *(unsigned __int16 *)&buf[6] == 32;
    v225 = buf[9];
    *(_WORD *)__src[0].sa_data = 0;
    *(_QWORD *)&__src[0].sa_data[6] = 0;
    *(_WORD *)&__src[0].sa_len = 528;
    *(_DWORD *)&__src[0].sa_data[2] = *(_DWORD *)&buf[12];
    *(_DWORD *)&__dst[0].sa_len = 528;
    *(_QWORD *)&__dst[0].sa_data[6] = 0;
    *(_DWORD *)&__dst[0].sa_data[2] = *(_DWORD *)&buf[16];
    v82 = (uint64_t)v10;
    v83 = v34;
    goto LABEL_214;
  }
  *(_DWORD *)v243 = 0;
  v30 = nw_frame_unclaimed_bytes((uint64_t)v10, v243);
  v32 = *(_DWORD *)v243;
  if (*(_DWORD *)v243 <= 0x27u)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v18 = gLogObj;
    if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
      goto LABEL_324;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "ipv6_parse";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = *(_DWORD *)v243;
    v19 = "%{public}s Received IPv6 packet with incorrect length %u";
    goto LABEL_38;
  }
  v39 = v30;
  v40 = bswap32(*(unsigned __int16 *)(v30 + 4)) >> 16;
  v41 = v40 + 40;
  if ((v40 + 40) > *(_DWORD *)v243)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v42 = gLogObj;
    if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
      goto LABEL_324;
    *(_DWORD *)buf = 136446722;
    *(_QWORD *)&buf[4] = "ipv6_parse";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v41;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = *(_DWORD *)v243;
    v43 = "%{public}s Received IPv6 packet with incorrect length, expected %u received %u";
    v44 = buf;
LABEL_46:
    _os_log_impl(&dword_182FBE000, v42, OS_LOG_TYPE_INFO, v43, v44, 0x18u);
    goto LABEL_324;
  }
  if (v40 + 80 < (unint64_t)*(unsigned int *)v243)
  {
    if (gLogDatapath)
    {
      v179 = __nwlog_obj();
      v180 = os_log_type_enabled(v179, OS_LOG_TYPE_DEBUG);
      v32 = *(_DWORD *)v243;
      if (v180)
      {
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = "ipv6_parse";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v41;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = *(_DWORD *)v243;
        _os_log_impl(&dword_182FBE000, v179, OS_LOG_TYPE_DEBUG, "%{public}s Received length mismatch with IPv6 %u != %u", buf, 0x18u);
        v32 = *(_DWORD *)v243;
      }
    }
    nw_frame_claim((uint64_t)v10, v31, 0, v32 - v41);
  }
  v225 = *(unsigned __int8 *)(v39 + 6);
  if (v225 == 44)
  {
    v22 = *(unsigned __int16 *)(v39 + 42) == 256;
    v23 = *(_DWORD *)(v39 + 44);
    v225 = *(unsigned __int8 *)(v39 + 40);
    v21 = 1;
  }
  else
  {
    v21 = 0;
    v22 = 0;
    v23 = 0;
  }
  v65 = *(_DWORD *)(v39 + 8);
  v66 = *(_DWORD *)(v39 + 12);
  v67 = *(_DWORD *)(v39 + 16);
  if (*(_QWORD *)(v39 + 8))
    v68 = 0;
  else
    v68 = v67 == -65536;
  v69 = v68;
  if (*(_BYTE *)(v39 + 8) == 0xFF || v69)
  {
    v74 = __nwlog_obj();
    if (!os_log_type_enabled(v74, OS_LOG_TYPE_ERROR))
      goto LABEL_324;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "ipv6_parse";
    v75 = "%{public}s Invalid source address";
LABEL_107:
    v76 = buf;
    v77 = v74;
    v78 = OS_LOG_TYPE_ERROR;
LABEL_121:
    _os_log_impl(&dword_182FBE000, v77, v78, v75, v76, 0xCu);
    goto LABEL_324;
  }
  v70 = *(_DWORD *)(v39 + 20);
  *(_QWORD *)&__src[0].sa_len = 7708;
  *(_QWORD *)&__src[1].sa_data[2] = v70;
  *(_DWORD *)&__src[0].sa_data[6] = v65;
  *(_DWORD *)&__src[0].sa_data[10] = v66;
  *(_DWORD *)&__src[1].sa_len = v67;
  if ((v65 & 0xC0FF) == 0x80FE)
  {
    *(_DWORD *)&__src[1].sa_data[6] = v12;
    loga = __nwlog_obj();
    if (os_log_type_enabled(loga, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446978;
      *(_QWORD *)&buf[4] = "ipv6_parse";
      *(_WORD *)&buf[12] = 1040;
      *(_DWORD *)&buf[14] = __src[0].sa_len;
      *(_WORD *)&buf[18] = 2096;
      *(_QWORD *)&buf[20] = __src;
      *(_WORD *)&buf[28] = 1024;
      *(_DWORD *)&buf[30] = v12;
      _os_log_impl(&dword_182FBE000, loga, OS_LOG_TYPE_DEBUG, "%{public}s Set scopeid for src %{network:sockaddr}.*P to %u", buf, 0x22u);
    }
  }
  v71 = *(_DWORD *)(v39 + 24);
  v72 = *(_DWORD *)(v39 + 28);
  v73 = *(_DWORD *)(v39 + 32);
  if (!__PAIR64__(v72, v71) && v73 == -65536)
  {
    v74 = __nwlog_obj();
    if (!os_log_type_enabled(v74, OS_LOG_TYPE_ERROR))
      goto LABEL_324;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "ipv6_parse";
    v75 = "%{public}s Invalid destination address";
    goto LABEL_107;
  }
  v81 = *(_DWORD *)(v39 + 36);
  *(_QWORD *)&__dst[0].sa_len = 7708;
  *(_QWORD *)&__dst[1].sa_data[2] = v81;
  *(_DWORD *)&__dst[0].sa_data[6] = v71;
  *(_DWORD *)&__dst[0].sa_data[10] = v72;
  *(_DWORD *)&__dst[1].sa_len = v73;
  if ((v71 & 0xC0FF) == 0x80FE)
  {
    *(_DWORD *)&__dst[1].sa_data[6] = v12;
    logb = __nwlog_obj();
    if (os_log_type_enabled(logb, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446978;
      *(_QWORD *)&buf[4] = "ipv6_parse";
      *(_WORD *)&buf[12] = 1040;
      *(_DWORD *)&buf[14] = __dst[0].sa_len;
      *(_WORD *)&buf[18] = 2096;
      *(_QWORD *)&buf[20] = __dst;
      *(_WORD *)&buf[28] = 1024;
      *(_DWORD *)&buf[30] = v12;
      _os_log_impl(&dword_182FBE000, logb, OS_LOG_TYPE_DEBUG, "%{public}s Set scopeid for dst %{network:sockaddr}.*P to %u", buf, 0x22u);
    }
  }
  nw_frame_claim((uint64_t)v10, v31, 40, 0);
  if (*(_BYTE *)(v39 + 6) != 44)
    goto LABEL_215;
  v82 = (uint64_t)v10;
  v83 = 8;
LABEL_214:
  nw_frame_claim(v82, v16, v83, 0);
LABEL_215:
  if (v225 != *((unsigned __int8 *)v9 + 166))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v56 = (id)gLogObj;
    if (os_log_type_enabled(v56, OS_LOG_TYPE_INFO))
    {
      v126 = *((unsigned __int8 *)v9 + 166);
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = "nw_ip_channel_inbox_handle_input_frame";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v225;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v126;
      _os_log_impl(&dword_182FBE000, v56, OS_LOG_TYPE_INFO, "%{public}s Received IP packet with protocol %u != %u", buf, 0x18u);
    }
    goto LABEL_78;
  }
  v11 = *((_DWORD *)v9 + 14);
LABEL_14:
  if ((v11 & 0xFFFFFFFE) != 2)
    goto LABEL_148;
  if (!v21 || v22)
  {
    v27 = v225;
    if (v225 == 17)
    {
      *(_DWORD *)v243 = 0;
      v46 = (__int16 *)nw_frame_unclaimed_bytes((uint64_t)v10, v243);
      if (*(_DWORD *)v243 < 8u
        || (v47 = *v46, v48 = v46[1], *(_DWORD *)v243 < bswap32((unsigned __int16)v46[2]) >> 16) && !v21)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v29 = gLogObj;
        if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
          goto LABEL_324;
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_udp_parse";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = *(_DWORD *)v243;
        v19 = "%{public}s Received UDP packet with incorrect length %u";
        goto LABEL_55;
      }
      sa_family = __src[0].sa_family;
      if (__src[0].sa_family == 30 && !v46[3])
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v80 = gLogObj;
        if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
          goto LABEL_324;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_udp_parse";
        v75 = "%{public}s Received IPv6 UDP packet with 0 checksum";
        goto LABEL_119;
      }
      if (!v21)
      {
        if (__src[0].sa_family == 2)
          v84 = &__src[0].sa_data[2];
        else
          v84 = &__src[0].sa_data[6];
        if (__dst[0].sa_family == 2)
          v85 = &__dst[0].sa_data[2];
        else
          v85 = &__dst[0].sa_data[6];
        if ((udp_validate_cksum_internal((uint64_t)v10, *(unsigned int *)v243, (unsigned __int16 *)v84, (unsigned __int16 *)v85, __src[0].sa_family == 30, 0) & 1) == 0)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v80 = gLogObj;
          if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
            goto LABEL_324;
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_udp_parse";
          v75 = "%{public}s Received UDP packet with invalid checksum";
LABEL_119:
          v76 = buf;
LABEL_120:
          v77 = v80;
          v78 = OS_LOG_TYPE_INFO;
          goto LABEL_121;
        }
        sa_family = __src[0].sa_family;
      }
      if (sa_family != 30 && sa_family != 2)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v29 = gLogObj;
        if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
          goto LABEL_324;
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_udp_parse";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = __src[0].sa_family;
        v19 = "%{public}s Unsuppposed address family: %u";
        goto LABEL_55;
      }
      *(_WORD *)__src[0].sa_data = v47;
      *(_WORD *)__dst[0].sa_data = v48;
      v27 = 17;
LABEL_145:
      if (a5 && v22)
      {
        *((_DWORD *)a5 + 14) = v23;
        a5[60] = v27;
        memcpy(a5, __src, __src[0].sa_len);
        memcpy(a5 + 28, __dst, __dst[0].sa_len);
      }
      goto LABEL_148;
    }
    if (v225 != 6)
      goto LABEL_145;
    if (__dst[0].sa_family == 2)
    {
      if ((__dst[0].sa_data[2] & 0xF0) != 0xE0)
        goto LABEL_30;
    }
    else if (__dst[0].sa_family != 30 || __dst[0].sa_data[6] != 255)
    {
LABEL_30:
      *(_DWORD *)v243 = 0;
      v28 = (unsigned __int16 *)nw_frame_unclaimed_bytes((uint64_t)v10, v243);
      if (*(_DWORD *)v243 <= 0x13u)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v29 = gLogObj;
        if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
          goto LABEL_324;
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_tcp_parse_syn";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = *(_DWORD *)v243;
        v19 = "%{public}s Received TCP packet with incorrect length %u";
LABEL_55:
        v33 = buf;
        v49 = v29;
        v50 = OS_LOG_TYPE_ERROR;
LABEL_112:
        _os_log_impl(&dword_182FBE000, v49, v50, v19, v33, 0x12u);
        goto LABEL_324;
      }
      v51 = *v28;
      v52 = v28[1];
      v53 = *((unsigned __int8 *)v28 + 12);
      log = *((unsigned __int8 *)v28 + 13);
      if (__src[0].sa_family == 2)
        v54 = &__src[0].sa_data[2];
      else
        v54 = &__src[0].sa_data[6];
      if (__dst[0].sa_family == 2)
        v55 = &__dst[0].sa_data[2];
      else
        v55 = &__dst[0].sa_data[6];
      if ((validate_tcp_cksum((uint64_t)v10, *(unsigned int *)v243, (unsigned int *)v54, (unsigned int *)v55, v51, v52, __dst[0].sa_family == 30) & 1) == 0)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v80 = gLogObj;
        if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
          goto LABEL_324;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_tcp_parse_syn";
        v75 = "%{public}s invalid tcp checksum";
        goto LABEL_119;
      }
      if (v53 < 0x50 || *(_DWORD *)v243 < ((v53 >> 2) & 0x3C))
      {
        v121 = (v53 >> 2) & 0x3C;
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v18 = gLogObj;
        if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
          goto LABEL_324;
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_tcp_parse_syn";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v121;
        v19 = "%{public}s invalid tcp offset: %u";
      }
      else
      {
        if (__src[0].sa_family == 30)
        {
          *(_WORD *)__src[0].sa_data = v51;
          v27 = v225;
          goto LABEL_226;
        }
        v27 = v225;
        if (__src[0].sa_family == 2)
        {
          *(_WORD *)__src[0].sa_data = v51;
LABEL_226:
          *(_WORD *)__dst[0].sa_data = v52;
          if ((~log & 3) == 0)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v80 = gLogObj;
            if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
              goto LABEL_324;
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_tcp_parse_syn";
            v75 = "%{public}s Dropping SYN|FIN";
            goto LABEL_119;
          }
          if ((log & 0x16) != 2)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v130 = gLogObj;
            if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_tcp_parse_syn";
              _os_log_impl(&dword_182FBE000, v130, OS_LOG_TYPE_INFO, "%{public}s Non SYN packet delivered to listener", buf, 0xCu);
            }
            if ((log & 4) == 0)
              nw_tcp_respond_reset((uint64_t)v10, a2, (uint64_t)(v9 + 11), (uint64_t)__dst, (uint64_t)__src);
            goto LABEL_324;
          }
          goto LABEL_145;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v18 = gLogObj;
        if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
          goto LABEL_324;
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_tcp_parse_syn";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = __src[0].sa_family;
        v19 = "%{public}s Unsuppposed address family: %u";
      }
LABEL_38:
      v33 = buf;
LABEL_111:
      v49 = v18;
      v50 = OS_LOG_TYPE_INFO;
      goto LABEL_112;
    }
    __nwlog_obj();
    v56 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v56, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_ip_channel_inbox_handle_input_frame";
      _os_log_impl(&dword_182FBE000, v56, OS_LOG_TYPE_INFO, "%{public}s Received TCP packet with multicast destination address", buf, 0xCu);
    }
LABEL_78:

    goto LABEL_324;
  }
  if (a5)
  {
    if (v23 != *((_DWORD *)a5 + 14)
      || (v25 = a5[1], v25 != __src[0].sa_family)
      || (v26 = *a5, (_DWORD)v26 != __src[0].sa_len))
    {
LABEL_321:
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v175 = (id)gLogObj;
      if (os_log_type_enabled(v175, OS_LOG_TYPE_INFO))
      {
        v176 = *((_DWORD *)a5 + 14);
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = "nw_ip_channel_inbox_handle_input_frame";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v23;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = v176;
        _os_log_impl(&dword_182FBE000, v175, OS_LOG_TYPE_INFO, "%{public}s Invalid fragment ID being dropped %u (expecting %u)", buf, 0x18u);
      }

      goto LABEL_324;
    }
    if (v25 == 30)
    {
      if (*((_QWORD *)a5 + 1) != *(_QWORD *)&__src[0].sa_data[6] || *((_QWORD *)a5 + 2) != *(_QWORD *)&__src[1].sa_len)
        goto LABEL_321;
    }
    else if (v25 != 2 || *((_DWORD *)a5 + 1) != *(_DWORD *)&__src[0].sa_data[2])
    {
      goto LABEL_321;
    }
    v123 = a5[29];
    if (v123 != __dst[0].sa_family)
      goto LABEL_321;
    v124 = a5[28];
    if ((_DWORD)v124 != __dst[0].sa_len)
      goto LABEL_321;
    if (v123 == 30)
    {
      if (*(_QWORD *)(a5 + 36) != *(_QWORD *)&__dst[0].sa_data[6]
        || *(_QWORD *)(a5 + 44) != *(_QWORD *)&__dst[1].sa_len)
      {
        goto LABEL_321;
      }
    }
    else if (v123 != 2 || *((_DWORD *)a5 + 8) != *(_DWORD *)&__dst[0].sa_data[2])
    {
      goto LABEL_321;
    }
    v225 = a5[60];
    memcpy(__src, a5, v26);
    memcpy(__dst, a5 + 28, v124);
    if (!object)
      goto LABEL_151;
    goto LABEL_149;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v45 = (id)gLogObj;
  if (os_log_type_enabled(v45, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "nw_ip_channel_inbox_handle_input_frame";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v23;
    _os_log_impl(&dword_182FBE000, v45, OS_LOG_TYPE_INFO, "%{public}s Invalid fragment ID being dropped %u", buf, 0x12u);
  }

LABEL_148:
  if (object)
  {
LABEL_149:
    if (*((_QWORD *)object + 3) != *((_QWORD *)object + 2))
    {
      v237[0] = MEMORY[0x1E0C809B0];
      v237[1] = 3221225472;
      v237[2] = ___ZL38nw_ip_channel_inbox_handle_input_frameP19nw_ip_channel_inboxP11nw_protocolPU22objcproto11OS_nw_frame8NSObjectPU22objcproto11OS_nw_arrayS3_P27nw_ip_channel_fragment_info_block_invoke;
      v237[3] = &unk_1E14A4A50;
      *(sockaddr *)v239 = __src[0];
      *(sockaddr *)&v239[12] = *(sockaddr *)&__src[0].sa_data[10];
      *(sockaddr *)v240 = __dst[0];
      *(sockaddr *)&v240[12] = *(sockaddr *)&__dst[0].sa_data[10];
      v238 = v10;
      v86 = nw_array_apply(object, (uint64_t)v237);

      if (!v86)
        goto LABEL_325;
    }
  }
LABEL_151:
  logc = nw_endpoint_create_address(__src);
  v87 = nw_endpoint_create_address(__dst);
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v88 = (id)gLogObj;
  if (os_log_type_enabled(v88, OS_LOG_TYPE_DEBUG))
  {
    description = nw_endpoint_get_description(v87);
    logging_description = nw_endpoint_get_logging_description(logc);
    *(_DWORD *)buf = 136446722;
    *(_QWORD *)&buf[4] = "nw_ip_channel_inbox_handle_input_frame";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = description;
    *(_WORD *)&buf[22] = 2082;
    *(_QWORD *)&buf[24] = logging_description;
    _os_log_impl(&dword_182FBE000, v88, OS_LOG_TYPE_DEBUG, "%{public}s Looking up %{public}s<->%{public}s", buf, 0x20u);
  }

  v91 = v9;
  v92 = (void **)v91;
  if (*((unsigned __int16 *)v91 + 82) != *(unsigned __int16 *)__dst[0].sa_data)
    goto LABEL_169;
  if ((v91[167] & 1) == 0)
    goto LABEL_155;
  v95 = *((_QWORD *)v91 + 19);
  if (!v95)
  {
LABEL_169:

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v100 = (id)gLogObj;
    if (os_log_type_enabled(v100, OS_LOG_TYPE_INFO))
    {
      v101 = nw_endpoint_get_description(v87);
      v102 = nw_endpoint_get_logging_description(logc);
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = "nw_ip_channel_inbox_handle_input_frame";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v101;
      *(_WORD *)&buf[22] = 2082;
      *(_QWORD *)&buf[24] = v102;
      _os_log_impl(&dword_182FBE000, v100, OS_LOG_TYPE_INFO, "%{public}s packet %{public}s<-%{public}s does not match listener", buf, 0x20u);
    }

    goto LABEL_324;
  }
  v96 = *(unsigned __int8 *)(v95 + 1);
  if (__dst[0].sa_family == 2 && v96 == 2)
  {
    if (*(_DWORD *)(v95 + 4) != *(_DWORD *)&__dst[0].sa_data[2])
      goto LABEL_169;
  }
  else
  {
    if (__dst[0].sa_family != 30 || v96 != 30)
      goto LABEL_169;
    v98 = *(_QWORD *)(v95 + 8);
    v97 = *(_QWORD *)(v95 + 16);
    if (v98 != *(_QWORD *)&__dst[0].sa_data[6] || v97 != *(_QWORD *)&__dst[1].sa_len)
      goto LABEL_169;
  }
LABEL_155:

  if (nw_parameters_get_upper_transport_protocol(v92[6]) != 253)
    goto LABEL_254;
  v236 = 0;
  nw_parameters_get_upper_transport_protocol_options(v92[6]);
  parameters = (nw_parameters_t)objc_claimAutoreleasedReturnValue();
  if (nw_protocol_options_is_quic_stream(parameters))
  {
    v93 = nw_quic_stream_copy_shared_connection_options(parameters);
    source_connection_id_length = nw_quic_connection_get_source_connection_id_length(v93);

  }
  else if (nw_protocol_options_is_quic_connection(parameters))
  {
    source_connection_id_length = nw_quic_connection_get_source_connection_id_length(parameters);
  }
  else
  {
    source_connection_id_length = 0;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v103 = (id)gLogObj;
  if (os_log_type_enabled(v103, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "nw_ip_channel_inbox_handle_input_frame";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = source_connection_id_length;
    _os_log_impl(&dword_182FBE000, v103, OS_LOG_TYPE_DEBUG, "%{public}s Using CID length %u", buf, 0x12u);
  }

  *(_DWORD *)buf = 0;
  v104 = nw_frame_unclaimed_bytes((uint64_t)v10, buf);
  v105 = (*(_DWORD *)buf - 8);
  if (*(_DWORD *)buf <= 8u
    || (*(_DWORD *)buf -= 8,
        !nw_quic_parse_internal((const unsigned __int8 *)(v104 + 8), v105, source_connection_id_length, (dispatch_data_t *)&v236)))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v108 = (id)gLogObj;
    if (os_log_type_enabled(v108, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_ip_channel_inbox_handle_input_frame";
      _os_log_impl(&dword_182FBE000, v108, OS_LOG_TYPE_DEBUG, "%{public}s Unable to parse connection ID", buf, 0xCu);
    }
    goto LABEL_253;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v106 = (id)gLogObj;
  if (os_log_type_enabled(v106, OS_LOG_TYPE_DEFAULT))
  {
    v107 = v92[5];
    *(_DWORD *)buf = 136447234;
    *(_QWORD *)&buf[4] = "nw_ip_channel_inbox_handle_input_frame";
    *(_WORD *)&buf[12] = 2112;
    *(_QWORD *)&buf[14] = v107;
    *(_WORD *)&buf[22] = 2112;
    *(_QWORD *)&buf[24] = v236;
    *(_WORD *)&buf[32] = 2112;
    *(_QWORD *)&buf[34] = logc;
    *(_WORD *)&buf[42] = 2112;
    *(_QWORD *)&buf[44] = v87;
    _os_log_impl(&dword_182FBE000, v106, OS_LOG_TYPE_DEFAULT, "%{public}s Received QUIC short header packet on interface %@ with CID %@ [%@->%@]", buf, 0x34u);
  }

  if (nw_protocol_copy_quic_stream_definition::onceToken != -1)
    dispatch_once(&nw_protocol_copy_quic_stream_definition::onceToken, &__block_literal_global_12_55083);
  v108 = (id)nw_protocol_copy_quic_stream_definition::quic_definition;
  identifier = (__int128 *)nw_protocol_definition_get_identifier(v108);
  *(_QWORD *)&address[12] = 0;
  *(_QWORD *)&address[4] = 0;
  v246 = 0;
  *(_WORD *)&address[2] = *((_WORD *)v92 + 82);
  *(_WORD *)address = 7708;
  v220 = nw_parameters_copy_context(v92[6]);
  v218 = nw_endpoint_create_address((const sockaddr *)address);
  type = nw_context_copy_registered_endpoint(v220, v218);
  v110 = nw_endpoint_copy_registrar_for_identifier(type, identifier, 0);
  v111 = v110;
  if (!v110)
    goto LABEL_252;
  quic_instance_by_id = nw_protocol_instance_registrar_find_quic_instance_by_id(v110, v236);
  if (!quic_instance_by_id)
    goto LABEL_252;
  v208 = (_QWORD *)quic_instance_by_id;
  v209 = v111;
  __nwlog_obj();
  v113 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v113, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_ip_channel_inbox_handle_input_frame";
    _os_log_impl(&dword_182FBE000, v113, OS_LOG_TYPE_INFO, "%{public}s Found an existing QUIC connection, adding a new path", buf, 0xCu);
  }

  v111 = v209;
  v114 = v208[3];
  if (!v114 || (v115 = *(void (**)(void))(v114 + 120)) == 0)
  {
LABEL_252:

LABEL_253:
LABEL_254:
    v139 = v92[6];
    parametersa = -[NWConcrete_nw_parameters initWithParameters:stripConnected:shallowCopy:]((id *)[NWConcrete_nw_parameters alloc], v139, 0, 0);

    if (__dst[0].sa_family == 2)
    {
      if ((__dst[0].sa_data[2] & 0xF0) == 0xE0)
        goto LABEL_270;
      v140 = v92[5];
      v141 = &__dst[0].sa_data[2];
    }
    else
    {
      if (__dst[0].sa_family != 30)
      {
        v140 = v92[5];
        goto LABEL_281;
      }
      if (__dst[0].sa_data[6] == 255)
        goto LABEL_270;
      v140 = v92[5];
      if (*(_DWORD *)&__dst[0].sa_data[6] || *(_DWORD *)&__dst[0].sa_data[10] || *(_DWORD *)&__dst[1].sa_len != -65536)
      {
LABEL_281:

        nw_parameters_set_local_endpoint(parametersa, v87);
        nw_parameters_set_reuse_local_address(parametersa, 1);
        v149 = v92[4];
        if (v149)
        {
          *(_QWORD *)buf = 0;
          *(_QWORD *)&buf[8] = 0;
          v150 = v149;
          *(_OWORD *)buf = *(_OWORD *)(v150 + 28);

          if (!uuid_is_null(buf))
            nw_parameters_require_netagent_uuid(parametersa, buf);
        }
        if (!objc_msgSend(v92[1], "canHandleNewConnection:", v92, v197, v198))
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v168 = (id)gLogObj;
          if (os_log_type_enabled(v168, OS_LOG_TYPE_INFO))
          {
            v169 = nw_endpoint_get_description(v87);
            v170 = nw_endpoint_get_logging_description(logc);
            *(_DWORD *)buf = 136446722;
            *(_QWORD *)&buf[4] = "nw_ip_channel_inbox_handle_input_frame";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v169;
            *(_WORD *)&buf[22] = 2082;
            *(_QWORD *)&buf[24] = v170;
            _os_log_impl(&dword_182FBE000, v168, OS_LOG_TYPE_INFO, "%{public}s Dropping %{public}s<-%{public}s, listener can't handle new connections", buf, 0x20u);
          }

          goto LABEL_324;
        }
        *(_QWORD *)address = 0;
        *(_QWORD *)&address[8] = 0;
        v151 = v92;
        v87 = v87;
        v221 = logc;
        v152 = parametersa;
        v219 = object;
        v212 = v151;
        uuid_clear(address);
        *(_QWORD *)v243 = 0;
        *(_QWORD *)&v243[8] = 0;
        nw_path_get_client_id(v151[8], v243);
        nw_parameters_set_parent_id_inner(v152, v243, 0);
        nw_parameters_set_server_mode(v152, 1);
        typea = nw_parameters_copy_default_protocol_stack(&v152->super);
        v153 = nw_protocol_stack_copy_transport_protocol(typea);
        if (nw_protocol_options_is_tcp(v153) && !nw_tcp_options_get_connection_timeout(v153))
        {
          int64_with_default = networkd_settings_get_int64_with_default((const char *)nw_setting_tcp_accept_timeout_seconds, 5);
          if (int64_with_default)
            nw_tcp_options_set_connection_timeout(v153, int64_with_default);
        }
        objc_msgSend(v92[1], "updateParametersForNewConnection:", v152);
        v155 = nw_parameters_copy_description_internal(v152, 1);
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v156 = (id)gLogObj;
        if (os_log_type_enabled(v156, OS_LOG_TYPE_INFO))
        {
          v157 = v92[1];
          v158 = nw_endpoint_get_description(v87);
          v159 = nw_endpoint_get_logging_description(v221);
          *(_DWORD *)buf = 136447234;
          *(_QWORD *)&buf[4] = "nw_ip_channel_inbox_handle_new_flow";
          *(_WORD *)&buf[12] = 2112;
          *(_QWORD *)&buf[14] = v157;
          *(_WORD *)&buf[22] = 2082;
          *(_QWORD *)&buf[24] = v158;
          *(_WORD *)&buf[32] = 2082;
          *(_QWORD *)&buf[34] = v159;
          *(_WORD *)&buf[42] = 2082;
          *(_QWORD *)&buf[44] = v155;
          _os_log_impl(&dword_182FBE000, v156, OS_LOG_TYPE_INFO, "%{public}s Listener %@ received new flow %{public}s<-%{public}s %{public}s", buf, 0x34u);
        }

        if (v155)
          free(v155);
        v160 = (char *)objc_msgSend(v92[1], "getPeerDeviceID");
        if (v160)
        {
          nw_endpoint_set_device_id(v221, v160);
          free(v160);
        }
        v161 = nw_connection_create_from_protocol_on_nw_queue(v221, v152, 0);
        v162 = v161;
        if (v161)
        {
          v163 = v161;
          nw_context_assert_queue(v163[3]);
          flow_id = nw_endpoint_handler_get_flow_id(v163[18], address);

          if ((flow_id & 1) != 0)
          {
            if (object)
              nw_array_append((uint64_t)v219, v163);
            objc_msgSend(v92[1], "handleInbound:addProtocolInbox:", v163, nw_parameters_get_attach_protocol_listener(v152));

            if (uuid_is_null(address))
            {
              __nwlog_obj();
              v165 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v165, OS_LOG_TYPE_INFO))
              {
                v166 = nw_endpoint_get_description(v87);
                v167 = nw_endpoint_get_logging_description(v221);
                *(_DWORD *)buf = 136446978;
                *(_QWORD *)&buf[4] = "nw_ip_channel_inbox_handle_input_frame";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = v166;
                *(_WORD *)&buf[22] = 2082;
                *(_QWORD *)&buf[24] = v167;
                *(_WORD *)&buf[32] = 1024;
                *(_DWORD *)&buf[34] = v225;
                _os_log_impl(&dword_182FBE000, v165, OS_LOG_TYPE_INFO, "%{public}s No flow id for new inbound connection %{public}s<-%{public}s %u", buf, 0x26u);
              }
              goto LABEL_311;
            }
            nw_frame_reclassify((uint64_t)v10, (uint64_t)address);

LABEL_316:
LABEL_325:

            return;
          }
          __nwlog_obj();
          v171 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v171, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_ip_channel_inbox_handle_new_flow";
            v172 = "%{public}s nw_connection_get_flow_id_on_nw_queue failed";
            goto LABEL_309;
          }
        }
        else
        {
          __nwlog_obj();
          v171 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v171, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_ip_channel_inbox_handle_new_flow";
            v172 = "%{public}s nw_connection_create_from_protocol_on_nw_queue failed";
LABEL_309:
            _os_log_impl(&dword_182FBE000, v171, OS_LOG_TYPE_ERROR, v172, buf, 0xCu);
          }
        }

        v165 = v212;
LABEL_311:

        goto LABEL_324;
      }
      v141 = &__dst[1].sa_data[2];
    }
    v142 = *(_DWORD *)v141;
    if (*(_DWORD *)v141 == -1
      || v140
      && (buf[0] = 0,
          v243[0] = 0,
          ipv4_netmask = nw_interface_get_ipv4_netmask(v140, buf),
          ipv4_broadcast = nw_interface_get_ipv4_broadcast(v140, v243),
          v243[0])
      && (v142 == ipv4_broadcast || buf[0] && (ipv4_broadcast & ipv4_netmask) == v142))
    {

LABEL_270:
      address_family = nw_endpoint_get_address_family(logc);
      if (address_family == 30)
      {
        memset(&buf[4], 0, 24);
        *(_WORD *)buf = 7708;
        *(_WORD *)&buf[2] = *(_WORD *)__dst[0].sa_data;
        v146 = nw_endpoint_create_address((const sockaddr *)buf);

      }
      else
      {
        if (address_family != 2)
          goto LABEL_276;
        *(_WORD *)buf = 528;
        *(_WORD *)&buf[2] = *(_WORD *)__dst[0].sa_data;
        *(_DWORD *)&buf[4] = 0;
        *(_QWORD *)&buf[8] = 0;
        v146 = nw_endpoint_create_address((const sockaddr *)buf);

      }
      v87 = v146;
LABEL_276:
      v140 = nw_parameters_copy_default_protocol_stack(parametersa);
      v147 = nw_protocol_stack_copy_transport_protocol(v140);
      if (!nw_protocol_options_is_udp(v147))
      {
LABEL_280:

        goto LABEL_281;
      }
      v148 = v147;
      if (nw_protocol_options_is_udp(v148))
      {
        *(_QWORD *)buf = MEMORY[0x1E0C809B0];
        *(_QWORD *)&buf[8] = 3221225472;
        *(_QWORD *)&buf[16] = __nw_udp_options_set_ignore_inbound_checksum_block_invoke;
        *(_QWORD *)&buf[24] = &__block_descriptor_33_e9_B16__0_v8l;
        buf[32] = 1;
        nw_protocol_options_access_handle(v148, buf);
LABEL_279:

        goto LABEL_280;
      }
      __nwlog_obj();
      v177 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_udp_options_set_ignore_inbound_checksum";
      LODWORD(v198) = 12;
      v197 = buf;
      v222 = (char *)_os_log_send_and_compose_impl();

      v243[0] = 16;
      address[0] = 0;
      if ((__nwlog_fault(v222, v243, address) & 1) != 0)
      {
        if (v243[0] == 17)
        {
          __nwlog_obj();
          v178 = objc_claimAutoreleasedReturnValue();
          typeb = v243[0];
          if (os_log_type_enabled(v178, (os_log_type_t)v243[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_udp_options_set_ignore_inbound_checksum";
            _os_log_impl(&dword_182FBE000, v178, typeb, "%{public}s called with null nw_protocol_options_is_udp(options)", buf, 0xCu);
          }
        }
        else
        {
          if (address[0])
          {
            backtrace_string = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            typec = objc_claimAutoreleasedReturnValue();
            v210 = v243[0];
            v182 = os_log_type_enabled(typec, (os_log_type_t)v243[0]);
            if (backtrace_string)
            {
              if (v182)
              {
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = "nw_udp_options_set_ignore_inbound_checksum";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = backtrace_string;
                _os_log_impl(&dword_182FBE000, typec, v210, "%{public}s called with null nw_protocol_options_is_udp(options), dumping backtrace:%{public}s", buf, 0x16u);
              }

              free(backtrace_string);
            }
            else
            {
              if (v182)
              {
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_udp_options_set_ignore_inbound_checksum";
                _os_log_impl(&dword_182FBE000, typec, v210, "%{public}s called with null nw_protocol_options_is_udp(options), no backtrace", buf, 0xCu);
              }

            }
            goto LABEL_358;
          }
          __nwlog_obj();
          v178 = objc_claimAutoreleasedReturnValue();
          typed = v243[0];
          if (os_log_type_enabled(v178, (os_log_type_t)v243[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_udp_options_set_ignore_inbound_checksum";
            _os_log_impl(&dword_182FBE000, v178, typed, "%{public}s called with null nw_protocol_options_is_udp(options), backtrace limit exceeded", buf, 0xCu);
          }
        }

      }
LABEL_358:
      if (v222)
        free(v222);
      goto LABEL_279;
    }
    goto LABEL_281;
  }
  v115();
  v211 = (void *)objc_claimAutoreleasedReturnValue();
  __nwlog_obj();
  v116 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v116, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "nw_ip_channel_inbox_handle_input_frame";
    *(_WORD *)&buf[12] = 2112;
    *(_QWORD *)&buf[14] = v211;
    _os_log_impl(&dword_182FBE000, v116, OS_LOG_TYPE_INFO, "%{public}s QUIC protocol peer path %@", buf, 0x16u);
  }

  *(_QWORD *)v243 = 0;
  *(_QWORD *)&v243[8] = v243;
  *(_QWORD *)&v243[16] = 0x2020000000;
  v244 = 0;
  v117 = malloc_type_calloc(1uLL, 0x10uLL, 0xEAFB8F1AuLL);
  v118 = v220;
  if (v117)
  {
LABEL_192:
    v244 = v117;
    v233[0] = MEMORY[0x1E0C809B0];
    v233[1] = 3221225472;
    v233[2] = ___ZL38nw_ip_channel_inbox_handle_input_frameP19nw_ip_channel_inboxP11nw_protocolPU22objcproto11OS_nw_frame8NSObjectPU22objcproto11OS_nw_arrayS3_P27nw_ip_channel_fragment_info_block_invoke_36;
    v233[3] = &unk_1E14A8CF8;
    v119 = v92;
    v234 = v119;
    v235 = v243;
    nw_path_enumerate_interface_options(v211, v233);
    is_null = uuid_is_null(*(const unsigned __int8 **)(*(_QWORD *)&v243[8] + 24));
    if (is_null)
    {
      __nwlog_obj();
      v120 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v120, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_ip_channel_inbox_handle_input_frame";
        _os_log_impl(&dword_182FBE000, v120, OS_LOG_TYPE_INFO, "%{public}s Did not find a matching interface", buf, 0xCu);
      }
      goto LABEL_248;
    }
    v120 = nw_path_copy_flow_registration(v118, (uint64_t)v208);
    if (v10 && (*(_DWORD *)buf = 0, (v127 = (const void *)nw_frame_unclaimed_bytes((uint64_t)v10, buf)) != 0))
    {
      v205 = dispatch_data_create(v127, *(unsigned int *)buf, 0, 0);
      nw_frame_claim((uint64_t)v10, v128, *(int *)buf, 0);
      v129 = v205;
    }
    else
    {
      v129 = 0;
    }
    v206 = v129;
    v131 = nw_interface_option_details_create(v119[5], *(_OWORD **)(*(_QWORD *)&v243[8] + 24), logc, 0, v129, -1);
    v204 = v131;
    if (v131)
    {
      nw_path_flow_registration_add_extra_interface_option(v120, v131);
    }
    else
    {
      v202 = v120;
      __nwlog_obj();
      v132 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v132, OS_LOG_TYPE_ERROR))
      {
        v133 = v119[5];
        v134 = *(_QWORD *)(*(_QWORD *)&v243[8] + 24);
        *(_DWORD *)buf = 136446978;
        *(_QWORD *)&buf[4] = "nw_ip_channel_inbox_handle_input_frame";
        *(_WORD *)&buf[12] = 2112;
        *(_QWORD *)&buf[14] = v133;
        *(_WORD *)&buf[22] = 1042;
        *(_DWORD *)&buf[24] = 16;
        *(_WORD *)&buf[28] = 2098;
        *(_QWORD *)&buf[30] = v134;
        _os_log_impl(&dword_182FBE000, v132, OS_LOG_TYPE_ERROR, "%{public}s Unable to create interface option details with %@ [%{public,uuid_t}.16P]", buf, 0x26u);
      }

      v120 = v202;
    }
    v135 = nw_path_flow_registration_copy_path(v120);
    v136 = v208[3];
    if (v136)
    {
      v137 = *(void (**)(_QWORD *, _QWORD, _BOOL8))(v136 + 168);
      if (v137)
      {
        v137(v208, v208[6], v135);
LABEL_247:

LABEL_248:
        v138 = *(void **)(*(_QWORD *)&v243[8] + 24);
        if (v138)
        {
          free(v138);
          *(_QWORD *)(*(_QWORD *)&v243[8] + 24) = 0;
        }
        if (!is_null)
        {
          __nwlog_obj();
          v173 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v173, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_ip_channel_inbox_handle_input_frame";
            _os_log_impl(&dword_182FBE000, v173, OS_LOG_TYPE_INFO, "%{public}s QUIC migration handled packet", buf, 0xCu);
          }

          nw_frame_finalize((uint64_t)v10);
          _Block_object_dispose(v243, 8);

          goto LABEL_316;
        }

        _Block_object_dispose(v243, 8);
        v111 = v209;
        goto LABEL_252;
      }
    }
    __nwlog_obj();
    v187 = objc_claimAutoreleasedReturnValue();
    v188 = (const char *)v208[2];
    if (!v188)
      v188 = "invalid";
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "nw_ip_channel_inbox_handle_input_frame";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v188;
    LODWORD(v198) = 22;
    v197 = buf;
    v189 = (void *)v187;
    v203 = (char *)_os_log_send_and_compose_impl();

    v232 = OS_LOG_TYPE_ERROR;
    v231 = 0;
    if (__nwlog_fault(v203, &v232, &v231))
    {
      if (v232 == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v190 = objc_claimAutoreleasedReturnValue();
        v199 = v232;
        if (os_log_type_enabled(v190, v232))
        {
          v191 = (const char *)v208[2];
          if (!v191)
            v191 = "invalid";
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_ip_channel_inbox_handle_input_frame";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v191;
          _os_log_impl(&dword_182FBE000, v190, v199, "%{public}s protocol %{public}s has invalid updated_path callback", buf, 0x16u);
        }
      }
      else
      {
        if (v231)
        {
          v192 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v200 = objc_claimAutoreleasedReturnValue();
          HIDWORD(v198) = v232;
          v193 = os_log_type_enabled(v200, v232);
          if (v192)
          {
            if (v193)
            {
              v194 = (const char *)v208[2];
              if (!v194)
                v194 = "invalid";
              *(_DWORD *)buf = 136446722;
              *(_QWORD *)&buf[4] = "nw_ip_channel_inbox_handle_input_frame";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v194;
              *(_WORD *)&buf[22] = 2082;
              *(_QWORD *)&buf[24] = v192;
              _os_log_impl(&dword_182FBE000, v200, BYTE4(v198), "%{public}s protocol %{public}s has invalid updated_path callback, dumping backtrace:%{public}s", buf, 0x20u);
            }

            free(v192);
          }
          else
          {
            if (v193)
            {
              v196 = (const char *)v208[2];
              if (!v196)
                v196 = "invalid";
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "nw_ip_channel_inbox_handle_input_frame";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v196;
              _os_log_impl(&dword_182FBE000, v200, BYTE4(v198), "%{public}s protocol %{public}s has invalid updated_path callback, no backtrace", buf, 0x16u);
            }

          }
          goto LABEL_377;
        }
        __nwlog_obj();
        v190 = objc_claimAutoreleasedReturnValue();
        v201 = v232;
        if (os_log_type_enabled(v190, v232))
        {
          v195 = (const char *)v208[2];
          if (!v195)
            v195 = "invalid";
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_ip_channel_inbox_handle_input_frame";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v195;
          _os_log_impl(&dword_182FBE000, v190, v201, "%{public}s protocol %{public}s has invalid updated_path callback, backtrace limit exceeded", buf, 0x16u);
        }
      }

    }
LABEL_377:
    if (v203)
      free(v203);
    goto LABEL_247;
  }
  __nwlog_obj();
  v183 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v183, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  *(_QWORD *)&buf[4] = "strict_calloc";
  *(_WORD *)&buf[12] = 2048;
  *(_QWORD *)&buf[14] = 1;
  *(_WORD *)&buf[22] = 2048;
  *(_QWORD *)&buf[24] = 16;
  LODWORD(v198) = 32;
  v197 = buf;
  v184 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v184))
  {
    free(v184);
    v118 = v220;
    goto LABEL_192;
  }
  __break(1u);
}

void sub_1838A004C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, uint64_t a18, uint64_t a19, void *a20,void *a21,void *a22,void *a23,uint64_t a24,uint64_t a25,void *a26,void *a27,uint64_t a28,void *a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,void *a38)
{
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  uint64_t v43;

  _Block_object_dispose((const void *)(v43 - 240), 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZL38nw_ip_channel_inbox_handle_input_frameP19nw_ip_channel_inboxP11nw_protocolPU22objcproto11OS_nw_frame8NSObjectPU22objcproto11OS_nw_arrayS3_P27nw_ip_channel_fragment_info_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  NSObject *v4;
  nw_endpoint_t v5;
  NSObject *v6;
  nw_endpoint_t v7;
  NSObject *v8;
  int v9;
  int v10;
  int v11;
  NSObject *v12;
  int v13;
  NSObject *v14;
  uint64_t v15;
  _BYTE v17[22];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = nw_connection_copy_endpoint(v4);
  v6 = nw_connection_copy_parameters(v4);
  v7 = nw_parameters_copy_local_endpoint(v6);
  if (!v5)
    goto LABEL_12;
  v8 = v5;
  v9 = -[NSObject type](v8, "type");

  if (v9 != 1)
    goto LABEL_12;
  v10 = nw_endpoint_address_endpoint_matches_address(v8, (unsigned __int8 *)(a1 + 40), 0, 0);
  v11 = v7 ? v10 : 0;
  if (v11 == 1
    && (v12 = v7, v13 = -[NSObject type](v12, "type"), v12, v13 == 1)
    && nw_endpoint_address_endpoint_matches_address(v12, (unsigned __int8 *)(a1 + 68), 0, 0))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v14 = (id)gLogObj;
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)v17 = 136446466;
      *(_QWORD *)&v17[4] = "nw_ip_channel_inbox_handle_input_frame_block_invoke";
      *(_WORD *)&v17[12] = 2112;
      *(_QWORD *)&v17[14] = v4;
      _os_log_impl(&dword_182FBE000, v14, OS_LOG_TYPE_INFO, "%{public}s Reclassifying packet for %@", v17, 0x16u);
    }

    *(_QWORD *)v17 = 0;
    *(_QWORD *)&v17[8] = 0;
    nw_connection_get_flow_id_on_nw_queue(v4, v17);
    nw_frame_reclassify(*(_QWORD *)(a1 + 32), (uint64_t)v17);
    v15 = 0;
  }
  else
  {
LABEL_12:
    v15 = 1;
  }

  return v15;
}

void sub_1838A0430(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void ___ZL38nw_ip_channel_inbox_handle_input_frameP19nw_ip_channel_inboxP11nw_protocolPU22objcproto11OS_nw_frame8NSObjectPU22objcproto11OS_nw_arrayS3_P27nw_ip_channel_fragment_info_block_invoke_36(uint64_t a1, void *a2, _OWORD *a3)
{
  char *v5;
  NSObject *v6;
  char *v7;
  int v8;
  const char *v9;
  __int16 v10;
  char *v11;
  __int16 v12;
  int v13;
  __int16 v14;
  _OWORD *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  if (nw_interface_shallow_compare(v5, *(void **)(*(_QWORD *)(a1 + 32) + 40)))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v6 = (id)gLogObj;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      v7 = v5 + 104;
      v8 = 136446978;
      v9 = "nw_ip_channel_inbox_handle_input_frame_block_invoke";
      if (!v5)
        v7 = 0;
      v10 = 2080;
      v11 = v7;
      v12 = 1040;
      v13 = 16;
      v14 = 2096;
      v15 = a3;
      _os_log_impl(&dword_182FBE000, v6, OS_LOG_TYPE_INFO, "%{public}s Found interface %s, using agent id %{uuid_t}.16P", (uint8_t *)&v8, 0x26u);
    }

    *(_OWORD *)*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = *a3;
  }

}

nw_protocol_definition_t nw_protocol_copy_ip_definition(void)
{
  if (nw_protocol_setup_ip_definition(void)::onceToken != -1)
    dispatch_once(&nw_protocol_setup_ip_definition(void)::onceToken, &__block_literal_global_52132);
  return (nw_protocol_definition_t)(id)g_ip_definition;
}

void ___ZL31nw_protocol_setup_ip_definitionv_block_invoke()
{
  NWConcrete_nw_protocol_definition *v0;
  void *v1;

  if (nw_protocol_ip_identifier::onceToken != -1)
    dispatch_once(&nw_protocol_ip_identifier::onceToken, &__block_literal_global_85105);
  v0 = nw_protocol_definition_create_with_identifier((__int128 *)&nw_protocol_ip_identifier::identifier);
  v1 = (void *)g_ip_definition;
  g_ip_definition = (uint64_t)v0;

  nw_protocol_definition_set_options_allocator((void *)g_ip_definition, (uint64_t)nw_ip_allocate_options, (uint64_t)nw_ip_copy_options, (uint64_t)nw_ip_deallocate_options);
  nw_protocol_definition_set_options_equality_check((void *)g_ip_definition, (uint64_t)nw_ip_option_is_equal);
  nw_protocol_definition_set_metadata_allocator((void *)g_ip_definition, (uint64_t)nw_ip_allocate_metadata, (uint64_t)nw_ip_deallocate_metadata);
  nw_protocol_definition_set_has_global_definition((void *)g_ip_definition);
  nw_protocol_definition_set_options_serializer((void *)g_ip_definition, 0, (uint64_t)nw_ip_serialize_options, (uint64_t)nw_ip_deserialize_options);
}

BOOL nw_ip_allocate_options(void *a1)
{
  id v1;
  _QWORD *v2;
  _BOOL8 result;
  NSObject *v4;
  void *v5;

  v1 = a1;
  v2 = malloc_type_calloc(1uLL, 0x10uLL, 0xEAFB8F1AuLL);
  if (v2)
    goto LABEL_2;
  __nwlog_obj();
  v4 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  v5 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v5);
  if (!result)
  {
    free(v5);
LABEL_2:
    *v2 = 0;
    v2[1] = 0;

    return (BOOL)v2;
  }
  __break(1u);
  return result;
}

void sub_1838A07E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL nw_ip_copy_options(void *a1, _OWORD *a2)
{
  id v3;
  _QWORD *v4;
  _BOOL8 result;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  NSObject *v10;
  void *v11;
  char *backtrace_string;
  os_log_type_t v13;
  _BOOL4 v14;
  os_log_type_t v15;
  char v16;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  if (!a2)
  {
    __nwlog_obj();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v19 = "nw_ip_copy_options";
    v7 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v16 = 0;
    if (__nwlog_fault(v7, &type, &v16))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v8 = objc_claimAutoreleasedReturnValue();
        v9 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          v19 = "nw_ip_copy_options";
          _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null existing_handle", buf, 0xCu);
        }
      }
      else if (v16)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v8 = objc_claimAutoreleasedReturnValue();
        v13 = type;
        v14 = os_log_type_enabled(v8, type);
        if (backtrace_string)
        {
          if (v14)
          {
            *(_DWORD *)buf = 136446466;
            v19 = "nw_ip_copy_options";
            v20 = 2082;
            v21 = (uint64_t)backtrace_string;
            _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null existing_handle, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_23;
        }
        if (v14)
        {
          *(_DWORD *)buf = 136446210;
          v19 = "nw_ip_copy_options";
          _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null existing_handle, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v8 = objc_claimAutoreleasedReturnValue();
        v15 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          v19 = "nw_ip_copy_options";
          _os_log_impl(&dword_182FBE000, v8, v15, "%{public}s called with null existing_handle, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_23:
    if (v7)
      free(v7);
    v4 = 0;
    goto LABEL_4;
  }
  v4 = malloc_type_calloc(1uLL, 0x10uLL, 0xEAFB8F1AuLL);
  if (v4)
  {
LABEL_3:
    *v4 = 0;
    v4[1] = 0;
    *(_OWORD *)v4 = *a2;
LABEL_4:

    return (BOOL)v4;
  }
  __nwlog_obj();
  v10 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  v19 = "strict_calloc";
  v20 = 2048;
  v21 = 1;
  v22 = 2048;
  v23 = 16;
  v11 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v11);
  if (!result)
  {
    free(v11);
    goto LABEL_3;
  }
  __break(1u);
  return result;
}

void sub_1838A0B64(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_ip_deallocate_options(int a1, void *a2)
{
  if (a2)
    free(a2);
}

BOOL nw_ip_option_is_equal(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return *a2 == *a3 && a2[1] == a3[1];
}

BOOL nw_ip_allocate_metadata(void *a1)
{
  id v1;
  _QWORD *v2;
  _BOOL8 result;
  NSObject *v4;
  void *v5;

  v1 = a1;
  v2 = malloc_type_calloc(1uLL, 0x18uLL, 0xEAFB8F1AuLL);
  if (v2)
    goto LABEL_2;
  __nwlog_obj();
  v4 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  v5 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v5);
  if (!result)
  {
    free(v5);
LABEL_2:
    *v2 = 0;
    v2[1] = 0;
    v2[2] = 0;

    return (BOOL)v2;
  }
  __break(1u);
  return result;
}

void sub_1838A0CD8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_ip_deallocate_metadata(int a1, void *a2)
{
  if (a2)
    free(a2);
}

BOOL nw_ip_serialize_options(void *a1, _OWORD *a2, _QWORD *a3)
{
  id v5;
  void *v6;
  _BOOL8 v7;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  char *backtrace_string;
  os_log_type_t v13;
  _BOOL4 v14;
  os_log_type_t v15;
  char v17;
  os_log_type_t type;
  _BYTE buf[22];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = v5;
  if (!a2)
  {
    __nwlog_obj();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_ip_serialize_options";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v17 = 0;
    if (__nwlog_fault(v9, &type, &v17))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_ip_serialize_options";
          _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null existing_handle", buf, 0xCu);
        }
      }
      else if (v17)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v13 = type;
        v14 = os_log_type_enabled(v10, type);
        if (backtrace_string)
        {
          if (v14)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_ip_serialize_options";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = backtrace_string;
            _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null existing_handle, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_20;
        }
        if (v14)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_ip_serialize_options";
          _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null existing_handle, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v15 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_ip_serialize_options";
          _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null existing_handle, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_20:
    if (v9)
      free(v9);
    goto LABEL_22;
  }
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = 0;
  if (*a2 == 0)
  {
LABEL_22:
    v7 = 0;
    goto LABEL_23;
  }
  v7 = nw_ip_copy_options(v5, a2);
  *a3 = 16;
LABEL_23:

  return v7;
}

void sub_1838A0FB8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL nw_ip_deserialize_options(void *a1, _OWORD *a2, uint64_t a3)
{
  id v5;
  void *v6;
  _BOOL8 v7;
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  void *v13;
  os_log_type_t v14;
  char *backtrace_string;
  os_log_type_t v16;
  _BOOL4 v17;
  os_log_type_t v18;
  _BOOL4 v19;
  os_log_type_t v20;
  os_log_type_t v21;
  char v22;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v25;
  __int16 v26;
  char *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = v5;
  if (a2)
  {
    if (a3 == 16)
    {
      v7 = nw_ip_copy_options(v5, a2);
      goto LABEL_4;
    }
    __nwlog_obj();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v25 = "nw_ip_deserialize_options";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (__nwlog_fault(v10, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v14 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          v25 = "nw_ip_deserialize_options";
          _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_ip_options))", buf, 0xCu);
        }
LABEL_36:

        goto LABEL_37;
      }
      if (!v22)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v21 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          v25 = "nw_ip_deserialize_options";
          _os_log_impl(&dword_182FBE000, v11, v21, "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_ip_options)), backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v18 = type;
      v19 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446210;
          v25 = "nw_ip_deserialize_options";
          _os_log_impl(&dword_182FBE000, v11, v18, "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_ip_options)), no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v19)
      {
        *(_DWORD *)buf = 136446466;
        v25 = "nw_ip_deserialize_options";
        v26 = 2082;
        v27 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v11, v18, "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_ip_options)), dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_24;
    }
  }
  else
  {
    __nwlog_obj();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v25 = "nw_ip_deserialize_options";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (__nwlog_fault(v10, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          v25 = "nw_ip_deserialize_options";
          _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null serialized_bytes", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (!v22)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v20 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          v25 = "nw_ip_deserialize_options";
          _os_log_impl(&dword_182FBE000, v11, v20, "%{public}s called with null serialized_bytes, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      v17 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          v25 = "nw_ip_deserialize_options";
          _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null serialized_bytes, no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        v25 = "nw_ip_deserialize_options";
        v26 = 2082;
        v27 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null serialized_bytes, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_24:

      free(backtrace_string);
    }
  }
LABEL_37:
  if (v10)
    free(v10);
  v7 = 0;
LABEL_4:

  return v7;
}

void sub_1838A1480(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

NWConcrete_nw_protocol_options *nw_ip_create_options()
{
  if (nw_protocol_setup_ip_definition(void)::onceToken != -1)
    dispatch_once(&nw_protocol_setup_ip_definition(void)::onceToken, &__block_literal_global_52132);
  return nw_protocol_create_options((void *)g_ip_definition);
}

void nw_ip_options_set_use_minimum_mtu(nw_protocol_options_t options, BOOL use_minimum_mtu)
{
  NSObject *v3;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  char *backtrace_string;
  os_log_type_t v9;
  _BOOL4 v10;
  os_log_type_t v11;
  _QWORD v12[4];
  BOOL v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = options;
  if (nw_protocol_options_is_ip(v3))
  {
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __nw_ip_options_set_use_minimum_mtu_block_invoke;
    v12[3] = &__block_descriptor_33_e9_B16__0_v8l;
    v13 = use_minimum_mtu;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }
  __nwlog_obj();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_ip_options_set_use_minimum_mtu";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_ip_options_set_use_minimum_mtu";
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null nw_protocol_options_is_ip(options)", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_ip_options_set_use_minimum_mtu";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_options_is_ip(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_ip_options_set_use_minimum_mtu";
        _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_options_is_ip(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_ip_options_set_use_minimum_mtu";
        _os_log_impl(&dword_182FBE000, v6, v11, "%{public}s called with null nw_protocol_options_is_ip(options), backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v5)
    free(v5);
LABEL_3:

}

void sub_1838A179C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL nw_protocol_options_is_ip(void *a1)
{
  id v1;
  _BOOL8 v2;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  char *backtrace_string;
  os_log_type_t v9;
  _BOOL4 v10;
  os_log_type_t v11;
  char v12;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    if (nw_protocol_setup_ip_definition(void)::onceToken != -1)
      dispatch_once(&nw_protocol_setup_ip_definition(void)::onceToken, &__block_literal_global_52132);
    v2 = nw_protocol_options_matches_definition(v1, (void *)g_ip_definition);
    goto LABEL_5;
  }
  __nwlog_obj();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v15 = "nw_protocol_options_is_ip";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v12 = 0;
  if (__nwlog_fault(v5, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_protocol_options_is_ip";
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null options", buf, 0xCu);
      }
    }
    else if (v12)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          v15 = "nw_protocol_options_is_ip";
          v16 = 2082;
          v17 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_protocol_options_is_ip";
        _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_protocol_options_is_ip";
        _os_log_impl(&dword_182FBE000, v6, v11, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_22:
  if (v5)
    free(v5);
  v2 = 0;
LABEL_5:

  return v2;
}

void sub_1838A1A74(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t __nw_ip_options_set_use_minimum_mtu_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 13) = *(_BYTE *)(a2 + 13) & 0xFE | *(_BYTE *)(a1 + 32);
  return 1;
}

void nw_ip_options_set_calculate_receive_time(nw_protocol_options_t options, BOOL calculate_receive_time)
{
  NSObject *v3;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  char *backtrace_string;
  os_log_type_t v9;
  _BOOL4 v10;
  os_log_type_t v11;
  _QWORD v12[4];
  BOOL v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = options;
  if (nw_protocol_options_is_ip(v3))
  {
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __nw_ip_options_set_calculate_receive_time_block_invoke;
    v12[3] = &__block_descriptor_33_e9_B16__0_v8l;
    v13 = calculate_receive_time;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }
  __nwlog_obj();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_ip_options_set_calculate_receive_time";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_ip_options_set_calculate_receive_time";
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null nw_protocol_options_is_ip(options)", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_ip_options_set_calculate_receive_time";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_options_is_ip(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_ip_options_set_calculate_receive_time";
        _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_options_is_ip(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_ip_options_set_calculate_receive_time";
        _os_log_impl(&dword_182FBE000, v6, v11, "%{public}s called with null nw_protocol_options_is_ip(options), backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v5)
    free(v5);
LABEL_3:

}

void sub_1838A1D70(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t __nw_ip_options_set_calculate_receive_time_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 13) = *(_BYTE *)(a2 + 13) & 0xFD | (2 * *(_BYTE *)(a1 + 32));
  return 1;
}

void nw_ip_options_set_hop_limit(nw_protocol_options_t options, uint8_t hop_limit)
{
  NSObject *v3;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  char *backtrace_string;
  os_log_type_t v9;
  _BOOL4 v10;
  os_log_type_t v11;
  _QWORD v12[4];
  uint8_t v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = options;
  if (nw_protocol_options_is_ip(v3))
  {
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __nw_ip_options_set_hop_limit_block_invoke;
    v12[3] = &__block_descriptor_33_e9_B16__0_v8l;
    v13 = hop_limit;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }
  __nwlog_obj();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_ip_options_set_hop_limit";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_ip_options_set_hop_limit";
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null nw_protocol_options_is_ip(options)", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_ip_options_set_hop_limit";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_options_is_ip(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_ip_options_set_hop_limit";
        _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_options_is_ip(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_ip_options_set_hop_limit";
        _os_log_impl(&dword_182FBE000, v6, v11, "%{public}s called with null nw_protocol_options_is_ip(options), backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v5)
    free(v5);
LABEL_3:

}

void sub_1838A2068(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t __nw_ip_options_set_hop_limit_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 12) = *(_BYTE *)(a1 + 32);
  return 1;
}

void nw_ip_options_set_version(nw_protocol_options_t options, nw_ip_version_t version)
{
  NSObject *v3;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  char *backtrace_string;
  os_log_type_t v9;
  _BOOL4 v10;
  os_log_type_t v11;
  _QWORD v12[4];
  nw_ip_version_t v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = options;
  if (nw_protocol_options_is_ip(v3))
  {
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __nw_ip_options_set_version_block_invoke;
    v12[3] = &__block_descriptor_36_e9_B16__0_v8l;
    v13 = version;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }
  __nwlog_obj();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_ip_options_set_version";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_ip_options_set_version";
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null nw_protocol_options_is_ip(options)", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_ip_options_set_version";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_options_is_ip(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_ip_options_set_version";
        _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_options_is_ip(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_ip_options_set_version";
        _os_log_impl(&dword_182FBE000, v6, v11, "%{public}s called with null nw_protocol_options_is_ip(options), backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v5)
    free(v5);
LABEL_3:

}

void sub_1838A2354(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t __nw_ip_options_set_version_block_invoke(uint64_t a1, _DWORD *a2)
{
  *a2 = *(_DWORD *)(a1 + 32);
  return 1;
}

uint64_t nw_ip_options_get_version(void *a1)
{
  id v1;
  uint64_t v2;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  char *backtrace_string;
  os_log_type_t v9;
  _BOOL4 v10;
  os_log_type_t v11;
  _QWORD v12[5];
  char v13;
  os_log_type_t type;
  _BYTE buf[24];
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (nw_protocol_options_is_ip(v1))
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    v16 = 0;
    *(_QWORD *)&buf[16] = 0x2020000000;
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __nw_ip_options_get_version_block_invoke;
    v12[3] = &unk_1E14A9D68;
    v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    v2 = *(unsigned int *)(*(_QWORD *)&buf[8] + 24);
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  __nwlog_obj();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_ip_options_get_version";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_ip_options_get_version";
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null nw_protocol_options_is_ip(options)", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_ip_options_get_version";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_options_is_ip(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_ip_options_get_version";
        _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_options_is_ip(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_ip_options_get_version";
        _os_log_impl(&dword_182FBE000, v6, v11, "%{public}s called with null nw_protocol_options_is_ip(options), backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v5)
    free(v5);
  v2 = 0;
LABEL_3:

  return v2;
}

void sub_1838A266C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  void *v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

void nw_ip_options_set_local_address_preference(nw_protocol_options_t options, nw_ip_local_address_preference_t preference)
{
  NSObject *v3;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  char *backtrace_string;
  os_log_type_t v9;
  _BOOL4 v10;
  os_log_type_t v11;
  _QWORD v12[4];
  nw_ip_local_address_preference_t v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = options;
  if (nw_protocol_options_is_ip(v3))
  {
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __nw_ip_options_set_local_address_preference_block_invoke;
    v12[3] = &__block_descriptor_36_e9_B16__0_v8l;
    v13 = preference;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }
  __nwlog_obj();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_ip_options_set_local_address_preference";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_ip_options_set_local_address_preference";
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null nw_protocol_options_is_ip(options)", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_ip_options_set_local_address_preference";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_options_is_ip(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_ip_options_set_local_address_preference";
        _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_options_is_ip(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_ip_options_set_local_address_preference";
        _os_log_impl(&dword_182FBE000, v6, v11, "%{public}s called with null nw_protocol_options_is_ip(options), backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v5)
    free(v5);
LABEL_3:

}

void sub_1838A2964(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t __nw_ip_options_set_local_address_preference_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 4) = *(_DWORD *)(a1 + 32);
  return 1;
}

void nw_ip_options_set_disable_multicast_loopback(nw_protocol_options_t options, BOOL disable_multicast_loopback)
{
  NSObject *v3;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  char *backtrace_string;
  os_log_type_t v9;
  _BOOL4 v10;
  os_log_type_t v11;
  _QWORD v12[4];
  BOOL v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = options;
  if (nw_protocol_options_is_ip(v3))
  {
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __nw_ip_options_set_disable_multicast_loopback_block_invoke;
    v12[3] = &__block_descriptor_33_e9_B16__0_v8l;
    v13 = disable_multicast_loopback;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }
  __nwlog_obj();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_ip_options_set_disable_multicast_loopback";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_ip_options_set_disable_multicast_loopback";
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null nw_protocol_options_is_ip(options)", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_ip_options_set_disable_multicast_loopback";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_options_is_ip(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_ip_options_set_disable_multicast_loopback";
        _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_options_is_ip(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_ip_options_set_disable_multicast_loopback";
        _os_log_impl(&dword_182FBE000, v6, v11, "%{public}s called with null nw_protocol_options_is_ip(options), backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v5)
    free(v5);
LABEL_3:

}

void sub_1838A2C50(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t __nw_ip_options_set_disable_multicast_loopback_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 13) = *(_BYTE *)(a2 + 13) & 0xFB | (4 * *(_BYTE *)(a1 + 32));
  return 1;
}

BOOL nw_ip_options_get_disable_multicast_loopback(void *a1)
{
  id v1;
  _BOOL8 v2;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  char *backtrace_string;
  os_log_type_t v9;
  _BOOL4 v10;
  os_log_type_t v11;
  _QWORD v12[5];
  char v13;
  os_log_type_t type;
  _BYTE buf[24];
  char v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (nw_protocol_options_is_ip(v1))
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x2020000000;
    v16 = 0;
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __nw_ip_options_get_disable_multicast_loopback_block_invoke;
    v12[3] = &unk_1E14A9D68;
    v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    v2 = *(_BYTE *)(*(_QWORD *)&buf[8] + 24) != 0;
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  __nwlog_obj();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_ip_options_get_disable_multicast_loopback";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_ip_options_get_disable_multicast_loopback";
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null nw_protocol_options_is_ip(options)", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_ip_options_get_disable_multicast_loopback";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_options_is_ip(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_ip_options_get_disable_multicast_loopback";
        _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_options_is_ip(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_ip_options_get_disable_multicast_loopback";
        _os_log_impl(&dword_182FBE000, v6, v11, "%{public}s called with null nw_protocol_options_is_ip(options), backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v5)
    free(v5);
  v2 = 0;
LABEL_3:

  return v2;
}

void sub_1838A2F7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  void *v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

uint64_t __nw_ip_options_get_disable_multicast_loopback_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = (*(_BYTE *)(a2 + 13) & 4) != 0;
  return 1;
}

void nw_ip_options_set_corrupt_checksums(void *a1, char a2)
{
  id v3;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  char *backtrace_string;
  os_log_type_t v9;
  _BOOL4 v10;
  os_log_type_t v11;
  _QWORD v12[4];
  char v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  if (nw_protocol_options_is_ip(v3))
  {
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __nw_ip_options_set_corrupt_checksums_block_invoke;
    v12[3] = &__block_descriptor_33_e9_B16__0_v8l;
    v13 = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }
  __nwlog_obj();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_ip_options_set_corrupt_checksums";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_ip_options_set_corrupt_checksums";
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null nw_protocol_options_is_ip(options)", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_ip_options_set_corrupt_checksums";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_options_is_ip(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_ip_options_set_corrupt_checksums";
        _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_options_is_ip(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_ip_options_set_corrupt_checksums";
        _os_log_impl(&dword_182FBE000, v6, v11, "%{public}s called with null nw_protocol_options_is_ip(options), backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v5)
    free(v5);
LABEL_3:

}

void sub_1838A3290(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t __nw_ip_options_set_corrupt_checksums_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 13) = *(_BYTE *)(a2 + 13) & 0xF7 | (8 * *(_BYTE *)(a1 + 32));
  return 1;
}

void nw_ip_options_set_receive_hop_limit(void *a1, char a2)
{
  id v3;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  char *backtrace_string;
  os_log_type_t v9;
  _BOOL4 v10;
  os_log_type_t v11;
  _QWORD v12[4];
  char v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  if (nw_protocol_options_is_ip(v3))
  {
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __nw_ip_options_set_receive_hop_limit_block_invoke;
    v12[3] = &__block_descriptor_33_e9_B16__0_v8l;
    v13 = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }
  __nwlog_obj();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_ip_options_set_receive_hop_limit";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_ip_options_set_receive_hop_limit";
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null nw_protocol_options_is_ip(options)", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_ip_options_set_receive_hop_limit";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_options_is_ip(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_ip_options_set_receive_hop_limit";
        _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_options_is_ip(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_ip_options_set_receive_hop_limit";
        _os_log_impl(&dword_182FBE000, v6, v11, "%{public}s called with null nw_protocol_options_is_ip(options), backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v5)
    free(v5);
LABEL_3:

}

void sub_1838A3588(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t __nw_ip_options_set_receive_hop_limit_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 13) = *(_BYTE *)(a2 + 13) & 0xEF | (16 * *(_BYTE *)(a1 + 32));
  return 1;
}

BOOL nw_ip_options_get_receive_hop_limit(void *a1)
{
  id v1;
  _BOOL8 v2;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  char *backtrace_string;
  os_log_type_t v9;
  _BOOL4 v10;
  os_log_type_t v11;
  _QWORD v12[5];
  char v13;
  os_log_type_t type;
  _BYTE buf[24];
  char v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (nw_protocol_options_is_ip(v1))
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x2020000000;
    v16 = 0;
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __nw_ip_options_get_receive_hop_limit_block_invoke;
    v12[3] = &unk_1E14A9D68;
    v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    v2 = *(_BYTE *)(*(_QWORD *)&buf[8] + 24) != 0;
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  __nwlog_obj();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_ip_options_get_receive_hop_limit";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_ip_options_get_receive_hop_limit";
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null nw_protocol_options_is_ip(options)", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_ip_options_get_receive_hop_limit";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_options_is_ip(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_ip_options_get_receive_hop_limit";
        _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_options_is_ip(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_ip_options_get_receive_hop_limit";
        _os_log_impl(&dword_182FBE000, v6, v11, "%{public}s called with null nw_protocol_options_is_ip(options), backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v5)
    free(v5);
  v2 = 0;
LABEL_3:

  return v2;
}

void sub_1838A38B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  void *v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

uint64_t __nw_ip_options_get_receive_hop_limit_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = (*(_BYTE *)(a2 + 13) & 0x10) != 0;
  return 1;
}

nw_protocol_metadata_t nw_ip_create_metadata(void)
{
  if (nw_protocol_setup_ip_definition(void)::onceToken != -1)
    dispatch_once(&nw_protocol_setup_ip_definition(void)::onceToken, &__block_literal_global_52132);
  return (nw_protocol_metadata_t)nw_protocol_metadata_create_singleton((void *)g_ip_definition);
}

uint64_t __nw_ip_copy_metadata_for_ecn_flag_block_invoke(uint64_t a1)
{
  id v2;
  id *singleton;
  void *v4;
  _QWORD v6[4];
  int v7;

  if (nw_protocol_setup_ip_definition(void)::onceToken != -1)
    dispatch_once(&nw_protocol_setup_ip_definition(void)::onceToken, &__block_literal_global_52132);
  v2 = (id)g_ip_definition;
  singleton = nw_protocol_metadata_create_singleton(v2);
  v4 = (void *)nw_ip_copy_metadata_for_ecn_flag::non_ect_metadata;
  nw_ip_copy_metadata_for_ecn_flag::non_ect_metadata = (uint64_t)singleton;

  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = __nw_ip_copy_metadata_for_ecn_flag_block_invoke_2;
  v6[3] = &__block_descriptor_36_e9_B16__0_v8l;
  v7 = *(_DWORD *)(a1 + 32);
  return nw_protocol_metadata_access_handle(nw_ip_copy_metadata_for_ecn_flag::non_ect_metadata, (uint64_t)v6);
}

void sub_1838A39F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t __nw_ip_copy_metadata_for_ecn_flag_block_invoke_3(uint64_t a1)
{
  id v2;
  id *singleton;
  void *v4;
  _QWORD v6[4];
  int v7;

  if (nw_protocol_setup_ip_definition(void)::onceToken != -1)
    dispatch_once(&nw_protocol_setup_ip_definition(void)::onceToken, &__block_literal_global_52132);
  v2 = (id)g_ip_definition;
  singleton = nw_protocol_metadata_create_singleton(v2);
  v4 = (void *)nw_ip_copy_metadata_for_ecn_flag::ect_1_metadata;
  nw_ip_copy_metadata_for_ecn_flag::ect_1_metadata = (uint64_t)singleton;

  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = __nw_ip_copy_metadata_for_ecn_flag_block_invoke_4;
  v6[3] = &__block_descriptor_36_e9_B16__0_v8l;
  v7 = *(_DWORD *)(a1 + 32);
  return nw_protocol_metadata_access_handle(nw_ip_copy_metadata_for_ecn_flag::ect_1_metadata, (uint64_t)v6);
}

void sub_1838A3AC4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t __nw_ip_copy_metadata_for_ecn_flag_block_invoke_5(uint64_t a1)
{
  id v2;
  id *singleton;
  void *v4;
  _QWORD v6[4];
  int v7;

  if (nw_protocol_setup_ip_definition(void)::onceToken != -1)
    dispatch_once(&nw_protocol_setup_ip_definition(void)::onceToken, &__block_literal_global_52132);
  v2 = (id)g_ip_definition;
  singleton = nw_protocol_metadata_create_singleton(v2);
  v4 = (void *)nw_ip_copy_metadata_for_ecn_flag::ect_0_metadata;
  nw_ip_copy_metadata_for_ecn_flag::ect_0_metadata = (uint64_t)singleton;

  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = __nw_ip_copy_metadata_for_ecn_flag_block_invoke_6;
  v6[3] = &__block_descriptor_36_e9_B16__0_v8l;
  v7 = *(_DWORD *)(a1 + 32);
  return nw_protocol_metadata_access_handle(nw_ip_copy_metadata_for_ecn_flag::ect_0_metadata, (uint64_t)v6);
}

void sub_1838A3B90(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t __nw_ip_copy_metadata_for_ecn_flag_block_invoke_7(uint64_t a1)
{
  id v2;
  id *singleton;
  void *v4;
  _QWORD v6[4];
  int v7;

  if (nw_protocol_setup_ip_definition(void)::onceToken != -1)
    dispatch_once(&nw_protocol_setup_ip_definition(void)::onceToken, &__block_literal_global_52132);
  v2 = (id)g_ip_definition;
  singleton = nw_protocol_metadata_create_singleton(v2);
  v4 = (void *)nw_ip_copy_metadata_for_ecn_flag::ce_metadata;
  nw_ip_copy_metadata_for_ecn_flag::ce_metadata = (uint64_t)singleton;

  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = __nw_ip_copy_metadata_for_ecn_flag_block_invoke_8;
  v6[3] = &__block_descriptor_36_e9_B16__0_v8l;
  v7 = *(_DWORD *)(a1 + 32);
  return nw_protocol_metadata_access_handle(nw_ip_copy_metadata_for_ecn_flag::ce_metadata, (uint64_t)v6);
}

void sub_1838A3C5C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t __nw_ip_copy_metadata_for_ecn_flag_block_invoke_8(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 22) |= 1u;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(a1 + 32);
  return 1;
}

uint64_t __nw_ip_copy_metadata_for_ecn_flag_block_invoke_6(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 22) |= 1u;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(a1 + 32);
  return 1;
}

uint64_t __nw_ip_copy_metadata_for_ecn_flag_block_invoke_4(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 22) |= 1u;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(a1 + 32);
  return 1;
}

uint64_t __nw_ip_copy_metadata_for_ecn_flag_block_invoke_2(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 22) |= 1u;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(a1 + 32);
  return 1;
}

void nw_ip_metadata_set_ecn_flag(nw_protocol_metadata_t metadata, nw_ip_ecn_flag_t ecn_flag)
{
  nw_protocol_metadata_t v3;
  nw_protocol_metadata_t v4;
  uint64_t isa;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  _QWORD v14[4];
  nw_ip_ecn_flag_t v15;
  char v16;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v3 = metadata;
  v4 = v3;
  if (v3)
  {
    v14[0] = MEMORY[0x1E0C809B0];
    v14[1] = 3221225472;
    v14[2] = __nw_ip_metadata_set_ecn_flag_block_invoke;
    v14[3] = &__block_descriptor_36_e9_B16__0_v8l;
    v15 = ecn_flag;
    isa = (uint64_t)v3[4].isa;
    if (isa)
      __nw_ip_metadata_set_ecn_flag_block_invoke((uint64_t)v14, isa);
    goto LABEL_4;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v19 = "nw_ip_metadata_set_ecn_flag";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v16 = 0;
  if (__nwlog_fault(v7, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_ip_metadata_set_ecn_flag";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null metadata", buf, 0xCu);
      }
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          v19 = "nw_ip_metadata_set_ecn_flag";
          v20 = 2082;
          v21 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_21;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_ip_metadata_set_ecn_flag";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_ip_metadata_set_ecn_flag";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_21:
  if (v7)
    free(v7);
LABEL_4:

}

BOOL __nw_ip_metadata_set_ecn_flag_block_invoke(uint64_t a1, uint64_t a2)
{
  char v2;
  NSObject *v3;
  int v5;
  const char *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v2 = *(_BYTE *)(a2 + 22);
  if ((v2 & 1) != 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v3 = (id)gLogObj;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      v5 = 136446210;
      v6 = "nw_ip_metadata_set_ecn_flag_block_invoke";
      _os_log_impl(&dword_182FBE000, v3, OS_LOG_TYPE_ERROR, "%{public}s Cannot modify static IP metadata", (uint8_t *)&v5, 0xCu);
    }

  }
  else
  {
    *(_DWORD *)(a2 + 8) = *(_DWORD *)(a1 + 32);
  }
  return (v2 & 1) == 0;
}

nw_ip_ecn_flag_t nw_ip_metadata_get_ecn_flag(nw_protocol_metadata_t metadata)
{
  nw_protocol_metadata_t v1;
  nw_protocol_metadata_t v2;
  _BYTE *v3;
  uint64_t isa;
  nw_ip_ecn_flag_t v5;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  char *backtrace_string;
  os_log_type_t v12;
  _BOOL4 v13;
  os_log_type_t v14;
  _QWORD v15[5];
  char v16;
  os_log_type_t type;
  _BYTE buf[24];
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v1 = metadata;
  v2 = v1;
  if (v1)
  {
    v3 = buf;
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    v19 = 0;
    *(_QWORD *)&buf[16] = 0x2020000000;
    v15[0] = MEMORY[0x1E0C809B0];
    v15[1] = 3221225472;
    v15[2] = __nw_ip_metadata_get_ecn_flag_block_invoke;
    v15[3] = &unk_1E14A9D68;
    v15[4] = buf;
    isa = (uint64_t)v1[4].isa;
    if (isa)
    {
      __nw_ip_metadata_get_ecn_flag_block_invoke((uint64_t)v15, isa);
      v3 = *(_BYTE **)&buf[8];
    }
    v5 = *((_DWORD *)v3 + 6);
    _Block_object_dispose(buf, 8);
    goto LABEL_5;
  }
  __nwlog_obj();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_ip_metadata_get_ecn_flag";
  v8 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v16 = 0;
  if (__nwlog_fault(v8, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_ip_metadata_get_ecn_flag";
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null metadata", buf, 0xCu);
      }
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_ip_metadata_get_ecn_flag";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_ip_metadata_get_ecn_flag";
        _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_ip_metadata_get_ecn_flag";
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_22:
  if (v8)
    free(v8);
  v5 = nw_ip_ecn_flag_non_ect;
LABEL_5:

  return v5;
}

uint64_t __nw_ip_metadata_get_ecn_flag_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *(_DWORD *)(a2 + 8);
  return 1;
}

void nw_ip_metadata_set_dscp_value(void *a1, unsigned int a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  void *v10;
  os_log_type_t v11;
  char *backtrace_string;
  os_log_type_t v13;
  _BOOL4 v14;
  char *v15;
  os_log_type_t v16;
  _BOOL4 v17;
  os_log_type_t v18;
  os_log_type_t v19;
  _QWORD v20[4];
  char v21;
  char v22;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v25;
  __int16 v26;
  char *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v25 = "nw_ip_metadata_set_dscp_value";
    v7 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (!__nwlog_fault(v7, &type, &v22))
      goto LABEL_39;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_ip_metadata_set_dscp_value";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null metadata", buf, 0xCu);
      }
    }
    else if (v22)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      v14 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          v25 = "nw_ip_metadata_set_dscp_value";
          v26 = 2082;
          v27 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_39:
        if (!v7)
          goto LABEL_5;
LABEL_40:
        free(v7);
        goto LABEL_5;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_ip_metadata_set_dscp_value";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v18 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_ip_metadata_set_dscp_value";
        _os_log_impl(&dword_182FBE000, v8, v18, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_38:

    goto LABEL_39;
  }
  if (a2 < 0x40)
  {
    v20[0] = MEMORY[0x1E0C809B0];
    v20[1] = 3221225472;
    v20[2] = __nw_ip_metadata_set_dscp_value_block_invoke;
    v20[3] = &__block_descriptor_33_e9_B16__0_v8l;
    v21 = a2;
    v5 = v3[4];
    if (v5)
      __nw_ip_metadata_set_dscp_value_block_invoke((uint64_t)v20, v5);
    goto LABEL_5;
  }
  __nwlog_obj();
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v25 = "nw_ip_metadata_set_dscp_value";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v22 = 0;
  if (!__nwlog_fault(v7, &type, &v22))
    goto LABEL_39;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v8 = objc_claimAutoreleasedReturnValue();
    v11 = type;
    if (os_log_type_enabled(v8, type))
    {
      *(_DWORD *)buf = 136446210;
      v25 = "nw_ip_metadata_set_dscp_value";
      _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null (dscp_value <= _MAX_DSCP)", buf, 0xCu);
    }
    goto LABEL_38;
  }
  if (!v22)
  {
    __nwlog_obj();
    v8 = objc_claimAutoreleasedReturnValue();
    v19 = type;
    if (os_log_type_enabled(v8, type))
    {
      *(_DWORD *)buf = 136446210;
      v25 = "nw_ip_metadata_set_dscp_value";
      _os_log_impl(&dword_182FBE000, v8, v19, "%{public}s called with null (dscp_value <= _MAX_DSCP), backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_38;
  }
  v15 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v8 = objc_claimAutoreleasedReturnValue();
  v16 = type;
  v17 = os_log_type_enabled(v8, type);
  if (!v15)
  {
    if (v17)
    {
      *(_DWORD *)buf = 136446210;
      v25 = "nw_ip_metadata_set_dscp_value";
      _os_log_impl(&dword_182FBE000, v8, v16, "%{public}s called with null (dscp_value <= _MAX_DSCP), no backtrace", buf, 0xCu);
    }
    goto LABEL_38;
  }
  if (v17)
  {
    *(_DWORD *)buf = 136446466;
    v25 = "nw_ip_metadata_set_dscp_value";
    v26 = 2082;
    v27 = v15;
    _os_log_impl(&dword_182FBE000, v8, v16, "%{public}s called with null (dscp_value <= _MAX_DSCP), dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v15);
  if (v7)
    goto LABEL_40;
LABEL_5:

}

BOOL __nw_ip_metadata_set_dscp_value_block_invoke(uint64_t a1, uint64_t a2)
{
  char v2;
  NSObject *v3;
  int v5;
  const char *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v2 = *(_BYTE *)(a2 + 22);
  if ((v2 & 1) != 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v3 = (id)gLogObj;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      v5 = 136446210;
      v6 = "nw_ip_metadata_set_dscp_value_block_invoke";
      _os_log_impl(&dword_182FBE000, v3, OS_LOG_TYPE_ERROR, "%{public}s Cannot modify static IP metadata", (uint8_t *)&v5, 0xCu);
    }

  }
  else
  {
    *(_BYTE *)(a2 + 20) = *(_BYTE *)(a1 + 32);
  }
  return (v2 & 1) == 0;
}

uint64_t nw_ip_metadata_get_dscp_value(void *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  _QWORD v14[5];
  char v15;
  os_log_type_t type;
  _BYTE buf[24];
  char v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x2020000000;
    v18 = 0;
    v14[0] = MEMORY[0x1E0C809B0];
    v14[1] = 3221225472;
    v14[2] = __nw_ip_metadata_get_dscp_value_block_invoke;
    v14[3] = &unk_1E14A9D68;
    v14[4] = buf;
    v3 = v1[4];
    if (v3)
    {
      __nw_ip_metadata_get_dscp_value_block_invoke((uint64_t)v14, v3);
      v4 = *(unsigned __int8 *)(*(_QWORD *)&buf[8] + 24);
    }
    else
    {
      v4 = 0;
    }
    _Block_object_dispose(buf, 8);
    goto LABEL_6;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_ip_metadata_get_dscp_value";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v15 = 0;
  if (__nwlog_fault(v7, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_ip_metadata_get_dscp_value";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null metadata", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_ip_metadata_get_dscp_value";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_ip_metadata_get_dscp_value";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_ip_metadata_get_dscp_value";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_23:
  if (v7)
    free(v7);
  v4 = 0;
LABEL_6:

  return v4;
}

uint64_t __nw_ip_metadata_get_dscp_value_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *(_BYTE *)(a2 + 20);
  return 1;
}

void nw_ip_metadata_set_service_class(nw_protocol_metadata_t metadata, nw_service_class_t service_class)
{
  nw_protocol_metadata_t v3;
  nw_protocol_metadata_t v4;
  uint64_t isa;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  _QWORD v14[4];
  nw_service_class_t v15;
  char v16;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v3 = metadata;
  v4 = v3;
  if (v3)
  {
    v14[0] = MEMORY[0x1E0C809B0];
    v14[1] = 3221225472;
    v14[2] = __nw_ip_metadata_set_service_class_block_invoke;
    v14[3] = &__block_descriptor_36_e9_B16__0_v8l;
    v15 = service_class;
    isa = (uint64_t)v3[4].isa;
    if (isa)
      __nw_ip_metadata_set_service_class_block_invoke((uint64_t)v14, isa);
    goto LABEL_4;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v19 = "nw_ip_metadata_set_service_class";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v16 = 0;
  if (__nwlog_fault(v7, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_ip_metadata_set_service_class";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null metadata", buf, 0xCu);
      }
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          v19 = "nw_ip_metadata_set_service_class";
          v20 = 2082;
          v21 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_21;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_ip_metadata_set_service_class";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_ip_metadata_set_service_class";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_21:
  if (v7)
    free(v7);
LABEL_4:

}

BOOL __nw_ip_metadata_set_service_class_block_invoke(uint64_t a1, uint64_t a2)
{
  char v2;
  NSObject *v3;
  int v5;
  const char *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v2 = *(_BYTE *)(a2 + 22);
  if ((v2 & 1) != 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v3 = (id)gLogObj;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      v5 = 136446210;
      v6 = "nw_ip_metadata_set_service_class_block_invoke";
      _os_log_impl(&dword_182FBE000, v3, OS_LOG_TYPE_ERROR, "%{public}s Cannot modify static IP metadata", (uint8_t *)&v5, 0xCu);
    }

  }
  else
  {
    *(_DWORD *)(a2 + 12) = *(_DWORD *)(a1 + 32);
  }
  return (v2 & 1) == 0;
}

nw_service_class_t nw_ip_metadata_get_service_class(nw_protocol_metadata_t metadata)
{
  nw_protocol_metadata_t v1;
  nw_protocol_metadata_t v2;
  _BYTE *v3;
  uint64_t isa;
  nw_service_class_t v5;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  char *backtrace_string;
  os_log_type_t v12;
  _BOOL4 v13;
  os_log_type_t v14;
  _QWORD v15[5];
  char v16;
  os_log_type_t type;
  _BYTE buf[24];
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v1 = metadata;
  v2 = v1;
  if (v1)
  {
    v3 = buf;
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    v19 = 0;
    *(_QWORD *)&buf[16] = 0x2020000000;
    v15[0] = MEMORY[0x1E0C809B0];
    v15[1] = 3221225472;
    v15[2] = __nw_ip_metadata_get_service_class_block_invoke;
    v15[3] = &unk_1E14A9D68;
    v15[4] = buf;
    isa = (uint64_t)v1[4].isa;
    if (isa)
    {
      __nw_ip_metadata_get_service_class_block_invoke((uint64_t)v15, isa);
      v3 = *(_BYTE **)&buf[8];
    }
    v5 = *((_DWORD *)v3 + 6);
    _Block_object_dispose(buf, 8);
    goto LABEL_5;
  }
  __nwlog_obj();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_ip_metadata_get_service_class";
  v8 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v16 = 0;
  if (__nwlog_fault(v8, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_ip_metadata_get_service_class";
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null metadata", buf, 0xCu);
      }
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_ip_metadata_get_service_class";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_ip_metadata_get_service_class";
        _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_ip_metadata_get_service_class";
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_22:
  if (v8)
    free(v8);
  v5 = nw_service_class_best_effort;
LABEL_5:

  return v5;
}

uint64_t __nw_ip_metadata_get_service_class_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *(_DWORD *)(a2 + 12);
  return 1;
}

uint64_t __nw_ip_metadata_set_receive_time_block_invoke(uint64_t a1, _QWORD *a2)
{
  *a2 = *(_QWORD *)(a1 + 32);
  return 1;
}

uint64_t nw_ip_metadata_get_receive_time(nw_protocol_metadata_t metadata)
{
  nw_protocol_metadata_t v1;
  nw_protocol_metadata_t v2;
  _QWORD *isa;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  char *backtrace_string;
  os_log_type_t v13;
  _BOOL4 v14;
  os_log_type_t v15;
  _QWORD v16[5];
  char v17;
  os_log_type_t type;
  _BYTE buf[24];
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v1 = metadata;
  v2 = v1;
  if (v1)
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x2020000000;
    v20 = 0;
    v16[0] = MEMORY[0x1E0C809B0];
    v16[1] = 3221225472;
    v16[2] = __nw_ip_metadata_get_receive_time_block_invoke;
    v16[3] = &unk_1E14A9D68;
    v16[4] = buf;
    isa = v1[4].isa;
    if (isa
      && (__nw_ip_metadata_get_receive_time_block_invoke((uint64_t)v16, isa),
          (v4 = *(_QWORD *)(*(_QWORD *)&buf[8] + 24)) != 0))
    {
      v5 = dword_1ECD84D64;
      if (!dword_1ECD84D64)
      {
        mach_timebase_info((mach_timebase_info_t)&time_base);
        v5 = dword_1ECD84D64;
      }
      v6 = v4 * (unint64_t)time_base / v5;
    }
    else
    {
      v6 = 0;
    }
    _Block_object_dispose(buf, 8);
    goto LABEL_9;
  }
  __nwlog_obj();
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_ip_metadata_get_receive_time";
  v9 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v17 = 0;
  if (__nwlog_fault(v9, &type, &v17))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_ip_metadata_get_receive_time";
        _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null metadata", buf, 0xCu);
      }
    }
    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      v14 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_ip_metadata_get_receive_time";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_26;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_ip_metadata_get_receive_time";
        _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_ip_metadata_get_receive_time";
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_26:
  if (v9)
    free(v9);
  v6 = 0;
LABEL_9:

  return v6;
}

uint64_t __nw_ip_metadata_get_receive_time_block_invoke(uint64_t a1, _QWORD *a2)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *a2;
  return 1;
}

uint64_t __nw_ip_metadata_set_hop_limit_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 21) = *(_BYTE *)(a1 + 32);
  return 1;
}

uint64_t nw_ip_metadata_get_hop_limit(void *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  _QWORD v14[5];
  char v15;
  os_log_type_t type;
  _BYTE buf[24];
  char v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x2020000000;
    v18 = 0;
    v14[0] = MEMORY[0x1E0C809B0];
    v14[1] = 3221225472;
    v14[2] = __nw_ip_metadata_get_hop_limit_block_invoke;
    v14[3] = &unk_1E14A9D68;
    v14[4] = buf;
    v3 = v1[4];
    if (v3)
    {
      __nw_ip_metadata_get_hop_limit_block_invoke((uint64_t)v14, v3);
      v4 = *(unsigned __int8 *)(*(_QWORD *)&buf[8] + 24);
    }
    else
    {
      v4 = 0;
    }
    _Block_object_dispose(buf, 8);
    goto LABEL_6;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_ip_metadata_get_hop_limit";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v15 = 0;
  if (__nwlog_fault(v7, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_ip_metadata_get_hop_limit";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null metadata", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_ip_metadata_get_hop_limit";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_ip_metadata_get_hop_limit";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_ip_metadata_get_hop_limit";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_23:
  if (v7)
    free(v7);
  v4 = 0;
LABEL_6:

  return v4;
}

uint64_t __nw_ip_metadata_get_hop_limit_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *(_BYTE *)(a2 + 21);
  return 1;
}

void nw_ip_metadata_set_enable_fragmentation(void *a1, char a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  _QWORD v14[4];
  char v15;
  char v16;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    v14[0] = MEMORY[0x1E0C809B0];
    v14[1] = 3221225472;
    v14[2] = __nw_ip_metadata_set_enable_fragmentation_block_invoke;
    v14[3] = &__block_descriptor_33_e9_B16__0_v8l;
    v15 = a2;
    v5 = v3[4];
    if (v5)
      __nw_ip_metadata_set_enable_fragmentation_block_invoke((uint64_t)v14, v5);
    goto LABEL_4;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v19 = "nw_ip_metadata_set_enable_fragmentation";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v16 = 0;
  if (__nwlog_fault(v7, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_ip_metadata_set_enable_fragmentation";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null metadata", buf, 0xCu);
      }
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          v19 = "nw_ip_metadata_set_enable_fragmentation";
          v20 = 2082;
          v21 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_21;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_ip_metadata_set_enable_fragmentation";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_ip_metadata_set_enable_fragmentation";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_21:
  if (v7)
    free(v7);
LABEL_4:

}

BOOL __nw_ip_metadata_set_enable_fragmentation_block_invoke(uint64_t a1, uint64_t a2)
{
  char v2;
  int v3;
  NSObject *v4;
  int v6;
  const char *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = *(_BYTE *)(a2 + 22);
  if ((v2 & 1) != 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v4 = (id)gLogObj;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v6 = 136446210;
      v7 = "nw_ip_metadata_set_enable_fragmentation_block_invoke";
      _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_ERROR, "%{public}s Cannot modify static IP metadata", (uint8_t *)&v6, 0xCu);
    }

  }
  else
  {
    if (*(_BYTE *)(a1 + 32))
      v3 = 2;
    else
      v3 = 1;
    *(_DWORD *)(a2 + 16) = v3;
  }
  return (v2 & 1) == 0;
}

uint64_t nw_ip_metadata_get_fragmentation_value(void *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  char *backtrace_string;
  os_log_type_t v12;
  _BOOL4 v13;
  os_log_type_t v14;
  _QWORD v15[5];
  char v16;
  os_log_type_t type;
  _BYTE buf[24];
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = buf;
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    v19 = 0;
    *(_QWORD *)&buf[16] = 0x2020000000;
    v15[0] = MEMORY[0x1E0C809B0];
    v15[1] = 3221225472;
    v15[2] = __nw_ip_metadata_get_fragmentation_value_block_invoke;
    v15[3] = &unk_1E14A9D68;
    v15[4] = buf;
    v4 = v1[4];
    if (v4)
    {
      __nw_ip_metadata_get_fragmentation_value_block_invoke((uint64_t)v15, v4);
      v3 = *(_BYTE **)&buf[8];
    }
    v5 = *((unsigned int *)v3 + 6);
    _Block_object_dispose(buf, 8);
    goto LABEL_5;
  }
  __nwlog_obj();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_ip_metadata_get_fragmentation_value";
  v8 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v16 = 0;
  if (__nwlog_fault(v8, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_ip_metadata_get_fragmentation_value";
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null metadata", buf, 0xCu);
      }
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_ip_metadata_get_fragmentation_value";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_ip_metadata_get_fragmentation_value";
        _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_ip_metadata_get_fragmentation_value";
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_22:
  if (v8)
    free(v8);
  v5 = 0;
LABEL_5:

  return v5;
}

uint64_t __nw_ip_metadata_get_fragmentation_value_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *(_DWORD *)(a2 + 16);
  return 1;
}

void nw_ip_options_set_disable_fragmentation(nw_protocol_options_t options, BOOL disable_fragmentation)
{
  NSObject *v3;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  char *backtrace_string;
  os_log_type_t v9;
  _BOOL4 v10;
  os_log_type_t v11;
  _QWORD v12[4];
  BOOL v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = options;
  if (nw_protocol_options_is_ip(v3))
  {
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __nw_ip_options_set_disable_fragmentation_block_invoke;
    v12[3] = &__block_descriptor_33_e9_B16__0_v8l;
    v13 = disable_fragmentation;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }
  __nwlog_obj();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_ip_options_set_disable_fragmentation";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_ip_options_set_disable_fragmentation";
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null nw_protocol_options_is_ip(options)", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_ip_options_set_disable_fragmentation";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_options_is_ip(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_ip_options_set_disable_fragmentation";
        _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_options_is_ip(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_ip_options_set_disable_fragmentation";
        _os_log_impl(&dword_182FBE000, v6, v11, "%{public}s called with null nw_protocol_options_is_ip(options), backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v5)
    free(v5);
LABEL_3:

}

void sub_1838A6354(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t __nw_ip_options_set_disable_fragmentation_block_invoke(uint64_t a1, uint64_t a2)
{
  int v2;

  if (*(_BYTE *)(a1 + 32))
    v2 = 1;
  else
    v2 = 2;
  *(_DWORD *)(a2 + 8) = v2;
  return 1;
}

NWConcrete_nw_protocol_options *nw_custom_ip_create_options(char a1)
{
  NWConcrete_nw_protocol_options *options;
  NWConcrete_nw_protocol_options *v3;
  NWConcrete_nw_protocol_options *v4;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  _QWORD v14[4];
  char v15;
  char v16;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (nw_protocol_copy_custom_ip_definition(void)::onceToken != -1)
    dispatch_once(&nw_protocol_copy_custom_ip_definition(void)::onceToken, &__block_literal_global_6_52361);
  options = nw_protocol_create_options((void *)nw_protocol_copy_custom_ip_definition(void)::definition);
  v3 = options;
  if (options)
  {
    v14[0] = MEMORY[0x1E0C809B0];
    v14[1] = 3221225472;
    v14[2] = __nw_custom_ip_create_options_block_invoke;
    v14[3] = &__block_descriptor_33_e9_B16__0_v8l;
    v15 = a1;
    nw_protocol_options_access_handle(options, v14);
    v4 = v3;
    goto LABEL_5;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v19 = "nw_custom_ip_create_options";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v16 = 0;
  if (__nwlog_fault(v7, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_custom_ip_create_options";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null options", buf, 0xCu);
      }
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          v19 = "nw_custom_ip_create_options";
          v20 = 2082;
          v21 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_custom_ip_create_options";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_custom_ip_create_options";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_22:
  if (v7)
    free(v7);
LABEL_5:

  return v3;
}

void sub_1838A667C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t __nw_custom_ip_create_options_block_invoke(uint64_t a1, _BYTE *a2)
{
  *a2 = *(_BYTE *)(a1 + 32);
  return 1;
}

void ___ZL37nw_protocol_copy_custom_ip_definitionv_block_invoke()
{
  NWConcrete_nw_protocol_definition *named;
  void *v1;

  named = nw_protocol_definition_create_named(1, 0);
  v1 = (void *)nw_protocol_copy_custom_ip_definition(void)::definition;
  nw_protocol_copy_custom_ip_definition(void)::definition = (uint64_t)named;

  nw_protocol_definition_set_options_allocator((void *)nw_protocol_copy_custom_ip_definition(void)::definition, (uint64_t)nw_custom_ip_allocate_options, (uint64_t)nw_custom_ip_copy_options, (uint64_t)nw_custom_ip_deallocate_options);
  nw_protocol_definition_set_options_equality_check((void *)nw_protocol_copy_custom_ip_definition(void)::definition, (uint64_t)nw_custom_ip_option_is_equal);
}

BOOL nw_custom_ip_allocate_options(void *a1)
{
  id v1;
  _BYTE *v2;
  _BOOL8 result;
  NSObject *v4;
  void *v5;

  v1 = a1;
  v2 = malloc_type_calloc(1uLL, 1uLL, 0xEAFB8F1AuLL);
  if (v2)
    goto LABEL_2;
  __nwlog_obj();
  v4 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  v5 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v5);
  if (!result)
  {
    free(v5);
LABEL_2:
    *v2 = 0;

    return (BOOL)v2;
  }
  __break(1u);
  return result;
}

void sub_1838A6830(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL nw_custom_ip_copy_options(void *a1, _BYTE *a2)
{
  id v3;
  _BYTE *v4;
  _BOOL8 result;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  NSObject *v10;
  void *v11;
  char *backtrace_string;
  os_log_type_t v13;
  _BOOL4 v14;
  os_log_type_t v15;
  char v16;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  if (!a2)
  {
    __nwlog_obj();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v19 = "nw_custom_ip_copy_options";
    v7 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v16 = 0;
    if (__nwlog_fault(v7, &type, &v16))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v8 = objc_claimAutoreleasedReturnValue();
        v9 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          v19 = "nw_custom_ip_copy_options";
          _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null existing_handle", buf, 0xCu);
        }
      }
      else if (v16)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v8 = objc_claimAutoreleasedReturnValue();
        v13 = type;
        v14 = os_log_type_enabled(v8, type);
        if (backtrace_string)
        {
          if (v14)
          {
            *(_DWORD *)buf = 136446466;
            v19 = "nw_custom_ip_copy_options";
            v20 = 2082;
            v21 = (uint64_t)backtrace_string;
            _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null existing_handle, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_23;
        }
        if (v14)
        {
          *(_DWORD *)buf = 136446210;
          v19 = "nw_custom_ip_copy_options";
          _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null existing_handle, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v8 = objc_claimAutoreleasedReturnValue();
        v15 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          v19 = "nw_custom_ip_copy_options";
          _os_log_impl(&dword_182FBE000, v8, v15, "%{public}s called with null existing_handle, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_23:
    if (v7)
      free(v7);
    v4 = 0;
    goto LABEL_4;
  }
  v4 = malloc_type_calloc(1uLL, 1uLL, 0xEAFB8F1AuLL);
  if (v4)
  {
LABEL_3:
    *v4 = 0;
    *v4 = *a2;
LABEL_4:

    return (BOOL)v4;
  }
  __nwlog_obj();
  v10 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  v19 = "strict_calloc";
  v20 = 2048;
  v21 = 1;
  v22 = 2048;
  v23 = 1;
  v11 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v11);
  if (!result)
  {
    free(v11);
    goto LABEL_3;
  }
  __break(1u);
  return result;
}

void sub_1838A6BA8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_custom_ip_deallocate_options(int a1, void *a2)
{
  if (a2)
    free(a2);
}

BOOL nw_custom_ip_option_is_equal(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  return *a2 == *a3;
}

uint64_t nw_custom_ip_options_get_protocol(void *a1)
{
  id v1;
  uint64_t v2;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  char *backtrace_string;
  os_log_type_t v9;
  _BOOL4 v10;
  os_log_type_t v11;
  _QWORD v12[5];
  char v13;
  os_log_type_t type;
  _BYTE buf[24];
  char v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (nw_protocol_options_is_custom_ip(v1))
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x2020000000;
    v16 = 0;
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __nw_custom_ip_options_get_protocol_block_invoke;
    v12[3] = &unk_1E14A9D68;
    v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    v2 = *(unsigned __int8 *)(*(_QWORD *)&buf[8] + 24);
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  __nwlog_obj();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_custom_ip_options_get_protocol";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_custom_ip_options_get_protocol";
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null nw_protocol_options_is_custom_ip(options)", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_custom_ip_options_get_protocol";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_options_is_custom_ip(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_custom_ip_options_get_protocol";
        _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_options_is_custom_ip(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_custom_ip_options_get_protocol";
        _os_log_impl(&dword_182FBE000, v6, v11, "%{public}s called with null nw_protocol_options_is_custom_ip(options), backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v5)
    free(v5);
  v2 = 0;
LABEL_3:

  return v2;
}

void sub_1838A6ED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  void *v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

uint64_t __nw_custom_ip_options_get_protocol_block_invoke(uint64_t a1, _BYTE *a2)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *a2;
  return 1;
}

void sub_1838A938C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  if (a14 < 0)
    operator delete(__p);
  _Block_object_dispose(&a25, 8);
  std::ostringstream::~ostringstream(v25);
  _Unwind_Resume(a1);
}

void __Block_byref_object_copy__52656(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;
  std::ios_base *v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  __int128 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  std::locale v27;
  std::locale v28;

  v4 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  *(_QWORD *)(a1 + 48) = v4;
  v6 = a1 + 48;
  *(_QWORD *)(a1 + 160) = MEMORY[0x1E0DE4FF8] + 16;
  *(_QWORD *)(a1 + 48 + *(_QWORD *)(v4 - 24)) = v5;
  v7 = (std::ios_base *)(a1 + 48 + *(_QWORD *)(*(_QWORD *)(a1 + 48) - 24));
  v8 = (std::ios_base *)(a2 + 48 + *(_QWORD *)(*(_QWORD *)(a2 + 48) - 24));
  std::ios_base::move(v7, v8);
  v7[1].__vftable = v8[1].__vftable;
  v8[1].__vftable = 0;
  v9 = MEMORY[0x1E0DE4FE0];
  v7[1].__fmtflags_ = v8[1].__fmtflags_;
  *(_QWORD *)(a1 + 48) = v9 + 24;
  *(_QWORD *)(a1 + 160) = v9 + 64;
  std::streambuf::basic_streambuf();
  v10 = MEMORY[0x1E0DE4FB8] + 16;
  *(_QWORD *)(a1 + 120) = 0;
  v11 = (_OWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 56) = v10;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  v12 = (__int128 *)(a2 + 120);
  if (*(char *)(a2 + 143) >= 0)
    v13 = a2 + 120;
  else
    v13 = *(_QWORD *)(a2 + 120);
  v14 = *(_QWORD *)(a2 + 72);
  if (v14)
  {
    v15 = v14 - v13;
    v16 = *(_QWORD *)(a2 + 80) - v13;
    v17 = *(_QWORD *)(a2 + 88) - v13;
    v18 = *(_QWORD *)(a2 + 96);
    if (v18)
    {
LABEL_6:
      v19 = v18 - v13;
      v20 = *(_QWORD *)(a2 + 104) - v13;
      v21 = *(_QWORD *)(a2 + 112) - v13;
      goto LABEL_9;
    }
  }
  else
  {
    v17 = -1;
    v16 = -1;
    v15 = -1;
    v18 = *(_QWORD *)(a2 + 96);
    if (v18)
      goto LABEL_6;
  }
  v19 = -1;
  v20 = -1;
  v21 = -1;
LABEL_9:
  v22 = *(_QWORD *)(a2 + 144);
  v23 = v22 - v13;
  if (!v22)
    v23 = -1;
  v24 = *v12;
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *v11 = v24;
  *(_BYTE *)(a2 + 143) = 0;
  *(_BYTE *)(a2 + 120) = 0;
  v25 = a1 + 120;
  if (*(char *)(a1 + 143) < 0)
    v25 = *(_QWORD *)v11;
  if (v15 != -1)
  {
    *(_QWORD *)(a1 + 72) = v25 + v15;
    *(_QWORD *)(a1 + 80) = v25 + v16;
    *(_QWORD *)(a1 + 88) = v25 + v17;
  }
  if (v19 != -1)
  {
    *(_QWORD *)(a1 + 112) = v25 + v21;
    *(_QWORD *)(a1 + 96) = v25 + v19;
    *(_QWORD *)(a1 + 104) = v25 + v19 + v20;
  }
  v26 = v25 + v23;
  if (v23 == -1)
    v26 = 0;
  *(_QWORD *)(a1 + 144) = v26;
  if (*(char *)(a2 + 143) < 0)
    v12 = *(__int128 **)(a2 + 120);
  *(_QWORD *)(a2 + 72) = v12;
  *(_QWORD *)(a2 + 80) = v12;
  *(_QWORD *)(a2 + 88) = v12;
  *(_QWORD *)(a2 + 96) = v12;
  *(_QWORD *)(a2 + 104) = v12;
  *(_QWORD *)(a2 + 112) = v12;
  *(_QWORD *)(a2 + 144) = v12;
  std::locale::locale(&v27, (const std::locale *)(a2 + 64));
  (*(void (**)(uint64_t, std::locale *))(*(_QWORD *)(a1 + 56) + 16))(a1 + 56, &v27);
  std::locale::locale(&v28, (const std::locale *)(a1 + 64));
  std::locale::operator=((std::locale *)(a1 + 64), &v27);
  std::locale::~locale(&v28);
  std::locale::~locale(&v27);
  *(_QWORD *)(v6 + *(_QWORD *)(*(_QWORD *)(a1 + 48) - 24) + 40) = a1 + 56;
}

void sub_1838A9650(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  uint64_t v9;
  uint64_t v10;
  void **v11;

  std::locale::~locale(&a9);
  if (*(char *)(v10 + 143) < 0)
    operator delete(*v11);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x186DB3548](v9);
  _Unwind_Resume(a1);
}

void __Block_byref_object_dispose__52657(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = MEMORY[0x1E0DE4F60];
  v2 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)(a1 + 48) = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)(a1 + 48 + *(_QWORD *)(v2 - 24)) = *(_QWORD *)(v1 + 24);
  *(_QWORD *)(a1 + 56) = MEMORY[0x1E0DE4FB8] + 16;
  if (*(char *)(a1 + 143) < 0)
    operator delete(*(void **)(a1 + 120));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  JUMPOUT(0x186DB3548);
}

uint64_t nw_resolver_config_get_protocol(void *a1)
{
  id v1;
  void *v2;
  os_unfair_lock_s *v3;
  uint64_t v4;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  _QWORD v14[4];
  os_unfair_lock_s *v15;
  _BYTE *v16;
  char v17;
  os_log_type_t type;
  _BYTE buf[24];
  int v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    v20 = 0;
    *(_QWORD *)&buf[16] = 0x2020000000;
    v14[0] = MEMORY[0x1E0C809B0];
    v14[1] = 3221225472;
    v14[2] = __nw_resolver_config_get_protocol_block_invoke;
    v14[3] = &unk_1E14ACE40;
    v16 = buf;
    v15 = (os_unfair_lock_s *)v1;
    v3 = v15 + 22;
    os_unfair_lock_lock(v15 + 22);
    __nw_resolver_config_get_protocol_block_invoke((uint64_t)v14);
    os_unfair_lock_unlock(v3);
    v4 = *(unsigned int *)(*(_QWORD *)&buf[8] + 24);

    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_resolver_config_get_protocol";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v17 = 0;
  if (__nwlog_fault(v7, &type, &v17))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_resolver_config_get_protocol";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_resolver_config_get_protocol";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_resolver_config_get_protocol";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_resolver_config_get_protocol";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v7)
    free(v7);
  v4 = 0;
LABEL_3:

  return v4;
}

void sub_1838A9A38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, ...)
{
  void *v13;
  va_list va;

  va_start(va, a13);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void nw_resolver_config_enumerate_name_servers(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  os_unfair_lock_s *v6;
  void *v7;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  char *backtrace_string;
  os_log_type_t v13;
  _BOOL4 v14;
  os_log_type_t v15;
  _QWORD applier[4];
  id v17;
  _QWORD v18[4];
  os_unfair_lock_s *v19;
  _BYTE *v20;
  char v21;
  os_log_type_t type;
  _BYTE buf[24];
  uint64_t (*v24)(uint64_t, uint64_t);
  void (*v25)(uint64_t);
  id v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (v3)
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x3032000000;
    v24 = __Block_byref_object_copy__22_52692;
    v25 = __Block_byref_object_dispose__23_52693;
    v5 = MEMORY[0x1E0C809B0];
    v26 = 0;
    v18[0] = MEMORY[0x1E0C809B0];
    v18[1] = 3221225472;
    v18[2] = __nw_resolver_config_enumerate_name_servers_block_invoke;
    v18[3] = &unk_1E14ACE40;
    v20 = buf;
    v19 = (os_unfair_lock_s *)v3;
    v6 = v19 + 22;
    os_unfair_lock_lock(v19 + 22);
    __nw_resolver_config_enumerate_name_servers_block_invoke((uint64_t)v18);
    os_unfair_lock_unlock(v6);
    v7 = *(void **)(*(_QWORD *)&buf[8] + 40);
    if (v7)
    {
      applier[0] = v5;
      applier[1] = 3221225472;
      applier[2] = __nw_resolver_config_enumerate_name_servers_block_invoke_2;
      applier[3] = &unk_1E14A4E60;
      v17 = v4;
      xpc_array_apply(v7, applier);

    }
    _Block_object_dispose(buf, 8);

    goto LABEL_5;
  }
  __nwlog_obj();
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_resolver_config_enumerate_name_servers";
  v9 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v21 = 0;
  if (__nwlog_fault(v9, &type, &v21))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_resolver_config_enumerate_name_servers";
        _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v21)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      v14 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_resolver_config_enumerate_name_servers";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_resolver_config_enumerate_name_servers";
        _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_resolver_config_enumerate_name_servers";
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_22:
  if (v9)
    free(v9);
LABEL_5:

}

void sub_1838A9E44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,id a30)
{
  void *v30;
  void *v31;

  _Block_object_dispose(&a25, 8);
  _Unwind_Resume(a1);
}

void nw_resolver_config_enumerate_search_domains(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  os_unfair_lock_s *v6;
  void *v7;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  char *backtrace_string;
  os_log_type_t v13;
  _BOOL4 v14;
  os_log_type_t v15;
  _QWORD applier[4];
  id v17;
  _QWORD v18[4];
  os_unfair_lock_s *v19;
  _BYTE *v20;
  char v21;
  os_log_type_t type;
  _BYTE buf[24];
  uint64_t (*v24)(uint64_t, uint64_t);
  void (*v25)(uint64_t);
  id v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (v3)
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x3032000000;
    v24 = __Block_byref_object_copy__22_52692;
    v25 = __Block_byref_object_dispose__23_52693;
    v5 = MEMORY[0x1E0C809B0];
    v26 = 0;
    v18[0] = MEMORY[0x1E0C809B0];
    v18[1] = 3221225472;
    v18[2] = __nw_resolver_config_enumerate_search_domains_block_invoke;
    v18[3] = &unk_1E14ACE40;
    v20 = buf;
    v19 = (os_unfair_lock_s *)v3;
    v6 = v19 + 22;
    os_unfair_lock_lock(v19 + 22);
    __nw_resolver_config_enumerate_search_domains_block_invoke((uint64_t)v18);
    os_unfair_lock_unlock(v6);
    v7 = *(void **)(*(_QWORD *)&buf[8] + 40);
    if (v7)
    {
      applier[0] = v5;
      applier[1] = 3221225472;
      applier[2] = __nw_resolver_config_enumerate_search_domains_block_invoke_2;
      applier[3] = &unk_1E14A4E60;
      v17 = v4;
      xpc_array_apply(v7, applier);

    }
    _Block_object_dispose(buf, 8);

    goto LABEL_5;
  }
  __nwlog_obj();
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_resolver_config_enumerate_search_domains";
  v9 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v21 = 0;
  if (__nwlog_fault(v9, &type, &v21))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_resolver_config_enumerate_search_domains";
        _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v21)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      v14 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_resolver_config_enumerate_search_domains";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_resolver_config_enumerate_search_domains";
        _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_resolver_config_enumerate_search_domains";
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_22:
  if (v9)
    free(v9);
LABEL_5:

}

void sub_1838AA26C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,id a30)
{
  void *v30;
  void *v31;

  _Block_object_dispose(&a25, 8);
  _Unwind_Resume(a1);
}

uint64_t nw_resolver_config_get_provider_name(void *a1)
{
  id v1;
  void *v2;
  os_unfair_lock_s *v3;
  uint64_t v4;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  _QWORD v14[4];
  os_unfair_lock_s *v15;
  _BYTE *v16;
  char v17;
  os_log_type_t type;
  _BYTE buf[24];
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x2020000000;
    v20 = 0;
    v14[0] = MEMORY[0x1E0C809B0];
    v14[1] = 3221225472;
    v14[2] = __nw_resolver_config_get_provider_name_block_invoke;
    v14[3] = &unk_1E14ACE40;
    v16 = buf;
    v15 = (os_unfair_lock_s *)v1;
    v3 = v15 + 22;
    os_unfair_lock_lock(v15 + 22);
    __nw_resolver_config_get_provider_name_block_invoke((uint64_t)v14);
    os_unfair_lock_unlock(v3);
    v4 = *(_QWORD *)(*(_QWORD *)&buf[8] + 24);

    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_resolver_config_get_provider_name";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v17 = 0;
  if (__nwlog_fault(v7, &type, &v17))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_resolver_config_get_provider_name";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_resolver_config_get_provider_name";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_resolver_config_get_provider_name";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_resolver_config_get_provider_name";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v7)
    free(v7);
  v4 = 0;
LABEL_3:

  return v4;
}

void sub_1838AA5CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, ...)
{
  void *v13;
  va_list va;

  va_start(va, a13);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t nw_resolver_config_get_provider_path(void *a1)
{
  id v1;
  void *v2;
  os_unfair_lock_s *v3;
  uint64_t v4;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  _QWORD v14[4];
  os_unfair_lock_s *v15;
  _BYTE *v16;
  char v17;
  os_log_type_t type;
  _BYTE buf[24];
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x2020000000;
    v20 = 0;
    v14[0] = MEMORY[0x1E0C809B0];
    v14[1] = 3221225472;
    v14[2] = __nw_resolver_config_get_provider_path_block_invoke;
    v14[3] = &unk_1E14ACE40;
    v16 = buf;
    v15 = (os_unfair_lock_s *)v1;
    v3 = v15 + 22;
    os_unfair_lock_lock(v15 + 22);
    __nw_resolver_config_get_provider_path_block_invoke((uint64_t)v14);
    os_unfair_lock_unlock(v3);
    v4 = *(_QWORD *)(*(_QWORD *)&buf[8] + 24);

    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_resolver_config_get_provider_path";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v17 = 0;
  if (__nwlog_fault(v7, &type, &v17))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_resolver_config_get_provider_path";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_resolver_config_get_provider_path";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_resolver_config_get_provider_path";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_resolver_config_get_provider_path";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v7)
    free(v7);
  v4 = 0;
LABEL_3:

  return v4;
}

void sub_1838AA910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, ...)
{
  void *v13;
  va_list va;

  va_start(va, a13);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t std::ostringstream::~ostringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x1E0DE4F60];
  v3 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)a1 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 8) = MEMORY[0x1E0DE4FB8] + 16;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x186DB3548](a1 + 112);
  return a1;
}

void __nw_resolver_config_get_provider_path_block_invoke(uint64_t a1)
{
  id v2;

  v2 = *(id *)(*(_QWORD *)(a1 + 32) + 8);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = xpc_dictionary_get_string(v2, "ProviderPath");

}

void sub_1838AAA10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void __nw_resolver_config_get_provider_name_block_invoke(uint64_t a1)
{
  id v2;

  v2 = *(id *)(*(_QWORD *)(a1 + 32) + 8);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = xpc_dictionary_get_string(v2, "ProviderName");

}

void sub_1838AAA74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__22_52692(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__23_52693(uint64_t a1)
{

}

void __nw_resolver_config_enumerate_search_domains_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;

  v5 = *(id *)(*(_QWORD *)(a1 + 32) + 8);
  xpc_dictionary_get_value(v5, "SearchDomains");
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_1838AAAFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t __nw_resolver_config_enumerate_search_domains_block_invoke_2(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  const char *string_ptr;

  v4 = a3;
  if (object_getClass(v4) == (Class)MEMORY[0x1E0C81390])
  {
    v6 = *(_QWORD *)(a1 + 32);
    string_ptr = xpc_string_get_string_ptr(v4);
    v5 = (*(uint64_t (**)(uint64_t, const char *))(v6 + 16))(v6, string_ptr);
  }
  else
  {
    v5 = 1;
  }

  return v5;
}

void sub_1838AAB78(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void __nw_resolver_config_enumerate_name_servers_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;

  v5 = *(id *)(*(_QWORD *)(a1 + 32) + 8);
  xpc_dictionary_get_value(v5, "NameServers");
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_1838AABE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t __nw_resolver_config_enumerate_name_servers_block_invoke_2(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  const char *string_ptr;

  v4 = a3;
  if (object_getClass(v4) == (Class)MEMORY[0x1E0C81390])
  {
    v6 = *(_QWORD *)(a1 + 32);
    string_ptr = xpc_string_get_string_ptr(v4);
    v5 = (*(uint64_t (**)(uint64_t, const char *))(v6 + 16))(v6, string_ptr);
  }
  else
  {
    v5 = 1;
  }

  return v5;
}

void sub_1838AAC60(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void __nw_resolver_config_get_protocol_block_invoke(uint64_t a1)
{
  id v2;

  v2 = *(id *)(*(_QWORD *)(a1 + 32) + 8);
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = xpc_dictionary_get_int64(v2, "Protocol");

}

void sub_1838AACC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

NWConcrete_nw_resolver_config *nw_resolver_config_create()
{
  xpc_object_t v0;
  NWConcrete_nw_resolver_config *v1;

  v0 = xpc_dictionary_create(0, 0, 0);
  v1 = nw_resolver_config_create_with_dictionary(v0);
  if (v0)

  return v1;
}

void sub_1838AAD28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  nw::retained_ptr<void({block_pointer} {__strong})(void)>::~retained_ptr((uint64_t)&a9);
  _Unwind_Resume(a1);
}

nw_resolver_config_t nw_resolver_config_create_https(nw_endpoint_t url_endpoint)
{
  NSObject *v1;
  NSObject *v2;
  NSObject *v3;
  int v4;
  const char *url_scheme;
  const char *v6;
  id v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  char *v11;
  os_log_type_t v12;
  _BOOL4 v13;
  xpc_object_t v14;
  NWConcrete_nw_resolver_config *v15;
  OS_xpc_object *m_obj;
  NWConcrete_nw_resolver_config *v17;
  NSObject *v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t url_path;
  os_log_type_t v22;
  void *v24;
  NSObject *v25;
  os_log_type_t v26;
  void *v27;
  os_log_type_t v28;
  char *backtrace_string;
  os_log_type_t v30;
  _BOOL4 v31;
  char *v32;
  os_log_type_t v33;
  _BOOL4 v34;
  os_log_type_t v35;
  os_log_type_t v36;
  os_log_type_t type[8];
  char v38;
  uint8_t buf[40];
  uuid_t out;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v1 = url_endpoint;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_resolver_config_create_https";
    v8 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    out[0] = 0;
    if (!__nwlog_fault(v8, type, out))
      goto LABEL_26;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v25 = objc_claimAutoreleasedReturnValue();
      v26 = type[0];
      if (os_log_type_enabled(v25, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_resolver_config_create_https";
        _os_log_impl(&dword_182FBE000, v25, v26, "%{public}s called with null url_endpoint", buf, 0xCu);
      }
    }
    else if (out[0])
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v25 = objc_claimAutoreleasedReturnValue();
      v30 = type[0];
      v31 = os_log_type_enabled(v25, type[0]);
      if (backtrace_string)
      {
        if (v31)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_resolver_config_create_https";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v25, v30, "%{public}s called with null url_endpoint, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        if (!v8)
          goto LABEL_28;
        goto LABEL_27;
      }
      if (v31)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_resolver_config_create_https";
        _os_log_impl(&dword_182FBE000, v25, v30, "%{public}s called with null url_endpoint, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v25 = objc_claimAutoreleasedReturnValue();
      v35 = type[0];
      if (os_log_type_enabled(v25, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_resolver_config_create_https";
        _os_log_impl(&dword_182FBE000, v25, v35, "%{public}s called with null url_endpoint, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_62;
  }
  v3 = v1;
  v4 = -[NSObject type](v3, "type");

  if (v4 != 4)
  {
    __nwlog_obj();
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_resolver_config_create_https";
    v8 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    out[0] = 0;
    if (!__nwlog_fault(v8, type, out))
      goto LABEL_26;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v25 = objc_claimAutoreleasedReturnValue();
      v28 = type[0];
      if (os_log_type_enabled(v25, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_resolver_config_create_https";
        _os_log_impl(&dword_182FBE000, v25, v28, "%{public}s called with null (nw_endpoint_get_type(url_endpoint) == nw_endpoint_type_url)", buf, 0xCu);
      }
    }
    else if (out[0])
    {
      v32 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v25 = objc_claimAutoreleasedReturnValue();
      v33 = type[0];
      v34 = os_log_type_enabled(v25, type[0]);
      if (v32)
      {
        if (v34)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_resolver_config_create_https";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v32;
          _os_log_impl(&dword_182FBE000, v25, v33, "%{public}s called with null (nw_endpoint_get_type(url_endpoint) == nw_endpoint_type_url), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v32);
LABEL_26:
        if (!v8)
        {
LABEL_28:
          v18 = 0;
          goto LABEL_29;
        }
LABEL_27:
        free(v8);
        goto LABEL_28;
      }
      if (v34)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_resolver_config_create_https";
        _os_log_impl(&dword_182FBE000, v25, v33, "%{public}s called with null (nw_endpoint_get_type(url_endpoint) == nw_endpoint_type_url), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v25 = objc_claimAutoreleasedReturnValue();
      v36 = type[0];
      if (os_log_type_enabled(v25, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_resolver_config_create_https";
        _os_log_impl(&dword_182FBE000, v25, v36, "%{public}s called with null (nw_endpoint_get_type(url_endpoint) == nw_endpoint_type_url), backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_62:

    goto LABEL_26;
  }
  url_scheme = (const char *)nw_endpoint_get_url_scheme(v3);
  v6 = url_scheme;
  if (!url_scheme || strcasecmp(url_scheme, "https"))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v7 = (id)gLogObj;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "nw_resolver_config_create_https";
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = v6;
    v8 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    out[0] = 0;
    if (__nwlog_fault(v8, type, out))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v9 = (id)gLogObj;
        v10 = type[0];
        if (os_log_type_enabled(v9, type[0]))
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_resolver_config_create_https";
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = v6;
          _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s Invalid URL scheme: %s", buf, 0x16u);
        }
      }
      else if (out[0])
      {
        v11 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v9 = (id)gLogObj;
        v12 = type[0];
        v13 = os_log_type_enabled(v9, type[0]);
        if (v11)
        {
          if (v13)
          {
            *(_DWORD *)buf = 136446722;
            *(_QWORD *)&buf[4] = "nw_resolver_config_create_https";
            *(_WORD *)&buf[12] = 2080;
            *(_QWORD *)&buf[14] = v6;
            *(_WORD *)&buf[22] = 2082;
            *(_QWORD *)&buf[24] = v11;
            _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s Invalid URL scheme: %s, dumping backtrace:%{public}s", buf, 0x20u);
          }

          free(v11);
          if (!v8)
            goto LABEL_28;
          goto LABEL_27;
        }
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_resolver_config_create_https";
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = v6;
          _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s Invalid URL scheme: %s, no backtrace", buf, 0x16u);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v9 = (id)gLogObj;
        v22 = type[0];
        if (os_log_type_enabled(v9, type[0]))
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_resolver_config_create_https";
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = v6;
          _os_log_impl(&dword_182FBE000, v9, v22, "%{public}s Invalid URL scheme: %s, backtrace limit exceeded", buf, 0x16u);
        }
      }

    }
    goto LABEL_26;
  }
  v14 = xpc_dictionary_create(0, 0, 0);
  *(_QWORD *)buf = v14;
  buf[8] = -1;
  v15 = nw_resolver_config_create_with_dictionary(v14);
  if (v14)

  *(_QWORD *)type = v15;
  v38 = -1;
  memset(out, 0, sizeof(out));
  uuid_generate_random(out);
  nw_resolver_config_set_identifier(v15, out);
  memset(buf, 0, 37);
  uuid_unparse(out, (char *)buf);
  m_obj = v15->dictionary.m_obj;
  v17 = v15;
  xpc_dictionary_set_string(m_obj, "Identifier", (const char *)buf);

  nw_resolver_config_set_class(v17, 3);
  nw_resolver_config_set_protocol(v17, 2);
  v18 = v17;
  v19 = v3;
  v20 = -[NSObject hostname](v19, "hostname");

  nw_resolver_config_set_provider_name(v18, v20);
  url_path = nw_endpoint_get_url_path(v19);
  if (url_path)
    nw_resolver_config_set_provider_path(v18, url_path);
LABEL_29:

  return v18;
}

void sub_1838AB58C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void *v5;
  va_list va;

  va_start(va, a5);
  nw::retained_ptr<void({block_pointer} {__strong})(void)>::~retained_ptr((uint64_t)va);

  _Unwind_Resume(a1);
}

void nw_resolver_config_set_identifier(void *a1, _OWORD *a2)
{
  char *v3;
  void *v4;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    *(_OWORD *)(v3 + 24) = *a2;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_resolver_config_set_identifier";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_resolver_config_set_identifier";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_resolver_config_set_identifier";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_resolver_config_set_identifier";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_resolver_config_set_identifier";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
LABEL_3:

}

void nw_resolver_config_set_class(void *a1, int a2)
{
  id v3;
  void *v4;
  os_unfair_lock_s *v5;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  _QWORD v14[5];
  int v15;
  char v16;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    v14[0] = MEMORY[0x1E0C809B0];
    v14[1] = 3221225472;
    v14[2] = __nw_resolver_config_set_class_block_invoke;
    v14[3] = &unk_1E14AB378;
    v5 = (os_unfair_lock_s *)v3;
    v14[4] = v5;
    v15 = a2;
    os_unfair_lock_lock(v5 + 22);
    __nw_resolver_config_set_class_block_invoke((uint64_t)v14);
    os_unfair_lock_unlock(v5 + 22);

    goto LABEL_3;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v19 = "nw_resolver_config_set_class";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v16 = 0;
  if (__nwlog_fault(v7, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_resolver_config_set_class";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          v19 = "nw_resolver_config_set_class";
          v20 = 2082;
          v21 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_resolver_config_set_class";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_resolver_config_set_class";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v7)
    free(v7);
LABEL_3:

}

void sub_1838ABB88(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_resolver_config_set_protocol(void *a1, int a2)
{
  id v3;
  void *v4;
  os_unfair_lock_s *v5;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  _QWORD v14[5];
  int v15;
  char v16;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    v14[0] = MEMORY[0x1E0C809B0];
    v14[1] = 3221225472;
    v14[2] = __nw_resolver_config_set_protocol_block_invoke;
    v14[3] = &unk_1E14AB378;
    v5 = (os_unfair_lock_s *)v3;
    v14[4] = v5;
    v15 = a2;
    os_unfair_lock_lock(v5 + 22);
    __nw_resolver_config_set_protocol_block_invoke((uint64_t)v14);
    os_unfair_lock_unlock(v5 + 22);

    goto LABEL_3;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v19 = "nw_resolver_config_set_protocol";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v16 = 0;
  if (__nwlog_fault(v7, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_resolver_config_set_protocol";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          v19 = "nw_resolver_config_set_protocol";
          v20 = 2082;
          v21 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_resolver_config_set_protocol";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_resolver_config_set_protocol";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v7)
    free(v7);
LABEL_3:

}

void sub_1838ABE88(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_resolver_config_set_provider_name(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  os_unfair_lock_s *v5;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  _QWORD v14[6];
  char v15;
  os_log_type_t v16;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    v14[0] = MEMORY[0x1E0C809B0];
    v14[1] = 3221225472;
    v14[2] = __nw_resolver_config_set_provider_name_block_invoke;
    v14[3] = &unk_1E14AA348;
    v5 = (os_unfair_lock_s *)v3;
    v14[4] = v5;
    v14[5] = a2;
    os_unfair_lock_lock(v5 + 22);
    __nw_resolver_config_set_provider_name_block_invoke((uint64_t)v14);
    os_unfair_lock_unlock(v5 + 22);

    goto LABEL_3;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v18 = "nw_resolver_config_set_provider_name";
  v7 = (char *)_os_log_send_and_compose_impl();

  v16 = OS_LOG_TYPE_ERROR;
  v15 = 0;
  if (__nwlog_fault(v7, &v16, &v15))
  {
    if (v16 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = v16;
      if (os_log_type_enabled(v8, v16))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_resolver_config_set_provider_name";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = v16;
      v12 = os_log_type_enabled(v8, v16);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          v18 = "nw_resolver_config_set_provider_name";
          v19 = 2082;
          v20 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_resolver_config_set_provider_name";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = v16;
      if (os_log_type_enabled(v8, v16))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_resolver_config_set_provider_name";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v7)
    free(v7);
LABEL_3:

}

void sub_1838AC184(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_resolver_config_set_provider_path(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  os_unfair_lock_s *v5;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  _QWORD v14[6];
  char v15;
  os_log_type_t v16;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    v14[0] = MEMORY[0x1E0C809B0];
    v14[1] = 3221225472;
    v14[2] = __nw_resolver_config_set_provider_path_block_invoke;
    v14[3] = &unk_1E14AA348;
    v5 = (os_unfair_lock_s *)v3;
    v14[4] = v5;
    v14[5] = a2;
    os_unfair_lock_lock(v5 + 22);
    __nw_resolver_config_set_provider_path_block_invoke((uint64_t)v14);
    os_unfair_lock_unlock(v5 + 22);

    goto LABEL_3;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v18 = "nw_resolver_config_set_provider_path";
  v7 = (char *)_os_log_send_and_compose_impl();

  v16 = OS_LOG_TYPE_ERROR;
  v15 = 0;
  if (__nwlog_fault(v7, &v16, &v15))
  {
    if (v16 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = v16;
      if (os_log_type_enabled(v8, v16))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_resolver_config_set_provider_path";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = v16;
      v12 = os_log_type_enabled(v8, v16);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          v18 = "nw_resolver_config_set_provider_path";
          v19 = 2082;
          v20 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_resolver_config_set_provider_path";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = v16;
      if (os_log_type_enabled(v8, v16))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_resolver_config_set_provider_path";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v7)
    free(v7);
LABEL_3:

}

void sub_1838AC480(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void __nw_resolver_config_set_provider_path_block_invoke(uint64_t a1)
{
  xpc_dictionary_set_string(*(xpc_object_t *)(*(_QWORD *)(a1 + 32) + 8), "ProviderPath", *(const char **)(a1 + 40));
}

void __nw_resolver_config_set_provider_name_block_invoke(uint64_t a1)
{
  xpc_dictionary_set_string(*(xpc_object_t *)(*(_QWORD *)(a1 + 32) + 8), "ProviderName", *(const char **)(a1 + 40));
}

void __nw_resolver_config_set_protocol_block_invoke(uint64_t a1)
{
  xpc_dictionary_set_int64(*(xpc_object_t *)(*(_QWORD *)(a1 + 32) + 8), "Protocol", *(unsigned int *)(a1 + 40));
}

void __nw_resolver_config_set_class_block_invoke(uint64_t a1)
{
  xpc_dictionary_set_int64(*(xpc_object_t *)(*(_QWORD *)(a1 + 32) + 8), "Class", *(unsigned int *)(a1 + 40));
}

nw_resolver_config_t nw_resolver_config_create_tls(nw_endpoint_t server_endpoint)
{
  NSObject *v1;
  NSObject *v2;
  NSObject *v3;
  int v4;
  xpc_object_t v5;
  NWConcrete_nw_resolver_config *v6;
  OS_xpc_object *m_obj;
  NWConcrete_nw_resolver_config *v8;
  NSObject *v9;
  NSObject *v10;
  uint64_t v11;
  void *v13;
  char *v14;
  NSObject *v15;
  os_log_type_t v16;
  void *v17;
  os_log_type_t v18;
  char *backtrace_string;
  os_log_type_t v20;
  _BOOL4 v21;
  char *v22;
  os_log_type_t v23;
  _BOOL4 v24;
  os_log_type_t v25;
  os_log_type_t v26;
  os_log_type_t type[8];
  char v28;
  uuid_string_t string;
  uuid_t out;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v1 = server_endpoint;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)string = 136446210;
    *(_QWORD *)&string[4] = "nw_resolver_config_create_tls";
    v14 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    out[0] = 0;
    if (!__nwlog_fault(v14, type, out))
      goto LABEL_40;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v15 = objc_claimAutoreleasedReturnValue();
      v16 = type[0];
      if (os_log_type_enabled(v15, type[0]))
      {
        *(_DWORD *)string = 136446210;
        *(_QWORD *)&string[4] = "nw_resolver_config_create_tls";
        _os_log_impl(&dword_182FBE000, v15, v16, "%{public}s called with null server_endpoint", (uint8_t *)string, 0xCu);
      }
    }
    else if (out[0])
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v15 = objc_claimAutoreleasedReturnValue();
      v20 = type[0];
      v21 = os_log_type_enabled(v15, type[0]);
      if (backtrace_string)
      {
        if (v21)
        {
          *(_DWORD *)string = 136446466;
          *(_QWORD *)&string[4] = "nw_resolver_config_create_tls";
          *(_WORD *)&string[12] = 2082;
          *(_QWORD *)&string[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v15, v20, "%{public}s called with null server_endpoint, dumping backtrace:%{public}s", (uint8_t *)string, 0x16u);
        }

        free(backtrace_string);
        if (!v14)
          goto LABEL_42;
        goto LABEL_41;
      }
      if (v21)
      {
        *(_DWORD *)string = 136446210;
        *(_QWORD *)&string[4] = "nw_resolver_config_create_tls";
        _os_log_impl(&dword_182FBE000, v15, v20, "%{public}s called with null server_endpoint, no backtrace", (uint8_t *)string, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v15 = objc_claimAutoreleasedReturnValue();
      v25 = type[0];
      if (os_log_type_enabled(v15, type[0]))
      {
        *(_DWORD *)string = 136446210;
        *(_QWORD *)&string[4] = "nw_resolver_config_create_tls";
        _os_log_impl(&dword_182FBE000, v15, v25, "%{public}s called with null server_endpoint, backtrace limit exceeded", (uint8_t *)string, 0xCu);
      }
    }
    goto LABEL_39;
  }
  v3 = v1;
  v4 = -[NSObject type](v3, "type");

  if ((v4 - 3) < 0xFFFFFFFE)
  {
    __nwlog_obj();
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)string = 136446210;
    *(_QWORD *)&string[4] = "nw_resolver_config_create_tls";
    v14 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    out[0] = 0;
    if (!__nwlog_fault(v14, type, out))
      goto LABEL_40;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v15 = objc_claimAutoreleasedReturnValue();
      v18 = type[0];
      if (os_log_type_enabled(v15, type[0]))
      {
        *(_DWORD *)string = 136446210;
        *(_QWORD *)&string[4] = "nw_resolver_config_create_tls";
        _os_log_impl(&dword_182FBE000, v15, v18, "%{public}s called with null (type == nw_endpoint_type_host || type == nw_endpoint_type_address)", (uint8_t *)string, 0xCu);
      }
    }
    else if (out[0])
    {
      v22 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v15 = objc_claimAutoreleasedReturnValue();
      v23 = type[0];
      v24 = os_log_type_enabled(v15, type[0]);
      if (v22)
      {
        if (v24)
        {
          *(_DWORD *)string = 136446466;
          *(_QWORD *)&string[4] = "nw_resolver_config_create_tls";
          *(_WORD *)&string[12] = 2082;
          *(_QWORD *)&string[14] = v22;
          _os_log_impl(&dword_182FBE000, v15, v23, "%{public}s called with null (type == nw_endpoint_type_host || type == nw_endpoint_type_address), dumping backtrace:%{public}s", (uint8_t *)string, 0x16u);
        }

        free(v22);
LABEL_40:
        if (!v14)
        {
LABEL_42:
          v9 = 0;
          goto LABEL_6;
        }
LABEL_41:
        free(v14);
        goto LABEL_42;
      }
      if (v24)
      {
        *(_DWORD *)string = 136446210;
        *(_QWORD *)&string[4] = "nw_resolver_config_create_tls";
        _os_log_impl(&dword_182FBE000, v15, v23, "%{public}s called with null (type == nw_endpoint_type_host || type == nw_endpoint_type_address), no backtrace", (uint8_t *)string, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v15 = objc_claimAutoreleasedReturnValue();
      v26 = type[0];
      if (os_log_type_enabled(v15, type[0]))
      {
        *(_DWORD *)string = 136446210;
        *(_QWORD *)&string[4] = "nw_resolver_config_create_tls";
        _os_log_impl(&dword_182FBE000, v15, v26, "%{public}s called with null (type == nw_endpoint_type_host || type == nw_endpoint_type_address), backtrace limit exceeded", (uint8_t *)string, 0xCu);
      }
    }
LABEL_39:

    goto LABEL_40;
  }
  v5 = xpc_dictionary_create(0, 0, 0);
  *(_QWORD *)string = v5;
  string[8] = -1;
  v6 = nw_resolver_config_create_with_dictionary(v5);
  if (v5)

  *(_QWORD *)type = v6;
  v28 = -1;
  memset(out, 0, sizeof(out));
  uuid_generate_random(out);
  nw_resolver_config_set_identifier(v6, out);
  memset(string, 0, sizeof(string));
  uuid_unparse(out, string);
  m_obj = v6->dictionary.m_obj;
  v8 = v6;
  xpc_dictionary_set_string(m_obj, "Identifier", string);

  nw_resolver_config_set_class(v8, 3);
  nw_resolver_config_set_protocol(v8, 1);
  v9 = v8;
  v10 = v3;
  v11 = -[NSObject hostname](v10, "hostname");

  nw_resolver_config_set_provider_name(v9, v11);
LABEL_6:

  return v9;
}

void sub_1838ACA8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void *v5;
  void *v6;
  va_list va;

  va_start(va, a5);

  nw::retained_ptr<void({block_pointer} {__strong})(void)>::~retained_ptr((uint64_t)va);
  _Unwind_Resume(a1);
}

id nw_resolver_config_copy_dictionary(void *a1)
{
  id v1;
  void *v2;
  os_unfair_lock_s *v3;
  uint64_t v4;
  id v5;
  void *v6;
  id v7;
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  char *backtrace_string;
  os_log_type_t v14;
  _BOOL4 v15;
  os_log_type_t v16;
  _QWORD v17[4];
  os_unfair_lock_s *v18;
  _BYTE *v19;
  char v20;
  os_log_type_t type;
  _BYTE buf[24];
  void (*v23)(uint64_t, uint64_t);
  void (*v24)(uint64_t);
  uint64_t v25;
  id v26;
  char v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x4012000000;
    v23 = __Block_byref_object_copy__12_52853;
    v24 = __Block_byref_object_dispose__13_52854;
    v25 = 256;
    v26 = 0;
    v27 = -1;
    v17[0] = MEMORY[0x1E0C809B0];
    v17[1] = 3221225472;
    v17[2] = __nw_resolver_config_copy_dictionary_block_invoke;
    v17[3] = &unk_1E14ACE40;
    v19 = buf;
    v18 = (os_unfair_lock_s *)v1;
    v3 = v18 + 22;
    os_unfair_lock_lock(v18 + 22);
    __nw_resolver_config_copy_dictionary_block_invoke((uint64_t)v17);
    os_unfair_lock_unlock(v3);
    v4 = *(_QWORD *)&buf[8];
    v5 = *(id *)(*(_QWORD *)&buf[8] + 48);
    v6 = *(void **)(v4 + 48);
    *(_QWORD *)(v4 + 48) = 0;

    _Block_object_dispose(buf, 8);
    v7 = v26;
    if ((v27 & 1) != 0 && v26)
    {
      v26 = 0;

      v7 = v26;
    }
    v26 = 0;

    goto LABEL_6;
  }
  __nwlog_obj();
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_resolver_config_copy_dictionary";
  v10 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v20 = 0;
  if (__nwlog_fault(v10, &type, &v20))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_resolver_config_copy_dictionary";
        _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v20)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      v15 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_resolver_config_copy_dictionary";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_resolver_config_copy_dictionary";
        _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_resolver_config_copy_dictionary";
        _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_23:
  if (v10)
    free(v10);
  v5 = 0;
LABEL_6:

  return v5;
}

void __Block_byref_object_copy__12_52853(uint64_t a1, uint64_t a2)
{
  void *v4;

  *(_QWORD *)(a1 + 48) = *(id *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a1 + 56) & 0xFE | *(_BYTE *)(a2 + 56) & 1;
  v4 = *(void **)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;

  *(_BYTE *)(a2 + 56) &= ~1u;
}

void __Block_byref_object_dispose__13_52854(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if ((*(_BYTE *)(a1 + 56) & 1) != 0 && v2)
  {
    *(_QWORD *)(a1 + 48) = 0;

    v2 = *(void **)(a1 + 48);
  }
  *(_QWORD *)(a1 + 48) = 0;

}

void __nw_resolver_config_copy_dictionary_block_invoke(uint64_t a1)
{
  id v2;
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;

  v2 = *(id *)(*(_QWORD *)(a1 + 32) + 8);
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 48);
  if ((*(_BYTE *)(v3 + 56) & 1) != 0 && v4)
  {
    *(_QWORD *)(v3 + 48) = 0;

    v4 = *(void **)(v3 + 48);
  }
  *(_QWORD *)(v3 + 48) = 0;

  v5 = *(void **)(v3 + 48);
  *(_QWORD *)(v3 + 48) = v2;
  v6 = v2;

  *(_BYTE *)(v3 + 56) |= 1u;
}

CFDataRef nw_resolver_config_copy_plist_data_ref(void *a1)
{
  id v1;
  void *v2;
  os_unfair_lock_s *v3;
  const void *v4;
  CFDataRef Data;
  id v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v12;
  _BOOL4 v13;
  os_log_type_t v14;
  void *v15;
  char *v16;
  NSObject *v17;
  os_log_type_t v18;
  char *v19;
  os_log_type_t v20;
  _BOOL4 v21;
  os_log_type_t v22;
  char v23;
  _QWORD v24[4];
  os_unfair_lock_s *v25;
  _BYTE *v26;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v29;
  __int16 v30;
  char *v31;
  _BYTE v32[24];
  uint64_t (*v33)(uint64_t, uint64_t);
  void (*v34)(uint64_t);
  void *v35;
  CFTypeRef v36;
  char v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    *(_QWORD *)v32 = 0;
    *(_QWORD *)&v32[8] = v32;
    *(_QWORD *)&v32[16] = 0x4012000000;
    v33 = __Block_byref_object_copy__15;
    v34 = __Block_byref_object_dispose__16;
    v35 = &unk_183EA1965;
    v36 = 0;
    v37 = -1;
    v24[0] = MEMORY[0x1E0C809B0];
    v24[1] = 3221225472;
    v24[2] = __nw_resolver_config_copy_plist_data_ref_block_invoke;
    v24[3] = &unk_1E14ACE40;
    v26 = v32;
    v25 = (os_unfair_lock_s *)v1;
    v3 = v25 + 22;
    os_unfair_lock_lock(v25 + 22);
    __nw_resolver_config_copy_plist_data_ref_block_invoke((uint64_t)v24);
    os_unfair_lock_unlock(v3);
    v4 = *(const void **)(*(_QWORD *)&v32[8] + 48);
    if (v4)
    {
      Data = CFPropertyListCreateData((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v4, kCFPropertyListBinaryFormat_v1_0, 0, 0);
LABEL_12:

      _Block_object_dispose(v32, 8);
      if ((v37 & 1) != 0 && v36)
        CFRelease(v36);
      goto LABEL_15;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v6 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v29 = "nw_resolver_config_copy_plist_data_ref";
    v7 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (__nwlog_fault(v7, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v8 = (id)gLogObj;
        v9 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          v29 = "nw_resolver_config_copy_plist_data_ref";
          _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s _CFXPCCreateCFObjectFromXPCObject failed", buf, 0xCu);
        }
      }
      else if (v23)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v8 = (id)gLogObj;
        v12 = type;
        v13 = os_log_type_enabled(v8, type);
        if (backtrace_string)
        {
          if (v13)
          {
            *(_DWORD *)buf = 136446466;
            v29 = "nw_resolver_config_copy_plist_data_ref";
            v30 = 2082;
            v31 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v8, v12, "%{public}s _CFXPCCreateCFObjectFromXPCObject failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          if (!v7)
            goto LABEL_11;
          goto LABEL_10;
        }
        if (v13)
        {
          *(_DWORD *)buf = 136446210;
          v29 = "nw_resolver_config_copy_plist_data_ref";
          _os_log_impl(&dword_182FBE000, v8, v12, "%{public}s _CFXPCCreateCFObjectFromXPCObject failed, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v8 = (id)gLogObj;
        v14 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          v29 = "nw_resolver_config_copy_plist_data_ref";
          _os_log_impl(&dword_182FBE000, v8, v14, "%{public}s _CFXPCCreateCFObjectFromXPCObject failed, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
    if (!v7)
    {
LABEL_11:
      Data = 0;
      goto LABEL_12;
    }
LABEL_10:
    free(v7);
    goto LABEL_11;
  }
  __nwlog_obj();
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)v32 = 136446210;
  *(_QWORD *)&v32[4] = "nw_resolver_config_copy_plist_data_ref";
  v16 = (char *)_os_log_send_and_compose_impl();

  buf[0] = 16;
  type = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v16, buf, &type))
  {
    if (buf[0] == 17)
    {
      __nwlog_obj();
      v17 = objc_claimAutoreleasedReturnValue();
      v18 = buf[0];
      if (os_log_type_enabled(v17, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)v32 = 136446210;
        *(_QWORD *)&v32[4] = "nw_resolver_config_copy_plist_data_ref";
        _os_log_impl(&dword_182FBE000, v17, v18, "%{public}s called with null config", v32, 0xCu);
      }
    }
    else if (type)
    {
      v19 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v17 = objc_claimAutoreleasedReturnValue();
      v20 = buf[0];
      v21 = os_log_type_enabled(v17, (os_log_type_t)buf[0]);
      if (v19)
      {
        if (v21)
        {
          *(_DWORD *)v32 = 136446466;
          *(_QWORD *)&v32[4] = "nw_resolver_config_copy_plist_data_ref";
          *(_WORD *)&v32[12] = 2082;
          *(_QWORD *)&v32[14] = v19;
          _os_log_impl(&dword_182FBE000, v17, v20, "%{public}s called with null config, dumping backtrace:%{public}s", v32, 0x16u);
        }

        free(v19);
        goto LABEL_44;
      }
      if (v21)
      {
        *(_DWORD *)v32 = 136446210;
        *(_QWORD *)&v32[4] = "nw_resolver_config_copy_plist_data_ref";
        _os_log_impl(&dword_182FBE000, v17, v20, "%{public}s called with null config, no backtrace", v32, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v17 = objc_claimAutoreleasedReturnValue();
      v22 = buf[0];
      if (os_log_type_enabled(v17, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)v32 = 136446210;
        *(_QWORD *)&v32[4] = "nw_resolver_config_copy_plist_data_ref";
        _os_log_impl(&dword_182FBE000, v17, v22, "%{public}s called with null config, backtrace limit exceeded", v32, 0xCu);
      }
    }

  }
LABEL_44:
  if (v16)
    free(v16);
  Data = 0;
LABEL_15:

  return Data;
}

void sub_1838AD59C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  void *v32;
  uint64_t v33;
  const void *v35;

  _Block_object_dispose(&a25, 8);
  if ((a32 & 1) != 0)
  {
    v35 = *(const void **)(v33 + 48);
    if (v35)
      CFRelease(v35);
  }

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__15(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(result + 56) = *(_BYTE *)(result + 56) & 0xFE | *(_BYTE *)(a2 + 56) & 1;
  *(_QWORD *)(a2 + 48) = 0;
  *(_BYTE *)(a2 + 56) &= ~1u;
  return result;
}

void __Block_byref_object_dispose__16(uint64_t a1)
{
  const void *v2;

  if ((*(_BYTE *)(a1 + 56) & 1) != 0)
  {
    v2 = *(const void **)(a1 + 48);
    if (v2)
      CFRelease(v2);
  }
  *(_QWORD *)(a1 + 48) = 0;
}

void __nw_resolver_config_copy_plist_data_ref_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  const void *v5;
  id v6;

  v6 = *(id *)(*(_QWORD *)(a1 + 32) + 8);
  v2 = _CFXPCCreateCFObjectFromXPCObject();
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(_BYTE *)(v3 + 56);
  if ((v4 & 1) != 0)
  {
    v5 = *(const void **)(v3 + 48);
    if (v5)
    {
      CFRelease(v5);
      v4 = *(_BYTE *)(v3 + 56);
    }
  }
  *(_QWORD *)(v3 + 48) = v2;
  *(_BYTE *)(v3 + 56) = v4 | 1;

}

void sub_1838AD6AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

dispatch_data_t nw_resolver_config_copy_plist_data(void *a1)
{
  id v1;
  void *v2;
  const __CFData *v3;
  const UInt8 *BytePtr;
  CFIndex Length;
  dispatch_data_t v6;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  char *backtrace_string;
  os_log_type_t v13;
  _BOOL4 v14;
  os_log_type_t v15;
  _QWORD destructor[5];
  char v17;
  os_log_type_t type;
  _BYTE buf[24];
  uint64_t (*v20)(uint64_t, uint64_t);
  void (*v21)(uint64_t);
  void *v22;
  CFTypeRef cf;
  char v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x4012000000;
    v20 = __Block_byref_object_copy__18;
    v21 = __Block_byref_object_dispose__19;
    v22 = &unk_183EA1965;
    cf = nw_resolver_config_copy_plist_data_ref(v1);
    v24 |= 1u;
    v3 = *(const __CFData **)(*(_QWORD *)&buf[8] + 48);
    if (v3)
    {
      BytePtr = CFDataGetBytePtr(v3);
      Length = CFDataGetLength(*(CFDataRef *)(*(_QWORD *)&buf[8] + 48));
      destructor[0] = MEMORY[0x1E0C809B0];
      destructor[1] = 3221225472;
      destructor[2] = __nw_resolver_config_copy_plist_data_block_invoke;
      destructor[3] = &unk_1E14A4B68;
      destructor[4] = buf;
      v6 = dispatch_data_create(BytePtr, Length, 0, destructor);
    }
    else
    {
      v6 = 0;
    }
    _Block_object_dispose(buf, 8);
    if ((v24 & 1) != 0 && cf)
      CFRelease(cf);
    goto LABEL_8;
  }
  __nwlog_obj();
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_resolver_config_copy_plist_data";
  v9 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v17 = 0;
  if (__nwlog_fault(v9, &type, &v17))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_resolver_config_copy_plist_data";
        _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      v14 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_resolver_config_copy_plist_data";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_25;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_resolver_config_copy_plist_data";
        _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_resolver_config_copy_plist_data";
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_25:
  if (v9)
    free(v9);
  v6 = 0;
LABEL_8:

  return v6;
}

void sub_1838ADA2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,CFTypeRef cf,char a26)
{
  void *v26;

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__18(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(result + 56) = *(_BYTE *)(result + 56) & 0xFE | *(_BYTE *)(a2 + 56) & 1;
  *(_QWORD *)(a2 + 48) = 0;
  *(_BYTE *)(a2 + 56) &= ~1u;
  return result;
}

void __Block_byref_object_dispose__19(uint64_t a1)
{
  const void *v2;

  if ((*(_BYTE *)(a1 + 56) & 1) != 0)
  {
    v2 = *(const void **)(a1 + 48);
    if (v2)
      CFRelease(v2);
  }
  *(_QWORD *)(a1 + 48) = 0;
}

void __nw_resolver_config_copy_plist_data_block_invoke(uint64_t a1)
{
  uint64_t v1;
  char v2;
  const void *v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v2 = *(_BYTE *)(v1 + 56);
  if ((v2 & 1) != 0)
  {
    v3 = *(const void **)(v1 + 48);
    if (v3)
    {
      CFRelease(v3);
      v2 = *(_BYTE *)(v1 + 56);
    }
  }
  *(_QWORD *)(v1 + 48) = 0;
  *(_BYTE *)(v1 + 56) = v2 | 1;
}

void nw_resolver_config_add_name_server(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  os_unfair_lock_s *v5;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  _QWORD v14[6];
  char v15;
  os_log_type_t v16;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    v14[0] = MEMORY[0x1E0C809B0];
    v14[1] = 3221225472;
    v14[2] = __nw_resolver_config_add_name_server_block_invoke;
    v14[3] = &unk_1E14AA348;
    v5 = (os_unfair_lock_s *)v3;
    v14[4] = v5;
    v14[5] = a2;
    os_unfair_lock_lock(v5 + 22);
    __nw_resolver_config_add_name_server_block_invoke((uint64_t)v14);
    os_unfair_lock_unlock(v5 + 22);

    goto LABEL_3;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v18 = "nw_resolver_config_add_name_server";
  v7 = (char *)_os_log_send_and_compose_impl();

  v16 = OS_LOG_TYPE_ERROR;
  v15 = 0;
  if (__nwlog_fault(v7, &v16, &v15))
  {
    if (v16 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = v16;
      if (os_log_type_enabled(v8, v16))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_resolver_config_add_name_server";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = v16;
      v12 = os_log_type_enabled(v8, v16);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          v18 = "nw_resolver_config_add_name_server";
          v19 = 2082;
          v20 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_resolver_config_add_name_server";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = v16;
      if (os_log_type_enabled(v8, v16))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_resolver_config_add_name_server";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v7)
    free(v7);
LABEL_3:

}

void sub_1838ADDF0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void __nw_resolver_config_add_name_server_block_invoke(uint64_t a1)
{
  void *v2;
  id v3;

  xpc_dictionary_get_value(*(xpc_object_t *)(*(_QWORD *)(a1 + 32) + 8), "NameServers");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (v2)
  {
    v3 = 0;
  }
  else
  {
    v3 = xpc_array_create(0, 0);
    v2 = v3;
  }
  xpc_array_set_string(v2, 0xFFFFFFFFFFFFFFFFLL, *(const char **)(a1 + 40));
  xpc_dictionary_set_value(*(xpc_object_t *)(*(_QWORD *)(a1 + 32) + 8), "NameServers", v2);

  if (v3)
}

void sub_1838ADECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  va_list va;

  va_start(va, a3);

  nw::retained_ptr<void({block_pointer} {__strong})(void)>::~retained_ptr((uint64_t)va);
  _Unwind_Resume(a1);
}

void nw_resolver_config_clear_name_servers(void *a1)
{
  id v1;
  void *v2;
  os_unfair_lock_s *v3;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  char *backtrace_string;
  os_log_type_t v9;
  _BOOL4 v10;
  os_log_type_t v11;
  _QWORD v12[5];
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __nw_resolver_config_clear_name_servers_block_invoke;
    v12[3] = &unk_1E14ACFD0;
    v3 = (os_unfair_lock_s *)v1;
    v12[4] = v3;
    os_unfair_lock_lock(v3 + 22);
    __nw_resolver_config_clear_name_servers_block_invoke((uint64_t)v12);
    os_unfair_lock_unlock(v3 + 22);

    goto LABEL_3;
  }
  __nwlog_obj();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_resolver_config_clear_name_servers";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_resolver_config_clear_name_servers";
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_resolver_config_clear_name_servers";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_resolver_config_clear_name_servers";
        _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_resolver_config_clear_name_servers";
        _os_log_impl(&dword_182FBE000, v6, v11, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v5)
    free(v5);
LABEL_3:

}

void sub_1838AE1CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void __nw_resolver_config_clear_name_servers_block_invoke(uint64_t a1)
{
  xpc_dictionary_set_value(*(xpc_object_t *)(*(_QWORD *)(a1 + 32) + 8), "NameServers", 0);
}

void nw_resolver_config_add_search_domain(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  os_unfair_lock_s *v5;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  _QWORD v14[6];
  char v15;
  os_log_type_t v16;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    v14[0] = MEMORY[0x1E0C809B0];
    v14[1] = 3221225472;
    v14[2] = __nw_resolver_config_add_search_domain_block_invoke;
    v14[3] = &unk_1E14AA348;
    v5 = (os_unfair_lock_s *)v3;
    v14[4] = v5;
    v14[5] = a2;
    os_unfair_lock_lock(v5 + 22);
    __nw_resolver_config_add_search_domain_block_invoke((uint64_t)v14);
    os_unfair_lock_unlock(v5 + 22);

    goto LABEL_3;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v18 = "nw_resolver_config_add_search_domain";
  v7 = (char *)_os_log_send_and_compose_impl();

  v16 = OS_LOG_TYPE_ERROR;
  v15 = 0;
  if (__nwlog_fault(v7, &v16, &v15))
  {
    if (v16 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = v16;
      if (os_log_type_enabled(v8, v16))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_resolver_config_add_search_domain";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = v16;
      v12 = os_log_type_enabled(v8, v16);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          v18 = "nw_resolver_config_add_search_domain";
          v19 = 2082;
          v20 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_resolver_config_add_search_domain";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = v16;
      if (os_log_type_enabled(v8, v16))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_resolver_config_add_search_domain";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v7)
    free(v7);
LABEL_3:

}

void sub_1838AE4E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void __nw_resolver_config_add_search_domain_block_invoke(uint64_t a1)
{
  void *v2;
  id v3;

  xpc_dictionary_get_value(*(xpc_object_t *)(*(_QWORD *)(a1 + 32) + 8), "SearchDomains");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (v2)
  {
    v3 = 0;
  }
  else
  {
    v3 = xpc_array_create(0, 0);
    v2 = v3;
  }
  xpc_array_set_string(v2, 0xFFFFFFFFFFFFFFFFLL, *(const char **)(a1 + 40));
  xpc_dictionary_set_value(*(xpc_object_t *)(*(_QWORD *)(a1 + 32) + 8), "SearchDomains", v2);

  if (v3)
}

void sub_1838AE5BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  va_list va;

  va_start(va, a3);

  nw::retained_ptr<void({block_pointer} {__strong})(void)>::~retained_ptr((uint64_t)va);
  _Unwind_Resume(a1);
}

void nw_resolver_config_clear_search_domains(void *a1)
{
  id v1;
  void *v2;
  os_unfair_lock_s *v3;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  char *backtrace_string;
  os_log_type_t v9;
  _BOOL4 v10;
  os_log_type_t v11;
  _QWORD v12[5];
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __nw_resolver_config_clear_search_domains_block_invoke;
    v12[3] = &unk_1E14ACFD0;
    v3 = (os_unfair_lock_s *)v1;
    v12[4] = v3;
    os_unfair_lock_lock(v3 + 22);
    __nw_resolver_config_clear_search_domains_block_invoke((uint64_t)v12);
    os_unfair_lock_unlock(v3 + 22);

    goto LABEL_3;
  }
  __nwlog_obj();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_resolver_config_clear_search_domains";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_resolver_config_clear_search_domains";
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_resolver_config_clear_search_domains";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_resolver_config_clear_search_domains";
        _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_resolver_config_clear_search_domains";
        _os_log_impl(&dword_182FBE000, v6, v11, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v5)
    free(v5);
LABEL_3:

}

void sub_1838AE8BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void __nw_resolver_config_clear_search_domains_block_invoke(uint64_t a1)
{
  xpc_dictionary_set_value(*(xpc_object_t *)(*(_QWORD *)(a1 + 32) + 8), "SearchDomains", 0);
}

void nw_resolver_config_add_match_domain(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  os_unfair_lock_s *v5;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  _QWORD v14[6];
  char v15;
  os_log_type_t v16;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    v14[0] = MEMORY[0x1E0C809B0];
    v14[1] = 3221225472;
    v14[2] = __nw_resolver_config_add_match_domain_block_invoke;
    v14[3] = &unk_1E14AA348;
    v5 = (os_unfair_lock_s *)v3;
    v14[4] = v5;
    v14[5] = a2;
    os_unfair_lock_lock(v5 + 22);
    __nw_resolver_config_add_match_domain_block_invoke((uint64_t)v14);
    os_unfair_lock_unlock(v5 + 22);

    goto LABEL_3;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v18 = "nw_resolver_config_add_match_domain";
  v7 = (char *)_os_log_send_and_compose_impl();

  v16 = OS_LOG_TYPE_ERROR;
  v15 = 0;
  if (__nwlog_fault(v7, &v16, &v15))
  {
    if (v16 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = v16;
      if (os_log_type_enabled(v8, v16))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_resolver_config_add_match_domain";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = v16;
      v12 = os_log_type_enabled(v8, v16);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          v18 = "nw_resolver_config_add_match_domain";
          v19 = 2082;
          v20 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_resolver_config_add_match_domain";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = v16;
      if (os_log_type_enabled(v8, v16))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_resolver_config_add_match_domain";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v7)
    free(v7);
LABEL_3:

}

void sub_1838AEBD0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void __nw_resolver_config_add_match_domain_block_invoke(uint64_t a1)
{
  void *v2;
  id v3;

  xpc_dictionary_get_value(*(xpc_object_t *)(*(_QWORD *)(a1 + 32) + 8), "MatchDomains");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (v2)
  {
    v3 = 0;
  }
  else
  {
    v3 = xpc_array_create(0, 0);
    v2 = v3;
  }
  xpc_array_set_string(v2, 0xFFFFFFFFFFFFFFFFLL, *(const char **)(a1 + 40));
  xpc_dictionary_set_value(*(xpc_object_t *)(*(_QWORD *)(a1 + 32) + 8), "MatchDomains", v2);

  if (v3)
}

void sub_1838AECAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  va_list va;

  va_start(va, a3);

  nw::retained_ptr<void({block_pointer} {__strong})(void)>::~retained_ptr((uint64_t)va);
  _Unwind_Resume(a1);
}

void nw_resolver_config_clear_match_domains(void *a1)
{
  id v1;
  void *v2;
  os_unfair_lock_s *v3;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  char *backtrace_string;
  os_log_type_t v9;
  _BOOL4 v10;
  os_log_type_t v11;
  _QWORD v12[5];
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __nw_resolver_config_clear_match_domains_block_invoke;
    v12[3] = &unk_1E14ACFD0;
    v3 = (os_unfair_lock_s *)v1;
    v12[4] = v3;
    os_unfair_lock_lock(v3 + 22);
    __nw_resolver_config_clear_match_domains_block_invoke((uint64_t)v12);
    os_unfair_lock_unlock(v3 + 22);

    goto LABEL_3;
  }
  __nwlog_obj();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_resolver_config_clear_match_domains";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_resolver_config_clear_match_domains";
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_resolver_config_clear_match_domains";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_resolver_config_clear_match_domains";
        _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_resolver_config_clear_match_domains";
        _os_log_impl(&dword_182FBE000, v6, v11, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v5)
    free(v5);
LABEL_3:

}

void sub_1838AEFAC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void __nw_resolver_config_clear_match_domains_block_invoke(uint64_t a1)
{
  xpc_dictionary_set_value(*(xpc_object_t *)(*(_QWORD *)(a1 + 32) + 8), "MatchDomains", 0);
}

void nw_resolver_config_enumerate_match_domains(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  os_unfair_lock_s *v6;
  void *v7;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  char *backtrace_string;
  os_log_type_t v13;
  _BOOL4 v14;
  os_log_type_t v15;
  _QWORD applier[4];
  id v17;
  _QWORD v18[4];
  os_unfair_lock_s *v19;
  _BYTE *v20;
  char v21;
  os_log_type_t type;
  _BYTE buf[24];
  uint64_t (*v24)(uint64_t, uint64_t);
  void (*v25)(uint64_t);
  id v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (v3)
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x3032000000;
    v24 = __Block_byref_object_copy__22_52692;
    v25 = __Block_byref_object_dispose__23_52693;
    v5 = MEMORY[0x1E0C809B0];
    v26 = 0;
    v18[0] = MEMORY[0x1E0C809B0];
    v18[1] = 3221225472;
    v18[2] = __nw_resolver_config_enumerate_match_domains_block_invoke;
    v18[3] = &unk_1E14ACE40;
    v20 = buf;
    v19 = (os_unfair_lock_s *)v3;
    v6 = v19 + 22;
    os_unfair_lock_lock(v19 + 22);
    __nw_resolver_config_enumerate_match_domains_block_invoke((uint64_t)v18);
    os_unfair_lock_unlock(v6);
    v7 = *(void **)(*(_QWORD *)&buf[8] + 40);
    if (v7)
    {
      applier[0] = v5;
      applier[1] = 3221225472;
      applier[2] = __nw_resolver_config_enumerate_match_domains_block_invoke_2;
      applier[3] = &unk_1E14A4E60;
      v17 = v4;
      xpc_array_apply(v7, applier);

    }
    _Block_object_dispose(buf, 8);

    goto LABEL_5;
  }
  __nwlog_obj();
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_resolver_config_enumerate_match_domains";
  v9 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v21 = 0;
  if (__nwlog_fault(v9, &type, &v21))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_resolver_config_enumerate_match_domains";
        _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v21)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      v14 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_resolver_config_enumerate_match_domains";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_resolver_config_enumerate_match_domains";
        _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_resolver_config_enumerate_match_domains";
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_22:
  if (v9)
    free(v9);
LABEL_5:

}

void sub_1838AF368(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,id a30)
{
  void *v30;
  void *v31;

  _Block_object_dispose(&a25, 8);
  _Unwind_Resume(a1);
}

void __nw_resolver_config_enumerate_match_domains_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;

  v5 = *(id *)(*(_QWORD *)(a1 + 32) + 8);
  xpc_dictionary_get_value(v5, "MatchDomains");
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_1838AF40C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t __nw_resolver_config_enumerate_match_domains_block_invoke_2(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  const char *string_ptr;

  v4 = a3;
  if (object_getClass(v4) == (Class)MEMORY[0x1E0C81390])
  {
    v6 = *(_QWORD *)(a1 + 32);
    string_ptr = xpc_string_get_string_ptr(v4);
    v5 = (*(uint64_t (**)(uint64_t, const char *))(v6 + 16))(v6, string_ptr);
  }
  else
  {
    v5 = 1;
  }

  return v5;
}

void sub_1838AF488(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_resolver_config_add_server_raw_public_key(void *a1, uint64_t a2, uint64_t a3)
{
  id v5;
  void *v6;
  os_unfair_lock_s *v7;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  char *backtrace_string;
  os_log_type_t v13;
  _BOOL4 v14;
  os_log_type_t v15;
  _QWORD v16[7];
  char v17;
  os_log_type_t v18;
  uint8_t buf[4];
  const char *v20;
  __int16 v21;
  char *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = v5;
  if (v5)
  {
    v16[0] = MEMORY[0x1E0C809B0];
    v16[1] = 3221225472;
    v16[2] = __nw_resolver_config_add_server_raw_public_key_block_invoke;
    v16[3] = &unk_1E14AB088;
    v7 = (os_unfair_lock_s *)v5;
    v16[4] = v7;
    v16[5] = a2;
    v16[6] = a3;
    os_unfair_lock_lock(v7 + 22);
    __nw_resolver_config_add_server_raw_public_key_block_invoke((uint64_t)v16);
    os_unfair_lock_unlock(v7 + 22);

    goto LABEL_3;
  }
  __nwlog_obj();
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v20 = "nw_resolver_config_add_server_raw_public_key";
  v9 = (char *)_os_log_send_and_compose_impl();

  v18 = OS_LOG_TYPE_ERROR;
  v17 = 0;
  if (__nwlog_fault(v9, &v18, &v17))
  {
    if (v18 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = v18;
      if (os_log_type_enabled(v10, v18))
      {
        *(_DWORD *)buf = 136446210;
        v20 = "nw_resolver_config_add_server_raw_public_key";
        _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v13 = v18;
      v14 = os_log_type_enabled(v10, v18);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          v20 = "nw_resolver_config_add_server_raw_public_key";
          v21 = 2082;
          v22 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        v20 = "nw_resolver_config_add_server_raw_public_key";
        _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v15 = v18;
      if (os_log_type_enabled(v10, v18))
      {
        *(_DWORD *)buf = 136446210;
        v20 = "nw_resolver_config_add_server_raw_public_key";
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v9)
    free(v9);
LABEL_3:

}

void sub_1838AF780(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void __nw_resolver_config_add_server_raw_public_key_block_invoke(uint64_t a1)
{
  void *v2;
  id v3;

  xpc_dictionary_get_value(*(xpc_object_t *)(*(_QWORD *)(a1 + 32) + 8), "ServerRawPublicKey");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (v2)
  {
    v3 = 0;
  }
  else
  {
    v3 = xpc_array_create(0, 0);
    v2 = v3;
  }
  xpc_array_set_data(v2, 0xFFFFFFFFFFFFFFFFLL, *(const void **)(a1 + 40), *(_QWORD *)(a1 + 48));
  xpc_dictionary_set_value(*(xpc_object_t *)(*(_QWORD *)(a1 + 32) + 8), "ServerRawPublicKey", v2);

  if (v3)
}

void sub_1838AF85C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  va_list va;

  va_start(va, a3);

  nw::retained_ptr<void({block_pointer} {__strong})(void)>::~retained_ptr((uint64_t)va);
  _Unwind_Resume(a1);
}

void nw_resolver_config_clear_server_raw_public_keys(void *a1)
{
  id v1;
  void *v2;
  os_unfair_lock_s *v3;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  char *backtrace_string;
  os_log_type_t v9;
  _BOOL4 v10;
  os_log_type_t v11;
  _QWORD v12[5];
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __nw_resolver_config_clear_server_raw_public_keys_block_invoke;
    v12[3] = &unk_1E14ACFD0;
    v3 = (os_unfair_lock_s *)v1;
    v12[4] = v3;
    os_unfair_lock_lock(v3 + 22);
    __nw_resolver_config_clear_server_raw_public_keys_block_invoke((uint64_t)v12);
    os_unfair_lock_unlock(v3 + 22);

    goto LABEL_3;
  }
  __nwlog_obj();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_resolver_config_clear_server_raw_public_keys";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_resolver_config_clear_server_raw_public_keys";
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_resolver_config_clear_server_raw_public_keys";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_resolver_config_clear_server_raw_public_keys";
        _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_resolver_config_clear_server_raw_public_keys";
        _os_log_impl(&dword_182FBE000, v6, v11, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v5)
    free(v5);
LABEL_3:

}

void sub_1838AFB5C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void __nw_resolver_config_clear_server_raw_public_keys_block_invoke(uint64_t a1)
{
  xpc_dictionary_set_value(*(xpc_object_t *)(*(_QWORD *)(a1 + 32) + 8), "ServerRawPublicKey", 0);
}

void nw_resolver_config_enumerate_server_raw_public_keys(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  os_unfair_lock_s *v6;
  void *v7;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  char *backtrace_string;
  os_log_type_t v13;
  _BOOL4 v14;
  os_log_type_t v15;
  _QWORD applier[4];
  id v17;
  _QWORD v18[4];
  os_unfair_lock_s *v19;
  _BYTE *v20;
  char v21;
  os_log_type_t type;
  _BYTE buf[24];
  uint64_t (*v24)(uint64_t, uint64_t);
  void (*v25)(uint64_t);
  id v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (v3)
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x3032000000;
    v24 = __Block_byref_object_copy__22_52692;
    v25 = __Block_byref_object_dispose__23_52693;
    v5 = MEMORY[0x1E0C809B0];
    v26 = 0;
    v18[0] = MEMORY[0x1E0C809B0];
    v18[1] = 3221225472;
    v18[2] = __nw_resolver_config_enumerate_server_raw_public_keys_block_invoke;
    v18[3] = &unk_1E14ACE40;
    v20 = buf;
    v19 = (os_unfair_lock_s *)v3;
    v6 = v19 + 22;
    os_unfair_lock_lock(v19 + 22);
    __nw_resolver_config_enumerate_server_raw_public_keys_block_invoke((uint64_t)v18);
    os_unfair_lock_unlock(v6);
    v7 = *(void **)(*(_QWORD *)&buf[8] + 40);
    if (v7)
    {
      applier[0] = v5;
      applier[1] = 3221225472;
      applier[2] = __nw_resolver_config_enumerate_server_raw_public_keys_block_invoke_2;
      applier[3] = &unk_1E14A4E60;
      v17 = v4;
      xpc_array_apply(v7, applier);

    }
    _Block_object_dispose(buf, 8);

    goto LABEL_5;
  }
  __nwlog_obj();
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_resolver_config_enumerate_server_raw_public_keys";
  v9 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v21 = 0;
  if (__nwlog_fault(v9, &type, &v21))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_resolver_config_enumerate_server_raw_public_keys";
        _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v21)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      v14 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_resolver_config_enumerate_server_raw_public_keys";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_resolver_config_enumerate_server_raw_public_keys";
        _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_resolver_config_enumerate_server_raw_public_keys";
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_22:
  if (v9)
    free(v9);
LABEL_5:

}

void sub_1838AFF18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,id a30)
{
  void *v30;
  void *v31;

  _Block_object_dispose(&a25, 8);
  _Unwind_Resume(a1);
}

void __nw_resolver_config_enumerate_server_raw_public_keys_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;

  v5 = *(id *)(*(_QWORD *)(a1 + 32) + 8);
  xpc_dictionary_get_value(v5, "ServerRawPublicKey");
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_1838AFFBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t __nw_resolver_config_enumerate_server_raw_public_keys_block_invoke_2(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  const void *bytes_ptr;
  size_t length;

  v4 = a3;
  if (object_getClass(v4) == (Class)MEMORY[0x1E0C812E8])
  {
    v6 = *(_QWORD *)(a1 + 32);
    bytes_ptr = xpc_data_get_bytes_ptr(v4);
    length = xpc_data_get_length(v4);
    v5 = (*(uint64_t (**)(uint64_t, const void *, size_t))(v6 + 16))(v6, bytes_ptr, length);
  }
  else
  {
    v5 = 1;
  }

  return v5;
}

void sub_1838B0050(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_resolver_config_add_client_raw_public_key(void *a1, uint64_t a2, uint64_t a3)
{
  id v5;
  void *v6;
  os_unfair_lock_s *v7;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  char *backtrace_string;
  os_log_type_t v13;
  _BOOL4 v14;
  os_log_type_t v15;
  _QWORD v16[7];
  char v17;
  os_log_type_t v18;
  uint8_t buf[4];
  const char *v20;
  __int16 v21;
  char *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = v5;
  if (v5)
  {
    v16[0] = MEMORY[0x1E0C809B0];
    v16[1] = 3221225472;
    v16[2] = __nw_resolver_config_add_client_raw_public_key_block_invoke;
    v16[3] = &unk_1E14AB088;
    v7 = (os_unfair_lock_s *)v5;
    v16[4] = v7;
    v16[5] = a2;
    v16[6] = a3;
    os_unfair_lock_lock(v7 + 22);
    __nw_resolver_config_add_client_raw_public_key_block_invoke((uint64_t)v16);
    os_unfair_lock_unlock(v7 + 22);

    goto LABEL_3;
  }
  __nwlog_obj();
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v20 = "nw_resolver_config_add_client_raw_public_key";
  v9 = (char *)_os_log_send_and_compose_impl();

  v18 = OS_LOG_TYPE_ERROR;
  v17 = 0;
  if (__nwlog_fault(v9, &v18, &v17))
  {
    if (v18 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = v18;
      if (os_log_type_enabled(v10, v18))
      {
        *(_DWORD *)buf = 136446210;
        v20 = "nw_resolver_config_add_client_raw_public_key";
        _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v13 = v18;
      v14 = os_log_type_enabled(v10, v18);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          v20 = "nw_resolver_config_add_client_raw_public_key";
          v21 = 2082;
          v22 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        v20 = "nw_resolver_config_add_client_raw_public_key";
        _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v15 = v18;
      if (os_log_type_enabled(v10, v18))
      {
        *(_DWORD *)buf = 136446210;
        v20 = "nw_resolver_config_add_client_raw_public_key";
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v9)
    free(v9);
LABEL_3:

}

void sub_1838B0348(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void __nw_resolver_config_add_client_raw_public_key_block_invoke(uint64_t a1)
{
  void *v2;
  id v3;

  xpc_dictionary_get_value(*(xpc_object_t *)(*(_QWORD *)(a1 + 32) + 8), "ClientRawPublicKey");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (v2)
  {
    v3 = 0;
  }
  else
  {
    v3 = xpc_array_create(0, 0);
    v2 = v3;
  }
  xpc_array_set_data(v2, 0xFFFFFFFFFFFFFFFFLL, *(const void **)(a1 + 40), *(_QWORD *)(a1 + 48));
  xpc_dictionary_set_value(*(xpc_object_t *)(*(_QWORD *)(a1 + 32) + 8), "ClientRawPublicKey", v2);

  if (v3)
}

void sub_1838B0424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  va_list va;

  va_start(va, a3);

  nw::retained_ptr<void({block_pointer} {__strong})(void)>::~retained_ptr((uint64_t)va);
  _Unwind_Resume(a1);
}

void nw_resolver_config_clear_client_raw_public_keys(void *a1)
{
  id v1;
  void *v2;
  os_unfair_lock_s *v3;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  char *backtrace_string;
  os_log_type_t v9;
  _BOOL4 v10;
  os_log_type_t v11;
  _QWORD v12[5];
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __nw_resolver_config_clear_client_raw_public_keys_block_invoke;
    v12[3] = &unk_1E14ACFD0;
    v3 = (os_unfair_lock_s *)v1;
    v12[4] = v3;
    os_unfair_lock_lock(v3 + 22);
    __nw_resolver_config_clear_client_raw_public_keys_block_invoke((uint64_t)v12);
    os_unfair_lock_unlock(v3 + 22);

    goto LABEL_3;
  }
  __nwlog_obj();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_resolver_config_clear_client_raw_public_keys";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_resolver_config_clear_client_raw_public_keys";
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_resolver_config_clear_client_raw_public_keys";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_resolver_config_clear_client_raw_public_keys";
        _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_resolver_config_clear_client_raw_public_keys";
        _os_log_impl(&dword_182FBE000, v6, v11, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v5)
    free(v5);
LABEL_3:

}

void sub_1838B0724(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void __nw_resolver_config_clear_client_raw_public_keys_block_invoke(uint64_t a1)
{
  xpc_dictionary_set_value(*(xpc_object_t *)(*(_QWORD *)(a1 + 32) + 8), "ClientRawPublicKey", 0);
}

void nw_resolver_config_enumerate_client_raw_public_keys(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  os_unfair_lock_s *v6;
  void *v7;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  char *backtrace_string;
  os_log_type_t v13;
  _BOOL4 v14;
  os_log_type_t v15;
  _QWORD applier[4];
  id v17;
  _QWORD v18[4];
  os_unfair_lock_s *v19;
  _BYTE *v20;
  char v21;
  os_log_type_t type;
  _BYTE buf[24];
  uint64_t (*v24)(uint64_t, uint64_t);
  void (*v25)(uint64_t);
  id v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (v3)
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x3032000000;
    v24 = __Block_byref_object_copy__22_52692;
    v25 = __Block_byref_object_dispose__23_52693;
    v5 = MEMORY[0x1E0C809B0];
    v26 = 0;
    v18[0] = MEMORY[0x1E0C809B0];
    v18[1] = 3221225472;
    v18[2] = __nw_resolver_config_enumerate_client_raw_public_keys_block_invoke;
    v18[3] = &unk_1E14ACE40;
    v20 = buf;
    v19 = (os_unfair_lock_s *)v3;
    v6 = v19 + 22;
    os_unfair_lock_lock(v19 + 22);
    __nw_resolver_config_enumerate_client_raw_public_keys_block_invoke((uint64_t)v18);
    os_unfair_lock_unlock(v6);
    v7 = *(void **)(*(_QWORD *)&buf[8] + 40);
    if (v7)
    {
      applier[0] = v5;
      applier[1] = 3221225472;
      applier[2] = __nw_resolver_config_enumerate_client_raw_public_keys_block_invoke_2;
      applier[3] = &unk_1E14A4E60;
      v17 = v4;
      xpc_array_apply(v7, applier);

    }
    _Block_object_dispose(buf, 8);

    goto LABEL_5;
  }
  __nwlog_obj();
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_resolver_config_enumerate_client_raw_public_keys";
  v9 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v21 = 0;
  if (__nwlog_fault(v9, &type, &v21))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_resolver_config_enumerate_client_raw_public_keys";
        _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v21)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      v14 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_resolver_config_enumerate_client_raw_public_keys";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_resolver_config_enumerate_client_raw_public_keys";
        _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_resolver_config_enumerate_client_raw_public_keys";
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_22:
  if (v9)
    free(v9);
LABEL_5:

}

void sub_1838B0AE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,id a30)
{
  void *v30;
  void *v31;

  _Block_object_dispose(&a25, 8);
  _Unwind_Resume(a1);
}

void __nw_resolver_config_enumerate_client_raw_public_keys_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;

  v5 = *(id *)(*(_QWORD *)(a1 + 32) + 8);
  xpc_dictionary_get_value(v5, "ClientRawPublicKey");
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_1838B0B84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t __nw_resolver_config_enumerate_client_raw_public_keys_block_invoke_2(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  const void *bytes_ptr;
  size_t length;

  v4 = a3;
  if (object_getClass(v4) == (Class)MEMORY[0x1E0C812E8])
  {
    v6 = *(_QWORD *)(a1 + 32);
    bytes_ptr = xpc_data_get_bytes_ptr(v4);
    length = xpc_data_get_length(v4);
    v5 = (*(uint64_t (**)(uint64_t, const void *, size_t))(v6 + 16))(v6, bytes_ptr, length);
  }
  else
  {
    v5 = 1;
  }

  return v5;
}

void sub_1838B0C18(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_resolver_config_set_interface_name(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  os_unfair_lock_s *v5;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  _QWORD v14[6];
  char v15;
  os_log_type_t v16;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    v14[0] = MEMORY[0x1E0C809B0];
    v14[1] = 3221225472;
    v14[2] = __nw_resolver_config_set_interface_name_block_invoke;
    v14[3] = &unk_1E14AA348;
    v5 = (os_unfair_lock_s *)v3;
    v14[4] = v5;
    v14[5] = a2;
    os_unfair_lock_lock(v5 + 22);
    __nw_resolver_config_set_interface_name_block_invoke((uint64_t)v14);
    os_unfair_lock_unlock(v5 + 22);

    goto LABEL_3;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v18 = "nw_resolver_config_set_interface_name";
  v7 = (char *)_os_log_send_and_compose_impl();

  v16 = OS_LOG_TYPE_ERROR;
  v15 = 0;
  if (__nwlog_fault(v7, &v16, &v15))
  {
    if (v16 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = v16;
      if (os_log_type_enabled(v8, v16))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_resolver_config_set_interface_name";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = v16;
      v12 = os_log_type_enabled(v8, v16);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          v18 = "nw_resolver_config_set_interface_name";
          v19 = 2082;
          v20 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_resolver_config_set_interface_name";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = v16;
      if (os_log_type_enabled(v8, v16))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_resolver_config_set_interface_name";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v7)
    free(v7);
LABEL_3:

}

void sub_1838B0F08(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void __nw_resolver_config_set_interface_name_block_invoke(uint64_t a1)
{
  xpc_dictionary_set_string(*(xpc_object_t *)(*(_QWORD *)(a1 + 32) + 8), "InterfaceName", *(const char **)(a1 + 40));
}

void nw_resolver_config_clear_interface_name(void *a1)
{
  id v1;
  void *v2;
  os_unfair_lock_s *v3;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  char *backtrace_string;
  os_log_type_t v9;
  _BOOL4 v10;
  os_log_type_t v11;
  _QWORD v12[5];
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __nw_resolver_config_clear_interface_name_block_invoke;
    v12[3] = &unk_1E14ACFD0;
    v3 = (os_unfair_lock_s *)v1;
    v12[4] = v3;
    os_unfair_lock_lock(v3 + 22);
    __nw_resolver_config_clear_interface_name_block_invoke((uint64_t)v12);
    os_unfair_lock_unlock(v3 + 22);

    goto LABEL_3;
  }
  __nwlog_obj();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_resolver_config_clear_interface_name";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_resolver_config_clear_interface_name";
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_resolver_config_clear_interface_name";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_resolver_config_clear_interface_name";
        _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_resolver_config_clear_interface_name";
        _os_log_impl(&dword_182FBE000, v6, v11, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v5)
    free(v5);
LABEL_3:

}

void sub_1838B1214(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void __nw_resolver_config_clear_interface_name_block_invoke(uint64_t a1)
{
  xpc_dictionary_set_value(*(xpc_object_t *)(*(_QWORD *)(a1 + 32) + 8), "InterfaceName", 0);
}

uint64_t nw_resolver_config_get_interface_name(void *a1)
{
  id v1;
  void *v2;
  os_unfair_lock_s *v3;
  uint64_t v4;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  _QWORD v14[4];
  os_unfair_lock_s *v15;
  _BYTE *v16;
  char v17;
  os_log_type_t type;
  _BYTE buf[24];
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x2020000000;
    v20 = 0;
    v14[0] = MEMORY[0x1E0C809B0];
    v14[1] = 3221225472;
    v14[2] = __nw_resolver_config_get_interface_name_block_invoke;
    v14[3] = &unk_1E14ACE40;
    v16 = buf;
    v15 = (os_unfair_lock_s *)v1;
    v3 = v15 + 22;
    os_unfair_lock_lock(v15 + 22);
    __nw_resolver_config_get_interface_name_block_invoke((uint64_t)v14);
    os_unfair_lock_unlock(v3);
    v4 = *(_QWORD *)(*(_QWORD *)&buf[8] + 24);

    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_resolver_config_get_interface_name";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v17 = 0;
  if (__nwlog_fault(v7, &type, &v17))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_resolver_config_get_interface_name";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_resolver_config_get_interface_name";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_resolver_config_get_interface_name";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_resolver_config_get_interface_name";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v7)
    free(v7);
  v4 = 0;
LABEL_3:

  return v4;
}

void sub_1838B1560(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, ...)
{
  void *v13;
  va_list va;

  va_start(va, a13);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __nw_resolver_config_get_interface_name_block_invoke(uint64_t a1)
{
  id v2;

  v2 = *(id *)(*(_QWORD *)(a1 + 32) + 8);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = xpc_dictionary_get_string(v2, "InterfaceName");

}

void sub_1838B15DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void nw_resolver_config_clear_provider_description(void *a1)
{
  id v1;
  void *v2;
  os_unfair_lock_s *v3;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  char *backtrace_string;
  os_log_type_t v9;
  _BOOL4 v10;
  os_log_type_t v11;
  _QWORD v12[5];
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __nw_resolver_config_clear_provider_description_block_invoke;
    v12[3] = &unk_1E14ACFD0;
    v3 = (os_unfair_lock_s *)v1;
    v12[4] = v3;
    os_unfair_lock_lock(v3 + 22);
    __nw_resolver_config_clear_provider_description_block_invoke((uint64_t)v12);
    os_unfair_lock_unlock(v3 + 22);

    goto LABEL_3;
  }
  __nwlog_obj();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_resolver_config_clear_provider_description";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_resolver_config_clear_provider_description";
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_resolver_config_clear_provider_description";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_resolver_config_clear_provider_description";
        _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_resolver_config_clear_provider_description";
        _os_log_impl(&dword_182FBE000, v6, v11, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v5)
    free(v5);
LABEL_3:

}

void sub_1838B18CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void __nw_resolver_config_clear_provider_description_block_invoke(uint64_t a1)
{
  xpc_dictionary_set_value(*(xpc_object_t *)(*(_QWORD *)(a1 + 32) + 8), "ProviderDescription", 0);
}

uint64_t nw_resolver_config_get_provider_description(void *a1)
{
  id v1;
  void *v2;
  os_unfair_lock_s *v3;
  uint64_t v4;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  _QWORD v14[4];
  os_unfair_lock_s *v15;
  _BYTE *v16;
  char v17;
  os_log_type_t type;
  _BYTE buf[24];
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x2020000000;
    v20 = 0;
    v14[0] = MEMORY[0x1E0C809B0];
    v14[1] = 3221225472;
    v14[2] = __nw_resolver_config_get_provider_description_block_invoke;
    v14[3] = &unk_1E14ACE40;
    v16 = buf;
    v15 = (os_unfair_lock_s *)v1;
    v3 = v15 + 22;
    os_unfair_lock_lock(v15 + 22);
    __nw_resolver_config_get_provider_description_block_invoke((uint64_t)v14);
    os_unfair_lock_unlock(v3);
    v4 = *(_QWORD *)(*(_QWORD *)&buf[8] + 24);

    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_resolver_config_get_provider_description";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v17 = 0;
  if (__nwlog_fault(v7, &type, &v17))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_resolver_config_get_provider_description";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_resolver_config_get_provider_description";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_resolver_config_get_provider_description";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_resolver_config_get_provider_description";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v7)
    free(v7);
  v4 = 0;
LABEL_3:

  return v4;
}

void sub_1838B1C18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, ...)
{
  void *v13;
  va_list va;

  va_start(va, a13);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __nw_resolver_config_get_provider_description_block_invoke(uint64_t a1)
{
  id v2;

  v2 = *(id *)(*(_QWORD *)(a1 + 32) + 8);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = xpc_dictionary_get_string(v2, "ProviderDescription");

}

void sub_1838B1C94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void nw_resolver_config_clear_provider_name(void *a1)
{
  id v1;
  void *v2;
  os_unfair_lock_s *v3;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  char *backtrace_string;
  os_log_type_t v9;
  _BOOL4 v10;
  os_log_type_t v11;
  _QWORD v12[5];
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __nw_resolver_config_clear_provider_name_block_invoke;
    v12[3] = &unk_1E14ACFD0;
    v3 = (os_unfair_lock_s *)v1;
    v12[4] = v3;
    os_unfair_lock_lock(v3 + 22);
    __nw_resolver_config_clear_provider_name_block_invoke((uint64_t)v12);
    os_unfair_lock_unlock(v3 + 22);

    goto LABEL_3;
  }
  __nwlog_obj();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_resolver_config_clear_provider_name";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_resolver_config_clear_provider_name";
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_resolver_config_clear_provider_name";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_resolver_config_clear_provider_name";
        _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_resolver_config_clear_provider_name";
        _os_log_impl(&dword_182FBE000, v6, v11, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v5)
    free(v5);
LABEL_3:

}

void sub_1838B1F84(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void __nw_resolver_config_clear_provider_name_block_invoke(uint64_t a1)
{
  xpc_dictionary_set_value(*(xpc_object_t *)(*(_QWORD *)(a1 + 32) + 8), "ProviderName", 0);
}

void nw_resolver_config_clear_provider_path(void *a1)
{
  id v1;
  void *v2;
  os_unfair_lock_s *v3;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  char *backtrace_string;
  os_log_type_t v9;
  _BOOL4 v10;
  os_log_type_t v11;
  _QWORD v12[5];
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __nw_resolver_config_clear_provider_path_block_invoke;
    v12[3] = &unk_1E14ACFD0;
    v3 = (os_unfair_lock_s *)v1;
    v12[4] = v3;
    os_unfair_lock_lock(v3 + 22);
    __nw_resolver_config_clear_provider_path_block_invoke((uint64_t)v12);
    os_unfair_lock_unlock(v3 + 22);

    goto LABEL_3;
  }
  __nwlog_obj();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_resolver_config_clear_provider_path";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_resolver_config_clear_provider_path";
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_resolver_config_clear_provider_path";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_resolver_config_clear_provider_path";
        _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_resolver_config_clear_provider_path";
        _os_log_impl(&dword_182FBE000, v6, v11, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v5)
    free(v5);
LABEL_3:

}

void sub_1838B2294(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void __nw_resolver_config_clear_provider_path_block_invoke(uint64_t a1)
{
  xpc_dictionary_set_value(*(xpc_object_t *)(*(_QWORD *)(a1 + 32) + 8), "ProviderPath", 0);
}

void nw_resolver_config_set_proxy_agent(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  os_unfair_lock_s *v5;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  _QWORD v14[6];
  char v15;
  os_log_type_t v16;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    v14[0] = MEMORY[0x1E0C809B0];
    v14[1] = 3221225472;
    v14[2] = __nw_resolver_config_set_proxy_agent_block_invoke;
    v14[3] = &unk_1E14AA348;
    v5 = (os_unfair_lock_s *)v3;
    v14[4] = v5;
    v14[5] = a2;
    os_unfair_lock_lock(v5 + 22);
    __nw_resolver_config_set_proxy_agent_block_invoke((uint64_t)v14);
    os_unfair_lock_unlock(v5 + 22);

    goto LABEL_3;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v18 = "nw_resolver_config_set_proxy_agent";
  v7 = (char *)_os_log_send_and_compose_impl();

  v16 = OS_LOG_TYPE_ERROR;
  v15 = 0;
  if (__nwlog_fault(v7, &v16, &v15))
  {
    if (v16 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = v16;
      if (os_log_type_enabled(v8, v16))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_resolver_config_set_proxy_agent";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = v16;
      v12 = os_log_type_enabled(v8, v16);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          v18 = "nw_resolver_config_set_proxy_agent";
          v19 = 2082;
          v20 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_resolver_config_set_proxy_agent";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = v16;
      if (os_log_type_enabled(v8, v16))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_resolver_config_set_proxy_agent";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v7)
    free(v7);
LABEL_3:

}

void sub_1838B25A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void __nw_resolver_config_set_proxy_agent_block_invoke(uint64_t a1)
{
  xpc_dictionary_set_string(*(xpc_object_t *)(*(_QWORD *)(a1 + 32) + 8), "ProxyAgent", *(const char **)(a1 + 40));
}

void nw_resolver_config_clear_proxy_agent(void *a1)
{
  id v1;
  void *v2;
  os_unfair_lock_s *v3;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  char *backtrace_string;
  os_log_type_t v9;
  _BOOL4 v10;
  os_log_type_t v11;
  _QWORD v12[5];
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __nw_resolver_config_clear_proxy_agent_block_invoke;
    v12[3] = &unk_1E14ACFD0;
    v3 = (os_unfair_lock_s *)v1;
    v12[4] = v3;
    os_unfair_lock_lock(v3 + 22);
    __nw_resolver_config_clear_proxy_agent_block_invoke((uint64_t)v12);
    os_unfair_lock_unlock(v3 + 22);

    goto LABEL_3;
  }
  __nwlog_obj();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_resolver_config_clear_proxy_agent";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_resolver_config_clear_proxy_agent";
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_resolver_config_clear_proxy_agent";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_resolver_config_clear_proxy_agent";
        _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_resolver_config_clear_proxy_agent";
        _os_log_impl(&dword_182FBE000, v6, v11, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v5)
    free(v5);
LABEL_3:

}

void sub_1838B28B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void __nw_resolver_config_clear_proxy_agent_block_invoke(uint64_t a1)
{
  xpc_dictionary_set_value(*(xpc_object_t *)(*(_QWORD *)(a1 + 32) + 8), "ProxyAgent", 0);
}

uint64_t nw_resolver_config_get_proxy_agent(void *a1)
{
  id v1;
  void *v2;
  os_unfair_lock_s *v3;
  uint64_t v4;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  _QWORD v14[4];
  os_unfair_lock_s *v15;
  _BYTE *v16;
  char v17;
  os_log_type_t type;
  _BYTE buf[24];
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x2020000000;
    v20 = 0;
    v14[0] = MEMORY[0x1E0C809B0];
    v14[1] = 3221225472;
    v14[2] = __nw_resolver_config_get_proxy_agent_block_invoke;
    v14[3] = &unk_1E14ACE40;
    v16 = buf;
    v15 = (os_unfair_lock_s *)v1;
    v3 = v15 + 22;
    os_unfair_lock_lock(v15 + 22);
    __nw_resolver_config_get_proxy_agent_block_invoke((uint64_t)v14);
    os_unfair_lock_unlock(v3);
    v4 = *(_QWORD *)(*(_QWORD *)&buf[8] + 24);

    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_resolver_config_get_proxy_agent";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v17 = 0;
  if (__nwlog_fault(v7, &type, &v17))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_resolver_config_get_proxy_agent";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_resolver_config_get_proxy_agent";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_resolver_config_get_proxy_agent";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_resolver_config_get_proxy_agent";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v7)
    free(v7);
  v4 = 0;
LABEL_3:

  return v4;
}

void sub_1838B2C00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, ...)
{
  void *v13;
  va_list va;

  va_start(va, a13);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __nw_resolver_config_get_proxy_agent_block_invoke(uint64_t a1)
{
  id v2;

  v2 = *(id *)(*(_QWORD *)(a1 + 32) + 8);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = xpc_dictionary_get_string(v2, "ProxyAgent");

}

void sub_1838B2C7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void nw_resolver_config_set_identity_reference(void *a1, uint64_t a2, uint64_t a3)
{
  id v5;
  void *v6;
  os_unfair_lock_s *v7;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  char *backtrace_string;
  os_log_type_t v13;
  _BOOL4 v14;
  os_log_type_t v15;
  _QWORD v16[7];
  char v17;
  os_log_type_t v18;
  uint8_t buf[4];
  const char *v20;
  __int16 v21;
  char *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = v5;
  if (v5)
  {
    v16[0] = MEMORY[0x1E0C809B0];
    v16[1] = 3221225472;
    v16[2] = __nw_resolver_config_set_identity_reference_block_invoke;
    v16[3] = &unk_1E14AB088;
    v7 = (os_unfair_lock_s *)v5;
    v16[4] = v7;
    v16[5] = a2;
    v16[6] = a3;
    os_unfair_lock_lock(v7 + 22);
    __nw_resolver_config_set_identity_reference_block_invoke((uint64_t)v16);
    os_unfair_lock_unlock(v7 + 22);

    goto LABEL_3;
  }
  __nwlog_obj();
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v20 = "nw_resolver_config_set_identity_reference";
  v9 = (char *)_os_log_send_and_compose_impl();

  v18 = OS_LOG_TYPE_ERROR;
  v17 = 0;
  if (__nwlog_fault(v9, &v18, &v17))
  {
    if (v18 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = v18;
      if (os_log_type_enabled(v10, v18))
      {
        *(_DWORD *)buf = 136446210;
        v20 = "nw_resolver_config_set_identity_reference";
        _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v13 = v18;
      v14 = os_log_type_enabled(v10, v18);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          v20 = "nw_resolver_config_set_identity_reference";
          v21 = 2082;
          v22 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        v20 = "nw_resolver_config_set_identity_reference";
        _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v15 = v18;
      if (os_log_type_enabled(v10, v18))
      {
        *(_DWORD *)buf = 136446210;
        v20 = "nw_resolver_config_set_identity_reference";
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v9)
    free(v9);
LABEL_3:

}

void sub_1838B2F78(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void __nw_resolver_config_set_identity_reference_block_invoke(uint64_t a1)
{
  xpc_dictionary_set_data(*(xpc_object_t *)(*(_QWORD *)(a1 + 32) + 8), "IdentityReference", *(const void **)(a1 + 40), *(_QWORD *)(a1 + 48));
}

void nw_resolver_config_clear_identity_reference(void *a1)
{
  id v1;
  void *v2;
  os_unfair_lock_s *v3;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  char *backtrace_string;
  os_log_type_t v9;
  _BOOL4 v10;
  os_log_type_t v11;
  _QWORD v12[5];
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __nw_resolver_config_clear_identity_reference_block_invoke;
    v12[3] = &unk_1E14ACFD0;
    v3 = (os_unfair_lock_s *)v1;
    v12[4] = v3;
    os_unfair_lock_lock(v3 + 22);
    __nw_resolver_config_clear_identity_reference_block_invoke((uint64_t)v12);
    os_unfair_lock_unlock(v3 + 22);

    goto LABEL_3;
  }
  __nwlog_obj();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_resolver_config_clear_identity_reference";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_resolver_config_clear_identity_reference";
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_resolver_config_clear_identity_reference";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_resolver_config_clear_identity_reference";
        _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_resolver_config_clear_identity_reference";
        _os_log_impl(&dword_182FBE000, v6, v11, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v5)
    free(v5);
LABEL_3:

}

void sub_1838B328C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void __nw_resolver_config_clear_identity_reference_block_invoke(uint64_t a1)
{
  xpc_dictionary_set_value(*(xpc_object_t *)(*(_QWORD *)(a1 + 32) + 8), "IdentityReference", 0);
}

uint64_t nw_resolver_config_get_identity_reference(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  os_unfair_lock_s *v5;
  uint64_t v6;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  char *backtrace_string;
  os_log_type_t v13;
  _BOOL4 v14;
  os_log_type_t v15;
  _QWORD v16[4];
  os_unfair_lock_s *v17;
  _BYTE *v18;
  uint64_t v19;
  char v20;
  os_log_type_t type;
  _BYTE buf[24];
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x2020000000;
    v23 = 0;
    v16[0] = MEMORY[0x1E0C809B0];
    v16[1] = 3221225472;
    v16[2] = __nw_resolver_config_get_identity_reference_block_invoke;
    v16[3] = &unk_1E14AAE00;
    v18 = buf;
    v17 = (os_unfair_lock_s *)v3;
    v19 = a2;
    v5 = v17 + 22;
    os_unfair_lock_lock(v17 + 22);
    __nw_resolver_config_get_identity_reference_block_invoke((uint64_t)v16);
    os_unfair_lock_unlock(v5);
    v6 = *(_QWORD *)(*(_QWORD *)&buf[8] + 24);

    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  __nwlog_obj();
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_resolver_config_get_identity_reference";
  v9 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v20 = 0;
  if (__nwlog_fault(v9, &type, &v20))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_resolver_config_get_identity_reference";
        _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v20)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      v14 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_resolver_config_get_identity_reference";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_resolver_config_get_identity_reference";
        _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_resolver_config_get_identity_reference";
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v9)
    free(v9);
  v6 = 0;
LABEL_3:

  return v6;
}

void sub_1838B35E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  void *v13;
  va_list va;

  va_start(va, a13);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __nw_resolver_config_get_identity_reference_block_invoke(uint64_t a1)
{
  id v2;

  v2 = *(id *)(*(_QWORD *)(a1 + 32) + 8);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = xpc_dictionary_get_data(v2, "IdentityReference", *(size_t **)(a1 + 48));

}

void sub_1838B3660(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void nw_resolver_config_set_odoh_config(void *a1, uint64_t a2, uint64_t a3)
{
  id v5;
  void *v6;
  os_unfair_lock_s *v7;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  char *backtrace_string;
  os_log_type_t v13;
  _BOOL4 v14;
  os_log_type_t v15;
  _QWORD v16[7];
  char v17;
  os_log_type_t v18;
  uint8_t buf[4];
  const char *v20;
  __int16 v21;
  char *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = v5;
  if (v5)
  {
    v16[0] = MEMORY[0x1E0C809B0];
    v16[1] = 3221225472;
    v16[2] = __nw_resolver_config_set_odoh_config_block_invoke;
    v16[3] = &unk_1E14AB088;
    v7 = (os_unfair_lock_s *)v5;
    v16[4] = v7;
    v16[5] = a2;
    v16[6] = a3;
    os_unfair_lock_lock(v7 + 22);
    __nw_resolver_config_set_odoh_config_block_invoke((uint64_t)v16);
    os_unfair_lock_unlock(v7 + 22);

    goto LABEL_3;
  }
  __nwlog_obj();
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v20 = "nw_resolver_config_set_odoh_config";
  v9 = (char *)_os_log_send_and_compose_impl();

  v18 = OS_LOG_TYPE_ERROR;
  v17 = 0;
  if (__nwlog_fault(v9, &v18, &v17))
  {
    if (v18 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = v18;
      if (os_log_type_enabled(v10, v18))
      {
        *(_DWORD *)buf = 136446210;
        v20 = "nw_resolver_config_set_odoh_config";
        _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v13 = v18;
      v14 = os_log_type_enabled(v10, v18);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          v20 = "nw_resolver_config_set_odoh_config";
          v21 = 2082;
          v22 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        v20 = "nw_resolver_config_set_odoh_config";
        _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v15 = v18;
      if (os_log_type_enabled(v10, v18))
      {
        *(_DWORD *)buf = 136446210;
        v20 = "nw_resolver_config_set_odoh_config";
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v9)
    free(v9);
LABEL_3:

}

void sub_1838B395C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void __nw_resolver_config_set_odoh_config_block_invoke(uint64_t a1)
{
  xpc_dictionary_set_data(*(xpc_object_t *)(*(_QWORD *)(a1 + 32) + 8), "ODoHConfig", *(const void **)(a1 + 40), *(_QWORD *)(a1 + 48));
}

void nw_resolver_config_clear_odoh_config(void *a1)
{
  id v1;
  void *v2;
  os_unfair_lock_s *v3;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  char *backtrace_string;
  os_log_type_t v9;
  _BOOL4 v10;
  os_log_type_t v11;
  _QWORD v12[5];
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __nw_resolver_config_clear_odoh_config_block_invoke;
    v12[3] = &unk_1E14ACFD0;
    v3 = (os_unfair_lock_s *)v1;
    v12[4] = v3;
    os_unfair_lock_lock(v3 + 22);
    __nw_resolver_config_clear_odoh_config_block_invoke((uint64_t)v12);
    os_unfair_lock_unlock(v3 + 22);

    goto LABEL_3;
  }
  __nwlog_obj();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_resolver_config_clear_odoh_config";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_resolver_config_clear_odoh_config";
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_resolver_config_clear_odoh_config";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_resolver_config_clear_odoh_config";
        _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_resolver_config_clear_odoh_config";
        _os_log_impl(&dword_182FBE000, v6, v11, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v5)
    free(v5);
LABEL_3:

}

void sub_1838B3C70(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void __nw_resolver_config_clear_odoh_config_block_invoke(uint64_t a1)
{
  xpc_dictionary_set_value(*(xpc_object_t *)(*(_QWORD *)(a1 + 32) + 8), "ODoHConfig", 0);
}

uint64_t nw_resolver_config_get_odoh_config(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  os_unfair_lock_s *v5;
  uint64_t v6;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  char *backtrace_string;
  os_log_type_t v13;
  _BOOL4 v14;
  os_log_type_t v15;
  _QWORD v16[4];
  os_unfair_lock_s *v17;
  _BYTE *v18;
  uint64_t v19;
  char v20;
  os_log_type_t type;
  _BYTE buf[24];
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x2020000000;
    v23 = 0;
    v16[0] = MEMORY[0x1E0C809B0];
    v16[1] = 3221225472;
    v16[2] = __nw_resolver_config_get_odoh_config_block_invoke;
    v16[3] = &unk_1E14AAE00;
    v18 = buf;
    v17 = (os_unfair_lock_s *)v3;
    v19 = a2;
    v5 = v17 + 22;
    os_unfair_lock_lock(v17 + 22);
    __nw_resolver_config_get_odoh_config_block_invoke((uint64_t)v16);
    os_unfair_lock_unlock(v5);
    v6 = *(_QWORD *)(*(_QWORD *)&buf[8] + 24);

    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  __nwlog_obj();
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_resolver_config_get_odoh_config";
  v9 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v20 = 0;
  if (__nwlog_fault(v9, &type, &v20))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_resolver_config_get_odoh_config";
        _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v20)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      v14 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_resolver_config_get_odoh_config";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_resolver_config_get_odoh_config";
        _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_resolver_config_get_odoh_config";
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v9)
    free(v9);
  v6 = 0;
LABEL_3:

  return v6;
}

void sub_1838B3FC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  void *v13;
  va_list va;

  va_start(va, a13);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __nw_resolver_config_get_odoh_config_block_invoke(uint64_t a1)
{
  id v2;

  v2 = *(id *)(*(_QWORD *)(a1 + 32) + 8);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = xpc_dictionary_get_data(v2, "ODoHConfig", *(size_t **)(a1 + 48));

}

void sub_1838B4044(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void nw_resolver_config_set_allow_failover(void *a1, char a2)
{
  id v3;
  void *v4;
  os_unfair_lock_s *v5;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  _QWORD v14[5];
  char v15;
  char v16;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    v14[0] = MEMORY[0x1E0C809B0];
    v14[1] = 3221225472;
    v14[2] = __nw_resolver_config_set_allow_failover_block_invoke;
    v14[3] = &unk_1E14A9B98;
    v5 = (os_unfair_lock_s *)v3;
    v14[4] = v5;
    v15 = a2;
    os_unfair_lock_lock(v5 + 22);
    __nw_resolver_config_set_allow_failover_block_invoke((uint64_t)v14);
    os_unfair_lock_unlock(v5 + 22);

    goto LABEL_3;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v19 = "nw_resolver_config_set_allow_failover";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v16 = 0;
  if (__nwlog_fault(v7, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_resolver_config_set_allow_failover";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          v19 = "nw_resolver_config_set_allow_failover";
          v20 = 2082;
          v21 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_resolver_config_set_allow_failover";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_resolver_config_set_allow_failover";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v7)
    free(v7);
LABEL_3:

}

void sub_1838B433C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void __nw_resolver_config_set_allow_failover_block_invoke(uint64_t a1)
{
  xpc_dictionary_set_BOOL(*(xpc_object_t *)(*(_QWORD *)(a1 + 32) + 8), "AllowFailover", *(_BYTE *)(a1 + 40));
}

id nw_resolver_config_copy_proxy_config(void *a1)
{
  _DWORD *v1;
  _DWORD *v2;
  const char *proxy_agent;
  id v4;
  id v5;
  int v6;
  _DWORD *v7;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  char *backtrace_string;
  os_log_type_t v13;
  _BOOL4 v14;
  os_log_type_t v15;
  os_log_type_t type[8];
  char v18;
  char v19;
  _BYTE uu[22];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)uu = 136446210;
    *(_QWORD *)&uu[4] = "nw_resolver_config_copy_proxy_config";
    v9 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    v19 = 0;
    if (__nwlog_fault(v9, type, &v19))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v11 = type[0];
        if (os_log_type_enabled(v10, type[0]))
        {
          *(_DWORD *)uu = 136446210;
          *(_QWORD *)&uu[4] = "nw_resolver_config_copy_proxy_config";
          _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null config", uu, 0xCu);
        }
      }
      else if (v19)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v13 = type[0];
        v14 = os_log_type_enabled(v10, type[0]);
        if (backtrace_string)
        {
          if (v14)
          {
            *(_DWORD *)uu = 136446466;
            *(_QWORD *)&uu[4] = "nw_resolver_config_copy_proxy_config";
            *(_WORD *)&uu[12] = 2082;
            *(_QWORD *)&uu[14] = backtrace_string;
            _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null config, dumping backtrace:%{public}s", uu, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_25;
        }
        if (v14)
        {
          *(_DWORD *)uu = 136446210;
          *(_QWORD *)&uu[4] = "nw_resolver_config_copy_proxy_config";
          _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null config, no backtrace", uu, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v15 = type[0];
        if (os_log_type_enabled(v10, type[0]))
        {
          *(_DWORD *)uu = 136446210;
          *(_QWORD *)&uu[4] = "nw_resolver_config_copy_proxy_config";
          _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null config, backtrace limit exceeded", uu, 0xCu);
        }
      }

    }
LABEL_25:
    if (v9)
      free(v9);
    goto LABEL_27;
  }
  proxy_agent = (const char *)nw_resolver_config_get_proxy_agent(v1);
  if (!proxy_agent)
  {
LABEL_27:
    v5 = 0;
    goto LABEL_28;
  }
  *(_QWORD *)uu = 0;
  *(_QWORD *)&uu[8] = 0;
  uuid_parse(proxy_agent, uu);
  if (nw_context_copy_implicit_context::onceToken[0] != -1)
    dispatch_once(nw_context_copy_implicit_context::onceToken, &__block_literal_global_14);
  v4 = (id)nw_context_copy_implicit_context::implicit_context;
  *(_QWORD *)type = v4;
  v18 = -1;
  v5 = nw_path_copy_proxy_config_for_agent_uuid(uu, 0xFFFFFFFF, v4);
  if (v4)

  if (v5)
  {
    v6 = v2[23];
    v7 = v5;
    v7[41] = v6;

  }
LABEL_28:

  return v5;
}

void sub_1838B468C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  void *v6;
  va_list va;

  va_start(va, a6);
  nw::retained_ptr<void({block_pointer} {__strong})(void)>::~retained_ptr((uint64_t)va);

  _Unwind_Resume(a1);
}

void nw_resolver_config_add_server_address(nw_resolver_config_t config, nw_endpoint_t server_address)
{
  NSObject *v3;
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;
  int v7;
  NSObject *v8;
  uint64_t v9;
  void *v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  void *v14;
  os_log_type_t v15;
  void *v16;
  os_log_type_t v17;
  char *backtrace_string;
  os_log_type_t v19;
  _BOOL4 v20;
  char *v21;
  os_log_type_t v22;
  _BOOL4 v23;
  os_log_type_t v24;
  _BOOL4 v25;
  os_log_type_t v26;
  os_log_type_t v27;
  os_log_type_t v28;
  char v29;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v32;
  __int16 v33;
  char *v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v3 = config;
  v4 = server_address;
  v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v32 = "nw_resolver_config_add_server_address";
    v11 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v29 = 0;
    if (!__nwlog_fault(v11, &type, &v29))
      goto LABEL_55;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v32 = "nw_resolver_config_add_server_address";
        _os_log_impl(&dword_182FBE000, v12, v13, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v29)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v19 = type;
      v20 = os_log_type_enabled(v12, type);
      if (backtrace_string)
      {
        if (v20)
        {
          *(_DWORD *)buf = 136446466;
          v32 = "nw_resolver_config_add_server_address";
          v33 = 2082;
          v34 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v12, v19, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_55:
        if (!v11)
          goto LABEL_5;
LABEL_56:
        free(v11);
        goto LABEL_5;
      }
      if (v20)
      {
        *(_DWORD *)buf = 136446210;
        v32 = "nw_resolver_config_add_server_address";
        _os_log_impl(&dword_182FBE000, v12, v19, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v26 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v32 = "nw_resolver_config_add_server_address";
        _os_log_impl(&dword_182FBE000, v12, v26, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_54:

    goto LABEL_55;
  }
  if (!v4)
  {
    __nwlog_obj();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v32 = "nw_resolver_config_add_server_address";
    v11 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v29 = 0;
    if (!__nwlog_fault(v11, &type, &v29))
      goto LABEL_55;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v32 = "nw_resolver_config_add_server_address";
        _os_log_impl(&dword_182FBE000, v12, v15, "%{public}s called with null server_address", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v29)
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v27 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v32 = "nw_resolver_config_add_server_address";
        _os_log_impl(&dword_182FBE000, v12, v27, "%{public}s called with null server_address, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    v21 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v12 = objc_claimAutoreleasedReturnValue();
    v22 = type;
    v23 = os_log_type_enabled(v12, type);
    if (!v21)
    {
      if (v23)
      {
        *(_DWORD *)buf = 136446210;
        v32 = "nw_resolver_config_add_server_address";
        _os_log_impl(&dword_182FBE000, v12, v22, "%{public}s called with null server_address, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v23)
    {
      *(_DWORD *)buf = 136446466;
      v32 = "nw_resolver_config_add_server_address";
      v33 = 2082;
      v34 = v21;
      _os_log_impl(&dword_182FBE000, v12, v22, "%{public}s called with null server_address, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_35;
  }
  v6 = v4;
  v7 = -[NSObject type](v6, "type");

  if (v7 != 1)
  {
    __nwlog_obj();
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v32 = "nw_resolver_config_add_server_address";
    v11 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v29 = 0;
    if (!__nwlog_fault(v11, &type, &v29))
      goto LABEL_55;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v32 = "nw_resolver_config_add_server_address";
        _os_log_impl(&dword_182FBE000, v12, v17, "%{public}s called with null (nw_endpoint_get_type(server_address) == nw_endpoint_type_address)", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v29)
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v28 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v32 = "nw_resolver_config_add_server_address";
        _os_log_impl(&dword_182FBE000, v12, v28, "%{public}s called with null (nw_endpoint_get_type(server_address) == nw_endpoint_type_address), backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    v21 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v12 = objc_claimAutoreleasedReturnValue();
    v24 = type;
    v25 = os_log_type_enabled(v12, type);
    if (!v21)
    {
      if (v25)
      {
        *(_DWORD *)buf = 136446210;
        v32 = "nw_resolver_config_add_server_address";
        _os_log_impl(&dword_182FBE000, v12, v24, "%{public}s called with null (nw_endpoint_get_type(server_address) == nw_endpoint_type_address), no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v25)
    {
      *(_DWORD *)buf = 136446466;
      v32 = "nw_resolver_config_add_server_address";
      v33 = 2082;
      v34 = v21;
      _os_log_impl(&dword_182FBE000, v12, v24, "%{public}s called with null (nw_endpoint_get_type(server_address) == nw_endpoint_type_address), dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_35:

    free(v21);
    if (!v11)
      goto LABEL_5;
    goto LABEL_56;
  }
  v8 = v6;
  v9 = -[NSObject hostname](v8, "hostname");

  nw_resolver_config_add_name_server(v3, v9);
LABEL_5:

}

void sub_1838B4DA0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void nw_resolver_config_get_identifier(void *a1, _OWORD *a2)
{
  char *v3;
  void *v4;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    *a2 = *(_OWORD *)(v3 + 24);
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_resolver_config_get_identifier";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_resolver_config_get_identifier";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_resolver_config_get_identifier";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_resolver_config_get_identifier";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_resolver_config_get_identifier";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
LABEL_3:

}

void nw_resolver_config_set_generation(void *a1, int a2)
{
  id v3;
  void *v4;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    *((_DWORD *)v3 + 23) = a2;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_resolver_config_set_generation";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_resolver_config_set_generation";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_resolver_config_set_generation";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_resolver_config_set_generation";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_resolver_config_set_generation";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
LABEL_3:

}

void nw_resolver_config_watch_updates(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  void *v8;
  uint64_t v9;
  NWConcrete_nw_resolver_config *v10;
  NSObject *v11;
  id v12;
  void *v13;
  char *v14;
  NSObject *v15;
  os_log_type_t v16;
  void *v17;
  os_log_type_t v18;
  void *v19;
  os_log_type_t v20;
  char *backtrace_string;
  os_log_type_t v22;
  _BOOL4 v23;
  char *v24;
  os_log_type_t v25;
  _BOOL4 v26;
  os_log_type_t v27;
  _BOOL4 v28;
  os_log_type_t v29;
  os_log_type_t v30;
  os_log_type_t v31;
  _QWORD block[4];
  id v33;
  _QWORD v34[7];
  char v35;
  os_log_type_t v36;
  uint8_t buf[4];
  const char *v38;
  __int16 v39;
  char *v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = a3;
  v8 = v7;
  if (!v5)
  {
    __nwlog_obj();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v38 = "nw_resolver_config_watch_updates";
    v14 = (char *)_os_log_send_and_compose_impl();

    v36 = OS_LOG_TYPE_ERROR;
    v35 = 0;
    if (!__nwlog_fault(v14, &v36, &v35))
      goto LABEL_57;
    if (v36 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v15 = objc_claimAutoreleasedReturnValue();
      v16 = v36;
      if (os_log_type_enabled(v15, v36))
      {
        *(_DWORD *)buf = 136446210;
        v38 = "nw_resolver_config_watch_updates";
        _os_log_impl(&dword_182FBE000, v15, v16, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v35)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v15 = objc_claimAutoreleasedReturnValue();
      v22 = v36;
      v23 = os_log_type_enabled(v15, v36);
      if (backtrace_string)
      {
        if (v23)
        {
          *(_DWORD *)buf = 136446466;
          v38 = "nw_resolver_config_watch_updates";
          v39 = 2082;
          v40 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v15, v22, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_57:
        if (!v14)
          goto LABEL_7;
LABEL_58:
        free(v14);
        goto LABEL_7;
      }
      if (v23)
      {
        *(_DWORD *)buf = 136446210;
        v38 = "nw_resolver_config_watch_updates";
        _os_log_impl(&dword_182FBE000, v15, v22, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v15 = objc_claimAutoreleasedReturnValue();
      v29 = v36;
      if (os_log_type_enabled(v15, v36))
      {
        *(_DWORD *)buf = 136446210;
        v38 = "nw_resolver_config_watch_updates";
        _os_log_impl(&dword_182FBE000, v15, v29, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_56:

    goto LABEL_57;
  }
  if (!v6)
  {
    __nwlog_obj();
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v38 = "nw_resolver_config_watch_updates";
    v14 = (char *)_os_log_send_and_compose_impl();

    v36 = OS_LOG_TYPE_ERROR;
    v35 = 0;
    if (!__nwlog_fault(v14, &v36, &v35))
      goto LABEL_57;
    if (v36 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v15 = objc_claimAutoreleasedReturnValue();
      v18 = v36;
      if (os_log_type_enabled(v15, v36))
      {
        *(_DWORD *)buf = 136446210;
        v38 = "nw_resolver_config_watch_updates";
        _os_log_impl(&dword_182FBE000, v15, v18, "%{public}s called with null queue", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (!v35)
    {
      __nwlog_obj();
      v15 = objc_claimAutoreleasedReturnValue();
      v30 = v36;
      if (os_log_type_enabled(v15, v36))
      {
        *(_DWORD *)buf = 136446210;
        v38 = "nw_resolver_config_watch_updates";
        _os_log_impl(&dword_182FBE000, v15, v30, "%{public}s called with null queue, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_56;
    }
    v24 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v15 = objc_claimAutoreleasedReturnValue();
    v25 = v36;
    v26 = os_log_type_enabled(v15, v36);
    if (!v24)
    {
      if (v26)
      {
        *(_DWORD *)buf = 136446210;
        v38 = "nw_resolver_config_watch_updates";
        _os_log_impl(&dword_182FBE000, v15, v25, "%{public}s called with null queue, no backtrace", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (v26)
    {
      *(_DWORD *)buf = 136446466;
      v38 = "nw_resolver_config_watch_updates";
      v39 = 2082;
      v40 = v24;
      _os_log_impl(&dword_182FBE000, v15, v25, "%{public}s called with null queue, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_37;
  }
  if (!v7)
  {
    __nwlog_obj();
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v38 = "nw_resolver_config_watch_updates";
    v14 = (char *)_os_log_send_and_compose_impl();

    v36 = OS_LOG_TYPE_ERROR;
    v35 = 0;
    if (!__nwlog_fault(v14, &v36, &v35))
      goto LABEL_57;
    if (v36 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v15 = objc_claimAutoreleasedReturnValue();
      v20 = v36;
      if (os_log_type_enabled(v15, v36))
      {
        *(_DWORD *)buf = 136446210;
        v38 = "nw_resolver_config_watch_updates";
        _os_log_impl(&dword_182FBE000, v15, v20, "%{public}s called with null update_handler", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (!v35)
    {
      __nwlog_obj();
      v15 = objc_claimAutoreleasedReturnValue();
      v31 = v36;
      if (os_log_type_enabled(v15, v36))
      {
        *(_DWORD *)buf = 136446210;
        v38 = "nw_resolver_config_watch_updates";
        _os_log_impl(&dword_182FBE000, v15, v31, "%{public}s called with null update_handler, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_56;
    }
    v24 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v15 = objc_claimAutoreleasedReturnValue();
    v27 = v36;
    v28 = os_log_type_enabled(v15, v36);
    if (!v24)
    {
      if (v28)
      {
        *(_DWORD *)buf = 136446210;
        v38 = "nw_resolver_config_watch_updates";
        _os_log_impl(&dword_182FBE000, v15, v27, "%{public}s called with null update_handler, no backtrace", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (v28)
    {
      *(_DWORD *)buf = 136446466;
      v38 = "nw_resolver_config_watch_updates";
      v39 = 2082;
      v40 = v24;
      _os_log_impl(&dword_182FBE000, v15, v27, "%{public}s called with null update_handler, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_37:

    free(v24);
    if (!v14)
      goto LABEL_7;
    goto LABEL_58;
  }
  v9 = MEMORY[0x1E0C809B0];
  v34[0] = MEMORY[0x1E0C809B0];
  v34[1] = 3221225472;
  v34[2] = __nw_resolver_config_watch_updates_block_invoke;
  v34[3] = &unk_1E14A8D98;
  v10 = (NWConcrete_nw_resolver_config *)v5;
  v34[4] = v10;
  v11 = v6;
  v34[5] = v11;
  v12 = v8;
  v34[6] = v12;
  os_unfair_lock_lock(&v10->lock.m_mutex);
  __nw_resolver_config_watch_updates_block_invoke(v34);
  os_unfair_lock_unlock(&v10->lock.m_mutex);
  if (!nw_resolver_config_update_from_path(v10))
  {
    block[0] = v9;
    block[1] = 3221225472;
    block[2] = __nw_resolver_config_watch_updates_block_invoke_2;
    block[3] = &unk_1E14AC390;
    v33 = v12;
    dispatch_async(v11, block);

  }
LABEL_7:

}

void sub_1838B5A64(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void __nw_resolver_config_watch_updates_block_invoke(_QWORD *a1)
{
  dispatch_object_t *v1;
  void *v2;
  void *v3;
  dispatch_object_t *v4;
  NSObject *v5;
  id v6;
  int v7;
  unsigned int v8;
  NSObject *v9;
  int v10;
  id v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  int v15;
  id v16;
  os_log_type_t v17;
  const char *backtrace_string;
  char *v19;
  NSObject *v20;
  os_log_type_t v21;
  dispatch_source_t v22;
  NSObject *v23;
  dispatch_object_t v24;
  dispatch_object_t v25;
  dispatch_object_t v26;
  dispatch_object_t v27;
  uint64_t v28;
  NSObject *v29;
  dispatch_object_t *v30;
  NSObject *v31;
  os_log_type_t v32;
  char *v33;
  os_log_type_t v34;
  _BOOL4 v35;
  os_log_type_t v36;
  void *v37;
  os_log_type_t v38;
  os_log_type_t v39;
  char *v40;
  os_log_type_t v41;
  _BOOL4 v42;
  os_log_type_t v43;
  os_log_type_t type[8];
  uint64_t v45;
  void (*v46)(uint64_t);
  void *v47;
  dispatch_object_t *v48;
  char v49;
  int v50;
  uint64_t v51;
  int v52;
  _BYTE buf[32];
  dispatch_object_t *v54;
  id v55;
  unsigned int v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  v1 = (dispatch_object_t *)a1[4];
  if (!v1[5])
  {
    v2 = (void *)a1[5];
    v3 = (void *)a1[6];
    v4 = v1;
    v5 = v2;
    v6 = v3;
    v7 = socket(32, 3, 1);
    v8 = v7;
    if (v7 < 0)
    {
LABEL_68:

      return;
    }
    v9 = nw_fd_wrapper_create(v7);
    nw_fd_wrapper_guard(v9);
    v52 = 9;
    v51 = 0x100000001;
    if (ioctl(v8, 0x800C6502uLL, &v51))
    {
      v10 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v11 = (id)gLogObj;
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_resolver_config_watch_kernel_events";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v10;
      v12 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(v50) = 0;
      if (!__nwlog_fault(v12, type, &v50))
        goto LABEL_64;
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v13 = (id)gLogObj;
        v14 = type[0];
        if (os_log_type_enabled(v13, type[0]))
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_resolver_config_watch_kernel_events";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v10;
          _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s ioctl(SIOCSKEVFILT) failed %{darwin.errno}d", buf, 0x12u);
        }
LABEL_63:

        goto LABEL_64;
      }
      if (!(_BYTE)v50)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v13 = (id)gLogObj;
        v32 = type[0];
        if (os_log_type_enabled(v13, type[0]))
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_resolver_config_watch_kernel_events";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v10;
          _os_log_impl(&dword_182FBE000, v13, v32, "%{public}s ioctl(SIOCSKEVFILT) failed %{darwin.errno}d, backtrace limit exceeded", buf, 0x12u);
        }
        goto LABEL_63;
      }
      backtrace_string = __nw_create_backtrace_string();
      if (!backtrace_string)
      {
        __nwlog_obj();
        v13 = objc_claimAutoreleasedReturnValue();
        v36 = type[0];
        if (os_log_type_enabled(v13, type[0]))
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_resolver_config_watch_kernel_events";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v10;
          _os_log_impl(&dword_182FBE000, v13, v36, "%{public}s ioctl(SIOCSKEVFILT) failed %{darwin.errno}d, no backtrace", buf, 0x12u);
        }
        goto LABEL_63;
      }
      v19 = (char *)backtrace_string;
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v20 = (id)gLogObj;
      v21 = type[0];
      if (os_log_type_enabled(v20, type[0]))
      {
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = "nw_resolver_config_watch_kernel_events";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v10;
        *(_WORD *)&buf[18] = 2082;
        *(_QWORD *)&buf[20] = v19;
        _os_log_impl(&dword_182FBE000, v20, v21, "%{public}s ioctl(SIOCSKEVFILT) failed %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x1Cu);
      }

      free(v19);
      if (!v12)
        goto LABEL_66;
    }
    else
    {
      v50 = 1;
      if (ioctl(v8, 0x8004667EuLL, &v50))
      {
        v15 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v16 = (id)gLogObj;
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_resolver_config_watch_kernel_events";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v15;
        v12 = (char *)_os_log_send_and_compose_impl();

        type[0] = OS_LOG_TYPE_ERROR;
        v49 = 0;
        if (!__nwlog_fault(v12, type, &v49))
          goto LABEL_64;
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v13 = (id)gLogObj;
          v17 = type[0];
          if (os_log_type_enabled(v13, type[0]))
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_resolver_config_watch_kernel_events";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v15;
            _os_log_impl(&dword_182FBE000, v13, v17, "%{public}s ioctl(FIONBIO) failed %{darwin.errno}d", buf, 0x12u);
          }
          goto LABEL_63;
        }
        if (!v49)
        {
          __nwlog_obj();
          v13 = objc_claimAutoreleasedReturnValue();
          v39 = type[0];
          if (os_log_type_enabled(v13, type[0]))
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_resolver_config_watch_kernel_events";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v15;
            _os_log_impl(&dword_182FBE000, v13, v39, "%{public}s ioctl(FIONBIO) failed %{darwin.errno}d, backtrace limit exceeded", buf, 0x12u);
          }
          goto LABEL_63;
        }
        v33 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v13 = objc_claimAutoreleasedReturnValue();
        v34 = type[0];
        v35 = os_log_type_enabled(v13, type[0]);
        if (!v33)
        {
          if (v35)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_resolver_config_watch_kernel_events";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v15;
            _os_log_impl(&dword_182FBE000, v13, v34, "%{public}s ioctl(FIONBIO) failed %{darwin.errno}d, no backtrace", buf, 0x12u);
          }
          goto LABEL_63;
        }
        if (v35)
        {
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)&buf[4] = "nw_resolver_config_watch_kernel_events";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v15;
          *(_WORD *)&buf[18] = 2082;
          *(_QWORD *)&buf[20] = v33;
          _os_log_impl(&dword_182FBE000, v13, v34, "%{public}s ioctl(FIONBIO) failed %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x1Cu);
        }

        free(v33);
        if (!v12)
          goto LABEL_66;
      }
      else
      {
        v22 = dispatch_source_create(MEMORY[0x1E0C80DB8], v8, 0, v5);
        if (v22)
        {
          v23 = v22;
          v24 = v1[5];
          if (((_BYTE)v4[6] & 1) != 0 && v24)
          {
            v1[5] = 0;

            v24 = v1[5];
          }
          v1[5] = 0;

          v25 = v1[5];
          v1[5] = v23;

          *((_BYTE *)v4 + 48) |= 1u;
          v26 = v4[7];
          if (((_BYTE)v4[8] & 1) != 0 && v26)
          {
            v4[7] = 0;

            v26 = v4[7];
          }
          v4[7] = 0;

          v27 = v4[7];
          v4[7] = v9;

          *((_BYTE *)v4 + 64) |= 1u;
          v28 = MEMORY[0x1E0C809B0];
          v29 = v1[5];
          *(_QWORD *)type = MEMORY[0x1E0C809B0];
          v45 = 3221225472;
          v46 = ___ZL38nw_resolver_config_watch_kernel_eventsP29NWConcrete_nw_resolver_configPU28objcproto17OS_dispatch_queue8NSObjectU13block_pointerFvbE_block_invoke;
          v47 = &unk_1E14ACFD0;
          v30 = v4;
          v48 = v30;
          dispatch_source_set_cancel_handler(v29, type);
          v31 = v1[5];
          *(_QWORD *)buf = v28;
          *(_QWORD *)&buf[8] = 3221225472;
          *(_QWORD *)&buf[16] = ___ZL38nw_resolver_config_watch_kernel_eventsP29NWConcrete_nw_resolver_configPU28objcproto17OS_dispatch_queue8NSObjectU13block_pointerFvbE_block_invoke_3;
          *(_QWORD *)&buf[24] = &unk_1E14ACFF8;
          v56 = v8;
          v54 = v30;
          v55 = v6;
          dispatch_source_set_event_handler(v31, buf);
          dispatch_activate(v1[5]);

          v9 = 0;
          goto LABEL_66;
        }
        __nwlog_obj();
        v37 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_resolver_config_watch_kernel_events";
        v12 = (char *)_os_log_send_and_compose_impl();

        type[0] = OS_LOG_TYPE_ERROR;
        v49 = 0;
        if (!__nwlog_fault(v12, type, &v49))
        {
LABEL_64:
          if (!v12)
            goto LABEL_66;
          goto LABEL_65;
        }
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v13 = objc_claimAutoreleasedReturnValue();
          v38 = type[0];
          if (os_log_type_enabled(v13, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_resolver_config_watch_kernel_events";
            _os_log_impl(&dword_182FBE000, v13, v38, "%{public}s dispatch_source_create failed", buf, 0xCu);
          }
          goto LABEL_63;
        }
        if (!v49)
        {
          __nwlog_obj();
          v13 = objc_claimAutoreleasedReturnValue();
          v43 = type[0];
          if (os_log_type_enabled(v13, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_resolver_config_watch_kernel_events";
            _os_log_impl(&dword_182FBE000, v13, v43, "%{public}s dispatch_source_create failed, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_63;
        }
        v40 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v13 = objc_claimAutoreleasedReturnValue();
        v41 = type[0];
        v42 = os_log_type_enabled(v13, type[0]);
        if (!v40)
        {
          if (v42)
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_resolver_config_watch_kernel_events";
            _os_log_impl(&dword_182FBE000, v13, v41, "%{public}s dispatch_source_create failed, no backtrace", buf, 0xCu);
          }
          goto LABEL_63;
        }
        if (v42)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_resolver_config_watch_kernel_events";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v40;
          _os_log_impl(&dword_182FBE000, v13, v41, "%{public}s dispatch_source_create failed, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v40);
        if (!v12)
          goto LABEL_66;
      }
    }
LABEL_65:
    free(v12);
LABEL_66:
    if (v9)

    goto LABEL_68;
  }
}

void sub_1838B646C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  if (v4)

  _Unwind_Resume(a1);
}

BOOL nw_resolver_config_update_from_path(NWConcrete_nw_resolver_config *a1)
{
  NWConcrete_nw_resolver_config *v1;
  uint64_t v2;
  os_unfair_lock_s *v3;
  NWConcrete_nw_resolver_config *v4;
  _QWORD v6[4];
  os_unfair_lock_s *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  void (*v13)(uint64_t);
  uint64_t v14;
  NWConcrete_nw_resolver_config *v15;
  char v16;

  v1 = a1;
  v9 = 0;
  v10 = &v9;
  v11 = 0x4012000000;
  v12 = __Block_byref_object_copy__120;
  v13 = __Block_byref_object_dispose__121;
  v14 = 256;
  v15 = nw_path_copy_resolver_config_for_identifier((uint64_t)v1->identifier);
  v16 |= 1u;
  v2 = v10[6];
  if (v2)
  {
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 3221225472;
    v6[2] = ___ZL35nw_resolver_config_update_from_pathP29NWConcrete_nw_resolver_config_block_invoke;
    v6[3] = &unk_1E14ACE40;
    v7 = v1;
    v8 = &v9;
    v3 = v7 + 22;
    os_unfair_lock_lock(v7 + 22);
    ___ZL35nw_resolver_config_update_from_pathP29NWConcrete_nw_resolver_config_block_invoke((uint64_t)v6);
    os_unfair_lock_unlock(v3);

  }
  _Block_object_dispose(&v9, 8);
  v4 = v15;
  if ((v16 & 1) != 0 && v15)
  {
    v15 = 0;

    v4 = v15;
  }
  v15 = 0;

  return v2 != 0;
}

void sub_1838B65D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t __nw_resolver_config_watch_updates_block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void __Block_byref_object_copy__120(uint64_t a1, uint64_t a2)
{
  void *v4;

  *(_QWORD *)(a1 + 48) = *(id *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a1 + 56) & 0xFE | *(_BYTE *)(a2 + 56) & 1;
  v4 = *(void **)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;

  *(_BYTE *)(a2 + 56) &= ~1u;
}

void __Block_byref_object_dispose__121(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if ((*(_BYTE *)(a1 + 56) & 1) != 0 && v2)
  {
    *(_QWORD *)(a1 + 48) = 0;

    v2 = *(void **)(a1 + 48);
  }
  *(_QWORD *)(a1 + 48) = 0;

}

void ___ZL35nw_resolver_config_update_from_pathP29NWConcrete_nw_resolver_config_block_invoke(uint64_t a1)
{
  id v2;
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;
  id *v7;

  v7 = (id *)*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48);
  v2 = v7[1];
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(void **)(v3 + 8);
  if ((*(_BYTE *)(v3 + 16) & 1) != 0 && v4)
  {
    *(_QWORD *)(v3 + 8) = 0;

    v4 = *(void **)(v3 + 8);
  }
  *(_QWORD *)(v3 + 8) = 0;

  v5 = *(void **)(v3 + 8);
  *(_QWORD *)(v3 + 8) = v2;
  v6 = v2;

  *(_BYTE *)(v3 + 16) |= 1u;
}

void ___ZL38nw_resolver_config_watch_kernel_eventsP29NWConcrete_nw_resolver_configPU28objcproto17OS_dispatch_queue8NSObjectU13block_pointerFvbE_block_invoke(uint64_t a1)
{
  void *v1;
  os_unfair_lock_s *v2;
  _QWORD v3[4];
  id v4;

  v1 = *(void **)(a1 + 32);
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = ___ZL38nw_resolver_config_watch_kernel_eventsP29NWConcrete_nw_resolver_configPU28objcproto17OS_dispatch_queue8NSObjectU13block_pointerFvbE_block_invoke_2;
  v3[3] = &unk_1E14ACFD0;
  v4 = v1;
  v2 = (os_unfair_lock_s *)v4;
  os_unfair_lock_lock(v2 + 22);
  ___ZL38nw_resolver_config_watch_kernel_eventsP29NWConcrete_nw_resolver_configPU28objcproto17OS_dispatch_queue8NSObjectU13block_pointerFvbE_block_invoke_2((uint64_t)v3);
  os_unfair_lock_unlock(v2 + 22);

}

void sub_1838B67A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZL38nw_resolver_config_watch_kernel_eventsP29NWConcrete_nw_resolver_configPU28objcproto17OS_dispatch_queue8NSObjectU13block_pointerFvbE_block_invoke_3(uint64_t a1)
{
  ssize_t v2;
  unint64_t v3;
  void *v4;
  NWConcrete_nw_resolver_config *v5;
  void (**v6)(id, BOOL);
  int v10;
  int v11;
  id v12;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  void *v16;
  os_unfair_lock_s *v17;
  char *backtrace_string;
  os_log_type_t v19;
  _BOOL4 v20;
  os_log_type_t v21;
  _QWORD v22[4];
  id v23;
  char v24;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v27;
  __int16 v28;
  int v29;
  __int16 v30;
  char *v31;
  _OWORD v32[8];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  memset(v32, 0, sizeof(v32));
  while (1)
  {
    v2 = recv(*(_DWORD *)(a1 + 48), v32, 0x80uLL, 0);
    v3 = v2;
    if (v2 < 1)
      break;
    v4 = *(void **)(a1 + 40);
    v5 = (NWConcrete_nw_resolver_config *)*(id *)(a1 + 32);
    v6 = v4;
    if (v3 >= 0x18
      && DWORD1(v32[0]) == 1
      && DWORD2(v32[0]) == 1
      && HIDWORD(v32[0]) == 9
      && LODWORD(v32[0]) >= 0x28
      && v3 >= LODWORD(v32[0])
      && (DWORD1(v32[1]) & 0xFFFFFFFE) == 2
      && !uuid_compare(v5->identifier, (const unsigned __int8 *)&v32[1] + 8))
    {
      v10 = DWORD1(v32[1]);
      if (DWORD1(v32[1]) == 2 || nw_resolver_config_update_from_path(v5))
        v6[2](v6, v10 == 2);
    }

  }
  if (v2 < 0)
  {
    v11 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    if (v11 != 35)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v12 = (id)gLogObj;
      *(_DWORD *)buf = 136446466;
      v27 = "nw_resolver_config_watch_kernel_events_block_invoke_3";
      v28 = 1024;
      v29 = v11;
      v13 = (char *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v24 = 0;
      if (__nwlog_fault(v13, &type, &v24))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v14 = (id)gLogObj;
          v15 = type;
          if (os_log_type_enabled(v14, type))
          {
            *(_DWORD *)buf = 136446466;
            v27 = "nw_resolver_config_watch_kernel_events_block_invoke";
            v28 = 1024;
            v29 = v11;
            _os_log_impl(&dword_182FBE000, v14, v15, "%{public}s receive from kernel event socket failed %{darwin.errno}d", buf, 0x12u);
          }
        }
        else if (v24)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v14 = (id)gLogObj;
          v19 = type;
          v20 = os_log_type_enabled(v14, type);
          if (backtrace_string)
          {
            if (v20)
            {
              *(_DWORD *)buf = 136446722;
              v27 = "nw_resolver_config_watch_kernel_events_block_invoke";
              v28 = 1024;
              v29 = v11;
              v30 = 2082;
              v31 = backtrace_string;
              _os_log_impl(&dword_182FBE000, v14, v19, "%{public}s receive from kernel event socket failed %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x1Cu);
            }

            free(backtrace_string);
            if (!v13)
              goto LABEL_31;
            goto LABEL_30;
          }
          if (v20)
          {
            *(_DWORD *)buf = 136446466;
            v27 = "nw_resolver_config_watch_kernel_events_block_invoke";
            v28 = 1024;
            v29 = v11;
            _os_log_impl(&dword_182FBE000, v14, v19, "%{public}s receive from kernel event socket failed %{darwin.errno}d, no backtrace", buf, 0x12u);
          }
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v14 = (id)gLogObj;
          v21 = type;
          if (os_log_type_enabled(v14, type))
          {
            *(_DWORD *)buf = 136446466;
            v27 = "nw_resolver_config_watch_kernel_events_block_invoke";
            v28 = 1024;
            v29 = v11;
            _os_log_impl(&dword_182FBE000, v14, v21, "%{public}s receive from kernel event socket failed %{darwin.errno}d, backtrace limit exceeded", buf, 0x12u);
          }
        }

      }
      if (!v13)
      {
LABEL_31:
        v16 = *(void **)(a1 + 32);
        v22[0] = MEMORY[0x1E0C809B0];
        v22[1] = 3221225472;
        v22[2] = ___ZL38nw_resolver_config_watch_kernel_eventsP29NWConcrete_nw_resolver_configPU28objcproto17OS_dispatch_queue8NSObjectU13block_pointerFvbE_block_invoke_119;
        v22[3] = &unk_1E14ACFD0;
        v23 = v16;
        v17 = (os_unfair_lock_s *)v23;
        os_unfair_lock_lock(v17 + 22);
        ___ZL38nw_resolver_config_watch_kernel_eventsP29NWConcrete_nw_resolver_configPU28objcproto17OS_dispatch_queue8NSObjectU13block_pointerFvbE_block_invoke_119((uint64_t)v22);
        os_unfair_lock_unlock(v17 + 22);

        return;
      }
LABEL_30:
      free(v13);
      goto LABEL_31;
    }
  }
}

void sub_1838B6C4C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void ___ZL38nw_resolver_config_watch_kernel_eventsP29NWConcrete_nw_resolver_configPU28objcproto17OS_dispatch_queue8NSObjectU13block_pointerFvbE_block_invoke_119(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  void *v4;
  void *v5;

  v2 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 40);
  if (v2)
  {
    dispatch_source_cancel(v2);
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(void **)(v3 + 40);
    if ((*(_BYTE *)(v3 + 48) & 1) != 0)
    {
      if (v4)
      {
        *(_QWORD *)(v3 + 40) = 0;

        v4 = *(void **)(v3 + 40);
      }
    }
    *(_QWORD *)(v3 + 40) = 0;

    v5 = *(void **)(v3 + 40);
    *(_QWORD *)(v3 + 40) = 0;

    *(_BYTE *)(v3 + 48) |= 1u;
  }
}

void ___ZL38nw_resolver_config_watch_kernel_eventsP29NWConcrete_nw_resolver_configPU28objcproto17OS_dispatch_queue8NSObjectU13block_pointerFvbE_block_invoke_2(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;

  v2 = *(void **)(*(_QWORD *)(a1 + 32) + 56);
  if (v2)
  {
    nw_fd_wrapper_close(v2);
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(void **)(v3 + 56);
    if ((*(_BYTE *)(v3 + 64) & 1) != 0)
    {
      if (v4)
      {
        *(_QWORD *)(v3 + 56) = 0;

        v4 = *(void **)(v3 + 56);
      }
    }
    *(_QWORD *)(v3 + 56) = 0;

    v5 = *(void **)(v3 + 56);
    *(_QWORD *)(v3 + 56) = 0;

    *(_BYTE *)(v3 + 64) |= 1u;
  }
}

void nw_resolver_config_cancel_updates(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  void *v8;
  NSObject *v9;
  id v10;
  os_unfair_lock_s *v11;
  void *v12;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  void *v16;
  os_log_type_t v17;
  void *v18;
  os_log_type_t v19;
  char *backtrace_string;
  os_log_type_t v21;
  _BOOL4 v22;
  char *v23;
  os_log_type_t v24;
  _BOOL4 v25;
  os_log_type_t v26;
  _BOOL4 v27;
  os_log_type_t v28;
  os_log_type_t v29;
  os_log_type_t v30;
  _QWORD v31[4];
  os_unfair_lock_s *v32;
  NSObject *v33;
  id v34;
  _BYTE *v35;
  char v36;
  os_log_type_t type;
  _BYTE buf[24];
  char v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = a3;
  v8 = v7;
  if (!v5)
  {
    __nwlog_obj();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_resolver_config_cancel_updates";
    v13 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v36 = 0;
    if (!__nwlog_fault(v13, &type, &v36))
      goto LABEL_57;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_resolver_config_cancel_updates";
        _os_log_impl(&dword_182FBE000, v14, v15, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v36)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v21 = type;
      v22 = os_log_type_enabled(v14, type);
      if (backtrace_string)
      {
        if (v22)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_resolver_config_cancel_updates";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v14, v21, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_57:
        if (!v13)
          goto LABEL_7;
LABEL_58:
        free(v13);
        goto LABEL_7;
      }
      if (v22)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_resolver_config_cancel_updates";
        _os_log_impl(&dword_182FBE000, v14, v21, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v28 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_resolver_config_cancel_updates";
        _os_log_impl(&dword_182FBE000, v14, v28, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_56:

    goto LABEL_57;
  }
  if (!v6)
  {
    __nwlog_obj();
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_resolver_config_cancel_updates";
    v13 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v36 = 0;
    if (!__nwlog_fault(v13, &type, &v36))
      goto LABEL_57;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_resolver_config_cancel_updates";
        _os_log_impl(&dword_182FBE000, v14, v17, "%{public}s called with null queue", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (!v36)
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v29 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_resolver_config_cancel_updates";
        _os_log_impl(&dword_182FBE000, v14, v29, "%{public}s called with null queue, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_56;
    }
    v23 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v14 = objc_claimAutoreleasedReturnValue();
    v24 = type;
    v25 = os_log_type_enabled(v14, type);
    if (!v23)
    {
      if (v25)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_resolver_config_cancel_updates";
        _os_log_impl(&dword_182FBE000, v14, v24, "%{public}s called with null queue, no backtrace", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (v25)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_resolver_config_cancel_updates";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v23;
      _os_log_impl(&dword_182FBE000, v14, v24, "%{public}s called with null queue, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_37;
  }
  if (!v7)
  {
    __nwlog_obj();
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_resolver_config_cancel_updates";
    v13 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v36 = 0;
    if (!__nwlog_fault(v13, &type, &v36))
      goto LABEL_57;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v19 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_resolver_config_cancel_updates";
        _os_log_impl(&dword_182FBE000, v14, v19, "%{public}s called with null completion", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (!v36)
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v30 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_resolver_config_cancel_updates";
        _os_log_impl(&dword_182FBE000, v14, v30, "%{public}s called with null completion, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_56;
    }
    v23 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v14 = objc_claimAutoreleasedReturnValue();
    v26 = type;
    v27 = os_log_type_enabled(v14, type);
    if (!v23)
    {
      if (v27)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_resolver_config_cancel_updates";
        _os_log_impl(&dword_182FBE000, v14, v26, "%{public}s called with null completion, no backtrace", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (v27)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_resolver_config_cancel_updates";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v23;
      _os_log_impl(&dword_182FBE000, v14, v26, "%{public}s called with null completion, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_37:

    free(v23);
    if (!v13)
      goto LABEL_7;
    goto LABEL_58;
  }
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = buf;
  *(_QWORD *)&buf[16] = 0x2020000000;
  v39 = 0;
  v31[0] = MEMORY[0x1E0C809B0];
  v31[1] = 3221225472;
  v31[2] = __nw_resolver_config_cancel_updates_block_invoke;
  v31[3] = &unk_1E14A4B90;
  v32 = (os_unfair_lock_s *)v5;
  v9 = v6;
  v33 = v9;
  v10 = v8;
  v34 = v10;
  v35 = buf;
  v11 = v32 + 22;
  os_unfair_lock_lock(v32 + 22);
  __nw_resolver_config_cancel_updates_block_invoke((uint64_t)v31);
  os_unfair_lock_unlock(v11);
  if (!*(_BYTE *)(*(_QWORD *)&buf[8] + 24))
    dispatch_async(v9, v10);

  _Block_object_dispose(buf, 8);
LABEL_7:

}

void __nw_resolver_config_cancel_updates_block_invoke(uint64_t a1)
{
  _QWORD *v1;
  NSObject *v2;
  uint64_t v4;
  void *v5;
  void *v6;
  _QWORD handler[4];
  _QWORD *v8;
  id v9;
  id v10;

  v1 = *(_QWORD **)(a1 + 32);
  v2 = v1[5];
  if (v2)
  {
    handler[0] = MEMORY[0x1E0C809B0];
    handler[1] = 3221225472;
    handler[2] = __nw_resolver_config_cancel_updates_block_invoke_2;
    handler[3] = &unk_1E14A8D98;
    v8 = v1;
    v9 = *(id *)(a1 + 40);
    v10 = *(id *)(a1 + 48);
    dispatch_source_set_cancel_handler(v2, handler);
    dispatch_source_cancel(*(dispatch_source_t *)(*(_QWORD *)(a1 + 32) + 40));
    v4 = *(_QWORD *)(a1 + 32);
    v5 = *(void **)(v4 + 40);
    if ((*(_BYTE *)(v4 + 48) & 1) != 0)
    {
      if (v5)
      {
        *(_QWORD *)(v4 + 40) = 0;

        v5 = *(void **)(v4 + 40);
      }
    }
    *(_QWORD *)(v4 + 40) = 0;

    v6 = *(void **)(v4 + 40);
    *(_QWORD *)(v4 + 40) = 0;

    *(_BYTE *)(v4 + 48) |= 1u;
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = 1;

  }
}

void __nw_resolver_config_cancel_updates_block_invoke_2(uint64_t a1)
{
  void *v2;
  os_unfair_lock_s *v3;
  _QWORD v4[4];
  id v5;

  v2 = *(void **)(a1 + 32);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __nw_resolver_config_cancel_updates_block_invoke_3;
  v4[3] = &unk_1E14ACFD0;
  v5 = v2;
  v3 = (os_unfair_lock_s *)v5;
  os_unfair_lock_lock(v3 + 22);
  __nw_resolver_config_cancel_updates_block_invoke_3((uint64_t)v4);
  os_unfair_lock_unlock(v3 + 22);

  dispatch_async(*(dispatch_queue_t *)(a1 + 40), *(dispatch_block_t *)(a1 + 48));
}

void sub_1838B7660(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void __nw_resolver_config_cancel_updates_block_invoke_3(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;

  v2 = *(void **)(*(_QWORD *)(a1 + 32) + 56);
  if (v2)
  {
    nw_fd_wrapper_close(v2);
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(void **)(v3 + 56);
    if ((*(_BYTE *)(v3 + 64) & 1) != 0)
    {
      if (v4)
      {
        *(_QWORD *)(v3 + 56) = 0;

        v4 = *(void **)(v3 + 56);
      }
    }
    *(_QWORD *)(v3 + 56) = 0;

    v5 = *(void **)(v3 + 56);
    *(_QWORD *)(v3 + 56) = 0;

    *(_BYTE *)(v3 + 64) |= 1u;
  }
}

void nw_resolver_config_report_error(void *a1, int a2)
{
  id v3;
  unsigned __int8 *v4;
  NWConcrete_nw_path_evaluator *evaluator_for_endpoint;
  os_unfair_lock_s *v6;
  id *v7;
  id v8;
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  char *backtrace_string;
  os_log_type_t v14;
  _BOOL4 v15;
  os_log_type_t v16;
  os_log_type_t type[8];
  char v18;
  char v19;
  _BYTE buf[12];
  __int16 v21;
  char *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = (unsigned __int8 *)v3;
  if (v3)
  {
    if (!uuid_is_null((const unsigned __int8 *)v3 + 24))
    {
      evaluator_for_endpoint = nw_path_create_evaluator_for_endpoint(0, 0);
      v6 = (os_unfair_lock_s *)evaluator_for_endpoint;
      *(_QWORD *)buf = evaluator_for_endpoint;
      buf[8] = -1;
      if (evaluator_for_endpoint)
      {
        v7 = evaluator_for_endpoint;
        os_unfair_lock_lock(v6 + 24);
        v8 = v7[6];
        os_unfair_lock_unlock(v6 + 24);

      }
      else
      {
        v8 = 0;
      }
      *(_QWORD *)type = v8;
      v18 = -1;
      nw_path_report_error_to_agent(v8, v4 + 24, a2);
      if (v8)

      if (v6)
    }
    goto LABEL_10;
  }
  __nwlog_obj();
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_resolver_config_report_error";
  v10 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  v19 = 0;
  if (__nwlog_fault(v10, type, &v19))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = type[0];
      if (os_log_type_enabled(v11, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_resolver_config_report_error";
        _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v14 = type[0];
      v15 = os_log_type_enabled(v11, type[0]);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_resolver_config_report_error";
          v21 = 2082;
          v22 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_27;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_resolver_config_report_error";
        _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v16 = type[0];
      if (os_log_type_enabled(v11, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_resolver_config_report_error";
        _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_27:
  if (v10)
    free(v10);
LABEL_10:

}

void sub_1838B79EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  void *v6;
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  nw::retained_ptr<void({block_pointer} {__strong})(void)>::~retained_ptr((uint64_t)va);
  nw::retained_ptr<void({block_pointer} {__strong})(void)>::~retained_ptr((uint64_t)va1);

  _Unwind_Resume(a1);
}

uint64_t nw_resolver_config_publish(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  void *v3;
  id v4;
  uint64_t fd;
  int v6;
  _DWORD *v7;
  void *v8;
  void *v9;
  const __CFData *v10;
  uint64_t provider_description;
  const char *v12;
  const unsigned __int8 *BytePtr;
  unsigned int Length;
  int v15;
  void *v16;
  void *v17;
  void *v19;
  char *v20;
  NSObject *v21;
  os_log_type_t v22;
  char *backtrace_string;
  os_log_type_t v24;
  _BOOL4 v25;
  os_log_type_t v26;
  _QWORD v27[4];
  _QWORD *v28;
  char v29;
  os_log_type_t v30;
  uint8_t buf[4];
  const char *v32;
  __int16 v33;
  char *v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = (void *)v1[9];
    if (v3)
    {
      v27[0] = MEMORY[0x1E0C809B0];
      v27[1] = 3221225472;
      v27[2] = __nw_resolver_config_publish_block_invoke;
      v27[3] = &unk_1E14AB528;
      v28 = v1;
      v4 = v3;
      fd = nw_fd_wrapper_get_fd(v4, v27);

    }
    else
    {
      v6 = nw_network_agent_open_control_socket();
      v7 = nw_fd_wrapper_create(v6);
      v8 = (void *)v2[9];
      if ((v2[10] & 1) != 0 && v8)
      {
        v2[9] = 0;

        v8 = (void *)v2[9];
      }
      v2[9] = 0;

      v9 = (void *)v2[9];
      v2[9] = v7;

      *((_BYTE *)v2 + 80) |= 1u;
      v10 = nw_resolver_config_copy_plist_data_ref(v2);
      provider_description = nw_resolver_config_get_provider_description(v2);
      if (!provider_description)
        provider_description = nw_resolver_config_get_provider_name(v2);
      if (provider_description)
        v12 = (const char *)provider_description;
      else
        v12 = "DNS";
      BytePtr = CFDataGetBytePtr(v10);
      Length = CFDataGetLength(v10);
      v15 = nw_network_agent_ctl_setsockopt(v6, 1, (unsigned __int8 *)v2 + 24, "SystemConfig", "DNSAgent", (uint64_t)v12, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
              BytePtr,
              Length);
      fd = v15 >= 0;
      if (v15 < 0)
      {
        v16 = (void *)v2[9];
        if ((v2[10] & 1) != 0 && v16)
        {
          v2[9] = 0;

          v16 = (void *)v2[9];
        }
        v2[9] = 0;

        v17 = (void *)v2[9];
        v2[9] = 0;

        *((_BYTE *)v2 + 80) |= 1u;
      }
      if (v10)
        CFRelease(v10);
    }
    goto LABEL_19;
  }
  __nwlog_obj();
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v32 = "nw_resolver_config_publish";
  v20 = (char *)_os_log_send_and_compose_impl();

  v30 = OS_LOG_TYPE_ERROR;
  v29 = 0;
  if (__nwlog_fault(v20, &v30, &v29))
  {
    if (v30 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v21 = objc_claimAutoreleasedReturnValue();
      v22 = v30;
      if (os_log_type_enabled(v21, v30))
      {
        *(_DWORD *)buf = 136446210;
        v32 = "nw_resolver_config_publish";
        _os_log_impl(&dword_182FBE000, v21, v22, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v29)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v21 = objc_claimAutoreleasedReturnValue();
      v24 = v30;
      v25 = os_log_type_enabled(v21, v30);
      if (backtrace_string)
      {
        if (v25)
        {
          *(_DWORD *)buf = 136446466;
          v32 = "nw_resolver_config_publish";
          v33 = 2082;
          v34 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v21, v24, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_36;
      }
      if (v25)
      {
        *(_DWORD *)buf = 136446210;
        v32 = "nw_resolver_config_publish";
        _os_log_impl(&dword_182FBE000, v21, v24, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v21 = objc_claimAutoreleasedReturnValue();
      v26 = v30;
      if (os_log_type_enabled(v21, v30))
      {
        *(_DWORD *)buf = 136446210;
        v32 = "nw_resolver_config_publish";
        _os_log_impl(&dword_182FBE000, v21, v26, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_36:
  if (v20)
    free(v20);
  fd = 0;
LABEL_19:

  return fd;
}

void sub_1838B7E30(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL __nw_resolver_config_publish_block_invoke(uint64_t a1, int a2)
{
  const __CFData *v4;
  uint64_t provider_description;
  uint64_t v6;
  const char *v7;
  const unsigned __int8 *BytePtr;
  unsigned int Length;
  int v10;

  v4 = nw_resolver_config_copy_plist_data_ref(*(void **)(a1 + 32));
  provider_description = nw_resolver_config_get_provider_description(*(void **)(a1 + 32));
  if (!provider_description)
    provider_description = nw_resolver_config_get_provider_name(*(void **)(a1 + 32));
  v6 = *(_QWORD *)(a1 + 32);
  if (provider_description)
    v7 = (const char *)provider_description;
  else
    v7 = "DNS";
  BytePtr = CFDataGetBytePtr(v4);
  Length = CFDataGetLength(v4);
  v10 = nw_network_agent_ctl_setsockopt(a2, 3, (unsigned __int8 *)(v6 + 24), "SystemConfig", "DNSAgent", (uint64_t)v7, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          BytePtr,
          Length);
  if (v4)
    CFRelease(v4);
  return v10 >= 0;
}

void sub_1838B7F50(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void nw_resolver_config_unpublish(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  void *v3;
  void *v4;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = (void *)v1[9];
    if ((v1[10] & 1) != 0 && v3)
    {
      v1[9] = 0;

      v3 = (void *)v2[9];
    }
    v2[9] = 0;

    v4 = (void *)v2[9];
    v2[9] = 0;

    *((_BYTE *)v2 + 80) |= 1u;
    goto LABEL_6;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_resolver_config_unpublish";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_resolver_config_unpublish";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_resolver_config_unpublish";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_resolver_config_unpublish";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_resolver_config_unpublish";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_23:
  if (v6)
    free(v6);
LABEL_6:

}

uint64_t nw_protocol_common_add_input_handler(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  const char *v8;
  NSObject *v9;
  os_log_type_t v10;
  const char *v11;
  const char *v12;
  NSObject *v13;
  os_log_type_t v14;
  const char *v15;
  char *backtrace_string;
  _BOOL4 v17;
  const char *v18;
  _BOOL4 v19;
  char *v20;
  _BOOL4 v21;
  _BOOL4 v22;
  char *v23;
  char v24;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v27;
  __int16 v28;
  char *v29;
  __int16 v30;
  char *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v27 = "nw_protocol_common_add_input_handler";
    v8 = (const char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v24 = 0;
    if (!__nwlog_fault(v8, &type, &v24))
      goto LABEL_71;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v9 = __nwlog_obj();
      v10 = type;
      if (!os_log_type_enabled(v9, type))
        goto LABEL_71;
      *(_DWORD *)buf = 136446210;
      v27 = "nw_protocol_common_add_input_handler";
      v11 = "%{public}s called with null protocol";
      goto LABEL_70;
    }
    if (!v24)
    {
      v9 = __nwlog_obj();
      v10 = type;
      if (!os_log_type_enabled(v9, type))
        goto LABEL_71;
      *(_DWORD *)buf = 136446210;
      v27 = "nw_protocol_common_add_input_handler";
      v11 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_70;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v9 = __nwlog_obj();
    v10 = type;
    v17 = os_log_type_enabled(v9, type);
    if (!backtrace_string)
    {
      if (!v17)
        goto LABEL_71;
      *(_DWORD *)buf = 136446210;
      v27 = "nw_protocol_common_add_input_handler";
      v11 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_70;
    }
    if (!v17)
      goto LABEL_50;
    *(_DWORD *)buf = 136446466;
    v27 = "nw_protocol_common_add_input_handler";
    v28 = 2082;
    v29 = backtrace_string;
    v18 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_49:
    _os_log_impl(&dword_182FBE000, v9, v10, v18, buf, 0x16u);
    goto LABEL_50;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v27 = "nw_protocol_common_add_input_handler";
    v8 = (const char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v24 = 0;
    if (!__nwlog_fault(v8, &type, &v24))
      goto LABEL_71;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v9 = __nwlog_obj();
      v10 = type;
      if (!os_log_type_enabled(v9, type))
        goto LABEL_71;
      *(_DWORD *)buf = 136446210;
      v27 = "nw_protocol_common_add_input_handler";
      v11 = "%{public}s called with null input_protocol";
      goto LABEL_70;
    }
    if (!v24)
    {
      v9 = __nwlog_obj();
      v10 = type;
      if (!os_log_type_enabled(v9, type))
        goto LABEL_71;
      *(_DWORD *)buf = 136446210;
      v27 = "nw_protocol_common_add_input_handler";
      v11 = "%{public}s called with null input_protocol, backtrace limit exceeded";
      goto LABEL_70;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v9 = __nwlog_obj();
    v10 = type;
    v19 = os_log_type_enabled(v9, type);
    if (!backtrace_string)
    {
      if (!v19)
        goto LABEL_71;
      *(_DWORD *)buf = 136446210;
      v27 = "nw_protocol_common_add_input_handler";
      v11 = "%{public}s called with null input_protocol, no backtrace";
      goto LABEL_70;
    }
    if (!v19)
      goto LABEL_50;
    *(_DWORD *)buf = 136446466;
    v27 = "nw_protocol_common_add_input_handler";
    v28 = 2082;
    v29 = backtrace_string;
    v18 = "%{public}s called with null input_protocol, dumping backtrace:%{public}s";
    goto LABEL_49;
  }
  if (a1 == a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446466;
    v27 = "nw_protocol_common_add_input_handler";
    v28 = 2048;
    v29 = (char *)a1;
    v12 = (const char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v24 = 0;
    if (!__nwlog_fault(v12, &type, &v24))
      goto LABEL_66;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v13 = __nwlog_obj();
      v14 = type;
      if (!os_log_type_enabled(v13, type))
        goto LABEL_66;
      *(_DWORD *)buf = 136446466;
      v27 = "nw_protocol_common_add_input_handler";
      v28 = 2048;
      v29 = (char *)a1;
      v15 = "%{public}s Cannot add input handler %p to itself";
    }
    else if (v24)
    {
      v20 = (char *)__nw_create_backtrace_string();
      v13 = __nwlog_obj();
      v14 = type;
      v21 = os_log_type_enabled(v13, type);
      if (v20)
      {
        if (v21)
        {
          *(_DWORD *)buf = 136446722;
          v27 = "nw_protocol_common_add_input_handler";
          v28 = 2048;
          v29 = (char *)a1;
          v30 = 2082;
          v31 = v20;
          _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s Cannot add input handler %p to itself, dumping backtrace:%{public}s", buf, 0x20u);
        }
        free(v20);
LABEL_66:
        if (v12)
        {
          v23 = (char *)v12;
LABEL_73:
          free(v23);
        }
        return 0;
      }
      if (!v21)
        goto LABEL_66;
      *(_DWORD *)buf = 136446466;
      v27 = "nw_protocol_common_add_input_handler";
      v28 = 2048;
      v29 = (char *)a1;
      v15 = "%{public}s Cannot add input handler %p to itself, no backtrace";
    }
    else
    {
      v13 = __nwlog_obj();
      v14 = type;
      if (!os_log_type_enabled(v13, type))
        goto LABEL_66;
      *(_DWORD *)buf = 136446466;
      v27 = "nw_protocol_common_add_input_handler";
      v28 = 2048;
      v29 = (char *)a1;
      v15 = "%{public}s Cannot add input handler %p to itself, backtrace limit exceeded";
    }
    _os_log_impl(&dword_182FBE000, v13, v14, v15, buf, 0x16u);
    goto LABEL_66;
  }
  if (*(_QWORD *)(a1 + 48))
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v27 = "nw_protocol_common_add_input_handler";
    v8 = (const char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v24 = 0;
    if (!__nwlog_fault(v8, &type, &v24))
      goto LABEL_71;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v9 = __nwlog_obj();
      v10 = type;
      if (!os_log_type_enabled(v9, type))
        goto LABEL_71;
      *(_DWORD *)buf = 136446210;
      v27 = "nw_protocol_common_add_input_handler";
      v11 = "%{public}s Default input handler already exists, common add input handler does not support multiplexing protocols";
      goto LABEL_70;
    }
    if (!v24)
    {
      v9 = __nwlog_obj();
      v10 = type;
      if (!os_log_type_enabled(v9, type))
        goto LABEL_71;
      *(_DWORD *)buf = 136446210;
      v27 = "nw_protocol_common_add_input_handler";
      v11 = "%{public}s Default input handler already exists, common add input handler does not support multiplexing prot"
            "ocols, backtrace limit exceeded";
      goto LABEL_70;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v9 = __nwlog_obj();
    v10 = type;
    v22 = os_log_type_enabled(v9, type);
    if (backtrace_string)
    {
      if (v22)
      {
        *(_DWORD *)buf = 136446466;
        v27 = "nw_protocol_common_add_input_handler";
        v28 = 2082;
        v29 = backtrace_string;
        v18 = "%{public}s Default input handler already exists, common add input handler does not support multiplexing pr"
              "otocols, dumping backtrace:%{public}s";
        goto LABEL_49;
      }
LABEL_50:
      free(backtrace_string);
      goto LABEL_71;
    }
    if (!v22)
      goto LABEL_71;
    *(_DWORD *)buf = 136446210;
    v27 = "nw_protocol_common_add_input_handler";
    v11 = "%{public}s Default input handler already exists, common add input handler does not support multiplexing protoc"
          "ols, no backtrace";
LABEL_70:
    _os_log_impl(&dword_182FBE000, v9, v10, v11, buf, 0xCu);
LABEL_71:
    if (v8)
    {
      v23 = (char *)v8;
      goto LABEL_73;
    }
    return 0;
  }
  *(_QWORD *)(a1 + 48) = a2;
  if (*(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
  {
    v4 = *(_QWORD *)(a2 + 88);
    if (v4)
      *(_QWORD *)(a2 + 88) = v4 + 1;
  }
  if (*(_QWORD *)(a2 + 32))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v5 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446210;
      v27 = "nw_protocol_common_add_input_handler";
      _os_log_impl(&dword_182FBE000, v5, OS_LOG_TYPE_DEBUG, "%{public}s Output handler already exists for protocol being added as input handler", buf, 0xCu);
    }
  }
  else
  {
    *(_QWORD *)(a2 + 32) = a1;
    if (*(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
    {
      v6 = *(_QWORD *)(a1 + 88);
      if (v6)
        *(_QWORD *)(a1 + 88) = v6 + 1;
    }
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  return 1;
}

uint64_t nw_protocol_common_replace_input_handler(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v3;
  char *v6;
  const char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *v10;
  const char *v11;
  uint64_t v12;
  char *v14;
  _BOOL4 v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  void (**v19)(_QWORD);
  const void *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  void (**v24)(_QWORD);
  const void *v25;
  _QWORD *v26;
  char *v27;
  char *v28;
  const char *v29;
  NSObject *v30;
  os_log_type_t v31;
  const char *v32;
  char *backtrace_string;
  _BOOL4 v34;
  char *v35;
  _BOOL4 v36;
  const char *v37;
  _BOOL4 v38;
  char v39;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v42;
  __int16 v43;
  char *v44;
  __int16 v45;
  _QWORD *v46;
  __int16 v47;
  char *v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v42 = "nw_protocol_common_replace_input_handler";
    v29 = (const char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v39 = 0;
    if (!__nwlog_fault(v29, &type, &v39))
      goto LABEL_87;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v30 = __nwlog_obj();
      v31 = type;
      if (!os_log_type_enabled(v30, type))
        goto LABEL_87;
      *(_DWORD *)buf = 136446210;
      v42 = "nw_protocol_common_replace_input_handler";
      v32 = "%{public}s called with null protocol";
    }
    else if (v39)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v30 = __nwlog_obj();
      v31 = type;
      v34 = os_log_type_enabled(v30, type);
      if (backtrace_string)
      {
        if (v34)
        {
          *(_DWORD *)buf = 136446466;
          v42 = "nw_protocol_common_replace_input_handler";
          v43 = 2082;
          v44 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v30, v31, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_87:
        if (!v29)
          return 0;
        goto LABEL_88;
      }
      if (!v34)
        goto LABEL_87;
      *(_DWORD *)buf = 136446210;
      v42 = "nw_protocol_common_replace_input_handler";
      v32 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      v30 = __nwlog_obj();
      v31 = type;
      if (!os_log_type_enabled(v30, type))
        goto LABEL_87;
      *(_DWORD *)buf = 136446210;
      v42 = "nw_protocol_common_replace_input_handler";
      v32 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    goto LABEL_86;
  }
  v3 = a2;
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v42 = "nw_protocol_common_replace_input_handler";
    v29 = (const char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v39 = 0;
    if (!__nwlog_fault(v29, &type, &v39))
      goto LABEL_87;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v39)
      {
        v30 = __nwlog_obj();
        v31 = type;
        if (!os_log_type_enabled(v30, type))
          goto LABEL_87;
        *(_DWORD *)buf = 136446210;
        v42 = "nw_protocol_common_replace_input_handler";
        v32 = "%{public}s called with null old_input_protocol, backtrace limit exceeded";
        goto LABEL_86;
      }
      v35 = (char *)__nw_create_backtrace_string();
      v30 = __nwlog_obj();
      v31 = type;
      v36 = os_log_type_enabled(v30, type);
      if (!v35)
      {
        if (!v36)
          goto LABEL_87;
        *(_DWORD *)buf = 136446210;
        v42 = "nw_protocol_common_replace_input_handler";
        v32 = "%{public}s called with null old_input_protocol, no backtrace";
        goto LABEL_86;
      }
      if (v36)
      {
        *(_DWORD *)buf = 136446466;
        v42 = "nw_protocol_common_replace_input_handler";
        v43 = 2082;
        v44 = v35;
        v37 = "%{public}s called with null old_input_protocol, dumping backtrace:%{public}s";
LABEL_71:
        _os_log_impl(&dword_182FBE000, v30, v31, v37, buf, 0x16u);
      }
LABEL_72:
      free(v35);
      if (!v29)
        return 0;
LABEL_88:
      v28 = (char *)v29;
      goto LABEL_44;
    }
    v30 = __nwlog_obj();
    v31 = type;
    if (!os_log_type_enabled(v30, type))
      goto LABEL_87;
    *(_DWORD *)buf = 136446210;
    v42 = "nw_protocol_common_replace_input_handler";
    v32 = "%{public}s called with null old_input_protocol";
LABEL_86:
    _os_log_impl(&dword_182FBE000, v30, v31, v32, buf, 0xCu);
    goto LABEL_87;
  }
  if (!a3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v42 = "nw_protocol_common_replace_input_handler";
    v29 = (const char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v39 = 0;
    if (!__nwlog_fault(v29, &type, &v39))
      goto LABEL_87;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v30 = __nwlog_obj();
      v31 = type;
      if (!os_log_type_enabled(v30, type))
        goto LABEL_87;
      *(_DWORD *)buf = 136446210;
      v42 = "nw_protocol_common_replace_input_handler";
      v32 = "%{public}s called with null new_input_protocol";
      goto LABEL_86;
    }
    if (!v39)
    {
      v30 = __nwlog_obj();
      v31 = type;
      if (!os_log_type_enabled(v30, type))
        goto LABEL_87;
      *(_DWORD *)buf = 136446210;
      v42 = "nw_protocol_common_replace_input_handler";
      v32 = "%{public}s called with null new_input_protocol, backtrace limit exceeded";
      goto LABEL_86;
    }
    v35 = (char *)__nw_create_backtrace_string();
    v30 = __nwlog_obj();
    v31 = type;
    v38 = os_log_type_enabled(v30, type);
    if (!v35)
    {
      if (!v38)
        goto LABEL_87;
      *(_DWORD *)buf = 136446210;
      v42 = "nw_protocol_common_replace_input_handler";
      v32 = "%{public}s called with null new_input_protocol, no backtrace";
      goto LABEL_86;
    }
    if (v38)
    {
      *(_DWORD *)buf = 136446466;
      v42 = "nw_protocol_common_replace_input_handler";
      v43 = 2082;
      v44 = v35;
      v37 = "%{public}s called with null new_input_protocol, dumping backtrace:%{public}s";
      goto LABEL_71;
    }
    goto LABEL_72;
  }
  if (*(_QWORD **)(a1 + 48) == a2)
  {
    v12 = a2[4];
    if (v12)
    {
      if (*(_UNKNOWN **)(v12 + 40) == &nw_protocol_ref_counted_handle
        && (v22 = *(_QWORD *)(v12 + 88)) != 0
        && (v23 = v22 - 1, (*(_QWORD *)(v12 + 88) = v23) == 0))
      {
        v24 = *(void (***)(_QWORD))(v12 + 64);
        if (v24)
        {
          *(_QWORD *)(v12 + 64) = 0;
          v24[2](v24);
          _Block_release(v24);
        }
        if ((*(_BYTE *)(v12 + 72) & 1) != 0)
        {
          v25 = *(const void **)(v12 + 64);
          if (v25)
            _Block_release(v25);
        }
        free((void *)v12);
        v26 = *(_QWORD **)(a1 + 48);
        v3[4] = 0;
        v3 = v26;
        if (!v26)
          return nw_protocol_common_add_input_handler(a1, a3);
      }
      else
      {
        a2[4] = 0;
      }
    }
    if ((_UNKNOWN *)v3[5] == &nw_protocol_ref_counted_handle)
    {
      v17 = v3[11];
      if (v17)
      {
        v18 = v17 - 1;
        v3[11] = v18;
        if (!v18)
        {
          v19 = (void (**)(_QWORD))v3[8];
          if (v19)
          {
            v3[8] = 0;
            v19[2](v19);
            _Block_release(v19);
          }
          if ((v3[9] & 1) != 0)
          {
            v20 = (const void *)v3[8];
            if (v20)
              _Block_release(v20);
          }
          free(v3);
        }
      }
    }
    *(_QWORD *)(a1 + 48) = 0;
    return nw_protocol_common_add_input_handler(a1, a3);
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v6 = *(char **)(a1 + 48);
  *(_DWORD *)buf = 136446722;
  v42 = "nw_protocol_common_replace_input_handler";
  v43 = 2048;
  v44 = v6;
  v45 = 2048;
  v46 = v3;
  v7 = (const char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v39 = 0;
  if (!__nwlog_fault(v7, &type, &v39))
    goto LABEL_42;
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v8 = gLogObj;
    v9 = type;
    if (!os_log_type_enabled((os_log_t)gLogObj, type))
      goto LABEL_42;
    v10 = *(char **)(a1 + 48);
    *(_DWORD *)buf = 136446722;
    v42 = "nw_protocol_common_replace_input_handler";
    v43 = 2048;
    v44 = v10;
    v45 = 2048;
    v46 = v3;
    v11 = "%{public}s Old input handler does not match (%p != %p)";
LABEL_41:
    _os_log_impl(&dword_182FBE000, v8, v9, v11, buf, 0x20u);
    goto LABEL_42;
  }
  if (!v39)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v8 = gLogObj;
    v9 = type;
    if (!os_log_type_enabled((os_log_t)gLogObj, type))
      goto LABEL_42;
    v21 = *(char **)(a1 + 48);
    *(_DWORD *)buf = 136446722;
    v42 = "nw_protocol_common_replace_input_handler";
    v43 = 2048;
    v44 = v21;
    v45 = 2048;
    v46 = v3;
    v11 = "%{public}s Old input handler does not match (%p != %p), backtrace limit exceeded";
    goto LABEL_41;
  }
  v14 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v8 = gLogObj;
  v9 = type;
  v15 = os_log_type_enabled((os_log_t)gLogObj, type);
  if (!v14)
  {
    if (!v15)
      goto LABEL_42;
    v27 = *(char **)(a1 + 48);
    *(_DWORD *)buf = 136446722;
    v42 = "nw_protocol_common_replace_input_handler";
    v43 = 2048;
    v44 = v27;
    v45 = 2048;
    v46 = v3;
    v11 = "%{public}s Old input handler does not match (%p != %p), no backtrace";
    goto LABEL_41;
  }
  if (v15)
  {
    v16 = *(char **)(a1 + 48);
    *(_DWORD *)buf = 136446978;
    v42 = "nw_protocol_common_replace_input_handler";
    v43 = 2048;
    v44 = v16;
    v45 = 2048;
    v46 = v3;
    v47 = 2082;
    v48 = v14;
    _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s Old input handler does not match (%p != %p), dumping backtrace:%{public}s", buf, 0x2Au);
  }
  free(v14);
LABEL_42:
  if (v7)
  {
    v28 = (char *)v7;
LABEL_44:
    free(v28);
  }
  return 0;
}

uint64_t nw_protocol_common_remove_input_handler(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  return nw_protocol_common_remove_input_handler_with_cleanup_blocks(a1, a2, a3, 0, 0);
}

uint64_t nw_protocol_common_remove_input_handler_with_cleanup_blocks(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v10;
  void *v12;
  const char *v13;
  NSObject *v14;
  os_log_type_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, _QWORD *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (**v28)(_QWORD);
  const void *v29;
  char *v30;
  _BOOL4 v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  void (**v35)(_QWORD);
  const void *v36;
  uint64_t v37;
  uint64_t v38;
  void (**v39)(_QWORD);
  const void *v40;
  void *v41;
  void *v42;
  char *v43;
  uint64_t v45;
  uint64_t v46;
  void (**v47)(_QWORD);
  const void *v48;
  const char *v49;
  NSObject *v50;
  os_log_type_t v51;
  const char *v52;
  char *backtrace_string;
  _BOOL4 v54;
  char *v55;
  _BOOL4 v56;
  const char *v57;
  char *v58;
  NSObject *v59;
  os_log_type_t v60;
  const char *v61;
  const char *v62;
  char *v63;
  _BOOL4 v64;
  const char *v65;
  const char *v66;
  const char *v67;
  char v68;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v71;
  __int16 v72;
  void *v73;
  __int16 v74;
  _QWORD *v75;
  __int16 v76;
  char *v77;
  uint64_t v78;

  v78 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v71 = "nw_protocol_common_remove_input_handler_with_cleanup_blocks";
    v49 = (const char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v68 = 0;
    if (!__nwlog_fault(v49, &type, &v68))
      goto LABEL_126;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v50 = __nwlog_obj();
      v51 = type;
      if (!os_log_type_enabled(v50, type))
        goto LABEL_126;
      *(_DWORD *)buf = 136446210;
      v71 = "nw_protocol_common_remove_input_handler_with_cleanup_blocks";
      v52 = "%{public}s called with null protocol";
      goto LABEL_125;
    }
    if (!v68)
    {
      v50 = __nwlog_obj();
      v51 = type;
      if (!os_log_type_enabled(v50, type))
        goto LABEL_126;
      *(_DWORD *)buf = 136446210;
      v71 = "nw_protocol_common_remove_input_handler_with_cleanup_blocks";
      v52 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_125;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v50 = __nwlog_obj();
    v51 = type;
    v54 = os_log_type_enabled(v50, type);
    if (!backtrace_string)
    {
      if (!v54)
        goto LABEL_126;
      *(_DWORD *)buf = 136446210;
      v71 = "nw_protocol_common_remove_input_handler_with_cleanup_blocks";
      v52 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_125;
    }
    if (v54)
    {
      *(_DWORD *)buf = 136446466;
      v71 = "nw_protocol_common_remove_input_handler_with_cleanup_blocks";
      v72 = 2082;
      v73 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v50, v51, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(backtrace_string);
LABEL_126:
    if (!v49)
      return 0;
    goto LABEL_127;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v71 = "nw_protocol_common_remove_input_handler_with_cleanup_blocks";
    v49 = (const char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v68 = 0;
    if (!__nwlog_fault(v49, &type, &v68))
      goto LABEL_126;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v50 = __nwlog_obj();
      v51 = type;
      if (!os_log_type_enabled(v50, type))
        goto LABEL_126;
      *(_DWORD *)buf = 136446210;
      v71 = "nw_protocol_common_remove_input_handler_with_cleanup_blocks";
      v52 = "%{public}s called with null input_protocol";
      goto LABEL_125;
    }
    if (!v68)
    {
      v50 = __nwlog_obj();
      v51 = type;
      if (!os_log_type_enabled(v50, type))
        goto LABEL_126;
      *(_DWORD *)buf = 136446210;
      v71 = "nw_protocol_common_remove_input_handler_with_cleanup_blocks";
      v52 = "%{public}s called with null input_protocol, backtrace limit exceeded";
      goto LABEL_125;
    }
    v55 = (char *)__nw_create_backtrace_string();
    v50 = __nwlog_obj();
    v51 = type;
    v56 = os_log_type_enabled(v50, type);
    if (v55)
    {
      if (v56)
      {
        *(_DWORD *)buf = 136446466;
        v71 = "nw_protocol_common_remove_input_handler_with_cleanup_blocks";
        v72 = 2082;
        v73 = v55;
        _os_log_impl(&dword_182FBE000, v50, v51, "%{public}s called with null input_protocol, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v55);
      if (!v49)
        return 0;
LABEL_127:
      v43 = (char *)v49;
      goto LABEL_72;
    }
    if (v56)
    {
      *(_DWORD *)buf = 136446210;
      v71 = "nw_protocol_common_remove_input_handler_with_cleanup_blocks";
      v52 = "%{public}s called with null input_protocol, no backtrace";
LABEL_125:
      _os_log_impl(&dword_182FBE000, v50, v51, v52, buf, 0xCu);
      goto LABEL_126;
    }
    goto LABEL_126;
  }
  v10 = (_QWORD *)a2[4];
  if (v10 == a1 && v10 != 0)
  {
    if ((_UNKNOWN *)a1[5] == &nw_protocol_ref_counted_handle)
    {
      v33 = a1[11];
      if (v33)
      {
        v34 = v33 - 1;
        a1[11] = v34;
        if (!v34)
        {
          v35 = (void (**)(_QWORD))a1[8];
          if (v35)
          {
            a1[8] = 0;
            v35[2](v35);
            _Block_release(v35);
          }
          if ((a1[9] & 1) != 0)
          {
            v36 = (const void *)a1[8];
            if (v36)
              _Block_release(v36);
          }
          free(a1);
        }
      }
    }
    a2[4] = 0;
  }
  if ((_QWORD *)a1[6] != a2)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v12 = (void *)a1[6];
    *(_DWORD *)buf = 136446722;
    v71 = "nw_protocol_common_remove_input_handler_with_cleanup_blocks";
    v72 = 2048;
    v73 = v12;
    v74 = 2048;
    v75 = a2;
    v13 = (const char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v68 = 0;
    if (__nwlog_fault(v13, &type, &v68))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v14 = gLogObj;
        v15 = type;
        if (os_log_type_enabled((os_log_t)gLogObj, type))
        {
          v16 = (void *)a1[6];
          *(_DWORD *)buf = 136446722;
          v71 = "nw_protocol_common_remove_input_handler_with_cleanup_blocks";
          v72 = 2048;
          v73 = v16;
          v74 = 2048;
          v75 = a2;
          v17 = "%{public}s Input protocol does not match (%p != %p)";
LABEL_69:
          _os_log_impl(&dword_182FBE000, v14, v15, v17, buf, 0x20u);
        }
      }
      else if (v68)
      {
        v30 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v14 = gLogObj;
        v15 = type;
        v31 = os_log_type_enabled((os_log_t)gLogObj, type);
        if (v30)
        {
          if (v31)
          {
            v32 = (void *)a1[6];
            *(_DWORD *)buf = 136446978;
            v71 = "nw_protocol_common_remove_input_handler_with_cleanup_blocks";
            v72 = 2048;
            v73 = v32;
            v74 = 2048;
            v75 = a2;
            v76 = 2082;
            v77 = v30;
            _os_log_impl(&dword_182FBE000, v14, v15, "%{public}s Input protocol does not match (%p != %p), dumping backtrace:%{public}s", buf, 0x2Au);
          }
          free(v30);
          goto LABEL_70;
        }
        if (v31)
        {
          v42 = (void *)a1[6];
          *(_DWORD *)buf = 136446722;
          v71 = "nw_protocol_common_remove_input_handler_with_cleanup_blocks";
          v72 = 2048;
          v73 = v42;
          v74 = 2048;
          v75 = a2;
          v17 = "%{public}s Input protocol does not match (%p != %p), no backtrace";
          goto LABEL_69;
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v14 = gLogObj;
        v15 = type;
        if (os_log_type_enabled((os_log_t)gLogObj, type))
        {
          v41 = (void *)a1[6];
          *(_DWORD *)buf = 136446722;
          v71 = "nw_protocol_common_remove_input_handler_with_cleanup_blocks";
          v72 = 2048;
          v73 = v41;
          v74 = 2048;
          v75 = a2;
          v17 = "%{public}s Input protocol does not match (%p != %p), backtrace limit exceeded";
          goto LABEL_69;
        }
      }
    }
LABEL_70:
    if (!v13)
      return 0;
    v43 = (char *)v13;
LABEL_72:
    free(v43);
    return 0;
  }
  if ((_UNKNOWN *)a2[5] == &nw_protocol_ref_counted_handle)
  {
    v37 = a2[11];
    if (v37)
    {
      v38 = v37 - 1;
      a2[11] = v38;
      if (!v38)
      {
        v39 = (void (**)(_QWORD))a2[8];
        if (v39)
        {
          a2[8] = 0;
          v39[2](v39);
          _Block_release(v39);
        }
        if ((a2[9] & 1) != 0)
        {
          v40 = (const void *)a2[8];
          if (v40)
            _Block_release(v40);
        }
        free(a2);
      }
    }
  }
  a1[6] = 0;
  if (a4)
    (*(void (**)(uint64_t))(a4 + 16))(a4);
  v18 = a1[4];
  if (v18)
  {
    v19 = *(void **)(v18 + 40);
    if (v19 == &nw_protocol_ref_counted_handle)
    {
      v20 = *(_QWORD *)(v18 + 88);
      if (v20)
        *(_QWORD *)(v18 + 88) = v20 + 1;
    }
    v21 = (void *)a1[5];
    if (v21 == &nw_protocol_ref_counted_handle)
    {
      v22 = a1[11];
      if (v22)
        a1[11] = v22 + 1;
    }
    v23 = *(_QWORD *)(v18 + 24);
    if (v23)
    {
      v24 = *(uint64_t (**)(uint64_t, _QWORD *, uint64_t))(v23 + 8);
      if (v24)
      {
        v25 = v24(v18, a1, a3);
        if (v21 != &nw_protocol_ref_counted_handle)
        {
LABEL_28:
          if (v19 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(v18 + 40) == &nw_protocol_ref_counted_handle)
          {
            v26 = *(_QWORD *)(v18 + 88);
            if (v26)
            {
              v27 = v26 - 1;
              *(_QWORD *)(v18 + 88) = v27;
              if (!v27)
              {
                v28 = *(void (***)(_QWORD))(v18 + 64);
                if (v28)
                {
                  *(_QWORD *)(v18 + 64) = 0;
                  v28[2](v28);
                  _Block_release(v28);
                }
                if ((*(_BYTE *)(v18 + 72) & 1) != 0)
                {
                  v29 = *(const void **)(v18 + 64);
                  if (v29)
                    _Block_release(v29);
                }
                free((void *)v18);
              }
            }
          }
          goto LABEL_60;
        }
LABEL_27:
        if ((_UNKNOWN *)a1[5] == &nw_protocol_ref_counted_handle)
        {
          v45 = a1[11];
          if (v45)
          {
            v46 = v45 - 1;
            a1[11] = v46;
            if (!v46)
            {
              v47 = (void (**)(_QWORD))a1[8];
              if (v47)
              {
                a1[8] = 0;
                v47[2](v47);
                _Block_release(v47);
              }
              if ((a1[9] & 1) != 0)
              {
                v48 = (const void *)a1[8];
                if (v48)
                  _Block_release(v48);
              }
              free(a1);
            }
          }
        }
        goto LABEL_28;
      }
    }
    __nwlog_obj();
    v57 = *(const char **)(v18 + 16);
    *(_DWORD *)buf = 136446722;
    v71 = "__nw_protocol_remove_input_handler";
    if (!v57)
      v57 = "invalid";
    v72 = 2082;
    v73 = (void *)v57;
    v74 = 2048;
    v75 = (_QWORD *)v18;
    v58 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v68 = 0;
    if (__nwlog_fault(v58, &type, &v68))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v59 = __nwlog_obj();
        v60 = type;
        if (!os_log_type_enabled(v59, type))
          goto LABEL_137;
        v61 = *(const char **)(v18 + 16);
        if (!v61)
          v61 = "invalid";
        *(_DWORD *)buf = 136446722;
        v71 = "__nw_protocol_remove_input_handler";
        v72 = 2082;
        v73 = (void *)v61;
        v74 = 2048;
        v75 = (_QWORD *)v18;
        v62 = "%{public}s protocol %{public}s (%p) has invalid remove_input_handler callback";
LABEL_136:
        _os_log_impl(&dword_182FBE000, v59, v60, v62, buf, 0x20u);
        goto LABEL_137;
      }
      if (!v68)
      {
        v59 = __nwlog_obj();
        v60 = type;
        if (!os_log_type_enabled(v59, type))
          goto LABEL_137;
        v66 = *(const char **)(v18 + 16);
        if (!v66)
          v66 = "invalid";
        *(_DWORD *)buf = 136446722;
        v71 = "__nw_protocol_remove_input_handler";
        v72 = 2082;
        v73 = (void *)v66;
        v74 = 2048;
        v75 = (_QWORD *)v18;
        v62 = "%{public}s protocol %{public}s (%p) has invalid remove_input_handler callback, backtrace limit exceeded";
        goto LABEL_136;
      }
      v63 = (char *)__nw_create_backtrace_string();
      v59 = __nwlog_obj();
      v60 = type;
      v64 = os_log_type_enabled(v59, type);
      if (!v63)
      {
        if (!v64)
          goto LABEL_137;
        v67 = *(const char **)(v18 + 16);
        if (!v67)
          v67 = "invalid";
        *(_DWORD *)buf = 136446722;
        v71 = "__nw_protocol_remove_input_handler";
        v72 = 2082;
        v73 = (void *)v67;
        v74 = 2048;
        v75 = (_QWORD *)v18;
        v62 = "%{public}s protocol %{public}s (%p) has invalid remove_input_handler callback, no backtrace";
        goto LABEL_136;
      }
      if (v64)
      {
        v65 = *(const char **)(v18 + 16);
        if (!v65)
          v65 = "invalid";
        *(_DWORD *)buf = 136446978;
        v71 = "__nw_protocol_remove_input_handler";
        v72 = 2082;
        v73 = (void *)v65;
        v74 = 2048;
        v75 = (_QWORD *)v18;
        v76 = 2082;
        v77 = v63;
        _os_log_impl(&dword_182FBE000, v59, v60, "%{public}s protocol %{public}s (%p) has invalid remove_input_handler callback, dumping backtrace:%{public}s", buf, 0x2Au);
      }
      free(v63);
    }
LABEL_137:
    if (v58)
      free(v58);
    v25 = 0;
    if (v21 != &nw_protocol_ref_counted_handle)
      goto LABEL_28;
    goto LABEL_27;
  }
  v25 = 1;
LABEL_60:
  if ((_DWORD)a3 && (_UNKNOWN *)a1[5] != &nw_protocol_ref_counted_handle)
    a1[5] = 0;
  if (a5)
    (*(void (**)(uint64_t))(a5 + 16))(a5);
  return v25;
}

uint64_t nw_protocol_common_get_input_frames(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (**v17)(_QWORD);
  const void *v18;
  char *v19;
  NSObject *v20;
  os_log_type_t v21;
  const char *v22;
  char *backtrace_string;
  _BOOL4 v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  void (**v28)(_QWORD);
  const void *v29;
  const char *v31;
  char *v32;
  NSObject *v33;
  os_log_type_t v34;
  const char *v35;
  const char *v36;
  char *v37;
  _BOOL4 v38;
  const char *v39;
  _BOOL4 v40;
  _BOOL4 v41;
  _BOOL4 v42;
  const char *v43;
  const char *v44;
  char v45;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v48;
  __int16 v49;
  void *v50;
  __int16 v51;
  uint64_t v52;
  __int16 v53;
  char *v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v48 = "nw_protocol_common_get_input_frames";
    v19 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v45 = 0;
    if (!__nwlog_fault(v19, &type, &v45))
      goto LABEL_48;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v20 = __nwlog_obj();
      v21 = type;
      if (!os_log_type_enabled(v20, type))
        goto LABEL_48;
      *(_DWORD *)buf = 136446210;
      v48 = "nw_protocol_common_get_input_frames";
      v22 = "%{public}s called with null protocol";
      goto LABEL_47;
    }
    if (!v45)
    {
      v20 = __nwlog_obj();
      v21 = type;
      if (!os_log_type_enabled(v20, type))
        goto LABEL_48;
      *(_DWORD *)buf = 136446210;
      v48 = "nw_protocol_common_get_input_frames";
      v22 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_47;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v20 = __nwlog_obj();
    v21 = type;
    v40 = os_log_type_enabled(v20, type);
    if (!backtrace_string)
    {
      if (!v40)
        goto LABEL_48;
      *(_DWORD *)buf = 136446210;
      v48 = "nw_protocol_common_get_input_frames";
      v22 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_47;
    }
    if (!v40)
      goto LABEL_34;
    *(_DWORD *)buf = 136446466;
    v48 = "nw_protocol_common_get_input_frames";
    v49 = 2082;
    v50 = backtrace_string;
    v25 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
    goto LABEL_33;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v48 = "nw_protocol_common_get_input_frames";
    v19 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v45 = 0;
    if (!__nwlog_fault(v19, &type, &v45))
      goto LABEL_48;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v20 = __nwlog_obj();
      v21 = type;
      if (!os_log_type_enabled(v20, type))
        goto LABEL_48;
      *(_DWORD *)buf = 136446210;
      v48 = "nw_protocol_common_get_input_frames";
      v22 = "%{public}s called with null input_protocol";
      goto LABEL_47;
    }
    if (!v45)
    {
      v20 = __nwlog_obj();
      v21 = type;
      if (!os_log_type_enabled(v20, type))
        goto LABEL_48;
      *(_DWORD *)buf = 136446210;
      v48 = "nw_protocol_common_get_input_frames";
      v22 = "%{public}s called with null input_protocol, backtrace limit exceeded";
      goto LABEL_47;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v20 = __nwlog_obj();
    v21 = type;
    v41 = os_log_type_enabled(v20, type);
    if (!backtrace_string)
    {
      if (!v41)
        goto LABEL_48;
      *(_DWORD *)buf = 136446210;
      v48 = "nw_protocol_common_get_input_frames";
      v22 = "%{public}s called with null input_protocol, no backtrace";
      goto LABEL_47;
    }
    if (!v41)
      goto LABEL_34;
    *(_DWORD *)buf = 136446466;
    v48 = "nw_protocol_common_get_input_frames";
    v49 = 2082;
    v50 = backtrace_string;
    v25 = "%{public}s called with null input_protocol, dumping backtrace:%{public}s";
    goto LABEL_33;
  }
  if (!a6)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v48 = "nw_protocol_common_get_input_frames";
    v19 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v45 = 0;
    if (!__nwlog_fault(v19, &type, &v45))
      goto LABEL_48;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v20 = __nwlog_obj();
      v21 = type;
      if (!os_log_type_enabled(v20, type))
        goto LABEL_48;
      *(_DWORD *)buf = 136446210;
      v48 = "nw_protocol_common_get_input_frames";
      v22 = "%{public}s called with null return_array";
      goto LABEL_47;
    }
    if (!v45)
    {
      v20 = __nwlog_obj();
      v21 = type;
      if (!os_log_type_enabled(v20, type))
        goto LABEL_48;
      *(_DWORD *)buf = 136446210;
      v48 = "nw_protocol_common_get_input_frames";
      v22 = "%{public}s called with null return_array, backtrace limit exceeded";
      goto LABEL_47;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v20 = __nwlog_obj();
    v21 = type;
    v42 = os_log_type_enabled(v20, type);
    if (!backtrace_string)
    {
      if (!v42)
        goto LABEL_48;
      *(_DWORD *)buf = 136446210;
      v48 = "nw_protocol_common_get_input_frames";
      v22 = "%{public}s called with null return_array, no backtrace";
      goto LABEL_47;
    }
    if (!v42)
      goto LABEL_34;
    *(_DWORD *)buf = 136446466;
    v48 = "nw_protocol_common_get_input_frames";
    v49 = 2082;
    v50 = backtrace_string;
    v25 = "%{public}s called with null return_array, dumping backtrace:%{public}s";
    goto LABEL_33;
  }
  v7 = *(_QWORD *)(a1 + 32);
  if (v7)
  {
    v8 = *(void **)(v7 + 40);
    if (v8 == &nw_protocol_ref_counted_handle)
    {
      v9 = *(_QWORD *)(v7 + 88);
      if (v9)
        *(_QWORD *)(v7 + 88) = v9 + 1;
    }
    v10 = *(void **)(a1 + 40);
    if (v10 == &nw_protocol_ref_counted_handle)
    {
      v11 = *(_QWORD *)(a1 + 88);
      if (v11)
        *(_QWORD *)(a1 + 88) = v11 + 1;
    }
    v12 = *(_QWORD *)(v7 + 24);
    if (v12)
    {
      v13 = *(uint64_t (**)(uint64_t, uint64_t))(v12 + 80);
      if (v13)
      {
        v14 = v13(v7, a1);
        if (v10 != &nw_protocol_ref_counted_handle)
        {
LABEL_15:
          if (v8 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(v7 + 40) == &nw_protocol_ref_counted_handle)
          {
            v15 = *(_QWORD *)(v7 + 88);
            if (v15)
            {
              v16 = v15 - 1;
              *(_QWORD *)(v7 + 88) = v16;
              if (!v16)
              {
                v17 = *(void (***)(_QWORD))(v7 + 64);
                if (v17)
                {
                  *(_QWORD *)(v7 + 64) = 0;
                  v17[2](v17);
                  _Block_release(v17);
                }
                if ((*(_BYTE *)(v7 + 72) & 1) != 0)
                {
                  v18 = *(const void **)(v7 + 64);
                  if (v18)
                    _Block_release(v18);
                }
                free((void *)v7);
              }
            }
          }
          return v14;
        }
LABEL_14:
        if (*(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
        {
          v26 = *(_QWORD *)(a1 + 88);
          if (v26)
          {
            v27 = v26 - 1;
            *(_QWORD *)(a1 + 88) = v27;
            if (!v27)
            {
              v28 = *(void (***)(_QWORD))(a1 + 64);
              if (v28)
              {
                *(_QWORD *)(a1 + 64) = 0;
                v28[2](v28);
                _Block_release(v28);
              }
              if ((*(_BYTE *)(a1 + 72) & 1) != 0)
              {
                v29 = *(const void **)(a1 + 64);
                if (v29)
                  _Block_release(v29);
              }
              free((void *)a1);
            }
          }
        }
        goto LABEL_15;
      }
    }
    __nwlog_obj();
    v31 = *(const char **)(v7 + 16);
    *(_DWORD *)buf = 136446722;
    v48 = "__nw_protocol_get_input_frames";
    if (!v31)
      v31 = "invalid";
    v49 = 2082;
    v50 = (void *)v31;
    v51 = 2048;
    v52 = v7;
    v32 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v45 = 0;
    if (__nwlog_fault(v32, &type, &v45))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v33 = __nwlog_obj();
        v34 = type;
        if (!os_log_type_enabled(v33, type))
          goto LABEL_106;
        v35 = *(const char **)(v7 + 16);
        if (!v35)
          v35 = "invalid";
        *(_DWORD *)buf = 136446722;
        v48 = "__nw_protocol_get_input_frames";
        v49 = 2082;
        v50 = (void *)v35;
        v51 = 2048;
        v52 = v7;
        v36 = "%{public}s protocol %{public}s (%p) has invalid get_input_frames callback";
LABEL_105:
        _os_log_impl(&dword_182FBE000, v33, v34, v36, buf, 0x20u);
        goto LABEL_106;
      }
      if (!v45)
      {
        v33 = __nwlog_obj();
        v34 = type;
        if (!os_log_type_enabled(v33, type))
          goto LABEL_106;
        v43 = *(const char **)(v7 + 16);
        if (!v43)
          v43 = "invalid";
        *(_DWORD *)buf = 136446722;
        v48 = "__nw_protocol_get_input_frames";
        v49 = 2082;
        v50 = (void *)v43;
        v51 = 2048;
        v52 = v7;
        v36 = "%{public}s protocol %{public}s (%p) has invalid get_input_frames callback, backtrace limit exceeded";
        goto LABEL_105;
      }
      v37 = (char *)__nw_create_backtrace_string();
      v33 = __nwlog_obj();
      v34 = type;
      v38 = os_log_type_enabled(v33, type);
      if (!v37)
      {
        if (!v38)
          goto LABEL_106;
        v44 = *(const char **)(v7 + 16);
        if (!v44)
          v44 = "invalid";
        *(_DWORD *)buf = 136446722;
        v48 = "__nw_protocol_get_input_frames";
        v49 = 2082;
        v50 = (void *)v44;
        v51 = 2048;
        v52 = v7;
        v36 = "%{public}s protocol %{public}s (%p) has invalid get_input_frames callback, no backtrace";
        goto LABEL_105;
      }
      if (v38)
      {
        v39 = *(const char **)(v7 + 16);
        if (!v39)
          v39 = "invalid";
        *(_DWORD *)buf = 136446978;
        v48 = "__nw_protocol_get_input_frames";
        v49 = 2082;
        v50 = (void *)v39;
        v51 = 2048;
        v52 = v7;
        v53 = 2082;
        v54 = v37;
        _os_log_impl(&dword_182FBE000, v33, v34, "%{public}s protocol %{public}s (%p) has invalid get_input_frames callback, dumping backtrace:%{public}s", buf, 0x2Au);
      }
      free(v37);
    }
LABEL_106:
    if (v32)
      free(v32);
    v14 = 0;
    if (v10 != &nw_protocol_ref_counted_handle)
      goto LABEL_15;
    goto LABEL_14;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)buf = 136446210;
  v48 = "nw_protocol_common_get_input_frames";
  v19 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v45 = 0;
  if (!__nwlog_fault(v19, &type, &v45))
    goto LABEL_48;
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v20 = gLogObj;
    v21 = type;
    if (os_log_type_enabled((os_log_t)gLogObj, type))
    {
      *(_DWORD *)buf = 136446210;
      v48 = "nw_protocol_common_get_input_frames";
      v22 = "%{public}s get_input_frames requires an output handler";
LABEL_47:
      _os_log_impl(&dword_182FBE000, v20, v21, v22, buf, 0xCu);
      goto LABEL_48;
    }
    goto LABEL_48;
  }
  if (v45)
  {
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v20 = gLogObj;
    v21 = type;
    v24 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (v24)
      {
        *(_DWORD *)buf = 136446210;
        v48 = "nw_protocol_common_get_input_frames";
        v22 = "%{public}s get_input_frames requires an output handler, no backtrace";
        goto LABEL_47;
      }
      goto LABEL_48;
    }
    if (!v24)
    {
LABEL_34:
      free(backtrace_string);
      goto LABEL_48;
    }
    *(_DWORD *)buf = 136446466;
    v48 = "nw_protocol_common_get_input_frames";
    v49 = 2082;
    v50 = backtrace_string;
    v25 = "%{public}s get_input_frames requires an output handler, dumping backtrace:%{public}s";
LABEL_33:
    _os_log_impl(&dword_182FBE000, v20, v21, v25, buf, 0x16u);
    goto LABEL_34;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v20 = gLogObj;
  v21 = type;
  if (os_log_type_enabled((os_log_t)gLogObj, type))
  {
    *(_DWORD *)buf = 136446210;
    v48 = "nw_protocol_common_get_input_frames";
    v22 = "%{public}s get_input_frames requires an output handler, backtrace limit exceeded";
    goto LABEL_47;
  }
LABEL_48:
  if (v19)
    free(v19);
  return 0;
}

